CN117194609A - Providing command bundle suggestions for automated assistants - Google Patents
Providing command bundle suggestions for automated assistants Download PDFInfo
- Publication number
- CN117194609A CN117194609A CN202311179263.9A CN202311179263A CN117194609A CN 117194609 A CN117194609 A CN 117194609A CN 202311179263 A CN202311179263 A CN 202311179263A CN 117194609 A CN117194609 A CN 117194609A
- Authority
- CN
- China
- Prior art keywords
- command bundle
- particular user
- bundle
- given
- user
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 230000009471 action Effects 0.000 claims abstract description 228
- 238000010801 machine learning Methods 0.000 claims abstract description 16
- 230000004044 response Effects 0.000 claims description 90
- 238000000034 method Methods 0.000 claims description 77
- 230000002093 peripheral effect Effects 0.000 claims description 61
- 230000003993 interaction Effects 0.000 claims description 48
- 238000012545 processing Methods 0.000 claims description 35
- 230000008569 process Effects 0.000 claims description 11
- 230000015654 memory Effects 0.000 claims description 7
- 230000001755 vocal effect Effects 0.000 claims description 6
- 230000002730 additional effect Effects 0.000 claims 2
- 239000003795 chemical substances by application Substances 0.000 description 58
- 230000000875 corresponding effect Effects 0.000 description 48
- 238000012549 training Methods 0.000 description 12
- 238000004891 communication Methods 0.000 description 8
- 238000001914 filtration Methods 0.000 description 7
- 238000006243 chemical reaction Methods 0.000 description 3
- 238000012790 confirmation Methods 0.000 description 3
- 230000006855 networking Effects 0.000 description 3
- 238000011524 similarity measure Methods 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- 239000008186 active pharmaceutical agent Substances 0.000 description 2
- 238000013528 artificial neural network Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000029087 digestion Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000003213 activating effect Effects 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 230000001276 controlling effect Effects 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 239000011521 glass Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000003550 marker Substances 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- APTZNLHMIGJTEW-UHFFFAOYSA-N pyraflufen-ethyl Chemical compound C1=C(Cl)C(OCC(=O)OCC)=CC(C=2C(=C(OC(F)F)N(C)N=2)Cl)=C1F APTZNLHMIGJTEW-UHFFFAOYSA-N 0.000 description 1
- 239000011435 rock Substances 0.000 description 1
- 238000010079 rubber tapping Methods 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000007704 transition Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9032—Query formulation
- G06F16/90332—Natural language query formulation or dialogue systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/3332—Query translation
- G06F16/3334—Selection or weighting of terms from queries, including natural language queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
- G06F40/216—Parsing using statistical methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
- G06F40/35—Discourse or dialogue representation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/02—Knowledge representation; Symbolic representation
- G06N5/022—Knowledge engineering; Knowledge acquisition
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/223—Execution procedure of a spoken command
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/226—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics
- G10L2015/227—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics of the speaker; Human-factor methodology
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/226—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics
- G10L2015/228—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics of application context
Abstract
The present application relates to generating and/or recommending command bundles for a user of an automated assistant. The command bundle includes a plurality of discrete actions that can be performed by the automated assistant. One or more of the actions of the command bundle may cause corresponding commands and/or other data to be transmitted to one or more devices and/or agents other than the devices and/or agents to which data is transmitted based on other actions of the bundle. The implementation determines command bundles that may be relevant to the user and presents these command bundles to the user as suggestions. In some of those implementations, a machine learning model is utilized to generate a user action embedding for the user and a command bundle embedding for each of the plurality of command bundles. The command bundles may be selected for suggestion based on a comparison of user action embedding and command bundle embedding.
Description
Description of the division
The application belongs to a divisional application of Chinese application patent application No.201880038793.2 with the application date of 2018, 10 month and 2 days.
Technical Field
The application relates to providing command bundle suggestions for an automated assistant.
Background
Automated assistants (also referred to as "personal assistants," "mobile assistants," etc.) may be interacted with by users via various client devices such as smartphones, tablet computers, wearable devices, automotive systems, and stand-alone personal assistant devices. The automated assistant receives input (e.g., typed and/or spoken natural language input) from the user and responds with responsive content (e.g., visual and/or audible natural language output) and/or by controlling one or more peripheral devices (e.g., internet of things (loT) devices). An automated assistant interacting with a client device via the client device may be implemented via the client device itself and/or via one or more remote computing devices (e.g., computing devices in a "cloud") in network communication with the client device.
An automated assistant is typically configured to perform various actions, where each action is performed in response to a predetermined canonical command (or a slight variation thereof) that is mapped to the action. For example, in response to receiving a verbal command "Assistant, turn off my living room lights (Assistant, turn off My parlor light)", the automated Assistant may cause one or more commands to be transmitted that transition the networking lights of the user labeled "parlor" lights to an "off" state. As another example, in response to receiving a separate verbal command "Assistant, what is tomorrow's weather," the automated Assistant may issue one or more queries and/or interact with a third party agent to address the forecast of "tomorrow's weather" for the location of the user issuing the voice command and provide a graphical and/or audible output of the forecasted weather that is communicated to tomorrow.
However, a user utilizing an automated assistant may not be aware of many of the actions that the automated assistant may perform and/or may not be aware of canonical commands that may be provided by the user to cause the actions to be performed by the automated assistant. As a result, many users can only employ a limited number of automated assistant functionalities. While conventional recommendations of canonical commands and associated actions (e.g., "Try saying X to get a weather report for tomorrow (attempting to say X to get a weather report of tomorrow)") may be provided to users interacting with automated assistants, such conventional recommendations are typically provided blindly to users. As a result, significant network and/or computing resources are wasted in providing irrelevant recommendations to the user. Moreover, such conventional recommendations are typically only for a single action. In order to perform multiple actions, a user must provide multiple different canonical commands through multiple conversational loops with the automated assistant, consuming a significant amount of network and/or computing resources in performing the multiple actions.
Disclosure of Invention
The present specification is directed to methods, apparatus, and computer-readable media (transitory and non-transitory) for generating and/or recommending command bundles for users of an automated assistant application. The command bundle includes a plurality of discrete actions that can be performed by the automated assistant application. For example, the "good night" bundle may cause the automated assistant application to: a first action of transmitting a command to turn off one or more networked lights; transmitting a command to set an alarm clock of the user's computing device to a second action sounded at 8:00 am; and, a third action of transmitting a command requesting "tomorrow" local weather and audibly presenting the response content; etc.
As can be appreciated from the foregoing examples, one or more of the actions of the command bundle may cause corresponding commands and/or other data to be transmitted to one or more devices and/or agents that are different from the devices and/or agents to which data is transmitted based on other actions of the bundle. For example, in the previous example, for a first action, a command may be transmitted to a networked light (and/or a hardware bridge in communication with a networked light), while in a third action, a separate command may be transmitted to a remote computing device hosting a "weather" agent. The command bundles may be activated in response to various prompts, such as speaking one of one or more call phrases of the command bundles (e.g., "evening" bundles), activating graphical user interface elements of the command bundles (e.g., "shortcut" icons of the command bundles), and/or occurrence of one or more contextual conditions (e.g., occurrence of 10:00pm for "evening" bundles).
The command bundles may be generated from scratch and/or based on historical data collected during interactions between one or more users and the automated assistant. For example, a command bundle may be generated from scratch by a programmer specifying actions for the command bundle, and for each of one or more of the actions, one or more fixed slot values may be optionally specified for one or more slots (slots) of the action. As another example, the command bundles may be automatically generated by: collecting command phrases issued by each of a plurality of corresponding users within a short period of each other-and generating a corresponding command bundle that, when activated, causes actions associated with the collected command phrases to be performed. For example, command bundles having first, second, and third actions may be automatically generated based at least on a threshold number of users each performing the first, second, and third actions within one minute of each other through interaction with their automated assistants.
Implementations disclosed herein relate to determining command bundles that may be relevant to a given user, and presenting those command bundles to the given user as suggestions/recommendations. In some of those implementations, a machine learning model may be trained that receives as input indications of one or more automated assistant "actions" (and optionally slot values and/or other parameters of the actions) and provides as output an embedding that provides semantic representations of these "actions" (and optionally slot values and/or other parameters) in a multidimensional space.
The machine learning model may be used to process actions (and optionally slot values and/or other parameters) performed by a given user through an automated assistant application to generate a "user action insert. Further, for each of the command bundles, a machine learning model (or another machine learning model) may be used to process the actions of the command bundles (and optionally slot values and/or other parameters) to generate a "command bundle embed. The command bundles having "command bundle embedding" most similar to "user action embedding" may then be provided as recommendations to a given user. For example, if a given user uses only an automated assistant application of "music" and "light control" actions, then "user action embedding" may represent those actions. Command bundles with corresponding "music" and "light control" actions will have a command bundle embedding more similar to "user action embedding" than, for example, command bundles lacking music or light control actions. In these and other ways, a command bundle that is graphically and/or audibly recommended to a given user may be first determined to be likely to be relevant to the given user by comparing features of the command bundle with features of past interactions of the given user with the automated assistant application.
Further, in some implementations, the desired peripheral and/or other parameters of one or more actions of the command bundle may be considered in determining whether to recommend the command bundle to the user. For example, certain command bundles may be filtered out based on determining that a given user lacks the peripheral devices required for the command bundles (e.g., prior to similarity determination). For example, based on determining that no networking light is associated with a given user of the automated assistant application, a given command bundle that requires networking lights to perform an action may be filtered from consideration as a recommendation for the given user. Also, for example, in generating the user embedding and/or command bundle embedding described above and elsewhere herein, an indication of the peripheral device of the user and/or the peripheral device of the command bundle may additionally be applied as input.
In some implementations, at least one action of the command bundle recommended to a given user may include at least one slot lacking a fixed value (i.e., a slot having an explicit "undefined" or "variable" value or a defined slot lacking any value of the slot). In some of those implementations, when a command bundle is selected by a given user or subsequently initially invoked by the given user, the automated assistant application may prompt the given user to enable resolution (resolution) of the value of the slot lacking a fixed value. In some versions of those implementations, the digested value of the slot bit may be stored in association with a given user, which is thereafter automatically utilized in response to further invocation of the command bundle. For example, the command bundle may include an action to transmit a command to set an alarm clock of a user's computing device. However, the "alarm time" slot of the alarm action may not be fixed. In some of those implementations, the automated assistant application may provide the prompt "What time would you like the alarm set for (what time you want to set the alarm clock)" and a responsive user interface input "8:00am" received in response to the prompt for presentation to the user. The automated assistant application may optionally store "8:00am" as a resolved value for the "alarm time" slot of the user's command bundle after confirming that the user wants to set "8:00am" to a default value. Thereafter, when a given user invokes the command bundle, the automated assistant application may automatically use "8:00AM" as the slot value for the "alarm time" slot.
Particular implementations of the subject matter described in this specification can be implemented to realize one or more of the following advantages. The command bundle recommendation method and/or the model used in the command bundle recommendation may provide improved data efficiency compared to other methods. For example, such recommendation methods and/or models may increase the likelihood that a command bundle provided to a given user recommends a relationship to the given user, and thus increase the likelihood that the given user will subsequently use the command bundle. This may mitigate consumption of network resources and/or computing resources in providing the uncorrelated command bundles.
Further, as described herein, in many implementations, the recommended command bundle may cause multiple discrete actions to be performed when subsequently invoked. Such subsequent invocation may be accomplished with subsequent user interface input that consumes less network and/or computing resources than if each of the plurality of discrete actions were invoked separately. For example, the "evening" bundle may be invoked by a verbal command such as "Assistant," provided to an automated Assistant. Invoking the "evening" bundle may cause the automated assistant application to: a first action of transmitting a command to turn off one or more networked lights; transmitting a command to set an alarm clock of the user's computing device to a second action sounded at 8:00 am; a third action requesting "tomorrow" local weather is transmitted and responsive content is audibly presented. Without a command bundle, the user would need to issue at least three separate commands that would require more network and/or computing resource consumption to process than a single call command of the command bundle. For example, without a command bundle, the user may have to issue three separate commands: "Assistant, turn off the lights (Assistant, off lights)"; "Assistant, set the alarm on my mobile phone to 8:00AM (Assistant, set alarm clock on My Mobile phone to 8:00 AM)"; and "Assistant, what is tomorrow's weather".
In addition, as also described herein, in many implementations, the recommended command bundle may include at least one slot lacking a fixed value, and the value of the slot may be digested by a given user through interaction (e.g., a dialogue of the automated assistant with the user). Thereafter, when a given user causes the command bundle to be invoked, the digested value may be utilized, optionally without prompting the user for any confirmation. In these and other ways, subsequent invocations of the command bundle by the user may be made more efficient by eliminating one or more hints that would otherwise need to be provided to resolve the value of the slot.
The above summary is provided as an overview of some of the features of the various implementations disclosed herein. Additional descriptions of those implementations, as well as various additional features and various additional implementations, are provided below.
In some implementations, a method performed by one or more processors is provided that includes identifying assistant interaction data of a user, and processing at least a portion of the assistant interaction data using a trained machine learning model to generate a user action embedding. The assistant interaction data indicates a plurality of historical actions that the automated assistant application performed for the user. Each of the historical actions is performed in response to a corresponding user interface input provided by a user through one or more automated assistant interfaces that interact with the automated assistant application. The method also includes identifying a plurality of command bundles, wherein each command bundle includes command bundle data identifying a plurality of corresponding discrete actions that can be performed by the automated assistant application. The method further comprises the steps of: for each of the command bundles, processing at least a portion of the command bundle data using a trained machine learning model or an additional trained machine learning model to generate a command bundle embedding and generating a similarity score for the command bundle. Generating a similarity score for each of the command bundles includes: the user action embedding is compared to the command bundle embedding of the command bundle. The method further comprises the steps of: a given command bundle of the plurality of command bundles is selected based on the similarity score for the given command bundle. The method further comprises the steps of: in response to selecting the given command bundle, causing information related to the given command bundle to be presented to the user via the user's computing device. A user's invocation of a given command bundle in response to a user interface input causes the automated assistant application to perform a corresponding discrete action of the given command bundle.
These and other implementations of the techniques disclosed herein can optionally include one or more of the following features.
In some implementations, the information presented to the user regarding the given command bundle includes a call phrase for the given command bundle. In some of those implementations, the method further includes: after causing information about the given command bundle to be presented, receiving natural language user interface input provided by a user through one of the assistant interfaces; determining that the natural language user interface input is consistent with the call phrase; and in response to determining that the natural language user interface input is consistent with the call phrase: the corresponding discrete actions of the given command bundle are performed by the automated assistant application.
In some implementations, the corresponding discrete actions of the given command bundle include a first discrete action and a second discrete action. In some of those implementations, the first discrete action causes the automated assistant application to transmit a first command to the first electronic device and the second discrete action causes the automated assistant application to transmit a second command to the second electronic device. In some of those implementations, the first discrete action causes the automated assistant application to transmit a first command to the first agent and the second discrete action causes the automated assistant application to transmit a second command to the second agent.
In some implementations, the method further includes ranking the command bundles based on the similarity score. In some of those implementations, selecting a given command bundle is based on a ranking of the given command bundle relative to others of the command bundles. In some versions of those implementations, causing information related to the given command bundle to be presented to the user via the user's computing device includes: the information is caused to be presented with a display saliency based on the rank of the given command bundle.
In some implementations, identifying the plurality of command bundles includes: based on a correspondence between the selected plurality of command bundles and user-specific data of the user, a plurality of command bundles is selected from a corpus of available command bundles. In some of those implementations, selecting the plurality of command bundles based on consistency between the selected plurality of command bundles and user-specific data of the user includes: excluding a given one of the available command bundles from the selected plurality of command bundles based on: identifying a desired peripheral device for a given available command bundle; and determining, based on the user-specific data, that the automated assistant application lacks user access to the desired peripheral device.
In some implementations, processing of at least a portion of the command bundle data is performed using a trained machine learning model.
In some implementations, the similarity score for each of the command bundles is generated based on a euclidean distance between the user action embedding and the command bundle embedding of the command bundles.
In some implementations, a given command bundle includes at least one slot having an undefined value corresponding to at least one of the actions. In some of those implementations, the method further includes: receiving a selection of a given command bundle in response to causing information relating to the given command bundle to be presented; in response to receiving the selection, a dialogue with the user via the automated assistant application to resolve the value of the slot; and storing values in association with slots for a given command bundle and for a user. In some versions of those implementations, the method further includes, after storing the value in association with the slot for the given command bundle and for the user: receiving natural language user interface input provided by a user via one of the assistant interfaces; determining that the natural language user interface input is consistent with the call phrase of the command bundle; and in response to determining that the natural language user interface input is consistent with the call phrase, storing, based on the value: the corresponding discrete actions of the given command bundle are performed by the automated assistant application, including performing at least one action using the value of the slot.
In some implementations, a method performed by one or more processors is provided that includes identifying a corpus of command bundles and identifying peripheral data of a user. Each of the identified command bundles includes command bundle data identifying a plurality of corresponding discrete actions that can be performed by the automated assistant application. The identified peripheral device data indicates a peripheral device of a user paired with the automated assistant application. The method further includes selecting a plurality of candidate command bundles for the user from a corpus of command bundles. The selection of the plurality of candidate command bundles is based on a comparison of peripheral device data with command bundle data in the command bundles. The method also includes ranking the candidate command bundles based on the command bundle data and the assistant interaction data, and causing information about one or more of the candidate command bundles to be presented based on the ranking. The information is presented to the user via the user's computing device.
These and other implementations of the techniques disclosed herein can optionally include one or more of the following features.
In some implementations, the information related to a given command bundle of the one or more command bundles includes a call phrase for the given command bundle. In some of those implementations, the method further includes: after causing information related to the one or more command bundles to be presented, receiving natural language user interface input provided by a user via an assistant interface associated with the automated assistant application; determining that the natural language user interface input is consistent with the call phrase; and in response to determining that the natural language user interface input is consistent with the call phrase: the corresponding discrete actions of the given command bundle are performed by the automated assistant application. In some versions of those implementations, the corresponding discrete actions of the given command bundle include a first discrete action that causes the automated assistant application to transmit a first command to the first electronic device, and a second discrete action that causes the automated assistant application to transmit a second command to the second electronic device.
In some implementations, a method performed by one or more processors is provided that includes identifying a corpus of command bundles and identifying data of a user. Each of the command bundles of the corpus includes command bundle data that identifies a plurality of corresponding discrete actions that can be performed by the automated assistant application. The method further includes selecting a plurality of candidate command bundles for the user from a corpus of command bundles. The selection of the plurality of candidate command bundles is based on a comparison of the user's data with the command bundle data of the command bundles. The method also includes identifying assistant interaction data of the user, the assistant interaction data indicating a plurality of historical actions performed by the automated assistant application for the user. The method further comprises the steps of: processing at least a portion of the assistant interaction data using the trained machine learning model to generate a user action embedding; and selecting a given command bundle from the plurality of candidate command bundles based on a comparison of the user action embedding with the command bundle embedding of the given command bundle. The method further comprises the steps of: in response to selecting the given command bundle, causing information related to the given command bundle to be presented to the user via the user's computing device. A user's invocation of a given command bundle in response to a user interface input causes the automated assistant application to perform a corresponding discrete action of the given command bundle.
These and other implementations of the techniques disclosed herein can optionally include one or more of the following features.
In some implementations, the information presented to the user regarding the given command bundle includes a call phrase for the given command bundle. In some of those implementations, the method further includes: after causing information about the given command bundle to be presented, receiving natural language user interface input provided by a user via an assistant interface; determining that the natural language user interface input is consistent with the call phrase; and in response to determining that the natural language user interface input is consistent with the call phrase: the corresponding discrete actions of the given command bundle are performed by the automated assistant application.
In some implementations, a given command bundle includes at least one slot having an undefined value corresponding to at least one of the actions. In some of those implementations, the method further includes: after causing information about the given command bundle to be presented, receiving a call to the given command bundle; in response to receiving the call, dialog with the user via the automated assistant application to resolve the value of the slot; and stores values in association with slots for a given command bundle and for a user. In some versions of those implementations, the method further includes, after storing the value in association with the slot for the given command bundle and for the user: receiving natural language user interface input provided by a user via an assistant interface; determining that the natural language user interface input is consistent with the call phrase of the command bundle; and in response to determining that the natural language user interface input is consistent with the call phrase and stored based on the value: the corresponding discrete actions of the given command bundle are performed by the automated assistant application, including performing at least one action using the value of the slot.
Additionally, some implementations include one or more processors of one or more computing devices, wherein the one or more processors are operable to execute instructions stored in associated memory, and wherein the instructions are configured to cause performance of one or more methods described herein. The processor may include one or more Graphics Processing Units (GPUs), central Processing Units (CPUs), and/or Tensor Processing Units (TPUs). Some implementations include one or more non-transitory computer-readable storage media storing computer instructions executable by one or more processors to perform one or more methods described herein.
It should be understood that all combinations of the foregoing concepts and additional concepts described in more detail herein are considered a part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are considered part of the subject matter disclosed herein.
Drawings
FIG. 1 is a block diagram of an example environment in which implementations disclosed herein may be implemented.
Fig. 2A and 2B illustrate examples of how the various components of fig. 1 may interact in some implementations.
Fig. 3A and 3B each illustrate an example of a motion model and how the motion model may be used to process assistant interaction data of a user to generate a user motion embedding.
FIG. 4A illustrates an example computing device having a display screen that graphically displays recommendations for a plurality of command bundles.
FIG. 4B illustrates the example computing device of FIG. 4A and an example of a dialog that may occur upon an initial call of one of the command bundles of FIG. 4A and an example of a dialog that may occur upon a subsequent call of the command bundle.
Fig. 5 is a flow chart illustrating an example method according to an implementation disclosed herein.
FIG. 6 illustrates an example architecture of a computing device.
Detailed Description
FIG. 1 illustrates an example environment in which the techniques disclosed herein may be implemented. An example environment includes a client device 106, an automated assistant 110 (also referred to herein as an automated assistant application), and a plurality of agents 140A-N. The client device 106 may be, for example, a stand-alone voice-activated speaker device, a desktop computing device, a laptop computing device, a tablet computing device, a mobile phone computing device, a computing device of a user vehicle, and/or a wearable apparatus including a user of the computing device (e.g., a watch of a user with the computing device, glasses of a user with the computing device, a virtual or augmented reality computing device). Additional and/or alternative client devices may be provided.
Although the automated assistant 110 is shown in fig. 1 as being separate from the client device 106, in some implementations, all or aspects of the automated assistant 110 may be implemented by the client device 106. For example, in some implementations, the input processing engine 112 may be implemented by the client device 106. In implementations in which one or more (e.g., all) aspects of the automated assistant 110 are implemented by one or more computing devices remote from the client device 106, those aspects of the client device 106 and the automated assistant 110 communicate over one or more networks, such as a Wide Area Network (WAN) (e.g., the internet).
Although only one client device 106 is shown in combination with the automated assistant 110, in many implementations the automated assistant 110 may be remote and may interface with each of the plurality of client devices of the same user and/or with each of the plurality of client devices of the plurality of users. For example, the automated assistant 110 may manage communication with each of the plurality of devices via different sessions, and may manage the plurality of sessions in parallel. For example, in some implementations, the automated assistant 110 may be implemented as a cloud-based service employing cloud infrastructure, e.g., using a server farm or a high-performance computer cluster running software suitable for handling large numbers of requests from multiple users. However, for simplicity, many examples are described herein with respect to a single client device 106.
The automated assistant 110 communicates with each of the plurality of agents 140A-N via an API and/or via one or more communication channels (e.g., internal communication channels and/or a network such as a WAN). In some implementations, one or more of the agents 140A-N are each managed by a respective party separate from the party managing the automated assistant 110. As used herein, an "agent" refers to one or more computing devices and/or software used by the automated assistant 110. In some cases, the agent may be separate from the automated assistant 110 and/or may communicate with the automated assistant 110 through one or more communication channels. In some of those cases, the automated assistant 110 may transmit data (e.g., proxy commands) from the first network node to a second network node that implements all or aspects of the proxy's functionality. In some cases, the agent may be a third party (3P) agent because it is managed by a party separate from the party that manages the automated assistant 110. In some other cases, the agent may be a first party (IP) agent because it is managed by the same party that manages the automated assistant 110.
The agent is configured to receive (e.g., over a network and/or via an API) call requests and/or other agent commands from the automated assistant 110. In response to receiving the proxy command, the proxy generates responsive content based on the proxy command and transmits the responsive content to provide a responsive content-based user interface output and/or control one or more peripheral devices. For example, the agent may transmit the response content to control one or more peripheral devices, such as one or more loT devices (e.g., smart lights, thermostats, appliances, cameras). As another example, the agent may transmit the response content to the automated assistant 110 to provide an output based on the response content by the automated assistant 110. As another example, the agent itself may provide the output. For example, a user may interact with the automated assistant 110 via an assistant interface of the client device 106 (e.g., the automated assistant may be implemented on the client device 106 and/or in network communication with the client device 106), and the agent may be an application installed on the client device 106 or an application executable remotely from the client device 106, but "streamable" on the client device 106. When an application is invoked, it may be executed by the client device 106 and/or brought to the front end by the client device 106 (e.g., its content may take over the display of the client device 106).
The automated assistant 110 includes an input processing engine 112, an output engine 116, and a call/interaction engine 118. The automated assistant 110 also includes a command bundle engine 120 and a recommendation engine 125. Recommendation engine 125 includes a filtering module 126, an embedding module 127, a scoring module 128, and a recommendation module 129. In some implementations, certain engines (and/or modules) of the automated assistant 110 may be omitted, combined, and/or implemented in a separate component from the automated assistant 110. Furthermore, for simplicity, the automated assistant 110 may include additional engines (and/or modules) not shown herein.
The automated assistant 110 receives an instance of user input from the client device 106. The user may provide various types of user input to the automated assistant 110 through a user interface input device. In some cases, the input may be a "user utterance" that is a free-form natural language input, such as text input based on user interface input generated by a user through one or more user interface input devices (e.g., based on typed input provided through a physical or virtual keyboard or based on spoken input provided through a microphone). As used herein, free-form input is user-formulated and is not constrained to a set of options presented for selection by a user (e.g., is not constrained to a set of options presented in a drop-down menu).
As one example, the automated assistant 110 may receive user utterances in the form of a natural language data stream comprising a sequence of tokens. For example, the automated assistant 110 may receive a natural language data stream in response to typed user input, or may receive a natural language voice input data stream in the form of a streaming audio recording. The streaming audio recording may be generated by the client device 106 in response to a signal received from a microphone of the client device 106 that captures verbal input of a user of the client device 106. In some implementations, the user input may be generated by the client device 106 and/or provided to the automated assistant 110 in response to an explicit invocation of the automated assistant 110 by a user of the client device 106. For example, calls with certain voice inputs of the user (e.g., the automated Assistant 110 hotwords/phrases, such as "Hey Assistant"), interactions of the user with hardware buttons and/or virtual buttons (e.g., tapping the hardware buttons, selection of graphical interface elements displayed by the client device 106), and/or other specific user interface inputs may be detected by the client device 106.
The automated assistant 110 provides an instance of the output in response to receiving an instance of the user input from the client device 106. Examples of output may be, for example, "system utterances" that include natural language output. The system utterance may be provided as audio to be audibly presented by the client device 106 (e.g., output via a speaker of the client device 106), as text and/or graphical content to be graphically presented by the client device 106 (e.g., rendered via a display of the client device 106), and so forth. As described herein, some examples of the output may be a system utterance determined based on a command bundle invoked by a user input. As also described herein, some examples of the output may be a recommendation for one or more command bundles. The recommendation may optionally be "pushed" to the user (i.e., provided without receiving user input explicitly requiring the recommendation), or may be provided to the user in response to user input, such as input seeking to explore the available command bundles. Moreover, some instances of the output may be based on response content generated by a selected one of the agents 140A-N (e.g., in response to an agent command that is transmitted in response to a call to a command bundle).
The input processing engine 112 of the automated assistant 110 processes natural language input (e.g., natural language input received from the client device 106) and generates a labeled output for use by one or more other components of the automated assistant 110. For example, the input processing engine 112 may process natural language freeform input generated by a user via one or more user interface input devices of the client device 106. The generated annotated output may include tokens based on natural language input, and may optionally include one or more annotations of natural language input.
In some implementations, the input processing engine 112 includes a speech-to-text module 114 that receives an instance of speech input (e.g., in the form of digital audio data) and converts the speech input into text that includes one or more text words or phrases. The input processing engine 112 may then utilize the converted text to generate tokens and/or other data. In some implementations, the speech-to-text module 114 is a streaming speech-to-text engine that uses one or more speech-to-text algorithms to generate text based on speech input. The speech-to-text module 114 may rely on one or more stored speech-to-text models (also referred to as language models), each of which may model the relationship between the audio signal and the pronunciation unit in the language and the word sequence in the language.
In some implementations, the input processing engine 112 is configured to identify and annotate various types of grammar information in natural language inputs. For example, the input processing engine 112 may include a part-of-speech tagger configured to tag a term with its grammatical role. For example, the part-of-speech labeler may label each term with parts of speech of the term, such as "noun," "verb," "adjective," "pronoun," etc. Further, for example, in some implementations, the input processing engine 112 may additionally and/or alternatively include a dependency parser configured to determine syntactic relationships between terms in the natural language input. For example, the dependency parser may determine which terms modify other terms, subject and verbs of sentences, etc. (e.g., parse trees) -and may annotate such dependencies.
In some implementations, the input processing engine 112 may additionally and/or alternatively include an entity marker configured to tag entity references, such as references to people, organizations, locations, and the like, in one or more segments. Entity markers may annotate a reference to an entity at a higher level of granularity (e.g., enabling identification of all references to a class of entities such as people) and/or at a lower level of granularity (e.g., enabling identification of all references to a particular entity such as a particular person). The entity tagger may rely on the content of the natural language input to resolve a particular entity and/or may optionally communicate with a knowledge graph or other entity to resolve a particular entity. In some implementations, entities digested to tokens may be used as slot values for those slots in addition to or instead of tokens determined to correspond to corresponding slots.
In some implementations, the input processing engine 112 may additionally and/or alternatively include a coreference resolver configured to group or "cluster" the references to the same entity based on one or more contextual cues. For example, a coreference resolver may be used to resolve the term "it" in the instance of user input to the previous reference to "resuarts a" in the immediately preceding instance of user input. In some of those implementations, the token supplied by the input processing engine 112 may include a reference to a pronoun that replaces the pronoun itself. For example, "resuurant a" may be provided as a token instead of "it".
In some implementations, one or more components of the input processing engine 112 may rely on annotations from one or more other components of the input processing engine 112. For example, in some implementations, the entity tagger may rely on annotations from the coreference resolver and/or the dependency resolver when annotating all references to a particular entity. Also, for example, in some implementations, the coreference resolver may rely on annotations from the dependency resolver when clustering references to the same entity. In some implementations, one or more components of the input processing engine 112 may use relevant prior inputs and/or other relevant data outside of the particular natural language input to determine one or more annotations when processing the particular natural language input.
The output engine 116 provides instances of the output to the client device 106. Examples of output may be recommendations for a command bundle, such as generated by recommendation engine 125, or based on responsive content from one or more of agents 140A-N when command bundle engine 120 executes the command bundle (when automated assistant 110 acts as an intermediary for the agent). In some implementations, the output engine 116 may include a text-to-speech engine that converts text components of the response content into an audio format, and the output provided by the output engine 116 is in the audio format (e.g., as streaming audio). In some implementations, the response content may already be in an audio format. In some implementations, the output engine 116 additionally or alternatively provides text reply content as output (optionally for conversion to audio by the client device 106) and/or other graphical content as output for graphical display by the client device 106.
The call/interaction engine 118 transmits agent commands to one or more of the agents 140A-N. For example, when a command bundle including a plurality of actions of the plurality of agents 140A-N is invoked, the invocation/interaction engine 118 may generate and transmit agent commands to a plurality of the agents 140A-N to cause those actions to be performed. The proxy command may be a structured command that includes slot values in the associated slots and optionally additional data such as an indication of the domain (e.g., where the proxy is running on multiple domains), a user identifier, a session identifier, etc. In some implementations or cases, the agent command is a call command that invokes the selected agent. The selected agent may generate response content in response to the agent command. In some implementations, the response content is transmitted by the selected agent to the automated assistant 110, and the output engine 116 generates an output based on the response content. For example, the output engine 116 may provide unchanged response content as output—or may perform text-to-speech conversion (or other conversion) of the response content and provide converted content as output. In some implementations, the responsive content is transmitted directly to the client device 106 by the selected agent. In other implementations, the selected agent may operate locally on the client device 106 (e.g., be an application installed on the client device 106) and may generate the response content for direct display on the client device 106. In other implementations, the response content may be transmitted to one or more peripheral devices and cause a state of one or more of the peripheral devices (e.g., loT devices) to be changed.
Each of the agents 140A-N may include its own content engine and/or other engines. Further, in many implementations, the agent may access various stored models and/or other resources (e.g., its own grammar model and/or content model) when generating the responsive content.
The command bundle engine 120 receives annotated input from the input processing engine 112 and/or input directly from the client device 106 and determines whether the received input invokes a command bundle of the command bundle database 152. The command bundle includes a plurality of discrete actions that the automated assistant application can perform. For example, the "evening" bundle may cause the automated assistant 110 to: a first action of transmitting a command to turn off one or more networked lights; transmitting a command to set an alarm clock of the user's computing device to a second action sounded at 8:00 am; a third action requesting "tomorrow" local weather is transmitted and responsive content is audibly presented. For example, the invocation/interaction engine 118 may transmit three different agent commands to different ones of the agents 140A-N, wherein each agent command causes a corresponding one of the three actions to be performed.
The command bundle engine 120 may determine the received input call command bundles based on various hints. For example, the command bundle may be associated with a call phrase, the command bundle engine 120 may receive the annotated input from the input processing engine 112, and the command bundle engine 120 may determine that the annotated input includes the call phrase of the command bundle. Also, for example, the command bundle engine 120 may determine that the received input is directly indicative of a command bundle. For example, input may be received at the client device 106 in response to a user selecting a graphical user interface element (e.g., a selectable "graphical shortcut") and such input may be mapped directly to the command bundle. Also, for example, the command bundle engine 120 may determine that the received input corresponds to a command bundle and that one or more contextual conditions of the command bundle are satisfied. For example, the command bundle engine 120 may determine that the command bundle is invoked only if the received input corresponds to the command bundle and also satisfies one or more contextual conditions (e.g., the current time is within a certain time window, the day of the week today, the location of the client device 106 is within a certain geographic boundary). In other implementations, the command bundle engine 120 may determine to invoke the command bundle without reference to any input from the client device 106. For example, certain command bundles may be invoked in response to only determining that certain context conditions are met.
In response to determining that the received input invokes the command bundle, the command bundle engine 120 causes the automated assistant 110 to perform actions of the command bundle. The command bundle engine 120 may interact with the call/interaction engine 118 to cause agent commands to be provided to one or more of the agents 140A-N when performing actions of the command bundle. In some implementations, one or more of the actions of the command bundle can be performed with a value specific to the user invoking the command bundle. For example, as described herein, the value of the slot of the proxy command to be provided in performing the action of the command bundle may be user specific. The command bundle engine 120 may refer to user data in the user data database 156 in determining the value of the slot of the command bundle specific to a given user.
Recommendation engine 125 determines command bundles from command bundles database 152 that may be relevant to a given user and presents information about those command bundles to the given user as recommendations. In some implementations, the recommendation engine 125 is part of the automated assistant 110 and/or presents the recommendation via an assistant interface of the client device 106, which is also used in other interactions with the automated assistant 110. In some implementations, the recommendation engine 125 is instead a component that presents the recommendation separately from the automated assistant 110 and/or through an interface that is entirely different from the assistant interface of the client device 106.
Referring now to FIG. 2A, an additional description of recommendation engine 125 and its modules 126-129 is provided. In FIG. 2A, the filtering module 126 selects a plurality of filtered command bundles 172 from the command bundle database 152 to provide to the embedding module 127. Filtered command bundles 172 are a subset of the corpus of command bundles contained in database 152.
The filtering module 126 may utilize various criteria in selecting the command bundles of the filtered command bundles 172. For example, in selecting a command bundle of filtered command bundles 172, user device 171 associated with a given user, as considered in fig. 2A, may be compared to data stored in command bundle database 152 in association with the command bundle. For example, the user device 171 may indicate a peripheral device (e.g., loT device) associated with the given user, and command bundles that require peripheral devices that are not related to the given user may be excluded from the filtered command bundles 172. As one particular example, the user device 171 may indicate that the user in question lacks any stored association with the intelligent thermostat, and as a result, the filtering module 126 may exclude from the filtered command bundles 172 any command bundles that require the intelligent thermostat. Command bundles requiring intelligent thermostats may be explicitly indicated in the command bundle database 152 as requiring intelligent thermostats (e.g., in the "required peripheral" field), or command bundles requiring intelligent thermostats may be inferred based on actions of these command bundles (e.g., based on command bundles each having an action that causes a proxy command to be sent to a "thermostat" proxy).
As used herein, a command bundle requires a peripheral device if one or more actions of the command bundle result in the state of the peripheral device being changed. In some implementations, a user may be associated with a peripheral device if the peripheral device has been "discovered" by the automated assistant 110 and may be controlled by the automated assistant 110. In some implementations, a user may be associated with a peripheral device if the user input and/or one or more network packets indicate the presence of the peripheral device even though the peripheral device has not been explicitly "discovered" by the automated assistant 110.
In some implementations, the filtering module 126 may utilize one or more additional and/or alternative criteria in selecting command bundles to include in the filtered command bundles 172 and/or excluding command bundles from the filtered command bundles 172. For example, one or more command bundles may be excluded if their ranking (by multiple users) does not meet a threshold and/or the number of uses and/or frequency of uses of the command bundles (across the entire user group) does not meet a threshold.
Filtered command bundles 172 are provided to embedding module 127. The embedding module 127 determines a command bundle embedding 175 of the filtered command bundles 172. That is, for each of the filtered command bundles 172, the embedding module 127 determines a corresponding command bundle embedding. The embedding module 127 may use actions and/or other features of the command bundle to determine command bundle embedding using the action model 154. For example, an indication of the action of the command bundle may be applied as input (as part of the input or as an entire input) to the action model 154 and processed on the action model 154 to generate the command bundle embedding. The command bundle embedding may be a plurality of values that may be mapped to a multidimensional space that provides a semantic representation of the corresponding command bundle embedding. For example, the command bundle embedding may be a vector of 256 values. In some implementations, the embedding module 127 can pre-generate the command bundle embedding 175 and store the command bundle embedding 175 in the command bundle database 152 in association with its corresponding command bundle. For example, the embedding module 127 may generate a command bundle embedding for the command bundle in response to creation of the command bundle, store it in the command bundle database 152 in association with the command bundle, and then determine the command bundle embedding of the command bundle by retrieving the stored command bundle embedding from the command bundle database 152. Additional description of implementations of generating command bundle embedding and user action embedding are described below with respect to fig. 3A and 3B.
The embedding module 127 also generates a user action embedding 174. The embedding module 127 generates a user action embedding 174 based on assistant interaction data 173 for the user, the assistant interaction data 173 indicating a plurality of historical actions (and optionally other characteristics of actions) performed by the automated assistant 110 for the user. For example, an indication of the performed historical actions may be applied to the action model 154 as input (as part of the input or as an entire input) and processed by the action model 154 to generate the user action embedment 174. The user action embedment 174 may be a plurality of values that may be mapped to a multidimensional space that provides a semantic representation of historical actions and/or other historical features. For example, the user action embed 174 may be a vector of 256 values. Additional description of implementations of generating user action embeddings and command bundle embeddings are described below with respect to fig. 3A and 3B.
The scoring module 128 utilizes the user action embedding 174 and the command bundle embedding 175 to generate a score for the filtered command bundle 172. For example, the scoring of one of the filtered command bundles 172 may be based on a comparison of the user action embedding 174 with the command bundle embedding of the filtered command bundle. For example, the score may be based on a euclidean distance (e.g., cosine similarity measure) between two embeddings in the multidimensional space. The scoring of the command bundles may optionally be further based on additional metrics such as a ranking of the command bundles (by multiple users), a number of uses of the command bundles (among the entire user group), and/or a frequency of use, etc. For example, the scoring of command bundles may be based on the following functions: cosine similarity measure between the user action embedding and the command bundle embedding of the command bundles; a metric indicating a user-assigned rating of the command bundle and/or a metric indicating popularity of the command bundle.
The scores of the command bundles 176 are provided to the recommendation module 129. Recommendation module 129 provides recommendations 177 to client device 106 based on the scores of command bundles 176. Each of the recommendations 177 may be for a corresponding command bundle, and may be provided for audible and/or graphical presentation to a user of the client device 106. For example, one of the recommendations 177 may be for a given command bundle, and may include a call phrase for the given command bundle, a summary of actions performed by the given command bundle, and/or other information related to the given command bundle.
Recommendation module 129 may utilize various techniques based on the scoring of command bundles 176 when providing recommendations 177. For example, the recommendation module 129 may provide a recommendation for a given command bundle only if the score of the command bundle meets a threshold. Also, for example, the recommendation module 129 may provide a plurality of recommendations, each for a corresponding one of the plurality of command bundles, and may provide the plurality of recommendations in a manner based on the scores of the plurality of command bundles. For example, the recommendation for the best scoring command bundle may be presented most prominently (e.g., at the top), the additional recommendation for the next best scoring command bundle may be presented next most prominently (e.g., second), and so on. As another example, recommendations of X best scoring command bundles may be provided for initial presentation at the client device 106, and the next Y best scoring command bundles are provided only in response to further user interface inputs indicating that additional recommendations are desired to be received.
In some implementations, the recommendation module 129 provides the recommendation independent of a query specifying one or more search criteria for the recommendation. For example, the recommendation module 129 may provide the recommendation for display in a "recommendation" interface at the client device 106 (and/or for audible presentation) without receiving any query entered based on the user's natural language indicating the recommended search criteria (e.g., independent of a query such as "show me recommendations that include lighting control (presenting me with recommendations including lighting controls)"). In some other implementations, the recommendation module 129 provides the recommendation in response to a query specifying one or more search criteria for the recommendation. In some of those implementations, the query may be parsed to identify one or more criteria for filtering the recommendation, and the filtering module 126 may apply the criteria in generating the filtered command bundle 172. For example, in response to the query "show me recommendations that include lighting control", the filtered command bundles 172 may include only bundles that contain "lighting control" actions, and the scoring module 128 may generate scores for those filtered command bundles 172 when determining the filtered command bundles 172 for which recommendations are provided to the client device 106 and/or when determining how to provide the recommendations (e.g., when determining the order of the recommendations and/or other presentation prominence).
Referring now to FIG. 2B, an example of an implementation of how command bundle engine 120 responds in response to determining that a command bundle is invoked is provided. In fig. 2B, a command bundle call 180 is received from the client device 106. The command bundle call 180 invokes a particular command bundle and may be, for example, selecting a corresponding one of the recommendations 177 (fig. 2A) and/or providing natural language input containing a call phrase for the corresponding one of the recommendations 177.
The command bundle engine 120 receives a command bundle call 180 or annotated input (from the input processing engine 112) corresponding to the command bundle call 180. The command bundle engine 120 determines a command bundle corresponding to the command bundle call 180. For example, the command bundle engine 120 may reference the command bundle database 152 to determine the command bundles.
In some implementations, at least one action of the command bundle includes at least one slot lacking a fixed value (i.e., a slot having an explicit "undefined" or "variable" value, or a defined slot lacking any value of the slot). In some of those implementations, the command bundle engine 120 provides a hint 181 of the value of the slot (i.e., the slot lacking any fixed value), for example, when the command bundle call 180 is the user's initial call to the command bundle. In response to prompt 181, a user of client device 106 may utilize one or more user interface input devices to provide one or more responses 182. The command bundle engine 120 may utilize the response to the digested value 187 for those slots determined (slots lacking any fixed value). For example, the input processing engine 112 may process responses to the generated annotated input, and the command bundle engine 120 may resolve values based on such annotated input. The command bundle engine 120 may store the digested value 187 of the slot in the user data 156 (or other database). This enables the command bundle engine 120 to cause actions of the command bundle to be performed with the digested value 187 in response to future instances of the command bundle invocation 180 by the user (either by the client device 106 or another client device of the user) -without again prompting the user for the value and/or without requiring any subsequent user confirmation of the value.
The command bundle engine 120 may also cause the agent commands 183 to be transmitted to the agent 140A and the agent commands 185 to be transmitted to the agent 140B. For example, the command bundle engine 120 may cause the call/interaction engine 118 (FIG. 1) to transmit commands to the agents 140A and 140B. Agent commands 183 and/or agent commands 185 may each optionally include one or more correspondences of the digested values of slots, as determined using response 182. The agent 140A generates response content 184 in response to the agent command 183. Responsive content 184 may cause the status of one or more peripheral devices to be changed (e.g., lights turned on/off, brightness level adjusted, output color adjusted) -and/or may be provided to output engine 116, which may cause corresponding content to be audibly and/or graphically provided at client device 106. The proxy 140B generates response content 186 in response to the proxy command 185. The response content 186 may cause the status of one or more peripheral devices to be changed and/or may be provided to the output engine 116, which may cause corresponding content to be audibly and/or graphically provided at the client device 106.
Turning now to fig. 3A and 3B, examples 154A and 154B of an implementation of the action model 154 (fig. 1) are shown, as well as examples of how the action models 154A and 154B may be used to process assistant interaction data 173A and 173B of a user to generate user action embeddings 174A and 174B. A description of how the action models 154A and 154B may be used to generate a command bundle embedding of command bundles is also provided.
In FIG. 3A, assistant interaction data 173A is shown, and assistant interaction data 173A includes a plurality of action indications 173A 1-N . Multiple action instructions 173A 1-N The N most recent actions performed by the automated assistant on a given user may be indicated in response to a user input instance provided by the user via an automated assistant interface interacting with the automated assistant. Showing the action indication 173A of FIG. 3A in a relatively coarse granularity 1-N . However, finer granularity of the action indication may be provided. For example, instead of the action instruction 173A 1 Indicated "play music", action indication 173A 1 The genre of the played music (e.g. thunderbolt or classical rock) and/or the agent (e.g. music agent 1 or music agent 2) that interacts with the "play music" action when it is performed may additionally be indicated. For clarity, a description action indication 173A is shown in FIG. 3A 1-N And in some implementations may apply the text as input. However, it should be understood that other values may be utilized. As one non-limiting example, the "play music" action may be indicated instead with a binary value of "0010", the "control light" action may be indicated instead with a binary value of "0011", and so forth.
In FIG. 3A, a plurality of action instructions 173A 1-N Is applied to N inputs 1541A of action model 154A 1-N And may optionally be applied in any order. In some other implementations, N inputs 1541A are applied in a recency-based order 1-N . For example, action instruction 173A 1 May correspond to the most recent action, action indication 173A 2 May correspond to a second most recent action, etc. In fig. 3A, a plurality of operation instructions 173A are shown 1-N Each of which is covered byWeighted equally. However, in other implementations, the closer action indications may be weighted more heavily than the less-closer action indications.
One or more processors may process input action indication 173A on encoding layer 1542A 1-N To generate a user action embed 174A. Encoding layer 1542A may include one or more neural network layers, such as a feed forward neural network layer. In some implementations, the encoding layer 1542A is an encoding layer from an encoder-decoder network that is trained with a number of training examples to regenerate the applied action indication. For example, each of the training examples may include: training example inputs including corresponding action indications; and a training example output including corresponding action indications. During training, training example inputs of training examples may be applied to encoding layer 1542A and hidden states of encoding layer 1542A are applied to decoding layer to generate prediction outputs having the same dimensions as the training example inputs. Errors may then be determined based on comparing the predicted output to the training example output (same as the training example input) and back-propagating the errors across the decoding and encoding layers 1542A to update the weights of the decoding and encoding layers 1542A. In this way, the encoding layer 1542A is trained to generate a compressed (condensed) representation of the action indication that is applied as input, thereby enabling the decoding layer to generate predictions that reproduce the action indication. After training the encoder-decoder network, an "encoder section" may be used as encoding layer 1542A, and then the output of encoding layer 1542A may be used to generate user action embeddings and command bundle embeddings.
Although not shown in fig. 3A, command bundle embedding may be generated by using the action model 154A by applying an action indication of an action of the command bundle as input to the action model 154a—optionally, a "zero padding" value is used for any of the N action indications that are not present in the command bundle. For example, if N is 50 and the command bundle includes only 5 actions, then a "fill" value may be used for 45 of the action indications. The one or more processors may process the input action indication of the command bundle on the encoding layer 1542A to generate a command bundle embedding for the command bundle.
In FIG. 3B, a plurality of action instructions 173B 1-N Indicating the corresponding action and the weight of the corresponding action. For example, action instruction 173B 1 Indicating "set alarm" action and weight "0.2". The weight of each action indication may be based on the recency of action execution by the user, the number of occurrences of action execution by the user, and/or the frequency of action execution by the user. For example, action instruction 173B 3 The weight 0.3 of the "control light" action of (a) may be based on the action being performed relatively close, more numerous, and/or more frequently than other actions (all with less weight) explicitly indicated in fig. 3B.
In FIG. 3B, N inputs 1541B of action model 154B 1-N Corresponding to a unique action indication. Namely, input 1541B 1 Input 1541B corresponds to a "set alarm clock" action 2 Corresponding to a "adjust thermostat" action, etc. In FIG. 3B, each action is indicated 173B 1-N May be applied to their corresponding inputs 1541B 1-N And processed at encoding layer 1542B to generate user action embeddings 174B. A "0" weight or other null weight may be used for any input 1541B for which no corresponding action has been performed for the user and/or for which the weight is otherwise "null" 1-N . In some implementations, the encoding layer 1542B is an encoding layer from an encoder-decoder network that is trained with a number of training examples to regenerate the applied weights for action indication.
Although not shown in fig. 3B, command bundle embedding may be generated using action model 154B by: for input 1541B corresponding to an action of the command bundle 1-N Apply "1" or other value as input to action model 154B-and for other inputs 1541B 1-N A "0" or other null weight is applied. For example, for a command beam that includes only "adjust thermostat" and "control light" actions, "a" 1 "may be applied to each of the inputs 1541B in the following 2 And 1541B 3 And apply "0" to the targetThere are other inputs.
Turning now to fig. 4A and 4B, an example 106A of the client device 106 (fig. 1) is shown. The client device 106A includes a display screen 140. In FIG. 4A, the display screen 140 graphically displays a first recommendation 177A of the first command bundle, a second recommendation 177B of the second command bundle, and optionally one or more additional recommendations (indicated by the ellipses of FIG. 4A). In FIG. 4B, display screen 140 is displaying an example of a dialog that may occur when a command bundle of recommendation 177A of FIG. 4A is initially invoked and an example of a dialog that may occur when the command bundle is subsequently invoked.
The display screen 140 of fig. 4A and 4B further includes: a user may select to generate a text reply interface element 188 for user interface input via the virtual keyboard; and, the user may select to generate a voice reply interface element 189 of the user interface input through the microphone. In some implementations, the user can generate the user interface input via the microphone without selecting the voice reply interface element 189. For example, during a conversation, active monitoring of audible user interface input via a microphone may occur to eliminate the need for the user to select the voice response interface element 189. In some of those implementations and/or in other implementations, the voice reply interface element 189 may be omitted. Further, in some implementations, the text reply interface element 188 may additionally and/or alternatively be omitted (e.g., the user may only provide audible user interface input). The display screen 140 of fig. 4A and 4B also includes system interface elements 190A, 190B, 190C, which system interface elements 190A, 190B, 190C may be interacted with by a user to cause the client device 106A to perform one or more actions. In other implementations, an "audio-only interface" computing device that accepts only speech input and provides only audible output (i.e., a computing device lacking a display screen) may be provided.
In FIG. 4A, the first recommendation 177A displays a call phrase ("good right") for the first command bundle, and an indication of an action performed by the first command bundle. Similarly, the second recommendation 177B displays a call phrase ("good moving") for the second command bundle, and an indication of an action performed by the second command bundle. Recommendations 177A and 177B can be selected for presentation based on the scores of their corresponding command bundles, as described herein. Further, in some implementations, the recommendation 177A can be presented over the recommendation 177B based on the scores of its corresponding command bundles. For example, the recommendations may be ranked based on the scores of their corresponding command bundles, and the recommendation 177A is initially presented based on its corresponding best scoring command bundle.
In FIG. 4B, the command bundle associated with the first recommendation 177A (FIG. 4A) has been initially invoked in response to a user interface input. For example, the command bundle may be initially invoked based on a user selection of recommendation 177A (e.g., a "tap" of recommendation 177A) -or based on the user speaking (or typing) the invoke phrase "good right". Note that in some implementations, the user may have his/her own preferred invocation phrase assigned to the command bundle. Such a call phrase may be used in place of or in addition to the "good light" call phrase. For example, an additional interface element may be provided and selected by the user to alter the invocation phrase to "night right" for the user-or the user may alter the invocation phrase by a verbal command provided to the automated assistant via the assistant interface (e.g., "white Isay 'night right', run the 'good right' bundle when i say 'night'.
In FIG. 4B, the command bundle associated with the first recommendation 177A lacks a fixed value for the "lamp identifier" slot for the "off lamp" action. Based on this, the automated assistant provides a prompt 482A to the user, which prompt 482A asks the user to provide input to enable resolution of the value of the "light identifier" slot. In response, the user provides an input 480A of "all," which may be resolved to a value identifying all lights of the user associated with the automated assistant.
In fig. 4B, the command bundle associated with the first recommendation 177A also lacks a fixed value for the "alarm time" slot of the "set alarm" action. Based on this, the automated assistant provides a prompt 482B to the user, the prompt 482B asking the user to provide input to enable resolution of the value of the "alarm time" slot. In response, the user provides an input 480B of "8:00AM" which may be resolved to a corresponding time value.
The automated assistant then provides an output 482C indicating that the value has been resolved, and may also provide further user interface input to the user that may alter the resolved value and/or alter the invocation phrase of the command bundle. In some implementations, the automated assistant may further prompt the user for the user to ensure that the user wants to store the digested value as a "default value" for the command bundle-and may optionally require a positive user interface input in response before doing so. Further, in some of these implementations, the automated assistant may additionally or alternatively provide an output that enables the user to instead select the value that is prompted to be used for the instance of the "light identifier" slot and/or the "alarm time" slot each time the command bundle is invoked.
Fig. 4B also shows a subsequent input 480C provided by the user as "good right" at a later time. The automation assistant may determine that input 480C is a call phrase for the command bundle and, in response, may cause the actions of the command bundle to be performed using the digested value determined by the hints 482A, 482B and the inputs 480A and 480B. The automated assistant then provides a further output 482D indicating that the "turn off lights" and "set alarm clock" actions have been performed using the digestion values, and provides a "Tomorrow looks sunny with a high of 82degrees (tomorrow looks fine, up to 82 degrees)" output received from the agent in response to the "get tomorrow weather forecast" action (for which a fixed "local weather" value may be used). In other implementations, further output 482D may optionally lack confirmation that the digestion value is being used for "turn off lights" and "set alarm" actions. For example, an output of "Lights are off and alarm set. Tomorrow looks sunny with a high of 82 degeres (lamp off and alarm set. Tomorrow looks fine, up to 82 degrees)" may be provided instead.
Fig. 5 is a flow chart illustrating an example method 500 according to implementations disclosed herein. For convenience, the operations of the flowchart of fig. 5 are described with reference to a system performing the operations. The system may include various components of various computer systems, such as one or more components of the automated assistant 110. Furthermore, although the operations of method 500 are illustrated in a particular order, this is not intended to be limiting. One or more operations may be reordered, omitted, or added.
At block 550, the system identifies a corpus of command bundles.
At block 552, the system identifies a subset of the command bundles based on one or more criteria. If these command bundles include actions requiring any peripheral devices that have not been paired with the automated assistant application for the user, the criteria may include, for example, excluding the command bundles from the subset. If a peripheral device has been "discovered" by the assistant application, and can be controlled by the assistant application, the peripheral device is paired with the automated assistant application for the user. In some implementations, if those command bundles include actions that require any peripheral device for which the presence has not been detected by user input and/or one or more network packets for the user, the criteria may alternatively include, for example, excluding the command bundles from the subset. In such examples, even if the peripheral devices are not explicitly paired, the command bundles containing actions requiring a given peripheral device may still be included. For example, a given peripheral device may be detected based on user input (e.g., indicating that the user has a peripheral device) and/or network packets (having characteristics indicating that it is generated by the peripheral device) even though the peripheral device has not been explicitly "discovered" by the automated assistant (e.g., in response to a "discovery request" that is initiated in response to an explicit user interface input). Additional and/or alternative criteria may be considered, such as one or more of the criteria described elsewhere herein. In some implementations, block 552 may be omitted and all command bundles of the corpus are considered in subsequent blocks.
At block 554, the system identifies assistant interaction data for the user under consideration in the iterations of method 500.
At block 556, the system generates a user action insert for the user based on the assistant interaction data identified at block 554.
At block 558, the system determines command bundle embedding for the command bundles of the subset of block 552. For example, the system may have pre-generated command bundle embeddings stored in association with their corresponding command bundles, and retrieved those pre-generated command bundle embeddings from the storage.
At block 560, the system generates a similarity score for each of the command bundles of the subset based on the user action embedding and the command bundle embedding. For example, for a given command bundle, the similarity score may be based at least in part on a cosine similarity measure between the user action embedding and the command bundle embedding of the given command bundle.
At block 562, the system presents one or more recommendations of one or more of the command bundles based on one or more of the similarity scores of block 560. For example, the system may rank the command bundles based at least in part on the similarity score, select one or more of the command bundles based on the ranking, and present information related to the selected command bundles as a recommendation.
At block 564, the system optionally customizes the unresolved slots (if any) for the user for the action of one of the command bundles of one of the recommendations. In some implementations, the system presents one or more hints and utilizes one or more responses to the hints to resolve the values of the slots, thereby customizing the non-resolved slots. In some of those implementations, the prompt is presented in response to: selection of one of the recommendations, receiving a call phrase of a command bundle of one of the recommendations, and/or other user interface input indicating a desire to have an action of the command bundle performed and/or associating the command bundle with a user.
At block 566, the system performs an action of the command bundle of one of the recommendations in response to the call to the command bundle. One or more of the customized values of the box 564 may optionally be used to perform an action. In some implementations, performing the action includes transmitting one or more proxy commands to the one or more proxies, and optionally including one or more of the custom values for slots of the proxy commands in one or more of the proxy commands.
Fig. 6 is a block diagram of an example computing device 610, which example computing device 610 may optionally be used to perform one or more aspects of the techniques described herein. In some implementations, one or more of the following may include one or more components of the example computing device 610: client devices 106, automated assistants 110, agents, and/or other components.
The computing device 610 typically includes at least one processor 614 that communicates with a number of peripheral devices via a bus subsystem 612. These peripheral devices may include, for example, a storage subsystem 624 including a memory subsystem 625 and a file storage subsystem 626, a user interface output device 620, a user interface input device 622, and a network interface subsystem 616. Input and output devices allow users to interact with computing device 610. Network interface subsystem 616 provides an interface to external networks and couples to corresponding interface devices among other computing devices.
The user interface input device 622 may include: a keyboard; pointing devices such as a mouse, trackball, touch pad, or tablet; a scanner; a touch screen incorporated in the display; audio input devices such as speech recognition systems, microphones; and/or other types of input devices. In general, use of the term "input device" is intended to include all possible types of devices and ways of inputting information into computing device 610 or onto a communication network.
The user interface output device 620 may include a display subsystem, a printer, a facsimile machine, or a non-visual display such as an audio output device. The display subsystem may include a Cathode Ray Tube (CRT), a flat panel device such as a Liquid Crystal Display (LCD), a projection device, or some other mechanism for creating a viewable image. The display subsystem may also provide for non-visual display, such as via an audio output device. In general, use of the term "output device" is intended to include all possible types of devices and ways to output information from computing device 610 to a user or to another machine or computing device.
Storage subsystem 624 stores programs and data constructs that provide the functionality of some or all of the modules described herein. For example, storage subsystem 624 may include logic to perform selected aspects of the method of fig. 5 and/or other methods described herein.
These software modules are typically executed by processor 614 alone or in combination with other processors. The memory 625 used in the storage subsystem 624 may include a number of memories including a main Random Access Memory (RAM) 630 for storing instructions and data during program execution and a Read Only Memory (ROM) 632 in which fixed instructions are stored. File storage subsystem 626 may provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive, and associated removable media, CD-ROM drive, optical disk drive, or removable media cartridge. Modules implementing certain of the implemented functionality may be stored in storage subsystem 624 by file storage subsystem 626, or in other machines accessible to processor 614.
Bus subsystem 612 provides a mechanism for allowing the various components and subsystems of computing device 610 to communicate with each other as intended. Although bus subsystem 612 is shown schematically as a single bus, alternative implementations of the bus subsystem may use multiple buses.
Computing device 610 may be of various types including a workstation, a server, a computing cluster, a blade server, a server farm, or any other data processing system or computing device. Because of the ever-changing nature of computers and networks, the description of computing device 610 depicted in FIG. 6 is intended only as a specific example for purposes of illustrating some implementations. Many other configurations of computing device 610 are possible with more or fewer components than the computing device depicted in fig. 6.
Claims (40)
1. A method implemented by one or more processors, the method comprising:
identifying a corpus of command bundles accessible to a plurality of users, each of the command bundles comprising command bundle data identifying a plurality of corresponding discrete actions executable by an automated assistant application;
identifying peripheral data for a particular user of the plurality of users, the peripheral data indicating a peripheral associated with the particular user and paired with the automated assistant application for the particular user;
a subset of the corpus of command bundles is selected for the particular user,
wherein selecting the subset of the corpus of command bundles comprises:
The inclusion of a given command bundle in the subset is determined based on:
determining that the peripheral data indicates that a given peripheral is associated with the particular user and paired with the automated assistant application for the particular user, the given peripheral indicated in the command bundle data of the given command bundle as being required by the given command bundle,
wherein the given peripheral device is an internet of things (IoT) device, and
excluding additional command bundles from the subset is determined based on:
the command bundle data of the additional command bundle indicates additional peripheral devices required for the additional command bundle, and
the peripheral device data indicates that the particular user is not associated with the add-on peripheral device and that the add-on peripheral device is not paired with the automated assistant application for the particular user;
in response to selecting the subset of the corpus of command bundles, causing information about at least the given command bundle in the subset to be presented as a recommendation, wherein the information is presented to the particular user via the computing device of the particular user; and
in response to causing presentation of the information related to at least the given command bundle in the subset, assigning at least the given command bundle in the subset to a particular user based on receiving a user selection of at least the given command bundle in the subset.
2. The method of claim 1, wherein the given command bundle includes at least one slot having an undefined value for additional ones of the corresponding discrete actions of the given command bundle, and the method further comprises:
in response to receiving the user selection, conducting a conversation with the particular user via the particular user's computing device to resolve the value of the at least one slot;
wherein assigning the given command bundle to the particular user comprises: the value associated with the at least one slot is stored for the given command bundle and for the particular user.
3. The method of claim 2, further comprising:
after assigning the given command bundle to the particular user:
receiving user interface input provided by the particular user;
determining that the user interface input is a call input that causes execution of the given command bundle; and
in response to determining that the user interface input is the call input:
executing, by the automated assistant application, a corresponding discrete action of the given command bundle, including: the at least one additional action is performed using the value of the at least one slot.
4. The method of claim 1, wherein the given command bundle includes one or more context conditions, the given command bundle is automatically invoked when the one or more context conditions are met, and the method further comprises:
after assigning the given command bundle to the particular user:
determining that the one or more contextual conditions are met for the particular user; and
the given command bundle is automatically invoked for the particular user in response to determining that the one or more contextual conditions are met for the particular user and based on the given command bundle being assigned to the particular user.
5. The method of claim 4, wherein the one or more contextual conditions include a certain time window, a certain day of the week, and/or a location of a client device within geographic boundaries.
6. The method of claim 1, wherein the given command bundle includes a call phrase that, when spoken, calls the given command bundle, and the method further comprises:
after assigning the given command bundle to the particular user:
receiving verbal input provided by the particular user via an assistant interface;
Determining that the spoken input is consistent with the call phrase of the given command bundle; and
responsive to determining that the spoken input is consistent with the invocation phrase, and based on the given command bundle being assigned to the particular user, invoking the given command bundle for the particular user.
7. The method of claim 1, wherein determining to include the given command bundle in the subset of the corpus of command bundles is further based on comparing command bundle data of the given command bundle with assistant interaction data of the particular user, the assistant interaction data being indicative of a plurality of historical actions performed by the automated assistant application for the particular user.
8. The method of claim 7, wherein the command bundle data comprises command bundle embedding, and wherein comparing the command bundle data with assistant interaction data of the particular user comprises:
generating a user action embedding based on processing at least a portion of the assistant interaction data for the particular user, and
the user action embedding is compared to the command bundle embedding.
9. The method of claim 8, wherein generating the user action embedding comprises: the at least a portion of the assistant interaction data is processed using a trained machine learning model.
10. The method of claim 9, further comprising:
the command bundle embedding is generated based on processing at least a portion of the command bundle data using the trained machine learning model or an additional trained machine learning model.
11. The method of claim 10, wherein comparing command bundle data for the given command bundle with assistant interaction data for the particular user comprises:
a distance between the user action embedding and the command bundle embedding is determined.
12. A system, comprising:
a memory storing instructions;
one or more processors operable to execute the instructions to cause the one or more processors to:
identifying a corpus of command bundles accessible to a plurality of users, each of the command bundles comprising command bundle data identifying a plurality of corresponding discrete actions executable by an automated assistant application;
identifying peripheral data for a particular user of the plurality of users, the peripheral data indicating a peripheral associated with the particular user and paired with the automated assistant application for the particular user;
A subset of the corpus of command bundles is selected for the particular user,
wherein selecting the subset of the corpus of command bundles comprises:
the inclusion of a given command bundle in the subset is determined based on:
determining that the peripheral data indicates that a given peripheral is associated with the particular user and paired with the automated assistant application for the particular user, the given peripheral indicated in the command bundle data of the given command bundle as being required by the given command bundle,
wherein the given peripheral device is an internet of things (IoT) device, and
excluding additional command bundles from the subset is determined based on:
the command bundle data of the additional command bundle indicates additional peripheral devices required for the additional command bundle, and
the peripheral device data indicates that the particular user is not associated with the add-on peripheral device and that the add-on peripheral device is not paired with the automated assistant application for the particular user;
in response to selecting the subset of the corpus of command bundles, causing information about at least the given command bundle in the subset to be presented as a recommendation, wherein the information is presented to the particular user via the computing device of the particular user; and
In response to causing presentation of the information related to at least the given command bundle in the subset, assigning at least the given command bundle in the subset to a particular user based on receiving a user selection of at least the given command bundle in the subset.
13. The system of claim 12, wherein the given command bundle includes at least one slot having an undefined value for additional ones of the corresponding discrete actions of the given command bundle, and wherein the one or more processors, when executing the instructions, further:
in response to receiving the user selection, conducting a dialogue with the particular user to resolve the value of the at least one slot;
wherein, upon assigning the given command bundle to the particular user, the one or more processors assign a value associated with the at least one slot for the given command bundle and for the particular user.
14. The system of claim 13, wherein the one or more processors, when executing the instructions, further:
after assigning the given command bundle to the particular user:
receiving user interface input provided by the particular user;
Determining that the user interface input is a call input that causes execution of the given command bundle; and
in response to determining that the user interface input is the call input:
performing a corresponding discrete action of the given command bundle, comprising: the at least one additional action is performed using the value of the at least one slot.
15. The system of claim 12, wherein the given command bundle includes one or more context conditions that are automatically invoked when satisfied, and wherein the one or more processors, when executing the instructions, further:
after assigning the given command bundle to the particular user:
determining that the one or more contextual conditions are met for the particular user; and
the given command bundle is automatically invoked for the particular user in response to determining that the one or more contextual conditions are met for the particular user and based on the given command bundle being assigned to the particular user.
16. The system of claim 15, wherein the one or more contextual conditions include a certain time window, a certain day of the week, and/or a location of the client device within geographic boundaries.
17. The system of claim 12, wherein, in determining to include the given command bundle in the subset of the corpus of command bundles, the one or more processors select the given command further based on comparing command bundle data of the given command bundle with assistant interaction data of the particular user, the assistant interaction data being indicative of a plurality of historical actions performed by the automated assistant application for the particular user.
18. The system of claim 17, wherein the command bundle data comprises command bundle embedding, and wherein the one or more processors, when comparing the command bundle data with assistant interaction data of the particular user:
generating a user action embedding based on processing at least a portion of the assistant interaction data of the particular user, and
the user action embedding is compared to the command bundle embedding.
19. The system of claim 18, wherein the one or more processors, when generating the user action inlay, process the at least a portion of the assistant interaction data using a trained machine learning model.
20. The system of claim 19, wherein the one or more processors, when executing the instructions, further:
the command bundle embedding is generated based on processing at least a portion of the command bundle data using the trained machine learning model or an additional trained machine learning model.
21. A method implemented by one or more processors, the method comprising:
such that command bundle recommendations for a given command bundle are displayed at a computing device of a particular user,
wherein causing the command bundle recommendation to be displayed is independent of receiving any query indicating search criteria for the command bundle recommendation,
wherein the given command bundle is created by an additional user, and
wherein the given command bundle includes command bundle data identifying a plurality of discrete actions that can be performed by the automated assistant, the plurality of discrete actions including a given action including a slot lacking any fixed value;
receiving, at the computing device, a selection from the particular user, the selection being a recommendation for the displayed command bundle;
in response to receiving the selection:
interacting with the particular user via the computing device of the particular user to counteract a particular value for the slot lacking any fixed value; and
Assigning the given command bundle to the particular user, including: storing the particular value associated with the at least one slot for the given command bundle and for the particular user;
after assigning the given command bundle to the particular user:
determining to execute the given command bundle for the particular user; and
in response to determining to execute the given command bundle for the particular user:
performing corresponding discrete operations of the given command bundle, including: the given operation is performed using the particular value for the slot that has been resolved in the interaction.
22. The method of claim 21, wherein the given command bundle includes a call phrase for invoking the given command bundle, and wherein determining to execute the given command bundle for the particular user includes:
processing the spoken input of the particular user to determine that the spoken input includes the invoke phrase of the given command bundle; and
responsive to determining that the spoken input includes the invoke phrase of the given command bundle and based on the given command bundle being assigned to the particular user, determining to execute the given command bundle for the particular user.
23. The method of claim 21, wherein the given command bundle includes one or more context conditions, the given command bundle being automatically invoked when the one or more context conditions are met, and wherein determining to execute the given command bundle for the particular user comprises:
determining that the one or more contextual conditions are met for the particular user; and
the given command bundle is automatically invoked for the particular user in response to determining that the one or more contextual conditions are met for the particular user and based on the given command bundle being assigned to the particular user.
24. The method of claim 23, wherein the one or more contextual conditions comprise a certain time window, a certain day of the week, and/or a location of a client device within geographic boundaries.
25. The method of claim 23, wherein the one or more contextual conditions comprise two or more of: a certain time window, a certain day of the week and/or a location of the client device is within geographical limits.
26. The method of claim 21, wherein the command bundle recommendation includes a call phrase for the given command bundle and an indication of the discrete action of the given command bundle.
27. The method of claim 21, wherein performing the interaction comprises:
providing a prompt to the particular user;
receiving natural language input responsive to the prompt; and
the particular value is digested based on the natural language input.
28. The method of claim 27, wherein the particular value specifies one or more internet of things devices.
29. The method of claim 27, wherein the particular value specifies a particular time of day.
30. The method of claim 21, wherein causing the command bundle recommendation to be displayed at the computing device of the particular user is based on comparing command bundle data for the given command bundle with assistant interaction data for the particular user, the assistant interaction data being indicative of a plurality of historical actions performed by the automated assistant for the particular user.
31. The method of claim 21, wherein the command bundle data comprises command bundle embedding, and wherein comparing the command bundle data with the assistant interaction data of the particular user comprises:
generating a user action embedding based on processing at least a portion of the assistant interaction data for the particular user, and
The user action embedding is compared to the command bundle embedding.
32. A system, comprising:
a memory storing instructions;
one or more processors operable to execute the instructions to cause the one or more processors to:
such that command bundle recommendations for a given command bundle are displayed at a computing device of a particular user,
wherein causing the command bundle recommendation to be displayed is independent of receiving any query indicating search criteria for the command bundle recommendation,
wherein the given command bundle is created by an additional user, and
wherein the given command bundle includes command bundle data identifying a plurality of discrete actions that can be performed by the automated assistant, the plurality of discrete actions including a given action including a slot lacking any fixed value;
receiving, at the computing device, a selection from the particular user, the selection being a recommendation for the displayed command bundle;
in response to receiving the selection:
interacting with the particular user via the computing device of the particular user to counteract a particular value for the slot lacking any fixed value; and
Assigning the given command bundle to the particular user, wherein upon assigning the given command bundle to the particular user, the one or more processors store the particular value associated with the at least one slot for the given command bundle and for the particular user;
after assigning the given command bundle to the particular user:
determining to execute the given command bundle for the particular user; and
in response to determining to execute the given command bundle for the particular user:
performing corresponding discrete operations of the given command bundle, including: the given operation is performed using the particular value for the slot that has been resolved in the interaction.
33. The system of claim 32, wherein the given command bundle includes a call phrase for invoking the given command bundle, and wherein, in determining to execute the given command bundle for the particular user, the one or more processors:
processing the spoken input of the particular user to determine that the spoken input includes the invoke phrase of the given command bundle; and
responsive to determining that the spoken input includes the invoke phrase of the given command bundle and based on the given command bundle being assigned to the particular user, determining to execute the given command bundle for the particular user.
34. The system of claim 32, wherein the given command bundle includes one or more context conditions that are automatically invoked when satisfied, and wherein the one or more processors, upon determining to execute the given command bundle for the particular user:
determining that the one or more contextual conditions are met for the particular user; and
the given command bundle is automatically invoked for the particular user in response to determining that the one or more contextual conditions are met for the particular user and based on the given command bundle being assigned to the particular user.
35. The system of claim 34, wherein the one or more contextual conditions include a certain time window, a certain day of the week, and/or a location of the client device within geographic boundaries.
36. The system of claim 32, wherein the command bundle recommendation includes a call phrase for the given command bundle and an indication of the discrete action of the given command bundle.
37. The system of claim 36, wherein performing the interaction comprises:
providing a prompt to the particular user;
Receiving natural language input responsive to the prompt; and
the particular value is digested based on the natural language input.
38. The system of claim 37, wherein the particular value specifies one or more internet of things devices.
39. The system of claim 37, wherein the particular value specifies a particular time of day.
40. The system of claim 32, wherein causing the command bundle recommendation to be displayed at the computing device of the particular user is based on comparing command bundle data for the given command bundle with assistant interaction data for the particular user, the assistant interaction data being indicative of a plurality of historical actions performed by the automated assistant for the particular user.
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762567732P | 2017-10-03 | 2017-10-03 | |
US62/567,732 | 2017-10-03 | ||
US15/730,514 | 2017-10-11 | ||
US15/730,514 US10546023B2 (en) | 2017-10-03 | 2017-10-11 | Providing command bundle suggestions for an automated assistant |
CN201880038793.2A CN111033492B (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for automated assistants |
PCT/US2018/054012 WO2019070747A1 (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for an automated assistant |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880038793.2A Division CN111033492B (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for automated assistants |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117194609A true CN117194609A (en) | 2023-12-08 |
Family
ID=65897329
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202311179263.9A Pending CN117194609A (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for automated assistants |
CN201880038793.2A Active CN111033492B (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for automated assistants |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880038793.2A Active CN111033492B (en) | 2017-10-03 | 2018-10-02 | Providing command bundle suggestions for automated assistants |
Country Status (6)
Country | Link |
---|---|
US (4) | US10546023B2 (en) |
EP (2) | EP4213043A1 (en) |
JP (1) | JP6978520B2 (en) |
KR (1) | KR102313473B1 (en) |
CN (2) | CN117194609A (en) |
WO (1) | WO2019070747A1 (en) |
Families Citing this family (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10546023B2 (en) * | 2017-10-03 | 2020-01-28 | Google Llc | Providing command bundle suggestions for an automated assistant |
KR20230136696A (en) * | 2018-05-07 | 2023-09-26 | 구글 엘엘씨 | Recommending automated assistant action for inclusion in automated assistant routine |
US20190348033A1 (en) * | 2018-05-10 | 2019-11-14 | Fujitsu Limited | Generating a command for a voice assistant using vocal input |
KR20200027753A (en) * | 2018-09-05 | 2020-03-13 | 삼성전자주식회사 | Electronic Device and the Method for Operating Task corresponding to Shortened Command |
US11468881B2 (en) * | 2019-03-29 | 2022-10-11 | Samsung Electronics Co., Ltd. | Method and system for semantic intelligent task learning and adaptive execution |
US11093715B2 (en) | 2019-03-29 | 2021-08-17 | Samsung Electronics Co., Ltd. | Method and system for learning and enabling commands via user demonstration |
KR20200126509A (en) * | 2019-04-30 | 2020-11-09 | 삼성전자주식회사 | Home appliance and method for controlling thereof |
CN113906501A (en) | 2019-05-06 | 2022-01-07 | 谷歌有限责任公司 | Subtask(s) to undertake a predicted action in response to a separate user interaction with an automated assistant prior to undertaking the predicted action |
US10719666B1 (en) * | 2020-01-31 | 2020-07-21 | Capital One Services, Llc | Computer-based systems utilizing textual embedding space software engines for identifying candidate phrases in a text document and methods of use thereof |
US11922193B2 (en) | 2020-02-28 | 2024-03-05 | Google Llc | Interface and mode selection for digital action execution |
US11594213B2 (en) | 2020-03-03 | 2023-02-28 | Rovi Guides, Inc. | Systems and methods for interpreting natural language search queries |
US11914561B2 (en) | 2020-03-03 | 2024-02-27 | Rovi Guides, Inc. | Systems and methods for interpreting natural language search queries using training data |
WO2021227059A1 (en) * | 2020-05-15 | 2021-11-18 | 深圳市世强元件网络有限公司 | Multi-way tree-based search word recommendation method and system |
US20210398524A1 (en) * | 2020-06-22 | 2021-12-23 | Amazon Technologies, Inc. | Natural language processing |
CN111881263A (en) * | 2020-08-12 | 2020-11-03 | 福州大学 | Service recommendation online optimization method for intelligent home scene |
US11507572B2 (en) * | 2020-09-30 | 2022-11-22 | Rovi Guides, Inc. | Systems and methods for interpreting natural language search queries |
US20220415319A1 (en) * | 2021-06-28 | 2022-12-29 | Google Llc | On-device generation and personalization of zero-prefix suggestion(s) and use thereof |
KR20230045333A (en) * | 2021-09-28 | 2023-04-04 | 삼성전자주식회사 | Electronic device and operation method thereof |
US11803253B2 (en) * | 2021-11-29 | 2023-10-31 | International Business Machines Corporation | Keyword recommendations for virtual keyboards |
WO2023239638A1 (en) * | 2022-06-09 | 2023-12-14 | MagicX Inc. | Digital interface with user input guidance |
WO2024067981A1 (en) * | 2022-09-29 | 2024-04-04 | Fraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V. | Dialog system and method with improved human-machine dialog concepts |
US11908475B1 (en) * | 2023-02-10 | 2024-02-20 | Cephable Inc. | Systems, methods and non-transitory computer readable media for human interface device accessibility |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6513006B2 (en) * | 1999-08-26 | 2003-01-28 | Matsushita Electronic Industrial Co., Ltd. | Automatic control of household activity using speech recognition and natural language |
JP4684739B2 (en) * | 2005-05-13 | 2011-05-18 | クラリオン株式会社 | Audio processing device |
JP5366173B2 (en) | 2008-02-28 | 2013-12-11 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Operation support server device, operation support method, and computer program |
WO2012135210A2 (en) * | 2011-03-31 | 2012-10-04 | Microsoft Corporation | Location-based conversational understanding |
KR102091003B1 (en) * | 2012-12-10 | 2020-03-19 | 삼성전자 주식회사 | Method and apparatus for providing context aware service using speech recognition |
US9047271B1 (en) * | 2013-02-28 | 2015-06-02 | Google Inc. | Mining data for natural language system |
AU2014274913B2 (en) * | 2013-06-07 | 2017-05-11 | Apple Inc. | Intelligent automated assistant |
US9930519B2 (en) * | 2013-11-21 | 2018-03-27 | Samsung Electronics Co., Ltd. | Method and apparatus for controlling home devices on group basis based upon history of the home devices |
US9966065B2 (en) * | 2014-05-30 | 2018-05-08 | Apple Inc. | Multi-command single utterance input method |
US10170123B2 (en) * | 2014-05-30 | 2019-01-01 | Apple Inc. | Intelligent assistant for home automation |
US9576575B2 (en) | 2014-10-27 | 2017-02-21 | Toyota Motor Engineering & Manufacturing North America, Inc. | Providing voice recognition shortcuts based on user verbal input |
US9646611B2 (en) * | 2014-11-06 | 2017-05-09 | Microsoft Technology Licensing, Llc | Context-based actions |
WO2016094807A1 (en) * | 2014-12-11 | 2016-06-16 | Vishal Sharma | Virtual assistant system to enable actionable messaging |
US9508339B2 (en) * | 2015-01-30 | 2016-11-29 | Microsoft Technology Licensing, Llc | Updating language understanding classifier models for a digital personal assistant based on crowd-sourcing |
US10270609B2 (en) * | 2015-02-24 | 2019-04-23 | BrainofT Inc. | Automatically learning and controlling connected devices |
US9792281B2 (en) | 2015-06-15 | 2017-10-17 | Microsoft Technology Licensing, Llc | Contextual language generation by leveraging language understanding |
US10262654B2 (en) | 2015-09-24 | 2019-04-16 | Microsoft Technology Licensing, Llc | Detecting actionable items in a conversation among participants |
US10018977B2 (en) * | 2015-10-05 | 2018-07-10 | Savant Systems, Llc | History-based key phrase suggestions for voice control of a home automation system |
US20170250930A1 (en) * | 2016-02-29 | 2017-08-31 | Outbrain Inc. | Interactive content recommendation personalization assistant |
US10387888B2 (en) | 2016-07-08 | 2019-08-20 | Asapp, Inc. | Assisting entities in responding to a request of a user |
US10444717B2 (en) * | 2016-09-16 | 2019-10-15 | Whirlpool Corporation | Coordination of control modes among appliances and utilities |
KR101741647B1 (en) | 2016-09-30 | 2017-05-30 | 현대자동차주식회사 | Vehicle and method of controlling the same |
US20180277123A1 (en) * | 2017-03-22 | 2018-09-27 | Bragi GmbH | Gesture controlled multi-peripheral management |
US11074280B2 (en) * | 2017-05-18 | 2021-07-27 | Aiqudo, Inc | Cluster based search and recommendation method to rapidly on-board commands in personal assistants |
US10546023B2 (en) * | 2017-10-03 | 2020-01-28 | Google Llc | Providing command bundle suggestions for an automated assistant |
-
2017
- 2017-10-11 US US15/730,514 patent/US10546023B2/en active Active
-
2018
- 2018-10-02 EP EP23160250.9A patent/EP4213043A1/en active Pending
- 2018-10-02 KR KR1020197036636A patent/KR102313473B1/en active IP Right Grant
- 2018-10-02 JP JP2019568392A patent/JP6978520B2/en active Active
- 2018-10-02 WO PCT/US2018/054012 patent/WO2019070747A1/en unknown
- 2018-10-02 EP EP18792747.0A patent/EP3491533B1/en active Active
- 2018-10-02 CN CN202311179263.9A patent/CN117194609A/en active Pending
- 2018-10-02 CN CN201880038793.2A patent/CN111033492B/en active Active
-
2019
- 2019-11-22 US US16/692,432 patent/US11232155B2/en active Active
-
2022
- 2022-01-24 US US17/582,847 patent/US11720635B2/en active Active
-
2023
- 2023-06-09 US US18/207,987 patent/US20230401259A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
WO2019070747A1 (en) | 2019-04-11 |
US10546023B2 (en) | 2020-01-28 |
EP3491533A1 (en) | 2019-06-05 |
US11720635B2 (en) | 2023-08-08 |
KR20200007882A (en) | 2020-01-22 |
US20190102482A1 (en) | 2019-04-04 |
EP3491533B1 (en) | 2023-04-19 |
CN111033492A (en) | 2020-04-17 |
JP2020530581A (en) | 2020-10-22 |
US20200089709A1 (en) | 2020-03-19 |
CN111033492B (en) | 2023-10-10 |
US20220148595A1 (en) | 2022-05-12 |
US11232155B2 (en) | 2022-01-25 |
KR102313473B1 (en) | 2021-10-18 |
US20230401259A1 (en) | 2023-12-14 |
EP4213043A1 (en) | 2023-07-19 |
JP6978520B2 (en) | 2021-12-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111033492B (en) | Providing command bundle suggestions for automated assistants | |
JP7297836B2 (en) | Voice user interface shortcuts for assistant applications | |
AU2019432912B2 (en) | Dynamically adapting assistant responses | |
US11347801B2 (en) | Multi-modal interaction between users, automated assistants, and other computing services | |
WO2021232957A1 (en) | Response method in man-machine dialogue, dialogue system, and storage medium | |
US10679622B2 (en) | Dependency graph generation in a networked system | |
AU2021203758B2 (en) | Tailoring an interactive dialog application based on creator provided content | |
US11775254B2 (en) | Analyzing graphical user interfaces to facilitate automatic interaction | |
US11200893B2 (en) | Multi-modal interaction between users, automated assistants, and other computing services | |
CN113330512A (en) | Supplementing an automated assistant with speech input according to a selected suggestion | |
US20200294497A1 (en) | Multi-modal interaction between users, automated assistants, and other computing services | |
JP7135114B2 (en) | determining whether to automatically resume the first automated assistant session upon termination of the interrupting second session; | |
US20230169102A1 (en) | Determining responsive content for a compound query based on a set of generated sub-queries | |
KR20230110788A (en) | Passive disambiguation of assistant commands | |
US20240038246A1 (en) | Non-wake word invocation of an automated assistant from certain utterances related to display content |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |