JP6397101B2 - Optimized browser rendering process - Google Patents
Optimized browser rendering process Download PDFInfo
- Publication number
- JP6397101B2 JP6397101B2 JP2017175573A JP2017175573A JP6397101B2 JP 6397101 B2 JP6397101 B2 JP 6397101B2 JP 2017175573 A JP2017175573 A JP 2017175573A JP 2017175573 A JP2017175573 A JP 2017175573A JP 6397101 B2 JP6397101 B2 JP 6397101B2
- Authority
- JP
- Japan
- Prior art keywords
- url
- resource
- optional
- embedded resource
- rendering result
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Description
本発明は、最適化されたブラウザレンダリング処理に関する。 The present invention relates to an optimized browser rendering process.
多くのウェブページが動的に生成される。これは、ウェブブラウザのユーザによって見られた最後のページが、ブラウザレンダリング処理によって少なくとも部分的に生成されることを意味する。スクリプト、画像、およびスタイルシートのような埋込オブジェクトは、しばしば、ウェブページ内に埋め込まれ、レンダリングされたウェブページのコンテンツおよび外観に影響を与え得るか、または、動的なコンテンツを生成することに無関係な他の目的のために含まれ得る。たとえば、Google Analytics JavaScript（登録商標）コードは、ウェブサイトへのトラフィックの追跡を助けるがコンテンツに影響を与えない埋込オブジェクトであり得る。埋込オブジェクトはそれ自身、追加の埋込オブジェクトを含み得る。同様に、いくつかの埋込オブジェクトは、秘匿され、ユーザに見えないことがあり得る。ウェブページは何百もの埋込オブジェクトを有し得、ブラウザのレンダリングエンジンがユーザのためにウェブページをレンダリングするために費やす時間の多くは、ブラウザがこれら埋込リソースをフェッチするのを待つことに費やされる。 Many web pages are generated dynamically. This means that the last page viewed by the user of the web browser is at least partially generated by the browser rendering process. Embedded objects such as scripts, images, and style sheets are often embedded within web pages and can affect the content and appearance of rendered web pages, or generate dynamic content May be included for other purposes unrelated to. For example, the Google Analytics JavaScript code can be an embedded object that helps track traffic to the website but does not affect the content. An embedded object may itself contain additional embedded objects. Similarly, some embedded objects may be hidden and not visible to the user. A web page can have hundreds of embedded objects, and much of the time that the browser rendering engine spends rendering the web page for the user waits for the browser to fetch these embedded resources. Is spent.
実施は、オプションの埋込リソースを識別し、レンダリングエンジンが、そのようなリソースをスキップすることを可能にする。これは、レンダリング時間を改善する。オプションリソースは、レンダリングされたウェブページのコンテンツに影響を与えることなく、意味のある、または、顕著な手法でスキップされ得る埋込オブジェクトを表す。ブラウザは、レンダリング処理の間、そのようなオプションの埋込リソースをスキップし得る。その結果、より高速なロード時間となる。 Implementations identify optional embedded resources and allow the rendering engine to skip such resources. This improves rendering time. Optional resources represent embedded objects that can be skipped in a meaningful or salient manner without affecting the content of the rendered web page. The browser may skip such optional embedded resources during the rendering process. The result is a faster load time.
1つの態様では、システムは、少なくとも1つのプロセッサと、少なくとも1つのプロセッサによって実行された場合に、システムに対して動作を実行させる命令を記憶するメモリとを含む。これら動作は、フェッチレコードに記憶された複数のURLに共通のURLパターンを識別するステップと、複数のURLからURLのサンプルを選択するステップとを含み得る。これら動作はまた、URLのためのコンテンツを使用してURLのエンベッダのための第1のレンダリング結果をレンダリングし、URLのためのコンテンツを使用することなくエンベッダのための第2のレンダリング結果をレンダリングし、第1のレンダリング結果を第2のレンダリング結果と比較することによってURLのための類似性スコアを計算することによって、URLがオプションであるか否かを、サンプル内の各URLについて判定するステップを含む。この方法はまた、類似性スコアが類似性しきい値よりも大きい場合、URLがオプションであると判定するステップと、サンプル内のあらかじめ決定された数のURLがオプションである場合、オプションリソースパターンのデータストアに、URLパターンを記憶するステップとを含む。 In one aspect, a system includes at least one processor and memory that stores instructions that, when executed by the at least one processor, cause the system to perform an operation. These operations may include identifying a URL pattern common to a plurality of URLs stored in the fetch record and selecting a sample of URLs from the plurality of URLs. These behaviors also render the first rendering result for the URL embedder using the content for the URL and the second rendering result for the embedder without using the content for the URL And determining for each URL in the sample whether the URL is optional by calculating a similarity score for the URL by comparing the first rendering result with the second rendering result. including. The method also determines if the URL is optional if the similarity score is greater than the similarity threshold, and if the predetermined number of URLs in the sample are optional, the option resource pattern Storing the URL pattern in the data store.
本明細書で説明される主題の実施の1つまたは複数は、以下の特徴のうちの1つまたは複数を含み得る。たとえば、これら動作はまた、要求された埋込リソースのコンテンツを求める要求を受信するステップと、要求された埋込リソースがデータストア内のパターンに一致するか否かを判定するステップと、要求された埋込リソースがパターンに一致する場合、要求された埋込リソースがオプションであることを示すインジケーションを返すステップとを含み得る。いくつかの実施では、インジケーションは、エラーが発見されていないURLであり得る。別の例として、フェッチレコードに記憶された複数のURLに共通のURLパターンを識別するステップは、URLからクエリ文字列の少なくとも一部を削除することによって、フェッチレコードに記憶された各々のURLのためのグループURLを生成するステップと、グループURLによってURLをクラスタ化するステップとを含み得る。別の例として、フェッチレコードに記憶された複数のURLに共通のURLパターンを識別するステップは、URLから少なくともクエリ文字列の一部を削除し、グループURLによってURLをクラスタ化し、最多数のメンバを有するクラスタのグループURLをURLパターンとして選択することによって、フェッチレコードに記憶された各々のURLのためのグループURLを生成するステップを含み得る。別の例として、類似性スコアを計算するステップは、第1のレンダリング結果のDOMツリー、および第2のレンダリング結果のDOMツリーのための最長共通シーケンスを決定するステップと、類似性スコアを決定するために最長共通シーケンスを使用するステップとを含み得る。 One or more implementations of the subject matter described in this specification may include one or more of the following features. For example, these operations are also required to receive a request for content of the requested embedded resource and to determine whether the requested embedded resource matches a pattern in the data store. Returning an indication that the requested embedded resource is optional if the embedded resource matches the pattern. In some implementations, the indication may be a URL where no error has been found. As another example, the step of identifying a URL pattern common to multiple URLs stored in a fetch record includes removing at least a portion of the query string from the URL, for each URL stored in the fetch record. Generating a group URL for, and clustering the URL by the group URL. As another example, identifying a URL pattern common to multiple URLs stored in a fetch record removes at least a portion of the query string from the URL, clusters the URLs by group URL, and the largest number of members Generating a group URL for each URL stored in the fetch record by selecting the group URL of the cluster having As another example, the step of calculating the similarity score includes determining a similarity score and determining a longest common sequence for the DOM tree of the first rendering result and the DOM tree of the second rendering result. Using the longest common sequence for the purpose.
別の態様では、コンピュータによって実施される方法は、フェッチレコードに記憶された複数のURLに共通のURLパターンを識別するステップと、少なくとも1つのプロセッサを使用して、複数のURLからURLのサンプルを選択するステップとを含む。この方法はまた、URLのためのコンテンツを使用して、URLのエンベッダのための第1のレンダリング結果を生成し、URLのためのコンテンツを使用することなく、エンベッダのための第2のレンダリング結果を生成し、第1のレンダリング結果と第2のレンダリング結果とを比較することによってURLのための類似性スコアを計算することによって、サンプルにおける各URLについて、URLがオプションであるか否かを判定するステップを含み得る。類似性スコアが類似性しきい値よりも大きい場合、URLはオプションである。この方法はまた、サンプルにおけるURLの大多数がオプションである場合、オプションリソースパターンのデータストアにURLパターンを記憶するステップを含み得る。 In another aspect, a computer-implemented method identifies a URL pattern common to multiple URLs stored in a fetch record and uses at least one processor to sample URLs from multiple URLs. Selecting. This method also uses the content for the URL to generate the first rendering result for the URL embedder and the second rendering result for the embeder without using the content for the URL Determine whether the URL is optional for each URL in the sample by generating a similarity score for the URL by comparing the first rendering result with the second rendering result May include the step of: If the similarity score is greater than the similarity threshold, the URL is optional. The method may also include storing the URL pattern in the optional resource pattern data store if the majority of the URLs in the sample are optional.
本明細書で説明される主題の実施の1つまたは複数は、以下の特徴のうちの1つまたは複数を含み得る。たとえば、方法はまた、サンプルにおけるURLがオプションであるか否かを判定するステップの前に、複数のURLによって表される数が、サイズしきい値を超えるか否かを判定するステップをも含み得る。別の例として、方法は、サンプル内のすべてのURLがオプションである場合、オプションリソースパターンのデータストアにURLパターンを記憶するステップを含み得る。別の例として、フェッチレコードにおける複数のURLに共通のURLパターンを識別するステップは、フェッチレコードにおける各々のURLについて、URLから少なくともクエリ文字列の一部を削除し、グループURLによってクラスタ化し、クラスタにおけるメンバの数がしきい値を満足する場合、クラスタのグループURLを選択することによって、フェッチレコードにおけるURLのためのグループURLを生成するステップを含み得る。 One or more implementations of the subject matter described in this specification may include one or more of the following features. For example, the method also includes determining whether the number represented by the plurality of URLs exceeds a size threshold before determining whether the URL in the sample is optional. obtain. As another example, the method may include storing the URL pattern in an optional resource pattern data store if all URLs in the sample are optional. As another example, the step of identifying a URL pattern common to multiple URLs in a fetch record is to remove at least part of the query string from the URL for each URL in the fetch record, cluster by group URL, If the number of members in satisfies a threshold, it may include generating a group URL for the URL in the fetch record by selecting a group URL for the cluster.
別の態様では、方法は、ウェブページをレンダリングする要求を受信するステップと、フェッチを要求する、ウェブページ内の少なくとも1つの埋込リソースを識別するステップと、埋込リソースがオプションリソースであると判定するステップと、埋込リソースのためのコンテンツをフェッチすることなく、埋込リソースが利用不可能であるかのようにウェブページをレンダリングするステップとを含む。 In another aspect, a method receives a request to render a web page, identifies at least one embedded resource in the web page that requests a fetch, and the embedded resource is an optional resource. Determining and rendering the web page as if the embedded resource is not available without fetching the content for the embedded resource.
本明細書で説明される主題の実施の1つまたは複数は、以下の特徴のうちの1つまたは複数を含み得る。たとえば、埋込リソースがオプションリソースであると判定するステップは、埋込リソースのためのURLが、オプションリソースのデータストア内のパターンに一致すると判定するステップを含み得る。別の例として、方法はまた、オプションリソースのためのパターンのデータストアを、サービスから受信するステップを含み得、埋込リソースがオプションリソースであると判定するステップは、埋込リソースのためのURLが、データストア内のパターンと一致すると判定するステップを含む。別の例として、埋込リソースがオプションリソースであると判定するステップは、URLからクエリ文字列部分を削除することによって、埋込リソースのためのURLをリライトするステップと、リライトされたURLを、オプションリソースのデータストア内のパターンに一致させるステップとを含み得、リライトされたURLがこのパターンに一致する場合、埋込リソースはオプションである。別の例として、埋込リソースがオプションリソースであると判定するステップは、少なくともクエリ文字列の一部をURLから削除することによって、埋込リソースのためのURLをリライトするステップと、リライトされたURLを、オプションリソースのデータストア内のパターンに一致させるステップとを含み得、リライトされたURLがこのパターンに一致する場合、埋込リソースはオプションである。 One or more implementations of the subject matter described in this specification may include one or more of the following features. For example, determining that the embedded resource is an optional resource may include determining that the URL for the embedded resource matches a pattern in the data store of the optional resource. As another example, the method may also include receiving a pattern data store for an optional resource from the service, wherein determining that the embedded resource is an optional resource includes a URL for the embedded resource. Includes determining that the pattern matches the pattern in the data store. As another example, the step of determining that the embedded resource is an optional resource includes rewriting the URL for the embedded resource by removing the query string portion from the URL, Matching the pattern in the data store of the optional resource, and if the rewritten URL matches this pattern, the embedded resource is optional. As another example, determining that an embedded resource is an optional resource includes rewriting the URL for the embedded resource by removing at least part of the query string from the URL, and rewritten Matching the URL to a pattern in the optional resource's data store, and the embedded resource is optional if the rewritten URL matches this pattern.
別の態様では、非一時的なコンピュータ読取可能な媒体は、コンピュータシステムに対して、上述された方法のうちの1つまたは複数を実行させる、基板に形成された少なくとも1つのプロセッサによって実行可能な命令を含み得る。 In another aspect, a non-transitory computer readable medium is executable by at least one processor formed on a substrate that causes a computer system to perform one or more of the methods described above. Instructions can be included.
本明細書で説明される主題の実施の1つまたは複数は、以下の利点のうちの1つまたは複数を実現するように実施され得る。一例として、オプションの埋込リソースをスキップするステップによって、レンダリングエンジンは、コンテンツを喪失することなく、ウェブページをより高速にレンダリングできるようになる。ブラウザは、オプションの埋込リソースをフェッチするステップをスキップし得るのみならず、ブラウザはまた、スキップされたオプションの埋込リソースに埋め込まれたオブジェクトをフェッチするステップをもスキップする。したがって、開示された実施は、ネットワーク帯域幅およびバッテリ消費量を節約する。ウェブページは、何百もの埋込オブジェクトを含み得るので、そのような最適化は本質的になり得る。 One or more of the implementations of the subject matter described in this specification may be implemented to realize one or more of the following advantages. As an example, the step of skipping optional embedded resources allows the rendering engine to render web pages faster without losing content. Not only can the browser skip the step of fetching the optional embedded resource, but the browser also skips the step of fetching the object embedded in the skipped optional embedded resource. Thus, the disclosed implementation saves network bandwidth and battery consumption. Such optimization can be essential because web pages can contain hundreds of embedded objects.
開示された実施は、オプションの埋込オブジェクト、または、レンダリングされたウェブページのコンテンツに対して顕著な影響を与えない埋込オブジェクトを識別し、これによって、ブラウザレンダリングエンジンは、オプションの埋込オブジェクトをフェッチすることなく、そのようなウェブページをレンダリングできるようになる。これは、フェッチシステムにおけるレンダリング時間および負荷を改善する。これは、スマートフォンおよびタブレットのような制限されたリソースしか有さないコンピュータデバイスにとって重要である。オプションの埋込オブジェクトとともにレンダリングされたエンベッダウェブページのレンダリング結果が、オプションの埋込オブジェクトなしでレイダリングされたエンベッダウェブページのレンダリング結果に類似している場合、埋込リソースは、最適化されたレンダリングのための候補となり得る。類似性は、ページにおけるトークンの類似性、アウトリンクの類似性、ページレイアウトの類似性等によって判定され得る。いくつかの実施では、システムは、レンダリング結果が類似しているか否かを判定するために、最長共通シーケンス測定を使用し得る。いくつかの実施では、スナップショットの主要な構成要素が、類似性しきい値を満足する類似性スコアを有している場合、このスナップショットは類似していると考えられ得る。埋込リソースがオプションであるとシステムが判定すると、システムは、オプションの埋込リソースのリストに埋込リソース(たとえば、そのユニフォームリソースロケータすなわちURL)を記憶し得る。いくつかの実施では、システムは、他のオプションの埋込リソースを識別するために使用され得るパターンを識別するために、オプションの埋込リソースURLをアグリゲートし得る。 The disclosed implementation identifies optional embedded objects or embedded objects that do not significantly affect the content of the rendered web page, so that the browser rendering engine can You can render such a web page without fetching. This improves rendering time and load in the fetch system. This is important for computing devices that have limited resources, such as smartphones and tablets. An embedded resource is optimal if the rendering result of an embedded web page rendered with an optional embedded object is similar to the rendered result of an embedded web page rendered without an optional embedded object Can be a candidate for a customized rendering. Similarity may be determined by token similarity, outlink similarity, page layout similarity, etc. on the page. In some implementations, the system may use the longest common sequence measurement to determine if the rendering results are similar. In some implementations, a snapshot may be considered similar if the major components of the snapshot have a similarity score that satisfies a similarity threshold. If the system determines that an embedded resource is optional, the system may store the embedded resource (eg, its uniform resource locator or URL) in a list of optional embedded resources. In some implementations, the system may aggregate optional embedded resource URLs to identify patterns that may be used to identify other optional embedded resources.
ブラウザがウェブページのレンダリングを開始した場合、埋込リソースのうちの何れかがオプションであれば、ブラウザは、サービスを要求し得る。いくつかの実施では、これは、フェッチ要求の一部として行われ得る。サービスは、正確な一致、または、データストアにおけるパターンの一致の何れかによって、要求された埋込リソースのURLを、オプションの埋込オブジェクトのデータストアへ一致させ得る。サービスが一致を発見すると、サービスは、ブラウザに対して、どの埋込リソースがオプションであるかを伝え、ブラウザは、これら埋込リソースをフェッチすることなく、ウェブページをレンダリングし得る。そのように最適化されたブラウザレンダリングは、ブラウザレンダリング処理を、よりさらにリソース効率的にする。いくつかの実施では、オプションの埋込リソースデータストアは、たとえばモバイルブラウザおよびデスクトップブラウザのように、ブラウザタイプを区別し得る。 When the browser begins to render a web page, the browser may request a service if any of the embedded resources are optional. In some implementations this may be done as part of a fetch request. The service may match the URL of the requested embedded resource to the optional embedded object data store, either by exact match or pattern match in the data store. If the service finds a match, the service tells the browser which embedded resources are optional, and the browser can render the web page without fetching these embedded resources. Such optimized browser rendering makes the browser rendering process even more resource efficient. In some implementations, the optional embedded resource data store may differentiate browser types, such as mobile browsers and desktop browsers.
図1は、例示的な実施に従うシステムのブロック図である。システム100は、オプションの埋込リソースとオプションリソースパターンとを識別し、ブラウザレンダリング処理を最適化するためにこれらパターンを使用するために使用され得る。システム100は、多くの異なるデバイスの形態をとるコンピューティングデバイスを含み得る。たとえば、システム100は、図6に描写されたようなコンピュータデバイス600、および図7に描写されたようなコンピュータデバイス700の例であるコンピューティングデバイスを含み得る。 FIG. 1 is a block diagram of a system according to an example implementation. The system 100 can be used to identify optional embedded resources and optional resource patterns and use these patterns to optimize the browser rendering process. System 100 may include computing devices that take the form of many different devices. For example, the system 100 may include a computing device 600 that is an example of a computing device 600 as depicted in FIG. 6 and a computing device 700 as depicted in FIG.
システム100は、バッチレンダリングシステム110を含み得る。バッチレンダリングシステム110は、標準的なサーバ、そのようなサーバのグループ、クライアント-サーバシステム、またはラックサーバシステムであり得る。それに加えて、バッチレンダリングシステム110は、パーソナルコンピュータにおいて実施され得る。バッチレンダリングシステム110は、メモリに記憶された、1つまたは複数のマシン実行可能な命令、またはいくつかのソフトウェア、ファームウェア、またはこれらの組合せを実行するように構成された1つまたは複数のプロセッサを含み得る。たとえば、バッチレンダリングシステム110は、レンダリングエンジン120、フェッチサービス122、ウェブ-クローリングエンジン124、およびオプションリソース識別エンジン126を含み得る。バッチレンダリングシステム110は、レンダリングされたウェブページを、バッチモードで、たとえば、インデクス処理の一部として生成し、この処理において、フェッチレコード132を生成し得る。これは、バッチレンダリングシステム110が、オプションリソースパターン130を生成するために使用し得る。 The system 100 can include a batch rendering system 110. The batch rendering system 110 can be a standard server, a group of such servers, a client-server system, or a rack server system. In addition, the batch rendering system 110 may be implemented on a personal computer. The batch rendering system 110 includes one or more processors configured to execute one or more machine-executable instructions or some software, firmware, or combinations thereof, stored in memory. May be included. For example, the batch rendering system 110 may include a rendering engine 120, a fetch service 122, a web-crawling engine 124, and an optional resource identification engine 126. The batch rendering system 110 may generate rendered web pages in batch mode, for example, as part of an index process, and in this process, a fetch record 132 may be generated. This can be used by the batch rendering system 110 to generate the option resource pattern 130.
ダウンストリーム処理は、バッチレンダリングシステム110がウェブページをバッチモードでレンダリングすることを要求し得る。いくつかの実施では、バッチレンダリングシステム110は、オプションリソース識別エンジン126またはインデクスエンジン(図示せず)のようなダウンストリーム処理を含み得る。いくつかの実施では、ダウンストリーム処理は、バッチレンダリングシステム110とは異なるコンピューティングデバイス上で実行され得る。たとえば、ダウンストリーム処理は、遠隔手順コールを介してバッチレンダリングシステムへ要求を送るインデクスエンジンまたは広告プラットフォームであり得る。ダウンストリーム処理は、バッチレンダリングエンジン120のうちの1つが、特定のウェブページのレンダリング結果を生成することを要求し得る。各バッチレンダリングエンジン120は、パーソナルウェブブラウザのためにレンダラをエミュレートするように構成され得るが、バッチレンダリングのために最適化されている。バッチレンダリングシステム110は、何千ものバッチレンダリングエンジン120を含み得る。そして、特定の要求へ応答するバッチレンダリングエンジン120のうちの1つを選択するために、負荷平準化を使用し得る。要求されたウェブページは、スタイルシート、JavaScript（登録商標）、画像等のような埋込オブジェクトを含み得る。バッチレンダリングエンジン120は、フェッチサービス122を使用して、埋込オブジェクトのためのコンテンツを要求し得る。 Downstream processing may require the batch rendering system 110 to render the web page in batch mode. In some implementations, the batch rendering system 110 may include downstream processing such as an optional resource identification engine 126 or an index engine (not shown). In some implementations, the downstream processing may be performed on a different computing device than the batch rendering system 110. For example, downstream processing may be an index engine or advertising platform that sends requests to a batch rendering system via a remote procedure call. Downstream processing may require one of the batch rendering engines 120 to generate a rendering result for a particular web page. Each batch rendering engine 120 may be configured to emulate a renderer for a personal web browser, but is optimized for batch rendering. Batch rendering system 110 may include thousands of batch rendering engines 120. Load leveling can then be used to select one of the batch rendering engines 120 that responds to a particular request. The requested web page may include embedded objects such as style sheets, JavaScript, images, etc. Batch rendering engine 120 may request content for embedded objects using fetch service 122.
フェッチサービス122は、どの埋込リソースがホストサーバ190からフェッチされる必要があるのか、どの埋込リソースがキャッシュから戻され得るのか、および、どのリソースが、戻される必要がないのか、を判定し得る。ホストサーバ190は、1つまたは複数のウェブページ、または、1つもしくは複数のウェブページに埋め込まれたリソースをホストする、インターネットを介してアクセス可能な任意のタイプのコンピューティングデバイスであり得る。埋込リソースがフェッチされる必要があるのであれば、フェッチサービス122は、従来技術を使用して、ウェブ-クローリングエンジン124を介して埋込オブジェクトのためのコンテンツを要求し得る。インデクスエンジンのようなダウンストリーム処理はまた、ウェブ-クローリングエンジン124を介してサーバ190からコンテンツを要求し得る。ウェブ-クローリングエンジン124を介したフェッチ要求の結果として、バッチレンダリングエンジン110は、フェッチレコード132を生成し得る。フェッチレコード132は、どのウェブページおよび埋込オブジェクトが要求されホストサーバ190から検索されたのかに関する情報を含み得る。フェッチレコード132はまた、もしあれば、要求の時間、エンベッダウェブページ等のような追加の情報をも含み得る。 The fetch service 122 determines which embedded resources need to be fetched from the host server 190, which embedded resources can be returned from the cache, and which resources do not need to be returned. obtain. Host server 190 may be any type of computing device accessible via the Internet that hosts one or more web pages or resources embedded in one or more web pages. If the embedded resource needs to be fetched, the fetch service 122 may request content for the embedded object via the web-crawling engine 124 using conventional techniques. Downstream processing, such as an index engine, may also request content from the server 190 via the web-crawling engine 124. As a result of a fetch request via the web-crawling engine 124, the batch rendering engine 110 may generate a fetch record 132. The fetch record 132 may include information regarding which web pages and embedded objects were requested and retrieved from the host server 190. The fetch record 132 may also include additional information, such as time of request, embedder web page, etc., if any.
ウェブ-クローリングエンジン124、バッチレンダリングエンジン120、およびフェッチサービス122は、ワールドワイドウェブにおいて発見され得るウェブページのような多数のウェブページを効率的にレンダリングするために共に動作する。ウェブページのレンダリングは、レンダリング結果である。これは、ダウンストリーム要求処理に対して有用な、さもなければ、利用不可能な、様々なデータ要素を含む。オプションリソース識別エンジン126は、オプションリソースパターン130を生成するために、バッチレンダリングエンジン120を使用し得る。オプションリソース識別エンジン126は、入力としてフェッチレコード132を使用して、周期的に(たとえば、毎日、週に2回等)実行し得る。オプションリソース識別エンジン126は、フェッチレコード132を分析し、前の周期にフェッチされたURLのためのパターンを生成し得る。たとえば、オプションリソース識別エンジン126は、フェッチレコードにおけるURLのクエリ文字列を取り除き、各々のURLのためのグループURLを生成する。クエリ文字列は、URLにおける疑問符(?)の後の任意のキャラクタであり得る。いくつかの実施では、クエリ文字列の一部のみが、URLのためのグループURLを生成するために取り除かれ得る。その後、オプションリソース識別エンジン126は、グループURLをソートまたはクラスタ化し得、時間周期から、どのグループURLが最多数のフェッチ要求を有していたのかを判定し得る。 Web-crawling engine 124, batch rendering engine 120, and fetch service 122 work together to efficiently render a large number of web pages, such as web pages that can be found on the World Wide Web. The rendering of the web page is the rendering result. This includes various data elements that are useful or otherwise unavailable for downstream request processing. Optional resource identification engine 126 may use batch rendering engine 120 to generate optional resource pattern 130. Optional resource identification engine 126 may execute periodically (eg, daily, twice a week, etc.) using fetch record 132 as input. Optional resource identification engine 126 may analyze fetch record 132 and generate a pattern for URLs fetched in the previous cycle. For example, the option resource identification engine 126 removes the URL query string in the fetch record and generates a group URL for each URL. The query string can be any character after the question mark (?) In the URL. In some implementations, only a portion of the query string can be removed to generate a group URL for the URL. The option resource identification engine 126 can then sort or cluster the group URLs and determine from the time period which group URLs had the most fetch requests.
オプションリソース識別エンジン126は、最多数のフェッチ要求を有するグループURLを、潜在的なパターンとして選択し得る。そのようなパターンは、最も頻繁にフェッチされるので、ブラウジング処理を最適化するための最大の可能性を有する埋込リソースを表す。オプションリソース識別エンジンは、潜在的なパターンに一致するURLが、または、潜在的なパターンに一致するURLのサンプルがオプションであるか否かを判定し得る。たとえば、オプションリソース識別エンジン126は、フェッチレコード132からの潜在的なパターンに一致する埋込リソースを識別し得、バッチレンダリングエンジン120が、埋込リソースのためのエンベッダウェブページの第1のレンダリング結果をレンダリングすることを要求し得る。エンベッダウェブページは、たとえば、埋込リソースのためのフェッチレコードから識別され得る。オプションリソース識別エンジン126は、その後、バッチレンダリングエンジン120が、埋込リソースをフェッチすることなく、エンベッダウェブページの第2のレンダリング結果をレンダリングすることを要求し得る。 Optional resource identification engine 126 may select the group URL with the largest number of fetch requests as a potential pattern. Such a pattern represents the embedded resource that has the greatest potential for optimizing the browsing process because it is fetched most frequently. The optional resource identification engine may determine whether a URL that matches the potential pattern or a sample of URLs that match the potential pattern is optional. For example, the optional resource identification engine 126 may identify embedded resources that match a potential pattern from the fetch record 132, and the batch rendering engine 120 may identify the first of the embedder web page for embedded resources. It may be required to render the rendering result. The embedder web page may be identified from a fetch record for an embedded resource, for example. Optional resource identification engine 126 may then request that batch rendering engine 120 render a second rendering result of the embedder web page without fetching embedded resources.
特定の埋込リソースをスキップすることによって、エンベッダウェブページのレンダリングされたコンテンツが影響されているか否かを判定するために、オプションリソース識別エンジン126は、第1のレンダリング結果を、第2のレンダリング結果と比較し得る。いくつかの実施では、コンテンツが顕著に影響を受けているのであれば、特定の埋込リソースが、要求されたリソースのリストへ追加され得る。コンテンツが顕著に影響を受けているのではない(たとえば、コンテンツが類似している)のであれば、オプションリソース識別エンジン126は、埋込リソースを、オプションリソースとして識別し得る。いくつかの実施では、埋込リソース(たとえば、そのURL)は、オプションリソースパターン130のようにデータストアに記憶され得る。いくつかの実施では、埋込リソースは、オプションリソースのためのパターンを決定するために、後の時間において使用されるオプションリソースの一時的なリストに記憶され得る。オプションリソース識別エンジン126は、フェッチレコード内の潜在的なパターンに一致するすべての埋込リソースについて、または、潜在的なパターンに一致する埋込リソースのサンプルのために、このテスト(レンダリング結果の比較)を実行し得る。いくつかの実施では、潜在的なパターンに一致する埋込リソースの何れかが適切であれば、潜在的なパターンは、オプションリソースパターンではない。いくつかの実施では、潜在的なパターンに一致する僅かなパーセンテージ(たとえば、1%またはそれ未満)の埋込リソースのみが、要求されたリソースであれば、潜在的なパターンは、オプションリソースパターンであると考えられ、オプションリソース識別エンジン126は、潜在的なパターンを、オプションリソースパターン130におけるパターンとして含み得る。もちろん、潜在的なパターンに一致するテストされたすべての埋込リソースがオプションであれば、オプションリソース識別エンジン126は、潜在的なパターンを、オプションリソースパターン130へ追加し得る。 In order to determine whether the rendered content of the embedder web page is affected by skipping a particular embedded resource, the optional resource identification engine 126 uses the first rendering result as the second rendering result. Can be compared with the rendering result. In some implementations, specific embedded resources can be added to the list of requested resources if the content is significantly affected. If the content is not significantly affected (eg, the content is similar), the optional resource identification engine 126 may identify the embedded resource as an optional resource. In some implementations, the embedded resource (eg, its URL) may be stored in a data store, such as optional resource pattern 130. In some implementations, embedded resources may be stored in a temporary list of optional resources that are used at a later time to determine a pattern for the optional resources. Optional resource identification engine 126 uses this test (compare rendering results) for all embedded resources that match the potential pattern in the fetch record, or for samples of embedded resources that match the potential pattern. ). In some implementations, a potential pattern is not an optional resource pattern if any of the embedded resources that match the potential pattern are appropriate. In some implementations, if only a small percentage (e.g., 1% or less) of embedded resources that match the potential pattern is the requested resource, the potential pattern is an optional resource pattern. It is believed that the option resource identification engine 126 may include the potential pattern as a pattern in the option resource pattern 130. Of course, if all tested embedded resources that match the potential pattern are optional, the option resource identification engine 126 may add the potential pattern to the option resource pattern 130.
いくつかの実施では、オプションリソース識別エンジン126はまた、オプションリソースパターン130におけるパターンが未だにオプションであることを検証し得る。たとえば、オプションリソース識別エンジン126は、パターンに一致するURLのサンプルを選択し、パターンに一致する埋込リソースを用いて、および、埋込リソースなしで、レンダリング結果をレンダリングするようにレンダリングエンジンに対して要求し、これら2つのレンダリング結果を比較し得る。オプションリソースパターン130におけるパターンと一致するURLが、もはやオプションではないのであれば、このパターンは削除され得る。 In some implementations, the option resource identification engine 126 may also verify that the pattern in the option resource pattern 130 is still optional. For example, the optional resource identification engine 126 selects a sample of URLs that match the pattern and instructs the rendering engine to render the rendering results with and without embedded resources that match the pattern. Request and compare these two rendering results. If the URL that matches the pattern in the option resource pattern 130 is no longer optional, this pattern can be deleted.
いくつかの実施では、オプションリソース識別エンジン126は、パターンが、フルブラウザから分離しているモバイルブラウザのためのオプションであるか否かを判定し得る。たとえば、いくつかのウェブサイトは、ウェブページのモバイルバージョンおよびフルバージョンのための異なるコンテンツをロードし、埋込リソースは、モバイルブラウザのためのオプションであり得るが、フルブラウザのために必要とされ得る。したがって、オプションリソース識別エンジン126は、埋込リソースのために4つのレンダリング結果をレンダリングし得る。最初の2つのレンダリング結果は、フルブラウザをエミュレートするレンダリングエンジンによってレンダリングされ得る一方、最後の2つのレンダリング結果は、スマートフォンまたはタブレットのようなモバイルデバイスにおけるモバイルブラウザをエミュレートするレンダリングエンジンによってレンダリングされ得る。したがって、オプションリソースパターン130は、パターンが、たとえば、モバイルブラウザのため、または、フルブラウザのためのように、ブラウザタイプによってオプションであるか否かを示すデータを含み得る。 In some implementations, the option resource identification engine 126 may determine whether the pattern is an option for a mobile browser that is separate from the full browser. For example, some websites load different content for mobile and full versions of web pages, embedded resources may be an option for mobile browsers, but are required for full browsers obtain. Accordingly, optional resource identification engine 126 may render four rendering results for the embedded resource. The first two rendering results can be rendered by a rendering engine that emulates a full browser, while the last two rendering results are rendered by a rendering engine that emulates a mobile browser on a mobile device such as a smartphone or tablet. obtain. Thus, the option resource pattern 130 may include data indicating whether the pattern is optional depending on the browser type, such as for a mobile browser or for a full browser.
簡潔のために図1に図示されていないが、いくつかの実施では、バッチレンダリングシステム110は、複数の個別のコンピューティングデバイスに分散され得る。それに加えて、バッチレンダリングエンジン120、フェッチデバイス122、ウェブ-クローリングエンジン124、およびオプションリソース識別エンジン126のうちの1つまたは複数が、1つまたは複数のコンピューティングデバイスにわたって分散され得る。いくつかの実施では、バッチレンダリングエンジン120、フェッチサービス122、ウェブ-クローリングエンジン124、およびオプションリソース識別エンジン126のうちの1つまたは複数は、メモリまたはハードウェアプロセッサのようなリソースを、バッチレンダリングシステム110の他の構成要素と共有し得る。同様に、フェッチレコード132およびオプションリソースパターン130もまた、多数のコンピューティングデバイスにわたって分散されたメモリに記憶され得る。いくつかの実施では、バッチレンダリングシステム110の様々な構成要素は、コンピューティングデバイスのハードウェア構成要素を共有し得るか、または、同じコンピューティングデバイスの論理区分であり得る。 Although not shown in FIG. 1 for brevity, in some implementations the batch rendering system 110 may be distributed across multiple individual computing devices. In addition, one or more of batch rendering engine 120, fetch device 122, web-crawling engine 124, and optional resource identification engine 126 may be distributed across one or more computing devices. In some implementations, one or more of the batch rendering engine 120, the fetch service 122, the web-crawling engine 124, and the optional resource identification engine 126, allocate a resource, such as a memory or hardware processor, to the batch rendering system Can be shared with 110 other components. Similarly, fetch records 132 and optional resource patterns 130 may also be stored in memory distributed across multiple computing devices. In some implementations, the various components of the batch rendering system 110 may share computing device hardware components or may be logical partitions of the same computing device.
バッチレンダリングシステム110は、クライアント180およびサーバ190とネットワーク160を介して通信し得る。ネットワーク160は、たとえばインターネットであり得るか、または、ネットワーク160は、たとえばゲートウェイデバイス、ブリッジ、スイッチ等を使用して実施される、ワイヤまたはワイヤレスローカルエリアネットワーク(LAN)、広域ネットワーク(WAN)、これらの組合せ等であり得る。ネットワーク160を介して、バッチレンダリングシステム110は、クライアント180および/またはホストサーバ190と通信し、クライアント180および/またはホストサーバ190へ/からデータを送信し得る。たとえば、バッチレンダリングシステム110は、オプションリソースパターン130をクライアント180へ提供し得るか、または、特定の埋込リソースがオプションであるか否かを尋ねる要求をクライアント180から受信し得、オプションリソースパターン130に基づいて応答を提供し得る。 Batch rendering system 110 may communicate with client 180 and server 190 via network 160. The network 160 may be, for example, the Internet, or the network 160 may be implemented using, for example, gateway devices, bridges, switches, etc., wire or wireless local area networks (LAN), wide area networks (WAN), etc. Or the like. Via network 160, batch rendering system 110 may communicate with client 180 and / or host server 190 and send data to / from client 180 and / or host server 190. For example, the batch rendering system 110 may provide the option resource pattern 130 to the client 180 or may receive a request from the client 180 asking if a particular embedded resource is optional, and the option resource pattern 130 A response may be provided.
クライアント180は、図6に描写されたコンピューティングデバイス600のように、インストールされたパーソナルウェブブラウザ140を備えるパーソナルコンピューティングデバイスであり得る。パーソナルウェブブラウザの例は、スマートフォンまたはタブレットのようなモバイルデバイス用、または、ラップトップまたはデスクトップのようなパーソナルコンピュータ用であるかに関わらず、CHROME、SAFARI、INTERNET EXPLORER、FIREFOX等を含む。ブラウザ140は、ウェブページをレンダリングした場合に、特定の埋込リソースをフェッチするか否かを判定するためにサービスを使用するように構成され得る。いくつかの実施では、システムは、ブラウザ140による使用のために、オプションリソースパターン130のコピーを、クライアント180へプッシュし得る。この観点において、サービスは、ローカルサービスであり得る。いくつかの実施では、ブラウザ140は、特定の埋込リソースが、オプションリソースパターン130におけるパターンのうちの1つと一致するか否かを判定するために、サーバ-ベースのサービスを求めるように構成され得る。ブラウザ140は、ウェブページをレンダリングする場合に、オプション埋込リソースをスキップするために、このサービスを使用することによって、最適化されたレンダリングを実行する。したがって、ブラウザ140は、コンテンツが影響されない場合、レンダリング時間を改善し、リソースを節約するために、埋込リソースを選択的にスキップするように構成され得る。 Client 180 may be a personal computing device with an installed personal web browser 140, such as computing device 600 depicted in FIG. Examples of personal web browsers include CHROME, SAFARI, INTERNET EXPLORER, FIREFOX, etc., whether for mobile devices such as smartphones or tablets, or for personal computers such as laptops or desktops. Browser 140 may be configured to use a service to determine whether to fetch a particular embedded resource when rendering a web page. In some implementations, the system may push a copy of the option resource pattern 130 to the client 180 for use by the browser 140. In this respect, the service can be a local service. In some implementations, the browser 140 is configured to request a server-based service to determine whether a particular embedded resource matches one of the patterns in the option resource pattern 130. obtain. Browser 140 performs optimized rendering by using this service to skip optional embedded resources when rendering a web page. Accordingly, the browser 140 can be configured to selectively skip embedded resources to improve rendering time and conserve resources when content is not affected.
図2は、実施に従って、バッチレンダリングエンジン120によってレンダリングされたレンダリング結果200のブロック図である。レンダリング結果200は、そのすべてが図2に例示されている訳ではないが、様々な構成要素を含み得る。たとえば、レンダリング結果200は、レンダリングされたページの画像205を含み得る。画像205は、ディスプレイデバイスを介して、ウェブブラウザを介してユーザへ表示されるであろう画像であり得る。画像205は、たとえば、レンダリングされたページのサムネイルをユーザへ表示するために、および、ディスプレイ上のどこにウェブページの要素が現れるのかを(たとえば、そのx座標およびy座標に基づいて)判定するために、使用され得る。レンダリング結果200はまた、ドキュメントオブジェクトモデル(DOM)ツリー210を含み得る。DOMツリー210は、ウェブページのHTML構造を表す。レンダリング結果200はまた、レイアウト215をも含み得る。レイアウト215は、一般に、ウェブページの要素のためのボックスを含み、このボックスは、画像205における要素のx座標およびy座標を規定する。したがって、レイアウト215は、ウェブページ上のどこに要素が現れるのか、それがウェブページ上でどれだけ多くのスペースを使うのか、等を示すインジケーションを提供する。したがって、レイアウト215は、ウェブページのうちのどれくらいの量が広告なのか、パラグラフがどのように際立っているのか(たとえば、折り目の上、または、折り目の下)、要素が目に見えるか否か等に関する情報を提供する。言い換えると、レイアウト215は、レンダリングされたウェブページの要素に関する幾何学情報を提供する。このレンダリング結果200はまた、エラー220を含み得る。エラー220は、たとえばJavaScript（登録商標）のようなスクリプトオブジェクトの実行の結果として遭遇したエラーを含む。レンダリング結果200はまた、レンダリング中にフェッチされた埋込リソース225のリストを含み得る。そして、レンダリング処理の一部として生成された他の要素(図示せず)を含み得る。したがって、レンダリング結果200は、ホストサーバからのコンテンツのフェッチによって、単独では利用可能ではない情報を提供する。オプションリソース識別エンジンのようなダウンストリーム要求処理は、実行中のスクリプトオブジェクトが、レンダリングされているウェブページのコンテンツを顕著に変更するか否かを判定するためのように、様々な目的のためにレンダリング結果情報を使用し得る。たとえば、ウェブページの広告部分におけるコンテンツは、重要であると考えられないことがあり得るので、URLは、広告部分に相違がある場合であっても未だにオプションであり得る。いくつかの実施では、レンダリング結果の主要な構成要素における相違のみが、重要であると考えられ得る。主要な構成要素は、レイアウト215における最大のボックス(たとえば、最大の高さおよび幅を有するボックス)であり得る。 FIG. 2 is a block diagram of rendering results 200 rendered by batch rendering engine 120, according to an implementation. Rendering result 200 may include various components, not all of which are illustrated in FIG. For example, the rendering result 200 may include an image 205 of the rendered page. The image 205 may be an image that will be displayed to the user via a web browser via a display device. Image 205, for example, to display to the user a thumbnail of the rendered page and to determine where on the display the elements of the web page will appear (eg, based on their x and y coordinates) Can be used. The rendering result 200 may also include a document object model (DOM) tree 210. The DOM tree 210 represents the HTML structure of a web page. The rendering result 200 may also include a layout 215. The layout 215 generally includes boxes for the elements of the web page, which define the x and y coordinates of the elements in the image 205. Thus, layout 215 provides an indication of where the element appears on the web page, how much space it uses on the web page, and so on. Thus, layout 215 shows how much of the web page is advertising, how the paragraph stands out (for example, above the fold or below the crease), and whether the element is visible Provide information on In other words, the layout 215 provides geometric information about the elements of the rendered web page. This rendering result 200 may also include an error 220. Error 220 includes errors encountered as a result of the execution of a script object, such as JavaScript. The rendering result 200 may also include a list of embedded resources 225 fetched during rendering. It may include other elements (not shown) generated as part of the rendering process. Thus, the rendering result 200 provides information that is not available alone by fetching content from the host server. Downstream request processing, such as the option resource identification engine, can be used for a variety of purposes, such as to determine whether a running script object significantly changes the content of the rendered web page. Rendering result information may be used. For example, the content in the advertising portion of a web page may not be considered important, so the URL may still be optional even if the advertising portion is different. In some implementations, only differences in the main components of the rendering result may be considered significant. The main component may be the largest box in layout 215 (eg, the box with the greatest height and width).
図3は、実施に従って、オプションリソースパターンを識別するための例示的な処理300を例示するフローチャートである。処理300は、図1のシステム110のようなシステムによって実行され得る。システムは、フェッチレコードからオプションリソースのためのパターンを識別するために処理300を使用し得る。システムは、リソースありでレンダリングされたエンベッダウェブページと、リソースなしでレンダリングされたエンベッダウェブページとのレンダリング結果比較に基づいて、オプションリソースのためのパターンを決定し得る。これらパターンは、データストアに記憶され、フルブラウザ、モバイルブラウザ、またはバッチレンダリングエンジンであるかに関わらず、ブラウザが、オプションリソースをスキップする(たとえば、フェッチしない)ことによってレンダリングを最適化できるようにするサービスの一部として使用され得る。 FIG. 3 is a flowchart illustrating an example process 300 for identifying optional resource patterns, according to an implementation. Process 300 may be performed by a system such as system 110 of FIG. The system may use process 300 to identify a pattern for optional resources from the fetch record. The system may determine a pattern for an optional resource based on a rendering result comparison between an embedded web page rendered with resources and an embedded web page rendered without resources. These patterns are stored in the data store so that browsers can optimize rendering by skipping optional resources (eg, not fetching), whether they are full browsers, mobile browsers, or batch rendering engines. Can be used as part of a service.
処理300は、システムが、フェッチされた埋込リソースを潜在的なパターンによってクラスタ化することで始まり得る(305)。システムは、たとえば、一日、二日、一週間、最後の時間処理300が実行されてから等のような、ある前の時間周期にフェッチされたすべての埋込リソースを選択し得る。潜在的なパターンは、フェッチレコードにおいて発見されたURLからのクエリ文字列のすべてまたは一部を取り除くことによって生成され得る。フェッチレコードは、ウェブ-クローリングエンジンまたはフェッチサービスによって生成され得る。いくつかの実施では、フェッチレコードは、たとえば、インターネットを介して利用可能なドキュメントのためのインデクス処理のようなインデクス処理の一部として生成され得る。埋込リソースは、URLのような識別子によって、フェッチレコードにおいて識別され得る。したがって、ウェブページまたは埋込リソースはまた、URLとして称され得、埋込リソース(またはウェブページ)およびURLへの参照は、本明細書で使用されるように、一般に同意語であると理解される。潜在的なパターンは、クエリ文字列のすべてまたは一部を取り除くことによってURLのために生成され得、クエリ文字列は、埋込リソースのためのURLにおける疑問符(?)に続く任意のキャラクタである。潜在的なパターンはまた、サブドメイン名を取り除くまたは無視する、パスの構成要素(たとえば、最初のフォワードスラッシュ(「/」)およびクエリ文字列(「?」))を無視する、または、クエリ文字列内のあるパラメータを無視することによって、埋込リソースのために生成され得る。いくつかの実施では、フェッチレコードからの埋込リソースが、そのURLから生成された1つよりも多くの潜在的なパターンに関連付けられ得る。潜在的なURLは、ソートすることによって、または、他の既知のクラスタ化技術によって、クラスタ化され得る。 Process 300 may begin with the system clustering the fetched embedded resources according to a potential pattern (305). The system may select all embedded resources fetched in a previous time period, such as, for example, one day, two days, a week, since the last time processing 300 was performed, and so on. The potential pattern can be generated by removing all or part of the query string from the URL found in the fetch record. The fetch record may be generated by a web-crawling engine or a fetch service. In some implementations, fetch records may be generated as part of an index process such as, for example, an index process for documents available via the Internet. An embedded resource can be identified in a fetch record by an identifier such as a URL. Thus, web pages or embedded resources can also be referred to as URLs, and references to embedded resources (or web pages) and URLs are generally understood to be synonymous as used herein. The A potential pattern can be generated for a URL by removing all or part of the query string, where the query string is any character following the question mark (?) In the URL for embedded resources . Potential patterns also remove or ignore subdomain names, ignore path components (for example, the first forward slash (“/”) and query string (“?”)), Or query characters Can be generated for embedded resources by ignoring certain parameters in the column. In some implementations, an embedded resource from a fetch record can be associated with more than one potential pattern generated from that URL. Potential URLs can be clustered by sorting or by other known clustering techniques.
システムは、潜在的なパターンのうちの1つによって表されるクラスタを選択し(310)、クラスタメンバの数が、しきい値以上であるか否かを判定し得る(315)。クラスタメンバの数は、潜在的なパターンに一致する埋込リソースが、前の時間周期中にフェッチされた回数の数を表す。したがって、1つの特定の埋込リソースは、一度よりも多くフェッチされているのであれば、その数における複数回数表され得る。クラスタの数がしきい値未満(315、No)であれば、システムは、次のクラスタへ進み得る(355)。潜在的なパターンが、十分なメンバの数を有しているのであれば(315、Yes)、システムは、潜在的なパターンに一致する埋込リソースのサンプルを選択し得る(320)。言い換えれば、システムは、クラスタのユニークなメンバをサンプルし得る。もちろん、いくつかの実施では、システムは、クラスタ内のすべてのユニークな埋込リソースをサンプルとして選択し得る(たとえば、サンプルサイズ100%)。システムは、その後、サンプルにおける埋込リソースのうちの1つを選択し得(325)、選択された埋込リソースを用いてリソースを埋め込むウェブページ(たとえば、エンベッダウェブページ)の第1のレンダリング結果を生成し得る(330)。エンベッダウェブページは、フェッチレコードから決定され得る。システムはまた、選択された埋込リソースをフェッチすることなく、エンベッダウェブページの第2のレンダリング結果を生成し得る(330)。システムは、たとえばバッチレンダリングエンジンを使用して、2つのレンダリング結果を生成し得る。システムは、その後、第1のレンダリング結果と第2のレンダリング結果とを比較し、これらレンダリング結果が類似しているか否かを判定し得る(335)。 The system may select a cluster represented by one of the potential patterns (310) and determine whether the number of cluster members is greater than or equal to a threshold (315). The number of cluster members represents the number of times that embedded resources matching the potential pattern were fetched during the previous time period. Thus, a particular embedded resource can be represented multiple times in that number if it is fetched more than once. If the number of clusters is less than the threshold (315, No), the system may proceed to the next cluster (355). If the potential pattern has a sufficient number of members (315, Yes), the system may select a sample of embedded resources that matches the potential pattern (320). In other words, the system may sample a unique member of the cluster. Of course, in some implementations, the system may select all unique embedded resources in the cluster as samples (eg, sample size 100%). The system may then select one of the embedded resources in the sample (325), and a first web page (e.g., an embedder web page) that embeds the resource using the selected embedded resource. A rendering result may be generated (330). The embedder web page can be determined from the fetch record. The system may also generate a second rendering result of the embedder web page without fetching the selected embedded resource (330). The system may generate two rendering results using, for example, a batch rendering engine. The system may then compare the first rendering result and the second rendering result to determine whether the rendering results are similar (335).
システムは、図4に関してより詳細に説明されるように、これらレンダリング結果が類似しているか否かを判定するために、様々なテストを使用し得る。これらレンダリング結果が類似していない(335、No)のであれば、システムは、次のクラスタへ移動し得る(355)。これらレンダリング結果が類似している(335、Yes)のであれば、システムは、クラスタサンプル内に、検査すべき他の埋込リソースがあるか否かを判定し得る(340)。他の埋込リソースが存在する(340、No)のであれば、システムは、サンプルのための次の埋込リソースを選択し(345)、ステップ330および335を繰り返し得、2つのレンダリング結果を生成し、これら結果を比較する。サンプル内のすべての埋込リソースが検査されているのであれば(340、Yes)、システムは、クラスタのための潜在的なパターンを、オプションリソースパターンデータストアへ追加し得る(350)。このデータストアは、図5に関してより詳細に説明されるように、フェッチされる必要のない埋込リソースを識別するためにサービスによって使用され得る。システムは、その後、検査すべき他のクラスタがあるか否かを判定し得る(355)。分析すべき残っている他のクラスタが存在するのであれば(355、No)、システムは、次のクラスタを選択し得、次のクラスタの潜在的なパターンに一致する埋込リソースのためにステップ315〜355を繰り返す。分析すべきさらなるクラスタが存在しないのであれば(355、Yes)、処理300は完了する。 The system may use various tests to determine whether these rendering results are similar, as described in more detail with respect to FIG. If the rendering results are not similar (335, No), the system can move to the next cluster (355). If the rendering results are similar (335, Yes), the system may determine whether there are other embedded resources to examine in the cluster sample (340). If there are other embedded resources (340, No), the system can select the next embedded resource for the sample (345) and repeat steps 330 and 335, producing two rendering results And compare these results. If all embedded resources in the sample have been examined (340, Yes), the system can add a potential pattern for the cluster to the optional resource pattern data store (350). This data store may be used by the service to identify embedded resources that do not need to be fetched, as described in more detail with respect to FIG. The system may then determine whether there are other clusters to examine (355). If there are other remaining clusters to analyze (355, No), the system can select the next cluster and step for embedded resources that match the potential pattern of the next cluster. Repeat 315-355. If there are no more clusters to analyze (355, Yes), process 300 is complete.
例示的な処理300は、オプションではない1つの埋込リソースが、オプションリソースパターンデータストアから省かれている潜在的なパターンになる(たとえば、335、No)であろう実施を例示する。しかしながら、いくつかの実施では、システムは、オプションである潜在的なパターンのための埋込リソースのリストと、要求されている潜在的なパターンのための埋込リリースのリスト(たとえば、これら2つのレンダリング結果は、類似しているとは考えられていない)とを維持し得る。そのような実施では、システムは、要求されている潜在的なパターンに一致する埋込リソースのパーセンテージを計算し得る。このパーセンテージが非常に低い(たとえば、1%以下)場合、システムは未だに、潜在的なパターンを、オプションリソースパターンデータストアへ追加し得る(350)。したがって、実施は、図3に例示された正確な処理300に限定されない。 The example process 300 illustrates an implementation where one non-optional embedded resource will be a potential pattern that is omitted from the option resource pattern data store (eg, 335, No). However, in some implementations, the system may include a list of embedded resources for potential patterns that are optional and a list of embedded releases for potential patterns that are required (e.g., these two Rendering results may not be considered similar). In such an implementation, the system may calculate the percentage of embedded resources that match the required potential pattern. If this percentage is very low (eg, 1% or less), the system may still add potential patterns to the optional resource pattern data store (350). Thus, implementation is not limited to the exact process 300 illustrated in FIG.
いくつかの実施では、システムは、異なるブラウザタイプによってレンダリングされたレンダリング結果を用いて、処理300のいくつかまたはすべてを繰り返し得る。たとえば、ブラウザタイプは、フルブラウザまたはモバイルブラウザであり得る。第1および第2のレンダリング結果が、フルブラウザによってレンダリングされているのであれば、システムは、モバイルブラウザを使用してステップ330〜350を繰り返し得る。したがって、オプションリソースパターンのリストは、ブラウザタイプのインジケーションを含み得、データストアにおけるパターンもまた、ブラウザタイプのインジケーションを含み得る。これによって、システムは、埋込リソースが、1つのブラウザタイプ(たとえば、モバイルブラウザ)についてオプションであり、別のブラウザタイプ(たとえば、フルブラウザ)についてオプションではないか否かを示すことが可能となる。 In some implementations, the system may repeat some or all of the process 300 with rendering results rendered by different browser types. For example, the browser type can be a full browser or a mobile browser. If the first and second rendering results are being rendered by a full browser, the system may repeat steps 330-350 using the mobile browser. Thus, the list of optional resource patterns may include browser type indications, and the patterns in the data store may also include browser type indications. This allows the system to indicate whether the embedded resource is optional for one browser type (eg, mobile browser) and not optional for another browser type (eg, full browser). .
図4は、実施に従って、2つのレンダリング結果が類似しているか否かを判定するための例示的な処理400を例示するフローチャートである。処理400は、たとえば、図3のステップ335の一部として実行され得る。処理400は、レンダリング結果類似性を判定するための3つのテストを例示しているが、実施は、例示されたテストのうちの1つ、2つ、またはすべてを含み得、例示されていない追加の類似性テストを含み得ることが理解される。 FIG. 4 is a flowchart illustrating an example process 400 for determining whether two rendering results are similar, according to an implementation. Process 400 may be performed, for example, as part of step 335 of FIG. Although process 400 illustrates three tests for determining rendering result similarity, implementations may include one, two, or all of the illustrated tests, additional not illustrated It is understood that a similarity test can be included.
処理400は、2つのレンダリング結果におけるトークンを比較するステップを含み得る(405)。これらトークンは、たとえば、ユーザに見えるワードのような、ドキュメントのテキストを含む。トークンは、図2のDOMツリー210のようなDOMツリーを処理することにより生成され得る。いくつかの実施では、ストップワードおよび数は、比較を実行する前に削除され得る。第1のレンダリング結果のトークンが、第2のレンダリング結果のトークンとは異なる(410、Yes)のであれば、システムは、オプションとして、作動されたスクリプト記述を伴うレンダリングによって追加されたユニークなトークンの数が、トークンしきい値未満であるか否かを判定し得る(415)。言い換えれば、作動されたスクリプト記述を伴うレンダリングが、小数のユニークなトークンにしかならないのであれば、システムは、相違を些細なものと考慮し得る。いくつかの実施では、トークンしきい値は、5であり得る。追加されたユニークなトークンの数が、トークンしきい値を満足する(415、No)のであれば、システムは、レンダリング結果を、類似していないと考慮し得る(430)。レンダリング結果が類似していない場合、レンダリング結果を生成するために使用される埋込リソースはオプションではない。いくつかの実施では、システムは、テスト415をスキップし得、トークンにおけるあらゆる相違は顕著であり、レンダリング結果は類似していない、と考慮し得る。その数が、トークンしきい値を満足しない(415、Yes)のであれば、システムは、トークンにおける相違を些細なものとして考慮し得る。したがって、第1のレンダリング結果のためのユニークなトークンが、第2のレンダリング結果におけるトークンと同じである(410、No)、または、ユニークなトークンの数が、トークンしきい値を満足していない(415、Yes)のであれば、レンダリング結果は、類似であると考慮され、システムは、他のテストの実行を継続し得る。トークンテストのみを含む実施では、システムは、ステップ445へ直接進み得、ここでは、レンダリング結果が類似しているとの判定がなされる。 Process 400 may include comparing the tokens in the two rendering results (405). These tokens contain the text of the document, for example words that are visible to the user. The token may be generated by processing a DOM tree such as DOM tree 210 of FIG. In some implementations, stopwords and numbers can be deleted before performing the comparison. If the first rendering result token is different from the second rendering result token (410, Yes), the system optionally includes a unique token added by rendering with the activated scripting. It may be determined whether the number is less than a token threshold (415). In other words, if the rendering with the activated script description only results in a small number of unique tokens, the system can consider the difference as trivial. In some implementations, the token threshold may be 5. If the number of unique tokens added satisfies the token threshold (415, No), the system may consider the rendering results not similar (430). If the rendering results are not similar, the embedded resource used to generate the rendering results is not optional. In some implementations, the system may skip test 415 and consider that any differences in tokens are significant and the rendering results are not similar. If the number does not satisfy the token threshold (415, Yes), the system may consider the difference in tokens as trivial. Therefore, the unique token for the first rendering result is the same as the token in the second rendering result (410, No), or the number of unique tokens does not satisfy the token threshold If (415, Yes), the rendering results are considered similar and the system can continue to perform other tests. In implementations that include only token tests, the system may proceed directly to step 445, where a determination is made that the rendering results are similar.
いくつかの実施では、トークンが同じ(410、No)または(415、Yes)であれば、システムはアウトリンクを比較し得る(420)。アウトリンクは、レンダリングされたページから他のウェブページまたは他のドキュメントへのリンクを表す。アウトリンクはまた、レンダリング結果のDOMツリーのアンカタグノード(<a>タグ)から抽出され得る。システムがアウトリンクにおける相違を発見する(425、Yes)と、システムは、相違が顕著であり、レンダリング結果は類似していないと考慮し得る(430)。したがって、埋込リソースは、オプションとは考慮されない。2つのレンダリング結果におけるアウトリンクが同じ(425、No)であれば、システムは、(たとえば、ステップ450へ進むことによって)レンダリング結果を類似のものと考慮し得るか、または、他の類似性テストを実行することに進む。いくつかの実施では、システムは、ステップ405および415の前に、ステップ405および415と独立してステップ420および425を実行し得る。 In some implementations, if the tokens are the same (410, No) or (415, Yes), the system may compare the outlinks (420). Outlinks represent links from rendered pages to other web pages or other documents. Outlinks can also be extracted from anchor tag nodes (<a> tags) in the rendered DOM tree. If the system finds a difference in the outlink (425, Yes), the system may consider that the difference is significant and the rendering results are not similar (430). Thus, embedded resources are not considered options. If the outlinks in the two rendering results are the same (425, No), the system may consider the rendering results to be similar (e.g., by proceeding to step 450) or other similarity test Proceed to perform. In some implementations, the system may perform steps 420 and 425 independently of steps 405 and 415 prior to steps 405 and 415.
他のテストに加えて、または、他のテストの代わりに実行され得る別の類似性テストでは、システムは、画像(たとえば、スナップショット)、DOMツリー、またはレイアウト間の類似性を判定し得る。たとえば、システムは、レンダリング結果のDOMツリー、レイアウト、画像、または別の構成要素のための最長共通シーケンス(LCS)を計算し得る(435)。システムは、同じである構成要素のパーセンテージを表す類似性スコアを計算するためにLCSを使用し得る(440)。パーセンテージがしきい値を満足する場合(445、Yes)、システムは、レンダリング結果が類似していると判定し得る(450)。パーセンテージがしきい値を満足しない場合(445、No)、システムは、レンダリング結果が類似していないと判定し得る(430)。レンダリング結果が類似している(450)か、または類似していない(430)かをシステムが判定すると、処理400は終了する。 In another similarity test that may be performed in addition to or in place of other tests, the system may determine similarity between images (eg, snapshots), DOM trees, or layouts. For example, the system may calculate (435) the longest common sequence (LCS) for the rendered DOM tree, layout, image, or another component. The system may use LCS to calculate a similarity score that represents the percentage of components that are the same (440). If the percentage meets the threshold (445, Yes), the system may determine that the rendering results are similar (450). If the percentage does not satisfy the threshold (445, No), the system may determine that the rendering results are not similar (430). If the system determines whether the rendering results are similar (450) or dissimilar (430), the process 400 ends.
もちろん、システムは、処理400の一部として他のテストを実行し得る。たとえば、別の類似性テスト(図4に図示せず)では、システムは、レイアウトの主要な構成要素を判定し得る。レンダリング結果のレイアウトは、各々がスクリーン座標によって定義されるボックスからなる。一般に、各ボックスは、ウェブページの各々の要素に対応する。たとえば、レイアウトは、(すべてのDOM要素が対応するレンダラボックスを有し得る訳ではないが、)DOMツリーにおけるDOMノードのボックス表現を含み得る。ボックスは、レンダラツリーとしても知られているツリー構造で体系化され得る。したがって、たとえば、テーブルは、レイアウト内のボックスによって表現され得、パラグラフは、レイアウト内の別のボックスによって表現され得る。ウェブページの主要な構成要素は、スクリーン座標によって定義されるように、最大ボックスを持つレイアウト内のこれら要素である。いくつかの実施では、システムは、たとえば、セットが、主要な構成要素のうちの最大を含むように、あらかじめ決定された数の、セット内の主要な構成要素を含み得る。いくつかの実施では、システムは、セット内のスクリーンのパーセンテージを占める主要な構成要素を含み得る。そのような実施では、最大の主要な構成要素は、そのパーセンテージ超を占め、最大の主要な構成要素は、セットのメンバのみであり得る。いくつかの実施では、しきいサイズを超えるボックスサイズを有する何れの構成要素も、主要な構成要素のセットに含まれ得る。主要な構成要素のセットにない構成要素は、重要ではない構成要素であると考えられ得る。いくつかの実施では、システムは、主要な構成要素を発見するために、オニオンピーリング技術を使用し得る。たとえば、システムは、レンダラツリーのルートボックスで始まる横型探索を実行し、ルートボックスの最大の子ボックスを識別し得る。システムはその後、最大の子を選択し、より深く進み、現在のボックスの最大の子ボックス(たとえば、ルートボックスの最大の子ボックス)を発見し得る。システムは、子ボックスの何れもが支配的、たとえば、親ボックスのエリアの半分超を占有すること、ではない場合、より深く進むことを停止し得る。システムが、より深く進むことを停止する場合、主要な構成要素は、支配している子を有しないボックスである。 Of course, the system may perform other tests as part of process 400. For example, in another similarity test (not shown in FIG. 4), the system may determine the major components of the layout. The rendering result layout consists of boxes, each defined by a screen coordinate. In general, each box corresponds to a respective element of the web page. For example, a layout may include a box representation of DOM nodes in a DOM tree (although not all DOM elements may have corresponding renderer boxes). Boxes can be organized in a tree structure, also known as a renderer tree. Thus, for example, a table can be represented by a box in the layout and a paragraph can be represented by another box in the layout. The main components of a web page are those elements in the layout that have a maximum box, as defined by the screen coordinates. In some implementations, the system may include a predetermined number of primary components in the set, for example, such that the set includes a maximum of the primary components. In some implementations, the system may include major components that account for the percentage of screens in the set. In such an implementation, the largest major component occupies more than that percentage, and the largest major component may only be a member of the set. In some implementations, any component having a box size that exceeds the threshold size may be included in the primary component set. Components that are not in the main set of components can be considered as non-critical components. In some implementations, the system may use onion peeling techniques to discover key components. For example, the system may perform a horizontal search starting at the root box of the renderer tree and identify the largest child box of the root box. The system can then select the largest child and go deeper to find the largest child box of the current box (eg, the largest child box of the root box). The system may stop going deeper if none of the child boxes is dominant, eg, occupying more than half of the area of the parent box. If the system stops going deeper, the main component is a box with no dominating children.
システムは、セット内の主要な構成要素間の類似性スコアを計算し得る。たとえば、システムは、主要な構成要素のボックスのオーバラップスコアを使用し得る。オーバラップスコアでは、システムは、主要な構成要素のオーバラップエリアを計算し得る。これは、第2のレンダリング結果における対応する主要な構成要素のエリアとオーバラップする第1のレンダリング結果における主要な構成要素のエリアを表す。システムは、その後、類似性スコアを計算し得る。これは、オーバラップの調和平均が、各主要な構成要素の総エリアに関連していることを表す。たとえば、システムは、以下の式を使用し得る。 The system may calculate a similarity score between the major components in the set. For example, the system may use the overlap score of the main component box. With the overlap score, the system can calculate the overlap area of the major components. This represents the area of the main component in the first rendering result that overlaps with the area of the corresponding main component in the second rendering result. The system can then calculate a similarity score. This represents that the harmonic mean of the overlap is related to the total area of each major component. For example, the system may use the following equation:
ここでoaは、オーバラップエリアであり、a1は、第1のレンダリング結果における主要な構成要素ボックスの総エリアであり、a2は、第2のレンダリング結果における主要な構成要素ボックスの総エリアである。もちろん、システムは、このスコアを計算するために他の類似性メトリクスを使用し得る。そのような類似性メトリクスの例は、限定されないが、Katz類似性を含み得る。類似性スコアが、類似性しきい値を満足するのであれば、レンダリング結果は、類似していると考慮され、したがって、埋込リソースはオプションである。いくつかの実施では、類似性しきい値は、たとえば80%以上のように、高いことがあり得る。類似性スコアがそのしきい値を満足しないのであれば、システムは、レンダリング結果が類似していないと考慮し得る。いくつかの実施では、類似性スコアが、類似性しきい値を満足しているのであれば、システムは、図4に例示されていないレンダリング結果に基づいて、追加の類似性テストを実行し得る。いくつかの実施では、システムはまた、重要ではない構成要素における相違のための類似性スコアを計算し得るが、これら相違をさほど重要視せず、たとえば、このレンダリング結果については、最終類似性スコアのうちの、ごく一部とする。 Where oa is the overlap area, a1 is the total area of the main component box in the first rendering result, and a2 is the total area of the main component box in the second rendering result . Of course, the system may use other similarity metrics to calculate this score. Examples of such similarity metrics can include, but are not limited to, Katz similarity. If the similarity score satisfies the similarity threshold, the rendering results are considered similar and therefore the embedded resource is optional. In some implementations, the similarity threshold can be high, eg, 80% or higher. If the similarity score does not satisfy the threshold, the system may consider that the rendering results are not similar. In some implementations, if the similarity score satisfies a similarity threshold, the system may perform additional similarity tests based on rendering results not illustrated in FIG. . In some implementations, the system may also calculate similarity scores for differences in non-critical components, but does not respect these differences so much, for example, for this rendering result, the final similarity score Of these, only a part.
いくつかの実施では、システムは、処理400に対する不確定の効果を最小化または削除することを試み得る。不確定は、埋込リソースが同一である場合でさえ、レンダリング結果が異なる場合に生じる。不確定は、オプションである埋込リソースが、あたかも必要とされているかのように見えるようにし得る。したがって、不確定のための考慮は、オプションリソースのカバレッジを顕著に増加させ得る。不確定を考慮するために、システムは、第3のレンダリング結果を生成し得る。第3のレンダリング結果は、(たとえば、サンプルURLを含む)第1のレンダリング結果の生成から返されたリソースを使用したレンダリングであり得る。第3のレンダリング結果と第1のレンダリング結果との間で生じる何れの相違も、不確定による。システムは、不確定によるあらゆる相違(たとえば、第1および第3のレンダリング結果における相違である、アウトリンク、トークン、画像、レンダラツリー等における相違)を削除することによって、類似性を除去し得る。たとえば、システムは、第1のレンダリング結果の画像と、第3のレンダリング結果の画像との間の相違であるピクセルの数を表す第1の数と、第1のレンダリング結果の画像と、第2のレンダリング結果の画像との間の相違であるピクセルの数を表す第2の数とを計算し得る。システムは、相違を生成するために、第2の数から第1の数を減じ得る。この相違が、第2の数に近づくほど、第1のレンダリング結果と第2のレンダリング結果との間の何れの相違も、不確定によらない可能性がより高くなる。したがって、システムは、その相違に基づいて、LCSの類似性スコアを調節し得る(たとえば、相違が第2の数に等しいのであれば調節をせず、相違が第2の数の半分であれば、半分まで調節する等である)。別の例として、システムは、第1のレンダリング結果と第3のレンダリング結果との間の相違であるDOMノードを判定し得、第1のレンダリング結果を第2のレンダリング結果と比較する(たとえば、LCSを計算する)場合、これらノードを無視し得る。 In some implementations, the system may attempt to minimize or eliminate indeterminate effects on process 400. Indeterminacy occurs when rendering results are different, even if the embedded resources are the same. Uncertainty can make an optional embedded resource appear as if it is needed. Thus, consideration for uncertainty can significantly increase the coverage of option resources. To account for the uncertainty, the system may generate a third rendering result. The third rendering result may be a rendering using the resources returned from generating the first rendering result (eg, including a sample URL). Any difference that occurs between the third rendering result and the first rendering result is due to uncertainty. The system may remove the similarity by deleting any differences due to indeterminate (eg, differences in the outlinks, tokens, images, renderer trees, etc. that are differences in the first and third rendering results). For example, the system may include a first number representing a number of pixels that is the difference between a first rendering result image and a third rendering result image, a first rendering result image, and a second rendering result. And a second number representing the number of pixels that is the difference between the rendered result images of. The system may subtract the first number from the second number to generate a difference. The closer this difference is to the second number, the more likely that any difference between the first rendering result and the second rendering result is not due to uncertainty. Thus, the system may adjust the LCS similarity score based on the difference (e.g., no adjustment if the difference is equal to the second number, and if the difference is half of the second number). Adjust to half, etc.). As another example, the system may determine a DOM node that is the difference between the first rendering result and the third rendering result, and compares the first rendering result to the second rendering result (e.g., These nodes can be ignored when calculating LCS).
図5は、実施に従って、最適化されたレンダリングのための情報を提供するための例示的な処理500を例示するフローチャートである。処理500は、ブラウザのためのサービスとして実行され得る。ブラウザは、図1のブラウザ140のような、モバイルまたはフルであるクライアントブラウザであり得るか、または、図1のバッチレンダリングエンジン120のようなバッチレンダリングエンジンであり得る。いくつかの実施では、サービスは、クラウド-ベースのサービスであり得る。言い換えれば、ブラウザは、ネットワークを介してクラウド-ベースのサービスへ要求を送信し得る。クラウド-ベースのサービスは、ブラウザへ応答を提供し得る。いくつかの実施では、サービスは、図1のバッチレンダリングシステム110のようなサーバ上で実行され得る。他の実施では、サービスは、ブラウザが実行するコンピューティングデバイスに局所的であり得る。たとえば、オプションリソースパターンのデータストアが、ブラウザを実行するコンピューティングデバイスへプッシュされ得、このサービスが、コンピューティングデバイスにおいて実行され得る。いくつかの実施では、サービスは、図1のクライアント180のようなクライアント上で実行され得る。 FIG. 5 is a flowchart illustrating an example process 500 for providing information for optimized rendering, according to an implementation. Process 500 may be performed as a service for a browser. The browser may be a mobile or full client browser, such as browser 140 of FIG. 1, or may be a batch rendering engine, such as batch rendering engine 120 of FIG. In some implementations, the service can be a cloud-based service. In other words, the browser may send a request to the cloud-based service over the network. A cloud-based service may provide a response to the browser. In some implementations, the service may be executed on a server such as the batch rendering system 110 of FIG. In other implementations, the service may be local to the computing device that the browser executes. For example, a data store of optional resource patterns can be pushed to a computing device running a browser, and this service can be executed at the computing device. In some implementations, the service may be executed on a client, such as client 180 of FIG.
処理500は、サービスがブラウザからURLを受信することで始まる(505)。ブラウザは、モバイルブラウザ、フルブラウザであり得、クライアント上で、または、バッチレンダリングエンジンとして、実行され得る。サービスは、この要求からのURLが、オプションリソースパターンに一致するか否かを判定し得る(510)。いくつかの実施では、パターンは、フルURLを表し得る。これによって、要求されたURL全体に対する一致がなされる。いくつかの実施では、パターンは、部分的なURLを、たとえば、除去されたクエリ文字列と、または、ワイルドカードによって置き換えられた様々な部分とともに表し得る。要求されたURLが、オプションリソースデータストア内の少なくとも1つのパターンと一致しない(510、Yes)のであれば、サービスは、URLがオプションであり、コンテンツをフェッチすることなくエンベッダウェブページがレンダリングされ得ることを示す応答を提供する(515)。いくつかの実施では、これは、リソースが位置決定され得ない場合に、ブラウザが受信し得る「URLが発見されません」という応答に類似した応答であり得る。このインジケーションを受信することに応じて、ブラウザは、埋込リソースをスキップするエンベッダウェブエージをレンダリングし得、処理リソースおよび帯域幅リソースを節約する。要求されたURLが、オプションリソースデータストアにおけるパターンと一致しない(510、No)のであれば、サービスは、埋込リソースが要求されていることを示す応答を提供する(520)。いくつかの実施では、サービスは、実際にフェッチを実行し、埋込リソースのためのコンテンツを提供し得る。いくつかの実施では、サービスは、ブラウザに対して、埋込リソースを求めるフェッチ要求を進めるように伝える応答を提供し得る。したがって、ブラウザは、埋込リソースを求めるコンテンツを用いてエンベッダウェブページをレンダリングし得る。その後、処理500は、レンダリング処理を最適化するためにブラウザが使用し得る情報を提供して、終了する。いくつかの実施では、ブラウザは、ブラウザタイプをサービスへ提供し得、サービスは、オプションリソースデータストアにおけるパターンが一致した場合に、このブラウザタイプを使用し得る。 Process 500 begins with the service receiving a URL from a browser (505). The browser can be a mobile browser, a full browser, and can be executed on the client or as a batch rendering engine. The service may determine whether the URL from this request matches an optional resource pattern (510). In some implementations, the pattern may represent a full URL. This provides a match for the entire requested URL. In some implementations, the pattern may represent a partial URL with, for example, removed query strings or various parts replaced by wildcards. If the requested URL does not match at least one pattern in the options resource data store (510, Yes), the service renders the embedder web page without fetching the content and the URL is optional. Provide a response indicating that it can be done (515). In some implementations, this may be a response similar to the “URL not found” response that the browser may receive if the resource cannot be located. In response to receiving this indication, the browser may render an embedder web age that skips embedded resources, saving processing and bandwidth resources. If the requested URL does not match the pattern in the option resource data store (510, No), the service provides a response indicating that an embedded resource is requested (520). In some implementations, the service may actually perform the fetch and provide content for the embedded resource. In some implementations, the service may provide a response that tells the browser to proceed with a fetch request for embedded resources. Thus, the browser may render the embedder web page with content that seeks embedded resources. Thereafter, process 500 provides information that the browser can use to optimize the rendering process and ends. In some implementations, the browser may provide a browser type to the service, and the service may use this browser type if the pattern in the optional resource data store matches.
図6は、本明細書で説明された技術とともに使用され得る、図1のバッチレンダリングシステム110および/またはクライアント180として操作され得る一般的なコンピュータデバイス600の例を図示する。コンピューティングデバイス600は、ラップトップ、デスクトップ、ワークステーション、携帯情報端末、セルラ電話、スマートフォン、タブレット、サーバ、および、ウェアラブルデバイスを含む他のコンピューティングデバイスのようなコンピューティングデバイスの様々な例示的な形態を表すことが意図される。本明細書に図示された構成要素、それらの接続と関係、およびそれらの機能は、例のみであることが意図され、本書において説明および/または特許請求された発明の実施を限定することは意図されていない。 FIG. 6 illustrates an example of a general computing device 600 that can be operated as the batch rendering system 110 and / or client 180 of FIG. 1 that can be used with the techniques described herein. The computing device 600 is a variety of exemplary computing devices such as laptops, desktops, workstations, personal digital assistants, cellular phones, smartphones, tablets, servers, and other computing devices including wearable devices. It is intended to represent a form. The components illustrated herein, their connections and relationships, and their functions are intended to be examples only and are not intended to limit the practice of the invention described and / or claimed herein. It has not been.
コンピューティングデバイス600は、インターフェース608を介して接続された、たとえばシリコンベースのハードウェアプロセッサのようなプロセッサ602、メモリ604、記憶デバイス606、および拡張ポート610を含む。いくつかの実施では、コンピューティングデバイス600は、他の構成要素の中でも、インターフェース608を介して接続された、トランシーバ646、通信インターフェース644、およびGPS(全地球測位システム)受信機モジュール648を含み得る。デバイス600は、通信インターフェース644を介してワイヤレスに通信し得る。これは、必要な場合、デジタル信号処理回路を含み得る。構成要素602、604、606、608、610、640、644、646、および648の各々は、共通のマザーボードに、または他の方式で適切に搭載され得る。 The computing device 600 includes a processor 602, such as a silicon-based hardware processor, a memory 604, a storage device 606, and an expansion port 610, connected via an interface 608. In some implementations, the computing device 600 may include, among other components, a transceiver 646, a communication interface 644, and a GPS (Global Positioning System) receiver module 648 connected via an interface 608. . Device 600 may communicate wirelessly via communication interface 644. This may include digital signal processing circuitry if necessary. Each of the components 602, 604, 606, 608, 610, 640, 644, 646, and 648 may be suitably mounted on a common motherboard or otherwise.
プロセッサ602は、コンピューティングデバイス600内の実行のための命令を処理し得る。この命令は、ディスプレイ616のような外部入力/出力デバイスにおけるGUIのためのグラフィック情報を表示するために、メモリ604に、または、記憶デバイス606に記憶された命令を含む。ディスプレイ616は、モニタ、または、フラットタッチスクリーンディスプレイであり得る。いくつかの実施では、多数のプロセッサおよび/または多数のバスが、多数のメモリおよび多数のタイプのメモリとともに適切に使用され得る。また、(たとえば、サーババンク、ブレードサーバのグループ、または、マルチ-プロセッサシステムとして)各デバイスが必要な動作の一部を提供する多数のコンピューティングデバイス600が接続され得る。 The processor 602 may process instructions for execution within the computing device 600. The instructions include instructions stored in memory 604 or in storage device 606 to display graphic information for a GUI at an external input / output device such as display 616. Display 616 may be a monitor or a flat touch screen display. In some implementations, multiple processors and / or multiple buses may be suitably used with multiple memories and multiple types of memory. Also, multiple computing devices 600 may be connected that provide some of the operations that each device requires (eg, as a server bank, a group of blade servers, or a multi-processor system).
メモリ604は、コンピューティングデバイス600内に情報を記憶する。1つの実施では、メモリ604は、揮発性メモリユニットである。別の実施では、メモリ604は、不揮発性メモリユニットである。メモリ604はまた、磁気または光ディスクのような別の形態のコンピュータ読取可能な媒体であり得る。いくつかの実施では、メモリ604は、拡張インターフェースを介して提供される拡張メモリを含み得る。 Memory 604 stores information within computing device 600. In one implementation, the memory 604 is a volatile memory unit. In another implementation, the memory 604 is a non-volatile memory unit. The memory 604 may also be another form of computer readable media such as a magnetic or optical disk. In some implementations, the memory 604 may include expansion memory provided via an expansion interface.
記憶デバイス606は、コンピューティングデバイス600のための大容量ストレージを提供することができる。1つの実施では、記憶デバイス606は、フロッピーディスクデバイス、ハードディスクデバイス、光ディスクデバイス、またはテープデバイス、フラッシュメモリまたは他の類似のソリッドステートメモリデバイス、または、記憶エリアネットワークまたは他の構成におけるデバイスを含むデバイスのアレイのようなコンピュータ読取可能な媒体であり得るか、または、これらを含み得る。コンピュータプログラム製品は、そのようなコンピュータ読取可能な媒体内に、明確に具体化され得る。コンピュータプログラム製品はまた、上述したように、実行された場合に、1つまたは複数の方法を実行する命令をも含み得る。コンピュータ-またはマシン-読取可能な媒体は、メモリ604、記憶デバイス606、または、プロセッサ602におけるメモリのような、記憶デバイスである。 Storage device 606 may provide mass storage for computing device 600. In one implementation, the storage device 606 includes a floppy disk device, hard disk device, optical disk device, or tape device, flash memory or other similar solid state memory device, or device in a storage area network or other configuration. Or may be a computer readable medium such as an array of A computer program product may be clearly embodied in such computer readable media. The computer program product may also include instructions that, when executed, perform one or more methods, as described above. The computer-or machine-readable medium is a storage device, such as memory 604, storage device 606, or memory in processor 602.
インターフェース608は、コンピューティングデバイス600のための帯域幅消費型動作を管理する高速コントローラ、または、より低い帯域幅消費型動作を管理する低速コントローラ、または、そのようなコントローラの組合せ、であり得る。外部インターフェース640は、デバイス600の他のデバイスとの近傍エリア通信を可能にするように提供され得る。いくつかの実施では、コントローラ612は、記憶デバイス606および拡張ポート614へ結合され得る。様々な通信ポート(たとえば、USB、Bluetooth（登録商標）、イーサネット（登録商標）、ワイヤレスイーサネット（登録商標）)を含み得る拡張ポートは、キーボード、ポインティングデバイス、スキャナ、または、スイッチまたはルータのようなネットワーキングデバイスのような1つまたは複数の入力/出力デバイスへ、たとえばネットワークアダプタを介して結合され得る。 Interface 608 may be a high speed controller that manages bandwidth consuming operations for computing device 600, or a low speed controller that manages lower bandwidth consuming operations, or a combination of such controllers. An external interface 640 may be provided to allow near area communication with other devices of the device 600. In some implementations, the controller 612 may be coupled to the storage device 606 and the expansion port 614. Expansion ports that can include various communication ports (eg, USB, Bluetooth®, Ethernet®, wireless Ethernet®) such as keyboards, pointing devices, scanners, or switches or routers It may be coupled to one or more input / output devices, such as a networking device, for example via a network adapter.
図面に図示されるように、コンピューティングデバイス600は、多くの異なる形態で実施され得る。たとえば、それは、標準的なサーバ630として、または、そのようなサーバのグループ内で何度も実施され得る。また、それは、ラックサーバシステムの一部として実施され得る。それに加えて、それは、ラップトップコンピュータ632、デスクトップコンピュータ634、または、タブレットまたはスマートフォン636のようなペルソナコンピューティングデバイス内で実施され得る。システム全体は、互いに通信する多数のコンピューティングデバイス600から構成され得る。他の構成も可能である。 As illustrated in the drawings, computing device 600 may be implemented in many different forms. For example, it can be implemented multiple times as a standard server 630 or within a group of such servers. It can also be implemented as part of a rack server system. In addition, it can be implemented in a laptop computer 632, desktop computer 634, or a persona computing device such as a tablet or smartphone 636. The entire system can be comprised of multiple computing devices 600 that communicate with each other. Other configurations are possible.
図7は、本明細書で説明された技術とともに使用され得る、図1のシステム110であり得る、一般的なコンピュータデバイス700の例を図示する。コンピューティングデバイス700は、サーバ、ブレードサーバ、データセンター、メインフレーム、および他の大規模なコンピューティングデバイスのような大規模なデータ処理デバイスの様々な例示的な形態を表すことが意図される。コンピューティングデバイス700は、1つまたは複数の通信ネットワークによって相互接続された、恐らくはネットワークに結合された記憶ノードを含む、多数のプロセッサを有する分散システムであり得る。本明細書に図示された構成要素、それらの接続および関係、およびそれらの機能は、単なる例であることが意図され、本書において説明および/または特許請求された発明の実施を限定することは意図されていない。 FIG. 7 illustrates an example of a general computing device 700 that can be the system 110 of FIG. 1 that can be used with the techniques described herein. Computing device 700 is intended to represent various exemplary forms of large scale data processing devices such as servers, blade servers, data centers, mainframes, and other large scale computing devices. Computing device 700 may be a distributed system having a number of processors, including storage nodes, possibly coupled to the network, interconnected by one or more communication networks. The components illustrated herein, their connections and relationships, and their functions are intended to be examples only and are not intended to limit the practice of the invention described and / or claimed herein. It has not been.
分散型コンピューティングデバイス700は、任意の数のコンピューティングデバイス780を含み得る。コンピューティングデバイス780は、ローカルまたは広域ネットワーク、専用光リンク、モデム、ブリッジ、ルータ、スイッチ、ワイヤまたはワイヤレスネットワーク等を介して通信する、サーバまたはラックサーバ、メインフレーム等を含み得る。 Distributed computing device 700 may include any number of computing devices 780. The computing device 780 may include a server or rack server, mainframe, etc. that communicates via a local or wide area network, a dedicated optical link, a modem, a bridge, a router, a switch, a wire or wireless network, or the like.
いくつかの実施では、各コンピューティングデバイスは、多数のラックを含み得る。たとえば、コンピューティングデバイス780aは、多数のラック758a〜758nを含む。各ラックは、プロセッサ752a〜752nおよび762a〜762nのような1つまたは複数のプロセッサを含み得る。プロセッサは、データプロセッサ、ネットワーク結合された記憶デバイス、または、他のコンピュータ制御されたデバイスを含み得る。いくつかの実施では、1つのプロセッサは、マスタプロセッサとして動作し得、スケジューリングおよびデータ配信タスクを制御し得る。プロセッサは、1つまたは複数のラックスイッチ758を介して相互接続され得、1つまたは複数のラックは、スイッチ778を介して接続され得る。スイッチ778は、接続された多数のコンピューティングデバイス700間の通信を取り扱い得る。 In some implementations, each computing device may include multiple racks. For example, computing device 780a includes a number of racks 758a-758n. Each rack may include one or more processors, such as processors 752a-752n and 762a-762n. The processor may include a data processor, a network coupled storage device, or other computer controlled device. In some implementations, one processor may operate as a master processor and may control scheduling and data distribution tasks. The processors can be interconnected via one or more rack switches 758, and the one or more racks can be connected via a switch 778. Switch 778 may handle communication between a number of connected computing devices 700.
各ラックは、メモリ754およびメモリ764のようなメモリと、756および766のようなストレージとを含み得る。ストレージ756および766は、大規模ストレージを提供し得、ネットワークに結合されたディスク、フロッピーディスク、ハードディスク、光ディスク、テープ、フラッシュメモリ、または、他の類似のソリッドステートメモリデバイス、または、記憶エリアネットワークまたは他の構成におけるデバイスを含むデバイスのアレイ、のような揮発性または不揮発性のストレージを含み得る。ストレージ756または766は、多数のプロセッサ、多数のラック、または多数のコンピューティングデバイス間で共有され得、プロセッサのうちの1つまたは複数によって実行可能な命令を記憶するコンピュータ読取可能な媒体を含み得る。メモリ754および764は、たとえば、揮発性メモリユニット、不揮発性メモリユニット、および/または、磁気ディスクまたは光ディスク、フラッシュメモリ、キャッシュ、ランダムアクセスメモリ(RAM)、読取専用メモリ(ROM)、およびその組合せのような他の形態のコンピュータ-読取可能な媒体を含み得る。メモリ754のようなメモリもまた、プロセッサ752a〜752n間で共有され得る。インデクスのようなデータ構造は、たとえば、ストレージ756およびメモリ754にわたって記憶され得る。コンピューティングデバイス700は、コントローラ、バス、入力/出力デバイス、通信モジュール等のような図示しない他の構成要素を含み得る。 Each rack may include memory such as memory 754 and memory 764 and storage such as 756 and 766. Storage 756 and 766 may provide large scale storage and may be a network coupled disk, floppy disk, hard disk, optical disk, tape, flash memory, or other similar solid state memory device, or storage area network or It may include volatile or non-volatile storage, such as an array of devices, including devices in other configurations. Storage 756 or 766 may include a computer readable medium that stores instructions executable by one or more of the processors that may be shared among multiple processors, multiple racks, or multiple computing devices. . Memory 754 and 764 can be, for example, a volatile memory unit, a non-volatile memory unit, and / or a magnetic or optical disk, flash memory, cache, random access memory (RAM), read only memory (ROM), and combinations thereof Such other forms of computer-readable media may be included. Memory, such as memory 754, may also be shared between processors 752a-752n. A data structure such as an index may be stored across storage 756 and memory 754, for example. Computing device 700 may include other components not shown, such as controllers, buses, input / output devices, communication modules, and the like.
システム110のようなシステム全体は、互いに通信する多数のコンピューティングデバイス700から構成され得る。たとえば、デバイス780aは、デバイス780b、780c、および780dと通信し得、これらはシステム100として集合的に知られ得る。別の例として、図1におけるシステム100は、1つまたは複数のコンピューティングデバイス700を含み得る。コンピューティングデバイスのうちのいくつかは、地理的に互いに接近して位置され得、他は、地理的に離れて位置され得る。コンピューティングデバイス700のレイアウトは、単なる例であって、このシステムは、他のレイアウトまたは構成を呈し得る。 An entire system, such as system 110, may be comprised of a number of computing devices 700 that communicate with each other. For example, device 780a may communicate with devices 780b, 780c, and 780d, which may be collectively known as system 100. As another example, the system 100 in FIG. 1 may include one or more computing devices 700. Some of the computing devices may be located geographically close to each other and others may be located geographically apart. The layout of the computing device 700 is merely an example, and the system may exhibit other layouts or configurations.
様々な実施は、基板に形成され、特別目的または一般目的であり得、記憶システム、少なくとも1つの入力デバイス、および少なくとも1つの出力デバイスからデータおよび命令を受信し、記憶システム、少なくとも1つの入力デバイス、および少なくとも1つの出力デバイスへデータおよび命令を送信するために結合された、少なくとも1つのプログラマブルプロセッサを含むプログラマブルシステムにおいて実行可能および/または解釈可能である1つまたは複数のコンピュータプログラムにおける実施を含み得る。 Various implementations may be special purpose or general purpose formed on a substrate and receive data and instructions from a storage system, at least one input device, and at least one output device, and the storage system, at least one input device And implementation in one or more computer programs executable and / or interpretable in a programmable system including at least one programmable processor coupled to transmit data and instructions to at least one output device obtain.
(プログラム、ソフトウェア、ソフトウェアアプリケーション、またはコードとしても知られる)これらコンピュータプログラムは、プログラマブルプロセッサのためのマシン命令を含み、高レベルの手続型および/またはオブジェクト指向のプログラム言語で、および/または、アセンブリ/マシン言語で、実施され得る。本明細書で使用されるように、「マシン-読取可能な媒体」、「コンピュータ-読取可能な媒体」という用語は、マシン命令および/またはデータをプログラマブルプロセッサへ提供するために使用される、任意の非一時的なコンピュータプログラム製品、装置、および/または、デバイス(たとえば、磁気ディスク、光ディスク、(リードアクセスメモリを含む)メモリ、プログラマブル論理デバイス(PLD))を称する。 These computer programs (also known as programs, software, software applications, or code) contain machine instructions for a programmable processor, in a high level procedural and / or object oriented programming language, and / or assembly / Can be implemented in machine language. As used herein, the terms “machine-readable medium”, “computer-readable medium” are any terms used to provide machine instructions and / or data to a programmable processor. Non-transitory computer program product, apparatus, and / or device (eg, magnetic disk, optical disk, memory (including read access memory), programmable logic device (PLD)).
本明細書で説明されるシステムおよび技術は、バックエンド構成要素(たとえば、データサーバ)を含む、または、ミドルウェア構成要素(たとえば、アプリケーションサーバ)を含む、または、フロントエンド構成要素(たとえば、ユーザが、本明細書で説明されたシステムおよび技術の実施とインタラクトでき得るグラフィックユーザインターフェースまたはウェブブラウザを有するクライアントコンピュータ)を含む、コンピューティングシステムにおいて、または、そのようなバックエンド構成要素、ミドルエンド構成要素、またはフロンドエンド構成要素の任意の組合せにおいて、実施され得る。システムの構成要素は、(たとえば通信ネットワークのような)デジタルデータ通信の任意の形態または媒体によって相互接続され得る。通信ネットワークの例は、ローカルエリアネットワーク(「LAN」)、広域ネットワーク(「WAN」)、およびインターネットを含む。 The systems and techniques described herein include a back-end component (e.g., a data server), a middleware component (e.g., an application server), or a front-end component (e.g., a user In a computing system, or in such a back-end component, middle-end component, including a graphical user interface or client computer having a web browser that can interact with the implementation of the systems and techniques described herein , Or any combination of front end components. The components of the system can be interconnected by any form or medium of digital data communication (eg, a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
コンピューティングシステムは、クライアントおよびサーバを含み得る。クライアントおよびサーバは、一般に、互いに離れており、一般に、通信ネットワークを介してインタラクトする。クライアントとサーバとの関係は、各々のコンピュータにおいて実行し、互いにクライアント-サーバ関係を有している、コンピュータプログラムによって生じる。 The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship between a client and a server is caused by a computer program that runs on each computer and has a client-server relationship with each other.
多くの実施が説明された。しかしながら、様々な修正が、本発明の精神およびスコープから逸脱することなくなされ得る。それに加えて、図面に描写された論理フローは、所望される結果を達成するために、必ずしも、図示された特定の順序、または、連続した順序を必要としない。それに加えて、他のステップが提供され得るか、または、ステップは、説明されたフローから削除され得、他の構成要素が、説明されたシステムへ追加され得るか、または、説明されたシステムから削除され得る。したがって、他の実施は、以下の特許請求の範囲のスコープ内である。 A number of implementations have been described. However, various modifications can be made without departing from the spirit and scope of the present invention. In addition, the logic flows depicted in the drawings do not necessarily require the particular order shown or sequential order to achieve the desired result. In addition, other steps can be provided, or steps can be deleted from the described flow, and other components can be added to the described system, or from the described system. Can be deleted. Accordingly, other implementations are within the scope of the following claims.
100 システム
110 バッチレンダリングシステム
120 バッチレンダリングエンジン
122 フェッチサービス
124 ウェブ-クローリングエンジン
126 オプションリソース識別エンジン
130 オプションリソースパターン
132 フェッチレコード
140 ブラウザ
160 ネットワーク
180 クライアント
190 ホストサーバ
200 レンダリング結果
205 画像
210 DOMツリー
215 レイアウト
220 エラー
225 埋込リソース
600 コンピュータデバイス
602 プロセッサ
604 メモリ
606 記憶デバイス
608 インターフェース
610 拡張ポート
612 コントローラ
614 拡張ポート
616 ディスプレイ
630 サーバ
632 ラップトップコンピュータ
634 デスクトップコンピュータ
636 スマートフォン
640 外部インターフェース
644 通信インターフェース
646 トランシーバ
648 GPS(全地球測位システム)受信機モジュール
700 コンピュータデバイス
752 プロセッサ
754 メモリ
756 ストレージ
758 ラック、ラックスイッチ
762 プロセッサ
764 メモリ
766 ストレージ
778 スイッチ
780 デバイス
100 system
110 Batch rendering system
120 batch rendering engines
122 fetch service
124 Web-crawling engine
126 Optional resource identification engine
130 Optional resource patterns
132 fetch records
140 Browser
160 network
180 clients
190 Host server
200 rendering results
205 images
210 DOM tree
215 layout
220 error
225 Embedded resources
600 computer devices
602 processor
604 memory
606 storage device
608 interface
610 expansion port
612 controller
614 expansion port
616 display
630 server
632 laptop computer
634 desktop computer
636 smartphone
640 External interface
644 communication interface
646 transceiver
648 GPS (Global Positioning System) receiver module
700 computer devices
752 processor
754 memory
756 storage
758 rack, rack switch
762 processor
764 memory
766 storage
778 switch
780 devices
Claims (20)
少なくとも1つのプロセッサと、
前記少なくとも1つのプロセッサによって実行された場合、前記システムに対して、
要求元からウェブページ内の埋込リソースのためのURLを受信し、
前記埋込リソースのための前記URLがオプションリソースを識別するデータストア内のパターンに一致すると判定することによって、前記埋込リソースがオプションリソースであるかどうかを判定し、
前記埋込リソースがオプションリソースであると判定したことに応じて、前記要求元が前記ウェブページをレンダリングする場合に前記埋め込みリソースをスキップするためのインジケーションを提供し、
前記埋込リソースがオプションリソースではないと判定したことに応じて、前記埋込リソースのためのコンテンツをフェッチして前記コンテンツを前記要求元に提供する
ようにする命令を記憶する、メモリと
を備える、システム。 A computer system,
At least one processor;
When executed by the at least one processor,
Receive the URL for the embedded resource in the web page from the requester,
Determining whether the embedded resource is an optional resource by determining that the URL for the embedded resource matches a pattern in a data store that identifies the optional resource;
Providing an indication for skipping the embedded resource when the requester renders the web page in response to determining that the embedded resource is an optional resource;
A memory for storing instructions for fetching content for the embedded resource and providing the content to the requester in response to determining that the embedded resource is not an optional resource. ,system.
前記URLからクエリ文字列を削除することによって前記URLをリライトし、
前記リライトされたURLを、オプションリソースを識別する前記データストア内の前記パターンに一致させる
ようにする命令をさらに記憶し、
前記リライトされたURLが前記パターンに一致する場合、前記埋込リソースはオプションである、請求項1に記載のシステム。 The memory, when executed by the at least one processor, for the system,
Rewrite the URL by removing the query string from the URL,
Further storing instructions for causing the rewritten URL to match the pattern in the data store identifying optional resources;
The system of claim 1, wherein the embedded resource is optional if the rewritten URL matches the pattern.
前記URLから少なくともクエリ文字列の一部を削除することによって前記埋込リソースのための前記URLをリライトし、
前記リライトされたURLを、オプションリソースを識別する前記データストア内の前記パターンに一致させる
ようにする命令をさらに記憶し、
前記リライトされたURLが前記パターンに一致する場合、前記埋込リソースはオプションである、請求項1に記載のシステム。 The memory, when executed by the at least one processor, for the system,
Rewrite the URL for the embedded resource by removing at least part of the query string from the URL;
Further storing instructions for causing the rewritten URL to match the pattern in the data store identifying optional resources;
The system of claim 1, wherein the embedded resource is optional if the rewritten URL matches the pattern.
前記URLからフェッチされたコンテンツを使用して、前記埋込リソースのエンベッダのための第1のレンダリング結果を生成し、
前記コンテンツを使用することなく、前記埋込リソースの前記エンベッダのための第2のレンダリング結果を生成し、
前記第1のレンダリング結果を前記第2のレンダリング結果と比較することによって、前記URLのための類似性スコアを計算し、
前記類似性スコアが類似性しきい値よりも大きい場合、前記埋込リソースがオプションであると判定し、
前記埋込リソースがオプションであると判定したことに応じて、前記データストアにURLパターンを記憶させる
ようにする命令をさらに記憶する、請求項1に記載のシステム。 The memory, when executed by the at least one processor, for the system,
Using content fetched from the URL to generate a first rendering result for the embedded resource embedder;
Generating a second rendering result for the embedder of the embedded resource without using the content;
Calculating a similarity score for the URL by comparing the first rendering result with the second rendering result;
If the similarity score is greater than a similarity threshold, determine that the embedded resource is optional;
The system of claim 1, further comprising instructions for causing the data store to store a URL pattern in response to determining that the embedded resource is optional.
前記URLからフェッチされた前記コンテンツを使用して、前記埋込リソースの前記エンベッダのための第3のレンダリング結果を生成し、
前記類似性スコアの計算中における前記第3のレンダリング結果と前記第1のレンダリング結果との間の何れの相違も無視する
ようにする命令をさらに記憶する、請求項5に記載のシステム。 The memory, when executed by the at least one processor, for the system,
Using the content fetched from the URL to generate a third rendering result for the embedder of the embedded resource;
6. The system of claim 5, further comprising instructions for ignoring any difference between the third rendering result and the first rendering result during the calculation of the similarity score.
前記URLからフェッチされた前記コンテンツを使用して、前記埋込リソースの前記エンベッダのための第3のレンダリング結果を生成し、
前記第1のレンダリング結果と前記第3のレンダリング結果との間の相違であるDOMノードを判定し、
前記類似性スコアを計算する際に相違する前記DOMノードを無視する
ようにする命令をさらに記憶する、請求項5に記載のシステム。 The memory, when executed by the at least one processor, for the system,
Using the content fetched from the URL to generate a third rendering result for the embedder of the embedded resource;
Determining a DOM node that is the difference between the first rendering result and the third rendering result;
6. The system of claim 5, further comprising instructions for ignoring the different DOM nodes when calculating the similarity score.
前記埋込リソースのための前記URLがオプションリソースを識別するデータストア内のパターンに一致すると判定することによって、前記埋込リソースがオプションリソースであるかどうかを判定するステップと、
前記埋込リソースがオプションリソースであると判定したことに応じて、前記要求処理が前記ウェブページをレンダリングする場合に前記埋め込みリソースをスキップするためのインジケーションを提供するステップと、
前記埋込リソースがオプションリソースではないと判定したことに応じて、前記埋込リソースのフェッチが要求されていることを示す応答を提供するステップと
を含む、方法。 Receiving a URL for the embedded resource in the web page from the request processing;
Determining whether the embedded resource is an optional resource by determining that the URL for the embedded resource matches a pattern in a data store that identifies the optional resource;
Providing an indication to skip the embedded resource when the request process renders the web page in response to determining that the embedded resource is an optional resource;
Providing a response indicating that a fetch of the embedded resource is requested in response to determining that the embedded resource is not an optional resource.
前記リライトされたURLを、オプションリソースを識別する前記データストア内の前記パターンに一致させるステップと
をさらに含み、
前記リライトされたURLが前記パターンに一致する場合、前記埋込リソースはオプションである、請求項11に記載の方法。 Rewriting the URL by deleting a query string from the URL;
Matching the rewritten URL to the pattern in the data store identifying optional resources; and
12. The method of claim 11, wherein the embedded resource is optional if the rewritten URL matches the pattern.
前記リライトされたURLを、オプションリソースを識別する前記データストア内の前記パターンに一致させるステップと
をさらに含み、
前記リライトされたURLが前記パターンに一致する場合、前記埋込リソースはオプションである、請求項11に記載の方法。 Rewriting the URL for the embedded resource by removing at least part of the query string from the URL;
Matching the rewritten URL to the pattern in the data store identifying optional resources; and
12. The method of claim 11, wherein the embedded resource is optional if the rewritten URL matches the pattern.
前記コンテンツを使用することなく、前記埋込リソースの前記エンベッダのための第2のレンダリング結果を生成するステップと、
前記第1のレンダリング結果を前記第2のレンダリング結果と比較することによって、前記URLのための類似性スコアを計算するステップと、
前記類似性スコアが類似性しきい値よりも大きい場合、前記埋込リソースがオプションであると判定するステップと、
前記埋込リソースがオプションであると判定したことに応じて、前記パターンとして前記データストアに前記URLを記憶するステップと
をさらに含む、請求項11に記載の方法。 Generating a first rendering result for the embedded resource embedder using content fetched from the URL;
Generating a second rendering result for the embedder of the embedded resource without using the content;
Calculating a similarity score for the URL by comparing the first rendering result with the second rendering result;
Determining that the embedded resource is optional if the similarity score is greater than a similarity threshold;
12. The method of claim 11, further comprising: storing the URL in the data store as the pattern in response to determining that the embedded resource is optional.
前記類似性スコアの計算中における前記第3のレンダリング結果と前記第1のレンダリング結果との間の何れの相違も無視するステップと
をさらに含む、請求項16に記載の方法。 Generating a third rendering result for the embedder of the embedded resource using the content fetched from the URL;
17. The method of claim 16, further comprising ignoring any difference between the third rendering result and the first rendering result during the calculation of the similarity score.
前記第1のレンダリング結果と前記第3のレンダリング結果との間の相違であるDOMノードを判定するステップと、
前記類似性スコアを計算する際に相違する前記DOMノードを無視するステップと
をさらに含む、請求項16に記載の方法。 Generating a third rendering result for the embedder of the embedded resource using the content fetched from the URL;
Determining a DOM node that is a difference between the first rendering result and the third rendering result;
17. The method of claim 16, further comprising ignoring the different DOM nodes in calculating the similarity score.
前記複数のURLからURLのサンプルを選択するステップであって、前記URLが、前記URLのサンプルのうちの1つである、ステップと、
前記URLの各サンプルについて、
前記URLからフェッチされたコンテンツを使用して、前記埋込リソースのエンベッダのための第1のレンダリング結果を生成し、
前記コンテンツを使用することなく、前記埋込リソースの前記エンベッダのための第2のレンダリング結果を生成し、
前記第1のレンダリング結果を前記第2のレンダリング結果と比較することによって、前記URLのための類似性スコアの各々を計算し、
前記類似性スコアが類似性しきい値よりも大きい場合、前記埋込リソースがオプションであると判定するステップと、
あらかじめ定められた数の前記類似性スコアの各々が類似性しきい値より大きいことに応じて、前記データストアに前記複数のURLに共通の前記URLパターンを記憶するステップと
をさらに含む、請求項11に記載の方法。 Identifying a URL pattern common to a plurality of URLs stored in a fetch record, wherein the URL is one of the plurality of URLs;
Selecting a URL sample from the plurality of URLs, wherein the URL is one of the URL samples;
For each sample of the URL
Using content fetched from the URL to generate a first rendering result for the embedded resource embedder;
Generating a second rendering result for the embedder of the embedded resource without using the content;
Calculating each similarity score for the URL by comparing the first rendering result to the second rendering result;
Determining that the embedded resource is optional if the similarity score is greater than a similarity threshold;
Storing the URL pattern common to the plurality of URLs in the data store in response to each of a predetermined number of the similarity scores being greater than a similarity threshold. 11. The method according to 11.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2017175573A JP6397101B2 (en) | 2017-09-13 | 2017-09-13 | Optimized browser rendering process |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
JP2017175573A JP6397101B2 (en) | 2017-09-13 | 2017-09-13 | Optimized browser rendering process |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2016574382A Division JP6211722B2 (en) | 2014-06-26 | 2014-06-26 | Optimized browser rendering process |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2018010679A JP2018010679A (en) | 2018-01-18 |
JP6397101B2 true JP6397101B2 (en) | 2018-09-26 |
Family
ID=60993823
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2017175573A Active JP6397101B2 (en) | 2017-09-13 | 2017-09-13 | Optimized browser rendering process |
Country Status (1)
Country | Link |
---|---|
JP (1) | JP6397101B2 (en) |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2987355B2 (en) * | 1998-01-21 | 1999-12-06 | 三菱電機株式会社 | Hypertext display system and hypertext display method |
JP2002297619A (en) * | 2001-03-29 | 2002-10-11 | Brother Ind Ltd | Advertisement information providing system, and device, method, and program for browsing advertisement information |
US8527504B1 (en) * | 2005-09-01 | 2013-09-03 | At&T Intellectual Property Ii, L.P. | Data network content filtering using categorized filtering parameters |
JP2011221616A (en) * | 2010-04-05 | 2011-11-04 | Nec Corp | Url filtering system, system control method, and system control program |
JP5279793B2 (en) * | 2010-10-25 | 2013-09-04 | 京セラ株式会社 | Mobile terminal, mobile terminal control method and program |
-
2017
- 2017-09-13 JP JP2017175573A patent/JP6397101B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
JP2018010679A (en) | 2018-01-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6211722B2 (en) | Optimized browser rendering process | |
US11328114B2 (en) | Batch-optimized render and fetch architecture | |
US10713330B2 (en) | Optimized browser render process | |
JP5821678B2 (en) | Web service for automatic compatibility check independent of web application browser | |
US9465685B2 (en) | Identifying solutions to application execution problems in distributed computing environments | |
JP6903755B2 (en) | Data integration job conversion | |
JP6568985B2 (en) | Batch optimized rendering and fetch architecture | |
JP6397101B2 (en) | Optimized browser rendering process | |
EP3264254B1 (en) | System and method for a simulation of a block storage system on an object storage system | |
US11568320B2 (en) | Handling system-characteristics drift in machine learning applications | |
JP6816824B2 (en) | Distributed systems, data management devices, data management methods, and programs | |
CN110750569A (en) | Data extraction method, device, equipment and storage medium | |
JP6139399B2 (en) | Distributed query processing device, query processing method, and query processing program |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20180521 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20180720 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20180806 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20180830 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 6397101Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |
|
R250 | Receipt of annual fees |
Free format text: JAPANESE INTERMEDIATE CODE: R250 |