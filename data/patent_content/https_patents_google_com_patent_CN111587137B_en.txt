CN111587137B - Detecting and compensating for display lag in gaming systems - Google Patents
Detecting and compensating for display lag in gaming systems Download PDFInfo
- Publication number
- CN111587137B CN111587137B CN201980007125.8A CN201980007125A CN111587137B CN 111587137 B CN111587137 B CN 111587137B CN 201980007125 A CN201980007125 A CN 201980007125A CN 111587137 B CN111587137 B CN 111587137B
- Authority
- CN
- China
- Prior art keywords
- game
- server
- user
- delay
- real
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000012545 processing Methods 0.000 claims abstract description 85
- 238000000034 method Methods 0.000 claims description 136
- 230000002452 interceptive effect Effects 0.000 claims description 74
- 238000003860 storage Methods 0.000 claims description 36
- 230000008859 change Effects 0.000 claims description 15
- 238000013507 mapping Methods 0.000 claims description 2
- 230000004044 response Effects 0.000 abstract description 157
- 230000003993 interaction Effects 0.000 abstract description 18
- 238000009877 rendering Methods 0.000 abstract description 16
- 230000008569 process Effects 0.000 description 95
- 238000004891 communication Methods 0.000 description 37
- 230000001934 delay Effects 0.000 description 36
- 238000010586 diagram Methods 0.000 description 20
- 230000005540 biological transmission Effects 0.000 description 18
- 230000001360 synchronised effect Effects 0.000 description 15
- 230000009471 action Effects 0.000 description 13
- 230000000694 effects Effects 0.000 description 12
- 238000011156 evaluation Methods 0.000 description 11
- 230000033001 locomotion Effects 0.000 description 10
- 238000001514 detection method Methods 0.000 description 9
- 230000006870 function Effects 0.000 description 9
- 238000004364 calculation method Methods 0.000 description 8
- 230000000007 visual effect Effects 0.000 description 8
- 238000013468 resource allocation Methods 0.000 description 5
- 230000005236 sound signal Effects 0.000 description 5
- 230000003213 activating effect Effects 0.000 description 4
- 230000008901 benefit Effects 0.000 description 4
- 238000004422 calculation algorithm Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 239000007787 solid Substances 0.000 description 4
- 230000001960 triggered effect Effects 0.000 description 4
- 230000004913 activation Effects 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 230000007423 decrease Effects 0.000 description 3
- 238000005304 joining Methods 0.000 description 3
- 238000012544 monitoring process Methods 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 238000004458 analytical method Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 2
- 230000002860 competitive effect Effects 0.000 description 2
- 230000006835 compression Effects 0.000 description 2
- 238000007906 compression Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000003116 impacting effect Effects 0.000 description 2
- 230000000670 limiting effect Effects 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 238000010606 normalization Methods 0.000 description 2
- 238000003825 pressing Methods 0.000 description 2
- 230000004043 responsiveness Effects 0.000 description 2
- 230000002441 reversible effect Effects 0.000 description 2
- 238000004088 simulation Methods 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 230000000153 supplemental effect Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 238000011144 upstream manufacturing Methods 0.000 description 2
- 238000012935 Averaging Methods 0.000 description 1
- 101100408383 Mus musculus Piwil1 gene Proteins 0.000 description 1
- 241000695274 Processa Species 0.000 description 1
- 239000008186 active pharmaceutical agent Substances 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000003139 buffering effect Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000012937 correction Methods 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 238000007689 inspection Methods 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 230000008450 motivation Effects 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 238000004806 packaging method and process Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000035484 reaction time Effects 0.000 description 1
- 238000004513 sizing Methods 0.000 description 1
- 230000002269 spontaneous effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000012384 transportation and delivery Methods 0.000 description 1
Images
Classifications
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/32—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using local area network [LAN] connections
- A63F13/323—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using local area network [LAN] connections between game devices with different hardware characteristics, e.g. hand-held game devices connectable to game consoles or arcade machines
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/33—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using wide area network [WAN] connections
- A63F13/335—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers using wide area network [WAN] connections using Internet
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/355—Performing operations on behalf of clients with restricted processing capabilities, e.g. servers transform changing game scene into an MPEG-stream for transmitting to a mobile phone or a thin client
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/30—Interconnection arrangements between game servers and game devices; Interconnection arrangements between game devices; Interconnection arrangements between game servers
- A63F13/35—Details of game servers
- A63F13/358—Adapting the game course according to the network or server load, e.g. for reducing latency due to different connection speeds between clients
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F13/00—Video games, i.e. games using an electronically generated display having two or more dimensions
- A63F13/40—Processing input control signals of video game devices, e.g. signals generated by the player or derived from the environment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/455—Emulation; Interpretation; Software simulation, e.g. virtualisation or emulation of application or operating system execution engines
- G06F9/45533—Hypervisors; Virtual machine monitors
- G06F9/45558—Hypervisor-specific management and integration aspects
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/50—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers
- A63F2300/53—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing
- A63F2300/534—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing for network load management, e.g. bandwidth optimization, latency reduction
-
- A—HUMAN NECESSITIES
- A63—SPORTS; GAMES; AMUSEMENTS
- A63F—CARD, BOARD, OR ROULETTE GAMES; INDOOR GAMES USING SMALL MOVING PLAYING BODIES; VIDEO GAMES; GAMES NOT OTHERWISE PROVIDED FOR
- A63F2300/00—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game
- A63F2300/50—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers
- A63F2300/53—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing
- A63F2300/535—Features of games using an electronically generated display having two or more dimensions, e.g. on a television screen, showing representations related to the game characterized by details of game servers details of basic data processing for monitoring, e.g. of user parameters, terminal parameters, application parameters, network parameters
Abstract
The electronic game server receiving an input event from a game controller at a remote site during a game session operating in a current game state, wherein the input event comprises a first command generated by user interaction with the game controller during the game session; determining a first frame displayed at the remote site during the user interaction, wherein the first frame is one of a plurality of output frames transmitted by the server during the game session prior to the server receiving the input event; determining a first game state associated with the first frame, wherein the first game state is a previous game state to the current game state; processing a game play output based on the first command and the first game state; outputting a rendering response frame based on the game play; and transmitting the response frame for display at the remote site.
Description
Technical Field
The present application relates generally to computer technology, including but not limited to methods and systems for managing a server system to support online interactive sessions corresponding to one or more real-time user interactive applications.
Background
Internet-connected electronic devices may support a variety of cloud-based media and entertainment applications. These applications include media streaming applications where a server streams content to a user device, gaming applications where users interact from a user device with games executed on a server, and various social media and communication applications that allow a large number of users to interact with each other and cloud-hosted content and applications simultaneously via their internet-connected devices. Among cloud-based applications, cloud games present some unique challenges for the following reasons: widely varying hardware requirements for game titles; multiple topologies in which cloud-based games can be played (e.g., by one player, by multiple players in a single location, or by multiple players in multiple locations); there is a need to reliably and delay-free transmit player input to a game server executing a game session and transmit game session output from the game server to a player's device/display; widely varying player expectations regarding speed and responsiveness of gameplay (gameplay); and in some cases, the desire to provide near real-time game content to the audience. Other challenges of cloud-based gaming relate to providing players with a consistent gameplay experience, wherever they are located (e.g., near a server or far away from a server), how they connect to a gaming service (e.g., via a fast or slow internet connection), and what type of device they use to play the game (e.g., a general purpose personal device or a dedicated game controller) and view gameplay output (e.g., a personal device or a media device connected to a media streaming device).
In particular, there is a need for a cloud gaming system that supports multiple gaming sessions for multiple game names, where games can be executed simultaneously with acceptable latency and responsiveness, including for multiple users from the same or different locations that are playing the same game name, and through a variety of input and output devices and network connections. Further, there is a need for a cloud gaming system that processes user input immediately after receiving player input (e.g., gaming input entered on an end-user gaming device/controller) in a gaming session and outputs a high-definition image reflecting the results of the player input action for all game players simultaneously and with acceptable delay. There is also a need for a gaming system that, in some instances, provides a high definition video stream of game play activity to allow spectators to track game play in real time on respective display devices. As such, it would be beneficial to provide an efficient game processing and output mechanism to a cloud gaming system to extend the gaming experience in a wide range of gaming settings, from spontaneous game play by users aggregated at the same location to online interactive game play by multiple users from multiple locations.
Disclosure of Invention
Embodiments described herein are directed to providing a gaming Application Programming Interface (API) and cloud platform to enable efficient, portable, and low-latency hosting of third party gaming content. Some embodiments dynamically allocate cloud gaming hardware resources and monitor and utilize network bandwidth available to individual end users to provide an optimal cloud gaming experience. Some embodiments provide multiple performance layers, including layers that support high performance, real-time gaming sessions with high definition media output and end-user streaming. Some embodiments support different subscription models and/or are configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to clients of users participating in an online/cloud gaming session via a mobile application or browser-based program). In some implementations, concurrent game play and/or commentary videos are provided to one or more users via a media streaming site, such as YouTube, with little or no delay.
In one aspect of the application, a method of controlling a game process is implemented at a server system comprising one or more processors and memory storing one or more programs for execution by the one or more processors. The method includes receiving an input event from a game controller located at a remote site during a game session operating in a current game state, wherein the input event includes a first command generated by user interaction with the game controller during the game session; determining a first frame displayed at the remote site during the user interaction, wherein the first frame is one of a plurality of output frames transmitted by the server during a game session prior to the server receiving the input event; determining a first game state associated with the first frame, wherein the first game state is a previous game state to the current game state; processing the game play output in accordance with (i) the first command and (ii) the first game state; outputting a rendering response frame based on the game play; and transmitting the response frame for display at the remote site.
In another aspect of the present application, a method of rendering an online interactive game session is implemented at a server system that includes one or more processing cores and memory storing programs for execution by the one or more processing cores. The method comprises the following steps: receiving a first command from a first client device associated with an online gaming session; determining a type of a first command and a first expected response delay associated with the type of the first command; determining a network delay; determining a first introduced delay based on a comparison of the network delay and the first expected delay; generating a first number of intermediate frames that occupy a transmission time corresponding to a first introduced delay when transmitted at a predetermined frame rate; generating a first response frame reflecting an initial result of the first command; and transmitting a first number of intermediate frames immediately following the first response frame at the predetermined frame rate such that the first response frame is received at a first media device associated with the first client device at a time corresponding to the first expected response delay.
In another aspect of the present application, a method is implemented at a server system comprising a plurality of virtual machines, each having a respective resource profile. The method comprises the following steps: receiving a request from a client device to establish a real-time interactive gaming session, wherein the request is received over a network connection with the client device; determining a device capability of an output device associated with a client device; determining a connection capability of a network connection; determining one or more target quality parameters for the real-time interactive game session based on the device capabilities and the connection capabilities; selecting a first virtual machine of the plurality of virtual machines based on the one or more target quality parameters; establishing a real-time interactive gaming session with a client device; and providing, to the real-time interactive gaming session, resources for processing input from the client device in the real-time interactive gaming session and generating game play output from the processed input in accordance with the resource profile of the first virtual machine.
In another aspect of the application, a method is implemented at a server system that includes one or more processors and memory storing one or more programs for execution by the one or more processors. The method includes establishing a real-time interactive gaming session with a first client device, the gaming session associated with a particular game type; monitoring in-game performance data associated with a user of a first client device during a gaming session; determining a game play experience tolerance level for a user of the first client device from the in-game performance data; and adjusting game session resources based on the game play experience tolerance level, the game session resources including frame rate, resolution, latency level, or streaming source.
According to some aspects of the present application, a server system includes a memory storing instructions for causing the server system to perform any of the methods described above.
Further, according to some aspects of the present application, the instructions stored in the memory of the server system include instructions for causing the server system to perform any of the methods described above.
Other embodiments and advantages may be apparent to those skilled in the art from the description and drawings herein.
Drawings
For a better understanding of the various described embodiments, reference should be made to the following description of the embodiments taken in conjunction with the following drawings in which like reference numerals refer to corresponding parts throughout the figures.
FIG. 1 is an example online interactive gaming environment, according to some embodiments.
FIG. 2 is a block diagram illustrating an example client device of a gaming environment, in accordance with some embodiments.
FIG. 3 is a block diagram illustrating an example media device of a gaming environment, in accordance with some embodiments.
FIG. 4 is a block diagram illustrating an example server of a gaming environment, in accordance with some embodiments.
FIG. 5A depicts an example gaming environment, according to some embodiments.
Fig. 5B and 5C depict example game scenarios, according to some embodiments.
FIG. 6 is a flow diagram of a game play process according to some embodiments.
Fig. 7-12 are flow diagrams of various trigger frame determination processes according to some embodiments.
FIG. 13 is a flow diagram of a delay detection and compensation process according to some embodiments.
14A and 14B are example tables of response time settings according to some embodiments.
Fig. 14C is an example device/network evaluation module, according to some embodiments.
FIG. 15 is an example online interactive gaming environment, according to some embodiments.
FIG. 16 is an example sequence of frames rendered on a display according to some embodiments.
Fig. 17 and 18 are diagrams depicting introduced delays according to some embodiments.
FIG. 19A is an example online interactive gaming environment, according to some embodiments.
FIG. 19B depicts an example screen shot of an online interactive gaming environment, according to some embodiments.
FIG. 20A is an example online interactive gaming environment, according to some embodiments.
FIG. 20B depicts an example screen shot of an online interactive gaming environment, according to some embodiments.
Fig. 21 is a flow diagram of a delay adjustment process according to some embodiments.
FIG. 22 is an example implementation of a resource store in accordance with some implementations.
FIG. 23 is a flow diagram of a resource allocation process according to some embodiments.
Fig. 24A is an example implementation of a repository for user playability profiles, according to some implementations.
FIG. 24B is an example table of resource settings according to some embodiments.
FIG. 25 is a flow diagram of a resource tuning process according to some embodiments.
Like reference numerals refer to corresponding parts throughout the drawings.
Detailed Description
Embodiments described herein are directed to providing a cloud platform and API to enable efficient, portable, low-latency hosting of cloud gaming content, including third party gaming content. Some embodiments dynamically allocate cloud gaming hardware resources (e.g., CPU, GPU, memory, input/output and video stream encoders) and monitor and utilize network bandwidth available to a single end user to simultaneously provide an optimal online gaming experience to a community of game players. Some embodiments provide multiple performance layers, including layers that support high performance, real-time gaming sessions with high definition media streams for end users. Some embodiments support different subscription models and/or are configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to client devices of users participating in an online/cloud gaming session via a mobile application or browser-based program). In some implementations, a real-time gameplay and/or commentary media stream is provided to one or more users with little or no delay through a media streaming website, such as YouTube.
In some embodiments of a cloud gaming environment, a server system provides hardware resources for real-time, interactive gaming sessions for processing player input and generating output streams for display to one or more players, and optionally, game spectators. In response to a request to establish a real-time interactive gaming session, the server system determines device capabilities (e.g., hardware and/or software capabilities), connection capabilities (e.g., bandwidth, latency, and/or error rate) of the requesting client device (i.e., the player's controller device), and one or more target quality parameters (e.g., resolution of the output video stream, game response latency, etc.) of the gaming session, and thus, associates one of its virtual machines with the real-time interactive session to establish the session.
In some implementations, the processing and encoding capabilities of game data (e.g., generating output video streams for players and/or spectators) are managed for one or more processing cores (e.g., GPU cores and encoder cores) in a server system hosting a real-time, online, and interactive game environment. For example, in some implementations, one or more processing cores operate with multiple processing slices (e.g., each executing within 16.67ms on the core), and the server system assigns each of the multiple processing slices to a subset of the multiple online game sessions to be executed thereon. For one of the processing slices, the server system determines a time-shared processing schedule such that the respective subsets of the game sessions share the duty cycle of the processing slice and are executed in parallel according to their respective real-time data processing needs. Additionally, to speed up image encoding over a time interval, the encoder of the server system does not need to wait until the GPU has made all of the data for the image frame available. Rather, in some embodiments, a portion of an image frame is encoded once the information needed to encode that portion is provided by the GPU, regardless of whether other portions of the image frame that are not related to the encoded portion are made available to the GPU.
Additionally, the server system may dynamically generate the plurality of frames in response to user commands received from users participating in the online gaming session. Depending on the type of user command, the server system determines the expected response delay, the actual communication and processing delays, and the actual transmission delay. User commands are then executed in the online gaming session by generating a set of frames that reflect the effects of the commands. A set of frames, when transmitted at a predetermined frame rate, occupy a transmission time corresponding to an actual transmission delay and may be received at a client device of a user within a time corresponding to an expected response delay.
FIG. 1 illustrates an example online interactive gaming environment 100, in accordance with some embodiments. Online interactive gaming environment 100 includes one or more client devices (e.g., client devices 102 and 104). Each client device 102 executes one or more gaming applications. The game session may run on a particular game application to allow a user of the client device 102 to play an online interactive game hosted by the server system 114. In some implementations, a client device 102 (e.g., a host client) is configured to invite one or more other client devices 102 to join a game scenario of a particular game application. The gaming sessions of these client devices 102 are synchronized to display the same game scenes, optionally with different perspectives corresponding to their respective users.
Rather, server system 114 hosts an online interactive gaming platform to support client device 102 in participating in one or more gaming applications, including a particular gaming application. In particular, server system 114 includes a plurality of user accounts associated with client device 102 and authenticates a user of the client device in association with each of the one or more gaming applications. Server system 114 renders and refreshes a scene of the online interactive game on client device 102, which client device 102 joined a corresponding game session associated with the scene. In some implementations, the server system 114 evaluates the capabilities of the client devices 102 and/or the quality of the communication connection between the server system 114 and each client device 102 and adaptively generates a synchronization data stream for the gaming session associated with the client device 102. By these means, the server system 114 is configured to facilitate a synchronized gaming session of an online interactive game on two or more client devices 102 simultaneously and with substantially low latency.
In some implementations, the server system 114 includes a game server 122 and a media streaming server 124. The game server 122 is configured to simultaneously provide two or more media streams for an online interactive game session running on the first client device 102A. The two or more media streams include a low-latency stream and a normal-latency stream that are provided to the first client device 102A and the reviewer client device 104 via one or more communication networks 112, respectively. Optionally, a normal delay stream is provided for instructional purposes. When the user of the first client device 102 participates in a gaming session on the first client device 102A, the gaming session is recorded and broadcast to one or more spectators via a normal latency stream, i.e., spectators may comment on the gaming session on the reviewer client. The low-latency stream corresponds to gameplay of the online interactive game session and has a faster response rate and lower transmission latency than a normal latency stream corresponding to an associated commentary session. For example, the low-delay stream has a predefined frame rate of 60 frames per second (fps) and provides at least one frame to the first client device 102A during each 16.67ms interval, and the normal-delay stream has a predefined frame rate of 30fps and provides at least one frame to the reviewer client device 104 during each 33.33ms interval. In some embodiments, the normal delay stream has a lower resolution than the low delay stream.
In some implementations, the client device 102 or 104 has a display screen integrated therein for displaying media content. In some implementations, the client device 102 or 104 is coupled to a media device 106 and an output device 108. In particular, the client device 102 or 104 may be communicatively coupled to the media device 106 directly (e.g., via a bluetooth or other wireless communication link), via a local network 110 (e.g., a Wi-Fi network), or via one or more communication networks 112. In some implementations, the client device (102 or 104) and the media device 106 are both local to each other (e.g., in the same room, in the same house, etc.). Media device 106 is further coupled to one or more output devices 108 (e.g., televisions, display monitors, sound systems, speakers, etc.) that may output visual and/or audio content. The media device 106 is configured to output content to the output device 108. In some implementations, the media device 106 is a drop device (e.g., a chord media st of Google, inc.) or a device that otherwise includes a drop function.
In some implementations, one or more client devices 102 or 104 can be capable of data communication and information sharing with each other, a central server or cloud computing system (e.g., server system 114), and/or other devices connected by a network (e.g., another client device 102 or 104, media device 106, and output device 108)). Data communication may be performed using any of a variety of custom or standard wireless protocols (e.g., IEEE 802.15.4, Wi-Fi, ZigBee, 6LoWPAN, Thread, Z-Wave, Bluetooth Smart, isa100.11a, WirelessHART, MiWi, etc.) and/or any of a variety of custom or standard wired protocols (e.g., ethernet, HomePlug, etc.), or any other suitable communication protocol including communication protocols not developed until the date of filing this document. In some embodiments, online interactive gaming environment 100 includes a conventional network device (e.g., a router) via which sets of client devices 102 and 104 and their corresponding media and output devices (if any) are communicatively coupled to each other over a local network 110 (e.g., a local area network), and local network 110 is communicatively coupled to a communication network 112 (e.g., a wide area network and the internet). In some embodiments, each of the client devices 102 and 104 optionally communicates with one or more other client devices, respective media devices 106, or respective output devices 108 using one or more radio communication networks (e.g., ZigBee, Z-Wave, Insteon, bluetooth, Wi-Fi, and/or other radio communication networks).
In some implementations, the client devices 102 are remote from each other, i.e., they are not located in the same room or even building. The game may be started by launching a game application (e.g., game application 228 in fig. 2) to execute on each client device 102. In some implementations, for each client device 102, the gaming application establishes an online gaming session 116 independently with the server system 114. The online gaming sessions 116 of two or more client devices 102 (e.g., 102A and 102B) are related to each other (e.g., because they all play games in the same gaming domain of the gaming application) and, thus, share a game scene in the gaming application. The related online gaming sessions 116 are synchronized with each other, and each online gaming session 116 optionally shows the same game scenario with a unique player perspective corresponding to the respective client device 102. Thus, the user of each client device 102 may play a game on the respective client device and affect the output of the online gaming session 116 on the other client devices 102.
Alternatively, in some other implementations, after the gaming application of the first client device 102A establishes the online gaming session 116, one or more second client devices 102B are invited to join the online gaming session 116 by an invitation message, and a message, for example, with a link (e.g., a URL address) to join the online gaming session 116 is sent to each of the second client devices 102B. An appropriate controller configuration is provided to each second client device 102B invited to join the online gaming session 116. In this application, when a second client 102B joins the online gaming session 116, the server system 114 creates a separate gaming session for each separate second client device 102B. Each individual game session 116 of a respective second client device 102B is synchronized with the game session 116 of the first client device 102A and shares the same scene with that game session 116, but may have a unique player perspective corresponding to the respective second client device 102B. After each second client device 102B has received the appropriate controller configuration and joined the online gaming session 116 (more precisely, started its associated online gaming session 116), the user may play a game on the respective second client device 102B and affect the output of the online gaming sessions 116 running on the other client devices 102.
The client device 102 is a device that includes and can run one or more different user applications, including a gaming application. In some implementations, the client device 102 is a smartphone, tablet, laptop, desktop computer, or multimedia device. In some implementations, the client device 102 is a dedicated game controller that includes game controls (e.g., one or more buttons, a joystick, a touch screen affordance (affordance), a motion control, a pressure control, a visual control, an audio control, and/or other tactile interfaces) configured to control certain aspects of game play when activated or otherwise manipulated. In some implementations, the client device 102 includes one or more user applications configured to operate in conjunction with the media device 106. In some implementations, the application includes a media device application for pairing the client device 102 with the media device 106 and configuring the media device 106. The applications also include one or more applications that can drop the associated content to the media device 106. In some implementations, the application renders the data and/or content to the media device 106 by sending the data/content directly to the media device 106 (e.g., via a local network) and/or by directing the media device 106 to a remote location (e.g., a URL or other link to a location at a server system) from which the media device 106 can stream or otherwise receive the data/content. The media device 106 receives data/content from an application and/or a remote location and outputs visual and/or audio content corresponding to the received data/content to the output device 108. Accordingly, an online game session 116 is established between the game application running on the client device 102, the remote server system 114, and the media device 106.
In some implementations, as part of the process of linking related online gaming sessions 116, server system 114 evaluates the capabilities of each corresponding client device 102 and/or the quality of the communication connection between server system 114 and client device 102. In some implementations, server system 114 measures network delay between client device 102 and server system 114. If the measured delay is above the threshold and a lower delay connection is available, server system 114 may suggest to client device 102 to change to the lower delay connection, or invite the user of client device 102 to change client device 102 to the lower delay connection. For example, if the client device 102 is on the cellular wireless connection 118 and a local network is available, the server system 114 may suggest that the client device 102 should connect through the available local network. In some implementations, the delay threshold requirements vary from game to game. For example, some games (e.g., action games) experience the best on a lower latency connection, while others (e.g., online board games or card games) do not require much latency. In view of these different requirements associated with different types of games, server system 114 may make connection recommendations.
In some implementations, as part of the client device 102 initiating or joining the game session 116, the server system 114 communicates with the client device 102 to set up controllers (e.g., game controller configurations and/or interfaces) on the client device 102. In some implementations, this includes server system 114 evaluating whether client device 102 has the resources and communication capabilities required by the controller. The controller may be implemented differently at the client device 102 depending on the available resources, connection quality, and gaming requirements at the client device 102. In some implementations, a web-based controller interface may be used to play the game. For example, a controller interface for a game may be embedded in a web page, and the web page rendered in a web browser on the client device 102. Alternatively, in some implementations, the standardized controller is implemented in a predefined application that is not game-specific or directly associated with the game (e.g., a launch device application, such as the chromacast or Google CAST of Google, inc., or other media device application), or in the operating system of the client device 102. For example, a device operating system or a predefined application on the client device 102 may have a controller sub-module. The controller sub-modules include one or more standardized controller configurations, templates, and the like. Each standardized controller configuration configures the controller sub-module to implement a virtual controller using input devices and/or sensors on the client device 102 in some manner. The standardized controller configuration used may vary with the type of game and/or client device.
Further, in some embodiments, the game has a particular controller configuration that may be implemented on the controller sub-module. Such a configuration may be stored at the server system 114 and transmitted to the client device 102 as part of the process by which the client device 102 joins or begins the online gaming session 116. In some embodiments, the particular controller configuration may be a fully custom controller or a mix of standard and custom controllers. Additionally, in some implementations, the game requires a particular application associated with the game. For example, a game may require a controller application specifically associated with the game. In some implementations, the client device 102 may be directed to download a particular application or a predefined application as part of starting or joining the session 116. For example, if the client device 102 does not already have a predefined application (and controller submodule) or a particular application associated with a game, and such an application is required for playing the game, the server system 114 instructs the client device 102 to prompt its user for a download and requests permission from the user to proceed.
In some implementations, the server system 114 stores user information associated with a user account for each of one or more gaming applications (e.g., the gaming application 228 of fig. 2) hosted on the server system 114. Examples of user information include, but are not limited to, user account information (e.g., identification and password), membership type, preferences, and activity history. In some implementations, the server system 114 stores session data associated with an online gaming session that is engaged in on the client device 102. Examples of session data for each online game session include, but are not limited to, frame rate, rendering specifications, normal latency requirements, GPU allocation information, encoder allocation information, identification of the relevant session, and latest state information.
In some implementations, the server system 114 provides game APIs and cloud platforms to enable efficient, portable, low-latency hosting of third-party game content used in the online game session 116. In some implementations, the game API and cloud platform are enabled by a server system 114, the server system 114 further including one or more of: a front-end server 134, a media streaming server 124, a game server 122, and one or more third-party content servers 136. In some implementations, the game API platform is created and/or hosted by the game server 122 and enables the game session 116 in conjunction with the front end server 134 and the content server 136. The front end server 134 is configured to provide services to users of the gaming sessions 116 and manage the users' accounts. Optionally, the user subscribes to the gaming service via the front end server 134. The content server 136 provides game content related to the game session 116.
In some implementations, the front-end server 134 manages user accounts associated with the client devices 102 and 104, e.g., through subscriptions of the user accounts for membership to one or more online interactive games. After a client device 102 logs into its respective user account and joins its online gaming session 116, the game server 122 sets up the gaming session 116 and manages each particular gaming session 116 for the respective client device 102 by obtaining gaming content from the content server 136, transmitting the gaming content to a gaming application executing on the client device 102, identifying a user request or action, rendering game play output for the client device 102 in response to the user request or action, and storing game state data during the respective gaming session 116. Game server 122 includes one or more processing units (e.g., CPU 138, GPU140, and encoder 142), memory 146, and data buffer 144, which temporarily stores multimedia content generated by GPU140 and provides the multimedia content to encoder 142 for further encoding (e.g., normalization or compression). The data buffer 144 is optionally integrated in the memory 146 or separate from the memory 146.
In some implementations, the game server 122 dynamically allocates cloud game hardware resources (e.g., GPU140 and encoder 142) and monitors and utilizes network bandwidth available to individual end users to provide an optimal cloud game experience. In some embodiments, game server 122 provides multiple performance layers, including a layer that supports high performance, real-time game sessions with high definition video/media streams. In some implementations, game server 122 supports different subscription models and/or is configured to provide one or more concurrent real-time gameplay and/or commentary media streams that correspond with little or no delay to one or more actual game streams (e.g., video streams output to client devices of users participating in an online/cloud gaming session via a mobile application or browser-based program). In particular, game server 122 is configured to generate concurrent media streams and commentary videos for game play and provide commentary videos for concurrent game play to media streaming server 104. Such commentary videos are provided to one or more users via a media streaming website, such as YouTube, with little or no delay. The media streaming sites are optionally managed by a media streaming server 124.
Some embodiments enable hosting of common events in conjunction with gaming competitions. For example, in connection with a hosted game-based multiplayer gaming event or contest, a cloud gaming site hosted by game server 122 may optionally broadcast or stream to a particular reviewer client device 104 via media streaming server 123: (a) one or more concurrent auxiliary or supplemental media streams including associated commentary tracks/streams, (b) game streams from different competitor perspectives, the key streams showing particularly compelling game actions based on cloud server analysis and/or scoring of multiple game sessions associated with the game event, (c) one or more game viewpoint streams reflecting game play sessions 116 of one or more active players, and/or (d) instructional tracks from one or more active players and/or commentators, possibly including real-time picture-in-picture (PIP) videos the active players send to the cloud game server system 114 and their respective game play responses.
According to some embodiments, examples of third party content that may be effectively hosted by the content server 136 include, but are not limited to, sports games, racing games, Role Playing Games (RPGs), and First Person Shooter (FPS) games. Different instances of these games may have widely varying cloud hardware requirements and networks (e.g., to ensure an optimal user gaming experience-consistent with different subscription performance layers in some cases) based on different associated delay requirements and expectations, output video resolution and game server computing workload and video encoding/streaming resources, and network bandwidth.
In some embodiments, the front end server 134 provides an account management API and/or software module that monitors game play activity and subscriber related requests (e.g., requests by end users to invite other players to participate in a gaming session, upgrade their gaming tools, and/or game performance), and transmits or makes available associated information to the third party content server 136 through the API to enable content providers to track their subscriber and/or attendee settings (including but not limited to billing information, in-game credits, subscription levels, etc.). In some implementations, a content provider of hosted content may provide one or more different subscription models for hosted content via the same hosting platform. In some implementations, users (e.g., subscribers to a gaming service) are granted unlimited access and game play to all games offered by content providers on a hosted platform. In some implementations, users are granted unlimited access and game play to one or more particular game franchises (e.g., particular soccer or first-person shooting franchises) provided by content providers on a hosting platform. In some embodiments, the subscription is for limited participation by the user-participation may be limited according to game play time, level of hardware resources committed by the end user, or end user device type/location. In some implementations, the account API and module configure and monitor gameplay sessions and enable content providers to track individual subscribers' gaming activities according to their latest subscription information, even during active gameplay.
The server system 114 enables cloud functionality that allows a user to move around, for example, hang a first game flow of a first game session executing on a first client device 102, and restart the first game flow on a second game session of a second client device 102 to continue the first game session. Server system 114 also supports multiple players on a large scale and provides a richer, more durable cloud-based world. The server system 114 uses a cloud-based system to store session data related to different game sessions 116 of the same user or different game sessions 116 of different users.
The server system 114 renders game content on a plurality of client devices 102 and 104, including but not limited to mobile phones, tablet computers, desktop computers, and televisions. Optionally, the game content is dynamically adjusted to conform to the specifications of these client devices 102 and 104. In some implementations, the client devices 102 and 104 have limited or no memory capability because the game API platform provides instant access and requires no or little user device storage (e.g., a user can start playing in 5 seconds and save 250GB of console hard disk space).
In addition to the game content, the server system 114 streams additional content to the client devices 102 and 104, such as new tournaments, statistics, and preview access to earlier titles, which are optionally updated periodically (e.g., updated over time, updated daily, or hourly). In some implementations, the additional content includes search results of an internet search or a database search.
In some implementations, the server system 114 supports a real-time online community associated with the gaming application. Users (e.g., subscribers to the service) participate throughout the day in live events, tournaments, or activities on the corresponding gaming API platform. Examples of live events, tournaments, or activities include viewing live gaming sessions played by other users, posting achievements to a public domain (e.g., YouTube), and getting live reminders and instructional videos. For example, in response to a user action, the game server 122 provides two or more real- time streams 130 and 132. While maintaining the first game stream 130 on the first game session 116 of the first client device 102A of the game player, the server system 114 also broadcasts a second live comment stream 132 (e.g., a YouTube stream) to one or more other client devices 104 (e.g., of the subscriber). The second live stream of commentary 132 allows the user to share his or her gaming experience with the audience. Optionally, the second live stream is a rendition of a screen of the player's first client device 102A. The server system 114 may obtain an audio stream in which the player interprets the first game session 116 or a video stream of the player playing and interpreting the first game session 116. The audio stream is optionally played for the listener at the same time that the second live comment stream 132 is played for the listener. The video stream is optionally played in an embedded window in the second live comment stream 132.
Some embodiments provide mobile gaming, allowing a user to take his or her intended game to any location or client device. For example, the user may start an online gaming session 116 on the mobile device 102A on his or her commute and then seamlessly resume the gaming session 116 at his or her destination on the laptop computer 102B. Moreover, in some implementations, based on the different client device resources available to the user as the game session 116 switches between different devices 102, the server system 114 (and in particular, the game server 122) can dynamically deploy different sets of hardware resources (e.g., GPU140 and encoder 142) to optimize the user's gaming experience based on the different end-user current device resources (e.g., client hardware capabilities and network bandwidth).
In server system 114, front-end server 134 and game server 122 may have respective user account systems. In an example, the user account system for the front end server 134 is used to manage subscriptions to particular game content and services, and the user account system for the game server 122 (e.g., YouTube or Google account) is used to manage game experiences (e.g., render game content to meet particular game standards) and many other purposes. In some implementations, the two user account systems share customer and usage data (e.g., social, friends, presence, authentication, account information, billing information). Also, the content front end server 134 provides a service layer that sits on top of the technology layer enabled by the game server 122. In some implementations, the game content server manages additional user account systems for accessing their content. Optionally, an additional user account system for gaming content is integrated with the user account system of the front end server 134 for managing user subscriptions.
FIG. 2 is a block diagram illustrating an example client device 102 of a gaming environment 100, in accordance with some embodiments. Throughout this application, references to client device 102 correspond to one or more of client devices 102A, 102B, and 104 described with reference to fig. 1, unless otherwise noted. Examples of client devices 102 include, but are not limited to, mobile phones, tablet computers, laptop computers, desktop computers, and wearable personal devices. In some implementations, the client device 102 is a dedicated game controller that includes game control inputs 210 (e.g., one or more buttons, joysticks, touch screen elements, motion controls, pressure controls, visual controls, audio controls, and/or other tactile interface elements configured to control certain aspects of game play when activated). Client device 102 includes one or more processing units (CPUs) 202, one or more network interfaces 204, memory 206, and one or more communication buses 208 for interconnecting these components (sometimes referred to as a chipset). The client device 102 includes one or more input devices 210 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive input panel, gesture capture camera, or other input buttons or controls. Further, some client devices 200 may use a microphone and voice recognition or a camera and gesture recognition to supplement or replace interfaces (e.g., keyboards and buttons) that require contact. In some implementations, the client device 102 includes one or more cameras, scanners, or photo sensor units for capturing images of, for example, a graphical series of codes printed on an electronic device. In some implementations, the client device 102 includes one or more output devices 212, including one or more speakers and/or one or more visual displays, capable of presenting user interfaces and displaying content. Optionally, client device 102 includes a location detection device 214, such as a GPS (global positioning satellite) or other geographic location receiver, for determining the location of client device 102. Client device 102 may also include a proximity detection device 215, e.g., an IR sensor, for determining the proximity of media device 106 and/or other client devices 102. Client device 102 may also include one or more sensors 213 (e.g., accelerometers, gyroscopes, etc.) for sensing motion, orientation, and other parameters of client device 102, which may be used as inputs (e.g., for inputs 210 described above).
The memory 206 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally includes non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 206 optionally includes one or more storage devices remotely located from the one or more processing units 202. Memory 206, or alternatively, non-volatile memory within memory 206, including non-transitory computer-readable storage media. In some embodiments, memory 206 or the non-transitory computer readable storage medium of memory 206 stores the following programs, modules and data structures, or a subset or superset thereof:
an operating system 216, including processes for handling various basic system services and for performing hardware related tasks;
a network communication module 218 for connecting the client device 102 to other devices (e.g., server system 114, media devices 106, and other client devices 102) via one or more network interfaces 204 (wired or wireless) and one or more networks 110 and/or 112 such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.;
a user interface module 220 for enabling presentation of information (e.g., a graphical user interface for presenting applications, widgets, websites and web pages thereof, and/or games, audio and/or video content, text, etc.) at the client device 102 via one or more output devices 212 (e.g., displays, speakers, etc.);
an input processing module 222 for detecting one or more user inputs or interactions from one of the one or more input devices 210 and interpreting the detected inputs or interactions;
an input event reporting module 223 for reporting input identification and/or timestamp information to the server system 114 for delayed calculations;
a Web browser module 225 for navigating, requesting (e.g., via HTTP), and displaying websites and their Web pages, including a Web interface for joining session 116;
a media device application 226 for interacting with the media device 106, including logging into a user account associated with the media device 106, controlling the media device 106 if associated with the user account, and editing and commenting on settings and data associated with the media device 106;
a game application 228 for providing games on the client device 102, including invitations to facilitate corresponding game play and to facilitate other players;
a game controller module 230 for providing a game play input interface to the game application 228;
a data download module 231 for downloading data from the server system 114 and other content hosts and providers (e.g., game controller configuration 456 (FIG. 4), game applications 228 and other applications, updates to modules and applications, and data in memory 206); and
client device data 232, storing at least data associated with the gaming application 228 and other applications/modules, including:
a game application setting 238 for storing information associated with the user account of the game application 228, including one or more of account access information, user preferences in the game, game play history data, and information about other players;
a game controller configuration 240 for storing information associated with a configuration of the game controller module 230 for the game application 228 (e.g., the configuration received from the game controller configuration 456 of figure 4); and
location/proximity data 242, including information associated with the presence, proximity, or location of any of the client device 102 and the media device 106.
In some implementations, the game controller module 230 is part of (e.g., a sub-module of) the media device application 226 or another application in the memory 206. In some implementations, the game controller module 230 is part of the operating system 216. In some implementations, the game controller module 230 is a different module or application.
In some implementations of the client device 102, the media device application 226 (and corresponding media device settings 236) and the game application 228 (and corresponding game application settings 238) are optional. Depending on the particular game the client device 102 is invited to join, the media device application 226 and the game application 228 need not be played. If any of these applications are needed for game play (e.g., the game uses the game controller module 230 in the media device application 226) and the application is not in the memory 206, the client device 102 may be prompted to download the application.
Each of the above identified elements may be stored in one or more of the aforementioned storage devices and correspond to a set of instructions for performing the functions described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise rearranged in various embodiments. In some embodiments, memory 206 optionally stores a subset of the modules and data structures identified above. In addition, memory 206 may optionally store additional modules and data structures not described above.
FIG. 3 is a block diagram illustrating an example media device 106 of gaming environment 100, in accordance with some embodiments. Media device 106 typically includes one or more processing units (CPUs) 302, one or more network interfaces 304, memory 306, and one or more communication buses 308 for interconnecting these components, sometimes referred to as a chipset. Optionally, the media device 106 includes a proximity/location detection unit 310, such as an IR sensor, for determining the proximity of the client device 102.
Memory 306 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 306 optionally includes one or more storage devices located remotely from the one or more processing units 302. Non-volatile memory within memory 306, or alternatively memory 306, includes non-transitory computer-readable storage media. In some implementations, memory 306 or a non-transitory computer-readable storage medium of memory 306 stores the following programs, modules, and data structures, or a subset or superset thereof:
an operating system 316, including procedures for handling various basic system services and for performing hardware-related tasks;
a network communication module 318 for connecting the media device 106 to other computers or systems (e.g., server system 114 and client device 102) via one or more network interfaces 304 (wired or wireless) and one or more networks 110 and/or 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, cable television systems, satellite television systems, IPTV systems, etc.);
a content decoding module 320 for decoding content signals received from one or more content sources (e.g., server system 114 output from game session 116) and outputting content in the decoded signals to output device 108 coupled to media device 106;
a proximity/location determination module 322 for determining the proximity of the client device 102 based on proximity-related information detected by the proximity detection unit 310 or provided by the server system 114;
a media display module 324 for controlling the display of media; and
a display event reporting module 325 for reporting display event identification and/or timestamp information to the server system 114 for delay calculations;
a delay calculation module 326 for calculating a delay value based on delay data 334 reported by other components in the gaming environment;
location/proximity data 332, including information associated with the presence, proximity, or location of any of client device 102 and media device 106; and
delay data 334, which includes information (e.g., a timestamp) necessary for delay calculation module 326 to calculate the delay value.
Each of the elements identified above may be stored in one or more of the aforementioned memory devices and correspond to a set of instructions for performing a function described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments. In some embodiments, memory 306 optionally stores a subset of the modules and data structures identified above. Further, memory 306 may optionally store additional modules and data structures not described above.
FIG. 4 is a block diagram illustrating an example server in server system 114 of gaming environment 100, according to some embodiments. Server system 114 typically includes one or more processing units (e.g., CPU 138, GPU140, and encoder 142), one or more network interfaces 404, memory 146, and one or more communication buses 408 for interconnecting these components, sometimes referred to as a chipset. The server system 114 may optionally include one or more input devices 410 that facilitate user input, such as a keyboard, mouse, voice command input unit or microphone, touch screen display, touch sensitive input pad, gesture capture camera, or other input buttons or controls. Further, server system 114 may use a microphone and speech recognition or a camera and gesture recognition to supplement or replace the keyboard. In some embodiments, server system 114 optionally includes one or more cameras, scanners, or photo sensor units for capturing images of, for example, a graphic series of codes printed on an electronic device. Server system 114 may also include one or more output devices 412, including one or more speakers and/or one or more visual displays, capable of presenting user interfaces and displaying content.
The memory 146 includes high-speed random access memory, such as DRAM, SRAM, DDR RAM or other random access solid state memory devices; and optionally non-volatile memory, such as one or more magnetic disk storage devices, one or more optical disk storage devices, one or more flash memory devices, or one or more other non-volatile solid-state storage devices. Memory 146 optionally includes one or more storage devices remotely located from the one or more processing units. Memory 146, or alternatively, non-volatile memory within memory 146, including non-transitory computer-readable storage media. In some embodiments, memory 146 or a non-transitory computer readable storage medium of memory 146 stores the following programs, modules and data structures, or a subset or superset thereof:
an operating system 416, including procedures for handling various basic system services and for performing hardware-related tasks;
a network communication module 418 for connecting the server system 114 to other devices (e.g., various servers in the server system 114, client devices 102, and media devices 106) via one or more network interfaces 404 (wired or wired) and one or more networks 110 and/or 112 (such as the internet, other wide area networks, local area networks, metropolitan area networks, etc.);
a user interface module 420 for enabling presentation of information at the client device 102 (e.g., a graphical user interface for presenting applications, widgets, websites and their webpages and/or games, audio and/or video content, text, etc.);
media device module 422 (optional), executed to provide server-side functionality for device provisioning, device control, and user account management associated with media device 106;
a proximity/location determination module 424 for determining the proximity of the client device 102 to the media device 106 based on location information of any one of the client device 102 and the media device 106;
a game server module 426 for providing server-side functionality associated with a game (e.g., game application 228), including but not limited to setting up a game session, storing session state data and other game-related data, processing game play input from the client device 102, and rendering game play output in response to game play input;
a media streaming server module 438 to host a media streaming site, receive a concurrent auxiliary or supplemental media stream associated with the online game session, and provide the concurrent media stream to the client device 104 for concurrent display with the online game session being executed on the game application 228 of the same client device 104 or a different client device 102;
a front-end server module 440 for managing user accounts associated with the client device 102, e.g., enabling a subscription to membership of one or more online interactive games through the user accounts, enabling services to subscribers for subscriber requests to be forwarded to the game server module 426, and monitoring game play activities and subscriber related requests;
a media content server module 442 for providing access to gaming content hosted by one or more third-party content providers;
a device/network evaluation module 444 for evaluating the device and network capabilities of the client device 102, including but not limited to evaluating the network bandwidth of the connection with the client device 102 and evaluating whether the client device 102 has the modules or applications required for game play;
a data transfer module 446 for providing data (e.g., game controller configuration 456, software updates, etc.) to the client device 102; and
server system data 448, including:
media device settings 452 (optional) for storing information associated with a user account of media device application 422, including one or more of account access information and device setting information (e.g., service layer, device model, storage capacity, processing capabilities, communication capabilities, etc.);
position/proximity data 454, including information associated with the presence, proximity, or location of any of the client device 102 and the media device 106;
a game controller configuration 456 for storing controller configurations for various games; and
a game session event log 460 for storing event data associated with game sessions (e.g., game state data, input events, display events, other game related data), including, for example, data 460-1 for a first game session and data 460-2 for a second game session, wherein the session data 460 for each game session includes, but is not limited to, frame rate, rendering specification, normal latency requirements, GPU allocation information, encoder allocation information, identification of the related session, latest state information associated with the respective game session, a log of input events, and a log of display events;
an o response time setting 462 for storing expected delay values for various user command types;
an omicron resource repository 464 to store virtual machine resource profiles and container images; and
an omicron resources setting 466 for storing a configuration of available resources based on a user tolerance level; and
a data buffer 144 for temporarily storing the gaming multimedia content generated by GPU140 in association with one or more output media streams.
In some embodiments, the game server module 426 includes the following programs, modules, or a subset or superset thereof:
an intent determination module 428 for comparing user input transmission times (e.g., between the client device 102 and the server system 114) with display transmission times (e.g., between the media device 106 and the server system 114) and determining specific input behind the user's intent by matching input events to corresponding trigger frames;
delay adjustment module 430 to determine the number of intermediate frames that GPU140 inserts between (i) the current frame being processed when the user input is received and (ii) the response frame showing the result of the received input:
a resource allocation module 432 (optionally referred to herein as a "session coordinator") for receiving session requests from endpoints (e.g., controller 102) and determining which resources are assigned to the session; and
In some embodiments, memory 146 also includes a data buffer 144 configured to couple encoder 142 to GPU 140. In particular, data buffer 144 temporarily stores game play multimedia content generated by GPU140 in association with one or more output media streams, such that encoder 142 may retrieve the game play multimedia content from data buffer 144 and encode the retrieved content into one or more media streams, e.g., for normalization, speed, or compression.
Each of the above identified elements may be stored in one or more of the aforementioned memory devices and correspond to a set of instructions for performing the functions described above. The above identified modules or programs (i.e., sets of instructions) need not be implemented as separate software programs, procedures, modules, or data structures, and thus various subsets of these modules may be combined or otherwise re-arranged in various embodiments. In some embodiments, memory 146 optionally stores a subset of the modules and data structures identified above. Further, memory 146 may optionally store additional modules and data structures not described above.
Detecting and compensating for display lag
The various embodiments of the cloud-based gaming platform described above provide many benefits (e.g., portability, extensibility, efficiency, ease of access and control, etc.). However, the cloud-based nature of these gaming platforms presents various challenges, such as variability in network and processing resources, which, if not properly considered, may negatively impact the game play experience. Such challenges may potentially create an uneven gaming experience due to variable delays introduced in the network 110/112 between the player device 102 and the server system 114. The following disclosure describes various embodiments for detecting and compensating for different types of delays that may exist in a real-time interactive cloud-based gaming environment. By compensating for these delays, the embodiments described herein provide a smooth, uniform gaming experience for each player, regardless of the available network and processing resources.
FIG. 5A depicts an example gaming environment 500 in which several sources of delay will be described. Gaming environment 500 is an example implementation of gaming environment 100 (FIG. 1) with corresponding components similarly labeled. The gaming environment 500 includes a client device 102 (also referred to herein as a "game controller" or "controller") that a player (or "user") uses to control various aspects of a game (or "gameplay"), for example, by activating or manipulating an input 210 (fig. 2). Gaming environment 500 also includes media device 106 (e.g., a set-top box) and output device 108 (e.g., a television or other output display). Controller 102 and media device 106 are communicatively coupled to local network 110 (depicted as a wireless router in this example) via local communication links 502 and 504, respectively (e.g., over WiFi). Local network 110 is communicatively coupled to server system 114 via a communication network 112 (e.g., the internet) through a communication link 506. Server system 114 includes game server 122 (fig. 1).
Although the gaming environment 500 depicted in the figures includes only a single local network 110 with a single controller 102, some embodiments of the gaming environment 500 may include multiple local networks 110, with some local networks 110 including more than one controller 102 (e.g., for multiplayer games sharing the same gaming session, as described above with reference to fig. 1-4).
Several elements present in the gaming environment 500 may introduce a delay that is perceptible (e.g., affects at least one frame) and that varies over time. For example, local network 110 (e.g., WiFi) may introduce various amounts of delay in communication links 502 and 504. The average delay can be very low (e.g., < 1ms) if there is no contention on the channel. However, in a busy environment such as an apartment building with overlapping WiFi networks or a game play environment with multiple wireless client devices, the average amount of delay is more common in the range of 10-50ms, with outliers exceeding 200+ ms.
Further, the communication network 112 (e.g., the internet) may introduce a delay in the communication link 506. The variability of this delay may not be as high for most users as WiFi; however, at peak game times (evening), media sharing (e.g., on a cable modem) and network saturation can result in data packet delays or losses. The average delay will depend on the distance from the local network 110 to the edge server of the server system 114, with an example amount of delay in the range of 20-30 ms.
Due to network demand and link capacity asymmetry, the network-induced delay described above may vary based on the direction of traffic flow (e.g., from controller 102 to server 122 versus from server 122 to media device 106). Thus, the delay on the link 506 from the router to the server may not match the delay from the server back to the router, and so on.
In addition, the game server 122 may introduce delay. There is a delay from the arrival of the input events at GPU140 to the frame output from encoder 142. However, in some embodiments, this delay is fully traceable, and thus, the delay is known to the game server 122.
Finally, there is a delay between the arrival of the frame at the output device 108 (e.g., television) and the display of the frame. This may depend on the nature of the processing in the output device, including the display mode (e.g., gaming versus non-gaming mode). For example, the display lag of a television may be as low as 15-30ms, or the display lag may be as high as 50-60 ms. Bad television may have a display lag of more than 120 ms.
The different types of delays described above may have a significant impact on the game play experience. Fig. 5B and 5C illustrate two example game play experiences that include the same user input, but have completely different outputs due to different levels of delay. However, before describing these examples in detail, it is first necessary to describe example gameplay processes.
Delay compensation
Fig. 6 is a flow diagram of a game play process 600 according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and memory (e.g., memory 146) storing one or more programs for execution by the one or more processors; a media device (e.g., media device 106) having one or more processors (e.g., CPU 302) and memory (e.g., memory 306) storing one or more programs for execution by the one or more processors; and/or at a user device (e.g., controller 102) having one or more processors (e.g., CPU 202) and memory (e.g., memory 206) storing one or more programs for execution by the one or more processors. In some implementations, the server, media device, and user device include one or more programs and memory storing the one or more respective programs for execution by the one or more respective processors, and the one or more programs include instructions for performing the process 600. In some implementations, respective non-transitory computer-readable storage media store one or more respective programs, the one or more respective programs including instructions, which when executed by an electronic server, a media device, and a user device, cause the electronic server, the media device, and the user device with one or more respective processors to perform the process 600.
A user of controller 102 (also referred to herein as a "player") uses controller 102 to affect in-game events depicted by video frames (e.g., 510) displayed on output device 108 (see fig. 5A). When a player decides to affect game play (e.g., by moving a virtual player, shooting hockey, etc.), the player activates 602 or otherwise manipulates input 210 (e.g., presses a button) on controller 102. The activation or manipulation of the input 210 on the controller 102 is sometimes referred to as an "input event" or "command". The input events are communicated 604 to the server system 114 (e.g., to an event log 460 associated with the game session) via communication links 502 and 506 (over the networks 110 and 112).
Upon receiving the input event (606), server system 114 (e.g., intent determination module 428 of game server 122) determines (608) which frame to display on output device 108 when the user activates the input associated with the received input event. The frame displayed to the user at the time of the user activation input is referred to herein as a "trigger frame" because it triggers the user to respond by activating the input. For example, in a hockey game, if a frame shows an unattended ball (open shot), this will trigger the player to respond by activating an input control mapped to a "shoot hockey" function. The trigger frame is a frame 510 (e.g., frame 510-1 in fig. 5B) showing an unattended ball, and the input event is the user activating a "shoot hockey ball" control on the controller 102 in response to having seen the trigger frame 510.
After determining the trigger frame, the game server 122 (e.g., the intent determination module 428) determines (610) a state of the game (referred to herein as a "trigger state") at the time the trigger frame is displayed to the user. In some implementations, the intent determination module 428 determines the trigger state by consulting a log of game states maintained in the event log 460 (FIG. 4). In some implementations, the event log 460 includes a log of game states indexed by frame fingerprints, frame IDs, and/or game time data (e.g., timestamp or clock data). In some implementations, the intent determination module 428 determines the trigger state by determining a game time index associated with the trigger frame and consulting the event log 460 to determine the game state that existed at the game time index associated with the trigger frame. Depending on how much time elapses between the display of the trigger frame on output device 108 and the receipt of the input event on game server 122, the trigger state may be past relative to the current state being processed on game server 122.
Returning to the previous example, if the trigger frame (showing an unattended ball to a goal) is associated with the play time index T1, the play state at time index T1 includes the virtual pitcher, the virtual defensive player, the virtual puck, the virtual goal, and the position of each of these objects. From the game state at the time index T1, or more specifically, from the position of each of the aforementioned virtual objects at the time index T1, there is an unobstructed (clear) path between the puck and the goal. In other words, the algorithm or algorithms controlling the rules of game play will allow the virtual puck to travel from the virtual player shooting the puck to the virtual goal at some point in time (time index T1) when the trigger frame is displayed without being stopped by any other virtual player between the pitcher and the goal. However, in some cases, when an input event (e.g., "shoot hockey") arrives at the server, the server is currently processing game play for a subsequent state T2, which state T2 may include a high level state of game play where the virtual hockey no longer has an unobstructed path to the goal. In these cases, if the server correctly determines the trigger state as T1, the trigger state is a past state relative to the state T2 that the server is currently processing.
Having determined the trigger state, game server 122 (e.g., GPU 140) processes (612) a subsequent game state (sometimes referred to herein as "game play output") based on (i) the input event (e.g., "shoot hockey") and (ii) the trigger state (e.g., including an unobstructed path from hockey to goal). In some embodiments, processing the game play output includes inputting the input event into an algorithm or game engine that determines the game play output based on the input event and the corresponding game state. For example, the game engine may determine the next game state based on the state/position of each player and puck relative to the goal during the current game state and any input commands (e.g., "move", "shoot", or "block") received relative to the virtual player during the current game state. In some implementations, processing subsequent game states (game play outputs) as a function of the input event and the trigger state includes processing the input event as if the server were available to the server when processing a game state that is close to the trigger state (e.g., the next state after the trigger state, or a state immediately after the trigger state).
In processing the gameplay output, game server 122 renders (614) a frame or series of frames depicting the processed gameplay output. The frame (or first of a series of frames) depicting the game play output is referred to herein as a "response frame". For example, if the input event and trigger state result in game play output that includes movement of a particular virtual player, the response frame is a frame depicting the particular virtual player in a modified spatial position relative to other objects in the frame consistent with the direction specified by the user input. Alternatively, if the input event and trigger state result in a game play output in which a particular virtual player shoots hockey, the response frame is the first frame in a series of frames (e.g., frames 510-3 of FIG. 5B) that depict the particular virtual player shooting hockey. In some embodiments, presenting the response frame includes introducing a new virtual object in the response frame according to the processed game play output, modifying an existing virtual object or modifying any other aspect of game play and including the new virtual object, the modified existing virtual object or any other aspect of modified game play.
Returning to fig. 5B and 5C, two sequences of video frames (510 and 520) are depicted showing the same input event (shooting ice hockey) but different response frames (successful shot 510-2 versus blocked shot 520-3) due to different amounts of delay in the game environment 500. These sequences are examples of game play processes 600 applied to gaming environment 500.
FIG. 5B depicts a first scenario 550, including a series of video frames 510 showing three virtual players (A, B and C) playing a hockey game and a table 512 of game states T1-T3 (e.g., stored in log 460 of FIG. 4). Player A is controlled by the user of controller 102, and players B and C are controlled by other users of other controllers, through computer control algorithms, or a combination thereof. At state T1, player a has an unobstructed shot at the goal (denoted "clear" in table 512); thus, the game server transmits a frame 510-1 representing the status to the user's display 108. When the user controlling player A views frame 510-1 on display 108, the user sees player A has an unobstructed shot of the goal, and therefore decides to command player A to shoot the hockey puck. In other words, frame 510-1 triggers the user to enter a "shoot" command. The "shoot" command is sent as an input event to game server 122. When the game server 122 receives the "shoot" input (denoted "In table 512), the game server is currently processing state T2, at which time player A no longer has an unobstructed shoot (denoted" no shot "In table 512). However, game server 122 correctly determines that the trigger frame (denoted as "T" in table 512) is frame 510-1. Depending on the game state when frame 510-1 is displayed (trigger state T1), player A still has an unobstructed shot at the goal; thus, the game server 122 processes the subsequent state T3 according to the "shoot" command and the T1 state (unobstructed shooting). According to the game engine, if a shot is taken while the player has an unobstructed shot, the subsequent state includes a successful shot sequence, and the sequence is processed in state T3 (represented in table 512 as "score (score)"). In this way, the game server renders a response frame 510-2 depicting player A shooting a hockey puck by player C, and transmits the response frame to the user. From the user's perspective, the response frame describes the action that the user expects when entering an event. In this way, by correctly determining the trigger state corresponding to the user input, the game server processes game play according to the user's intention.
FIG. 5C depicts a second scenario 552 that includes a sequence of video frames 520 showing the same game and player as scenario 550, and a table 522 of game states T1-T3 (e.g., stored in log 460 of FIG. 4). Similar to the previous scenario, at state T1, player A has an unobstructed shot at the goal (indicated as "unobstructed" in table 522); thus, the game server transmits a frame 520-1 representing the status to the user's display 108. When the user views frame 520-1 on screen 108, the user sees player A has an unobstructed shot at the goal, and therefore decides to command player A to shoot the hockey puck. The "shoot" command is sent as an input event to game server 122. As with the previous scenario, when game server 122 receives a "shot" input (denoted as "In table 522), the game server is currently processing state T2, at which time player A no longer has an unobstructed shot (referred to as a" no shot "In table 522). However, unlike the previous scenario, the game server 122 cannot correctly determine the trigger frame (denoted as "T" in table 522). Instead, the game server assumes that the trigger frame is the last frame rendered according to current state T2, which in this example is frame 520-2. Alternatively, the game server may not even attempt to determine a trigger frame, but rather process the game play output based on the current state T2 (no shots). In any case, the game server processes the subsequent state T3 according to the "shoot" command and the T2 state (no shoot). According to the game engine, if the player fires without an unobstructed fire, the subsequent state includes a sequence of blocked fires and the sequence is processed at state T3 (referred to as "block" in table 522). In this way, the game server renders a response frame 520-3 depicting player A attempting to shoot a hockey puck but being blocked by player C, and transmits the response frame to the user. From the user's perspective, the response frame describes an action that the user does not expect when entering an event. Specifically, the user desires to have player A shoot while player C is out of the way; in contrast, player a does not shoot as fast as the user desires and so the shot is blocked. As such, the game server may process game play events that are contrary to the user's intent due to a failure to correctly determine the trigger state corresponding to the user input, which may result in the user (and many other users) losing interest in playing the game and/or using the game environment 500.
In each of the above two scenarios, the input events occur simultaneously; however, depending on the time it takes for the input event to reach the game server, the response frame describes two distinct outcomes. This is because, if the server receives the user's input while processing a game state (e.g., T2) at a later time than the game state (e.g., T1) that triggered the user to make the input, the server may erroneously process the game output based on incorrect information about the timing of the user input. Because it is critical for the gaming platform to avoid such inconsistencies, it is important for the gaming platform to detect and compensate for the various delays introduced in the gaming environment that cause these delays. By detecting various delays, the gaming platform may more accurately correlate input events with actual trigger states (as in scene 550). By making these correlations, the gaming platform reduces the effects of uncontrollable and/or undetectable delays by processing each input event in a manner consistent with the user's intent. As such, various embodiments described herein are improvements to gaming platforms that do not attempt to determine or incorrectly determine an accurate trigger state corresponding to a user input.
In some scenarios, a particular game play output may contradict what has been displayed to one or more users, depending on how much time elapses between the trigger state and the current state being processed by the game server. For example, in FIG. 5C, frame 520-3 depicts a blocked shot. However, if the game server determines during state T3 that the trigger state is T1, in some embodiments, the game server will attempt to reconcile the user's intent retrospectively with the current state of the game. In other words, the user's intent is to shoot hockey while player a is shooting unimpeded, while the current state of the game (T3) shows player C between player a and the goal. To coordinate the user's intent (puck moves towards goal) with the current state (player C is blocking the puck), the game server may render a series of response frames with the puck moving towards the goal, despite player C being blocking (e.g., frame 510-3 of fig. 5B). The response frame may appear to be inconsistent with the current game state; however, they are consistent with the user's intent during the past (trigger) game state. The game developer may plan ahead for these contingencies, for example, by designing animations that coordinate inconsistent game states. Example coordination animations include immediately displacing a virtual character or object to a desired position (even though this may appear to violate physics in the game), or advancing the game state in a desired manner while not showing the correct animation (e.g., updating a score without showing a hockey ball reaching the goal, or classifying a monster as being injured even though the monster appears to have yielded before being fired). In some implementations, coordinating the current game state with the user-desired game state (desired game state) upon user interaction includes modifying a frame depicting the current game state to create a subsequent frame depicting the desired game state.
Delay detection
The following discussion describes various methods for detecting various delays in a gaming environment, in accordance with some embodiments. Delay detection is a necessary step (step 608 of fig. 6) to enable the game server to accurately determine the trigger frame for a particular user input, thereby enabling the game server to determine the trigger state and, by extension, the user's intent following the input as discussed above. With knowledge of the correct trigger frame (and by extension, trigger state), game server 122 may process output that more accurately reflects the user's intent by considering the game play state near when the user enters an input (e.g., pushes a button) rather than the game state when the input reaches the server (which may correspond to a later game play state).
Following is a brief discussion of the delay from the perspective of the game server (e.g., server 122), including certain delay values that the server may have access to in some embodiments, and certain delay values that the server may not have access to in some embodiments. For delay values that are not accessible to the server, several embodiments for detecting or approximating these values will be described with reference to fig. 7-12.
In some embodiments, the game server 122 accesses information necessary to calculate the processing delay, which is the amount of time it takes to process the input event and transmit the generated response frame. In some embodiments, the processing delay varies on a per event basis. In some implementations, the processing delay varies according to game state complexity (e.g., the number of game play events being processed simultaneously). In some implementations, to calculate the processing delay for a particular input event, server system 114 records a first timestamp corresponding to the time the input event arrived at server system 114 (e.g., arrived at an edge server), and a second timestamp corresponding to the time the encoded response frame left server system 114. From these two timestamps, server system 114 calculates the processing delay associated with the incoming event (e.g., by subtracting the first timestamp from the second timestamp).
In some implementations, the game server 122 also has access to information necessary to calculate the average Round Trip Time (RTT) between the server system 114 and the controller 102. In some embodiments, server system 114 calculates the RTT value by sending one or more test datagrams (e.g., pinggs) to controller 102, receiving the corresponding response, and calculating one or more average response times. In some implementations, game server 122 also has access to information necessary to calculate the RTT between server 114 and media device 106. In some implementations, the server system 114 calculates this RTT value by sending one or more test packets (e.g., pings) to the media device 106, receiving the corresponding responses, and calculating one or more average response times. However, due to asymmetric network delays as discussed above, average RTT information alone may not be sufficient to determine an accurate one-way transmission time from controller 102 to server system 114 or from media device 106 to server system 114. If server system 114 is unable to directly calculate the aforementioned one-way transmission time, server system 114 may not be able to accurately determine the trigger frame.
By accessing the RTT values described above, server system 114 (e.g., intent determination module 428) may approximate the trigger frame by assuming an average RTT value for each input event, dividing the RTT value by half and adding the assumed output device display lag amount (e.g., television display lag). Even though the delay between two network nodes is typically asymmetric (forward and reverse delays are not equal), half of the RTT value is the average of the forward and reverse delays; in this way, half the RTT value may be used as an approximation of the one-way delay (also referred to herein as "one-way transmission time" and "one-way delay").
In some implementations, the intent determination module 428 uses the one-way delay values of (i) between the controller and the server, (ii) between the media device and the server, or (iii) a combination thereof, to more accurately determine the trigger frame. The following discussion describes several embodiments with reference to fig. 7-12 for measuring or more accurately approximating one-way transmission time in order to more accurately determine a trigger frame for a particular input event.
Fig. 7-12 are flow diagrams of a trigger frame determination process 700 and 1200 according to some embodiments. The game may be executed on an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and memory (e.g., memory 146) storing one or more programs for execution by the one or more processors; a media device (e.g., media device 106, also referred to as a "display" when combined with output display device 108 or otherwise coupled to output display device 108) having one or more processors (e.g., CPU 302) and memory (e.g., memory 306) storing one or more programs for execution by the one or more processors; and/or at a user device (e.g., controller 102) having one or more processors (e.g., CPU 202) and memory (e.g., memory 206) storing one or more programs for execution by the one or more processors. In some implementations, the server, media device, and user device include one or more programs and memory storing the one or more respective programs for execution by the one or more respective processors, and the one or more programs include instructions for performing the respective processes. In some implementations, respective non-transitory computer readable storage media store one or more respective programs, the one or more respective programs comprising instructions, which when executed by an electronic server, a media device, and a user device, cause the electronic server, the media device, and the user device having one or more processors to perform one or more of the methods 700-1200.
Fig. 7 depicts a trigger frame determination process 700 according to some embodiments. In process 700, server 114, media device 106, and controller 102 are separate components that use asynchronous clocks. In this way, analysis of timestamps sent from the controller to the server and/or from the media device to the server does not provide an accurate assessment of the delay between the various components. In some implementations, one or more clocks are synchronized. However, the server may use process 700 to determine a trigger frame regardless of whether any of the aforementioned clocks are synchronized.
At the same time, the server that continuously renders and transmits frames to be displayed to the user continuously receives (712) display events corresponding to rendered frames transmitted to the user (e.g., during step 702). Upon receiving 712 an input event (e.g., from step 710), the intent determination module 428 matches 714 the input event with the most recently received display event. Given that the one-way delays between the controller and the server, and between the media device and the server, are similar, the input events and their corresponding display events should arrive at approximately the same time. As such, by matching the input event with the display event received at a time closest in time to when the input event was received, the intent determination module 428 approximates the user's input event intent by classifying a frame associated with the matched display event as a trigger frame.
Due to variability of upstream links (e.g., links 502 and 504 of fig. 5A), inaccuracies may be caused by differences in upstream connections associated with the controller 102 and the media device 106. For example, the media device 106 may use a wired connection, while the controller 102 may use a wireless connection with increased latency. In some implementations, the intent determination module 428 accounts for these variability by averaging the difference in delay between the two links (e.g., by comparing the average server media device RTT to the average server controller RTT).
Fig. 8 depicts a trigger frame determination process 800 according to some embodiments. In process 800, server 114 and controller 102 have synchronized clocks. In this process, as well as other processes involving clock synchronization (e.g., process 900-1200 discussed below), some embodiments accomplish synchronization via a Network Time Protocol (NTP) server. In some embodiments, one or more of the aforementioned clocks are periodically resynchronized due to clock drift.
The process 800 begins with the controller 102 detecting 802 a user input and the reporting module 223 sending 804 a corresponding input event to the server 114, as described above in the process 700. However, in process 800, the input event additionally includes a timestamp (e.g., TS 1). Server 114 receives (806) the input event at time TS2 and calculates (808) the delay for the one-way input to the display by comparing TS1 to TS2 (e.g., by taking the absolute value of the difference between each timestamp). Server 114 (e.g., intent determination module 428) then approximates (810) the one-way display-to-server delay by using the one-way input-to-server delay as a proxy (e.g., setting the one-way display-to-server delay equal to the one-way input-to-display delay).
Upon determining the value for the one-way server-to-display delay (e.g., Dms), intent determination module 428 determines (814) the trigger frame as the frame that D ms before TS1 has been transmitted to the media device.
Fig. 9 depicts a trigger frame determination process 900 according to some embodiments. In process 900, the media device 106 and the controller 102 have synchronized clocks. In some implementations, the server 114 also has a clock that is synchronized with the clock of the media device, the clock of the controller, or both.
The process 900 begins with the controller 102 detecting 902 a user input and the reporting module 223 sending 904 a corresponding input event with a timestamp TS1, as described above for the process 800. Server 114 receives (906) the input event and renders (908) the response frame, assuming the current game state triggered the input event, or assuming the past game state triggered the input event (e.g., offset by a predetermined amount). The server 114 includes the timestamp TS1 and the response frame (e.g., in the metadata of the frame) and transmits it to the media device 106. The media device 106 receives (910) the response frame and causes the response frame to be displayed to the user at a second timestamp (e.g., TS 2). The media device 106 (e.g., the delay calculation module 326) measures (912) the difference between the two timestamps to determine the amount of delay between the time the user entered an input on the controller 102 to the time the user saw a corresponding response on the display 108 (referred to herein as the "thumb-to-display delay"). In some implementations, the media device 106 stores the timestamp data as the delay data 334, and the delay calculation module 326 accesses the stored timestamp data in order to calculate the various delays described above. In some implementations, the delay calculation module 326 combines the thumb-to-display delay with other known delays (e.g., from one or more of the processes 700 and 1200) to better approximate the trigger frame.
Fig. 10 depicts a trigger frame determination process 1000 according to some embodiments. In process 1000, media device 106 and controller 102 have synchronized clocks. In some implementations, the server 114 also has a clock that is synchronized with the clock of the media device, the clock of the controller, or both.
The process 1000 begins with the server 114 rendering (1002) a first frame at a timestamp TS1, and sending a timestamp TS1 included with the frame (e.g., included in metadata of the frame) to the media device 106. The media device 106 receives (1004) the frame and causes the frame to be displayed at the timestamp TS 2. The media device (e.g., delay calculation module 326) compares (1006) the two timestamps TS1 and TS2 to directly determine the unidirectional server-to-media device delay, and reporting module 325 reports (1008) the determined unidirectional server-to-media device delay to server 114. In some embodiments, the report is included in a display event corresponding to the first frame. The server 114 receives the server-to-media device delay and the intent determination module 428 compares it to other known delays (e.g., from one or more processes 700 and 1200, such as data regarding the most recent media device-to-server delay) (1012) to better approximate the trigger frame. In some implementations, because the display event may be assumed to arrive at a time that is close to the corresponding input event, the process 1000 further includes the controller 102 detecting (1014) the user input and the reporting module 223 of the controller sending (1016) the input event to the server 114 that includes the input ID of the detected user input. The server's intent determination module 428 optionally matches the input event with the most recent display event, as described in process 700 above, to better approximate the trigger frame.
Fig. 11 depicts a trigger frame determination process 1100 according to some embodiments. In process 1100, media device 106 and controller 102 have synchronized clocks. In some implementations, the server 114 also has a clock that is synchronized with the clock of the media device, the clock of the controller, or both.
The process 1100 begins with the server 114 rendering 1102 a first frame at the timestamp TS1, as with the process 1000. However, in process 1100, server 114 may not be able to include a timestamp in the transmission of the frame. Thus, server 114 sends the first frame without timestamp TS 1. The media device 106 receives 1104 the first frame and causes the first frame to be displayed at the timestamp TS 2. The media device 106 (e.g., the reporting module 325) then reports (1106) the timestamp TS2 to the server 114 alone or in conjunction with the display event transmission as described above. The server 114 receives (1108) the timestamp TS2 and the server's intent determination module 428 compares (1110) the timestamp TS2 with the timestamp TS1 in order to directly measure the server-to-media device delay. In some implementations, the intent determination module 428 compares the server-to-media device delay to other known delays (e.g., from one or more processes 700 and 1200, such as data regarding recent media device-to-server delays) (1112) to better approximate the trigger frame. In some implementations, because the display event may be assumed to arrive at a time proximate to the corresponding input event, the process 1100 further includes the controller 102 detecting (1114) the user input and the reporting module 223 of the controller sending (1116) the input event including the input ID of the detected user input to the server 114. The server's intent determination module 428 optionally matches the input event with the most recent display event, as described in process 700 above, in order to better approximate the trigger frame.
Fig. 12 depicts a trigger frame determination process 1200 according to some embodiments. In process 1200, the media device 106 and the controller 102 have synchronized clocks. In some implementations, the server 114 also has a clock that is synchronized with the clock of the media device, the clock of the controller, or both.
In some implementations, the audio signal includes an encoded frame ID and/or an encoded time stamp TS1, and the server 114 periodically transmits the audio signal via, for example, a high frequency audio modem (e.g., whisper) and the controller 102 listens for the audio signal as described above. Alternatively, the media device 106 receives the frame ID and/or timestamp TS1 (e.g., via any of the processes 1000 or 1100) and locally synthesizes the audio tones for propagation from the output device 108. In this embodiment, the controller directly receives the identification information (e.g., frame ID and/or timestamp TS1) of the trigger frame itself and proceeds to report the identified trigger frame directly to server 114. In some embodiments, a correction is implemented in order to account for the delay of the voiceband modem.
In some implementations, instead of audio tones, the server 114 renders 1202 the frame with an image pattern that identifies the frame and/or the timestamp TS1, and a camera or photodetector on the controller 102 detects 1208 the image pattern on the display device 108. The remaining steps are similar to those described above. In some embodiments, the image pattern includes a change in intensity (e.g., compared to a measured intensity baseline).
Fig. 13 is a flow diagram of a delay detection and compensation process 1300 according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and memory (e.g., memory 146) that stores one or more programs for execution by the one or more processors. In some implementations, the server includes one or more programs and memory storing the one or more programs for execution by the one or more processors, and the one or more programs include instructions for performing process 1300. In some implementations, a non-transitory computer readable storage medium stores one or more respective programs, the one or more respective programs including instructions, which when executed by a server having one or more processors, cause the server to perform the process 1300.
The process 1300 begins when the server 114 receives an input event from a game controller 102 located at a remote site (e.g., the local network 110 of fig. 1 and 5A) in response to display of a trigger frame at the remote site, as described with reference to step 606 of fig. 6 above. In some implementations, the server receives the input event during a game session operating in a current game state (e.g., state T2 of fig. 5B). The input events include user commands generated by user interaction with the game controller (e.g., activation or manipulation of controls) during the game session.
It is important to note that although the input events are generated by the controller in response to previously transmitted frames ("trigger frames") that have been displayed to the user of the remote site, the input events may not necessarily identify which of the previously transmitted frames is a trigger frame. Thus, the process continues with the server determining (1304) the trigger frame, as described above with reference to step 608 of fig. 6. More specifically, the server (e.g., intent determination module 428) determines which of the plurality of previously transmitted frames was a frame displayed at the remote site during the user interaction (e.g., 510-1 of fig. 5B), wherein the server transmits the plurality of previously transmitted frames to the media device 106 during the game session prior to the server receiving the input event. In various embodiments, the server determines the trigger frame by performing one or more of the processes described above with reference to fig. 7-12.
The process continues with the server using the determined trigger frame to determine 1306 the game state ("trigger state") associated with the trigger frame, as described above with reference to step 610 of fig. 6. In some embodiments, depending on the time it takes for an input event to reach the server, the current game state may have exceeded the trigger state; thus, the trigger state (e.g., state T1 of FIG. 5B) would be the game state prior to the current game state (e.g., state T2 of FIG. 5B).
After determining the trigger state, the game server processes (1308) game play output according to the user commands included in or described by (i) the trigger state and (ii) the input event, as described above with reference to step 612 of fig. 6. In particular, for each input event received by the server, the server matches a respective user command described in the input event with a respective trigger state to facilitate more accurate processing of each command in the context of the game state that triggered the user to initiate the command, thereby adhering to, satisfying, and/or fulfilling the user's intent behind each command. In some embodiments, to process the game play output, the game server must coordinate the current game state with the trigger state, particularly if the two states are not consistent, as described above.
The server renders (1310) the response frame describing the game play output, as described above with reference to step 614 of fig. 6, and transmits (1312) the result frame for display to the user at the remote site, as described above with reference to step 616 of fig. 6.
Delay adjustment for game play tuning
Response time is an important aspect of online gaming, which directly impacts the user experience. One way to describe the response time is the amount of time that elapses between the time the user performs an action (e.g., presses a "jump" button on the game controller) and the time the result of the action is displayed to the user (e.g., the digitally rendered player jumps onto the screen). Response time may be affected by the various delay sources discussed above. Most sources of delay are divided into two categories: processing delays and network delays.
Processing delay is a result of the amount and quality of processing resources dedicated to a particular game or online game session, and may be affected by the number, speed, and efficiency of processing cores or processors assigned to process user input and render corresponding responses. Processing delays may be further affected by the complexity of the user input or the number and complexity of concurrent inputs being processed by other users in the gaming session.
Network latency is a result of the quality of the communication network (e.g., 110 and/or 112) used to support the online gaming session and may be affected by many external factors such as interference and internal factors such as varying traffic levels and available bandwidth. As the distance between a user (e.g., 102) and a particular game server system (e.g., 114) increases, the number of physical network elements required to support a game session increases, which increases the likelihood of introducing more network latency. For example, a first user (e.g., 102A) that is located far away from a data center housing a particular game server may experience more delay during an online session hosted by the game server than a second user (e.g., 102B) that is participating in the same session but is located on the street opposite the data center.
While processing delays and network delays are generally not within the reach of game developers, developers may intentionally add and tune yet another type of delay in order to optimize the user experience. By optimizing developer added delays, a properly equipped game server can counteract many of the negative effects caused by uncontrollable types of delays (e.g., processing delays and network delays).
In addition, the deferred tuning serves to optimize the user experience by modeling game actions on actions in real life. For example, some user inputs in the context of a game are more susceptible to varying amounts of delay than others, as are the slightest movements of a computer mouse opponent. For example, in ice hockey games, the response times of inputs associated with sports should be carefully tuned so that they are sensitive enough to ensure competitive response times (e.g., to avoid inspection by an opponent), but not so sensitive as to prevent accurate movement (e.g., to line shots without overcompensating). In addition, different types of inputs may require different amounts of response time. For example, the delay values associated with inputs for shooting and blocking hockey balls may be tuned in faster response times than those associated with inputs for controlling the player's motion, as greater precision may be required to move the player into position and queue the shot, rather than, for example, accurately deciding when to shoot.
Game developers can tune the response time for various inputs or types of inputs. In some embodiments, the response time value for a particular game varies from platform to platform, but the response time is stable for each platform. For embodiments involving online streaming, the response time varies based on network conditions and constraints on optical speed. Furthermore, the various types of processing delays and network delays discussed above make response time tuning more complex, as the amount of time that elapses between input and response is inconsistent for each user, or even for a single user, over time.
Various embodiments of methods and systems for adjusting delay in the context of gameplay tuning are discussed below. Various embodiments described herein operate to make network condition-based performance variability less noticeable to a user, resulting in a better user experience. In some implementations, on a game streaming system where a game is hosted and launched in a geographically remote server (e.g., 114) away from the computer and displayed on a local client (e.g., 102A), the game dynamically shifts the number of frames rendered between registering input events and displaying corresponding responses to players. For a particular game, the developer defines an ideal or desired number of frames or amount of time (e.g., milliseconds) between input and response for each type of input event (e.g., movement, action, button press, controller orientation change, etc.). In some implementations, the game system provides an API that reports, for each frame, an existing input delay condition or a recent time-band representing what the user sees. In some implementations, one or more users play a game on a respective game controller (also referred to herein as a "client device" or "controller") under variable input delay conditions. In some implementations, a user generates input events by manipulating a joystick, pressing a button, selecting an affordance, moving, or otherwise manipulating an input device such as a game controller. After generating the input event, the controller associated with the user sends the input event to the server (e.g., 114) running the game.
In some implementations, the server queries the amount of existing delay (e.g., by querying a streamer API), the latest value of input delay (e.g., network delay), or the most recent estimate of the time-band. The server reduces or increases the number of frames to pass (referred to herein as "intermediate frames") before generating frames that reflect responses corresponding to the input events (referred to herein as "response frames"). The server sends an intermediate frame to the media device over the network immediately following the response frame. When the response frame is sent to the media device, the media device displays the response frame to the user (e.g., on the output device 108). In some implementations, the delta (e.g., the number of intermediate frames) of frames added or subtracted from the rendering time is calculated based on the frame rate (e.g., in frames per second) displayed in the current session. The change in the increment may decrease or increase the amount of time elapsed between the input and the response, which brings the response time as close as possible to the ideal or desired response time for the particular type of input. It is important to note that the embodiments disclosed herein do not require a global delay or buffering of frames because different input events may require different amounts of adjustment to meet the desired response time. Rather, aspects of the embodiments disclosed herein focus on the increase or decrease per event of the number of frames between an input and a corresponding response.
As described above, game developers can define ideal or desired number of frames or amount of time between respective inputs and respective responses for different types of input events. In some embodiments, these relationships are defined in response time settings 462 (see FIG. 4) stored in server system 114. Fig. 14A and 14B are exemplary response time settings 462 for correlating user input (also referred to herein as "commands") to an ideal or desired response time (also referred to herein as an "expected delay value" or a "target delay value"). In some implementations, an index of commands for a particular game is stored in a table (e.g., 1412) with a corresponding command type (also referred to as an "expected delay type" or "delay category"). For example, "dodge" and "shoot" commands belong to a first category or command type (e.g., "type 1"), "walk" and "jump" belong to a second category or command type, and so on. In some implementations, an index of the command type is stored in a table (e.g., 1414) with the corresponding expected delay value. For example, a "type 1" command is associated with an expected (e.g., ideal or desired) delay of 16ms, a "type 2" command is associated with an expected delay of 40ms, and so on. Alternatively, a table (e.g., 1416) is used to directly correlate the command with the expected delay. For example, "dodge" and "shoot" commands are associated with an expected delay of 20ms, "move" and "jump" commands are associated with an expected delay of 40ms, and so on. In some implementations, tables 1412, 1414, and/or 1416 are stored in memory 146 (e.g., response time settings 462) of server system 114.
Fig. 14C is an example implementation of device/network evaluation module 444 of server system 114. The device/network evaluation module 444 obtains network delay information 1420 for each user/controller participating in a particular gaming session. In some implementations, the network delay information is Round Trip Timing (RTT) information that is associated with an amount of time it takes to transmit the user input from the controller to the server, in combination with a time it takes to transmit the corresponding response frame from the server to the media device. In some implementations, the RTT information additionally includes an amount of time it takes for the server to process the user input and generate a corresponding response frame. Additionally or alternatively, the network delay information is any of the delay values described with respect to fig. 5-12 above. For example, in some implementations, if RTT information is not readily available to the network evaluation module 444, various one-way transmission times are determined as described above, and the network evaluation module 444 combines the determined transmission times (e.g., one-way controller-to-server delay and one-way server-to-media device delay) to determine unknown delay information (e.g., controller-to-server-to-media device delay).
FIG. 15 is an example online interactive gaming environment 1500 in accordance with some embodiments. Gaming environment 1500 is similar to gaming environments 100 (FIG. 1) and 500 (FIG. 5A), with corresponding components numbered similarly.
At time t1At this point, controller 102A transmits a user command (e.g., a command from table 1412) associated with the input to server 114 over a network (e.g., one or more local and/or non-local communication networks 110). In some implementations, the user commands are the result of a user manipulating a control on the game controller (e.g., pressing a button, moving a joystick, rotating the controller itself, etc.) or otherwise interacting with the game controller. The motivation (in other words, "triggering") for a user to manipulate the game controller to issue a user command is based on the particular game being played. For example, if the user is playing an online ice hockey game, the user may decide to utilize the opening in the goal and press the "shoot" button in order to shoot ice hockey into the goal. In some implementations, the trigger (e.g., an opening in a goal) is caused by an image communicated from server 114 and rendered on an output device (e.g., 108) used by a user of controller 102A to view game play.Thus, upon viewing an image (e.g., an image frame depicting an opening in a goal), the user is motivated to respond by issuing a related command (e.g., shooting a hockey puck).
At time t2Server 114 receives the command. t is t1And t2The amount of time in between is a function of various factors related to network delay as discussed above. Upon receiving the command, the server processes the command by updating the current game state according to the command and generating a response frame reflecting the updated game state. In some implementations, processing the command includes determining which command was received, determining a type of command, determining or updating a network delay value, determining an amount of delay to introduce based on the network delay value and the type of command received (e.g., by determining an expected delay associated with the command by referencing a table and comparing the expected delay to the network delay), and generating one or more intermediate frames based on the determined amount of introduced delay (e.g., by multiplying a current frame rate by a difference between the expected delay and the network delay).
At time t3At this point, the server 114 transmits the intermediate frames (if any) and the response frame to the media device 106 over the network 110/112 for display on the output device 108. t is t2And t3The amount of time in between is a function of various factors related to the processing delay discussed above. In some embodiments, the processing delay is affected by the process of generating the response frame. In some implementations, generating the response frame includes (i) processing the response (e.g., determining what the first frame in a series of image frames depicting a moving puck is based on the current location of each player in the game scene and other factors, such as the trajectory of the shot and the player's strength), (ii) rendering the frame that reflects the response (e.g., rendering the first frame in a series of frames depicting a player shooting a puck), (iii) encoding the frame, (iv) packaging the frame for streaming over the network. In some embodiments, the response frame is one of a series of frames transmitted at a predefined frame rate. In some implementations, the predefined is determined from network characteristics (e.g., available bandwidth) of the online gaming session, for example, using a rate control processA frame rate, and maintaining the predefined frame rate even after determining that the network delay value has changed. For example, before receiving a user command (e.g., at t)2Previous) and the time instance (e.g., t) at which the corresponding response frame was transmitted3) The predefined frame rate of (a) is the same. In other words, the predefined frame rate remains constant regardless of how much delay is added (e.g., by inserting more intermediate frames) or subtracted (e.g., by inserting fewer or no intermediate frames). By not altering the overall frame rate of the delay adjustment for each event, other aspects of game play (e.g., other game play events and interactions, viewing quality, etc.) may proceed unimpeded as unaffected by the delay adjustment.
At time t4At this point, the media device 106 receives the response frame 1610 and causes the response frame to be displayed on the output device 108. t is t3And t4The amount of time in between is a function of various factors related to network delay as discussed above. In some embodiments, the network path traversed by the response frame is different from the network path traversed by the user command. In various implementations, the network delay value is based on a transmission time (e.g., t) of the unidirectional controller to the server1And t2Difference between), the transmission time of the unidirectional server to the media device (e.g., t)3And t4The difference between) and/or processing delay (e.g., at t)2And t3In between).
FIG. 16 is an example sequence of frames rendered on display 108 according to some embodiments. In this example, frames 1610-1 to 1610-6 are transmitted and displayed at a predefined frame rate of 50 frames per second (1 frame per 20 ms). In addition, for simplicity, it is assumed that network delay is negligible. The time stamp shown in fig. 16 is the time at which server 114 generates each respective frame. When t ═ 0ms, the server generates a frame 1610-1 showing that two ice hockey players a and B are controlled by two users and their respective controllers (e.g., 102A and 102B). Player a has an ice hockey puck and player B is in the goal. At this point, the server receives a "move" command from the controller controlling player A. In this particular example, the "move" command also includes a trajectory (to the left of the player). Upon receiving the "move" command, the server (e.g., delay adjustment module 430) determines (e.g., by looking up tables 1412 and 1414 or table 1416) that the "move" command is a command type associated with an expected delay of 40 ms. Because the predefined frame rate is 1 frame/20 ms and the server must meet the expected delay of 40ms before generating the response frame, the delay adjustment module 430 determines that an intermediate frame should be generated as a placeholder because 40ms (expected delay) minus 20ms (actual delay) equals 20ms and 20ms multiplied by 1/20 ms/frame (frame rate) equals 1 frame. As such, GPU140 generates (or otherwise causes to be processed, rendered, or encoded) one intermediate frame 1610-2 at t-20 ms, and then generates a response frame 1610-3 at t-40 ms. In some implementations, the encoder 142 encodes the one or more inter frames as a skipped frame or a series of skipped frames.
Continuing with the example in FIG. 16, it is seen that after player A has moved, the user controlling player A decides to shoot a hockey puck immediately before the user controlling player B has a chance to block the shoot. The server receives a "fire" command concurrent with the generation of frame 1610-4 at t-160 ms. The delay adjustment module 430 determines (e.g., by looking up tables 1412 and 1414 or table 1416) that the "fire" command is associated with an expected delay of only 20 ms. Because the predefined frame rate is 1 frame/20 ms and the server satisfies the expected delay of 20ms more before generating the response frame, the delay adjustment module 430 determines that no intermediate frames should be generated because 20ms (expected delay) minus 20ms (actual delay) equals 0ms and 0ms multiplied by 1/20 ms/frame (frame rate) equals 0 frames. As such, at t-180 ms, GPU140 generates (or otherwise causes to be processed, rendered, or encoded) response frame 1610-5 after 20ms, while not rendering any intermediate frames. The response frame 1610-5 is the first of a series of response frames depicting the result of the "shoot" command, where frame 1610-6 is the second of a series of response frames at t-200 ms.
Fig. 17 and 18 are diagrams depicting example techniques for determining how much delay to introduce. In the figure, the intermediate frames are depicted as solid, while the response frames are depicted as stripes.
In fig. 17, the server receives the same command through two different networks or through the same network having two different delay values. The network delay 1720 is lower than the network delay 1710. As a result, if not for the introduced delay, the corresponding response frame will be sent back to the media device at a different time. By rendering additional intermediate frames in scenes with lower network delays 1720, the server ensures that the expected total delay (e.g., response time) is consistent regardless of the amount of network delay. From a different perspective, the response time is kept consistent by (i) generating more intermediate frames relative to another scene (scene 1720), (ii) generating fewer intermediate frames relative to another scene (scene 1710), or (iii) a combination of (i) and (ii).
In fig. 18, the server receives two different commands that require different amounts of processing delay. For example, a "run" command requires a first amount 1810 of processing delay, while a resource-intensive "pan" command requires a second amount 1820 of processing delay, which is greater than the first amount. If each command is associated with the same expected delay and each command is received at the same time (assuming similar network delays), the server will consider the difference in processing delays by: (i) generate more intermediate frames relative to other scenes (scene 1810), (ii) generate fewer intermediate frames relative to other scenes (scene 1820), or (iii) a combination of (i) and (ii).
In some embodiments, the delay adjustment module 430 determines the amount of delay introduced by (i) determining or estimating an actual amount of delay between the user command and the corresponding response frame (e.g., by measuring network delay and optionally accounting for processing delay as described above), (ii) determining an expected delay (e.g., by querying a response time setting 462 as described above), and (iii) determining a difference between the actual delay and the expected delay. If the actual delay is shorter than the expected (expected) delay, the server may introduce additional delay. Conversely, if the actual delay time is longer than the expected (expected) delay, the server removes the additional delay (or does not introduce any delay at all). In some embodiments, to account for each of the above, the server always adds a default amount of delay introduced so that the introduced delay can be added or subtracted. After the amount of delay introduced has been determined, the delay adjustment module determines the number of intermediate frames to render by multiplying the frame rate by the amount of delay introduced. In some implementations, the delay adjustment module 430 determines the number of intermediate frames to render using the following equation: the number of intermediate frames is the frame rate (expected delay-actual delay). For scenes where the actual delay is higher than the expected delay, the number of intermediate frames is negative. Thus, for embodiments where there is always a baseline for intermediate frames, the delay adjustment module 430 will subtract the appropriate number of intermediate frames from the baseline. However, for embodiments where there is no baseline for an intermediate frame, the delay adjustment module 430 simply causes no intermediate frame to be rendered in this case.
In some embodiments, the amount of delay introduced is determined based on an estimated response frame arrival time. For example, if the response frame is projected to arrive at the media device earlier than the expected or expected arrival time (e.g., based on the network and/or processing delay values determined as described above), the server presents additional intermediate frames as discussed above. Conversely, if the response frame is projected to arrive at the media device later than the expected or expected arrival time, the server renders fewer intermediate frames as discussed above. In some implementations, the delay adjustment module 430 determines the number of intermediate frames to render using the following equation: the number of intermediate frames is the frame rate (target arrival time-arrival time of the projection). For scenes where the projected arrival time is later than the target arrival time, the number of intermediate frames is negative. Thus, for embodiments where there is always a baseline for intermediate frames, the delay adjustment module 430 will subtract the appropriate number of intermediate frames from the baseline. However, for embodiments where there is no baseline for an intermediate frame, the delay adjustment module 430 simply causes no intermediate frame to be rendered in this case.
FIG. 19A is an example online interactive gaming environment 1900 according to some embodiments. Gaming environment 1900 is an example implementation corresponding to gaming environment 1500 in which a second user's controller 102B and media/output devices 106B/108B located at a site remote from the first user and the server are added. The first user and the second user are both playing the same game. In this example, the distance between the second user and the server is further than the distance between the first user and the server. In this way, the second user may experience more network delay. Additionally, in this example, for simplicity, it is assumed that the display lag between the respective media devices 106 and the display 108 is zero.
At time t0Here, the first controller 102A transmits a user command (e.g., "shoot") to the server 114 over the network 110/112 (see FIG. 15), and the command takes 40ms to be at time t2To the server. The server takes 20ms to process the command and at time t3The response frame is transmitted to the first and second media devices 106A and 106B. The response frame takes 40ms to be at time t5Arrives at the first media device 106A and takes 60ms to arrive at time t6To the second media device 106B. Thus, the second user (controlling player B at controller 102B) sees no response frame on display 108B until 20ms after the first user (controlling player A at controller 102A) sees a response frame on display 108A. Due to the 20ms delay, the response time of the second user may be subject to an unfair delay. Further, player A may score before the second user even sees these events spread out on display 108B, and the subsequent game state may be updated accordingly.
FIG. 19B depicts screenshots 1920-1928 rendered by displays 108A and 108B, where the timestamps correspond to the timestamps in FIG. 19A. Because player A's response time is 20ms faster than player B's response time, player A is at t5 See response frame 1926 at 100ms, while player B sees response frame 1926 after 20 ms. As a result, at t6At 120ms, player a has scored, but from player B's perspective, even if the game state has been updated at the server (e.g., by awarding points to player a's team's score), there is still time to block player a's shot. In some scenarios, player B may successfully block player A's shot in future frames, creating an expected game state that conflicts with the actual game state.According to the various embodiments described above, these kinds of conflicting game states can be avoided by introducing a delay.
Fig. 20A and 20B depict an exemplary gaming environment 1900 and corresponding user views, but in which additional intermediate frames have been added, which have been added in accordance with various embodiments described above. FIGS. 20A/20B correspond to FIGS. 19A/19B, with the differences circled. Specifically, by adding the additional intermediate frame 2000, the server introduces an extra delay of 20ms to player a's response time, causing the response frame 1926 to arrive at both media devices 106A and 106B.
Fig. 21 is a flow diagram of a delay adjustment process 2100, according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and a processor (e.g., memory 146) that stores one or more programs for execution by the one or more processors. In some embodiments, the server includes one or more programs and memory storing the one or more programs for execution by the one or more processors, and the one or more programs include instructions for performing process 2100. In some implementations, a non-transitory computer readable storage medium stores one or more respective programs, the one or more respective programs including instructions, which when executed by a server having one or more processors, cause the server to perform the process 2100.
The process 2100 includes receiving (2102) a first command (e.g., "shoot") from a first client device (e.g., game controller 102A) associated with the online game session; determining (2104) a type of the first command (e.g., "type 1" in table 1412) and a first expected response delay associated with the type of the first command (e.g., "20 ms" in table 1414 or table 1416); determining (2106) a network delay (e.g., by measuring and/or estimating a round trip time 1420-1 between the first game controller and the server, or by any other method described above with reference to fig. 5-12); determining (2108) a first introduced delay (e.g., a delay that is intentionally added and/or tuned to compensate for other types of delays, such as the determined network delay) based on a comparison of the network delay to the first expected delay; generating (2110) a first number of intermediate frames (e.g., frame 1610-2 in fig. 16 or frame 2000 in fig. 20B) that occupy a transmission time corresponding to a first introduced delay when transmitted at a predetermined frame rate; generating (2112) (or otherwise caused to be processed, rendered, or encoded) a first response frame (e.g., frame 1610-3 in fig. 16 or frame 1926 in fig. 20B) reflecting an initial result of the first command; and transmitting (2114) a first number of intermediate frames immediately following the first response frame at the predetermined frame rate, such that the first response frame is received at a media device (e.g., 106) associated with the first game controller at a time corresponding to the first expected response delay.
By using intermediate frames to adjust the response time between a command and a corresponding response frame, the server can maintain a global aspect (e.g., a predefined frame rate) of the game session while tuning a particular aspect (e.g., a response time for a particular type of user input). From an online gaming perspective, a stable frame rate is optimal for a smooth and high quality user experience. Further, by implementing game tuning at a local level (e.g., only for certain types of input), other aspects of the game will continue to be unimpeded, such as non-critical game events that do not affect subsequent game states, but whose continuous rendering adds to the fluidity and quality of the game play experience.
Resolution-based scaling of interactive graphics
Real-time rendering of visual simulations has performance requirements that scale in proportion to the resolution (e.g., number of pixels) rendered. If a visual simulation of, for example, video frames depicting a game play scene is shipped over a network to a user, the performance of the network and/or the user's display device may constrain the maximum resolution supported for a given user. In the case of multiple users, each utilizing different network and display capabilities, an efficient infrastructure enables capabilities tailored to the specific resolution of each user connection. The following description includes various embodiments of an efficient, resolution-appropriate virtualization method and underlying hardware system.
Interactive graphics applications, such as online video games, utilize underlying hardware (e.g., server system 114) to achieve target image resolution and frame rate. For example, if the generated image frames are streamed over a network (e.g., network 112) to an endpoint (e.g., media device 106), the capabilities of the endpoint and the network connection will determine the maximum resolution that can be maintained.
Various embodiments of methods and systems for establishing an interactive gaming session and allocating resources to the session are discussed below. Referring to fig. 15, in some implementations, the server system 114 receives a request to establish a session (e.g., a gaming session) from the client device 102A. The server system (e.g., device/network evaluation module 444) determines characteristics of the controller 102A, the media device 106, and/or the display device 108, as well as characteristics of the network 110/112. Based on the device and network characteristics, the server system (e.g., resource assignment module 432) determines one or more target quality parameters for the session, such as resolution, frame rate, and delay. Based on the target quality parameters, the server (e.g., resource assignment module 432) assigns a particular virtual machine or container to the session and establishes the session based on the assignment. Resources are provided to the session according to a resource profile (e.g., stored in resource pool 464) associated with the particular virtual machine or container assigned to the session. By assigning dedicated virtualization of the underlying hardware resources at the server system, the consumption of hardware resources by the gaming application (e.g., at a data center) adapts the functionality of the network and endpoints, optimizing efficiency while still achieving the desired performance metrics for each session.
FIG. 22 is an example embodiment of resource store 464. The repositories include virtual machine settings 2202 (including settings for M virtual machines), container image repository 2204 (including images for N containers), and resource profiles 2206 (including settings for P profiles). A virtual machine is an operating system or application environment installed on software that emulates specialized hardware, while a container is a virtualized operating system. Although there are differences between the two, they both implement the concept of virtualization. As such, virtual machines and containers are used interchangeably throughout this disclosure unless explicitly stated otherwise.
Configuring the virtual machine or container based on the target quality parameter. For example, virtual machines or containers are provided based on a target resolution (e.g., "small," "medium," "large," or 720p, 1080p, 1440 p). In this example, the virtual machine 2202-1 may be referred to as "small" and used to provide an output stream having a resolution of 720p, the virtual machine 2202-2 may be referred to as "medium" and used to provide an output stream having a resolution of 1080p, the virtual machine 2202-3 may be referred to as "large" and used to provide an output stream having a resolution of 1440p, and so on. In some implementations, each virtual machine and/or container is associated with a resource profile 2206. Each resource profile includes settings for a particular resource and resource level, which may be assigned to a virtual machine and/or container. These resources are used to process inputs (e.g., input events as described above) and generate outputs (e.g., response frames as described above) within a session. Example resources include one or more of the following: graphics processor bandwidth at the server system, general processor bandwidth at the server system, graphics memory at the server system, general memory at the server system, storage capacity at the server system, and input/output channels at the server system. When a particular virtual machine or container is assigned to or associated with a session by resource allocation module 432, the available resources are provided for the session according to resource profile 2206 associated with the particular virtual machine or container.
FIG. 23 is a flow diagram of a resource allocation process 2300, according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and memory (e.g., memory 146) that stores one or more programs for execution by the one or more processors. In some implementations, the server includes one or more programs and memory storing the one or more programs for execution by the one or more processors, and the one or more programs include instructions for performing the process 2300. In some implementations, a non-transitory computer readable storage medium stores one or more respective programs, including instructions, which when executed by a server having one or more processors, cause the server to perform the process 2300.
The process begins when server 114 receives 2302 a request to establish a session from a client device, such as controller 102. In some implementations, the client device 102 requests that a real-time interactive session be established and the request is received over a network connection (e.g., network 110/112) with the client device 102.
Upon receiving the request, the server (e.g., device/network evaluation module 444) determines (2304) device capabilities of devices associated with the client device 102 (e.g., media device 106, output device 108, and/or client device 102 itself). In some implementations, the device capability is a maximum resolution of the display output at an output device (e.g., 108) associated with the client device, a maximum frame rate of the display output at an output device (e.g., 108) associated with the client device, or both. In some implementations, the output device itself communicates the device capability information directly to the server or through the client device. In some implementations, the device capability information is stored locally on the client device, and the client device sends the device capability information with an initial request to establish the session. In some implementations, the client device sends the device capability information in response to a request by the device/network evaluation module 444.
In addition, the server (e.g., device/network evaluation module 444) determines (2306) connection capabilities of the network connection (e.g., network 110/112). In some implementations, the connection capability is a bandwidth of the network connection and/or one or more delay values associated with the network connection. Example delay values and methods of obtaining them are discussed above with reference to fig. 5-12.
After evaluating the device and network capabilities, the server (e.g., resource assignment module 432) determines (2308) one or more target quality parameters for the real-time interactive session based on the device capabilities and the network connection capabilities. In some implementations, the one or more target quality parameters include one or more of a target resolution, a target frame rate, and/or a target delay for content (e.g., response frames) transmitted to the output device.
After the target quality parameters have been determined, the server (e.g., resource assignment module 432) selects (2310) a virtual machine or container based on one or more target quality parameters. In some embodiments, resource assignment module 432 determines the quality of the virtual machine by (i) comparing one or more target quality parameters to corresponding parameters in respective resource profiles of the plurality of virtual machines; (ii) determining which resource profile includes parameters that most closely match one or more target quality parameters; and (iii) selecting a virtual machine having a resource profile that most closely matches the one or more target quality parameters as the first virtual machine to select the virtual machine or container. For example, if the target frame rate is 120fps, resource assignment module 432 compares the target frame rate to parameters in resource profile 2206 that support a frame rate of 120fps, determines that a particular resource profile (e.g., 2206-2) will best be able to support the target frame rate, and selects the virtual machine (e.g., virtual machine 2) associated with profile 2206-2.
In some embodiments, resource assignment module 432 determines the quality of a virtual machine by (i) comparing one or more target quality parameters to corresponding parameters in respective resource profiles for a plurality of virtual machines; (ii) selecting one or more virtual machines having resource profiles with parameters greater than or equal to the one or more target quality parameters as virtual machine candidates; and (iii) selecting the virtual machine or container by selecting the virtual machine candidate with the least resource intensive resource profile as the first virtual machine. For example, if the target frame rate is 120fps, resource assignment module 432 compares the target frame rate to parameters in resource profile 2206, which selects as candidates those with resources equal to or greater than those required to support the target frame rate (e.g., resources that will support target frame rates of 100fps, 120fps, 240fps, etc.), and selects candidates with resources having the fewest resource intensive resource profiles (e.g., a profile that can support 100fps, but not necessarily a profile of 120 fps). By selecting the resource profile with the fewest resources, the server assigns only those resources needed, reserving additional resources for other sessions, and thereby achieving the target performance level while optimizing efficiency at the server.
In some implementations, selecting a virtual machine includes associating the selected virtual machine with the real-time interactive session and maintaining the association despite any changes in device or network connection capabilities. In some embodiments, the association is maintained for a predetermined period of time. In some embodiments, the resource assignment module 432 re-evaluates the association upon detecting a change in device or network connection capabilities. In some embodiments, the resource assignment module 432 re-evaluates the association based on a detected change in device or network connection capabilities only if the change is greater than a predetermined threshold. By limiting the reassignment of virtual machines or containers, the server reaches a target performance level while optimizing stability, and thus efficiency, at the server.
Upon selection of a virtual machine or container, server 114 establishes (2312) a real-time interactive session in accordance with the selected virtual machine or container and provides (2314) resources within the real-time interactive session for processing input (e.g., input events as described above) within the session and generating output (e.g., response frames as described above) to the real-time interactive session in accordance with the resource profile of the first virtual machine. Example resources for processing input and generating output include one or more of: graphics processor bandwidth at the server system, general processor bandwidth at the server system, graphics memory at the server system, general memory at the server system, storage capacity at the server system, and/or input/output channels at the server system. In some implementations, the resources are provided by assigning respective portions of one or more of the resources to the real-time interactive session. In some implementations, resources are provisioned by mapping resource profiles of selected virtual machines or containers to respective portions of one or more resources (e.g., to particular memory partitions or particular input/output channels).
In some embodiments, one or more subsets of virtual machines or containers are made available as different service layers based on the level of resources provided. For example, a user paying for a higher service layer may receive priority access to a virtual machine or container having a resource profile that provides a relatively higher resource (e.g., "large" resolution, higher number of processor bandwidth allocations, etc.). In some implementations, users of the online gaming environment 100 gain access to higher levels of service by paying a premium, implementing in-game rewards or high in-game performance statistics, or taking advantage of promotions offered by a particular gaming company. In some implementations, the user builds the custom package based on particular preferences (e.g., high resolution and average frame rate, average resolution and high frame rate, etc.). In these embodiments, different versions of a custom package are associated with one or more virtual machines or containers.
It is important to note that due to the gaming nature of the real-time interactive sessions described above, controller-to-display latency is a problem that must be monitored in order to maintain a high quality and consistent game play experience. In this way, the provision of a virtual machine or container as described above ensures that the resources necessary to ensure the minimum delay criteria are met by ensuring that the dedicated resources to the individual users or groups of users. Moreover, as the use of game sessions expands to games involving multiple players (e.g., massively multiplayer online character game play), virtual provisioning of resources through virtual machines and containers further ensures a high quality gameplay experience (e.g., by ensuring that minimum delay criteria for each player are met) by facilitating a fair competitive environment for each player. For example, if two players are playing the same online game, a first session between the game server and a first client device may be assigned a virtual machine or container that is different from a virtual machine or container assigned to a second session between a second game server and a second client device, even though the first and second client devices are playing the same game in parallel. By assigning virtual machines or containers on a per session basis, hardware resources can be optimized while ensuring a desired gameplay experience for each user.
In some embodiments, the application is designed using a software development kit that takes into account the size of the underlying container, and may "right-size" apply the use of hardware and/or virtualized hardware to achieve the desired performance for a given size. In some embodiments, instances of various sized containers are made available in locations near the end points. When an endpoint connects to the resource assignment module 432 to establish a new session, the device/network evaluation module 444 evaluates the endpoint capabilities and network capabilities, and the resource assignment module 432 performs the sizing. Once determined, the session is attached to a virtual machine or container of a corresponding size and content delivery is initiated at a corresponding resolution, frame rate, or latency level. By "streamlining" the consumption of hardware resources by an application to the capabilities of both network capabilities and endpoint capabilities, a server achieves a desired level of performance while optimizing efficiency.
User-specific network condition tuning
In an online, interactive, real-time gaming environment, latency is one of the key factors that affect the quality of game play. As described above, there are many networks and processing elements that can introduce different levels of latency into the gaming environment. Minimizing the negative impact of latency typically comes at the cost of processing power and complexity, especially when processing many gameplay inputs from multiple gaming sessions and streaming gameplay output content to many users in parallel. Accordingly, it is important for the gaming environment (e.g., server system 114 and/or game server 122) to intelligently allocate processing resources.
One method of allocating processing resources is to consider the needs and experiences of users of the gaming environment on a per user basis and allocate resources accordingly. For example, different users have different levels of tolerance for poor playability events. Some users may be more sensitive to a particular level of delay than other users. For example, some players may object to a 20ms controller-to-display delay, while other players may only observe delay-related problems at 120 ms. The ability to determine tolerance levels for poor playability events and conditions allows better allocation decisions to be made in view of resource constraints. Benefits of user-specific resource allocation include a better experience for all users due to higher optimization processing efficiency, which results in the ability to support more users and reduces the cost of serving content for each user.
Various embodiments of methods and systems for tuning network conditions (allocating network resources) on a user-specific basis are discussed below. In some implementations, the game server (e.g., resource tuning module 458 of fig. 4) considers a set of available game play statistics (e.g., profile 2402 of fig. 24B) for each user and determines a window for playability for each user based on the game play statistics for each user. Exemplary game play statistics include performance in the game (e.g., how the user plays the game), controller interaction (e.g., overcompensation for motion, response time, and/or manipulation speed), the type of game the user is playing (e.g., fast tempo versus slow tempo), and user preferences (inferred by the game server or specified by the user). In some embodiments, the game server determines the playability of each user based on the self-reported data. In some implementations, the game server observes the user's behavior in the game to determine how to classify the game experience, and uses this information to determine where streams will be served and how the server will send experiences. In some embodiments, the above-described method is augmented by applying machine learning that determines a particular weight for each game play statistic to the user's playability classification.
Fig. 24A is an example embodiment of a repository for user playability profiles 2402. In some implementations, the playability profiles (e.g., game play statistics representing N users) are stored in the memory 146 as user information 458 (fig. 4).
In some embodiments, the game play statistics include performance data in the game. Performance data in a user's example game includes a user skill level for a particular game (e.g., a measure of how the user plays the game). In some implementations, the game server (e.g., resource tuning module 458) determines the skill level of the user by comparing the user's activities or achievements to certain game-specific criteria, such as the amount of time it takes the user to reach a checkpoint, how many wins the user achieves for a certain opponent or challenge, how many points the user gets, and so forth. In some implementations, the resource tuning module 458 compares the in-game performance data (e.g., skill level) of the user with corresponding performance data of other users or with an average performance metric representative of a plurality of users currently playing or having played the game.
In some implementations, the game play statistics include controller interaction data, such as data describing user interactions with the game controller 102. In some implementations, the controller interaction data describes a user response time, such as an amount of time between (i) a stimulus being rendered in an output frame displayed to the user (e.g., on the display 108), and (ii) the user responding to the stimulus by sending game play input to the server (e.g., by interacting with a control on the game controller 102). For example, referring to FIG. 5B, if at the first gameplay time t1Trigger frame 510-1 is displayed and the user is at a second gameplay time t2In response, the display-to-controller interaction delay is then t2And t1The difference between them. . Users with faster reaction times will be associated with controller interaction data representing shorter response times.
In some embodiments, the game play statistics include controller manipulation speed data, such as data describing how fast a user registers for continuous input (e.g., by interacting serially with two controls, or by interacting twice in succession with the same control). For example, referring to FIG. 16, if a user attempts to score by manipulating the first control to move player A into position (frame 1610-3) and then manipulating the second control to cause player A to shoot a hockey puck (frame 1610-5), the user's controller operating speed refers to the amount of time that elapses between operating the first control and operating the second control. A user that is able to manipulate controls on the game controller 102 more quickly will be associated with controller manipulation data that represents a shorter manipulation time between successive manipulations or interactions.
In some implementations, the game play statistics include controller performance data, such as data describing how accurately the user interacts with the controller 102. For example, referring to FIG. 16, when the user moves player A into position (frame 1610-3), the user with relatively high skill will interact with the appropriate controls (e.g., hold and hold the "move" button) long enough to move the virtual player to the correct position, while the user with relatively low skill may overcompensate or undercompensate (e.g., hold the "move" button too long or not long enough) to move the virtual player to the wrong position and lose shots. A user who can manipulate controls on the game controller 102 more accurately will be associated with controller performance data that represents a higher degree of accuracy.
In some implementations, playability profile 2402 includes the type of game being played. For example, a high speed hockey game, such as the games described in the various examples above, may require faster game play and less delay than a more relaxed strategy game that does not require rapid decision-making or movement. Thus, depending on the game type, statistics such as controller response time and accuracy may have different meanings, or no meaning at all, in the context of other statistics such as performance or skill level.
In some implementations, playability profile 2402 includes playability preferences regarding tolerance levels for certain aspects of game play. For example, a user may prefer a certain level of resolution, frame rate, and/or delay regardless of how well or poorly the user is playing a game or interacting with a controller. For example, if a user is accustomed to or prefers a particular game play experience associated with a particular level of latency, then providing a faster response time may be at best unnecessary (because the user prefers a slower response time) and at worst disadvantageous (because the user may not be able to play the game if the user is unable to accommodate the faster response time). As yet another example, due to personal viewing preferences, a user may prefer a frame rate that is slower than the frame rate that server system 114 may otherwise provide. As a result, the user's preferences are a factor in how server system 114 allocates resources. In some implementations, the user manually enters these preferences and the server (e.g., resource tuning module 458) stores the user's preferences according to the manually entered settings. Alternatively, the server infers these preferences. In some implementations, the server infers the user's preferences from the user's game play statistics (e.g., behavior and performance data in the game).
After determining various game play statistics as described above, the resource tuning module 458 assigns a game play experience tolerance level to the user based on the one or more game play statistics (e.g., in-game performance data). A game play experience tolerance level is a metric that describes the level of service that a game server can provide to a user while not negatively impacting the user's perceived game play experience. The game play experience tolerance level may also be described as a poor latency level, a playability level, a quality expectation level, and/or a minimum service tolerance level. In some implementations, the experience tolerance level represents a particular frame rate, a particular resolution, and/or a particular level of delay determined to have an impact on the perceived game play experience associated with the user of the first client device that is less than a threshold amount.
FIG. 24B is an example embodiment of a table of resource settings 466. In some embodiments, the resource settings 466 are stored in the memory 146 (FIG. 4). According to an example resource setting 466, a first tolerance level ("1") is associated with a particular resource profile ("A"). An example of a resource profile (resource profile 2206) is described above with reference to fig. 22. By assigning or allocating resource profiles (e.g., server processor bandwidth) to users with particular game play tolerance levels, server system 114 provides users with an intended game experience (e.g., within the tolerance of the user) only with minimal resources necessary to provide the game play level experience.
FIG. 25 is a flow diagram of a resource tuning process 2500 according to some embodiments. The process may be performed at an electronic server (e.g., server system 114, or more specifically, game server 122) having one or more processors (e.g., CPU 138 and/or GPU 140) and memory (e.g., memory 146) that stores one or more programs for execution by the one or more processors. In some embodiments, the server includes one or more programs and memory storing the one or more programs for execution by the one or more processors, and the one or more programs include instructions for performing process 2500. In some implementations, a non-transitory computer readable storage medium stores one or more respective programs, the one or more respective programs including instructions, which when executed by a server having one or more processors, cause the server to perform the process 2500.
The process begins when the server 114 establishes 2502 a real-time interactive game session with a first client device (e.g., game controller 102) that is associated with a particular game type (e.g., a fast-paced role-playing game or a slower-paced strategy game). As a user of the game controller 102 plays a game through a game session, a server (e.g., the resource tuning module 458) monitors (2504) performance data in the game associated with the user during the game session. Performance data in an example game includes game play statistics, performance metrics, skill levels, controller response times, controller manipulation times, and/or controller accuracies as described above. In some implementations, in-game performance data is stored in the user's profile 2402.
Based on performance data in the game (e.g., game play skills, controller interactions), game type, and/or user preferences, the resource tuning module 458 determines (2506) a game play experience tolerance level for the user. For example, if the user has a relatively higher skill level, faster response (shorter controller response time), faster game control capability (shorter controller manipulation time), and/or higher controller precision, the tuning module 458 assigns tolerance levels corresponding to a higher resource profile (e.g., a game session that allocates more resources to the user) and/or to a higher quality game play experience (e.g., a higher frame rate, higher resolution, and/or lower latency). On the other hand, if the user has a relatively lower skill level, slower response (longer controller response time), slower game control capability (longer controller manipulation time), and/or lower controller precision, the tuning module 458 assigns a tolerance level corresponding to a lower resource profile (e.g., a game session that allocates more resources to the user) and/or corresponding to a lower quality game play experience (e.g., a lower frame rate, lower resolution, and/or higher latency). In some implementations, the tolerance level is stored in the user's playability profile 2402 along with other game play statistics.
The resource tuning module 458 tunes (2508) server resources for the user game session based on the game experience tolerance level. Examples of session resources include graphics processor bandwidth at the server system, general processor bandwidth at the server system, graphics memory at the server system, general memory at the server system, storage capacity at the server system, input/output channels at the server system, and/or streaming sources. In some implementations, the resource tuning module 458 allocates resources to the game session by assigning a virtual machine or container as described above with respect to fig. 22-23. By adjusting the allocation of session resources, the game server affects one or more of a frame rate, a resolution, or a delay level associated with the gameplay output stream (e.g., a video stream depicting the gameplay output). Alternatively or additionally, in some implementations, the resource tuning module 458 directly adjusts the frame rate, resolution, and/or delay level associated with the gameplay output stream.
In some implementations, the resource tuning module 458 determines the tolerance level for the game play experience for a particular user by initially setting the tolerance level to a predetermined starting point (e.g., determined to be higher than necessary to ensure a positive play experience for a majority of users), and then incrementally adjusting the tolerance level until the game play statistics of one or more users are negatively affected. The level just before negatively impacting the user's game statistics is determined to be the user's tolerance level for game play experience. For example, when a user establishes a game session, the game server sets the initial bandwidth allocation to a known or assumed sufficiently high level to avoid adversely affecting the ability of the user to perform well in the game. The resource tuning module 458 then incrementally decreases the bandwidth allocation for the session until the user's game play experience begins to show signs of being adversely affected (e.g., because the user's in-game performance begins to drop below a threshold). The lowest bandwidth level at which the user's game play is not affected or not affected by exceeding the threshold is then recorded as part of the user's game play tolerance level.
In some implementations, the user accesses the user's gaming experience tolerance level. For example, the game server provides the user with information in the user's playability profile 2402. By providing the user with selectable information to view the user's playability profile information, the user may track the user's gameplay progress (e.g., whether the user is improving performance in a game) using the associated gameplay statistics as a metric and/or compare certain gameplay statistics to other users ' statistics.
Various embodiments described herein efficiently utilize bandwidth and computing resources to provide users with an optimal game play experience based on their own unique capabilities as determined by monitoring each user's game play performance. By tuning server resources on a per-user basis according to each user's particular gaming style, skills, needs, and/or preferences, the various embodiments described herein provide a better experience for all users due to a more highly optimized processing efficiency, which results in the ability to support more users and reduces the cost of serving content for each user.
Notes on the disclosure
Reference has been made in detail to the various embodiments, examples of which are illustrated in the accompanying drawings. In the above detailed description, numerous specific details are set forth in order to provide a thorough understanding of the invention and the described embodiments. However, the invention may be practiced without these specific details. In other instances, well-known methods, procedures, components, and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments.
It will be understood that, although the terms first, second, etc. may be used herein to describe various elements, these elements should not be limited by these terms. These terms are only used to distinguish one element from another. For example, a first device may be referred to as a second device, and similarly, a second device may be referred to as a first device, without changing the meaning of the description, so long as all occurrences of the first device are renamed consistently and all occurrences of the second device are renamed consistently. The first device and the second device are both devices, but they are not the same device.
The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the claims. As used in the description of the embodiments and the appended claims, the singular forms "a," "an," and "the" are intended to include the plural forms as well, unless the context clearly indicates otherwise. It will also be understood that the term "and/or" as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items. It will be further understood that the terms "comprises" and/or "comprising," when used in this specification, specify the presence of stated features, integers, steps, operations, elements, and/or components, but do not preclude the presence or addition of one or more other features, integers, steps, operations, elements, components, and/or groups thereof.
As used herein, the term "if" can be interpreted to mean "when", "at … …" or "in response to a determination" or "according to a determination" or "in response to a detection", the recited condition precedent is true, depending on context. Similarly, the phrase "if it is determined that [ the recited precedent for the condition is true ]" or "if [ the recited precedent for the condition is true ]" or "when [ the recited precedent for the condition is true ]" may be interpreted to mean, "after determining that the recited precedent for the condition is true" or "in response to determining that the recited precedent for the condition is true" or "after detecting that the recited precedent for the condition is true" or "in response to detecting that the recited precedent for the condition is true", depending on the context.
The foregoing description, for purpose of explanation, has been described with reference to specific embodiments. However, the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications, to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.
Claims (14)
1. A method, comprising:
at a server system comprising a plurality of virtual machines, each of the virtual machines having a respective resource profile:
receiving a request from a client device to establish a real-time interactive gaming session, wherein the request is received over a network connection with the client device;
determining a device capability of an output device associated with the client device;
determining a connection capability of the network connection;
determining one or more target quality parameters for the real-time interactive gaming session based on the device capabilities and the connection capabilities;
selecting a first virtual machine of the plurality of virtual machines based on the one or more target quality parameters, wherein selecting the first virtual machine comprises: associating the first virtual machine with the real-time interactive gaming session;
establishing the real-time interactive gaming session with the client device;
providing, to the real-time interactive gaming session, resources for processing input from the client device in the real-time interactive gaming session and generating gameplay output from the processed input in accordance with a resource profile of the first virtual machine; and
if there is a change in device or network connection characteristics, the association of the first virtual machine with the real-time interactive game session is maintained regardless of the change.
2. The method of claim 1, wherein the device capabilities of the output device include one or more of: a maximum resolution of a display output at the output device and a maximum frame rate of a display output at the output device.
3. The method of claim 1, wherein the connectivity capabilities of the network connection comprise one or more of: a bandwidth of the network connection and a latency of the network connection.
4. The method of claim 1, wherein the one or more target quality parameters comprise one or more of: a target resolution for content transmitted to the output device, a target frame rate for content transmitted to the output device, and a target latency for content transmitted to the output device.
5. The method of claim 1, wherein the resources for processing inputs and generating outputs comprise one or more of: graphics processor bandwidth at the server system, general processor bandwidth at the server system, graphics memory at the server system, general memory at the server system, storage at the server system, and input/output channels at the server system.
6. The method of claim 5, wherein providing resources for processing input and generating output within the real-time interactive gaming session comprises: assigning respective portions of one or more of the resources to the real-time interactive gaming session.
7. The method of claim 5, wherein providing resources for processing input and generating output within the real-time interactive gaming session comprises: mapping the resource profile of the first virtual machine to respective portions of one or more of the resources.
8. The method of claim 1, wherein selecting the first virtual machine comprises:
comparing the one or more target quality parameters to corresponding parameters in respective resource profiles of the plurality of virtual machines;
determining which resource profile includes parameters that most closely match the one or more target quality parameters; and
selecting as the first virtual machine a virtual machine having a resource profile that includes parameters that most closely match the one or more target quality parameters.
9. The method of claim 1, wherein selecting the first virtual machine comprises:
comparing the one or more target quality parameters to corresponding parameters in respective resource profiles of the plurality of virtual machines;
selecting one or more virtual machines having resource profiles that include parameters greater than or equal to the one or more target quality parameters as virtual machine candidates; and
selecting a virtual machine candidate with a least resource intensive resource profile as the first virtual machine.
10. The method of claim 1, wherein establishing the real-time interactive gaming session comprises: assigning resources to the real-time interactive gaming session according to a resource profile of the first virtual machine.
11. The method of claim 10, further comprising: maintaining the association of the first virtual machine with the real-time interactive gaming session for a predetermined period of time.
12. The method of claim 10, further comprising: the selection of the first virtual machine is re-evaluated after a predetermined period of time, and/or upon detecting a change in network connection characteristics that exceeds a predetermined threshold.
13. An electronic server system comprising:
a plurality of virtual machines, each of the virtual machines having a respective resource profile;
one or more processors; and
memory storing one or more programs for execution by the one or more processors, the one or more programs including instructions for:
receiving a request from a client device to establish a real-time interactive gaming session, wherein the request is received over a network connection with the client device;
determining a device capability of an output device associated with the client device;
determining a connection capability of the network connection;
determining one or more target quality parameters for the real-time interactive gaming session based on the device capabilities and the connection capabilities;
selecting a first virtual machine of the plurality of virtual machines based on the one or more target quality parameters, wherein selecting the first virtual machine comprises: associating the first virtual machine with the real-time interactive gaming session;
establishing the real-time interactive gaming session with the client device; and
providing, to the real-time interactive gaming session, resources for processing input from the client device in the real-time interactive gaming session and generating gameplay output from the processed input in accordance with a resource profile of the first virtual machine; and
if there is a change in device or network connection characteristics, the association of the first virtual machine with the real-time interactive game session is maintained regardless of the change.
14. A non-transitory computer readable storage medium storing one or more programs configured for execution by a server system comprising a plurality of virtual machines, each of the virtual machines having a respective resource profile, the one or more programs comprising instructions for:
receiving a request from a client device to establish a real-time interactive gaming session, wherein the request is received over a network connection with the client device;
determining a device capability of an output device associated with the client device;
determining a connection capability of the network connection;
determining one or more target quality parameters for the real-time interactive gaming session based on the device capabilities and the connection capabilities;
selecting a first virtual machine of the plurality of virtual machines based on the one or more target quality parameters, wherein selecting the first virtual machine comprises: associating the first virtual machine with the real-time interactive gaming session;
establishing the real-time interactive gaming session with the client device; and
providing, to the real-time interactive gaming session, resources for processing input from the client device in the real-time interactive gaming session and generating game play output from the processed input in accordance with a resource profile of the first virtual machine; and
if there is a change in device or network connection characteristics, the association of the first virtual machine with the real-time interactive game session is maintained regardless of the change.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN202210586749.3A CN114984569B (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display hysteresis in gaming systems |
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862651662P | 2018-04-02 | 2018-04-02 | |
US62/651,662 | 2018-04-02 | ||
US16/368,801 US11077364B2 (en) | 2018-04-02 | 2019-03-28 | Resolution-based scaling of real-time interactive graphics |
US16/368,801 | 2019-03-28 | ||
PCT/US2019/025182 WO2019195167A2 (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display lag in gaming systems |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202210586749.3A Division CN114984569B (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display hysteresis in gaming systems |
Publications (2)
Publication Number | Publication Date |
---|---|
CN111587137A CN111587137A (en) | 2020-08-25 |
CN111587137B true CN111587137B (en) | 2022-06-03 |
Family
ID=66182659
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980007125.8A Active CN111587137B (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display lag in gaming systems |
CN202210586749.3A Active CN114984569B (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display hysteresis in gaming systems |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202210586749.3A Active CN114984569B (en) | 2018-04-02 | 2019-04-01 | Detecting and compensating for display hysteresis in gaming systems |
Country Status (6)
Country | Link |
---|---|
US (3) | US11077364B2 (en) |
EP (2) | EP3888768A1 (en) |
JP (3) | JP7441786B2 (en) |
KR (4) | KR102289857B1 (en) |
CN (2) | CN111587137B (en) |
WO (1) | WO2019195167A2 (en) |
Families Citing this family (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10616086B2 (en) * | 2012-12-27 | 2020-04-07 | Navidia Corporation | Network adaptive latency reduction through frame rate control |
US10456672B2 (en) | 2016-05-19 | 2019-10-29 | Google Llc | Methods and systems for facilitating participation in a game session |
EP4336800A2 (en) | 2017-10-10 | 2024-03-13 | Google LLC | Distributed sample-based game profiling with game metadata and metrics and gaming api platform supporting third-party content |
US11140207B2 (en) | 2017-12-21 | 2021-10-05 | Google Llc | Network impairment simulation framework for verification of real time interactive media streaming systems |
EP4276814A3 (en) | 2018-03-22 | 2023-12-20 | Google LLC | Methods and systems for rendering and encoding content for online interactive gaming sessions |
US11872476B2 (en) | 2018-04-02 | 2024-01-16 | Google Llc | Input device for an electronic system |
WO2019194953A1 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Methods, devices, and systems for interactive cloud gaming |
CN111417978A (en) | 2018-04-10 | 2020-07-14 | 谷歌有限责任公司 | Memory management in game rendering |
WO2020102493A1 (en) | 2018-11-16 | 2020-05-22 | Google Llc | Shadow tracking of real-time interactive simulations for complex system analysis |
US11336942B2 (en) * | 2018-12-28 | 2022-05-17 | Dish Network L.L.C. | Methods and systems for management of a processing offloader |
US11033813B2 (en) * | 2019-06-07 | 2021-06-15 | Microsoft Technology Licensing, Llc | Latency erasure |
US11938406B2 (en) * | 2019-06-07 | 2024-03-26 | Nvidia Corporation | Dynamic allocation of compute resources for highlight generation in cloud gaming systems |
US11198062B2 (en) * | 2019-07-18 | 2021-12-14 | Nani Holdings IP, LLC | Latency management in an event driven gaming network |
US11422785B2 (en) * | 2019-07-23 | 2022-08-23 | Paypal, Inc. | Container orchestration framework |
US11875167B2 (en) * | 2020-03-23 | 2024-01-16 | Nubix, Inc. | Method for deploying containerized protocols on very small devices |
FR3100459B1 (en) * | 2019-09-05 | 2021-11-05 | Blade | CAPTURE AND DISTRIBUTION PROCESS TO COORDINATE ORDERS PRODUCED BY TWO REMOTE CLIENTS ASSOCIATED WITH THE SAME COMPUTER SESSION |
US11343354B2 (en) * | 2019-10-23 | 2022-05-24 | Nvidia Corporation | Increasing user engagement during computing resource allocation queues for cloud services |
US11731043B2 (en) * | 2019-11-19 | 2023-08-22 | Sony Interactive Entertainment Inc. | Adaptive graphics for cloud gaming |
CN110960856B (en) * | 2019-12-23 | 2023-06-27 | 上海米哈游网络科技股份有限公司 | Game data management system, management method and storage medium |
US11784906B2 (en) * | 2020-02-04 | 2023-10-10 | Nvidia Corporation | System-latency-aware display device |
KR102391855B1 (en) * | 2020-04-22 | 2022-04-29 | 한국과학기술원 | Method and apparatus of compensating for latency |
CN111617487B (en) * | 2020-05-22 | 2021-03-16 | 腾讯科技（深圳）有限公司 | Account access method and device in game application, storage medium and electronic equipment |
US11857872B2 (en) * | 2020-07-21 | 2024-01-02 | Nvidia Corporation | Content adaptive data center routing and forwarding in cloud computing environments |
US20220109617A1 (en) * | 2020-10-06 | 2022-04-07 | Nvidia Corporation | Latency determinations for human interface devices |
EP4271492A1 (en) * | 2020-12-30 | 2023-11-08 | Sony Interactive Entertainment Inc. | Recommending game streams for spectating based on recognized or predicted gaming activity |
US11679328B2 (en) | 2020-12-30 | 2023-06-20 | Sony Interactive Entertainment Inc. | Recommending game streams for spectating based on recognized or predicted gaming activity |
US20240108980A1 (en) * | 2021-01-28 | 2024-04-04 | Interdigital Ce Patent Holdings, Sas | Method, apparatuses and systems directed to adapting user input in cloud gaming |
WO2022172462A1 (en) * | 2021-02-15 | 2022-08-18 | 日本電信電話株式会社 | Delay control device, delay control method and delay control program |
US11651541B2 (en) * | 2021-03-01 | 2023-05-16 | Roblox Corporation | Integrated input/output (I/O) for a three-dimensional (3D) environment |
CN113181629A (en) * | 2021-05-10 | 2021-07-30 | 海南珞麟网络科技有限公司 | Time delay compensation method and system for VR/AR multi-user fighting software |
CN115480679A (en) * | 2021-05-28 | 2022-12-16 | 北京字节跳动网络技术有限公司 | Display method, device, client, server and medium of virtual live broadcast room |
US11590426B2 (en) * | 2021-06-14 | 2023-02-28 | Microsoft Technology Licensing, Llc | Updated driver parameters determined by telemetry data |
WO2023135665A1 (en) * | 2022-01-12 | 2023-07-20 | 日本電信電話株式会社 | Lag time measurement server, lag time measurement method, and program |
US11745109B2 (en) | 2022-02-08 | 2023-09-05 | Sony Group Corporation | Methods for controlling use of computing resources, such as virtual game consoles |
US20230293986A1 (en) * | 2022-03-17 | 2023-09-21 | Bidstack Group PLC | Server-side gaming method and system for the delivery of remotely-rendered content comprising impression content |
KR20230143872A (en) * | 2022-04-06 | 2023-10-13 | 삼성전자주식회사 | An electronic apparatus and a method of operating the electronic apparatus |
US20230367457A1 (en) * | 2022-05-11 | 2023-11-16 | Supercell Oy | Synchronising actions |
WO2024010588A1 (en) * | 2022-07-08 | 2024-01-11 | Google Llc | Cloud-based gaming system for supporting legacy gaming applications with high frame rate streams |
TWI825838B (en) * | 2022-07-11 | 2023-12-11 | 宏碁股份有限公司 | Method and computer system for deciding quality of shared screen for remote play |
US20240029726A1 (en) * | 2022-07-21 | 2024-01-25 | Sony Interactive Entertainment LLC | Intent Identification for Dialogue Support |
JP7448707B1 (en) | 2023-03-29 | 2024-03-12 | 株式会社Cygames | Program, client terminal, game system, and processing method |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN104598292A (en) * | 2014-12-15 | 2015-05-06 | 中山大学 | Adaptive streaming adaptation and resource optimization method applied to cloud-game system |
CN105451838A (en) * | 2013-05-20 | 2016-03-30 | 微软技术许可有限责任公司 | Game availability in a remote gaming environment |
CN105473196A (en) * | 2013-05-20 | 2016-04-06 | 微软技术许可有限责任公司 | Resource allocation to game titles in remote gaming environment |
CN107050858A (en) * | 2015-09-30 | 2017-08-18 | 索尼互动娱乐美国有限责任公司 | Multi-user for cloud game demonstrates streaming services |
Family Cites Families (151)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5892897A (en) | 1997-02-05 | 1999-04-06 | Motorola, Inc. | Method and apparatus for microprocessor debugging |
US7548238B2 (en) | 1997-07-02 | 2009-06-16 | Nvidia Corporation | Computer graphics shader systems and methods |
US6948092B2 (en) | 1998-12-10 | 2005-09-20 | Hewlett-Packard Development Company, L.P. | System recovery from errors for processor and associated components |
US7574493B2 (en) * | 2000-11-22 | 2009-08-11 | Cricket Communications, Inc. | Method and system for improving the efficiency of state information transfer over a wireless communications network |
US20060287098A1 (en) | 2001-09-28 | 2006-12-21 | Morrow James W | System and method for gaming-content configuration and management system |
US7015909B1 (en) | 2002-03-19 | 2006-03-21 | Aechelon Technology, Inc. | Efficient use of user-defined shaders to implement graphics operations |
US7711847B2 (en) | 2002-04-26 | 2010-05-04 | Sony Computer Entertainment America Inc. | Managing users in a multi-user network game environment |
US7803052B2 (en) | 2002-06-28 | 2010-09-28 | Microsoft Corporation | Discovery and distribution of game session information |
GB2405599A (en) | 2002-07-05 | 2005-03-09 | Dominic Clancy | System and method for playing an interactive game using a mobile device |
JP3495032B1 (en) | 2002-07-24 | 2004-02-09 | コナミ株式会社 | Game progress management device, game server device, terminal device, game progress management method, and game progress management program |
US20040198403A1 (en) | 2002-07-25 | 2004-10-07 | Pedersen Claus Aagaard | Gaming concept for wireless terminals |
US20060154710A1 (en) | 2002-12-10 | 2006-07-13 | Nokia Corporation | Method and device for continuing an electronic multi-player game, in case of an absence of a player of said game |
US8549574B2 (en) | 2002-12-10 | 2013-10-01 | Ol2, Inc. | Method of combining linear content and interactive content compressed together as streaming interactive video |
US8661496B2 (en) * | 2002-12-10 | 2014-02-25 | Ol2, Inc. | System for combining a plurality of views of real-time streaming interactive video |
US9138644B2 (en) * | 2002-12-10 | 2015-09-22 | Sony Computer Entertainment America Llc | System and method for accelerated machine switching |
US9192859B2 (en) * | 2002-12-10 | 2015-11-24 | Sony Computer Entertainment America Llc | System and method for compressing video based on latency measurements and other feedback |
US10664138B2 (en) | 2003-03-14 | 2020-05-26 | Comcast Cable Communications, Llc | Providing supplemental content for a second screen experience |
US20060178216A1 (en) | 2003-07-15 | 2006-08-10 | Shea Mattew T | Multi-session user launching and invitation system and method |
US7966642B2 (en) | 2003-09-15 | 2011-06-21 | Nair Ajith N | Resource-adaptive management of video storage |
EP1668520A4 (en) | 2003-09-19 | 2007-01-31 | Wildtangent Inc | Joint consumption of content invitation methods and apparatus |
US7261798B2 (en) | 2004-01-28 | 2007-08-28 | Hamilton Sundstrand Corporation | Assembly for maintaining compression for electrical contact of the active area of an electrochemical cell |
US8241129B2 (en) | 2005-06-20 | 2012-08-14 | Microsoft Corporation | Setting up on-line game sessions out of a game context |
EP1948335A4 (en) | 2005-10-11 | 2011-02-09 | Thq Wireless Inc | Method and apparatus for finding desirable multi-player games for players |
KR20070082395A (en) | 2006-02-16 | 2007-08-21 | 엔에이치엔(주) | Flash game invitation system and method using url |
WO2007101198A2 (en) | 2006-02-27 | 2007-09-07 | Adra Hosni I | System and method for dynamically tracking and state forecasting tagged entities |
US20070293319A1 (en) | 2006-06-20 | 2007-12-20 | Microsoft Corporation | Transfer of Features Between Gaming Devices |
US7925485B2 (en) * | 2006-10-25 | 2011-04-12 | International Business Machines Corporation | System and apparatus for managing latency-sensitive interaction in virtual environments |
CN101068258B (en) | 2006-12-14 | 2011-09-21 | 腾讯科技（深圳）有限公司 | Electronic game controlling method and controlling system |
US20080220878A1 (en) | 2007-02-23 | 2008-09-11 | Oliver Michaelis | Method and Apparatus to Create or Join Gaming Sessions Based on Proximity |
WO2008104221A1 (en) | 2007-02-27 | 2008-09-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Method and apparatus for use in multiplayer server-based gaming |
KR101422005B1 (en) | 2007-07-04 | 2014-07-23 | 엘지전자 주식회사 | Dispenser and refrigerator including the same |
JP5468193B2 (en) | 2007-08-06 | 2014-04-09 | 任天堂株式会社 | Controller cover |
US8235817B2 (en) | 2009-02-12 | 2012-08-07 | Sony Computer Entertainment America Llc | Object based observation |
US8979647B2 (en) | 2007-10-26 | 2015-03-17 | Microsoft Technology Licensing, Llc | Method of providing player status and ability to join games |
US8613673B2 (en) | 2008-12-15 | 2013-12-24 | Sony Computer Entertainment America Llc | Intelligent game loading |
US9498714B2 (en) | 2007-12-15 | 2016-11-22 | Sony Interactive Entertainment America Llc | Program mode switching |
US20100016081A1 (en) | 2008-03-20 | 2010-01-21 | Gdi Game Domain International Plc | Game server |
JP5075727B2 (en) | 2008-04-25 | 2012-11-21 | 株式会社日立製作所 | Stream distribution system and failure detection method |
US8200795B2 (en) | 2008-06-05 | 2012-06-12 | Sony Computer Entertainment Inc. | Mobile phone game interface |
JP5745204B2 (en) * | 2008-07-28 | 2015-07-08 | 株式会社バンダイナムコエンターテインメント | Program, information storage medium and game machine |
US20100073712A1 (en) | 2008-09-19 | 2010-03-25 | Konica Minolta Systems Laboratory, Inc. | Print job assignment method allowing user-prioritization |
US9498711B2 (en) | 2008-11-04 | 2016-11-22 | Quado Media Inc. | Multi-player, multi-screens, electronic gaming platform and system |
US8157653B2 (en) * | 2009-01-08 | 2012-04-17 | Sony Computer Entertainment America Inc. | Automatic player information generation for interactive entertainment |
US20120079080A1 (en) | 2009-02-11 | 2012-03-29 | Shervin Pishevar | Apparatuses, Methods and Systems For An Interactive Proximity Display Tether With Remote Co-Play |
CN101887485A (en) | 2009-05-14 | 2010-11-17 | 灰熊(北京)科技有限公司 | Method for realizing reliable drop line reconnection in table games |
US8506402B2 (en) | 2009-06-01 | 2013-08-13 | Sony Computer Entertainment America Llc | Game execution environments |
US8621585B2 (en) | 2009-06-16 | 2013-12-31 | Z2Live, Inc. | Invitation service for multi-device application sessions |
US9155963B2 (en) | 2009-11-25 | 2015-10-13 | Disney Enterprises, Inc. | Collaborative online ranking |
US8352798B2 (en) | 2009-12-10 | 2013-01-08 | International Business Machines Corporation | Failure detection and fencing in a computing system |
CN102195935B (en) | 2010-03-03 | 2015-07-29 | 深圳市腾讯计算机系统有限公司 | game hosting system and method |
JP5730914B2 (en) | 2010-03-05 | 2015-06-10 | ブラス・モンキー・インコーポレイテッドＢｒａｓｓ Ｍｏｎｋｅｙ，Ｉｎｃ． | System and method for bidirectional communication and content control in a web browser |
US8591334B2 (en) | 2010-06-03 | 2013-11-26 | Ol2, Inc. | Graphical user interface, system and method for implementing a game controller on a touch-screen device |
EP2621594B1 (en) | 2010-09-13 | 2016-08-10 | Sony Computer Entertainment America LLC | Dual mode program execution and loading |
US20120102185A1 (en) | 2010-10-20 | 2012-04-26 | Sony Computer Entertainment America Inc. | Resource management of server hosts in online game environment |
US8788243B2 (en) | 2011-02-14 | 2014-07-22 | Disney Enterprises, Inc. | Performance metrics gathering from multiple video game platforms |
US8814697B2 (en) | 2011-04-19 | 2014-08-26 | Sony Computer Entertainment America Llc | Method and apparatus for use in preserving a game state |
JP5076132B1 (en) | 2011-05-25 | 2012-11-21 | 株式会社スクウェア・エニックス・ホールディングス | Drawing control apparatus, control method therefor, program, recording medium, drawing server, and drawing system |
US9412193B2 (en) | 2011-06-01 | 2016-08-09 | Apple Inc. | Run-time optimized shader program |
US20130017884A1 (en) | 2011-07-13 | 2013-01-17 | Igt | Methods and apparatus for providing secure logon to a gaming machine using a mobile device |
US8814956B2 (en) | 2011-07-14 | 2014-08-26 | Semiconductor Energy Laboratory Co., Ltd. | Power storage device, electrode, and manufacturing method thereof |
US9167260B2 (en) | 2011-08-02 | 2015-10-20 | Advanced Micro Devices, Inc. | Apparatus and method for video processing |
KR101817652B1 (en) | 2011-09-01 | 2018-02-22 | 삼성전자주식회사 | Method and apparatus for recieving game streamming data and method and server of transmitting game streaming data |
JP2013109560A (en) | 2011-11-21 | 2013-06-06 | Sony Computer Entertainment Inc | Information processing system, information processing terminal, information processing method, information processing program, and computer-readable recording medium storing information processing program |
US8805418B2 (en) * | 2011-12-23 | 2014-08-12 | United Video Properties, Inc. | Methods and systems for performing actions based on location-based rules |
US9773344B2 (en) | 2012-01-11 | 2017-09-26 | Nvidia Corporation | Graphics processor clock scaling based on idle time |
EP2808787A4 (en) | 2012-01-24 | 2016-12-14 | Sony Interactive Entertainment Inc | Information processing device and information processing system |
US20130221923A1 (en) | 2012-02-23 | 2013-08-29 | Whalen Furniture Manufacturing Inc. | Universal charging system and battery pack for video game controllers |
US9868062B2 (en) | 2012-03-13 | 2018-01-16 | Sony Interactive Entertainment America Llc | System, method, and graphical user interface for controlling an application on a tablet |
US10535185B2 (en) | 2012-04-04 | 2020-01-14 | Qualcomm Incorporated | Patched shading in graphics processing |
US20130274000A1 (en) | 2012-04-11 | 2013-10-17 | Meteor Entertainment, Inc. | Modifying use of resources within a cloud-based gaming platform |
US9208642B2 (en) | 2012-04-23 | 2015-12-08 | Touchspin Gaming Ag | Multiplayer slot machine gaming |
US20140006517A1 (en) | 2012-07-02 | 2014-01-02 | WUPIMA, Inc. | System and method for social invitations to facilitate playing and sharing of mobile application or mobile game on mobile device |
KR101923113B1 (en) | 2012-07-12 | 2018-11-28 | 캠프모바일 주식회사 | Method, service server, mobile phone and computer readable recording medium for invitation information processing |
WO2014022311A2 (en) | 2012-07-30 | 2014-02-06 | Google Inc. | Access control in communication environments |
JP5563633B2 (en) | 2012-08-31 | 2014-07-30 | 株式会社スクウェア・エニックス | Video game processing apparatus and video game processing program |
US8663004B1 (en) | 2012-09-05 | 2014-03-04 | Kabam, Inc. | System and method for determining and acting on a user's value across different platforms |
MX346529B (en) | 2012-11-16 | 2017-03-22 | Sony Computer Entertainment America Llc | Systems and methods for cloud processing and overlaying of content on streaming video frames of remotely processed applications. |
US20150009222A1 (en) | 2012-11-28 | 2015-01-08 | Nvidia Corporation | Method and system for cloud based virtualized graphics processing for remote displays |
US8870661B2 (en) | 2012-12-21 | 2014-10-28 | Sony Computer Entertainment America Llc | Cloud-based game slice generation and frictionless social sharing with instant play |
EP2750032B1 (en) | 2012-12-27 | 2020-04-29 | Sony Computer Entertainment America LLC | Methods and systems for generation and execution of miniapp of computer application served by cloud computing system |
WO2014120368A1 (en) | 2013-01-30 | 2014-08-07 | Intel Corporation | Content adaptive entropy coding for next generation video |
US11185783B2 (en) | 2013-03-14 | 2021-11-30 | Sony Interactive Entertainment Inc. | Controller emulation for cloud gaming |
WO2014160354A1 (en) | 2013-03-14 | 2014-10-02 | Georgia State University Research Foundation, Inc. | Inhibiting or reducing fungal growth |
US20140274384A1 (en) | 2013-03-15 | 2014-09-18 | Electronic Arts Inc. | Delivering and consuming interactive video gaming content |
US9339733B2 (en) | 2013-05-22 | 2016-05-17 | Wesley John Boudville | Barcode-based methods to enhance mobile multiplayer games |
CA2886282C (en) | 2013-05-23 | 2019-07-23 | Stephan Georgiev | Dynamic allocation of rendering resources in a cloud gaming system |
US10587663B2 (en) | 2013-05-31 | 2020-03-10 | Verily Life Sciences Llc | Video stream preview |
US9675874B1 (en) | 2013-07-18 | 2017-06-13 | nWay, Inc. | Multi-player gaming system |
US9723051B2 (en) | 2013-08-13 | 2017-08-01 | Criteo Sa | Setting first-party cookies by redirection |
US20150087414A1 (en) | 2013-09-26 | 2015-03-26 | Cellco Partnership D/B/A Verizon Wireless | Cloud gaming implemented using a mobile device and a display device |
JP6292707B2 (en) * | 2013-10-22 | 2018-03-14 | 任天堂株式会社 | Information processing system, information processing apparatus, information processing program, and information processing method |
US9592446B2 (en) | 2013-12-13 | 2017-03-14 | DeNA Co., Ltd. | Electronic game providing device and non-transitory computer-readable storage medium storing electronic game program |
US20160293134A1 (en) | 2013-12-26 | 2016-10-06 | Square Enix Holdings Co., Ltd. | Rendering system, control method and storage medium |
JP6376638B2 (en) | 2014-01-29 | 2018-08-22 | 株式会社コロプラ | Server computer and game program related to game |
JP6528281B2 (en) | 2014-01-29 | 2019-06-12 | 国立研究開発法人産業技術総合研究所 | Method of preparing aqueous extract of Ashwagandha leaf with enhanced anticancer activity by use of cyclodextrin, and pharmaceutical composition containing Ashwagandha leaf |
KR102100161B1 (en) | 2014-02-04 | 2020-04-14 | 삼성전자주식회사 | Method for caching GPU data and data processing system therefore |
CN104866699B (en) | 2014-02-25 | 2017-07-14 | 上海征途信息技术有限公司 | A kind of online game intelligent data analysis method |
US9912562B2 (en) | 2014-03-31 | 2018-03-06 | Microsoft Technology Licensing, Llc | Measuring latency in an interactive application |
US20150297998A1 (en) | 2014-04-16 | 2015-10-22 | Microsoft Corporation | Hyperlink initiation of game sessions |
US9928565B2 (en) | 2014-04-21 | 2018-03-27 | Qualcomm Incorporated | Flex rendering based on a render target in graphics processing |
GB2525437B (en) | 2014-04-25 | 2016-05-25 | Cheng Uei Prec Ind Co Ltd | Push-button structure |
US9940686B2 (en) | 2014-05-14 | 2018-04-10 | Intel Corporation | Exploiting frame to frame coherency in a sort-middle architecture |
KR20180102212A (en) | 2014-06-13 | 2018-09-14 | 콘비다 와이어리스, 엘엘씨 | Automated service profiling and orchestration |
US9393486B2 (en) | 2014-06-27 | 2016-07-19 | Amazon Technologies, Inc. | Character simulation and playback notification in game session replay |
US20160005257A1 (en) | 2014-07-04 | 2016-01-07 | Trendy Entertainment | Influence system and methods |
WO2016014603A1 (en) | 2014-07-22 | 2016-01-28 | Sony Computer Entertainment America Llc | Save game load time reduction for cloud gaming |
US10021214B2 (en) | 2014-07-22 | 2018-07-10 | Microsoft Technology Licensing, Llc | Synthetic transactions between communication endpoints |
US9975044B2 (en) | 2014-07-22 | 2018-05-22 | Ngage SporTek Ltd. | System and method for social gaming |
US10909809B2 (en) | 2014-12-12 | 2021-02-02 | Synergy Blue Llc | Graphical user interface and computer processing techniques for facilitating user interaction with electronic gaming devices |
US10255765B2 (en) | 2015-08-20 | 2019-04-09 | Synergy Blue, Llc | Gaming aspects relating to multiplayer/tournament hybrid arcade/wager-based games |
US20170124812A1 (en) | 2014-12-12 | 2017-05-04 | Synergy Blue, Llc | Gaming and wagering techniques relating to skill-based gaming |
US10007965B2 (en) | 2014-12-16 | 2018-06-26 | Intel Corporation | Dynamic kernel modification for graphics processing units |
US9396702B2 (en) | 2014-12-23 | 2016-07-19 | Sony Interactive Entertainment America Llc | Latency tester |
US20160279523A1 (en) | 2015-03-25 | 2016-09-29 | GAMEin30 Ltd. | System and method for interactive gaming |
US10130874B2 (en) | 2015-05-01 | 2018-11-20 | Microsoft Technology Licensing, Llc | Removable controller accessory for a game controller |
WO2016183253A1 (en) | 2015-05-12 | 2016-11-17 | Equinix, Inc. | Programmable network platform for a cloud-based services exchange |
US9609275B2 (en) | 2015-07-08 | 2017-03-28 | Google Inc. | Single-stream transmission method for multi-user video conferencing |
US10135892B2 (en) | 2015-07-28 | 2018-11-20 | Google Llc | Independent control of interactive streaming media |
US9993729B2 (en) | 2015-08-19 | 2018-06-12 | Sony Interactive Entertainment America Llc | User save data management in cloud gaming |
US9946593B2 (en) | 2015-09-18 | 2018-04-17 | Salesforce.Com, Inc. | Recovery strategy for a stream processing system |
US11420114B2 (en) | 2015-09-30 | 2022-08-23 | Sony Interactive Entertainment LLC | Systems and methods for enabling time-shifted coaching for cloud gaming systems |
US20170097816A1 (en) | 2015-10-01 | 2017-04-06 | Motorola Mobility Llc | Context-based applications for mobile devices |
US10630773B2 (en) | 2015-11-12 | 2020-04-21 | Nvidia Corporation | System and method for network coupled cloud gaming |
US20170185464A1 (en) | 2015-12-29 | 2017-06-29 | Ca, Inc. | Detecting flapping in resource measurements |
CN105749551B (en) | 2016-02-26 | 2019-04-30 | 网易（杭州）网络有限公司 | A kind of game trustship method, system and terminal |
US20170246544A1 (en) | 2016-02-26 | 2017-08-31 | Microsoft Technology Licensing, Llc | Video game streaming for spectating |
US10016689B2 (en) | 2016-03-21 | 2018-07-10 | Electronic Arts Inc. | Synchronized video with in game telemetry |
US10456672B2 (en) | 2016-05-19 | 2019-10-29 | Google Llc | Methods and systems for facilitating participation in a game session |
US10046236B2 (en) * | 2016-06-13 | 2018-08-14 | Sony Interactive Entertainment America, LLC | Browser-based cloud gaming |
US11351468B2 (en) | 2016-06-13 | 2022-06-07 | Sony Interactive Entertainment LLC | Generating challenges using a location based game play companion application |
US10332296B2 (en) | 2016-07-05 | 2019-06-25 | Ubitus Inc. | Overlaying multi-source media in VRAM |
US10521879B2 (en) | 2016-07-05 | 2019-12-31 | Ubitus, Inc. | Overlaying multi-source media in VRAM |
CN106296566B (en) * | 2016-08-12 | 2019-05-17 | 南京睿悦信息技术有限公司 | A kind of virtual reality mobile terminal dynamic time frame compensation rendering system and method |
CN106328855B (en) | 2016-11-29 | 2019-06-04 | 宁德时代新能源科技股份有限公司 | Battery pack and battery module |
US10722803B2 (en) | 2017-02-15 | 2020-07-28 | Roblox Corporation | Integrated chat and game play platform |
US20180250591A1 (en) | 2017-03-02 | 2018-09-06 | The Fast Mind, LLC | Methods of circumventing platform restrictions in gaming |
US10512846B2 (en) | 2017-03-07 | 2019-12-24 | Sony Interactive Entertainment LLC | Emulating player behavior after player departure |
US10645139B2 (en) * | 2017-04-06 | 2020-05-05 | Microsoft Technology Licensing, Llc | Network protocol for switching between plain text and compressed modes |
EP4336800A2 (en) | 2017-10-10 | 2024-03-13 | Google LLC | Distributed sample-based game profiling with game metadata and metrics and gaming api platform supporting third-party content |
CN107670275B (en) | 2017-10-26 | 2020-10-13 | 广州市雷军游乐设备有限公司 | Method and system for disconnection and reconnection of game process |
WO2019126350A1 (en) | 2017-12-19 | 2019-06-27 | Advanta Computer, LLC | Systems and methods for networked computing |
US10792576B2 (en) | 2018-02-28 | 2020-10-06 | Sony Interactive Entertainment LLC | Player to spectator handoff and other spectator controls |
EP4276814A3 (en) | 2018-03-22 | 2023-12-20 | Google LLC | Methods and systems for rendering and encoding content for online interactive gaming sessions |
WO2019195300A2 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Input device for an electronic system |
US10773168B2 (en) | 2018-04-02 | 2020-09-15 | Google Llc | Temporary game control by user simulation following loss of active control |
WO2019194953A1 (en) | 2018-04-02 | 2019-10-10 | Google Llc | Methods, devices, and systems for interactive cloud gaming |
CN111417978A (en) | 2018-04-10 | 2020-07-14 | 谷歌有限责任公司 | Memory management in game rendering |
US10950092B2 (en) | 2018-10-07 | 2021-03-16 | Synergy Blue Llc | Skillful multi-level games and gaming machines in which players are granted free play sessions |
WO2020102493A1 (en) | 2018-11-16 | 2020-05-22 | Google Llc | Shadow tracking of real-time interactive simulations for complex system analysis |
US11731043B2 (en) | 2019-11-19 | 2023-08-22 | Sony Interactive Entertainment Inc. | Adaptive graphics for cloud gaming |
US11128636B1 (en) | 2020-05-13 | 2021-09-21 | Science House LLC | Systems, methods, and apparatus for enhanced headsets |
-
2019
- 2019-03-28 US US16/368,801 patent/US11077364B2/en active Active
- 2019-04-01 KR KR1020207019091A patent/KR102289857B1/en active IP Right Grant
- 2019-04-01 JP JP2020536873A patent/JP7441786B2/en active Active
- 2019-04-01 KR KR1020227006647A patent/KR102628963B1/en active IP Right Grant
- 2019-04-01 CN CN201980007125.8A patent/CN111587137B/en active Active
- 2019-04-01 KR KR1020217025076A patent/KR102370706B1/en active IP Right Grant
- 2019-04-01 WO PCT/US2019/025182 patent/WO2019195167A2/en unknown
- 2019-04-01 EP EP21175400.7A patent/EP3888768A1/en active Pending
- 2019-04-01 KR KR1020247002280A patent/KR20240014105A/en not_active Application Discontinuation
- 2019-04-01 EP EP19718018.5A patent/EP3717084B1/en active Active
- 2019-04-01 CN CN202210586749.3A patent/CN114984569B/en active Active
-
2021
- 2021-04-06 US US17/223,226 patent/US11654354B2/en active Active
-
2022
- 2022-08-17 JP JP2022130128A patent/JP7225463B2/en active Active
- 2022-12-15 US US18/081,931 patent/US20230117969A1/en active Pending
-
2023
- 2023-02-08 JP JP2023017810A patent/JP2023075082A/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105451838A (en) * | 2013-05-20 | 2016-03-30 | 微软技术许可有限责任公司 | Game availability in a remote gaming environment |
CN105473196A (en) * | 2013-05-20 | 2016-04-06 | 微软技术许可有限责任公司 | Resource allocation to game titles in remote gaming environment |
CN104598292A (en) * | 2014-12-15 | 2015-05-06 | 中山大学 | Adaptive streaming adaptation and resource optimization method applied to cloud-game system |
CN107050858A (en) * | 2015-09-30 | 2017-08-18 | 索尼互动娱乐美国有限责任公司 | Multi-user for cloud game demonstrates streaming services |
Also Published As
Publication number | Publication date |
---|---|
CN114984569A (en) | 2022-09-02 |
JP2023075082A (en) | 2023-05-30 |
JP2021509838A (en) | 2021-04-08 |
WO2019195167A2 (en) | 2019-10-10 |
US20190321725A1 (en) | 2019-10-24 |
KR102370706B1 (en) | 2022-03-03 |
WO2019195167A3 (en) | 2019-11-21 |
KR20240014105A (en) | 2024-01-31 |
EP3888768A1 (en) | 2021-10-06 |
CN114984569B (en) | 2023-06-02 |
JP2022176966A (en) | 2022-11-30 |
JP7225463B2 (en) | 2023-02-20 |
KR20210100755A (en) | 2021-08-17 |
KR102289857B1 (en) | 2021-08-12 |
EP3717084B1 (en) | 2021-06-30 |
KR20220028192A (en) | 2022-03-08 |
KR102628963B1 (en) | 2024-01-23 |
US11654354B2 (en) | 2023-05-23 |
EP3717084A2 (en) | 2020-10-07 |
US11077364B2 (en) | 2021-08-03 |
KR20200090256A (en) | 2020-07-28 |
US20210220733A1 (en) | 2021-07-22 |
JP7441786B2 (en) | 2024-03-01 |
CN111587137A (en) | 2020-08-25 |
US20230117969A1 (en) | 2023-04-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN111587137B (en) | Detecting and compensating for display lag in gaming systems | |
CN111526927B (en) | Temporary game control via user simulation after loss of active control | |
CN110678239B (en) | Distributed sample-based game profiling with game metadata and metrics and game API platform supporting third party content | |
US11463784B2 (en) | Coordination of media content delivery to multiple media players | |
EP3807766B1 (en) | Shadow tracking of real-time interactive simulations for complex system analysis | |
JP7463508B2 (en) | Adaptive Graphics for Cloud Gaming | |
KR20200027059A (en) | Output data providing server and output data providing method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |