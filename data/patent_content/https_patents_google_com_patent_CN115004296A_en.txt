CN115004296A - Two-wheeled end-to-end speech recognition based on consultation model - Google Patents
Two-wheeled end-to-end speech recognition based on consultation model Download PDFInfo
- Publication number
- CN115004296A CN115004296A CN202180009642.6A CN202180009642A CN115004296A CN 115004296 A CN115004296 A CN 115004296A CN 202180009642 A CN202180009642 A CN 202180009642A CN 115004296 A CN115004296 A CN 115004296A
- Authority
- CN
- China
- Prior art keywords
- decoder
- round
- encoder
- context vector
- hypotheses
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/049—Temporal neural networks, e.g. delay elements, oscillating neurons or pulsed inputs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/088—Non-supervised learning, e.g. competitive learning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/1815—Semantic context, e.g. disambiguation of the recognition hypotheses based on word meaning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/187—Phonemic context, e.g. pronunciation rules, phonotactical constraints or phoneme n-grams
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/32—Multiple recognisers used in sequence or in parallel; Score combination systems therefor, e.g. voting systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L19/00—Speech or audio signals analysis-synthesis techniques for redundancy reduction, e.g. in vocoders; Coding or decoding of speech or audio signals, using source filter models or psychoacoustic analysis
- G10L19/0018—Speech coding using phonetic or linguistical decoding of the source; Reconstruction using text-to-speech synthesis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/084—Backpropagation, e.g. using gradient descent
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/02—Feature extraction for speech recognition; Selection of recognition unit
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L2015/081—Search algorithms, e.g. Baum-Welch or Viterbi
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L2015/085—Methods for reducing search complexity, pruning
Abstract
A method of performing speech recognition using a two-round trial architecture includes receiving a first round of hypotheses and encoded acoustic frames, and encoding the first round of hypotheses at a hypothesis encoder. Generating, by a Recurrent Neural Network (RNN) decoder model, the first round of hypotheses for the encoded acoustic frames. The method further comprises the following steps: generating a first context vector using a first attention mechanism dedicated to the encoded acoustic frame, and generating a second context vector using a second attention mechanism dedicated to the encoded first round hypothesis. The method also includes decoding, at the context vector decoder, the first context vector and the second context vector to form a second round of hypotheses.
Description
Technical Field
The present disclosure relates to two-round end-to-end speech recognition.
Background
Modern Automatic Speech Recognition (ASR) systems focus not only on providing high quality (e.g., low Word Error Rate (WER)), but also on low latency (e.g., short delay between user utterance and occurrence of word records). Furthermore, now when using ASR systems, ASR systems are required to decode utterances in a streaming manner that corresponds to, or is even faster than, real-time. For example, when an ASR system is deployed on a mobile phone that experiences direct user interactivity, an application on the mobile phone that uses the ASR system may require speech recognition to be streamed such that words appear on the screen as soon as they are spoken. Here, the mobile telephone user may also be less tolerant to delays. Because of this low tolerance, speech recognition strives to operate on mobile devices in a manner that minimizes the impact of latency and inaccuracies that may adversely affect the user experience.
Disclosure of Invention
One aspect of the disclosure provides a computer-implemented method that, when executed on data processing hardware, causes the data processing hardware to perform operations comprising receiving a first round of hypotheses and encoded acoustic frames, and encoding the first round of hypotheses at a hypothesis encoder. A first round of assumptions is generated by a Recurrent Neural Network (RNN) decoder model for the encoded acoustic frames. The operations further include: a first context vector is generated using a first attention mechanism dedicated to the encoded acoustic frame, and a second context vector is generated using a second attention mechanism dedicated to the encoded first round hypothesis. The operations also include decoding, at the context vector decoder, the first context vector and the second context vector to form a second round of hypotheses.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, decoding the first context vector and the second context vector includes decoding a concatenation of the first context vector and the second context vector. Encoding the first round of hypotheses may include bi-directionally encoding the first round of hypotheses at a hypothesis encoder to generate context information from the first round of hypotheses. Here, it is assumed that the encoder may include a Long Short Term Memory (LSTM) network.
In some examples, the operations further include encoding the acoustic frame at the shared encoder, and generating the first round of hypotheses at the RNN decoder model based on the encoded acoustic frame communicated from the shared encoder. In these examples, the operations may further include generating an acoustic embedding at the unidirectional audio encoder based on the encoded acoustic frames communicated from the shared encoder. Here, the unidirectional audio encoder may comprise a Long Short Term Memory (LSTM) network, possibly with at least two layers.
In some embodiments, the operations further comprise training the RNN decoder model and training the trial decoder, while parameters of the trained RNN decoder model remain fixed. The trial decoder includes a hypothesis encoder, a first attention mechanism, a second attention mechanism, and a context vector decoder. In these embodiments, the operations may further include minimizing a word error rate during training of the RNN decoder model and the trial decoder model.
In other implementations, the operations include jointly training an RNN decoder model and a review decoder including a hypothesis encoder, a first attention mechanism, a second attention mechanism, and a context vector decoder. In these embodiments, the operations may further include minimizing a word error rate during joint training of the RNN decoder model and the trial decoder model. The data processing hardware may reside on the user equipment.
Another aspect of the disclosure provides a system comprising data processing hardware and memory hardware in communication with the data processing hardware and storing instructions that, when executed by the data processing hardware, cause the data processing hardware to perform operations comprising receiving a first round of hypotheses and encoded acoustic frames, and encoding the first round of hypotheses at a hypothesis encoder. A first round of assumptions is generated by a Recurrent Neural Network (RNN) decoder model for the encoded acoustic frames. The operations further include: a first context vector is generated using a first attention mechanism dedicated to the encoded acoustic frame, and a second context vector is generated using a second attention mechanism dedicated to the encoded first round hypothesis. The operations also include decoding, at the context vector decoder, the first context vector and the second context vector to form a second round of hypotheses.
This aspect may include one or more of the following optional features. In some implementations, decoding the first context vector and the second context vector includes decoding a concatenation of the first context vector and the second context vector. Encoding the first round of hypotheses may include bi-directionally encoding the first round of hypotheses at a hypothesis encoder to generate context information from the first round of hypotheses. Here, it is assumed that the encoder may include a Long Short Term Memory (LSTM) network.
In some examples, the operations further include encoding the acoustic frame at the shared encoder, and generating the first round of hypotheses at the RNN decoder model based on the encoded acoustic frame communicated from the shared encoder. In these examples, the operations may further include generating an acoustic embedding at the unidirectional audio encoder based on the encoded acoustic frames communicated from the shared encoder. Here, the unidirectional audio encoder may comprise a Long Short Term Memory (LSTM) network, possibly with at least two layers.
In some embodiments, the operations further comprise training the RNN decoder model and training the trial decoder, while parameters of the trained RNN decoder model remain fixed. The trial decoder includes a hypothesis encoder, a first attention mechanism, a second attention mechanism, and a context vector decoder. In these embodiments, the operations may further include minimizing a word error rate during training of the RNN decoder model and the trial decoder model.
In other implementations, the operations include jointly training an RNN decoder model and a review decoder including a hypothesis encoder, a first attention mechanism, a second attention mechanism, and a context vector decoder. In these embodiments, the operations may further include minimizing a word error rate during joint training of the RNN decoder model and the trial decoder model. The data processing hardware may reside on the user equipment.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
Fig. 1A and 1B are schematic diagrams of an example speech environment using a two-wheel trial architecture.
Fig. 2A is a schematic diagram of an example conventional two-wheel architecture for speech recognition.
Fig. 2B is a schematic diagram of the example two-wheeled trial architecture for speech recognition of fig. 1A.
Fig. 3 is a flow diagram of an example arrangement of operations of a method of performing speech recognition using the two-pass architecture of fig. 2B.
FIG. 4 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Speech recognition continues to evolve to meet the unconstrained and flexible requirements of mobile environments. New speech recognition architectures or improvements to existing architectures are constantly evolving in an effort to improve the quality of automatic speech recognition systems (ASR). For example, speech recognition initially employs multiple models, each of which has specialized uses. For example, ASR systems include an Acoustic Model (AM), an articulatory model (PM), and a Language Model (LM). The acoustic model maps segments of audio (i.e., audio frames) to phonemes. A pronunciation model connects these phonemes together to form words, while a language model is used to express the likelihood of a given phrase (i.e., the probability of a sequence of words). However, while these individual models work together, each model is trained independently and is typically designed manually on a different data set.
The model-alone approach enables the speech recognition system to be fairly accurate, especially when the training corpus (i.e., the training data volume) of a given model caters to the effectiveness of the model. However, the need to train separate models independently introduces its own complexity and results in an architecture with an integrated model. These integral models attempt to map audio waveforms (i.e., input sequences) directly to output sentences (i.e., output sequences) using a single neural network. This results in a sequence-to-sequence approach that generates a sequence of words (or graphemes) when given a sequence of audio features. Examples of sequence-to-sequence models include an "attention-based" model and a "listen-attention-spelling" (LAS) model. The LAS model transcribes verbal utterances into characters using a listener component, an attention device component, and a speller component. Here, the listener is a Recurrent Neural Network (RNN) encoder that receives audio input (e.g., a time-frequency representation of speech input) and maps the audio input to a higher-level feature representation. Note that the apparatus is working on higher level features to learn the alignment between input features and predicted sub-word units (e.g., grapheme or word blocks). The speller is an attention-based RNN decoder that generates a sequence of characters from an input by producing a probability distribution over a set of hypothesized words. In the case of a unibody architecture, all components of the model can be jointly trained as a single end-to-end (E2E) neural network. Here, the E2E model is a model whose architecture is entirely composed of a neural network. A complete neural network functions without the need for externally and/or manually designed components (e.g., finite state transducers, dictionaries, or text normalization modules). In addition, when training E2E models, these models typically do not require guidance instructions from decision trees or temporal alignment from separate systems.
While early E2E models proved to be accurate and training improved models trained individually, these E2E models (such as LAS models) worked by examining the entire input sequence before generating output text, and therefore did not allow streaming output when input was received. Without streaming capability, the LAS model cannot perform real-time speech transcription. Because of this deficiency, deploying LAS models for speech applications that are time delay sensitive and/or require real-time voice transcription can be problematic. This makes the LAS-alone model not an ideal model for mobile technologies (e.g., mobile phones) that often rely on real-time applications (e.g., real-time communication applications).
In addition, speech recognition systems having acoustic, pronunciation, and language models, or such models combined together, may rely on decoders that must search for relatively large search maps associated with these models. In the case of a large search graph, it is not advantageous to host this type of speech recognition system entirely on the device. Here, when the speech recognition system is hosted "on the device," the device receiving the audio input uses its processor to perform the functionality of the speech recognition system. For example, when the speech recognition system is completely hosted on the device, the processor of the device need not coordinate with any off-device computing resources to perform the functionality of the speech recognition system. Devices that do not completely perform speech recognition on the device rely on remote computing (e.g., remote computing of a remote computing system or cloud computing) and, thus, rely on online connectivity to perform at least some function of the speech recognition system. For example, the speech recognition system performs decoding through a large search graph using a network connection with a server-based model.
Unfortunately, relying on remote connections makes speech recognition systems susceptible to latency problems and/or the inherent unreliability of the communication network. To improve the usefulness of speech recognition by avoiding these problems, speech recognition systems have evolved into a form of sequence-to-sequence model known as the recurrent neural network transformer (RNN-T). RNN-T does not employ a mechanism of attention, and unlike other sequence-to-sequence models that typically require processing of an entire sequence (e.g., audio waveform) to produce an output (e.g., sentence), RNN-T continuously processes input samples and streams output symbols, a feature that is particularly attractive for real-time communications. For example, speech recognition using RNN-T may output characters as spoken language one after another. Here, RNN-T uses a feedback loop that feeds back the symbols predicted by the model to itself to predict the next symbols. Because decoding the RNN-T involves beam searching through a single neural network rather than a large decoder graph, the RNN-T can be extended to a fraction of the size of the server-based speech recognition model. With reduced size, the RNN-T may be fully deployed on the device and capable of running offline (i.e., without a network connection); thus, the unreliability issues of the communication network are avoided.
In addition to speech recognition systems that operate with low latency, speech recognition systems also need to accurately recognize speech. Typically, for models that perform speech recognition, a metric that can define model accuracy is Word Error Rate (WER). WER refers to a measure of how many words have changed compared to the number of words actually spoken. Typically, changes to these words refer to substitutions (i.e., when a word is replaced), insertions (i.e., when a word is added), and/or deletions (i.e., when a word is omitted). For example, the speaker says "car," but the ASR system transcribes the word "car" to "bar. This is due to an alternative example of phonetic symbol similarity. When measuring the ability of an ASR system compared to other ASR systems, the WER may indicate some measure of improved or quality ability relative to another system or some baseline.
While the RNN-T model shows promise as a powerful candidate model for speech recognition on devices, the RNN-T model alone still lags large, most advanced conventional models (e.g., server-based models with individual AM, PM, and LM) in terms of quality (e.g., speech recognition accuracy). However, the speech recognition quality of the non-streaming E2E LAS model is comparable to the large most advanced conventional model. To take advantage of the quality of the non-streaming E2E LAS model, embodiments herein are directed to a two-wheel speech recognition system (e.g., shown in fig. 2A) that includes a first wheel assembly of an RNN-T network and then a second wheel assembly of the LAS network. With this design, the two rounds of models benefit from the streaming nature of the RNN-T model with low latency, while the accuracy of the RNN-T model is improved by incorporating the second round of the LAS network. Although the LAS network increases latency compared to the RNN-T only model, the increase in latency is quite slight and complies with the latency constraints of operation on the device. In terms of accuracy, the two-round model achieved a 17% to 22% reduction in WER compared to RNN-T alone, and had a similar WER compared to the large conventional model.
In the two-round model, the non-streaming LAS model re-scores, for example, the streaming hypotheses from the first round. This second round LAS model approach focuses on sound effects to re-score the hypotheses. In contrast, an alternative approach, referred to as a class of neural correction models, uses text rather than sound effects to generate hypotheses. In other words, to refine the assumptions in the second round, different variables may need to be addressed. To this end, the model presented herein is a variation on the two-round RNN-T/LAS model. This variant uses a trial network that combines sound effects and a first-round text hypothesis for the second round of the two-round model. By using a trial network, a two-round model (e.g., as shown in fig. 2B) may become more accurate than a two-round model without a trial network (e.g., as shown in fig. 2A), and also more accurate than a large conventional speech recognition model. For example, in some tests, the two-round of trial model achieved a relative WER reduction of 12% compared to the two-round model without the trial network, and achieved a relative WER reduction of nearly 21% compared to the large conventional speech recognition model.
Fig. 1A and 1B are examples of a speech environment 100. In the speech environment 100, the manner in which the user 10 interacts with a computing device, such as the user device 110, may be through voice input. The user devices 110 (also commonly referred to as devices 110) are configured to capture sound (e.g., streaming audio data) from one or more users 10 within the speech-enabled environment 100. Here, the streaming audio data 12 may refer to a spoken utterance of the user 10 that serves as an audible query, a command of the device 110, or an audible communication captured by the device 110. The speech-enabled system of the device 110 may pose a query or command by answering the query and/or causing the command to be executed.
In some examples, such as in fig. 1A, the user 10 interacts with a program or application 118 of the user device 110 using the speech recognizer 200. For example, FIG. 1A depicts a user 10 communicating with an automated assistant application. In this example, the user 10 asks the automated assistant: "What time is the conceert tonight (which is a concert this evening)? ". This problem from the user 10 is the spoken utterance 12 captured by the audio capture device 116a and processed by the audio subsystem 116 of the user device 110. In this example, the speech recognizer 200 of the user device 110 receives the audio input 202 of "What time is the conceert tonight" (e.g., as an acoustic frame) and transcribes the audio input 202 into a textual recording 204 (e.g., a textual representation of "What time is the conceert tonight. Here, the automated assistant of the application 118 may respond to questions posed by the user 10 using natural language processing. Natural language processing generally refers to the process of interpreting a written language (e.g., the word record 204) and determining whether the written language prompts any actions. In this example, the automated assistant uses natural language processing to recognize that the question from the user 10 is about the user's schedule, and more particularly about a concert on the user's schedule. By recognizing these details with natural language processing, the automated assistant will return a response to the user query with a response status of "Doors open at 8:30pm for the concert tonight (concert tonight starts at 8:30 pm). In some configurations, the natural language processing may occur on a remote system in communication with the data processing hardware 112 of the user device 110.
Fig. 1B is another example of speech recognition using speech recognizer 200. In this example, the user 10 associated with the user device 110 is communicating with a friend named Jane Doe using the communication application 118. Here, the user 10 named Ted communicates with Jane by having the speech recognizer 200 transcribe his speech input. The audio capture device 116 captures these speech inputs and communicates them in digital form (e.g., acoustic frames) to the speech recognizer 200. The speech recognizer 200 transcribes these acoustic frames into text that is sent to Jane via the communication application 118. Because this type of application 118 communicates via text, the word records 204 from the speech recognizer 200 can be sent to Jane without further processing (e.g., natural language processing).
In some examples, such as fig. 2A and 2B, the speech recognizer 200 is configured as a two-wheel architecture. In general, a two-pass architecture of the speech recognizer 200 includes at least one encoder 210, an RNN-T decoder 220, and an LAS decoder 230. Here, fig. 2A depicts a conventional two-wheel architecture, while fig. 2B depicts an enhanced two-wheel architecture with a conferencing network 240. As can be seen in these figures, the enhanced two-wheel architecture of fig. 2B builds on top of the basic two-wheel structure of fig. 2A. In two rounds of decoding, the second round 208 (shown, for example, as LAS decoder 230) may use techniques such as lattice re-scoring or n-best re-ranking to improve the initial output from the first round 206 (shown, for example, as RNN-T decoder 220). In other words, the RNN-T decoder 220 generates the stream prediction, and the LAS decoder 230 finally determines the prediction. Here, in particular, the LAS decoder 230 pairs the streaming hypotheses 222y from the RNN-T decoder 220 R And re-scoring is performed. Although it is generally discussed that the LAS decoder 230 functions in the re-scoring mode, the re-scoring mode is for the streaming hypotheses 222y from the RNN-T decoder 220 R For re-scoring, the LAS decoder 230 can also operate in different modes, such as a beam search mode, depending on design or other factors (e.g., utterance length).
The at least one encoder 210 is configured to receive acoustic frames corresponding to the streaming audio data 12 as the audio input 202. The acoustic frames may have been previously processed by the audio subsystem 116 into parameterized acoustic frames (e.g., mel frames and/or spectral frames). In some embodiments, the parameterized acoustic frame corresponds to a log-mel filter bank energy having a log-mel characteristic. For example, the parameterized input acoustic frame output by the audio subsystem 116 and input into the encoder 210 may be represented as x ═ x (x ═ y 1 ,...,x T ) Whereinaudio input 202, the encoder 210 is configured to generate an encoding e. For example, the encoder 210 generates an encoded acoustic frame (e.g., an encoded mel frame or acoustic embedding).
Although the structure of the encoder 210 may be implemented in different ways, in some embodiments the encoder 210 is a Long Short Term Memory (LSTM) neural network. For example, encoder 210 includes eight LSTM layers. Here, each layer may have 2048 hidden units, followed by a 640-dimensional projection layer. In some examples, a temporal reduction layer with a reduction factor N-2 is inserted after the second LSTM layer of encoder 210.
In some configurations, encoder 210 is a shared encoder network. In other words, each wheel 206, 208 shares a single encoder 210, rather than each wheel network 206, 208 having its own separate encoder. By sharing the encoder, the ASR speech recognizer 200 using the two-pass architecture can reduce its model size and/or its computational cost. Here, the reduction in model size may help enable the speech recognizer 200 to function well on the device at all.
During the first pass 206, the encoder 210 receives each acoustic frame of the audio input 202 and generates an output 212 (e.g., shown as encoding e of the acoustic frame). RNN-T decoder 220 receives output 212 for each frame and generates output 222 in a streaming manner at each time step, shown as hypothesis y R . In some embodiments, the RNN-T decoder 220 includes a predictive network and a joint network. Here, the prediction network may have: two LSTM layers, each layer having 2048Hidden unit and 640-dimensional projection; and an embedded layer having 128 cells. The output 212 of the encoder 210 and the prediction network may be fed into a joint network comprising a softmax prediction layer. In some examples, the joint network of RNN-T decoders 220 includes 640 hidden units followed by a softmax layer that predicts 4096 case-mix word blocks.
In the two-pass model of fig. 2A, during the second pass 208, the LAS decoder 230 receives the output 212 for each frame from the encoder 210 and generates a signal designated as hypothesis y L Output 232 of (a). When the LAS decoder 230 operates in the beam search mode, the LAS decoder 230 generates only the output 232 from the output 212; the output 222 of the RNN-T decoder 220 is ignored. When the LAS decoder 230 operates in the re-scoring mode, the LAS decoder 230 obtains the first K hypotheses from the RNN-T decoder 220, and then the LAS decoder 230 runs on each sequence in a teacher-forced mode with attention on the output 212 to calculate a score. For example, the score combines the log probability of the sequence and the attention coverage penalty. The LAS decoder 230 selects the sequence with the highest score as output 232. Here, in the re-scoring mode, the LAS decoder 230 may include multi-headed attention (e.g., having four heads) to address the output 212. Also, the LAS decoder 230 may be a two-layer LAS decoder 230 having a softmax layer for prediction. For example, each layer of the LAS decoder 230 has 2048 hidden units followed by 640-dimensional projection. The Softmax layer may include 4096 dimensions to predict the same case blend word block from the Softmax layer of the RNN-T decoder 220.
Referring to fig. 2B, the first round 206 remains unchanged, but the second round 208 uses a trial decoder 240 that includes, in addition to the LAS decoder 230, a trial encoder 242 and two attention mechanisms 244, 246, a hypothetical attention mechanism 244, and an acoustic attention mechanism 246. Here, in contrast to the speech recognizer 200 of fig. 2A, the speech recognizer 200 of fig. 2B addresses both acoustics by addressing the output 212 of the encoder 210 at the acoustic attention mechanism 246 and addresses the first round of assumptions by addressing the output 222 of the RNN-T decoder 220 at the assumption attention mechanism 244. In contrast, the speech recognizer 200 of fig. 2A addresses the sound effects by addressing only the output 212 of the encoder 210 at the LAS decoder itself. The trial decoder 240 generates the output 248 (e.g., a predicted sequence) by working on two sound effects (e.g., the output 212 denoted as e) and a first round of assumptions. Here, each attention mechanism 244, 246 forms a context vector 245, 247 (e.g., an acoustic context vector 247 and a hypothesis context vector 245) that is input into the LAS decoder 230 of the review decoder 240. These context vectors 245, 247 may be concatenated as inputs into the LAS decoder 230. Much like the attention mechanism inherent to the LAS decoder 230 described above, the attention mechanisms 244, 246 may have a similar structure such that each attention mechanism 244, 246 includes multiple heads of attention (e.g., four heads).
The output 222 of the RNN-T decoder 220 (i.e., the output 222 of the first round 206) is further encoded by the trial encoder 242 to form an encoded hypothesis 243 (e.g., shown as h) B ). When further encoding the output 222, the review encoder 242 may also encode the output 222 to obtain useful context information for inclusion in the encoded hypotheses 243. For example, the trial encoder 242 is a bi-directional encoder capable of including context information. The trial encoder 242 may also be configured to encode the plurality of hypotheses 222. For example, the trial encoder 242 encodes each hypothesis 222 individually, and then concatenates each encoded hypothesis together. Structurally, the trial encoder 242 may be an LSTM encoder (e.g., a 2-layer bi-directional LSTM encoder). As an LSTM encoder, each layer of the trial encoder 242 may include 2048 hidden units followed by 320-dimensional projection.
During the second round 208, the speech recognizer 200 of fig. 2B may perform a beam search mode or a re-scoring mode to generate the output 248. In the re-scoring mode, the review decoder 240 may run on the output 222 in the teacher-forced mode. Additionally or alternatively, using the bi-directional conferencing encoder 242 may help improve the relative WER of the conferencing decoder two-wheel architecture when in re-scoring mode.
In some examples, the speech recognizer 200 of fig. 2B also includes an acoustic encoder 250. For example, the trial encoder 242 and the LAS decoder 230 may have some degree of incompatibility, which can be overcome by using the acoustic encoder 250. In other words, the acoustic encoder 250 may further encode the output 212. In some implementations, the acoustic encoder 250 is an LSTM encoder (e.g., a two-layer LSTM encoder) that further encodes the output 212 from the encoder 210. By including additional encoders, the encoder 210 can still be saved as a shared encoder between the wheels 206, 208. Additionally or alternatively, the acoustic encoder 250 may be a one-way encoder to reduce potential latency within the enhanced two-wheel architecture.
Neural networks are typically trained by defining back propagation of a loss function (e.g., a cross-entropy loss function). For example, the loss function is defined as the difference between the actual output of the network and the expected output of the network. Here, the speech recognizer 200 can be trained using a cross-entropy loss method or a joint training method. In the cross-entropy loss approach, a speech recognizer 200, such as the speech recognizer 200 with the speech decoder 240 (i.e., the speech-based recognizer 200), is trained in a two-step training process. During the first step of the training process, the RNN-T decoder 220 is trained. After the RNN-T decoder 220 has been trained, the parameters of the RNN-T decoder 220 are fixed, and only the trial decoder 240 and the additional encoder layers (e.g., the trial encoder 242 and the acoustic encoder 250) are trained.
In contrast, sometimes training the trial decoder 240 while fixing the parameters of the RNN-T decoder 220 is not optimal because the components of the trial-based recognizer 200 are not jointly updated. As an alternative training method, the trial-based recognizer 200 may be jointly trained using a combined loss method represented by the following equation:
L joint (θ e ，θ 1 ，θ 2 )＝L RNNT (θ e ，θ 1 )+λL CE (θ e ，θ 2 ) (1)
wherein L is RNNT (-) is the RNN-T loss, and λ L CE (-) is a consultationCross entropy loss at decoder 240. Theta e 、θ 1 And theta 2 Representing parameters of the encoder 210, the RNN-T decoder 220, and the trial decoder 230, respectively. Here, joint training is similar to the concept of "deep-tuning", but without a pre-trained decoder.
After any of these approaches, the speech recognizer 200 can be further trained using minimum wer (mwer) loss to optimize the expected word error rate by using the n-best hypothesis. This MWER loss training can be represented by the following equation:
whereinith hypothesis 248 from the trial decoder 240, and
L′ MWER (x,y * )＝L MWER (x,y * )+αL CE (x,y * ) (3)
fig. 3 is a flow diagram of an example arrangement of operations of a method 300 of performing automated speech recognition (e.g., ASR) using a two-round-of-trial architecture. At operation 302, the method 300 receives a first round of hypotheses 222 and an encoded acoustic frame 212. Here, a first round of hypotheses 222 are generated by the RNN decoder 220 for the encoded acoustic frames 212. At operation 304, method 300 includes encoding a first round of hypotheses 222 at a hypothesis encoder 242. At operation 306, the method 300 includes generating a first context vector 247 using the first attention mechanism 246 and generating a second context vector 245 using the second attention mechanism 244. The first attention mechanism 246 is directed to the encoded acoustic frames 212. A second attention mechanism 244 addresses the first round of assumption 243 encoded. At operation 308, the method 300 includes decoding, at the context vector decoder 230, the first context vector 247 and the second context vector 245 to form a second round of hypotheses 248.
Fig. 4 is a schematic diagram of an example computing device 400 (e.g., system 400) that can be used to implement the systems (e.g., speech recognizer 200) and methods (e.g., method 300) described in this document. Computing device 400 is intended to represent various forms of digital computers, such as notebook computers, desktop computers, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The memory 420 stores information within the computing device 400 non-temporarily. The memory 420 may be a computer-readable medium, a volatile memory unit or a nonvolatile memory unit. Non-transitory memory 420 may be a physical device for storing programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by computing device 400. Examples of non-volatile memory include, but are not limited to, flash memory and Read Only Memory (ROM)/Programmable Read Only Memory (PROM)/Erasable Programmable Read Only Memory (EPROM)/Electrically Erasable Programmable Read Only Memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), Phase Change Memory (PCM), and magnetic disks or tape.
The storage device 430 can provide mass storage for the computing device 400. In some implementations, the storage device 430 is a computer-readable medium. In various different implementations, the storage device 430 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or in other configurations. In an additional embodiment, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as the memory 420, the storage device 430, or memory on processor 410.
As shown in the figures, computing device 400 may be implemented in a number of different forms. For example, it may be implemented as a standard server 400a or multiple times in a group of such servers 400a, as a notebook computer 400b, or as part of a rack server system 400 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and in particular by, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the present disclosure may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen) for displaying information to the user and optionally a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other classes of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Several embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (26)
1. A computer-implemented method (300) that, when executed on data processing hardware (112), causes the data processing hardware (112) to perform operations comprising:
receiving a first round of hypotheses (222) and encoded acoustic frames (212), the first round of hypotheses (222) being generated by a Recurrent Neural Network (RNN) decoder model (220) for the encoded acoustic frames (212);
encoding the first round of hypotheses (222) at a hypothesis encoder (242);
generating a first context vector (247) using a first attention mechanism (246) devoted to the encoded acoustic frame (212);
generating a second context vector (245) using a second attention mechanism (244) devoted to the encoded first round hypothesis (222); and
decoding, at a context vector decoder (230), the first context vector (247) and the second context vector (245) to form a second round of hypotheses (222).
2. The computer-implemented method (300) of claim 1, wherein decoding the first context vector (247) and the second context vector (245) comprises decoding a concatenation of the first context vector (247) and the second context vector (245).
3. The computer-implemented method (300) of claim 1 or 2, wherein encoding the first round of hypotheses (222) comprises bi-directionally encoding the first round of hypotheses (222) at the hypothesis encoder (242) to generate context information from the first round of hypotheses (222).
4. The computer-implemented method (300) of claim 3, wherein the hypothetical encoder (242) comprises a Long Short Term Memory (LSTM) network.
5. The computer-implemented method (300) of any of claims 1-4, wherein the operations further comprise:
encoding the acoustic frame (212) at a shared encoder (210); and
generating the first round of hypotheses (222) at the RNN decoder model (220) based on the encoded acoustic frames (212) communicated from the shared encoder (210).
6. The computer-implemented method (300) of claim 5, wherein the operations further comprise generating acoustic embedding (232) at a unidirectional audio encoder (250) based on the encoded acoustic frames (212) communicated from the shared encoder (210).
7. The computer-implemented method (300) of claim 6, wherein the unidirectional audio encoder (250) comprises a long-short term memory (LSTM) network.
8. The computer-implemented method (300) of claim 7, wherein the LSTM network includes at least two layers.
9. The computer-implemented method (300) of any of claims 1-8, wherein the operations further comprise:
training the RNN decoder model (220); and
training a trial decoder (240) while parameters of a trained RNN decoder model (220) remain fixed, the trial decoder (240) comprising the hypothesis encoder (242), the first attention mechanism (246), the second attention mechanism (244), and the context vector decoder (230).
10. The computer-implemented method (300) of claim 9, wherein the operations further comprise minimizing a word error rate during training of the RNN decoder model (220) and the trial decoder (240).
11. The computer-implemented method (300) of any of claims 1-10, wherein the operations further comprise jointly training the RNN decoder model (220) and a trial decoder (240), the trial decoder (240) comprising the hypothesis encoder (242), the first attention mechanism (246), the second attention mechanism (244), and the context vector decoder (230).
12. The computer-implemented method (300) of claim 11, wherein the operations further comprise minimizing a word error rate during joint training of the RNN decoder model (220) and the trial decoder (240).
13. The computer-implemented method (300) of any of claims 1-12, wherein the data processing hardware (112) resides on a user equipment (110).
14. A system (400) comprising:
data processing hardware (112); and
memory hardware (114) in communication with the data processing hardware (112), the memory hardware (114) storing instructions that, when executed on the data processing hardware (112), cause the data processing hardware (112) to perform operations comprising:
receiving a first round of hypotheses (222) and encoded acoustic frames (212), the first round of hypotheses (222) being generated by a Recurrent Neural Network (RNN) decoder model (220) for the encoded acoustic frames (212);
encoding the first round of hypotheses (222) at a hypothesis encoder (242);
generating a first context vector (247) using a first attention mechanism (246) devoted to the encoded acoustic frame (212);
generating a second context vector (245) using a second attention mechanism (244) devoted to the encoded first round hypothesis (222); and
decoding, at a context vector decoder (230), the first context vector (247) and the second context vector (245) to form a second round of hypotheses (222).
15. The system (400) of claim 14, wherein decoding the first context vector (247) and the second context vector (245) comprises decoding a concatenation of the first context vector (247) and the second context vector (245).
16. The system (400) of claim 14 or 15, wherein encoding the first round of hypotheses (222) includes bi-directionally encoding the first round hypotheses (222) at the hypothesis encoder (242) to generate context information from the first round hypotheses (222).
17. The system (400) of claim 16, wherein said hypothesis encoder (242) comprises a Long Short Term Memory (LSTM) network.
18. The system (400) according to any one of claims 14-17, wherein the operations further include:
encoding the acoustic frame (212) at a shared encoder (210); and
generating the first round of hypotheses (222) at the RNN decoder model (220) based on the encoded acoustic frames (212) communicated from the shared encoder (210).
19. The system (400) of claim 18, wherein the operations further comprise generating acoustic embedding (232) at a unidirectional audio encoder (250) based on the encoded acoustic frames (212) communicated from the shared encoder (210).
20. The system (400) of claim 19, wherein said unidirectional audio encoder (250) comprises a Long Short Term Memory (LSTM) network.
21. The system (400) of claim 20, wherein the LSTM network includes at least two layers.
22. The system (400) according to any one of claims 14-21, wherein the operations further include:
training the RNN decoder model (220); and
training a trial decoder (240) while parameters of a trained RNN decoder model (220) remain fixed, the trial decoder (240) comprising the hypothesis encoder (242), the first attention mechanism (246), the second attention mechanism (244), and the context vector decoder (230).
23. The system (400) of claim 22, wherein the operations further comprise minimizing a word error rate during training of the RNN decoder model (220) and the trial decoder (240).
24. The system (400) according to any one of claims 14-23, wherein the operations further include jointly training the RNN decoder model (220) and a trial decoder (240), the trial decoder (240) including the hypothesis encoder (242), the first attention mechanism (246), the second attention mechanism (244), and the context vector decoder (230).
25. The system (400) of claim 24, wherein the operations further comprise minimizing a word error rate during joint training of the RNN decoder model (220) and the trial decoder (240).
26. The system (400) according to any one of claims 14-25, wherein the data processing hardware (112) resides on a user equipment (110).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062963721P | 2020-01-21 | 2020-01-21 | |
US62/963,721 | 2020-01-21 | ||
PCT/US2021/013449 WO2021150424A1 (en) | 2020-01-21 | 2021-01-14 | Deliberation model-based two-pass end-to-end speech recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115004296A true CN115004296A (en) | 2022-09-02 |
Family
ID=74661446
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180009642.6A Pending CN115004296A (en) | 2020-01-21 | 2021-01-14 | Two-wheeled end-to-end speech recognition based on consultation model |
Country Status (6)
Country | Link |
---|---|
US (2) | US11908461B2 (en) |
EP (1) | EP4062400A1 (en) |
JP (2) | JP7222153B1 (en) |
KR (1) | KR20220130699A (en) |
CN (1) | CN115004296A (en) |
WO (1) | WO2021150424A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN110648658B (en) * | 2019-09-06 | 2022-04-08 | 北京达佳互联信息技术有限公司 | Method and device for generating voice recognition model and electronic equipment |
US11783811B2 (en) * | 2020-09-24 | 2023-10-10 | International Business Machines Corporation | Accuracy of streaming RNN transducer |
US11532312B2 (en) * | 2020-12-15 | 2022-12-20 | Microsoft Technology Licensing, Llc | User-perceived latency while maintaining accuracy |
US11908458B2 (en) * | 2020-12-29 | 2024-02-20 | International Business Machines Corporation | Customization of recurrent neural network transducers for speech recognition |
US11908454B2 (en) | 2021-12-01 | 2024-02-20 | International Business Machines Corporation | Integrating text inputs for training and adapting neural network transducer ASR models |
KR102478763B1 (en) * | 2022-06-28 | 2022-12-19 | (주)액션파워 | Method for speech recognition with grapheme information |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH11119795A (en) * | 1997-10-16 | 1999-04-30 | Nec Corp | Method and device for concentration and synthesis of feature quantity |
US10176799B2 (en) * | 2016-02-02 | 2019-01-08 | Mitsubishi Electric Research Laboratories, Inc. | Method and system for training language models to reduce recognition errors |
US10176802B1 (en) * | 2016-03-21 | 2019-01-08 | Amazon Technologies, Inc. | Lattice encoding using recurrent neural networks |
GB2559618B (en) * | 2017-02-13 | 2020-07-08 | Toshiba Kk | A dialogue system, a dialogue method and a method of adapting a dialogue system |
US11100920B2 (en) * | 2019-03-25 | 2021-08-24 | Mitsubishi Electric Research Laboratories, Inc. | System and method for end-to-end speech recognition with triggered attention |
US11158307B1 (en) * | 2019-03-25 | 2021-10-26 | Amazon Technologies, Inc. | Alternate utterance generation |
US11615785B2 (en) * | 2019-05-10 | 2023-03-28 | Robert Bosch Gmbh | Speech recognition using natural language understanding related knowledge via deep feedforward neural networks |
US11373639B2 (en) * | 2019-12-12 | 2022-06-28 | Mitsubishi Electric Research Laboratories, Inc. | System and method for streaming end-to-end speech recognition with asynchronous decoders pruning prefixes using a joint label and frame information in transcribing technique |
-
2021
- 2021-01-14 KR KR1020227025101A patent/KR20220130699A/en active Search and Examination
- 2021-01-14 CN CN202180009642.6A patent/CN115004296A/en active Pending
- 2021-01-14 US US17/149,018 patent/US11908461B2/en active Active
- 2021-01-14 JP JP2022544204A patent/JP7222153B1/en active Active
- 2021-01-14 WO PCT/US2021/013449 patent/WO2021150424A1/en unknown
- 2021-01-14 EP EP21706060.7A patent/EP4062400A1/en active Pending
-
2023
- 2023-02-02 JP JP2023014655A patent/JP2023041867A/en active Pending
- 2023-02-06 US US18/164,923 patent/US20230186907A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4062400A1 (en) | 2022-09-28 |
JP7222153B1 (en) | 2023-02-14 |
JP2023513430A (en) | 2023-03-31 |
US20230186907A1 (en) | 2023-06-15 |
KR20220130699A (en) | 2022-09-27 |
US11908461B2 (en) | 2024-02-20 |
JP2023041867A (en) | 2023-03-24 |
WO2021150424A1 (en) | 2021-07-29 |
US20210225369A1 (en) | 2021-07-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7222153B1 (en) | Derivation model-based two-pass end-to-end speech recognition | |
EP4078572B1 (en) | Proper noun recognition in end-to-end speech recognition | |
KR20230147685A (en) | Word-level reliability learning for subword end-to-end automatic speech recognition | |
US20230186901A1 (en) | Attention-Based Joint Acoustic and Text On-Device End-to-End Model | |
KR20230158608A (en) | Multi-task learning for end-to-end automatic speech recognition confidence and erasure estimation. | |
EP4128219B1 (en) | Emitting word timings with end-to-end models | |
KR102637025B1 (en) | Multilingual rescoring models for automatic speech recognition | |
WO2023059980A1 (en) | Transducer-based streaming deliberation for cascaded encoders | |
WO2023183206A1 (en) | Deliberation by text-only and semi-supervised training |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |