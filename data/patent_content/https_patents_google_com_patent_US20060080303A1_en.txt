US20060080303A1 - Method, apparatus, and computer program product for indexing, synchronizing and searching digital data - Google Patents
Method, apparatus, and computer program product for indexing, synchronizing and searching digital data Download PDFInfo
- Publication number
- US20060080303A1 US20060080303A1 US11/245,100 US24510005A US2006080303A1 US 20060080303 A1 US20060080303 A1 US 20060080303A1 US 24510005 A US24510005 A US 24510005A US 2006080303 A1 US2006080303 A1 US 2006080303A1
- Authority
- US
- United States
- Prior art keywords
- data
- stored data
- search
- indexing
- index
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
Definitions
- the present invention is related to searching digital data.
- An embodiment of the present invention provides a method comprising the following steps. Indexing stored data without interrupting use of the stored data. Synchronizing the indexed data with data stored subsequent to the indexing step. Searching at least one of the synchronized data and the indexed data. Outputting results of the searching step.
- Another embodiment of the present invention provides a system comprising a controller, at least one storage device, a graphical user interface, and a search module.
- the storage device stores initial data, indexed data, and synchronized data under control of the controller.
- the graphical user interface is controlled by the controller and enables a user to enter search commands.
- the search module searches at least one of the indexed data and the synchronized data.
- the graphical user interface displays the results of the search module.
- FIG. 1 shows a system, according to one embodiment of the present invention.
- FIG. 2 shows an EMAIL window including search program command areas on a toolbar, according to one embodiment of the present invention.
- FIG. 3 shows a search window, according to one embodiment of the present invention.
- FIG. 5 shows a display of a user system, according to one embodiment of the present invention.
- FIG. 6 shows an exemplary computer system for performing operations associated with a search program, according to one embodiment of the present invention.
- FIG. 7 shows a flowchart depicting a method, according to one embodiment of the present invention.
- FIG. 8 shows a flowchart depicting an indexing method, according to one embodiment of the present invention.
- FIG. 10 shows an exemplary notification based method, according to one embodiment of the present invention.
- FIG. 11 shows an exemplary non notification based synchronization method, according to one embodiment of the present invention.
- FIG. 12 shows an exemplary deleted/moved message synchronization method, according to one embodiment of the present invention.
- FIG. 13 shows an exemplary dropped notification synchronization method, according to one embodiment of the present invention.
- FIG. 14 shows an exemplary post application launch based synchronization method, according to one embodiment of the present invention.
- FIG. 15 shows an online/offline synchronization method, according to one embodiment of the present invention.
- One or more embodiments of the present invention provide a digital data (e.g., email data, stored data, messages, folders, files, etc., which are all used interchangeably throughout) search module that is, for example, downloadable onto a local computer via, for example, a computer readable medium, the Internet from a website, or through other known methods. Once downloaded onto the local computer, the search module is installed and then associates itself with one or more other programs already on the local computer. Once installed and opened, the search module has several functions and operations, for example, a building and maintaining an index function (e.g., indexing and synchronizing) and a searching function.
- an index function e.g., indexing and synchronizing
- the search program can build an index of digital data, which can allow for very rapid textual searches against the index. Then, the search program can maintain the index through synchronizing changes to the stored data or adding newly stored data to the index.
- a data object in the storage device is compared to a data object in the index
- the data object in the storage device is compared to corresponding and/or related index information in the index.
- the indexed based searching function can allow for more efficient and effective searching of digital data on or associated with the local computer, for example, searching of emails, previously viewed website addresses, files, folders, calendars, address books, contacts, appoints, documents, etc. that may be stored locally or remotely via a wired or wireless network.
- the index based searching allows for searching in five one hundredths of a second.
- actual performance will vary based on a number of factors, including but not limited to hardware configuration.
- the search program allows for instant search of digital data, for example, but not limited to, email data, website addresses, etc.
- the search program builds an index of the user's saved mail, and then allows for the ability to search gigabytes of data and quickly obtain results, often in a few hundredths of a second or less.
- FIG. 1 is an exemplary environment 100 according to one embodiment of the present invention.
- one or more user systems 102 include at least a CPU 112 , a storage device 118 and a display 110 .
- an email program 114 and browser 116 are executing in the user system 102 .
- the user system 102 is connected to the Internet 108 .
- the user system 102 also includes a search module 104 and search indexes 120 .
- the search module 104 can be integrated and/or associated with other programs, such as but not limited to the email program 114 and the browser 116 .
- An index e.g., each of search indexes 120
- the fields for email messages can be, but are not limited to, subject, body, from, to, cc, bcc, logical fields for type of message, size, attachments (yes or no), last modified date, and internal fields such as long term entryid, record key, search key, folder id, etc. Other fields can also be used. Fields for email as well as other data types will be apparent to persons skilled in the relevant art(s). These fields (or combinations thereof) can be indexed and used for searching. For example, a user can either chose to search a set of fields for a text search or search across all fields.
- search module 104 One function of search module 104 is to detect when an action has occurred to an object in a store, such as storage 118 , and then act on that action in order to interrogate the object for its properties to properly index and/or synchronize the object for future searching.
- search module 104 may be based on a C-LUCENE portion of an open source search engine called LUCENE that utilizes a JAVA library for indexing text.
- email searching leverages additional structure found in an email, as compared to searching a webpage or other free-form data.
- an embodiment of the invention enables searching in a number of field, such as to, from, cc, bcc, subject, body, etc.
- email searching involves searching of all aspects of an email product, such as tasks, appointments, calendar, address book, etc. (hereinafter all are collectively referred to as messages, unless otherwise discussed).
- search module 104 is designed to integrate with MICROSOFT OUTLOOK® (“Outlook”), while in other examples the search module 104 will integrate with MICROSOFT OUTLOOK EXPRESS® (“Outlook Express”), the Start button on the MICROSOFT WINDOWS® task bar, INTERNET EXPLORER® (IE), instant messaging clients, as well as other products.
- Outlook MICROSOFT OUTLOOK®
- IE INTERNET EXPLORER®
- integration involves two aspects: (1) user interface integrated with an underlying client, and (2) synchronizing the indices or objects in the index with the underlying data store (e.g., folders and messages) in current or real time (e.g., whenever an action occurs within a message store).
- the underlying data store e.g., folders and messages
- This latter aspect is more challenging because of the varied notification methodology each underlying email client uses when messages are created, sent, received, moved, copied, deleted, renamed, draft, resaved draft, etc. for different types of folders, for example, private, public, etc.
- the elements in environment 100 and/or user system 102 are only exemplary and more or less elements could be used based on a desired configuration of the user. Also, while user system 102 is shown as being in a single location or product, the parts might be coupled together from one or more remote locations. Further, additional peripheral elements may be connected to environment 100 and/or user system 102 , as would be appreciated by a skilled artisan upon reading and understanding this description. All these combinations and permutations are contemplated within the scope of the present invention.
- FIG. 2 shows a window 200 associated with email product 114 as seen on display 110 , according to one embodiment of the present invention.
- Window 200 includes a toolbar 220 that has a command button 222 for the search module 104 , as well as buttons for functions associated with the search module 104 , such as approve 224 and block 226 related to spam filtering.
- the toolbar 220 also includes a search box 228 .
- FIG. 3 shows a search window 300 , according to one embodiment of the present invention.
- the search window 300 includes a search results window 336 .
- This embodiment of the invention displays, for each completed search, an ICON representing the area searched (i.e., EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, IM, etc.), FROM, TO, SUBJECT, DATE, and OTHER (some of these fields may not apply to all objects found by a given search).
- FIG. 4 shows search window 400 , according to another embodiment of the present invention.
- Search window 400 includes a tool bar 440 associated with search module 104 that includes a search area 442 and search choices 446 EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, and IM.
- the search choices 446 enable a user to search in one or more of these areas.
- Search results are displayed in a search results window 444 .
- This embodiment of the invention displays, for each completed search, the TYPE (i.e., whether the hit was in EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, IM, etc.), SUBJECT (for example, the file name or an excerpt of the identified object), DATE, FOLDER, and SIZE.
- the results window 444 may also display the number of hits in each area (for example, 123 hits in email, 1,234,344 hits on the Web, 2 hits in IM, etc.).
- the results window 444 also allows the user to perform the same search (or different searches) in any of the other areas 446 .
- the user may perform an email search, and then perform the same search on the Web by clicking the corresponding search choice 446 .
- the search module 104 displays in summary form the results (perhaps just counts) of the same search in other areas. For example, if a user searches a certain text string in an email client, summary results (number of hits) of the same search in IM, Internet, Internet email, and desktop data may also be displayed in the results window 444 , along with links to enable the user to easily perform the searches.
- Search results can also include other links relevant to the search.
- search module 104 can detect information relevant to the search or the search results, such as an address in the message or a contact, and provide a link to a map.
- search module 104 can detect information about a flight in an email message search result and provide a link to a flight tracker.
- the search program can detect information about a company in a contact or an email message search result and provide a link to the company or stock information.
- These links can be based on contact, patterns, words, symbols, formats of information, etc., either found in a search string or the search results.
- the links can also be based on a profile of a user.
- the results window 444 displays advertisements.
- the ads are chosen based on a number of factors, such as the search, content of the results, a profile of the user, etc., or combinations thereof. For example, if an email message includes a question to another person regarding a topic, the ads can include information regarding that topic.
- the invention enables search results to be displayed using simple text, or in HTML.
- search results across all search areas are displayed in either simple text form or HTML.
- Using a common format enables the advertisements to be unobtrusively integrated into the search results, thereby increasing the possibility that users will peruse and/or click-through the advertisements from one search area to the next (desktop, email, browser history, etc.).
- FIG. 5 shows an example display 110 having a number of open windows each corresponding to one or more active programs, including an EMAIL window 550 , an EMAIL message window 560 , a BROWSER window 570 , and a WEB PAGE window 580 .
- the search module 104 can be integrated with these, as well as other, applications.
- each open window 550 , 560 , 570 , and 580 includes a tool bar including a search box 590 associated with search module 104 .
- a desktop toolbar 595 includes a search box 590 associated with search module 104 .
- the desktop toolbar 595 is located next to the operating system START button.
- search boxes 590 i.e., the search module 104
- these applications for example, the email program 114 and the browser program 116
- APIs application program interfaces
- the context or location of the search box 590 identifies the default area in which searches initiated from that search box are directed. For example, searches initiated in the EMAIL window 550 are performed among email data. More particularly, in Outlook and Outlook Express, search boxes 590 will default to searching email (and other PIM data such as contacts, appointments, etc.). Similarly, search boxes 590 in IE will default to searching the web and/or browser history (previously displayed pages), and the search box in the desktop toolbar 595 will search files in the local computer. Search boxes 590 used to search the Internet can be configured by the user to search using one or more particular search engines, such as GOOGLE, YAHOO, etc.
- Each search box 590 also enables searching in other areas via pop-up or drop-down windows, such as window 592 .
- the user can select the area to search by selecting among icons displayed next to the search boxes 590 (not shown in FIG. 5 ), where the icons correspond to the different search areas.
- the user may change the default search area settings of the search boxes 590 .
- FIGS. 3-5 are merely examples. Windows having different options and/or different layouts will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein. All such permutations and combinations are contemplated and within the scope of the present invention.
- Embodiments of the invention described herein can be implemented using well known computers, such as the example computer 600 shown in FIG. 6 .
- the computer 600 includes one or more processors 604 .
- Processor 604 can be a special purpose or a general purpose digital signal processor.
- the processor 604 is connected to a communications infrastructure 606 (for example, a bus or network).
- Computer system 600 also includes a main memory 605 , such as random access memory (RAM), and may also include secondary memory devices 610 .
- the secondary memory devices 610 may include, for example, a hard disk drive 612 and/or a removable storage drive 614 , representing a floppy disk drive, a CD drive, a DVD drive, a magnetic tape drive, an optical disk drive, etc.
- the removable storage drive 614 reads from and/or writes to a removable storage unit 615 in a well known manner.
- Removable storage unit 615 represents a floppy disk, magnetic tape, optical disk, CD, DVD, etc.
- the removable storage unit 618 includes a computer usable storage medium having stored therein computer software and/or data.
- secondary memory 610 may include other similar means for allowing computer programs or other instructions to be loaded into computer 600 .
- Such means may include, for example, a removable storage unit 622 and an interface 620 .
- Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM or PROM) and associated socket, etc.
- Computer system 600 may also include a communications interface 624 .
- Communications interface 624 allows software and data to be transferred between computer system 600 and external devices. Examples of communications interface 624 may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, wireless communication interfaces, etc.
- Software and data transferred via communications interface 624 are in the form of signals 658 (electromagnetic, optical, etc.) capable of being received and/or transmitted by communications interface 624 . These signals 624 traverse a communications path or medium 626 .
- Communications path 626 carries signals 625 and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, a wireless link, an RF link and/or other communications channels.
- Computer programs are stored in main memory 608 and/or secondary memory 610 . Computer programs may also be received via communications interface 624 . Such computer programs, when executed, enable the computer system 600 to implement the functions of the invention as discussed herein.
- Computer program products include a computer readable or useable medium in which computer programs are stored.
- the computer programs when executed, cause processor(s) 604 to perform the features and functions of the invention described herein.
- the invention is also directed to such computer program products having stored therein software that enables computer(s) to perform the functions described herein.
- FIG. 7 is a flowchart depicting a searching method 700 according to an embodiment of the present invention.
- the searching method 700 is performed by the search module 104 executing in the user system 102 .
- the search module 104 indexes data stored in the storage device 118 .
- the resulting indices form part of the search indexes 120 .
- the data indexed by the search module 104 in this step includes, but is not limited to, emails, calendars, tasks, appointments, address books, documents and other files or data objects stored in the user system.
- Such data is stored in storage device 118 , which in implementation may be one or more devices either local or remote (i.e., over a network) to computer system 102 .
- the indexing of step 702 is performed without interrupting access or use of the data in storage device 118 .
- step 704 the search module 104 synchronizes the indexed data with any changes to the data in the storage device 118 subsequent to operation of the indexing step 702 .
- This synchronization step allows for real-time updates to indexed objects to account for any changes that may have occurred to the stored data since indexing the stored data, e.g., deleting, moving, revising, etc, or to add any newly stored data to the index. This will allow for a later quick and accurate search on the indexed data, without having to completely re-index the entire data store of storage device 118 .
- a data object in the storage device is compared to a data object in the index, it is meant that the data object in the storage device is compared to corresponding and/or related index information in the index.
- the search module 104 uses the search indexes 120 to search either the indexed data or the synchronized data. For example, after the initial indexing, searches would be performed on the indexed data of step 702 . However, if all or some of the indexed data has also been further processed through the synchronization step 704 , the search would be performed on the indexed data and any data that has subsequently been synchronized.
- step 708 the search module 104 displays the results of the search operation(s) performed in step 706 .
- steps 706 and 708 can be performed during the indexing step 702 and/or during the synchronizing step 704 .
- Example user interfaces used during performance of steps 706 and 708 are shown in FIGS. 2-5 , described above.
- Step 702 of FIG. 7 the indexing step, shall now be described in greater detail.
- search module 104 In order to allow for fast searching of stored data, e.g., email, search module 104 first builds and then maintains an index of all of the user's stored data, e.g., email and other PIM (personal information manager) data including appointments, contacts, tasks, notes, journal entries, etc. (hereinafter, all referred to as messages). Maintaining the index is performed through one or more of the synchronization processes (step 704 ) described throughout. In one example, the building and maintaining of the index is performed without interrupting use of the stored data, if a user so desires.
- PIM personal information manager
- search module 104 is optimized for fast writes when building the initial index. Search module 104 also does fast writes when updating the index, i.e., performing synchronization. Search module 104 incurs the cost of optimizing the index for fast reads when the user is idle.
- FIG. 8 is a flow chart depicting an indexing method 800 , according to one embodiment of the present invention.
- Method 800 represents an embodiment of step 702 of FIG. 7 .
- step 802 a determination is made whether a previous indexing operation has completed. If yes, the entire data store in storage device 118 is not re-indexed. Instead, the existing indexes 120 are augmented/updated via synchronization (step 704 ), which is described in greater detail below with reference to flowchart 900 in FIG. 9 . If no, in step 804 a determination is made whether a previous indexing operation has started, but not completed. If yes, in step 806 the previous indexing operation is re-initiated from the last stored data indexed. Step 806 involves performance of step 902 , illustrated in FIG. 9 and described below.
- indexing is started. Indexing can performed using any well known techniques, e.g., using categories, prioritizing files or folders, compressing data, etc. Select techniques for indexing are described in more detail below, although it should be understood that the invention is not limited to the indexing embodiments described herein. Again, if no at step 804 , method 800 moves onto one or more of steps 808 , 812 , 816 , 820 , and 824 described below.
- step 808 a determination is made whether indexing will be performed using a category-based technique. If no, method 800 moves to step 812 . If yes, at step 810 the stored data is indexed using categories.
- Category-based indexing is well known, and shall not be described herein except as follows. In this embodiment, indexing is enhanced when search criteria are used to set the parameters for the indexing. For example, what is indexed (what categories are used) and how the messages are interrogated (what processing is done to the text) contribute to forming indexed categories that are more susceptible to better, more effective, and faster searching
- step 812 a determination is made whether indexing is based on prioritizing the stored data. If no, method 800 moves to step 816 . If yes, at step 814 the stored data is indexed using a priority-based technique.
- Priority-based indexing is well known, and shall not be described herein except as follows.
- search module 104 starts with the folder most likely to be searched first by the user. For example, with respect to the EXCHANGE email software client, search module 104 starts with the Contacts folder first, and Inbox next, since these are heavily used by users.
- the folder most likely to be searched first can be preset as: known important folders, folders with the most last modified messages, etc. Then, folders with the least messages are indexed, and so on.
- the public, SPAM (e.g., bulk, junk, etc.), and deleted folders can be indexed last, if at all.
- priority-based indexing techniques can also be used, as are defined by individual user's preferences.
- step 816 a determination is made whether the indexing will be performed using compression of the stored data. If no, method 800 moves to step 820 . If yes, at step 818 the stored data is indexed using a compression-based technique.
- Compression-based indexing is well known, and shall not be described herein except as follows. Compression-based techniques are useful because they often decrease the amount of information indexed. This is of particular importance with the present invention, where the data set to be indexed can include many fields, such as subject, body, from, to, cc, bcc, type, attachment, last modification date, long term entryid, record key, search key, folder id, etc.
- a number of compression-based techniques can be used, including but not limited to stemming, phonetic coding, and Levenshtein distance techniques, which are described below.
- Indices for the compressed data are typically kept in their own fields in the index separate from any other indices related to the data in its uncompressed form
- the search module 104 identifies the stems of search terms input by the user, and then performs the search using both the search terms and their respective stems. For example, the stem of ‘running’ is ‘run.’ The stem of ‘ran’ is also ‘run.’ Stems can be identified using well known algorithms, dictionaries, or a combination of both. Stemming is well known, and shall not be described herein except as follows.
- search module 104 uses word stemming for fields that are likely to contain normal words and sentences, but not for fields that are less likely to contain normal words and sentences. This is most important in languages having nouns that stem, e.g., German. According to an embodiment, the subject and body fields are stemmed. Other fields that do not typically contain data that is useful to stem are not stemmed (for example in email, To, From, Name, Address, Phone Number, and Category are typically not stemmed).
- search module 104 keeps the stems in separate fields of the search indexes 120 so that the original word positions are maintained. Accordingly, when performing searches, the search module 104 is aware when it has an exact match, or when it has matched a stem. In embodiments, search module 104 establishes a section/separate field of the index 120 that only saves messages including stems of words to make searching faster. However, a user always has the option to search all full messages and not just the stems. Thus, a user may be given the option to search stems only or entire messages. For example, when autocomplete is being used (described further below), a user may want to autocomplete against full terms, and not stems.
- Phonetic coding is well known, and shall not be described herein except as follows.
- search module 104 uses phonetic coding on fields that contain words and names (e.g., name, addresses, subject, body, etc.). For example, Anderson, Andersen, Andersin, etc., as well as soundex, metaphone, double metaphone, are examples of phonetic coding algorithms. It is to be appreciated that different algorithms can be used based on the language of the data store in the storage device 118 . Phonetic coding allows for later fuzzy matches on misspelled words and names. For example, the search module 104 will use words that sound alike to index into phonetic fields. Search module 104 also allows for both a field of phonetic coded data to be saved along side of all data from a message so that a user has the option of searching the compressed data as well as the full data.
- words and names e.g., name, addresses, subject, body, etc.
- step 820 a determination is made whether the indexing will be language-based. If no, method 800 moves to step 824 . If yes, search module 104 in step 822 detects the language (e.g., English, German, French, etc.) of the data object being indexed, and indexes the data object using indexing algorithms specific to that language. Step 822 is performed using language specific indexing parameters (stemming, phonetic coding, etc.). Language-based indexing is well known, and shall not be described further.
- language e.g., English, German, French, etc.
- indexing is performed by storing indices relating to the data objects from storage device 118 into index 120 .
- steps 808 / 810 , 812 / 814 , 816 / 818 , and 820 / 822 can be changed, so long as these steps occur before default indexing is performed at step 824 .
- other techniques can be used to interrogate messages in order to index the messages as desired, as would be apparent to one skilled in the art upon reading and understanding this disclosure.
- the present invention includes two separate indices, one for folders and one for individual messages. Each index is updated and/or synchronized against an actual folder or message store.
- folders inherit the index status of their parent if copied within a same area as parent. If the folder is moved, the folder can keep the index status of a previous position.
- Step 706 of FIG. 7 the synchronization step, shall now be described in greater detail. While the following is presented in the context of email messages, these embodiments are generally applicable to any type of data objects.
- the indexed data in indexes 120 is maintained or synchronized to include subsequent changes to the stored data in storage device 118 . Such operation is performed in the synchronization step 704 .
- changes can be, but are not limited to, additions, deletions, modifications, moves, etc., occurring to data and/or folders in the storage device 118 from one time period to a subsequent time period.
- the synchronization step 704 operates generally as follows. The data objects associated with stored data in storage device 118 is compared to data objects in the index 120 to determine if a change has occurred. If a change has occurred, the index 120 is updated to reflect that change. Also, data object associated with folders including multiple pieces of data in the storage device 118 are compared to data objects of the folders in the index 120 . If contents of the folders have changed, the index 120 is updated to reflect those changes.
- FIG. 9 shows a flowchart depicting a synchronization method 900 , according to one embodiment of the present invention. Synchronization method 900 can occur during step 704 discussed above.
- step 902 a determination is made whether synchronization has occurred within a specific time period. If yes, then it is not necessary to synchronize the search index 120 , and the method 900 remains at step 902 .
- the length of the time period is implementation specific, and may be adjusted by the user in some embodiments.
- step 902 If no in step 902 , then method 900 moves to one or more of steps 904 (Notification Based Synchronization), 906 (Non Notification Based Synchronization), 908 (Deleted/Moved Message Based Synchronization), 910 (Dropped Message Based Synchronization), 912 (Application Launch Based Synchronization), and 914 (Time Based Synchronization), which are each discussed in more detail below.
- steps 904 Notification Based Synchronization
- 906 Non Notification Based Synchronization
- 908 Deleted/Moved Message Based Synchronization
- 910 Dropped Message Based Synchronization
- 912 Application Launch Based Synchronization
- 914 Time Based Synchronization
- step 904 when an underlying software program allows for files, messages, or folders to notify search module 104 that an event has occurred, notification based synchronization is performed.
- FIG. 10 shows an exemplary notification based method that can occur during step 904 , according to one embodiment of the present invention.
- step 1000 a determination is made whether a notification has been received from a software program. If no, method 904 remains at step 1000 . If yes, in step 1002 search module 104 compares data objects associated with the notifications with corresponding data objects in storage device 118 to identify changes—the search module 104 then reflects those changes in the index 120 . Then, method 904 returns to step 1000 .
- search module 104 tracks notifications for changes to the indexed messages.
- Search module 104 can provide support for create, delete, update, move, and copy operations. Once a notification is received by the search module 104 , synchronization is performed. In one example, by waiting a short period before processing a notification, search module 104 can avoid doing unnecessary processing. For example, suppose an email arrives into the user's inbox, and then a rule moves the email from the inbox to a folder. If the search module 104 immediately processed the arrival of the email into the inbox, search module 104 would then have to also process the move of the email from the inbox to the folder. By waiting a short time, search module 104 need only update the index 120 to reflect the email in the folder.
- all notifications related to local personal folders contain a stable long-term identifier, entryid, that can be used by search module 104 to find the corresponding message in the index 120 .
- entryid a stable long-term identifier
- search module 104 it relatively easy to update index 120 and link to messages in local personal folders.
- the long-term entryid allows search module 104 to find a given message, as well as all various properties of the message.
- every time search module 104 requests a message from the index 120 using entryid it should always receive the same message.
- search module 104 can easily update (synchronize) the index 120 based on the notifications.
- step 906 when an underlying software program does not allow for files, messages, or folders to notify search module 104 that an event has occurred, non-notification based synchronization is performed.
- FIG. 11 shows an exemplary non-notification based synchronization method that can occur during step 906 , according to one embodiment of the present invention.
- step 1100 a determination is made whether one or more data objects in storage device 118 have been changed. If yes, search module 104 compares the changed data object in storage device 118 with the corresponding data object in index 120 to synchronize the data objects and indexed the changes. Thereafter, the method 906 returns to step 1100 . If no in step 1100 , at step 1104 a determination is made whether the system 102 has been idle. If yes, method 906 moves to step 1102 . If no, in step 1106 a determination is made whether a specified time period has passed. If yes, method 906 moves to step 1102 . If no, method 906 moves to step 1100 .
- search module 104 monitors underlying data files in order to index and synchronize.
- search module 104 can use incremental change synchronization (ICS) or other synchronization algorithms to find changes there. For example, during ICS search module 104 asks the EXCHANGE store what has been changed since the last request, and the added, created, and deleted messages can be determined. This can be used to determine what message was removed from message store, and the index 120 can then be appropriately updated. This is most helpful with the backside or source side of moves and deletes, which are discussed in more detail below.
- ICS incremental change synchronization
- synchronization can be performed either periodically or when the system 102 is idle.
- the public folder can be interrogated using the ICS methodology discussed above.
- an EXCHANGE store has too many messages, some notifications may not be generated. This can occur when a user performs a great many actions at a single time, e.g., mark all read, mark all unread, move an entire folder, delete a lot of email at once, when saving a draft, editing the saved draft, and resaving the draft.
- synchronizing starts at the folder level and then moves to the message level, processing all messages in a single folder at a time.
- the synchronizing operations can be delayed and then checked for a last action in time to use as the final message to synchronize for indexing.
- step 908 when data objects have been moved or deleted, a deleted/moved data object based synchronization method is performed.
- FIG. 12 shows an exemplary deleted/moved message synchronization method that can occur during step 908 , according to one embodiment of the present invention.
- step 1200 a determination is made whether a move or deletion has occurred. If no, method 908 remains at step 1200 . If yes, then in step 1202 a determination is made whether properties of the message can be determined, where exemplary properties are discussed below.
- step 1204 incremental change synchronization (ICS) is performed, which is described in more detail below. The method then returns to step 1200 .
- ICS incremental change synchronization
- the search module 104 determines the properties of the message.
- search module 104 uses the properties to find data objects related to the indexed and related stored messages.
- search module 104 compares the related data objects of the indexed and stored messages to what is in the search indexes 120 , and indexes the changes. Then, method 908 returns to step 1200 .
- the EXCHANGE message store allows search module 104 to monitor for newly created messages
- the backside of moves e.g., the location from which a message is moved or a moved from area
- delete notifications use a short-term entryid that is usually no longer valid when indexing, synchronizing, and/or searching is performed.
- This short term entryid cannot be used to look up the message in the message store or the index 120 .
- EXCHANGE allows for conversion of short-term entryid's to long term entryid's, in EXCHANGE the long term entryid's may not be unique.
- This short term entryid can be used for synchronizing of create, update, copy, and destination side of moves (moved to location) because synchronizing is usually done timely enough by search module 104 to use this to at least initially index the message.
- search module 104 overcomes this inability to use short term entryids in several ways for deletes and backsides of moves.
- the search module 104 looks at other properties of the message to find the original message in the index 120 .
- search module 104 can use the PR_RECORD_KEY or the PR_SOURCE_KEY. Since there may be duplicates in the index, search module 104 can probe the stored long term entry id of the indexed message to see if it is still there. For hard deletes, search module 104 can try to leverage EXCHANGE's soft delete feature. Search module 104 can try to open the short-term entry id in the notification using the SHOW_SOFT_DELETES option. Search module 104 can also use the incremental change synchronization (ICS) to get change lists from the EXCHANGE server. As a last resort, search module 104 can synchronize the folder in which the message was deleted. When this is done, search module 104 will discover the message that is missing (i.e., deleted).
- ICS incremental change synchronization
- search module 104 can use record key PR_RECORD_KEY. While PR_RECORD_KEY is unique within a given message store, PR_RECORD_KEY may appear in multiple stores (where each occurrence of PR_RECORD_KEY refers to a different message). Thus, search module 104 can use a record key of the message itself, the record key of a folder holding the message, and the last modification date of the message to assist in indexing. Using these three properties allows for uniquely identifying messages for indexing and retrieving from the index 120 , or at least allows a message to be found and interrogated for properties to be indexed. These three properties are found after opening a message, and not from any notification service of an EXCHANGE source.
- Soft deletes do not permanently delete messages, but rather move them to another folder (e.g., recently deleted mail), from which they are restorable for a period of time or until a cache is full, depending on a document retention policy. Search module 104 can still search for these messages and interrogate them for properties to index them even if the message is deleted.
- a still further source to assist in synchronizing deleted messages and backside moves of messages is to use a PR_SEARCH_KEY, which is a unique random number created for each message. This can be used because it copies and moves with the message, and survives with a destination message.
- search module 104 can use a new id and a search key to find a message, and then interrogate it for indexing. This is not as helpful in the case of deletions, but is helpful with backside of moves.
- opening a new message moves-to message
- interrogating the message obtaining the search key
- looking at the index to see if another message had the search key allows search module 104 to find the moved from or backside location of the message or the backside message.
- ICS can be used. As described above, ICS asks the EXCHANGE store what has been changed since the last request, and the added, created, and deleted messages can be determined. This can be used to determine what message was removed from message store, which message and associated information can then be deleted from the index. This is most helpful with backside or source side of moves and deletes.
- step 910 when notifications are determined to have been dropped, a dropped notification based synchronization method is performed.
- EXCHANGE can sometimes drop notifications.
- search module 104 gets more than a threshold rate of notifications (such threshold being implementation dependent)
- search module 104 assumes that some were dropped.
- the search module 104 synchronizes affected folders (perhaps all folders).
- FIG. 13 shows an exemplary dropped notification synchronization method that can occur during step 910 , according to one embodiment of the present invention.
- step 1300 a determination is made whether notifications have been dropped. This can be based on one of the techniques or criteria described below. If no, method 910 remains at step 1300 . If yes, in step 1302 folder-to-folder based synchronization is performed between respective data objects associated with folders in index 120 and storage device 118 , which is described in more detail below. Then, method 910 returns to step 1300 .
- the search module 104 assumes that if a certain number of notifications happen in a certain period of time, some notifications were dropped.
- search module 104 can delay updates to the index 120 when the same message has multiple changes in a given period of time. In one example, a delay of about 0.1 seconds to about 2 seconds is used, and then only a last change is interrogated to index the message. This can be done using a coalescing algorithm. For example, if search module 104 detects an update, update, delete, then search module 104 indexes only the last delete. Such operation results in a reduction of overhead and wasted operations.
- a large number of notifications can affect two folders of messages. This typically occurs after a large move (folder-to-folder) or a large delete of messages.
- search module 104 ignores individual changes, and instead looks only to folder notifications or changes. Then, search module 104 determines the affected folders and synchronizes data objects associated with messages in those folders. This approach is effective because search module 104 can aggregate a large number of small changes into a single large change. For example, if a large number of messages are moved from one folder to another, search module 104 synchronizes just the two folders instead of processing all of the individual notifications.
- the search module 104 performs folder-to-folder synchronization by scanning data objects associated with the entire list of messages in a given folder, and also scanning the data objects associated with messages that should be in the folder from index 120 .
- the search module 104 compiles a list of the messages that have changed, and updates the indexes 120 accordingly
- all messages that were in the affected folder in the index 120 are deleted and then updated later when message synchronization is performed.
- a user can chose which folders are indexed. For example, a user may not want a public folder, spam folder, or deleted messages folder indexed.
- the user interface of search module 104 includes a folder menu to allow the user to choose which folders to synchronize.
- folder synchronization can also be performed during steps 904 , 906 , 908 , 912 , and 914 .
- step 912 when the search module 104 is relaunched (or for some other reason has been idle for some time), a post application launch based synchronization method is performed.
- FIG. 14 shows an exemplary post application launch based synchronization method that can occur during step 912 , according to one embodiment of the present invention.
- step 1400 a determination is made whether the search module 104 has been recently launched. If no, method 912 remains at step 1400 . If yes, at step 1402 the search module 104 selects a data object associated with a message from a list where the messages are ordered from most recently modified to least recently modified, and then synchronizes the selected message. It is to be appreciated that any of the synchronization embodiments described herein can be used in step 1402 .
- step 1404 a determination is made whether there are more messages from the ordered list to process. If no, method 912 returns to step 1400 . If yes, then control returns to step 1402 where the next message from the ordered list is selected and synchronized.
- the storage device 118 may changed during periods when the search module 104 is not running or is otherwise inactive. This can happen, for example, when multiple clients interact with the storage device 118 . It can also happen when the user disables search module 104 and then enables it again later. In these situations, search module 104 synchronizes shortly after application launch to catch changes while search module 104 was idle.
- two enumerators can be used for synchronizing after application launch: (1) a first enumerator for information regarding a folder, or a message within a folder, is compared to (2) a second enumerator for current information in the index 120 . Synchronization is performed starting with a last modified date of each message (most recently modified) to an oldest modified date of a message (least recently modified). Time periods are saved to about the hundredth of a nanosecond, in some examples. Although last modified dates can be kept to about one-hundred nanoseconds, occasionally two messages can have the same last modified date. In this case, in one example, a secondary sort is used through use of the record key for each message along with a primary sort of last modified date. This is allowed because a record key is unique across each respective message store.
- search module 104 compares each modified message in the folder/message to data in the index 120 using the last modified time. When a message is found in the storage device 118 that is not in the index 120 , it is inserted into the index 120 . When a message is found in the index 120 , but not found in the storage device 118 , then it is deleted from the index 120 .
- index 120 if there is a gap in the index 120 (referred to B messages in the following examples), then a message or folder has been added and an insertion is required in the index 120 . If there is a gap in storage device 118 (referred to A messages in the following examples), then a folder or message has been deleted and deletion is required from the index 120 . This should allow an updated data object of a message to be added to the index 120 as being new first, and then later the original data object of a message is deleted from the index 120 because it is determined to be unmatched.
- A.time.1 is a first message (i.e., most recently modified) in the storage device 118
- B.time.1 is a first message in the index 120 . If there is an A.time.1+n message, but only a B.time.1+n+1 (i.e., message B.time.1+n does not exist), then the A.time.1+n is new, and a matching B.time.1+n is inserted into the index 120 .
- B.time.1+n is deleted from index 120 because A.time.1+n was missing and must have been deleted from storage device 118 .
- the synchronization method for individual messages or files is incremental in that not all messages need to be loaded at once time.
- search module 104 can compare A.time.1 to B.time.1, then A.time.2 to B.time.2, etc. By operating in this manner it is unlikely any amount of messages will overwhelm the system.
- search module 104 allows for interruptions in its operation since it always starts synchronization at the last modified message. Thus, it does not matter where search module 104 discontinued its operation. Further, this allows for easy synchronization after restarting of the email application. For example, operation of the search module 104 can be discontinued when the email application becomes idle, and then re-activated when the email application becomes active.
- step 914 an online and offline based synchronization method is used when the search module 104 is operating with an application that is connected via a network to storage device 118 and/or index 120 .
- FIG. 15 shows an online/offline synchronization method that can occur during step 914 , according to one embodiment of the present invention.
- step 1500 a determination is made whether the network is online. If no, method 914 remains at step 1500 . If yes, in step 1502 one or more of the synchronization embodiments described herein are performed. Then, method 914 returns to step 1500 .
- OUTLOOK When OUTLOOK is used it interacts with some mail servers (EXCHANGE) that store mail in a centralized repository. Whenever OUTLOOK starts up, it connects to these mail servers and displays the user's email in its user interface. While there are many advantages to keeping email on a centralized server, it can be inconvenient when a user is on a computer that does not have constant access to the network or when the server is not running for some reason.
- EXCHANGE electronic mail servers
- OUTLOOK like many other email clients, has a feature called “Work Offline” that allows users to automatically download some or all of their email to their local machine so that they can access their email while offline
- “Work Offline” it may appear that some of the user's folders have been deleted or emptied of all their contents, when in reality they are simply not accessible because the user is not connected to the server.
- Conventional implementations of an indexing algorithm would delete the information from the index for each of these folders when the user is offline and reinsert the info whenever the user was back online.
- search module 104 operates by scanning the contents of the email client's repository and attempts to connect to the server in some way to verify that the folder is accessible. Then, search module 104 requests each folder for its subfolders.
- search module 104 fails to connect with a folder, search module 104 records this fact and ignores any differences to any of its subfolders. In this way, search module 104 is able to distinguish between folders that have been deleted and folders that are not available because the user is in offline mode. Search module 104 can then avoid changing the index for any folders that the search program 104 cannot access when offline. Once back online, any of the synchronization methods described herein can be used to synchronize data in index 120 and storage device 118 .
- pseudo code for synchronizing a folder list is as follows: // MAPI is the message store for Outlook get list of stores and folders in them from MAPI for each store check for record key of last folder
- pseudo code for synchronizing messages is as follows: // The algorithm below doesn't operate on all of the fields of the // messages or the index. It only needs a subset of the data the search program call // the SyncMessageData.
- search module 104 can generate a welcome screen on a graphical user interface to help a user begin initial indexing after they install the program.
- a welcome panel assists a user in building a list of approved senders. Then, for the search aspect of search module 104 , the welcome panel alerts the user that an index should be built for his saved messages when he begins using a software application associated with the saved messages, for example an email product.
- the welcome panel can also help the user upgrade his index if the format of the index changes (e.g., a new version of the search module 104 is released, downloaded, and installed).
- the welcome panel can also allow the user to resume an interrupted index build. This could occur, for example, if the mail application was closed during the index building process.
- One way to do this is using the ICS method described above.
- a user can decide not to use an initial index build, and instead have the index built later via options on a drop down menu associated with a tool bar in the email product.
- the welcome panel does not alert the user to build and index again until they upgrade to a new version of the software, in which case the user will get an update panel again.
- a welcome panel will alert him to the search module's search capabilities and the need to build an index for searching. It is to be appreciated that other operations can be performed with the welcome panel functions.
- search module 104 can allow for an auto-completion mode for terms that the user is typing against terms in the index.
- search module 104 may be scoped to fields (for example, only auto complete against terms in the subject field) or may autocomplete against original source terms, not stems or phonetically coded terms.
- autocompletion can use old searches, compressed indexes, and/or other terms in the index to suggestion completions for the user's input.
- search module 104 can suggest other searches using terms that are close to those entered (using a variety of methods, such as Levenshtein distance, phonetic coding, etc.). The search module 104 can also be useful to suggest corrections to misspellings and spelling variations.
- a search box can be placed next to anti-spam controls on a tool bar of the email application.
- many different search schemes can be used, such as simple word searching, Boolean searching, field searching, etc., based on the underlying text searching engine incorporated into search module 104 .
- search results e.g., message, contact, task, etc.
- another window which may also include another search box and/or other search queries.
- another search box can appear in the opened message, contact, etc., which can be used to search within the message itself.
- the search module 104 may suggest other terms/searches similar to the search inputted, and can show the number of hits for these suggested searches. This can be achieved using the Levenshtein distance technique, for example.
- the search module 104 may also suggest other areas to search. Additionally, the search module 104 may display links which, if clicked, will execute the suggested searches. In another example, this can be done for email, IM, Internet, files stored in the computer, etc.
- the data in the storage device 118 does not need to be in the index 120 .
- the search module 104 can access the data as needed from the storage device 118 .
- search module 104 maps a single qualifier in the query language to multiple fields in the index 120 .
- the search module 104 may map the virtual field “name:” in the query language to all fields that contain names in the index 120 (from, to, cc, assistant, etc.).
- users may define the scope of virtual fields (i.e., define the fields that map to a given virtual field).
- search module 104 is bundled with anti-spam and/or anti-fraud products to increase user acceptance and/or use of the search module 104 . This is similar to bundling a pop-up blocker with a browser search bar, since spam is to email as pop-ups are to web pages. By default, search module 104 excludes a spam folder from search results, although this is user adjustable.
- this bundling increases functionality of the search module 104 by ensuring that all spam folders are identified and eliminated from a query, if a user so chooses.
- the anti-spam filter can be used to filter out spam from the search results produced by the search module 104 .
- spam can be excluded from search results.
Abstract
Description
- The application claims benefit under 35 U.S.C. §119(e) to U.S. Provisional Application No. 60/616,925, filed Oct. 7, 2004, which is incorporated by reference herein in its entirety.
- A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure, as it appears in the Patent and Trademark Office patent files or records, but otherwise reserves all copyright rights whatsoever. Various terms and icons in the figures may be trademarks or registered trademarks of this or other companies.
- 1. Field of the Invention
- The present invention is related to searching digital data.
- 2. Related Art
- As the use of email and email software packages have become more engrained in our daily lives, the amount of information received and stored by the software packages has increased dramatically. Most people now rely on their email software systems to communicate and keep track of every aspect of their lives through email, calendars, tasks, appointment, address books, etc. As the information grows in each of these, it has become harder and harder to find desired information in a timely manner. While most of these packages come with FIND functions, they are typically not robust enough to quickly find information, and sometimes cannot find the information at all if the user has forgotten specifics about what the information contains. Currently, no known search engines are specifically designed for real time synchronization of indexed and/or underlying data, or specifically designed to search an email product, while being integrated with the email product.
- Therefore, what is needed is a system, method and computer program product that allows for more effective searching of large amounts of digital information.
- An embodiment of the present invention provides a method comprising the following steps. Indexing stored data without interrupting use of the stored data. Synchronizing the indexed data with data stored subsequent to the indexing step. Searching at least one of the synchronized data and the indexed data. Outputting results of the searching step.
- Another embodiment of the present invention provides a system comprising a controller, at least one storage device, a graphical user interface, and a search module. The storage device stores initial data, indexed data, and synchronized data under control of the controller. The graphical user interface is controlled by the controller and enables a user to enter search commands. The search module searches at least one of the indexed data and the synchronized data. The graphical user interface displays the results of the search module.
- In a further embodiment, the present invention provides a computer program product comprising a computer useable medium having computer program logic recorded thereon for controlling at least one processor, the computer program logic comprising computer program code modules that perform operations similar to the above-mentioned method and system embodiments.
- Further embodiments, features, and advantages of the present inventions, as well as the structure and operation of the various embodiments of the present invention, are described in detail below with reference to the accompanying drawings.
- The accompanying drawings, which are incorporated herein and form a part of the specification, illustrate one or more embodiments of the present invention and, together with the description, further serve to explain the principles of the invention and to enable a person skilled in the pertinent art to make and use the invention.
-
FIG. 1 shows a system, according to one embodiment of the present invention. -
FIG. 2 shows an EMAIL window including search program command areas on a toolbar, according to one embodiment of the present invention. -
FIG. 3 shows a search window, according to one embodiment of the present invention. -
FIG. 4 shows a search window, according to an alternative embodiment of the present invention. -
FIG. 5 shows a display of a user system, according to one embodiment of the present invention. -
FIG. 6 shows an exemplary computer system for performing operations associated with a search program, according to one embodiment of the present invention. -
FIG. 7 shows a flowchart depicting a method, according to one embodiment of the present invention. -
FIG. 8 shows a flowchart depicting an indexing method, according to one embodiment of the present invention. -
FIG. 9 shows a flowchart depicting a synchronization method, according to one embodiment of the present invention. -
FIG. 10 shows an exemplary notification based method, according to one embodiment of the present invention. -
FIG. 11 shows an exemplary non notification based synchronization method, according to one embodiment of the present invention. -
FIG. 12 shows an exemplary deleted/moved message synchronization method, according to one embodiment of the present invention. -
FIG. 13 shows an exemplary dropped notification synchronization method, according to one embodiment of the present invention. -
FIG. 14 shows an exemplary post application launch based synchronization method, according to one embodiment of the present invention. -
FIG. 15 shows an online/offline synchronization method, according to one embodiment of the present invention. - The present invention will now be described with reference to the accompanying drawings. In the drawings, like reference numbers may indicate identical or functionally similar elements. Additionally, the left-most digit(s) of a reference number may identify the drawing in which the reference number first appears.
-
- I. Overview
- II. Exemplary Environment and Display Windows
- III. Exemplary Computer System
- IV. Exemplary Operations
- A. Overall Method(s)
- B. Indexing Method(s)
- 1. Category Based Indexing
- 2. Priority Based Indexing
- 3. Compression Based Indexing
- a. Stemming
- b. Phonetic Coding
- c. Levenshtein distance
- 4. Language Based Indexing
- 5. Default Indexing
- V. Synchronization Method(s)
- A. Notification Based Synchronization
- B. Non Notification Based Synchronization
- C. Deleted/Moved Message Based Synchronization
- D. Dropped Notification Based Synchronization
- E. Post Application Launch Based Synchronization
- F. Online and Offline Based Synchronization
- VI. Exemplary Additional or Alternative Aspects of the Embodiment(s)
- VII. Conclusion
- While specific configurations and arrangements are discussed, it should be understood that this is done for illustrative purposes only. A person skilled in the pertinent art will recognize that other configurations and arrangements can be used without departing from the spirit and scope of the present invention. It will be apparent to a person skilled in the pertinent art that this invention can also be employed in a variety of other applications.
- One or more embodiments of the present invention provide a digital data (e.g., email data, stored data, messages, folders, files, etc., which are all used interchangeably throughout) search module that is, for example, downloadable onto a local computer via, for example, a computer readable medium, the Internet from a website, or through other known methods. Once downloaded onto the local computer, the search module is installed and then associates itself with one or more other programs already on the local computer. Once installed and opened, the search module has several functions and operations, for example, a building and maintaining an index function (e.g., indexing and synchronizing) and a searching function.
- For example, the search program can build an index of digital data, which can allow for very rapid textual searches against the index. Then, the search program can maintain the index through synchronizing changes to the stored data or adding newly stored data to the index. When it is said herein that a data object in the storage device is compared to a data object in the index, it is meant that the data object in the storage device is compared to corresponding and/or related index information in the index. The indexed based searching function can allow for more efficient and effective searching of digital data on or associated with the local computer, for example, searching of emails, previously viewed website addresses, files, folders, calendars, address books, contacts, appoints, documents, etc. that may be stored locally or remotely via a wired or wireless network.
- In one example, the index based searching allows for searching in five one hundredths of a second. However, actual performance will vary based on a number of factors, including but not limited to hardware configuration.
- Also, in one example, an autocomplete function allows for autocompletion against both what may have been previously searched and/or what the user may be looking for based on indexed data.
- The search program allows for instant search of digital data, for example, but not limited to, email data, website addresses, etc. In the email example, as an overview, the search program builds an index of the user's saved mail, and then allows for the ability to search gigabytes of data and quickly obtain results, often in a few hundredths of a second or less.
-
FIG. 1 is anexemplary environment 100 according to one embodiment of the present invention. Inenvironment 100, one or more user systems 102 (either wired or wireless systems that can be handheld, portable, or stationary) include at least aCPU 112, astorage device 118 and adisplay 110. In the example ofFIG. 1 , anemail program 114 andbrowser 116 are executing in theuser system 102. Theuser system 102 is connected to theInternet 108. - The
user system 102 also includes asearch module 104 andsearch indexes 120. According to embodiments of the invention, thesearch module 104 can be integrated and/or associated with other programs, such as but not limited to theemail program 114 and thebrowser 116. - An index, e.g., each of
search indexes 120, is a collection of indices each having a set of fields. For example, the fields for email messages can be, but are not limited to, subject, body, from, to, cc, bcc, logical fields for type of message, size, attachments (yes or no), last modified date, and internal fields such as long term entryid, record key, search key, folder id, etc. Other fields can also be used. Fields for email as well as other data types will be apparent to persons skilled in the relevant art(s). These fields (or combinations thereof) can be indexed and used for searching. For example, a user can either chose to search a set of fields for a text search or search across all fields. - One function of
search module 104 is to detect when an action has occurred to an object in a store, such asstorage 118, and then act on that action in order to interrogate the object for its properties to properly index and/or synchronize the object for future searching. - In one example,
search module 104 may be based on a C-LUCENE portion of an open source search engine called LUCENE that utilizes a JAVA library for indexing text. - In one example, email searching leverages additional structure found in an email, as compared to searching a webpage or other free-form data. For example, an embodiment of the invention enables searching in a number of field, such as to, from, cc, bcc, subject, body, etc. Also, email searching involves searching of all aspects of an email product, such as tasks, appointments, calendar, address book, etc. (hereinafter all are collectively referred to as messages, unless otherwise discussed).
- In one example,
search module 104 is designed to integrate with MICROSOFT OUTLOOK® (“Outlook”), while in other examples thesearch module 104 will integrate with MICROSOFT OUTLOOK EXPRESS® (“Outlook Express”), the Start button on the MICROSOFT WINDOWS® task bar, INTERNET EXPLORER® (IE), instant messaging clients, as well as other products. - In one example, integration involves two aspects: (1) user interface integrated with an underlying client, and (2) synchronizing the indices or objects in the index with the underlying data store (e.g., folders and messages) in current or real time (e.g., whenever an action occurs within a message store). This latter aspect is more challenging because of the varied notification methodology each underlying email client uses when messages are created, sent, received, moved, copied, deleted, renamed, draft, resaved draft, etc. for different types of folders, for example, private, public, etc.
- It is to be appreciated that the elements in
environment 100 and/oruser system 102 are only exemplary and more or less elements could be used based on a desired configuration of the user. Also, whileuser system 102 is shown as being in a single location or product, the parts might be coupled together from one or more remote locations. Further, additional peripheral elements may be connected toenvironment 100 and/oruser system 102, as would be appreciated by a skilled artisan upon reading and understanding this description. All these combinations and permutations are contemplated within the scope of the present invention. -
FIG. 2 shows awindow 200 associated withemail product 114 as seen ondisplay 110, according to one embodiment of the present invention.Window 200 includes atoolbar 220 that has acommand button 222 for thesearch module 104, as well as buttons for functions associated with thesearch module 104, such as approve 224 and block 226 related to spam filtering. Thetoolbar 220 also includes asearch box 228. Some of the functions and operations associated with this window are discussed below, while the operation of others will be apparent to persons skilled in the art based on the teachings contained herein. -
FIG. 3 shows asearch window 300, according to one embodiment of the present invention. Thesearch window 300 includes a search resultswindow 336. This embodiment of the invention displays, for each completed search, an ICON representing the area searched (i.e., EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, IM, etc.), FROM, TO, SUBJECT, DATE, and OTHER (some of these fields may not apply to all objects found by a given search). There are also scrollbars 332 within thewindow 300. Some of the functions and operations associated with this window are discussed below, while the operation of others will be apparent to persons skilled in the art based on the teachings contained herein. -
FIG. 4 showssearch window 400, according to another embodiment of the present invention.Search window 400 includes atool bar 440 associated withsearch module 104 that includes asearch area 442 andsearch choices 446 EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, and IM. Thesearch choices 446 enable a user to search in one or more of these areas. Search results are displayed in a search resultswindow 444. This embodiment of the invention displays, for each completed search, the TYPE (i.e., whether the hit was in EMAIL, WEB, PAGES I'VE SEEN, MY COMPUTER, IM, etc.), SUBJECT (for example, the file name or an excerpt of the identified object), DATE, FOLDER, and SIZE. Theresults window 444 may also display the number of hits in each area (for example, 123 hits in email, 1,234,344 hits on the Web, 2 hits in IM, etc.). - The
results window 444 also allows the user to perform the same search (or different searches) in any of theother areas 446. For example, the user may perform an email search, and then perform the same search on the Web by clicking thecorresponding search choice 446. - In some embodiments, the
search module 104 displays in summary form the results (perhaps just counts) of the same search in other areas. For example, if a user searches a certain text string in an email client, summary results (number of hits) of the same search in IM, Internet, Internet email, and desktop data may also be displayed in theresults window 444, along with links to enable the user to easily perform the searches. - Search results can also include other links relevant to the search. For example,
search module 104 can detect information relevant to the search or the search results, such as an address in the message or a contact, and provide a link to a map. In another example,search module 104 can detect information about a flight in an email message search result and provide a link to a flight tracker. In yet another example, the search program can detect information about a company in a contact or an email message search result and provide a link to the company or stock information. These links can be based on contact, patterns, words, symbols, formats of information, etc., either found in a search string or the search results. The links can also be based on a profile of a user. - In some embodiments, the
results window 444 displays advertisements. The ads are chosen based on a number of factors, such as the search, content of the results, a profile of the user, etc., or combinations thereof. For example, if an email message includes a question to another person regarding a topic, the ads can include information regarding that topic. - The invention enables search results to be displayed using simple text, or in HTML. In embodiments, search results across all search areas are displayed in either simple text form or HTML. Using a common format enables the advertisements to be unobtrusively integrated into the search results, thereby increasing the possibility that users will peruse and/or click-through the advertisements from one search area to the next (desktop, email, browser history, etc.).
-
FIG. 5 shows anexample display 110 having a number of open windows each corresponding to one or more active programs, including anEMAIL window 550, anEMAIL message window 560, aBROWSER window 570, and aWEB PAGE window 580. According to embodiments of the invention, thesearch module 104 can be integrated with these, as well as other, applications. - In particular, each
open window search box 590 associated withsearch module 104. Also, adesktop toolbar 595 includes asearch box 590 associated withsearch module 104. In the example ofFIG. 5 , thedesktop toolbar 595 is located next to the operating system START button. - According to an embodiment of the invention, search boxes 590 (i.e., the search module 104) are integrated with these applications (for example, the
email program 114 and the browser program 116) by utilizing the application program interfaces (APIs) of the applications. While APIs differ from program to program, the use of such APIs to integrate different programs is well known. - In an embodiment, the context or location of the
search box 590 identifies the default area in which searches initiated from that search box are directed. For example, searches initiated in theEMAIL window 550 are performed among email data. More particularly, in Outlook and Outlook Express,search boxes 590 will default to searching email (and other PIM data such as contacts, appointments, etc.). Similarly,search boxes 590 in IE will default to searching the web and/or browser history (previously displayed pages), and the search box in thedesktop toolbar 595 will search files in the local computer.Search boxes 590 used to search the Internet can be configured by the user to search using one or more particular search engines, such as GOOGLE, YAHOO, etc. Eachsearch box 590 also enables searching in other areas via pop-up or drop-down windows, such aswindow 592. Alternatively, the user can select the area to search by selecting among icons displayed next to the search boxes 590 (not shown inFIG. 5 ), where the icons correspond to the different search areas. Also, the user may change the default search area settings of thesearch boxes 590. - It is to be appreciated that the user interface windows of
FIGS. 3-5 are merely examples. Windows having different options and/or different layouts will be apparent to persons skilled in the relevant art(s) based on the teachings contained herein. All such permutations and combinations are contemplated and within the scope of the present invention. - Embodiments of the invention described herein can be implemented using well known computers, such as the
example computer 600 shown inFIG. 6 . - The
computer 600 includes one ormore processors 604.Processor 604 can be a special purpose or a general purpose digital signal processor. Theprocessor 604 is connected to a communications infrastructure 606 (for example, a bus or network). -
Computer system 600 also includes amain memory 605, such as random access memory (RAM), and may also includesecondary memory devices 610. Thesecondary memory devices 610 may include, for example, ahard disk drive 612 and/or aremovable storage drive 614, representing a floppy disk drive, a CD drive, a DVD drive, a magnetic tape drive, an optical disk drive, etc. Theremovable storage drive 614 reads from and/or writes to aremovable storage unit 615 in a well known manner.Removable storage unit 615 represents a floppy disk, magnetic tape, optical disk, CD, DVD, etc. As will be appreciated, the removable storage unit 618 includes a computer usable storage medium having stored therein computer software and/or data. - In alternative implementations,
secondary memory 610 may include other similar means for allowing computer programs or other instructions to be loaded intocomputer 600. Such means may include, for example, aremovable storage unit 622 and aninterface 620. Examples of such means may include a program cartridge and cartridge interface (such as that found in video game devices), a removable memory chip (such as an EPROM or PROM) and associated socket, etc. -
Computer system 600 may also include a communications interface 624. Communications interface 624 allows software and data to be transferred betweencomputer system 600 and external devices. Examples of communications interface 624 may include a modem, a network interface (such as an Ethernet card), a communications port, a PCMCIA slot and card, wireless communication interfaces, etc. Software and data transferred via communications interface 624 are in the form of signals 658 (electromagnetic, optical, etc.) capable of being received and/or transmitted by communications interface 624. These signals 624 traverse a communications path ormedium 626.Communications path 626 carriessignals 625 and may be implemented using wire or cable, fiber optics, a phone line, a cellular phone link, a wireless link, an RF link and/or other communications channels. - Computer programs (also called computer control logic) are stored in main memory 608 and/or
secondary memory 610. Computer programs may also be received via communications interface 624. Such computer programs, when executed, enable thecomputer system 600 to implement the functions of the invention as discussed herein. - Articles of manufacture in which computer programs are stored, such as
main memory 605,secondary memory 610, signals 625, etc., are herein called “computer program products.” Such computer program products include a computer readable or useable medium in which computer programs are stored. The computer programs, when executed, cause processor(s) 604 to perform the features and functions of the invention described herein. The invention is also directed to such computer program products having stored therein software that enables computer(s) to perform the functions described herein. - A. Overall Method(s)
-
FIG. 7 is a flowchart depicting asearching method 700 according to an embodiment of the present invention. The searchingmethod 700 is performed by thesearch module 104 executing in theuser system 102. - In
step 702, thesearch module 104 indexes data stored in thestorage device 118. The resulting indices form part of thesearch indexes 120. The data indexed by thesearch module 104 in this step includes, but is not limited to, emails, calendars, tasks, appointments, address books, documents and other files or data objects stored in the user system. Such data is stored instorage device 118, which in implementation may be one or more devices either local or remote (i.e., over a network) tocomputer system 102. According to embodiments of the invention, the indexing ofstep 702 is performed without interrupting access or use of the data instorage device 118. - In
step 704, thesearch module 104 synchronizes the indexed data with any changes to the data in thestorage device 118 subsequent to operation of theindexing step 702. This synchronization step allows for real-time updates to indexed objects to account for any changes that may have occurred to the stored data since indexing the stored data, e.g., deleting, moving, revising, etc, or to add any newly stored data to the index. This will allow for a later quick and accurate search on the indexed data, without having to completely re-index the entire data store ofstorage device 118. As discussed above, when it is said herein that a data object in the storage device is compared to a data object in the index, it is meant that the data object in the storage device is compared to corresponding and/or related index information in the index. - In
step 706, thesearch module 104, in accordance with search requests issued by the user, uses thesearch indexes 120 to search either the indexed data or the synchronized data. For example, after the initial indexing, searches would be performed on the indexed data ofstep 702. However, if all or some of the indexed data has also been further processed through thesynchronization step 704, the search would be performed on the indexed data and any data that has subsequently been synchronized. - In
step 708, thesearch module 104 displays the results of the search operation(s) performed instep 706. - According to embodiments of the invention, steps 706 and 708 can be performed during the
indexing step 702 and/or during the synchronizingstep 704. - Example user interfaces used during performance of
steps FIGS. 2-5 , described above. - B. Indexing Method(s)
- Step 702 of
FIG. 7 , the indexing step, shall now be described in greater detail. - In order to allow for fast searching of stored data, e.g., email,
search module 104 first builds and then maintains an index of all of the user's stored data, e.g., email and other PIM (personal information manager) data including appointments, contacts, tasks, notes, journal entries, etc. (hereinafter, all referred to as messages). Maintaining the index is performed through one or more of the synchronization processes (step 704) described throughout. In one example, the building and maintaining of the index is performed without interrupting use of the stored data, if a user so desires. - One concern for indexing is minimal annoyance to the user, while allowing for a later faster and more effective search. Reducing annoyance can be based on when indexing is done and/or how indexing is done. In other words, text indexing systems have a trade-off between fast reads and fast writes. In one example,
search module 104 is optimized for fast writes when building the initial index.Search module 104 also does fast writes when updating the index, i.e., performing synchronization.Search module 104 incurs the cost of optimizing the index for fast reads when the user is idle. -
FIG. 8 is a flow chart depicting anindexing method 800, according to one embodiment of the present invention.Method 800 represents an embodiment ofstep 702 ofFIG. 7 . - In
step 802, a determination is made whether a previous indexing operation has completed. If yes, the entire data store instorage device 118 is not re-indexed. Instead, the existingindexes 120 are augmented/updated via synchronization (step 704), which is described in greater detail below with reference toflowchart 900 inFIG. 9 . If no, in step 804 a determination is made whether a previous indexing operation has started, but not completed. If yes, instep 806 the previous indexing operation is re-initiated from the last stored data indexed. Step 806 involves performance ofstep 902, illustrated inFIG. 9 and described below. - If no at step 804 (no indexing has started), indexing is started. Indexing can performed using any well known techniques, e.g., using categories, prioritizing files or folders, compressing data, etc. Select techniques for indexing are described in more detail below, although it should be understood that the invention is not limited to the indexing embodiments described herein. Again, if no at
step 804,method 800 moves onto one or more ofsteps - 1. Category Based Indexing
- In step 808 a determination is made whether indexing will be performed using a category-based technique. If no,
method 800 moves to step 812. If yes, atstep 810 the stored data is indexed using categories. Category-based indexing is well known, and shall not be described herein except as follows. In this embodiment, indexing is enhanced when search criteria are used to set the parameters for the indexing. For example, what is indexed (what categories are used) and how the messages are interrogated (what processing is done to the text) contribute to forming indexed categories that are more susceptible to better, more effective, and faster searching - 2. Priority Based Indexing
- In step 812 a determination is made whether indexing is based on prioritizing the stored data. If no,
method 800 moves to step 816. If yes, atstep 814 the stored data is indexed using a priority-based technique. Priority-based indexing is well known, and shall not be described herein except as follows. In one example, whensearch module 104 builds the initial index,search module 104 starts with the folder most likely to be searched first by the user. For example, with respect to the EXCHANGE email software client,search module 104 starts with the Contacts folder first, and Inbox next, since these are heavily used by users. The folder most likely to be searched first can be preset as: known important folders, folders with the most last modified messages, etc. Then, folders with the least messages are indexed, and so on. The public, SPAM (e.g., bulk, junk, etc.), and deleted folders can be indexed last, if at all. - It is to be appreciated that other priority-based indexing techniques can also be used, as are defined by individual user's preferences.
- 3. Compression Based Indexing
- In step 816 a determination is made whether the indexing will be performed using compression of the stored data. If no,
method 800 moves to step 820. If yes, atstep 818 the stored data is indexed using a compression-based technique. Compression-based indexing is well known, and shall not be described herein except as follows. Compression-based techniques are useful because they often decrease the amount of information indexed. This is of particular importance with the present invention, where the data set to be indexed can include many fields, such as subject, body, from, to, cc, bcc, type, attachment, last modification date, long term entryid, record key, search key, folder id, etc. According to embodiments of the invention, a number of compression-based techniques can be used, including but not limited to stemming, phonetic coding, and Levenshtein distance techniques, which are described below. Indices for the compressed data are typically kept in their own fields in the index separate from any other indices related to the data in its uncompressed form - a. Stemming
- When using stemming, the
search module 104 identifies the stems of search terms input by the user, and then performs the search using both the search terms and their respective stems. For example, the stem of ‘running’ is ‘run.’ The stem of ‘ran’ is also ‘run.’ Stems can be identified using well known algorithms, dictionaries, or a combination of both. Stemming is well known, and shall not be described herein except as follows. - When stemming is used for compression-based indexing,
search module 104 uses word stemming for fields that are likely to contain normal words and sentences, but not for fields that are less likely to contain normal words and sentences. This is most important in languages having nouns that stem, e.g., German. According to an embodiment, the subject and body fields are stemmed. Other fields that do not typically contain data that is useful to stem are not stemmed (for example in email, To, From, Name, Address, Phone Number, and Category are typically not stemmed). - In one example, during the
indexing step 818,search module 104 keeps the stems in separate fields of thesearch indexes 120 so that the original word positions are maintained. Accordingly, when performing searches, thesearch module 104 is aware when it has an exact match, or when it has matched a stem. In embodiments,search module 104 establishes a section/separate field of theindex 120 that only saves messages including stems of words to make searching faster. However, a user always has the option to search all full messages and not just the stems. Thus, a user may be given the option to search stems only or entire messages. For example, when autocomplete is being used (described further below), a user may want to autocomplete against full terms, and not stems. - b. Phonetic Coding
- Phonetic coding is well known, and shall not be described herein except as follows.
- When phonetic coding is used for compression-based indexing,
search module 104 uses phonetic coding on fields that contain words and names (e.g., name, addresses, subject, body, etc.). For example, Anderson, Andersen, Andersin, etc., as well as soundex, metaphone, double metaphone, are examples of phonetic coding algorithms. It is to be appreciated that different algorithms can be used based on the language of the data store in thestorage device 118. Phonetic coding allows for later fuzzy matches on misspelled words and names. For example, thesearch module 104 will use words that sound alike to index into phonetic fields.Search module 104 also allows for both a field of phonetic coded data to be saved along side of all data from a message so that a user has the option of searching the compressed data as well as the full data. - c. Levenshtein Distance
- Levenshtein distance techniques are well known, and shall not be described herein except as follows.
- When Levenshtein distance is used for compression-based indexing,
search module 104 uses Levenshtein distance to handle misspellings. Levenshtein distance is a measure of the similarity between two strings, which we will refer to as the source string (s) and the target string (t). The distance is the number of deletions, insertions, or substitutions required to transform s into t. For example, if “s” is “test” and “t” is “test”, then LD(s,t)=0, because no transformations are needed. The strings are already identical. In another example, if “s” is “test” and “t” is “tent,” then LD(s,t)=1, because one substitution (change “s” to “n”) is sufficient to transform s into t. The greater the Levenshtein distance, the more different the strings are. This is a way to do string matching with errors. It does not rely on stems or phonetics. Instead, it is just the number of edits that need to be made to turn one string into another string, i.e., changes to individual characters in a word. Use of Levenshtein distance is effective for catching typographical errors, and is useful for all fields. - 4. Language Based Indexing
- In step 820 a determination is made whether the indexing will be language-based. If no,
method 800 moves to step 824. If yes,search module 104 instep 822 detects the language (e.g., English, German, French, etc.) of the data object being indexed, and indexes the data object using indexing algorithms specific to that language. Step 822 is performed using language specific indexing parameters (stemming, phonetic coding, etc.). Language-based indexing is well known, and shall not be described further. - 5. Default Indexing
- If no at
steps step 824 indexing is performed by storing indices relating to the data objects fromstorage device 118 intoindex 120. - It is to be appreciated that the order of
steps 808/810, 812/814, 816/818, and 820/822 can be changed, so long as these steps occur before default indexing is performed atstep 824. Thus, it is to be appreciated that other techniques can be used to interrogate messages in order to index the messages as desired, as would be apparent to one skilled in the art upon reading and understanding this disclosure. - In one example, the present invention includes two separate indices, one for folders and one for individual messages. Each index is updated and/or synchronized against an actual folder or message store.
- In one example, folders inherit the index status of their parent if copied within a same area as parent. If the folder is moved, the folder can keep the index status of a previous position.
- Step 706 of
FIG. 7 , the synchronization step, shall now be described in greater detail. While the following is presented in the context of email messages, these embodiments are generally applicable to any type of data objects. - As discussed above, after the
initial indexing step 702 is completed, the indexed data inindexes 120 is maintained or synchronized to include subsequent changes to the stored data instorage device 118. Such operation is performed in thesynchronization step 704. - As discussed, changes can be, but are not limited to, additions, deletions, modifications, moves, etc., occurring to data and/or folders in the
storage device 118 from one time period to a subsequent time period. Thesynchronization step 704 operates generally as follows. The data objects associated with stored data instorage device 118 is compared to data objects in theindex 120 to determine if a change has occurred. If a change has occurred, theindex 120 is updated to reflect that change. Also, data object associated with folders including multiple pieces of data in thestorage device 118 are compared to data objects of the folders in theindex 120. If contents of the folders have changed, theindex 120 is updated to reflect those changes. -
FIG. 9 shows a flowchart depicting asynchronization method 900, according to one embodiment of the present invention.Synchronization method 900 can occur duringstep 704 discussed above. - In
step 902, a determination is made whether synchronization has occurred within a specific time period. If yes, then it is not necessary to synchronize thesearch index 120, and themethod 900 remains atstep 902. The length of the time period is implementation specific, and may be adjusted by the user in some embodiments. - If no in
step 902, thenmethod 900 moves to one or more of steps 904 (Notification Based Synchronization), 906 (Non Notification Based Synchronization), 908 (Deleted/Moved Message Based Synchronization), 910 (Dropped Message Based Synchronization), 912 (Application Launch Based Synchronization), and 914 (Time Based Synchronization), which are each discussed in more detail below. - A. Notification Based Synchronization
- In
step 904, when an underlying software program allows for files, messages, or folders to notifysearch module 104 that an event has occurred, notification based synchronization is performed. -
FIG. 10 shows an exemplary notification based method that can occur duringstep 904, according to one embodiment of the present invention. Instep 1000, a determination is made whether a notification has been received from a software program. If no,method 904 remains atstep 1000. If yes, instep 1002search module 104 compares data objects associated with the notifications with corresponding data objects instorage device 118 to identify changes—thesearch module 104 then reflects those changes in theindex 120. Then,method 904 returns to step 1000. - In notification based synchronization, for an email example,
search module 104 tracks notifications for changes to the indexed messages.Search module 104 can provide support for create, delete, update, move, and copy operations. Once a notification is received by thesearch module 104, synchronization is performed. In one example, by waiting a short period before processing a notification,search module 104 can avoid doing unnecessary processing. For example, suppose an email arrives into the user's inbox, and then a rule moves the email from the inbox to a folder. If thesearch module 104 immediately processed the arrival of the email into the inbox,search module 104 would then have to also process the move of the email from the inbox to the folder. By waiting a short time,search module 104 need only update theindex 120 to reflect the email in the folder. - For an example using OUTLOOK, all notifications related to local personal folders contain a stable long-term identifier, entryid, that can be used by
search module 104 to find the corresponding message in theindex 120. Thus, it relatively easy to updateindex 120 and link to messages in local personal folders. Also, the long-term entryid allowssearch module 104 to find a given message, as well as all various properties of the message. In embodiments, everytime search module 104 requests a message from theindex 120 using entryid, it should always receive the same message. Thus,search module 104 can easily update (synchronize) theindex 120 based on the notifications. - B. Non Notification Based Synchronization
- In
step 906, when an underlying software program does not allow for files, messages, or folders to notifysearch module 104 that an event has occurred, non-notification based synchronization is performed. -
FIG. 11 shows an exemplary non-notification based synchronization method that can occur duringstep 906, according to one embodiment of the present invention. Instep 1100, a determination is made whether one or more data objects instorage device 118 have been changed. If yes,search module 104 compares the changed data object instorage device 118 with the corresponding data object inindex 120 to synchronize the data objects and indexed the changes. Thereafter, themethod 906 returns to step 1100. If no instep 1100, at step 1104 a determination is made whether thesystem 102 has been idle. If yes,method 906 moves to step 1102. If no, in step 1106 a determination is made whether a specified time period has passed. If yes,method 906 moves to step 1102. If no,method 906 moves to step 1100. - For example, OUTLOOK EXPRESS has no notification scheme. In non-notification based synchronization,
search module 104 monitors underlying data files in order to index and synchronize. - Public folders typically do not provide notifications, so
search module 104 can use incremental change synchronization (ICS) or other synchronization algorithms to find changes there. For example, duringICS search module 104 asks the EXCHANGE store what has been changed since the last request, and the added, created, and deleted messages can be determined. This can be used to determine what message was removed from message store, and theindex 120 can then be appropriately updated. This is most helpful with the backside or source side of moves and deletes, which are discussed in more detail below. - In an example using public folders, which as noted above typically do not provide notifications, synchronization can be performed either periodically or when the
system 102 is idle. Alternatively, the public folder can be interrogated using the ICS methodology discussed above. - As another example, when an EXCHANGE store has too many messages, some notifications may not be generated. This can occur when a user performs a great many actions at a single time, e.g., mark all read, mark all unread, move an entire folder, delete a lot of email at once, when saving a draft, editing the saved draft, and resaving the draft. In one example, when no notification is generated because of these circumstances, synchronizing starts at the folder level and then moves to the message level, processing all messages in a single folder at a time. Thus, the synchronizing operations can be delayed and then checked for a last action in time to use as the final message to synchronize for indexing.
- C. Deleted/Moved Message Based Synchronization
- In
step 908, when data objects have been moved or deleted, a deleted/moved data object based synchronization method is performed. -
FIG. 12 shows an exemplary deleted/moved message synchronization method that can occur duringstep 908, according to one embodiment of the present invention. - In
step 1200, a determination is made whether a move or deletion has occurred. If no,method 908 remains atstep 1200. If yes, then in step 1202 a determination is made whether properties of the message can be determined, where exemplary properties are discussed below. - If no at
step 1202, then atstep 1204 incremental change synchronization (ICS) is performed, which is described in more detail below. The method then returns to step 1200. - If yes at
step 1202, then atstep 1206 thesearch module 104 determines the properties of the message. - In
step 1208,search module 104 uses the properties to find data objects related to the indexed and related stored messages. - In
step 1210,search module 104 compares the related data objects of the indexed and stored messages to what is in thesearch indexes 120, and indexes the changes. Then,method 908 returns to step 1200. - For example, while the EXCHANGE message store allows
search module 104 to monitor for newly created messages, the backside of moves (e.g., the location from which a message is moved or a moved from area) and delete notifications use a short-term entryid that is usually no longer valid when indexing, synchronizing, and/or searching is performed. This short term entryid cannot be used to look up the message in the message store or theindex 120. Even though EXCHANGE allows for conversion of short-term entryid's to long term entryid's, in EXCHANGE the long term entryid's may not be unique. This short term entryid can be used for synchronizing of create, update, copy, and destination side of moves (moved to location) because synchronizing is usually done timely enough bysearch module 104 to use this to at least initially index the message. - In various examples,
search module 104 overcomes this inability to use short term entryids in several ways for deletes and backsides of moves. In one example, as represented inFIG. 12 and described above, thesearch module 104 looks at other properties of the message to find the original message in theindex 120. - In an example using EXCHANGE,
search module 104 can use the PR_RECORD_KEY or the PR_SOURCE_KEY. Since there may be duplicates in the index,search module 104 can probe the stored long term entry id of the indexed message to see if it is still there. For hard deletes,search module 104 can try to leverage EXCHANGE's soft delete feature.Search module 104 can try to open the short-term entry id in the notification using the SHOW_SOFT_DELETES option.Search module 104 can also use the incremental change synchronization (ICS) to get change lists from the EXCHANGE server. As a last resort,search module 104 can synchronize the folder in which the message was deleted. When this is done,search module 104 will discover the message that is missing (i.e., deleted). - In another example for deleted messages and backside of moved messages,
search module 104 can use record key PR_RECORD_KEY. While PR_RECORD_KEY is unique within a given message store, PR_RECORD_KEY may appear in multiple stores (where each occurrence of PR_RECORD_KEY refers to a different message). Thus,search module 104 can use a record key of the message itself, the record key of a folder holding the message, and the last modification date of the message to assist in indexing. Using these three properties allows for uniquely identifying messages for indexing and retrieving from theindex 120, or at least allows a message to be found and interrogated for properties to be indexed. These three properties are found after opening a message, and not from any notification service of an EXCHANGE source. - Another source to assist in synchronizing deleted messages and backside moves of messages is to use a soft delete function (SHOW_SOFT_DELETE) in the EXCHANGE store. Soft deletes do not permanently delete messages, but rather move them to another folder (e.g., recently deleted mail), from which they are restorable for a period of time or until a cache is full, depending on a document retention policy.
Search module 104 can still search for these messages and interrogate them for properties to index them even if the message is deleted. - A still further source to assist in synchronizing deleted messages and backside moves of messages is to use a PR_SEARCH_KEY, which is a unique random number created for each message. This can be used because it copies and moves with the message, and survives with a destination message. Thus,
search module 104 can use a new id and a search key to find a message, and then interrogate it for indexing. This is not as helpful in the case of deletions, but is helpful with backside of moves. - In a still further example, opening a new message (moved-to message), interrogating the message, obtaining the search key, and then looking at the index to see if another message had the search key allows
search module 104 to find the moved from or backside location of the message or the backside message. - In a still further example, ICS can be used. As described above, ICS asks the EXCHANGE store what has been changed since the last request, and the added, created, and deleted messages can be determined. This can be used to determine what message was removed from message store, which message and associated information can then be deleted from the index. This is most helpful with backside or source side of moves and deletes.
- D. Dropped Notification Based Synchronization
- In
step 910, when notifications are determined to have been dropped, a dropped notification based synchronization method is performed. - For example, EXCHANGE can sometimes drop notifications. When
search module 104 gets more than a threshold rate of notifications (such threshold being implementation dependent),search module 104 assumes that some were dropped. In an embodiment, as a consequence, thesearch module 104 synchronizes affected folders (perhaps all folders). -
FIG. 13 shows an exemplary dropped notification synchronization method that can occur duringstep 910, according to one embodiment of the present invention. Instep 1300, a determination is made whether notifications have been dropped. This can be based on one of the techniques or criteria described below. If no,method 910 remains atstep 1300. If yes, instep 1302 folder-to-folder based synchronization is performed between respective data objects associated with folders inindex 120 andstorage device 118, which is described in more detail below. Then,method 910 returns to step 1300. - As discussed above, in EXCHANGE, many notifications may not be generated when a large number of messages are generated.
- When used with other email systems, in an embodiment, the
search module 104 assumes that if a certain number of notifications happen in a certain period of time, some notifications were dropped. - For example,
search module 104 can delay updates to theindex 120 when the same message has multiple changes in a given period of time. In one example, a delay of about 0.1 seconds to about 2 seconds is used, and then only a last change is interrogated to index the message. This can be done using a coalescing algorithm. For example, ifsearch module 104 detects an update, update, delete, then searchmodule 104 indexes only the last delete. Such operation results in a reduction of overhead and wasted operations. - In another example, a large number of notifications can affect two folders of messages. This typically occurs after a large move (folder-to-folder) or a large delete of messages. In one example, if this occurs,
search module 104 ignores individual changes, and instead looks only to folder notifications or changes. Then,search module 104 determines the affected folders and synchronizes data objects associated with messages in those folders. This approach is effective becausesearch module 104 can aggregate a large number of small changes into a single large change. For example, if a large number of messages are moved from one folder to another,search module 104 synchronizes just the two folders instead of processing all of the individual notifications. - In one example, the
search module 104 performs folder-to-folder synchronization by scanning data objects associated with the entire list of messages in a given folder, and also scanning the data objects associated with messages that should be in the folder fromindex 120. Thesearch module 104 compiles a list of the messages that have changed, and updates theindexes 120 accordingly - In anther example, during folder synchronization when a difference is found between data objects associated with data in the
storage device 118 andindex 120, all messages that were in the affected folder in theindex 120 are deleted and then updated later when message synchronization is performed. Also, a user can chose which folders are indexed. For example, a user may not want a public folder, spam folder, or deleted messages folder indexed. The user interface ofsearch module 104 includes a folder menu to allow the user to choose which folders to synchronize. - It is to be appreciated that folder synchronization can also be performed during
steps - E. Post Application Launch Based Synchronization
- In
step 912, when thesearch module 104 is relaunched (or for some other reason has been idle for some time), a post application launch based synchronization method is performed. -
FIG. 14 shows an exemplary post application launch based synchronization method that can occur duringstep 912, according to one embodiment of the present invention. Instep 1400, a determination is made whether thesearch module 104 has been recently launched. If no,method 912 remains atstep 1400. If yes, atstep 1402 thesearch module 104 selects a data object associated with a message from a list where the messages are ordered from most recently modified to least recently modified, and then synchronizes the selected message. It is to be appreciated that any of the synchronization embodiments described herein can be used instep 1402. - In
step 1404, a determination is made whether there are more messages from the ordered list to process. If no,method 912 returns to step 1400. If yes, then control returns to step 1402 where the next message from the ordered list is selected and synchronized. - Post application launch based synchronization shall now be described in greater detail.
- The
storage device 118 may changed during periods when thesearch module 104 is not running or is otherwise inactive. This can happen, for example, when multiple clients interact with thestorage device 118. It can also happen when the user disablessearch module 104 and then enables it again later. In these situations,search module 104 synchronizes shortly after application launch to catch changes whilesearch module 104 was idle. - In one example, two enumerators can be used for synchronizing after application launch: (1) a first enumerator for information regarding a folder, or a message within a folder, is compared to (2) a second enumerator for current information in the
index 120. Synchronization is performed starting with a last modified date of each message (most recently modified) to an oldest modified date of a message (least recently modified). Time periods are saved to about the hundredth of a nanosecond, in some examples. Although last modified dates can be kept to about one-hundred nanoseconds, occasionally two messages can have the same last modified date. In this case, in one example, a secondary sort is used through use of the record key for each message along with a primary sort of last modified date. This is allowed because a record key is unique across each respective message store. - In one example,
search module 104 compares each modified message in the folder/message to data in theindex 120 using the last modified time. When a message is found in thestorage device 118 that is not in theindex 120, it is inserted into theindex 120. When a message is found in theindex 120, but not found in thestorage device 118, then it is deleted from theindex 120. - Thus, if there is a gap in the index 120 (referred to B messages in the following examples), then a message or folder has been added and an insertion is required in the
index 120. If there is a gap in storage device 118 (referred to A messages in the following examples), then a folder or message has been deleted and deletion is required from theindex 120. This should allow an updated data object of a message to be added to theindex 120 as being new first, and then later the original data object of a message is deleted from theindex 120 because it is determined to be unmatched. - For example, suppose A.time.1 is a first message (i.e., most recently modified) in the
storage device 118, and B.time.1 is a first message in theindex 120. If there is an A.time.1+n message, but only a B.time.1+n+1 (i.e., message B.time.1+n does not exist), then the A.time.1+n is new, and a matching B.time.1+n is inserted into theindex 120. - In another example, suppose there is an A.time.1 and an A.time.1+n+1, and a B.time.1, B.time.1+n, and B.time.1+n+1. In this case, B.time.1+n is deleted from
index 120 because A.time.1+n was missing and must have been deleted fromstorage device 118. - In one example, the synchronization method for individual messages or files is incremental in that not all messages need to be loaded at once time. For example,
search module 104 can compare A.time.1 to B.time.1, then A.time.2 to B.time.2, etc. By operating in this manner it is unlikely any amount of messages will overwhelm the system. - Thus,
search module 104 allows for interruptions in its operation since it always starts synchronization at the last modified message. Thus, it does not matter wheresearch module 104 discontinued its operation. Further, this allows for easy synchronization after restarting of the email application. For example, operation of thesearch module 104 can be discontinued when the email application becomes idle, and then re-activated when the email application becomes active. - F. Online and Offline Based Synchronization
- In
step 914, an online and offline based synchronization method is used when thesearch module 104 is operating with an application that is connected via a network tostorage device 118 and/orindex 120. -
FIG. 15 shows an online/offline synchronization method that can occur duringstep 914, according to one embodiment of the present invention. Instep 1500, a determination is made whether the network is online. If no,method 914 remains atstep 1500. If yes, instep 1502 one or more of the synchronization embodiments described herein are performed. Then,method 914 returns to step 1500. - The online/offline synchronization embodiment shall now be described in greater detail.
- When OUTLOOK is used it interacts with some mail servers (EXCHANGE) that store mail in a centralized repository. Whenever OUTLOOK starts up, it connects to these mail servers and displays the user's email in its user interface. While there are many advantages to keeping email on a centralized server, it can be inconvenient when a user is on a computer that does not have constant access to the network or when the server is not running for some reason. OUTLOOK, like many other email clients, has a feature called “Work Offline” that allows users to automatically download some or all of their email to their local machine so that they can access their email while offline When in offline mode, it may appear that some of the user's folders have been deleted or emptied of all their contents, when in reality they are simply not accessible because the user is not connected to the server. Conventional implementations of an indexing algorithm would delete the information from the index for each of these folders when the user is offline and reinsert the info whenever the user was back online. In contrast to these conventional programs,
search module 104 operates by scanning the contents of the email client's repository and attempts to connect to the server in some way to verify that the folder is accessible. Then,search module 104 requests each folder for its subfolders. Ifsearch module 104 fails to connect with a folder,search module 104 records this fact and ignores any differences to any of its subfolders. In this way,search module 104 is able to distinguish between folders that have been deleted and folders that are not available because the user is in offline mode.Search module 104 can then avoid changing the index for any folders that thesearch program 104 cannot access when offline. Once back online, any of the synchronization methods described herein can be used to synchronize data inindex 120 andstorage device 118. - In one example, pseudo code for synchronizing a folder list is as follows:
// MAPI is the message store for Outlook get list of stores and folders in them from MAPI for each store check for record key of last folder The search program were syncing, use 0 if none found get all folders from MAPI with (record key >= last folder's record key) sorted by record key get all folders from index with (record key >= last folder's record key) sorted by record key e_mapi = enumerator for MAPI folders e_index = enumerator for index folders f_mapi = e_mapi−>next( ) f_index = e_index−>next( ) while (f_mapi && f_index) {compare f_mapi and f_index's record keys if (they're equal) {check for different name/parent between the two, update index if necessary if (folder not selected for indexing) {delete all messages in message index for this folder} f_mapi = e_mapi−>next( ) f_index = e_index−>next( ) } else if (compare showed f_mapi not in index) (add f_mapi to folders index f_mapi = e_mapi−>next( ) } else { if (parent folder is reachable) {remove all messages from message index for this folder remove folder from folders index} f_index = e_index−>next( ) } } if (f_mapi) {begin fast insert while (f_mapi) {add f_mapi to folders index f_mapi = e_mapi−>next( ) } end fast insert } while (f_index) { if (parent folder is reachable) { remove all messages from message index for this folder remove folder from folders index } f_index = e_index−>next( ) } optimize folders index } - In another example, pseudo code for synchronizing messages is as follows:
// The algorithm below doesn't operate on all of the fields of the // messages or the index. It only needs a subset of the data the search program call // the SyncMessageData. The fields of the SyncMessageData are: // message identifier // for Outlook this is a concatenation of the store, folder, message // record keys // message last modified date // the compare operator compares by last mod date and then by message identifier for each folder f last => retrieve last sync state e_folder => enumerator for all sync message data from mail folder >= last e_index => enumerator for all sync message data from index >= last m_folder = e_folder−>next( ) m_index = e_index−>next( ) while (m_folder && m_index) { if (m_folder == m_index) { m_folder = e_folder−>next( ) m_index = e_index−>next( ) } else if (m_folder < m_index) { persist m_folder as last sync state for f insert m_folder into index m_folder = e_folder−>next( ) } else { delete m_index from index m_index = e_index−>next( ) } } if (m_folder) { // insert the rest while (m_folder) { persist m_folder as last sync state for f insert m_folder into index m_folder = e_folder−>next( ) } } else if (m_index) { // delete the rest while (m_index) { delete m_index from index m_index = e_index−>next( ) } } // to be safe, The search program don't ever persist m_index as last sync state // there is no “update” case since the search program use lastmod as a key - For convenience, the above description has included examples to particular software programs, such as OUTLOOK and EXCHANGE. Such reference has been made for illustrative purposes, and are not limiting. Many other email programs can also be used, each with their own set of notifications and message properties, which can be used during indexing/synchronizing, as would be apparent to one skilled in the art based on the teachings contained herein.
- In one example,
search module 104 can generate a welcome screen on a graphical user interface to help a user begin initial indexing after they install the program. For example, for an antispam aspect ofsearch module 104, as described in U.S. Provisional Patent Application No. 60/616,432, filed Oct. 7, 2004, and U.S. Appl. No. (tbd) (Atty. Doc. No. 2426.0010001) filed (tbd), which are incorporated by reference herein in their entireties, a welcome panel assists a user in building a list of approved senders. Then, for the search aspect ofsearch module 104, the welcome panel alerts the user that an index should be built for his saved messages when he begins using a software application associated with the saved messages, for example an email product. - The welcome panel can also help the user upgrade his index if the format of the index changes (e.g., a new version of the
search module 104 is released, downloaded, and installed). - The welcome panel can also allow the user to resume an interrupted index build. This could occur, for example, if the mail application was closed during the index building process. One way to do this is using the ICS method described above. In one example, a user can decide not to use an initial index build, and instead have the index built later via options on a drop down menu associated with a tool bar in the email product. In one example, the welcome panel does not alert the user to build and index again until they upgrade to a new version of the software, in which case the user will get an update panel again. In another example, if the user is using an old version of
search module 104, a welcome panel will alert him to the search module's search capabilities and the need to build an index for searching. It is to be appreciated that other operations can be performed with the welcome panel functions. - In one example,
search module 104 can allow for an auto-completion mode for terms that the user is typing against terms in the index. For example,search module 104 may be scoped to fields (for example, only auto complete against terms in the subject field) or may autocomplete against original source terms, not stems or phonetically coded terms. - In one example, autocompletion can use old searches, compressed indexes, and/or other terms in the index to suggestion completions for the user's input.
- In one example,
search module 104 can suggest other searches using terms that are close to those entered (using a variety of methods, such as Levenshtein distance, phonetic coding, etc.). Thesearch module 104 can also be useful to suggest corrections to misspellings and spelling variations. - In one example, a search box can be placed next to anti-spam controls on a tool bar of the email application. Within the search box, many different search schemes can be used, such as simple word searching, Boolean searching, field searching, etc., based on the underlying text searching engine incorporated into
search module 104. - In one example, search results (e.g., message, contact, task, etc.) are shown in another window, which may also include another search box and/or other search queries. Then, once a result is opened, another search box can appear in the opened message, contact, etc., which can be used to search within the message itself.
- In one example, the
search module 104 may suggest other terms/searches similar to the search inputted, and can show the number of hits for these suggested searches. This can be achieved using the Levenshtein distance technique, for example. Thesearch module 104 may also suggest other areas to search. Additionally, thesearch module 104 may display links which, if clicked, will execute the suggested searches. In another example, this can be done for email, IM, Internet, files stored in the computer, etc. - In one example, the data in the
storage device 118 does not need to be in theindex 120. Thesearch module 104 can access the data as needed from thestorage device 118. - In one example,
search module 104 maps a single qualifier in the query language to multiple fields in theindex 120. For example, thesearch module 104 may map the virtual field “name:” in the query language to all fields that contain names in the index 120 (from, to, cc, assistant, etc.). In some embodiments, users may define the scope of virtual fields (i.e., define the fields that map to a given virtual field). - Users download search bars onto their desktops or search engines from companies such as GOOGLE and YAHOO in order to utilize their popup blocking features, as much as to have ease of searching. According to an embodiment of the present invention,
search module 104 is bundled with anti-spam and/or anti-fraud products to increase user acceptance and/or use of thesearch module 104. This is similar to bundling a pop-up blocker with a browser search bar, since spam is to email as pop-ups are to web pages. By default,search module 104 excludes a spam folder from search results, although this is user adjustable. - Further, this bundling increases functionality of the
search module 104 by ensuring that all spam folders are identified and eliminated from a query, if a user so chooses. Also, the anti-spam filter can be used to filter out spam from the search results produced by thesearch module 104. Thus, by bundling thesearch module 104 with anti-spam applications, spam can be excluded from search results. - While various embodiments of the present invention have been described above, it should be understood that they have been presented by way of example only, and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention. Thus, the breadth and scope of the present invention should not be limited by any of the above-described exemplary embodiments, but should be defined only in accordance with the following claims and their equivalents.
- It is to be appreciated that the Detailed Description section, and not the Summary and Abstract sections, is intended to be used to interpret the claims. The Summary and Abstract sections can set forth one or more, but not all exemplary embodiments of the present invention as contemplated by the inventor(s), and thus, are not intended to limit the present invention and the appended claims in any way.
Claims (46)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/245,100 US8126895B2 (en) | 2004-10-07 | 2005-10-07 | Method, apparatus, and computer program product for indexing, synchronizing and searching digital data |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US61692504P | 2004-10-07 | 2004-10-07 | |
US11/245,100 US8126895B2 (en) | 2004-10-07 | 2005-10-07 | Method, apparatus, and computer program product for indexing, synchronizing and searching digital data |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060080303A1 true US20060080303A1 (en) | 2006-04-13 |
US8126895B2 US8126895B2 (en) | 2012-02-28 |
Family
ID=36146617
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/245,100 Active 2026-12-23 US8126895B2 (en) | 2004-10-07 | 2005-10-07 | Method, apparatus, and computer program product for indexing, synchronizing and searching digital data |
Country Status (1)
Country | Link |
---|---|
US (1) | US8126895B2 (en) |
Cited By (92)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060036946A1 (en) * | 2004-08-16 | 2006-02-16 | Microsoft Corporation | Floating command object |
US20060036964A1 (en) * | 2004-08-16 | 2006-02-16 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are relevant to a selected object |
US20060069604A1 (en) * | 2004-09-30 | 2006-03-30 | Microsoft Corporation | User interface for providing task management and calendar information |
US20060101012A1 (en) * | 2004-11-11 | 2006-05-11 | Chad Carson | Search system presenting active abstracts including linked terms |
US20060101003A1 (en) * | 2004-11-11 | 2006-05-11 | Chad Carson | Active abstracts |
US20060235878A1 (en) * | 2005-04-14 | 2006-10-19 | Microsoft Corporation | Client side indexing of offline address book files |
US20060271864A1 (en) * | 2005-05-24 | 2006-11-30 | Microsoft Corporation | Narrow mode navigation pane |
US20070006206A1 (en) * | 2005-06-16 | 2007-01-04 | Microsoft Corporation | Cross version and cross product user interface |
US20070055701A1 (en) * | 2005-09-08 | 2007-03-08 | Edwin Tse | Method and telecommunications node for information synchronization |
US20070061306A1 (en) * | 2005-09-12 | 2007-03-15 | Microsoft Corporation | Search and find using expanded search scope |
US20070061307A1 (en) * | 2005-09-12 | 2007-03-15 | Microsoft Corporation | Integrated search and find user interface |
US20070067278A1 (en) * | 2005-09-22 | 2007-03-22 | Gtess Corporation | Data file correlation system and method |
US20070198340A1 (en) * | 2006-02-17 | 2007-08-23 | Mark Lucovsky | User distributed search results |
US20070219954A1 (en) * | 2006-03-15 | 2007-09-20 | Microsoft Corporation | Refined Search User Interface |
US20070279417A1 (en) * | 2006-06-01 | 2007-12-06 | Microsoft Corporation | Modifying a chart |
US20080010238A1 (en) * | 2006-07-07 | 2008-01-10 | Microsoft Corporation | Index having short-term portion and long-term portion |
US20080046676A1 (en) * | 2006-08-16 | 2008-02-21 | International Business Machines Corporation | Efficient synchronised updates to a data record in a data store |
US20080086555A1 (en) * | 2006-10-09 | 2008-04-10 | David Alexander Feinleib | System and Method for Search and Web Spam Filtering |
US20080189247A1 (en) * | 2007-02-01 | 2008-08-07 | Yahoo! Inc. | Method and system for improved categorical searching |
US20080275874A1 (en) * | 2007-05-03 | 2008-11-06 | Ketera Technologies, Inc. | Supplier Deduplication Engine |
US20080282200A1 (en) * | 2007-05-10 | 2008-11-13 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US20080320411A1 (en) * | 2007-06-21 | 2008-12-25 | Yen-Fu Chen | Method of text type-ahead |
US20090088218A1 (en) * | 2007-10-02 | 2009-04-02 | Tae Hun Kim | Mobile terminal and method of controlling the same |
US20090094206A1 (en) * | 2007-10-02 | 2009-04-09 | Lg Electronics Inc. | Mobile terminal and method of controlling the same |
US20090164451A1 (en) * | 2007-12-21 | 2009-06-25 | Reed Benjamin C | Syndicating humor |
US20090182741A1 (en) * | 2008-01-16 | 2009-07-16 | International Business Machines Corporation | Systems and Arrangements of Text Type-Ahead |
US20090193332A1 (en) * | 2008-01-28 | 2009-07-30 | Samsung Electronics Co., Ltd. | Method and apparatus for editing letters |
US20090271700A1 (en) * | 2008-04-28 | 2009-10-29 | Yen-Fu Chen | Text type-ahead |
US20100169320A1 (en) * | 2008-12-23 | 2010-07-01 | Persistent Systems Limited | Method and system for email search |
US20100211889A1 (en) * | 2003-07-01 | 2010-08-19 | Microsoft Corporation | Conversation Grouping of Electronic Mail Records |
US20100250649A1 (en) * | 2009-03-30 | 2010-09-30 | Microsoft Corporation | Scope-Based Extensibility for Control Surfaces |
US20100286174A1 (en) * | 2009-03-19 | 2010-11-11 | Duke University | Inhibiting gsnor |
US20110040622A1 (en) * | 2006-02-17 | 2011-02-17 | Google Inc. | Sharing user distributed search results |
KR101021206B1 (en) * | 2006-01-24 | 2011-03-11 | 유오피 엘엘씨 | Selective conversion of oxygenate to propylene using moving bed technology and a hydrothermally stabilized dual-function catalyst system |
US20110072396A1 (en) * | 2001-06-29 | 2011-03-24 | Microsoft Corporation | Gallery User Interface Controls |
US20110093434A1 (en) * | 2009-10-16 | 2011-04-21 | Infosys Technologies Limited | Method and system for searching documents in local area network |
US7949714B1 (en) | 2005-12-05 | 2011-05-24 | Google Inc. | System and method for targeting advertisements or other information using user geographical information |
US20110231358A1 (en) * | 2007-12-28 | 2011-09-22 | Knowledge Computing Corporation | Method and apparatus for loading data files into a data-warehouse system |
CN102231168A (en) * | 2011-07-29 | 2011-11-02 | 前锦网络信息技术(上海)有限公司 | Method for quickly retrieving resume from resume database |
US8117542B2 (en) | 2004-08-16 | 2012-02-14 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are contextually relevant to a selected object |
US8146016B2 (en) | 2004-08-16 | 2012-03-27 | Microsoft Corporation | User interface for displaying a gallery of formatting options applicable to a selected object |
US8150930B2 (en) | 2003-07-01 | 2012-04-03 | Microsoft Corporation | Automatic grouping of electronic mail |
US8201103B2 (en) | 2007-06-29 | 2012-06-12 | Microsoft Corporation | Accessing an out-space user interface for a document editor program |
US8239882B2 (en) | 2005-08-30 | 2012-08-07 | Microsoft Corporation | Markup based extensibility for user interfaces |
US8255828B2 (en) | 2004-08-16 | 2012-08-28 | Microsoft Corporation | Command user interface for displaying selectable software functionality controls |
US8302014B2 (en) | 2010-06-11 | 2012-10-30 | Microsoft Corporation | Merging modifications to user interface components while preserving user customizations |
US20130005367A1 (en) * | 2005-10-31 | 2013-01-03 | Voice Signal Technologies, Inc. | System and method for conducting a search using a wireless mobile device |
US8402096B2 (en) | 2008-06-24 | 2013-03-19 | Microsoft Corporation | Automatic conversation techniques |
US8407307B1 (en) * | 2006-11-10 | 2013-03-26 | Flightview, Inc. | Flight information sending system and method |
US8484578B2 (en) | 2007-06-29 | 2013-07-09 | Microsoft Corporation | Communication between a document editor in-space user interface and a document editor out-space user interface |
US8495737B2 (en) | 2011-03-01 | 2013-07-23 | Zscaler, Inc. | Systems and methods for detecting email spam and variants thereof |
US20130204913A1 (en) * | 2012-02-07 | 2013-08-08 | Hitachi Solutions, Ltd. | File list generation method, system, and program, and file list generation device |
US20130246411A1 (en) * | 2005-12-02 | 2013-09-19 | Salesforce.Com, Inc | Methods and systems for optimizing text searches over structured data in a multi-tenant environment |
US8601004B1 (en) * | 2005-12-06 | 2013-12-03 | Google Inc. | System and method for targeting information items based on popularities of the information items |
CN103473229A (en) * | 2012-06-06 | 2013-12-25 | 深圳市世纪光速信息技术有限公司 | Memory retrieval system and method, and real-time retrieval system and method |
US8627222B2 (en) | 2005-09-12 | 2014-01-07 | Microsoft Corporation | Expanded search and find user interface |
US8689137B2 (en) | 2005-09-07 | 2014-04-01 | Microsoft Corporation | Command user interface for displaying selectable functionality controls in a database application |
US20140095641A1 (en) * | 2008-09-25 | 2014-04-03 | Microsoft Corporation | Techniques to manage retention policy tags |
US8762880B2 (en) | 2007-06-29 | 2014-06-24 | Microsoft Corporation | Exposing non-authoring features through document status information in an out-space user interface |
US8799808B2 (en) | 2003-07-01 | 2014-08-05 | Microsoft Corporation | Adaptive multi-line view user interface |
US8838603B1 (en) * | 2008-09-09 | 2014-09-16 | Google Inc. | Interactive search querying |
US8856241B1 (en) * | 2007-03-30 | 2014-10-07 | Emc Corporation | Management of email archive server requests |
US8930374B2 (en) * | 2012-06-29 | 2015-01-06 | Nokia Corporation | Method and apparatus for multidimensional data storage and file system with a dynamic ordered tree structure |
US8930464B1 (en) | 2007-03-30 | 2015-01-06 | Emc Corporation | Email content pre-caching to a local archive store |
US9002725B1 (en) | 2005-04-20 | 2015-04-07 | Google Inc. | System and method for targeting information based on message content |
US9015149B2 (en) | 2006-02-17 | 2015-04-21 | Google Inc. | Sharing user distributed search results |
US9015167B1 (en) * | 2014-01-27 | 2015-04-21 | Tipbit Inc. | User isolated indexes for determining the context and relevance of relationships |
US9015130B1 (en) * | 2008-03-25 | 2015-04-21 | Avaya Inc. | Automatic adjustment of email filters based on browser history and telecommunication records |
US9015621B2 (en) | 2004-08-16 | 2015-04-21 | Microsoft Technology Licensing, Llc | Command user interface for displaying multiple sections of software functionality controls |
US9046983B2 (en) | 2009-05-12 | 2015-06-02 | Microsoft Technology Licensing, Llc | Hierarchically-organized control galleries |
US20150161264A1 (en) * | 2006-12-19 | 2015-06-11 | Yahoo! Inc. | Techniques for including collection items in search results |
US9098837B2 (en) | 2003-06-26 | 2015-08-04 | Microsoft Technology Licensing, Llc | Side-by-side shared calendars |
US9189508B2 (en) * | 2013-07-19 | 2015-11-17 | Tipbit Inc. | Inferring relevance based on user interactions with email |
US9251239B1 (en) * | 2008-05-15 | 2016-02-02 | Salesforce.Com, Inc. | System, method and computer program product for applying a public tag to information |
US9286271B2 (en) | 2010-05-26 | 2016-03-15 | Google Inc. | Providing an electronic document collection |
US9384285B1 (en) | 2012-12-18 | 2016-07-05 | Google Inc. | Methods for identifying related documents |
US9514113B1 (en) | 2013-07-29 | 2016-12-06 | Google Inc. | Methods for automatic footnote generation |
US9529916B1 (en) | 2012-10-30 | 2016-12-27 | Google Inc. | Managing documents based on access context |
US9529791B1 (en) | 2013-12-12 | 2016-12-27 | Google Inc. | Template and content aware document and template editing |
US9542667B2 (en) | 2005-09-09 | 2017-01-10 | Microsoft Technology Licensing, Llc | Navigating messages within a thread |
US9542374B1 (en) | 2012-01-20 | 2017-01-10 | Google Inc. | Method and apparatus for applying revision specific electronic signatures to an electronically stored document |
US9588781B2 (en) | 2008-03-31 | 2017-03-07 | Microsoft Technology Licensing, Llc | Associating command surfaces with multiple active components |
US9665850B2 (en) | 2008-06-20 | 2017-05-30 | Microsoft Technology Licensing, Llc | Synchronized conversation-centric message list and message reading pane |
US9703763B1 (en) | 2014-08-14 | 2017-07-11 | Google Inc. | Automatic document citations by utilizing copied content for candidate sources |
US9727989B2 (en) | 2006-06-01 | 2017-08-08 | Microsoft Technology Licensing, Llc | Modifying and formatting a chart using pictorially provided chart elements |
US9842113B1 (en) | 2013-08-27 | 2017-12-12 | Google Inc. | Context-based file selection |
US20180129691A1 (en) * | 2016-11-04 | 2018-05-10 | Salesforce.Com, Inc. | Dynamic creation and maintenance of multi-column custom indexes for efficient data management in an on-demand services environment |
US10311042B1 (en) * | 2015-08-31 | 2019-06-04 | Commvault Systems, Inc. | Organically managing primary and secondary storage of a data object based on expiry timeframe supplied by a user of the data object |
US10409779B2 (en) | 2016-08-31 | 2019-09-10 | Microsoft Technology Licensing, Llc. | Document sharing via logical tagging |
US10437964B2 (en) | 2003-10-24 | 2019-10-08 | Microsoft Technology Licensing, Llc | Programming interface for licensing |
US11308037B2 (en) | 2012-10-30 | 2022-04-19 | Google Llc | Automatic collaboration |
US11586654B2 (en) * | 2017-09-08 | 2023-02-21 | Open Text Sa Ulc | System and method for recommendation of terms, including recommendation of search terms in a search system |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP5589837B2 (en) * | 2008-03-28 | 2014-09-17 | 日本電気株式会社 | Information reconstruction system, information reconstruction method, and information reconstruction program |
US8949956B1 (en) * | 2008-07-28 | 2015-02-03 | Google Inc. | Multi-account messaging management |
US10127324B2 (en) | 2014-06-21 | 2018-11-13 | Google Llc | Dynamically integrating offline and online suggestions in a geographic application |
US9984110B2 (en) | 2014-08-21 | 2018-05-29 | Dropbox, Inc. | Multi-user search system with methodology for personalized search query autocomplete |
US9183303B1 (en) * | 2015-01-30 | 2015-11-10 | Dropbox, Inc. | Personal content item searching system and method |
US9384226B1 (en) | 2015-01-30 | 2016-07-05 | Dropbox, Inc. | Personal content item searching system and method |
US10866926B2 (en) | 2017-12-08 | 2020-12-15 | Dropbox, Inc. | Hybrid search interface |
US11468031B1 (en) * | 2021-12-10 | 2022-10-11 | Chaossearch, Inc. | Methods and apparatus for efficiently scaling real-time indexing |
Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5469540A (en) * | 1993-01-27 | 1995-11-21 | Apple Computer, Inc. | Method and apparatus for generating and displaying multiple simultaneously-active windows |
US5825355A (en) * | 1993-01-27 | 1998-10-20 | Apple Computer, Inc. | Method and apparatus for providing a help based window system using multiple access methods |
US5828374A (en) * | 1993-01-27 | 1998-10-27 | Apple Computer, Inc. | Method and apparatus for selecting characters along a scroll bar with a slider |
US20010042114A1 (en) * | 1998-02-19 | 2001-11-15 | Sanjay Agraharam | Indexing multimedia communications |
US20020178341A1 (en) * | 2001-05-16 | 2002-11-28 | Microsoft Corporation | System and method for indexing and retriving cached objects |
US20030065652A1 (en) * | 2001-09-10 | 2003-04-03 | Spacey Simon Alan | Method and apparatus for indexing and searching data |
US20030149748A1 (en) * | 2002-02-06 | 2003-08-07 | Duisenberg Kenneth C. | Method and apparatus for synchronizing a software buffer index with an unknown hardware buffer index |
US6631522B1 (en) * | 1998-01-20 | 2003-10-07 | David Erdelyi | Method and system for indexing, sorting, and displaying a video database |
US6735604B2 (en) * | 2001-10-09 | 2004-05-11 | Arthur O. Miller | Method for storing and retrieving data objects |
US20050028026A1 (en) * | 2003-07-28 | 2005-02-03 | Microsoft Corporation | Method and system for backing up and restoring data of a node in a distributed system |
US20050096866A1 (en) * | 2003-10-31 | 2005-05-05 | Shan Jerry Z. | Techniques for monitoring a data stream |
US20060047715A1 (en) * | 2004-08-27 | 2006-03-02 | Archer Analytics, Inc. | System and method for managing and analyzing data from an operational database |
US20070061533A1 (en) * | 2003-06-19 | 2007-03-15 | Burton David A | Systems and methods of data migration in snapshot operations |
US20090006496A1 (en) * | 2003-07-08 | 2009-01-01 | Kurt Alan Shoens | Methods of determining and searching for modified blocks in a file system |
US7506257B1 (en) * | 1999-06-30 | 2009-03-17 | Microsoft Corporation | System and method for providing help contents for components of a computer system |
US20090094332A1 (en) * | 2004-09-02 | 2009-04-09 | Zimbra, Inc. | System and method for enabling offline use of email through a browser interface |
US7801896B2 (en) * | 1999-07-21 | 2010-09-21 | Andrew J Szabo | Database access system |
-
2005
- 2005-10-07 US US11/245,100 patent/US8126895B2/en active Active
Patent Citations (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5825355A (en) * | 1993-01-27 | 1998-10-20 | Apple Computer, Inc. | Method and apparatus for providing a help based window system using multiple access methods |
US5828374A (en) * | 1993-01-27 | 1998-10-27 | Apple Computer, Inc. | Method and apparatus for selecting characters along a scroll bar with a slider |
US5469540A (en) * | 1993-01-27 | 1995-11-21 | Apple Computer, Inc. | Method and apparatus for generating and displaying multiple simultaneously-active windows |
US6631522B1 (en) * | 1998-01-20 | 2003-10-07 | David Erdelyi | Method and system for indexing, sorting, and displaying a video database |
US20010042114A1 (en) * | 1998-02-19 | 2001-11-15 | Sanjay Agraharam | Indexing multimedia communications |
US7506257B1 (en) * | 1999-06-30 | 2009-03-17 | Microsoft Corporation | System and method for providing help contents for components of a computer system |
US7801896B2 (en) * | 1999-07-21 | 2010-09-21 | Andrew J Szabo | Database access system |
US20020178341A1 (en) * | 2001-05-16 | 2002-11-28 | Microsoft Corporation | System and method for indexing and retriving cached objects |
US20030065652A1 (en) * | 2001-09-10 | 2003-04-03 | Spacey Simon Alan | Method and apparatus for indexing and searching data |
US6735604B2 (en) * | 2001-10-09 | 2004-05-11 | Arthur O. Miller | Method for storing and retrieving data objects |
US20030149748A1 (en) * | 2002-02-06 | 2003-08-07 | Duisenberg Kenneth C. | Method and apparatus for synchronizing a software buffer index with an unknown hardware buffer index |
US20070061533A1 (en) * | 2003-06-19 | 2007-03-15 | Burton David A | Systems and methods of data migration in snapshot operations |
US20090006496A1 (en) * | 2003-07-08 | 2009-01-01 | Kurt Alan Shoens | Methods of determining and searching for modified blocks in a file system |
US20050028026A1 (en) * | 2003-07-28 | 2005-02-03 | Microsoft Corporation | Method and system for backing up and restoring data of a node in a distributed system |
US20050096866A1 (en) * | 2003-10-31 | 2005-05-05 | Shan Jerry Z. | Techniques for monitoring a data stream |
US20060047715A1 (en) * | 2004-08-27 | 2006-03-02 | Archer Analytics, Inc. | System and method for managing and analyzing data from an operational database |
US20090094332A1 (en) * | 2004-09-02 | 2009-04-09 | Zimbra, Inc. | System and method for enabling offline use of email through a browser interface |
Cited By (162)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110072396A1 (en) * | 2001-06-29 | 2011-03-24 | Microsoft Corporation | Gallery User Interface Controls |
US9098837B2 (en) | 2003-06-26 | 2015-08-04 | Microsoft Technology Licensing, Llc | Side-by-side shared calendars |
US9715678B2 (en) | 2003-06-26 | 2017-07-25 | Microsoft Technology Licensing, Llc | Side-by-side shared calendars |
US8799808B2 (en) | 2003-07-01 | 2014-08-05 | Microsoft Corporation | Adaptive multi-line view user interface |
US20100211889A1 (en) * | 2003-07-01 | 2010-08-19 | Microsoft Corporation | Conversation Grouping of Electronic Mail Records |
US8150930B2 (en) | 2003-07-01 | 2012-04-03 | Microsoft Corporation | Automatic grouping of electronic mail |
US10482429B2 (en) | 2003-07-01 | 2019-11-19 | Microsoft Technology Licensing, Llc | Automatic grouping of electronic mail |
US10437964B2 (en) | 2003-10-24 | 2019-10-08 | Microsoft Technology Licensing, Llc | Programming interface for licensing |
US9015624B2 (en) | 2004-08-16 | 2015-04-21 | Microsoft Corporation | Floating command object |
US9645698B2 (en) | 2004-08-16 | 2017-05-09 | Microsoft Technology Licensing, Llc | User interface for displaying a gallery of formatting options applicable to a selected object |
US9864489B2 (en) | 2004-08-16 | 2018-01-09 | Microsoft Corporation | Command user interface for displaying multiple sections of software functionality controls |
US10437431B2 (en) | 2004-08-16 | 2019-10-08 | Microsoft Technology Licensing, Llc | Command user interface for displaying selectable software functionality controls |
US9223477B2 (en) | 2004-08-16 | 2015-12-29 | Microsoft Technology Licensing, Llc | Command user interface for displaying selectable software functionality controls |
US9690450B2 (en) | 2004-08-16 | 2017-06-27 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are relevant to a selected object |
US20060036946A1 (en) * | 2004-08-16 | 2006-02-16 | Microsoft Corporation | Floating command object |
US9690448B2 (en) | 2004-08-16 | 2017-06-27 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are relevant to a selected object |
US8255828B2 (en) | 2004-08-16 | 2012-08-28 | Microsoft Corporation | Command user interface for displaying selectable software functionality controls |
US9015621B2 (en) | 2004-08-16 | 2015-04-21 | Microsoft Technology Licensing, Llc | Command user interface for displaying multiple sections of software functionality controls |
US20060036964A1 (en) * | 2004-08-16 | 2006-02-16 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are relevant to a selected object |
US8146016B2 (en) | 2004-08-16 | 2012-03-27 | Microsoft Corporation | User interface for displaying a gallery of formatting options applicable to a selected object |
US8117542B2 (en) | 2004-08-16 | 2012-02-14 | Microsoft Corporation | User interface for displaying selectable software functionality controls that are contextually relevant to a selected object |
US10521081B2 (en) | 2004-08-16 | 2019-12-31 | Microsoft Technology Licensing, Llc | User interface for displaying a gallery of formatting options |
US10635266B2 (en) | 2004-08-16 | 2020-04-28 | Microsoft Technology Licensing, Llc | User interface for displaying selectable software functionality controls that are relevant to a selected object |
US7895531B2 (en) | 2004-08-16 | 2011-02-22 | Microsoft Corporation | Floating command object |
US20060069604A1 (en) * | 2004-09-30 | 2006-03-30 | Microsoft Corporation | User interface for providing task management and calendar information |
US7747966B2 (en) | 2004-09-30 | 2010-06-29 | Microsoft Corporation | User interface for providing task management and calendar information |
US8839139B2 (en) | 2004-09-30 | 2014-09-16 | Microsoft Corporation | User interface for providing task management and calendar information |
US20060101012A1 (en) * | 2004-11-11 | 2006-05-11 | Chad Carson | Search system presenting active abstracts including linked terms |
US20060101003A1 (en) * | 2004-11-11 | 2006-05-11 | Chad Carson | Active abstracts |
US7606794B2 (en) | 2004-11-11 | 2009-10-20 | Yahoo! Inc. | Active Abstracts |
US7490079B2 (en) * | 2005-04-14 | 2009-02-10 | Microsoft Corporation | Client side indexing of offline address book files |
US20080301179A1 (en) * | 2005-04-14 | 2008-12-04 | Microsoft Corporation | Client side indexing of offline address book files |
US20060235878A1 (en) * | 2005-04-14 | 2006-10-19 | Microsoft Corporation | Client side indexing of offline address book files |
US9002725B1 (en) | 2005-04-20 | 2015-04-07 | Google Inc. | System and method for targeting information based on message content |
US20060271864A1 (en) * | 2005-05-24 | 2006-11-30 | Microsoft Corporation | Narrow mode navigation pane |
US7530029B2 (en) | 2005-05-24 | 2009-05-05 | Microsoft Corporation | Narrow mode navigation pane |
US7886290B2 (en) | 2005-06-16 | 2011-02-08 | Microsoft Corporation | Cross version and cross product user interface |
US20070006206A1 (en) * | 2005-06-16 | 2007-01-04 | Microsoft Corporation | Cross version and cross product user interface |
US8239882B2 (en) | 2005-08-30 | 2012-08-07 | Microsoft Corporation | Markup based extensibility for user interfaces |
US8689137B2 (en) | 2005-09-07 | 2014-04-01 | Microsoft Corporation | Command user interface for displaying selectable functionality controls in a database application |
US20070055701A1 (en) * | 2005-09-08 | 2007-03-08 | Edwin Tse | Method and telecommunications node for information synchronization |
US9542667B2 (en) | 2005-09-09 | 2017-01-10 | Microsoft Technology Licensing, Llc | Navigating messages within a thread |
US20070061307A1 (en) * | 2005-09-12 | 2007-03-15 | Microsoft Corporation | Integrated search and find user interface |
US9513781B2 (en) | 2005-09-12 | 2016-12-06 | Microsoft Technology Licensing, Llc | Expanded search and find user interface |
US7739259B2 (en) * | 2005-09-12 | 2010-06-15 | Microsoft Corporation | Integrated search and find user interface |
US10248687B2 (en) | 2005-09-12 | 2019-04-02 | Microsoft Technology Licensing, Llc | Expanded search and find user interface |
US20070061306A1 (en) * | 2005-09-12 | 2007-03-15 | Microsoft Corporation | Search and find using expanded search scope |
US7627561B2 (en) * | 2005-09-12 | 2009-12-01 | Microsoft Corporation | Search and find using expanded search scope |
US8627222B2 (en) | 2005-09-12 | 2014-01-07 | Microsoft Corporation | Expanded search and find user interface |
US20070067278A1 (en) * | 2005-09-22 | 2007-03-22 | Gtess Corporation | Data file correlation system and method |
US20100023511A1 (en) * | 2005-09-22 | 2010-01-28 | Borodziewicz Wincenty J | Data File Correlation System And Method |
US20130005367A1 (en) * | 2005-10-31 | 2013-01-03 | Voice Signal Technologies, Inc. | System and method for conducting a search using a wireless mobile device |
US10049137B2 (en) * | 2005-12-02 | 2018-08-14 | Salesforce.Com, Inc. | Methods and systems for optimizing text searches over structured data in a multi-tenant environment |
US20130246411A1 (en) * | 2005-12-02 | 2013-09-19 | Salesforce.Com, Inc | Methods and systems for optimizing text searches over structured data in a multi-tenant environment |
US11144558B2 (en) | 2005-12-02 | 2021-10-12 | Salesforce.Com, Inc. | Methods and systems for optimizing text searches over structured data in a multi-tenant environment |
US8554852B2 (en) | 2005-12-05 | 2013-10-08 | Google Inc. | System and method for targeting advertisements or other information using user geographical information |
US7949714B1 (en) | 2005-12-05 | 2011-05-24 | Google Inc. | System and method for targeting advertisements or other information using user geographical information |
US8601004B1 (en) * | 2005-12-06 | 2013-12-03 | Google Inc. | System and method for targeting information items based on popularities of the information items |
KR101021206B1 (en) * | 2006-01-24 | 2011-03-11 | 유오피 엘엘씨 | Selective conversion of oxygenate to propylene using moving bed technology and a hydrothermally stabilized dual-function catalyst system |
US8849810B2 (en) * | 2006-02-17 | 2014-09-30 | Google Inc. | Sharing user distributed search results |
US20110040622A1 (en) * | 2006-02-17 | 2011-02-17 | Google Inc. | Sharing user distributed search results |
US8862572B2 (en) | 2006-02-17 | 2014-10-14 | Google Inc. | Sharing user distributed search results |
US9015149B2 (en) | 2006-02-17 | 2015-04-21 | Google Inc. | Sharing user distributed search results |
US20070198340A1 (en) * | 2006-02-17 | 2007-08-23 | Mark Lucovsky | User distributed search results |
US20070219954A1 (en) * | 2006-03-15 | 2007-09-20 | Microsoft Corporation | Refined Search User Interface |
US20070279417A1 (en) * | 2006-06-01 | 2007-12-06 | Microsoft Corporation | Modifying a chart |
US8638333B2 (en) | 2006-06-01 | 2014-01-28 | Microsoft Corporation | Modifying and formatting a chart using pictorially provided chart elements |
US20100060645A1 (en) * | 2006-06-01 | 2010-03-11 | Microsoft Corporation | Modifying a chart |
US10482637B2 (en) | 2006-06-01 | 2019-11-19 | Microsoft Technology Licensing, Llc | Modifying and formatting a chart using pictorially provided chart elements |
US8605090B2 (en) | 2006-06-01 | 2013-12-10 | Microsoft Corporation | Modifying and formatting a chart using pictorially provided chart elements |
US9727989B2 (en) | 2006-06-01 | 2017-08-08 | Microsoft Technology Licensing, Llc | Modifying and formatting a chart using pictorially provided chart elements |
US20080010238A1 (en) * | 2006-07-07 | 2008-01-10 | Microsoft Corporation | Index having short-term portion and long-term portion |
US8271439B2 (en) * | 2006-08-16 | 2012-09-18 | International Business Machines Corporation | Efficient synchronised updates to a data record in a data store |
US20080046676A1 (en) * | 2006-08-16 | 2008-02-21 | International Business Machines Corporation | Efficient synchronised updates to a data record in a data store |
US20080086555A1 (en) * | 2006-10-09 | 2008-04-10 | David Alexander Feinleib | System and Method for Search and Web Spam Filtering |
US8407307B1 (en) * | 2006-11-10 | 2013-03-26 | Flightview, Inc. | Flight information sending system and method |
US20150161264A1 (en) * | 2006-12-19 | 2015-06-11 | Yahoo! Inc. | Techniques for including collection items in search results |
US9576055B2 (en) * | 2006-12-19 | 2017-02-21 | Yahoo! | Techniques for including collection items in search results |
US20080189247A1 (en) * | 2007-02-01 | 2008-08-07 | Yahoo! Inc. | Method and system for improved categorical searching |
US8825625B2 (en) * | 2007-02-01 | 2014-09-02 | Yahoo! Inc. | Method and system for improved categorical searching |
US8856241B1 (en) * | 2007-03-30 | 2014-10-07 | Emc Corporation | Management of email archive server requests |
US8930464B1 (en) | 2007-03-30 | 2015-01-06 | Emc Corporation | Email content pre-caching to a local archive store |
US20080275874A1 (en) * | 2007-05-03 | 2008-11-06 | Ketera Technologies, Inc. | Supplier Deduplication Engine |
US8234107B2 (en) * | 2007-05-03 | 2012-07-31 | Ketera Technologies, Inc. | Supplier deduplication engine |
US20080282200A1 (en) * | 2007-05-10 | 2008-11-13 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US9607107B2 (en) * | 2007-05-10 | 2017-03-28 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US20080320411A1 (en) * | 2007-06-21 | 2008-12-25 | Yen-Fu Chen | Method of text type-ahead |
US9251137B2 (en) | 2007-06-21 | 2016-02-02 | International Business Machines Corporation | Method of text type-ahead |
US8762880B2 (en) | 2007-06-29 | 2014-06-24 | Microsoft Corporation | Exposing non-authoring features through document status information in an out-space user interface |
US8201103B2 (en) | 2007-06-29 | 2012-06-12 | Microsoft Corporation | Accessing an out-space user interface for a document editor program |
US10642927B2 (en) | 2007-06-29 | 2020-05-05 | Microsoft Technology Licensing, Llc | Transitions between user interfaces in a content editing application |
US8484578B2 (en) | 2007-06-29 | 2013-07-09 | Microsoft Corporation | Communication between a document editor in-space user interface and a document editor out-space user interface |
US10592073B2 (en) | 2007-06-29 | 2020-03-17 | Microsoft Technology Licensing, Llc | Exposing non-authoring features through document status information in an out-space user interface |
US9098473B2 (en) | 2007-06-29 | 2015-08-04 | Microsoft Technology Licensing, Llc | Accessing an out-space user interface for a document editor program |
US10521073B2 (en) | 2007-06-29 | 2019-12-31 | Microsoft Technology Licensing, Llc | Exposing non-authoring features through document status information in an out-space user interface |
US9619116B2 (en) | 2007-06-29 | 2017-04-11 | Microsoft Technology Licensing, Llc | Communication between a document editor in-space user interface and a document editor out-space user interface |
US20090088218A1 (en) * | 2007-10-02 | 2009-04-02 | Tae Hun Kim | Mobile terminal and method of controlling the same |
US20090094206A1 (en) * | 2007-10-02 | 2009-04-09 | Lg Electronics Inc. | Mobile terminal and method of controlling the same |
US9330180B2 (en) | 2007-10-02 | 2016-05-03 | Microsoft Technology Licensing, Llc | Mobile terminal and method of controlling the same |
US8331991B2 (en) * | 2007-10-02 | 2012-12-11 | Lg Electronics Inc. | Mobile terminal and method of controlling the same |
US20130067387A1 (en) * | 2007-10-02 | 2013-03-14 | Lg Electronics Inc. | Mobile terminal and method of controlling the same |
US9507517B2 (en) * | 2007-10-02 | 2016-11-29 | Microsoft Technology Licensing, Llc | Mobile terminal and method of controlling the same |
US20090164451A1 (en) * | 2007-12-21 | 2009-06-25 | Reed Benjamin C | Syndicating humor |
US8429145B2 (en) * | 2007-12-21 | 2013-04-23 | Yahoo! Inc. | Syndicating humor |
US20110231358A1 (en) * | 2007-12-28 | 2011-09-22 | Knowledge Computing Corporation | Method and apparatus for loading data files into a data-warehouse system |
US20090182741A1 (en) * | 2008-01-16 | 2009-07-16 | International Business Machines Corporation | Systems and Arrangements of Text Type-Ahead |
US8316035B2 (en) * | 2008-01-16 | 2012-11-20 | International Business Machines Corporation | Systems and arrangements of text type-ahead |
US8725753B2 (en) | 2008-01-16 | 2014-05-13 | International Business Machines Corporation | Arrangements of text type-ahead |
US20090193332A1 (en) * | 2008-01-28 | 2009-07-30 | Samsung Electronics Co., Ltd. | Method and apparatus for editing letters |
US9015130B1 (en) * | 2008-03-25 | 2015-04-21 | Avaya Inc. | Automatic adjustment of email filters based on browser history and telecommunication records |
US9588781B2 (en) | 2008-03-31 | 2017-03-07 | Microsoft Technology Licensing, Llc | Associating command surfaces with multiple active components |
US8359532B2 (en) | 2008-04-28 | 2013-01-22 | International Business Machines Corporation | Text type-ahead |
US20090271700A1 (en) * | 2008-04-28 | 2009-10-29 | Yen-Fu Chen | Text type-ahead |
US9251239B1 (en) * | 2008-05-15 | 2016-02-02 | Salesforce.Com, Inc. | System, method and computer program product for applying a public tag to information |
US10997562B2 (en) | 2008-06-20 | 2021-05-04 | Microsoft Technology Licensing, Llc | Synchronized conversation-centric message list and message reading pane |
US9665850B2 (en) | 2008-06-20 | 2017-05-30 | Microsoft Technology Licensing, Llc | Synchronized conversation-centric message list and message reading pane |
US9338114B2 (en) | 2008-06-24 | 2016-05-10 | Microsoft Technology Licensing, Llc | Automatic conversation techniques |
US8402096B2 (en) | 2008-06-24 | 2013-03-19 | Microsoft Corporation | Automatic conversation techniques |
US9619582B1 (en) | 2008-09-09 | 2017-04-11 | Google Inc. | Interactive search querying |
US8838603B1 (en) * | 2008-09-09 | 2014-09-16 | Google Inc. | Interactive search querying |
US20140095641A1 (en) * | 2008-09-25 | 2014-04-03 | Microsoft Corporation | Techniques to manage retention policy tags |
US9281963B2 (en) * | 2008-12-23 | 2016-03-08 | Persistent Systems Limited | Method and system for email search |
US20100169320A1 (en) * | 2008-12-23 | 2010-07-01 | Persistent Systems Limited | Method and system for email search |
US20100286174A1 (en) * | 2009-03-19 | 2010-11-11 | Duke University | Inhibiting gsnor |
US20100250649A1 (en) * | 2009-03-30 | 2010-09-30 | Microsoft Corporation | Scope-Based Extensibility for Control Surfaces |
US8799353B2 (en) | 2009-03-30 | 2014-08-05 | Josef Larsson | Scope-based extensibility for control surfaces |
US9046983B2 (en) | 2009-05-12 | 2015-06-02 | Microsoft Technology Licensing, Llc | Hierarchically-organized control galleries |
US9875009B2 (en) | 2009-05-12 | 2018-01-23 | Microsoft Technology Licensing, Llc | Hierarchically-organized control galleries |
US20110093434A1 (en) * | 2009-10-16 | 2011-04-21 | Infosys Technologies Limited | Method and system for searching documents in local area network |
US9286271B2 (en) | 2010-05-26 | 2016-03-15 | Google Inc. | Providing an electronic document collection |
US9292479B2 (en) | 2010-05-26 | 2016-03-22 | Google Inc. | Providing an electronic document collection |
US8302014B2 (en) | 2010-06-11 | 2012-10-30 | Microsoft Corporation | Merging modifications to user interface components while preserving user customizations |
US8495737B2 (en) | 2011-03-01 | 2013-07-23 | Zscaler, Inc. | Systems and methods for detecting email spam and variants thereof |
CN102231168A (en) * | 2011-07-29 | 2011-11-02 | 前锦网络信息技术(上海)有限公司 | Method for quickly retrieving resume from resume database |
US9542374B1 (en) | 2012-01-20 | 2017-01-10 | Google Inc. | Method and apparatus for applying revision specific electronic signatures to an electronically stored document |
CN103294749A (en) * | 2012-02-07 | 2013-09-11 | 株式会社日立解决方案 | File list generation method, system, and program, and file list generation device |
US20130204913A1 (en) * | 2012-02-07 | 2013-08-08 | Hitachi Solutions, Ltd. | File list generation method, system, and program, and file list generation device |
US20150142735A1 (en) * | 2012-06-06 | 2015-05-21 | Tencent Technology (Shenzhen) Company Limited | Memory searching system and method, real-time searching system and method, and computer storage medium |
US9619512B2 (en) * | 2012-06-06 | 2017-04-11 | Tencent Technology (Shenzhen) Company Limited | Memory searching system and method, real-time searching system and method, and computer storage medium |
CN103473229A (en) * | 2012-06-06 | 2013-12-25 | 深圳市世纪光速信息技术有限公司 | Memory retrieval system and method, and real-time retrieval system and method |
US9589006B2 (en) | 2012-06-29 | 2017-03-07 | Nokia Technologies Oy | Method and apparatus for multidimensional data storage and file system with a dynamic ordered tree structure |
US8930374B2 (en) * | 2012-06-29 | 2015-01-06 | Nokia Corporation | Method and apparatus for multidimensional data storage and file system with a dynamic ordered tree structure |
US11748311B1 (en) | 2012-10-30 | 2023-09-05 | Google Llc | Automatic collaboration |
US11308037B2 (en) | 2012-10-30 | 2022-04-19 | Google Llc | Automatic collaboration |
US9529916B1 (en) | 2012-10-30 | 2016-12-27 | Google Inc. | Managing documents based on access context |
US9384285B1 (en) | 2012-12-18 | 2016-07-05 | Google Inc. | Methods for identifying related documents |
US9189508B2 (en) * | 2013-07-19 | 2015-11-17 | Tipbit Inc. | Inferring relevance based on user interactions with email |
US9514113B1 (en) | 2013-07-29 | 2016-12-06 | Google Inc. | Methods for automatic footnote generation |
US11681654B2 (en) | 2013-08-27 | 2023-06-20 | Google Llc | Context-based file selection |
US9842113B1 (en) | 2013-08-27 | 2017-12-12 | Google Inc. | Context-based file selection |
US9529791B1 (en) | 2013-12-12 | 2016-12-27 | Google Inc. | Template and content aware document and template editing |
US9015167B1 (en) * | 2014-01-27 | 2015-04-21 | Tipbit Inc. | User isolated indexes for determining the context and relevance of relationships |
US9703763B1 (en) | 2014-08-14 | 2017-07-11 | Google Inc. | Automatic document citations by utilizing copied content for candidate sources |
US10983986B2 (en) * | 2015-08-31 | 2021-04-20 | Commvault Systems, Inc. | Organically managing primary and secondary storage of a data object based on an expiry timeframe supplied by a user of the data object |
US20210271664A1 (en) * | 2015-08-31 | 2021-09-02 | Commvault Systems, Inc. | Organically managing storage of a data object based on an expiry timeframe supplied by a user of the data object |
US11748332B2 (en) * | 2015-08-31 | 2023-09-05 | Commvault Systems, Inc. | Organically managing storage of a data object based on an expiry timeframe supplied by a user of the data object |
US10311042B1 (en) * | 2015-08-31 | 2019-06-04 | Commvault Systems, Inc. | Organically managing primary and secondary storage of a data object based on expiry timeframe supplied by a user of the data object |
US10409779B2 (en) | 2016-08-31 | 2019-09-10 | Microsoft Technology Licensing, Llc. | Document sharing via logical tagging |
US10776336B2 (en) * | 2016-11-04 | 2020-09-15 | Salesforce.Com, Inc. | Dynamic creation and maintenance of multi-column custom indexes for efficient data management in an on-demand services environment |
US20180129691A1 (en) * | 2016-11-04 | 2018-05-10 | Salesforce.Com, Inc. | Dynamic creation and maintenance of multi-column custom indexes for efficient data management in an on-demand services environment |
US11586654B2 (en) * | 2017-09-08 | 2023-02-21 | Open Text Sa Ulc | System and method for recommendation of terms, including recommendation of search terms in a search system |
US20230153336A1 (en) * | 2017-09-08 | 2023-05-18 | Open Text Sa Ulc | System and method for recommendation of terms, including recommendation of search terms in a search system |
Also Published As
Publication number | Publication date |
---|---|
US8126895B2 (en) | 2012-02-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8126895B2 (en) | Method, apparatus, and computer program product for indexing, synchronizing and searching digital data | |
EP2478431B1 (en) | Automatically finding contextually related items of a task | |
KR101501865B1 (en) | Tokenized search suggestions | |
US7509320B2 (en) | Methods and apparatus to determine context relevant information | |
US7392249B1 (en) | Methods, systems, and computer-readable mediums for providing persisting and continuously updating search folders | |
US7225187B2 (en) | Systems and methods for performing background queries from content and activity | |
US8286085B1 (en) | Attachment suggestion technology | |
US7451162B2 (en) | Methods and apparatus to determine a software application data file and usage | |
US7461043B2 (en) | Methods and apparatus to abstract events in software applications or services | |
KR101843604B1 (en) | Electronic communications triage | |
US7624151B2 (en) | Smart size reduction of a local electronic mailbox by removing unimportant messages based on an automatically generated user interest profile | |
US9672232B1 (en) | Systems and methods for selectively storing event data | |
US7783645B2 (en) | Methods and apparatus to recall context relevant information | |
US9813417B2 (en) | Systems and methods for creating and displaying an electronic communication digest | |
US20040267746A1 (en) | User interface for controlling access to computer objects | |
JP2011123893A (en) | Displaying conversation in conversation-based email system | |
KR20040088366A (en) | Computer searching with associations | |
JP3379443B2 (en) | Information notification device, information notification method, and machine-readable recording medium recording program | |
US20090113281A1 (en) | Identifying And Displaying Tags From Identifiers In Privately Stored Messages | |
US9117202B2 (en) | Identifying and displaying messages containing an identifier | |
JP2010160723A (en) | Data value determination system, data value determination method, and data value determination program | |
Ibidunni | Supporting workgroups collaborating via email using the semantic web and RDF |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: COMPUTER ASSOCIATES THINK, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:SARGENT, ANTONY;KAY, ERIK;MOORE, DAVID;AND OTHERS;REEL/FRAME:017079/0162Effective date: 20051003 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:COMPUTER ASSOCIATES THINK, INC.;REEL/FRAME:028801/0049Effective date: 20120330 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |