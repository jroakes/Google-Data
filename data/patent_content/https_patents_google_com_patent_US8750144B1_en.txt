US8750144B1 - System and method for reducing required memory updates - Google Patents
System and method for reducing required memory updates Download PDFInfo
- Publication number
- US8750144B1 US8750144B1 US12/908,197 US90819710A US8750144B1 US 8750144 B1 US8750144 B1 US 8750144B1 US 90819710 A US90819710 A US 90819710A US 8750144 B1 US8750144 B1 US 8750144B1
- Authority
- US
- United States
- Prior art keywords
- tcam
- rule
- rules
- empty
- range
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/54—Organization of routing tables
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/74591—Address table lookup; Address filtering using content-addressable memories [CAM]
Definitions
- a Ternary Content Addressable Memory (“TCAM”) is a type of computer memory used in certain high speed searching applications, such as routing information through a network. It is designed such that it receives a data word and searches its entire memory to see if that data word is stored anywhere in it. If the data word is found, the TCAM returns a list of one or more storage addresses where the word was found.
- the data word may consist of 1's 0's, and X's (“don't care” bits). For example, a TCAM might have a stored word of “10XX0” which will match any of the four search words “10000”, “10010”, “10100”, or “10110”.
- TCAMs are often used in network routers, where each address has two parts: the network address, which can vary in size depending on the subnet configuration, and the host address, which occupies the remaining bits.
- Each subnet has a network mask that specifies which bits of the address are the network address and which bits are the host address. Routing is done by consulting a routing table maintained by the router which contains each known destination network address, the associated network mask, and the information needed to route packets to that destination. Using a TCAM for the routing table makes the lookup process very efficient. The addresses are stored using “don't care” for the host part of the address, so looking up the destination address in the TCAM immediately retrieves the correct routing entry.
- TCAMs have been widely used in routers, switches, and network security appliances of high speed networks to implement packet classification rules, e.g., access control list (“ACL”) call rules. They may be used for various applications, including packet filtering, forwarding, traffic load balancing and shaping.
- ACL access control list
- TCAM updates a main challenge in developing these applications using TCAM is the time complexity in TCAM updates, and consistency of rule matching during the rule updates. This is because the ternary entries (each storing an ACL rule) are arranged in priority order, and adding a new ACL rule may require many TCAM entry updates, if it is to be inserted in between two existing rules in adjacent TCAM entries.
- one aspect provides a method for minimizing updates in a router forwarding table, such as a TCAM, including a plurality of rules indexed by priority.
- This method comprises providing a proposed rule to be added to the router forwarding table, identifying a range of candidate entries in the router forwarding table for the proposed rule, determining a minimum set of rules to relocate, and creating an empty entry in the range of candidate entries based upon the minimum set of rules to relocate.
- the method may further comprise reallocating the minimum set of rules by, for example, shifting the minimum set of rules in sequence based on priority, and adding the proposed rule to the empty entry in the range of candidate entries.
- a router for performing efficient updates, comprising a storage area storing a forwarding table including a plurality of forwarding rules indexed by priority, an input adapted to receive a proposed rule to be added to the forwarding table, and a processor programmed to identify a range of candidate entries in the forwarding table for the proposed rule, determine a minimum set of rules to relocate, and create an empty entry in the range of candidate entries based upon the minimum set of rules.
- the processor may be further programmed to identify a number of moves associated with moving two or more existing rules in the range of candidate entries, and compare the identified number of moves to determine the existing rule for which a fewest number of movements is required.
- Yet another aspect of the invention provides a computer-readable medium storing a computer-readable program for implementing a method of minimizing updates in a router forwarding table.
- This method comprises providing a proposed rule to be added to the router forwarding table, identifying a range of candidate entries in the router forwarding table for the proposed rule, determining a minimum set of rules to relocate, and creating an empty entry in the range of candidate entries based upon the minimum set of rules to relocate.
- the minimum set of rules may be reallocated by, for example, shifting each rule in sequence based on priority.
- the method may further comprise identifying a number of moves associated with moving two or more existing rules in the range of candidate entries, and comparing the identified number of moves to determine the existing rule for which a fewest number of movements is required.
- FIG. 1 is a system diagram according to an aspect of the invention.
- FIG. 2 illustrates a method according to an aspect of the invention.
- FIG. 3 illustrates a method according to another aspect of the invention.
- FIG. 4 illustrates a method according to a further aspect of the invention.
- FIG. 5 illustrates a method according to yet another aspect of the invention.
- FIG. 1 illustrates an example of a network 150 which joins a plurality of client computers 160 , 162 , 164 , 182 , 184 .
- the network 150 includes a plurality of routers 142 , 144 , 146 , 148 .
- Each router 142 - 148 may include one or more input ports for receiving data from other routers or computing devices, such as packets or program updates.
- each router 142 - 148 may have one or more output ports for transmitting data through the network 150 .
- Each router 142 - 148 may also include one or more packet forwarding tables, such as TCAM 126 in the router 144 .
- each router may have a processor and a memory, such as the memory 120 of the router 144 , which stores data 122 and instructions 128 for adding ACL rules to the TCAM 126 . While TCAM 126 is shown as being stored separately from memory 120 , it should be understood that the TCAM 126 , data 122 , and instructions 128 may all be stored in the same medium.
- Memory 120 may be any of a variety of storage media, such as RAM, optical disc, magnetic storage, etc. While the memory 120 is shown as being integrated with the router 144 , it should be understood that any type of hard drive or removable memory may be used. For example, the memory 120 may be a USB drive, or may be an independent storage medium coupled to one or more of the routers 142 - 148 .
- the computers 160 , 162 , 164 , 182 , 184 may be any of a variety of computing devices, including mobile devices, personal digital assistants (PDAs), laptops, PCs, etc. These device may be connected to the network via a wired connection, such as through a modem, or wirelessly, such as through an access point in communication with one of the routers 142 - 148 .
- PDAs personal digital assistants
- the computers 160 , 162 , 164 , 182 , 184 may be any of a variety of computing devices, including mobile devices, personal digital assistants (PDAs), laptops, PCs, etc. These device may be connected to the network via a wired connection, such as through a modem, or wirelessly, such as through an access point in communication with one of the routers 142 - 148 .
- the TCAM 126 includes a number of entries, with each entry including an ACL rule.
- the rule includes a key (K), an action (A), and a priority (P).
- the key is an n-bit number, where each bit may be either a 1, 0, or wild card (e.g., “*”). An exact key does not have a wild card bit (e.g., 1101010).
- the key of a rule R denoted as key(R), defines a set of packets the rule matches.
- the key(R) also comprises a set of tuples, each tuple corresponding to a packet header field (e.g., source IP, destination IP, source port, destination port, etc.), and having a value and mask to support wild-card matching.
- a packet header field e.g., source IP, destination IP, source port, destination port, etc.
- Each rule is stored as a TCAM entry in order of priority. For example, the rule corresponding to key 101 and action W has a highest priority (1). Conversely, the rules corresponding to key 1*0 and action Z has a lowest priority, 4. Although only four TCAM entries are shown, it should be understood that any number of rules may be stored in the TCAM 126 .
- information in the packets is used to determine how the packet should be routed.
- router 142 may use packet information to determine that the next hop should be router 144 , and router 144 receives the packet and determines that the next hop should be router 148 .
- One mechanism used by the routers (e.g., router 144 ) to make such determination is the TCAM 126 .
- the TCAM 126 performs parallel matches of all stored rules against the header of an incoming packet.
- a TCAM may need to be updated. For example, a rule in an existing TCAM entry may need to be deleted. Alternatively or additionally, one or more rules may need to be added. To delete an ACL rule stored in a TCAM entry, only 1 entry update is required. That is, the entry may be removed without shifting the remaining entries to fill the empty slot. However, adding an ACL rule may be more complex.
- An exemplary method 200 of updating a TCAM to add an ACL rule is shown in FIG. 2 .
- a block of candidate TCAM entries is identified.
- the new rule should be positioned in the TCAM with respect to priorities of existing entries, so that addition of the new rule R does not affect the forwarding behavior of the TCAM 126 .
- priority(R) is 3, empty TCAM entries between rules of priority 2 or 3 and priority 3 or 4 would be appropriate for storing the new rule R. Otherwise, the packet forwarding behavior of the TCAM 126 may be changed. However, in some circumstances the priority of the rule R to be added may effectively be changed. For example, if the rule R doesn't overlap with any other rules in the TCAM 126 , it may be stored in a lower priority entry because a packet matching rule R won't match any other rules.
- an upper bound and lower bound may be determined.
- the upper bound may be defined as a rule currently existing in the TCAM 126 which overlaps with the rule R and has higher priority. If multiple such rules exist, the upper bound is that rule with the lowest priority of the group.
- the lower bound may be defined as a rule currently existing in the TCAM 126 which overlaps with the rule R and has lower priority. If multiple such rules exist, the lower bound is that rule with the highest priority of the group.
- Any TCAM entry indexed between the upper bound and lower bound may be used to store the new rule R. In some instances, the upper bound or lower bound may not exist. Thus, for example, if the upper bound does not exist, the new rule R may be stored in any slot of higher priority than the lower bound. If, conversely, the lower bound does not exist, the new rule R may be added to any slot of lower priority than the upper bound.
- step 220 it is determined whether an empty TCAM entry exists which could accommodate the new rule. For example, it may be determined whether any of the block of candidate entries between the identified upper bound and lower bound are empty. If it is determined that such an empty entry exists, the new rule may be added to it in step 250 .
- a minimum set of ACL rules that must be relocated is determined in step 230 . For example, as opposed to shifting each rule on the TCAM 126 to create an entry for the new rule R, it may be determined that only a subset of rules can be shifted to create the empty slot. For example, to create an empty slot at index position 2 , rule 4 may be moved to an empty index position (e.g., 6) and rule 2 may be moved to the position previously storing rule 4 .
- An exemplary process for determining the minimum set of ACL rules to be relocated is described in detail with respect to FIGS. 3-5 .
- these rules are relocated to empty a TCAM entry for the new rule, while preserving forwarding behaviors based on priorities of the rules and maintaining consistency in rule matching.
- One method of doing so is to relocate the lowest priority rule (i.e., the rule in the highest indexed position) first, and to sequentially move the remaining rules in the minimum set in order of highest indexed position to lowest.
- R 4 may first be moved to an empty slot in a higher index position, R 3 may then be moved to position 4 , R 1 may be moved position 3 , and the new rule may be added to position 1 (step 250 ).
- FIGS. 3-5 describe in detail a procedure for determining a minimum set of TCAM entries to relocate.
- FIG. 3 describes a function move_down(R, *cost), which calculates a minimum number of rules that must be shifted downwards in the TCAM 126 to create an empty entry for new rule R.
- FIG. 4 describes a function move_up(R, *cost), which calculates a minimum number of rules that must be shifted upwards in the TCAM 126 to create an empty entry for new rule R.
- FIG. 5 utilizes the results from move_down(R, *cost) and move_up(R, *cost) to determine the minimum number of rules to be shifted to create an appropriate slot for new rule R.
- a process 300 shown in FIG. 3 calculates the cost of shifting TCAM entries to a lower index. The cost is based upon a number of rules that must be shifted in order to add the new rule R.
- step 305 it is determined whether any empty slots exist within the lower bound for rule R. If such an empty slot exists, the process proceeds to step 310 , which returns that rule R may be added to the empty slot. Thus, the cost of adding rule R is equal to 1, because no other rules were required to be shifted.
- step 305 if it is determined in step 305 that no empty slots exist within the lower bound for rule R, the process proceeds to step 315 .
- rule_set is set to all the rules existing in the TCAM entries between proposed new rule R and the lower bound of R.
- step 320 the variable “*cost” is initially set to infinity.
- step 325 it is determined whether the set of rules between R and its lower bound is empty. If not, a rule R′ is selected from the rule set in step 330 and removed from rule_set. Step 335 sets “ret′” to all rules needed to be moved down in order to move existing rule R′ down to a lower indexed position.
- Step 340 determines the “best” cost. That is, it is determined whether the cost of moving rule R′ down is lower than *cost. Because in the first iteration *cost equals infinity, the cost (cost′) for moving R′ down will be lower. Thus, the process proceeds to step 345 where the cost of moving R down is calculated. This cost may simply be one plus the cost of moving down R′, because placing R in the TCAM slot of R′ is one additional move to the cost of moving R′.
- *cost is set to the new lowest cost (i.e., the cost of moving R down into the slot for R′) is saved for comparison to the remaining rules in rule_set in further iterations of steps 325 - 345 . This process continues until all the rules in rule_set have been compared. Thus, the resulting *cost after all rules have been compared will be the lowest cost. Accordingly, in step 350 the rules that are needed to be moved in the determined “best” cost maneuver are returned.
- a process 400 shown in FIG. 4 calculates the cost of shifting TCAM entries to a higher index. The cost is based upon a number of rules that must be shifted in order to add the new rule R.
- step 405 it is determined whether any empty slots exist within the upper bound for rule R. If such empty slot exists, the process proceeds to step 410 , which returns that rule R may be added to the empty slot. Thus, the cost of adding rule R is equal to 1, because no other rules were required to be shifted.
- step 405 if it is determined in step 405 that no empty slots exist within the upper bound for rule R, the process proceeds to step 415 .
- rule_set is set to all the rules existing in the TCAM entries between proposed new rule R and the upper bound of R.
- step 420 the variable “*cost” is initially set to infinity.
- step 425 it is determined whether the set of rules between R and its upper bound is empty. If not, a rule R′ is selected from the rule set in step 430 and removed from rule_set. Step 435 defines “ret′” as all rules needed to be moved up in order to move existing rule R′ down to a higher indexed position.
- Step 440 determines the “best” cost. In this case, it is determined whether the cost of moving rule R′ up is lower than *cost. Because in the first iteration *cost equals infinity, the cost (cost′) for moving R′ up will be lower. Thus, the process proceeds to step 445 where the cost of moving R up is calculated. This cost may simply be one plus the cost of moving up R′, because placing R in the TCAM slot of R′ is one additional move to the cost of moving R′. Accordingly, *cost is set to the new lowest cost (i.e., the cost of moving R up into the slot for R′) is saved for comparison to the remaining rules in rule_set in further iterations of steps 425 - 445 . This process continues until all the rules in rule_set have been compared. Thus, the resulting *cost after all rules have been compared will be the lowest cost. Accordingly, in step 450 the rules that are needed to be moved in the determined “best” cost maneuver are returned.
- FIG. 5 shows a process 500 incorporating the lowest cost of moving rules down to lower TCAM indexes and lowest cost of moving rules up to higher TCAM indexes derived in FIGS. 3 and 4 , respectively. Accordingly, the process 500 returns the lowest cost for any moves within the TCAM 126 to create an empty entry for new rule R.
- step 505 “ret” is set to the fewest number of rules that would need to be moved in order to move the upper bound of R to a higher indexed entry in the TCAM.
- ret′ is set to the fewest number of rules that would need to be moved in order to move the lower boundary to a lower indexed position. In step 510 , these two scenarios ret and ret′ are compared, and the lower cost move is saved.
- rule_set is set as all the rules existing in the TCAM entries between the upper bound and lower bound of R.
- Step 530 returns the rules that would need to be moved in order to move R′ selected from rule_set up. If the cost of this move is lower than the cost saved in step 510 (i.e., if fewer TCAM entries are required to be shifted to move R′ than to move the upper or lower bound), the cost of moving R′ up to a higher indexed position is stored in step 535 as the “best” cost. Otherwise, the cost of moving the upper or lower bound (whichever requires fewer moves) is retained as the cost.
- step 540 the number of moves required to move R′ down to a lower indexed position is returned. If the cost of this move is lower than the lowest previously saved cost, the cost of moving R′ down to a lower indexed position is stored in step 545 as the best cost.
- step 520 The process then returns to step 520 , where selection and comparison of rules (steps 525 - 545 ) are repeated until all rules between and including the upper and lower bounds of R have been analyzed. Accordingly, the resulting *cost will be the lowest cost move in either direction.
- the above methods may be performed any time a new rule is to be added.
- the above described methods may be implemented as software (e.g., executable code stored in memory 120 ) and executed by a processor in the router.
- the software may be stored remotely. This software application may be automatically run each time an ACL rule is to be added to the TCAM.
- the methods may, according to one aspect, be performed manually by a network manager.
- a major benefit of the above-described methods is cost savings. Because updates are not required when deleting a rule, the cost of updating is reduced. Further, various TCAM entries may remain empty, which facilitates later addition of rules. Importantly, the above-described methods maintain consistency in rule matching during updates, because rules are relocated one at a time based on priority. In addition, forwarding behaviors are not affected during the update, so packets may continually be transmitted through the network 150 during update of the TCAM 126 , thereby saving time.
- the present invention has been described with reference to particular embodiments, it should be understood that these examples are merely illustrative of the principles and applications of the present invention.
- the described system and method may be implemented over any network, such as the Internet, or any private network connected through a router.
- the network may be a virtual private network operating over the Internet, a local area network, or a wide area network.
- numerous other modifications may be made to the illustrative embodiments. For example, the steps taken to derive the lowest cost number of moves within the TCAM may be modified.
- these and that other arrangements may be devised without departing from the spirit and scope of the present invention as defined by the appended claims.
Abstract
Description
Claims (19)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/908,197 US8750144B1 (en) | 2010-10-20 | 2010-10-20 | System and method for reducing required memory updates |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/908,197 US8750144B1 (en) | 2010-10-20 | 2010-10-20 | System and method for reducing required memory updates |
Publications (1)
Publication Number | Publication Date |
---|---|
US8750144B1 true US8750144B1 (en) | 2014-06-10 |
Family
ID=50845469
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/908,197 Active 2032-05-21 US8750144B1 (en) | 2010-10-20 | 2010-10-20 | System and method for reducing required memory updates |
Country Status (1)
Country | Link |
---|---|
US (1) | US8750144B1 (en) |
Cited By (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130290535A1 (en) * | 2012-04-28 | 2013-10-31 | Realtek Semiconductor Corp. | Apparatus and method for managing an access control list in an internet device |
US20150229565A1 (en) * | 2014-02-12 | 2015-08-13 | Brocade Communications Systems, Inc. | Techniques for Managing Ternary Content-Addressable Memory (TCAM) Resources in Heterogeneous Systems |
CN105335307A (en) * | 2014-08-13 | 2016-02-17 | 华为技术有限公司 | ACL rule loading method and device |
US20160072696A1 (en) * | 2014-09-05 | 2016-03-10 | Telefonaktiebolaget L M Ericsson (Publ) | Forwarding table precedence in sdn |
CN106034054A (en) * | 2015-03-17 | 2016-10-19 | 阿里巴巴集团控股有限公司 | Redundant access control list ACL rule file detection method and apparatus thereof |
US9559897B2 (en) | 2012-12-21 | 2017-01-31 | Brocade Communications Systems, Inc. | Device ID assignment in a system of devices |
US9660937B2 (en) | 2013-10-31 | 2017-05-23 | Brocade Communications Systems, Inc. | Techniques for simplifying stacking trunk creation and management |
US9692652B2 (en) | 2014-04-03 | 2017-06-27 | Brocade Communications Systems, Inc. | Framework for reliably communicating port information in a system of devices |
US9692695B2 (en) | 2014-03-27 | 2017-06-27 | Brocade Communications Systems, Inc. | Techniques for aggregating hardware routing resources in a multi-packet processor networking system |
US20170244645A1 (en) * | 2016-02-23 | 2017-08-24 | Cisco Technology, Inc. | Method for improving access control for tcp connections while optimizing hardware resources |
US9853889B2 (en) | 2013-05-20 | 2017-12-26 | Brocade Communications Systems, Inc. | Broadcast and multicast traffic reduction in stacking systems |
US9860133B2 (en) | 2013-05-20 | 2018-01-02 | Brocade Communications Systems, Inc. | Configuration validation in a mixed node topology |
US10091059B2 (en) | 2014-12-16 | 2018-10-02 | Arris Enterprises Llc | Handling connections between network devices that support multiple port communication modes |
US10284499B2 (en) | 2013-08-22 | 2019-05-07 | Arris Enterprises Llc | Dedicated control path architecture for systems of devices |
WO2020046962A1 (en) * | 2018-08-31 | 2020-03-05 | Cisco Technology, Inc. | Router methods and apparatus for managing memory for network overlay routes with fallback route support prioritization |
US11063830B2 (en) * | 2019-06-26 | 2021-07-13 | Arista Networks, Inc. | Hitless upgrade of packet processing rules |
US20210336960A1 (en) * | 2018-12-10 | 2021-10-28 | Drivenets Ltd. | A System and a Method for Monitoring Traffic Flows in a Communications Network |
CN113765901A (en) * | 2021-08-25 | 2021-12-07 | 紫光云(南京)数字技术有限公司 | Method for modifying ACL rule |
US11336695B2 (en) | 2019-11-15 | 2022-05-17 | Cisco Technology, Inc. | Conversation-based policy distribution |
US11483313B2 (en) * | 2018-06-28 | 2022-10-25 | Intel Corporation | Technologies for updating an access control list table without causing disruption |
US20220417130A1 (en) * | 2021-06-28 | 2022-12-29 | Arista Networks, Inc. | Staging in-place updates of packet processing rules of network devices to eliminate packet leaks |
Citations (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6658002B1 (en) * | 1998-06-30 | 2003-12-02 | Cisco Technology, Inc. | Logical operation unit for packet processing |
US6775737B1 (en) * | 2001-10-09 | 2004-08-10 | Cisco Technology, Inc. | Method and apparatus for allocating and using range identifiers as input values to content-addressable memories |
US6871265B1 (en) * | 2002-02-20 | 2005-03-22 | Cisco Technology, Inc. | Method and apparatus for maintaining netflow statistics using an associative memory to identify and maintain netflows |
US6970462B1 (en) * | 2000-04-24 | 2005-11-29 | Cisco Technology, Inc. | Method for high speed packet classification |
US6993031B2 (en) * | 2000-04-07 | 2006-01-31 | Nec Corporation | Cache table management device for router and program recording medium thereof |
US7154888B1 (en) * | 2002-02-08 | 2006-12-26 | Cisco Technology, Inc. | Method for classifying packets using multi-class structures |
US7290083B2 (en) * | 2004-06-29 | 2007-10-30 | Cisco Technology, Inc. | Error protection for lookup operations in content-addressable memory entries |
US7313667B1 (en) * | 2002-08-05 | 2007-12-25 | Cisco Technology, Inc. | Methods and apparatus for mapping fields of entries into new values and combining these mapped values into mapped entries for use in lookup operations such as for packet processing |
US7366830B1 (en) * | 2005-09-01 | 2008-04-29 | Netlogic Microsystems, Inc. | Row expansion reduction by inversion for range representation in ternary content addressable memories |
US20080192754A1 (en) * | 2007-02-12 | 2008-08-14 | Yoon-Jin Ku | Routing system and method for managing rule entries of ternary content addressable memory in the same |
US7451267B1 (en) * | 2003-09-23 | 2008-11-11 | Netlogic Microsystems, Inc. | Method and apparatus for learn and related operations in network search engine |
US7509674B2 (en) * | 2003-10-07 | 2009-03-24 | Alcatel Lucent | Access control listing mechanism for routers |
US7525958B2 (en) * | 2004-04-08 | 2009-04-28 | Intel Corporation | Apparatus and method for two-stage packet classification using most specific filter matching and transport level sharing |
US7530112B2 (en) * | 2003-09-10 | 2009-05-05 | Cisco Technology, Inc. | Method and apparatus for providing network security using role-based access control |
US20090125470A1 (en) * | 2007-11-09 | 2009-05-14 | Juniper Networks, Inc. | System and Method for Managing Access Control Lists |
US7536476B1 (en) * | 2002-12-20 | 2009-05-19 | Cisco Technology, Inc. | Method for performing tree based ACL lookups |
US7555594B2 (en) * | 2004-07-22 | 2009-06-30 | Netlogic Microsystems, Inc. | Range representation in a content addressable memory (CAM) using an improved encoding scheme |
US7669244B2 (en) * | 2004-10-21 | 2010-02-23 | Cisco Technology, Inc. | Method and system for generating user group permission lists |
US7711893B1 (en) * | 2004-07-22 | 2010-05-04 | Netlogic Microsystems, Inc. | Range code compression method and apparatus for ternary content addressable memory (CAM) devices |
US7782859B2 (en) * | 2007-05-07 | 2010-08-24 | Cisco Technology, Inc. | Enhanced packet classification |
US7788445B2 (en) * | 2007-03-28 | 2010-08-31 | Cisco Technology, Inc | Intelligent allocation of programmable comparison operations for reducing the number of associative memory entries required |
US7861291B2 (en) * | 2006-06-02 | 2010-12-28 | Freescale Semiconductor, Inc. | System and method for implementing ACLs using standard LPM engine |
US7881291B2 (en) * | 2005-05-26 | 2011-02-01 | Alcatel Lucent | Packet classification acceleration using spectral analysis |
US20110038375A1 (en) * | 2009-08-17 | 2011-02-17 | Board Of Trustees Of Michigan State University | Efficient tcam-based packet classification using multiple lookups and classifier semantics |
US7904642B1 (en) * | 2007-02-08 | 2011-03-08 | Netlogic Microsystems, Inc. | Method for combining and storing access control lists |
US20110161580A1 (en) * | 2009-12-28 | 2011-06-30 | Juniper Networks, Inc. | Providing dynamic databases for a tcam |
US8122189B1 (en) * | 2005-09-01 | 2012-02-21 | Netlogic Microsystems, Inc. | Methods for logically combining range representation values in a content addressable memory |
US8205040B1 (en) * | 2008-01-29 | 2012-06-19 | Juniper Networks, Inc. | Storing content in a ternary content addressable memory |
US8307153B2 (en) * | 2010-05-05 | 2012-11-06 | Juniper Networks, Inc. | Power efficient and rule movement optimized TCAM management |
-
2010
- 2010-10-20 US US12/908,197 patent/US8750144B1/en active Active
Patent Citations (34)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6658002B1 (en) * | 1998-06-30 | 2003-12-02 | Cisco Technology, Inc. | Logical operation unit for packet processing |
US6993031B2 (en) * | 2000-04-07 | 2006-01-31 | Nec Corporation | Cache table management device for router and program recording medium thereof |
US6970462B1 (en) * | 2000-04-24 | 2005-11-29 | Cisco Technology, Inc. | Method for high speed packet classification |
US6775737B1 (en) * | 2001-10-09 | 2004-08-10 | Cisco Technology, Inc. | Method and apparatus for allocating and using range identifiers as input values to content-addressable memories |
US7154888B1 (en) * | 2002-02-08 | 2006-12-26 | Cisco Technology, Inc. | Method for classifying packets using multi-class structures |
US6871265B1 (en) * | 2002-02-20 | 2005-03-22 | Cisco Technology, Inc. | Method and apparatus for maintaining netflow statistics using an associative memory to identify and maintain netflows |
US7313667B1 (en) * | 2002-08-05 | 2007-12-25 | Cisco Technology, Inc. | Methods and apparatus for mapping fields of entries into new values and combining these mapped values into mapped entries for use in lookup operations such as for packet processing |
US7536476B1 (en) * | 2002-12-20 | 2009-05-19 | Cisco Technology, Inc. | Method for performing tree based ACL lookups |
US7530112B2 (en) * | 2003-09-10 | 2009-05-05 | Cisco Technology, Inc. | Method and apparatus for providing network security using role-based access control |
US7954163B2 (en) * | 2003-09-10 | 2011-05-31 | Cisco Technology, Inc. | Method and apparatus for providing network security using role-based access control |
US7451267B1 (en) * | 2003-09-23 | 2008-11-11 | Netlogic Microsystems, Inc. | Method and apparatus for learn and related operations in network search engine |
US7509674B2 (en) * | 2003-10-07 | 2009-03-24 | Alcatel Lucent | Access control listing mechanism for routers |
US7525958B2 (en) * | 2004-04-08 | 2009-04-28 | Intel Corporation | Apparatus and method for two-stage packet classification using most specific filter matching and transport level sharing |
US7290083B2 (en) * | 2004-06-29 | 2007-10-30 | Cisco Technology, Inc. | Error protection for lookup operations in content-addressable memory entries |
US7904643B1 (en) * | 2004-07-22 | 2011-03-08 | Netlogic Microsystems, Inc. | Range code compression method and apparatus for ternary content addressable memory (CAM) devices |
US7555594B2 (en) * | 2004-07-22 | 2009-06-30 | Netlogic Microsystems, Inc. | Range representation in a content addressable memory (CAM) using an improved encoding scheme |
US7711893B1 (en) * | 2004-07-22 | 2010-05-04 | Netlogic Microsystems, Inc. | Range code compression method and apparatus for ternary content addressable memory (CAM) devices |
US7669244B2 (en) * | 2004-10-21 | 2010-02-23 | Cisco Technology, Inc. | Method and system for generating user group permission lists |
US7881291B2 (en) * | 2005-05-26 | 2011-02-01 | Alcatel Lucent | Packet classification acceleration using spectral analysis |
US7366830B1 (en) * | 2005-09-01 | 2008-04-29 | Netlogic Microsystems, Inc. | Row expansion reduction by inversion for range representation in ternary content addressable memories |
US8122189B1 (en) * | 2005-09-01 | 2012-02-21 | Netlogic Microsystems, Inc. | Methods for logically combining range representation values in a content addressable memory |
US7814268B2 (en) * | 2005-09-01 | 2010-10-12 | Netlogic Microsystems, Inc. | Row expansion reduction by inversion for range representation in ternary content addressable memories |
US7861291B2 (en) * | 2006-06-02 | 2010-12-28 | Freescale Semiconductor, Inc. | System and method for implementing ACLs using standard LPM engine |
US7904642B1 (en) * | 2007-02-08 | 2011-03-08 | Netlogic Microsystems, Inc. | Method for combining and storing access control lists |
US7933282B1 (en) * | 2007-02-08 | 2011-04-26 | Netlogic Microsystems, Inc. | Packet classification device for storing groups of rules |
US20080192754A1 (en) * | 2007-02-12 | 2008-08-14 | Yoon-Jin Ku | Routing system and method for managing rule entries of ternary content addressable memory in the same |
US7788445B2 (en) * | 2007-03-28 | 2010-08-31 | Cisco Technology, Inc | Intelligent allocation of programmable comparison operations for reducing the number of associative memory entries required |
US7782859B2 (en) * | 2007-05-07 | 2010-08-24 | Cisco Technology, Inc. | Enhanced packet classification |
US8139586B2 (en) * | 2007-05-07 | 2012-03-20 | Cisco Technology, Inc. | Enhanced packet classification |
US20090125470A1 (en) * | 2007-11-09 | 2009-05-14 | Juniper Networks, Inc. | System and Method for Managing Access Control Lists |
US8205040B1 (en) * | 2008-01-29 | 2012-06-19 | Juniper Networks, Inc. | Storing content in a ternary content addressable memory |
US20110038375A1 (en) * | 2009-08-17 | 2011-02-17 | Board Of Trustees Of Michigan State University | Efficient tcam-based packet classification using multiple lookups and classifier semantics |
US20110161580A1 (en) * | 2009-12-28 | 2011-06-30 | Juniper Networks, Inc. | Providing dynamic databases for a tcam |
US8307153B2 (en) * | 2010-05-05 | 2012-11-06 | Juniper Networks, Inc. | Power efficient and rule movement optimized TCAM management |
Cited By (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130290535A1 (en) * | 2012-04-28 | 2013-10-31 | Realtek Semiconductor Corp. | Apparatus and method for managing an access control list in an internet device |
US9559897B2 (en) | 2012-12-21 | 2017-01-31 | Brocade Communications Systems, Inc. | Device ID assignment in a system of devices |
US9860133B2 (en) | 2013-05-20 | 2018-01-02 | Brocade Communications Systems, Inc. | Configuration validation in a mixed node topology |
US9853889B2 (en) | 2013-05-20 | 2017-12-26 | Brocade Communications Systems, Inc. | Broadcast and multicast traffic reduction in stacking systems |
US10284499B2 (en) | 2013-08-22 | 2019-05-07 | Arris Enterprises Llc | Dedicated control path architecture for systems of devices |
US9660937B2 (en) | 2013-10-31 | 2017-05-23 | Brocade Communications Systems, Inc. | Techniques for simplifying stacking trunk creation and management |
US9577932B2 (en) * | 2014-02-12 | 2017-02-21 | Brocade Communications Systems, Inc. | Techniques for managing ternary content-addressable memory (TCAM) resources in heterogeneous systems |
US20150229565A1 (en) * | 2014-02-12 | 2015-08-13 | Brocade Communications Systems, Inc. | Techniques for Managing Ternary Content-Addressable Memory (TCAM) Resources in Heterogeneous Systems |
US9692695B2 (en) | 2014-03-27 | 2017-06-27 | Brocade Communications Systems, Inc. | Techniques for aggregating hardware routing resources in a multi-packet processor networking system |
US9692652B2 (en) | 2014-04-03 | 2017-06-27 | Brocade Communications Systems, Inc. | Framework for reliably communicating port information in a system of devices |
CN105335307A (en) * | 2014-08-13 | 2016-02-17 | 华为技术有限公司 | ACL rule loading method and device |
CN105335307B (en) * | 2014-08-13 | 2018-10-02 | 华为技术有限公司 | A kind of loading method and device of acl rule |
US9692684B2 (en) * | 2014-09-05 | 2017-06-27 | Telefonaktiebolaget L M Ericsson (Publ) | Forwarding table precedence in SDN |
US20160072696A1 (en) * | 2014-09-05 | 2016-03-10 | Telefonaktiebolaget L M Ericsson (Publ) | Forwarding table precedence in sdn |
US10091059B2 (en) | 2014-12-16 | 2018-10-02 | Arris Enterprises Llc | Handling connections between network devices that support multiple port communication modes |
CN106034054B (en) * | 2015-03-17 | 2019-07-05 | 阿里巴巴集团控股有限公司 | Redundant access controls list acl rule file test method and device |
CN106034054A (en) * | 2015-03-17 | 2016-10-19 | 阿里巴巴集团控股有限公司 | Redundant access control list ACL rule file detection method and apparatus thereof |
US20170244645A1 (en) * | 2016-02-23 | 2017-08-24 | Cisco Technology, Inc. | Method for improving access control for tcp connections while optimizing hardware resources |
US10432628B2 (en) * | 2016-02-23 | 2019-10-01 | Cisco Technology, Inc. | Method for improving access control for TCP connections while optimizing hardware resources |
US11483313B2 (en) * | 2018-06-28 | 2022-10-25 | Intel Corporation | Technologies for updating an access control list table without causing disruption |
WO2020046962A1 (en) * | 2018-08-31 | 2020-03-05 | Cisco Technology, Inc. | Router methods and apparatus for managing memory for network overlay routes with fallback route support prioritization |
US11108690B2 (en) | 2018-08-31 | 2021-08-31 | Cisco Technology, Inc. | Router methods and apparatus for managing memory for network overlay routes with fallback route support prioritization |
US20210336960A1 (en) * | 2018-12-10 | 2021-10-28 | Drivenets Ltd. | A System and a Method for Monitoring Traffic Flows in a Communications Network |
US11063830B2 (en) * | 2019-06-26 | 2021-07-13 | Arista Networks, Inc. | Hitless upgrade of packet processing rules |
US11336695B2 (en) | 2019-11-15 | 2022-05-17 | Cisco Technology, Inc. | Conversation-based policy distribution |
US20220417130A1 (en) * | 2021-06-28 | 2022-12-29 | Arista Networks, Inc. | Staging in-place updates of packet processing rules of network devices to eliminate packet leaks |
CN113765901A (en) * | 2021-08-25 | 2021-12-07 | 紫光云(南京)数字技术有限公司 | Method for modifying ACL rule |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8750144B1 (en) | System and method for reducing required memory updates | |
US11811660B2 (en) | Flow classification apparatus, methods, and systems | |
US11418632B2 (en) | High speed flexible packet classification using network processors | |
US8478707B1 (en) | System and method for reducing flow rules in forwarding tables | |
US10778583B2 (en) | Chained longest prefix matching in programmable switch | |
US8090901B2 (en) | TCAM management approach that minimize movements | |
US9245626B2 (en) | System and method for packet classification and internet protocol lookup in a network environment | |
US8990492B1 (en) | Increasing capacity in router forwarding tables | |
US7774538B2 (en) | Method for ternary contents address memory table management | |
US20150131666A1 (en) | Apparatus and method for transmitting packet | |
US20170053012A1 (en) | High-performance bloom filter array | |
US20070171911A1 (en) | Routing system and method for managing rule entry thereof | |
US20170052731A1 (en) | Efficient lookup of tcam-like rules in ram | |
US20080192754A1 (en) | Routing system and method for managing rule entries of ternary content addressable memory in the same | |
US10148571B2 (en) | Jump on a match optimization for longest prefix match using a binary search tree | |
EP3276501B1 (en) | Traffic classification method and device, and storage medium | |
CN107977160B (en) | Method for data access of exchanger | |
US20170012874A1 (en) | Software router and methods for looking up routing table and for updating routing entry of the software router | |
US8316151B1 (en) | Maintaining spatial ordering in firewall filters | |
US11888743B1 (en) | Network device storage of incremental prefix trees | |
US8539547B2 (en) | Policy selector representation for fast retrieval | |
US10476798B1 (en) | Network switch with deterministic longest prefix match lookup | |
KR101665583B1 (en) | Apparatus and method for network traffic high-speed processing | |
US11368354B2 (en) | Multi-result lookups | |
US11924102B2 (en) | Minimizing deviation from average latency of table lookups |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHOU, JUNLAN;JI, ZHENGRONG;REEL/FRAME:025381/0497Effective date: 20101013 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |