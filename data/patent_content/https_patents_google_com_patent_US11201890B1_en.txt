US11201890B1 - System and method for adaptive graphical depiction and selective remediation of cybersecurity threats - Google Patents
System and method for adaptive graphical depiction and selective remediation of cybersecurity threats Download PDFInfo
- Publication number
- US11201890B1 US11201890B1 US16/370,199 US201916370199A US11201890B1 US 11201890 B1 US11201890 B1 US 11201890B1 US 201916370199 A US201916370199 A US 201916370199A US 11201890 B1 US11201890 B1 US 11201890B1
- Authority
- US
- United States
- Prior art keywords
- objects
- alert
- semantic graph
- threat
- cyber
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/554—Detecting local intrusion or implementing counter-measures involving event detection and direct action
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/57—Certifying or maintaining trusted computer platforms, e.g. secure boots or power-downs, version controls, system software checks, secure updates or assessing vulnerabilities
- G06F21/577—Assessing vulnerabilities and evaluating computer system security
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1408—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic by monitoring network traffic
- H04L63/1416—Event detection, e.g. attack signature detection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/14—Network architectures or network communication protocols for network security for detecting or protecting against malicious traffic
- H04L63/1433—Vulnerability analysis
Definitions
- the present disclosure relates generally to the detection of cyber-threats, and more specifically, to systems for the aggregation and adaptive display of cyber-threat data and the selective remediation of cyber-threats.
- SOC Security operations center
- Security operations centers can receive cyber-security-related alerts from any of a variety of sources constituting cyber-security devices and/or software (e.g., firewalls, malware protection systems, network security appliances, antivirus software, antispyware software, host intrusion prevention systems (HIPSs), monitoring agents, endpoints, third-party sources, etc.) and can be configured to monitor a network of interest using dedicated hardware and/or software to detect cyber-security threats.
- sources constituting cyber-security devices and/or software
- HIPSs host intrusion prevention systems
- a method employed by the SOC for performing cyber-security threat analysis and mitigation includes generating, via a compute device, a semantic graph in which each object from a plurality of objects is represented as a node, and each event (e.g., observed network traffic characteristic or monitored processing activity among monitored objects) from a plurality of events associated with the plurality of objects is represented as an edge.
- a signal representing an alert e.g., report
- the alert conveying information regarding an event and/or one or more objects relevant to a cyber-threat, and having an associated alert type.
- Based on the alert at least a first object from the plurality of objects is modified (e.g., by incrementing an occurrence value related to the event reported by the alert).
- a plurality of threat scores, each associated with an object from the plurality of objects are calculated, e.g., substantially concurrently, based on the alert type.
- a plurality of modified threat scores are determined, for each object from the plurality of objects, based on: (1) the threat score for that object, (2) a connectivity of that object to each remaining object within the semantic graph; and (3) the threat score for each remaining object from the plurality of objects.
- the modified threat scores are normalized, and a subgraph of the semantic graph is identified based on the plurality of normalized threat scores.
- the subgraph is displayed within a graphical user interface (GUI) without displaying the remaining portion of the semantic graph, is visually highlighted while displaying both the subgraph and the remaining portion of the semantic graph, is presented in a separate window or display/display portion, or is otherwise brought to an analyst's attention, and may include, in some embodiments, a user-selectable feature to authorize remediation of the cyber-threat.
- GUI graphical user interface
- the semantic graphs are continuously updated, for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more newly received alerts.
- Each object, represented by a node of the semantic graph, is a reference to a distinguishable programmatic entity (e.g., a network traffic packet, file residing on a computing device or a process running on a computing device), or a computing device itself such as an endpoint operating on network, etc., as monitored by a cyber-security device (or software).
- An event is a monitored feature, which may be an indicator of compromise, as logged by a cyber-security device.
- an event may be a characteristic determined by static analysis (e.g., pattern matching) of data in flight (e.g., network traffic) or data at rest (e.g., stored files or other data), which may include malware.
- An event may also include information determined by dynamic analysis regarding a monitored processing or network activity, which may include indicators of a cyber-attack.
- Each edge of the semantic graph is related to an interaction between two objects, represented by a link between the respective nodes on the semantic graph.
- the interaction relationship between objects is based on information provided by received cyber-security alerts describing events monitored by the cyber-security devices (or software).
- a user-operated endpoint may be monitored by resident cybersecurity software (e.g., an embedded agent), the software monitoring the execution of a process “opening” a file.
- the cybersecurity agent can alert the SOC, which can, in turn, construct at least a portion of the semantic graph by creating a “node” representing the process responsible for opening the file and a node representing the opened file.
- the SOC links the generated nodes (representing the opened file and the process) by an edge of the semantic graph based on their interaction (i.e. the “open” action).
- the alert may be a signal reporting one or more events related to one or more objects, though in some cases an alert may additional signal to warn of an actual or suspected cyber-threat, thus prompting further analysis or other action.
- the semantic graph is stored, maintained and/or modified at an SOC
- the semantic graph can be stored, maintained and/or modified, in other embodiments, at/by a cybersecurity agent (e.g., a local version of the semantic graph) and/or one or more further remote compute devices (e.g., a global version of the semantic graph, a copy of a local version of the semantic graph, etc.).
- a cybersecurity agent e.g., a local version of the semantic graph
- one or more further remote compute devices e.g., a global version of the semantic graph, a copy of a local version of the semantic graph, etc.
- the multiple compute devices may be configured to operate in a peer-to-peer networked manner, for example such that reconstruction of the semantic graph involves at least a subset of the multiple compute devices.
- a method for performing cyber-security analysis includes generating a semantic graph in which each object from a plurality of objects is represented as a node, and each event from a plurality of events associated with the plurality of objects is represented as an edge.
- the method also includes sending a signal to cause display of the semantic graph via a GUI.
- Each edge from the plurality of edges can have an associated tally that actively updates in response to additional instances of the event associated with that edge.
- Event data for a compute device is logged, e.g., substantially in real time, and the semantic graph is updated, e.g., substantially concurrently with the logging of the event data, and based on the event data.
- the logging of the event data can be performed according to a predefined schedule.
- the updating of the semantic graph can include modifying an alert attribute of a first object from the plurality of objects when the event data includes an alert applicable to the first object, and modifying a threat score of each object from the plurality of objects based on the event data.
- the alert attribute optionally includes a timestamp associated with the alert.
- the updating of the semantic graph can also include decomposing the event data into a set of objects and a set of events, and updating a frequency of occurrence of an edge from the plurality of edges based on the set of events.
- a subgraph of the semantic graph can be detected/identified based on a plurality of normalized threat scores associated with the plurality of objects, and the subgraph can be displayed within the GUI without displaying the remainder of the semantic graph.
- a non-transitory processor-readable medium stores code representing instructions to cause a processor to generate a semantic graph representing a plurality of nodes and a plurality of edges, with each node from the plurality of nodes representing an object from a plurality of objects, and each edge from the plurality of edges representing an event from a plurality of events.
- the code also represents instructions to cause the processor to store alert data for a cyber-alert, where the alert data includes an associated alert type, an associated weight, and an associated number of occurrences.
- the code also represents instructions to cause the processor to calculate associations between each object from the plurality of objects and at least a portion of the alert data, and to calculate a plurality of threat scores for the plurality of objects based on the event data and the alert data.
- the instructions to cause the processor to calculate associations between each object from the plurality of objects and at least a portion of the alert data can include instructions to cause the processor to calculate a relevance of the cyber-alert to each object from the plurality of objects.
- the code also represents instructions to cause the processor to propagate the plurality of threat scores to at least a subset of the plurality of objects, based at least in part on the associations, identify a high-risk or anomalous subgraph of the semantic graph based on the plurality of threat scores, and send a signal to cause display of the subgraph within a GUI.
- FIG. 1 is a diagram showing a networked system for performing cyber-security analysis and mitigation, according to an embodiment.
- FIG. 2 is a diagram showing components of a cyber-threat analyzer, according to an embodiment.
- FIG. 3 is a flowchart showing a method of analyzing and mitigating cyber-threats, according to an embodiment.
- FIG. 4 is a flowchart showing a method of analyzing cyber-threats, according to an embodiment.
- FIG. 5 is a flowchart showing a method of analyzing cyber-threats, according to an embodiment.
- FIG. 6 shows an example of a known security operations center interface.
- FIG. 7A shows an example of a semantic graph, according to an embodiment.
- FIG. 7B shows an example subgraph of the semantic graph of FIG. 7A .
- FIGS. 7C-7F are diagrams showing an evolution of an excerpt of the semantic graph of FIG. 7A .
- FIGS. 7G-7I show relationships between the excerpts of FIGS. 7C-7F and the subgraph of FIG. 7B .
- FIG. 8 is a bar chart showing the extraction of a malicious behavior, according to an embodiment.
- Some known cyber-security systems interfaces organize critical alerts, such as indicators of compromise (IOCs) into a global timeline or graph of associated alerts (e.g., within a “security operations center”).
- IOCs indicators of compromise
- Such representations are typically voluminous (e.g., requiring an analyst to scroll through many pages), and can include benign and/or duplicative information, making it cumbersome/difficult for an expert or analyst to readily discern/detect significant cyber-security threats. Without the ability to readily discern a cyber-security threat, the analyst often cannot timely mitigate or remediate that threat.
- Systems and methods of the present disclosure address the foregoing shortcomings by generating and dynamically updating a semantic graph and automatically propagating changes to threat scores (e.g., in response to newly-detected alerts) within the semantic graph, providing a more concise and efficient representation of the overall cyber-security condition of a system or network.
- systems and methods described herein facilitate the identification of subgroups of interest (i.e., subgraphs within the semantic graph) such that only the subgroup(s) are displayed to an analyst, or such that an analyst's attention is otherwise directed to a region of interest (e.g., represented by the subgraph within the semantic graph), thereby achieving the practical benefits of reducing processor and/or storage requirements, improving processor efficiency, increasing the data value and/or relevance for a given region of observation (i.e., a network or portion of a network that is being monitored for cyber-security by an analyst), and/or improving the analyst's response time.
- subgroups of interest i.e., subgraphs within the semantic graph
- a region of interest e.g., represented by the subgraph within the semantic graph
- semantic graph refers to any representation of semantic relationships between networked elements, and can include, for example, one or more abstract semantic graphs (ASGs) such as directed graphs (e.g., directed acyclic graphs (DAGs)), undirected graphs, and/or hypergraphs.
- ASGs abstract semantic graphs
- DAGs directed acyclic graphs
- undirected graphs undirected graphs
- hypergraphs hypergraphs
- an “alert” can be associated with or triggered by any of a variety of computing activities, for example, one or more of the following: an unauthorized wireless connection, an application installed on a locked down system, a removable drive added to a locked down system, a granting or denial of administrative rights or escalation of privileges, an unauthorized access of an access-restricted compute device, detection of a new device on a restricted network, multiple different user login(s) made by a single compute device, a failure to enforce an internet restriction, a circumvention of a network restriction, a failure to timely install a critical patch or software update, detection of a new user or new user-profile creation, an unexpected/unusual login of a user, an unusual login time of a user, detection of an internal vulnerability, etc.
- the visual/graphical representation of the semantic graph includes one or more user-selectable features (e.g., buttons, sliders, swipable regions, checkboxes, dialog boxes, dropdown menus, or any other graphical elements with which a user can interact via the GUI), the user selection/actuation of which can authorize remediation of the cyber-threat (i.e., remediation options).
- user-selectable features can be positioned adjacent to a particular node or edge (associated with a detected cyber-threat) within the semantic graph, and/or can be specific to an alert and therefore positioned anywhere within the GUI, as the remediation of the alert can impact multiple nodes and/or edges of the semantic graph.
- all impacted nodes and edges of the semantic graph are highlighted or otherwise made graphically prominent in response to the display and/or selection of a remediation option.
- the semantic graph is continuously updated, for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more new alerts.
- FIG. 1 is a diagram showing a networked system for performing cyber-security analysis and mitigation, according to an embodiment.
- the system 100 includes a network 110 providing wired or wireless communications connectivity between a plurality of remote sources 120 A- 120 C, and a terminal 130 (with an optional user, who may be an administrator).
- Each of the remote sources 120 A- 120 C and the terminal 130 can be a compute device including a processor and a memory in operable communication with the processor.
- Each memory can store instructions, executable by the processor, to perform specified functions.
- the instructions can be implemented in software (e.g., software modules stored in memory) and/or hardware.
- the memory at terminal 130 can store instructions to cause the processor of terminal 130 to generate a graphical representation of cyber-threat and/or cyber-security related data thereon (e.g., via a graphical user interface (GUI) on a display of the terminal 130 ), and to update the graphical representation based on signals, originating at one or more of the remote sources 120 A- 120 C (also referred to herein as “sources”) and received at the terminal 130 via the network 110 , each of the signals representing one or more alerts.
- the signals can also represent, and/or additional signals can be received at the terminal 130 and represent, meta-information associated with the one or more alerts.
- the meta-information can include, for example, information about a source of the alert, an indication as to whether the alert resulted from the processing of code received by the terminal 130 (e.g., via email), a code signature associated with the alert, or any other suitable type of meta-information associated with the alert.
- the graphical representation can include a semantic graph having a plurality of “nodes” that are interconnected by “edges.” In other words, the edges can be viewed as representing relationships between nodes. Each of the nodes can represent and/or be associated with an object, and each of the edges can represent and/or be associated with an event. The impact any given received alert has on the graphical representation can depend on an alert type of the alert.
- the “alert type” is a classification of the alert, and has an associated credibility value (or quality value).
- the credibility value can be calculated/determined by the terminal 130 , for example based on one or more of: historical data including observed analyst responses to previous alerts received from that source, historical data for alerts received from that source indicating, for those alerts, whether the alert coincided with or accurately predicted a bona fide cyber-threat, third-party data (e.g., external threat intelligence data) assessing the credibility/reputation of that source, etc.
- the alert type can refer to a granularity of the associated alert or to a prevalence of the alert within a monitored population (e.g., less prevalent alerts may be considered more important or useful than higher-prevalence alerts).
- a low-detail alert type can be: a general change in permissions or configuration of a network
- a high-detail alert type for the same event triggering the alert can include details such as the permission settings, user identifier(s), the time of the change, a network identifier, etc.
- the terminal 130 performs updates to the semantic graph via propagation and scoring.
- propagation refers to taking the entire value of, or a fraction of the value of, a given node's threat score, and using the entire or fractional value of that node's threat score to modify all other nodes in the semantic graph (e.g., substantially concurrently or simultaneously) as the other nodes are encountered during iterative traversals (i.e., paths) of the semantic graph along edges.
- the paths can be selected, for example, based on the associated time to traverse, attributes of nodes along the paths, and/or attributes of the edges (e.g., frequencies of occurrence of the edges (e.g., more frequently-occurring edges can have a higher probability of being followed), edge directionality, interaction type (e.g., a read event or a write event), etc.). Since edges and/or objects can be added over time in response to additional signals received at terminal 130 , a new path determination can be performed for each iteration, and may change from iteration to iteration, depending on how the semantic graph evolves.
- Scoring refers to the process of taking the threat score information propagated through a given node, and combining (e.g., substantially concurrently or simultaneously) that threat score information with threat score information at each of the other nodes, to derive a final threat score for that node. Scoring can occur subsequent to (and optionally immediately subsequent to) propagation.
- the propagation and scoring mechanisms can be performed using a class of algorithms that can be referred to as belief propagation algorithms, which are message-passing algorithms for performing inference on graphical models by calculating the marginal distribution of each unobserved node, conditional on any observed nodes.
- the belief propagation algorithm used can be an exact method (e.g., sum-product message passing) or an approximate method (e.g., variational message passing).
- FIG. 2 is a diagram showing components of a cyber-threat analyzer, according to an embodiment.
- the cyber-threat analyzer 200 of FIG. 2 can be implemented at, for example, the terminal 130 of FIG. 1 .
- the cyber-threat analyzer 200 e.g., a server, a public cloud (e.g., accessible via the internet), a private cloud (e.g., accessible over a private connection, e.g., a virtual private network (VPN)), a peer-to-peer computing system, etc.
- a network interface 220 equipped to receive and/or send signals representing messages from a network.
- the memory 202 includes one or more modules (e.g., software modules stored in the memory), including one or more of: a semantic graph generator 204 , a threat score calculator 206 , and a subgraph detector 208 .
- the memory 202 also stores (e.g., in a database) data for one or more of: objects 210 , events 212 , alerts 214 , scores 216 , subgraphs 218 , and semantic graph(s) 219 .
- the semantic graph generator 204 can generate a data representation of a semantic graph that includes multiple nodes representing objects 210 and multiple edges representing events 212 .
- the cyber-threat analyzer 200 can send relevant object, event and/or alert data to a remotely coupled network service or device to generate of the semantic graph (e.g., to reduce resource consumption at the cyber-threat analyzer 200 itself).
- the generation of the semantic graph (whether by the semantic graph generator 204 or by the remotely coupled network service or device) can be based on all objects and/or events associated with a particular network or set of networks of interest (e.g., for a given observation period), such that the semantic graph includes nodes and edges for all objects and/or events.
- the generation of the semantic graph (whether by the semantic graph generator 204 or by the remotely coupled network service or device) can be based on a subset of all objects and/or events associated with a particular networks or set of networks of interest, such that the semantic graph includes nodes and edges for the subset of objects and/or events.
- the cyber-threat analyzer 200 can receive, via the network interface 220 and from one or more remote sources (e.g., 120 A- 120 C of FIG. 1 ), signals representing one or more new objects 210 and/or events 212 that have been detected within a networked system (e.g., networked system 100 of FIG. 1 ).
- the remote sources 120 A- 120 C can include, for example, endpoint cyber-security agents, network security appliances, firewalls, etc. Data associated with the one or more new objects 210 and/or data associated with the one or more new events 212 can be stored in the memory 202 .
- the cyber-threat analyzer 200 can receive, via the network interface 220 and from one or more remote sources (e.g., 120 A- 120 C of FIG. 1 ), signals representing one or more alerts 214 associated with a cyber-threat or cyber-security related incident.
- the alerts can be generated, for example, at the one or more remote sources and/or at one or more remote/third-party compute devices.
- the cyber-threat or cyber-security related incident can include an incident that impacts the operability, functionality, or security of hardware and/or software of the one or more remote sources.
- Data associated with the one or more alerts 214 i.e., alert data
- the threat score calculator 206 can calculate multiple threat scores 216 based on the alert data (e.g., the alert type(s)), each threat score from the multiple threat scores being associated with an object 210 from the multiple objects. Once the multiple threat scores have been calculated, the threat score calculator 206 can then calculate modified threat scores for each object 210 in the semantic graph (e.g., substantially concurrently/simultaneously), such that the multiple threat scores are propagated throughout the semantic graph. Optionally, the threat score calculator 206 also normalizes the modified threat scores prior to subgraph detection.
- the threat score calculator 206 also normalizes the modified threat scores prior to subgraph detection.
- the subgraph detector 208 can then identify one or more subgraphs of the semantic graphs, based on the (optionally normalized) modified threat scores, as shown and further discussed herein with reference to FIGS. 7A-7I .
- the one or more subgraphs can be selected by the subgraph detector as having a locally higher average threat score than a remainder of the semantic graph.
- the subgraph(s) can then be displayed (e.g., via a GUI of the cyber-threat analyzer 200 , not shown).
- reports can be generated based on the subgraphs, optionally including recommended mitigations based on experiential knowledge of the system, a set of pre-defined mitigations, and/or other past mitigations.
- FIG. 3 is a flowchart showing a processor-implemented method of analyzing and mitigating cyber-threats, according to an embodiment.
- the method 300 begins with an optional generation at 320 , of an initial/starting semantic graph (e.g., via a semantic graph generator 204 of FIG. 2 ), an example excerpt of which is also provided in FIG. 3 towards the right.
- the example excerpt of the initial semantic graph, shown in FIG. 3 includes objects “cmd.exe,” “mimikatz.exe,” and “password.txt,” represented as nodes, and events “executes” and “writes,” represented as edges (i.e., lines of connection/connectivity between the objects).
- Each event/edge in addition to an annotation showing the name of that event, also includes an annotation showing a frequency of occurrence (i.e., a number of occurrences) for that edge.
- a frequency of occurrence i.e., a number of occurrences
- the “executes” event has occurred twice (as of the time of observation of the example excerpt of the initial semantic graph), and the “writes” event has occurred twice.
- the example semantic graph in FIG. 3 represents real observations that the cmd.exe program executed twice, which caused (as represented by the arrow directionality) the mimikatz.exe program to write twice, as separate events, to password.txt.
- the semantic graph is modified (during operation of the processor (e.g., cyber-threat analyzer 200 of FIG.
- At least some of the nodes and edges (with annotations) rendered within a GUI can remain graphically stationary (i.e., maintain their spatial positions within a display region) while the occurrence value(s) are increased/incremented as new event data is received/logged.
- Representing modifications to the semantic graph in this manner reduces processing complexity and makes it easier for a user to visually monitor a relatively large volume of data of the semantic graph within a compact representation, and to more readily detect important changes and/or anomalies therein.
- an alert is received (or multiple alerts are received) at the processor.
- the alert can be associated with and/or triggered by, for example, a cyber-threat or cyber-security risk that has been detected within a networked system operably coupled to the processor.
- the alert is parsed. After parsing the alert, and in response to receiving the alert, at 324 , the processor either generates a semantic graph based on the parsed alert (e.g., if no semantic graph was generated at 320 ), or modifies (i.e., adds or changes, e.g., via a semantic graph generator 204 of FIG.
- FIG. 2 one or more objects of the semantic graph based on the alert (i.e., thereby producing a modified semantic graph), for example such that that object includes an attribute associated with the alert (i.e., an alert attribute).
- the alert attribute can include a timestamp associated with the alert.
- the example excerpt of the modified semantic graph shows that the “mimikatz.exe” object/node has been annotated to include the text “2 alerts.”
- Such a modification to the semantic graph can indicate that two alerts associated with the mimikatz.exe executable software application have been received, and can be accompanied by the storage, in a memory operably coupled to the processor, of a relationship between the “mimikatz.exe” object/node and alert data associated with the alert.
- the processor calculates, at 326 , threat scores, based on the alert, for each of the objects in the semantic graph.
- the calculation of the threat scores for each of the objects can be performed simultaneously/concurrently, substantially simultaneously/concurrently, or overlapping in time, or can follow a sequencing according to a pre-specified schedule or algorithm. In some embodiments, calculating the threat scores is performed according to the following equation:
- M x ⁇ i ⁇ alerts ⁇ w i ⁇ n i
- M x is the threat score for node x
- w i is a weight of alert type i
- n i is a number of times the alert type has occurred with respect to the modified first object (denoted as x) and within a current analysis/monitoring period (or “epoch”).
- the weight for the alert type can be based on a quality of the alert type and/or the source from which the alert was received.
- the threat score is associated with suspicious and/or unusual communication between an endpoint and another endpoint within the network (e.g., following generation of a file by execution of a process on the monitored endpoint(s)).
- each threat score associated with a given object/node i.e., initial/starting threat scores
- Each of the modified threat scores (for each of the other objects/nodes of the semantic graph) can be calculated based on the initial/starting threat score of that object/node, an architectural property of the semantic graph, and/or the threat score for each remaining object from the plurality of objects, e.g., using an algorithm including at least one of: PageRank, Hyperlink-Induced Topic Search (HITS), diffusion wavelet analysis, a sum-product message passing algorithm, or a variational message passing method/algorithm.
- HITS Hyperlink-Induced Topic Search
- the architectural property of the semantic graph may include one or more of (but is not limited to): a centrality, a connectivity, a confidence, and a distance associated with that object/node, e.g., relative to one or more other objects/nodes of the semantic graph, as applicable.
- the modified threat scores can be based on a maliciousness (i.e., threat score) of one or more other objects/nodes in the semantic graph (e.g., a predetermined number of nearest neighbors).
- the calculation of the modified threat scores for each of the objects can be performed simultaneously/concurrently or substantially simultaneously/concurrently, or can follow a sequencing according to a pre-specified schedule or algorithm.
- Determining the modified threat scores can be performed at a predetermined time, for example after at least one of: a specified number of alerts have been received, or a specified interval of time has elapsed.
- calculation of the modified threat scores is performed according to the following equation (solved separately for each of the objects):
- BR is a baseline rank (also referred to herein as a “baseline threat score,” i.e., for a previous instance of the semantic graph, e.g., during a previous analysis/monitoring period or “epoch”) for that object and Relevance is a current relevance (also referred to herein as a “current threat score,” e.g., associated with a current analysis/monitoring period or “epoch”) for that object.
- epoch e.g., associated with a current analysis/monitoring period or “epoch”
- the modified threat scores are normalized (e.g., to a sum of 1) at 330 , and a subgraph of the semantic graph is identified, at 332 , based on the plurality of normalized threat scores.
- the subgraph can be displayed within a graphical user interface (GUI) without displaying the remaining portion of the semantic graph, or the subgraph can otherwise be brought to an analyst's attention (e.g., via the presentation of an alert within the GUI and/or a modification to the relative proportion of graphical representations of portions of the semantic graph within the GUI, etc.).
- the subgraph can include one or more user-selectable features to authorize and/or initiate/cause remediation of the cyber-threat.
- remediation can include, but are not limited to: ceasing/stopping execution of a software application, deleting a file, quarantining a host, changing a firewall rule, blocking a user from accessing one or more computing resources (e.g., by modifying a permission setting or credential associated with the user), installing an update to a software application, etc.
- the remediation is executed by the processor itself (e.g., cyber-threat analyzer 200 of FIG. 2 ).
- the semantic graph is continuously updated (e.g., as indicated by the dashed arrow of FIG. 3 that loops from 332 to 320 ), for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more new alerts.
- a sub-graph is further analyzed by the processor (e.g., cyber-threat analyzer 200 of FIG. 2 ) based on a pattern of communication identified as a “malicious lateral movement,” and a set of relevant mitigations may be associated with the subgraph, such that the subgraph and the associated mitigations are then presented to an analyst for action.
- the mitigations presented to the analyst may be based, for example, on a set of defined mitigations associated with known subgraphs, a set of past mitigations previously implemented by a user or by the analyst for the same or a similar subgraph or malicious behavior, and/or dynamically generated mitigations.
- weightings are periodically or aperiodically generated for, and associated with, a semantic graph.
- the weightings can be generated based on a known confidence of maliciousness (e.g., based on historical data associated with a detected malicious behavior). Alternatively or in addition, the weightings can be based on a temporal relationship between the triggering/malicious event and events of known maliciousness.
- Systems set forth herein can be operated within a protected network and/or via the use of a remote, network-coupled service.
- FIG. 4 is a flowchart showing a processor-implemented method of analyzing cyber-threats, according to an embodiment.
- the method 400 of FIG. 4 includes some steps common/similar to the method 300 of FIG. 3 , but includes an event logging capability.
- the method 400 includes generating, at 430 , and displaying, at 432 , a semantic graph for a networked system that is being monitored for cybersecurity.
- the method 400 also includes, at 434 , logging event data, and at 436 , updating the semantic graph (e.g., based on the logged event data at 434 ).
- the updating the semantic graph can include decomposing the logged event data into a set of objects and a set of events.
- the logging of the event data 434 and the updating of the semantic graph 436 can be performed in parallel, or can at least partially overlap in time.
- the event data can include one or more alerts.
- an alert is received (e.g., as part of the event data logging 434 ) that is applicable to one or more objects/nodes of the semantic graph, an alert attribute of the one or more objects/nodes is modified.
- the threat scores of the semantic graph are modified (e.g., simultaneously or substantially simultaneously) based on the event data that has been logged at 434 .
- the method iterates by looping back to the generate semantic graph 430 step (e.g., to generate a modified semantic graph that includes the modified threat scores calculated at 440 ).
- FIG. 5 is a flowchart showing a processor-implemented method of analyzing cyber-threats, according to an embodiment.
- the method 500 of FIG. 5 includes the identification of a subgraph of the semantic graph, but also includes the calculation of associations between objects and alert data.
- the method 500 includes generating, at 540 , a semantic graph that represents objects as nodes and events (or actions) as edges.
- Alert data e.g., for one or more cyber-alerts received at the processor from one or more firewalls, agents, third-party sources, etc.
- the alert data can include one or more of: alert type, weight, and number of occurrences.
- association between objects of the semantic graph and the alert data are calculated.
- Threat scores for the objects of the semantic graph are then calculated (e.g., simultaneously or concurrently), at 546 , based on the alert data and the event data.
- each threat score calculated at 546 for a given object/node of the semantic graph is propagated to each other object/node of the semantic graph, via the calculation of modified threat scores that are based on the associations calculated at 544 .
- a subgraph (e.g., a high-risk or anomalous subgraph) of the semantic graph can then be identified/detected (and optionally displayed via a GUI) at 550 based on the modified threat scores (which have optionally been normalized prior to the subgraph detection).
- a high-risk or anomalous subgraph can refer to a portion of the semantic graph (e.g., a subset of nodes from the multiple nodes of the semantic graph) having one or more associated threat scores and/or an associated threat score statistic (e.g., an average threat score for the subset) that is higher than a predefined/specified threshold and/or that is higher than a corresponding property of the remainder of the semantic graph.
- the alert is a first alert
- the method 500 also includes calculating an updated plurality of threat scores for the plurality of objects based on a second alert, and propagating the updated plurality of threat scores to at least the subset of the plurality of objects of the semantic graph.
- Calculating the updated plurality of threat scores can include calculating associations between each object from the plurality of objects and data associated with the second alert (optionally including calculating a relevance of the one or more cyber-alerts to each object from the plurality of objects), and to calculate the updated plurality of threat scores based on the associations between each object from the plurality of objects and data associated with the second alert.
- the event data is a first event data
- the method 500 also includes receiving a second event data after receiving the first event data, incrementing a number of occurrences associated with at least one event from the plurality of events to produce an incremented number of occurrences, and sending a signal, in response to incrementing the stored number of occurrences, to cause display of a modified subgraph including the incremented number of occurrences within the GUI.
- FIG. 6 shows an example of a known security operations center interface.
- the presentation and constant updating of a large volume of event and alert data in a scrolling/scrollable list makes it cumbersome/difficult for an analyst to maintain a global picture of the cyber health of the system being monitored (e.g., because the topmost item in the scrolling list is the most recent, but may not be the most relevant), much less to readily discern cybersecurity threats.
- FIG. 7A shows an example of a semantic graph, according to an embodiment.
- the semantic graph of FIG. 7A presents network-wide cybersecurity data within a single view that includes annotated nodes and edges (as described herein) and that can be wholly presented and maintained within a GUI display window (and optionally zoomed into for greater detail, as desired), without the need for scrolling within the interface, or tallying listed events.
- the semantic graph shown in FIG. 7A includes 377 nodes and 379 edges.
- a display of the subgraph within the GUI is triggered.
- an alert is presented to the analyst via the GUI (optionally including an interactive object via which the analyst can elect to view the subgraph and/or cause remedial action to be initiated).
- FIG. 7B shows an example subgraph of the semantic graph of FIG. 7A .
- the subgraph can correspond to a region within the semantic graph that is of particular interest (e.g., in a cyber-security sense), for example as determined based on threat scores of the objects/nodes (e.g., the associated normalized modified threat scores exceeding a predetermined threshold) and/or based on logged event data.
- the subgraph can include a substantially smaller number of objects/nodes and events/edges than that of the semantic graph of FIG. 7A (in this case, FIG. 7B includes 27 nodes and 28 edges), such that the subgraph, when rendered within a GUI, focuses the user/analyst's attention on a critical region of the monitored system.
- FIGS. 7C-7F are diagrams showing an evolution of an excerpt of the semantic graph of FIG. 7A , as explained above with reference to FIG. 3 .
- FIGS. 7G-7I show relationships between the excerpts of FIGS.
- FIGS. 7G-7I refer to the normalized PageRank change (or change in normalized threat score), which reflects the proportion of the current PageRank (or the modified threat score) that is due to a change from a baseline PageRank (or initial threat score).
- the lower right-hand portion of FIG. 7 H shows the GUI interactions made by a user when launching mimikatz.exe (e.g., including double-clicking or otherwise selecting cmd.exe, causing it to run the program).
- FIG. 8 is a bar chart showing the normalized PageRank change score for all nodes.
- FIG. 8 is a bar chart showing the normalized PageRank change score for all nodes.
- FIG. 8 shows the overall density of alerts and the connectivity of the semantic graph resulting from the threat score propagation described herein.
- a particular alert e.g., mimikatz.exe, in this example
- the normalized PageRank change scores within the circled region may be deemed relevant and used to generate the subgraph that will subsequently be displayed to a user via the GUI, and the normalized PageRank change scores not within the circled region are not used to generate the subgraph.
- the systems and methods described herein may find applicability in other domains beyond cyber-security, for example, network traffic analysis.
- the system and methods described may be used to circumvent anonymity techniques, and/or to determine associations between communicating nodes (e.g., evince a “management chain”, identify related communications, etc.) of a nodal graph.
- communicating nodes e.g., evince a “management chain”, identify related communications, etc.
- certain relationships may be identified, the recognition of such relationships being desirable for network management.
- the system and method may be used to provide a network administrator or analyst with insights regarding inventory of computing devices connected to the monitored network, changes in the inventory over time, traffic workload, shaping and congestion, and other network characteristics.
- the system and method may identify a subgraph of the semantic graph associated with a reportable profile for tuning performance of and otherwise managing the monitored network.
- Hardware modules may include, for example, a general-purpose processor, a field programmable gates array (FPGA), and/or an application specific integrated circuit (ASIC).
- Software modules (executed on hardware) can be expressed in a variety of software languages (e.g., computer code), including Unix utilities, C, C++, JavaTM, JavaScript, Ruby, SQL, SAS®, Python, Fortran, the R programming language/software environment, Visual BasicTM, and other object-oriented, procedural, or other programming language and development tools.
- Examples of computer code include, but are not limited to, micro-code or micro-instructions, machine instructions, such as produced by a compiler, code used to produce a web service, and files containing higher-level instructions that are executed by a computer using an interpreter. Additional examples of computer code include, but are not limited to, control signals, encrypted code, and compressed code.
- Each of the devices described herein can include one or more processors as described above.
- Non-transitory computer-readable medium also can be referred to as a non-transitory processor-readable medium or memory
- the computer-readable medium is non-transitory in the sense that it does not include transitory propagating signals per se (e.g., a propagating electromagnetic wave carrying information on a transmission medium such as space or a cable).
- the media and computer code also can be referred to as code
- non-transitory computer-readable media include, but are not limited to: magnetic storage media such as hard disks, solid state storage devices, and magnetic tape; optical storage media such as Compact Disc/Digital Video Discs (CD/DVDs), Compact Disc-Read Only Memories (CD-ROMs), and holographic devices; magneto-optical storage media such as optical disks; carrier wave signal processing modules; and hardware devices that are specially configured to store and execute program code, such as Application-Specific Integrated Circuits (ASICs), Programmable Logic Devices (PLDs), Read-Only Memory (ROM) and Random-Access Memory (RAM) devices.
- ASICs Application-Specific Integrated Circuits
- PLDs Programmable Logic Devices
- ROM Read-Only Memory
- RAM Random-Access Memory
- Other embodiments described herein relate to a computer program product, which can include, for example, the instructions and/or computer code discussed herein.
- Processor-executable instructions can be in many forms, such as program modules, executed by one or more compute devices, and can include routines, programs, objects, components, data structures, and other suitable code that causes a processor to perform particular tasks or implement particular data types, and the functionality can be combined and/or distributed as appropriate for various embodiments.
- a reference to “A and/or B”, when used in conjunction with open-ended language such as “comprising” can refer, in one embodiment, to A only (optionally including elements other than B); in another embodiment, to B only (optionally including elements other than A); in yet another embodiment, to both A and B (optionally including other elements); etc.
Abstract
A method for performing cyber-security analysis includes generating a semantic graph in which each object is represented as a node, and each event associated with an object is represented as an edge. A cyber-threat related alert, with an associated alert type, is received from a source. A first object from the plurality of objects is modified based on the alert. A plurality of threat scores, each associated with an object, are calculated, substantially concurrently, based on the alert type. Subsequently, a plurality of modified threat scores are determined for each object, based on: (1) the threat score for that object, (2) a connectivity of that object to each of the remaining objects within the semantic graph; and (3) the threat score for each remaining object from the plurality of objects. A subgraph of the semantic graph is identified based on normalized versions of the modified threat scores.
Description
The present disclosure relates generally to the detection of cyber-threats, and more specifically, to systems for the aggregation and adaptive display of cyber-threat data and the selective remediation of cyber-threats.
Security operations center (SOC) analysts are tasked with observing vast volumes of alert data from cybersecurity software and hardware distributed throughout a protected network.
Security operations centers can receive cyber-security-related alerts from any of a variety of sources constituting cyber-security devices and/or software (e.g., firewalls, malware protection systems, network security appliances, antivirus software, antispyware software, host intrusion prevention systems (HIPSs), monitoring agents, endpoints, third-party sources, etc.) and can be configured to monitor a network of interest using dedicated hardware and/or software to detect cyber-security threats. In some embodiments, a method employed by the SOC for performing cyber-security threat analysis and mitigation includes generating, via a compute device, a semantic graph in which each object from a plurality of objects is represented as a node, and each event (e.g., observed network traffic characteristic or monitored processing activity among monitored objects) from a plurality of events associated with the plurality of objects is represented as an edge. A signal representing an alert (e.g., report) is received from a source, the alert conveying information regarding an event and/or one or more objects relevant to a cyber-threat, and having an associated alert type. Based on the alert, at least a first object from the plurality of objects is modified (e.g., by incrementing an occurrence value related to the event reported by the alert). A plurality of threat scores, each associated with an object from the plurality of objects, are calculated, e.g., substantially concurrently, based on the alert type.
Subsequently, a plurality of modified threat scores are determined, for each object from the plurality of objects, based on: (1) the threat score for that object, (2) a connectivity of that object to each remaining object within the semantic graph; and (3) the threat score for each remaining object from the plurality of objects. The modified threat scores are normalized, and a subgraph of the semantic graph is identified based on the plurality of normalized threat scores. The subgraph is displayed within a graphical user interface (GUI) without displaying the remaining portion of the semantic graph, is visually highlighted while displaying both the subgraph and the remaining portion of the semantic graph, is presented in a separate window or display/display portion, or is otherwise brought to an analyst's attention, and may include, in some embodiments, a user-selectable feature to authorize remediation of the cyber-threat. In some embodiments, the semantic graphs are continuously updated, for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more newly received alerts.
Each object, represented by a node of the semantic graph, is a reference to a distinguishable programmatic entity (e.g., a network traffic packet, file residing on a computing device or a process running on a computing device), or a computing device itself such as an endpoint operating on network, etc., as monitored by a cyber-security device (or software). An event is a monitored feature, which may be an indicator of compromise, as logged by a cyber-security device. For example, an event may be a characteristic determined by static analysis (e.g., pattern matching) of data in flight (e.g., network traffic) or data at rest (e.g., stored files or other data), which may include malware. An event may also include information determined by dynamic analysis regarding a monitored processing or network activity, which may include indicators of a cyber-attack. Each edge of the semantic graph is related to an interaction between two objects, represented by a link between the respective nodes on the semantic graph. The interaction relationship between objects is based on information provided by received cyber-security alerts describing events monitored by the cyber-security devices (or software). For example, a user-operated endpoint may be monitored by resident cybersecurity software (e.g., an embedded agent), the software monitoring the execution of a process “opening” a file. The cybersecurity agent can alert the SOC, which can, in turn, construct at least a portion of the semantic graph by creating a “node” representing the process responsible for opening the file and a node representing the opened file. Similarly, the SOC links the generated nodes (representing the opened file and the process) by an edge of the semantic graph based on their interaction (i.e. the “open” action). Accordingly, the alert may be a signal reporting one or more events related to one or more objects, though in some cases an alert may additional signal to warn of an actual or suspected cyber-threat, thus prompting further analysis or other action. Although in some embodiments set forth herein, the semantic graph is stored, maintained and/or modified at an SOC, alternatively or in addition, the semantic graph can be stored, maintained and/or modified, in other embodiments, at/by a cybersecurity agent (e.g., a local version of the semantic graph) and/or one or more further remote compute devices (e.g., a global version of the semantic graph, a copy of a local version of the semantic graph, etc.). Where multiple compute devices are used to store, maintain and/or modify a semantic graph, the multiple compute devices may be configured to operate in a peer-to-peer networked manner, for example such that reconstruction of the semantic graph involves at least a subset of the multiple compute devices.
In some embodiments, a method for performing cyber-security analysis includes generating a semantic graph in which each object from a plurality of objects is represented as a node, and each event from a plurality of events associated with the plurality of objects is represented as an edge. The method also includes sending a signal to cause display of the semantic graph via a GUI. Each edge from the plurality of edges can have an associated tally that actively updates in response to additional instances of the event associated with that edge. Event data for a compute device is logged, e.g., substantially in real time, and the semantic graph is updated, e.g., substantially concurrently with the logging of the event data, and based on the event data. The logging of the event data can be performed according to a predefined schedule. The updating of the semantic graph can include modifying an alert attribute of a first object from the plurality of objects when the event data includes an alert applicable to the first object, and modifying a threat score of each object from the plurality of objects based on the event data. The alert attribute optionally includes a timestamp associated with the alert. The updating of the semantic graph can also include decomposing the event data into a set of objects and a set of events, and updating a frequency of occurrence of an edge from the plurality of edges based on the set of events. A subgraph of the semantic graph can be detected/identified based on a plurality of normalized threat scores associated with the plurality of objects, and the subgraph can be displayed within the GUI without displaying the remainder of the semantic graph.
In some embodiments, a non-transitory processor-readable medium stores code representing instructions to cause a processor to generate a semantic graph representing a plurality of nodes and a plurality of edges, with each node from the plurality of nodes representing an object from a plurality of objects, and each edge from the plurality of edges representing an event from a plurality of events. The code also represents instructions to cause the processor to store alert data for a cyber-alert, where the alert data includes an associated alert type, an associated weight, and an associated number of occurrences. The code also represents instructions to cause the processor to calculate associations between each object from the plurality of objects and at least a portion of the alert data, and to calculate a plurality of threat scores for the plurality of objects based on the event data and the alert data. The instructions to cause the processor to calculate associations between each object from the plurality of objects and at least a portion of the alert data can include instructions to cause the processor to calculate a relevance of the cyber-alert to each object from the plurality of objects. The code also represents instructions to cause the processor to propagate the plurality of threat scores to at least a subset of the plurality of objects, based at least in part on the associations, identify a high-risk or anomalous subgraph of the semantic graph based on the plurality of threat scores, and send a signal to cause display of the subgraph within a GUI.
Some known cyber-security systems interfaces organize critical alerts, such as indicators of compromise (IOCs) into a global timeline or graph of associated alerts (e.g., within a “security operations center”). Such representations, however, are typically voluminous (e.g., requiring an analyst to scroll through many pages), and can include benign and/or duplicative information, making it cumbersome/difficult for an expert or analyst to readily discern/detect significant cyber-security threats. Without the ability to readily discern a cyber-security threat, the analyst often cannot timely mitigate or remediate that threat. Systems and methods of the present disclosure address the foregoing shortcomings by generating and dynamically updating a semantic graph and automatically propagating changes to threat scores (e.g., in response to newly-detected alerts) within the semantic graph, providing a more concise and efficient representation of the overall cyber-security condition of a system or network. Moreover, systems and methods described herein facilitate the identification of subgroups of interest (i.e., subgraphs within the semantic graph) such that only the subgroup(s) are displayed to an analyst, or such that an analyst's attention is otherwise directed to a region of interest (e.g., represented by the subgraph within the semantic graph), thereby achieving the practical benefits of reducing processor and/or storage requirements, improving processor efficiency, increasing the data value and/or relevance for a given region of observation (i.e., a network or portion of a network that is being monitored for cyber-security by an analyst), and/or improving the analyst's response time.
As used herein, a “semantic graph” refers to any representation of semantic relationships between networked elements, and can include, for example, one or more abstract semantic graphs (ASGs) such as directed graphs (e.g., directed acyclic graphs (DAGs)), undirected graphs, and/or hypergraphs. As used herein, an “alert” can be associated with or triggered by any of a variety of computing activities, for example, one or more of the following: an unauthorized wireless connection, an application installed on a locked down system, a removable drive added to a locked down system, a granting or denial of administrative rights or escalation of privileges, an unauthorized access of an access-restricted compute device, detection of a new device on a restricted network, multiple different user login(s) made by a single compute device, a failure to enforce an internet restriction, a circumvention of a network restriction, a failure to timely install a critical patch or software update, detection of a new user or new user-profile creation, an unexpected/unusual login of a user, an unusual login time of a user, detection of an internal vulnerability, etc.
In some embodiments, the visual/graphical representation of the semantic graph includes one or more user-selectable features (e.g., buttons, sliders, swipable regions, checkboxes, dialog boxes, dropdown menus, or any other graphical elements with which a user can interact via the GUI), the user selection/actuation of which can authorize remediation of the cyber-threat (i.e., remediation options). Such user-selectable features can be positioned adjacent to a particular node or edge (associated with a detected cyber-threat) within the semantic graph, and/or can be specific to an alert and therefore positioned anywhere within the GUI, as the remediation of the alert can impact multiple nodes and/or edges of the semantic graph. In some such implementations, all impacted nodes and edges of the semantic graph are highlighted or otherwise made graphically prominent in response to the display and/or selection of a remediation option. In some embodiments, the semantic graph is continuously updated, for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more new alerts.
In some embodiments, the terminal 130 performs updates to the semantic graph via propagation and scoring. As used herein, “propagation” refers to taking the entire value of, or a fraction of the value of, a given node's threat score, and using the entire or fractional value of that node's threat score to modify all other nodes in the semantic graph (e.g., substantially concurrently or simultaneously) as the other nodes are encountered during iterative traversals (i.e., paths) of the semantic graph along edges. The paths can be selected, for example, based on the associated time to traverse, attributes of nodes along the paths, and/or attributes of the edges (e.g., frequencies of occurrence of the edges (e.g., more frequently-occurring edges can have a higher probability of being followed), edge directionality, interaction type (e.g., a read event or a write event), etc.). Since edges and/or objects can be added over time in response to additional signals received at terminal 130, a new path determination can be performed for each iteration, and may change from iteration to iteration, depending on how the semantic graph evolves. As used herein, “scoring” refers to the process of taking the threat score information propagated through a given node, and combining (e.g., substantially concurrently or simultaneously) that threat score information with threat score information at each of the other nodes, to derive a final threat score for that node. Scoring can occur subsequent to (and optionally immediately subsequent to) propagation. The propagation and scoring mechanisms can be performed using a class of algorithms that can be referred to as belief propagation algorithms, which are message-passing algorithms for performing inference on graphical models by calculating the marginal distribution of each unobserved node, conditional on any observed nodes. The belief propagation algorithm used can be an exact method (e.g., sum-product message passing) or an approximate method (e.g., variational message passing).
In response to receiving the one or more alerts 214, the threat score calculator 206 can calculate multiple threat scores 216 based on the alert data (e.g., the alert type(s)), each threat score from the multiple threat scores being associated with an object 210 from the multiple objects. Once the multiple threat scores have been calculated, the threat score calculator 206 can then calculate modified threat scores for each object 210 in the semantic graph (e.g., substantially concurrently/simultaneously), such that the multiple threat scores are propagated throughout the semantic graph. Optionally, the threat score calculator 206 also normalizes the modified threat scores prior to subgraph detection. The subgraph detector 208 can then identify one or more subgraphs of the semantic graphs, based on the (optionally normalized) modified threat scores, as shown and further discussed herein with reference to FIGS. 7A-7I . For example, the one or more subgraphs can be selected by the subgraph detector as having a locally higher average threat score than a remainder of the semantic graph. The subgraph(s) can then be displayed (e.g., via a GUI of the cyber-threat analyzer 200, not shown). Alternatively or in addition, reports can be generated based on the subgraphs, optionally including recommended mitigations based on experiential knowledge of the system, a set of pre-defined mitigations, and/or other past mitigations.
At 322, an alert is received (or multiple alerts are received) at the processor. The alert can be associated with and/or triggered by, for example, a cyber-threat or cyber-security risk that has been detected within a networked system operably coupled to the processor. At 323, the alert is parsed. After parsing the alert, and in response to receiving the alert, at 324, the processor either generates a semantic graph based on the parsed alert (e.g., if no semantic graph was generated at 320), or modifies (i.e., adds or changes, e.g., via a semantic graph generator 204 of FIG. 2 ) one or more objects of the semantic graph based on the alert (i.e., thereby producing a modified semantic graph), for example such that that object includes an attribute associated with the alert (i.e., an alert attribute). The alert attribute can include a timestamp associated with the alert. An example excerpt of the semantic graph after modification of the one or more objects is provided in FIG. 3 . The example excerpt of the modified semantic graph shows that the “mimikatz.exe” object/node has been annotated to include the text “2 alerts.” Such a modification to the semantic graph can indicate that two alerts associated with the mimikatz.exe executable software application have been received, and can be accompanied by the storage, in a memory operably coupled to the processor, of a relationship between the “mimikatz.exe” object/node and alert data associated with the alert. Also in response to receiving the alert, the processor calculates, at 326, threat scores, based on the alert, for each of the objects in the semantic graph. The calculation of the threat scores for each of the objects can be performed simultaneously/concurrently, substantially simultaneously/concurrently, or overlapping in time, or can follow a sequencing according to a pre-specified schedule or algorithm. In some embodiments, calculating the threat scores is performed according to the following equation:
where Mx is the threat score for node x, wi is a weight of alert type i, and ni is a number of times the alert type has occurred with respect to the modified first object (denoted as x) and within a current analysis/monitoring period (or “epoch”). The weight for the alert type can be based on a quality of the alert type and/or the source from which the alert was received. An example excerpt of the semantic graph after calculation of the threat scores is provided in FIG. 3 . As shown in the excerpt, each of objects/nodes “cmd.exe,” “mimikatz.exe,” and “password.txt” is annotated with an associated threat score (also referred to herein as a “maliciousness score”—“M”): “M=0.0,” “M=2.0,” and “M=0.0,” respectively. In some embodiments, the threat score is associated with suspicious and/or unusual communication between an endpoint and another endpoint within the network (e.g., following generation of a file by execution of a process on the monitored endpoint(s)).
Once the threat scores are calculated at 326, each threat score associated with a given object/node (i.e., initial/starting threat scores) is “propagated” to each of the other objects/nodes of the semantic graph through the calculation, at 328, of modified threat scores. Each of the modified threat scores (for each of the other objects/nodes of the semantic graph) can be calculated based on the initial/starting threat score of that object/node, an architectural property of the semantic graph, and/or the threat score for each remaining object from the plurality of objects, e.g., using an algorithm including at least one of: PageRank, Hyperlink-Induced Topic Search (HITS), diffusion wavelet analysis, a sum-product message passing algorithm, or a variational message passing method/algorithm. The architectural property of the semantic graph may include one or more of (but is not limited to): a centrality, a connectivity, a confidence, and a distance associated with that object/node, e.g., relative to one or more other objects/nodes of the semantic graph, as applicable. Alternatively, or in addition, the modified threat scores can be based on a maliciousness (i.e., threat score) of one or more other objects/nodes in the semantic graph (e.g., a predetermined number of nearest neighbors). The calculation of the modified threat scores for each of the objects can be performed simultaneously/concurrently or substantially simultaneously/concurrently, or can follow a sequencing according to a pre-specified schedule or algorithm. Determining the modified threat scores can be performed at a predetermined time, for example after at least one of: a specified number of alerts have been received, or a specified interval of time has elapsed. In some embodiments, calculation of the modified threat scores is performed according to the following equation (solved separately for each of the objects):
where BR is a baseline rank (also referred to herein as a “baseline threat score,” i.e., for a previous instance of the semantic graph, e.g., during a previous analysis/monitoring period or “epoch”) for that object and Relevance is a current relevance (also referred to herein as a “current threat score,” e.g., associated with a current analysis/monitoring period or “epoch”) for that object. An example excerpt of the semantic graph after calculation of the modified threat scores is provided in
The modified threat scores are normalized (e.g., to a sum of 1) at 330, and a subgraph of the semantic graph is identified, at 332, based on the plurality of normalized threat scores. The subgraph can be displayed within a graphical user interface (GUI) without displaying the remaining portion of the semantic graph, or the subgraph can otherwise be brought to an analyst's attention (e.g., via the presentation of an alert within the GUI and/or a modification to the relative proportion of graphical representations of portions of the semantic graph within the GUI, etc.). The subgraph can include one or more user-selectable features to authorize and/or initiate/cause remediation of the cyber-threat. Examples of remediation can include, but are not limited to: ceasing/stopping execution of a software application, deleting a file, quarantining a host, changing a firewall rule, blocking a user from accessing one or more computing resources (e.g., by modifying a permission setting or credential associated with the user), installing an update to a software application, etc. In some embodiments, the remediation is executed by the processor itself (e.g., cyber-threat analyzer 200 of FIG. 2 ). In some embodiments, the semantic graph is continuously updated (e.g., as indicated by the dashed arrow of FIG. 3 that loops from 332 to 320), for example in response to detection, over time, of one or more new objects, one or more new events, and/or one or more new alerts.
In some embodiments, a sub-graph is further analyzed by the processor (e.g., cyber-threat analyzer 200 of FIG. 2 ) based on a pattern of communication identified as a “malicious lateral movement,” and a set of relevant mitigations may be associated with the subgraph, such that the subgraph and the associated mitigations are then presented to an analyst for action. The mitigations presented to the analyst may be based, for example, on a set of defined mitigations associated with known subgraphs, a set of past mitigations previously implemented by a user or by the analyst for the same or a similar subgraph or malicious behavior, and/or dynamically generated mitigations.
In some embodiments, weightings are periodically or aperiodically generated for, and associated with, a semantic graph. The weightings can be generated based on a known confidence of maliciousness (e.g., based on historical data associated with a detected malicious behavior). Alternatively or in addition, the weightings can be based on a temporal relationship between the triggering/malicious event and events of known maliciousness. Systems set forth herein can be operated within a protected network and/or via the use of a remote, network-coupled service.
In some embodiments, the alert is a first alert, and the method 500 also includes calculating an updated plurality of threat scores for the plurality of objects based on a second alert, and propagating the updated plurality of threat scores to at least the subset of the plurality of objects of the semantic graph. Calculating the updated plurality of threat scores can include calculating associations between each object from the plurality of objects and data associated with the second alert (optionally including calculating a relevance of the one or more cyber-alerts to each object from the plurality of objects), and to calculate the updated plurality of threat scores based on the associations between each object from the plurality of objects and data associated with the second alert.
In some embodiments, the event data is a first event data, and the method 500 also includes receiving a second event data after receiving the first event data, incrementing a number of occurrences associated with at least one event from the plurality of events to produce an incremented number of occurrences, and sending a signal, in response to incrementing the stored number of occurrences, to cause display of a modified subgraph including the incremented number of occurrences within the GUI.
While various embodiments have been described above, it should be understood that they have been presented by way of example only, and not limitation. Where methods and/or schematics described above indicate certain events and/or flow patterns occurring in certain order, the ordering of certain events and/or flow patterns may be modified. While the embodiments have been particularly shown and described, it will be understood that various changes in form and details may be made. Additionally, certain of the steps may be performed concurrently in a parallel process when possible, as well as performed sequentially as described above. Although various embodiments have been described as having particular features and/or combinations of components, other embodiments are possible having any combination or sub-combination of any features and/or components from any of the embodiments described herein. Furthermore, although various embodiments are described as having a particular entity associated with a particular compute device, in other embodiments different entities can be associated with other and/or different compute devices.
The systems and methods described herein, may find applicability in other domains beyond cyber-security, for example, network traffic analysis. In some embodiments, the system and methods described may be used to circumvent anonymity techniques, and/or to determine associations between communicating nodes (e.g., evince a “management chain”, identify related communications, etc.) of a nodal graph. By surfacing information related to such monitored systems (e.g., nodes), certain relationships may be identified, the recognition of such relationships being desirable for network management. For example, the system and method may be used to provide a network administrator or analyst with insights regarding inventory of computing devices connected to the monitored network, changes in the inventory over time, traffic workload, shaping and congestion, and other network characteristics. By generating a semantic graph associating the monitored entities with monitored relationships, and analyzing the semantic graph, the system and method may identify a subgraph of the semantic graph associated with a reportable profile for tuning performance of and otherwise managing the monitored network.
It is intended that the systems and methods described herein can be performed by software (stored in memory and/or executed on hardware), hardware, or a combination thereof. Hardware modules may include, for example, a general-purpose processor, a field programmable gates array (FPGA), and/or an application specific integrated circuit (ASIC). Software modules (executed on hardware) can be expressed in a variety of software languages (e.g., computer code), including Unix utilities, C, C++, Java™, JavaScript, Ruby, SQL, SAS®, Python, Fortran, the R programming language/software environment, Visual Basic™, and other object-oriented, procedural, or other programming language and development tools. Examples of computer code include, but are not limited to, micro-code or micro-instructions, machine instructions, such as produced by a compiler, code used to produce a web service, and files containing higher-level instructions that are executed by a computer using an interpreter. Additional examples of computer code include, but are not limited to, control signals, encrypted code, and compressed code. Each of the devices described herein can include one or more processors as described above.
Some embodiments described herein relate to devices with a non-transitory computer-readable medium (also can be referred to as a non-transitory processor-readable medium or memory) having instructions or computer code thereon for performing various computer-implemented operations. The computer-readable medium (or processor-readable medium) is non-transitory in the sense that it does not include transitory propagating signals per se (e.g., a propagating electromagnetic wave carrying information on a transmission medium such as space or a cable). The media and computer code (also can be referred to as code) may be those designed and constructed for the specific purpose or purposes. Examples of non-transitory computer-readable media include, but are not limited to: magnetic storage media such as hard disks, solid state storage devices, and magnetic tape; optical storage media such as Compact Disc/Digital Video Discs (CD/DVDs), Compact Disc-Read Only Memories (CD-ROMs), and holographic devices; magneto-optical storage media such as optical disks; carrier wave signal processing modules; and hardware devices that are specially configured to store and execute program code, such as Application-Specific Integrated Circuits (ASICs), Programmable Logic Devices (PLDs), Read-Only Memory (ROM) and Random-Access Memory (RAM) devices. Other embodiments described herein relate to a computer program product, which can include, for example, the instructions and/or computer code discussed herein.
Processor-executable instructions can be in many forms, such as program modules, executed by one or more compute devices, and can include routines, programs, objects, components, data structures, and other suitable code that causes a processor to perform particular tasks or implement particular data types, and the functionality can be combined and/or distributed as appropriate for various embodiments.
The phrase “and/or,” as used herein in the specification and in the claims, should be understood to mean “either or both” of the elements so conjoined, i.e., elements that are conjunctively present in some cases and disjunctively present in other cases. Multiple elements listed with “and/or” should be construed in the same fashion, i.e., “one or more” of the elements so conjoined. Other elements may optionally be present other than the elements specifically identified by the “and/or” clause, whether related or unrelated to those elements specifically identified. Thus, as a non-limiting example, a reference to “A and/or B”, when used in conjunction with open-ended language such as “comprising” can refer, in one embodiment, to A only (optionally including elements other than B); in another embodiment, to B only (optionally including elements other than A); in yet another embodiment, to both A and B (optionally including other elements); etc.
Claims (19)
1. A cyber-security analysis method, comprising:
generating, via a compute device, a semantic graph that represents a plurality of objects and a plurality of events associated with the plurality of objects, each object from the plurality of objects represented as a node in the semantic graph, and each event from the plurality of events represented as an edge in the semantic graph;
receiving, at the compute device and from a source, a signal representing an alert, the alert having an associated alert type and related to a cyber-threat;
modifying a first object from the plurality of objects, based on the alert, to produce a modified first object, the plurality of objects including the modified first object;
calculating, at a first time, a plurality of threat scores, each threat score from the plurality of threat scores (1) based on the alert type, and (2) associated with an object from the plurality of objects;
determining, at a second time after the first time, and via the compute device, a plurality of modified threat scores for each object from the plurality of objects, each modified threat score from the plurality of modified threat scores based on: (1) the threat score for that object, (2) a connectivity of that object to each remaining object within the semantic graph; and (3) the threat score for each remaining object from the plurality of objects;
normalizing the plurality of modified threat scores, to generate a plurality of normalized threat scores;
identifying a subgraph of the semantic graph based on the plurality of normalized threat scores; and
sending a signal to cause display of: (1) the subgraph within a graphical user interface (GUI) in a manner to distinguish the subgraph from a remaining portion of the semantic graph, and (2) a user-selectable feature to authorize remediation of the cyber-threat.
2. The method of claim 1 , wherein the determining the plurality of modified threat scores is performed using an algorithm including at least one of: PageRank, Hyperlink-Induced Topic Search (HITS), diffusion wavelet analysis, or a sum-product message passing algorithm.
3. The method of claim 1 , further comprising modifying each object from the at least a subset of the remaining objects, such that that object includes an attribute associated with the alert.
4. The method of claim 1 , wherein the calculating the plurality of threat scores is performed according to the following equation:
where Mx is the threat score for a node x, wi is a weight of alert type i, and ni is a number of times the alert type has occurred with respect to the modified first object and within a current analysis period.
5. The method of claim 4 , wherein the weight for the alert type is based on at least one of a quality of the alert type or the source.
6. The method of claim 1 , wherein each edge in the semantic graph represents a frequency of occurrence, the method further comprising updating, in response to receiving event data, the frequency of occurrence of each edge in the semantic graph.
7. The method of claim 1 , wherein each modified threat score from the plurality of modified threat scores, for each object from the plurality of objects, is calculated according to the following equation:
where BR is a baseline rank for that object and Relevance is a current relevance for that object.
8. The method of claim 1 , further comprising continuously updating the semantic graph in response to detection, over time, of at least one of: a plurality of new objects, a plurality of new events, or a plurality of new alerts.
9. The method of claim 1 , wherein the determining the plurality of modified threat scores is performed after at least one of: a specified number of alerts have been received, or a specified interval of time has elapsed.
10. A method implemented by a security operations center, comprising:
generating, via a compute device, a semantic graph including a plurality of nodes and a plurality of edges, each node from the plurality of nodes representing an object from a plurality of objects, each edge from the plurality of edges representing an event from a plurality of events;
sending a signal to cause display, via a GUI, of the semantic graph, each edge from the plurality of edges having an associated tally that actively updates in response to additional instances of the event associated with that edge;
logging, at the compute device, event data for the compute device;
updating the semantic graph based on the event data, the updating including:
modifying an alert attribute of a first object from the plurality of objects when the event data includes an alert applicable to the first object,
modifying a threat score of each object from the plurality of objects based on the event data,
decomposing the event data into a set of objects and a set of events, and
updating at least one of (i) a number of occurrences of an edge from the plurality of edges, or (ii) a frequency of occurrence of the edge from the plurality of edges, based on the set of events;
detecting, subsequent to the display of the semantic graph, a subgraph of the semantic graph based on a plurality of normalized threat scores associated with the plurality of objects; and
sending a signal to cause display, via the GUI, of the subgraph, in a manner to distinguish the subgraph from a remaining portion of the semantic graph.
11. The method of claim 10 ,
wherein the signal to cause display, via the GUI, of the subgraph does not cause display of the remaining portion of the semantic graph.
12. The method of claim 10 , wherein the alert attribute includes a timestamp associated with the alert.
13. The method of claim 10 , further comprising continuously updating the semantic graph in response to detection, over time, of at least one of: a plurality of new objects, a plurality of new events, or a plurality of new alerts.
14. The method of claim 10 , wherein the logging of the event data is performed according to a predefined schedule.
15. A non-transitory processor-readable medium storing code representing instructions to cause a processor to:
generate a semantic graph representing a plurality of nodes and a plurality of edges, each node from the plurality of nodes representing an object from a plurality of objects, each edge from the plurality of edges representing an event from a plurality of events;
store alert data for a cyber-alert, the alert data including an alert type, an associated weight, and a number of occurrences;
calculate associations between each object from the plurality of objects and at least a portion of the alert data;
calculate a plurality of threat scores for the plurality of objects based on the event data and the alert data;
propagate the plurality of threat scores to at least a subset of the plurality of objects, based at least in part on the associations;
normalize the plurality of threat scores, to generate a plurality of normalized threat scores;
identify a high-risk subgraph of the semantic graph based on the plurality of normalized threat scores; and
send a signal to cause display of: (1) the subgraph within a graphical user interface (GUI) in a manner to distinguish the subgraph from a remaining portion of the semantic graph, and (2) a user-selectable feature to authorize remediation of the cyber-threat.
16. The non-transitory processor-readable medium of claim 15 , wherein the instructions to cause the processor to calculate associations between each object from the plurality of objects and at least a portion of the alert data include instructions to cause the processor to calculate a relevance of the cyber-alert to each object from the plurality of objects.
17. The non-transitory processor-readable medium of claim 15 , wherein the cyber-alert is a first cyber-alert, and the code further represents instructions to cause the processor to:
calculate an updated plurality of threat scores for the plurality of objects based on a second cyber-alert; and
propagate the updated plurality of threat scores to at least the subset of the plurality of objects.
18. The non-transitory processor-readable medium of claim 17 , wherein the instructions to cause the processor to calculate the updated plurality of threat scores include instructions to cause the processor to:
calculate associations between each object from the plurality of objects and data associated with the second cyber-alert; and
calculate the updated plurality of threat scores based on the associations between each object from the plurality of objects and data associated with the second cyber-alert.
19. The non-transitory processor-readable medium of claim 15 , wherein the event data is a first event data, and the code further represents instructions to cause the processor to:
receive, after receiving the first event data, a second event data;
increment a number of occurrences associated with at least one event from the plurality of events to produce an incremented number of occurrences; and
send a signal, in response to incrementing the stored number of occurrences, to cause display of a modified subgraph including the incremented number of occurrences within the GUI.
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/370,199 US11201890B1 (en) | 2019-03-29 | 2019-03-29 | System and method for adaptive graphical depiction and selective remediation of cybersecurity threats |
US17/549,147 US11729204B1 (en) | 2019-03-29 | 2021-12-13 | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
US18/337,785 US20240007495A1 (en) | 2019-03-29 | 2023-06-20 | System and Method for Cybersecurity Threat Monitoring Using Dynamically-Updated Semantic Graphs |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/370,199 US11201890B1 (en) | 2019-03-29 | 2019-03-29 | System and method for adaptive graphical depiction and selective remediation of cybersecurity threats |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/549,147 Continuation US11729204B1 (en) | 2019-03-29 | 2021-12-13 | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
Publications (1)
Publication Number | Publication Date |
---|---|
US11201890B1 true US11201890B1 (en) | 2021-12-14 |
Family
ID=78828731
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/370,199 Active 2040-06-11 US11201890B1 (en) | 2019-03-29 | 2019-03-29 | System and method for adaptive graphical depiction and selective remediation of cybersecurity threats |
US17/549,147 Active US11729204B1 (en) | 2019-03-29 | 2021-12-13 | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
US18/337,785 Pending US20240007495A1 (en) | 2019-03-29 | 2023-06-20 | System and Method for Cybersecurity Threat Monitoring Using Dynamically-Updated Semantic Graphs |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/549,147 Active US11729204B1 (en) | 2019-03-29 | 2021-12-13 | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
US18/337,785 Pending US20240007495A1 (en) | 2019-03-29 | 2023-06-20 | System and Method for Cybersecurity Threat Monitoring Using Dynamically-Updated Semantic Graphs |
Country Status (1)
Country | Link |
---|---|
US (3) | US11201890B1 (en) |
Cited By (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200382454A1 (en) * | 2015-12-21 | 2020-12-03 | Google Llc | Automatic suggestions and other content for messaging applications |
US20210176260A1 (en) * | 2019-12-09 | 2021-06-10 | International Business Machines Corporation | Characterizing user behavior in a computer system by automated learning of intention embedded in a system-generated event graph |
US20210286879A1 (en) * | 2020-03-13 | 2021-09-16 | International Business Machines Corporation | Displaying Cyber Threat Data in a Narrative |
US20210318675A1 (en) * | 2020-04-14 | 2021-10-14 | Abb Schweiz Ag | Method for alarm handling in a processing system |
US20210334386A1 (en) * | 2020-04-27 | 2021-10-28 | Saudi Arabian Oil Company | Method and system for assessing effectiveness of cybersecurity controls in an ot environment |
US20220141235A1 (en) * | 2020-10-29 | 2022-05-05 | International Business Machines Corporation | Automatic hotspot identification in network graphs |
US11438373B2 (en) * | 2020-01-09 | 2022-09-06 | Cymulate Ltd. | Monitoring for security threats from lateral movements |
CN115080554A (en) * | 2022-07-22 | 2022-09-20 | 安徽省大数据中心 | Warning method and system based on multi-dimensional data collision analysis |
US20220303300A1 (en) * | 2021-03-18 | 2022-09-22 | International Business Machines Corporation | Computationally assessing and remediating security threats |
US11503047B2 (en) | 2020-03-13 | 2022-11-15 | International Business Machines Corporation | Relationship-based conversion of cyber threat data into a narrative-like format |
US20220394546A1 (en) * | 2021-06-07 | 2022-12-08 | At&T Intellectual Property I, L.P. | Apparatuses and methods for identifying impacts on quality of service based on relationships between communication nodes |
US11526688B2 (en) * | 2020-04-16 | 2022-12-13 | International Business Machines Corporation | Discovering ranked domain relevant terms using knowledge |
US11539749B2 (en) * | 2018-06-12 | 2022-12-27 | Netskope, Inc. | Systems and methods for alert prioritization using security events graph |
US20220417120A1 (en) * | 2021-06-24 | 2022-12-29 | Hewlett Packard Enterprise Development Lp | Communicating node events in network configuration |
CN115691026A (en) * | 2022-12-29 | 2023-02-03 | 湖北省林业科学研究院 | Intelligent early warning monitoring management method for forest fire prevention |
US11671436B1 (en) * | 2019-12-23 | 2023-06-06 | Hrl Laboratories, Llc | Computational framework for modeling adversarial activities |
US11695788B1 (en) | 2019-12-06 | 2023-07-04 | Hrl Laboratories, Llc | Filtering strategies for subgraph matching on noisy multiplex networks |
US11729204B1 (en) * | 2019-03-29 | 2023-08-15 | Google Llc | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
US11734423B1 (en) * | 2022-10-27 | 2023-08-22 | Arctic Wolf Networks, Inc. | Apparatus and method for monitoring of data for attack detection and prevention |
US20230315884A1 (en) * | 2022-04-01 | 2023-10-05 | Blackberry Limited | Event data processing |
US20230315603A1 (en) * | 2022-04-01 | 2023-10-05 | Blackberry Limited | Event data processing |
US11790082B2 (en) * | 2021-05-25 | 2023-10-17 | International Business Machines Corporation | Reasoning based workflow management |
US20230370489A1 (en) * | 2020-08-11 | 2023-11-16 | Cisco Technology, Inc. | Secure neighborhoods assessment in enterprise networks |
US11856016B2 (en) | 2018-06-12 | 2023-12-26 | Netskope, Inc. | Systems and methods for controlling declutter of a security events graph |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20220400126A1 (en) * | 2021-06-09 | 2022-12-15 | Arista Networks, Inc. | Threat Representation And Automated Tracking and Analysis |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8813236B1 (en) * | 2013-01-07 | 2014-08-19 | Narus, Inc. | Detecting malicious endpoints using network connectivity and flow information |
US9930059B1 (en) * | 2016-03-31 | 2018-03-27 | Lookingglass Cyber Solutions, Inc. | Methods and apparatus for analyzing asynchronous cyber-threat event data using discrete time intervals |
US20180314834A1 (en) * | 2015-09-28 | 2018-11-01 | Entit Software Llc | Threat score determination |
US20190260782A1 (en) * | 2018-02-20 | 2019-08-22 | Darktrace Limited | Artificial intelligence researcher assistant for cybersecurity analysis |
US20190327260A1 (en) * | 2018-04-24 | 2019-10-24 | ProSOC, Inc. | Threat coverage score and recommendations |
US10560351B1 (en) * | 2017-12-28 | 2020-02-11 | Architecture Technology Corporation | Network monitoring tool for supercomputers |
US20210203686A1 (en) * | 2018-05-23 | 2021-07-01 | Nippon Telegraph And Telephone Corporation | Reliability calculation apparatus, reliability calculation method and program |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11201890B1 (en) * | 2019-03-29 | 2021-12-14 | Mandiant, Inc. | System and method for adaptive graphical depiction and selective remediation of cybersecurity threats |
-
2019
- 2019-03-29 US US16/370,199 patent/US11201890B1/en active Active
-
2021
- 2021-12-13 US US17/549,147 patent/US11729204B1/en active Active
-
2023
- 2023-06-20 US US18/337,785 patent/US20240007495A1/en active Pending
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8813236B1 (en) * | 2013-01-07 | 2014-08-19 | Narus, Inc. | Detecting malicious endpoints using network connectivity and flow information |
US20180314834A1 (en) * | 2015-09-28 | 2018-11-01 | Entit Software Llc | Threat score determination |
US9930059B1 (en) * | 2016-03-31 | 2018-03-27 | Lookingglass Cyber Solutions, Inc. | Methods and apparatus for analyzing asynchronous cyber-threat event data using discrete time intervals |
US10560351B1 (en) * | 2017-12-28 | 2020-02-11 | Architecture Technology Corporation | Network monitoring tool for supercomputers |
US20190260782A1 (en) * | 2018-02-20 | 2019-08-22 | Darktrace Limited | Artificial intelligence researcher assistant for cybersecurity analysis |
US20190327260A1 (en) * | 2018-04-24 | 2019-10-24 | ProSOC, Inc. | Threat coverage score and recommendations |
US20210203686A1 (en) * | 2018-05-23 | 2021-07-01 | Nippon Telegraph And Telephone Corporation | Reliability calculation apparatus, reliability calculation method and program |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200382454A1 (en) * | 2015-12-21 | 2020-12-03 | Google Llc | Automatic suggestions and other content for messaging applications |
US11502975B2 (en) * | 2015-12-21 | 2022-11-15 | Google Llc | Automatic suggestions and other content for messaging applications |
US11539749B2 (en) * | 2018-06-12 | 2022-12-27 | Netskope, Inc. | Systems and methods for alert prioritization using security events graph |
US11856016B2 (en) | 2018-06-12 | 2023-12-26 | Netskope, Inc. | Systems and methods for controlling declutter of a security events graph |
US11729204B1 (en) * | 2019-03-29 | 2023-08-15 | Google Llc | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs |
US11695788B1 (en) | 2019-12-06 | 2023-07-04 | Hrl Laboratories, Llc | Filtering strategies for subgraph matching on noisy multiplex networks |
US20210176260A1 (en) * | 2019-12-09 | 2021-06-10 | International Business Machines Corporation | Characterizing user behavior in a computer system by automated learning of intention embedded in a system-generated event graph |
US11818145B2 (en) * | 2019-12-09 | 2023-11-14 | International Business Machines Corporation | Characterizing user behavior in a computer system by automated learning of intention embedded in a system-generated event graph |
US11671436B1 (en) * | 2019-12-23 | 2023-06-06 | Hrl Laboratories, Llc | Computational framework for modeling adversarial activities |
US11818168B2 (en) | 2020-01-09 | 2023-11-14 | Cymulate Ltd. | Monitoring for lateral movements-related security threats |
US11438373B2 (en) * | 2020-01-09 | 2022-09-06 | Cymulate Ltd. | Monitoring for security threats from lateral movements |
US11503047B2 (en) | 2020-03-13 | 2022-11-15 | International Business Machines Corporation | Relationship-based conversion of cyber threat data into a narrative-like format |
US20210286879A1 (en) * | 2020-03-13 | 2021-09-16 | International Business Machines Corporation | Displaying Cyber Threat Data in a Narrative |
US20210318675A1 (en) * | 2020-04-14 | 2021-10-14 | Abb Schweiz Ag | Method for alarm handling in a processing system |
US11526688B2 (en) * | 2020-04-16 | 2022-12-13 | International Business Machines Corporation | Discovering ranked domain relevant terms using knowledge |
US11734431B2 (en) * | 2020-04-27 | 2023-08-22 | Saudi Arabian Oil Company | Method and system for assessing effectiveness of cybersecurity controls in an OT environment |
US20210334386A1 (en) * | 2020-04-27 | 2021-10-28 | Saudi Arabian Oil Company | Method and system for assessing effectiveness of cybersecurity controls in an ot environment |
US20230370489A1 (en) * | 2020-08-11 | 2023-11-16 | Cisco Technology, Inc. | Secure neighborhoods assessment in enterprise networks |
US11711381B2 (en) * | 2020-10-29 | 2023-07-25 | International Business Machines Corporation | Automatic hotspot identification in network graphs |
US20220141235A1 (en) * | 2020-10-29 | 2022-05-05 | International Business Machines Corporation | Automatic hotspot identification in network graphs |
US20220303300A1 (en) * | 2021-03-18 | 2022-09-22 | International Business Machines Corporation | Computationally assessing and remediating security threats |
US11790082B2 (en) * | 2021-05-25 | 2023-10-17 | International Business Machines Corporation | Reasoning based workflow management |
US20220394546A1 (en) * | 2021-06-07 | 2022-12-08 | At&T Intellectual Property I, L.P. | Apparatuses and methods for identifying impacts on quality of service based on relationships between communication nodes |
US20220417120A1 (en) * | 2021-06-24 | 2022-12-29 | Hewlett Packard Enterprise Development Lp | Communicating node events in network configuration |
US11848838B2 (en) * | 2021-06-24 | 2023-12-19 | Hewlett Packard Enterprise Development Lp | Communicating node events in network configuration |
US20230315884A1 (en) * | 2022-04-01 | 2023-10-05 | Blackberry Limited | Event data processing |
US20230315603A1 (en) * | 2022-04-01 | 2023-10-05 | Blackberry Limited | Event data processing |
CN115080554A (en) * | 2022-07-22 | 2022-09-20 | 安徽省大数据中心 | Warning method and system based on multi-dimensional data collision analysis |
US11734423B1 (en) * | 2022-10-27 | 2023-08-22 | Arctic Wolf Networks, Inc. | Apparatus and method for monitoring of data for attack detection and prevention |
CN115691026A (en) * | 2022-12-29 | 2023-02-03 | 湖北省林业科学研究院 | Intelligent early warning monitoring management method for forest fire prevention |
Also Published As
Publication number | Publication date |
---|---|
US11729204B1 (en) | 2023-08-15 |
US20240007495A1 (en) | 2024-01-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11729204B1 (en) | System and method for cybersecurity threat monitoring using dynamically-updated semantic graphs | |
US11477219B2 (en) | Endpoint agent and system | |
US10749890B1 (en) | Systems and methods for improving the ranking and prioritization of attack-related events | |
US20210273961A1 (en) | Apparatus and method for a cyber-threat defense system | |
US11722515B1 (en) | Implementing hierarchical cybersecurity systems and methods | |
US11308211B2 (en) | Security incident disposition predictions based on cognitive evaluation of security knowledge graphs | |
Inayat et al. | Intrusion response systems: Foundations, design, and challenges | |
JP6863969B2 (en) | Detecting security incidents with unreliable security events | |
EP3205072B1 (en) | Differential dependency tracking for attack forensics | |
Friedberg et al. | Combating advanced persistent threats: From network event correlation to incident detection | |
US20210273973A1 (en) | SOFTWARE AS A SERVICE (SaaS) USER INTERFACE (UI) FOR DISPLAYING USER ACTIVITIES IN AN ARTIFICIAL INTELLIGENCE (AI)-BASED CYBER THREAT DEFENSE SYSTEM | |
US7607169B1 (en) | User interface for network security console | |
Kotenko et al. | The ontology of metrics for security evaluation and decision support in SIEM systems | |
US20150278729A1 (en) | Cognitive scoring of asset risk based on predictive propagation of security-related events | |
US11444974B1 (en) | Systems and methods for cyber-physical threat modeling | |
US20230336581A1 (en) | Intelligent prioritization of assessment and remediation of common vulnerabilities and exposures for network nodes | |
US11503075B1 (en) | Systems and methods for continuous compliance of nodes | |
US20230164158A1 (en) | Interactive artificial intelligence-based response loop to a cyberattack | |
Awan et al. | Identifying cyber risk hotspots: A framework for measuring temporal variance in computer network risk | |
US10027698B2 (en) | Network protection system using linkographs | |
Shabtai et al. | Using the KBTA method for inferring computer and network security alerts from time-stamped, raw system metrics | |
Wang et al. | CVSS-based multi-factor dynamic risk assessment model for network system | |
US11397808B1 (en) | Attack detection based on graph edge context | |
Rai | Behavioral threat detection: Detecting living of land techniques | |
Wang et al. | An end-to-end method for advanced persistent threats reconstruction in large-scale networks based on alert and log correlation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |