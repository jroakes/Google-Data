US11586969B2 - Quantum circuit optimization using windowed quantum arithmetic - Google Patents
Quantum circuit optimization using windowed quantum arithmetic Download PDFInfo
- Publication number
- US11586969B2 US11586969B2 US16/833,250 US202016833250A US11586969B2 US 11586969 B2 US11586969 B2 US 11586969B2 US 202016833250 A US202016833250 A US 202016833250A US 11586969 B2 US11586969 B2 US 11586969B2
- Authority
- US
- United States
- Prior art keywords
- index
- indices
- values
- quantum
- quantum register
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000005457 optimization Methods 0.000 title 1
- 238000000034 method Methods 0.000 claims abstract description 102
- 238000004891 communication Methods 0.000 claims description 6
- 230000000295 complement effect Effects 0.000 claims description 3
- 238000007792 addition Methods 0.000 description 64
- 230000008569 process Effects 0.000 description 47
- 230000006870 function Effects 0.000 description 39
- 238000004590 computer program Methods 0.000 description 21
- 238000012545 processing Methods 0.000 description 20
- 239000002096 quantum dot Substances 0.000 description 15
- 230000015654 memory Effects 0.000 description 11
- 238000010586 diagram Methods 0.000 description 9
- 238000005259 measurement Methods 0.000 description 5
- 239000000284 extract Substances 0.000 description 4
- 230000005284 excitation Effects 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 2
- 230000005281 excited state Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- OAICVXFJPJFONN-UHFFFAOYSA-N Phosphorus Chemical compound [P] OAICVXFJPJFONN-UHFFFAOYSA-N 0.000 description 1
- 241000590419 Polygonia interrogationis Species 0.000 description 1
- 238000004422 calculation algorithm Methods 0.000 description 1
- 238000005094 computer simulation Methods 0.000 description 1
- 125000004122 cyclic group Chemical group 0.000 description 1
- 239000012535 impurity Substances 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 238000005040 ion trap Methods 0.000 description 1
- 150000002500 ions Chemical class 0.000 description 1
- 239000011574 phosphorus Substances 0.000 description 1
- 229910052698 phosphorus Inorganic materials 0.000 description 1
- 238000000053 physical method Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/40—Physical realisations or architectures of quantum processors or components for manipulating qubits, e.g. qubit coupling or qubit control
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F17/00—Digital computing or data processing equipment or methods, specially adapted for specific functions
- G06F17/10—Complex mathematical operations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/4824—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices using signed-digit representation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/50—Adding; Subtracting
- G06F7/505—Adding; Subtracting in bit-parallel fashion, i.e. having a different digit-handling circuit for each denomination
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/38—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation
- G06F7/48—Methods or arrangements for performing computations using exclusively denominational number representation, e.g. using binary, ternary, decimal representation using non-contact-making devices, e.g. tube, solid state device; using unspecified devices
- G06F7/50—Adding; Subtracting
- G06F7/505—Adding; Subtracting in bit-parallel fashion, i.e. having a different digit-handling circuit for each denomination
- G06F7/5057—Adding; Subtracting in bit-parallel fashion, i.e. having a different digit-handling circuit for each denomination using table look-up; using programmable logic arrays
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F7/00—Methods or arrangements for processing data by operating upon the order or content of the data handled
- G06F7/60—Methods or arrangements for performing computations using a digital non-denominational number representation, i.e. number representation without radix; Computing devices using combinations of denominational and non-denominational quantity representations, e.g. using difunction pulse trains, STEELE computers, phase computers
- G06F7/72—Methods or arrangements for performing computations using a digital non-denominational number representation, i.e. number representation without radix; Computing devices using combinations of denominational and non-denominational quantity representations, e.g. using difunction pulse trains, STEELE computers, phase computers using residue arithmetic
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30007—Arrangements for executing specific machine instructions to perform operations on data operands
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/30—Arrangements for executing machine instructions, e.g. instruction decode
- G06F9/30003—Arrangements for executing specific machine instructions
- G06F9/30076—Arrangements for executing specific machine instructions to perform miscellaneous control operations, e.g. NOP
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N10/00—Quantum computing, i.e. information processing based on quantum-mechanical phenomena
- G06N10/60—Quantum algorithms, e.g. based on quantum optimisation, quantum Fourier or Hadamard transforms
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C11/00—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor
- G11C11/21—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor using electric elements
- G11C11/34—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor using electric elements using semiconductor devices
- G11C11/40—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor using electric elements using semiconductor devices using transistors
- G11C11/401—Digital stores characterised by the use of particular electric or magnetic storage elements; Storage elements therefor using electric elements using semiconductor devices using transistors forming cells needing refreshing or charge regeneration, i.e. dynamic cells
- G11C11/4063—Auxiliary circuits, e.g. for addressing, decoding, driving, writing, sensing or timing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04B—TRANSMISSION
- H04B10/00—Transmission systems employing electromagnetic waves other than radio-waves, e.g. infrared, visible or ultraviolet light, or employing corpuscular radiation, e.g. quantum communication
- H04B10/70—Photonic quantum communication
Definitions
- This specification relates to quantum computing.
- Quantum computers have memories made up of bits, where each bit can represent either a zero or a one.
- Quantum computers maintain sequences of quantum bits, called qubits, where each quantum bit can represent a zero, one or any quantum superposition of zeros and ones.
- Quantum computers operate by setting qubits in an initial state and controlling the qubits, e.g., according to a sequence of quantum logic gates.
- This specification describes techniques for accelerating quantum computations using windowed quantum arithmetic.
- one innovative aspect of the subject matter described in this specification can be implemented in a method for performing a product addition operation on a target quantum register of qubits and a source quantum register of qubits, the method comprising: determining multiple entries of a lookup table, comprising, for each index in a first set of indices, wherein the first set of indices comprises index values between zero and a maximum index value that is a function of a predetermined window size, multiplying the index value by a scalar for the product addition operation; for each index in a second set of indices, wherein the second set of indices comprises index values between zero and a maximum index value that is a function of the source quantum register, wherein the index values are stepped by the predetermined window size: determining multiple address values, comprising extracting source register values corresponding to indices between i) the index in the second set of indices, and ii) the index in the second set of indices plus the predetermined window size; and adjusting values of the target quantum
- implementations of these aspects includes corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods.
- a system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the maximum index value that is a function of the predetermined window size is equal to 2 to the power of the predetermined window size.
- the maximum index value that is a function of the source quantum register is equal to the length of the source register.
- the predetermined window size comprises ln n, where n represents a number of logical qubits in the target quantum register.
- adjusting values of the target quantum register based on the determined multiple entries of the lookup table and the determined multiple address values comprises adding the determined multiple entries into the target quantum register.
- the target quantum register comprises a fixed width 2s complement register.
- the first value comprises a classical integer or a superposition of classical integers.
- the second value comprises a classical integer or a superposition of classical integers.
- a method for performing a modular product addition operation using a target quantum register of qubits and a source quantum register of qubits comprising: for each index in a first set of indices, wherein the first set of indices comprises index values between zero and a maximum index value that is a function of the source quantum register, wherein the index values are stepped by a predetermined window size: determining multiple address values, comprising extracting source register values corresponding to indices between i) the index in the first set of indices, and ii) the index in the first set of indices plus the predetermined window size; determining multiple corresponding table entries, comprising, for each index in a second set of indices, wherein the second set of indices comprises index values between zero and a maximum table index that is a function of the predetermined window size: determining a table entry comprising a product of i) a scalar in the product addition operation,
- implementations of these aspects includes corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods.
- a system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the maximum index value that is a function of the source quantum register is equal to the length of the source quantum register.
- the maximum table index that is a function of the predetermined window size is equal to 2 to the power of the predetermined window size.
- values of x, y and k are positive and less than N.
- the first value comprises a classical integer or a superposition of classical integers.
- the second value comprises a classical integer or a superposition of classical integers.
- the predetermined window size comprises ln n, where n represents a number of logical qubits in the target quantum register.
- adjusting values of the target quantum register based on the determined multiple table entries and the determined multiple address values comprises adding the determined multiple table entries into the target quantum register.
- the method further comprises performing a series of modular product addition operations to perform a modular multiplication operation.
- a method for multiplying values of a target quantum register of qubits by an odd integer comprising: determining multiple lookup table entries, comprising, for each index in a first set of indices, wherein the first set of indices comprises index values between zero and a maximum table index that is a function of a predetermined window size: determining a product of the index in the first set of indices and the odd integer; for each index in a second set of indices, wherein the second set of indices comprises index values from a maximum index value that is a function of the target quantum register to zero, wherein the index values are stepped by a predetermined window size: extracting multiple values of the target quantum register between the index in the second set of indices to the index in the second set of indices plus the predetermined window size; and adjusting multiple values of the target quantum register based on the determined multiple lookup table entries and the extracted multiple values of the target quantum register, wherein the
- implementations of these aspects includes corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods.
- a system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the maximum table index that is a function of the predetermined window size is equal to 2 to the power of the predetermined window size.
- the maximum index value that is a function of the target quantum register is equal to the length of the target quantum register.
- the first value comprises a classical integer or a superposition of classical integers.
- the predetermined window size comprises ln n, where n represents a number of logical qubits in the target quantum register.
- adjusting multiple values of the target quantum register based on the determined multiple lookup table entries and the extracted multiple values of the target quantum register comprises adding the determined multiple lookup table entries into the target quantum register.
- a method for method for performing a modular exponentiation operation using a target quantum register of qubits and a source quantum register of qubits comprising: for each index in a first set of indices, determining a first plurality of address values, comprising extracting multiple source register values; for each index in a second set of indices, determining a second plurality of address values, comprising extracting multiple target register values; for each index in a third set of indices and for each index in a fourth set of indices, determining a table entry by multiplying i) the index in the third set of indices, ii) the index in the fourth set of indices, and iii) 2 to the power of the index in the second set of indices, and applying a modulus operation; adjusting a modular addition register using table entries corresponding to the first plurality of address values and the second plurality of address values; for each index in a fifth
- implementations of these aspects includes corresponding computer systems, apparatus, and computer programs recorded on one or more computer storage devices, each configured to perform the actions of the methods.
- a system of one or more classical and/or quantum computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination thereof installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the first set of indices comprises index values between zero and a first maximum index value that is a function of the source quantum register, wherein the index values are stepped by a first predetermined window size.
- the set of indices comprises index values between zero and a second maximum index value that is a function of the target register, wherein the index values are stepped by a second predetermined window size.
- the third set of indices comprises index values between 1 and a third maximum value that is based on the first predetermined window size.
- the fourth set of indices comprises index values between 0 and a fourth maximum value that is a function of the target quantum register and the second predetermined window size.
- the fifth set of indices comprises index values between zero and a fifth maximum index value that is a function of the target register, wherein the index values are stepped by the second predetermined window size.
- the sixth set of indices comprises index values between 1 and a sixth value that is based on the second predetermined window size.
- the seventh set of indices comprises index values between 0 and a seventh maximum value that is a function of the modular addition register and the second predetermined window size.
- determining the first plurality of address values comprises extracting source register values corresponding to indices between i) the index in the first set of indices, and ii) the index in the first set of indices plus the first predetermined window size.
- determining the second plurality of address values comprises extracting target register values corresponding to indices between i) the index in the second set of indices, and ii) the index in the second set of indices plus the second predetermined window size.
- determining the third plurality of address values comprises extracting values of the adjusted modular addition register corresponding to indices between i) the index in the fifth set of indices, and ii) the index in the fifth set of indices plus the second predetermined window size.
- the first maximum index value that is a function of the source quantum register is equal to the length of the source quantum register.
- the second maximum index value that is a function of the target register is equal to the length of the target quantum register.
- the third maximum value that is based on the first predetermined window size comprises k 2i+w 1 where k represents a scalar for the modular exponentiation operation, i represents the index in the first set of indices, and w 1 represents the first predetermined window size.
- the fourth maximum value that is a function of the target quantum register and the second predetermined window size comprises 2 to the power of the second window size.
- the fifth maximum index value that is a function of the target register is equal to the length of the target quantum register.
- the seventh maximum value that is a function of the target quantum register and the second predetermined window size comprises 2 to the power of the second window size.
- the first value comprises a classical integer or a superposition of classical integers.
- the second value comprises a classical integer or a superposition of classical integers.
- the first predetermined window size and the second window size are equal.
- the first predetermined window size and second predetermined window size are equal to ln n/2, where n represents a number of logical qubits in the target quantum register.
- a system implementing the presently described windowing techniques can perform quantum arithmetic tasks, e.g., product additions, multiplications and exponentiations, with lower Toffoli complexity and increased computational speed.
- the presently described windowing techniques can be applied in any quantum computation that involves arithmetic operations. Because of the above described increased computational speed and reduced Toffoli count, quantum computations implementing the presently described techniques can therefore also achieve increased computational speed and a reduction in costs/computational resources.
- FIG. 1 shows an example quantum circuit for performing a table lookup.
- FIG. 2 shows an example quantum computation system.
- FIG. 3 is a flow diagram of an example process for performing a product addition operation on a target quantum register of qubits and a source quantum register of qubits.
- FIG. 4 shows a snippet of executable python 3 code for performing a product addition operation on a target quantum register of qubits and a source quantum register of qubits.
- FIG. 5 is a flow diagram of an example process for multiplying values of a target quantum register of qubits by an odd integer.
- FIG. 6 shows a snippet of executable python 3 code for multiplying values of a target quantum register of qubits by an odd integer.
- FIG. 7 is a flow diagram of an example process for performing a modular product addition operation using a target quantum register of qubits and a source quantum register of qubits.
- FIG. 8 shows a snippet of executable python 3 code for performing a modular product addition operation.
- FIG. 9 is a flow diagram of an example process for performing a modular exponentiation operation using a target quantum register of qubits and a source quantum register of qubits.
- FIG. 10 shows a snippet of executable python 3 code for performing a modular exponentiation operation.
- operation counts can be reduced by merging operations together using lookup tables.
- fast software implementations of cyclic redundancy check parity check codes process multiple bits at a time using precomputed tables. These techniques are known as “windowing.”
- FIG. 1 is a quantum circuit diagram of an example quantum circuit 100 for performing a table lookup with a Toffoli count of L ⁇ 1 (independent of the number of bits in each entry.)
- the perpendicular lines merging from and merging into other lines to form corners e.g., merging lines 104
- the example quantum circuit 100 xors the a-th bit string from a precomputed lookup table T into W output qubits.
- the question marks beside the CNOT targets indicate that the target should be omitted or included depending on a corresponding bit in T.
- FIG. 2 depicts an example quantum computation system 200 .
- the system 200 is an example of a system implemented as quantum and classical computer programs on one or more quantum computing devices and classical computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the system 200 includes a quantum computing device 202 in data communication with one or more classical processors 204 .
- the quantum computing device 202 and classical processors 204 are illustrated as separate entities, however in some implementations the classical processors 204 may be included in the quantum computing device 202 .
- the quantum computing device 202 includes components for performing quantum computation.
- the quantum computing device 202 includes quantum circuitry 206 and control devices 208 .
- the quantum circuitry 206 includes components for performing quantum computations, e.g., components for implementing the various quantum circuits and operations described in this specification.
- the quantum circuitry may include a quantum system that includes one or more multi-level quantum subsystems, e.g., qubits 214 .
- the qubits 214 are physical qubits that may be used to perform algorithmic operations or quantum computations.
- the specific realization of the one or more qubits and their interactions may depend on a variety of factors including the type of quantum computations that the quantum computing device 202 is performing.
- the qubits may include qubits that are realized via atomic, molecular or solid-state quantum systems.
- the qubits may include, but are not limited to, superconducting qubits, e.g., Gmon or Xmon qubits, or semi-conducting qubits.
- Further examples of realizations of multi-level quantum subsystems include fluxmon qubits, silicon quantum dots or phosphorus impurity qubits.
- the quantum circuitry may further include one or more resonators attached to one or more superconducting qubits.
- ion traps, photonic devices or superconducting cavities may be used.
- quantum circuit is used to refer to a sequence of quantum logic operations that can be applied to a qubit register to perform a respective computation.
- Quantum circuits comprising different quantum logic operations, e.g., single qubit gates, multi-qubit gates, etc., may be constructed using the quantum circuitry 206 . Constructed quantum circuits can be operated/implemented using the control devices 208 .
- control devices 208 included in the quantum system depend on the type of qubits included in the quantum computing device.
- the multiple qubits can be frequency tunable. That is, each qubit may have associated operating frequencies that can be adjusted using one or more control devices.
- Example operating frequencies include qubit idling frequencies, qubit interaction frequencies, and qubit readout frequencies. Different frequencies correspond to different operations that the qubit can perform. For example, setting the operating frequency to a corresponding idling frequency may put the qubit into a state where it does not strongly interact with other qubits, and where it may be used to perform single-qubit operations/gates.
- control devices 208 may include devices that control the frequencies of qubits included in the quantum circuitry 206 , an excitation pulse generator and control lines that couple the qubits to the excitation pulse generator. The control devices may then cause the frequency of each qubit to be adjusted towards or away from a quantum gate frequency of an excitation pulse on a corresponding control driveline.
- the control devices 208 may further include measurement devices, e.g., readout resonators. Measurement results obtained via measurement devices may be provided to the classical processors 204 for processing and analyzing. Measurement devices perform physical measurements on properties of the qubits, either directly or indirectly, from which the state(s) of the qubits can be inferred.
- measurement devices e.g., readout resonators. Measurement results obtained via measurement devices may be provided to the classical processors 204 for processing and analyzing. Measurement devices perform physical measurements on properties of the qubits, either directly or indirectly, from which the state(s) of the qubits can be inferred.
- FIG. 3 is a flow diagram of an example process 300 for performing a product addition operation on a target quantum register of qubits and a source quantum register of qubits.
- the process 300 will be described as being performed by a system of one or more classical and quantum computing devices located in one or more locations.
- a quantum computation system e.g., the system 200 of FIG. 2 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the first value and second value are quantum integers.
- a quantum integer refers to a classical integer or a superposition of classical integers stored by a quantum register, e.g., as a sequence of qubits using 2s complement little endian format.
- the system determines multiple entries of a lookup table (step 302 ). For each index in a first set of indices, where the first set of indices includes index values between zero and a maximum index value that is a function of a predetermined window size, the system multiplies the index value by a scalar for the product addition operation.
- the maximum index value that is a function of the predetermined window size can be equal to 2 to the power of the predetermined window size.
- the system can determine the entries of the lookup table using classical computation, e.g., classically performed multiplications.
- the lookup table defined by the determined entries can then be stored in classical memory of the system.
- the system determines multiple address values (step 304 ) and adjusts values of the target quantum register based on the determined multiple entries of the lookup table and the determined multiple address values (step 306 ).
- the second set of indices includes index values between zero and a maximum index value that is a function of the source quantum register and where the index values are stepped by the predetermined window size.
- the maximum index value that is a function of the source quantum register can be equal to the length of the source quantum register.
- the system extracts source quantum register values corresponding to indices between i) the index in the second set of indices, and ii) the index in the second set of indices plus the predetermined window size.
- the system sets the multiple address values equal to respective extracted source quantum register values. Extracting the source quantum register values is a quantum computation performed by quantum computing devices based on quantum unitary operations/quantum gates (excluding measurements).
- the system identifies table entries (determined at step 302 ) that correspond to the address values (determined at step 304 ).
- the system may store the identified table entries in a temporary quantum register.
- the system uses the identified table entries to adjust a subset of entries of the target quantum register.
- the subset of entries correspond to entries including and after the current index from the second set of indices.
- the system adds the identified table entries into the target quantum register.
- the system can perform a quantum addition computation using quantum computing devices, e.g., by applying a quantum addition circuit to the target quantum register and the temporary quantum register.
- the quantum addition circuit may include a sequence of quantum logic gates that implement an addition operation.
- the windowed implementation of product addition described by example process 300 has an asymptotic Toffoli count of
- the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register.
- the table lookup is as expensive as the addition, achieves a Toffoli count of O(n 2 /lg n).
- FIG. 4 shows a snippet 400 of executable python 3 code for performing a product addition operation on a target quantum register of qubits and a source quantum register of qubits.
- quantum operations are specified in the same way as classical operations.
- Section 402 of the snippet 400 defines the product addition operation “plus_equal_product”, where “target” represents the target quantum register, “Quint” represents a quantum integer, “k” represents the constant scalar value for the product addition operation, “int” represents a classical integer, “y” represents the source quantum register, “window” represents the predetermined window size.
- Section 404 of the snippet 400 corresponds to step 302 of example process 300 .
- a respective table entry value i*k is computed.
- Section 406 of the snippet 400 corresponds to step 304 of example process 300 .
- values within a corresponding segment of the target register are adjusted based on values in a corresponding set of the computed table entries, where the size of the set equals the predetermined window size.
- FIG. 5 is a flow diagram of an example process 500 for multiplying values of a target quantum register of qubits by an odd integer.
- the process 500 will be described as being performed by a system of one or more classical and quantum computing devices located in one or more locations.
- a quantum computation system e.g., the system 200 of FIG. 2 , appropriately programmed in accordance with this specification, can perform the process 500 .
- the first value is a quantum integer, as defined above with reference to example process 300 .
- the system determines multiple entries of a lookup table (step 502 ). For each index in a first set of indices, where the first set of indices includes index values between zero and a maximum table index that is a function of a predetermined window size, the system determines a product of the index in the first set of indices and the odd integer.
- the maximum table index that is a function of the predetermined window size can equal to 2 to the power of the predetermined window size.
- the system can determine the entries of the lookup table using classical computation, e.g., classically performed multiplications.
- the lookup table defined by the determined entries can then be stored in classical memory of the system.
- the system For each index in a second set of indices, the system extracts multiple values of the target quantum register (step 504 ) and adjusts multiple values of the target quantum register based on the determined multiple lookup table entries and the extracted multiple values of the target quantum register (step 506 ).
- the second set of indices includes index values from a maximum index value that is a function of the target quantum register to zero, where the index values are stepped by a predetermined window size.
- the maximum index value that is a function of the target quantum register can equal to the length of the target quantum register.
- the system extracts values between the index in the second set of indices to the index in the second set of indices plus the predetermined window size. Extracting the target quantum register values is a quantum computation performed by quantum computing devices.
- the system identifies table entries (determined at step 502 ) that correspond to the address values (determined at step 504 ).
- the system may store the identified table entries in a temporary quantum register.
- the system uses the identified table entries to adjust a subset of entries of the target quantum register.
- the subset of entries correspond to entries including and after the current index from the second set of indices plus the window size.
- the system adds the identified table entries into the target quantum register.
- the system can perform a quantum addition computation using quantum computing devices, e.g., by applying a quantum addition circuit to the target quantum register and the temporary quantum register.
- the quantum addition circuit may include a sequence of quantum logic gates that implement an addition operation.
- the windowed multiplication described by example process 500 has Toffoli count of
- the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register.
- the Toffoli count is O(n 2 /lg n).
- FIG. 6 shows a snippet 600 of executable python 3 code for multiplying values of a target quantum register of qubits by an odd integer.
- Section 602 of the snippet 600 defines the multiplication operation.
- target represents the target quantum register
- Quantint represents a quantum integer
- k represents a constant scalar value for the multiplication operation
- int represents a classical integer
- window represents the predetermined window size.
- Section 604 of the snippet 600 defines an optional routine for normalizing the scalar value k.
- Section 606 of the snippet 600 corresponds to step 502 of example process 500 .
- Section 608 of the snippet 600 corresponds to steps 504 and 506 of example process 500 .
- Section 610 of the snippet 600 defines a routine for fixing up the window, e.g., to complete the multiplication operation for all target register entries previously not operated on during section 608 .
- FIG. 7 is a flow diagram of an example process 700 for performing a modular product addition operation using a target quantum register of qubits and a source quantum register of qubits.
- the process 700 will be described as being performed by a system of one or more classical and quantum computing devices located in one or more locations.
- a quantum computation system e.g., the system 200 of FIG. 2 , appropriately programmed in accordance with this specification, can perform the process 700 .
- values of x, y and k are positive and less than N.
- the first value and the second value can be quantum integers.
- the system determines multiple address values (step 702 ) and determines multiple table entries (step 704 ).
- the first set of indices includes index values between zero and a maximum index value that is a function of the source quantum register, where the index values are stepped by a predetermined window size.
- the maximum index value that is a function of the source quantum register can be equal to the length of the source quantum register.
- the system extracts source quantum register values corresponding to indices between i) the index in the first set of indices, and ii) the index in the first set of indices plus the predetermined window size.
- the system sets the multiple address values as equal to respective extracted source quantum register values. Extracting the source quantum register values is a quantum computation performed by quantum computing devices.
- the system determines, for each index in a second set of indices, a table entry given by a product of i) a scalar in the product addition operation, ii) 2 to the power of the index in the first set of indices, and iii) the index in the second set of indices, then applies a modulus operation corresponding to the modular product addition operation to the determined table entry.
- the second set of indices includes index values between zero and a maximum table index that is a function of the predetermined window size, e.g., 2 to the power of the predetermined window size.
- the system can determine the entries of the table using classical computation, e.g., classically performed multiplications.
- the table defined by the determined entries can then be stored in classical memory of the system.
- the system then adjusts values of the target quantum register based on the determined multiple table entries and the determined multiple address values (step 706 ), e.g., using table entries corresponding to the determined address values.
- the system may store the table entries corresponding to the determined address values in a temporary quantum register.
- the system uses the table entries to adjust entries of the target quantum register.
- the system adds the determined table entries into the target quantum register.
- the system can perform a quantum addition computation using quantum computing devices, e.g., by applying a quantum addition circuit to the target quantum register and the temporary quantum register.
- the quantum addition circuit may include a sequence of quantum logic gates that implement an addition operation.
- the windowed modular product addition described by example process 700 has Toffoli count of
- the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register.
- the Toffoli count is O(n 2 /ln n).
- FIG. 8 shows a snippet 800 of executable python 3 code for performing a modular product addition operation.
- Section 802 of the snippet 800 defines the modular product addition operation “plus_equal_product_mod”, where “target” represents the target quantum register, “Quint” represents a quantum integer, “QuintMod” represents a quantum integer associated with a modulus, “k” represents the constant scalar value for the modular product addition operation, “int” represents a classical integer, “y” represents the source quantum register, and “window” represents the predetermined window size.
- Section 804 of the snippet 800 corresponds to step 702 of example process 700 .
- Section 806 of snippet 800 corresponds to step 704 of example process 700 .
- Section 808 of snippet 800 corresponds to step 706 of example process 700 .
- FIG. 9 is a flow diagram of an example process 900 for performing a modular exponentiation operation using a target quantum register of qubits and a source quantum register of qubits.
- the process 900 will be described as being performed by a system of one or more classical and quantum computing devices located in one or more locations.
- a quantum computation system e.g., the system 200 of FIG. 2 , appropriately programmed in accordance with this specification, can perform the process 900 .
- the first value can be a classical integer or a superposition of classical integers.
- the second value can be a classical integer or a superposition of classical integers.
- the system For each index in a first set of indices, where the first set of indices includes index values between zero and a first maximum index value that is a function of the source quantum register, e.g., equal to the length of the source quantum register, and where the index values are stepped by a first predetermined window size, the system performs steps 902 - 908 .
- the system determines a first number of address values by extracting source quantum register values corresponding to indices between i) the index in the first set of indices, and ii) the index in the first set of indices plus the first predetermined window size (step 902 ). Extracting the source quantum register values is a quantum computation performed by quantum computing devices.
- the system For each index in a second set of indices, where the second set of indices includes index values between zero and a second maximum index value that is a function of the target register, e.g., equal to the length of the target quantum register, and where the index values are stepped by a second predetermined window size, the system performs steps 904 , 906 , 908 .
- the system determines a second number of address values by extracting target register values corresponding to indices between i) the index in the second set of indices, and ii) the index in the second set of indices plus the second predetermined window size (step 904 ). Extracting the target quantum register values is a quantum computation performed by quantum computing devices.
- the system For each index in a third set of indices, where the third set of indices includes index values between 1 and a third maximum value that is based on the first predetermined window size, e.g., k 2i+w 1 where k represents a scalar for the modular exponentiation operation, i represents the index in the first set of indices, and w 1 represents the first predetermined window size, the system performs step 906 .
- the system determines a table entry by multiplying i) the index in the third set of indices, ii) the index in the fourth set of indices, and iii) 2 to the power of the index in the second set of indices, and applying a modulus operation (step 906 ).
- the system can determine entries of the table using classical computation, e.g., classically performed multiplications. The table defined by the determined entries can then be stored in classical memory of the system.
- the system adjusts a modular addition register of qubits using table entries corresponding to the first number of address values and the second number of address values (step 908 ).
- the system can perform a quantum addition computation using quantum computing devices, e.g., by applying a quantum addition circuit to the modular addition register and a temporary quantum register storing table entries corresponding to the first number of address values and the second number of address values.
- the quantum addition circuit may include a sequence of quantum logic gates that implement an addition operation.
- the system For each index in a fifth set of indices, where the fifth set of indices includes index values between zero and a fifth maximum index value that is a function of the target register, e.g., equal to the length of the target quantum register, and where the index values are stepped by the second predetermined window size, the system performs steps 910 - 914 .
- the system determines a third number of address values by extracting values of the adjusted modular addition register corresponding to indices between i) the index in the fifth set of indices, and ii) the index in the fifth set of indices plus the second predetermined window size (step 910 ). Extracting the values is a quantum computation performed by quantum computing devices.
- the system For each index in a sixth set of indices, where the sixth set of indices includes index values between 1 and a sixth value that is based on the second predetermined window size, the system performs step 912 .
- the system determines a table entry by multiplying i) the index in the sixth set of indices, ii) the index in the seventh set of indices, and iii) 2 to the power of the index in the fifth set of indices, and applying a modulus operation (step 912 ).
- the system adjusts (e.g., through subtraction) the target quantum register using table entries corresponding to the first number of address values and the third number of address values (step 914 ).
- the windowed modular exponentiation described by example process 900 has Toffoli count of
- n e represents the number of exponent qubits
- n represents the register size
- w e represents the exponent windowing size (the first predetermined window size)
- w m represents the multiplication windowing (the second predetermined window size).
- the first predetermined window size and the second window size can be equal.
- the first predetermined window size and second predetermined window size can both be equal to ln n/2, where n represents a number of logical qubits in the target quantum register.
- FIG. 10 shows a snippet 1000 of executable python 3 code for performing a modular exponentiation operation.
- Section 1002 of the snippet 1000 defines the modular exponentiation operation “times_equal_exp_mod”, where “target” represents the target quantum register, “Quint” represents a quantum integer, “QuintMod” represents a quantum integer associated with a modulus, “k” represents the constant scalar value for the modular exponentiation operation, “int” represents a classical integer, “e” represents the source quantum register, “e_window” represents the first predetermined window size and “m_window” represents the second predetermined window size.
- Section 1004 of the snippet 1000 corresponds to the first set of indices.
- Section 1006 corresponds to step 902 of example process 900 .
- Section 1008 corresponds to the second set of indices.
- Section 1010 corresponds to step 904 of example process 900 .
- Section 1012 corresponds to the third, fourth sets of indices and step 906 of example process 900 .
- Section 1014 corresponds to step 908 of example process 900 .
- Section 1016 of the snippet 1000 corresponds to the fifth set of indices.
- Section 1018 corresponds to step 910 of example process 900 .
- Section 1020 corresponds to the sixth, seventh set of indices and step 912 of example process 900 .
- Section 1022 corresponds to step 914 of example process 900 .
- Sections 1024 and 1026 are optional routines for a relabeling swap and Xoring a swap result into a correct register.
- Implementations of the digital and/or quantum subject matter and the digital functional operations and quantum operations described in this specification and appendix can be implemented in digital electronic circuitry, suitable quantum circuitry or, more generally, quantum computational systems, in tangibly-embodied digital and/or quantum computer software or firmware, in digital and/or quantum computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- quantum computational systems may include, but is not limited to, quantum computers, quantum information processing systems, quantum cryptography systems, or quantum simulators. Quantum computation systems in general and quantum computers specifically may be realized or based on different quantum computational models and architectures. For example, the quantum computation system may be based on or described by models such as the quantum circuit model, one-way quantum computation, adiabatic quantum computation, holonomic quantum computation, analog quantum computation, digital quantum computation, or topological quantum computation.
- Implementations of the digital and/or quantum subject matter described in this specification can be implemented as one or more digital and/or quantum computer programs, i.e., one or more modules of digital and/or quantum computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the digital and/or quantum computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, one or more qubits, or a combination of one or more of them.
- the program instructions can be encoded on an artificially-generated propagated signal that is capable of encoding digital and/or quantum information, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode digital and/or quantum information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- digital and/or quantum information e.g., a machine-generated electrical, optical, or electromagnetic signal
- quantum information and quantum data refer to information or data that is carried by, held or stored in quantum systems, where the smallest non-trivial system is a qubit, i.e., a system that defines the unit of quantum information.
- qubit encompasses all quantum systems that may be suitably approximated as a two-level system in the corresponding context.
- Such quantum systems may include multi-level systems, e.g., with two or more levels.
- such systems can include atoms, electrons, photons, ions or superconducting qubits.
- the computational basis states are identified with the ground and first excited states, however it is understood that other setups where the computational states are identified with higher level excited states are possible.
- data processing apparatus refers to digital and/or quantum data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing digital and/or quantum data, including by way of example a programmable digital processor, a programmable quantum processor, a digital computer, a quantum computer, multiple digital and quantum processors or computers, and combinations thereof.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array), an ASIC (application-specific integrated circuit), or a quantum simulator, i.e., a quantum data processing apparatus that is designed to simulate or produce information about a specific quantum system.
- a quantum simulator is a special purpose quantum computer that does not have the capability to perform universal quantum computation.
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for digital and/or quantum computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- code that creates an execution environment for digital and/or quantum computer programs e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a digital computer program which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a digital computing environment.
- a quantum computer program which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and translated into a suitable quantum programming language, or can be written in a quantum programming language, e.g., QCL or Quipper.
- a digital and/or quantum computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a digital and/or quantum computer program can be deployed to be executed on one digital or one quantum computer or on multiple digital and/or quantum computers that are located at one site or distributed across multiple sites and interconnected by a digital and/or quantum data communication network.
- a quantum data communication network is understood to be a network that may transmit quantum data using quantum systems, e.g. qubits. Generally, a digital data communication network cannot transmit quantum data, however a quantum data communication network may transmit both quantum data and digital data.
- the processes and logic flows described in this specification can be performed by one or more programmable digital and/or quantum computers, operating with one or more digital and/or quantum processors, as appropriate, executing one or more digital and/or quantum computer programs to perform functions by operating on input digital and quantum data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA or an ASIC, or a quantum simulator, or by a combination of special purpose logic circuitry or quantum simulators and one or more programmed digital and/or quantum computers.
- a system of one or more digital and/or quantum computers to be “configured to” perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions.
- one or more digital and/or quantum computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by digital and/or quantum data processing apparatus, cause the apparatus to perform the operations or actions.
- a quantum computer may receive instructions from a digital computer that, when executed by the quantum computing apparatus, cause the apparatus to perform the operations or actions.
- Digital and/or quantum computers suitable for the execution of a digital and/or quantum computer program can be based on general or special purpose digital and/or quantum processors or both, or any other kind of central digital and/or quantum processing unit.
- a central digital and/or quantum processing unit will receive instructions and digital and/or quantum data from a read-only memory, a random access memory, or quantum systems suitable for transmitting quantum data, e.g. photons, or combinations thereof.
- the essential elements of a digital and/or quantum computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and digital and/or quantum data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry or quantum simulators.
- a digital and/or quantum computer will also include, or be operatively coupled to receive digital and/or quantum data from or transfer digital and/or quantum data to, or both, one or more mass storage devices for storing digital and/or quantum data, e.g., magnetic, magneto-optical disks, optical disks, or quantum systems suitable for storing quantum information.
- mass storage devices for storing digital and/or quantum data, e.g., magnetic, magneto-optical disks, optical disks, or quantum systems suitable for storing quantum information.
- a digital and/or quantum computer need not have such devices.
- Digital and/or quantum computer-readable media suitable for storing digital and/or quantum computer program instructions and digital and/or quantum data include all forms of non-volatile digital and/or quantum memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; CD-ROM and DVD-ROM disks; and quantum systems, e.g., trapped atoms or electrons.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks CD-ROM and DVD-ROM disks
- quantum systems e.g., trapped atoms or electrons.
- quantum memories are devices that can store quantum data for a long time with high fidelity and efficiency, e.g., light-matter interfaces where light is used for transmission and matter for storing and preserving the quantum features of quantum data such as superposition or quantum coherence.
- Control of the various systems described in this specification, or portions of them, can be implemented in a digital and/or quantum computer program product that includes instructions that are stored on one or more non-transitory machine-readable storage media, and that are executable on one or more digital and/or quantum processing devices.
- the systems described in this specification, or portions of them, can each be implemented as an apparatus, method, or system that may include one or more digital and/or quantum processing devices and memory to store executable instructions to perform the operations described in this specification.
Abstract
Description
where w represents the predetermined window size. In some implementations the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register. In these implementations the table lookup is as expensive as the addition, achieves a Toffoli count of O(n2/lg n).
where w represents the predetermined window size. In some implementations the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register. In these implementations the Toffoli count is O(n2/lg n).
where w represents the predetermined window size. In some implementations the predetermined window size can equal ln n, where n represents a number of logical qubits in the target quantum register. In these implementations the Toffoli count is O(n2/ln n).
where ne represents the number of exponent qubits, n represents the register size, we represents the exponent windowing size (the first predetermined window size), and wm represents the multiplication windowing (the second predetermined window size). In some implementations the first predetermined window size and the second window size can be equal. For example, the first predetermined window size and second predetermined window size can both be equal to ln n/2, where n represents a number of logical qubits in the target quantum register. These window sizes produce a Toffoli count of
which saves two log factors over known, alternative algorithms.
Claims (27)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/833,250 US11586969B2 (en) | 2019-03-29 | 2020-03-27 | Quantum circuit optimization using windowed quantum arithmetic |
US18/111,413 US20230281497A1 (en) | 2019-03-29 | 2023-02-17 | Quantum circuit optimization using windowed quantum arithmetic |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201962826142P | 2019-03-29 | 2019-03-29 | |
US16/833,250 US11586969B2 (en) | 2019-03-29 | 2020-03-27 | Quantum circuit optimization using windowed quantum arithmetic |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/111,413 Division US20230281497A1 (en) | 2019-03-29 | 2023-02-17 | Quantum circuit optimization using windowed quantum arithmetic |
Publications (2)
Publication Number | Publication Date |
---|---|
US20200311592A1 US20200311592A1 (en) | 2020-10-01 |
US11586969B2 true US11586969B2 (en) | 2023-02-21 |
Family
ID=70286038
Family Applications (11)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/833,344 Active US11030546B2 (en) | 2019-03-29 | 2020-03-27 | Measurement based uncomputation for quantum circuit optimization |
US16/833,339 Active 2040-12-22 US11475348B2 (en) | 2019-03-29 | 2020-03-27 | Oblivious carry runway registers for performing piecewise additions |
US16/833,301 Active 2041-07-16 US11568298B2 (en) | 2019-03-29 | 2020-03-27 | Surface code computations using auto-CCZ quantum states |
US16/833,250 Active 2040-12-11 US11586969B2 (en) | 2019-03-29 | 2020-03-27 | Quantum circuit optimization using windowed quantum arithmetic |
US17/332,723 Active US11531923B2 (en) | 2019-03-29 | 2021-05-27 | Measurement based uncomputation for quantum circuit optimization |
US17/719,357 Active US11636373B2 (en) | 2019-03-29 | 2022-04-12 | Measurement based uncomputation for quantum circuit optimization |
US17/967,559 Active US11710063B2 (en) | 2019-03-29 | 2022-10-17 | Oblivious carry runway registers for performing piecewise additions |
US18/101,522 Active US11966814B2 (en) | 2019-03-29 | 2023-01-25 | Surface code computations using Auto-CCZ quantum states |
US18/111,413 Pending US20230281497A1 (en) | 2019-03-29 | 2023-02-17 | Quantum circuit optimization using windowed quantum arithmetic |
US18/137,278 Pending US20230267354A1 (en) | 2019-03-29 | 2023-04-20 | Measurement based uncomputation for quantum circuit optimization |
US18/207,108 Pending US20240020560A1 (en) | 2019-03-29 | 2023-06-07 | Oblivious carry runway registers for performing piecewise additions |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/833,344 Active US11030546B2 (en) | 2019-03-29 | 2020-03-27 | Measurement based uncomputation for quantum circuit optimization |
US16/833,339 Active 2040-12-22 US11475348B2 (en) | 2019-03-29 | 2020-03-27 | Oblivious carry runway registers for performing piecewise additions |
US16/833,301 Active 2041-07-16 US11568298B2 (en) | 2019-03-29 | 2020-03-27 | Surface code computations using auto-CCZ quantum states |
Family Applications After (7)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/332,723 Active US11531923B2 (en) | 2019-03-29 | 2021-05-27 | Measurement based uncomputation for quantum circuit optimization |
US17/719,357 Active US11636373B2 (en) | 2019-03-29 | 2022-04-12 | Measurement based uncomputation for quantum circuit optimization |
US17/967,559 Active US11710063B2 (en) | 2019-03-29 | 2022-10-17 | Oblivious carry runway registers for performing piecewise additions |
US18/101,522 Active US11966814B2 (en) | 2019-03-29 | 2023-01-25 | Surface code computations using Auto-CCZ quantum states |
US18/111,413 Pending US20230281497A1 (en) | 2019-03-29 | 2023-02-17 | Quantum circuit optimization using windowed quantum arithmetic |
US18/137,278 Pending US20230267354A1 (en) | 2019-03-29 | 2023-04-20 | Measurement based uncomputation for quantum circuit optimization |
US18/207,108 Pending US20240020560A1 (en) | 2019-03-29 | 2023-06-07 | Oblivious carry runway registers for performing piecewise additions |
Country Status (6)
Country | Link |
---|---|
US (11) | US11030546B2 (en) |
EP (3) | EP3918539A1 (en) |
CN (3) | CN113646785B (en) |
AU (8) | AU2020256115B2 (en) |
CA (4) | CA3135494C (en) |
WO (4) | WO2020205624A1 (en) |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CA3080180A1 (en) * | 2018-04-17 | 2019-10-24 | Google Llc | Methods and apparatus for performing phase operations |
US11086665B2 (en) * | 2018-10-22 | 2021-08-10 | Red Hat, Inc. | Scheduling services for quantum computing |
CN113646785B (en) | 2019-03-29 | 2024-04-12 | 谷歌有限责任公司 | Surface encoding computation using automated CCZ quantum states |
US11093850B1 (en) * | 2020-08-26 | 2021-08-17 | Abu Dhabi University | Quantum random access memory |
US11625639B2 (en) | 2020-09-28 | 2023-04-11 | Beit Inc. | Controllable quantum logic gates with measurement and methods for use therewith |
US11777505B2 (en) | 2020-09-28 | 2023-10-03 | Beit Inc. | Controllable quantum logic gates and methods for use therewith |
US11146339B1 (en) * | 2020-10-07 | 2021-10-12 | Oxford University Innovation Limited | Method of operating a quantum information processing system |
US11741279B2 (en) * | 2020-11-13 | 2023-08-29 | Amazon Technologies, Inc. | Toffoli gate distillation from Toffoli magic states |
US11681845B2 (en) | 2021-01-28 | 2023-06-20 | International Business Machines Corporation | Quantum circuit valuation |
CN115409192A (en) * | 2021-05-26 | 2022-11-29 | 腾讯科技（深圳）有限公司 | Parity check method of quantum bit and superconducting quantum chip |
US11294797B1 (en) * | 2021-06-22 | 2022-04-05 | Classiq Technologies LTD. | Debugger for quantum computers |
CN114429096B (en) * | 2022-04-06 | 2022-06-24 | 北京中科弧光量子软件技术有限公司 | Fault simulation method and system of quantum circuit, storage medium and electronic device |
US20230401470A1 (en) * | 2022-06-14 | 2023-12-14 | Microsoft Technology Licensing, Llc | Combined table lookup at quantum computing device |
US20230401474A1 (en) * | 2022-06-14 | 2023-12-14 | Microsoft Technology Licensing, Llc | DOUBLY CONTROLLED iX CIRCUIT |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130311532A1 (en) | 2012-05-19 | 2013-11-21 | Eric B. Olsen | Residue number arithmetic logic unit |
CN107683460A (en) | 2015-05-05 | 2018-02-09 | 凯恩迪股份有限公司 | The QUANTON that analog quantity increment calculates in conventional processors is represented |
US20180113708A1 (en) | 2016-10-20 | 2018-04-26 | Jesus Corbal | Systems, apparatuses, and methods for chained fused multiply add |
US20180240032A1 (en) | 2017-02-23 | 2018-08-23 | Edico Genome, Corp. | Bioinformatics systems, apparatuses, and methods executed on a quantum processing platform |
US20190042971A1 (en) | 2018-09-27 | 2019-02-07 | Xiang Zou | Apparatus and method for scalable qubit addressing |
Family Cites Families (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3937941A (en) * | 1974-11-27 | 1976-02-10 | Signetics Corporation | Method and apparatus for packed BCD sign arithmetic employing a two's complement binary adder |
US6252958B1 (en) * | 1997-09-22 | 2001-06-26 | Qualcomm Incorporated | Method and apparatus for generating encryption stream ciphers |
US7133173B2 (en) * | 2004-07-26 | 2006-11-07 | Hewlett-Packard Development Company, L.P. | Nonlinear electromagnetic quantum information processing |
KR101925868B1 (en) * | 2012-05-17 | 2018-12-06 | 삼성전자주식회사 | Modular arithmetic unit and secure system having the same |
US8995797B2 (en) * | 2013-07-31 | 2015-03-31 | The United States Of America As Represented By The Secretary Of The Air Force | Periodic probabilistic two-dimensional cluster state generator with arbitrary interconnections |
US9264148B2 (en) * | 2013-09-19 | 2016-02-16 | The United States Of America As Represented By The Secretary Of The Air Force | Two dimensional photonic cluster state generator from sequential photons with multiple entanglement gates |
EP3152710B1 (en) * | 2014-06-06 | 2023-06-28 | Microsoft Technology Licensing, LLC | Quantum algorithms for arithmetic and function synthesis |
WO2016054079A1 (en) * | 2014-09-29 | 2016-04-07 | Zyomed Corp. | Systems and methods for blood glucose and other analyte detection and measurement using collision computing |
EP3113084B1 (en) * | 2015-06-29 | 2020-12-09 | Parity Quantum Computing GmbH | Quantum processing device and method |
WO2017083744A1 (en) * | 2015-11-12 | 2017-05-18 | Google Inc. | Neural random access machine |
WO2017116446A1 (en) * | 2015-12-30 | 2017-07-06 | Google Inc. | Quantum phase estimation of multiple eigenvalues |
EP3402744A4 (en) * | 2016-01-15 | 2019-08-21 | Yale University | Techniques for manipulation of two-qubit quantum states and related systems and methods |
US10776709B2 (en) * | 2016-11-10 | 2020-09-15 | Yale University | Generalized quantum channels |
US10423887B2 (en) * | 2016-11-23 | 2019-09-24 | Microsoft Technology Licensing, Llc | Compilation, memory management, and fault localization with ancillas in an unknown state |
US10404287B2 (en) * | 2017-03-20 | 2019-09-03 | Microsoft Technology Licensing, Llc | Magic state distillation with low space overhead and asymptotic input count |
CA3074557A1 (en) | 2017-09-08 | 2019-03-14 | Google Llc | Quantum circuits with reduced t gate count |
US11157826B2 (en) * | 2018-06-08 | 2021-10-26 | University Of Maryland, College Park | Parallel multi-qubit operations on a universal ion trap quantum computer |
US11694103B2 (en) * | 2018-09-19 | 2023-07-04 | Microsoft Technology Licensing, Llc | Quantum-walk-based algorithm for classical optimization problems |
US10997337B2 (en) * | 2018-10-30 | 2021-05-04 | Microsoft Technology Licensing, Llc | Trading t-gates for qubits in arbitrary state and unitary synthesis |
US11909392B2 (en) * | 2018-11-29 | 2024-02-20 | Google Llc | Magic state factory constructions for producing CCZ and T states |
GB201903884D0 (en) * | 2019-03-21 | 2019-05-08 | Quantum Motion Tech Limited | Architectures for quantum information processing |
CN113646785B (en) | 2019-03-29 | 2024-04-12 | 谷歌有限责任公司 | Surface encoding computation using automated CCZ quantum states |
US11699002B2 (en) * | 2020-05-28 | 2023-07-11 | Microsoft Technology Licensing, Llc | Separable-state simulation of quantum program code |
-
2020
- 2020-03-27 CN CN202080026132.5A patent/CN113646785B/en active Active
- 2020-03-27 US US16/833,344 patent/US11030546B2/en active Active
- 2020-03-27 WO PCT/US2020/025466 patent/WO2020205624A1/en unknown
- 2020-03-27 WO PCT/US2020/025445 patent/WO2020205612A1/en unknown
- 2020-03-27 US US16/833,339 patent/US11475348B2/en active Active
- 2020-03-27 US US16/833,301 patent/US11568298B2/en active Active
- 2020-03-27 WO PCT/US2020/025453 patent/WO2020205618A1/en active Application Filing
- 2020-03-27 AU AU2020256115A patent/AU2020256115B2/en active Active
- 2020-03-27 AU AU2020253282A patent/AU2020253282B2/en active Active
- 2020-03-27 EP EP20721040.2A patent/EP3918539A1/en active Pending
- 2020-03-27 CA CA3135494A patent/CA3135494C/en active Active
- 2020-03-27 EP EP20721933.8A patent/EP3776384A1/en active Pending
- 2020-03-27 AU AU2020253340A patent/AU2020253340B2/en active Active
- 2020-03-27 CN CN202080025632.7A patent/CN113632111A/en active Pending
- 2020-03-27 CA CA3135493A patent/CA3135493A1/en active Pending
- 2020-03-27 WO PCT/US2020/025473 patent/WO2020205628A1/en unknown
- 2020-03-27 EP EP20721929.6A patent/EP3776383A1/en active Pending
- 2020-03-27 CN CN202080024944.6A patent/CN113646778A/en active Pending
- 2020-03-27 CA CA3135491A patent/CA3135491A1/en active Pending
- 2020-03-27 US US16/833,250 patent/US11586969B2/en active Active
- 2020-03-27 CA CA3226735A patent/CA3226735A1/en active Pending
-
2021
- 2021-05-27 US US17/332,723 patent/US11531923B2/en active Active
-
2022
- 2022-04-12 US US17/719,357 patent/US11636373B2/en active Active
- 2022-10-17 US US17/967,559 patent/US11710063B2/en active Active
- 2022-11-24 AU AU2022275474A patent/AU2022275474B2/en active Active
- 2022-11-29 AU AU2022279429A patent/AU2022279429B2/en active Active
-
2023
- 2023-01-25 US US18/101,522 patent/US11966814B2/en active Active
- 2023-02-17 US US18/111,413 patent/US20230281497A1/en active Pending
- 2023-04-20 US US18/137,278 patent/US20230267354A1/en active Pending
- 2023-05-09 AU AU2023202870A patent/AU2023202870B2/en active Active
- 2023-06-07 US US18/207,108 patent/US20240020560A1/en active Pending
- 2023-12-01 AU AU2023274198A patent/AU2023274198A1/en active Pending
-
2024
- 2024-03-20 AU AU2024201831A patent/AU2024201831A1/en active Pending
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130311532A1 (en) | 2012-05-19 | 2013-11-21 | Eric B. Olsen | Residue number arithmetic logic unit |
CN107683460A (en) | 2015-05-05 | 2018-02-09 | 凯恩迪股份有限公司 | The QUANTON that analog quantity increment calculates in conventional processors is represented |
US20180113708A1 (en) | 2016-10-20 | 2018-04-26 | Jesus Corbal | Systems, apparatuses, and methods for chained fused multiply add |
US20180240032A1 (en) | 2017-02-23 | 2018-08-23 | Edico Genome, Corp. | Bioinformatics systems, apparatuses, and methods executed on a quantum processing platform |
US20190042971A1 (en) | 2018-09-27 | 2019-02-07 | Xiang Zou | Apparatus and method for scalable qubit addressing |
Non-Patent Citations (104)
Title |
---|
6. Van Meter, Rodney, Trading Classical for Quantum Computation Using Indirection, Apr. 29, 2004 (Apr. 29, 2004), XPO55716093 (Year: 2004). * |
Alagic et al., "Status Report on the First Round of the NIST Post-Quantum Cryptography Standardization Process," Tech. Rep., National Institute of Standards and Technology, Jan. 2019, 27 pages. |
Apps.nsa.gov [online], "CNSA Suite and Quantum Computing FAQ," retrieved from URL <https://apps.nsa.gov/iaarchive/library/ia-guidance/ia-solutions-for-classified/algorithm-guidance/cnsa-suite-and-quantum-computing-faq.cfm>, Jan. 2016, 11 pages. |
Babbush et al., "Encoding Electronic Spectra in Quantum Circuits with Linear T Complexity," Physical Review X, Oct. 2018, 041015-1-041015-36. |
Barends et al., "Superconducting quantum circuits at the surface code threshold for fault tolerance," Nature, Apr. 2014, 508:500-503. |
Beauregard, "Circuit for Shor's algorithm using 2n+3 qubits," https://arxiv.org/abs/quant-ph/0205095v1, May 2002, 13 pages. |
Berry et al., "Qubitization of Arbitrary Basis Quantum Chemistry by Low Rank Factorization," https://arxiv.org/abs/1902.02134v1, Feb. 2019, 20 pages. |
Bocharov et al., "Efficient Synthesis of Universal Repeat-Until-Success Circuits," https://arxiv.org/abs/1404.5320v1, Apr. 2014, 16 pages. |
Braithwaite, "Experimenting with Post-Quantum Cryptography," retrieved from URL <https://security.googleblog.com/2016/07/experimenting-with-post-quantum.html>, Jul. 2016, 5 pages. |
Bravyi et al., "Universal quantum computation with ideal Clifford gates and noisy ancillas," Physical Review A, Feb. 2005, 71:022316-1-022316-14. |
Buhler et al., "Factoring integers with the No. field sieve," in The Development of the Number Field Sieve, Lecture Notes in Mathematics (LNM), 1993, 1554:50-94. |
Campbell et al., "Applying quantum algorithms to constraint satisfaction problems," https://arxiv.org/abs/1810.05582v1, Oct. 2018, 26 pages. |
Cuccaro et al., "A new quantum ripple-cany addition circuit," https://arxiv.org/abs/quant-ph/0410184, Oct. 2004, 9 pages. |
de Beaudrap et al., "The ZX calculus is a language for surface code lattice surgery," https://arxiv.org/abs/1704.08670v1, Apr. 2017, 19 pages. |
Diffie et al., "New Directions in Cryptography," IEEE Transactions on Information Theory, Nov. 1976, 22(6):644-654. |
Draper et al., "A logarithmic-depth quantum cany-lookahead adder," https://arxiv.org/abs/quant-ph/0406142, Jun. 2004, 21 pages. |
Eastin, "Distilling one-qubit magic states into Toffoli states," Physical Review A, Mar. 2013, 87:032321-1-032321-7. |
Ekera et al., "Quantum Algorithms for Computing Short Discrete Logarithms and Factoring RSA Integers," International Workshop on Post-Quantum Cryptography, Jun. 2017, 347-363. |
Ekera, "Modifying Shor's algorithm to compute short discrete logarithms," retrieved from URL <https://eprint.iacr.org/2016/1128.pdf>, Dec. 2016, 26 pages. |
Ekera, "On post-processing in the quantum algorithm for computing short discrete logarithms," retrieved from URL <https://eprintiacr.org/2017/1122.pdf>, Feb. 2019, 19 pages. |
Ekera, "Quantum algorithms for computing general discrete logarithms and orders with tradeoffs," retrieved from URL <https://eprint.iacr.org/2018/797.pdf>, Mar. 2020, 52 pages. |
Ekera, "Revisiting Shor's quantum algorithm for computing general discrete logarithms," https://arxiv.org/abs/1905.09084, May 2019, 13 pages. |
EP Office Action in European Appln. No. 20721929.6, dated Oct. 5, 2022, 9 pages. |
Fowler et al., "A bridge to lower overhead quantum computation," https://arxiv.org/abs/1209.0510v1, Sep. 2012, 15 pages. |
Fowler et al., "Low overhead quantum computation using lattice surgery," https://arxiv.org/abs/1808.06709v1, Aug. 2018, 15 pages. |
Fowler et al., "Surface code implementation of block code state distillation," Scientific Reports, Jun. 2013, 3(1939):1-6. |
Fowler et al., "Surface codes: Towards practical large-scale quantum computation," Physical Review A, Sep. 2012, 86:032324-1-032324-48. |
Fowler, "Time-optimal quantum computation," https://arxiv.org/abs/1210.4626v1, Oct. 2012, 5 pages. |
Gheorghiu et al., "Quantum cryptanalysis of symmetric, public-key and hash-based cryptographic schemes," https://arxiv.org/abs/1902.02332v1, Feb. 2019, 19 pages. |
Gidney et al., "Efficient magic state factories with a catalyzed |CCZ> to 2|T> transformation," https://arxiv.org/abs/1812.01238v1, Dec. 2018, 24 pages. |
Gidney et al., "Efficient magic state factories with a catalyzed |CCZ> to 2|T> transformation," https://arxiv.org/abs/1812.01238v3, last revised Apr. 2019, 24 pages. |
Gidney et al., "Flexible layout of surface code computations using AutoCCZ states," https://arxiv.org/abs/1905.08916, May 2019, 17 pages. |
Gidney et al., "How to factor 2048 bit RSA integers in 7 hours using 23 million noisy qubits," https://arxiv.org/abs/1905.09749, last revised Dec. 2019, 26 pages. |
Gidney et al., "How to factor 2048 bit RSA integers in 7 hours using 23 million noisy qubits," https://arxiv.org/abs/1905.09749v1, May 2019, 25 pages. |
Gidney, "Approximate encoded permutations and piecewise quantum adders," https://arxiv.org/abs/1905.08488, May 2019, 15 pages. |
Gidney, "Asymptotically Efficient Quantum Karatsuba Multiplication," https://arxiv.org/abs/1904.07356, Apr. 2019, 11 pages. |
Gidney, "Factoring with n+2 clean qubits and n-1 dirty qubits," https://arxiv.org/abs/1706.07884v1, Jun. 2017, 13 pages. |
Gidney, "Halving the cost of quantum addition," Quantum 2, Jun. 2018, 6 pages. |
Gidney, "Windowed quantum arithmetic," https://arxiv.org/abs/1905.07682, May 2019, 11 pages. |
Gillmor, "RFC 7919: Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)," retrieved from URL <https://www.hjp.at/doc/rfc/rfc7919.html>, Aug. 2016, 30 pages. |
Github.com [online], "OpenSSL Software Foundation, Openssl source code: Line 32 of apps/dhparam.c," retrieved from URL <https://github.com/openss1/openss1/blob/07f434441e7ea385f975e8df8caa03e62222ca61/apps/dhparam.c#L32>, Dec. 2018, 6 pages. |
Github.com [online], "Quirk: A drag-and-drop quantum circuit simulator for exploring small quantum circuits," available on or before Jun. 11, 2018, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20180611035822/https://github.com/Strilanc/Quirk>, retrieved on Jun. 30, 2020, URL <https://github.com/Strilanc/Quirk>, 3 pages. |
Gnupg.org [online], "GnuPG frequently asked questions—11.2 Why Does GnuPG Default to 2048 bit RSA-2048?" available on or before Jul. 1, 2016, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20160701194147/https://www.gnupg.org/faq/gnupg-faq.html#default_rsa2048>, retrieved on Jun. 29, 2020, URL <https://www.gnupg.org/faq/gnupg-faq.html#default_rsa2048>, 22 pages. |
Gordon, "Discrete logarithms in GF(p) using the Number Field Sieve," SIAM Journal on Discrete Mathematics, 1993, 6:124-138. |
Gottesman et al., "Demonstrating the viability of universal quantum computation using teleportation and single-qubit operations," Nature, Nov. 1999, 402:390-393. |
Gottesman, "The Heisenberg Representation of Quantum Computers," https://arxiv.org/abs/quant-ph/9807006, Jul. 1998, 20 pages. |
Griffiths et al., "Semiclassical Fourier Transform for Quantum Computation," Physical Review Letters, Apr. 1996, 76(17):3228-3231. |
Haah et al., "Codes and Protocols for Distilling T, controlled-S, and Toffoli Gates," Quantum 2, retrieved from URL <https://arxiv.org/abs/1709.02832v3>, May 2018, 29 pages. |
Haner et al., "Factoring using 2n+2 qubits with Toffoli based modular multiplication," https://arxiv.org/abs/161L07995v1, Nov. 2016, 7 pages. |
Hastings et al., "Reduced Space-Time and Time Costs Using Dislocation Codes and Arbitrary Ancillas," https://arxiv.org/abs/1408.3379v1, Aug. 2014, 16 pages. |
Horsman et al., "Surface code quantum computing by lattice surgery," New Journal of Physics, Dec. 2012, 28 pages. |
International Preliminary Report on Patentability in International Appln. No. PCT/US2020/025445, dated Oct. 14, 2021, 17 pages. |
Jeandel et al., "A Complete Axiomatisation of the ZX-Calculus for Clifford+T Quantum Mechanics," Proceedings of the 33rd Annual ACM/IEEE Symposium on Logic in Computer Science, Jul. 2018, 10 pages. |
Jones, "Low-overhead constructions for the fault-tolerant Toffoli gate," Physical Review A, Feb. 2013, 022328-1-022328-4. |
Karatsuba et al., "Multiplication of many-digital numbers by automatic computers," Doklady Akademii Nauk, Russian Academy of Sciences, Feb. 1962, 145(2):293-294 (with English translation). |
Keylength.com [online], "BlueKrypt—Cryptographic Key Length Recommendation," available on or before Mar. 3, 2019, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20190303042857/https://www.keylength.com/>, retrieved on Jun. 29, 2020, URL <https://www.keylength.com>, 1 page. |
Kim et al., "Flipping bits in memory without accessing them: An experimental study of DRAM disturbance errors," 2014 ACM/IEEE 41st International Symposium on Computer Architecture (ISCA), Jun. 2014, 12 pages. |
Kitaev, "Fault-tolerant quantum computation by anyons," Annals of Physics, Jan. 2003, 303(1):2-30. |
Kivinen et al., "RFC 3526: More Modular Exponentiation (MODP) Diffie-Hellman groups for Internet Key Exchange (IKE)," retrieved from URL <https://www.hjp.at/doc/rfc/rfc3526.html>, May 2003, 11 pages. |
Kleinjung et al., "Factorization of a 768-Bit RSA Modulus," Lecture Notes in Computer Science: Advanced in Ciyptology: CRYPTO 2010, 2010, 6223:333-350. |
Lenstra et al., "Selecting Cryptographic Key Sizes," Journal of Cryptology, 2001, 14:225-293. |
Lenstra et al., "The number field sieve," Proceedings of the 22nd Annual ACM Symposium on the Theory of Computing (STOC), 1990, 564-572. |
Lenstra, "Key Lengths," The Handbook of Information Security, retrieved from URL <http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=F4B43E1DEB9BD699COF03EA08A2AD810?doi=10.1.1.694.8206&rep=rep1&type=pdf>, 2004, 32 pages. |
Li, "A magic state's fidelity can be superior to the operations that created it," New Journal of Physics, Februaiy 2015, 17:1-7. |
Linux.die.net [online], "ssh-keygen(1)—Linux man page," available on or before Mar. 25, 2018, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20180325042106/https://linux.die.net/man/1/ssh-keygen>, retrieved on Jun. 29, 2020, URL <https://linux.die.net/man/1/ssh-keygen>, 3 pages. |
Listserv.nodak.edu [online], "795-bit factoring and discrete logarithms," retrieved from URL <https://listserv.nodak.edu/cgi-bin/wa.exe?A2=NMBRTHRY;fd743373.1912&FT=M&P=T&H=&S=>, Dec. 2, 2019, 2 pages. |
Litinski, "A Game of Surface Codes: Large-Scale Quantum Computing with Lattice Surgery," https://arxiv.org/abs/1808.02892v1, Aug. 2018, 35 pages. |
Litinski, "Magic State Distillation: Not as Costly as You Think," https://arxiv.org/abs/1905.06903v1, May 2019, 20 pages. |
Low et al., "Trading T-gates for dirty qubits in state preparation and unitary synthesis," https://arxiv.org/abs/1812.00954, Dec. 2018, 11 pages. |
Mosca et al., "The Hidden Subgroup Problem and Eigenvalue Estimation on a Quantum Computer," Proceeding from the First NASA International Conference: Quantum Computing and Quantum Communications (QCQC1998), May 1999, 1509:174 188. |
Mosca, "Cybersecurity in an Era with Quantum Computers: Will We Be Ready?" IEEE Security & Privacy, Oct. 2018, 16(5): 38-41 (2018). |
Nist and CCCS, "Implementation Guidance for FIPS 140-2 and the Cryptographic Module Validation Program," retrieved from URL <https://web.archive.org/web/20190313055345/https://csrc.nist.gov/csrc/media/projects/cryptographic-module-validation-program/documents/fips140-2/fips1402ig.pdf, Feb. 5, 2019, 240 pages. |
Nist, "Digital Signature Standard (DSS) (FIPS PUB 186-4)," retrieved from URL <https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf>, Jul. 2013, 130 pages. |
Nist, "Recommendation for Key Management, Part 1: General (SP 800-57 Part 1 Rev. 4)," retrieved from URL <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf>, Jan. 2016, 161 pages. |
Nist, "Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography (SP 800-56A Rev. 3)," retrieved from URL <https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Ar3.pdf>, Apr. 2018, 152 pages. |
Office Action in Australian Appln. No. 2020256115, dated Jun. 27, 2022, 5 pages. |
Office Action in Canadian Appln. No. 3135491, dated Jan. 3, 2023, 6 pages. |
Office Action in Chinese Appln. No. 202080025632.7, dated May 25, 2022, 16 pages. |
O'Gorman et al., "Quantum computation with realistic magic-state factories," Physical Review A, Mar. 2017, 032338-1-032338-19. |
Parent et al., "Improved reversible and quantum circuits for Karatsuba-based integer multiplication," https://arxiv.org/abs/1706.03419, Jun. 2017, 16 pages. |
Parker et al., "Efficient Factorization with a Single Pure Qubit and log N Mixed Qubits," Physical Review Letters, Oct. 2000, 85(14):3049-3052. |
PCT International Search Report and Written Opinion in International Appln. No. PCT/US2020/025445, dated Aug. 12, 2020, 23 pages. |
Pohlig et al., "An Improved Algorithm for Computing Logarithms over GF(p) and Its Cryptographic Significance," IEEE Transactions on Information Theory, Jan. 1978, 24(1): 106-110. |
Pollard, "Factoring with cubic integers," Lecture Notes in Mathematics: The Development of the No. Field Sieve, Oct. 2006, 4-10. |
Pollard, "Monte Carlo Methods for Index Computation (mod p)," Mathematics of Computation, Jul. 1978, 32(143):918-924 (1978). |
Pollard, "The lattice sieve," The Development of the Number Field Sieve, Lecture Notes in Mathematics (LNM), 1993, 1554:43-49. |
Pomerance, "A Tale of Two Sieves," Notices of the AMS, Dec. 1996, 43(12):1473-1485. |
Raussendorf et al., "A fault-tolerant one-way quantum computer," Annals of Physics, Sep. 2006, 321(9):2242-2270. |
Raussendorf et al., "Fault-Tolerant Quantum Computation with High Threshold in Two Dimensions," Physical Review Letters 98, May 2007, 190504-1-190504-4. |
Rivest et al., "A method for obtaining digital signatures and public-key cryptosystems," Communications of the ACM, Feb. 1978, 21(2):120-126. |
Roetteler et al., "Quantum Resource Estimates for Computing Elliptic Curve Discrete Logarithms," Proceedings of the 23rd International Conference on the Theory and Application of Cryptology and Information Security: Advances in Cryptology (ASIACRYPT 2017), Lecture Notes in Computer Science (LNCS), Nov. 2017, 10625:241-270. |
Schirokauer, "Discrete Logarithms and Local Units," Philosophical Transactions of the Royal Society A, Nov. 1993, 345(1676):409-423. |
Schonhage et al., "Schnelle Multiplikation großer Zahlen," Computing 7, Sep. 1971, 281-292 (with English summary). |
Schroeder et al., "DRAM Errors in the Wild: A Large-Scale Field Study," ACM SIGMETRICS Performance Evaluation Review, Jun. 2009, 37, 193-204. |
Shor, "Algorithms for quantum computation: Discrete logarithms and factoring," Proceedings 35th Annual Symposium on Foundations of Computer Science, Nov. 1994, 124-134. |
Smartcardfocus.com [online], "JavaCOS A22 dual interface Java card—150K," available on or before Dec. 18, 2016, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20161218155914/http://www.smartcardfocus.com/shop/ilp/id˜712/javacos-a22-dual-interface-java-card-150k/p/index.shtml>, retrieved on Jun. 29, 2020, URL <https://www.smartcardfocus.com/shop/ilp/id˜712/javacos-a22-dual-interface-java-card-150k/p/index.shtml>, 1 page. |
Van Meter et al., "Fast quantum modular exponentiation," Physical Review A, May 2005, 71:052320-1-052320-12. |
Van Meter, "Trading Classical For Quantum Computation Using Indirection," Apr. 29, 2004, retrieved on Oct. 2, 2020, retrieved from URL <https://web.sfc.keio.ac.jp/˜rdv/quantum/publications/pay-the-exponential-full-inline.pdf>, 6 pages. |
van Oorschot et al., "On Diffie-Hellman Key Agreement with Short Exponents," Proceedings of the International Conference on the Theory and Applications of Cryptographic Techniques, Advanced in Ciyptology (EUROCRYPT 1996), 1996, 1070:332-343. |
Vedral et al., "Quantum networks for elementary arithmetic operations," Physical Review A, Jul. 1996, 147-153. |
Wiebe et al., "Quantum arithmetic and numerical analysis using Repeat-Until-Success circuits," CoRR, Jun. 2014, https://arxiv.org/abs/1406.2040v2, 32 pages. |
Wikipedia.org [online], "Timeline of quantum computing," available on or before Nov. 19, 2018, via Internet Archive: Wayback Machine URL <https://web.archive.org/web/20181119015658/https://en.wikipedia.org/wiki/Timeline_of_quantum_computing>, retrieved on Jun. 30, 2020, URL <https://en.wikipedia.org/wiki/Timeline_of_quantum_computing>, 13 pages. |
Zalka, "Fast versions of Shor's quantum factoring algorithm," https://arxiv.org/abs/quant-ph/9806084, Jun. 1998, 37 pages. |
Zalka, "Shor's algorithm with fewer (pure) qubits," https://arxiv.org/abs/quant-ph/0601097, Jan. 2006, 12 pages. |
Also Published As
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11586969B2 (en) | Quantum circuit optimization using windowed quantum arithmetic | |
EP3682383B1 (en) | Simulation of quantum circuits | |
CN109074518B (en) | Quantum phase estimation of multiple eigenvalues | |
EP3926552A1 (en) | Quantum circuits with reduced t gate count | |
US20200065439A1 (en) | Simulating materials using quantum computation | |
AU2021336875B2 (en) | Verified quantum phase estimation | |
US20210174236A1 (en) | Variational quantum state preparation | |
US20220269973A1 (en) | Measuring quantum state purity | |
EP3841532B1 (en) | Error corrected variational algorithms |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GIDNEY, CRAIG;REEL/FRAME:052514/0047Effective date: 20200407 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |