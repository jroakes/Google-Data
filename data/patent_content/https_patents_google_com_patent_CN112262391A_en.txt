CN112262391A - Secure digital assistant integration in web pages - Google Patents
Secure digital assistant integration in web pages Download PDFInfo
- Publication number
- CN112262391A CN112262391A CN201980002168.7A CN201980002168A CN112262391A CN 112262391 A CN112262391 A CN 112262391A CN 201980002168 A CN201980002168 A CN 201980002168A CN 112262391 A CN112262391 A CN 112262391A
- Authority
- CN
- China
- Prior art keywords
- data
- processing system
- electronic resource
- data processing
- computing device
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/06—Buying, selling or leasing transactions
- G06Q30/0601—Electronic shopping [e-shopping]
- G06Q30/0631—Item recommendations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/30—Authentication, i.e. establishing the identity or authorisation of security principals
- G06F21/44—Program or device authentication
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
- G06F16/3322—Query formulation using system suggestions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9032—Query formulation
- G06F16/90324—Query formulation using system suggestions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/90335—Query processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
- G06F16/9535—Search customisation based on user profiles and personalisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/166—Editing, e.g. inserting or deleting
- G06F40/174—Form filling; Merging
Abstract
Secure digital assistant integration with web pages is provided. The system receives an intent list data structure that maps actions of the digital assistant with linked templates of electronic resources developed by third party developer devices. The system validates the electronic resource based on the intent list data structure. The system receives an identifier of a client computing device from a data exchange component of an iframe of the electronic resource loaded by the client computing device. The system receives a foreground status of the electronic resource from a field status sharing API. The system selects a data value for a parameter based on the foreground status and the intent list data structure. The system provides the data value. An authorization component generates an authorization prompt, receives input, and provides the data value to the on-site intent execution API of the electronic resource to perform an action.
Description
Background
An application may be installed on a computing device. The computing device may execute an application. The application may present the digital content.
Disclosure of Invention
At least one aspect relates to a system for secure digital assistant integration with web pages. The system may include a data processing system having one or more processors and memory. The data processing system may receive an intent list data structure from the third party developer device, the intent list data structure containing a mapping between a plurality of actions of the digital assistant and a plurality of linked templates of electronic resources developed by the third party developer device. The data processing system can validate the electronic resource based on the intent list data structure via a validation policy. The data processing system may receive, from a data exchange component of an iframe of an electronic resource loaded by a client computing device, an identifier of the client computing device executing the electronic resource. The data processing system may query the electronic resource for a field state shared application programming interface. The data processing system may receive a foreground state of the electronic resource from the field state shared application programming interface in response to the query. The data processing system determines parameters based on the foreground status and the intent list data structure. The data processing system selects a data value for the parameter from the data store based on the identifier of the client computing device. The data processing system can provide the data value to an authorization component of an iframe of the electronic resource loaded on the client computing device. The data processing system may provide data values to cause the authorization component to perform one or more functions. The authorization component can generate an authorization prompt. The authorization component may receive input from the client computing device in response to the authorization prompt. The authorization component can transmit the data value to a field-intended execution application programming interface of the electronic resource in response to authorization of the data value. The live intent execution application programming interface may cause the electronic resource to perform one of a plurality of actions with the data value.
The data exchange component can restrict access of the electronic resource in the parent framework to an identifier of the client computing device. A third party developer device developing the electronic resource may be prohibited from accessing the identifier of the client computing device.
The data processing system may authorize the data exchange component to be loaded in the iframe of the electronic resource in response to authentication of the electronic resource via the authentication policy.
The data processing system may validate the electronic resource based on the list of trusted sites.
The data processing system can receive a request from a data exchange component executed by a client computing device. The data processing system may query the field state shared application programming interface of the electronic resource in response to the request.
The data processing system may receive data packets from a voice navigator and response component executed by the client computing device, the data packets carrying input audio signals detected by a sensor of the client computing device. The data processing system may identify a request for a candidate data value from the data packet. The data processing system may provide the data value as a candidate data value in response to the request.
The data processing system may provide the data value to the field intent execution application programming interface to cause the field intent execution application programming interface to enter the data value into an input text box of the electronic resource.
The data processing system may determine, based on the foreground status, a plurality of parameters to be used to perform the action provided by the electronic resource. The data processing system may select a plurality of data values corresponding to the plurality of parameters based on the identifier of the client computing device. The data processing system can provide a plurality of data values to the authorization component to cause the authorization component to provide to the field intent execution application programming interface. The live intent execution application programming interface may be configured to use the plurality of data values to bypass one or more states used by the electronic resource to perform the action.
The data processing system can determine one or more subsequent states of the electronic resource based on the foreground state and the intent list data structure. The data processing system may determine one or more parameters based on the one or more subsequent states. The data processing system may select one or more data values for the one or more parameters before the electronic resource enters one or more subsequent states based on the identifier.
The data processing system can provide the data value for authorization by the authorization component and input to the field intent execution application programming interface prior to the electronic resource requesting the data value.
The data processing system may provide the data value to the client computing device to cause the client computing device to build a deep link with the data value and load the deep link in a Web browser executed by the client computing device. The electronic resource may be or include a web page.
The data processing system may construct a link to the data value based on a link template of the plurality of link templates that maps to the action of the plurality of actions. The data processing system can provide the link to the field intent execution application programming interface via the data exchange component.
At least one aspect relates to a method for secure digital assistant integration with web pages. The method may be performed by a data processing system having at least one processor. The method can comprise the following steps: the data processing system receives an intent list data structure from the third party developer device, the intent list data structure containing a mapping between a plurality of actions of the digital assistant and a plurality of linked templates of electronic resources developed by the third party developer device. The method can comprise the following steps: the data processing system validates the electronic resource based on the intent list data structure via a validation policy. The method can comprise the following steps: the data processing system receives an identifier of a client computing device executing an electronic resource from a data exchange component of an iframe of the electronic resource loaded by the client computing device. The method can comprise the following steps: the data processing system queries the field state sharing application programming interface of the electronic resource. The method can comprise the following steps: the data processing system receives a foreground state of the electronic resource from the field state shared application programming interface in response to the query. The method can comprise the following steps: the data processing system determines parameters based on the foreground status and the intent list data structure. The method can comprise the following steps: the data processing system selects a data value for the parameter from the data store based on the identifier of the client computing device. The method can comprise the following steps: the data processing system provides the data value to an authorization component of an iframe of the electronic resource loaded on the client computing device to cause the authorization component to: generating an authorization prompt; receiving an input from a client computing device in response to the authorization prompt; and responsive to authorization of the data value, sending the data value to a live intent execution application programming interface of the electronic resource to cause the electronic resource to perform one of a plurality of actions with the data value.
At least one aspect relates to a computer program product configured to, when executed on a data processing system, cause the data processing system to perform a method of securely integrating a digital assistant with a web page.
The combination of single unique and/or features according to any aspect of the present disclosure or defined below with respect to any particular embodiment of the present disclosure may be used in any other aspect or embodiment of the present disclosure, either individually or separately, independently or in combination with any other defined feature.
Furthermore, the present disclosure is intended to encompass an apparatus configured to perform any of the features described herein with respect to the method and/or the method of using or producing, using or manufacturing any of the apparatus features described herein.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference symbols and designations in the various drawings indicate like elements. For purposes of brevity, not every component may be labeled in every drawing. In the figure:
FIG. 1 is an illustration of an example system for secure digital assistant integration with a web page;
FIG. 2 is an illustration of an example of operation of a system for secure digital assistant integration with web pages;
FIG. 3 is an illustration of an example method of secure digital assistant integration with a web page;
FIG. 4 is a block diagram illustrating the general architecture of a computer system that may be used to implement the elements of the systems and methods described and illustrated herein (including, for example, the systems depicted in FIGS. 1 and 2 and the method depicted in FIG. 3).
Detailed Description
The following is a more detailed description of various concepts related to methods, apparatus, and systems for secure digital assistant integration with web pages and embodiments thereof. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways.
The present disclosure relates generally to secure digital assistant integration with web pages, electronic documents, or other electronic resources. The client computing device may render or load a web page. The web page may include an input field or provide a prompt to enter. The input may be provided by a user of the web page. The input may include information associated with the user, such as a username, password, account information, electronic transaction information, or preference information. However, the user may not have access to the data to be provided for input to the mobile device. Further, the client computing device may have a limited user interface or input capability to receive input from a user. The web page may operate in a sandbox or restricted computing environment in which the web page is prevented from accessing a portion of memory on the client computing device, or a server containing account information. As more and more web pages are accessed or rendered on client computing devices, and third party developers are increasingly requesting input data values to perform actions or perform services, providing such inputs to web pages or integrating with digital assistants while maintaining a secure communication channel may be challenging because of the limited input interfaces on mobile devices, providing inputs through limited input interfaces resulting in inefficiencies, or inability to easily access input information.
Aspects of the present disclosure relate to securely integrating a digital assistant with an electronic resource, such as an electronic document or web page. The present solution may allow data transfer between an electronic resource and a server and may enable providing input to the electronic resource, thereby providing improved user input. The data transfer may provide third party electronic resources with capabilities such as identification, electronic transaction processing, customization, or contextual information to improve process flow while maintaining security of the overall system.
To securely integrate a digital assistant with a third party electronic resource, the systems and methods of the present technology include one or more application programming interfaces ("APIs") for third party electronic resource developers to integrate with the digital assistant, a JavaScript library to securely host digital assistant functionality on the third party electronic resource, a context suggestion system integrated with the API and the JavaScript library, and a voice navigation and response system integrated with the API and the JavaScript library.
The API interfaces of the present solution may include or be associated with an intent list, a site intent execution API, and a site state sharing API. The intent list may refer to or include a data file provided by a third party Web developer that sets forth a mapping between the digital assistant intent and a uniform resource locator ("URL") template for the electronic resource. An intent may refer to or include a messaging object that describes how a digital assistant or other system performs an action. The intent may refer to, include, or define an action object. The intent may be mapped to a link (e.g., a URL) that implements the action.
The live intent execution API can include JavaScript callbacks implemented by third party developers for electronic resources to process digital assistant intents triggered by the data processing system or client computing device. The present solution may use JavaScript to execute the intent, as executing the intent via a link or URL may be technically challenging or unavailable. For example, if a link is not set forth in the intent list, execution through the link or URL may be difficult or impossible. The link may not be published in the intent list due to an error, bug, or failure in the intent list. Since the third party developer chooses not to publish the link, the link may not be published in the intent list. Links may not be posted in the intent list if they are not global links or globally accessible links. Executing through the link may degrade the user experience or result in a suboptimal user experience because it may cause the Web browser or other application to reload the Web page. Executing via a link may consume more computing resources, such as network bandwidth usage, processor usage, or memory usage, as this may result in requesting a complete web page from a server via the network and then reloading the entire web page. JavaScript execution of an intent or action may improve efficiency over execution through a URL link because pages are not reloaded and allowed to execute without globally accessible or published links.
The field state sharing API may include or provide a JavaScript callback. A callback may refer to or include a function that executes after another function has completed execution. The live state sharing API may be implemented by a third party developer so that a site may publish a foreground state upon request by a data processing system. The data processing system may query or request the foreground status from the field status sharing API. In response to the request, the field state sharing API may provide a foreground state. The foreground state may refer to a current semantic state of an electronic resource, such as content being displayed on a web page or a function or action being performed or available. The state may include one or more entities that represent real world or physical concepts as structured data in the foreground of the electronic resource. An entity may refer to a person, place, or thing. An entity may have a unique identifier. An entity may include attributes, types, and descriptions. An entity may include a relationship with one or more other entities. The entity may provide a structure to the data. The state may include one or more digital assistant intents that are instantaneously available in the current context of the electronic resource.
The JavaScript library of the technical scheme can safely and reliably host the functionality of the digital assistant as an overlay (overlay) rendered on the third-party electronic resource, and can provide interaction and authenticated callback to the data processing system in a manner of being opaque to the third-party electronic resource. The JavaScript library of the present solution can provide secure communication because the third party electronic resource can be prohibited or prevented from accessing data associated with the JavaScript library or communicating with the data processing system before authorization. Secure provision of such data values may reduce processor, memory, or battery consumption of the computing device by reducing the amount of delay incurred by inputting the data value or launching other applications on the computing device to obtain the data value.
The data processing system of the present technology can include a data value predictor component (or context autofill suggestion system) that accepts foreground states as input. The data processing system may receive the foreground state from a JavaScript library, which receives the foreground state from a field state sharing API of the third-party electronic resource. The foreground status may indicate or identify a current intent associated with the electronic resource. The data processing system, using the foreground status information, may search a data store or database linked to the client computing device (or account thereof) rendering the electronic resource. The data processing system may search a database to select or predict a data value for the current intent parameter. If the data processing system identifies a selection of a parameter or an acceptable prediction, the data processing system may provide the value to the JavaScript library. The JavaScript library may present the data value for authorization. The data value may be provided or communicated to the electronic resource if the data value is authorized. The JavaScript library may provide the authorized data values to the third party electronic resource through a link (e.g., a URL deep link) or JavaScript intent execution API.
For example, the electronic resource may include a car rental website. The data processing system may identify a current foreground state indicating the intent of the book _ car _ real (to _ location, from _ location, start _ time, end _ time). The data processing system may search for and identify data related to upcoming flight bookings stored in a database associated with an account corresponding to a client computing device rendering the third party electronic resource. The data processing system may predict the data value of the intent parameter based on data in the database. The data processing system may send the predicted data values for the parameters to the client computing device. The data processing system may perform an action corresponding to an intent on the third-party electronic website in response to the authorization.
The present solution can include a voice navigation and response system (e.g., a voice navigator and response component or a digital assistant component). When the data processing system provides structured intent parsing through the natural language processing component, the data processing system can invoke the voice navigator and response component, and the structured intent parsing can be handled by a third party electronic resource integrated with a digital assistant interface and a JavaScript library. The technology can translate the user intent parsing into URL links or JavaScript digital assistant intent execution calls that can be used to navigate electronic resources. After the JavaScript library has performed an intent on the third-party electronic resource, the JavaScript library may request a foreground state from a JavaScript callback of the electronic resource. The voice navigator and response component or data processing system can match foreground state data with a voice response (text-to-speech) template that has been pre-associated with a matching user intent. The voice navigator and response component can render a text-to-speech response to the user by passing the state data into the template. The present technology may allow a user to navigate through a website in voice and hear a text-to-speech ("TTS") answer after each voice navigation, thereby providing a mechanism to enable user input.
FIG. 1 is an illustration of an example system 100 for secure digital assistant integration with web pages. The system 100 may include a content selection infrastructure. The system 100 may include an application delivery infrastructure. The system 100 may include an online application store or marketplace. System 100 may include a data processing system 102. The data processing system 102 may communicate with one or more of a third party ("3P) developer device 162 (or application developer device) or a client computing device 128 (or client device or computing device) over the network 101. The system 100 may also communicate with other devices, such as third party devices, content provider devices, or digital surface devices.
Network 101 may include computer networks such as the internet, local area networks, wide area networks, metropolitan area networks, or other local area networks, intranets, satellite networks, and other communication networks such as voice or data mobile telephone networks. The network 101 may be used to access information resources, such as web pages, web sites, domain names, or uniform resource locators, which may be presented, output, rendered, or displayed on at least one client computing device 128, such as a laptop computer, desktop computer, tablet computer, digital assistant device, smartphone, wearable device, portable computer, or speaker. For example, a user of the client computing device 128 may access information or data provided by the data processing system 102 or the 3P developer device 162 via the network 101.
Network 101 may include or constitute a subset of information resources available on a display network, e.g., the internet, associated with a content delivery or search engine results system, or eligible to include third party digital components as part of a digital component delivery campaign. The data processing system 102 may use the network 101 to access information resources, such as web pages, websites, domain names, or uniform resource locators that may be rendered, output, rendered, or displayed by the client computing device 128. For example, a user of the client computing device 128 may access information or data provided by the data processing system 102 or the 3P developer device 162 via the network 101.
Network 101 may be any type or form of network and may include any of the following: point-to-point networks, broadcast networks, wide area networks, local area networks, telecommunications networks, data communication networks, computer networks, ATM (asynchronous transfer mode) networks, SONET (synchronous optical network) networks, SDH (synchronous digital hierarchy) networks, wireless networks and wired networks. Network 101 may include a wireless link, such as an infrared channel or satellite band. The topology of network 101 may include a bus, star, or ring network topology. The network 110 may comprise a mobile telephone network using any one or more protocols for communication between mobile devices, including: advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code division multiple access ("CDMA"), global system for mobile communications ("GSM"), general packet radio service ("GPRS"), or universal mobile telecommunications system ("UMTS"). Different types of data may be transmitted through different protocols, or the same type of data may be transmitted through different protocols.
The servers in the machine farm may be stored in a high density rack system along with associated storage systems and may be located in an enterprise data center. Integrating servers in this manner may improve system manageability, data security, physical security of the system, and system performance, for example, by locating the servers and high-performance storage systems on a localized high-performance network. Centralizing all or some of the data processing system 102 components (including servers and storage systems) and coupling them with advanced system management tools may make more efficient use of server resources, thereby saving power and processing requirements and reducing bandwidth usage.
The system 100 may include, access, or interact with at least one 3P developer device 162. The 3P developer device 162 may include at least one logic device, such as a computing device having a processor to communicate with, for example, the client computing device 128 or the data processing system 102 via the network 101. The 3P developer device 162 may include at least one computing resource, server, processor, or memory. For example, the 3P developer device 162 may include a plurality of computing resources or servers located in at least one data center.
The 3P developer device 162 can provide the audio-based digital component for presentation or display by the client computing device 128 as an audio output digital component. The digital components may include a supply of goods or services, such as based on the statement "do you call out a rental car? "of voice. For example, the 3P developer device 162 may include a memory for storing a series of audio digital components that may be provided in response to a voice-based query. The 3P developer device 162 may also provide audio-based digital components (or other digital components) to the data processing system 102 where they are stored in the data store 114. The data processing system 102 can select and provide the audio digital component to the client computing device 128 (or instruct the 3P developer device 162 to provide to the client computing device 126). The audio-based digital components may be exclusively audio or may be combined with text, image or video data.
The 3P developer device 162 may include, interface with, or communicate with the data processing system 102. The 3P developer device 162 may include a client computing device 128 that interfaces with or communicates with. The 3P developer device 162 may include, interface with or communicate with a client computing device 128, and the client computing device 128 may be a mobile computing device. The 3P developer device 162 may include a 3P developer device 162 that interfaces with or communicates with. For example, the 3P developer device 162 may provide the digital components to the client computing device 128 for execution by the client computing device 128. The 3P developer device 162 may provide the digital components to the data processing system 102 for storage by the data processing system 102. The 3P developer device 162 may provide rules or parameters related to the digital components to the data processing system 102.
The client computing device 128 may download electronic resources, electronic documents, or applications developed by the 3P developer device 162. The client computing device 128 may download the application or electronic resource from the data processing system 102 via the network 101. The client computing device 128 may load an electronic document or resource. The client computing device 128 may execute the application. The client computing device 128 may execute, launch, trigger, or access or use the application in response to user input or a triggering event or condition. The application may include a front-end component and a back-end component. The client computing device 128 may execute or provide the front-end components of the application, while the data processing system 102 or 3P developer device 162 provides the back-end components of the application.
The client computing device 128 may include at least one sensor 152, transducer 154, audio driver 156, or pre-processor 158 to interface with or communicate with. The client computing device 128 may include a display device 160, such as a light indicator, light emitting diode ("LED"), organic light emitting diode ("OLED"), or other visual indicator configured to provide a visual or optical output. The sensor 152 may include: such as an ambient light sensor, a proximity sensor, a temperature sensor, an accelerometer, a gyroscope, a motion detector, a GPS sensor, a location sensor, a microphone, or a touch sensor. The transducer 154 may include a speaker or a microphone. The audio driver 156 may provide a software interface to the hardware transducer 154. The audio driver may execute audio files or other instructions provided by the data processing system 102 to control the transducer 154 to generate corresponding acoustic or sound waves. The preprocessor 158 may include a processing unit having hardware configured to detect keywords and perform actions based on the keywords. The preprocessor 158 can filter out one or more items or modify items before passing the items on to the data processing system 102 for further processing. The preprocessor 158 may convert an analog audio signal detected by the microphone into a digital audio signal and transmit one or more data packets carrying the digital audio signal to the data processing system 102 over the network 101. In some cases, the pre-processor 158 may transmit data packets carrying some or all of the input audio signals in response to detecting instructions to perform such transmission. The instructions may include: for example, a keyword or other keyword or recognition is triggered to send a data packet including the input audio signal to the data processing system 102.
The client computing device 128 may be associated with an end user that inputs a voice query as audio input (via the sensor 152) into the client computing device 128 and receives audio output provided in the form of computer-generated speech that may be provided from the data processing system 102 (or 3P developer device 162) to the client computing device 128 for output from the transducer 154 (e.g., speaker). The computer-generated speech may include a recording from a real person or a computer-generated language.
The client computing device 128 (or computing device, or client device or digital device) may or may not include a display. For example, a computing device may include a limited type of user interface, such as a microphone and speaker. In some cases, the primary user interface of the client computing device 128 may be a microphone and speaker, or a voice interface. For example, the main user interface of the client computing device 128 may include a voice-based or audio-based user interface. The client computing device 128 may include a display and have a voice-based or audio-based main user interface. The primary user interface of the client computing device 128 may be conversational. The conversational user interface may refer to a user interface driven or facilitated at least in part by the natural language processor component 106 of the data processing system 102.
The data processing system 102 may include a content delivery system having at least one computing resource or server. The data processing system 102 may include at least one interface 104 to interface with or communicate with. The data processing system 102 may include at least one natural language processor component 106 that interfaces with or communicates with. The data processing system 102 may include at least one direct action application programming interface ("API") 108 that interfaces with or communicates with. The interface 104, natural language processing component 106, and direct action API 108 may provide dialog APIs or digital assistant functionality. The dialog API or digital assistant can communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces to provide data or receive data or perform other functionality.
The data processing system 102 can include, interface with, or communicate with at least one authentication component 110. The data processing system 102 may include at least one data value predictor component 112 that interfaces with or communicates with. The data processing system 102 may include, interface with, or communicate with at least one data repository 114.
The interface 104, the natural language processor component 106, the direct action API 108, the validation component 110, the data value predictor component 112 may each include at least one processing unit or other logic device, such as a programmable logic array engine, or a module configured to communicate with a data store 114 or database. The interface 104, the natural language processor component 106, the direct action API 108, the verification component 110, the data value predictor component 112, and the data store 114 can be separate components, a single component, or part of the data processing system 102. System 100 and its components, such as data processing system 102, may include hardware elements, such as one or more processors, logic devices, or circuits.
The data processing system 102 may obtain anonymous computer network activity information associated with a plurality of client computing devices 128 (or computing devices or digital assistant devices). The user of the client computing device 128 or mobile computing device may affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the client computing device 128 or mobile computing device. For example, the data processing system 102 may prompt the user of the client computing device 128 for consent to obtain one or more types of network activity information. The client computing device 128 may include a mobile computing device, such as a smartphone, tablet computer, smart watch, or wearable device. The identity of the user of the client computing device 128 may remain anonymous, and the client computing device 128 may be associated with a unique identifier (e.g., a unique identifier of the user or a computing device provided by the data processing system 102 or a user of the client computing device 128). The data processing system 102 can associate each observation with a corresponding unique identifier.
The data processing system 102 may interface with the 3P developer device 162. The 3P developer device 162 may include or refer to a device of a content provider. A content provider may establish an electronic content campaign. The electronic content campaign may be stored as content data in data store 114. An electronic content campaign may refer to one or more groups of content that correspond to a common topic. The content campaign may include a hierarchical data structure including content groups, digital component data objects, and content selection criteria. To create a content campaign, a content provider may specify values for campaign-level parameters of the content campaign. The activity level parameters may include: for example, the campaign name, the preferred content network for delivering the digital component object, the value of the resource used for the content campaign, the start and end dates of the content campaign, the duration of the content campaign, the schedule of delivery of the digital component object, the language, the geographic location, the type of computing device on which the digital component object is to be provided. In some cases, an impression (impression) may refer to the time at which a digital component object is obtained from its source (e.g., the data processing system 102 or a content provider), and the impression is countable. In some cases, robot activity may be filtered and eliminated as an impression, as click fraud may occur. Thus, in some cases, an impression may refer to a measure of the Web server's response to a page request from a browser that is filtered from robot activity and error codes and recorded at a point as close as possible to the opportunity to render a digital component object for display on the client computing device 128. In some cases, an impression may refer to a visual or audible impression; for example, the digital component object is made at least partially visible (e.g., 20%, 30%, 40%, 50%, 60%, 70%, or more) on the display device 160 of the client computing device 128, or may be audible through a speaker of the client computing device 128. Clicking or selecting may refer to a user's interaction with a digital component object, such as a voice response to an audible impression, a mouse click, a touch interaction, a gesture, a shake, an audio interaction, or a keyboard click. Conversion may refer to a user taking an intended action with respect to a digital component object; for example, purchasing a product or service, completing a survey, visiting a physical store corresponding to a digital component, or completing an electronic transaction.
The content provider may further establish one or more content groups for the content campaign. The content set includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interests, topics, or longitudinal criteria. Content groups under the same content campaign may share the same campaign-level parameters, but may have customized specifications for particular content group-level parameters, such as keywords, negative keywords (e.g., blocking the delivery of digital components if negative keywords are present on the primary content), offers for keywords, or parameters associated with offers or content campaigns.
To create a new content group, the content provider may provide a value for a content group level parameter for the content group. The content group level parameters include: such as a content group name or content group topic, and bids for different content delivery opportunities (e.g., automated delivery or hosted delivery) or outcomes (e.g., clicks, impressions, or conversions). The content group name or content group topic may be one or more terms that a content provider may use to capture the topic or topic of the digital component object for which a content group is selected for display. For example, an auto dealer may create a different content set for each brand of vehicle that it is proxying, and may further create a different content set for each model of vehicle that it is proxying. Examples of content group topics that may be used by car dealers include: for example, "model a sports car", "model B sports car", "model C truck", "model C hybrid vehicle", or "model D hybrid vehicle". For example, an exemplary content campaign theme can be "hybrid vehicle" and include content sets for "model C hybrid vehicle" and "model D hybrid vehicle".
The content provider may provide one or more keywords and digital component objects to each content group. The keywords may include items related to the product or service associated with or identified by the digital component object. Keywords may include one or more terms or phrases. For example, an automobile dealer may include "sports car," "V6 engine," "four wheel drive," "fuel efficiency," as keywords for a content group or content campaign. In some cases, negative keywords may be specified by the content provider to avoid, prevent, block, or otherwise disable content delivery of certain items or keywords. The content provider may specify a match type, such as an exact match, a phrase match, or a broad match, for selecting the digital component object.
The content provider may provide one or more keywords for use by the data processing system 102 in selecting digital component objects provided by the content provider. The content provider can identify one or more keywords to bid on and further provide bid amounts for the various keywords. The content provider may provide additional content selection criteria for use by the data processing system 102 in selecting digital component objects. Multiple content providers can bid on the same or different keywords and the data processing system 102 can run a content selection process or an advertising auction in response to receiving an indication of a keyword of an electronic message.
The content provider may provide one or more digital component objects for selection by the data processing system 102. The data processing system 102 can select digital component objects that match the resource allocation, content schedule, maximum bids, keywords, and other selection criteria specified for the content group when the content placement opportunity becomes available. Different types of digital component objects may be included in the content set, such as a voice digital component, an audio digital component, a text digital component, an image digital component, a video digital component, a multimedia digital component, or a digital component link. The digital component object (or digital component) may include: such as content items, online documents, audio, images, video, multimedia content, or sponsored content. Upon selecting the digital component, the data processing system 102 can transmit the digital component object for rendering on the computing device 128 or the display device 160 of the client computing device 128. Rendering may include displaying the digital component on a display device or playing the digital component via a speaker of the client computing device 128. The data processing system 102 may provide instructions to the computing device 128 to render the digital component object. The data processing system 102 may instruct the client computing device 128 or the audio driver 156 of the client computing device 128 to generate an audio signal or sound wave.
The data store 114 may store an intent list 118. The intent list 118 may be provided by the 3P developer device 162. The intent list 118 may be configured for an electronic resource. The intent list 118 may be specific to an electronic resource, such as a website, web page, or other electronic document. The intent list 118 may include a data file or data structure. The intent list 118 may include an action 120 and a link template 122. The intent list 118 may map the action 120 to a link template 122. The intent list 118 may link, bind, associate, or otherwise relate the action 120 to a link template 122. The intent data structure 118 may be a format such as a JavaScript object format having JavaScript object attributes such as name/value pairs.
The action 120 may refer to or include an intent. Act 120 may refer to or include a function to be performed on or via an electronic resource. The actions 120 may be messaging objects that describe how the system performs a task or function. The actions 120 may be used to facilitate the system or 3P developer device 162 in performing the action or requesting that the action be performed. The action 120 may be defined in an action package that includes the name or intent of the action 120 and an indication of the user query that matches the intent. The user query may correspond to the link template 122.
The link templates 122 may include templates with placeholders for data values of parameters. The data processing system 102 may use the link template 122 to construct the link. The link may refer to a URL or other reference or pointer to an electronic resource. The link template 122 may be referred to as a urlTemplate. An example link template 122 may be: https:// m _ taxi _ com/? action { & pickup [ latitude ], pickup [ long itude ], pickup [ nickname ], pickup [ format _ address ], dropoff [ position ], dropoff [ long itude ], dropoff [ short of, and [ format _ address ] }. In this example, the link template includes placeholders for parameter values indicated using brackets "[ ]". The link may include one or more parameters. The link may include a domain of the electronic resource, an action to be performed, and parameters for performing the action. Thus, the intent list 118 may map the action to a linked template 122 that may be used to complete the action.
The data processing system 102 may include an interface 104 (or interface component) designed, configured, constructed, or operated to receive and transmit information using, for example, data packets. The interface 104 may receive and transmit information using one or more protocols, such as a network protocol. The interface 104 may include a hardware interface, a software interface, a wired interface, or a wireless interface. The interface 104 may facilitate converting or formatting data from one format to another. For example, the interface 104 may include an application programming interface that includes definitions for communicating between various components, such as software components. The interface 104 may communicate with one or more of the client computing device 128 or the 3P developer device 162 via the network 101.
The data processing system 102 may interact with applications, scripts, or programs installed on the client computing device 128, such as an application (app) for communicating input audio signals to the interface 104 of the data processing system 102 and driving components of the local client computing device to render output audio signals. The data processing system 102 may receive data packets or other signals that include or identify audio input signals. The interface 104 may interface or communicate with one or more components of the client computing device 128. The interface 104 can communicate with, for example, the Web browser 130, the JavaScript library 148, the presence state sharing API, or the data exchange component 140 of the client computing device 128, or the authentication component 142 of the client computing device 128.
The data processing system 102 can include a natural language processor ("NLP") component 106. For example, the data processing system 102 can execute or run the NLP component 106 to receive or acquire an audio signal and parse the audio signal. For example, the NLP component 106 can provide for interaction between a person and a computer. The NLP component 106 may be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input. The NLP component 106 can include or be configured with machine learning based techniques, such as statistical machine learning. The NLP component 106 can parse the input audio signal using a decision tree, statistical model, or probabilistic model. For example, the NLP component 106 can perform functions such as named entity recognition (e.g., given a text stream, determining which terms in the text map to appropriate names such as people or places, and the type of each such name, such as people, locations, or organizations), natural language generation (e.g., converting information or semantic intent in a computer database into intelligible human language), natural language understanding (e.g., converting text into a more formal representation, such as a first-order logical structure that a computer module can manipulate), machine translation (e.g., automatically translating text from one human language to another), morpheme segmentation (e.g., separating words into individual morphemes and identifying categories of morphemes that can be challenging given the complexity of the morphemes or structures of the words of the language), question answering (e.g., determining answers to human language questions, which may be specific or open-ended), semantic processing (e.g., processing that may occur after a word is identified and its meaning is encoded to relate the identified word to other words having similar meanings).
The NLP component 106 may convert the audio input signal into recognized text by comparing the input signal to a stored set of representative audio waveforms (e.g., in the data store 114) and selecting the closest match. The set of audio waveforms may be stored in data store 114 or other database accessible to data processing system 102. The representative waveform is generated across a large number of users and may then be enhanced with speech samples from the users. After the audio signal is converted into recognized text, the NLP component 106 matches the text with words that are associated with actions that the data processing system 102 can service, for example, via training throughout the user or by manual designation. Aspects or functionality of the NLP component 106 may be performed by the data processing system 102 or the client computing device 128. For example, local NLP components may execute on the client computing device 128 to perform aspects of converting the input audio signal to text and sending the text to the data processing system 102 for further natural language processing by data packets.
The audio input signal may be detected by a sensor 152 or transducer 154 (e.g., a microphone) of the client computing device 128. Via the transducer 154, the audio driver 156, or other components, the client computing device 128 can provide audio input signals to the data processing system 102 (e.g., over the network 101), where the audio input signals can be received (e.g., over the interface 104) and provided to the NLP component 106 or stored in the data repository 114. The audio input signal detected by the sensor 152 may include an initial keyword, hotword, or trigger word that indicates to the client computing device 128 that the input audio signal is to be sent to the data processing system 102.
The client computing device 128 may include an audio driver 156, a transducer 154, a sensor 152, and a pre-processor component 158. The sensor 152 may receive or detect an input audio signal (e.g., a voice input). The preprocessor component 158 can be coupled to the audio driver, transducer, and sensor. The preprocessor component 158 can identify initial keywords, hotwords, trigger keywords, or other symbols in the input audio signal that indicate that the input audio signal is to be sent to the data processing system 102 for processing by the NLP component 106. The preprocessor component 158 can filter the input audio signal to create a filtered input audio signal (e.g., by removing certain frequencies or suppressing noise, or removing initial keywords or hotwords). The pre-processor component 158 can convert the filtered input audio signal into data packets (e.g., using a software or hardware digital-to-analog converter). In some cases, the pre-processor component 158 may convert the unfiltered input audio signal into data packets and send the data packets to the data processing system 102. The pre-processor component 158 can send the data packets to the data processing system 102 that includes one or more processors and memory that execute a natural language processor component, an interface, a speaker recognition component, and a direct action application programming interface.
The data processing system 102 can receive data packets from the pre-processor component 158 via the interface that include filtered (or unfiltered) input audio signals detected by the sensor. The data processing system 102 may identify an acoustic signature from the input audio signal. The data processing system 102 can identify the electronic account 124 corresponding to the acoustic signature based on a lookup (e.g., querying a database) in a data store. In response to the identification of electronic account 124, data processing system 102 may establish a session and an account for the session. The account 124 may include a profile having one or more policies. The data processing system 102 can parse the input audio signal to identify the request and the trigger keyword corresponding to the request.
The data processing system 102 can provide the state to the preprocessor component 158 of the client computing device 128. The client computing device 128 may receive an indication of the status. The audio driver may receive an indication of a state of the profile and generate an output signal based on the indication. The audio driver may convert the indication into an output signal, such as a sound signal or an acoustic output signal. The audio driver may drive a transducer 154 (e.g., a speaker) to generate sound based on an output signal generated by the audio driver.
In some cases, the client computing device 128 may include a display device 160. Display device 160 may include one or more LEDs, lights, displays, or other components or devices configured to provide an optical or visual output. The preprocessor component 158 can cause the light source to provide a visual indication corresponding to the status. For example, the visual indication may be a status indicator light that is on, a color change in light, a light pattern having one or more colors, or a visual display of text or an image.
The NLP component 106 may acquire an input audio signal. From the input audio signal, the NLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request. The request may indicate an intent or subject of the input audio signal. The trigger keyword may indicate the type of action that may be taken. The trigger keyword may be a wake signal or hotword that indicates to the client computing device 128 to convert the subsequent audio input to text and send the text to the data processing system 102 for further processing. For example, the NLP component 106 can parse the input audio signal to identify at least one request to leave home for dinner and watch a movie in the evening. The trigger keyword may include at least one word, phrase, root or partial word, or derivative that indicates an action to be taken. For example, a trigger keyword "go" or "to go" from the input audio signal may indicate that traffic is required. In this example, the input audio signal (or identified request) does not directly express the traffic intent, but the trigger keyword indicates that the traffic is an ancillary action that requests the indicated at least one other action.
The NLP component 106 can parse the input audio signal to identify, determine, retrieve, or obtain the request and trigger keywords. For example, the NLP component 106 can apply semantic processing techniques to the input audio signal to identify triggering keywords or requests. The NLP component 106 can apply semantic processing techniques to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal may comprise the sentence "i want to get to the airport in a car". The NLP component 106 can apply semantic processing techniques or other natural language processing techniques to the data packet including the sentence to identify the request or trigger phrases "want to take a car" and "airport". The NLP component 106 can further identify a plurality of trigger keywords, such as a want and a ride. For example, the NLP component 106 can determine that the trigger phrase includes a trigger keyword and a second trigger keyword.
The NLP component 106 can filter the input audio signal to identify trigger keywords. For example, a data packet carrying an input audio signal may include "It would be if I core get a voice core help me to the airport" (too late if someone can help me go to the airport), "in which case the NLP component 106 may filter out one or more terms as follows: "it", "wuold", "be", "great", "if", "I", "result", "get", "someone", "that", "wuold" or "hellp". By filtering out these terms, the NLP component 106 can more accurately and reliably identify trigger keywords, such as "go to the airport," and determine that this is a request for a taxi or ride share service.
In some cases, the NLP component 106 may determine that the data packet carrying the input audio signal includes one or more requests. For example, the input audio signal may include the sentence "i want to buy an audio book and subscribe to movies monthly". The NLP component 106 can determine that this is a request for an audio book and a streaming multimedia service. The NLP component 106 can determine whether this is a single request or multiple requests. The NLP component 106 can determine that these are two requests: a first request to a service provider that provides the audio reading, and a second request to a service provider that provides the streaming of the movie. In some cases, the NLP component 106 may combine the determined multiple requests into one request, which is then sent to the 3P developer device 162. In some cases, the NLP component 106 may send each request to another service provider device, or both requests to the same 3P developer device 162, respectively.
The data processing system 102 may include a direct action API 108 designed and constructed to generate an action data structure responsive to a request based on a trigger keyword. The direct action API 108 may generate an action data structure to cause the application to perform a corresponding action. The direct action API 108 may send the action data structure to an application installed on the client computing device 128 to cause the client computing device 128 to perform a corresponding action or initiate an action. The action data structure generated by the direct action API 108 may include deep links for applications installed on the client computing device 128. The application installed on the client computing device 128 may then perform the action or communicate with the 3P developer device 162 or the 3P developer device 162 to perform the operation.
The processor of the data processing system 102 may invoke the direct action API 108 to execute a script that generates a data structure to provide to an application installed on the client computing device 128, the 3P developer device 162, or other service provider to obtain a digital component, content, a subscription service, or a product (such as subscribing to a car or subscribing to an audio reading from a car sharing service). The direct action API 108 may obtain data from the data repository 114, and data received from the client computing device 128 with the consent of the end user, to determine location, time, user accounts, logistics, or other information to enable the 3P developer device 162 to perform operations, such as booking a car from a car sharing service. Using the direct action API 108, the data processing system 102 can also communicate with the 3P developer device 162 to complete the operation (in this example, by making a car share reservation).
The direct action API 108 may perform specified actions to satisfy the end user's intent as determined by the data processing system 102. Direct action API 108 may execute code or dialog scripts that identify the parameters needed to satisfy a user request, according to the actions specified in its input and the parameters or rules in data store 114. The direct action API 108 may execute applications that meet or fulfill the intent of the end user. Such code may, for example, look up additional information in the data store 114, such as the name of the home automation service or third party service, or it may provide an audio output to render at the client computing device 128 to ask an end user question, such as the intended destination of the requested taxi. The direct action API 108 may determine parameters and may package the information into an action data structure, which may then be sent to another component of the data processing system 102 for implementation.
The direct action API 108 may receive instructions or commands from the NLP component 106 or other components of the data processing system 102 to generate or construct an action data structure. The direct action API 108 may determine the type of action to select a template stored in the data store 114. The actions may be implemented by an application provided by the data processing system 102 and submitted by the 3P developer device 162. An application may perform or facilitate the performance of an action. Example types of actions may include: such as a viewing action, a listening action, a reading action, a navigation action, or a weather action. The types of actions may include or be configured to provide: such as services, products, subscriptions, tickets, multimedia content, audio books, managing subscriptions, adjusting subscriptions, transferring digital money, making purchases, or music. The type of action may further include a type of service or product. For example, the types of services may include a car sharing service, a meal delivery service, a laundry service, a cleaning service, a maintenance service, a home service, a device automation service, or a media streaming service. The types of products may include: such as clothing, shoes, toys, electronics, computers, books, or jewelry. The types of subscriptions may include: such as dinner bookings or hair salon appointments. Types of tickets may include: such as movie tickets, sports stadium tickets or airline tickets. In some cases, the types of services, products, reservations, or tickets may be categorized according to price, location, type of shipment, availability, or other attributes.
The NLP component 106 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request, and provide the request and the trigger keyword to the direct action API 108 to cause the direct action API to generate a first action data structure responsive to the request based on the trigger keyword. Upon identifying the type of request, direct action API 108 may access the corresponding template from a template store (e.g., data store 114). The template may include fields in the structured data set that may be populated by the direct action API 108 to further perform operations requested by the input audio detected by the client computing device 128 (such as an operation to send a rental car to pick up the end user at the location and to send the end user to the destination location). The direct action API 108 or the client computing device 128 may launch or trigger an application to satisfy the request in the input audio. For example, the car sharing service application may include one or more of the following fields: device identifier, pickup location, destination location, number of passengers, or type of service. The direct action API 108 may populate the fields with values. To populate the fields with values, the direct action API 108 may ping, poll, or retrieve information from one or more sensors 152 of the client computing device 128 or a user interface of the client computing device 128. For example, the direct action API 108 may use a location sensor, such as a GPS sensor, to detect the source location. The direct action API 108 may obtain further information by submitting surveys, prompts, or queries to the user side of the client computing device 128. The direct action API 108 may submit a survey, prompt, or query via the interface 104 of the data processing system 102 and a user interface (e.g., an audio interface, a voice-based user interface, a display, or a touch screen) of the client computing device 128. Thus, the direct action API 108 can select a template for the action data structure based on a trigger keyword or request, and populate one or more fields in the template with information detected by the one or more sensors 152 from the data value predictor component 112 or obtained through a user interface, and generate, create, or construct the action data structure to facilitate the 3P developer device 162 in performing the operation.
The system 100 may include or communicate with a third party ("3P") developer device 162. The 3P developer device 162 may include one or more of the systems or components of system 400 depicted in fig. 4. The 3P developer device 162 may include or be associated with one or more computing devices or servers. The 3P developer device 162 may generate, construct, or develop an electronic resource or electronic document. An electronic document may refer to or include a Web page, an HTML document, a digital media file, an image, text, or a Web-based application. The electronic document may include input form fields, buttons, graphical user interface elements, or widgets. The electronic document may be presented via the computing device 128, and may be configured to receive input from a user via an interface of the computing device 128. The electronic document may generate a prompt or other input request from the user. The electronic document may present a visual output or an audio output. The 3P developer device 162 may generate, construct, or develop one or more portions of an electronic document. The electronic document may be referred to as a 3P document (or 3P electronic resource 134) because it may be provided by the 3P developer device 162. The 3P developer device 162 can provide the 3P electronic resource 134 (e.g., electronic document) to the client computing device 128, or to a cache server that provides the 3P electronic resource to the client computing device 128.
For example, the 3P developer device 162 may include an online retailer. The online retailer may generate an electronic document that is a web page of a product sold by the online retailer. The electronic document may request input from the user to complete a transaction, such as a financial account number. In another example, the 3P developer device 162 may include a package delivery provider and the electronic document may provide tracking information. The electronic document may request a tracking number from the user in order to perform a lookup and determine a tracking status. The user may enter the tracking number through an interface of the computing device 128.
However, entering requested information into an electronic document may be challenging due to limited input capabilities on some computing devices 128 (e.g., small touch screens or keyboards, voice-only input). In addition, the requested input may not be easily obtained and may result in other remote procedure calls or lookups to external sources or external accounts to obtain the requested input information. For example, a user may log into an account or data store other than an electronic document to obtain information requested by the electronic document. On certain computing devices 128 with limited capabilities, accessing these external accounts may be challenging, inefficient, or impossible in order to obtain the information requested by the electronic document. Accordingly, the 3P developer device 162 may provide the electronic document to the data processing system 102 of the present solution.
The data processing system 102 can include a verification component 110 that interfaces with or accesses the verification component 110, the verification component 110 designed, constructed, or operated to receive the intent list 118 from a third party developer device 162. The verification component 110 can verify the intent list based on the verification policy 116. The verification component 110 can store the intent list in a data store 114 of the data processing system 102 in response to verification of the intent list.
The data processing system 102 may receive the intent list 118 from the third party developer device 162. The intent list 118 (or intent list data structure) may include a mapping between actions of the digital assistant and linked templates of electronic resources developed by the third party developer device 162. The intent list 118 may be specific to or configured for an electronic resource. The intent list 118 can facilitate integrating a digital assistant (e.g., via the voice navigator and response component 150) with a web page (e.g., the 3P electronic resource 134).
The intent list 118 data structure may include definitions for actions having one or more fields. Actions may include intent names and implementations. An implementation may refer to a technique or process for performing an action. The implementation can include: such as a URL link template, or a technique for calling a JavaScript intent action API. Implementations may include one or more parameters integrated with the URL link template. The value of the parameter can be predicted, selected, generated, or identified by the data value predictor component 112.
The intent list data structure 118 may have name/value pairs. For example, the name may be "inventname" and the value may be "actions. The name/value pairs may be separated by ": 1. The intent list 118 data structure may be: { "action" [ { "intName": action.intent.NAME "", "fulfile" [ { "url template": exampledomain _ com/? action1{ parameter1[ parameter1_ value ], parameter2[ parameter2_ value ], parameter3[ parameter3_ value ] } "," parameter "[ entry parameter" ] "interaction parameter", "interaction parameter 1", "issued" ] "parameter 1[ parameter1_ value ]" }, { entry parameter "]" interaction parameter2 "," issued "]" parameter "]" value "" parameter2[ parameter2_ value ] "," entry parameter "" }, "" interaction parameter "]" parameter3 "," issued "]" parameter "]" 3.
For example, the intent list 118 data structure of the 3P electronic resource 134 providing ride sharing or ride reservation functionality may include:
the 3P developer device 162 may construct, generate, or develop an intent list of the electronic resource. The 3P developer device 162 may construct, generate, or develop the electronic resource 134. The validation component 110 can receive the intent list 118 submitted by the 3P developer device 162. The verification component 110 can verify the intent list 118 using one or more verification policies 116 stored in the data store 114. The verification component 110 can retrieve a verification policy 116 from the data store 114 to apply to the intent list. To verify the intent list, the verification component 110 can parse the intent list. The verification component 110 can parse the intent list in response to receiving the intent list from the 3P developer device 162. The validation component 110 can validate the intent list in response to a request to validate the intent list. The verification component 110 can receive a request to verify the list of intents from the 3P developer device 162 or from a component of the data processing system 102.
The verification component 110 can verify the intent list using a verification policy 116. The verification policy 116 may indicate the types of content, formats, scripts, functions, or components that are permitted to be used with or prohibited from the intent list. The verification component 110 can parse the intent list or extract data from the intent list. The verification component 110 can compare the output of the parsed intent list or the results of extracting the intent list to a verification policy 116 to determine whether one or more items or components in the intent list are prohibited. If the intent list passes the verification policy 116 (e.g., the verification component 110 does not detect any prohibited items indicated by the verification policy 116), the verification component 110 can indicate that the intent list is valid. However, if the verification component 110 detects one or more prohibited items in the intent list indicated by the verification policy 116, the verification component 110 can determine that the intent list is invalid.
For example, the verification policy 116 may indicate that an intent list missing one or more pieces of information, such as an action definition, parameter, data value, or link, is invalid or erroneous. For example, if the intent list does not include one or more of an intent name, a link template (or URL template), a parameter value, or an indication of whether the parameter is required, the validation manifest 110 may determine that the intent list is invalid using the validation policy 116. If the name is not paired with a value, or the value is not paired with a name, the validation component 110 can determine that the intent list is missing information using the validation policy 116.
The verification policy 116 may indicate a valid format for the intent list 118. The verification component 110 can use the verification policy 116 to determine whether the intent list is valid or invalid based on the format of the approved intent list. For example, the valid format may be a JavaScript object notation ("JSON") file. A JSON file may refer to a lightweight format for storing and transmitting data. The JSON file may include an array of records. The record array may include information about the action, implementation, link template, or parameters of the link template. The JSON file may be constructed using grammatical rules. The grammar rules may include: for example, data in name/value pairs, comma-separated data, parenthesized holding objects, and parenthesized holding arrays. The validation policy 116 may include these syntax rules as a permission format for the intent list data structure 118. The validation component 110 can use this validation policy 116 with the grammar rules to determine whether the format of the intent list data structure 118 is valid and to determine whether to validate or invalidate the intent list data structure 118 received by the validation 3P developer device 162.
The verification policy 116 may include testing links constructed using a link template provided in the intent list 118. For example, the verification component 110 can construct a test link using the intent list 118 based on the verification policy 116. The verification component 110 can input data values for parameters in the link template and then execute the constructed link to determine if the link is functional and can perform an action, or whether the link is broken or causes another failure. Thus, the validation component 110 can determine whether the intent list 118 defines actions, parameters, and link templates in a manner that results in construction of a work link for performing the actions. The validation component 110 can use the intent list 118 to generate a link or initiate an action to determine whether the 3P developer device 162 receives a request and data values for parameters for performing the action. The verification component 110 can receive a status indication from the 3P developer device 162 indicating whether execution of the action succeeded or failed.
The verification policy 116 may include determining whether the intent list 118 includes any malicious code or is susceptible to an intrusion or security breach. The verification policy 116 may include a list of links that are trusted or a list of links that are not trusted or unauthorized. The verification component 110, using the verification policy 116, can determine whether the links contained in the intent list 118 are authorized or unauthorized based on a predetermined list in order to verify or invalidate the intent list 118. For example, a website may be a malicious configuration to circumvent the limitations established by the Web browser's homologous policies. The Web browser 130 can use a same origin policy to prevent different domains associated with different iframes from accessing each other's data. Data processing system 102 may determine that a website is invalid or malicious by identifying the website in a link template 122 in intent list 118 and determining whether the link is valid. This may be based on a predetermined trusted list, or a predetermined list of untrusted or malicious web sites. Thus, using the intent list 118, the data processing system 102 can validate the 3P electronic resource 134.
The verification component 110 can apply or execute a verification policy 116 to determine whether to block, reject, block, or remove the intent list 118 from the intent list 118. Thus, the verification component 110 using the verification policy 116 can determine whether to verify or not to verify the intent list 118 based on whether the intent list 118 does not have missing information, whether the format is correct, or whether it is available to build a work link. For example, the validation component 110 may validate the intent list 118 for storage in the data store 114 of the data processing system 102 in response to determining that the format is correct and that there is no missing information from the intent list 118. For example, if the verification component 110 detects an erroneous or unauthorized format or missing information in the intent list 118, the verification component 110 can determine not to verify the intent list 118 in response to detecting a format error or missing information in the intent list 118 and remove the intent list 118 from storage in the data store 114.
The verification component 110 can verify the intent list 118 prior to storing the intent list 118 in a memory of the data processing system 102 or in the data store 114. The data processing system 102 may store the verified intent list 118. The data processing system 102 may determine not to store the list of invalidation intents 118. The data processing system 102 can determine to remove the list of invalidation intents 118 that failed the validation process performed by the validation component 110. By determining not to store the list of invalidation intents 118, the data processing system 102 may reduce memory or storage utilization in the data store 114. The data processing system 102 may prevent or mitigate against erroneous activity occurring on the client computing device 128 by not forwarding invalid documents to the client computing device 128, thereby preventing the client computing device 128 from executing or rendering the invalid intent list 118 that may contain erroneous or unauthorized functionality. The data processing system 102 may prevent or mitigate the security failure by determining not to use the invalidation intent list 118 to implement the action or intent from the client computing device 128. Thus, the validation component 110 can reduce computing resource utilization (e.g., memory utilization) of the data processing system 102, reduce or prevent errors or crashes from occurring on the client computing device 128, and avoid security failures from occurring on the client computing device 128. Security failures may occur because the intent list 118 containing the linked templates may result in an intrusion or vulnerability that may be exploited by a malicious third party. The data processing system 102, using the validation policy 116, may determine that such intent list 118 is not stored in the data store 114 and that such intent list 118 is not used to implement the intent or action from the client computing device 128.
The data processing system 102 may provide a prompt to the 3P developer device 162 indicating the verification status. The data processing system 102 may indicate that the verification was successful or that the verification was unsuccessful or failed. If the data processing system 102 determines that the intent list 118 is invalid or not validated, the data processing system 102 may automatically resolve, modify, or fix the errors detected in the intent list 118 so that the intent list 118 may be validated, or the data processing system 102 may send a request to the 3P developer device 162 to resolve the errors detected in the intent list 118.
The data processing system 102 may automatically resolve, debug, or repair the intent list 118 in response to detecting an error or invalidation of the intent list 118. The data processing system 102 may automatically debug or resolve the intent list 118 by removing or erasing the erroneous or invalid code. For example, the data processing system 102 may remove references to parameters that are not available or used to perform an action. The data processing system 102 may remove references to actions that the digital assistant system cannot perform. The data processing system 102 may automatically resolve the intent list 118 containing code in an invalid format by converting or reformatting the code into a valid or permissible format. For example, the data processing system 102 can detect that the syntax of the intent list 118 is not in JSON format and automatically convert the intent list 118 to a permissible syntax or format, such as JSON or other permissible format. Thus, the verification component 110 can use the verification policy 116 to determine whether the intent list 118 is valid, whether to store the intent list 118, reject the intent list 118, or resolve the intent list 118 prior to storage in the data store 114. The data store 114 may maintain or store the list of intentions 118 that have been verified.
The client computing device 128 may include or execute a Web browser 130. The Web browser 130 may include an application designed, constructed, or operated to render or present electronic content. The Web browser 130 may include or may be, for example, an application. Web browser 130 may be a native application, Web application, or other component for transmitting requests for 3P electronic resources 134, receiving 3P electronic resources 134, and rendering 3P electronic resources 134. The Web browser 130 may be configured to send a request for the 3P electronic resource 134 to the data processing system 102 or the 3P developer device 162 or some other server, such as a cache server. In some cases, data processing system 102 may include a cache server that may intercept requests to access 3P electronic resource 134. Intercepting the request may refer to the cache server receiving a request for the 3P electronic resource 134 instead of the 3P developer device 162. The cache server may send a request for the electronic document by the 3P developer device 162 to the cache server by configuring the Web browser 130 using the IP address of the cache server to intercept the request, instead of the 3P developer device 162 or a server associated with the 3P developer device 162. By configuring the Web browser 130 to send the request to a cache server instead of the 3P developer device 162, the system 100 can reduce the lag or delay associated with responding to requests for electronic documents.
The Web browser 130 may render or draw the electronic document in the parent frame 132. Parent frame 132 may refer to the loading of an electronic document into Web browser 130 itself, as opposed to loading into inline frame 138. In some cases, the Web browser 130 may load the electronic document into the iframe 138. For example, the Web browser 130 or electronic document may create one or more iframes 138 and load the contents of the 3P electronic resource into the iframes.
The 3P electronic resources 134 may include HTML content, JavaScript content, XML content, or other types of content. The 3P electronic resource 134 can include a JavaScript ("JS") library 148. The JS library 148 can be embedded or included in the 3P electronic resource 134. The 3P developer device 162 can provide or build the 3P electronic resource 134 for the JS library 148. The 3P developer device 162 can download the JS library 148 from the data processing system 102 (e.g., from the data store 114) and then install, link, include, or otherwise provide the 3P electronic resource 134 to the JS library 148, such that when the client computing device 128 downloads the 3P electronic resource 134, the JS library 148 includes the 3P electronic resource 134.
The JS library 148 can safely and reliably host digital assistant functionality as an overlay rendered on the 3P electronic resource 134 and can provide interactions and authenticated callbacks to the data processing system 102 in a manner that is opaque to the 3P electronic resource 134. The JavaScript library 148 of the present solution can provide secure communications because the 3P electronic resource 134 can be prohibited or prevented from accessing data associated with the JavaScript library 148 or communicating with the data processing system 102 prior to authorization. Secure provision of such data values may reduce processor, memory, or battery consumption of the computing device by reducing the amount of delay incurred by inputting the data value or launching other applications on the client computing device 128 to obtain the data value.
The JS library 148 may be hosted in the iframe 138. The JS library 148 can provide or execute the data exchange component 140 and the authorization component 142. The JS library 148 can include code, programs, scripts, rules, or logic to provide digital assistant functionality for the 3P electronic resource 134. The digital assistant functionality may include: such as a voice interface for NLP processing by the NLP component 106, voice-based navigation of the 3P electronic resource 134, and predictive data values for performing actions on the 3P electronic resource 134.
The JS library 148 can load or establish the iframe 138 to communicate with the data processing system 102. The iframe 138 may be linked with the data processing system 102 or a network domain associated with the data processing system 102. The JS library 148, or one or more components hosted in the iframe 138, can communicate with one or more other iframes or parent frames 132 of the 3P electronic resource 134 using the publish message API.
The JS library 148 hosted in the iframe 138 can access the data stored in the data store 114. The JS library 148 may access the data store 114 and the 3P electronic resource 134 may be prohibited from accessing the data store 114. The JS repository 148 can be configured with identifiers, tokens, or other credentials that allow the JS repository 148 to communicate with the data processing system 102 and its data store 114. Because the iframe 138 hosts other network domain names, the Web browser 130 may prohibit or prevent the 3P electronic resources 134 of the 3P developer device 162 from accessing certain data of the different network domains associated with the data processing system 102. The Web browser 130 can use a homology policy for different domains to prevent interaction with each other to restrict access to another domain.
After the Web browser 130 builds the electronic document, the JS library 148 can build the iframe 138 of the Web browser 130. The Web browser 130 may include an iframe 138. The inline frame 138 may be referred to as an inline frame. The inline frame 138 may be an HTML document embedded within another HTML document in the Web browser 130. The Web browser 130 may use the iframe 138 element as an overlay in which digital assistant functionality may be provided. The iframe 138 can be embedded into the Web browser 130. The Web browser 130 can load the data exchange component 140 and the authorization component 142 in the iframe 138. The data processing system 102 can authorize the data exchange component 140 to be loaded into the iframe 138 of the 3P electronic resource 134 in response to the verification of the 3P electronic resource 134 by the verification policy 116. The data processing system 102 can validate the 3P electronic resource 134 based on the intent list 118. The 3P electronic resource 134 can be verified by an intent list for the 3P electronic resource 134 verified by the verification component 110. If the verification component 110 verifies the intent manifest 118 using one or more verification policies 116, the data processing system 102 can determine that the 3P electronic resource 134 is authorized to load the JS library 148 into the iframe 138 and can enable the data exchange component 140 to access the identifier of the client computing device 128 and allow communication between the data exchange component 140 and the data processing system 102. However, if the data processing system 102 deems the intent list 118 to be invalid, the data processing system 102 can prevent the data exchange component 140 from being established, which can refer to or include denying the data exchange component 140 access to the data processing system 102 or account 124 information. The Web browser 130 can restrict the component from accessing certain portions of the Web browser 130 or accessing certain memory or functionality of the client computing device 128. Thus, the Web browser 130 may establish security constraints or other controls for the iframe 138 or parent frame 132 to limit the type of access or functionality provided by the iframe 138 or parent frame 132.
The Web browser 130 can include or execute a data exchange component 140. The data exchange component 140 can include one or more rules, scripts, or programs. The data exchange component 140 loaded into the iframe 138 via the JS library 148 can determine the identifier of the client computing device 128. The identifier may be associated with the account 124 linked to or corresponding to the client computing device 128. The identifier may be an account identifier of the client computing device 128. The identifier may be an alphanumeric identifier, a token, a key, a numeric identifier, or other identifier. The identifier may be stored in memory or other storage on the client computing device 128. However, the 3P electronic resource 134 may be restricted from accessing the memory of the client computing device 128 that stores the identifier. The Web browser 130 can prevent unauthorized components from accessing the identifier. The data exchange component 140 of the JS library 148 loaded into the iframe 138 can access memory because the data exchange component 140 is associated with the same source or origin of the identifier (such as the network domain of the data processing system 102). Accordingly, the data exchange component 140 can obtain the identifier of the account 124 from the memory of the client computing device 128. The data exchange component 140 can restrict access to the identifier of the client computing device 128 by the 3P electronic resource 134 in the parent frame 132 through a same origin policy or other configuration of the Web browser 130. The 3P developer device 162 developing the 3P electronic resource 134 may be prohibited from accessing the identifier of the client computing device 128.
The data exchange component 140 and other components or resources loaded in the Web browser 130 can communicate with each other. For example, the data exchange component 140 can correspond to the iframe 138, and the 3P electronic resource 134 can execute in the iframe 138 as a subframe of the parent frame 132. In another example, the data exchange component 140 can be loaded into a separate iframe 138, in which case the data exchange component 140 and the 3P electronic resource 134 (e.g., the live intent execution API 144) can communicate with each other using the parent frame 132 of the Web browser 130 as a relay. For example, a parent frame 132 (e.g., a first frame) may have two child iframes (e.g., a second iframe and a third iframe). The second iframe may communicate with the parent frame 132, which may relay the communication to a third iframe 138. The third iframe 138 can reply to the communication by sending a message back to the parent frame 132, which can relay the message to the second iframe 138.
The data exchange component 140 can transmit or provide the identifier of the client computing device 128 to the data processing system 102. The data processing system 102 can receive an identifier of the client computing device 128 executing the 3P electronic resource 134 from the data exchange component 140 of the iframe 138 of the 3P electronic resource 134 loaded by the client computing device 128. The data processing system 102 may query the presence state sharing API 146 for information regarding the state of the 3P electronic resource 134. The data processing system 102 may query the presence state sharing API 146 in response to receiving an identifier or other request of the client computing device 128.
The 3P electronic resource 134 may be configured or constructed using a field state shared application programming interface ("API") 146. The 3P developer device 162 may use the field state sharing API 146 to develop or build the 3P electronic resource 134. The 3P developer device 162 may develop or construct the 3P electronic resource 134 to interface with the field state sharing API 146. The field state sharing API 146 may be designed, constructed, or operated to determine the semantic foreground state of the 3P electronic resource 134 and send this semantic foreground state information to the data processing system 102.
The presence state sharing API 146 can include one or more rules, logic, code, scripts, or programs configured to identify, detect, or determine a semantic state of the 3P electronic resource 134. The presence state sharing API 146 can include schema definitions or repositories including entities (such as people, places, or things) and relationships between entities. The presence state sharing API 146 may include a monitor or tracker component to identify the current state of the 3P electronic resource 134. For example, the presence state sharing API 146 can parse the foreground of the 3P electronic resource 134 to identify the content being displayed, or any tag or markup language that can indicate a semantic foreground state. The presence state sharing API 146 can detect text, metadata, input fields, buttons, or other graphical user interface widgets. The presence state sharing API 146 may use semantic analysis or processing techniques to convert the detected information into structured data corresponding to the schema.
The site state sharing API 146 may include or provide JavaScript callbacks. A callback may refer to or include a function that executes after another function has completed execution. The site state sharing API 146 may be implemented by the 3P developer device 162 so that a site may publish semantic foreground states upon request by the data processing system 102. The data processing system 102 may query or request the semantic foreground state from the field state sharing API 146. In response to the request, the presence state sharing API 146 may provide a semantic foreground state. The semantic foreground state may refer to a current semantic state of the 3P electronic resource 134, such as content being displayed on a web page or a function or action being performed or available. Semantic state information may be encoded or conveyed using a schema that provides structure for semantic states. The semantic state may include one or more entities that represent real world or physical concepts as structured data in the foreground of the electronic resource. An entity may refer to a person, place, or thing. An entity may have a unique identifier. An entity may include attributes, types, and descriptions. An entity may include a relationship with one or more other entities. The entity may provide a structure to the data. The semantic state may include one or more digital assistant intents that are instantaneously available in the current context of the electronic resource.
The field state sharing API 146 may be configured by the 3P developer device 162 using semantic state information for one or more states of the 3P electronic resource. For example, semantic state information for ride share electronic resources may include actions such as "ride" or "reserved ride" or "ride request. The additional semantic foreground information may include the location, destination, vehicle type, or time of getting on the vehicle of the client computing device 128. In another example, the electronic resource may correspond to a ticket to a concert. Semantic front information may include "tickets," purchases, "" prices, "or" quantities.
The data processing system 102 may receive the semantic foreground status of the electronic resource from the presence status sharing API 146. The data processing system 102 may receive semantic foreground status information from the Web browser 130 or from the 3P developer device 162 via the client computing device 128. For example, the 3P developer device 162 may receive semantic foreground state information from the live state sharing API 146. The data processing system 102 can query the 3P developer device 162 for semantic foreground information using the unique identifier associated with the 3P electronic resource 134 rendered on the client computing device 128. The data processing system 102 may receive the field state sharing information in response to querying the 3P developer device 162.
The data processing system 102 can receive semantic foreground status information via the data exchange component 140. The data processing system 102 can receive the semantic foreground state from the JS library 148, and the JS library 148 receives the semantic foreground state from the field state sharing API 146 of the third-party electronic resource 134. The data exchange component 140 can interface or communicate with the presence state sharing API 146 using the messaging protocol of the Web browser 130. The data processing system 102 can query the data exchange component 140 for status information. The data exchange component 140 can query the presence state sharing API 146 for the current semantic foreground state of the 3P electronic resource 134. The field state sharing API 146 can provide the semantic foreground state to the data exchange component 140, which can forward the semantic foreground state to the data processing system 102.
The data processing system 102 can receive semantic foreground status of an electronic resource 134 from a presence status sharing API 146 of the electronic resource 134 from the data exchange component 140. The data processing system 102 may receive information in response to a query. The data processing system 102 can include a data value predictor component 112, the data value predictor component 112 designed, constructed, or operative to determine a parameter based on the semantic foreground state and the intent list data structure 118, and select a data value for the parameter based on an identifier of the client computing device 128.
The data value predictor component 112 can accept as input a semantic foreground state. The semantic foreground state may indicate or identify a current intent associated with the electronic resource. The data value predictor component 112 can use the semantic foreground status information to search a data store or database linked to the client computing device 128 (or account 124 thereof) rendering the electronic resource 134. The data value predictor component 112 can search a database to predict the data value of the currently intended parameter. If the data value predictor component 112 identifies an acceptable prediction, the data value predictor component 112 can provide the predicted value to the JS library 148 (or a component thereof). The JS library 148 (e.g., via the authorization component 142) can present the predicted data value for authorization. If the predicted data value is authorized, the data value may be provided or communicated to the electronic resource. The JS library 148 can provide the predicted and authorized data values to the third party electronic resource 134 through a link (e.g., URL deep link) or JavaScript intent execution API 144.
For example, the electronic resource may include a car rental website. The data processing system may identify a current semantic foreground state indicating an intent of the book _ car _ real (to _ location, from _ location, start _ time, end _ time). The data processing system may search for and identify data associated with an account corresponding to a client computing device rendering the third party electronic resource regarding upcoming flight bookings stored in the database. The data processing system may predict the data value of the intent parameter based on data in the database. The data processing system may send the predicted data values for the parameters to the client computing device. The data processing system may perform an action corresponding to an intent on the third-party electronic website in response to the authorization.
The data value predictor component 112 can identify data values in response to semantic foreground state information provided by the field state sharing API 146 using one or more selection techniques. Using the semantic foreground status information, the data value predictor component 112 can identify actions in the intent list 118 for the 3P electronic resource 134. The data value predictor component 112 can perform a lookup in the data store 114 to identify or select an intent list data structure 118 that corresponds or matches a semantic foreground state. The data value predictor component 112 can identify the intent list 118 of 3P electronic resources 134 using semantic selection techniques or other selection or matching techniques. For example, the data value predictor component 112 can determine a domain of the 3P electronic resource 134 and then identify one or more intent lists 118 having link templates 122 that match the domain of the 3P electronic resource 134. Thereafter, the data value predictor component 112 can select an intent list 118 of the 3P electronic resource 134, the intent list 118 containing actions corresponding to a semantic foreground state. For example, if the semantic foreground status indicates "reserve ride," the data value predictor component 112 can select the intent list 118 with the action "reserve ride.
The presence state sharing API 146 can provide semantic foreground state information corresponding to actions in the intent list 118 so that the data value predictor component 112 can identify matches. The data value predictor component 112 can predict matches using various matching or selection techniques. The data value predictor component 112 can determine a match score between each intent list 118 or action 120 and the semantic foreground information to determine the highest scoring match or the most relevant match.
After identifying a matching intent list 118 or action 120, the data value predictor component 112 can determine parameters of a link template 122. The intent list 118 maps the action 120 to a link template 122. The data value predictor component 112 can identify a linked template of an action 122 corresponding to the action 120 corresponding to the semantic foreground state. The data value predictor component 112 can identify parameters of the link template 122. The link template 122 may include one or more parameters. The parameter may include a parameter name. The parameters in the link template 122 may serve as placeholders for parameter data values.
The data value predictor component 112 can identify data values of parameters of the link template 122. The data value predictor component 112 can access the data store 114 to identify account information 124 that stores data values 126. The data value predictor component 112 can perform a lookup in the account 124 data structure to determine the data value 126 responsive to the parameter of the intent list 118 and facilitate the 3P electronic resource 134 or the 3P developer device 162 in performing a service, action or function. The data value predictor component 112 can select or identify values that can be used by the direct action API 108 to generate an action data structure that can be sent to the 3P developer device 162 to perform or implement a request.
The data value predictor component 112 can use semantic processing techniques, selection criteria, machine learning, or other techniques to select or identify candidate data values for parameters of the link template 122 of the intent list 118. The data value predictor component 112 can access one or more sources to determine a data value. For example, the data value predictor component 112 can access an account data structure 124 that contains data values 126 associated with the client computing device 128 or a user thereof. The data processing system 102 may be configured to query external data sources associated with the client computing device 128 in response to authorization from the client computing device 128.
The data value predictor component 112 can identify one or more data values responsive to semantic foreground state information received from the data exchange component 140. The data value predictor component 112 can identify a plurality of data values. The data value predictor component 112 can determine to send one or more data values identified by the data value predictor component 112 to the data exchange component 140 or the Web browser 130. In some embodiments, data value predictor component 112 may not be able to identify particular data values that are directly responsive to contextual information, and may determine to send a subset of the identified data values based on ranking or filtering techniques. For example, each data value may be associated with a confidence score or ranking score or relevance score. The data value predictor component 112 can determine to send the highest ranked data values because those data values are likely to be most likely to respond to the semantic foreground information of the 3P electronic resource 134. In some cases, the data value predictor component 112 can send the first three data values, the first five data values, the first ten data values, or other number of data values.
For example, the semantic foreground status information may indicate with action 120 the intent list 118 with the geographic address parameter requested by the 3P electronic resource 134 in order to perform a service or action. The data value predictor component 112 can perform a lookup in the data value data structure 126 of the account 124 corresponding to the client computing device 128 to identify the address. The data value 126 may include one or more addresses. The data value predictor component 112 may send one or more addresses retrieved from the data value data structure 126 in response to the request. In another example, the link template 122 may instruct the 3P electronic resource 134 to request financial account information to perform an action or service. The data value predictor component 112 can perform a lookup in the data value 126 data structure to identify one or more account identifiers and send the one or more account identifiers to the Web browser 130 via the network 101. Thus, the data value predictor component 112 can generate data values in response to the intent list 118.
The 3P electronic resource 134 may have used multiple states, pages, flows, hints or requests to obtain data values entered for parameters used to perform the action. For example, a transaction flow for booking a ride may include: the payment information processing method comprises a first page of a request initiated by a user, a second page of a boarding position input by the user, a third page of a destination input by the user, a fourth page of payment information selected by the user and a fifth page of a request sent by the user. However, because the data value predictor component 112 can use the intent list 118 to identify a plurality of parameters needed to perform the action 120, the JS library 148 can provide all of the data values of the parameters of the action 120 in a single communication or transmission, or series of data packets (that are part of a single transmission). When multiple parameters and data values are received, the on-site intent execution API 144 may bypass one or more pages in the ride reservation transaction flow and directly proceed to perform the action of requesting a ride or request confirmation to perform a ride. For example, the live intent execution API 144 may skip the second page, the third page, or the fourth page. Thus, the data processing system 102, via the JS library 148, the field state sharing API 146, and the field intent execution API 144, can facilitate input and can reduce computing resource consumption and remote procedure calls by bypassing one or more pages, requests, or prompts to perform actions.
The data processing system 102 may determine one or more subsequent states of the electronic resource 134 based on the semantic foreground state and the intent list data structure 118. For example, the intent list structure 118 may include a plurality of parameters of the link template 122. The plurality of parameters may indicate a subsequent request for an input data value. The data processing system 102 may determine that the 3P electronic resource 134 is configured to request data value information from the user in one or more subsequent states. Subsequent states may include different web pages, drop down menus, buttons, prompts, or other graphical user interface elements for input data value information. The data processing system 102 may determine a plurality of subsequent states based on the semantic foreground information. The data processing system 102 may determine a plurality of subsequent states based on historical state information of the 3P electronic resource 134 or based on historical information associated with semantic foreground state information. The semantic foreground state may be associated with a predetermined set of subsequent states, or may be historically followed by one or more states. For example, purchasing semantic foreground status of athletic shoes may typically be followed by a request for shoe size, address, billing information, and shipping method. The data processing system 102 may select one or more data values for one or more parameters before the electronic resource enters one or more subsequent states based on the identifier of the client computing device 128 or the account 124 identifier. For example, prior to 3P electronic resource 134 requesting athletic shoe size, billing information, or other information, data processing system 102 may select a data value via data value predictor component 112. The data processing system 102 may provide data values before the 3P electronic resource 134 enters subsequent states, allowing the 3P electronic resource to bypass those states, or to make those states more efficient by making the incoming data values available immediately after entering the states.
The data processing system 102 can provide the data value for the parameter to the JS library 148. The data processing system 102 can provide the data values of the parameters to the data exchange component 140 or the authorization component 142. For example, the data processing system 102 can provide the selected candidate data value to the authorization component 142 of the JS library 148 in the iframe 138 to determine whether the 3P electronic resource 134 is authorized to receive the data value. The authorization component 142 can generate an authorization prompt, receive input from the client computing device 128 in response to the authorization prompt, and send a data value to the on-site intent execution API 144 of the electronic resource 134 in response to authorization of the data value to cause the electronic resource 134 to perform an action with the data value.
The authorization component 142 can include one or more rules, policies, code, programs, or scripts. The authorization component 142 can be established or hosted by the JS library 148 in the iframe 138. Without authorization, the authorization component 142 may securely receive the data value without sharing or granting its access to the data to the 3P electronic resource 134 or the 3P developer device 162. Web browser 130 can prevent 3P electronic resource 134 from accessing data values received by authorization component 142.
The authorization component 142 can be structured or operable to generate a prompt including one or more data values received from the data processing system 102. The authorization component 142 can generate a graphical user interface, window, button, or other notification that includes one or more data values. Authorization component 142 may generate a prompt containing the data value before granting 3P electronic resource 134 access to the data value, thereby maintaining a secure communication channel. The authorization component 142 can generate a pop-up window or other user interface element having one or more buttons or controls. The authorization component 142 can determine to overlay the window on the 3P electronic resource 134. For example, the authorization component 142 can generate a suggestion drop-down menu or auto-fill drop-down menu, or make a suggestion at a location on the 3P electronic resource 134 that corresponds to an input form field or input text box. The authorization component 142 may render the data values on the 3P electronic resource 134 in a separate iframe that is secure and inaccessible to the 3P electronic resource 134.
The authorization component 142 can provide for display of data values and include input buttons to allow the client computing device 128 to select a data value or authorize a data value to send to the 3P electronic resource 134. For example, the authorization component 142 can receive three different addresses from the data value predictor component 112. The authorization component 142 may provide an indication of these three candidate addresses in a secure manner through the Web browser 130. The authorization component 142 may include a button or other input mechanism to allow the client computing device 128 to select one of the three candidate addresses. The Web browser 130 can receive a selection of data values from the client computing device 128 or authorization to transmit or provide data values to the 3P electronic resource 134. The Web browser 130 may receive input from the client computing device 128 authorizing the data value in response to the prompt.
In response to authorization of the data value by the authorization component 142, the JS library 148 can provide the data value to the 3P electronic resource 134 or execute a link constructed using the link template 122 and the authorized data value. The data processing system 102 can construct a link using the link template 122 and provide the link to the JS library 148 (e.g., via the data exchange component 140). The data exchange component 140 can provide the link to the live intent execution API 144 for execution. The live intent execution API 144 may execute or launch the constructed link to initiate execution of the action.
In some cases, the JS library 148 may provide the data value to the live intent execution API 144. The live intent execution API 144 may retrieve the data value and initiate execution of the action without redirecting the Web browser 130 to a different Web page through a link. The live intent execution API 144 may input a data value into the 3P electronic resource 134 and cause the 3P electronic resource 134 to perform an action using the data value. For example, the live intent execution API 144 may enter an address into an input form field in the 3P electronic resource 134 and then select a link or other trigger to initiate processing of the address to perform a function. The field intent execution API 144 may enter one or more authorized data values into one or more input fields in the 3P electronic resource 134. The data processing system 102 may provide the data value to the field intent execution API 144 to cause the field intent execution API 144 to enter the data value into an input text box of the electronic resource 134.
The data processing system 102 can provide the data value to the client computing device to cause the client computing device 128 to establish a deep link using the data value and load the deep link into a Web browser 130 executed by the client computing device 128. For example, the data processing system 102 provides the link template 122 to the client computing device 128. Upon authorizing the data value, the JS library 148 or live intent execution API 144 can use the data value to build a link. In some cases, the live intent action API 144 may have a built-in link template or other intent execution technique. The field intent execution API 144 may generate, build or construct links or other commands with data values. The live intent execution API 144 may determine whether to construct a deep link with the data values of the parameters or generate another type of command to send to the 3P developer device 162 to perform the action.
For example, to book a flight, the live intent execution API 144 may construct a deep link with a data value and launch the deep link in the Web browser 130. The field intent execution API 144 may cause the Web browser 130 to load a deep link with data values to display available flights and prices and allow the user to select flights. In another example, the on-site intent execution API 144 may determine to generate a command with a data value to perform an action to reserve the ride without having the Web browser 130 load a new Web page, such as to reserve the ride. Instead, the live intent execution API 144 may determine: it may be more efficient to display a prompt requesting permission or authorization to reserve a ride (or perform action 120) with the predicted data value. Once confirmed, the live intent execution API 144 can send commands to the 3P developer device 162 to cause the 3P developer device 162 to complete the action. Thus, from a computing device processing perspective, it may be more efficient to avoid redirecting the Web browser 130 to a new Web page and loading the Web page, but rather to send commands to the 3P developer device 162 to perform the action.
The live intent execution API 144 may determine whether to generate and load a deep link or send a command without loading a deep link based on a policy. For example, a policy may be whether additional data value input is required to perform an action. If an action can be performed based on all predicted data values, it may be more efficient to send the command without loading the deep link. However, if additional input is to be obtained, such as selecting a flight from a plurality of options, the live intent execution API 144 may load a deep link. The data processing system 102 can construct a link with a data value based on the link template 122 mapped to the action 120 and provide the link to the live intent execution API 144 via the data exchange component 140. The live intent execution API 144 may determine whether to load the link or send a link or link-based command or information to the 3P developer device 162 (e.g., a server associated with the 3P developer device 162 to complete the action 120) to perform the action.
The live intent execution API 144 may determine whether the data value or link is valid. For example, if the electronic resource 134 is related to tracking shipping information and the input data value is a tracking number, the field intent execution API 144 may determine whether the format of the data value corresponds to a predetermined format (e.g., alphanumeric, number of bits, order of numbers and letters) of the tracking number used by the 3P developer device 162. The live intent execution API 144 may construct a deep link with the data value upon determining that the data value is valid.
The live intent execution API 144 may include a JavaScript callback implemented by the 3P developer device 162 to enable the electronic resource 134 to process a digital assistant intent triggered by the data processing system 102 or the client computing device 128. The digital assistant intent can refer to an action 120 in the intent list 118.
The client computing device 128 may include a voice navigator and response component 150. The voice navigator and response component 150 can interface with one or more of a sensor 152, a transducer 154, an audio driver 156, a preprocessor 158, or a display device 160. The voice navigator and response component 150 can include one or more components or functionalities of the data processing system 102, such as the NLP component 106 or the direct action API 108.
The voice navigator and response component 150 can be referred to as a digital assistant component or client or local digital assistant component. The data processing system 102 may be referred to as a server digital assistant component. When the data processing system 102 provides, via the natural language processor component 106, structured intent parsing (e.g., an action 120 or link constructed based on the link template 122) that can be handled by a third party electronic resource 134 integrated with the voice navigator and response component 150 and the JS library 148, the data processing system 102 can invoke the voice navigator and response component 150. The techniques may convert the user intent resolution into a URL link or JavaScript intent execution call that may be used to navigate the electronic resource 134 via the live intent execution API 144. After the JS library 148 executes an intent on the third-party electronic resource 134 via the live intent execution API 144, the JS library 148 can request a foreground semantic state from the JavaScript callback of the electronic resource 134. The voice navigator and response component 150 or the data processing system 102 can match foreground state data with a voice response (text-to-speech) template that has been previously associated with a matching user intent. The voice navigator and response component 150 can render a text-to-speech response to the user by passing the state data to the template. The present technology enables a user to navigate through a website in voice and hear a text-to-speech ("TTS") answer after each voice navigation.
The voice navigator and response component 150 can enable voice-based navigation over the electronic resource 134. The voice navigator and response component 150 can receive audio input from a sensor 152 (e.g., a microphone). The voice navigator and response component 150 can send audio input (or send pre-processed audio input via data packets) to the data processing system 102. The data processing system 102 can determine the intent in the audio input through the NLP component 106. The data processing system 102 may determine that the intent is to perform an action on the electronic resource. Data processing system 102 may query presence state sharing API 146 to determine the semantic foreground state of electronic resource 134. Thus, voice input detected by the voice navigator and response component 150 can include a request to perform an action received from a user. In response to the voice-based request, the data processing system 102 can query the presence state sharing API 146 to determine the semantic foreground state of the electronic resource 134, select the intent list 118, and predict or select a data value based on the intent list's actions 120 or the link template 122.
The data processing system 102 can provide the data value to the authorization component 142. The authorization component 142 can interface with the voice navigator and response component 150 to present data values via visual output or audio output. The authorization component 142 can interface with the voice navigator and response component 150 to obtain authorization or input via voice audio input. The authorization component 142 can pass the data value to the live intent execution API 144 in response to a voice input authorizing the data value. Thus, the data processing system 102 can receive data packets from the voice navigator and response component 150 executed by the client computing device that carry the input audio signal detected by the sensor 152 of the client computing device 128. The data processing system 102 may identify a request for a candidate data value from the data packet and provide the data value as the candidate data value in response to the request.
The live intent execution API 144 may perform an action on the 3P electronic resource 134 in response to receiving the data value. In some cases, if the user interface is a voice-based user interface provided by the voice navigator and response component 150, the live intent execution API 144 may determine not to load deep links, thereby reducing computing resource utilization by avoiding having to draw or load web pages on the display device 160.
Fig. 2 is an illustration of the operation of a system 200 for secure communication in a web page. The system 200 may include one or more components of the system 100 depicted in fig. 1 or the system 400 depicted in fig. 4. System 200 may include data processing system 102. The data processing system 102 may communicate with, interface with, or interact with the 3P developer device 162. In act 202, the data processing system may receive the intent list from the 3P developer device 162. The 3P developer device 162 may provide or upload the list of intents to the data processing system 102. In act 204, the data processing system 102 can determine whether the intent list is valid. The data processing system 102 can use a verification policy to determine whether the intent list is valid. The verification policy may consider whether the code type, syntax, format, or link in the intent list is trusted. For example, if the electronic document does not contain a name/value pair, the data processing system 102 may determine that the electronic document is invalid.
If the data processing system 102 determines that the intent list is not valid, the data processing system 102 may apply the security constraints and notify the 3P developer device 162 in act 206. The data processing system 102 may generate a prompt or notification indicating that the intent list verification failed or was invalid. The data processing system 102 may further indicate the reason for the invalidation of the intent list and provide suggestions as to how to resolve, repair, or modify the intent list to validate the intent list. If the data processing system 102 determines in act 204 that the intent list is valid, the data processing system 102 may continue to store the intent list in the data store in act 208.
In act 210, the client computing device 128 may load the electronic resource in the Web browser 130. For example, the electronic resource may include a web page. In act 212, the client computing device 128 may receive a speech input. The voice navigator and response component 150 can detect voice input via a microphone or sensor of the client computing device 128. In act 214, the client computing device 128 may send a data packet including audio input corresponding to the detected voice input to the data processing system 102. In act 214, the data processing system 102 can process the audio input using natural language processing (e.g., via the NLP component 106) to determine the intent.
In act 216, the data processing system 102 may determine whether to request status information from the electronic resource. The data processing system 102 may determine whether to request state information based on the intent. If the intent corresponds to an action on the electronic resource, the data processing system 102 may determine to request state information in decision block 216. However, if the intent is not related to the electronic resource (e.g., a request to reduce volume or other request that is not related to the electronic resource), the data processing system 102 may determine to exit in act 218.
If the data processing system 102 determines that the intent relates to an action to be performed via the electronic resource, the data processing system may proceed to act 220 and request state information. The data processing system 102 may query the presence state sharing API 146 for semantic foreground state information. In act 222, the data processing system 102 may receive semantic foreground state information from the presence state sharing API 146.
In act 224, the data processing system 102 may receive the status information and determine the parameters. The data processing system 102 can access an intent list data structure to select an intent list for the electronic resource corresponding to the state information. The intent list may include actions that correspond to or are responsive to the intent determined in act 214 based on the speech input 212. The data processing system 102 can select an intent list that maps actions to link templates to identify parameters associated with the actions and the link templates.
In act 226, the data processing system 102 may receive an identifier of the client computing device 128. The data processing system 102 may receive the identifier at any point in the process. For example, the data processing system 102 may receive the identifier when requesting state information in 220, in response to loading the resource in act 210, loading the input speech in 212. In act 228, the data processing system 102 can determine a data value using the identifier and the parameter. The data processing system 102 may access one or more data sources linked to the client computing device 128 or identifier to determine, predict, select, or identify candidate data values.
In act 230, the data processing system 102 can provide the selected or candidate data value to the authorization component 142 of the client computing device 128. The authorization component 142 can execute in an overlay in the JS library 148 that prevents the electronic resource from accessing the data value prior to authorization. Authorization component 142 can receive an input (e.g., voice, keyboard, mouse, gesture, or other input) indicating whether a data value is authorized. In some cases, multiple candidate data values may be provided, and a user may select one or more data values for input.
In decision block 232, the authorization component 142 can determine whether to provide the data value to the electronic resource. If the authorization component 142 determines that the data value is authorized, the authorization component can provide the data value to the live intent execution API 234 via the JS library 148 to perform the action. The JS library may cause the on-site intent execution API 234 to complete the action via the electronic resource or 3P developer device 162.
However, if the authorization component 142 determines that the data value is not authorized, the authorization component 142 can provide an indication to the data processing system 102. In decision block 236, the data processing system 102 can determine whether to update the data value in response to the authorization component 142 not authorizing the data value. If the number of updates is less than a threshold number (e.g., 2, 3, 4, 5, or more), or based on the type of intent or preference of the third party developer device 162 indicated in the electronic resource or the list of intentions, the data processing system 102 may determine to update the value if there are other candidate values available. If data processing system 102 determines to update a data value, data processing system 102 may return to act 228 to select another data value. If data processing system 102 determines not to update the data value, data processing system 102 may proceed to act 238 and terminate the communication.
FIG. 3 is an illustration of an example method for secure communication in a mobile page. The method 300 may be performed by one or more components, systems, or elements of the system 100 depicted in fig. 1, the system 200 depicted in fig. 2, or the system 400 depicted in fig. 4. For example, method 300 may be performed by a data processing system. In act 302, the data processing system can receive an intent list. The data processing system may receive an intent list from the 3P developer device. The intent list may map the action to a linked template and indicate parameters for performing the action.
In act 304, the data processing system can verify the intent list. The data processing system may verify the intent list using a verification policy. The verification intent list may include: for example, it is determined whether the intent list includes certain types of content, code, links, or formats. If the intent list does not include prohibited content, code, or format, the data processing system may verify the intent list. The data processing system may invalidate the intent list if the intent list contains prohibited content, code, links, or formats. By invalidating certain intent lists, the data processing system may reduce security risks, errors, vulnerabilities, crashes, and wasted utilization of computing resources on the client computing device.
If the data processing system determines in act 306 that the intent list is not valid, the data processing system may proceed to act 308 to determine whether to automatically modify the intent list. The data processing system may determine whether to automatically modify the intent list based on one or more factors or policies. If the 3P developer device authorizes or instructs the data processing system to automatically modify the invalid intent list, the data processing system may determine to automatically modify the intent list. If it is determined that the reason for the intent list being invalid corresponds to a problem that the data processing system is configured to remedy, the data processing system may determine to automatically modify the intent list. For example, if the intent list is invalid due to formatting or the format of the markup language, and the data processing system is configured to reformat the intent list into a permissible format (e.g., JSON), the data processing system can continue to reformat the intent list. If the modification includes removing a reference to an unauthorized action or parameter, the data processing system may determine to automatically modify the intent list. If an aspect of the intent list that may lead to further errors or vulnerabilities needs to be removed (e.g., a field in the link template is removed), the data processing system may determine not to modify. Thus, the data processing system may determine to modify the intent list based on the number or type of validation failures.
If the data processing system determines not to automatically modify the intent list, the data processing system may proceed to act 310 and notify the 3P developer that the intent list is invalid, the reason for the intent list being invalid, and request the 3P developer to resolve the problem in the intent list.
If the data processing system determines in act 308 to automatically modify the intent list, the data processing system may proceed to act 312 and modify the intent list. The data processing system may proceed to act 312 to modify the intent list by reformatting the intent list based on the validation policy.
The data processing system may proceed to act 314 to store the intent list in a data store of the data processing system. If the data processing system determines that the intent list is valid based on the validation policy in act 306, the data processing system may proceed to 314 to store the intent list in the data store. In response to verification of the intent list or modification of the intent list, the data processing system may store the intent list in a data store of the data processing system.
In act 316, the data processing system may receive an identifier of the client computing device. The identifier may correspond to an account linked with the client computing device. The account may include information or data values associated with the client computing device. The account may include data values based on historical network utilization of the client computing device. The account may include information stored by the client computing device. The account may be stored on the data processing system or one or more external sources. The account may include information from one or more external sources or servers associated with the client computing device.
In act 318, the data processing system may receive semantic foreground state information. The data processing system may query the field state sharing API for state information. The data processing system may query the state sharing API in response to a request to perform an action. The data processing system may receive status information in response to the query.
In act 320, the data processing system may determine a parameter. The data processing system can select the intent list and identify actions and link templates. The action and link template may indicate a parameter. In act 322, the data processing system may select a data value for a parameter in the intent list based on account information associated with the identifier of the client computing device.
In act 324, the data processing system may provide the data value to an authorization component of the client computing device. The authorization component can execute in an overlay on the electronic resource such that the data value is not accessible to the electronic resource until the data value is authorized to be provided to the electronic resource. The authorization component may present the data value through an overlay, a prompt, a notification, a pop-up window, an inline frame, or an audio output. The authorization component can receive input authorizing or denying a data value. If the data value is authorized, the authorization component can pass the data value to the electronic resource through the JS library and the intent execution API to cause the electronic resource to perform an action based on the data value.
Fig. 4 is a block diagram of an example computer system 400. Computer system or computing device 400 may include or be used to implement system 100, or components thereof, such as data processing system 102. The data processing system 102 may include an intelligent personal assistant or a voice-based digital assistant. Computing system 400 includes a bus 405 or other communication component for communicating information, and a processor 410 or processing circuit coupled to bus 405 for processing information. Computing system 400 may also include one or more processors 410 or processing circuits coupled to the bus to process information. Computing system 400 also includes a main memory 410, such as a Random Access Memory (RAM) or other dynamic storage device, coupled to bus 405 for storing information and instructions to be executed by processor 415. The main memory 415 may be or include a data store 145. Main memory 415 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 410. Computing system 400 may further include a Read Only Memory (ROM)420 or other static storage device coupled to bus 405 for storing static information and instructions for processor 410. A storage device 425, such as a solid state device, magnetic disk or optical disk, may be coupled to bus 405 for persistently storing information and instructions. The storage 425 may comprise the data store 145 or be part of the data store 145.
The processes, systems, and methods described herein may be implemented by the computing system 400 in response to the processor 410 executing an arrangement of instructions contained in main memory 415. Such instructions may be read into main memory 415 from another computer-readable medium, such as storage device 425. Execution of the arrangement of instructions contained in main memory 415 causes the computing system 500 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 415. Hardwired circuitry may be used in place of or in combination with software instructions for the systems and methods described herein. The systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
Although an example computing system has been described in fig. 4, the subject matter (including the operations described in this specification) may be implemented in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them, using other types of digital electronic circuitry.
Where the system discussed herein collects or may utilize personal information about a user, the user may be provided with the following opportunities: whether or not a program or feature gathers user information (e.g., information about a user's social network, social actions, or activities; a user's preferences; or a user's location) or whether or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, the particular data may be anonymized in one or more ways prior to storing or using the particular data, such that the personal identity information may be removed when generating the parameters. For example, the identity of the user may be anonymized, such that no personal identity information of the user can be determined, or the geographic location of the user from which location information (such as a city, zip code, or state-county level) may be obtained may be generalized, such that no particular location of the user can be determined. Thus, the manner in which the user collects and/or uses information about the user may be controlled by the user.
The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more circuits of computer program instructions encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus. The computer storage media may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. When the computer storage medium is not a propagated signal, the computer storage medium can be the source or destination of the computer program instructions encoded in an artificially generated propagated signal. The computer may also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification may be implemented as operations performed by a data processing apparatus on data stored in one or more computer-readable storage devices or received from other sources.
The terms "data processing system," "computing device," "component," or "data processing device" encompass all kinds of devices, apparatuses, and machines for processing data, including: such as a programmable processor, a computer, a system on a chip, or a combination or multiple of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures. For example, the direct action API 108 or NLP component 106 and other data processing system 102 components may include or share one or more data processing devices, systems, computing devices, or processors.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., of data processing system 102)
The subject matter described herein can be implemented in a computing system that includes a back-end component (e.g., as a data processor), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include: local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer network 0).
A computing system, such as system 100 or system 400, may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network, such as network 101. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server sends data (e.g., data packets representing digital components) to the client device (e.g., for displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., the result of the user interaction) may be received from the client device at the server (e.g., received by the data processing system 102 from the client computing device 128 or the 3P developer device 162).
Although operations are depicted in the drawings in a particular order, such operations need not be performed in the particular order shown or in sequential order, and all illustrated operations need not be performed. The actions described herein may be performed in a different order.
The separation of various system components does not require separation in all embodiments, and the described program components may be included in a single hardware or software product. For example, the NLP component 106 and the direct action API 108 may be a single component, application, or program, or a logical device having one or more processing circuits, or part of one or more servers of the data processing system 102.
Having now described some illustrative embodiments, it is apparent that the foregoing description is illustrative only and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, these acts and these elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one embodiment are not intended to be excluded from a similar role in other embodiments or implementations.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including ("including"), including ("comprising"), having ("having"), including ("containing"), involving ("involving"), and variations thereof herein, is intended to encompass the items listed thereafter, equivalents thereof, and other items, as well as alternative embodiments consisting of the items listed thereafter exclusively. In one embodiment, the systems and methods described herein consist of each and every combination, or all, of one or more of the described elements, acts or components.
Any reference to an embodiment or an element or act of the systems and methods herein referred to in the singular may also encompass embodiments comprising a plurality of such elements, and any reference to any embodiment or element or act herein in the plural may also encompass embodiments comprising only one element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to a single or multiple configurations. Reference to any action or element being based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment or examples, and references to "an embodiment," "certain embodiments," "an embodiment," etc. are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment or example. As used herein, such terms do not necessarily all refer to the same embodiment. Any embodiment may be combined, inclusively or exclusively, with any other embodiment in any manner consistent with aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may indicate any single, more than one, and all of the described terms. Reference to "at least one of a 'and' B" may include 'a' only, 'B' only, and 'a' and 'B'. Such references used in connection with "including" or other open-ended terms may include other items.
Technical features in the drawings, detailed description, or any claims are followed by reference numerals, which have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, the absence of reference signs or any other elements does not have any limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing embodiments are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are intended to be embraced therein.
Claims (20)
1. A system for secure digital assistant integration with web pages, comprising:
a data processing system comprising at least one processor configured to:
receiving an intent list data structure from a third party developer device, the intent list data structure including a mapping between a plurality of actions of a digital assistant and a plurality of linked templates of an electronic resource developed by the third party developer device;
validating, via a validation policy, the electronic resource based on the intent list data structure;
receiving, from a data exchange component of an iframe of the electronic resource loaded by a client computing device, an identifier of the client computing device executing the electronic resource;
receiving a foreground state of the electronic resource from a field state sharing application programming interface;
determining a parameter based on the foreground status and the intent list data structure;
selecting a data value for the parameter from a data store based on the identifier of the client computing device;
providing the data value to an authorization component of the iframe of the electronic resource loaded on the client computing device to cause the authorization component to:
generating an authorization prompt;
receiving input from the client computing device in response to the authorization prompt; and
in response to authorization of the data value, sending the data value to a live intent execution application programming interface of the electronic resource to cause the electronic resource to perform one of the plurality of actions with the data value.
2. The system of claim 1, wherein the data exchange component executing in the iframe of the electronic resource restricts the electronic resource in a parent frame from accessing the identifier of the client computing device and the third party developer device that developed the electronic resource is prohibited from accessing the identifier of the client computing device.
3. The system of claim 1 or 2, comprising:
the data processing system to authorize the data exchange component to load in the iframe of the electronic resource in response to authentication of the electronic resource via the authentication policy.
4. The system of any preceding claim, comprising:
the data processing system is configured to verify the electronic resource based on a list of trusted sites.
5. The system of any preceding claim, comprising the data processing system to:
receiving a request from the data exchange component executed by the client computing device; and
querying the field state sharing application programming interface of the electronic resource in response to the request.
6. The system of any preceding claim, comprising the data processing system to:
receiving data packets from a voice navigator and response component executed by the client computing device, the data packets carrying input audio signals detected by a sensor of the client computing device;
identifying a request for a candidate data value from the data packet; and
in response to the request, providing the data value as the candidate data value.
7. The system of any preceding claim, comprising the data processing system to:
providing the data value to the live intent execution application programming interface to cause the live intent execution application programming interface to enter the data value into an input text box of the electronic resource.
8. The system of any preceding claim, comprising the data processing system to:
determining, based on the foreground status, a plurality of parameters to be used to perform the action provided by the electronic resource;
selecting, based on the identifier of the client computing device, a plurality of data values corresponding to the plurality of parameters; and
providing the plurality of data values to the authorization component to cause the authorization component to provide the plurality of data values to the field intent execution application programming interface, wherein the field intent execution application programming interface is configured to use the plurality of data values to bypass one or more states used by the electronic resource to perform the action.
9. The system of any preceding claim, comprising the data processing system to:
determining one or more subsequent states of the electronic resource based on the foreground state and the intent list data structure;
determining one or more parameters based on the one or more subsequent states; and
based on the identifier, selecting one or more data values for the one or more parameters before the electronic resource enters the one or more subsequent states.
10. The system of any preceding claim, comprising the data processing system to:
prior to the electronic resource requesting the data value, providing the data value for authorization by the authorization component and input to the field intent execution application programming interface.
11. The system of any preceding claim, comprising:
the data processing system is to provide the data value to the client computing device to cause the client computing device to establish a deep link with the data value and to load the deep link in a Web browser executed by the client computing device.
12. The system of any preceding claim, wherein the electronic resource comprises a web page.
13. The system of any preceding claim, comprising the data processing system to:
establishing a link with the data value based on a link template of the plurality of link templates that maps to the action of the plurality of actions; and
providing, via the data exchange component, the link to the field intent execution application programming interface.
14. A method for secure digital assistant integration with a web page, comprising:
receiving, by a data processing system comprising at least one processor, an intent list data structure from a third party developer device, the intent list data structure containing mappings between a plurality of actions of a digital assistant and a plurality of linked templates of an electronic resource developed by the third party developer device;
validating, by the data processing system, the electronic resource based on the intent list data structure via a validation policy;
receiving, by the data processing system, from a data exchange component of an iframe of the electronic resource loaded by a client computing device, an identifier of the client computing device executing the electronic resource;
querying, by the data processing system, a field state sharing application programming interface of the electronic resource;
receiving, by the data processing system, a foreground status of the electronic resource from the site status sharing application programming interface in response to the query;
determining, by the data processing system, a parameter based on the foreground status and the intent list data structure;
selecting, by the data processing system, a data value for the parameter from a data store based on the identifier of the client computing device;
providing, by the data processing system, the data value to an authorization component of the iframe of the electronic resource loaded on the client computing device to cause the authorization component to:
generating an authorization prompt;
receiving input from the client computing device in response to the authorization prompt; and
in response to authorization of the data value, sending the data value to a live intent execution application programming interface of the electronic resource to cause the electronic resource to perform one of the plurality of actions with the data value.
15. The method of claim 14, wherein the data exchange component executing in the iframe of the electronic resource restricts the electronic resource in a parent frame from accessing the identifier of the client computing device and the third party developer device that developed the electronic resource is prohibited from accessing the identifier of the client computing device.
16. The method according to claim 14 or 15, comprising:
authorizing the data exchange component to be loaded in the iframe of the electronic resource in response to authentication of the electronic resource via the authentication policy.
17. The method of any of claims 14 to 16, comprising:
the electronic resource is verified based on the list of trusted sites.
18. The method of any of claims 14 to 17, comprising:
receiving a request from the data exchange component executed by the client computing device; and
querying the field state sharing application programming interface of the electronic resource in response to the request.
19. The method of any of claims 14 to 18, comprising:
receiving data packets from a voice navigator and response component executed by the client computing device, the data packets carrying input audio signals detected by a sensor of the client computing device;
identifying a request for a candidate data value from the data packet; and
in response to the request, providing the data value as the candidate data value.
20. The method of any of claims 14 to 19, comprising:
providing the data value to the live intent execution application programming interface to cause the live intent execution application programming interface to enter the data value into an input text box of the electronic resource.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/030919 WO2020226616A1 (en) | 2019-05-06 | 2019-05-06 | Secure digital assistant integration in web pages |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112262391A true CN112262391A (en) | 2021-01-22 |
Family
ID=66625297
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980002168.7A Pending CN112262391A (en) | 2019-05-06 | 2019-05-06 | Secure digital assistant integration in web pages |
Country Status (4)
Country | Link |
---|---|
US (1) | US11361066B2 (en) |
EP (2) | EP3762889B1 (en) |
CN (1) | CN112262391A (en) |
WO (1) | WO2020226616A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11086959B2 (en) | 2019-05-06 | 2021-08-10 | Google Llc | Secure digital assistant integration in web pages |
US11748096B2 (en) * | 2020-04-24 | 2023-09-05 | K2 Software, Inc. | Interactive documentation pages for software products and features |
CN112269607A (en) | 2020-11-17 | 2021-01-26 | 北京百度网讯科技有限公司 | Applet control method, system, server and terminal device |
US20230081429A1 (en) * | 2021-09-14 | 2023-03-16 | Paypal, Inc. | Iframe injection in mobile web browser applications for web browser extension opt-in |
US20230273817A1 (en) * | 2022-02-25 | 2023-08-31 | Apple Inc. | Systems and methods for transitioning computing devices between operating states |
US20230315837A1 (en) * | 2022-03-31 | 2023-10-05 | Toshiba Global Commerce Solutions, Inc. | Inline frame content data management system |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110301982A1 (en) * | 2002-04-19 | 2011-12-08 | Green Jr W T | Integrated medical software system with clinical decision support |
US8751800B1 (en) * | 2011-12-12 | 2014-06-10 | Google Inc. | DRM provider interoperability |
US20160284011A1 (en) | 2015-03-25 | 2016-09-29 | Facebook, Inc. | Techniques for social messaging authorization and customization |
US10416854B2 (en) | 2017-03-07 | 2019-09-17 | Google Llc | Autofill for a user device |
-
2019
- 2019-05-06 US US16/466,213 patent/US11361066B2/en active Active
- 2019-05-06 CN CN201980002168.7A patent/CN112262391A/en active Pending
- 2019-05-06 EP EP19725488.1A patent/EP3762889B1/en active Active
- 2019-05-06 EP EP23170455.2A patent/EP4235456A1/en active Pending
- 2019-05-06 WO PCT/US2019/030919 patent/WO2020226616A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
EP4235456A1 (en) | 2023-08-30 |
US11361066B2 (en) | 2022-06-14 |
US20210326430A1 (en) | 2021-10-21 |
WO2020226616A1 (en) | 2020-11-12 |
EP3762889A1 (en) | 2021-01-13 |
EP3762889B1 (en) | 2023-07-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11829435B2 (en) | Secure digital assistant integration in web pages | |
US11924644B2 (en) | Secure communication in mobile digital pages | |
EP3762889B1 (en) | Secure digital assistant integration in web pages | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
WO2021107951A1 (en) | Interfacing with applications via dynamically updating natural language processing | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
US20240144928A1 (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications | |
EP3729259B1 (en) | Assessing applications for delivery via an application delivery server | |
KR102664371B1 (en) | System and method for validating trigger keywords in sound-based digital assistant applications | |
US20230267928A1 (en) | Indexing Application Actions for Voice-Based Execution | |
KR20240067283A (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |