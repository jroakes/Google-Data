US7289978B2 - Substituting parameter markers for literals in database query language statement to promote reuse of previously generated access plans - Google Patents
Substituting parameter markers for literals in database query language statement to promote reuse of previously generated access plans Download PDFInfo
- Publication number
- US7289978B2 US7289978B2 US10/389,315 US38931503A US7289978B2 US 7289978 B2 US7289978 B2 US 7289978B2 US 38931503 A US38931503 A US 38931503A US 7289978 B2 US7289978 B2 US 7289978B2
- Authority
- US
- United States
- Prior art keywords
- query language
- database query
- language statement
- dbms
- literal
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 238000006467 substitution reaction Methods 0.000 claims abstract description 54
- 239000003550 marker Substances 0.000 claims abstract description 36
- 238000000034 method Methods 0.000 claims abstract description 14
- 230000001737 promoting effect Effects 0.000 claims abstract description 12
- 238000004590 computer program Methods 0.000 claims abstract description 7
- 230000006870 function Effects 0.000 claims description 35
- 238000012360 testing method Methods 0.000 claims description 34
- 238000004891 communication Methods 0.000 claims description 6
- 230000002085 persistent effect Effects 0.000 claims description 4
- 238000012545 processing Methods 0.000 description 22
- 238000003874 inverse correlation nuclear magnetic resonance spectroscopy Methods 0.000 description 7
- 238000005457 optimization Methods 0.000 description 5
- 239000008186 active pharmaceutical agent Substances 0.000 description 4
- 238000007781 pre-processing Methods 0.000 description 4
- 238000012986 modification Methods 0.000 description 3
- 230000004048 modification Effects 0.000 description 3
- 230000000694 effects Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000008569 process Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 238000001228 spectrum Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/242—Query formulation
- G06F16/2433—Query languages
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99932—Access augmentation or optimizing
Definitions
- the present invention relates to the field of database management systems (DBMSs), and more particularly to DBMSs which utilize a database query language statement cache.
- DBMSs database management systems
- a database management system is a computer program which stores, retrieves, and deletes data from a database in response to user requests. Requests for information from a database are made in the form of a query (also referred to as a “statement” or “command”), which is a stylized question.
- a DBMS may process requests from locally executed applications or from one or more remote clients by way of a data network. From a technical standpoint, DBMSs can differ widely.
- the terms relational, network, flat, and hierarchical all refer to the way a DBMS organizes information internally. The internal organization can affect how quickly and flexibly information can be extracted from a database.
- RDBMS relational database management system
- An RDBMS stores data in the form of related tables.
- RDBMSs are powerful because they require few assumptions about how data is related or how data will be extracted from the relational database. As a result, the same database can be viewed in many different ways.
- An important feature of relational systems is that a single database can be spread across several tables. This differs from flat-file databases, in which each database is self-contained in a single table. Almost all full-scale database systems are RDBMSs. Small database systems, however, use other designs that provide less flexibility in posing queries.
- DBMS queries may be written in various database query languages.
- a well known database query language that is supported by a wide variety of leading DBMS products, such as DB2® from IBM® and Microsoft® Access, for example, is Structured Query Language (SQL).
- SQL is typically used in association with relational DBMSs.
- SQL comprises two primary components, namely, a Data Definition Language (DDL) and a Data Manipulation Language (DML).
- DDL Data Definition Language
- DML Data Manipulation Language
- the DDL comprises statements for creating database tables and for creating indices which facilitate access to those tables, for example.
- the DML on the other hand, comprises statements for creating, inserting, selecting and deleting rows in tables.
- SQL the present description focuses on the DML.
- DBMSs have a statement cache that is used to optimize the processing of database query language statements (which, in the case of SQL, make up the DML).
- a statement cache stores the N most recently executed database query language statements and the N “access plans” corresponding to these statements (where N is an integer).
- An access plan describes the operations that must be performed by the DBMS to effect a particular statement (e.g. open file X; scan the file for search pattern Y, etc.) and may be proprietary.
- a query optimizer (or simply “optimizer”) reads a new database query language statement and subsequently generates an access plan for that statement. Both the statement and its corresponding access plan are then stored in the statement cache.
- the query optimizer is implemented as a software module which is operationally integrated with the DBMS.
- the statement cache may be referred to as an “SQL statement cache”.
- incoming statements are typically compared to previously received statements stored in the statement cache.
- the DBMS may load and execute the previously-computed access plan associated with the stored statement rather than computing an access plan afresh.
- This reuse of access plans tends to improve DBMS efficiency because the amount of processing that is required to identify and load an existing access plan is typically significantly less than the processing required to compute an access plan afresh.
- DBMSs To determine whether an incoming database query language statement is functionally equivalent to a stored statement, known DBMSs typically perform a textual comparison. That is, a new statement is only considered to be functionally equivalent to a previously received statement if it is textually identical to that statement (disregarding insignificant differences such as different spacing). Accordingly, when an incoming database query language statement differs from a previous statement by even one significant character, it will be assumed that the new statement is not functionally equivalent to the previous statement, and a fresh access plan will be computed. Potential efficiency gains may go unrealized as a result.
- a literal is a hard coded value, such as “abc” or 8.0, in a statement (in the case of SQL, these are referred to as SQL literals). If a new database query language statement differing from a previous statement only in the value of one or more literals is received, the cached access plan associated with the previous statement will not be reused despite the fact that it may be functionally similar to the access plan that will be computed anew. Disadvantageously, potential DBMS efficiency gains may not be realized in this situation.
- An object of the present invention is to promote reuse of previously generated access plans (which are typically stored in a database query language statement cache) if the difference between a newly received database query language statement and a previously received database query language statement is the value of one or more literals.
- a method, computer program product and computing device for promoting reuse of previously generated access plans in a DBMS are disclosed.
- Database query language statements containing literals are amended so as to substitute a parameter marker for each literal.
- Amended statements are provided to the DBMS.
- Parameters comprising the substituted literals and a substitution indicator indicating that the substitution has been performed are typically also provided to the DBMS.
- the DBMS may assess the soundness of the substitutions that are performed. Soundness may be measured in terms of the semantic correctness of the amended statement and the likelihood that the literal substitution will improve DBMS efficiency. If a substitution is unsound, the DBMS may obtain and optimize (i.e. select an access plan for) the original version of the amended database query language statement. Otherwise, the amended statement is optimized.
- database query language statements originally differing only in the value of one or more literals may become functionally equivalent, and the reuse of cached, previously generated access plans is thus promoted. Improvements in DBMS efficiency may thus be achieved.
- the DBMS is a relational DBMS
- the database query language is Structured Query Language (SQL). This is not required however.
- a method for promoting reuse of previously generated access plans by a DBMS includes generating an amended database query language statement with a parameter marker substituted for a literal.
- a method for promoting the reuse of previously generated access plans by a DBMS includes receiving an amended database query language statement with a parameter marker substituted for a literal.
- a computing device for promoting reuse of previously generated access plans by a DBMS.
- the device includes a processor and persistent storage memory in communication with the processor storing processor readable instructions adapting the device to generate an amended database query language statement with a parameter marker substituted for a literal.
- a computing device for promoting reuse of previously generated access plans by a DBMS.
- the device includes a processor and persistent storage memory in communication with the processor storing processor readable instructions adapting the device to receive an amended database query language statement with a parameter marker substituted for a literal.
- FIG. 1 illustrates a data processing system including a database management system (DBMS) for promoting reuse of previously computed access plans according to embodiments of the present invention
- DBMS database management system
- FIG. 2 shows operation for pre-processing an SQL statement performed by the data processing system of FIG. 1 ;
- FIG. 3 shows operation for execution of the pre-processed SQL statement performed by the data processing system of FIG. 1 ;
- FIG. 4 shows operation for execution of an SQL statement performed by the data processing system of FIG. 1 .
- FIG. 1 illustrates a data processing system 10 exemplary of the present invention.
- Data processing system 10 includes a server 12 in communication with client computing devices 20 and 30 over a data network 18 .
- the server 12 is a conventional network capable server computing device including: a processor; memory; a network interface such as a modem or Ethernet connection interface; a user input device such as a keyboard and/or mouse; and a display device such as a CRT or liquid crystal display (all not shown).
- the server 12 hosts an RDBMS 14 which facilitates access to a relational database 16 .
- the RDBMS 14 is SQL compatible (i.e. capable of processing SQL statements).
- the RDBMS 14 and relational database 16 may be stored in any suitable combination of volatile and non-volatile memory, and may be loaded from a computer program product having a readable medium, such as a removable optical or magnetic disk 22 . It can be appreciated that the invention can be adapted for use with any type of DBMS.
- the RDBMS 14 may be a conventional RDBMS which has been configured or modified to implement the embodiments of the present invention in the manner described below.
- the RDBMS 14 includes a SQL statement cache 30 and query optimizer 32 .
- the SQL statement cache 30 stores the N most recently executed SQL statements along with the N associated access plans.
- the query optimizer 32 optimizes the processing of incoming SQL queries by the RDBMS 14 . For each new (i.e. not previously received) SQL statement, the query optimizer 32 computes an access plan for that statement and causes both the statement and the access plan to be stored in the statement cache 30 .
- the optimizer 32 also compares each incoming statement to previously received statements stored in the cache 30 and, if the incoming SQL statement is identical to a stored SQL statement, the optimizer 32 directs the RDBMS 14 to load and execute the previously-computed access plan associated with that stored statement (rather than computing an access plan afresh). It will be appreciated that components other than the cache 30 and optimizer 32 may be included with the RDBMS 14 .
- Client computing devices 20 and 30 are conventional network aware computers, each including: a processor; memory; a network interface; a user input device; and a display (all not shown).
- Client devices 20 and 30 host a client application 24 and a client run-time RDBMS component 26 .
- the client application 24 and client run-time RDBMS component 26 are stored in any suitable combination of volatile and non-volatile memory of client devices 20 , 30 , and may be loaded from a computer program product having a readable medium, such as a removable optical or magnetic disk 28 .
- the client application 24 is a software application which requires access to data stored in relational database 16 , such as a travel agent's airline ticket reservation client-side application for example.
- the client application 24 includes API calls which are made for the purpose of accessing or manipulating data stored in the relational database 16 .
- the client run-time RDBMS component 26 implements the API calls made from within the client application 24 to cause the desired data to be accessed or manipulated by communicating with the RDBMS 14 of server 12 . In the present configuration, this communication is by way of a data network 18 using an operative client/server protocol.
- the client run-time RDBMS component 26 effectively abstracts (i.e. makes transparent) the presence of the data network 18 to the client application 24 .
- the client RDBMS run-time component 26 may be a conventional RDBMS run-time client component, such as the DB2 run-time client (DB2RTC) for example, which has been configured or modified to implement the present invention as described herein.
- DB2RTC DB2 run-time client
- the data network 18 interconnecting RDBMS 14 and client computing devices 20 and 30 may for example be a local area network (LAN); a private intranet; the Internet; or other types of data networks known to those skilled in the art.
- the data network 18 supports an operative client/server protocol used by the system 10 for intercommunication between the server 12 and client devices 20 and 30 .
- FIGS. 2 to 4 represent processing which occurs at client computing device 20 or 30 ( FIG. 1 ) of the present embodiment while FIG. 4 represents processing which occurs at the server 12 .
- FIG. 2 and FIG. 3 can be performed by server 12 of FIG. 1 .
- FIG. 2 shows a flowchart of steps 200 representative of the pre-processing of an SQL statement by the client run-time RDBMS component 26
- FIG. 3 shows a flowchart of steps 300 representative of the execution of a pre-processed SQL statement by the client run-time RDBMS component 26
- steps 400 representative of the execution of an SQL statement by the RDBMS 14 . It will be appreciated that the steps 200 , 300 and 400 are all executed at run time for each SQL statement in a client application 24 , and that steps 300 and 400 are executed substantially in lockstep.
- an SQL statement to be executed is received at the client run-time RDBMS component 26 as a result of the invocation of an appropriate API call from within client application 24 .
- This SQL statement represents a search within an employees table of the relational database 16 for the names of engineers earning more than $100,000.00 and having more than five years of service.
- step S 204 the client run-time RDBMS component 26 examines received SQL statement for the presence of an SQL literal.
- the flowchart of steps 200 for this particular statement will be completed (that is, operation ends).
- three literals are found: “ENGINEER”, 100000.0, and 5. Accordingly, steps S 206 to S 212 are executed for the purpose of converting the hard-coded literal values into data parameters.
- step S 206 the originally received statement is stored for possible future recollection. The reason for this step will become apparent in due course.
- step S 208 the received SQL statement is amended so as to substitute parameter markers for the SQL literals.
- each parameter marker is cast to the data type of the substituted SQL literal.
- SQL is a strongly typed language
- an error may be thrown at the RDBMS 14 in the event of a type mismatch between the searched variable (i.e. the variable left of the equals sign) and the literal.
- Typecasting may reduce the likelihood of such errors.
- typecasting is not required.
- typecasting may be omitted in an alternative embodiment employing a database query language other than SQL which is not strongly typed, or in the event that the risk of errors from type mismatches is known to be low or tolerable in the circumstances.
- the substituted SQL literals are stored for use as parameters (step S 210 ).
- step S 212 the amended SQL statement is flagged to indicate that the SQL literal substitution has been made. It will be appreciated that, in the present embodiment, this flagging step does not entail any actual modification of the SQL statement. Rather, an internal flag suitable for passing from the client device 20 or 30 to the server 12 according to the operative client/server protocol is set to indicate SQL literal substitution. The pre-processing of SQL statement (1) is thus completed.
- the pre-processed statement (1′) is executed in steps 300 and 400 with the steps 300 representing processing occurring at the client RDBMS run-time component 26 of client device 20 or 30 and steps 400 occurring at the RDBMS 14 of server 12 .
- initial step S 302 the amended SQL statement (1′) is submitted to the RDBMS 14 by the client run-time RDBMS component 26 along with the three parameters comprising the substituted SQL literals indicated below:
- steps S 302 and S 402 entail intercommunication between the client run-time RDBMS component 26 and the RDBMS 14 which, in the present embodiment, occurs across data network 18 using the operative client/server protocol.
- step S 404 the RDBMS 14 checks whether the received SQL statement (1′) has been flagged to indicate that at least one SQL literal substitution has occurred.
- the statement is submitted to the query optimizer 32 ( FIG. 1 ) in step S 406 for access plan determination.
- the flag does in fact indicate that at least one SQL literal substitution has occurred. Accordingly, step S 408 is executed next.
- step S 408 an examination of the amended SQL statement (1′) and the received parameters occurs to ascertain whether the substitution was sound.
- soundness is measured in terms of the semantic correctness of the amended statement and the likelihood that the SQL literal substitutions will improve RDBMS efficiency.
- What is sought to be detected (and avoided) in this step is a “dangerous” amended SQL statement which, when executed by the RDBMS 14 , may in fact be semantically incorrect or less efficient than the original SQL statement.
- the soundness examination of the present embodiment includes two tests: a “trailing wildcard test” and an “overloaded function parameter test”. It will be understood that alternative embodiments may employ only one or the other of these tests, alone or in conjunction with other tests, to establish soundness; or an alternative test or tests may be employed.
- the “trailing wildcard test” is a determination of whether the replaced literal includes a trailing wildcard character.
- rows which do not match the hard-coded prefix of the SQL literal can be “filtered away” during execution, thus reducing the amount of data that must be searched.
- SELECT NAME FROM EMPLOYEES WHERE FIRSTNAME “A %”
- any rows in the employees table in which the value of the FIRSTNAME column does not have the requisite prefix “A” may be filtered away to promote searching efficiency.
- the SQL literal “A %” is replaced with a parameter marker, however, no such filtering can occur. Accordingly, the execution of this statement (2) will likely be more efficient than the execution of a corresponding amended SQL statement in which the SQL literal has been replaced with a parameter marker.
- the “overloaded function parameter test” is used in object oriented programming environments to ascertain whether the substituted SQL literal comprises a parameter to a function with an overloaded function name. In such cases, it is usually preferable for the RDBMS 14 to process the original SQL statement in order to ensure that the results are semantically correct. Failure to do so may cause an access plan to be erroneously reused.
- Each of the statements (3a) and (3b) includes an invocation of a function named “INVERSE.” In actuality, however, two separate functions are represented.
- the function of statement (3a) returns a numerical result representative of the reciprocal of the input parameter value (e.g. 0.2).
- the function of statement (3b) returns a string representative of a color that is the opposite of the color represented by the input parameter in the color spectrum (e.g., “GREEN”).
- GREEN a string representative of a color that is the opposite of the color represented by the input parameter in the color spectrum
- an appropriate warning is issued to the client run-time RDBMS component 26 in step S 412 .
- This may entail the transmission of a “warning” message with a predetermined format from the server 12 to the client device 20 or 30 in accordance with the operative client/server protocol for example.
- the warning would be detected at the client device 20 or 30 in step S 304 ( FIG. 3 ); in response, the client device submits the original version of the SQL statement saved in step S 206 ( FIG. 2 ) to the RDBMS 14 in step S 306 for processing in lieu of the amended statement.
- the issuance of a warning message and subsequent resubmission of the SQL statement in its original form are transparent to the client application 24 .
- steps S 408 and S 410 it is determined in steps S 408 and S 410 that the substitution of SQL literals in statement (1′) is sound as both the “trailing wildcard test” and the “overloaded function parameter test” are met. Accordingly, the amended SQL statement (1′) is submitted to the query optimizer 32 for optimization.
- the query optimizer 32 in a conventional manner, checks the SQL statement cache 30 to determine whether the newly received SQL statement is functionally equivalent to a previously received statement in order to ascertain whether a previously computed access plan may be reused. In the present case, since the statement (1′) has not previously been received, the optimizer computes a new access plan for the statement, which for convenience is referenced herein as “access plan AP 1 ”. The query optimizer 32 then stores both the statement (1′) and the access plan AP 1 in the SQL statement cache in a conventional manner.
- the RDBMS 14 executes the access plan AP 1 and returns the employee data retrieved from the relational database 16 to the client device 20 or 30 , where it is used by the client application 24 in accordance with its objective.
- This SQL statement represents another search within the employees database, with somewhat different search criteria.
- the statement (4) is processed in steps 200 described above in order to effect the substitution of parameter markers for any SQL literals.
- the statement (4′) is subsequently optimized by the RDBMS 14 at step S 406 ( FIG. 4 ), it is compared with the statements stored in the SQL statement cache 32 as described previously. In this case, however, the comparison will yield a match between the amended statement (4′) and the cached SQL statement (1′).
- This match allows the cached access plan AP 1 to be reused by the optimizer.
- the computation of a new access plan, as would have been necessary without the SQL literal substitution is not performed, and the efficiency of the RDBMS 14 may be improved as a result of the reuse of access plan AP 1 .
- client application 24 and client run-time RDBMS component 26 can be executed on a client computing device 20 or 30 separate from the server 12 .
- These components may be executed on the same physical computing device as the RDBMS 14 in alternative “standalone” embodiments.
- steps 200 and 300 may occur on the same physical device as the steps 400 .
- client run-time RDBMS component 26 as is employed in the above-described embodiment in view of the fact that such components 26 may be capable of interacting with either a local RDBMS or a remote RDBMS.
- Such embodiments may not require a data network 18 .
- testing for the soundness of parameterized statements may be omitted. Omission of these steps may be desirable, for example, to further enhance efficiency in cases where it is known that the SQL statements to be processed are not likely to result in unsound substitutions (e.g. when typecasting of substituted parameters is known to be accurately performed so as to avoid problems with overloaded function names). It should be appreciated, however, that if the nature of the SQL statements to be processed is not known, some risk of performance degradation due to unsound substitutions may be introduced by this omission.
- the DBMS need not be relational. Rather, any other form of DBMS may be employed which has a database query language statement cache and which reuses cached access plans in the event that statements which are functionally equivalent to previously received statements are received.
- operative database query language need not be SQL. Rather, any other database query language may be used, provided that it employs literals and parameter markers which may be substituted therefor (or equivalent constructs, regardless of their names).
Abstract
Description
SELECT NAME FROM EMPLOYEES WHERE JOB_LEVEL=“ENGINEER” AND SALARY>100000.0 AND YEARS_OF_SERVICE>5 (1)
SELECT NAME FROM EMPLOYEES WHERE JOB_LEVEL=CAST(? AS VARCHAR(2000)) AND SALARY>CAST(? AS DOUBLE) AND YEARS_OF_SERVICE>CAST (? AS INT) (1′)
-
- Parameter 1: “ENGINEER”
- Parameter 2: 100000.0
- Parameter 3: 5
SELECT NAME FROM EMPLOYEES WHERE FIRSTNAME=“A %” (2)
VALUES(INVERSE(5.0)) (3a)
VALUES(INVERSE(“RED”)) (3b)
X=INVERSE(?) (3′)
VALUES(INVERSE CAST(? AS DOUBLE)) (3a′)
VALUES(INVERSE CAST(? AS VARCHAR(2000))) (3b′)
SELECT NAME FROM EMPLOYEES WHERE JOB_LEVEL=“MANAGER” AND SALARY>140000.0 AND YEARS_OF_SERVICE>10 (4)
SELECT NAME FROM EMPLOYEES WHERE JOB_LEVEL=CAST(? AS VARCHAR(2000)) AND SALARY>CAST(? AS DOUBLE) AND YEARS_OF_SERVICE>CAST (? AS INT) (4′)
-
- Parameter 1: “MANAGER”
- Parameter 2: 140000.0
- Parameter 3: 10
Claims (5)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CA2,382,714 | 2002-04-19 | ||
CA002382714A CA2382714A1 (en) | 2002-04-19 | 2002-04-19 | Substituting parameter markers for literals in a database query language statement to promote reuse of previously generated access plans |
Publications (2)
Publication Number | Publication Date |
---|---|
US20030200204A1 US20030200204A1 (en) | 2003-10-23 |
US7289978B2 true US7289978B2 (en) | 2007-10-30 |
Family
ID=28796485
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/389,315 Expired - Fee Related US7289978B2 (en) | 2002-04-19 | 2003-03-13 | Substituting parameter markers for literals in database query language statement to promote reuse of previously generated access plans |
Country Status (2)
Country | Link |
---|---|
US (1) | US7289978B2 (en) |
CA (1) | CA2382714A1 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070219973A1 (en) * | 2006-03-15 | 2007-09-20 | International Business Machines Corporation | Dynamic statement processing in database systems |
US20120278305A1 (en) * | 2011-04-28 | 2012-11-01 | International Business Machines Corporation | Dynamic merging of executable structures in a database system |
US20140136515A1 (en) * | 2009-04-24 | 2014-05-15 | Nhn Business Platform Corporation | Method and system for managing database |
US9116717B2 (en) | 2011-05-27 | 2015-08-25 | Cylance Inc. | Run-time interception of software methods |
US10205684B2 (en) | 2012-02-14 | 2019-02-12 | Salesforce.Com, Inc. | Smart messaging for computer-implemented devices |
US20220414099A1 (en) * | 2021-06-28 | 2022-12-29 | Microsoft Technology Licensing, Llc | Using query logs to optimize execution of parametric queries |
Families Citing this family (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050119999A1 (en) * | 2003-09-06 | 2005-06-02 | Oracle International Corporation | Automatic learning optimizer |
US20050114505A1 (en) | 2003-11-26 | 2005-05-26 | Destefano Jason M. | Method and apparatus for retrieving and combining summarized log data in a distributed log data processing system |
US8234256B2 (en) * | 2003-11-26 | 2012-07-31 | Loglogic, Inc. | System and method for parsing, summarizing and reporting log data |
US7440935B2 (en) * | 2004-05-05 | 2008-10-21 | International Business Machines Corporation | Method and system for query directives and access plan hints |
US8161037B2 (en) * | 2004-06-03 | 2012-04-17 | International Business Machines Corporation | Method for autonomically generating a query implementation that meets a defined performance specification |
US8161038B2 (en) * | 2004-10-29 | 2012-04-17 | International Business Machines Corporation | Maintain optimal query performance by presenting differences between access plans |
US8032522B2 (en) * | 2006-08-25 | 2011-10-04 | Microsoft Corporation | Optimizing parameterized queries in a relational database management system |
US20080091733A1 (en) * | 2006-10-16 | 2008-04-17 | Scott Shelton | Reusable data query language statements |
US7970757B2 (en) * | 2008-03-17 | 2011-06-28 | International Business Machines Corporation | Computer program product for database query optimization |
KR101036865B1 (en) * | 2008-12-15 | 2011-05-25 | 한국과학기술정보연구원 | System for SPARQL-Query Processing Using the Parameterized-SPARQL-Query in based DBMS |
US10339137B2 (en) * | 2015-12-07 | 2019-07-02 | Futurewei Technologies, Inc. | System and method for caching and parameterizing IR |
CN107025263A (en) * | 2017-01-16 | 2017-08-08 | 中国银联股份有限公司 | Sentence analytic method for database statement |
CN111078726B (en) * | 2019-12-16 | 2022-11-04 | 厦门网宿有限公司 | Operation method of data access layer, server and storage medium |
CN111797112B (en) * | 2020-06-05 | 2022-04-01 | 武汉大学 | PostgreSQL preparation statement execution optimization method |
Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5257366A (en) | 1990-03-27 | 1993-10-26 | International Business Machines Corporation | Query language execution on heterogeneous database servers using a bind-file bridge between application and database languages |
US5596748A (en) | 1994-09-29 | 1997-01-21 | International Business Machines Corporation | Functional compensation in a heterogeneous, distributed database environment |
US5640555A (en) | 1994-09-29 | 1997-06-17 | International Business Machines Corporation | Performance optimization in a heterogeneous, distributed database environment |
US5649168A (en) | 1994-09-29 | 1997-07-15 | International Business Machines Corporation | Computer program product for a query pass through in a heterogeneous distributed data base environment |
US5950188A (en) * | 1996-11-14 | 1999-09-07 | Sybase, Inc. | Database system with methods for executing system-created internal SQL command statements |
US5995957A (en) | 1997-02-28 | 1999-11-30 | International Business Machines Corporation | Query optimization through the use of multi-column statistics to avoid the problems of column correlation |
US6199047B1 (en) * | 1997-12-31 | 2001-03-06 | Csg Systems, Inc. | Apparatus and method for an event rating engine |
CA2283052A1 (en) * | 1999-09-22 | 2001-03-23 | Ibm Canada Limited-Ibm Canada Limitee | A system and process for evaluating the performance of a database system |
US6356887B1 (en) * | 1999-06-28 | 2002-03-12 | Microsoft Corporation | Auto-parameterization of database queries |
US6556990B1 (en) * | 2000-05-16 | 2003-04-29 | Sun Microsystems, Inc. | Method and apparatus for facilitating wildcard searches within a relational database |
US6567803B1 (en) * | 2000-05-31 | 2003-05-20 | Ncr Corporation | Simultaneous computation of multiple moving aggregates in a relational database management system |
US6598038B1 (en) * | 1999-09-17 | 2003-07-22 | Oracle International Corporation | Workload reduction mechanism for index tuning |
US6985904B1 (en) * | 2002-02-28 | 2006-01-10 | Oracle International Corporation | Systems and methods for sharing of execution plans for similar database statements |
-
2002
- 2002-04-19 CA CA002382714A patent/CA2382714A1/en not_active Abandoned
-
2003
- 2003-03-13 US US10/389,315 patent/US7289978B2/en not_active Expired - Fee Related
Patent Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5257366A (en) | 1990-03-27 | 1993-10-26 | International Business Machines Corporation | Query language execution on heterogeneous database servers using a bind-file bridge between application and database languages |
US5987465A (en) | 1994-09-29 | 1999-11-16 | International Business Machines Corporation | System, method and computer program product for positioned update support |
US5640555A (en) | 1994-09-29 | 1997-06-17 | International Business Machines Corporation | Performance optimization in a heterogeneous, distributed database environment |
US5706499A (en) | 1994-09-29 | 1998-01-06 | International Business Machines Corporation | Functional compensation in a heterogeneous, distributed database environment |
US5764949A (en) | 1994-09-29 | 1998-06-09 | International Business Machines Corporation | Query pass through in a heterogeneous, distributed database environment |
US5768577A (en) | 1994-09-29 | 1998-06-16 | International Business Machines Corporation | Performance optimization in a heterogeneous, distributed database environment |
US5930793A (en) | 1994-09-29 | 1999-07-27 | International Business Machines Corporation | Performance optimization in a heterogeneous, distributed database environment |
US5943671A (en) | 1994-09-29 | 1999-08-24 | International Business Machines Corporation | Compensation for security procedures in different database management systems |
US5649168A (en) | 1994-09-29 | 1997-07-15 | International Business Machines Corporation | Computer program product for a query pass through in a heterogeneous distributed data base environment |
US5596748A (en) | 1994-09-29 | 1997-01-21 | International Business Machines Corporation | Functional compensation in a heterogeneous, distributed database environment |
US5950188A (en) * | 1996-11-14 | 1999-09-07 | Sybase, Inc. | Database system with methods for executing system-created internal SQL command statements |
US6272487B1 (en) | 1997-02-28 | 2001-08-07 | International Business Machines Corporation | Query optimization through the use of multi-column statistics to avoid the problems of non-indexed column correlation |
US5995957A (en) | 1997-02-28 | 1999-11-30 | International Business Machines Corporation | Query optimization through the use of multi-column statistics to avoid the problems of column correlation |
US6199047B1 (en) * | 1997-12-31 | 2001-03-06 | Csg Systems, Inc. | Apparatus and method for an event rating engine |
US6356887B1 (en) * | 1999-06-28 | 2002-03-12 | Microsoft Corporation | Auto-parameterization of database queries |
US6598038B1 (en) * | 1999-09-17 | 2003-07-22 | Oracle International Corporation | Workload reduction mechanism for index tuning |
CA2283052A1 (en) * | 1999-09-22 | 2001-03-23 | Ibm Canada Limited-Ibm Canada Limitee | A system and process for evaluating the performance of a database system |
US6556990B1 (en) * | 2000-05-16 | 2003-04-29 | Sun Microsystems, Inc. | Method and apparatus for facilitating wildcard searches within a relational database |
US6567803B1 (en) * | 2000-05-31 | 2003-05-20 | Ncr Corporation | Simultaneous computation of multiple moving aggregates in a relational database management system |
US6985904B1 (en) * | 2002-02-28 | 2006-01-10 | Oracle International Corporation | Systems and methods for sharing of execution plans for similar database statements |
Non-Patent Citations (1)
Title |
---|
Post SQL (Postgre SQL 7.1 User's Guide, 2001 by Postgre SQL Global Development Group, hereafter "Post SQL"). * |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070219973A1 (en) * | 2006-03-15 | 2007-09-20 | International Business Machines Corporation | Dynamic statement processing in database systems |
US20140136515A1 (en) * | 2009-04-24 | 2014-05-15 | Nhn Business Platform Corporation | Method and system for managing database |
US9753977B2 (en) * | 2009-04-24 | 2017-09-05 | Naver Corporation | Method and system for managing database |
US20120278305A1 (en) * | 2011-04-28 | 2012-11-01 | International Business Machines Corporation | Dynamic merging of executable structures in a database system |
US9116717B2 (en) | 2011-05-27 | 2015-08-25 | Cylance Inc. | Run-time interception of software methods |
US10205684B2 (en) | 2012-02-14 | 2019-02-12 | Salesforce.Com, Inc. | Smart messaging for computer-implemented devices |
US20220414099A1 (en) * | 2021-06-28 | 2022-12-29 | Microsoft Technology Licensing, Llc | Using query logs to optimize execution of parametric queries |
US11934398B2 (en) * | 2021-06-28 | 2024-03-19 | Microsoft Technology Licensing, Llc | Using query logs to optimize execution of parametric queries |
Also Published As
Publication number | Publication date |
---|---|
US20030200204A1 (en) | 2003-10-23 |
CA2382714A1 (en) | 2003-10-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7289978B2 (en) | Substituting parameter markers for literals in database query language statement to promote reuse of previously generated access plans | |
US6006220A (en) | Determining the optimal access path for a query at execution time using an actual value for each variable in a query for estimating a filter factor | |
US7873666B2 (en) | Methods and computer systems for data conversion | |
US7188116B2 (en) | Method and apparatus for deleting data in a database | |
US5930793A (en) | Performance optimization in a heterogeneous, distributed database environment | |
US7171408B2 (en) | Method of cardinality estimation using statistical soft constraints | |
US7167848B2 (en) | Generating a hierarchical plain-text execution plan from a database query | |
US6370530B1 (en) | Computer program product for functional compensation in a heterogeneous, distributed database environment | |
US8117174B2 (en) | Database system providing high performance database versioning | |
US7653665B1 (en) | Systems and methods for avoiding database anomalies when maintaining constraints and indexes in presence of snapshot isolation | |
US6477525B1 (en) | Rewriting a query in terms of a summary based on one-to-one and one-to-many losslessness of joins | |
US6119128A (en) | Recovering different types of objects with one pass of the log | |
US20080256026A1 (en) | Method For Optimizing And Executing A Query Using Ontological Metadata | |
US20080140696A1 (en) | System and method for analyzing data sources to generate metadata | |
US9171036B2 (en) | Batching heterogeneous database commands | |
US20060242115A1 (en) | System and method for an improved type inference | |
US20070073675A1 (en) | Database query translation | |
US20090164415A1 (en) | Method and system for managing database | |
US7596584B2 (en) | Predicate based group management | |
US6401089B2 (en) | Method for maintaining exception tables for a check utility | |
US6374257B1 (en) | Method and system for removing ambiguities in a shared database command | |
US20050137856A1 (en) | Full-text index module consistency checking | |
US20070088684A1 (en) | Partial updating in a database proxy driver | |
US10838947B2 (en) | Consistency check for foreign key definition | |
US20050114404A1 (en) | Database table version upload |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IBM CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LIMOGES, JOSEPH SERGE;BEGG, ROBERT A.;EVANS, DOMINIQUE J.;AND OTHERS;REEL/FRAME:013888/0364Effective date: 20020418 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LIMOGES, JOSEPH SERGE;BEGG, ROBERT A.;EVANS, DOMINIQUE J.;AND OTHERS;REEL/FRAME:019523/0872Effective date: 20020418 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20151030 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |