US11565412B2 - Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot - Google Patents
Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot Download PDFInfo
- Publication number
- US11565412B2 US11565412B2 US16/622,027 US201816622027A US11565412B2 US 11565412 B2 US11565412 B2 US 11565412B2 US 201816622027 A US201816622027 A US 201816622027A US 11565412 B2 US11565412 B2 US 11565412B2
- Authority
- US
- United States
- Prior art keywords
- kernels
- control policy
- robot
- dynamical systems
- data points
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B25—HAND TOOLS; PORTABLE POWER-DRIVEN TOOLS; MANIPULATORS
- B25J—MANIPULATORS; CHAMBERS PROVIDED WITH MANIPULATION DEVICES
- B25J9/00—Programme-controlled manipulators
- B25J9/16—Programme controls
- B25J9/1656—Programme controls characterised by programming, planning systems for manipulators
- B25J9/1664—Programme controls characterised by programming, planning systems for manipulators characterised by motion, path, trajectory planning
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS
- G05B19/00—Programme-control systems
- G05B19/02—Programme-control systems electric
- G05B19/42—Recording and playback systems, i.e. in which the programme is recorded from a cycle of operations, e.g. the cycle of operations being manually controlled, after which this record is played back on the same machine
- G05B19/423—Teaching successive positions by walk-through, i.e. the tool head or end effector being grasped and guided directly, with or without servo-assistance, to follow a path
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/241—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches
- G06F18/2413—Classification techniques relating to the classification model, e.g. parametric or non-parametric approaches based on distances to training or reference patterns
- G06F18/24133—Distances to prototypes
- G06F18/24143—Distances to neighbourhood prototypes, e.g. restricted Coulomb energy networks [RCEN]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/40—Software arrangements specially adapted for pattern recognition, e.g. user interfaces or toolboxes therefor
- G06F18/41—Interactive pattern learning with a human teacher
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/008—Artificial life, i.e. computing arrangements simulating life based on physical entities controlled by simulated intelligence so as to replicate intelligent life forms, e.g. based on robots replicating pets or humans in their appearance or behaviour
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G06N3/0454—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS
- G05B19/00—Programme-control systems
- G05B19/02—Programme-control systems electric
- G05B19/42—Recording and playback systems, i.e. in which the programme is recorded from a cycle of operations, e.g. the cycle of operations being manually controlled, after which this record is played back on the same machine
- G05B19/425—Teaching successive positions by numerical control, i.e. commands being entered to control the positioning servo of the tool head or end effector
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS
- G05B2219/00—Program-control systems
- G05B2219/30—Nc systems
- G05B2219/36—Nc in input of data, input key till input tape
- G05B2219/36433—Position assisted teaching
-
- G—PHYSICS
- G05—CONTROLLING; REGULATING
- G05B—CONTROL OR REGULATING SYSTEMS IN GENERAL; FUNCTIONAL ELEMENTS OF SUCH SYSTEMS; MONITORING OR TESTING ARRANGEMENTS FOR SUCH SYSTEMS OR ELEMENTS
- G05B2219/00—Program-control systems
- G05B2219/30—Nc systems
- G05B2219/39—Robotics, robotics to robotics hand
- G05B2219/39271—Ann artificial neural network, ffw-nn, feedforward neural network
Definitions
- some techniques enable a user to kinesthetically teach the robot to follow a particular trajectory. For instance, the user may physically manipulate a robot arm to cause a reference point of an end effector of the robot arm to traverse the particular trajectory—and that particular traversed trajectory may thereafter be repeatable by the robot arm.
- a camera or other device may obtain visual samples of the movement to determine a trajectory of a reference point of the user's arm, which may then be repeated by a robot arm.
- those and other techniques may suffer from one or more drawbacks, such as those described herein.
- the classical way to record a particular trajectory is to generate a time-indexed trajectory, e.g., of individual waypoints.
- This recorded trajectory can be used as a robot control policy.
- the policy may cause the robot to identify the closest individual waypoint of the time-indexed trajectory, move the end effector reference point to that way point, and then move it along the remainder of the trajectory.
- this technique may not yield optimal results in terms of time required to traverse the trajectory and/or robot wear and tear.
- a robot operating in accordance with such a simple control policy may not be well-suited to deal with dynamic obstacles in the environment.
- robot motion during a task is formulated as a differential equation, rather than as a time-indexed trajectory.
- a dynamical systems policy can, by construction, adapt to changes in dynamic environments, making it suitable for use in unstructured environments.
- existing dynamical systems techniques employ non-convex optimization for dynamic fitting and constructing Lyapunov functions, and consequently are prone to sub-optimal local minima.
- Techniques are described herein for utilizing vector-valued Reproducing Kernel Hilbert spaces (RKHS), contraction analysis, and convex optimization to learn stable, non-linear dynamical systems for robot control.
- RKHS Kernel Hilbert spaces
- techniques described herein are used to generate a dynamical systems control policy that includes one or more vector fields. These vector fields may, in effect, induce a contraction tube around a robot trajectory that is generated from imitation learning.
- a plurality of kernels may be generated (e.g., randomly, selected, etc.), each with local equilibria that are placed at a desired location of a set of locations, such as a set of waypoints recorded during imitation learning.
- these kernels may be matrix-valued kernels, and may take various forms, such as curl-free kernels or Gaussian separable kernels.
- techniques described herein may begin with any base matrix-valued kernel, determine an RKHS associated with the kernel, and use the RKHS as a subspace of vector fields that are guaranteed to vanish on a desired set of equilibrium points, e.g., at least some of the waypoints generated during imitation learning.
- one or more vector fields may be generated based on the plurality of kernels, e.g., based on their associated RKHS's.
- convex optimization may be employed on the kernels, e.g., to fit them to Gaussian mixture models. Additionally or alternatively, convex optimization may be applied when generating a linear combination of the kernels and/or to the linear combination after generated.
- convex optimization as contrasted to non-convex optimization, is that it has finite dimensionality.
- a robot is instructed to traverse its end effector—more particularly, a reference point of its end effector—along a particular robot trajectory.
- the particular robot trajectory was learned previously, e.g., using imitation learning, and that techniques described herein were used to generate a robot control policy for this particular trajectory.
- the end effector reference point starts out, even if well outside the intended trajectory, it may follow the vector fields (e.g., gradient field) defined in the control policy towards a contraction tube induced around the intended trajectory by the control policy.
- the robot can use the policy to avoid the obstacle and merge back into the contract tube to resume the intended trajectory.
- control policies e.g., vector fields
- control policies can be quickly updated and/or recomputed as needed, e.g., to account for changes in an environment (perturbations) in which a robot operates.
- other techniques for generating dynamical systems control policies often have sub-optimal local minima, e.g., due to being generated using non-convex optimization.
- Some implementations of this specification are directed to methods and apparatus for generating a robot control policy based on data points that are based on robot sensor data generated during one or more “kinesthetic teachings,” such as physical manipulations of the robot by a user or by visual observed movements of a user's arm.
- a control policy may regulate both robot motion and robot interaction with the environment.
- a physical manipulation of a robot may involve the user physically interacting with a robot to cause a reference point of the robot to move along a trajectory from a starting point to a target point.
- the user may cause a reference point of an end effector of the robot to move to a “target point” that is an electrical outlet (i.e., a kinesthetic teaching of placing a plug in the electrical outlet).
- This user-caused movement results in the robot traversing a multi-dimensional trajectory that can be described (e.g., by collected sensor data of the robot) in both robot work space and configuration space.
- a reference point of the user's appendage may be observed to determine a similar multi-dimensional trajectory that can be described (e.g., by collected sensor data of the robot) in both robot work space and configuration space.
- users may also draw multi-dimensional trajectories on a graphical user interface, which may be deemed a kinesthetic teaching.
- the term “demonstration” refers to a group of data points for a corresponding kinesthetic teaching of a robot.
- data point refers to data that describes a state of a robot at a corresponding time of the data point, and that also optionally describes additional parameters at the corresponding time.
- the state of the robot may be described in joint space (e.g., as the positions of each of the actuators of the robot) and/or task space (e.g., as the position and orientation of an end effector or other component of the robot).
- the state of the robot for a given data point can be based on sensor data from sensor(s) (e.g., joint position sensors) of the robot at a corresponding point in time (e.g., the state may strictly conform to the sensor data at the point in time).
- the additional parameter(s) that may also be described by a data point include, for example, stiffness and/or other parameter(s).
- the additional parameter(s) may be based on user input, other robot sensor data, etc.
- various further parameters may be assigned (i.e., stored in association with in one or more computer readable media) to each of a plurality of data points of a demonstration. For example, damping parameter(s), smoothness parameter(s), a prior weight, and/or a potential gradient may be assigned to a data point as described in detail herein. Additional description is provided herein of demonstrations and data points.
- generating the control policy includes using the data points of one or more demonstrations in learning a non-parametric potential function for use in the control policy, where the learned non-parametric potential function has a global minimum that is based on a target point(s) (i.e., “end” data point(s)) of the demonstration(s) used in generating the control policy.
- the data points are further used in learning a dissipative field for use in the control policy.
- constrained optimization problem(s) are solved using the data points as known parameters.
- the generated control policy enables a robot to move from any initial configuration to a desired target position: (1) from any of a plurality of “starting” states; (2) while adapting its motion in real-time to changing environmental conditions; and/or (3) while adapting stiffness and/or other parameters of the robot.
- Implementations of this specification are related to various improvements in generating such a control policy that regulates both motion control and robot interaction with the environment and/or that includes a learned non-parametric potential function and/or dissipative field.
- the improvements improve performance of the control policy, improve learning of the potential function and/or dissipative field of the control policy, and/or achieve other benefits.
- Some implementations additionally or alternatively relate to automatically determining a potential gradient for one or more (e.g., all) data points, and generating a control policy using the automatically determined potential gradient.
- a method performed by a control system of a robot includes receiving a group of data points generated based on sensor data from one or more sensors obtained during imitation learning of a robot trajectory.
- the imitation learning includes physical manipulation of a reference point from an initial point to a target point.
- the method further includes generating a dynamical systems control policy that regulates both robot motion and robot interaction with an environment.
- Generating the dynamical systems control policy includes generating a plurality of kernels based on the group of data points.
- the kernels are generated based on convex optimization.
- Generating the dynamical systems control policy further includes generating one or more vector fields based on the plurality of kernels.
- the one or more vector fields collectively form the dynamical systems control policy.
- the method further includes controlling one or more robots based on the dynamical systems control policy.
- the dynamical systems control policy includes one or more differential equations.
- the plurality of kernels are matrix-valued kernels.
- equilibria of the plurality of kernels are placed at respective data points of the group of data points.
- the plurality of kernels comprise neural networks. In other implementations, the plurality of kernels comprise curl-free kernels. In yet other implementations, the plurality of kernels comprise Gaussian separable kernels.
- the one or more vector fields comprise a plurality of Reproducing Kernel Hilbert spaces (RKHS) associated with the plurality of kernels.
- RKHS Reproducing Kernel Hilbert spaces
- implementations may include one or more non-transitory computer readable storage media storing instructions executable by a processor (e.g., a central processing unit (CPU) or graphics processing unit (GPU)) to perform a method such as one or more of the methods described above.
- a processor e.g., a central processing unit (CPU) or graphics processing unit (GPU)
- CPU central processing unit
- GPU graphics processing unit
- implementations may include a system of one or more computers and/or one or more robots that include one or more processors operable to execute stored instructions to perform a method such as one or more (e.g., all) aspects of one or more of the methods described above.
- FIG. 1 illustrates an example environment in which a robot control policy may be generated according to various implementations disclosed herein.
- FIG. 2 illustrates an example of a robot that may be utilized in FIG. 1 , an example object, and illustrates a user physically manipulating the robot during a kinesthetic teaching.
- FIG. 3 A illustrates seven S-shaped demonstration trajectories of robotic components.
- FIG. 3 B depicts a learned contracting vector field generated using curl-kernels kernels for the S-shape of FIG. 3 A .
- FIG. 3 C depicts an incrementally stable contracting vector field for the S-shaped demonstration trajectories of the robotic components in FIG. 3 A .
- FIGS. 4 A, 5 A, 6 A, and 7 A illustrate seven demonstration trajectories of robotic components for each of a plurality of shapes.
- FIGS. 4 B, 5 B, 6 B, and 7 B depict a learned contracting vector field generated using Gaussian separable kernels for each of the plurality of shapes in FIGS. 4 A, 5 A, 6 A, and 7 A .
- FIGS. 4 C, 5 C, 6 C, and 7 C depict a learned contracting vector field generated using curl-kernels kernels for each of the plurality of shapes in FIGS. 4 A, 5 A, 6 A, and 7 A .
- FIG. 8 A is a graph that illustrates how training time for a control system scales with increasing dimensionality and a fixed number of random features in a random two-dimensional subspace.
- FIG. 8 B is a graph that illustrates how training time for a control system scales with an increasing number of random features and a fixed dimensionality in a random two-dimensional subspace.
- FIG. 9 is a flowchart illustrating an example method according to various implementations disclosed herein.
- FIG. 10 schematically depicts an example architecture of a robot.
- FIG. 11 schematically depicts an example architecture of a computer system.
- Implementations of this specification are related to various improvements in generating a control policy that regulates both motion control and robot interaction with the environment and/or that includes a learned non-parametric potential function and/or dissipative field.
- the improvements improve performance of the control policy, improve learning of the potential function and/or dissipative field of the control policy, and/or achieve other benefits.
- a continuous nonlinear dynamical system evolving in a space, n may be represented as:
- a trajectory x(t,x 0 ) is generated by integrating the dynamical system of Equation 1 over a time horizon.
- the following optimization may be performed over a non-parametric family, Z , of vector-valued maps vanishing on the desired equilibria, Z:
- J f ⁇ f ⁇ x denotes the Jacobian of the vector-valued map ⁇ and the notation A ⁇ I implies that the matrix A is negative definite with eigenvalues no larger than ⁇ for some ⁇ >0.
- the first term of Equation 1 uses a least squares criterion to orient the vector field along the demonstration trajectories.
- the second term of Equation 1 controls smoothness of the vector field.
- the ⁇ >0 term is a regularization parameter that balances the first term and the second term of Equation 1.
- the constraints of Equation 2 ensure incremental stability. Additionally, the constraints of Equation 2 help induce a contraction tube around an intended trajectory, such that the dynamical system evolution from a large set of initial conditions returns to the intended trajectory.
- the optimization problem set forth in Equation 1 and Equation 2 is performed over the non-parametric spaces of smooth vector-valued functions .
- the non-parametric spaces is rooted in vector-valued Reproducing Kernel Hilbert Space (RKHS), which are generated by matrix-valued kernel functions.
- RKHS Vector-valued Reproducing Kernel Hilbert Space
- curl-free kernels may be utilized.
- the resulting vector field may be a gradient flow.
- RKHS properties may be used to construct a subspace of , denoted by Z , of vector-valued functions that vanish on the set of points of desired equilibria, Z.
- the optimization problem, set forth in Equation 1 and Equation 2 is performed over Z , where Z is the set of points of desired equilibria.
- the RKHS properties may imply a Representor Theorem, where the Representor Theorem specifies the form of the optimal vector field, and reduces the optimization problem, set forth in Equations 1 and Equation 2, to a finite dimensional convex optimization problem.
- random feature approximation may be utilized. By using the random feature approximation to matrix-valued kernels, training time of the learnt dynamical system may be significantly improved.
- One aspect of the present disclosure is a technique for performing the optimization problem, set forth in Equation 1 and Equation 2, to ensure stability in the dynamical system using a Lyapunov analysis.
- a system is said to be globally asymptotically stable if solution trajectories x(t,x 0 ) from any starting point x 0 converge to x, as t ⁇ . In some implementations, a system is said to be locally asymptotically stable if there a ball with radius r around x * where all initial states flow to x * .
- Lyapunov's direct method is a classical framework for verifying stability properties of nonlinear dynamical systems. If a suitable positive-definite scalar function can be found that decreases along the trajectories of the system, then the evolution of the system can be thought of as continuously dissipating a generalized notion of energy, eventually reaching an equilibrium point as a consequence. A ball rolling down a mountainous landscape to the deepest point in a valley is a useful mental image of a system evolving along an energy landscape induced by a Lyapunov function.
- Lyapunov theorems prove existence of Lyapunov functions for stable systems.
- Lyapunov theory is largely unconstructive: it does not prescribe how to find Lyapunov functions for verifying the stability of a given general nonlinear system.
- stable linear systems admit a quadratic Lyapunov function that can be found via semi-definite programming. If a polynomial dynamical system admits a polynomial Lyapunov function, then one can search for it using sum-of-squares techniques which also reduce to instances of semi-definite programming.
- Value functions found by approximate dynamic programming can be used as candidate Lyapunov functions since by definition they encode “cost-to-go” which decreases along the system dynamics.
- Particularly relevant to this disclosure are problems like Imitation Learning and Inverse Optimal Control where cost functionals are unknown, or in settings where closed-loop dynamics of policies without corresponding value functions needs to be studied.
- Another aspect of the present disclosure is a technique for performing the optimization problem, set forth in Equation 1 and Equation 2, to ensure stability in the dynamical system using incremental stability and contraction analysis.
- Incremental stability is concerned with the convergence of system trajectories with respect to each other, as opposed to stability with respect to a single equilibrium, as utilized in the Lyapunov analysis.
- Contraction analysis derives sufficient conditions under which the displacement between any two trajectories x(t,x 0 ) and x(t,x 1 ) starting from the initial conditions x 0 and x 1 will go to zero, or the target position.
- the object ⁇ x may be an infinitesimal spatial displacement between neighboring trajectories at a fixed time. Accordingly, the rate of change of the corresponding infinitesimal squared distance, ⁇ x T ⁇ x, can be expressed as:
- any infinitesimal length ⁇ x ⁇ converges exponentially to zero as time goes to infinity.
- This convergence implies that in a contraction region, i.e., the set of x's where Equation 4 holds true, trajectories will tend to converge towards an intended trajectory.
- the finite equilibrium is unique and all of the trajectories converge to the finite equilibrium.
- contraction analysis may more broadly consider generalized distances of the form ⁇ x T M(x) ⁇ x induced by a symmetric, positive definite matrix function M(x).
- Another aspect of the present disclosure is a technique for performing the optimization problem, set forth in Equation 1 and Equation 2, to ensure stability in the dynamical system for feedback of robotic motion during a task, e.g., reaching for an object located in a dynamic environment, by utilizing differential equations.
- the dynamical system may be modeled using differential equations, as opposed to using time-indexed trajectories.
- This approach offers several advantages. First, by modeling the system using differential equations, a better generalization of a dynamical systems control policy may be generated because the control policy captures the underlying dynamics of the system rather than memorizing a set of demonstration trajectories. Second, the dynamical system control policy may adapt to changes in a dynamic environment, thus it is suitable for use in an unstructured environment. There are various approaches to modeling these dynamical systems using differential equations.
- DMPs Dynamic Movement Primitives
- DMPs are the most widely used dynamical system approaches used for both imitation learning and reinforcement learning.
- the dynamical system defined by DMPs is composed of two main terms: a nonlinear term to accurately encode a given demonstration trajectory, and a linear term that acts as a PD controller.
- a nonlinear term to accurately encode a given demonstration trajectory
- a linear term that acts as a PD controller.
- the phase variable in a DMP dynamical system make the system a time-varying system, which may make the DMP dynamical system sensate to perturbations.
- DMPs may only be trained from one degree-of-freedom of a demonstration trajectory at a trajectory. Accordingly, a DMP dynamical system does not provide any advantages in terms of training time for multiple training demonstrations and increasing dimensionality as compared to other techniques and approaches disclosed herein.
- SEDS Stable Estimator of Dynamical Systems
- SEDS is another widely used dynamical system approach for learning nonlinear dynamical systems from a set of demonstration trajectories.
- SEDS may utilize a Gaussian mixture model to represent the dynamical system control policy, and may impose constraints on means and covariance of Gaussian mixtures to ensure global asymptotic stability of the trained model.
- the stability in SEDS is based on a simple quadratic Lyapunov function as disclosed herein.
- SEDS may only model trajectories whose distances to the target point decreases monotonically in time.
- CLF-DM Control Lyapunov Function-based Dynamic Movements
- CLF-DM is another dynamical system approach for learning nonlinear dynamical systems.
- CLF-DM may learn a parametric Lyapunov function from a set of given demonstration trajectories.
- Various regression techniques may be utilized to learn an unstable dynamical system from the set of given demonstration trajectories.
- the learned control Lyapunov function may be utilized to derive a command to stabilize the learned unstable dynamical system from the set of given demonstration trajectories.
- SEDS and CLF-DM involve non-convex optimization for dynamics fitting and constructing Lyapunov functions respectively. Therefore, SEDS and CLF-DM are prone to sub-optimal local minima.
- the drawbacks of the DMP, SEDS, and CLF-DM approaches resulted in the development of a new approach.
- RKHS Kernel Hilbert Space
- a Hilbert Space is an RKHS of vector fields in n if for any v ⁇ n , the linear functional that maps ⁇ to v T ⁇ (x) is continuous. Any RKHS vector field over n can be associated with a matrix-valued kernel function K: n ⁇ n ⁇ n ⁇ n . In other words, for any inputs x,y in n , K(x,y) returns an n ⁇ n matrix.
- any kernel K uniquely determines an RKHS which admits K as the reproducing kernel.
- standard learning problems in a vector-valued RKHS can be turned into a finite dimensional optimization problem using a natural matrix-vector generalization of the classical Representer Theorem.
- ⁇ i 1 l K ⁇ ( x , x i ) ⁇ ⁇ i ( Equation ⁇ 6 )
- L is an arbitrary loss function (which can also be an indicator function encoding arbitrary constraints on point evaluation)
- ⁇ >0 is a regularization parameter.
- ⁇ i , ⁇ ik ⁇ n L is an arbitrary loss function (which can also be an indicator function encoding arbitrary constraints on point evaluation) and ⁇ >0 is a regularization parameter.
- Equation 7 implies that the optimization problem, set forth in Equation 1 and Equation 2, can be reduced to a finite dimensional regression problem involving Linear Matrix Inequalities (LMIs) over the variables ⁇ i , ⁇ ik .
- L an arbitrary loss function
- the first type of matrix-valued kernel to consider are Gaussian separable kernels
- the second type of matrix-valued kernel to consider are curl-free kernels.
- Gaussian separable kernels K ⁇
- K ⁇ Gaussian separable kernels
- K ⁇ ( x , y ) e - ⁇ x - y ⁇ 2 2 2 ⁇ ⁇ 2 L for a positive definite n ⁇ n matrix L.
- curl-free kernels may be defined by the Hessian of the scalar Gaussian kernel:
- a subspace of RKHS vector fields may vanish at one or more desired points. These desired points are equilibria of the dynamical system to be learned by the control policy.
- Z ⁇ x* 1 . . . x* p ⁇ be a set of points.
- K Z is a closed subspace of and itself an RKHS associated a modified kernel function K Z . From this, a formula is derived for K Z (x,y) in Proposition 2.
- this approach may provide faster solutions to the optimization problem, set forth in Equation 1 and Equation 2, by using random feature approximations.
- the size of the problem using the full kernel expansion in Equation 7 grows as ln, the number of demonstration points times the dimensionality of the problem.
- training time is slow for moderately long demonstrations, even in a low-dimensional setting.
- the learnt dynamical system is slow to evaluate and integrate at inference time. Accordingly, this approach may be modified by using random feature approximation to ensure optimal performance at inference time.
- a vector-valued RKHS map can be a reparameterized as follows:
- the number of random approximation features, D may depend on quality-time tradeoffs for a particular robotic application.
- a feature map may be defined for approximating the kernels of Equation 8 and Equation 9. This may include a matrix-valued feature map for Gaussian separable kernels and curl-free kernels, and a feature map for random features vanishing on a point set.
- the matrix-valued feature map for Gaussian separable kernels and curl-free kernels may define the random scalar feature map ⁇ (x): n ⁇ s as:
- Equation 12 induces a low-rank approximation to the Gaussian kernel (with bandwidth ⁇ ). Other shift invariant kernels also admit such approximations.
- Equation 12 implies matrix-valued feature map approximations of: K ⁇ ( x,y ) ⁇ ⁇ ( x ) T ⁇ ⁇ ( y ), K cf ( x,y ) ⁇ c ⁇ ( x ) T ⁇ c ⁇ ( y ) for the Gaussian separable kernels of Equation 8 and the curl-free kernels of Equation 9, respectively, the associated feature maps may take the form:
- ⁇ ⁇ ( x ) ⁇ ⁇ ( x ) ⁇ I ( 13 )
- ⁇ cf ( x ) 2 D [ sin ⁇ ( w 1 T ⁇ x + b 1 ) ⁇ w 1 T ⁇ sin ⁇ ( w D T ⁇ x + b D ) ⁇ w D T ] ( 14 )
- ⁇ denotes a Kronecker product.
- ⁇ Z (x) vanishes on Z.
- ⁇ Z (x) vanishes on Z.
- a regression with LMI constraints may be performed.
- the learned vector field may have the form:
- Equation 1 J ⁇ j z denote the n ⁇ n Jacobian matrix of ⁇ i Z . Then, the optimization problem, set forth in Equation 1 and Equation 2, reduces to:
- a regression with LMI constraints may be performed on the reduced optimization problem, set forth in Equation 17 and Equation 18.
- the regression solves the problems set forth herein while ensuring optimal performance at inference time.
- the contraction constraints in Equation 18 may be enforced only for a subsample of points. Slack variables may be added to ensure feasibility.
- FIG. 1 an example environment is illustrated in which a robot control policy, which may include one or more contracting vector fields learned using techniques described herein, may be generated according to various implementations described herein.
- the example environment includes one or more robots 180 and a control policy system 120 .
- the control policy system 120 is illustrated as separate from the robot(s) 180 , in some implementations one or more aspects of the control policy system 120 may be implemented by a corresponding one of the one or more robots 180 (e.g., by one or more processors of the robot).
- each of the robot(s) 180 may include an instance of the control policy system 120 .
- one or more (e.g., all) aspects of the control policy system 120 are implemented on a computing system that is separate from the robot(s) 180 , such as one or remote computing devices and/or computing systems in network communication with the robot(s) 180 .
- one or more aspects of the control policy system 120 may be implemented by remote computing device(s), the robot(s) 180 may transmit (via one or more networks) data from demonstration(s) to the remote computing devices, the remote computing device(s) may generate the control policy based on the transmitted data, then transmit the generated control policy back to the robot(s) 180 .
- sensor data is generated by the robot.
- the sensor data is provided to the control policy system 120 .
- the control policy system 120 generates a group of data points based on the sensor data of the kinesthetic teaching and uses the group of data points in generating a control policy, e.g., by learning a contracting vector field based on a plurality of kernels as described herein.
- the control policy is provided for use by one or more of the robot(s) 180 (the same robot of the kinesthetic teaching and/or additional robot(s)).
- Such robot(s) 180 use the control policy to selectively control one or more of its actuators based on the control policy.
- control policy may be invoked by such robot(s) 180 in response to detection of an object associated with the control policy, a task associated with the control policy, etc.—and used by the robot in regulating both motion and interaction with the environment.
- sensor data from multiple kinesthetic teachings are provided to the control policy system 120 and utilized by the system 120 in generating a single control policy, such as the contracting vector fields depicted in FIGS. 4 B, 5 B, 6 B, and 7 B , and in FIGS. 4 C, 5 C, 6 C, and 7 C .
- the sensor data from each of the kinesthetic teachings may be utilized to generate a corresponding demonstration/group of data points.
- Sensor data from multiple kinesthetic teachings may all be provided by the same robot and/or by different robots.
- the control policy system 120 includes a data engine 122 and a learning engine 124 .
- the data engine 122 samples a distributed group of data points and provides them to learning engine 124 for use in generating a control policy, e.g., by learning a contracting vector field based on a plurality of kernels as described herein.
- the data engine 122 additionally or alternatively automatically generates a potential gradient for a group of data points, assigns the potential gradient to the data points of the group, and provides the assigned potential gradient to learning engine 124 for use in generating a control policy.
- the learning engine 124 generates a control policy using one or more groups of data points that are each based on robot sensor data from a corresponding kinesthetic teaching.
- the learning engine 124 utilizes the group(s) of data points in learning a non-parametric potential function, such as the contracting vector fields depicted in FIGS. 4 B, 5 B, 6 B, and 7 B , and in FIGS. 4 C, 5 C, 6 C, and 7 C , for use in the control policy.
- the non-parametric potential function may have a global minimum that is based on target point(s) of the group(s) of data points.
- the learning engine 124 further utilizes the group(s) of data points in learning a dissipative field for use in the control policy. In some implementations, the learning engine 124 solves constrained optimization problem(s) in learning the potential function and/or the dissipative field. While the global minimum of a learned potential function will be based on target point(s) of the groups(s) of data points, it is understood that in many situations it will not strictly conform to the target point(s). Moreover, where multiple target point(s) of multiple group(s) are provided, it is understood that those target point(s) may not all strictly conform to one another.
- FIG. 2 illustrates an example of a robot 280 A that may be one of the robot(s) 180 utilized in FIG. 1 .
- FIG. 2 also illustrates a user 200 physically grasping an end effector 286 of the robot 280 A during physical manipulation of the robot 280 A by the user.
- a spray can 205 resting on a surface 209 .
- the illustrated robot 280 A includes a base 282 and eight actuators 284 a - h that provide degrees of freedom for the robot and provide the robot 280 A with kinematic redundancy.
- Robot 280 A may include other actuators, such as one or more actuators that control opening/closing of actuable members of end effector 286 , but those are not labeled in FIG. 2 for the sake of clarity and brevity.
- Robot 280 A may be physically manipulated by the user 200 to cause the robot 280 A traverse any one of a plurality of possible trajectories when moving a reference point of end effector 286 from a starting location to a target location.
- the robot 280 A may be in a gravity compensated mode during all or portions of the physical manipulation of the robot 280 A by the user.
- the trajectory 201 of FIG. 2 illustrates a trajectory followed by a reference point of the end effector 286 during the demonstration (the trajectory is dictated by the physical manipulation of the robot 280 A by the user 200 ).
- the demonstration started with the reference point at a starting point 202 and ends, as shown in FIG. 2 , with the reference point at a target point 203 .
- Sensor data may be generated by the robot 280 A during the demonstration, such as sensor data that indicates the pose (i.e., the position and optionally the orientation) of the end effector 286 .
- the sensor data that indicates the pose of the end effector may be, for example, sensor data from one or more position sensors associated with actuators 284 a - h that control the pose of the end effector.
- the sensor data may be utilized to generate the data points.
- the data points may be described in joint space (e.g., as the positions of each of the actuators 284 a - h ) and/or task space (e.g., as the position and orientation of the end effector 286 , as derived from the position sensors).
- robot 280 A may also include and/or be in communication with one or more user interface input devices, such as a button or other user interface element located on an exterior surface of the robot 280 A, a virtual user interface element provided via a tablet or other computing device in communication with the robot 280 A, and/or a microphone included with the robot 280 A and/or in communication with the robot.
- a user may provide user interface input via the user interface element to, for example: indicate the initiation and/or conclusion of a demonstration.
- robot 280 A is illustrated in FIG. 2
- additional and/or alternative robots may be utilized, including robots having other robot arm forms, robots having a humanoid form, robots that move via one or more wheels (e.g., other self-balancing robots), and so forth.
- grasping end effector 286 is illustrated in FIG. 2
- additional and/or alternative end effectors may be utilized.
- a user may operate a graphical user interface of a computing device (e.g., touching a touchscreen with a finger or stylus, using a mouse, etc.) to draw one or more trajectories for reference point of end effector 186 from a starting location to a target location.
- a user's appendage such as the user's arm, could also be captured and used to generate one or more trajectories.
- FIG. 3 A illustrates seven S-shaped demonstration trajectories of robotic components.
- the demonstration trajectories of the robotic components may be generated using various methods.
- the demonstration trajectories of the robotic components may be based on robot sensor data generated during a kinesthetic teaching of one or more robots.
- the demonstration trajectories of the robotic components may be based on handwriting samples recorded on a tablet, a personal computer, a laptop, or the like.
- the demonstration trajectories of the robotic components may be based on data points obtained from a database, data repository, or the like.
- the control policy system 120 may learn a control policy based on the demonstration trajectories of the robotic components for any pattern.
- the control policy system 120 may determine the starting point and the target point. Each of the demonstration trajectories have a different starting point, but have the same target point. This induces a robust control policy for the control policy system 120 to drive one or more robots by modeling a desired motion for a dynamical system at a kinematic level. Further, the control policy system may determine a pose, or position and orientation, of the end effector 286 in task space, or a position of each of the actuators 284 a - h in joint space.
- FIG. 3 B depicts a learned contracting vector field for the S-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the S-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an S-shaped contraction tube is induced about the S-shape, as an intended trajectory, as a result of generating the contracting vector field using curl-free kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 3 B .
- Each of the generated contracting vector field, the induced S-shaped contraction tube, and a resulting gradient flow of a potential field based on the largest eigenvalue of the Jacobian of ⁇ may define the control policy for the S-shape based on the S-shaped demonstration trajectories of FIG. 3 A .
- the end effector may follow the contracting vector field defined in the control policy towards the S-shaped contraction tube induced around the intended trajectory for the S-shape as defined by the control policy.
- the end effector of the robot may adapt to the dynamic environment faster based on the contours of the gradient flow.
- the robot can use the control policy for the S-shape to avoid the obstacle and merge back into the S-shape contraction tube to resume the intended trajectory.
- the control policy for the S-shape acts as a function of the target point by creating a region of stability for the intended trajectory around the demonstration trajectories.
- FIG. 3 C depicts an incrementally stable contracting vector field for the S-shaped demonstration trajectories of the robotic components in FIG. 3 A .
- FIG. 3 C utilizes the contracting vector field, S-shaped contraction tube, and the resulting gradient flow of FIG. 3 B to illustrate how an end effector may use the intended trajectory to reach the target point (e.g., the origin (0,0) of FIG. 3 C ) no matter the starting point.
- the target point e.g., the origin (0,0) of FIG. 3 C
- a first sample starting point is depicted at the beginning of a white line in FIG. 3 C .
- the first sample starting point is near a beginning of the S-shape.
- an end effector of a robot with the first sample starting point follows the streamlines and the gradient flow to the beginning of the S-shape. From this point, the end effector of the robot with the first sample starting point follows the S-shaped contraction tube to reach the target point.
- a second sample starting point is depicted at the beginning of a grey line in FIG. 3 C .
- the second sample starting point is near a first curve of the S-shape.
- a third sample starting point is depicted at the beginning of a black line in FIG. 3 C .
- the third sample starting point is near a mid-point of the S-shape.
- an end effector of a robot with the third sample starting point follows the streamlines and the gradient flow to the mid-point of the S-shape. From this point, the end effector of the robot with the third sample starting point follows the S-shaped contraction tube to reach the target point.
- control policy system is incrementally stabilized because it sets up a region of stability around the demonstration trajectories for a given shape, pattern, or combination thereof.
- This incremental stability allows the control policy system to better generalize, from any starting point, a control policy and “pull” perturbations toward the intended trajectory in a dynamic environment should the robot encounter an obstacle, e.g., a moving or transient object in the dynamic environment.
- FIGS. 4 A, 5 A, 6 A, and 7 A illustrate seven demonstration trajectories of robotic components for each of a plurality of shapes.
- the demonstration trajectories of the robotic components in FIGS. 4 A, 5 A, 6 A, and 7 A may be generated using various methods.
- the demonstration trajectories of the robotic components for each of the shapes may be based on robot sensor data generated during a kinesthetic teaching of one or more robots.
- the demonstration trajectories of the robotic components for each of the shapes may be based on handwriting samples recorded on a tablet, a personal computer, a laptop, or the like.
- the demonstration trajectories of the robotic components for each of the shapes may be based on data points obtained from a database, data repository, or the like.
- the control policy system 120 may learn a control policy based on the demonstration trajectories of the robotic components for any pattern.
- the control policy system 120 may determine the starting point and the target point for each of the shapes. Each of the demonstration trajectories have a different starting point, but have the same target point. This induces a robust control policy for the control policy system 120 to drive one or more robots by modeling a desired motion for a dynamical system at a kinematic level. Further, the control policy system may determine a pose, or position and orientation, of the end effector 286 in task space, or a position of each of the actuators 284 a - h in joint space for each of the shapes.
- the sensor data may include one or more of an average velocity (S mm/second) of the demonstration trajectories, an average movement duration (T seconds) of the demonstration trajectories, an average position deviation (pos-dev) relative to each of the demonstration trajectories, and an average velocity deviation (speed-dev) relative to each of the demonstration trajectories.
- Each of the demonstration trajectories of the robotic components for each shape include 1000 position (x) data points and 1000 velocity ( ⁇ dot over (x) ⁇ ) data points.
- FIG. 4 A illustrates seven A-shaped demonstration trajectories of robotic components.
- the A-shaped demonstration trajectories of the robotic components are illustrated as handwriting samples recorded on a tablet, that is not meant to be limiting.
- the A-shaped demonstration trajectories may be generated using kinesthetic teaching or generated using any other technique disclosed herein.
- a contracting vector field may be generated based on Gaussian separable kernels, as shown in FIG. 4 B , or generated based on curl-free kernels, as shown in FIG. 4 C .
- FIG. 5 A illustrates seven C-shaped demonstration trajectories of robotic components.
- the A-shaped demonstration trajectories of the robotic components are illustrated as handwriting samples recorded on a tablet, that is not meant to be limiting.
- the C-shaped demonstration trajectories may be generated using kinesthetic teaching or generated using any other technique disclosed herein.
- a contracting vector field may be generated based on Gaussian separable kernels, as shown in FIG. 5 B , or generated based on curl-free kernels, as shown in FIG. 5 C .
- FIG. 6 A illustrates seven G-shaped demonstration trajectories of robotic components.
- the G-shaped demonstration trajectories of the robotic components are illustrated as handwriting samples recorded on a tablet, that is not meant to be limiting.
- the G-shaped demonstration trajectories may be generated using kinesthetic teaching or generated using any other technique disclosed herein.
- a contracting vector field may be generated based on Gaussian separable kernels, as shown in FIG. 6 B , or generated based on curl-free kernels, as shown in FIG. 6 C .
- FIG. 7 A illustrates seven J-shaped demonstration trajectories of robotic components.
- the J-shaped demonstration trajectories of the robotic components are illustrated as handwriting samples recorded on a tablet, that is not meant to be limiting.
- the J-shaped demonstration trajectories may be generated using kinesthetic teaching or generated using any other technique disclosed herein.
- a contracting vector field may be generated based on Gaussian separable kernels, as shown in FIG. 7 B , or generated based on curl-free kernels, as shown in FIG. 7 C .
- FIGS. 4 B, 5 B, 6 B, and 7 B depict a learned contracting vector field generated using Gaussian separable kernels for each of the plurality of shapes in FIGS. 4 A, 5 A, 6 A, and 7 A .
- the learned contracting vector field generated using Gaussian separable kernels for each of the plurality of shapes in FIGS. 4 B, 5 B, 6 B, and 7 B may be generated using techniques disclosed herein.
- FIG. 4 B depicts the learned contracting vector field for the A-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the A-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an A-shaped contraction tube is induced about the A-shape, as an intended trajectory, as a result of generating the contracting vector field using Gaussian separable kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 4 B .
- Both of the generated contracting vector field and induced A-shaped contraction tube may define the control policy for the A-shape based on the A-shaped demonstration trajectories of FIG. 4 A .
- the end effector may follow the contracting vector field defined in the control policy towards the A-shaped contraction tube induced around the intended trajectory for the A-shape as defined by the control policy.
- the robot can use the control policy for the A-shape to avoid the obstacle and merge back into the A-shape contraction tube to resume the intended trajectory.
- the control policy for the A-shape acts as a function of the target point by creating a region of stability for the intended trajectory around the demonstration trajectories.
- FIG. 5 B depicts the learned contracting vector field for the C-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the C-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- a C-shaped contraction tube is induced about the C-shape, as an intended trajectory, as a result of generating the contracting vector field using Gaussian separable kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 5 B .
- Both of the generated contracting vector field and induced C-shaped contraction tube may define the control policy for the C-shape based on the C-shaped demonstration trajectories of FIG. 5 A .
- the end effector may follow the contracting vector field defined in the control policy towards the C-shaped contraction tube induced around the intended trajectory for the C-shape as defined by the control policy.
- the robot can use the control policy for the C-shape to avoid the obstacle and merge back into the C-shape contraction tube to resume the intended trajectory.
- the control policy for the C-shape acts as a function of the target point by creating a region of stability for the intended trajectory around the demonstration trajectories.
- FIG. 6 B depicts the learned contracting vector field for the G-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the G-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- a G-shaped contraction tube is induced about the G-shape, as an intended trajectory, as a result of generating the contracting vector field using Gaussian separable kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 6 B .
- Both of the generated contracting vector field and induced G-shaped contraction tube may define the control policy for the G-shape based on the G-shaped demonstration trajectories of FIG. 6 A .
- the end effector may follow the contracting vector field defined in the control policy towards the G-shaped contraction tube induced around the intended trajectory for the G-shape as defined by the control policy.
- the robot can use the control policy for the G-shape to avoid the obstacle and merge back into the G-shape contraction tube to resume the intended trajectory.
- the control policy for the G-shape acts as a function of the target point by creating a region of stability for the intended trajectory around the demonstration trajectories.
- FIG. 7 B depicts the learned contracting vector field for the J-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the J-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- a J-shaped contraction tube is induced about the J-shape, as an intended trajectory, as a result of generating the contracting vector field using Gaussian separable kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 7 B .
- Both of the generated contracting vector field and induced J-shaped contraction tube may define the control policy for the J-shape based on the J-shaped demonstration trajectories of FIG. 7 A .
- the end effector may follow the contracting vector field defined in the control policy towards the J-shaped contraction tube induced around the intended trajectory for the J-shape as defined by the control policy.
- the robot can use the control policy for the J-shape to avoid the obstacle and merge back into the J-shape contraction tube to resume the intended trajectory.
- the control policy for the J-shape acts as a function of the target point by creating a region of stability for the intended trajectory around the demonstration trajectories.
- FIGS. 4 C, 5 C, 6 C, and 7 C depict a learned contracting vector field generated using curl-kernels kernels for each of the plurality of shapes in FIGS. 4 A, 5 A, 6 A, and 7 A .
- the learned contracting vector field generated using curl-kernels kernels for each of the plurality of shapes in FIGS. 4 C, 5 C, 6 C, and 7 C may be generated using techniques disclosed herein.
- a potential field may be generated, such that the contracting vector field may be interpreted as a gradient flow with respect to the potential field as set forth in Equation 10.
- FIG. 4 C depicts the learned contracting vector field for the A-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the A-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an A-shaped contraction tube is induced about the A-shape, as an intended trajectory, as a result of generating the contracting vector field using curl-free kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 4 C .
- contours of FIG. 4 C correspond to an associated potential field that is interpreted as a gradient flow with respect to the generated contracting vector field.
- Each of the generated contracting vector field, the induced A-shaped contraction tube, and the resulting gradient flow may define the control policy for the A-shape based on the A-shaped demonstration trajectories of FIG. 4 A .
- the end effector may follow the contracting vector field defined in the control policy towards the A-shaped contraction tube induced around the intended trajectory for the A-shape as defined by the control policy.
- the end effector of the robot may adapt to the dynamic environment faster based on the contours of the gradient flow.
- the robot can use the control policy for the A-shape to avoid the obstacle and merge back into the A-shape contraction tube to resume the intended trajectory.
- the control policy for the A-shape acts as a function of the target point.
- FIG. 5 C depicts the learned contracting vector field for the C-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the C-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an C-shaped contraction tube is induced about the C-shape, as an intended trajectory, as a result of generating the contracting vector field using curl-free kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 5 C .
- contours of FIG. 5 C correspond to an associated potential field that is interpreted as a gradient flow with respect to the generated contracting vector field.
- Each of the generated contracting vector field, the induced C-shaped contraction tube, and the resulting gradient flow may define the control policy for the C-shape based on the C-shaped demonstration trajectories of FIG. 5 A .
- the end effector may follow the contracting vector field defined in the control policy towards the C-shaped contraction tube induced around the intended trajectory for the C-shape as defined by the control policy.
- the end effector of the robot may adapt to the dynamic environment faster based on the contours of the gradient flow.
- the robot can use the control policy for the C-shape to avoid the obstacle and merge back into the C-shape contraction tube to resume the intended trajectory.
- the control policy for the C-shape acts as a function of the target point.
- FIG. 6 C depicts the learned contracting vector field for the G-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the G-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an G-shaped contraction tube is induced about the G-shape, as an intended trajectory, as a result of generating the contracting vector field using curl-free kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 6 C .
- contours of FIG. 6 C correspond to an associated potential field that is interpreted as a gradient flow with respect to the generated contracting vector field.
- Each of the generated contracting vector field, the induced G-shaped contraction tube, and the resulting gradient flow may define the control policy for the G-shape based on the G-shaped demonstration trajectories of FIG. 6 A .
- the end effector may follow the contracting vector field defined in the control policy towards the G-shaped contraction tube induced around the intended trajectory for the G-shape as defined by the control policy.
- the end effector of the robot may adapt to the dynamic environment faster based on the contours of the gradient flow.
- the robot can use the control policy for the G-shape to avoid the obstacle and merge back into the G-shape contraction tube to resume the intended trajectory.
- the control policy for the G-shape acts as a function of the target point.
- FIG. 7 C depicts the learned contracting vector field for the J-shaped demonstration trajectories of the robotic components.
- the learned contracting vector field vector for the J-shaped demonstration trajectories represents the underlying dynamical system at the kinematic level.
- an J-shaped contraction tube is induced about the J-shape, as an intended trajectory, as a result of generating the contracting vector field using curl-free kernels during imitation learning.
- the generated contracting vector field is represented by the streamlines of FIG. 7 C .
- contours of FIG. 7 C correspond to an associated potential field that is interpreted as a gradient flow with respect to the generated contracting vector field.
- Each of the generated contracting vector field, the induced J-shaped contraction tube, and the resulting gradient flow may define the control policy for the J-shape based on the J-shaped demonstration trajectories of FIG. 7 A .
- the end effector may follow the contracting vector field defined in the control policy towards the J-shaped contraction tube induced around the intended trajectory for the J-shape as defined by the control policy.
- the end effector of the robot may adapt to the dynamic environment faster based on the contours of the gradient flow.
- the robot can use the control policy for the J-shape to avoid the obstacle and merge back into the J-shape contraction tube to resume the intended trajectory.
- the control policy for the J-shape acts as a function of the target point.
- FIGS. 3 A, 4 A, 5 A, 6 A, and 7 A all illustrate patterns of alphanumeric characters as demonstration trajectories, it is to be understood that any shape, pattern, or combination thereof may be used as demonstration trajectories to generate a contracting vector field for any intended trajectory of an end effector of one or more robots.
- FIG. 8 A is a graph that illustrates how training time for a control system scales with increasing dimensionality and a fixed number of random features in a random two-dimensional subspace.
- the training time, dimensionality, and number of random features in FIG. 8 A is based on the S-shape of FIG. 3 A .
- FIG. 8 B is a graph that illustrates how training time for a control system scales with an increasing number of random features and a fixed dimensionality in a random two-dimensional subspace.
- the training time, dimensionality, and number of random features in FIG. 8 B is based on the S-shape of FIG. 3 A .
- FIGS. 8 A- 8 B illustrate how training time for a control system scales linearly with respect to the number of random features, and how training time for a control system scales superlinearly with respect to dimensionality.
- FIG. 9 is a flowchart illustrating an example method 900 according to various implementations described herein.
- This system may include engines 122 and/or 124 of control policy system 120 , which may be implemented by one or more components of a robot, such as a processor and/or robot control system of one or more of the robots 280 ; and/or may be implemented by one or more computing device(s) that are separate from a robot, such as computing system 1110 .
- engines 122 and/or 124 of control policy system 120 may be implemented by one or more components of a robot, such as a processor and/or robot control system of one or more of the robots 280 ; and/or may be implemented by one or more computing device(s) that are separate from a robot, such as computing system 1110 .
- operations of method 900 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted, or added.
- the system receives one or more groups of data points.
- Each group of data points is generated based on robot sensor data during a physical manipulation of a corresponding robot.
- the system can receive one group of data points that are based on a kinesthetic teaching of a demonstration performed on a corresponding robot.
- the system can receive a first group of data points and a second group of data points.
- the first group can be based on a first kinesthetic teaching performed on a corresponding robot.
- the second group can be based on a second kinesthetic teaching performed on the same corresponding robot, or on a different corresponding robot.
- the system generates a robot control policy based on the group(s) of data points received at block 952 .
- the system may generate a plurality of kernels from the group(s) of data point using convex optimization, where the kernels may be Gaussian separable kernels or curl-free kernels.
- the system may generate one or more vector fields based on the plurality of kernels generated at sub-block 954 A.
- the system controls one or more robots based on the control policy.
- the control policy directly corresponds to the actual torque commands that should be sent by a robot control system to the actuators.
- the system in generating torque commands at a given time instant, can apply the state variables of a robot at that time instant to the control policy to generate torque commands, and provide those torque commands to its actuators.
- the system can use an operational space formulation and/or other formulations to determine torque commands and/or other control commands based on the control policy.
- Method 900 sets forth an example according to implementations disclosed herein. However, as set forth above, in some implementations one or more operations may be reordered, omitted, or added. As one example, in some implementations block 952 may be omitted. As another example, in some implementations block 954 may be omitted and block 956 may include the system generating the plurality of kernels from the group(s) of data points using convex optimization, but omit generating one or more of the vector fields based on the plurality of kernels.
- FIG. 10 schematically depicts an example architecture of a robot 1000 .
- the robot 1000 includes a robot control system 1002 , one or more operational components 1004 a - n , and one or more sensors 1008 a - m .
- the sensors 1008 a - m may include, for example, vision sensors (e.g., camera(s), 3D scanners), light sensors, pressure sensors, positional sensors, pressure wave sensors (e.g., microphones), proximity sensors, accelerometers, gyroscopes, thermometers, barometers, and so forth. While sensors 1008 a - m are depicted as being integral with robot 1000 , this is not meant to be limiting. In some implementations, sensors 1008 a - m may be located external to robot 1000 , e.g., as standalone units.
- Operational components 1004 a - n may include, for example, one or more end effectors (e.g., grasping end effectors) and/or one or more servo motors or other actuators to effectuate movement of one or more components of the robot.
- the robot 1000 may have multiple degrees of freedom and each of the actuators may control actuation of the robot 1000 within one or more of the degrees of freedom responsive to control commands provided by the robot control system 1002 (e.g., torque and/or other commands generated based on a control policy).
- the term actuator encompasses a mechanical or electrical device that creates motion (e.g., a motor), in addition to any driver(s) that may be associated with the actuator and that translate received control commands into one or more signals for driving the actuator. Accordingly, providing a control command to an actuator may comprise providing the control command to a driver that translates the control command into appropriate signals for driving an electrical or mechanical device to create desired motion.
- the robot control system 1002 may be implemented in one or more processors, such as a CPU, GPU, and/or other controller(s) of the robot 1000 .
- the robot 1000 may comprise a “brain box” that may include all or aspects of the control system 1002 .
- the brain box may provide real time bursts of data to the operational components 1004 a - n , with each of the real time bursts comprising a set of one or more control commands that dictate, inter alia, the parameters of motion (if any) for each of one or more of the operational components 1004 a - n .
- the control commands can be at least selectively generated by the control system 1002 based on a control policy generated according to one or more techniques disclosed herein.
- control system 1002 is illustrated in FIG. 10 as an integral part of the robot 1000 , in some implementations, all or aspects of the control system 1002 may be implemented in a component that is separate from, but in communication with, robot 1000 . For example, all or aspects of control system 1002 may be implemented on one or more computing devices that are in wired and/or wireless communication with the robot 1000 , such as computing system 1110 .
- FIG. 11 is a block diagram of an example computing system 1110 that may optionally be utilized to perform one or more aspects of techniques described herein.
- the computing system 1110 typically includes at least one processor 1114 which communicates with a number of peripheral devices via bus subsystem 1112 .
- peripheral devices may include a storage subsystem 1124 , including, for example, a memory subsystem 1125 and a file storage subsystem 1126 , user interface output devices 1120 , user interface input devices 1122 , and a network interface subsystem 1116 .
- the input and output devices allow user interaction with the computing system 1110 .
- Network interface subsystem 1116 provides an interface to outside networks and is coupled to corresponding interface devices in other computing devices.
- User interface input devices 1122 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and/or other types of input devices.
- pointing devices such as a mouse, trackball, touchpad, or graphics tablet
- audio input devices such as voice recognition systems, microphones, and/or other types of input devices.
- use of the term “input device” is intended to include all possible types of devices and ways to input information into the computing system 1110 or onto a communication network.
- User interface output devices 1120 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices.
- the display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image.
- the display subsystem may also provide non-visual display such as via audio output devices.
- output device is intended to include all possible types of devices and ways to output information from the computing system 1110 to the user or to another machine or computing device.
- Storage subsystem 1124 stores programming and data constructs that provide the functionality of some or all of the modules described herein.
- the storage subsystem 824 may include the logic to perform selected aspects of the method 900 of FIG. 9 .
- Memory 1125 used in the storage subsystem 1124 can include a number of memories including a main random access memory (RAM) 1130 for storage of instructions and data during program execution and a read only memory (ROM) 1132 in which fixed instructions are stored.
- a file storage subsystem 1126 can provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges.
- the modules implementing the functionality of certain implementations may be stored by file storage subsystem 1126 in the storage subsystem 1124 , or in other machines accessible by the processor(s) 1114 .
- Bus subsystem 1112 provides a mechanism for letting the various components and subsystems of the computing system 1110 communicate with each other as intended. Although bus subsystem 1112 is shown schematically as a single bus, alternative implementations of the bus subsystem may use multiple busses.
- the computing system 1110 can be of varying types including a workstation, server, computing cluster, blade server, server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of the computing system 1110 depicted in FIG. 11 is intended only as a specific example for purposes of illustrating some implementations. Many other configurations of the computing system 1110 are possible having more or fewer components than the computing device depicted in FIG. 11 .
Abstract
Description
Starting from an initial condition, x0, a trajectory x(t,x0) is generated by integrating the dynamical system of Equation 1 over a time horizon. Given desired equilibria, Z={x* i,i=1 . . . k} and pairs {(x* i,{dot over (x)}* l), t=0 . . . Ti, i=1 . . . N} extracted from a plurality of sets of demonstration trajectories, where k is a number of equilibrium points where the induced vector field vanishes, i.e., {dot over (x)}* l=ƒ(x* i)=0. The following optimization may be performed over a non-parametric family,
where
denotes the Jacobian of the vector-valued map ƒ and the notation A≤−τI implies that the matrix A is negative definite with eigenvalues no larger than −τ for some τ>0.
then the system is certified to be at least one of locally or globally stable.
Therefore, if the symmetric part of the Jacobian of ƒ at x is negative definite, then the distance between neighboring trajectories decreases. In particular, if
then the following may be implied,
and integrating both sides of this equation yields,
∥δx t∥2 2 ≤∥δx 0 ∥e −∫
where K is called the reproducing kernel for
ƒ*=
is a sum of matrix-vector products of the form:
where αi∈
ƒ*=
is a sum of matrix-vector products of the form:
where αi, βik∈
times the n×n identify matrix, such that it takes the form:
K σ(x,y)=k σ(x,y)I (Equation 8)
where each individual component of the vector field ƒ=(ƒ1 . . . ƒn) belongs to the scalar RKHS
L for a positive definite n×n matrix L.
where vector fields in the associated RKHS are curl-free and can be interpreted as gradient flows with respect to a potential field V, i.e.,
{dot over (x)}=ƒ(x)=−∇V(x)
Consequently, the Jacobian of ƒ, Jƒ=−∇2V, at any x is symmetric being the Hessian of −V. From this, a formula is derived for V in Proposition 1.
In fact,
K Z(x,y)=K(x,y)−K(x,Z)K(Z,Z)−1 K(Z,y) (Equation 11)
where, given any two sets of points S={xi∈
K(x,y)≈Φ(x)TΦ(y)
where D controls quality of the approximation. By using the approximation, a vector-valued RKHS map can be a reparameterized as follows:
where
Therefore, instead of optimizing In variables {αi∈
where w1, . . . ws are independent and identically distributed random variables from N(0, σ−2I), and b1, . . . bs are independent and identically distributed random variables from Unif[0,2π]. Equation 12 induces a low-rank approximation to the Gaussian kernel (with bandwidth σ). Other shift invariant kernels also admit such approximations. Additionally, Equation 12 implies matrix-valued feature map approximations of:
K σ(x,y)≈Φσ(x)TΦσ(y),K cf(x,y)≈Φcƒ(x)TΦcƒ(y)
for the Gaussian separable kernels of Equation 8 and the curl-free kernels of Equation 9, respectively, the associated feature maps may take the form:
where ⊗ denotes a Kronecker product.
Φ(X)=[Φ(x 1), . . . ,Φ(x X)]∈
Since K(x,y)≈(x)TΦ(y),
where PM denotes the orthogonal projector onto the range of M. In some implementations, PΦ(z) ⊥=LLT for some L∈
ΦZ(x)=L TΦ(x) (Equation 15)
which satisfies the property that KZ(x,y)=ΦZ(x)TΦZ(y). Note that despite the fact that kernel KZ(x,y) is not shift invariant, this particular construction inherits the ability to be expressed as a low-rank feature map wile guaranteeing that ΦZ(x) vanishes on Z.
where ΦZ(x)T=[Φ1 Z(x) . . . ΦD Z], Φi T:
Claims (19)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/622,027 US11565412B2 (en) | 2017-09-15 | 2018-09-15 | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762559285P | 2017-09-15 | 2017-09-15 | |
US201862641535P | 2018-03-12 | 2018-03-12 | |
PCT/US2018/051255 WO2019055883A1 (en) | 2017-09-15 | 2018-09-15 | Improvements related to generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US16/622,027 US11565412B2 (en) | 2017-09-15 | 2018-09-15 | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
Publications (2)
Publication Number | Publication Date |
---|---|
US20200189099A1 US20200189099A1 (en) | 2020-06-18 |
US11565412B2 true US11565412B2 (en) | 2023-01-31 |
Family
ID=65244581
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/622,027 Active 2040-02-28 US11565412B2 (en) | 2017-09-15 | 2018-09-15 | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
Country Status (3)
Country | Link |
---|---|
US (1) | US11565412B2 (en) |
EP (1) | EP3622439B1 (en) |
WO (1) | WO2019055883A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6993382B2 (en) * | 2019-04-26 | 2022-02-04 | ファナック株式会社 | Robot teaching device |
CN111301720B (en) * | 2020-01-17 | 2021-09-03 | 北京理工大学 | Deep space probe track autonomous control method |
CN111360830B (en) * | 2020-03-18 | 2021-07-16 | 华南理工大学 | Vibration control method of flexible mechanical arm based on cooperative tracking |
CN113977580B (en) * | 2021-10-29 | 2023-06-27 | 浙江工业大学 | Mechanical arm imitation learning method based on dynamic motion primitive and self-adaptive control |
CN114227688B (en) * | 2021-12-29 | 2023-08-04 | 同济大学 | Teaching track learning method based on curve registration |
CN114986525A (en) * | 2022-07-13 | 2022-09-02 | 佛山纽欣肯智能科技有限公司 | Robot handheld teaching device and method based on multi-mode information |
Citations (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6064168A (en) * | 1998-03-13 | 2000-05-16 | Fanuc Robotics North America, Inc. | Method of controlling robot movement |
US6285920B1 (en) * | 2000-02-18 | 2001-09-04 | Fanuc Robotics North America | Method of robot teaching with motion constraints |
US20050027398A1 (en) * | 2003-08-01 | 2005-02-03 | Kabushiki Kaisha Koyama | Articulated robot |
US20070030271A1 (en) * | 2005-08-05 | 2007-02-08 | Denso Wave Incorporated | Robot controller and robot control method using spline interpolation |
US8121731B2 (en) * | 2006-03-13 | 2012-02-21 | Fanuc Ltd | Teaching position correcting apparatus and teaching position correction method |
US20120239193A1 (en) * | 2010-11-12 | 2012-09-20 | Kenji Mizutani | Motion path search device and method of searching for motion path |
US8386069B2 (en) * | 2008-07-08 | 2013-02-26 | Siemens Aktiengesellschaft | Method of synchronizing a pickup of a handling device, a computer readable medium and a control device |
US8412379B2 (en) * | 2008-12-05 | 2013-04-02 | Comau S.P.A. | Robot system |
US20150217445A1 (en) * | 2014-02-06 | 2015-08-06 | Kuka Laboratories Gmbh | Method For Programming An Industrial Robot and Industrial Robot |
US9207668B2 (en) * | 2005-02-25 | 2015-12-08 | Abb Research Ltd. | Method of and apparatus for automated path learning |
US9221174B2 (en) * | 2012-03-07 | 2015-12-29 | Canon Kabushiki Kaisha | Robot controlling device, robot apparatus, robot control method, program for executing robot control method, and recording medium on which program is recorded |
US9242376B2 (en) * | 2013-03-28 | 2016-01-26 | Denso Wave Incorporated | Method of generating path of multiaxial robot and control apparatus for the multiaxial robot |
US20160176046A1 (en) * | 2014-12-23 | 2016-06-23 | Kuka Roboter Gmbh | Apparatus and Method for Recording Positions |
US20160242690A1 (en) | 2013-12-17 | 2016-08-25 | University Of Florida Research Foundation, Inc. | Brain state advisory system using calibrated metrics and optimal time-series decomposition |
US20160288332A1 (en) * | 2015-03-30 | 2016-10-06 | Seiko Epson Corporation | Robot, robot control apparatus and robot system |
US20170083826A1 (en) | 2015-09-18 | 2017-03-23 | International Business Machines Corporation | Enhanced kernel representation for processing multimodal data |
US9919422B1 (en) * | 2016-01-06 | 2018-03-20 | X Development Llc | Methods and systems to provide mechanical feedback during movement of a robotic system |
US9925662B1 (en) * | 2015-06-28 | 2018-03-27 | X Development Llc | Generating a trained robot path based on physical manipulation of the robot and based on training user interface input(s) associated with the physical manipulation |
US20180157248A1 (en) * | 2016-12-06 | 2018-06-07 | Hanwha Techwin Co., Ltd. | Apparatus for and method of setting boundary plane |
US20180222045A1 (en) * | 2017-02-09 | 2018-08-09 | X Development Llc | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US20190086907A1 (en) * | 2016-04-12 | 2019-03-21 | Universal Robots A/S | Programming a robot by demonstration |
US20200276704A1 (en) * | 2017-09-22 | 2020-09-03 | Google Llc | Determining control policies for robots with noise-tolerant structured exploration |
US20210125052A1 (en) * | 2019-10-24 | 2021-04-29 | Nvidia Corporation | Reinforcement learning of tactile grasp policies |
US20210178585A1 (en) * | 2019-12-16 | 2021-06-17 | Robert Bosch Gmbh | Method for controlling a robot and robot controller |
US11188821B1 (en) * | 2016-09-15 | 2021-11-30 | X Development Llc | Control policies for collective robot learning |
US11213946B1 (en) * | 2018-12-27 | 2022-01-04 | X Development Llc | Mitigating reality gap through optimization of simulated hardware parameter(s) of simulated robot |
US20220040861A1 (en) * | 2019-02-01 | 2022-02-10 | Google Llc | Generating a robot control policy from demonstrations |
US20220108215A1 (en) * | 2019-01-16 | 2022-04-07 | Google Llc | Robust and Data-Efficient Blackbox Optimization |
-
2018
- 2018-09-15 US US16/622,027 patent/US11565412B2/en active Active
- 2018-09-15 EP EP18842594.6A patent/EP3622439B1/en active Active
- 2018-09-15 WO PCT/US2018/051255 patent/WO2019055883A1/en unknown
Patent Citations (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6064168A (en) * | 1998-03-13 | 2000-05-16 | Fanuc Robotics North America, Inc. | Method of controlling robot movement |
US6285920B1 (en) * | 2000-02-18 | 2001-09-04 | Fanuc Robotics North America | Method of robot teaching with motion constraints |
US20050027398A1 (en) * | 2003-08-01 | 2005-02-03 | Kabushiki Kaisha Koyama | Articulated robot |
US7292913B2 (en) * | 2003-08-01 | 2007-11-06 | Kabushiki Kaisha Koyama | Articulated robot |
US9207668B2 (en) * | 2005-02-25 | 2015-12-08 | Abb Research Ltd. | Method of and apparatus for automated path learning |
US20070030271A1 (en) * | 2005-08-05 | 2007-02-08 | Denso Wave Incorporated | Robot controller and robot control method using spline interpolation |
US8121731B2 (en) * | 2006-03-13 | 2012-02-21 | Fanuc Ltd | Teaching position correcting apparatus and teaching position correction method |
US8386069B2 (en) * | 2008-07-08 | 2013-02-26 | Siemens Aktiengesellschaft | Method of synchronizing a pickup of a handling device, a computer readable medium and a control device |
US8412379B2 (en) * | 2008-12-05 | 2013-04-02 | Comau S.P.A. | Robot system |
US20120239193A1 (en) * | 2010-11-12 | 2012-09-20 | Kenji Mizutani | Motion path search device and method of searching for motion path |
US9221174B2 (en) * | 2012-03-07 | 2015-12-29 | Canon Kabushiki Kaisha | Robot controlling device, robot apparatus, robot control method, program for executing robot control method, and recording medium on which program is recorded |
US9242376B2 (en) * | 2013-03-28 | 2016-01-26 | Denso Wave Incorporated | Method of generating path of multiaxial robot and control apparatus for the multiaxial robot |
US20160242690A1 (en) | 2013-12-17 | 2016-08-25 | University Of Florida Research Foundation, Inc. | Brain state advisory system using calibrated metrics and optimal time-series decomposition |
US20150217445A1 (en) * | 2014-02-06 | 2015-08-06 | Kuka Laboratories Gmbh | Method For Programming An Industrial Robot and Industrial Robot |
US9393687B2 (en) * | 2014-02-06 | 2016-07-19 | Kuka Roboter Gmbh | Method for programming an industrial robot and industrial robot |
US20160176046A1 (en) * | 2014-12-23 | 2016-06-23 | Kuka Roboter Gmbh | Apparatus and Method for Recording Positions |
US20160288332A1 (en) * | 2015-03-30 | 2016-10-06 | Seiko Epson Corporation | Robot, robot control apparatus and robot system |
US9925662B1 (en) * | 2015-06-28 | 2018-03-27 | X Development Llc | Generating a trained robot path based on physical manipulation of the robot and based on training user interface input(s) associated with the physical manipulation |
US20170083826A1 (en) | 2015-09-18 | 2017-03-23 | International Business Machines Corporation | Enhanced kernel representation for processing multimodal data |
US9919422B1 (en) * | 2016-01-06 | 2018-03-20 | X Development Llc | Methods and systems to provide mechanical feedback during movement of a robotic system |
US20190086907A1 (en) * | 2016-04-12 | 2019-03-21 | Universal Robots A/S | Programming a robot by demonstration |
US11188821B1 (en) * | 2016-09-15 | 2021-11-30 | X Development Llc | Control policies for collective robot learning |
US20180157248A1 (en) * | 2016-12-06 | 2018-06-07 | Hanwha Techwin Co., Ltd. | Apparatus for and method of setting boundary plane |
US10391632B2 (en) * | 2017-02-09 | 2019-08-27 | X Development Llc | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US20190118375A1 (en) * | 2017-02-09 | 2019-04-25 | X Development Llc | Related to generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US10207404B2 (en) * | 2017-02-09 | 2019-02-19 | X Development Llc | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US20190344439A1 (en) * | 2017-02-09 | 2019-11-14 | X Development Llc | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US20180222045A1 (en) * | 2017-02-09 | 2018-08-09 | X Development Llc | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot |
US20200276704A1 (en) * | 2017-09-22 | 2020-09-03 | Google Llc | Determining control policies for robots with noise-tolerant structured exploration |
US11213946B1 (en) * | 2018-12-27 | 2022-01-04 | X Development Llc | Mitigating reality gap through optimization of simulated hardware parameter(s) of simulated robot |
US20220108215A1 (en) * | 2019-01-16 | 2022-04-07 | Google Llc | Robust and Data-Efficient Blackbox Optimization |
US20220040861A1 (en) * | 2019-02-01 | 2022-02-10 | Google Llc | Generating a robot control policy from demonstrations |
US11420328B2 (en) * | 2019-02-01 | 2022-08-23 | Google Llc | Generating a robot control policy from demonstrations |
US20210125052A1 (en) * | 2019-10-24 | 2021-04-29 | Nvidia Corporation | Reinforcement learning of tactile grasp policies |
US20210178585A1 (en) * | 2019-12-16 | 2021-06-17 | Robert Bosch Gmbh | Method for controlling a robot and robot controller |
Non-Patent Citations (30)
Title |
---|
Alvarez et al., "Kernels for Vector-Valued Functions: A Review" A Review, Foundation and Trends in Machine Learning, vol. 4, No. 3, pp. 195-266, dated 2011. |
Amir Ali Ahmadi "Algebraic Relaxations and Hardness Results in Polynomial Optimization and Lyapunov Analysis" arXiv: 1201.2892v1 [math.OC] dated Jan. 13, 2012. |
Amir Ali Ahmadi, "Non-monotonic Lyapunov Functions for Stability of Nonlinear and Switched Systems: Theory and Computation" Massachusetts Institute of Technology. 90 pages, dated Jun. 2008. |
Barry et al., "Safety Verification of Reactive Controllers for UAV Flight in Cluttered Environments using Barrier Certificates" 7 pages. |
Cogill et al., "Structured semidefinite programs for the control of symmetric systems" Science Direct, Automatica 44 (2008) pp. 1411-1417, dated Mar. 5, 2008. |
Eduardo D. Sontag, "A ‘universal’ construction of Artstein's theorem on nonlinear stablization" Systems & Control Letters 13 (1989) 117-123, 7 pages, dated Mar. 7, 1989. |
Eduardo D. Sontag, "Mathematical Control Theory: Deterministic Finite-Dimensional Systems" IEEE Transactions Automatic Control. 4 pages. |
European Patent Office; Intention to Grant issued in Application No. 18842594.6, 55 pages, dated Jun. 1, 2022. |
European Patent Office; Intention to Grant issued in Application No. 18842594.6; 55 pages; dated Nov. 11, 2021. |
European Patent Office; International Search Report and Written Opinion of Ser. No. PCT/US2018/051255; 5 pages; dated Feb. 26, 2019. |
Freeman et al., "Control Lyapunov Functions: New Ideas From an Old Source" 6 pages. |
Freeman et al., "Inverse Optimality in Robust Stabilization" Siam J. Control and Optimization, vol. 34, No. 4, pp. 1365-1391, 27 pages, dated Jul. 1996. |
Giesl et al., "Review on Computational Methods for Lyapunov Functions" Discrete and Continuous Dynamical Systems Series B, vol. 20, Nos. 8. Retrieved from doi:10.3934/dcdsb.2015.20.2291. pp. 2291-2331, dated Oct. 2015. |
Ha Quang Minh, "Operator-Valued Bochner Theorem, Fourier Feature Maps for Operator-Valued Kernels, and Vector-Valued Learning" arXiv:1608.05639v1 [cs.LG] 31 pages, dated Aug. 19, 2016. |
Havoutis, I. et al. "Motion Planning and Reactive Control on Learnt Skill Manifolds"; International Journal of Robotics Research, vol. 32, No. 9-10, pp. 1120-1150, Jun. 28, 2013. |
Howard, M. et al. "A Novel Method for Learning Policies from Variable Constraint Data"; Autonomous Robots, Kluwer Academic Publishers, BO, vol. 27, No. 2, pp. 105-121, Jul. 30, 2009. |
Khansari-Zadeh et al., "Learning Control Lyapunov Function to Ensure Stability of Dynamical System-based Robot Reaching Motions" Robotics and Autonomous Systems, vol. 62, No. 6, pp. 752-765 dated Mar. 3, 2014. |
Khansari-Zadeh et al., "Learning Potential Functions from Human Demonstrations with Encapsulated Dynamic and Compliant Behaviors" Autonomous Robots. 23 pages, dated 2015. |
Khansari-Zadeh, S. "A Dynamical System-based Approach to Modeling Stable Robot Control Policies via Imitation Learning"; retrieved from internet URL:https://infoscience.epfl.ch/record/182663/files/EPFL_TH5552.pdf [retrieved on Feb. 18, 2019], 253 pages, Jan. 1, 2012. |
Khansari-Zadeh, S. et al. "Learning Stable Nonlinear Dynamical Systems with Gaussian Mixture Models"; IEEE Transactions on Robotics, vol. 27, No. 5, pp. 943-957, Oct. 1, 2011. |
Micchelli et al., "On Learning Vector-Valued Functions" Department of Computer Science, University College London, 24 pages. dated Jul. 14, 2003. |
Micheli et al., "Matrix-valued Kernels for Shape Deformation Analysis" arXiv:1308.5739v2 [math.FA] dated Sep. 3, 2013. |
Oussama Khatib, "Real-Time Obstacle Avoidance for Manipulators and Mobile Robots" The International Joural of Robotics Research, vol. 5, No. 1, 9 pages, dated 1986. |
P.A. Parrilo, "Structured semidefinite programs and semialgebraic geometry methods in robustness and optimization" PhD thesis, California Institute of Technology, 135 pages, dated 2000. |
Peter Bartlett, "Reproducing Kernel Hilbert Spaces" CS281B/Stat241B (Spring 2008) Statistical Learning Theory. 4 pages. |
Primbs et al., "Nonlinear Optimal Control: A Control Lyapunov Function and Receding Horizon Perspective" Asian Journal of Control, vol. 1, No. 1, pp. 14-24, dated Mar. 1999. |
Sindhwani et al., "Scalable Matrix-valued Kernel Learning for High-dimensional Nonlinear Multivariate Regression and Granger Causality" arXiv:1210.4792v2 [stat ML] dated Mar. 8, 2013. |
Slotine et al., "Applied Nonlinear Control" Prentice Hall. 476 pages, dated 1991. |
Zhang et al., "Learning with Invariance via Linear Functionals on Reproducing Kernel Hilbert Space". 9 pages. |
Zvi Artstein, "Stabilization with Relaxed Controls" Nonlinear Analysis, Theory, Methods & Applications, vol. 7, No. 11. pp. 1163-1173. dated 1983. |
Also Published As
Publication number | Publication date |
---|---|
EP3622439A1 (en) | 2020-03-18 |
EP3622439B1 (en) | 2022-08-03 |
US20200189099A1 (en) | 2020-06-18 |
WO2019055883A1 (en) | 2019-03-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11565412B2 (en) | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot | |
US11872699B2 (en) | Generating a robot control policy from demonstrations collected via kinesthetic teaching of a robot | |
US20210325894A1 (en) | Deep reinforcement learning-based techniques for end to end robot navigation | |
US11714996B2 (en) | Learning motor primitives and training a machine learning system using a linear-feedback-stabilized policy | |
Ravichandar et al. | Learning Partially Contracting Dynamical Systems from Demonstrations. | |
Dang et al. | Semantic grasping: planning task-specific stable robotic grasps | |
US20210187733A1 (en) | Data-efficient hierarchical reinforcement learning | |
Park et al. | Fast and bounded probabilistic collision detection for high-DOF trajectory planning in dynamic environments | |
US11420328B2 (en) | Generating a robot control policy from demonstrations | |
Frank et al. | Constrained probabilistic movement primitives for robot trajectory adaptation | |
Nikandrova et al. | Category-based task specific grasping | |
WO2020118730A1 (en) | Compliance control method and apparatus for robot, device, and storage medium | |
Cui et al. | Kernel dynamic policy programming: Applicable reinforcement learning to robot systems with high dimensional states | |
Nguyen-Tuong et al. | Online kernel-based learning for task-space tracking robot control | |
Pan et al. | Feedback motion planning for liquid pouring using supervised learning | |
Vochten et al. | Generalizing demonstrated motion trajectories using coordinate-free shape descriptors | |
Jiang et al. | Generative adversarial interactive imitation learning for path following of autonomous underwater vehicle | |
Wu et al. | Learning robot anomaly recovery skills from multiple time-driven demonstrations | |
CN114502338A (en) | Techniques for generating controllers for robots | |
Koropouli et al. | Generalization of Force Control Policies from Demonstrations for Constrained Robotic Motion Tasks: A Regression-Based Approach | |
Lei et al. | Image based target capture of free floating space manipulator under unknown dynamics | |
Lan et al. | Efficient reinforcement learning with least-squares soft Bellman residual for robotic grasping | |
Fang et al. | Learning from wearable-based teleoperation demonstration | |
Zhang et al. | Learning stable nonlinear dynamical system from one demonstration | |
Pan et al. | Feedback motion planning for liquid transfer using supervised learning |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: BIG.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SINDHWANI, VIKAS;REEL/FRAME:051333/0957Effective date: 20181204 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: AWAITING TC RESP., ISSUE FEE NOT PAID |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT RECEIVED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |