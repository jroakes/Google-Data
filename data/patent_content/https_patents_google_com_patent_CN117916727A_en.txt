CN117916727A - Privacy sensitive estimation of digital resource access frequency - Google Patents
Privacy sensitive estimation of digital resource access frequency Download PDFInfo
- Publication number
- CN117916727A CN117916727A CN202380013400.3A CN202380013400A CN117916727A CN 117916727 A CN117916727 A CN 117916727A CN 202380013400 A CN202380013400 A CN 202380013400A CN 117916727 A CN117916727 A CN 117916727A
- Authority
- CN
- China
- Prior art keywords
- node
- tree model
- time
- time interval
- nodes
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 70
- 238000012545 processing Methods 0.000 claims abstract description 32
- 230000004044 response Effects 0.000 claims description 31
- 230000005540 biological transmission Effects 0.000 claims description 30
- 238000003860 storage Methods 0.000 claims description 22
- 230000008569 process Effects 0.000 abstract description 39
- 238000009826 distribution Methods 0.000 description 58
- 238000004590 computer program Methods 0.000 description 13
- 238000012797 qualification Methods 0.000 description 8
- 238000013515 script Methods 0.000 description 8
- 230000009471 action Effects 0.000 description 6
- 238000004891 communication Methods 0.000 description 6
- 238000010586 diagram Methods 0.000 description 6
- 230000003993 interaction Effects 0.000 description 6
- 230000000694 effects Effects 0.000 description 4
- 238000010801 machine learning Methods 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 238000004422 calculation algorithm Methods 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000008859 change Effects 0.000 description 2
- 238000012854 evaluation process Methods 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000026676 system process Effects 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- YTAHJIFKAKIKAV-XNMGPUDCSA-N [(1R)-3-morpholin-4-yl-1-phenylpropyl] N-[(3S)-2-oxo-5-phenyl-1,3-dihydro-1,4-benzodiazepin-3-yl]carbamate Chemical compound O=C1[C@H](N=C(C2=C(N1)C=CC=C2)C1=CC=CC=C1)NC(O[C@H](CCN1CCOCC1)C1=CC=CC=C1)=O YTAHJIFKAKIKAV-XNMGPUDCSA-N 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
- G06F16/2228—Indexing structures
- G06F16/2246—Trees, e.g. B+trees
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2465—Query processing support for facilitating data mining operations in structured databases
Abstract
In one aspect, there is provided a method performed by one or more computers, the method comprising: obtaining access data for the digital resource, the access data comprising data identifying a set of users accessing the digital resource at a point in time, processing the access data to generate data defining a tree model, wherein each node in the tree model is associated with: (i) A key specifying a time interval in a time span, and (ii) based on a value of a corresponding number of users satisfying a node-specific selection, receive a request to determine a number of users accessing the digital resource at least a predefined number of times within a time window, and process the tree model to generate an estimate of the number of users accessing the digital resource at least the predefined number of times within the time window.
Description
Background
The present specification relates to privacy-sensitive estimation of digital resource access frequency.
Digital resources can be accessed by a large number of remotely located users. Determining the number of users accessing the digital resource can be used, for example, to manage distribution and storage of the digital resource.
The degree of process privacy protection can be measured in various ways. For example, differential privacy techniques can be used to quantify the degree of privacy protection of a process. The computing process that operates on a data set can be referred to as privacy-sensitive (or privacy-preserving), for example, if the process is adapted to prevent information from leaking from the data set.
Disclosure of Invention
The present specification describes a system implemented as a computer program on one or more computers in one or more locations that is capable of performing efficient and privacy-sensitive estimation of digital resource access frequency.
According to a first aspect, there is provided a method performed by one or more computers, the method comprising: obtaining access data for the digital resource, wherein for each point in time in the sequence of points in time, the access data comprises data identifying a set of users accessing the digital resource at the point in time, processing the access data to generate data defining a tree model, wherein the tree model comprises a set of nodes, and each node in the set of nodes is associated with: (i) A key specifying a plurality of time intervals in a time span, and (ii) receiving a request to determine a number of users accessing a digital resource at least a predefined number of times within a time window based on a value of a corresponding number of users satisfying a node-specific selection criterion based on the plurality of time intervals specified by the key of the node, and in response to the request: the tree model is processed to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window.
In some embodiments, for one or more nodes in the tree model, a key of the node specifies at least a first time interval, a second time interval, and a third time interval, wherein the first time interval, the second time interval, and the third time interval are different from one another.
In some implementations, for one or more nodes in the tree model, a user satisfies node-specific selection criteria for that node only if: (i) The user accesses the digital resource at least once in the first time interval and at least once in the second time interval, and (ii) the user accesses the digital resource a target number of times in the third time interval.
In some implementations, the target number of times is zero for one or more nodes in the tree model.
In some implementations, (i) the tree model is a two-dimensional tree model, (ii) for each node in the tree model, a key of the node is parameterized by a set of parameters defining an area of the two-dimensional space, and (iii) for each parent node in the tree model, the area of the two-dimensional space defined by the key of the parent node is divided by the area of the two-dimensional space defined by the keys of child nodes of the parent node.
In some implementations, for each node in the tree model: the keys of the nodes are parameterized by corresponding parameters a, b, c, d, which define the region of the two-dimensional space given by, [ a, b ] × [ c, d ]: the first time interval comprises [ a-1, b-1], the second time interval comprises [ t+2-d, t+2-c ], wherein T is the last time point in the sequence of time points, and the third time interval comprises [ b, t+1-d ].
In some implementations, for each node in the tree model, the value associated with the node is based on a difference between: (i) A number of users meeting a first node-specific selection criteria based on a plurality of time intervals specified by the node's key, and (ii) a number of users meeting a second node-specific selection criteria based on a plurality of time intervals specified by the node's key.
In some embodiments, for one or more nodes in the tree model, a key of the node specifies at least a first time interval, a second time interval, a third time interval, and a fourth time interval, wherein the first time interval, the second time interval, the third time interval, and the fourth time interval are different from one another.
In some implementations, for one or more leaf nodes in the tree model: the user meets the first node-specific selection criteria for that node only if: (i) Accessing the digital resource in a first time interval, and (ii) accessing the digital resource a target number of times in a second time interval, and the user satisfying a second node-specific selection criterion for the node only if: (i) The user accesses the digital resource in a third time interval, and (ii) accesses the digital resource a target number of times in a fourth time interval.
In some embodiments, the target number of times is zero.
In some implementations, (i) the tree model is a one-dimensional tree model, (ii) for each node in the tree model, the key of that node is parameterized by a set of parameters defining a region of one-dimensional space, and (iii) for each parent node in the tree model, the region of one-dimensional space defined by the key of that parent node is divided by the region of one-dimensional space defined by the keys of child nodes of that parent node.
In some implementations, for one or more leaf nodes of the tree model: the key of a node is parameterized by a parameter t, which defines an area of a one-dimensional space given by t, the first time interval comprising t-1, the second time interval comprising [ t, t+w-1], wherein W is a predefined hyper-parameter, the third time interval comprising t+w-1, and the fourth time interval comprising [ t-1, t+w-2].
In some embodiments, the spanning tree model comprises: respective noise is added to the values associated with each node in the tree model.
In some implementations, processing the tree model to generate an estimate of a number of users accessing the digital resource at least a predefined number of times within the time window includes: the method includes identifying a plurality of nodes in a tree model, each node having a respective key that satisfies a time window-based identification criteria, determining a combination of values associated with the identified nodes, and generating an estimate of a number of users based at least in part on the combination of values associated with the identified nodes.
In some implementations, identifying the plurality of nodes in the tree model includes: identifying one or more leaf nodes of the tree model and one or more internal nodes of the tree model each having a respective key that satisfies a time window based identification criterion, and wherein determining a combination of values associated with the identified nodes comprises: a sum of values associated with the identified nodes is determined.
In some implementations, a user accesses a digital resource by receiving a transmission of a digital component.
In some implementations, the tree model includes a set of edges, wherein each edge connects a respective pair of nodes in the tree model, and wherein the tree model is a binary tree model.
In some embodiments, the method further comprises: an estimate of a number of users accessing the digital resource at least a predefined number of times within the time window is output.
According to a second aspect, there is provided a system comprising: one or more computers, and one or more storage devices communicatively coupled to the one or more computers, wherein the one or more storage devices store instructions that, when executed by the one or more computers, cause the one or more computers to perform the operations of the method of any of the preceding aspects.
According to a third aspect, there is provided one or more non-transitory computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the method of any preceding aspect.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
The system described in this specification is capable of generating accurate and privacy-preserving access frequency estimates. The access frequency estimate can refer to an estimate of the number of users accessing the digital resource at least a threshold number of times during the time window. The access frequency estimates generated by the system can be referred to as privacy preserving (or privacy sensitive), for example, because they are adapted to prevent leakage of information about the user. For example, the access frequency estimate generated by the system can meet criteria for differential privacy, e.g., such that the access frequency estimate cannot be utilized to determine when and if individual users have accessed digital resources.
To be able to generate privacy-preserving access frequency estimates, the system can process access data for the digital resource (e.g., the access data identifies a respective set of users accessing the digital resource at each of a plurality of points in time) to generate a tree model (data structure). The tree model can refer to a hierarchical structure comprising a set of nodes and a set of edges, wherein each edge connects a respective "parent" node to a respective "child" node, and wherein each node (except the root node) has a parent node.
The system can build a tree model to encode access data in a manner that enables access frequency estimates to be generated for any time window by combining values associated with nodes in the tree model. To protect privacy, the system can combine the corresponding noise with the values associated with each node in the tree model, which has the effect of noising the access frequency estimates generated using the tree model and thus protecting privacy. In particular, noise-ing the access frequency estimate can preserve privacy by obscuring information about individual users that might otherwise be leaked from the access frequency estimate.
The tree model can encode the access data in a manner suitable to enable the system to generate an access frequency estimate by combining values associated with a limited number of nodes in the tree model (e.g., up to log (T) or log 2 (T) nodes), where T is the number of time points covered by the access data. Generating the access frequency estimate using a limited number of nodes from the tree model has the effect of limiting the amount of noise injected into the access frequency estimate and thus improving the accuracy of the access frequency estimate while preserving privacy. In contrast, some conventional approaches for protecting privacy, e.g., operating without the benefits of the tree model described in this specification, can only protect privacy at the cost of injecting significantly more noise into the access frequency estimate, resulting in significantly lower accuracy.
The system described in this specification enables access frequency estimates to be generated for any time interval by combining values associated with a limited number of nodes in a tree model, thereby enabling reduced consumption of computing resources (e.g., memory and computing power). In contrast, some conventional methods for generating access frequency estimates require storing the entire access data set (which requires more memory than storing a tree model) and processing the entire access data set each time an access frequency estimate is generated (which consumes significantly more computing power than generating an access frequency estimate by using a tree model).
The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
Fig. 1 is a block diagram of an example access frequency estimation system.
FIG. 2 illustrates an example one-dimensional (1D) tree model that can be used to represent digital resource access data.
FIG. 3 illustrates another example two-dimensional (2D) tree model that can be used to represent digital resource access data.
Fig. 4 is a flow chart of an example process for access frequency estimation.
FIG. 5 is a block diagram of an example environment in which digital components are distributed.
FIG. 6 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
The present specification describes an access frequency estimation system capable of generating accurate and privacy-preserving access frequency estimates, e.g., an estimate of the number of users accessing a digital resource at least a threshold number of times (e.g., at least once) during a time window.
A digital resource can refer to any suitable digital data that is accessible to a collection of users, such as by a computer. The user can access the digital resource in any of a variety of possible ways. Several examples of digital resources and possible ways in which a user can access the digital resources are described next.
In some implementations, the digital resource can be a data storage location, such as a database. The user can access the database, for example, through an Application Programming Interface (API) available to the database, for example, to query information from the database, or to store information in the database, or both.
In some implementations, the digital resource can be an application or web page that can be accessed by a user through a user interface available on the user device, for example. Accessing an application or web page can refer to interacting with the application or web page.
In some implementations, the digital resource can be a computing resource, e.g., one or more processors (e.g., a Central Processing Unit (CPU) or a Graphics Processing Unit (GPU)) available to a user in a cloud computing environment. The user can access the computing resource, for example, by providing data defining one or more computing tasks to be performed using the computing resource.
In some implementations, the digital resource can be a digital component, and the user can access the digital resource by receiving a transmission of the digital resource at the user device, for example, from a digital component transmission system. An example of a digital component transmission system is described with reference to fig. 5.
As used throughout this document, the phrase "digital component" refers to discrete units of digital content or digital information that can include, for example, one or more of a video clip, an audio clip, a multimedia clip, an image, a text segment, or a Uniform Resource Locator (URL). The digital components can be electronically stored in the physical memory device as a single file or collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files, and include streaming video, streaming audio, social networking posts, blog posts, and/or advertising information such that the advertisement is a type of digital component. Typically, the digital components are defined (or provided) by a single source (e.g., a digital component provider), but the digital components provided from one source may be enhanced with data from another source (e.g., weather information, real-time event information, or other information obtained from another source).
The access frequency estimation system can generate a privacy preserving access frequency estimate. Throughout the specification, an "access frequency estimate" refers to an estimate of the number of users accessing a digital resource at least a threshold number of times (e.g., at least once) during a time window. The "privacy-preserving" access frequency estimation refers to an access frequency estimation adapted to prevent leakage of information about a user.
To be able to generate privacy-preserving access frequency estimates, the access frequency system can process access data for the digital resource (e.g., the access data identifies a respective set of users accessing the digital resource at each of a plurality of points in time) to generate a tree model, such as a 1D or 2D tree model. Throughout this specification, a "tree model" refers to a hierarchical structure comprising a set of nodes and a set of edges, wherein each edge connects a respective "parent" node to a respective "child" node, and wherein each node (except the root node) has a parent node. A "one-dimensional" or "1D" tree model refers to a tree model in which each node of the tree model is parameterized by a set of parameters defining an area of one-dimensional space. An example 1D tree model is shown in fig. 2. A "two-dimensional" or "2D" tree model refers to a tree model in which each node of the tree model is parameterized by a set of parameters defining an area of a two-dimensional space. An example 2D tree model is shown in fig. 3.
The access frequency estimation system can process the 1D tree model to generate a fixed window access frequency estimate. In a fixed window implementation of the access frequency estimation system, a user of the system can be limited to querying access frequency estimates for a fixed length of time interval, e.g., comprising a fixed number of points in time. The access frequency estimation system can process the 2D tree model to generate a time window access frequency estimate. In a time window implementation of the access frequency estimation system, a user of the system may query the access frequency estimation for any suitable length of time interval, e.g., a first interval having two time points and a second interval having five time points.
To preserve privacy, the access frequency estimation system can combine the corresponding noise with values associated with each node in a tree model (e.g., a 1D or 2D tree model), which has the effect of noising and thus preserving privacy using access frequency estimates generated using the tree model. The access frequency estimation system can process the tree model to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window in a privacy-sensitive manner. These and other features are described in more detail below.
Fig. 1 is a block diagram of an example access frequency estimation system 100. The access frequency estimation system 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, in which the systems, components, and techniques described below are implemented.
The system 100 is configured to obtain access data 102 for the digital resource and process the access data 102 to generate an estimate of a number of users 108 accessing the digital resource during the time window at least a threshold number of times. The access data 102 for the digital resource can specify a respective set of users that access the digital resource at each point in the sequence of points in time. (each user can be associated with a unique alphanumeric identifier, for example). For each point in time in the sequence of points in time, the access data 102 can include data identifying a set of users accessing the digital resource at that point in time. The access data 102 can include any suitable number of points in time, such as 1000 points in time, 10000 points in time, 100000 points in time, or any other suitable number of points in time. The set of users accessing the digital resource at a point in time can include any suitable number of users, for example 1000 users, 10000 users, 100000 users, or any other suitable number of users. The system 100 can obtain the access data 102 in any suitable manner. For example, the system 100 can receive the access data 102, e.g., through an API available to the system 100.
As described above, the access frequency estimation system 100 can process the access data 102 to generate an estimate of the number of users 108 accessing the digital resource at least a threshold number of times during the time window. The access frequency estimation system 100 can generate an estimate of the number of users 108 using: (i) A tree model engine 110, and (ii) an estimator engine 120, each of which is described in more detail below.
The tree model engine 110 can be configured to process the access data 102 to generate data defining the tree model 104. As described above, the tree model 104 can be a hierarchical structure including a set of nodes and a set of edges, where each edge connects a respective pair of nodes in the tree model. Each edge can connect a "parent" node to a corresponding "child" node in the tree model, and each node (except the root node) in the tree model can have one parent node. The set of nodes of the tree model can also include a set of leaf nodes, e.g., nodes each connected to a parent node by an edge but not to any child nodes. In some cases, the tree model can be a binary tree model, for example, a tree model in which each non-leaf node is connected to two child nodes by edges. In some cases, the tree model can be a quadtree model, for example, a tree model in which each non-leaf node is connected to four child nodes by edges. In some cases, the tree model 104 can be a 1D tree model or a 2D tree model. The access frequency estimation system 100 can process the 1D tree model to generate a fixed window access frequency estimate. The access frequency estimation system 100 can process the 2D tree model to generate a time window access frequency estimate. An example tree model is described in more detail below with reference to fig. 2 and 3.
As a particular example, referring to fig. 2, tree model 200 can be a 1D tree model that includes a pair of nodes 212a, 212b connected, for example, by edges 214, where node 212b is a parent node and node 212a is a child node of parent node 212 b. Parent node 212b is also the root node, e.g., a node connected by an edge to one or more child nodes but not to any parent nodes. The set of nodes in the tree model 200 may also include a set of leaf nodes 210, e.g., nodes each connected to a parent node by an edge but not to any child nodes. Other nodes in the tree model 200 not included in the set of leaf nodes 210 may be referred to as internal nodes 220 in the tree model 200. As a specific example, if the access data includes a sequence of points in time including, for example, eight points in time, the tree model engine may generate the tree model 200 shown in fig. 2 including eight leaf nodes 210, one leaf node 210 for each point in time included in the access data.
Returning to FIG. 1, each node in the tree model 104 is associated with a "key" that specifies a plurality of time intervals in a time span. In general, the key can specify any suitable number of time intervals, for example, three time intervals or four time intervals. Each node in the tree model 104 can be associated with a "value" that is based on the respective number of users meeting node-specific selection criteria based on the time interval specified by the node's key. In general, the node-specific selection criteria can be any suitable criteria. In some cases, the node-specific selection criteria can characterize, for example, the number of times a user accesses a digital resource in each time interval specified by a key. Examples of node-specific selection criteria are described in more detail below.
In some cases, as part of generating tree model 104, tree model engine 110 can add respective noise to values associated with each node in tree model 104. For example, the tree model engine 110 can sample noise values from the probability distribution and add (or otherwise combine) the noise values to values associated with nodes in the tree model 104. The distribution can be, for example, a gaussian distribution, a laplacian distribution, or any other suitable distribution. In some cases, the tree model engine 110 can sample new (e.g., different) noise values for each of the nodes contained in the tree model 104. An example tree model is described in more detail below with reference to fig. 2 and 3.
As described above, the tree model engine 110 is configured to receive the access data 102 and process the access data 102 to generate the tree model 104. The access frequency estimation system 100 can receive a request 106 to estimate a number of users 108 accessing a digital resource at least a predefined number of times (e.g., at least 1, 5, or any other suitable number of times) within a time window. The system 100 can receive the request 106 in any suitable manner. For example, the system 100 can receive the request 106 from a user of the system 100, e.g., through an API available to the system 100.
In response to the request, the system 100 can process the tree model 104 using the estimator engine 120 to generate an estimate of the number of users 108 accessing the digital resource at least a predefined number of times within the time window. For example, the estimator 120 can process the tree model 104 to identify a plurality of nodes (e.g., including one or more leaf nodes and/or one or more internal nodes) in the tree model 104, each node having a respective key that satisfies a time window based identification criteria. The identification criteria can be any suitable identification criteria. In some cases, the estimator 120 can identify that one or more leaf nodes and one or more internal nodes in the tree model 104 each have a respective key that meets the time window-based identification criteria. For example, referring to FIG. 2, the estimator can identify that leaf node 212c and internal node 212d each have a corresponding key that meets the time window based identification criteria.
Returning to fig. 1, the estimator 120 can determine a combination of values associated with the identified nodes, for example, as a sum of values associated with the identified nodes, or in any other suitable manner. The estimator 120 can then generate an estimate of the number of users 108 based at least in part on a combination of values associated with the identified nodes. In some cases, access frequency estimation system 100 can output an estimate of the number of users 108 accessing the digital resource at least a predetermined number of times within the time window to, for example, users of system 100 through an API available to system 100.
In this manner, access frequency estimation system 100 can generate an estimate of user number 108 (e.g., an access frequency estimate) by combining values associated with a limited number of nodes (e.g., up to log (T) or log 2 (T) nodes) in tree model 104, where T is the number of points in time included in access data 102. Generating the access frequency estimate 108 using a limited number of nodes from the tree model 104 has the effect of limiting the amount of noise injected into the access frequency estimate 108 and thus improving the accuracy of the access frequency estimate 108 while protecting privacy.
The access frequency estimation system 100 can use the access frequency estimation 108 in a variety of possible ways, several examples of which are described below.
In some implementations, the system 100 can generate a notification indicating the access frequency estimate and provide the notification, for example, for display through a user interface.
In some implementations, the system 100 can use the access frequency estimate to determine whether a network attack, such as a distributed denial of service (DDoS) attack, has occurred. For example, if at least a threshold number of users have accessed the digital resource at least a threshold number of times within a time window, the system can determine that a network attack has occurred.
In some implementations, the system 100 can modify conditions under which digital resources are available to a user based on the access frequency estimate. For example, if a user accesses a digital resource by receiving a transmission of a digital component, the system can modify distribution parameters that control when the digital resource is sent to the user based on the access frequency estimate, e.g., to cause the digital component to be sent to more or fewer users.
In some implementations, the system 100 can modify the digital resource based on the access frequency estimate. For example, if the digital resource is a computing resource, the system can increase or decrease the computing power available through the computing resource in response to determining that the access frequency estimate meets a threshold.
An example tree model 104 is described in more detail below with reference to fig. 2 and 3.
Fig. 2 illustrates an example one-dimensional (1D) tree model 200 generated by an access frequency estimation system (e.g., system 100 in fig. 1). The tree model 200 shown in fig. 2 is an example of a one-dimensional tree model. The access frequency estimation system can process the 1D tree model 200 to generate a fixed window access frequency estimate.
As described above, the access frequency estimation system can generate the tree model 200 by processing access data of the digital resource. For each point in time in the sequence of points in time, the access data can include data identifying a set of users accessing the digital resource at that point in time. Fig. 2 provides a simplified example of a tree model 200 generated based on access data comprising a sequence of eight points in time. In general, the access frequency estimation system is capable of generating the tree model 200 by processing access data including any suitable number of time points in a sequence of time points.
The tree model 200 includes a set of nodes, such as a plurality of leaf nodes 210 and a plurality of internal nodes 220, and a set of edges, where each edge connects a pair of nodes. Each node in the tree model 200 is associated with a key that specifies a plurality of time intervals in a time span. In fig. 2, the example keys for each node are shown as a pair of numbers in brackets. For example, node 212a includes keys [1,4]. Similarly, root node 212b includes keys [1,8].
For each node in the one-dimensional tree model 200, the key of the node can be parameterized by a set of parameters defining the region of the one-dimensional space 230. For example, the key of each leaf node 210 in the one-dimensional tree model 200 can be parameterized by the parameter t, and the parameters of the leaf nodes 210 can define the region of one-dimensional space given by t. For each parent node in the tree model 200, the region of one-dimensional space defined by the keys of the parent node can be divided by the region of one-dimensional space defined by the keys of the child nodes of the parent node. For example, as shown in FIG. 2, the region of one-dimensional space defined by key [1,4] of parent node 212a is divided by the region of space defined by key [1,2] of child node 212e and the region of space defined by key [3,4] of child node 212 d.
For one or more nodes in the tree model 200, the keys of the nodes can specify at least a first time interval, a second time interval, a third time interval, and a fourth time interval. In some cases, the first time interval, the second time interval, the third time interval, and the fourth time interval can be different from one another. As a particular example, for a leaf node, the first time interval specified by each key can include t-1. The second time interval specified by each key can include [ t, t+W-1], where W is a predefined hyper-parameter of the access frequency estimation system. The third time interval specified by each key can include t+W-1. The fourth time interval specified by each key can include [ t-1, t+W-2]. In this embodiment of the access frequency estimation system (e.g., a fixed window arrival embodiment), the user of the system can be limited to querying access frequency estimates for a time interval of length W. Throughout the specification, in some cases, a single number can define a time interval, e.g., t-1 can define a [ t-1, t-1] time interval.
As described above, each node in the tree model 200 can be associated with a value based on the respective number of users meeting node-specific selection criteria based on the time interval specified by the node's key. For each leaf node in the one-dimensional tree model 200 shown in fig. 2, the value associated with the node can be based on the difference between: (i) A number of users satisfying a first node-specific selection criterion based on a time interval specified by a key of a node, and (ii) a number of users satisfying a second node-specific selection criterion based on a time interval specified by a key of a node.
For one or more leaf nodes 210 in the tree model 200, the user may meet the first node-specific selection criteria of the node only if: (i) A user accessing the digital resource in a first time interval, and (ii) a user accessing the digital resource a target number of times in a second time interval. The user may meet the second node-specific selection criteria of the node only if: (i) The user accessing the digital resource in a third time interval, and (ii) the user accessing the digital resource a target number of times in a fourth time interval. In some cases, the target number of times can be, for example, zero. Each time the system generates a value based on the number of users of a leaf node in the tree model, for example, as described above, the system can add the value to the parent node of the leaf node in the tree model and to any other ancestor nodes of the leaf node. In this way, the system can determine the value of each other (e.g., non-leaf) node in the tree model using the values determined for the leaf nodes in the tree model.
An example two-dimensional tree model is described in more detail below with reference to FIG. 3.
Fig. 3 illustrates an example two-dimensional (2D) tree model 300 generated by an access frequency estimation system (e.g., access frequency estimation system 100 of fig. 1). The access frequency estimation system can process the 2D tree model 300 to generate a time window access frequency estimate.
As described above, the access frequency estimation system can generate the tree model 300 by processing access data of the digital resource. For each point in time in the sequence of points in time, the access data can include data identifying a set of users accessing the digital resource at that point in time. Similar to fig. 2 above, fig. 3 provides a simplified example of a tree model 300 generated based on access data comprising a sequence of eight points in time. In general, the access frequency estimation system is capable of generating the tree model 300 by processing access data including any suitable number of time points in a sequence of time points. In fig. 3, some nodes of the tree model 300 are omitted for clarity.
For each node in the two-dimensional tree model 300, the key of the node is parameterized by a set of parameters defining the region of the two-dimensional space 310. For example, the keys of the nodes can be parameterized by corresponding parameters a, b, c, d. The parameters can define a region of a two-dimensional space given by [ a, b ] × [ c, d ]. For each parent node in tree model 300, the region of the two-dimensional space defined by the keys of the parent node is divided by the region of the two-dimensional space defined by the keys of the child nodes of the parent node. For example, as shown in FIG. 3, for parent node 302, spatial region 310 defined by the key of parent node 302 is divided by spatial region 310-A of child node 304-A, spatial region 310-B of child node 304-B, spatial region 310-C of child node 304-C, and spatial region 310-D of child node 304-D. Similarly, for parent node 304-D, spatial region 320 defined by the key of parent node 304-D is divided by spatial region 320-A of child node 306-A, spatial region 320-B of child node 306-B, spatial region 320-C of child node 306-C, and spatial region 320-D of child node 306-D. For one or more nodes in the two-dimensional tree model 300, the keys of the nodes specify at least a first time interval, a second time interval, and a third time interval. In some cases, the first time interval, the second time interval, and the third time interval are different from one another. As a particular example, the first time interval specified by each key can include [ a-1, b-1]. The second time interval specified by each key can include [ T+2-d, T+2-c ], where T is the last time point in the sequence of time points. The third time interval specified by each key can include [ b, T+1-d ].
As described above, each node in the two-dimensional tree model 300 can be associated with a value based on the respective number of users meeting a node-specific selection criterion based on a time interval specified by a key of the node. For each of one or more nodes in the two-dimensional tree model 300 shown in fig. 3, the user is able to meet the node-specific selection criteria only if: (i) The user accesses the digital resource at least once in the first time interval and at least once in the second time interval, and (ii) the user accesses the digital resource a target number of times in the third time interval. In some cases, the target number of times can be, for example, zero for one or more nodes in the two-dimensional tree model 300.
An example process of digital resource access frequency estimation performed by the access frequency estimation system is described in more detail below with reference to fig. 4.
Fig. 4 is a flow chart of an example process for digital resource access frequency estimation. For convenience, process 400 is described as being performed by a system of one or more computers located at one or more locations. For example, an access frequency estimation system (e.g., access frequency estimation system 100 of fig. 1) suitably programmed in accordance with the present description can perform process 400.
The system obtains access data for the digital resource (402). For each point in time in the sequence of points in time, the access data can include data identifying a set of users accessing the digital resource at that point in time. In some cases, a user can access a digital resource by receiving a transmission of a digital component.
The system processes the access data to generate data defining a tree model (404). The tree model can be a binary tree model. The tree model can include a set of nodes, and each node in the set of nodes can be associated with: (i) A key specifying a plurality of time intervals in a time span, and (ii) a value based on a corresponding number of users meeting a node-specific selection criterion based on the time interval specified by the key of the node. In some cases, the tree model can further include a set of edges, where each edge connects a respective pair of nodes in the tree model. In some cases, the system can generate the tree model by adding respective noise to values associated with each node in the tree model.
In some cases, for one or more nodes in the tree model, the keys of the nodes can specify at least a first time interval, a second time interval, and a third time interval that are different from one another. In some cases, for one or more nodes in the tree model, a user can meet node-specific selection criteria only if: (i) The user accesses the digital resource at least once in the first time interval and at least once in the second time interval, and (ii) the user accesses the digital resource a target number of times in the third time interval. In some cases, the target number of times can be zero for one or more nodes in the tree model.
In some implementations, the tree model can be a two-dimensional tree model. For each node in the tree model, the key of the node can be parameterized by a set of parameters defining an area of the two-dimensional space. For example, for each parent node in the tree model: the region of the two-dimensional space defined by the keys of the parent node is divided by the region of the two-dimensional space defined by the keys of the child nodes of the parent node. As a specific example, the keys of the nodes can be parameterized by corresponding parameters a, b, c, d. The parameters define the region of the two-dimensional space given by [ a, b ] × [ c, d ]. The first time interval can include [ a-1, b-1]. The second time interval can include [ t+2-d, t+2-c ], where T is the last time point in the sequence of time points. The third time interval can include [ b, T+1-d ].
In some implementations, for each node in the tree model, the value associated with the node can be based on a difference between: (i) A number of users satisfying a first node-specific selection criterion based on a time interval specified by a key of a node, and (ii) a number of users satisfying a second node-specific selection criterion based on a time interval specified by a key of a node. In this case, for one or more nodes in the tree model, the keys of the nodes can specify at least a first time interval, a second time interval, a third time interval, and a fourth time interval that are different from each other. For one or more leaf nodes in the tree model: the user is able to meet the first node-specific selection criteria of the node only if: (i) Accessing the digital resource in a first time interval, and (ii) accessing the digital resource a target number of times in a second time interval, the user being able to meet a second node-specific selection criterion for the node only if: (i) The user accesses the digital resource in a third time interval, and (ii) accesses the digital resource a target number of times in a fourth time interval.
In some cases, the tree model can be a one-dimensional tree model. In this case, for each node in the tree model, the key of the node can be parameterized by a set of parameters defining an area of one-dimensional space. For example, for each parent node in the tree model: the region of one-dimensional space defined by the keys of the parent node is divided by the region of one-dimensional space defined by the keys of the child nodes of the parent node. As a specific example, for one or more leaf nodes of the tree model: the key of a node can be parameterized by the parameter t. The parameters can define the region of one-dimensional space given by t. The first time interval can include t-1. The second time interval can include [ t, t+W-1], where W is a predefined hyper-parameter. The third time interval can include t+W-1. The fourth time interval can include [ t-1, t+W-2].
The system receives a request to determine a number of users accessing a digital resource at least a predefined number of times within a time window (406).
In response to the request, the system processes the tree model to generate an estimate of a number of users accessing the digital resource at least a predefined number of times within the time window (408). The system is capable of processing the tree model by identifying a plurality of nodes in the tree model, each node having a respective key that satisfies a time window based identification criteria. For example, the system can identify one or more leaf nodes of the tree model and one or more internal nodes of the tree model each having a respective key that satisfies a time window based identification criteria.
As a specific example, the system can process a one-dimensional (1D) tree model to identify nodes with keys that meet the identification criteria of the "differential privacy fixed window arrival query" algorithm outlined in more detail below, where S i is the set of users accessing digital resources at time step i, S i+W-1 is the set of users accessing digital resources at time step i+w-1, W is the time window length, n [a,b] is the value of the node associated with interval [ a, b ], and lsbit (i) represents the index of the least significant bit of i. In particular, the input to the process is a time index i and the output is an estimate of the number of users accessing the digital resource at least once within the time interval [ i, i+W-1 ]. It should be appreciated that differential privacy fixed window arrival queries require a maximum of log T nodes in the combined tree model, where T is the total time range covered by the access data.
Differential privacy fixed window arrival queries
/>
As another specific example, the system can process a two-dimensional (2D) tree model to identify nodes with keys that meet identification criteria according to the "differential privacy time window arrival query" algorithm outlined in more detail below, where S i is the set of users accessing digital resources at time step i, S j is the set of users accessing digital resources at time step j, T is the total number of time steps, D is the total number of users, n is the number of users, lsbit (i) represents the index of the least significant bits of i, and lsbit (j) represents the index of the least significant bits of j. In particular, the input to the process is a time range [ i, j ], and the output of the process is an estimate of the number of users accessing the digital resource at least once during the time interval [ i, j ]. It should be appreciated that the differential privacy time window arrival query algorithm requires combining up to log 2 T nodes, where T is the total time range covered by the access data.
Differential privacy time window arrival queries
The system can determine a combination of values associated with the identified node, for example, as a sum of values associated with the identified node. The system can then generate an estimate of the number of users based at least in part on a combination of values associated with the identified nodes. In some cases, the system can output an estimate of the number of users accessing the digital resource at least a predetermined number of times within the time window.
An example environment in which digital components are distributed is described in more detail below.
FIG. 5 is a block diagram of an example environment 500 in which digital components are transmitted for presentation with an electronic document. Techniques are described herein that can be used for privacy-sensitive estimation of a number of users that receive at least a threshold number of transmissions of a digital component within a time window.
The environment 500 can include an access frequency estimation system 100 (e.g., the access frequency estimation system 100 described above with reference to fig. 1). The access frequency estimation system 100 is capable of obtaining access data for a digital resource, wherein for each point in time in a sequence of points in time, the access data includes data identifying a set of users accessing the digital resource (e.g., digital component) at that point in time. The system 100 can process the access data to perform access frequency estimation, for example, to generate an estimate of a number of users accessing a digital resource (e.g., digital component) at least a predetermined number of times within a time window. The system 100 can use the estimation in a variety of different ways. For example, if a user accesses a digital resource by receiving a transmission of a digital component, the system 100 can modify distribution parameters that control when the digital resource is sent to the user based on the access frequency estimate, e.g., to cause the digital component to be sent to more or fewer users.
The example environment 500 includes a network 502, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, or a combination thereof. Network 502 connects electronic document server 504, client device 506, digital component server 508, and digital component distribution system 510 (also referred to as "distribution system" 510). The example environment 500 can include many different electronic document servers 504, client devices 506, and digital component servers 508.
Client device 506 is an electronic device capable of requesting and receiving resources over network 502. Example client devices 506 include personal computers, mobile communication devices (e.g., mobile phones), and other devices capable of sending and receiving data over the network 502. Client device 506 typically includes a user application, such as a web browser, to facilitate sending and receiving data over network 502, although native applications executed by client device 506 are also capable of facilitating sending and receiving data over network 502.
An electronic document is data that presents a collection of content at a client device 506. Examples of electronic documents include web pages, word processing documents, portable Document Format (PDF) documents, images, videos, search result pages, and feed sources. A native application (e.g., an "app") such as an application installed on a mobile, tablet, or desktop computing device is also an example of an electronic document. The electronic document can be provided to the client device 506 by an electronic document server 504 ("electronic document server"). For example, electronic document server 504 can include a server hosting a publisher website. In this example, the client device 506 can initiate a request for a given publisher web page, and the electronic server 504 hosting the given publisher web page can respond to the request by sending machine-executable instructions that initiate presentation of the given web page at the client device 506.
In another example, electronic document server 504 can include an app server from which client device 506 can download apps. In this example, the client device 506 is able to download files needed to install the app at the client device 506, and then execute the downloaded app locally.
The electronic document can include various contents. For example, the electronic document can include static content (e.g., text or other specified content) within the electronic document itself and/or that does not change over time. The electronic document can also include dynamic content that can change over time or on a per request basis. For example, a publisher of a given electronic document can maintain a data source for populating portions of the electronic document. In this example, the given electronic document can include one or more tags or scripts that cause the client device 506 to request content from the data source when the client device 506 processes (e.g., renders or executes) the given electronic document. The client device 506 integrates the content obtained from the data source into a given electronic document to create a composite electronic document that includes the content obtained from the data source.
In some cases, a given electronic document can include one or more digital component tags or digital component scripts that reference digital component distribution system 510. In these cases, when the client device 506 processes a given electronic document, the client device 506 executes a digital component tag or a digital component script. Execution of the digital component tags or digital component scripts configures the client device 506 to generate a request (referred to as a "component request") for one or more digital components 512, which is sent to the digital component distribution system 510 over the network 502. For example, a digital component tag or digital component script can enable client device 506 to generate a packetized data request including a header and payload data. Component request 512 can include event data specifying a feature, such as a name (or network location) of a server from which the digital component was requested, a name (or network location) of a requesting device (e.g., client device 506), and/or information that digital component distribution system 510 can use to select one or more digital components provided in response to the request. Component requests 512 are sent by client devices 506 to servers of digital component distribution system 510 over network 502 (e.g., a telecommunications network).
Component request 512 can include event data specifying other event characteristics, such as characteristics of the requested electronic document and the location of the electronic document capable of presenting the digital component. For example, digital component distribution system 510 can be provided with event data specifying a reference (e.g., a URL) to an electronic document (e.g., a web page) in which the digital component is to be presented, an available location of the electronic document that can be used to present the digital component, a size of the available location, and/or a media type that is eligible for presentation in those locations. Similarly, event data specifying keys associated with an electronic document ("document keys") or entities referenced by the electronic document (e.g., people, places, or things) can also be included in the component request 512 (e.g., as payload data) and provided to the digital component distribution system 510 in order to identify digital components that qualify for presentation with the electronic document. The event data can also include search queries submitted from the client device 506 to obtain a search results page, and/or data specifying search results and/or text, audible, or other visual content included in the search results.
Component request 512 can also include event data related to other information, such as information that a user of the client device has provided, geographic information indicating the state or region from which the component request was submitted, or other information that provides context for the environment in which the digital component will be displayed (e.g., time of day of the component request, day of the week of the component request, type of device that will display the digital component, such as a mobile device or tablet device). The component request 512 can be sent, for example, over a packetized network, and the component request 512 itself can be formatted as packetized data with a header and payload data. The header can specify the destination of the packet and the payload data can include any of the information discussed above.
In response to receiving component request 512 and/or using information included in component request 512, component distribution system 510 selects a digital component to be presented with the given electronic document. In some implementations, the digital components are selected (using the techniques described herein) in less than one second to avoid errors that may be caused by delayed selection of the digital components. For example, a delay in providing the digital component in response to the component request 512 may cause a page load error at the client device 506 or cause portions of the electronic document to remain unfilled even after other portions of the electronic document are presented at the client device 506. Further, as the delay in providing the digital component to the client device 506 increases, the electronic document will more likely no longer be presented at the client device 506 when the digital component is delivered to the client device 506, thereby negatively affecting the user's experience with the electronic document. Further, for example, if the electronic document is no longer presented at the client device 506 at the time the digital component is provided, a delay in providing the digital component may result in a failure in the transmission of the digital component.
In some implementations, the digital component distribution system 510 is implemented in a distributed computing system that includes, for example, a server and a set 514 of multiple computing devices that interconnect and identify and distribute digital components in response to the request 512. The set 514 of multiple computing devices operate together to identify a set of digital components from a corpus of millions of available digital components (DC 1-x) that qualify for presentation in an electronic document. Millions of available digital components can be indexed, for example, in digital component database 516. Each digital component index entry can reference a corresponding digital component and/or include a distribution parameter (DP 1-DPx) that facilitates (e.g., adjusts or limits) the distribution/transmission of the corresponding digital component. For example, the distribution parameters can facilitate transmission of the digital components by requiring the component request to include at least one criterion that matches (e.g., exactly matches or has some pre-specified level of similarity) one of the distribution parameters of the digital components.
In some implementations, the distribution parameters for a particular digital component can include a distribution key that must be matched (e.g., by a term specified in the electronic document, document key, or component request 512) in order for the digital component to qualify for presentation. In other words, the distribution parameters are used to trigger the distribution (e.g., transmission) of the digital components through the network 502. The distribution parameters can also require that the component request 512 include information specifying a particular geographic region (e.g., country or state) and/or information specifying that the component request 512 originate from a particular type of client device (e.g., mobile device or tablet device) in order for the digital component to qualify for presentation.
The distribution parameters can also specify a qualification value (e.g., a ranking score, a bid, or some other specified value) that is used to evaluate the qualification of the digital component for distribution/transmission (e.g., among other available digital components), such as by a component evaluation process. In some cases, the qualification value can specify a maximum amount of compensation that the provider of the digital component is willing to submit in response to the transmission of the digital component (e.g., for each instance of a particular event due to the presentation of the digital component, such as a user's interaction with the digital component).
The identification of qualified digital components can be partitioned into a plurality of tasks 517a-517c and then the plurality of tasks 517a-517c distributed among computing devices within a set 514 of computing devices. For example, different computing devices in the collection 514 can each analyze different portions of the digital component database 516 to identify various digital components having distribution parameters that match the information included in the component request 512. In some implementations, each given computing device in the set 514 can analyze a different data dimension (or set of dimensions) and communicate (e.g., send) the results of the analysis (Res 1-Res 3) 518a-518c back to the digital component distribution system 510. For example, the results 518a-518c provided by each computing device in the set 514 can identify a subset of digital components that qualify for distribution in response to a component request and/or a subset of digital components having certain distribution parameters. The identification of the subset of digital components can include, for example, comparing the event data to the distribution parameters, and identifying the subset of digital components having distribution parameters that match at least some of the features of the event data.
Digital component distribution system 510 aggregates results 518a-518c received from collection 514 of multiple computing devices and uses information associated with the aggregated results to: (i) Selecting one or more digital components to be provided in response to the request 512, and (ii) determining transmission requirements for the one or more digital components. For example, the digital component distribution system 510 can select a winning digital component set (one or more digital components) based on the results of one or more component evaluation processes. In turn, the digital component distribution system 510 can generate and transmit reply data 520 (e.g., digital data representing a reply) over the network 502, the reply data 520 enabling the client device 506 to integrate the winning digital component set into the given electronic document such that the winning digital component set is presented at the display of the client device 506 with the content of the electronic document.
In some implementations, the client device 506 executes instructions included in the reply data 520 that configure and enable the client device 506 to obtain the winning set of digital components from one or more digital component servers. For example, the instructions in reply data 520 can include a network location (e.g., a Uniform Resource Locator (URL)) and a script that causes client device 506 to send a Server Request (SR) 521 to digital component server 508 to obtain a given winning digital component from digital component server 508. In response to the request, digital component server 508 will identify the given winning digital component specified in server request 521 (e.g., within a database storing a plurality of digital components) and send digital component data (DC data) 522 to client device 506, which presents the given winning digital component in an electronic document at client device 506.
To facilitate searching of electronic documents, environment 500 can include a search system 550, where search system 550 identifies electronic documents by crawling and indexing the electronic documents (e.g., indexing based on crawled content of the electronic documents). The data about the electronic document can be indexed based on the electronic document associated with the data. The index of electronic documents and optionally cached copies are stored in search index 552 (e.g., a hardware memory device). The data associated with the electronic document is data representing content included in the electronic document and/or metadata of the electronic document.
Client device 506 is capable of submitting a search query to search system 550 over network 502. In response, search system 550 accesses search index 552 to identify electronic documents relevant to the search query. The search system 550 identifies electronic documents in the form of search results and returns the search results to the client device 506 in a search results page. The search results are data generated by the search system 550 that identifies electronic documents that are responsive to (e.g., relevant to) the particular search query and that includes active links (e.g., hypertext links) that cause the client device to request data from a specified network location (e.g., URL) in response to user interaction with the search results. Example search results can include a web page title, a portion of a text segment or image extracted from the web page, and a URL of the web page. Another example search result can include a title of the downloadable application, a text segment describing the downloadable application, an image depicting a user interface of the downloadable application, and/or a URL from which a location to the client device 506 can be downloaded to the application. In some cases, the search system 550 can be part of or interact with an application store (or online portal) from which applications can be downloaded for installation at the client device 506 in order to present information about downloadable applications related to submitted search queries. As with other electronic documents, the search results page can include one or more slots in which digital components (e.g., advertisements, video clips, audio clips, images, or other digital components) can be presented.
To select digital components to be transmitted in response to a component request, distribution system 510 can identify a set of digital components that qualify to be transmitted in response to a component request. Distribution system 510 can then select one or more of the qualified digital components to be transmitted through, for example, an auction process. In some implementations, the distribution system 510 performs the auction process by ranking the eligible digital components according to their respective eligibility values and selecting one or more highest ranked digital components to be transmitted in response to the component request.
For example, distribution system 510 can identify digital components A, B and C as eligible to be sent in response to a component request. In this example, digital component A has a bid value of 5, digital component B has a bid value of 1, and digital component C has a bid value of 5.5, where the qualification value of the digital component represents the bid associated with the digital component. The distribution system 510 can rank the digital components according to their respective asset values (e.g., in descending order) as: C. a, B. Finally, distribution system 510 can select the highest-ranked digital component C for transmission in response to the component request
After selecting a digital component to be transmitted in response to the digital component request, distribution system 510 determines a transmission requirement for the selected digital component. The transmission requirements specify actions to be performed by the provider of the digital component in response to the transmission of the digital component. For example, the transmission requirement can specify that the provider of the digital component submit a certain amount of compensation in response to the transmission of the digital component. In some cases, the compensation amount specifies an amount to submit for each instance of a particular event due to the presentation of the digital component (e.g., user interaction with the digital component).
Distribution system 510 can determine the transmission requirements for the selected digital component based on the asset value of the selected digital component and/or the asset values of other digital components determined to be eligible to be transmitted in response to the component request. For example, distribution system 510 can identify digital components A, B and C as eligible for transmission in response to the digital component request, where A, B and C have corresponding asset values of 5, 1, and 5.5. Distribution system 510 can select digital component C for transmission (because it has the highest qualification value) and can determine the transmission requirement of digital component C as the next highest one of the qualification values of the qualified digital component. In this example, the next highest qualification value is $5 (i.e., the qualification value for digital component A), and thus distribution system 510 is able to determine the transmission requirement for digital component C as $5.
As described above, the distribution system 510 can identify a set of digital components that qualify to be sent for presentation in an electronic document in response to a digital component request based on the distribution parameters corresponding to each digital component. In some cases, the distribution parameters corresponding to the numeric components can include a cluster of keys (i.e., a set of multiple keys). The distribution system 510 can determine that one or more keys from the cluster of keys must be matched (e.g., by terms specified in the electronic document, document key, or digital component request) in order for the digital component to qualify for transmission.
For example, distribution system 510 can receive a digital component request that includes a particular key. In this example, the distribution system 510 can determine that a particular numeric component having a distribution parameter of a specified key cluster is eligible for transmission in response to a numeric component request only if the particular key is included in the key cluster.
In some implementations, the distribution system 510 enables a provider of the digital component to set distribution parameters that specify key clusters from a set of predetermined key clusters. The keyword clusters output by the clustering system 100 may define keyword groupings as semantically related keyword clusters. For example, a key cluster may define that keys "shoe(s)", "shoe", "footwear", "boot", "cleat", "high-heeled shoe", "slipper", "sports shoe" are assigned to the same cluster.
Fig. 6 is a block diagram of an example computer system 600 that can be used to perform the operations described above. The system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 can be interconnected, for example, using a system bus 650. The processor 610 is capable of processing instructions for execution within the system 600. In one implementation, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor. The processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630.
Memory 620 stores information within system 600. In one implementation, the memory 620 is a computer-readable medium. In one implementation, the memory 620 is a volatile memory unit. In another implementation, the memory 620 is a non-volatile memory unit.
The storage device 630 is capable of providing mass storage for the system 600. In one implementation, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 can include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices (e.g., cloud storage devices) over a network, or some other mass storage device.
Input/output device 640 provides input/output operations for system 600. In one implementation, the input/output devices 640 can include one or more network interface devices such as an Ethernet card, a serial communication device (e.g., RS-232 port), and/or a wireless interface device (e.g., 802.11 card). In another implementation, the input/output devices can include a driver device configured to receive input data and send output data to other input/output devices, such as keyboards, printers, and display devices 660. However, other implementations, such as mobile computing devices, mobile communication devices, set-top box television client devices, and the like, can also be used.
Although an example processing system has been described in FIG. 6, implementations of the subject matter and functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
The term "configuration" is used in this specification in connection with systems and computer program components. For a system of one or more computers configured to perform a particular operation or action, it is meant that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. For one or more computer programs configured to perform particular operations or actions, it is meant that the one or more programs include instructions that, when executed by a data processing apparatus, cause the apparatus to perform the operations or actions.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or additionally, the program instructions can be encoded on a manually generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and includes all kinds of apparatus, devices and machines for processing data, including for example a programmable processor, a computer, or multiple processors or computers. The apparatus may also be or further comprise a dedicated logic circuit, such as an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). In addition to hardware, the apparatus can optionally include code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program, which may also be referred to or described as a program, software application, app, module, software module, script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more particular functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines may be installed and run on the same computer or computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or combination of, special purpose logic circuitry (e.g., an FPGA or ASIC) and one or more programmed computers.
A computer suitable for executing a computer program can be based on a general-purpose or special-purpose microprocessor or both, or any other type of central processing unit. Typically, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such a device. In addition, the computer can be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, such as a Universal Serial Bus (USB) flash drive, to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and can receive input from a user in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on a user device in response to a request received from the web browser. In addition, the computer can interact with the user by sending text messages or other forms of messages to a personal device (e.g., a smart phone running a messaging application) and receiving response messages from the user in return.
The data processing means for implementing the machine learning model can also comprise, for example, dedicated hardware accelerator units for handling public and computationally intensive parts of machine learning training or production, i.e. reasoning, workload.
The machine learning model can be implemented and deployed using a machine learning framework (e.g., tensorFlow framework).
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface, a web browser, or an application through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include Local Area Networks (LANs) and Wide Area Networks (WANs), such as the internet.
The computing system can include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., HTML pages) to the user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device acting as a client. Data generated at the user device, e.g., results of a user interaction, can be received at the server from the device.
While this specification contains many specifics of embodiments, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in a particular order in the claims, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying drawings do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
1. A method performed by one or more computers, the method comprising:
obtaining access data for the digital resource, wherein, for each point in time in the sequence of points in time, the access data comprises data identifying a set of users accessing the digital resource at the point in time;
Processing the access data to generate data defining a tree model, wherein the tree model includes a set of nodes, and each node in the set of nodes is associated with:
(i) A key specifying a plurality of time intervals in a time span, and
(Ii) Based on a value of a respective number of users meeting a node-specific selection criterion, the node-specific selection criterion being based on the plurality of time intervals specified by a key of the node;
Receiving a request to determine a number of users accessing the digital resource at least a predefined number of times within a time window; and
In response to the request:
The tree model is processed to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window.
2. The method of claim 1, wherein, for one or more nodes in the tree model, a key of the node specifies at least a first time interval, a second time interval, and a third time interval;
wherein the first time interval, the second time interval, and the third time interval are different from each other.
3. The method of claim 2, wherein, for one or more nodes in the tree model, a user satisfies node-specific selection criteria for the node only if:
(i) The user accesses the digital resource at least once during the first time interval and at least once during the second time interval; and
(Ii) The user accesses the digital resource a target number of times in a third time interval.
4. A method according to claim 3, wherein the target number of times is zero for one or more nodes in the tree model.
5. The method according to claim 2, wherein:
(i) The tree model is a two-dimensional tree model,
(Ii) For each node in the tree model, the key of the node is parameterized by a set of parameters defining an area of the two-dimensional space, and
(Iii) For each parent node in the tree model, the region of the two-dimensional space defined by the keys of the parent node is divided by the region of the two-dimensional space defined by the keys of the child nodes of the parent node.
6. The method of claim 5, wherein, for each node in the tree model:
the keys of the nodes are parameterized by corresponding parameters a, b, c, d;
The parameters define the region of the two-dimensional space given by [ a, b ] × [ c, d ];
The first time interval includes [ a-1, b-1];
the second time interval includes [ T+2-d, T+2-c ], where T is the last time point in the sequence of time points; and
The third time interval includes [ b, T+1-d ].
7. The method of claim 1, wherein, for each node in the tree model, the value associated with the node is based on a difference between: (i) A number of users meeting a first node-specific selection criteria based on a plurality of time intervals specified by the node's keys, and (ii) a number of users meeting a second node-specific selection criteria based on a plurality of time intervals specified by the node's keys.
8. The method of claim 7, wherein, for one or more nodes in the tree model, a key of the node specifies at least a first time interval, a second time interval, a third time interval, and a fourth time interval;
wherein the first time interval, the second time interval, the third time interval, and the fourth time interval are different from each other.
9. The method of claim 8, wherein, for one or more leaf nodes in the tree model:
The user meets the first node-specific selection criterion of the node only if: (i) A user accessing the digital resource in a first time interval, and (ii) a target number of times the digital resource is accessed in a second time interval; and
The user meets the second node-specific selection criterion of the node only if: (i) The user accesses the digital resource in a third time interval, and (ii) accesses the digital resource a target number of times in a fourth time interval.
10. The method of claim 9, wherein the target number of times is zero.
11. The method according to claim 8, wherein:
(i) The tree model is a one-dimensional tree model,
(Ii) For each node in the tree model, the key of the node is parameterized by a set of parameters defining an area of one-dimensional space, and
(Iii) For each parent node in the tree model, the region of one-dimensional space defined by the keys of the parent node is divided by the region of one-dimensional space defined by the keys of the child nodes of the parent node.
12. The method of claim 11, wherein, for one or more leaf nodes of the tree model:
The key of the node is parameterized by the parameter t;
The parameters define the region of one-dimensional space given by t;
the first time interval includes t-1:
The second time interval comprises [ t, t+W-1] wherein W is a predefined hyper-parameter;
the third time interval includes t+W-1; and
The fourth time interval includes [ t-1, t+W-2].
13. The method of claim 1, wherein generating a tree model comprises:
respective noise is added to the values associated with each node in the tree model.
14. The method of claim 1, wherein processing the tree model to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window comprises:
Identifying a plurality of nodes in the tree model, each node having a respective key that meets a time window based identification criteria;
determining a combination of values associated with the identified nodes; and
An estimate of the number of users is generated based at least in part on a combination of values associated with the identified nodes.
15. The method of claim 14, wherein identifying a plurality of nodes in a tree model comprises:
One or more leaf nodes of the tree model and one or more internal nodes of the tree model each have a respective key that satisfies a time window based identification criterion, and wherein,
Determining a combination of values associated with the identified nodes includes:
A sum of values associated with the identified nodes is determined.
16. The method of claim 1, wherein a user accesses the digital resource by receiving a transmission of the digital component.
17. The method of claim 1, wherein the tree model comprises a set of edges, wherein each edge connects a respective pair of nodes in the tree model, and wherein the tree model is a binary tree model.
18. The method of claim 1, further comprising:
An estimate of a number of users accessing the digital resource at least a predefined number of times within the time window is output.
19. A system, comprising:
One or more computers; and
One or more storage devices communicatively coupled to the one or more computers, wherein the one or more storage devices store instructions that, when executed by the one or more computers, cause the one or more computers to perform operations comprising:
obtaining access data for the digital resource, wherein, for each point in time in the sequence of points in time, the access data comprises data identifying one type of user accessing the digital resource at said point in time;
Processing the access data to generate data defining a tree model, wherein the tree model includes a set of nodes, and each node in the set of nodes is associated with:
(i) A key specifying a plurality of time intervals in a time span, and
(Ii) Based on a value of a respective number of users meeting a node-specific selection criterion, the node-specific selection criterion being based on a plurality of time intervals specified by a key of the node;
Receiving a request to determine a number of users accessing the digital resource at least a predefined number of times within a time window; and
In response to the request:
the tree model is processed to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window.
20. One or more non-transitory computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations comprising:
obtaining access data for the digital resource, wherein, for each point in time in the sequence of points in time, the access data comprises data identifying a set of users accessing the digital resource at the point in time;
Processing the access data to generate data defining a tree model, wherein the tree model includes a set of nodes, and each node in the set of nodes is associated with:
(i) A key specifying a plurality of time intervals in a time span, and
(Ii) Based on a value of a respective number of users meeting a node-specific selection criterion, the node-specific selection criterion being based on a plurality of time intervals specified by a key of the node;
Receiving a request to determine a number of users accessing the digital resource at least a predefined number of times within a time window; and
In response to the request:
the tree model is processed to generate an estimate of the number of users accessing the digital resource at least a predefined number of times within the time window.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263398785P | 2022-08-17 | 2022-08-17 | |
US63/398,785 | 2022-08-17 | ||
PCT/US2023/027731 WO2024039474A1 (en) | 2022-08-17 | 2023-07-14 | Privacy sensitive estimation of digital resource access frequency |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117916727A true CN117916727A (en) | 2024-04-19 |
Family
ID=87557518
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202380013400.3A Pending CN117916727A (en) | 2022-08-17 | 2023-07-14 | Privacy sensitive estimation of digital resource access frequency |
Country Status (2)
Country | Link |
---|---|
CN (1) | CN117916727A (en) |
WO (1) | WO2024039474A1 (en) |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9195396B2 (en) * | 2013-03-14 | 2015-11-24 | SanDisk Technologies, Inc. | Estimating access frequency statistics for storage device |
CN108153870A (en) * | 2017-12-25 | 2018-06-12 | 四川长虹电器股份有限公司 | A kind of user access path Forecasting Methodology |
-
2023
- 2023-07-14 CN CN202380013400.3A patent/CN117916727A/en active Pending
- 2023-07-14 WO PCT/US2023/027731 patent/WO2024039474A1/en active Application Filing
Also Published As
Publication number | Publication date |
---|---|
WO2024039474A1 (en) | 2024-02-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11868375B2 (en) | Method, medium, and system for personalized content delivery | |
US9473587B2 (en) | Relevance-based aggregated social feeds | |
US8856124B2 (en) | Co-selected image classification | |
US20180075137A1 (en) | Method and apparatus for training a machine learning algorithm (mla) for generating a content recommendation in a recommendation system and method and apparatus for generating the recommended content using the mla | |
US8346815B2 (en) | Dynamic image display area and image display within web search results | |
US20090271391A1 (en) | Method and apparatus for rating user generated content in seach results | |
US20200110754A1 (en) | Method and system for generating digital content recommendation | |
US20120295633A1 (en) | Using user's social connection and information in web searching | |
US11249993B2 (en) | Answer facts from structured content | |
CN112740202A (en) | Performing image search using content tags | |
US20230087460A1 (en) | Preventing the distribution of forbidden network content using automatic variant detection | |
US8234265B1 (en) | Content selection data expansion | |
EP3293646A1 (en) | Method and server for training a machine learning algorithm (mla) for content recommendation generation | |
WO2024006007A1 (en) | Privacy-sensitive neural network training | |
CN111201524B (en) | Percentile linked clustering | |
JP7267471B2 (en) | Secure management of data distribution restrictions | |
CN117916727A (en) | Privacy sensitive estimation of digital resource access frequency | |
US20150088859A1 (en) | Click magnet images | |
KR20220093261A (en) | Context-adaptive scanning | |
US20240005040A1 (en) | Cardinality models for privacy-sensitive assessment of digital component transmission reach | |
WO2024086256A1 (en) | Privacy sensitive estimation of digital resource access frequency | |
US20230409774A1 (en) | Reach and frequency prediction for digital component transmissions | |
US20230410034A1 (en) | Reach and frequency prediction for digital component transmissions | |
US20230409773A1 (en) | Reach and frequency prediction for digital component transmissions | |
US20230177543A1 (en) | Privacy preserving machine learning expansion models |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination |