US20230298612A1 - Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition - Google Patents
Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition Download PDFInfo
- Publication number
- US20230298612A1 US20230298612A1 US18/171,411 US202318171411A US2023298612A1 US 20230298612 A1 US20230298612 A1 US 20230298612A1 US 202318171411 A US202318171411 A US 202318171411A US 2023298612 A1 US2023298612 A1 US 2023298612A1
- Authority
- US
- United States
- Prior art keywords
- speech
- asr
- input signal
- multichannel
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
- G10L21/0216—Noise filtering characterised by the method used for estimating noise
- G10L21/0232—Processing in the frequency domain
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/27—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique
- G10L25/30—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique using neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/03—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the type of extracted parameters
- G10L25/18—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the type of extracted parameters the extracted parameters being spectral information of each sub-band
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/78—Detection of presence or absence of voice signals
- G10L25/84—Detection of presence or absence of voice signals for discriminating voice from noise
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04S—STEREOPHONIC SYSTEMS
- H04S3/00—Systems employing more than two channels, e.g. quadraphonic
- H04S3/008—Systems employing more than two channels, e.g. quadraphonic in which the audio signals are in digital form, i.e. employing more than two discrete digital channels
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
- G10L2021/02082—Noise filtering the noise being echo, reverberation of the speech
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04S—STEREOPHONIC SYSTEMS
- H04S2400/00—Details of stereophonic systems covered by H04S but not provided for in its groups
- H04S2400/01—Multi-channel, i.e. more than two input channels, sound reproduction with two speakers wherein the multi-channel information is substantially preserved
Definitions
- This disclosure relates to a microphone array configuration invariant, streaming, multichannel neural enhancement frontend for automatic speech recognition.
- ASR automatic speech recognition
- One aspect of the present disclosure provides a multichannel neural frontend speech enhancement model for speech recognition that includes a speech cleaner, a stack of self-attention blocks each having a multi-headed self attention mechanism, and a masking layer.
- the speech cleaner receives, as input, a multichannel noisy input signal and a multichannel contextual noise signal, and generates, as output, a single channel cleaned input signal.
- the stack of self-attention blocks receives, as input, at an initial block of the stack of self-attention blocks, a stacked input including the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal, and generates, as output, from a final block of the stack of self-attention blocks, an un-masked output.
- the masking layer receives, as input, the single channel noisy input signal and the un-masked output generated as output from the final block of the stack of self-attention blocks, and generates, as output, enhanced input speech features corresponding to a target utterance.
- Implementations of the disclosure may include one or more of the following optional features.
- the stack of self-attention blocks includes a stack of Conformer blocks.
- the stack of Conformer blocks may include four Conformer blocks.
- the speech enhancement model executes on data processing hardware residing on a user device.
- the user device is configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device.
- the speech enhancement model may be agnostic to a number of microphones in the array of microphones.
- the speech cleaner executes an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output, and subtracting the summed output from the first channel of the multichannel noisy input signal.
- FIR finite impulse response
- a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance.
- the backend speech system includes at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
- ASR automatic speech recognition
- the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
- the spectral loss may be based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask.
- the ideal ratio mask is computed using reverberant speech and reverberant noise.
- the ASR loss is computed by generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features.
- computing the ASR loss is based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- Another aspect of the disclosure provides a computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations that include receiving a multichannel noisy input signal and a multichannel contextual noise signal, and generating, using a speech cleaner of a speech enhancement model, a single channel cleaned input signal.
- the operations also include generating, as output from a stack of self-attention blocks of the speech enhancement model configured to receive a stacked input including the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal, an un-masked output.
- each self-attention block in the stack of self-attention blocks includes a multi-headed self attention mechanism.
- the operations further include generating, using a masking layer of the speech enhancement model configured to receive the single channel noisy input signal and the un-masked output generated as output from the stack of self-attention blocks, enhanced input speech features corresponding to a target utterance.
- the stack of self-attention blocks includes a stack of Conformer blocks.
- the stack of Conformer blocks may include four Conformer blocks.
- the speech cleaner, the stack of self-attention blocks, and the masking layer execute on the data processing hardware residing on a user device.
- the user device is configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device.
- the speech enhancement model may be agnostic to a number of microphones in the array of microphones.
- the operations further include executing, using the speech cleaner, an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output, and subtracting the summed output from the first channel of the multichannel noisy input signal.
- a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance.
- the backend speech system includes at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
- ASR automatic speech recognition
- the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
- the spectral loss may be based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask.
- the ideal ratio mask is computed using reverberant speech and reverberant noise.
- the ASR loss is computed by generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features.
- computing the ASR loss is based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- FIG. 1 is a schematic view of a system that includes a user communicating a spoken target utterance to a speech-enabled user device.
- FIG. 2 is a schematic view of a multichannel neural frontend speech enhancement model of FIG. 1 .
- FIG. 3 is a schematic view of a speech cleaner of the multichannel neural frontend speech enhancement model.
- FIG. 4 is a schematic view of a self-attention conformer block of the multichannel neural frontend speech enhancement model.
- FIG. 5 is a schematic view of an example training process for jointly training a contextual frontend processing model and an automatic speech recognition model.
- FIG. 6 is an example flowchart of an example arrangement of operations for a method of automatic speech recognition using a multichannel neural frontend speech enhancement model.
- FIG. 7 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
- ASR automatic speech recognition
- Device echo may correspond to playback audio output from devices, such as smart home speakers, whereby the playback audio is recorded as echo and can affect performance of a backend speech system, such as an ASR system.
- a backend speech system such as an ASR system.
- degradation of performance of the backend speech system is especially severe if the playback audio contains audible speech, e.g., a text-to-speech (TTS) response from a digital assistant.
- TTS text-to-speech
- Background noise with non-speech characteristics is usually well handled using data augmentation strategies like multi-style training (MTR) of the ASR models.
- MTR multi-style training
- a room simulator is used to add noise to the training data, which is then carefully weighted with clean data during training to get a good balance in performance between clean and noisy conditions.
- large scale ASR models are robust to moderate levels of non-speech noise.
- background noise can still affect performance of backend speech systems in the presence of low signal-to-noise ratio (SNR) conditions.
- SNR signal-to-noise ratio
- the training data for these ASR models typically covers various acoustic and linguistic use cases (e.g., voice search and video captioning), thereby making it challenging to simultaneously address harsher noise conditions.
- voice search and video captioning e.g., voice search and video captioning
- Implementations herein are directed toward training a frontend speech enhancement model for improving robustness of ASR.
- the model is practical from the standpoint that it is difficult, if not impossible, to know what class of background interference to address ahead of time, particularly in a streaming ASR setting.
- the frontend speech enhancement model includes a contextual enhancement neural network (CENN) capable of making use of a multichannel noisy input signal and a multichannel contextual noise signal.
- CENN contextual enhancement neural network
- the noise context i.e., a few seconds of audio before the target utterance to be recognized, carries useful information about the acoustic context.
- the CENN employs a respective neural network architecture configured to ingest the noisy input and the contextual input to produce enhanced input speech features that may be passed to a backend speech system, such as, an ASR model that may process the enhanced input speech features to generate a speech recognition result for the target utterance.
- a backend speech system such as, an ASR model that may process the enhanced input speech features to generate a speech recognition result for the target utterance.
- the frontend speech enhancement model is designed to operate with a multi-channel array, the frontend speech enhancement model itself is agnostic as to the number of channels in the array or their configuration.
- a system 100 includes a user 10 communicating a spoken target utterance 12 to a speech-enabled user device 110 (also referred to as a device 110 or a user device 110 ) in a speech environment.
- the user 10 i.e., speaker of the utterance 12
- the device 110 is configured to capture sounds from one or more users 10 , 11 within the speech environment.
- the audio sounds may refer to a spoken utterance 12 by the user 10 that functions as an audible query, a command for the device 110 , or an audible communication captured by the device 110 .
- Speech-enabled systems of the device 110 or associated with the device 110 may field the query for the command by answering the query and/or causing the command to be performed.
- the background interference may interfere with the ability of a backend speech system 180 to process the target utterance 12 that specifies the query or command for the device 110 .
- the background interference may include one or more of a device echo corresponding to playback audio 154 output from the user device (e.g., a smart speaker) 110 , competing speech 13 such as utterances other than the target utterance 12 spoken by one or more other users 11 that are not directed toward the device 110 , and background noise with non-speech characteristics such as a ringtone 15 from a separate user device 111 .
- Implementations herein employ a multichannel neural frontend speech enhancement model 200 (also referred to as a model 200 or a frontend speech enhancement model 200 ) that executes on the device 110 and is configured to receive, as input, a multichannel noisy input signal 202 including speech features corresponding to the target utterance 12 and the background interference, and a multichannel contextual noise signal 204 and generate, as output, enhanced input speech features 250 corresponding to the target utterance 12 by processing the multichannel noisy input signal 202 and the multichannel contextual noise signal 204 to remove the background interference.
- the multichannel noisy input signal 202 includes one or more channels 206 , 206 a —n of audio.
- a backend speech system 180 may then process the enhanced input speech features 250 to generate an output 182 .
- the multichannel neural frontend speech enhancement model 200 effectively removes (i.e., masks) the presence of background interference recorded by the device 110 when the user 10 spoke the target utterance 12 such that the enhanced input speech features 250 provided to the backend speech system 180 convey the speech (i.e., target utterance 12 ) that was intended for the device 110 so that the output 182 generated by the backend speech system 180 is not degraded by the background interference.
- the backend speech system 180 includes an ASR system 190 that employs an ASR model 192 to process the enhanced input speech features 250 to generate a speech recognition result (e.g., transcription) for the target utterance 12 .
- the ASR system 190 may further include a natural language understanding (NLU) module (not shown) that performs semantic interpretation on the transcription of the target utterance 12 to identify the query/command directed toward the device 110 .
- NLU natural language understanding
- the output 182 from the backend speech system 180 may include the transcription and/or instructions to fulfill the query/command identified by the NLU module.
- the backend speech system 180 may additionally or alternatively include a hotword detection model (not shown) configured to detect whether or not the enhanced input speech features 250 include a presence of one or more hotwords/warm words the hotword detection model is trained to detect.
- the hotword detection model may output a hotword detection score indicating a likelihood that the enhanced input speech features 250 corresponding to the target utterance 12 include a particular hotword/warm word. Detection of a hotword may trigger a wake-up process that causes the device 110 to wake-up from a sleep state. For instance, the device 110 may wake-up and process the hotword and/or one or more terms preceding/following the hotword.
- the background speech system 180 includes an audio or audio-video calling application (e.g., a video conferencing application).
- the enhanced input speech features 250 corresponding to the target utterance 12 are used by the audio or audio-video calling application to filter the voice of the target speaker 10 for communications to recipients during an audio or audio-video communication session.
- the background speech system 180 may additionally or alternatively include a speaker identification model configured to perform speaker identification using the enhanced input speech features 250 to identify the user 10 that spoke the target utterance 12 .
- the device 110 captures the multichannel noisy input signal 202 (also referred to as audio data) of the target utterance 12 spoken by the user 10 in the presence of background interference emanating from one or more sources other than the user 10 .
- the multichannel noisy input signal 202 includes one or more single channel noisy input signals 206 , 206 a —n of audio.
- the device 110 may correspond to any computing device associated with the user 10 and capable of receiving multichannel noisy input signals 202 .
- Some examples of user devices 110 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches, smart headphones, etc.), smart appliances, and internet of things (IoT) devices, smart speakers, etc.
- IoT internet of things
- the device 110 includes data processing hardware 112 and memory hardware 114 in communication with the data processing hardware 112 and storing instructions, that when executed by the data processing hardware 112 , cause the data processing hardware 112 to perform one or more operations.
- the multichannel neural frontend speech enhancement model 200 may execute on the data processing hardware 112 .
- the backend speech system 180 executes on the data processing hardware 112 .
- the device 110 includes one or more applications (i.e., software applications) where each application may utilize enhanced input speech features 250 generated by the multichannel neural frontend speech enhancement model 200 to perform various functions within the application.
- the device 110 includes an assistant application configured to communicate synthesized playback audio 154 to the user 10 to assist the user 10 with various tasks.
- the user device 110 further includes (or is in communication with) an audio subsystem with an array of audio capturing devices (e.g., microphones) 116 , 116 a —n for capturing and converting spoken utterances 12 within the speech environment into electrical signals and a speech output device (e.g., a speaker) 118 for communicating an audible audio signal (e.g., a synthesized playback audio 154 from the device 110 ).
- Each microphone 116 in the array of microphones 116 of the user device 110 may separately record the utterance 12 on a separate dedicated channel 206 of the multichannel noisy input signal 202 .
- the user device 110 may include two microphones 116 that each record the utterance 12 , and the recordings from the two microphones 116 may be combined into a two-channel noisy input signal 202 (i.e., stereophonic audio or stereo). That is, the two microphones reside on the user device 110 .
- the user device 110 includes more than two microphones 116 .
- the user device 102 may be in communication with two or more microphones 116 separate/remote from the user device 110 .
- the user device 110 may be a mobile device disposed within a vehicle and in wired or wireless communication (e.g., Bluetooth) with two or more microphones 116 of the vehicle.
- the user device 110 is in communication with least one microphone 116 residing on a separate device 111 , which may include, without limitation, an in-vehicle audio system, a computing device, a speaker, or another user device.
- the separate device 111 may also be in communication with the one or more microphones 116 residing on the user device 110 .
- the device 110 is configured to communicate with a remote system 130 via a network (not shown).
- the remote system 130 may include remote resources 132 , such as remote data processing hardware 134 (e.g., remote servers or CPUs) and/or remote memory hardware 136 (e.g., remote databases or other storage hardware).
- the device 110 may utilize the remote resources 132 to perform various functionality related to speech processing and/or synthesized playback communication.
- the multichannel neural frontend speech enhancement model 200 and the backend speech system 180 may reside on the device 110 (referred to as on-device systems) or reside remotely (e.g., reside on the remote system 130 ), but in communication with the device 110 .
- one or more backend speech systems 180 reside locally or on-device while one or more other backend speech systems 180 reside remotely.
- one or more backend speech systems 180 leveraging the enhanced input speech features 250 output from the multichannel neural frontend speech enhancement model 200 may be local or remote in any combination.
- the system 180 may reside in the remote system 130 .
- the device 110 may support the size or the processing requirements of one or more systems 180
- the one or more systems 180 may reside on the device 110 using the data processing hardware 112 and/or the memory hardware 114 .
- the one or more of the systems 180 may reside on both locally/on-device and remotely.
- a backend speech system 180 may default to execute on the remote system 130 when a connection between the device 110 and remote system 130 is available, but when the connection is lost or unavailable, the system 180 instead executes locally on the device 110 .
- the device 110 or a system associated with the device 110 identifies text that the device 110 will communicate to the user 10 as a response to a query spoken by the user 10 .
- the device 110 may then use a text-to-speech (TTS) system to convert the text into corresponding synthesized playback audio 154 for the device 110 to communicate to the user 10 (e.g., audibly communicate to the user 10 ) as the response to the query.
- TTS text-to-speech
- the TTS system communicates the synthesized playback audio 154 to the device 110 to allow the device 110 to output the synthesized playback audio 154 .
- the device 110 outputs the synthesized playback audio 154 of “today is sunny” at a speaker 118 of the device 110 responsive to the user 10 providing a spoken query for today's weather forecast.
- the synthesized playback audio 154 when the device 110 outputs the synthesized playback audio 154 , the synthesized playback audio 154 generates an echo 156 captured by the audio capturing device 116 .
- the synthesized playback audio 154 corresponds to a reference audio signal. While synthesized playback audio 154 depicts a reference audio signal in the example of FIG. 1 , the reference audio signal may include other types of playback audio 154 including media content output from the speaker 118 or a communication from a remote user the user 10 is conversing with (e.g., voice over IP call or video conferencing call) through the device 110 .
- the audio capturing device 116 may also be simultaneously capturing the target utterance 12 spoken by the user 10 that includes a follow-up query inquiring more about the weather, by stating “what about tomorrow?”
- FIG. 1 depicts that, as the device 110 outputs the synthesized playback audio 154 , the user 10 inquires more about the weather, in a spoken utterance 12 to the device 110 , by stating “what about tomorrow?”
- the spoken utterance 12 and the echo 156 are both captured at the audio capturing device 116 simultaneously to form the multichannel noisy input signal 202 .
- the multichannel noisy input signal 202 includes an overlapped audio signal where some portion of the target utterance 12 spoken by the user 10 overlaps with some portion of the reference audio signal (e.g., synthesized playback audio) 154 output from the speaker 118 of the device 110 .
- the reference audio signal e.g., synthesized playback audio
- competing speech 13 spoken by another user 11 in the environment, as well as non-speech characteristics such as a ringtone 15 from a separate user device 111 may also be captured by the audio capturing device 116 and contribute to background interference that overlaps with the target utterance 12 .
- the backend speech system 180 may have issues processing the target utterance 12 corresponding to the follow-up weather query “what about tomorrow?” in the multichannel noisy input signal 202 due to the presence of the background interference attributed to at least one of the playback audio 154 , competing speech 13 , or non-speech background noise 15 interfering with target utterance 12 .
- the multichannel neural frontend speech enhancement model 200 is employed to improve robustness of the backend speech system 180 by effectively removing (i.e., masking) the presence of the background interference recorded by the device 110 when the user 10 spoke the target utterance 12 .
- the model 200 may perform speech enhancement by applying noise context modeling where the speech cleaner 300 of the model 200 processes the multichannel contextual noise signal 204 associated with a predetermined duration of noise segments captured by the audio capturing device 116 prior to the target utterance 12 spoken by the user 10 .
- the predetermined duration includes six (6) seconds of noise segments.
- the multichannel contextual noise signal 204 provides noise context.
- the multichannel contextual noise signal 204 includes LFBE features of the noise context signal for use as contextual information.
- FIG. 2 shows the multichannel neural frontend speech enhancement model 200 of FIG. 1 .
- the multichannel neural frontend speech enhancement model 200 uses a modified version of a conformer neural network architecture that combines convolution and self-attention to model short-range and long-range interactions.
- the model 200 includes a speech cleaner 300 , a feature stack 220 , an encoder 230 , and a masking layer 240 .
- the speech cleaner 300 may execute an adaptive noise cancelation algorithm ( FIG. 3 ).
- the encoder 230 may include a stack of self-attention blocks 400 .
- the speech cleaner 300 may be configured to receive, as input, the multichannel noisy input signal 202 and the multichannel contextual noise signal 204 and generate, as output, a single channel cleaned input signal 340 .
- the speech cleaner 300 includes a finite impulse response (FIR) filter to process the multichannel noisy input signal 202 .
- FIR finite impulse response
- FIG. 3 provides an example adaptive noise cancelation algorithm executed by the speech cleaner 300 .
- the speech cleaner 300 includes an FIR module 310 including an FIR filter, a minimization module 320 , and a cancelation module 330 .
- the multichannel noisy input signal 202 includes three channels 206 a - c each including respective audio features captured by a separate dedicated microphone 116 a - c in an array of three microphones 116 .
- the frontend speech enhancement model 200 is agnostic to a number of microphones 116 in the array of microphones 116 .
- the multichannel noisy input signal 202 can include one channel 206 captured by one microphone 116 , two channels 206 captured by two microphones 116 , or four or more channels 206 captured by four or more microphones 116 without departing from the scope of the present disclosure.
- the FIR module 310 applies the FIR filter on all channels 206 of the multichannel noisy input signal 202 except for a first channel 206 a to generate a summed output 312 .
- the FIR module 310 does not process the first channel 206 a of the multichannel noisy input signal 202 , but does apply the FIR filter on the second channel 206 b and the third channel 206 c of the multichannel noisy input signal 202 to generate the summed output 312 .
- the minimization module 320 receives the summed output 312 and the first channel 206 a and generates a minimized output 322 by subtracting the summed output 312 from the first channel 206 a of the multichannel noisy input signal 202 .
- the FIR filter includes a tapped delay line of length L of three (3) applied to the channels 206 b , 206 c but not the channel 206 a , where determining the minimized output 322 may be expressed as follows:
- ⁇ tilde over (Y) ⁇ m is a vector of time delayed Short-time Fourier transform (STFT) processed input for the channels 206 b , 206 c and U m (k) is a vector of the filter coefficients to be applied to the channels 206 b , 206 c .
- STFT Short-time Fourier transform
- U m (k) is a vector of the filter coefficients to be applied to the channels 206 b , 206 c .
- ⁇ tilde over (Y) ⁇ m ( n ) [ Y m ( n ), Y m ( n ⁇ 1), . . . Y m ( n ⁇ ( L ⁇ 1))] T (2)
- filter coefficients may minimize the power of the output as follows:
- the cancelation module 330 may use the multichannel contextual noise signal 204 that occurs directly before the utterance 12 in the multichannel noisy input signal 202 .
- the minimization module 320 generates the minimized output 322 through adaptation during the multichannel contextual noise signal 204 when the utterance 12 is not present in the multichannel noisy input signal 202 .
- the adaptation may include a recursive least squares (RLS) algorithm.
- the feature stack 220 is configured to receive, as input, the single channel cleaned input signal 340 and a single channel 206 a of the multichannel noisy input signal 202 , and generate a stacked input 232 including the single channel cleaned input signal 340 and the single channel 206 a .
- the feature stack 220 may convert each of the single channel cleaned input signal 340 and the single channel 206 a of the multichannel noisy input signal 202 into 128-dimension log-mel domains using a window size of 32 milliseconds (ms) with a step size of 10 ms.
- ms milliseconds
- four frames may be stacked with a 30 ms step upon input to the feature stack 220 .
- the encoder 230 receives the stacked input 232 including the single channel cleaned input signal 340 and the single channel 206 a of the multichannel noisy input signal 202 , and generates, as output, an un-masked output 480 .
- the encoder 230 includes a stack of self-attention blocks 400 (also referred to as blocks 400 ).
- an initial block 400 of the stack of self-attention blocks 400 receives the stacked input 232 including the single channel cleaned input signal 340 output from the speech cleaner 300 and the single channel 206 of the multichannel noisy input signal 202 , and a final block 400 of the stack of self-attention blocks 400 generates the un-masked output 480 .
- Each Conformer block 400 may include a feed-forward layer, a self-attention layer, a convolution layer, and a second feed-forward layer.
- the stack of self-attention blocks 400 includes a stack of Conformer blocks 400 .
- the stack of Conformer blocks 400 includes four (4) layers of Conformer blocks 400 each with 1024 units, 8 attention heads, 15 ⁇ 1 convolutional kernel size, and 64 frames of self-attention to enable a streaming model.
- An example Conformer block 400 is described in greater detail below with reference to FIG. 4 .
- the masking layer 240 is configured to receive, as input, the un-masked output 480 output by the self-attention blocks 400 of encoder 230 , and the single channel 206 a of the multichannel noisy input signal 202 and generate, as output the enhanced input speech features 250 corresponding to the target utterance 12 .
- the masking layer 240 of the model 200 includes a decoder (not shown) configured to decode the un-masked output 480 into the enhanced input speech features 250 corresponding to the target utterance 12 .
- the decoder may include a simple projection decoder having a single layer, frame-wise fully connected network with sigmoid activation.
- FIG. 4 provides an example of a block 400 from the stack of self-attention blocks 400 of the encoder 230 .
- the block 400 includes a first half feed-forward layer 410 , a second half feed-forward layer 440 , with a multi-head self-attention block 420 and a convolution layer 430 disposed between the first and second half feed-forward layers 410 , 440 , and concatenation operators 405 , 405 a —d.
- the first half feed-forward layer 410 processes the stacked input 232 including the single channel cleaned input signal 340 output from the speech cleaner 300 and the single channel noisy input signal 206 a , and generates an output 412 .
- a first concatenation operator 405 a concatenates the output 412 with the stacked input 232 to generate a first concatenated input 414 .
- the multi-head self-attention block 420 receives the first concatenated input 414 and generates a noise summary 422 .
- the role of the multi-head self-attention block 420 is to summarize noise context separately for each input frame that is to be enhanced.
- a second concatenation operator 405 b concatenates the output noise summary 422 with the first concatenated input 414 to generate a second concatenated input 424 .
- the convolution layer 430 subsamples the second concatenated input 424 including the noise summary 422 of the multi-head self-attention block 420 and the first concatenated input 414 , and generates a convolutional output 432 .
- a third concatenation operator 405 c concatenates the convolutional output 432 with the second concatenated input 424 to generate a third concatenated input 434 .
- the third concatenated input 434 is provided as input to the second half-feed forward layer 440 , which generates an output 442 .
- the output 442 of the second half-feed forward layer 440 is concatenated with the third concatenated input 434 by a fourth concatenation operator 405 d to generate a fourth concatenated input 444 .
- the layernorm module 450 processes the fourth concatenated input 444 from the second half feed-forward layer 440 .
- the block 400 transforms input features x, using modulation features m, to produce output features y, as follows:
- the block 400 generates, as an output, the un-masked output 480 , which is passed on to the next layer of the self-attention blocks 400 .
- the inputs 240 , 206 are modulated by each of the self-attention blocks 400 .
- FIG. 5 shows an example training process 500 for computing ASR loss 560 when the frontend speech enhancement model 200 is trained jointly with the ASR model 192 .
- the training process 500 may execute on the remote system 130 of FIG. 1 .
- the training process 500 obtains one or more training data sets 520 stored in a data store 510 and trains the multichannel neural frontend speech enhancement model 200 on the training data sets 520 .
- the data store 510 may reside on the memory hardware 136 of the remote system 130 .
- Each training data set 520 includes a plurality of training examples, 530 , 530 a —n, where each training example 530 may include a training utterance 532 .
- only an encoder 540 of the ASR model 192 is used for computing the loss.
- the ASR loss 560 is computed as the 12 distance between the outputs of the ASR encoder 540 for target features 536 of the training utterance 532 and the enhanced input speech features 250 .
- the ASR encoder 540 is not updated during the training process 500 .
- the training process 500 computes the ASR loss 560 by generating, using the ASR encoder 540 of the ASR model 192 configured to receive the enhanced input speech features 250 predicted by the frontend speech enhancement model 200 for a training utterance 532 as input, predicted outputs 522 of the ASR encoder 540 for the enhanced input speech features 250 , and generating, using the ASR encoder 540 configured to receive target speech features 536 for the training utterance 532 as input, target outputs 524 of the ASR encoder 540 for the target speech features 536 .
- the predicted outputs 522 for the enhanced input speech features 250 and the target outputs 524 for the target speech features 536 may each include respective sequences of LFBE features.
- the training process 500 via a loss module 550 , computes the ASR loss 560 based on the predicted outputs 522 of the ASR encoder 540 for the enhanced input speech features 250 and the target outputs 524 of the ASR encoder 540 for the target speech features 536 .
- the goal of using the ASR loss 560 is to make enhancements to the frontend speech enhancement model 200 to be more attuned to the ASR model 192 , which is critical for getting the best performance out of the frontend speech enhancement model 200 .
- the ASR model 192 is decoupled from the frontend speech enhancement model 200 , thereby allowing each to be trained and deployed independent of each other.
- the frontend speech enhancement model 200 is trained jointly with the ASR model 192 of the backend automatic speech recognition system 180 using a spectral loss and the ASR loss 560 .
- the training target 536 for training the multichannel neural frontend speech enhancement model 200 uses ideal ratio mask (IRM). IRMs may be computed using reverberant speech and reverberant noise based on an assumption that speech and noise are uncorrelated in Mel spectral space as follows:
- X and N are the reverberant speech and reverberant noise Mel spectrograms, respectively.
- t and f represent time and Mel frequency bin indices.
- the choice to estimate IRMs is based on the targets being bounded between [0, 1], simplifying the estimation process.
- the ASR model 192 used for evaluation may be trained on real and simulated reverberant data, resulting in a trained ASR model 192 that is relatively robust to reverberant speech. Therefore, IRMs derived using reverberant speech as the target still provide substantial gains in performance.
- the spectral loss during training are may be computed based L1 and L2 losses between the IRM and estimated IRM, M as follows:
- the estimated IRM is scaled and floored to reduce speech distortion at the expense of reduced noise suppression. This is especially important, since the ASR model 192 is sensitive to speech distortions and non-linear frontend processing, which is one of the main challenges in improving performance of robust ASR models using enhancement frontends.
- the enhanced feature may be derived as follows:
- Y is the noisy Mel spectrogram
- g is an estimate of clean Mel spectrogram
- ⁇ and ⁇ are exponential mask scalars, and mask floor.
- ⁇ is set 0.5
- ⁇ is set to 0.01.
- the enhanced features may be log-compressed, i.e. log( ⁇ circumflex over (X) ⁇ ), and passed to the ASR model 192 for evaluation.
- FIG. 6 includes a flowchart of an example arrangement of operations for a method 600 of performing automatic speech recognition using a multichannel neural frontend speech enhancement model 200 .
- the method 600 includes receiving a multichannel noisy input signal 202 , and a multichannel contextual noise signal 204 .
- the method 600 also includes, at operation 604 , generating, using a speech cleaner 300 of the speech enhancement model 200 , a single channel cleaned input signal 340 .
- the method 600 also includes generating, as output from a stack of self-attention blocks 400 of the speech enhancement model 200 configured to receive a stacked input 232 including the single channel cleaned input signal 340 output from the speech cleaner 300 and a single channel noisy input signal 206 , an un-masked output 480 .
- each self-attention block 400 in the stack of self-attention blocks 400 includes a multi-headed self attention mechanism.
- the method 600 further includes generating, using a masking layer 240 of the speech enhancement model 200 configured to receive the single channel noisy input signal 206 and the un-masked output 480 generated as output from the stack of self-attention blocks 400 , enhanced input speech features 250 corresponding to a target utterance 12 .
- FIG. 7 is schematic view of an example computing device 700 that may be used to implement the systems and methods described in this document.
- the computing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the disclosures described and/or claimed in this document.
- the computing device 700 includes a processor 710 , memory 720 , a storage device 730 , a high-speed interface/controller 740 connecting to the memory 720 and high-speed expansion ports 750 , and a low speed interface/controller 760 connecting to a low speed bus 770 and a storage device 730 .
- Each of the components 710 , 720 , 730 , 740 , 750 , and 760 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 710 e.g., data processing hardware 112 , 134 of FIG.
- GUI graphical user interface
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 720 (e.g., memory hardware 114 , 136 of FIG. 1 ) stores information non-transitorily within the computing device 700 .
- the memory 720 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s).
- the non-transitory memory 720 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 700 .
- non-volatile memory examples include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs).
- volatile memory examples include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- the storage device 730 is capable of providing mass storage for the computing device 700 .
- the storage device 730 is a computer-readable medium.
- the storage device 730 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 720 , the storage device 730 , or memory on processor 710 .
- the high speed controller 740 manages bandwidth-intensive operations for the computing device 700 , while the low speed controller 760 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 740 is coupled to the memory 720 , the display 780 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 750 , which may accept various expansion cards (not shown).
- the low-speed controller 760 is coupled to the storage device 730 and a low-speed expansion port 790 .
- the low-speed expansion port 790 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 700 a or multiple times in a group of such servers 700 a , as a laptop computer 700 b , or as part of a rack server system 700 c.
- implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- a software application may refer to computer software that causes a computing device to perform a task.
- a software application may be referred to as an “application,” an “app,” or a “program.”
- Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- the non-transitory memory may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by a computing device.
- the non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs).
- Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- the processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data
- a computer need not have such devices.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input
Abstract
A multichannel neural frontend speech enhancement model for speech recognition includes a speech cleaner, a stack of self-attention blocks each having a multi-headed self attention mechanism, and a masking layer. The speech cleaner receives, as input, a multichannel noisy input signal and a multichannel contextual noise signal, and generates, as output, a single channel cleaned input signal. The stack of self-attention blocks receives, as input, at an initial block of the stack of self-attention blocks, a stacked input including the single channel cleaned input signal and a single channel noisy input signal, and generates, as output, from a final block of the stack of self-attention blocks, an un-masked output. The masking layer receives, as input, the single channel noisy input signal and the un-masked output, and generates, as output, enhanced input speech features corresponding to a target utterance.
Description
- This U.S. patent application claims priority under 35 U.S.C. § 119(e) to U.S. Provisional Application 63/269,633, filed on Mar. 20, 2022. The disclosure of this prior application is considered part of the disclosure of this application and is hereby incorporated by reference in its entirety.
- This disclosure relates to a microphone array configuration invariant, streaming, multichannel neural enhancement frontend for automatic speech recognition.
- Robustness of automatic speech recognition (ASR) systems has significantly improved over the years with the advent of neural network-based end-to-end models, large-scale training data, and improved strategies for augmenting training data. Nevertheless, various conditions such as reverberation, significant background noise, and competing speech significantly deteriorate performance of ASR systems. A joint ASR model may be trained to handle these conditions. However, isolating speech in background conditions including speech-based noise and non-speech based noise is particularly challenging.
- One aspect of the present disclosure provides a multichannel neural frontend speech enhancement model for speech recognition that includes a speech cleaner, a stack of self-attention blocks each having a multi-headed self attention mechanism, and a masking layer. The speech cleaner receives, as input, a multichannel noisy input signal and a multichannel contextual noise signal, and generates, as output, a single channel cleaned input signal. The stack of self-attention blocks receives, as input, at an initial block of the stack of self-attention blocks, a stacked input including the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal, and generates, as output, from a final block of the stack of self-attention blocks, an un-masked output. The masking layer receives, as input, the single channel noisy input signal and the un-masked output generated as output from the final block of the stack of self-attention blocks, and generates, as output, enhanced input speech features corresponding to a target utterance.
- Implementations of the disclosure may include one or more of the following optional features. In some implementations, the stack of self-attention blocks includes a stack of Conformer blocks. In these implementations, the stack of Conformer blocks may include four Conformer blocks. In some examples, the speech enhancement model executes on data processing hardware residing on a user device. Here, the user device is configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device. In these examples, the speech enhancement model may be agnostic to a number of microphones in the array of microphones.
- In some implementations, the speech cleaner executes an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output, and subtracting the summed output from the first channel of the multichannel noisy input signal. In some examples, a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance. In these examples, the backend speech system includes at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
- In some implementations, the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss. In these implementations, the spectral loss may be based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask. Here, the ideal ratio mask is computed using reverberant speech and reverberant noise. Additionally or alternatively, the ASR loss is computed by generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features. Here, computing the ASR loss is based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- Another aspect of the disclosure provides a computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations that include receiving a multichannel noisy input signal and a multichannel contextual noise signal, and generating, using a speech cleaner of a speech enhancement model, a single channel cleaned input signal. The operations also include generating, as output from a stack of self-attention blocks of the speech enhancement model configured to receive a stacked input including the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal, an un-masked output. Here, each self-attention block in the stack of self-attention blocks includes a multi-headed self attention mechanism. The operations further include generating, using a masking layer of the speech enhancement model configured to receive the single channel noisy input signal and the un-masked output generated as output from the stack of self-attention blocks, enhanced input speech features corresponding to a target utterance.
- This aspect may include one or more of the following optional features. In some implementations, the stack of self-attention blocks includes a stack of Conformer blocks. In these implementations, the stack of Conformer blocks may include four Conformer blocks. In some examples, the speech cleaner, the stack of self-attention blocks, and the masking layer execute on the data processing hardware residing on a user device. Here, the user device is configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device. In these examples, the speech enhancement model may be agnostic to a number of microphones in the array of microphones.
- In some implementations, the operations further include executing, using the speech cleaner, an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output, and subtracting the summed output from the first channel of the multichannel noisy input signal. In some examples, a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance. In these examples, the backend speech system includes at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
- In some implementations, the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss. In these implementations, the spectral loss may be based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask. Here, the ideal ratio mask is computed using reverberant speech and reverberant noise. Additionally or alternatively, the ASR loss is computed by generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features, generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features. Here, computing the ASR loss is based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
- The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
-
FIG. 1 is a schematic view of a system that includes a user communicating a spoken target utterance to a speech-enabled user device. -
FIG. 2 is a schematic view of a multichannel neural frontend speech enhancement model ofFIG. 1 . -
FIG. 3 is a schematic view of a speech cleaner of the multichannel neural frontend speech enhancement model. -
FIG. 4 is a schematic view of a self-attention conformer block of the multichannel neural frontend speech enhancement model. -
FIG. 5 is a schematic view of an example training process for jointly training a contextual frontend processing model and an automatic speech recognition model. -
FIG. 6 is an example flowchart of an example arrangement of operations for a method of automatic speech recognition using a multichannel neural frontend speech enhancement model. -
FIG. 7 is a schematic view of an example computing device that may be used to implement the systems and methods described herein. - Like reference symbols in the various drawings indicate like elements.
- Robustness of automatic speech recognition (ASR) systems has significantly improved over the years with the advent of neural network-based end-to-end models, large-scale training data, and improved strategies for augmenting training data. Nevertheless, background interference can significantly deteriorate the ability of ASR systems to accurately recognize speech directed toward the ASR system. Background interference can be broadly classified into three groups: device echo; background noise; and competing speech. While separate ASR models may be trained to handle each of these background interference groups in isolation, the difficulty in maintaining multiple task/condition-specific ASR models and switching between the models on the fly during use is not practical.
- Device echo may correspond to playback audio output from devices, such as smart home speakers, whereby the playback audio is recorded as echo and can affect performance of a backend speech system, such as an ASR system. Particularly, degradation of performance of the backend speech system is especially severe if the playback audio contains audible speech, e.g., a text-to-speech (TTS) response from a digital assistant.
- Background noise with non-speech characteristics is usually well handled using data augmentation strategies like multi-style training (MTR) of the ASR models. Here, a room simulator is used to add noise to the training data, which is then carefully weighted with clean data during training to get a good balance in performance between clean and noisy conditions. As a result, large scale ASR models are robust to moderate levels of non-speech noise. However, background noise can still affect performance of backend speech systems in the presence of low signal-to-noise ratio (SNR) conditions.
- Unlike non-speech background noise, competing speech is quite challenging for ASR models that are trained to recognize a single speaker. Training ASR models with multi-talker speech can pose problems in itself, since it is hard to disambiguate which speaker to focus on during inference. Using models that recognize multiple speakers is also sub-optimal since it is hard to know ahead of time how many users to support. Furthermore, such multi-speaker models typically have degraded performance in single-speaker settings, which is undesirable.
- The three aforementioned classes of background interference have typically been addressed in isolation of one another, each using separate modeling strategies. Speech separation has received a lot of attention in the recent literature using techniques like deep clustering, permutation invariant training, and using speaker embeddings. When using speaker embeddings, the target speaker of interest is assumed to be known a priori. Techniques developed for speaker separation have also been applied to remove non-speech noise, with modifications to the training data. Acoustic Echo Cancelation (AEC) has also been studied in isolation or together in the presence of background noise. It is well known that improving speech quality does not always improve ASR performance since the distortions introduced by non-linear processing can adversely affect ASR performance. One way to mitigate discrepancies between an enhancement frontend initially processing incoming audio and the resulting ASR performance is to jointly train the enhancement frontend together with the backend ASR model.
- Moreover, as the application of large scale multi-domain and multi-lingual ASR models continues to gain interest, the training data for these ASR models typically covers various acoustic and linguistic use cases (e.g., voice search and video captioning), thereby making it challenging to simultaneously address harsher noise conditions. As a result, it is often convenient to train and maintain separate frontend feature processing models capable of handling adverse conditions, without combining it with the backend ASR model.
- Implementations herein are directed toward training a frontend speech enhancement model for improving robustness of ASR. The model is practical from the standpoint that it is difficult, if not impossible, to know what class of background interference to address ahead of time, particularly in a streaming ASR setting. Specifically, the frontend speech enhancement model includes a contextual enhancement neural network (CENN) capable of making use of a multichannel noisy input signal and a multichannel contextual noise signal. For speech enhancement and separation, the noise context, i.e., a few seconds of audio before the target utterance to be recognized, carries useful information about the acoustic context. The CENN employs a respective neural network architecture configured to ingest the noisy input and the contextual input to produce enhanced input speech features that may be passed to a backend speech system, such as, an ASR model that may process the enhanced input speech features to generate a speech recognition result for the target utterance. Notably, though the frontend speech enhancement model is designed to operate with a multi-channel array, the frontend speech enhancement model itself is agnostic as to the number of channels in the array or their configuration.
- Referring to
FIG. 1 , in some implementations, asystem 100 includes auser 10 communicating a spokentarget utterance 12 to a speech-enabled user device 110 (also referred to as adevice 110 or a user device 110) in a speech environment. The user 10 (i.e., speaker of the utterance 12) may speak thetarget utterance 12 as a query or a command to solicit a response from thedevice 110. Thedevice 110 is configured to capture sounds from one ormore users utterance 12 by theuser 10 that functions as an audible query, a command for thedevice 110, or an audible communication captured by thedevice 110. Speech-enabled systems of thedevice 110 or associated with thedevice 110 may field the query for the command by answering the query and/or causing the command to be performed. - Various types of background interference may interfere with the ability of a
backend speech system 180 to process thetarget utterance 12 that specifies the query or command for thedevice 110. As aforementioned, the background interference may include one or more of a device echo corresponding to playback audio 154 output from the user device (e.g., a smart speaker) 110, competingspeech 13 such as utterances other than thetarget utterance 12 spoken by one or moreother users 11 that are not directed toward thedevice 110, and background noise with non-speech characteristics such as aringtone 15 from aseparate user device 111. Implementations herein employ a multichannel neural frontend speech enhancement model 200 (also referred to as amodel 200 or a frontend speech enhancement model 200) that executes on thedevice 110 and is configured to receive, as input, a multichannelnoisy input signal 202 including speech features corresponding to thetarget utterance 12 and the background interference, and a multichannelcontextual noise signal 204 and generate, as output, enhanced input speech features 250 corresponding to thetarget utterance 12 by processing the multichannelnoisy input signal 202 and the multichannelcontextual noise signal 204 to remove the background interference. The multichannelnoisy input signal 202 includes one ormore channels backend speech system 180 may then process the enhanced input speech features 250 to generate anoutput 182. Notably, the multichannel neural frontendspeech enhancement model 200 effectively removes (i.e., masks) the presence of background interference recorded by thedevice 110 when theuser 10 spoke thetarget utterance 12 such that the enhanced input speech features 250 provided to thebackend speech system 180 convey the speech (i.e., target utterance 12) that was intended for thedevice 110 so that theoutput 182 generated by thebackend speech system 180 is not degraded by the background interference. - In the example shown, the
backend speech system 180 includes anASR system 190 that employs anASR model 192 to process the enhanced input speech features 250 to generate a speech recognition result (e.g., transcription) for thetarget utterance 12. TheASR system 190 may further include a natural language understanding (NLU) module (not shown) that performs semantic interpretation on the transcription of thetarget utterance 12 to identify the query/command directed toward thedevice 110. As such, theoutput 182 from thebackend speech system 180 may include the transcription and/or instructions to fulfill the query/command identified by the NLU module. - The
backend speech system 180 may additionally or alternatively include a hotword detection model (not shown) configured to detect whether or not the enhanced input speech features 250 include a presence of one or more hotwords/warm words the hotword detection model is trained to detect. For instance, the hotword detection model may output a hotword detection score indicating a likelihood that the enhanced input speech features 250 corresponding to thetarget utterance 12 include a particular hotword/warm word. Detection of a hotword may trigger a wake-up process that causes thedevice 110 to wake-up from a sleep state. For instance, thedevice 110 may wake-up and process the hotword and/or one or more terms preceding/following the hotword. - In additional examples, the
background speech system 180 includes an audio or audio-video calling application (e.g., a video conferencing application). Here, the enhanced input speech features 250 corresponding to thetarget utterance 12 are used by the audio or audio-video calling application to filter the voice of thetarget speaker 10 for communications to recipients during an audio or audio-video communication session. Thebackground speech system 180 may additionally or alternatively include a speaker identification model configured to perform speaker identification using the enhanced input speech features 250 to identify theuser 10 that spoke thetarget utterance 12. - In the example shown, the
device 110 captures the multichannel noisy input signal 202 (also referred to as audio data) of thetarget utterance 12 spoken by theuser 10 in the presence of background interference emanating from one or more sources other than theuser 10. The multichannelnoisy input signal 202 includes one or more single channel noisy input signals 206, 206 a—n of audio. Thedevice 110 may correspond to any computing device associated with theuser 10 and capable of receiving multichannel noisy input signals 202. Some examples ofuser devices 110 include, but are not limited to, mobile devices (e.g., mobile phones, tablets, laptops, etc.), computers, wearable devices (e.g., smart watches, smart headphones, etc.), smart appliances, and internet of things (IoT) devices, smart speakers, etc. Thedevice 110 includesdata processing hardware 112 andmemory hardware 114 in communication with thedata processing hardware 112 and storing instructions, that when executed by thedata processing hardware 112, cause thedata processing hardware 112 to perform one or more operations. The multichannel neural frontendspeech enhancement model 200 may execute on thedata processing hardware 112. In some examples, thebackend speech system 180 executes on thedata processing hardware 112. - In some examples, the
device 110 includes one or more applications (i.e., software applications) where each application may utilize enhanced input speech features 250 generated by the multichannel neural frontendspeech enhancement model 200 to perform various functions within the application. For instance, thedevice 110 includes an assistant application configured to communicate synthesizedplayback audio 154 to theuser 10 to assist theuser 10 with various tasks. - The
user device 110 further includes (or is in communication with) an audio subsystem with an array of audio capturing devices (e.g., microphones) 116, 116 a—n for capturing and converting spokenutterances 12 within the speech environment into electrical signals and a speech output device (e.g., a speaker) 118 for communicating an audible audio signal (e.g., asynthesized playback audio 154 from the device 110). Eachmicrophone 116 in the array ofmicrophones 116 of theuser device 110 may separately record theutterance 12 on a separatededicated channel 206 of the multichannelnoisy input signal 202. For example, theuser device 110 may include twomicrophones 116 that each record theutterance 12, and the recordings from the twomicrophones 116 may be combined into a two-channel noisy input signal 202 (i.e., stereophonic audio or stereo). That is, the two microphones reside on theuser device 110. In some examples, theuser device 110 includes more than twomicrophones 116. Additionally or alternatively, the user device 102 may be in communication with two ormore microphones 116 separate/remote from theuser device 110. For example, theuser device 110 may be a mobile device disposed within a vehicle and in wired or wireless communication (e.g., Bluetooth) with two ormore microphones 116 of the vehicle. In some configurations, theuser device 110 is in communication with least onemicrophone 116 residing on aseparate device 111, which may include, without limitation, an in-vehicle audio system, a computing device, a speaker, or another user device. In these configurations, theseparate device 111 may also be in communication with the one ormore microphones 116 residing on theuser device 110. - In some examples, the
device 110 is configured to communicate with aremote system 130 via a network (not shown). Theremote system 130 may includeremote resources 132, such as remote data processing hardware 134 (e.g., remote servers or CPUs) and/or remote memory hardware 136 (e.g., remote databases or other storage hardware). Thedevice 110 may utilize theremote resources 132 to perform various functionality related to speech processing and/or synthesized playback communication. The multichannel neural frontendspeech enhancement model 200 and thebackend speech system 180 may reside on the device 110 (referred to as on-device systems) or reside remotely (e.g., reside on the remote system 130), but in communication with thedevice 110. In some examples, one or morebackend speech systems 180 reside locally or on-device while one or more otherbackend speech systems 180 reside remotely. In other words, one or morebackend speech systems 180 leveraging the enhanced input speech features 250 output from the multichannel neural frontendspeech enhancement model 200 may be local or remote in any combination. For instance, when asystem 180 is rather large in size or processing requirements, thesystem 180 may reside in theremote system 130. Yet when thedevice 110 may support the size or the processing requirements of one ormore systems 180, the one ormore systems 180 may reside on thedevice 110 using thedata processing hardware 112 and/or thememory hardware 114. Optionally, the one or more of thesystems 180 may reside on both locally/on-device and remotely. For instance, abackend speech system 180 may default to execute on theremote system 130 when a connection between thedevice 110 andremote system 130 is available, but when the connection is lost or unavailable, thesystem 180 instead executes locally on thedevice 110. - In some implementations, the
device 110 or a system associated with thedevice 110 identifies text that thedevice 110 will communicate to theuser 10 as a response to a query spoken by theuser 10. Thedevice 110 may then use a text-to-speech (TTS) system to convert the text into correspondingsynthesized playback audio 154 for thedevice 110 to communicate to the user 10 (e.g., audibly communicate to the user 10) as the response to the query. Once generated, the TTS system communicates the synthesizedplayback audio 154 to thedevice 110 to allow thedevice 110 to output the synthesizedplayback audio 154. For instance, thedevice 110 outputs the synthesizedplayback audio 154 of “today is sunny” at aspeaker 118 of thedevice 110 responsive to theuser 10 providing a spoken query for today's weather forecast. - With continued reference to
FIG. 1 , when thedevice 110 outputs the synthesizedplayback audio 154, the synthesizedplayback audio 154 generates anecho 156 captured by theaudio capturing device 116. The synthesizedplayback audio 154 corresponds to a reference audio signal. While synthesizedplayback audio 154 depicts a reference audio signal in the example ofFIG. 1 , the reference audio signal may include other types ofplayback audio 154 including media content output from thespeaker 118 or a communication from a remote user theuser 10 is conversing with (e.g., voice over IP call or video conferencing call) through thedevice 110. Unfortunately, in addition to theecho 156, theaudio capturing device 116 may also be simultaneously capturing thetarget utterance 12 spoken by theuser 10 that includes a follow-up query inquiring more about the weather, by stating “what about tomorrow?” For example,FIG. 1 depicts that, as thedevice 110 outputs the synthesizedplayback audio 154, theuser 10 inquires more about the weather, in a spokenutterance 12 to thedevice 110, by stating “what about tomorrow?” Here, the spokenutterance 12 and theecho 156 are both captured at theaudio capturing device 116 simultaneously to form the multichannelnoisy input signal 202. In other words, the multichannelnoisy input signal 202 includes an overlapped audio signal where some portion of thetarget utterance 12 spoken by theuser 10 overlaps with some portion of the reference audio signal (e.g., synthesized playback audio) 154 output from thespeaker 118 of thedevice 110. In addition to the synthesizedplayback audio 154, competingspeech 13 spoken by anotheruser 11 in the environment, as well as non-speech characteristics such as aringtone 15 from aseparate user device 111 may also be captured by theaudio capturing device 116 and contribute to background interference that overlaps with thetarget utterance 12. - In
FIG. 1 , thebackend speech system 180 may have issues processing thetarget utterance 12 corresponding to the follow-up weather query “what about tomorrow?” in the multichannelnoisy input signal 202 due to the presence of the background interference attributed to at least one of theplayback audio 154, competingspeech 13, ornon-speech background noise 15 interfering withtarget utterance 12. The multichannel neural frontendspeech enhancement model 200 is employed to improve robustness of thebackend speech system 180 by effectively removing (i.e., masking) the presence of the background interference recorded by thedevice 110 when theuser 10 spoke thetarget utterance 12. - The
model 200 may perform speech enhancement by applying noise context modeling where thespeech cleaner 300 of themodel 200 processes the multichannelcontextual noise signal 204 associated with a predetermined duration of noise segments captured by theaudio capturing device 116 prior to thetarget utterance 12 spoken by theuser 10. In some examples, the predetermined duration includes six (6) seconds of noise segments. As such, the multichannelcontextual noise signal 204 provides noise context. In some examples, the multichannelcontextual noise signal 204 includes LFBE features of the noise context signal for use as contextual information. -
FIG. 2 shows the multichannel neural frontendspeech enhancement model 200 ofFIG. 1 . The multichannel neural frontendspeech enhancement model 200 uses a modified version of a conformer neural network architecture that combines convolution and self-attention to model short-range and long-range interactions. Themodel 200 includes aspeech cleaner 300, afeature stack 220, anencoder 230, and amasking layer 240. Thespeech cleaner 300 may execute an adaptive noise cancelation algorithm (FIG. 3 ). Theencoder 230 may include a stack of self-attention blocks 400. - The
speech cleaner 300 may be configured to receive, as input, the multichannelnoisy input signal 202 and the multichannelcontextual noise signal 204 and generate, as output, a single channel cleanedinput signal 340. Here, thespeech cleaner 300 includes a finite impulse response (FIR) filter to process the multichannelnoisy input signal 202. -
FIG. 3 provides an example adaptive noise cancelation algorithm executed by thespeech cleaner 300. Here, thespeech cleaner 300 includes anFIR module 310 including an FIR filter, aminimization module 320, and acancelation module 330. - In the example shown, for simplicity, the multichannel
noisy input signal 202 includes threechannels 206 a-c each including respective audio features captured by a separatededicated microphone 116 a-c in an array of threemicrophones 116. However, as mentioned above, the frontendspeech enhancement model 200 is agnostic to a number ofmicrophones 116 in the array ofmicrophones 116. In other words, the multichannelnoisy input signal 202 can include onechannel 206 captured by onemicrophone 116, twochannels 206 captured by twomicrophones 116, or four ormore channels 206 captured by four ormore microphones 116 without departing from the scope of the present disclosure. - Here, the
FIR module 310 applies the FIR filter on allchannels 206 of the multichannelnoisy input signal 202 except for afirst channel 206 a to generate a summedoutput 312. In other words, theFIR module 310 does not process thefirst channel 206 a of the multichannelnoisy input signal 202, but does apply the FIR filter on thesecond channel 206 b and thethird channel 206 c of the multichannelnoisy input signal 202 to generate the summedoutput 312. Theminimization module 320 receives the summedoutput 312 and thefirst channel 206 a and generates a minimizedoutput 322 by subtracting the summedoutput 312 from thefirst channel 206 a of the multichannelnoisy input signal 202. Mathematically, the FIR filter includes a tapped delay line of length L of three (3) applied to thechannels channel 206 a, where determining the minimizedoutput 322 may be expressed as follows: -
Z m(n)=Y 0(n)−Σl=− L−1 U m H {tilde over (Y)} m(k,n−l) (1), - where {tilde over (Y)}m is a vector of time delayed Short-time Fourier transform (STFT) processed input for the
channels channels -
{tilde over (Y)} m(n)=[Y m(n),Y m(n−1), . . . Y m(n−(L−1))]T (2) -
U m(k)=[U m(k,0),U m(k,1),U m(k,N−1)]T (3), - where the filter coefficients may minimize the power of the output as follows:
-
- Because the
speech cleaner 300 is implemented on thedevice 110, thecancelation module 330 may use the multichannelcontextual noise signal 204 that occurs directly before theutterance 12 in the multichannelnoisy input signal 202. In other words, theminimization module 320 generates the minimizedoutput 322 through adaptation during the multichannelcontextual noise signal 204 when theutterance 12 is not present in the multichannelnoisy input signal 202. The adaptation may include a recursive least squares (RLS) algorithm. Once thespeech cleaner 300 detects theutterance 12, the filter coefficients are frozen, where thecancelation module 330 applies the last coefficients before theutterance 12 to the multichannelnoisy input signal 202 to cancel the background interference to produce the single channel cleanedinput signal 340 as follows: -
{circumflex over (X)}(n)=Y 0(n)−Σl=0 L−1 Û m H Ŷ m(k,n−1) (5). - Referring back to
FIG. 2 , thefeature stack 220 is configured to receive, as input, the single channel cleanedinput signal 340 and asingle channel 206 a of the multichannelnoisy input signal 202, and generate astacked input 232 including the single channel cleanedinput signal 340 and thesingle channel 206 a. Thefeature stack 220 may convert each of the single channel cleanedinput signal 340 and thesingle channel 206 a of the multichannelnoisy input signal 202 into 128-dimension log-mel domains using a window size of 32 milliseconds (ms) with a step size of 10 ms. Here, four frames may be stacked with a 30 ms step upon input to thefeature stack 220. - The
encoder 230 receives the stackedinput 232 including the single channel cleanedinput signal 340 and thesingle channel 206 a of the multichannelnoisy input signal 202, and generates, as output, anun-masked output 480. Theencoder 230 includes a stack of self-attention blocks 400 (also referred to as blocks 400). Here, aninitial block 400 of the stack of self-attention blocks 400 receives the stackedinput 232 including the single channel cleanedinput signal 340 output from thespeech cleaner 300 and thesingle channel 206 of the multichannelnoisy input signal 202, and afinal block 400 of the stack of self-attention blocks 400 generates theun-masked output 480. - Each Conformer block 400 may include a feed-forward layer, a self-attention layer, a convolution layer, and a second feed-forward layer. In some implementations, the stack of self-attention blocks 400 includes a stack of Conformer blocks 400. In these implementations, the stack of Conformer blocks 400 includes four (4) layers of Conformer blocks 400 each with 1024 units, 8 attention heads, 15×1 convolutional kernel size, and 64 frames of self-attention to enable a streaming model. An example Conformer block 400 is described in greater detail below with reference to
FIG. 4 . - The
masking layer 240 is configured to receive, as input, theun-masked output 480 output by the self-attention blocks 400 ofencoder 230, and thesingle channel 206 a of the multichannelnoisy input signal 202 and generate, as output the enhanced input speech features 250 corresponding to thetarget utterance 12. In some implementations, themasking layer 240 of themodel 200 includes a decoder (not shown) configured to decode theun-masked output 480 into the enhanced input speech features 250 corresponding to thetarget utterance 12. Here, the decoder may include a simple projection decoder having a single layer, frame-wise fully connected network with sigmoid activation. -
FIG. 4 provides an example of ablock 400 from the stack of self-attention blocks 400 of theencoder 230. Theblock 400 includes a first half feed-forward layer 410, a second half feed-forward layer 440, with a multi-head self-attention block 420 and aconvolution layer 430 disposed between the first and second half feed-forward layers forward layer 410 processes the stackedinput 232 including the single channel cleanedinput signal 340 output from thespeech cleaner 300 and the single channelnoisy input signal 206 a, and generates anoutput 412. Next, a first concatenation operator 405 a concatenates theoutput 412 with the stackedinput 232 to generate a first concatenatedinput 414. Subsequently, the multi-head self-attention block 420 receives the first concatenatedinput 414 and generates anoise summary 422. Intuitively, the role of the multi-head self-attention block 420 is to summarize noise context separately for each input frame that is to be enhanced. - Next, a second concatenation operator 405 b concatenates the
output noise summary 422 with the first concatenatedinput 414 to generate a second concatenatedinput 424. Subsequently, theconvolution layer 430 subsamples the second concatenatedinput 424 including thenoise summary 422 of the multi-head self-attention block 420 and the first concatenatedinput 414, and generates aconvolutional output 432. Thereafter, a third concatenation operator 405 c concatenates theconvolutional output 432 with the second concatenatedinput 424 to generate a thirdconcatenated input 434. The thirdconcatenated input 434 is provided as input to the second half-feed forward layer 440, which generates anoutput 442. Theoutput 442 of the second half-feed forward layer 440 is concatenated with the thirdconcatenated input 434 by a fourth concatenation operator 405 d to generate a fourth concatenatedinput 444. Finally, thelayernorm module 450 processes the fourth concatenatedinput 444 from the second half feed-forward layer 440. Mathematically, theblock 400 transforms input features x, using modulation features m, to produce output features y, as follows: -
- The
block 400 generates, as an output, theun-masked output 480, which is passed on to the next layer of the self-attention blocks 400. Thus, theinputs -
FIG. 5 shows anexample training process 500 for computingASR loss 560 when the frontendspeech enhancement model 200 is trained jointly with theASR model 192. Thetraining process 500 may execute on theremote system 130 ofFIG. 1 . As shown, thetraining process 500 obtains one or moretraining data sets 520 stored in adata store 510 and trains the multichannel neural frontendspeech enhancement model 200 on the training data sets 520. Thedata store 510 may reside on thememory hardware 136 of theremote system 130. Eachtraining data set 520 includes a plurality of training examples, 530, 530 a—n, where each training example 530 may include a training utterance 532. Here, only anencoder 540 of theASR model 192 is used for computing the loss. TheASR loss 560 is computed as the 12 distance between the outputs of theASR encoder 540 for target features 536 of the training utterance 532 and the enhanced input speech features 250. TheASR encoder 540 is not updated during thetraining process 500. In detail, thetraining process 500 computes theASR loss 560 by generating, using theASR encoder 540 of theASR model 192 configured to receive the enhanced input speech features 250 predicted by the frontendspeech enhancement model 200 for a training utterance 532 as input, predictedoutputs 522 of theASR encoder 540 for the enhanced input speech features 250, and generating, using theASR encoder 540 configured to receive target speech features 536 for the training utterance 532 as input, target outputs 524 of theASR encoder 540 for the target speech features 536. The predicted outputs 522 for the enhanced input speech features 250 and the target outputs 524 for the target speech features 536 may each include respective sequences of LFBE features. Thereafter, thetraining process 500, via aloss module 550, computes theASR loss 560 based on the predictedoutputs 522 of theASR encoder 540 for the enhanced input speech features 250 and the target outputs 524 of theASR encoder 540 for the target speech features 536. The goal of using theASR loss 560 is to make enhancements to the frontendspeech enhancement model 200 to be more attuned to theASR model 192, which is critical for getting the best performance out of the frontendspeech enhancement model 200. By keeping the parameters of theASR model 192 fixed, theASR model 192 is decoupled from the frontendspeech enhancement model 200, thereby allowing each to be trained and deployed independent of each other. - In some implementations, the frontend
speech enhancement model 200 is trained jointly with theASR model 192 of the backend automaticspeech recognition system 180 using a spectral loss and theASR loss 560. The training target 536 for training the multichannel neural frontendspeech enhancement model 200 uses ideal ratio mask (IRM). IRMs may be computed using reverberant speech and reverberant noise based on an assumption that speech and noise are uncorrelated in Mel spectral space as follows: -
- Here, X and N are the reverberant speech and reverberant noise Mel spectrograms, respectively. t and f represent time and Mel frequency bin indices. The choice to estimate IRMs is based on the targets being bounded between [0, 1], simplifying the estimation process. Moreover, the ASR model 192 used for evaluation may be trained on real and simulated reverberant data, resulting in a trained ASR model 192 that is relatively robust to reverberant speech. Therefore, IRMs derived using reverberant speech as the target still provide substantial gains in performance. The spectral loss during training are may be computed based L1 and L2 losses between the IRM and estimated IRM, M as follows:
- During inference, the estimated IRM is scaled and floored to reduce speech distortion at the expense of reduced noise suppression. This is especially important, since the
ASR model 192 is sensitive to speech distortions and non-linear frontend processing, which is one of the main challenges in improving performance of robust ASR models using enhancement frontends. The enhanced feature may be derived as follows: -
{circumflex over (X)}(t,f)=Y(t,f)⊙max({circumflex over (M)}(t,f)β)α (9) - Here, Y is the noisy Mel spectrogram, g is an estimate of clean Mel spectrogram, α and β are exponential mask scalars, and mask floor. In some examples, α is set 0.5, and β is set to 0.01. The enhanced features may be log-compressed, i.e. log({circumflex over (X)}), and passed to the
ASR model 192 for evaluation. -
FIG. 6 includes a flowchart of an example arrangement of operations for amethod 600 of performing automatic speech recognition using a multichannel neural frontendspeech enhancement model 200. Atoperation 602, themethod 600 includes receiving a multichannelnoisy input signal 202, and a multichannelcontextual noise signal 204. Themethod 600 also includes, atoperation 604, generating, using aspeech cleaner 300 of thespeech enhancement model 200, a single channel cleanedinput signal 340. - At
operation 606, themethod 600 also includes generating, as output from a stack of self-attention blocks 400 of thespeech enhancement model 200 configured to receive astacked input 232 including the single channel cleanedinput signal 340 output from thespeech cleaner 300 and a single channelnoisy input signal 206, anun-masked output 480. Here, each self-attention block 400 in the stack of self-attention blocks 400 includes a multi-headed self attention mechanism. Atoperation 608, themethod 600 further includes generating, using amasking layer 240 of thespeech enhancement model 200 configured to receive the single channelnoisy input signal 206 and theun-masked output 480 generated as output from the stack of self-attention blocks 400, enhanced input speech features 250 corresponding to atarget utterance 12. -
FIG. 7 is schematic view of anexample computing device 700 that may be used to implement the systems and methods described in this document. Thecomputing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the disclosures described and/or claimed in this document. - The
computing device 700 includes aprocessor 710,memory 720, astorage device 730, a high-speed interface/controller 740 connecting to thememory 720 and high-speed expansion ports 750, and a low speed interface/controller 760 connecting to a low speed bus 770 and astorage device 730. Each of thecomponents data processing hardware FIG. 1 ) can process instructions for execution within thecomputing device 700, including instructions stored in thememory 720 or on thestorage device 730 to display graphical information for a graphical user interface (GUI) on an external input/output device, such asdisplay 780 coupled tohigh speed interface 740. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The memory 720 (e.g.,
memory hardware FIG. 1 ) stores information non-transitorily within thecomputing device 700. Thememory 720 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). Thenon-transitory memory 720 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by thecomputing device 700. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes. - The
storage device 730 is capable of providing mass storage for thecomputing device 700. In some implementations, thestorage device 730 is a computer-readable medium. In various different implementations, thestorage device 730 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 720, thestorage device 730, or memory onprocessor 710. - The
high speed controller 740 manages bandwidth-intensive operations for thecomputing device 700, while thelow speed controller 760 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 740 is coupled to thememory 720, the display 780 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 750, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 760 is coupled to thestorage device 730 and a low-speed expansion port 790. The low-speed expansion port 790, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 700 a or multiple times in a group ofsuch servers 700 a, as alaptop computer 700 b, or as part of arack server system 700 c. - Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an “application,” an “app,” or a “program.” Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
- The non-transitory memory may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by a computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (22)
1. A multichannel neural frontend speech enhancement model for speech recognition, the speech enhancement model comprising:
a speech cleaner configured to:
receive, as input, a multichannel noisy input signal and a multichannel contextual noise signal; and
generate, as output, a single channel cleaned input signal;
a stack of self-attention blocks each having a multi-headed self attention mechanism, the stack of self-attention blocks configured to:
receive, as input, at an initial block of the stack of self-attention blocks, a stacked input comprising the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal; and
generate, as output, from a final block of the stack of self-attention blocks, an un-masked output; and
a masking layer configured to:
receive, as input, the single channel noisy input signal and the un-masked output generated as output from the final block of the stack of self-attention blocks; and
generate, as output, enhanced input speech features corresponding to a target utterance.
2. The speech enhancement model of claim 1 , wherein the stack of self-attention blocks comprises a stack of Conformer blocks.
3. The speech enhancement model of claim 2 , wherein the stack of Conformer blocks comprises four Conformer blocks.
4. The speech enhancement model of claim 1 , wherein the speech enhancement model executes on data processing hardware residing on a user device, the user device configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device.
5. The speech enhancement model of claim 4 , wherein the speech enhancement model is agnostic to a number of microphones in the array of microphones.
6. The speech enhancement model of claim 1 , wherein the speech cleaner executes an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by:
applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output; and
subtracting the summed output from the first channel of the multichannel noisy input signal.
7. The speech enhancement model of claim 1 , wherein a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance.
8. The speech enhancement model of claim 7 , wherein the backend speech system comprises at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
9. The speech enhancement model of claim 1 , wherein the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
10. The speech enhancement model of claim 9 , wherein the spectral loss is based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask, the ideal ratio mask computed using reverberant speech and reverberant noise.
11. The speech enhancement model of claim 9 , wherein the ASR loss is computed by:
generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features;
generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features; and
computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
12. A computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations comprising:
receiving a multichannel noisy input signal and a multichannel contextual noise signal;
generating, using a speech cleaner of a speech enhancement model, a single channel cleaned input signal;
generating, as output from a stack of self-attention blocks of the speech enhancement model configured to receive a stacked input comprising the single channel cleaned input signal output from the speech cleaner and a single channel noisy input signal, an un-masked output, wherein each self-attention block in the stack of self-attention blocks comprises a multi-headed self attention mechanism; and
generating, using a masking layer of the speech enhancement model configured to receive the single channel noisy input signal and the un-masked output generated as output from the stack of self-attention blocks, enhanced input speech features corresponding to a target utterance.
13. The computer-implemented method of claim 12 , wherein the stack of self-attention blocks comprises a stack of Conformer blocks.
14. The computer-implemented method of claim 13 , wherein the stack of Conformer blocks comprises four Conformer blocks.
15. The computer-implemented method of claim 12 , wherein:
the speech cleaner, the stack of self-attention blocks, and the masking layer execute on the data processing hardware; and
the data processing hardware resides on a user device, the user device configured to capture the target utterance and the multichannel contextual noise signal via an array of microphones of the user device.
16. The computer-implemented method of claim 15 , wherein the speech enhancement model is agnostic to a number of microphones in the array of microphones.
17. The computer-implemented method of claim 12 , wherein the operations further comprise executing, using the speech cleaner, an adaptive noise cancelation algorithm to generate the single channel cleaned input signal by:
applying a finite impulse response (FIR) filter on all channels of the multichannel noisy input signal except for a first channel of the multichannel noisy input signal to generate a summed output; and
subtracting the summed output from the first channel of the multichannel noisy input signal.
18. The computer-implemented method of claim 12 , wherein a backend speech system is configured to process the enhanced input speech features corresponding to the target utterance.
19. The computer-implemented method of claim 18 , wherein the backend speech system comprises at least one of an automatic speech recognition (ASR) model or an audio or audio-video calling application.
20. The computer-implemented method of claim 12 , wherein the speech enhancement model is trained jointly with a backend automatic speech recognition (ASR) model using a spectral loss and an ASR loss.
21. The computer-implemented method of claim 20 , wherein the spectral loss is based on an L1 loss function and L2 loss function distance between an estimated ratio mask and an ideal ratio mask, the ideal ratio mask computed using reverberant speech and reverberant noise.
22. The computer-implemented method of claim 20 , wherein the ASR loss is computed by:
generating, using an ASR encoder of the ASR model configured to receive enhanced speech features predicted by the speech enhancement model for a training utterance as input, predicted outputs of the ASR encoder for the enhanced speech features;
generating, using the ASR encoder configured to receive target speech features for the training utterance as input, target outputs of the ASR encoder for the target speech features; and
computing the ASR loss based on the predicted outputs of the ASR encoder for the enhanced speech features and the target outputs of the ASR encoder for the target speech features.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/171,411 US20230298612A1 (en) | 2022-03-20 | 2023-02-20 | Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263269633P | 2022-03-20 | 2022-03-20 | |
US18/171,411 US20230298612A1 (en) | 2022-03-20 | 2023-02-20 | Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition |
Publications (1)
Publication Number | Publication Date |
---|---|
US20230298612A1 true US20230298612A1 (en) | 2023-09-21 |
Family
ID=85685215
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US18/171,411 Pending US20230298612A1 (en) | 2022-03-20 | 2023-02-20 | Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition |
Country Status (2)
Country | Link |
---|---|
US (1) | US20230298612A1 (en) |
WO (1) | WO2023183684A1 (en) |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP3994690A1 (en) * | 2019-07-24 | 2022-05-11 | Huawei Technologies Co., Ltd. | Audio processing apparatus and method for denoising a multi-channel audio signal |
-
2023
- 2023-02-20 WO PCT/US2023/062887 patent/WO2023183684A1/en unknown
- 2023-02-20 US US18/171,411 patent/US20230298612A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
WO2023183684A1 (en) | 2023-09-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7434137B2 (en) | Speech recognition method, device, equipment and computer readable storage medium | |
CN108463848B (en) | Adaptive audio enhancement for multi-channel speech recognition | |
US11694710B2 (en) | Multi-stream target-speech detection and channel fusion | |
WO2021022094A1 (en) | Per-epoch data augmentation for training acoustic models | |
EP4181121A1 (en) | Hotword suppression | |
Park et al. | Acoustic interference cancellation for a voice-driven interface in smart TVs | |
US20160358609A1 (en) | Rapid speech recognition adaptation using acoustic input | |
US10762914B2 (en) | Adaptive multichannel dereverberation for automatic speech recognition | |
Sadjadi et al. | Blind spectral weighting for robust speaker identification under reverberation mismatch | |
Yu et al. | Audio-visual multi-channel integration and recognition of overlapped speech | |
CN111883135A (en) | Voice transcription method and device and electronic equipment | |
US11521635B1 (en) | Systems and methods for noise cancellation | |
CN112466327B (en) | Voice processing method and device and electronic equipment | |
Jaroslavceva et al. | Robot Ego‐Noise Suppression with Labanotation‐Template Subtraction | |
JP2023162265A (en) | Text echo cancellation | |
US20230298612A1 (en) | Microphone Array Configuration Invariant, Streaming, Multichannel Neural Enhancement Frontend for Automatic Speech Recognition | |
US20230038982A1 (en) | Joint Acoustic Echo Cancelation, Speech Enhancement, and Voice Separation for Automatic Speech Recognition | |
US20230298609A1 (en) | Generalized Automatic Speech Recognition for Joint Acoustic Echo Cancellation, Speech Enhancement, and Voice Separation | |
Kundegorski et al. | Two-Microphone dereverberation for automatic speech recognition of Polish | |
JP2022544065A (en) | Method and Apparatus for Normalizing Features Extracted from Audio Data for Signal Recognition or Correction | |
US20230079828A1 (en) | STFT-Based Echo Muter | |
CN111462771B (en) | Howling processing method | |
Gomez et al. | Improved hands-free automatic speech recognition in reverberant environment condition | |
WO2023192327A1 (en) | Representation learning using informed masking for speech and other audio applications | |
Kayser et al. | Spatial speech detection for binaural hearing aids using deep phoneme classifiers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |