US8694540B1 - Predictive analytical model selection - Google Patents
Predictive analytical model selection Download PDFInfo
- Publication number
- US8694540B1 US8694540B1 US13/246,410 US201113246410A US8694540B1 US 8694540 B1 US8694540 B1 US 8694540B1 US 201113246410 A US201113246410 A US 201113246410A US 8694540 B1 US8694540 B1 US 8694540B1
- Authority
- US
- United States
- Prior art keywords
- data
- database table
- predictive
- predictive model
- categories
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/211—Schema design and management
Definitions
- Predictive modeling generally refers to techniques for extracting information from data to build a model that can predict an output from a given input. Predicting an output can include predicting future trends or behavior patterns, or performing sentiment analysis, to name a few examples.
- Various types of predictive models can be used to analyze data and generate predictive outputs. Examples of predictive models include Naive Bayes classifiers, k-nearest neighbor classifiers, support vector machines, and logistic regression techniques, for example.
- a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively.
- the amount of training data that may be required to train a predictive model can be large, e.g., in the order of gigabytes or terabytes.
- the number of different types of predictive models available is extensive, and different models behave differently depending on the type of input data.
- predictive analytical modeling selection can be employed to efficiently locate and identify one or more predictive models that are compatible with an input dataset.
- predictive analytical modeling selection can, in some implementations, be used to identify one or more predictive models that take, as input, features similar to but different from the features of an input dataset.
- predictive analytical modeling selection can be used to rank models according to a level of compatibility with an input dataset.
- one aspect of the subject matter described in this specification can be embodied in a computer-implemented method, in which the method include obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, using one or more processors to identify a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, in which identifying the first predictive model is based on one or more of the different tags, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.
- a system including one or more computing devices configured to perform operations including obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, identifying, based on one or more of the different tags, a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.
- Another aspect of the subject matter described in this specification can be embodied in a storage medium having instructions stored thereon that, when executed by data processing apparatus, cause the data processing apparatus to perform operations that include obtaining a database table, the database table including data arranged in multiple rows and multiple columns, each column of data being associated with a different tag that specifies a category for data in the column, identifying, based on one or more of the different tags, a first predictive model, from a collection of predictive models, that can be applied to the database table to generate a predictive output, adding a name associated with the first predictive model to a set of names of predictive models that are compatible with the database table, and providing the set of names of predictive models to a client device.
- the method or operations can further include applying the first predictive model to the database table to obtain a predicted value, and adding the predicted value to the database table. Adding the predicted value to the database table can include replacing a missing column value in the database table. Adding the predicted value to the database table can include adding a new column to the database table, the new column including the predicted value.
- identifying the first predictive model includes identifying a predictive model configured to: receive, as an input, data in a category specified by at least one of the different tags; and output data in a category specified by a second tag.
- the method or operations can further includes using the one or more processors to identify a second predictive model from the collection of predictive models, the second predictive model being configured to receive, as an input, both data in a category specified by at least one of the different tags and data in a category specified by the second tag, and adding a name associated with the second predictive model to the set of names of predictive models that are compatible with the database table.
- the method or operations can further include applying the first predictive model to the database table to obtain a predicted value, adding the predicted value to the database table in a new column to obtain an updated database table, and subsequently applying the second predictive model to the updated database table.
- identifying the first predictive model based on one or more of the different tags includes identifying a predictive model configured to receive, as an input, data in a category specified by a second tag related to at least one of the different tags.
- the second tag can be superior to or subordinate to the at least one of the different tags in a hierarchal order of tags.
- FIG. 1 is a schematic that illustrates use of an example predictive modeling API in conjunction with an example database web application.
- FIG. 2 is a schematic that illustrates an example of tags arranged in a tag hierarchy.
- FIG. 3 is a schematic that illustrates an example of a database table.
- FIG. 4 is a flow chart of an example process for identifying one or more predictive models that are applicable to an input dataset.
- FIG. 5 is a flow chart of an example process for identifying a predictive model.
- FIG. 6A is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset.
- FIG. 6B is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset.
- FIG. 7 is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset.
- FIG. 8 is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset.
- FIG. 9 is an example of a set of predictive model names obtained from a search performed by a predictive modeling API.
- FIG. 10 illustrates an example predictive modeling system.
- FIG. 11 is a flow chart of an example process for expanding a dataset.
- a web application is software that executes on one or more server computing devices (or “servers”) and that is accessed over a network such as the Internet by users through web browsers or other software that runs on client computing devices (or “clients”).
- Data files include digital electronic files that are created, accessed, or modified by web applications and can be stored in repositories that are accessible to the servers.
- Web applications can provide a graphical user interface (GUI) to client devices by sending the client devices Hypertext Markup Language (HTML) documents or other information that can be used to render the GUIs.
- GUI graphical user interface
- HTML Hypertext Markup Language
- a web application is invoked and/or controlled using scripts written in a scripting language.
- a script is a set of instructions and/or queries that are written in the scripting language and that can be executed entirely on a client, entirely on a server, or on both the client and the server.
- web applications run or utilize databases and include, for example, database management systems, word processors, email, financial tools, calendars, maps, and webpage-hosting applications.
- a database management system is a system that stores and manages data in a collection of one or more tables (e.g., database tables), each table having an array of rows and columns.
- an to application programming interface (API) for a database management system can provide methods for reading, writing and creating database files, performing calculations on data in the database tables, and, in some implementations, manipulating a database GUI such as, for instance, by opening dialog boxes, creating new database tables, expanding or reducing the size of database tables, and/or joining pre-existing database tables.
- the API for the database management system also provide methods for can reading, writing or otherwise modifying the data contained in the row or column fields of the database tables.
- a predictive modeling API can be provided, in which the predictive modeling API allows use of predictive models to obtain a predicted output based on a particular input dataset.
- the predictive modeling API can also be used to programmatically train of new predictive models.
- the predictive modeling API allows users to upload a dataset from web application database files (or from other sources of data) and invoke a predictive model to obtain predictions for queries.
- a prediction i.e., the output of a predictive model
- the predicted output then can be added back to the input dataset to replace a missing value or to expand the input dataset.
- the predictive modeling API can use the dataset as training samples for training new predictive models.
- FIG. 1 is a schematic that illustrates use of an example system 100 that employs predictive models.
- the system 100 includes a web application 112 , a predictive modeling API 114 and predictive models 110 .
- the web application 112 , predictive modeling API 114 and predictive model 110 software can be stored and/or execute on one or more servers in a data warehouse 108 , for example, that houses hundreds or thousands of servers. In further implementations, the servers can be located in different geographic locations.
- the web application 112 provides an interactive GUI 101 through a computer network 106 such as the Internet to software (e.g., a web browser) executing on a client computing device 104 .
- the GUI 101 is displayed for a user 102 and allows the user 102 to interact with the web application 112 .
- the GUI 101 displays interactive fields through which a user 102 can either upload a database file from the computing device 104 to the web application 112 or download a database file from the web application 112 .
- the interactive fields can be used to enter data in or obtain data from the individual row or column fields of a database file.
- the web application 112 may include a web hosting application that hosts a web page.
- the web page may include multiple interactive fields in which a user can enter data.
- the data entered in the interactive fields then may be saved to a database table that is stored with the web application 112 on one or more servers of the data warehouse 108 or another geographic location.
- the predictive modeling API 114 works in conjunction with the web application 112 to receive data from or send data to the web application 112 such as, for example, data from a database table or output data from a predictive model.
- the predictive modeling API 114 also can be used in conjunction with other applications that do not require the use of an interactive GUI.
- database queries can be executed using a program that operates with a command line interface, such as UNIX or MS-DOS.
- the database file (or, alternatively, data from the database file) can be passed to the predictive modeling API as input data.
- the predictive modeling API uses the input data to train a predictive model 110 or the predictive modeling API applies an already trained model to the data from the database file to produce a predicted output.
- a database includes one or more database tables 130 , each of which can include data entry fields (e.g., fields 116 and 118 ) arranged in a two-dimensional array of rows and columns (e.g., columns A through I and rows 1-8).
- the data entry fields of the database table 130 include data values (e.g., a category value or a numeric value).
- a database table is missing a data value in one or more row and/or column data entry fields.
- the columns of the database table 130 can be associated with tags 120 (Tag A through tag I).
- a tag 120 specifies the type of feature contained in the corresponding column with which the tag is associated.
- a column in a database table can be associated with a tag entitled “temperature.”
- the data entry fields of the column associated with the tag “temperature” thus respectively include, for example, numeric values corresponding to temperature values.
- a column in a database table can be associated with a tag entitled “city.”
- the data entry fields of the column associated with the tag “city” respectively include, for example, city names. Accordingly, tags provide a mechanism for identifying the data values contained in the columns of a database table.
- Each column of a database table can therefore be associated with a different tag 120 .
- a tag associated with a dataset column can be part of a tag hierarchy. That is, a particular tag can be subordinate to or superior to other tags in a hierarchal order of tags.
- a tag hierarchy can include tags arranged in order of specificity.
- FIG. 2 shows several tags arranged in a tag hierarchy 200 .
- a tag 210 entitled “blog post text—baseball” may relate to text that can be found in a blog post and is concerned with the sport of baseball (e.g., a discussion of particular baseball team).
- the tag 210 then is subordinate to a tag 220 entitled “blog post text—sports,” i.e., the tag 210 is more specific in that it relates to baseball and not sports generally.
- a tag 230 entitled “blog post text” is superior to tag 220 i.e., the tag 230 is more general in that it relates to the text of blog posts in general and not the text of any particular blog post subject matter.
- the tag hierarchy may be stored, for example, on one or more servers in the data warehouse 108 or in another geographical location.
- tags and corresponding tags in a tag hierarchy can be predefined. In some other implementations, tags and corresponding tags in a tag hierarchy can be determined using machine learning techniques.
- Some example feature tags include “zip code,” “time,” “date,” and “text.”
- the “zip code” feature tag can include sub-tags “continent,” “country,” “state,” “city.”
- the “time” and “date” feature tags can include sub-tags “stock market events,” “seismic events,” and “weather events.”
- the “text” feature tags can include sub-tags “news,” “opinion,” and “entertainment.”
- sub-tags can include additional sub-tags. For example, sub-tags “news,” “opinion,” and “entertainment” can include additional sub-tags “magazine article,” “blog post,” and “newspaper.”
- the predictive modeling API 114 can invoke functionality of a predictive model 110 to obtain a predicted value for the dataset.
- a predictive model can be invoked to calculate the value of at least one of the missing row and/or column fields in the dataset (e.g., database table 130 ).
- the predictive model can be used to add new data fields to the dataset (e.g., database table 130 ).
- the predictive model can predict values that are combined with a dataset that may or may not have missing values, such that the dataset is expanded in size. (The predictive model is described further below.)
- the database table 130 uploaded to the web application 112 can be supplied to a predictive model 110 by the predictive modeling API 114 .
- the predictive model to which the database table is supplied is either categorical (if its predictions are categories) or regression (if its predictions are numeric values). Accordingly, depending on the predictive model type, the output of the predictive model can be a category or numeric value that is added back to the database table to replace a missing value or as part of a new field that is added to the table.
- the example database table 300 in FIG. 3 includes data values in a first feature column 302 (entitled, “E-Mail Subject Line”) that correspond to email message subject lines.
- the database table 300 also includes a second category column 304 (entitled “E-Mail Classification”) that categorizes the data values contained in the corresponding row of the first column.
- One or more of the data entry fields in the second column 304 may be empty (e.g., field 306 ).
- a compatible predictive model e.g., a predictive model that can take, as an input, e-mail subject lines
- the predictive model generates a predicted value for each empty field in the second column 304 .
- the model may predict an output category indicative of whether the example represents SPAM or not.
- the predicted values can be placed in the empty field 306 of the second column 304 .
- a database table can include feature columns containing numeric values and a category column that is a regression of those numeric values (e.g., next value in a series).
- the action taken by the predictive model 110 can be, in some implementations, in response to a query (e.g., a request to predict the value of a missing row or column, a request to predict a value (category or numeric) to add to an existing database table, a request to locate a predictive model or predictive models capable of predicting a specified value, or a request to provide a recommendation of models compatible with an input dataset) submitted to the predictive modeling API 114 or the predictive model 110 .
- a query e.g., a request to predict the value of a missing row or column, a request to predict a value (category or numeric) to add to an existing database table, a request to locate a predictive model or predictive models capable of predicting a specified value, or a request to provide a recommendation of models compatible with an input dataset
- the queries are automatically submitted to the predictive modeling API 114 or the model 110 in response to a database table being uploaded to the web application 112 (e.g., a script is executed such that the query is submitted to the predictive model 110 independent of a specific user request).
- a user uploading a database can request submission of the query to the predictive modeling API 114 or predictive model 110 .
- the user can select an option to submit a query through the GUI 100 (e.g., by clicking a link, checking a box, selecting an option from a drop-down menu).
- a predictive model is trained with training data that includes input data and output data that mirror the form of input data that will be entered into the predictive model and the desired predictive output, respectively.
- whether a particular predictive model in a collection of models would be compatible with a particular input dataset can depend on the type of features on which the model is trained and the type of features included in the input dataset supplied to the model.
- a predictive model is considered to be compatible with an input dataset when the types of features of the input dataset closely match the types of features on which the predictive model has been trained. That is, the predictive model takes, as an input, features in the same or similar categories as the features on which the model has been trained.
- a predictive model trained on a first type of data features can be considered to be compatible with an input dataset that includes, for example, e-mail subject lines in at least one of the input dataset columns.
- the predictive model trained on e-mail subject lines would not be considered compatible with an input dataset that includes, for example, only zip codes in the input dataset columns.
- a compatible model exactly matches an input dataset when the model takes as input the some or all of the same features associated with the columns of the input dataset in the same order the columns are arranged in the input dataset, and the model predicts the same output as the category column of the input dataset.
- a predictive model that takes as an input features “city,” “date,” and “time of day” and predicts temperature values directly matches an input dataset having columns containing the same features in the same order (i.e., cities in the first feature column, dates in the second feature column, times of day in the third feature column, and temperature in a category column).
- a predictive model that takes as input features “city,” “date,” and “time of day” and predicts temperatures directly matches an input dataset having columns containing the two of those features in the same order (i.e., cities in the first feature column, dates in the second feature column, temperature values in a third category column).
- a compatible model indirectly matches an input dataset when the model takes as input at least some of the same input features associated with the columns of the input dataset, but not necessarily in the same order.
- a predictive model that takes as an input features the values “city,” “date,” and “time of day” in that order indirectly matches an input dataset having a first column containing date data and a second column containing city data, but no column containing time of day values.
- the number of predictive models to select from for a particular input dataset may be too large for a user to efficiently and manually search.
- one or more of the features that a predictive model takes as input may not match exactly with the type of features available in the input dataset.
- an input dataset may include features in a column corresponding to blog post text, but the models available have been trained on text in general or blog post text specific to a particular category, such as sports. Accordingly, it may not be clear which predictive models are compatible with an input dataset.
- the user can submit queries to the web application, which are passed to the predictive modeling API, for recommendations of predictive models that exactly or indirectly match an input dataset (e.g., a user can inquire as to what predicted outputs can be obtained from the input dataset).
- the user can submit queries to the web application, which are passed to the predictive modeling API, for recommendations of models that supply a desired predicted output based on the input dataset (e.g., a user can inquire as to what predicted models are required to obtain a temperature prediction for the input dataset).
- the predictive modeling API can be configured to search a collection of predictive models for one or more models that are compatible with an input dataset received from the web application or to provide recommendations for models that can be used to obtain the desired predicted output.
- a set containing the names of those models can be provided, for example, to one or more client devices.
- the type of features included in the columns of an input dataset can be classified using a tag. Accordingly, to identify whether a predictive model is compatible with a particular input dataset, the tags associated with the columns of the input dataset can be checked against the features that the predictive model takes as input (i.e., the tags associated with the dataset on which the particular predictive model has been trained).
- the tags associated with the columns of the training dataset can be recorded by the predictive model.
- FIG. 4 is a flow chart of an example process 400 for identifying one or more predictive models that are compatible with an input dataset, in which the process is implemented using one or more computer programs executing on one or more data processing apparatus such as the system show in FIG. 1 .
- a database table is obtained ( 402 ) by the web application 112 , in which the table includes data arranged in multiple rows and multiple columns, the columns of data being associated with different respective tags that classify the type of features contained in a corresponding column of the table.
- the database table is passed from the web application 112 to the predictive modeling API 114 , which then obtains the tags identifying the features in the columns of the input dataset.
- the predictive modeling API 114 then identifies ( 404 ) a first predictive model, from a collection of predictive models 110 , that can be applied to the input dataset to generate a predictive output, in which identifying the first predictive model is based on one or more of the different tags. After identifying the first predictive model that can be applied to the input dataset, the predictive modeling API 114 adds ( 406 ) a name associated with the first predictive model to a set of names of predictive models that are compatible with the dataset. For example, each predictive model can include a corresponding name that characterizes a potential use or predicted output of the model. In some implementations, the set of names of predictive models that are compatible with the input dataset may initially be empty prior to the search by the API.
- the predictive modeling API 114 passes the set of names of compatible predictive models to the web application 112 , which then supplies ( 408 ) the set of names to one or more client devices 104 .
- the user(s) operating the one or more client devices can select a predictive model from the set to apply to the input dataset.
- FIG. 5 is a flow chart of an example process 500 that further details the technique ( 404 ) for identifying a predictive model disclosed in the process 400 .
- the predictive modeling API 114 Upon receiving the input dataset from the web application 112 , the predictive modeling API 114 obtains ( 502 ) one or more of the tags associated with the columns of the input dataset. For example, in some implementations, the predictive modeling API 114 extracts the tags associated with the columns of the input dataset.
- a user operating the client device 104 selects, through the web application 112 , which tags of the input dataset should be used to perform the search for predictive models. The tags selected by the user then are passed to the predictive modeling API 114 .
- the predictive modeling API 114 then obtains ( 504 ) one of the predictive models 110 from a collection of predictive models. Once the predictive modeling API 114 has obtained the one or more tags associated with the input dataset, the API 114 checks ( 505 ) a predictive model in the collection of predictive models 110 to determine if there is a match between the tags obtained from the input dataset and the tags associated with the first predictive model. If a match between tags exists, the API 114 adds ( 506 ) a name associated with the predictive model to a set of compatible predictive models. If no match exists, the API 114 obtains ( 504 ) the next predictive model in the collection and performs another check ( 505 ) of the tags associated with the input dataset against the tags associated with the new predictive model, thus continuing the algorithm.
- the API 114 determines ( 507 , 509 ) if the most recent predictive model checked is the last available in the collection. If no more models are available to check, the API 114 ends the search. Otherwise, the API 114 continues checking the remaining models in the collection.
- checking whether tags associated with an input dataset match tags associated with a predictive model entails comparing whether the predictive model takes as input the features identified by the input dataset tags, without preference to the column order from which the tags were obtained.
- FIG. 6 is a schematic that illustrates an example of a system 600 used to obtain a list of predictive models compatible with an input dataset according to a first embodiment.
- An input database table 630 includes three feature columns 602 , 604 , 606 and a category column 608 .
- the first feature column 602 includes data specifying a geographic location, e.g., a city.
- the first feature column 602 is associated with a corresponding tag 603 entitled, “City.”
- the second feature column 604 is directly adjacent to the first feature column and includes data specifying a date, e.g., a day and month of the year.
- the second feature column is associated with a corresponding tag 605 entitled, “Date.”
- the third feature column 606 is directly adjacent to the second feature column and includes data specifying a time of day.
- the third feature column is associated with a corresponding tag 607 entitled, “Time of Day.”
- the category column is located at the end of the database table 603 and is directly adjacent to the third feature column 606 .
- the rows of the category column 608 include data specifying a temperature for the corresponding city, date and time of day.
- the category column is associated with a tag 609 entitled, “Temperature.”
- the tags of the input dataset are provided ( 640 ) from the web application 612 to a predictive modeling API 614 .
- the predictive modeling API 614 checks ( 650 ) whether the tags 603 , 605 and 607 match tags associated with a predictive model in a collection 680 of predictive models (e.g., model 610 a , 610 b , 610 c ). That is, the API 614 searches for a model that takes as an input city, date and time data values, without respect to the order of the tags, and outputs a temperature value as a predicted output.
- the API 614 locates a model 610 a that takes, as an input, the features of the database table 630 in a different column order (e.g., a first column of values corresponding to a time of day, a second column of values (directly adjacent to the first column) corresponding to a city name, and a third column of values (directly adjacent to the second) corresponding to date values), where the model outputs a predicted temperature
- the API 614 identifies the located model 610 a as compatible with the input database table 630 and adds ( 655 ) the name of model 610 a to a set 616 of compatible predictive models.
- the set 616 can be stored with the web application 112 on one or more servers of the data warehouse 108 or on servers in some other geographic location, in which the servers can communicate over one or more networks with the web application 112 and/or predictive modeling API 114 .
- the predictive modeling API can identify compatible predictive models when less than all of the feature columns of an input dataset match the features that a predictive model takes as input. For example, if input database table 630 includes two feature columns 602 , 604 (e.g., a first feature column of values corresponding to city and a second feature column of values (directly adjacent to the first column) corresponding to a date) and a category column 608 (e.g., predicted temperature) but no third feature column, the API 614 can still identify a predictive model as compatible with the model 610 a when model 610 a takes as input city and date features and outputs a predicted temperature.
- two feature columns 602 , 604 e.g., a first feature column of values corresponding to city and a second feature column of values (directly adjacent to the first column) corresponding to a date
- a category column 608 e.g., predicted temperature
- the predictive modeling API can re-order the tags associated with the columns of the input dataset to aid identifying a predictive model compatible with the input dataset.
- FIG. 6B is a schematic that illustrates an example of a system used to obtain a list of predictive models compatible with an input dataset according to a second embodiment.
- a database table 630 from a web application 612 is provided ( 640 ) to a predictive modeling API 614 .
- predictive modeling API switches ( 660 ) the order of tags associated with the table columns prior to searching for a compatible model.
- the predictive modeling API modifies the order of tags associated with columns 602 , 604 , and 606 of database table 630 (e.g., switching the location of first column 602 with the third column 606 ) to produce a modified database table 670 .
- the API checks whether any predictive models in a collection of predictive models take, as an input, feature columns arranged in the same manner as the modified database table 670 . If a compatible predictive model is located that can take the features in the modified order specified by the predictive modeling API, the predictive modeling API 114 then can re-order the arrangement of the columns of the input dataset to match the order in which the compatible predictive model will receive the features.
- a predictive model takes as input one or more features that do not match the name of a tag associated with a column of the input dataset.
- the predictive modeling API can still identify a predictive model that is compatible with the input dataset, if one or more of the model input features are, as part of a tag hierarchy, subordinate to or superior to the tag associated with the column of the input dataset.
- FIG. 7 is a schematic that illustrates an example of a system 700 used to obtain a list of predictive models compatible with an input dataset according to a third embodiment.
- An input database table 730 is provided ( 740 ) from a web application 712 to a predictive modeling API 714 .
- the input database table 730 includes three columns 702 , 704 , 706 and three respective tags 703 , 705 , and 707 .
- the predictive modeling API 714 searches ( 750 ) a collection 780 of available predictive models (e.g., 710 a , 710 b , 710 c ).
- the predictive modeling API 714 checks whether any of the predictive models in the collection 780 take as an input, features that match one or more of the tags 703 , 705 , and 707 or whether any of the predictive models in the collection 780 take as an input, features that are subordinate to or superior to one or more of the tags 703 , 705 , and 707 .
- the predictive modeling API 714 can search the collection of models for those models that take, as an input, features that include city names, as well as features that are subordinate to city names in a tag hierarchy, such as boroughs, city street names, or school districts. Other features that are subordinate to city names can be searched as well.
- the predictive modeling API also can search features that are superior to city names in a tag hierarchy, such as counties, states or countries. Other features that are superior to city names can be searched as well.
- the API 714 can add ( 755 ) the names associated with the identified models to a set 716 of predictive models compatible with the input database table 730 .
- an input dataset lacks one or more feature columns that are required for applying a particular predictive model.
- the predictive modeling API can identify a first predictive model that takes, as an input, three different features.
- the input dataset provided to the API can include columns associated with tags that match just two of the three features of the first predictive model.
- the predictive modeling API can search for an additional model to apply to the input dataset to obtain the third missing feature and include both the first and second models in a set of applicable models. If an appropriate second model is located, the second model can be applied to the input dataset to obtain the third feature as a predicted output. The predicted output can be added to the input dataset to produce a modified input dataset.
- the modified input dataset then includes the three features required by the first predictive model, such that the first predictive model can be applied to the modified input dataset. That is, the second and first predictive models are “stacked,” with the second predictive model being applied to the input dataset to obtain a modified input dataset, and the first predictive model subsequently being applied to the modified input dataset.
- a user submits a query for one or more models.
- a user can supply an input dataset and request, through the web application, a recommendation for a list of models capable of taking the input dataset and outputting a desired output (a directed search), such as temperature.
- the predictive modeling API 114 can be configured to search a collection of predictive models, in response to such a request, for predictive models that take as input one or more of the features of the input dataset and output a predicted temperature value.
- the API 114 can search for two or more predictive models that need to be applied in a “stack” to obtain the desired prediction.
- the API 114 can identify a second model which provides the desired output but is not compatible with the input dataset because the input dataset is missing one or more feature columns. The API 114 then can also identify a second predictive model that can take the input dataset and output the missing feature values necessary to add to the input dataset. When the second model is applied to the input dataset, the predicted output can be added to the input dataset to obtain a modified dataset that is compatible with the first dataset.
- FIG. 8 is a schematic that illustrates an example of a system 800 used to obtain a list of predictive models compatible with an input dataset according to a fourth embodiment.
- a first database table 830 includes two separate feature columns 802 , 804 associated with respective tags 803 , 805 that characterize the features stored in the corresponding columns (e.g., city name and date) and a category column 806 (e.g., temperature).
- the predictive modeling API obtains ( 840 ) from a web application 812 tags associated with the feature columns of the first database table 830 and searches ( 850 ) a collection 880 of predictive models (e.g., 810 a , 810 b , 810 c ) for models that are compatible with the first database table 830 .
- the predictive modeling API identifies a predictive model (e.g., model 810 a ) that takes, as an input, features corresponding to those identified by tags 803 and 805 (e.g., city name and date) and outputs a predicted temperature value.
- the predictive model 810 can also take as a third input, features that are missing from the input database table 830 (e.g., humidity).
- the predictive modeling API 814 also can search for a predictive model that will supply the missing column of features to the table 830 .
- the predictive modeling API 814 can locate a predictive model (e.g. 810 b ) that takes, as an input, features corresponding to those identified by tags 803 and 805 (e.g., city name and date) and outputs a predicted humidity.
- the predictive modeling API 814 can add ( 855 ) the name of the first model (e.g., 810 a ) and add ( 857 ) the second model (e.g., 810 b ) to a set 816 of names of models that are compatible with the input database table 830 .
- the user can apply the models in a “stack,” i.e., the second predictive model (e.g., 810 b ) can be applied to the input database table 830 to obtain predicted humidity values, which are then added to the table 830 .
- the first predictive model (e.g., 810 a ) then can be applied to the modified table that includes the humidity values to obtain predicted temperature values.
- the user query can be a request to identify predictive models that are compatible with the input dataset (an undirected search).
- the API 114 can search for predictive models that exactly or indirectly match the input dataset, depending on the user identified preference. The API 114 thus lists models compatible with the input dataset informing the user what type of predictions can be obtained with the input dataset.
- the predictive models identified by the predictive modeling API can be ranked based on applicability to an input dataset.
- the set of predictive model names can be ranked based on how closely the features accepted by each model match tags associated with an input dataset. For example, the ranking may be based on: whether a predictive model takes as input feature columns that exactly match the names and order of tags associated with an input dataset; whether a predictive model takes as input feature columns that exactly match the names but not order of tags associated with an input dataset; whether a predictive model takes as input feature columns that match at least some of the names of tags associated with an input dataset; whether a predictive model takes as input feature columns that fall within the same hierarchal order as tags associated with an input dataset.
- FIG. 9 is an example of a set 900 of predictive model names obtained from a search performed by a predictive modeling API, the models being identified by the API as compatible with an input database table.
- the input database table on which the search is based can include a tag associated with each feature column in the table.
- the table can include a first tag labeled “city” and associated with a first feature column, a second tag labeled “date” and associated with a second feature column, and a third tag labeled “time of day” and associated with a third feature column.
- model A which is ranked 1
- model B which is ranked 2
- model B which is ranked 2
- model B can be a predictive model that takes as input three features that exactly match the name, but not order (e.g., column 1 contains times of day, column 2 contains city names, and column 3 contains dates) of tags associated with the input database table.
- Model C which is ranked 3 can be a predictive model that takes as input three features, in which the second and third inputs of the model receive data that matches the name and order of the second and third tags associated with the input database table (e.g., date and time).
- the first input of Model C can correspond to a feature that is in the same hierarchy (e.g., state) as the first tag of the input database table.
- Model D which is ranked 4 can be a predictive model that takes as input three features, in which only the first and second inputs match the name, but not order of two of the tags (e.g., city and time) associated with the input database table.
- Each of the models in the set 900 can be capable or predicting an output that corresponds to the category column of the input database (e.g., each model can be capable of predicting a temperature).
- FIG. 10 illustrates an example predictive modeling system 1000 .
- the system includes one or more clients 1090 that can optionally communicate through one or more networks 1080 with a collection of remote servers, such as servers (e.g., server 1001 ) deployed in a data center 1003 or in different geographic locations.
- the servers includes one or more data processing apparatuses. While only one processor apparatus is shown in FIG. 10 , multiple data processing apparatus can be used.
- the servers include various software modules, e.g. executable software programs or libraries, including a web application 1012 , predictive modeling API 1014 , and predictive models 1010 . Although several software modules are illustrated, there may be fewer or more software modules. Moreover, the software modules can be distributed on one or more data processing apparatus connected by one or more networks or other suitable communication mediums.
- a computer program can execute on a single server or, alternatively, the program can be organized into components that execute on multiple servers. There can be more than one instance or copy of a given computer program executing on the collection of servers at any given time. Multiple copies of a computer program that implements the predictive modeling API, for instance, can be executing at the same time on one or more servers. Other programs and APIs (e.g., API 1016 ) can be executed on the servers as well.
- the servers can communicate with each other and with storage systems (e.g., application data storage system 1018 , database storage system 1020 ) at various times using one or more computer networks or other communication means.
- the servers in the data center 1003 can be coupled to an intranet.
- the servers also include hardware or firmware devices including one or more processors 1022 , one or more additional devices 1024 , a computer readable medium 1026 , a communication interface 1028 , and one or more user interface devices 1030 .
- Each processor 1022 is capable of processing instructions for execution within the server 1001 .
- the processor 1022 is a single or multi-threaded processor.
- Each processor 1022 is capable of processing instructions stored on the computer readable medium 1026 or on a storage device such as one of the additional devices 1024 .
- the server 1001 uses its communication interface 1028 to communicate with one or more computers 1090 , for example, over the network 1080 .
- Examples of user interface devices 1030 include a display, a camera, a speaker, a microphone, a tactile feedback device, a keyboard, and a mouse.
- the server 1001 can store instructions that implement operations associated with the modules described above, for example, on the computer readable medium 1026 or one or more additional devices 1024 , for example, one or more of a floppy disk device, a hard disk device, an optical disk device, or a tape device.
- the predictive modeling API 1014 is a separate computer program or, in some implementations, is part of the computer program that makes up the web application 1012 .
- the web application 1012 and the predictive modeling API can communicate through method invocation, shared memory, network communication, or other means of inter or intra-process communication.
- the predictive modeling system 1000 can optionally include other APIs as well (e.g. API 1016 ).
- the predictive modeling API 1014 exposes functionality through objects, methods or functions that allow scripts to query models and train models 1010 using training data 1020 obtained from application data 1018 .
- models are trained by a training system 1040 , which receives requests from the predictive modeling API 1014 to initiate training and check the status of training.
- the predictive modeling API 1014 provides the training system 1040 with the location of training data 1020 to be used in training a particular model.
- the training data 1020 such as a range of columns in a database table, can be obtained from the application data 1018 through use of the web application API 1012 and then provided to the training system 1040 through use of the predictive modeling API 1014 .
- Other APIs 1016 can include, for instance, an API that allows scripts to communicate over computer networks using Transmission Control Protocol/Internet Protocol (TCP/IP) and an authentication API which provides a mechanism for authorizing a script's request to access a user's application data 1018 , models 1010 , and training data 1020 through the web application 1012 and the predictive modeling API 1014 .
- the web application 1012 (or, e.g., a script engine) requests access permission from an authorization server.
- the authorization server is responsible for prompting the user operating the client device(s) (e.g., clients 1090 ) for permission to grant access to the required data, if necessary. If permission is granted, the authorization server returns a token that can be shared with the web application 1012 (including, e.g., a web application API), and the predictive modeling API 1014 in order to access the required data.
- Other authorization mechanisms are possible.
- FIG. 11 is a flowchart of an example process for expanding a dataset, in which the process is implemented using one or more computer programs executing on one or more data processing apparatus such as the system show in FIG. 1 .
- Expansion of an input dataset can be useful to aid in identifying a compatible predictive model that will give a direct match. For example, if a predictive model is identified in which the model receives as input features data values corresponding to “states,” but an input dataset instead contains global positioning values, the input dataset is not a direct match with the identified predictive model. However, if the input dataset can be expanded to include states corresponding to the listed global positioning values, the identified predictive model would then correspond to a direct match with the features of the input dataset.
- the predictive modeling API 114 obtains the dataset for expansion ( 1110 ).
- the dataset can be, in some implementations, obtained from a client device or a database storing data.
- the predictive modeling API 114 identifies a tag for one or more features ( 1120 ).
- the predictive modeling API 114 evaluates each feature in the dataset to identify a tag.
- Feature types can be predefined, together with techniques for identifying those types.
- Example feature tags include “location,” “zip code,” “time,” “date,” and “text.”
- the predictive modeling API 114 can evaluate predictive models identified in a search for models compatible with the input dataset to identify a tag.
- the predictive modeling API 114 determines whether to expand the identified features ( 1130 ). In some implementations, the system expands all features for which a tag was identified. For example, assuming the API 114 identifies a model that takes, as input, features having predefined tags for “time” and “date,” the predictive modeling API 114 can expand any features that match these tags. According to this example, a dataset that includes features “time” and “temperature” will result in expansion of the feature “time,” which matches predefined tag “time,” but will not result in expansion of the feature “temperature,” which does not match tag “time” or “date.”
- the predictive modeling API 114 then expands features ( 1140 ).
- the system expands all features for which a tag was identified. For example, if types “time” and “date” were designated as types for expansion, the system will expand any features that match either type “time” or “date.”
- expansion of a feature can involve expanding that feature to all sub-types associated with the identified type. For example, a “GPS coordinates” feature can be identified as a “location” type and be expanded to some or all sub-types corresponding to the “location” type (e.g., “continent,” “country,” “state,” “city,” “zip code,” “street,” and “street address”).
- values for expansions can be obtained from by applying to the dataset a predictive model compatible with an input dataset.
- the compatible predictive model can be obtained as a result of a search for a compatible predictive model.
- the system then populates the expansions using the predicted output from the compatible predictive model.
- values for expansions can be automatically determined using training data examples.
- training data examples for populating expansions can be obtained from a database storing training data sets. For example, a GPS coordinates feature (a “location” tag) can be expanded to sub-tags “state” and “city.” The expanded sub-tags “state” and “city” can be populated using existing training data examples that include GPS coordinates, “state” and/or “city.”
- the system optionally modifies the expanded training dataset ( 1160 ).
- expanded training data can be modified by reduction expansions in the training data.
- the system can reduce expansions using feature selection techniques.
- the system reduces expansions by iteratively removing one expansion from the expanded training data and testing whether removal of that expansion resulted in a positive impact on the prediction outcome.
- the system can exclude an expansion from the training data if removal of the expansion improved the accuracy of the prediction outcome.
- the system can reduce expansions by removing subsets of two or more expansions from the expanded training data and testing whether removal of that subset resulted in a positive impact on the prediction outcome.
- the system can exclude expansion subsets from the training data if removal of those subsets improved the accuracy of the prediction outcome.
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language resource), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- a system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending resources to and receiving resources from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- client device e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device.
- Data generated at the client device e.g., a result of the user interaction
Abstract
Description
Claims (33)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/246,410 US8694540B1 (en) | 2011-09-01 | 2011-09-27 | Predictive analytical model selection |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161530252P | 2011-09-01 | 2011-09-01 | |
US13/246,410 US8694540B1 (en) | 2011-09-01 | 2011-09-27 | Predictive analytical model selection |
Publications (1)
Publication Number | Publication Date |
---|---|
US8694540B1 true US8694540B1 (en) | 2014-04-08 |
Family
ID=50391942
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/246,410 Active 2032-05-12 US8694540B1 (en) | 2011-09-01 | 2011-09-27 | Predictive analytical model selection |
Country Status (1)
Country | Link |
---|---|
US (1) | US8694540B1 (en) |
Cited By (37)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100175001A1 (en) * | 2009-01-06 | 2010-07-08 | Kiha Software Inc. | Calendaring Location-Based Events and Associated Travel |
US20100306254A1 (en) * | 2009-05-29 | 2010-12-02 | Eric Williamson | Systems and methods for object-based modeling using composite model object having independently updatable component objects |
US20120284600A1 (en) * | 2011-05-06 | 2012-11-08 | Google Inc. | Predictive model application programming interface |
US20130346351A1 (en) * | 2011-05-04 | 2013-12-26 | Google Inc. | Assessing accuracy of trained predictive models |
US8909568B1 (en) * | 2010-05-14 | 2014-12-09 | Google Inc. | Predictive analytic modeling platform |
US9070089B1 (en) * | 2011-05-09 | 2015-06-30 | Google Inc. | Predictive model importation |
US9105006B2 (en) | 2009-05-29 | 2015-08-11 | Red Hat, Inc. | Generating floating desktop representation of extracted model object |
US20150269281A1 (en) * | 2014-03-19 | 2015-09-24 | International Business Machines Corporation | Inferred operations for data analysis |
US9152944B2 (en) | 2009-08-31 | 2015-10-06 | Red Hat, Inc. | Generating rapidly rotatable dimensional view of data objects |
US9152435B2 (en) | 2009-08-31 | 2015-10-06 | Red Hat, Inc. | Generating a set of linked rotational views of model objects |
US9183535B2 (en) | 2008-07-30 | 2015-11-10 | Aro, Inc. | Social network model for semantic processing |
US9189747B2 (en) | 2010-05-14 | 2015-11-17 | Google Inc. | Predictive analytic modeling platform |
WO2016025396A1 (en) * | 2014-08-11 | 2016-02-18 | Coldlight Solutions, Llc | An automated methodology for inductive bias selection and adaptive ensemble choice to optimize predictive power |
US9292485B2 (en) | 2009-05-29 | 2016-03-22 | Red Hat, Inc. | Extracting data cell transformable to model object |
CN106569784A (en) * | 2015-10-09 | 2017-04-19 | 北大方正集团有限公司 | Display page generation method and system |
US20170116308A1 (en) * | 2015-10-23 | 2017-04-27 | Oracle International Corporation | System and method for aggregating values through risk dimension hierarchies in a multidimensional database environment |
EP3264338A1 (en) * | 2016-06-28 | 2018-01-03 | Siemens Aktiengesellschaft | Method for providing a searchable data base of models describing technical processes |
CN108122799A (en) * | 2016-11-29 | 2018-06-05 | 台湾积体电路制造股份有限公司 | The method of predicting wafer defect |
US20190068419A1 (en) * | 2016-03-11 | 2019-02-28 | Orange | Method and device for multi-service transmission with fc-ofdm modulation and corresponding receiver |
US10324961B2 (en) | 2017-01-17 | 2019-06-18 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US20190207985A1 (en) * | 2016-12-08 | 2019-07-04 | Tencent Technology (Shenzhen) Company Limited | Authorization policy recommendation method and apparatus, server, and storage medium |
US10515313B2 (en) | 2011-06-21 | 2019-12-24 | Google Llc | Predictive model evaluation and training based on utility |
US20200081995A1 (en) * | 2018-09-06 | 2020-03-12 | International Business Machines Corporation | Data-centric approach to analysis |
US10642723B1 (en) | 2019-02-05 | 2020-05-05 | Bank Of America Corporation | System for metamorphic relationship based code testing using mutant generators |
US20200257523A1 (en) * | 2019-02-11 | 2020-08-13 | International Business Machines Corporation | Application feature change detection |
US20200364608A1 (en) * | 2019-05-13 | 2020-11-19 | International Business Machines Corporation | Communicating in a federated learning environment |
US10902344B1 (en) * | 2016-10-31 | 2021-01-26 | Microsoft Technology Licensing, Llc | Machine learning model to estimate confidential data values based on job posting |
US10990882B2 (en) * | 2017-07-28 | 2021-04-27 | International Business Machines Corporation | Stratigraphic layer identification from seismic and well data with stratigraphic knowledge base |
US11157780B2 (en) * | 2017-09-04 | 2021-10-26 | Sap Se | Model-based analysis in a relational database |
US11205103B2 (en) | 2016-12-09 | 2021-12-21 | The Research Foundation for the State University | Semisupervised autoencoder for sentiment analysis |
US11354351B2 (en) * | 2019-01-31 | 2022-06-07 | Chooch Intelligence Technologies Co. | Contextually generated perceptions |
US11429644B2 (en) * | 2020-04-03 | 2022-08-30 | Insurance Services Office, Inc. | Systems and methods for computer modeling using incomplete data |
US11537502B1 (en) | 2021-11-19 | 2022-12-27 | Bank Of America Corporation | Dynamic system for active detection and mitigation of anomalies in program code construction interfaces |
US11556444B1 (en) | 2021-11-19 | 2023-01-17 | Bank Of America Corporation | Electronic system for static program code analysis and detection of architectural flaws |
US20240020299A1 (en) * | 2022-07-14 | 2024-01-18 | International Business Machines Corporation | Api management for batch processing |
US11941364B2 (en) | 2021-09-01 | 2024-03-26 | International Business Machines Corporation | Context-driven analytics selection, routing, and management |
US11983102B2 (en) | 2021-11-19 | 2024-05-14 | Bank Of America Corporation | Electronic system for machine learning based anomaly detection in program code |
Citations (47)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5271088A (en) | 1991-05-13 | 1993-12-14 | Itt Corporation | Automated sorting of voice messages through speaker spotting |
US6243696B1 (en) | 1992-11-24 | 2001-06-05 | Pavilion Technologies, Inc. | Automated method for building a model |
US20020099730A1 (en) | 2000-05-12 | 2002-07-25 | Applied Psychology Research Limited | Automatic text classification system |
US20030145000A1 (en) | 2002-01-31 | 2003-07-31 | International Business Machines Corporation | System and method of using data mining prediction methodology |
US20030176931A1 (en) | 2002-03-11 | 2003-09-18 | International Business Machines Corporation | Method for constructing segmentation-based predictive models |
US20030212851A1 (en) | 2002-05-10 | 2003-11-13 | Drescher Gary L. | Cross-validation for naive bayes data mining model |
US6778959B1 (en) | 1999-10-21 | 2004-08-17 | Sony Corporation | System and method for speech verification using out-of-vocabulary models |
US6879971B1 (en) | 1995-12-22 | 2005-04-12 | Pavilion Technologies, Inc. | Automated method for building a model |
US20050234753A1 (en) | 2004-04-16 | 2005-10-20 | Pinto Stephen K | Predictive model validation |
US7010696B1 (en) | 2001-03-30 | 2006-03-07 | Mcafee, Inc. | Method and apparatus for predicting the incidence of a virus |
US7054847B2 (en) | 2001-09-05 | 2006-05-30 | Pavilion Technologies, Inc. | System and method for on-line training of a support vector machine |
US7194395B2 (en) | 2000-02-23 | 2007-03-20 | The United States Of America As Represented By The Secretary Of The Army | System and method for hazardous incident decision support and training |
US20070265713A1 (en) * | 2006-02-03 | 2007-11-15 | Michel Veillette | Intelligent Monitoring System and Method for Building Predictive Models and Detecting Anomalies |
US7349919B2 (en) | 2003-11-21 | 2008-03-25 | International Business Machines Corporation | Computerized method, system and program product for generating a data mining model |
US20080097937A1 (en) * | 2003-07-10 | 2008-04-24 | Ali Hadjarian | Distributed method for integrating data mining and text categorization techniques |
US20080154821A1 (en) | 2006-12-11 | 2008-06-26 | Poulin Christian D | Collaborative Predictive Model Building |
US20080270363A1 (en) * | 2007-01-26 | 2008-10-30 | Herbert Dennis Hunt | Cluster processing of a core information matrix |
US20080288889A1 (en) * | 2004-02-20 | 2008-11-20 | Herbert Dennis Hunt | Data visualization application |
US20080288209A1 (en) * | 2007-01-26 | 2008-11-20 | Herbert Dennis Hunt | Flexible projection facility within an analytic platform |
US20080294372A1 (en) * | 2007-01-26 | 2008-11-27 | Herbert Dennis Hunt | Projection facility within an analytic platform |
US20080294996A1 (en) * | 2007-01-31 | 2008-11-27 | Herbert Dennis Hunt | Customized retailer portal within an analytic platform |
US20080319829A1 (en) * | 2004-02-20 | 2008-12-25 | Herbert Dennis Hunt | Bias reduction using data fusion of household panel data and transaction data |
US20090006156A1 (en) * | 2007-01-26 | 2009-01-01 | Herbert Dennis Hunt | Associating a granting matrix with an analytic platform |
US20090018996A1 (en) * | 2007-01-26 | 2009-01-15 | Herbert Dennis Hunt | Cross-category view of a dataset using an analytic platform |
US20090106178A1 (en) | 2007-10-23 | 2009-04-23 | Sas Institute Inc. | Computer-Implemented Systems And Methods For Updating Predictive Models |
US7565304B2 (en) | 2002-06-21 | 2009-07-21 | Hewlett-Packard Development Company, L.P. | Business processes based on a predictive model |
US7590589B2 (en) | 2004-09-10 | 2009-09-15 | Hoffberg Steven M | Game theoretic prioritization scheme for mobile ad hoc networks permitting hierarchal deference |
US7606924B2 (en) | 1998-07-22 | 2009-10-20 | Symantec Corporation | Method and apparatus for determining the order of streaming modules |
US7650331B1 (en) | 2004-06-18 | 2010-01-19 | Google Inc. | System and method for efficient large-scale data processing |
US7668740B1 (en) | 2000-09-22 | 2010-02-23 | Ita Software, Inc. | Method, system, and computer program product for interfacing with information sources |
US20100049538A1 (en) * | 2008-08-22 | 2010-02-25 | Durban Frazer | Method and apparatus for selecting next action |
US7689520B2 (en) | 2005-02-25 | 2010-03-30 | Microsoft Corporation | Machine learning system and method for ranking sets of data using a pairing cost function |
US20100100826A1 (en) | 2008-10-17 | 2010-04-22 | Louis Hawthorne | System and method for content customization based on user profile |
US7788195B1 (en) | 2006-03-24 | 2010-08-31 | Sas Institute Inc. | Computer-implemented predictive model generation systems and methods |
US7813944B1 (en) | 1999-08-12 | 2010-10-12 | Fair Isaac Corporation | Detection of insurance premium fraud or abuse using a predictive software system |
US7813870B2 (en) | 2006-03-03 | 2010-10-12 | Inrix, Inc. | Dynamic time series prediction of future traffic conditions |
US7899611B2 (en) | 2006-03-03 | 2011-03-01 | Inrix, Inc. | Detecting anomalous road traffic conditions |
US7912628B2 (en) | 2006-03-03 | 2011-03-22 | Inrix, Inc. | Determining road traffic conditions using data from multiple data sources |
US7930266B2 (en) | 2006-03-09 | 2011-04-19 | Intel Corporation | Method for classifying microelectronic dies using die level cherry picking system based on dissimilarity matrix |
US20110145175A1 (en) | 2009-12-14 | 2011-06-16 | Massachusetts Institute Of Technology | Methods, Systems and Media Utilizing Ranking Techniques in Machine Learning |
US7970721B2 (en) | 2007-06-15 | 2011-06-28 | Microsoft Corporation | Learning and reasoning from web projections |
US7979365B2 (en) | 2006-01-31 | 2011-07-12 | The Board Of Trustees Of The University Of Illinois | Methods and systems for interactive computing |
US8065659B1 (en) | 2007-05-30 | 2011-11-22 | Google Inc. | Method and apparatus for executing scripts within a web browser |
US20110289025A1 (en) | 2010-05-19 | 2011-11-24 | Microsoft Corporation | Learning user intent from rule-based training data |
US20110313900A1 (en) | 2010-06-21 | 2011-12-22 | Visa U.S.A. Inc. | Systems and Methods to Predict Potential Attrition of Consumer Payment Account |
US20120191630A1 (en) * | 2011-01-26 | 2012-07-26 | Google Inc. | Updateable Predictive Analytical Modeling |
US20120239613A1 (en) * | 2011-03-15 | 2012-09-20 | International Business Machines Corporation | Generating a predictive model from multiple data sources |
-
2011
- 2011-09-27 US US13/246,410 patent/US8694540B1/en active Active
Patent Citations (52)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5271088A (en) | 1991-05-13 | 1993-12-14 | Itt Corporation | Automated sorting of voice messages through speaker spotting |
US6243696B1 (en) | 1992-11-24 | 2001-06-05 | Pavilion Technologies, Inc. | Automated method for building a model |
US6879971B1 (en) | 1995-12-22 | 2005-04-12 | Pavilion Technologies, Inc. | Automated method for building a model |
US7606924B2 (en) | 1998-07-22 | 2009-10-20 | Symantec Corporation | Method and apparatus for determining the order of streaming modules |
US7813944B1 (en) | 1999-08-12 | 2010-10-12 | Fair Isaac Corporation | Detection of insurance premium fraud or abuse using a predictive software system |
US6778959B1 (en) | 1999-10-21 | 2004-08-17 | Sony Corporation | System and method for speech verification using out-of-vocabulary models |
US7194395B2 (en) | 2000-02-23 | 2007-03-20 | The United States Of America As Represented By The Secretary Of The Army | System and method for hazardous incident decision support and training |
US20020099730A1 (en) | 2000-05-12 | 2002-07-25 | Applied Psychology Research Limited | Automatic text classification system |
US8027854B2 (en) | 2000-09-22 | 2011-09-27 | Ita Software, Inc. | Method, system, and computer program product for interfacing with information sources |
US7668740B1 (en) | 2000-09-22 | 2010-02-23 | Ita Software, Inc. | Method, system, and computer program product for interfacing with information sources |
US7010696B1 (en) | 2001-03-30 | 2006-03-07 | Mcafee, Inc. | Method and apparatus for predicting the incidence of a virus |
US7054847B2 (en) | 2001-09-05 | 2006-05-30 | Pavilion Technologies, Inc. | System and method for on-line training of a support vector machine |
US20030145000A1 (en) | 2002-01-31 | 2003-07-31 | International Business Machines Corporation | System and method of using data mining prediction methodology |
US20030176931A1 (en) | 2002-03-11 | 2003-09-18 | International Business Machines Corporation | Method for constructing segmentation-based predictive models |
US20030212851A1 (en) | 2002-05-10 | 2003-11-13 | Drescher Gary L. | Cross-validation for naive bayes data mining model |
US7565304B2 (en) | 2002-06-21 | 2009-07-21 | Hewlett-Packard Development Company, L.P. | Business processes based on a predictive model |
US20080097937A1 (en) * | 2003-07-10 | 2008-04-24 | Ali Hadjarian | Distributed method for integrating data mining and text categorization techniques |
US7349919B2 (en) | 2003-11-21 | 2008-03-25 | International Business Machines Corporation | Computerized method, system and program product for generating a data mining model |
US20080288889A1 (en) * | 2004-02-20 | 2008-11-20 | Herbert Dennis Hunt | Data visualization application |
US20080319829A1 (en) * | 2004-02-20 | 2008-12-25 | Herbert Dennis Hunt | Bias reduction using data fusion of household panel data and transaction data |
US20050234753A1 (en) | 2004-04-16 | 2005-10-20 | Pinto Stephen K | Predictive model validation |
US7650331B1 (en) | 2004-06-18 | 2010-01-19 | Google Inc. | System and method for efficient large-scale data processing |
US7590589B2 (en) | 2004-09-10 | 2009-09-15 | Hoffberg Steven M | Game theoretic prioritization scheme for mobile ad hoc networks permitting hierarchal deference |
US7689520B2 (en) | 2005-02-25 | 2010-03-30 | Microsoft Corporation | Machine learning system and method for ranking sets of data using a pairing cost function |
US7979365B2 (en) | 2006-01-31 | 2011-07-12 | The Board Of Trustees Of The University Of Illinois | Methods and systems for interactive computing |
US7818276B2 (en) * | 2006-02-03 | 2010-10-19 | Recherche 2000 Inc. | Intelligent monitoring system and method for building predictive models and detecting anomalies |
US20070265713A1 (en) * | 2006-02-03 | 2007-11-15 | Michel Veillette | Intelligent Monitoring System and Method for Building Predictive Models and Detecting Anomalies |
US7813870B2 (en) | 2006-03-03 | 2010-10-12 | Inrix, Inc. | Dynamic time series prediction of future traffic conditions |
US8090524B2 (en) | 2006-03-03 | 2012-01-03 | Inrix, Inc. | Determining road traffic conditions using data from multiple data sources |
US8065073B2 (en) | 2006-03-03 | 2011-11-22 | Inrix, Inc. | Dynamic time series prediction of future traffic conditions |
US7912628B2 (en) | 2006-03-03 | 2011-03-22 | Inrix, Inc. | Determining road traffic conditions using data from multiple data sources |
US7899611B2 (en) | 2006-03-03 | 2011-03-01 | Inrix, Inc. | Detecting anomalous road traffic conditions |
US7930266B2 (en) | 2006-03-09 | 2011-04-19 | Intel Corporation | Method for classifying microelectronic dies using die level cherry picking system based on dissimilarity matrix |
US7788195B1 (en) | 2006-03-24 | 2010-08-31 | Sas Institute Inc. | Computer-implemented predictive model generation systems and methods |
US20080154821A1 (en) | 2006-12-11 | 2008-06-26 | Poulin Christian D | Collaborative Predictive Model Building |
US20080294372A1 (en) * | 2007-01-26 | 2008-11-27 | Herbert Dennis Hunt | Projection facility within an analytic platform |
US20080288209A1 (en) * | 2007-01-26 | 2008-11-20 | Herbert Dennis Hunt | Flexible projection facility within an analytic platform |
US20090018996A1 (en) * | 2007-01-26 | 2009-01-15 | Herbert Dennis Hunt | Cross-category view of a dataset using an analytic platform |
US20090006156A1 (en) * | 2007-01-26 | 2009-01-01 | Herbert Dennis Hunt | Associating a granting matrix with an analytic platform |
US20080270363A1 (en) * | 2007-01-26 | 2008-10-30 | Herbert Dennis Hunt | Cluster processing of a core information matrix |
US20080294996A1 (en) * | 2007-01-31 | 2008-11-27 | Herbert Dennis Hunt | Customized retailer portal within an analytic platform |
US8065659B1 (en) | 2007-05-30 | 2011-11-22 | Google Inc. | Method and apparatus for executing scripts within a web browser |
US7970721B2 (en) | 2007-06-15 | 2011-06-28 | Microsoft Corporation | Learning and reasoning from web projections |
US20090106178A1 (en) | 2007-10-23 | 2009-04-23 | Sas Institute Inc. | Computer-Implemented Systems And Methods For Updating Predictive Models |
US20100049538A1 (en) * | 2008-08-22 | 2010-02-25 | Durban Frazer | Method and apparatus for selecting next action |
US20100100826A1 (en) | 2008-10-17 | 2010-04-22 | Louis Hawthorne | System and method for content customization based on user profile |
US20110145175A1 (en) | 2009-12-14 | 2011-06-16 | Massachusetts Institute Of Technology | Methods, Systems and Media Utilizing Ranking Techniques in Machine Learning |
US20110289025A1 (en) | 2010-05-19 | 2011-11-24 | Microsoft Corporation | Learning user intent from rule-based training data |
US20110313900A1 (en) | 2010-06-21 | 2011-12-22 | Visa U.S.A. Inc. | Systems and Methods to Predict Potential Attrition of Consumer Payment Account |
US20120191630A1 (en) * | 2011-01-26 | 2012-07-26 | Google Inc. | Updateable Predictive Analytical Modeling |
US8250009B1 (en) * | 2011-01-26 | 2012-08-21 | Google Inc. | Updateable predictive analytical modeling |
US20120239613A1 (en) * | 2011-03-15 | 2012-09-20 | International Business Machines Corporation | Generating a predictive model from multiple data sources |
Non-Patent Citations (62)
Title |
---|
"Active learning (machine learning)," Wikipedia, the free encyclopedia, [online] [retrieved on Sep. 8, 2011]. Retrieved from the Internet: http://en.wikipedia.org/wiki/Active learning (machine learning), 3 pages. |
"Google Prediction API (Labs)", Google.com, [Retrieved on May 4, 2011]. Retrieved from the Internet: , 1 page. |
"Google Prediction API (Labs)", Google.com, [Retrieved on May 4, 2011]. Retrieved from the Internet: <URL: http://code.google.com/apis/predict/>, 1 page. |
Altincay, et al., "Undesirable Effects of Output Normalization in Multiple Classifier Systems", 2002; Elsevier Science B.V.; Pattern Recognition Letters 24 (2003); pp. 1163-1170. |
Altincay, et al.: "Why Does Output Normalization Create Problems in Multiple Classifier Systems?" 2002; IEEE; 16th International Conference on Pattern Recognition, Proceedings; vol. 2; pp. 775-778. |
Altincay, et al.; Post-processing of Classifier Outputs in Multiple Classifier Systems:, 2002; Springer-Verlag Berlin Heidelberg; Lecture Notes in Computer Science, 2002, vol. 2364; pp. 159-168. |
Barbieri, Maddalena Maria, et al., Optimal Predictive Model Selection, The Annals of Statistics, 2004, vol. 32, No. 3, 29 pages. |
Bengio, Yoshua, Continuous Optimization of Hyper-Parameters, C.P. 6128 Succ. Centre-Ville, Montreal, Quebec, Canada, H3C 3J7, 7 pages. |
C.E. Rasmussen & C.K.I. Williams, Gaussian Processes for Machine Learning, Model Selection and Adaptation of Hyperparameters, Chapter 5, the MIT Press, 2006 Massachusetts Institute of Technology. [Retrieved from the Internet on Oct. 18, 2011]. Retrieved from the Internet: <URL: htp://www.gaussianprocess.org/gmpl/chapters/RW5.pdf, 24 pages. |
Chandra, Tushar, "Sibyl: a system for large scale machine learning" Keynote I PowerPoint presentation, Jul. 28, 2010, ladisworkshop.org [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: , 43 pages. |
Chandra, Tushar, "Sibyl: a system for large scale machine learning" Keynote I PowerPoint presentation, Jul. 28, 2010, ladisworkshop.org [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: <URL: http://ladisworkshop.org/sites/default/files/LADIS%202010%20actual.pdf>, 43 pages. |
Creative Commons Attribution-Share Alike 3.0 Unported, Cross-validation (statistics)., http://creativecommons.org., pp. 1-5. |
Creative Commons Attribution-Share Alike 3.0 Unported, Winnow (algorithm)., http://creativecommons.org., 2 pages. |
Cyclic Measures: "Google prediction API WinForm GUI demo", YouTube, Oct. 8, 2010, XP55034570, Retrieved from the Internet: URL:http://www.youtube.com/watch?v=m9k-zuA1PYI (retrieved on Jul. 27, 2012]; the whole document. |
Daelemans, Walter et al., Combined Optimization of Feature Selection and Algorithm Parameters in Machine Learning of Language, CNTS Language Technology Group, University of Antwerp, Universiteitsplein 1, B-2610 Antwerpen, Postdoctoral research of the Fund for Scientific Research, Flanders, Belgium, 12 pages. |
Dag Consistent Parallel Simpulation: A Predictable and Robust Conservative Algorithm, Wenton Cai et al.; Parallel and Distributed Simulation, 1997; Proceedings, 11th Workshop on Digital Object Identifier; 10.1109/PADS.1997.594604; pp. 178-181. |
Delany, et al., Generating Estimates of Classification Confidence for a Case-Based Spam Filter; 2005; Springer-Vergal Berlin Heidelberg; Lecture Notes in Computer Science, 2005, vol. 3620, pp. 177-190. |
Developer's Guide-Google Prediction, [online] [Retrieved on May 6, 2011], Retrieved from the Internet: ,URL: http:www.google.com/.../developer-guide.htm>, 7 pages. |
Duchi, John, et al., "Boosting with Structural Sparsity", 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: , 41 pages. |
Duchi, John, et al., "Boosting with Structural Sparsity", 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: <URL: http://www.cs.berkeley.edu/˜jduchi/projects/DuchiSi09d.pdf>, 41 pages. |
Duchi, John, et al., "Boosting with Structural Sparsity", Proceedings of the 26th International Conference on Machine Learning, Montreal, Canada, 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: , 8 pages. |
Duchi, John, et al., "Boosting with Structural Sparsity", Proceedings of the 26th International Conference on Machine Learning, Montreal, Canada, 2009, cs.berkeley.edu [online]. [Retrieved on Jan. 25, 2011]. Retrieved from the Internet: <URL: http://www.cs.berkeley.edu/˜jduchi/projects/DuchiSi09a.pdf>, 8 pages. |
Duin, P.W. Robert, et al., Experiments with Classifier Combining Rules, J. Kittler and F. Foli (Eds.): MCS 2000, LNCS 1857, pp. 16-29, 14 pages. |
English, et al.; "A grammatical approach to reducing the statistical sparsity of language models in natural domains", Acoustics, Speech, and Signal Processing, IEEE International Conference of ICASSO'86, vol. 11, Digital Object Identifier: 10.1109/CASSO.1986.1168955 Publication Year: 1986, pp. 1141-1144. |
Evaluating Predictive Models, 36-350, Data Mining, Principles of Data Mining, Chapter 7; Berk chapter 2, Oct. 26 and 28, 2001, 22 pages. |
Explicit Modeling of Mode Transition Constraints for Model Predictive Control, Kobayashi, K. et al.; SICE Annual Conference, 2008 Digital Object Identifier: 10.1109/SICE.2008.4654911; pp. 1569-1574. |
Google Apps Script Overview [online] [retrieved on May 6, 2011], Retrieved from the Internet: , 4 pages. |
Google Apps Script Overview [online] [retrieved on May 6, 2011], Retrieved from the Internet: <URL: code.google.com/.../guide.html>, 4 pages. |
Google: "Google apps script: User Guide", Google Code, 2010, XP55034664, Retrieved from the Internet: URL:http://code.google.com/googleapps/apps script/guied.html [retrieved on Jan. 27, 2011] Building a User Interface. |
Google: "Google prediction API", Google Code, 2010, retrieved from the Internet: URL: http://code.google.com/apis/predict/ [retrieved on May 22, 2010]. |
Google: "Google prediction API: Prediction v1.2 reference", Google Developers, 2012, retrieved from the Internet: URL: https://developers.google.com/prediction/docs/reference/v1.2/reference [retrieved on Jul. 27, 2012]. |
Hutter, et al., "Performance Prediction and Automated Tuning of Randomized and Parametric Algorithms," Principles and Practice of Constraint Programing, Lecture Notes in Computer Science, 2006, 15 pages. |
International Search Report and Written Opinion for PCT Application Serial No. PCT/US2012/035862, search report completed Aug. 7, 2012, mailed Aug. 16, 2012, 112 pages. |
J. Platt et a., "Large Margin DAGs for Multiclass Classification", in Advances in Neural Information Processing Systems, S.A. Solla et al., eds., MIT Press 2000, pp. 1-7. |
L. Denoyer et al., "Structured Multimedia Document Classification", ACM DocEng '03, Nov. 20-22, 2003, pp. 153-160. |
Makhtar, Mokhairi, et al., "Predictive Model Representation and Comparison: Towards Data and Predictive Models Governance", Computational Intelligence (UKCI), 2010 UK Workshop: Sep. 8-10, 2010; 6 pages. |
McDermott, et al.: "Generating models of mental retardation from data with machine learning"; Knowledge and Data Engineering Exchange Workshop, 1997. Proceedings Digital Object Identifier: 10,1109/KDEX.1997.629850 Publication Year: 1997, pp. 114-119. |
Netuitive Announces Amazon EC2 Integration for Hybrid Cloud Performance Management [online] [retrieved on Apr. 26, 2011], Retrieved from the Internet: , 2 pages. |
Netuitive Announces Amazon EC2 Integration for Hybrid Cloud Performance Management [online] [retrieved on Apr. 26, 2011], Retrieved from the Internet: <URL: marketwire.com/.../Netuitive-Announc . . . >, 2 pages. |
P. Chanezon, et al.: "Google cloud for data crunchers", O'Reilly Strata Conference: Feb. 1-3, 2011 (Santa Clara, CA), Feb. 2, 2011, XP55034662, Retrieved from the Internet: URL:http://cdn.oreillystatic.com/en/assets/1/event/55/Google Cloud for Data Crunchers Presentation.pdf [retrieved on Jul. 27, 2012]; the whole document. |
PMML 4.0 General Structure of a PMML Document, [online] [Retrieved on May 1, 2011]. Retrieved from the Internet: , 9 pages. |
PMML 4.0 General Structure of a PMML Document, [online] [Retrieved on May 1, 2011]. Retrieved from the Internet: <URL: dmg.org/v4-0-1/General Structure.html>, 9 pages. |
Postema, et al., "A Decision Support Tool for Tuning Parameters in a Machine Learning Algorithm", Nanyang Techonological University, 1997, 9 pages. |
Potrera, Cosmin Marian, et al.; DCFMS: "A chunk-based distributed file system for supporting multimedia communication", Computer Science and Information (FedCSIS), 2011 Federated Conference on Publication Year: 2011, pp. 737-741. |
Predictive Dynamix Inc., Predictive Modeling Technology, Predictive Dynamix, Inc., 2003-2004, 5 pages. |
Predictive Model Markup Language, [online] [Retrieved on May 1, 2011], Retrieved from the Internet: , 7 pages. |
Predictive Model Markup Language, [online] [Retrieved on May 1, 2011], Retrieved from the Internet: <URL:http://en.wikipedia.org/wiki/Predictive-Model-Markup-Language>, 7 pages. |
R. Duin, "The Combining Classifer: to Train or Not to Train?", IEEE Pattern Recognition, 2002 Proceedings, 16 International Conference, pp. 765-770. |
Research on Prediction Technique of Network Situation Awareness, Wang, et al.; Cybernetics and Intelligent Systems, 2008 IEEE Conference on Digital Object Identifier: 10.1109/ICCIS.2008.4670783; pp. 570-574. |
R-Project web pages, 190 pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: , 190 pages. |
R-Project web pages, 190 pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: <URL: http://www.r-project.org/>, 190 pages. |
SAS Rapid Predictive Modeler, Overview, 2010, 4 pages. |
Stemmer, Georg et al.; "Comparison and Combination of Confidence Measures"; 2006; Springer-Vergal Berlin Heidelbreg; Lecture Notes in Computer Science 2006, vol. 2448; pp. 181-188. |
Stochastic Models for the Web Graph, Kumar, R. et al.; Foundations of Computer Science, 2000; Proceedings, 41st Annual Symposium on Digital Object Identifier; 11.1109/SFCS.2000.892065; pp. 57-65. |
T. Dietterich, Ensemble Methods in Machine Learning:, J. Kittler and F. Foli (Eds.), MCS 2000, pp. 1-15. |
T. Green, et al.: "Prediction API: Every app a smart app", Google Developers Blog, Apr. 21, 2011, Retrieved from the Internet: URL:http//googledevelopers.blogspot.nl/2p/11/04/prediction-api-every-app-smart-app.html [retrieved on Jul. 27, 2012]. |
Uclassify web pages, [online] [Retrieved on May 18, 2010]. Retrieved from the Internet: , 16 pages. |
Uclassify web pages, [online] [Retrieved on May 18, 2010]. Retrieved from the Internet: <URL: http://www.uclassify.com/>, 16 pages. |
Weiss, Integrating Real-Time Predictive Analytics into SAP Applications [online], Dec. 30, 2009 [retrieved on Sep. 29, 2011], Retrieved from the Internet: URL:http://www.sdn.sap.com/irj/scn/go/portal/prtroot/docs/library/uuid/a07faefd-61d7-2c10-bba6-89ac5ffc302c?QuickLink=index&overridelayout=true>. |
Yuan, Zheng et al., Combining Linear Progression Models: When and How? Dec. 2004, 27 pages. |
Zementis web pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: , 34 pages. |
Zementis web pages [online]. [Retrieved on May 18, 2010]. Retrieved from the Internet: <URL: http://www.zementis.com/>, 34 pages. |
Cited By (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9183535B2 (en) | 2008-07-30 | 2015-11-10 | Aro, Inc. | Social network model for semantic processing |
US9886683B2 (en) * | 2009-01-06 | 2018-02-06 | Aro, Inc. | Calendaring location-based events and associated travel |
US20180107981A1 (en) * | 2009-01-06 | 2018-04-19 | Aro, Inc. | Calendaring location-based events and associated travel |
US20100175001A1 (en) * | 2009-01-06 | 2010-07-08 | Kiha Software Inc. | Calendaring Location-Based Events and Associated Travel |
US20100306254A1 (en) * | 2009-05-29 | 2010-12-02 | Eric Williamson | Systems and methods for object-based modeling using composite model object having independently updatable component objects |
US9292485B2 (en) | 2009-05-29 | 2016-03-22 | Red Hat, Inc. | Extracting data cell transformable to model object |
US9292592B2 (en) * | 2009-05-29 | 2016-03-22 | Red Hat, Inc. | Object-based modeling using composite model object having independently updatable component objects |
US9105006B2 (en) | 2009-05-29 | 2015-08-11 | Red Hat, Inc. | Generating floating desktop representation of extracted model object |
US9152435B2 (en) | 2009-08-31 | 2015-10-06 | Red Hat, Inc. | Generating a set of linked rotational views of model objects |
US9152944B2 (en) | 2009-08-31 | 2015-10-06 | Red Hat, Inc. | Generating rapidly rotatable dimensional view of data objects |
US9189747B2 (en) | 2010-05-14 | 2015-11-17 | Google Inc. | Predictive analytic modeling platform |
US8909568B1 (en) * | 2010-05-14 | 2014-12-09 | Google Inc. | Predictive analytic modeling platform |
US9239986B2 (en) * | 2011-05-04 | 2016-01-19 | Google Inc. | Assessing accuracy of trained predictive models |
US20130346351A1 (en) * | 2011-05-04 | 2013-12-26 | Google Inc. | Assessing accuracy of trained predictive models |
US9020861B2 (en) * | 2011-05-06 | 2015-04-28 | Google Inc. | Predictive model application programming interface |
US20120284600A1 (en) * | 2011-05-06 | 2012-11-08 | Google Inc. | Predictive model application programming interface |
US11093860B1 (en) | 2011-05-09 | 2021-08-17 | Google Llc | Predictive model importation |
US9070089B1 (en) * | 2011-05-09 | 2015-06-30 | Google Inc. | Predictive model importation |
US11972363B1 (en) | 2011-05-09 | 2024-04-30 | Google Llc | Predictive model importation |
US10157343B1 (en) | 2011-05-09 | 2018-12-18 | Google Llc | Predictive model importation |
US10515313B2 (en) | 2011-06-21 | 2019-12-24 | Google Llc | Predictive model evaluation and training based on utility |
US9606997B2 (en) | 2014-03-19 | 2017-03-28 | International Business Machines Corporation | Inferred operations for data analysis |
US9489386B2 (en) * | 2014-03-19 | 2016-11-08 | International Business Machines Corporation | Inferred operations for data analysis |
US20150269281A1 (en) * | 2014-03-19 | 2015-09-24 | International Business Machines Corporation | Inferred operations for data analysis |
WO2016025396A1 (en) * | 2014-08-11 | 2016-02-18 | Coldlight Solutions, Llc | An automated methodology for inductive bias selection and adaptive ensemble choice to optimize predictive power |
US10157349B2 (en) | 2014-08-11 | 2018-12-18 | Ptc Inc. | Automated methodology for inductive bias selection and adaptive ensemble choice to optimize predictive power |
CN106569784A (en) * | 2015-10-09 | 2017-04-19 | 北大方正集团有限公司 | Display page generation method and system |
US11914620B2 (en) | 2015-10-23 | 2024-02-27 | Oracle International Corporation | System and method for aggregating values through risk dimension hierarchies in a multidimensional database environment |
US20170116308A1 (en) * | 2015-10-23 | 2017-04-27 | Oracle International Corporation | System and method for aggregating values through risk dimension hierarchies in a multidimensional database environment |
US10838982B2 (en) * | 2015-10-23 | 2020-11-17 | Oracle International Corporation | System and method for aggregating values through risk dimension hierarchies in a multidimensional database environment |
US20190068419A1 (en) * | 2016-03-11 | 2019-02-28 | Orange | Method and device for multi-service transmission with fc-ofdm modulation and corresponding receiver |
US10771297B2 (en) * | 2016-03-11 | 2020-09-08 | Orange | Method and device for multi-service transmission with FC-OFDM modulation and corresponding receiver |
EP3264338A1 (en) * | 2016-06-28 | 2018-01-03 | Siemens Aktiengesellschaft | Method for providing a searchable data base of models describing technical processes |
US10902344B1 (en) * | 2016-10-31 | 2021-01-26 | Microsoft Technology Licensing, Llc | Machine learning model to estimate confidential data values based on job posting |
CN108122799A (en) * | 2016-11-29 | 2018-06-05 | 台湾积体电路制造股份有限公司 | The method of predicting wafer defect |
CN108122799B (en) * | 2016-11-29 | 2022-04-12 | 台湾积体电路制造股份有限公司 | Method and system for predicting wafer defects |
US20190207985A1 (en) * | 2016-12-08 | 2019-07-04 | Tencent Technology (Shenzhen) Company Limited | Authorization policy recommendation method and apparatus, server, and storage medium |
US10686843B2 (en) * | 2016-12-08 | 2020-06-16 | Tencent Technology (Shenzhen) Company Limited | Authorization policy recommendation method and apparatus, server, and storage medium |
US11205103B2 (en) | 2016-12-09 | 2021-12-21 | The Research Foundation for the State University | Semisupervised autoencoder for sentiment analysis |
US11200263B2 (en) | 2017-01-17 | 2021-12-14 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US10324961B2 (en) | 2017-01-17 | 2019-06-18 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US10482112B2 (en) | 2017-01-17 | 2019-11-19 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US11645311B2 (en) | 2017-01-17 | 2023-05-09 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US11048733B2 (en) | 2017-01-17 | 2021-06-29 | International Business Machines Corporation | Automatic feature extraction from a relational database |
US10990882B2 (en) * | 2017-07-28 | 2021-04-27 | International Business Machines Corporation | Stratigraphic layer identification from seismic and well data with stratigraphic knowledge base |
US11157780B2 (en) * | 2017-09-04 | 2021-10-26 | Sap Se | Model-based analysis in a relational database |
US20200081995A1 (en) * | 2018-09-06 | 2020-03-12 | International Business Machines Corporation | Data-centric approach to analysis |
US10838915B2 (en) * | 2018-09-06 | 2020-11-17 | International Business Machines Corporation | Data-centric approach to analysis |
US11354351B2 (en) * | 2019-01-31 | 2022-06-07 | Chooch Intelligence Technologies Co. | Contextually generated perceptions |
US10642723B1 (en) | 2019-02-05 | 2020-05-05 | Bank Of America Corporation | System for metamorphic relationship based code testing using mutant generators |
US10970199B2 (en) | 2019-02-05 | 2021-04-06 | Bank Of America Corporation | System for metamorphic relationship based code testing using mutant generators |
US20200257523A1 (en) * | 2019-02-11 | 2020-08-13 | International Business Machines Corporation | Application feature change detection |
US20200364608A1 (en) * | 2019-05-13 | 2020-11-19 | International Business Machines Corporation | Communicating in a federated learning environment |
US11429644B2 (en) * | 2020-04-03 | 2022-08-30 | Insurance Services Office, Inc. | Systems and methods for computer modeling using incomplete data |
EP4127955A4 (en) * | 2020-04-03 | 2024-03-27 | Insurance Services Office Inc | Systems and methods for computer modeling using incomplete data |
US11941364B2 (en) | 2021-09-01 | 2024-03-26 | International Business Machines Corporation | Context-driven analytics selection, routing, and management |
US11537502B1 (en) | 2021-11-19 | 2022-12-27 | Bank Of America Corporation | Dynamic system for active detection and mitigation of anomalies in program code construction interfaces |
US11556444B1 (en) | 2021-11-19 | 2023-01-17 | Bank Of America Corporation | Electronic system for static program code analysis and detection of architectural flaws |
US11983102B2 (en) | 2021-11-19 | 2024-05-14 | Bank Of America Corporation | Electronic system for machine learning based anomaly detection in program code |
US20240020299A1 (en) * | 2022-07-14 | 2024-01-18 | International Business Machines Corporation | Api management for batch processing |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8694540B1 (en) | Predictive analytical model selection | |
US9268826B2 (en) | System and method for crowdsourced template based search | |
US8443013B1 (en) | Predictive analytical modeling for databases | |
US8005832B2 (en) | Search document generation and use to provide recommendations | |
RU2720905C2 (en) | Method and system for expanding search queries in order to rank search results | |
US20230273923A1 (en) | Generating and/or utilizing a machine learning model in response to a search request | |
US10324993B2 (en) | Predicting a search engine ranking signal value | |
CN105900087B (en) | For inquiring the abundant content of answer | |
CN111753198A (en) | Information recommendation method and device, electronic equipment and readable storage medium | |
CN111149100A (en) | Determining thesaurus interrelationships across documents based on named entity parsing and recognition | |
US10762083B2 (en) | Entity- and string-based search using a dynamic knowledge graph | |
US20150142507A1 (en) | Recommendation system for specifying and achieving goals | |
US11397780B2 (en) | Automated method and system for clustering enriched company seeds into a cluster and selecting best values for each attribute within the cluster to generate a company profile | |
KR20160144384A (en) | Context-sensitive search using a deep learning model | |
US10606874B2 (en) | Adjusting search results based on user skill and category information | |
WO2012154439A1 (en) | Predictive model application programming interface | |
JP2013502653A (en) | Semantic Trading Floor | |
US11126673B2 (en) | Method and system for automatically enriching collected seeds with information extracted from one or more websites | |
Fejzer et al. | Profile based recommendation of code reviewers | |
RU2731658C2 (en) | Method and system of selection for ranking search results using machine learning algorithm | |
Kowald et al. | The tagrec framework as a toolkit for the development of tag-based recommender systems | |
CN111989699A (en) | Calendar-aware resource retrieval | |
CN109074378B (en) | Modular electronic data analysis computing system | |
RU2733481C2 (en) | Method and system for generating feature for ranging document | |
US20160299972A1 (en) | Providing app store search results |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LIN, WEI-HAO;GREEN, TRAVIS H.;KAPLOW, ROBERT;AND OTHERS;REEL/FRAME:027794/0623Effective date: 20110926 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE THE ASSIGNOR'S NAME PREVIOUSLY RECORDED ON REEL 027794 FRAME 0623. ASSIGNOR(S) HEREBY CONFIRMS THE THE ASSIGNOR'S NAME AS LISTED, "TRAVIS H. GREEN" SHOULD BE SPELLED, "TRAVIS H. K. GREEN";ASSIGNORS:LIN, WEI-HAO;GREEN, TRAVIS H. K.;KAPLOW, ROBERT;AND OTHERS;REEL/FRAME:028702/0651Effective date: 20110926 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |