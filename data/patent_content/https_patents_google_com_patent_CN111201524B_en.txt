CN111201524B - Percentile linked clustering - Google Patents
Percentile linked clustering Download PDFInfo
- Publication number
- CN111201524B CN111201524B CN201880044850.8A CN201880044850A CN111201524B CN 111201524 B CN111201524 B CN 111201524B CN 201880044850 A CN201880044850 A CN 201880044850A CN 111201524 B CN111201524 B CN 111201524B
- Authority
- CN
- China
- Prior art keywords
- cluster
- pair
- data
- clusters
- pairs
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0277—Online advertisement
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/358—Browsing; Visualisation therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/906—Clustering; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/953—Querying, e.g. by the use of web search engines
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/23—Clustering techniques
- G06F18/231—Hierarchical techniques, i.e. dividing or merging pattern sets so as to obtain a dendrogram
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/23—Clustering techniques
- G06F18/232—Non-hierarchical techniques
- G06F18/2321—Non-hierarchical techniques using statistics or function optimisation, e.g. modelling of probability density functions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/762—Arrangements for image or video recognition or understanding using pattern recognition or machine learning using clustering, e.g. of similar faces in social networks
- G06V10/7625—Hierarchical techniques, i.e. dividing or merging patterns to obtain a tree-like representation; Dendograms
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/762—Arrangements for image or video recognition or understanding using pattern recognition or machine learning using clustering, e.g. of similar faces in social networks
- G06V10/763—Non-hierarchical techniques, e.g. based on statistics of modelling distributions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/22—Matching criteria, e.g. proximity measures
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for clustering data elements. In one aspect, a method includes determining a respective link value for each of a plurality of cluster pairs, wherein each cluster pair includes a respective first cluster and a respective second cluster. Determining the link values for the cluster pairs includes determining a set of pair-wise similarity values for the cluster pairs. Each pairwise similarity value defines a similarity measure between: (i) A specific data element from a first cluster of a cluster pair, and (ii) a given data element from a second cluster of the cluster pair. The link values for the cluster pairs are assigned as given percentiles of the set of pair-wise similarity values, wherein the given percentiles are greater than 0 and less than 100. The cluster pairs are merged based on their link values.
Description
Technical Field
The present description relates to processing data using a clustering (clustering) model.
Background
The cluster model can process the set of data elements to generate clusters that define an allocation of each of the data elements to a respective group of one or more data elements.
Disclosure of Invention
The present specification describes systems implemented as computer programs on one or more computers in one or more locations, the computer programs determining clusters of collections of data elements.
According to a first aspect, there is provided a method comprising, at each of one or more iterations, obtaining data defining a current cluster of a plurality of data elements. The current cluster defines an allocation of each of the data elements to a respective cluster (cluster), and each cluster represents a respective group of one or more data elements. A respective link value is determined for each of a plurality of cluster pairs, wherein each cluster pair includes a respective first cluster defined by the current cluster and a respective second cluster defined by the current cluster. Determining the link values for the cluster pairs includes determining a set of pairwise similarity values for the cluster pairs, wherein each pairwise similarity value defines a similarity measure between: (i) A specific data element from a first cluster of a cluster pair, and (ii) a given data element from a second cluster of the cluster pair. The link values for the cluster pairs are assigned as given percentiles that are sets of pairwise similarity values, where the given percentiles are greater than 0 and less than 100. Specific cluster pairs are identified as to be merged based on the link values for the cluster pairs. The data defining the current cluster is updated by merging the identified cluster pairs.
In some implementations, at a first iteration of the one or more iterations, the clusters define an allocation of each of the data elements to a different respective cluster.
In some implementations, identifying a particular cluster pair to merge based on the link values for the plurality of cluster pairs includes identifying the particular cluster pair having the highest link value.
In some implementations, the method includes determining that the highest link value is greater than a predetermined threshold link value.
In some implementations, the method includes outputting data defining the current cluster after a final iteration of the one or more iterations.
In some implementations, a set of pairwise similarity values for a cluster pair is determined, where each pairwise similarity value defines a similarity measure between: (i) A specific data element from a first cluster of a cluster pair, and (ii) a given data element from a second cluster of the cluster pair, comprising accessing a data store comprising a pre-computed pairwise similarity value defining a respective similarity measure between each pair of data elements of the plurality of data elements.
In some implementations, the data element is a key.
In some implementations, a similarity measure between (i) a particular data element from a first cluster of a cluster pair, and (ii) a given data element from a second cluster of the cluster pair characterizes similarity between: (i) A specific set of search results obtained in response to providing the specific data element as a query to a search engine, and (ii) a given set of search results obtained in response to providing the given data element as a query to a search engine.
In some implementations, the method includes, after a final iteration of the one or more iterations, receiving a digital component request including the particular key. By determining that a particular digital component has distribution parameters specifying a keyword cluster including a particular keyword (distribution parameter), the particular digital component is determined to be eligible for transmission in response to the digital component request. A keyword cluster is a cluster defined by a current cluster at a final iteration of one or more iterations. The specific digital component is transmitted in response to the digital component request.
According to a second aspect, a system is provided that includes a data processing device and a memory in data communication with the data processing device. The memory stores instructions that cause the data processing apparatus to perform the operations of the previously described methods.
According to a third aspect, there is provided one or more non-transitory computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the previously described method.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages.
The specification describes a clustering system configured to, for each cluster pair at each clustering iteration, assign a link value to a cluster based on a given percentile of a set of pairwise similarity values calculated for the cluster pair. Because a given percentile is chosen to be strictly between 0 and 100 (i.e., greater than 0 but less than 100), the link values assigned to cluster pairs by the clustering system are insensitive to "outliers" pair-wise similarity values. A pairwise similarity value may be referred to as an outlier if the pairwise similarity value is unusually high or unusually low compared to other pairwise similarity values in the set of pairwise similarity values calculated for the cluster pairs. The clustering system determines whether to merge cluster pairs based on the assigned link values, and can thus determine stable clusters of large and aggregated (simultaneous) clusters of data elements even when some of the pairwise similarity values calculated for the cluster pairs are outliers.
In contrast, some conventional clustering systems assign to clusters link values that are highly sensitive to outlier pairwise similarity values. These conventional systems may generate unstable clusters, i.e. clusters that are strongly affected by abnormal pairwise similarity values. Furthermore, these conventional systems may generate clusters with undesirable characteristics, such as a large number of small clusters or "thin (thin)" clusters that do not agglomerate.
The clustering system is capable of generating large and aggregated clusters of items. In some cases, the clustering system can create clusters of users, images, text articles, web pages, or any other suitable data items. In a particular example, the clustering system can be used to create clusters of semantically related keywords for use as distribution parameters in a digital component distribution system. By enabling the digital component provider to set distribution parameters for the digital components by selecting a keyword cluster, the distribution system can alleviate the burden on the digital component provider to manually specify a large number of related keywords when setting distribution parameters. For example, rather than manually specifying the relevant keywords "shoes", "footwear", "boots", "football", "high-heeled shoes", "slipper", and "sports shoes", the digital component provider can select an appropriate predetermined keyword cluster that includes some or all of these keywords. In this way, the process of selecting distribution parameters can be simplified.
Furthermore, by enabling the digital component provider to set distribution parameters for digital components by selecting keyword clusters of semantically related keywords, the distribution system is able to reduce variations in transmission requirements for digital components having similar distribution parameters. For example, the distribution system may determine substantially different transmission requirements for digital components having distribution parameters specifying semantically related keywords, depending on the "popularity" of those keywords. Popularity of a keyword refers to how often a keyword is specified by a digital component provider as a distribution parameter. For example, while the keywords "shoes" and "shoes" are semantically related, the keyword "shoes" may be more popular than the keyword "shoes" (i.e., because "shoes" are more natural keyword expressions than "shoes"). In this example, the distribution system may determine that a greater number of digital components are eligible for transmission in response to a digital component request specifying the keyword "shoe" rather than the keyword "shoe". Thus, the distribution system may determine that the transmission requirements are higher for the digital component of the distribution parameter with the specified keyword "shoe" than for the digital component of the distribution parameter with the specified keyword "shoe". By enabling digital component providers to set distribution parameters specifying clusters of semantically related keywords rather than individual keywords, the distribution system described in this specification is more likely to determine stable and consistent transmission requirements for digital components having similar distribution parameters.
The details of one or more embodiments of the subject matter of the specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 is a block diagram of an example clustering system.
FIG. 2 is a flow chart of an example process for clustering data elements.
FIG. 3 is a block diagram of an example environment in which digital components are distributed.
FIG. 4 is an illustration of an example data flow for selecting distribution parameters including a keyword cluster.
FIG. 5 is a block diagram of an example computing system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
The present specification describes a clustering system configured to process a set of data elements to determine clusters of data elements, i.e., an allocation of each of the data elements to a respective group of one or more data elements. Starting from the initial clustering, the clustering system iteratively merges cluster pairs based on a link value (link value) assigned to the cluster pairs. The link value defines a similarity of the first cluster to the second cluster. The clustering system assigns a link value between the first cluster and the second cluster based on a given percentile of a set of pairwise similarity values between pairs of data elements comprising respective first data elements from the first cluster and respective second data elements from the second cluster.
In some cases, the data element is a keyword and the clustering system determines clusters of keywords into clusters of keywords of semantically related keywords. The keyword clusters can be provided to a digital component distribution system configured to transmit digital components for presentation with the electronic document. The digital component provider can select one or more keyword clusters determined by the clustering system as digital component distribution parameters to be used by the digital component distribution system for determining eligibility of the digital components for transmission in response to the digital component request.
As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital components can be stored electronically in the physical memory device as a single file or in a collection of files, and the digital components can take the form of video files, audio files, multimedia files, image files, or text files, and include advertising information such that the advertisements are of the type of digital components. Generally, while the digital components are defined (or provided) by a single provider or source (e.g., advertiser, publisher, or other content provider), the digital components provided from one source can be enhanced with data from another source (e.g., weather information, real-time event information, or other information obtained from another source).
These and other features will be described in more detail below. The following description provides examples of clustering techniques in the context of clustering keywords. However, the clustering techniques discussed in this document are generally applicable to any data item. As such, the use of keywords in the examples provided throughout this document should not be construed as limiting the application of these clustering techniques.
FIG. 1 illustrates an example clustering system 100. The clustering system 100 is an example of a system implemented as a computer program on one or more computers in which one or more of the positioning of the systems, components, and techniques described below are implemented.
The clustering system 100 is configured to process a set of data elements 102 to determine a final cluster 104 of data elements 102. The final cluster 104 of data elements 102 defines an allocation of each of the data elements 102 to a respective group of one or more data elements (referred to herein as a "cluster"). For example, if the data elements 102 are represented as { A, B, C, D, E } (where A is a first data element, B is a second data element, etc.), the final cluster 104 of data elements 102 may define an allocation of data elements { A, D, E } to the first cluster and data elements { B, C } to the second cluster. As will be described in greater detail below, the system 100 generates a final cluster 104 that tends to cause "similar" (e.g., similarity measure according to a numerical value) data elements to be assigned to the same cluster and "dissimilar" data elements to be assigned to different clusters.
The data elements 102 may represent keywords, web pages, user profiles on a social network, products, news articles, pictures, videos, or any other form of data. In general, the similarity of the different data elements 102 can be calculated using an appropriate numerical similarity metric. For example, if the data element 102 is a keyword, a similarity measure of the numerical values between the first keyword and the second keyword may be calculated based on the similarity of search results obtained by providing the respective keyword as a query to a search engine (as will be described in more detail with reference to FIG. 2).
To determine the final cluster 104 of data elements 102, the system 100 iteratively (i.e., at each of a plurality of cluster iterations) updates the current cluster 106 of data elements 102. For the first cluster iteration, the current cluster 106 of data elements 102 may be provided as input to the system 100 or may be determined by the system 100 according to a predetermined rule. For example, for a first cluster iteration, the system 100 may determine the current cluster 106 of data elements 102 to define an allocation of each of the data elements 102 to a different respective cluster. In this example, the number of clusters defined by the current cluster 106 at the first cluster iteration is equal to the number of data elements 102.
An example current cluster 106 is shown at 108. In the example current cluster 108, the data elements 102 are represented by an "X" symbol, and the current cluster defines an allocation of the data elements 102 into three clusters (i.e., clusters 110, 112, and 114).
At each cluster iteration, the system 100 updates the current cluster 106 by merging two different clusters defined by the current cluster 106. Merging two clusters refers to combining the two clusters into a single cluster (e.g., so each data element previously belonging to either of the two clusters is thereafter considered to belong to the same merged cluster). In this manner, the system 100 progressively groups the data elements 102 into larger clusters (i.e., clusters that include more data elements) over multiple clustering iterations until the system 100 determines that the cluster termination criteria is met. For example, as will be described in greater detail below, if no two clusters are determined to be "sufficiently similar" to be merged, the system 100 may determine that a cluster termination criteria is met.
At a given cluster iteration, to update the current cluster 106, the system 100 processes the current cluster 106 using the link engine 116 to determine a set of cluster link values 118. Each cluster link value 118 corresponds to a respective cluster pair, i.e., a respective first cluster defined by the current cluster 106 and a respective second cluster defined by the current cluster 106. The cluster link value 118 corresponding to a cluster pair can be understood to define a similarity between a first cluster of the cluster pair and a second cluster of the cluster pair. For the example current cluster 108, the link engine 116 may determine respective cluster link values 118 for the cluster pairs {110, 112}, {110, 114}, and {112, 114 }.
To determine the link values 118 for a given cluster pair, the link engine 116 determines a set of pairwise similarity values for the cluster pair. Each pairwise similarity value defines a similarity measure between: (i) A respective first data element from a first cluster of the pair of clusters, and (ii) a respective second data element from a second cluster of the pair of clusters. For example, if a first cluster of a cluster pair is defined by data elements { A, B } and a second cluster of a cluster pair is defined by data elements { C, D }, the link engine 116 may determine the data elements: corresponding pairwise similarity values between a and C, A and D, B and C, and B and D. After determining the set of pairwise similarity values for the cluster pairs, the link engine 116 assigns a given percentile of the set of pairwise similarity values for the cluster pairs as the link value 118 for the cluster pairs (as will be described in more detail with reference to fig. 2). Typically, a given percentile is strictly between 0 and 100, i.e., the given percentile is greater than 0 and less than 100 (although the system need not be constrained to only these values). The particular value of a given percentile is a system hyper-parameter that can be selected to optimize the performance of the downstream system using the final cluster 104 output by the system 100. An example of a downstream system that uses the final cluster 104 output by the system 100 is the digital component distribution system 310 also described with reference to fig. 3 and 4.
By assigning the link value 118 for each cluster pair as a given percentile (strictly between 0 and 100) of the set of pairwise similarity values for the cluster pair, the link engine 116 determines link values 118 that are insensitive to "outlier" pairwise similarity values. A pair-wise similarity value may be referred to as an outlier if the pair-wise similarity value is unusually high or unusually low compared to other pair-wise similarity values in the set of pair-wise similarity values for the cluster pair. If, for example, the system 100 uses a "noisy" (e.g., high variance) similarity measure between the data elements 102, some pair-wise similarity values may be outliers. In a particular example, the data elements 102 may be keywords, and the system 100 may determine the pairwise similarity values using a similarity measure between the keywords based on respective sets of search results obtained by providing the keywords as queries to a search engine. In this example, some pairwise similarity values may be outliers due to random variations in the set of search results returned by the search engine for different keywords.
As an illustrative example, for the example current cluster 108, the link engine 116 may determine a set of pairwise similarity values for the cluster pairs {112, 114} that follow the distribution (distribution) 120, a set of pairwise similarity values for the cluster pairs {110, 112} that follow the distribution 122, and a set of pairwise similarity values for the cluster pairs {110, 114} that follow the distribution 124. Each of the distributions 120, 122, and 124 depicted in fig. 1 is plotted with reference to the x-axis representing pairwise similarity values (i.e., "p.s.v. (pairwise similarity value)"). Each of the distributions 120, 122, and 124 depicted in fig. 1 is plotted with reference to the y-axis representing the probability of pairing similarity values (i.e., "prob. (probability)"). For a given pair of clusters, the probability of a pair-wise similarity value can be understood to represent the frequency of occurrence of the pair-wise similarity value in the set of pair-wise similarity values for the pair of clusters. In this example, the link engine 116 may be configured to assign the link values for each cluster pair as the 50 th percentile of the corresponding set of pairwise similarity values, as shown by the vertical dashed lines in 120, 122, and 124. While the distributions 120, 122, and 124 are depicted as continuous probability distributions for illustration purposes, in practice, the distribution of pairwise similarity values for a cluster pair is a discrete probability distribution.
After the link engine 116 generates the link value 118, the merge engine 126 processes the link value 118 to identify the particular cluster pairs to be merged. For example, the merge engine 126 may identify the cluster pair with the highest link value 118 defined by the current cluster 106 (i.e., the cluster pair that can be understood to be the "most similar") as the cluster pair to be merged. If the merge engine 126 determines that the highest link value 118 is less than the predetermined threshold link value (e.g., indicating that no two clusters are "sufficiently similar" to be merged), the system 100 may determine that the cluster termination criteria are met and output the final cluster 104. Otherwise, the merge engine 126 updates the current cluster 106 by merging the cluster pair with the highest link value 118 and proceeds to the next cluster iteration.
As an illustrative example, for the example current cluster 108, the merge engine 126 may identify the cluster pairs {112, 114} to merge. More specifically, the merge engine 126 may determine the link value for the cluster pair {112, 114} (e.g., the dashed line representing the 50 th percentile of the pair-wise similarity value distribution 120) as the highest link value and thus identify the cluster pair {112, 114}.
When the data elements 102 are keywords and the similarity between the keywords is determined based on the similarity of search results obtained by providing the keywords as queries to a search engine, the final cluster 104 may define groupings of keywords into clusters of semantically similar keywords. For example, the final cluster 104 may define the assignment of keywords "shoes", "boots", "football shoes", "high-heeled shoes", "slippers", "sports shoes", etc. to the same cluster. As another example, the final cluster 104 may define the assignment of keywords "pineapple," "banana," "orange," "apple," "kiwi," "lime," "yellow lemon," "kumquat," etc. to the same cluster. As will also be described with reference to fig. 3 and 4, semantically similar keyword clusters defined by the final cluster 104 can be used as a distribution criterion to determine eligibility of the digital component for transmission in response to the digital component request.
FIG. 2 is a flow diagram of an example process 200 for clustering data elements. In particular, process 200 describes a particular clustering iteration of an iterative clustering process that can run over multiple clustering iterations. For convenience, process 200 is described as being performed by a system of one or more computers positioned in one or more locations. For example, a clustering system, such as clustering system 100 of fig. 1, properly programmed according to the present description, can perform process 200.
The system obtains data defining a current cluster at a current cluster iteration (202). For example, the system may access a data store (e.g., a logical data storage area or a physical data storage device) to retrieve data defining the current cluster. As described earlier, the data defining the current cluster defines an allocation of each of the data elements to the respective cluster. The data defining the current cluster can be stored in any suitable format. For example, the data defining the current cluster can be stored in a tabular format that associates each data element with a numerical value of the index corresponding cluster.
The system determines a respective set of pairwise similarity values for each cluster pair (204). For a given cluster pair, each pair-wise similarity value defines a similarity measure between: (i) A respective first data element from a first cluster of the pair of clusters, and (ii) a respective second data element from a second cluster of the pair of clusters. For example, if a first cluster of a cluster pair includes N data elements and a second cluster of a cluster pair includes M data elements, the system may determine a set of nxm pair-wise similarity values for the cluster pair.
The system can determine the pairwise similarity value using any suitable similarity measure between data elements. For example, if the data element is a keyword, the similarity measure between the first keyword and the second keyword may be calculated based on the similarity of search results obtained by providing the respective keyword as a query to a search engine. In a specific example, the similarity measure may be determined based on an intersection between: (i) A first set of search results obtained in response to providing the first keyword as a query to a search engine, and (ii) a second set of search results obtained in response to providing the second keyword as a query to the search engine. That is, the similarity metric may be determined based on how many search results are common to both the first set of search results and the second set of search results. As another example, if the data elements can be represented as respective vectors of values, the similarity measure between the first data element and the second data element may be determined based on euclidean distance or cosine similarity between the vector representing the first data element and the vector representing the second data element.
To determine a set of pairwise similarity values for a cluster pair, the system can access a data store (e.g., a logical data storage area or a physical data storage device) that includes pre-computed pairwise similarity values defining respective similarity metrics between each pair of data elements. The pre-computed pairwise similarity values may be provided to the system or may be computed by the system prior to the first clustering iteration. The pre-computed pairwise similarity values may be stored in any suitable format. For example, the pre-computed pairwise similarity values can be stored in a tabular format associating pairs of data elements with corresponding similarity metrics. By accessing pre-computed pairwise similarity values to determine a respective set of pairwise similarity values for each cluster pair, the system can avoid recalculating pairwise similarity values between data elements at each cluster iteration.
The system assigns a respective link value to each cluster pair (206). For a given cluster pair, the system assigns to the cluster a link value equal to (or within some tolerance of) a given percentile of the set of pair-wise similarity values determined for the cluster pair (as described with reference to 204). Typically, a given percentile is strictly between 0 and 100, i.e., greater than 0 and less than 100. For example, a given percentile may be a 20 th percentile, an 80 th percentile, or any other percentile strictly between 0 and 100.
For a given set of pairwise similarity values, the system can determine an nth percentile of the set of pairwise similarity values as any particular value, wherein n% of the pairwise similarity values in the set of pairwise similarity values are less than the particular value. For example, if the set of pairwise similarity values is given by {0.44,0.78,0.79,0.81,0.85}, the system can determine the 20 th percentile as any value greater than 0.44 and less than or equal to 0.78 (i.e., any number in the range (0.44,0.78)).
As described earlier, by assigning link values to each cluster as a given percentile of the set of pairwise similarity values for the cluster pairs, the system determines link values that are insensitive to outlier pairwise similarity values. In a specific example, the set of pairwise similarity values for the cluster pairs may be given by {0.44,0.78,0.79,0.81,0.85}, and the system may be configured to assign each cluster pair a link value equal to (or within some tolerance of) the 20 th percentile of the set of pairwise similarity values. In this example, the system may assign a link value of 0.78 to the cluster (i.e., because 20% of the pairwise similarity values are less than 0.78), although the set of pairwise similarity values contains an outlier pairwise similarity value of 0.44.
The system identifies specific cluster pairs to merge based on the link values assigned to the cluster pairs (208). For example, the system may identify the cluster pair assigned the highest link value as the cluster pair to be merged. As mentioned earlier, merging two clusters refers to combining the two clusters into a single cluster (e.g., so each data element previously belonging to either of the two clusters is thereafter considered to belong to the same merged cluster).
The system determines whether a cluster termination criterion is met (210). For example, if the highest link value assigned to a cluster pair is less than a predetermined threshold link value, the system may determine that a cluster termination criteria is met. As another example, if the system has performed a predetermined number of clustering iterations, the system may determine that a clustering termination criteria is met.
In response to determining that the cluster termination criteria is not met, the system updates data defining the current cluster (214). More specifically, the system updates the data defining the current cluster by merging the cluster pairs identified as the particular cluster pairs to be merged (e.g., as described in 208). To update the data defining the current cluster, the system may access a data store (e.g., a logical data storage area or a physical data storage device) configured to store the data defining the current cluster and update the data defining the current cluster stored in the data store. For example, the data defining the current cluster may be stored in a tabular format that associates each data element with a numerical value of the index corresponding cluster. In this example, the system may update the current cluster by associating each data element belonging to either of the two clusters to be merged with the same value of the merged cluster to which the index corresponds.
After updating the data defining the current cluster, the system can return to 202 and repeat the previous steps.
In response to determining that the cluster termination criteria is not met, the system can output data defining the current cluster. For example, the system can store data defining the current cluster in a data store. As another example, the system can provide data defining the current cluster for use in another system. For example, the system can provide the digital component distribution system described with reference to fig. 3 with data defining the current cluster.
FIG. 3 is a block diagram of an example environment 300 in which digital components are transmitted for presentation with an electronic document. As will be described in greater detail below, the keyword clusters output by the clustering system 100 (as described with reference to fig. 1) can be used as distribution parameters for determining eligibility of digital components for transmission in response to digital component requests.
The example environment 300 includes a network 302, such as a local area network (local area network, LAN), a wide area network (wide area network, WAN), the internet, or a combination thereof. Network 302 connects electronic document server 304, client device 306, digital component server 308, and digital component distribution system 310 (also referred to as "distribution system" 310). The example environment 300 may include a number of different electronic document servers 304, client devices 306, and digital component servers 308.
Client device 306 is an electronic device capable of requesting and receiving resources over network 302. Example client devices 306 include personal computers, mobile communication devices (e.g., mobile phones), and other devices capable of transmitting and receiving data over the network 302. While client device 306 typically includes a user application, such as a web browser, to facilitate the transmission and reception of data over network 302, a local application executed by client device 306 is also capable of facilitating the transmission and reception of data over network 302.
An electronic document is data that presents a collection of content at a client device 306. Examples of electronic documents include web pages, word processing documents, portable document format (portable document format, PDF) documents, images, videos, search result pages, and manuscript sources. A local application (e.g., "application") such as an application installed on a mobile, tablet, or desktop computing device is also an example of an electronic document. The electronic document can be provided to the client device 306 through an electronic document server 304 ("electronic document server"). For example, electronic document server 304 can include a server hosting a publisher website. In this example, the client device 306 is capable of initiating a request for a given publisher web page, and the electronic server 304 hosting the given publisher web page is capable of responding to the request by transmitting machine-executable instructions that initiate presentation of the given web page at the client device 306.
In another example, electronic document server 304 can include an application server from which client device 306 can download applications. In this example, the client device 306 is able to download the files required for installing the application at the client device 306, and then run the downloaded application locally.
The electronic document can include various contents. For example, the electronic document can include static content (e.g., text or other specified content) within the electronic document itself and/or that does not change over time. The electronic document can also include dynamic content that can change over time or on a per request basis. For example, a publisher of a given electronic document can maintain a data source for populating portions of the electronic document. In this example, the given electronic document can include one or more tags or scripts that, when processed (e.g., rendered or run) by the client device 306, cause the client device 306 to request content from a data source. The client device 306 integrates the content obtained from the data source into a given electronic document to create a composite electronic document that includes the content obtained from the data source.
In some cases, a given electronic document can include one or more digital component tags or digital component scripts that reference digital component distribution system 310. In these cases, a digital component tag or digital component script is run by the client device 306 as a given electronic document is processed by the client device 306. The execution of the digital component tags or digital component scripts configures the client device 306 to generate a request 312 (referred to as a "component request") for one or more digital components that is sent over the network 302 to the digital component distribution system 310. For example, a digital component tag or digital component script can enable client device 306 to generate a packetized data request that includes a header and payload data. Component request 312 can include event data specifying characteristics such as the name (or network location) of the server from which the digital component is being requested, the name (or network location) of the requesting device (e.g., client device 306), and/or information that digital component distribution system 310 can use to select one or more digital components to provide in response to the request. Component request 312 is sent by client device 306 over network 302 (e.g., a telecommunications network) to a server of digital component distribution system 310.
Component request 312 can include event data specifying other event characteristics, such as characteristics of the electronic document being requested and the location of the electronic document at which the digital component can be presented. For example, the digital component distribution system 310 can be provided with event data specifying a reference (e.g., URL) to an electronic document (e.g., web page) in which the digital component is to be presented, an available location of the electronic document available for presentation of the digital component, a size of the available location, and/or a media type qualifying for presentation in the location. Similarly, event data specifying keywords associated with an electronic document ("document keywords") or entities referenced by the electronic document (e.g., people, places, or things) can also be included in the component request 312 (e.g., as payload data) and provided to the digital component distribution system 310 to facilitate identification of digital components that qualify for presentation with the electronic document. The event data can also include search queries submitted from the client device 306 to obtain a search results page, and/or data specifying search results and/or text, audible, or other visual content included in the search results.
Component request 312 can also include event data related to other information, such as information that a user of the client device has been provided, geographic information indicating the state or region from which the component request was submitted, or other information that provides context for the environment in which the digital component will be displayed (e.g., time of day of the component request, day of the week of the component request, type of device (such as a mobile device or tablet device) at which the digital component will be displayed). The component request 312 can be sent, for example, over a packetized network, and the component request 312 itself can be formatted as packetized data with a header and payload data. The header can specify the destination of the packet and the payload data can include any of the information discussed above.
Component distribution system 310 selects digital components to be presented with a given electronic document in response to receiving component request 312 and/or using information included in component request 312. In some implementations, the digital components are selected in less than one second (using the techniques described herein) to avoid errors that may be caused by delayed selection of the digital components. For example, delays in providing the digital component in response to the component request 312 may cause page loading errors at the client device 306, or cause portions of the electronic document to remain unfilled even after other portions of the electronic document are rendered at the client device 306. Moreover, as the delay in providing the digital component to the client device 306 increases, it is more likely that the electronic document will no longer be presented at the client device 306 when the digital component is delivered to the client device 306, thereby negatively affecting the user's experience with the electronic document. Further, delays in providing the digital component may result in failed delivery of the digital component, for example, if the electronic document is no longer presented at the client device 306 when the digital component is provided.
In some implementations, digital component distribution system 310 is implemented in a distributed computing system that includes, for example, a server and a set 314 of multiple computing devices that are interconnected and that identify and distribute digital components in response to request 312. The set 314 of multiple computing devices operate together to identify a set of digital components that are rendered in the electronic document for eligibility from a corpus of millions of available digital components (DC 1-x). Millions of available digital components can be indexed, for example, in digital component database 316. Each digital component index entry can reference a corresponding digital component and/or include a distribution parameter (DP 1-DPx) that contributes (e.g., conditions or limits) to the distribution/transmission of the corresponding digital component. For example, the distribution parameters can contribute to the transmission of the digital component by requiring that the component request include at least one criterion (e.g., any one of the distribution parameters that matches the digital component precisely or with some pre-specified level of similarity).
In some implementations, the distribution parameters for a particular digital component can include distribution keywords that must be matched (e.g., by electronic document, document keywords, or terms specified in component request 312) so that the digital component is acceptable for presentation. In other words, the distribution parameters are used to trigger the distribution (e.g., transmission) of the digital components over the network 302. The distribution parameters can also require that the component request 312 include information specifying a particular geographic region (e.g., country or state) and/or information specifying that the component request 312 originated at a particular type of client device (e.g., mobile device or tablet device) so that the digital component is acceptable for presentation.
The distribution parameters can also specify a eligibility value (e.g., a ranking score, a bid (bid), or some other specified value) that is used to evaluate eligibility of the digital component for distribution/transmission, e.g., by a component evaluation process (e.g., among other available digital components). In some cases, the eligibility value can specify a maximum amount of compensation that the provider of the digital component is willing to submit in response to the transmission of the digital component (e.g., for each instance of a particular event due to the presentation of the digital component, such as a user interaction with the digital component).
The identification of the qualified digital component can be partitioned into a plurality of tasks 317a-317c that are then distributed among computing devices within the set 314 of multiple computing devices. For example, different computing devices in the collection 314 can each analyze different portions of the digital component database 316 to identify various digital components having distribution parameters that match the information included in the component request 312. In some implementations, each given computing device in the set 314 is capable of analyzing a different data dimension (or set of dimensions) and delivering (e.g., sending) the results of the analysis (Res 1-Res 3) 318a-318c back to the digital component distribution system 310. For example, the results 318a-318c provided by each of the computing devices in the set 314 may identify a subset of digital components that are eligible for distribution in response to the component request and/or a subset of digital components that have certain distribution parameters. The identification of the subset of digital components can include, for example, comparing the event data to the distribution parameters, and identifying the subset of digital components having distribution parameters that match at least some of the features of the event data.
Digital component distribution system 310 aggregates results 318a-318c received from collection 314 of multiple computing devices and uses information associated with the aggregated results to: (i) Select one or more digital components to be provided in response to the request 312, and (ii) determine transmission requirements for the one or more digital components. For example, the digital component distribution system 310 can select a winning set of digital components (one or more digital components) based on the outcome of one or more component evaluation processes. In turn, digital component distribution system 310 can generate and send reply data 320 (e.g., digital data representing a reply) over network 302, which reply data 320 enables client device 306 to integrate the set of winning digital components into the given electronic document such that the set of winning digital components is presented at the display of client device 306 along with the content of the electronic document.
In some implementations, the client device 306 executes instructions included in the reply data 320 that configure and enable the client device 306 to obtain a winning set of digital components from one or more digital component servers. For example, the instructions in reply data 320 can include network location (e.g., uniform resource locator (Uniform Resource Locator, URL)) and scripts that cause client device 306 to send a Server Request (SR) 321 to digital component server 308 to obtain a given winning digital component from digital component server 308. In response to the request, digital component server 308 will identify the given winning digital component specified in server request 321 (e.g., within a database storing a plurality of digital components) and send digital component data (DC (digital component, digital component) data) 322 to client device 306 that presents the given winning digital component in the electronic document at client device 306.
To facilitate searching of electronic documents, environment 300 can include a search system 350 that identifies electronic documents by crawling (crawl) and indexing electronic documents (e.g., indexed based on the crawled content of the electronic documents). The data about the electronic document can be indexed based on the electronic document with which the data is associated. The indexed and optionally cached copies of the electronic document are stored in search index 352 (e.g., hardware storage device (s)). The data associated with the electronic document is data representing content included in the electronic document and/or metadata for the electronic document.
Client device 306 is able to submit a search query to search system 350 over network 302. In response, the search system 350 accesses the search index 352 to identify electronic documents relevant to the search query. The search system 350 identifies the electronic document in the form of search results and returns the search results to the client device 306 in a search results page. The search results are data generated by the search system 350 that identifies electronic documents that are responsive (e.g., relevant) to the particular search query, and that includes active links (e.g., hypertext links) that cause the client device to request data from a specified web location (e.g., URL) in response to user interaction with the search results. Example search results can include a web page title, a portion of a fragment or image of text extracted from the web page, and a URL of the web page. Another example search result can include a title of the downloadable application, a segment of text describing the downloadable application, an image depicting a user interface of the downloadable application, and/or a URL to a location from which the application can be downloaded to the client device 306. In some cases, the search system 350 can be part of or interact with an application store (or online portal) from which applications can be downloaded for installation at the client device 306 in order to present information about downloadable applications related to submitted search queries. As with other electronic documents, the search results page can include one or more slots (slots) in which digital components (e.g., advertisements, video clips, audio clips, images, or other digital components) can be presented.
To select digital components that are transmitted in response to a component request, distribution system 310 may identify a set of digital components that are eligible for transmission in response to the component request. Distribution system 310 may then select one or more of the qualified digital components to send through, for example, an auction process. In some implementations, the distribution system 310 performs a auction process by ranking the eligible digital components according to their respective eligibility values and selecting one or more highest ranked digital components that are sent in response to the component request.
For example, the distribution system 310 may identify the digital components A, B, and C as eligible for being sent in response to the component request. In this example, the digital component a has a eligibility value of $5, the digital component B has an eligibility value of $1, and the digital component C has an eligibility value of $5.5, wherein the eligibility value of the digital component represents a bid associated with the digital component. Distribution system 310 can rank the digital components (e.g., in descending order) according to their respective eligibility values as: C. a, B. Finally, distribution system 310 may select the highest ranked digital component C for transmission in response to the component request.
After selecting the digital component to be transmitted in response to the digital component request, distribution system 310 determines a transmission requirement for the selected digital component. The transmission requirements specify actions to be performed by the provider of the digital component in response to the transmission of the digital component. For example, the transmission requirements may specify that the provider of the digital component submit an amount of compensation in response to the transmission of the digital component. In some cases, the amount of compensation specifies the amount to submit for each instance of a particular event due to the presentation of the digital component (e.g., user interaction with the digital component).
Distribution system 310 may determine the transmission requirements for the selected digital component based on the eligibility values for the selected digital component and/or eligibility values determined to be eligible for transmission of other digital components in response to the component request. For example, distribution system 310 may identify digital components A, B, and C as eligible for transmission in response to a digital component request, where A, B, and C have respective eligibility values of $5, $1, and $5.5. Distribution system 310 may select digital component C for transmission (because it has the highest eligibility value) and may determine the transmission requirement for digital component C as the next highest eligibility value from among the eligibility values of the eligible digital components. In this example, the next highest eligibility value is $5 (i.e., the eligibility value of digital component a), and thus distribution system 310 may determine the transmission requirement of digital component C to be $5.
As described above, distribution system 310 may identify a set of qualified digital components for being sent in response to a digital component request for presentation in an electronic document based on distribution parameters corresponding to each digital component. In some cases, the distribution parameters corresponding to the digital components may include a keyword cluster (i.e., a collection of multiple keywords). Distribution system 310 may determine that one or more keywords from the keyword clusters must be matched (e.g., by electronic document, document keyword, or term specified in the digital component request) in order for the digital component to be acceptable for transmission.
For example, distribution system 310 may receive a digital component request that includes a particular keyword. In this example, distribution system 310 may determine that a particular digital component having distribution parameters specifying a key cluster is eligible for transmission in response to a digital component request only if a particular key is included in the key cluster.
In some implementations, the distribution system 310 enables a provider of digital components to set distribution parameters that specify a keyword cluster from a predetermined set of keyword clusters. The distribution system 310 may obtain a predetermined set of keyword clusters as an output (e.g., the final cluster 104) of the clustering system 100. The keyword clusters output by the clustering system 100 may define groupings of keywords into semantically related keyword clusters. For example, the clustering system 100 may output clusters of keywords defining the assignment of keywords "shoes", "footwear", "boots", "football shoes", "high-heeled shoes", "slipper", "sports shoes", etc., to the same clusters.
By enabling the digital component provider to set distribution parameters for the digital components by selecting a keyword cluster, the distribution system 310 can alleviate the burden on the digital component provider to manually specify a large number of related keywords when setting distribution parameters. For example, rather than manually specifying the relevant keywords "shoe," "footwear," "boot," "ball shoe," "high-heeled shoe," "slipper," and "sports shoe," the digital component provider can select an appropriate predetermined keyword cluster that includes some or all of these keywords.
Further, by enabling the digital component provider to set distribution parameters for digital components by selecting keyword clusters of semantically related keywords, distribution system 310 can reduce variations in transmission requirements for digital components having similar distribution parameters. For example, distribution system 310 may determine substantially different transmission requirements for digital components having distribution parameters specifying semantically related keywords depending on the "popularity" of those keywords. Popularity of a keyword refers to how often a keyword is specified by a digital component provider as a distribution parameter. For example, while the keywords "shoes" and "shoes" are semantically related, the keyword "shoes" may be more popular than the keyword "shoes" (i.e., because "shoes" are more natural keyword expressions than "shoes"). In this example, distribution system 310 may determine that a greater number of digital components are eligible for transmission in response to a digital component request specifying the keyword "shoe" rather than the keyword "shoe". Thus, the distribution system 310 may determine a higher transmission requirement for the digital component of the distribution parameter having the specified keyword "shoe" than for the digital component of the distribution parameter having the specified keyword "shoe". By enabling the digital component provider to set distribution parameters that specify clusters of keywords that are semantically related rather than individual keywords, the distribution system 310 is more likely to determine similar transmission requirements for digital components having similar distribution parameters.
Fig. 4 is an illustration of an example data flow 400 for selecting a keyword cluster as a distribution parameter.
An interactive window 402 (e.g., on a display screen) is presented to the digital component provider. The interactive window 402 prompts the digital component provider to "enter keywords and URLs related to the products and services that your audience is actively researching. The digital component provider can enter a response to the prompt in interactive window 402 using any suitable data input device (e.g., a keyboard).
Data entered by the digital component provider in response to the prompt in interactive window 402 is provided to distribution parameter selection system 404 (which may be a component of distribution system 310 described with reference to fig. 3, for example). If the distribution parameter selection system 404 detects that the data entered by the digital component provider in response to the prompt in the interactive window 402 is a URL, the distribution parameter selection system 404 can process the URL to determine one or more relevant keywords. For example, the distribution parameter selection system 404 can retrieve one or more keywords from a landing page corresponding to the URL.
The distribution parameter selection system 404 identifies a keyword cluster for each keyword obtained from the response to the prompt in the interactive window 402. For example, for each keyword obtained from a response to a prompt in interactive window 402, distribution parameter selection system 404 can identify a corresponding keyword cluster including the keyword from a database of predetermined keyword clusters. In a particular example, the keyword obtained from the response to the prompt in interactive window 402 may be a "shoe," and distribution parameter selection system 404 may identify a keyword that includes: corresponding keyword clusters 406 for "shoes", "footwear", "boots", "football shoes", "high-heeled shoes", "slippers", and "sports shoes", etc. As described earlier, the database of predetermined keyword clusters may be a collection of keyword clusters of semantically related keywords output by the clustering system 100 described with reference to fig. 1. The database of predetermined keyword clusters can include other keyword clusters, for example, keyword clusters 408 including keywords "pineapple," "banana," "orange," "apple," "kiwi," "lime," "yellow lemon," and "kumquat," etc.
The distribution parameter selection system 404 presents the identified keyword clusters in another interactive window 410 and prompts the digital component provider (e.g., using a mouse click) to select whether or not to set the identified keyword clusters as distribution parameters for the digital components. In response to receiving an input from the digital component provider indicating that the identified keyword cluster should set a distribution parameter for the digital component, the distribution parameter selection system 404 stores data associated with the identified keyword cluster as the distribution parameter associated with the digital component.
Fig. 5 is a block diagram of an example computer system 500 that can be used to perform the operations described above. The system 500 includes a processor 510, a memory 520, a storage device 530, and an input/output device 540. Each of the components 510, 520, 530, and 540 can be interconnected, for example, using a system bus 550. Processor 510 is capable of processing instructions for execution within system 500. In one implementation, the processor 510 is a single-threaded processor. In another implementation, the processor 510 is a multi-threaded processor. The processor 510 is capable of processing instructions stored in the memory 520 or on the storage device 530.
Memory 520 stores information within system 500. In one implementation, the memory 520 is a computer-readable medium. In one implementation, the memory 520 is a volatile memory unit. In another embodiment, the memory 520 is a non-volatile memory unit.
The storage device 530 is capable of providing mass storage for the system 500. In one implementation, the storage device 530 is a computer-readable medium. In various different implementations, the storage device 530 can include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
Input/output device 540 provides input/output operations for system 500. In one implementation, the input/output device 540 can include one or more network interface devices (e.g., an ethernet card), serial communication devices (e.g., RS-232 ports), and/or wireless interface devices, such as, for example, and 802.11 cards. In another implementation, the input/output devices can include a driver device configured to receive input data and transmit output data to other input/output devices, such as a keyboard, a printer, and a display device 560. However, other implementations, such as mobile computing devices, mobile communication devices, set-top box television client devices, and the like, can also be used.
Although an example processing system has been described in FIG. 5, implementations of the subject matter and functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
The term "configuration" is used in this specification in connection with systems and computer program components. By a system of one or more computers to be configured to perform a particular operation or action is meant that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform the operation or action. For one or more computer programs to be configured to perform a particular operation or action, it is meant that the one or more programs include instructions that, when executed by the data processing apparatus, cause the apparatus to perform the operation or action.
Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangible embodied computer software or firmware, in computer hardware (including the structures disclosed in this specification and their structural equivalents), or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible, non-transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of these. Alternatively or additionally, the program instructions can be encoded on a manually generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by data processing apparatus.
The term "data processing apparatus" refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be or further comprise a dedicated logic circuit, for example an FPGA (field programmable gate array ) or an ASIC (application specific integrated circuit, application specific integrated circuit). In addition to hardware, the apparatus can optionally include code that creates an operating environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
A computer program can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can also be referred to or described as a program, software application, module, software module, script, or code; and a computer program can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
In this specification, the term "engine" is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Typically, the engine will be implemented as one or more software modules or components installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine. In other cases, multiple engines can be installed and run on the same computer or computers.
The processes and logic flows described in this specification can be performed by one or more programmable computers running one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, or in combination with, special purpose logic circuitry (e.g., an FPGA or ASIC) and one or more programmed computers.
A computer suitable for the operation of a computer program can be based on a general-purpose or special-purpose microprocessor or both, or any other kind of central processing unit. Typically, the central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for executing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include one or more mass storage devices (e.g., magnetic, magneto-optical disks, or optical disks) for storing data, or be operably coupled to receive data from or transmit data to a mass storage device, or both. However, the computer need not have such a device. In addition, the computer can be embedded in another device, such as a mobile phone, a personal digital assistant (personal digital assistant, PDA), a mobile audio or video player, a game console, a global positioning system (Global Positioning System, GPS) receiver, or a portable storage device (e.g., universal serial bus (universal serial bus, USB) flash drive), to name a few.
Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices, including by way of example semiconductor storage devices, e.g., EPROM (Electrically Programmable Read Only Memory ), EEPROM (Electrically Erasable Programmable Read Only Memory, electrically erasable programmable read only memory), and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD-ROM and DVD-ROM discs.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, the feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is capable of interacting with the user by transmitting and receiving documents to and from the device used by the user; for example, by transmitting a web page to a web browser on a user device in response to a request received from the web browser. Moreover, the computer can interact with the user by transmitting text messages or other forms of messages to a personal device (e.g., a smart phone running a messaging application) and conversely receiving response messages from the user.
The data processing means for implementing the machine learning model can also comprise, for example, dedicated hardware accelerator units for handling general and computationally intensive parts of machine learning training or production, i.e. reasoning, workload.
The machine learning model can be implemented and deployed using a machine learning framework, such as a TensorFlow framework, microsoft Cognitive Toolkit framework, apache Singa framework, or Apache MXNet framework.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface, a web browser, or an application through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), such as the internet.
The computing system can include clients and servers. The client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., HTML pages) to the user device for the purpose of displaying data to and receiving user input from a user interacting with the device acting as a client. Data generated at the user device, e.g., results of a user interaction, can be received at the server from the device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings and described in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (19)
1. A method implemented by a data processing apparatus, the method comprising, at each of one or more iterations:
obtaining data defining a current cluster of a plurality of data elements, wherein the current cluster defines an allocation of each of the data elements to a respective cluster, and wherein each cluster represents a respective group of one or more data elements;
determining a respective link value for each of a plurality of cluster pairs, wherein each cluster pair includes a respective first cluster defined by the current cluster and a respective second cluster defined by the current cluster, wherein determining a link value for a cluster pair includes:
determining a set of pairwise similarity values for the cluster pairs, wherein each pairwise similarity value defines a similarity measure between: (i) A first data element from a first cluster of the pair of clusters, and (ii) a second data element from a second cluster of the pair of clusters; and
Assigning a given percentile of the set of pairwise similarity values as a link value for the cluster pairs, wherein the given percentile is greater than 0 and less than 100;
identifying specific cluster pairs to be merged based on the link values for the plurality of cluster pairs; and
by merging the identified pairs of clusters to update the data defining the current cluster,
wherein the data element is a key, and
wherein a similarity measure between (i) a first data element from a first cluster of the pair of clusters and (ii) a second data element from a second cluster of the pair of clusters characterizes a similarity between: (i) A first set of search results obtained in response to providing a search engine with a first data element from a first cluster of the pair of clusters as a query, and (ii) a second set of search results obtained in response to providing a search engine with a second data element from a second cluster of the pair of clusters as a query.
2. The method of claim 1, wherein, at a first iteration of the one or more iterations, the cluster defines an allocation of each of the data elements to a different respective cluster.
3. The method of claim 1, wherein identifying a particular cluster pair to merge based on the link values for the plurality of cluster pairs comprises:
a specific cluster pair with the highest link value is identified.
4. A method according to claim 3, further comprising:
determining that the highest link value is greater than a predetermined threshold link value.
5. The method of claim 1, further comprising:
after a final iteration of the one or more iterations, data defining the current cluster is output.
6. The method of claim 1, wherein a set of pairwise similarity values for the cluster pairs is determined, wherein each pairwise similarity value defines a similarity measure between: (i) A first data element from a first cluster of the pair of clusters, and (ii) a second data element from a second cluster of the pair of clusters, comprising:
a data store is accessed that includes pre-computed pairwise similarity values defining respective similarity measures between each pair of data elements of the plurality of data elements.
7. The method of claim 1, wherein the similarity measure between the first keyword and the second keyword is determined based on how many search results are in common among a first set of search results obtained in response to providing the first keyword as a query to the search engine and a second set of search results obtained in response to providing the second keyword as a query to the search engine.
8. The method of claim 7, further comprising, after a final iteration of the one or more iterations:
receiving a digital component request including a particular key;
determining that a particular digital component is eligible for transmission in response to the digital component request comprises:
determining that the particular numeric component has a distribution parameter specifying a keyword cluster comprising the particular keyword, wherein the keyword cluster is a cluster defined by the current cluster at a final iteration of the one or more iterations; and
the particular digital component is transmitted in response to the digital component request.
9. A data processing system, comprising:
a data processing device;
a memory in data communication with the data processing apparatus and storing instructions that cause the data processing apparatus to perform operations comprising, at each of one or more iterations:
obtaining data defining a current cluster of a plurality of data elements, wherein the current cluster defines an allocation of each of the data elements to a respective cluster, and wherein each cluster represents a respective group of one or more data elements;
Determining a respective link value for each of a plurality of cluster pairs, wherein each cluster pair includes a respective first cluster defined by the current cluster and a respective second cluster defined by the current cluster, wherein determining a link value for a cluster pair includes:
determining a set of pairwise similarity values for the cluster pairs, wherein each pairwise similarity value defines a similarity measure between: (i) A first data element from a first cluster of the pair of clusters, and (ii) a second data element from a second cluster of the pair of clusters; and
assigning a given percentile of the set of pairwise similarity values as a link value for the cluster pairs, wherein the given percentile is greater than 0 and less than 100;
identifying specific cluster pairs to be merged based on the link values for the plurality of cluster pairs; and
by merging the identified pairs of clusters to update the data defining the current cluster,
wherein the data element is a key, and
wherein a similarity measure between (i) a first data element from a first cluster of the pair of clusters and (ii) a second data element from a second cluster of the pair of clusters characterizes a similarity between: (i) A first set of search results obtained in response to providing a search engine with a first data element from a first cluster of the pair of clusters as a query, and (ii) a second set of search results obtained in response to providing a search engine with a second data element from a second cluster of the pair of clusters as a query.
10. The system of claim 9, wherein, at a first iteration of the one or more iterations, the cluster defines an allocation of each of the data elements to a different respective cluster.
11. The system of claim 9, wherein identifying a particular cluster pair to merge based on the link values for the plurality of cluster pairs comprises:
a specific cluster pair with the highest link value is identified.
12. The system of claim 11, wherein the operations further comprise:
determining that the highest link value is greater than a predetermined threshold link value.
13. The system of claim 9, wherein the operations further comprise:
after a final iteration of the one or more iterations, data defining the current cluster is output.
14. One or more non-transitory computer storage media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations comprising, at each of one or more iterations:
obtaining data defining a current cluster of a plurality of data elements, wherein the current cluster defines an allocation of each of the data elements to a respective cluster, and wherein each cluster represents a respective group of one or more data elements;
Determining a respective link value for each of a plurality of cluster pairs, wherein each cluster pair includes a respective first cluster defined by the current cluster and a respective second cluster defined by the current cluster, wherein determining a link value for a cluster pair includes:
determining a set of pairwise similarity values for the cluster pairs, wherein each pairwise similarity value defines a similarity measure between: (i) A first data element from a first cluster of the pair of clusters, and (ii) a second data element from a second cluster of the pair of clusters; and
assigning a given percentile of the set of pairwise similarity values as a link value for the cluster pairs, wherein the given percentile is greater than 0 and less than 100;
identifying specific cluster pairs to be merged based on the link values for the plurality of cluster pairs; and
by merging the identified pairs of clusters to update the data defining the current cluster,
wherein the data element is a key, and
wherein a similarity measure between (i) a first data element from a first cluster of the pair of clusters and (ii) a second data element from a second cluster of the pair of clusters characterizes a similarity between: (i) A first set of search results obtained in response to providing a search engine with a first data element from a first cluster of the pair of clusters as a query, and (ii) a second set of search results obtained in response to providing a search engine with a second data element from a second cluster of the pair of clusters as a query.
15. The one or more non-transitory computer storage media of claim 14, wherein, at a first iteration of the one or more iterations, the cluster defines an allocation of each of the data elements to a different respective cluster.
16. The one or more non-transitory computer storage media of claim 14, wherein identifying a particular cluster pair to merge based on the link values for the plurality of cluster pairs comprises:
a specific cluster pair with the highest link value is identified.
17. The one or more non-transitory computer storage media of claim 16, wherein the operations further comprise:
determining that the highest link value is greater than a predetermined threshold link value.
18. The one or more non-transitory computer storage media of claim 14, wherein the operations further comprise:
after a final iteration of the one or more iterations, data defining the current cluster is output.
19. The one or more non-transitory computer storage media of claim 14, wherein a set of pairwise similarity values for the cluster pairs is determined, wherein each pairwise similarity value defines a similarity measure between: (i) A specific data element from a first cluster of the pair of clusters, and (ii) a given data element from a second cluster of the pair of clusters, comprising:
A data store is accessed that includes pre-computed pairwise similarity values defining respective similarity measures between each pair of data elements of the plurality of data elements.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2018/048813 WO2020046331A1 (en) | 2018-08-30 | 2018-08-30 | Percentile linkage clustering |
Publications (2)
Publication Number | Publication Date |
---|---|
CN111201524A CN111201524A (en) | 2020-05-26 |
CN111201524B true CN111201524B (en) | 2023-08-25 |
Family
ID=63557695
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880044850.8A Active CN111201524B (en) | 2018-08-30 | 2018-08-30 | Percentile linked clustering |
Country Status (4)
Country | Link |
---|---|
US (1) | US11347812B2 (en) |
EP (1) | EP3642690A1 (en) |
CN (1) | CN111201524B (en) |
WO (1) | WO2020046331A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023057988A1 (en) * | 2021-10-08 | 2023-04-13 | Graphite Growth, Inc. | Generation and use of content briefs for network content authoring |
Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5317741A (en) * | 1991-05-10 | 1994-05-31 | Siemens Corporate Research, Inc. | Computer method for identifying a misclassified software object in a cluster of internally similar software objects |
US7577652B1 (en) * | 2008-08-20 | 2009-08-18 | Yahoo! Inc. | Measuring topical coherence of keyword sets |
CN101535944A (en) * | 2005-08-15 | 2009-09-16 | 谷歌公司 | Scalable user clustering based on set similarity |
WO2011033507A1 (en) * | 2009-09-17 | 2011-03-24 | Behavioreal Ltd. | Method and apparatus for data traffic analysis and clustering |
US8463784B1 (en) * | 2009-08-07 | 2013-06-11 | Hewlett-Packard Development Company, L.P. | Improving data clustering stability |
US8463783B1 (en) * | 2009-07-06 | 2013-06-11 | Google Inc. | Advertisement selection data clustering |
US8543576B1 (en) * | 2012-05-23 | 2013-09-24 | Google Inc. | Classification of clustered documents based on similarity scores |
US8583648B1 (en) * | 2011-09-30 | 2013-11-12 | Google Inc. | Merging semantically similar clusters based on cluster labels |
CN104067273A (en) * | 2012-01-17 | 2014-09-24 | 国际商业机器公司 | Grouping search results into a profile page |
CN106228188A (en) * | 2016-07-22 | 2016-12-14 | 北京市商汤科技开发有限公司 | Clustering method, device and electronic equipment |
JP2017151876A (en) * | 2016-02-26 | 2017-08-31 | 国立研究開発法人情報通信研究機構 | Image clustering system, image clustering method, image clustering program, and community structure detecting system |
CN108197111A (en) * | 2018-01-10 | 2018-06-22 | 华南理工大学 | A kind of text automatic abstracting method based on fusion Semantic Clustering |
Family Cites Families (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030115191A1 (en) * | 2001-12-17 | 2003-06-19 | Max Copperman | Efficient and cost-effective content provider for customer relationship management (CRM) or other applications |
US20040064449A1 (en) * | 2002-07-18 | 2004-04-01 | Ripley John R. | Remote scoring and aggregating similarity search engine for use with relational databases |
US7783617B2 (en) * | 2003-04-16 | 2010-08-24 | Yahoo! Inc. | Personals advertisement affinities in a networked computer system |
US7203864B2 (en) * | 2004-06-25 | 2007-04-10 | Hewlett-Packard Development Company, L.P. | Method and system for clustering computers into peer groups and comparing individual computers to their peers |
US8676802B2 (en) * | 2006-11-30 | 2014-03-18 | Oracle Otc Subsidiary Llc | Method and system for information retrieval with clustering |
US7711747B2 (en) * | 2007-04-06 | 2010-05-04 | Xerox Corporation | Interactive cleaning for automatic document clustering and categorization |
JP5357432B2 (en) * | 2008-02-12 | 2013-12-04 | サイジニア株式会社 | Information processing apparatus, information processing method, and program |
US8433512B1 (en) * | 2009-11-12 | 2013-04-30 | Google Inc. | Enhanced identification of interesting points-of-interest |
US10324598B2 (en) * | 2009-12-18 | 2019-06-18 | Graphika, Inc. | System and method for a search engine content filter |
US8694362B2 (en) * | 2011-03-17 | 2014-04-08 | DataPop, Inc. | Taxonomy based targeted search advertising |
US8745059B1 (en) * | 2012-05-11 | 2014-06-03 | Google Inc. | Clustering queries for image search |
US9461876B2 (en) * | 2012-08-29 | 2016-10-04 | Loci | System and method for fuzzy concept mapping, voting ontology crowd sourcing, and technology prediction |
US20140258002A1 (en) * | 2013-03-11 | 2014-09-11 | DataPop, Inc. | Semantic model based targeted search advertising |
US20160171090A1 (en) * | 2014-12-11 | 2016-06-16 | University Of Connecticut | Systems and Methods for Collaborative Project Analysis |
CA2922296A1 (en) * | 2015-03-02 | 2016-09-02 | Slyce Holdings Inc. | System and method for clustering data |
US10162868B1 (en) * | 2015-03-13 | 2018-12-25 | Amazon Technologies, Inc. | Data mining system for assessing pairwise item similarity |
US10496691B1 (en) * | 2015-09-08 | 2019-12-03 | Google Llc | Clustering search results |
US10565222B2 (en) * | 2016-09-15 | 2020-02-18 | Oracle International Corporation | Techniques for facilitating the joining of datasets |
WO2018085859A1 (en) * | 2016-11-07 | 2018-05-11 | Ayasdi, Inc. | Dimension grouping and reduction for model generation, testing, and documentation |
US10909177B1 (en) * | 2017-01-17 | 2021-02-02 | Workday, Inc. | Percentile determination system |
US10552485B1 (en) * | 2017-01-17 | 2020-02-04 | Workday, Inc. | Performance percentile determination and display |
US10216829B2 (en) * | 2017-01-19 | 2019-02-26 | Acquire Media Ventures Inc. | Large-scale, high-dimensional similarity clustering in linear time with error-free retrieval |
US10529000B1 (en) * | 2017-02-22 | 2020-01-07 | Udemy, Inc. | System and method for automatically tagging products for an e-commerce web application and providing product recommendations |
US10691652B2 (en) * | 2018-03-29 | 2020-06-23 | International Business Machines Corporation | Similarity-based clustering search engine |
-
2018
- 2018-08-30 EP EP18769272.8A patent/EP3642690A1/en not_active Withdrawn
- 2018-08-30 WO PCT/US2018/048813 patent/WO2020046331A1/en unknown
- 2018-08-30 CN CN201880044850.8A patent/CN111201524B/en active Active
- 2018-08-30 US US16/623,096 patent/US11347812B2/en active Active
Patent Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5317741A (en) * | 1991-05-10 | 1994-05-31 | Siemens Corporate Research, Inc. | Computer method for identifying a misclassified software object in a cluster of internally similar software objects |
CN101535944A (en) * | 2005-08-15 | 2009-09-16 | 谷歌公司 | Scalable user clustering based on set similarity |
US7577652B1 (en) * | 2008-08-20 | 2009-08-18 | Yahoo! Inc. | Measuring topical coherence of keyword sets |
US8463783B1 (en) * | 2009-07-06 | 2013-06-11 | Google Inc. | Advertisement selection data clustering |
US8463784B1 (en) * | 2009-08-07 | 2013-06-11 | Hewlett-Packard Development Company, L.P. | Improving data clustering stability |
WO2011033507A1 (en) * | 2009-09-17 | 2011-03-24 | Behavioreal Ltd. | Method and apparatus for data traffic analysis and clustering |
US8583648B1 (en) * | 2011-09-30 | 2013-11-12 | Google Inc. | Merging semantically similar clusters based on cluster labels |
CN104067273A (en) * | 2012-01-17 | 2014-09-24 | 国际商业机器公司 | Grouping search results into a profile page |
US8543576B1 (en) * | 2012-05-23 | 2013-09-24 | Google Inc. | Classification of clustered documents based on similarity scores |
JP2017151876A (en) * | 2016-02-26 | 2017-08-31 | 国立研究開発法人情報通信研究機構 | Image clustering system, image clustering method, image clustering program, and community structure detecting system |
CN106228188A (en) * | 2016-07-22 | 2016-12-14 | 北京市商汤科技开发有限公司 | Clustering method, device and electronic equipment |
WO2018014717A1 (en) * | 2016-07-22 | 2018-01-25 | 北京市商汤科技开发有限公司 | Method and device for clustering and electronic equipment |
CN108197111A (en) * | 2018-01-10 | 2018-06-22 | 华南理工大学 | A kind of text automatic abstracting method based on fusion Semantic Clustering |
Non-Patent Citations (1)
Title |
---|
谢锐，等.非对称信息在链接预测中的应用.计算机应用.2018,(第06期),第178-182、188页. * |
Also Published As
Publication number | Publication date |
---|---|
CN111201524A (en) | 2020-05-26 |
WO2020046331A1 (en) | 2020-03-05 |
EP3642690A1 (en) | 2020-04-29 |
US11347812B2 (en) | 2022-05-31 |
US20210173869A1 (en) | 2021-06-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11263217B2 (en) | Method of and system for determining user-specific proportions of content for recommendation | |
US11868375B2 (en) | Method, medium, and system for personalized content delivery | |
US10277696B2 (en) | Method and system for processing data used by creative users to create media content | |
US20180075137A1 (en) | Method and apparatus for training a machine learning algorithm (mla) for generating a content recommendation in a recommendation system and method and apparatus for generating the recommended content using the mla | |
US10515132B2 (en) | Optimizing transmission of digital components | |
US20190080019A1 (en) | Predicting Non-Observable Parameters for Digital Components | |
US10445753B1 (en) | Determining popular and trending content characteristics | |
JP2015531525A (en) | Dynamic content item creation | |
JP7422823B2 (en) | Dynamic application content analysis | |
US20170155939A1 (en) | Method and System for Processing Data Used By Creative Users to Create Media Content | |
CN112219201B (en) | Triggering local extensions based on inferred intent | |
JP6617193B2 (en) | Optimized digital component analysis system | |
EP3956810A1 (en) | Generating videos | |
US10997270B2 (en) | Optimized digital components | |
CN111201524B (en) | Percentile linked clustering | |
EP3293646A1 (en) | Method and server for training a machine learning algorithm (mla) for content recommendation generation | |
US11250475B2 (en) | Neural network architecture for efficient resource allocation | |
US20190335019A1 (en) | Damping transmission requirement variations | |
US10747821B2 (en) | Optimized digital component analysis system | |
KR20200130240A (en) | Context-adaptive scanning | |
WO2024039474A1 (en) | Privacy sensitive estimation of digital resource access frequency | |
WO2024086256A1 (en) | Privacy sensitive estimation of digital resource access frequency | |
CN114600125A (en) | Robust model performance across heterogeneous subgroups within the same group | |
US9146911B1 (en) | Predicting expansion directions for expandable content item environments | |
CN114761948A (en) | Privacy preserving machine learning prediction |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |