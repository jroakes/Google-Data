US9213841B2 - Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries - Google Patents
Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries Download PDFInfo
- Publication number
- US9213841B2 US9213841B2 US13/557,076 US201213557076A US9213841B2 US 9213841 B2 US9213841 B2 US 9213841B2 US 201213557076 A US201213557076 A US 201213557076A US 9213841 B2 US9213841 B2 US 9213841B2
- Authority
- US
- United States
- Prior art keywords
- code
- execution
- log
- encrypted
- locations
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 238000000034 method Methods 0.000 title claims abstract description 64
- 238000004519 manufacturing process Methods 0.000 title claims abstract description 6
- 230000009471 action Effects 0.000 claims description 18
- 238000003860 storage Methods 0.000 claims description 13
- 230000008569 process Effects 0.000 description 48
- 238000004891 communication Methods 0.000 description 16
- 238000005516 engineering process Methods 0.000 description 7
- 230000006870 function Effects 0.000 description 6
- 230000001413 cellular effect Effects 0.000 description 3
- 230000000694 effects Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 230000000712 assembly Effects 0.000 description 1
- 238000000429 assembly Methods 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000007547 defect Effects 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 230000002708 enhancing effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000003032 molecular docking Methods 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 239000000047 product Substances 0.000 description 1
- WVMLRRRARMANTD-FHLIZLRMSA-N ram-316 Chemical compound C1=CCC[C@@]2(O)[C@H]3CC4=CC=C(OC)C(O)=C4[C@]21CCN3C WVMLRRRARMANTD-FHLIZLRMSA-N 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 239000013589 supplement Substances 0.000 description 1
- 230000007723 transport mechanism Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/14—Protection against unauthorised use of memory or access to memory
- G06F12/1408—Protection against unauthorised use of memory or access to memory by using cryptography
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/57—Certifying or maintaining trusted computer platforms, e.g. secure boots or power-downs, version controls, system software checks, secure updates or assessing vulnerabilities
- G06F21/577—Assessing vulnerabilities and evaluating computer system security
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/362—Software debugging
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/362—Software debugging
- G06F11/366—Software debugging using diagnostics
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/121—Restricting unauthorised execution of programs
- G06F21/123—Restricting unauthorised execution of programs by using dedicated hardware, e.g. dongles, smart cards, cryptographic processors, global positioning systems [GPS] devices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/121—Restricting unauthorised execution of programs
- G06F21/125—Restricting unauthorised execution of programs by manipulating the program code, e.g. source code, compiled code, interpreted code, machine code
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/10—Protecting distributed programs or content, e.g. vending or licensing of copyrighted material ; Digital rights management [DRM]
- G06F21/12—Protecting executable software
- G06F21/14—Protecting executable software against software analysis or reverse engineering, e.g. by obfuscation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/71—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure computing or processing of information
- G06F21/72—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure computing or processing of information in cryptographic circuits
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2101—Auditing as a secondary aspect
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2107—File encryption
Definitions
- the invention is related to computer software, and in particular, but not exclusively, to a method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries.
- obfuscation technologies may be used in order to eliminate code paths and recognizable function symbols within the library.
- debug symbols are used to help track down problems within software.
- symbols and backtraces are no longer available, enhancing the overall security of the library.
- FIG. 1 illustrates a system diagram of one embodiment of an environment in which the embodiments of the invention may be practiced
- FIG. 2 shows one embodiment of a client device that may be included in the system of FIG. 1 ;
- FIG. 3 shows one embodiment of a network device that may be included in the system of FIG. 1 ;
- FIG. 4 shows a flowchart of an embodiment of a process
- FIG. 5 illustrates a flowchart of an embodiment of the process of FIG. 4 ;
- FIG. 6 shows a flowchart of another embodiment of the process of FIG. 4 , in accordance with aspects of the invention.
- Coupled means at least either a direct electrical connection between the items connected, or an indirect connection through one or more passive or active intermediary devices.
- signal means at least one current, voltage, charge, temperature, data, or other signal.
- the invention is related to a method, apparatus, and manufacture for debugging and crash logging.
- a log file is received, where the log file includes encrypted log messages that indicate execution trace of obfuscated code while leaving code locations of corresponding code in the obfuscated code unknown.
- the encrypted log messages include execution way-point indices.
- a debug log viewer is then employed to view the decrypted log file.
- the debug log viewer includes an execution way-point manifest that correlates each of the execution way-point indices to a corresponding code location.
- FIG. 1 shows components of one embodiment of an environment in which the invention may be practiced. Not all the components may be required to practice the invention, and variations in the arrangement and type of the components may be made without departing from the spirit or scope of the invention.
- system 100 of FIG. 1 includes local area networks (“LANs”) wide area networks (“WANs”)—(network) 111 , wireless network 110 , client devices 101 - 104 , and server device 108 .
- LANs local area networks
- WANs wide area networks
- client devices 101 - 104 may include virtually any portable computing device capable of receiving and sending a message over a network, such as wireless network 110 , or the like.
- client devices 102 - 104 may also be described generally as client devices that are configured to be portable.
- client devices 102 - 104 may include virtually any portable computing device capable of connecting to another computing device and receiving information.
- Such devices include portable devices such as, cellular telephones, smart phones, display pagers, radio frequency (RF) devices, infrared (IR) devices, Personal Digital Assistants (PDAs), handheld computers, laptop computers, wearable computers, tablet computers, integrated devices combining one or more of the preceding devices, and the like.
- client devices 102 - 104 typically range widely in terms of capabilities and features.
- a cell phone may have a numeric keypad and a few lines of monochrome LCD display on which only text may be displayed.
- a web-enabled mobile device may have a touch sensitive screen, a stylus, and several lines of color LCD display in which both text and graphics may be displayed.
- Client device 101 may include virtually any computing device capable of communicating over a network to send and receive information.
- the set of such devices may include devices that typically connect using a wired or wireless communications medium such as personal computers, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, or the like.
- client devices 102 - 104 may operate over wired and/or wireless network.
- a web-enabled client device may include a browser application that is configured to receive and to send web pages, web-based messages, and the like.
- the browser application may be configured to receive and display graphics, text, multimedia, and the like, employing virtually any web-based language, including a wireless application protocol messages (WAP), and the like.
- WAP wireless application protocol
- the browser application is enabled to employ Handheld Device Markup Language (HDML), Wireless Markup Language (WML), WMLScript, JavaScript, Standard Generalized Markup Language (SMGL), HyperText Markup Language (HTML), eXtensible Markup Language (XML), and the like, to display and send a message.
- a user of the client device may employ the browser application to perform various activities over a network (online). However, another application may also be used to perform various online activities.
- Wireless network 110 is configured to couple client devices 102 - 104 and its components with network 111 .
- Wireless network 110 contains at least one Access Point (not shown in FIG. 1 ).
- Wireless network 110 may include any of a variety of wireless sub-networks that may further overlay stand-alone ad-hoc networks, and the like. Such sub-networks may include mesh networks, Wireless LAN (WLAN) networks, cellular networks, and the like.
- WLAN Wireless LAN
- Wireless network 110 may further include an autonomous system of terminals, gateways, routers, and the like connected by wireless radio, links, and the like. These connectors may be configured to move freely and randomly and organize themselves arbitrarily, such that the topology of wireless network 110 may change rapidly.
- Wireless network 110 may further employ a plurality of access technologies including 2 nd (2G), 3 rd (3G), 4 th (4B), 5 th (5G) generation radio access for cellular systems, WLAN, Wireless Router (WR) mesh, and the like.
- Access technologies such as 2G, 3G, 4G, and future access networks may enable wide area coverage for mobile devices, such as client devices 102 - 104 with various degrees of mobility.
- wireless network 110 may enable a radio connection through a radio network access such as Global System for Mobil communication (GSM), General Packet Radio Services (GPRS), Enhanced Data GSM Environment (EDGE), Wideband Code Division Multiple Access (WCDMA), and the like.
- GSM Global System for Mobil communication
- GPRS General Packet Radio Services
- EDGE Enhanced Data GSM Environment
- WCDMA Wideband Code Division Multiple Access
- Network 111 is configured to couple network devices with other computing devices, and through wireless network 110 to client devices 102 - 104 .
- Network 111 is enabled to employ any form of computer readable media for communicating information from one electronic device to another.
- network 111 can include the Internet in addition to local area networks (LANs), wide area networks (WANs), direct connections, such as through a universal serial bus (USB) port, other forms of computer-readable media, or any combination thereof.
- LANs local area networks
- WANs wide area networks
- USB universal serial bus
- a router acts as a link between LANs, enabling messages to be sent from one to another.
- communication links within LANs typically include twisted wire pair or coaxial cable
- communication links between networks may utilize analog telephone lines, full or fractional dedicated digital lines including T1, T2, T3, and T4, Integrated Services Digital Networks (ISDNs), Digital Subscriber Lines (DSLs), wireless links including satellite links, or other communications links known to those skilled in the art.
- ISDNs Integrated Services Digital Networks
- DSLs Digital Subscriber Lines
- remote computers and other related electronic devices could be remotely connected to either LANs or WANs via a modem and temporary telephone link.
- network 111 includes any communication method by which information may travel between computing devices.
- communication media typically embodies computer-readable instructions, data structures, program modules, or other transport mechanism and includes any information delivery media.
- communication media includes wired media such as twisted pair, coaxial cable, fiber optics, wave guides, and other wired media and wireless media such as acoustic, RF, infrared, and other wireless media.
- Server device 108 is a network device. Devices that may operate as server 108 include various network devices, including, but not limited to personal computers, desktop computers, multiprocessor systems, microprocessor-based or programmable consumer electronics, network PCs, server devices, network appliances, and the like. It should be noted that while various devices are shown in a particular quantity, for example, server 108 is shown as two devices, in various embodiments there may a different quantity of such devices, such two or more servers. Thus, the invention is not to be construed as being limited to a single environment and other configurations, and architectures are also envisaged.
- FIG. 2 shows one embodiment of client device 200 that may be included in a system implementing the invention.
- Client device 200 may include many more or less components than those shown in FIG. 2 . However, the components shown are sufficient to disclose an illustrative embodiment for practicing the present invention.
- Client device 200 may represent, for example, one embodiment of at least one of client devices 101 - 104 of FIG. 1 .
- client device 200 includes a processing unit (CPU) 222 in communication with a mass memory 230 via a bus 224 .
- Client device 200 also includes a power supply 226 , one or more network interfaces 250 , an audio interface 252 , a display 254 , a keypad 256 , an illuminator 258 , an input/output interface 260 , a haptic interface 262 , and an optional global positioning systems (GPS) receiver 264 .
- Power supply 226 provides power to client device 200 .
- a rechargeable or non-rechargeable battery may be used to provide power.
- the power may also be provided by an external power source, such as an AC adapter or a powered docking cradle that supplements and/or recharges a battery.
- Client device 200 may optionally communicate with a base station (not shown), or directly with another computing device.
- Network interface 250 includes circuitry for coupling client device 200 to one or more networks, and is constructed for use with one or more communication protocols and technologies including, but not limited to, global system for mobile communication (GSM), code division multiple access (CDMA), time division multiple access (TDMA), user datagram protocol (UDP), transmission control protocol/Internet protocol (TCP/IP), SMS, general packet radio service (GPRS), WAP, ultra wide band (UWB), IEEE 802.16 Worldwide Interoperability for Microwave Access (WiMax), SIP/RTP, or any of a variety of other wireless communication protocols.
- GSM global system for mobile communication
- CDMA code division multiple access
- TDMA time division multiple access
- UDP user datagram protocol
- TCP/IP transmission control protocol/Internet protocol
- SMS general packet radio service
- GPRS general packet radio service
- WAP ultra wide band
- UWB ultra wide band
- IEEE 802.16 Worldwide Interoperability for
- Audio interface 252 is arranged to produce and receive audio signals such as the sound of a human voice.
- audio interface 252 may be coupled to a speaker and microphone (not shown) to enable telecommunication with others and/or generate an audio acknowledgement for some action.
- Display 254 may be a liquid crystal display (LCD), gas plasma, light emitting diode (LED), or any other type of display used with a computing device.
- Display 254 may also include a touch sensitive screen arranged to receive input from an object such as a stylus or a digit from a human hand.
- Keypad 256 may comprise any input device arranged to receive input from a user.
- keypad 256 may include a push button numeric dial, or a keyboard.
- Keypad 256 may also include command buttons that are associated with selecting and sending images.
- Illuminator 258 may provide a status indication and/or provide light. Illuminator 258 may remain active for specific periods of time or in response to events. For example, when illuminator 258 is active, it may backlight the buttons on keypad 256 and stay on while the client device is powered. Also, illuminator 258 may backlight these buttons in various patterns when particular actions are performed, such as dialing another client device. Illuminator 258 may also cause light sources positioned within a transparent or translucent case of the client device to illuminate in response to actions.
- Client device 200 also comprises input/output interface 260 for communicating with external devices, such as a headset, or other input or output devices not shown in FIG. 2 .
- Input/output interface 260 can utilize one or more communication technologies, Such as USB, infrared, BluetoothTM, or the like.
- Haptic interface 262 is arranged to provide tactile feedback to a user of the client device.
- the haptic interface may be employed to vibrate client device 200 in a particular way when another user of a computing device is calling.
- Optional GPS transceiver 264 can determine the physical coordinates of client Device 200 on the surface of the Earth, which typically outputs a location as latitude and longitude values. GPS transceiver 264 can also employ other geo-positioning mechanisms, including, but not limited to, triangulation, assisted GPS (AGPS), E-OTD, CI, SAI, ETA, BSS or the like, to further determine the physical location of client device 200 on the surface of the Earth. It is understood that under different conditions, GPS transceiver 264 can determine a physical location within millimeters for client device 200 ; and in other cases, the determined physical location may be less precise, such as within a meter or significantly greater distances. In one embodiment, however, mobile device may through other components, provide other information that may be employed to determine a physical location of the device, including for example, a MAC address, IP address, or the like.
- Mass memory 230 includes a RAM 232 , a ROM 234 , and other storage means. Mass memory 230 illustrates an example of computer readable storage media (devices) for storage of information such as computer readable instructions, data structures, program modules or other data. Mass memory 230 stores a basic input/output system (“BIOS”) 240 for controlling low-level operation of client device 200 . The mass memory also stores an operating system 241 for controlling the operation of client device 200 . It will be appreciated that this component may include a general-purpose operating system such as a version of UNIX, or LINUXTM, or a specialized client communication operating system such as Windows MobileTM, or the Symbian® operating system. The operating system may include, or interface with a Java virtual machine module that enables control of hardware components and/or operating system operations via Java application programs.
- BIOS basic input/output system
- Memory 230 further includes one or more data storage 248 , which can be utilized by client device 200 to store, among other things, applications 242 and/or other data.
- Applications 242 may include computer executable instructions which, when executed by client device 200 , perform actions.
- Other examples of application programs include calendars, search programs, email clients, IM applications, SMS applications, VOIP applications, contact managers, task managers, transcoders, database programs, word processing programs, security applications, spreadsheet programs, games, search programs, and so forth.
- applications 242 may include a browser plug in for playing protected premium video content.
- FIG. 3 shows one embodiment of a network device 300 , according to one embodiment of the invention.
- Network device 300 may include many more or less components than those shown. The components shown, however, are sufficient to disclose an illustrative embodiment for practicing the invention.
- Network device 300 may represent, for example, server 108 of FIG. 1 .
- Network device 300 may include processing unit 312 , video display adapter 314 , and a mass memory, all in communication with each other via bus 322 .
- the mass memory generally includes RAM 316 , ROM 332 , and one or more permanent mass storage devices, such as hard disk drive 328 , tape drive, optical drive, and/or floppy disk drive.
- the mass memory may store operating system 320 for controlling the operation of network device 300 . Any general-purpose operating system may be employed.
- BIOS Basic input/output system
- BIOS Basic input/output system
- network device 300 also can communicate with the Internet, or some other communications network, via network interface unit 310 , which may be constructed for use with various communication protocols including the TCP/IP protocol.
- Network interface unit 310 is sometimes known as a transceiver, transceiving device, or network interface-card (NIC).
- Computer-readable storage media may include volatile, nonvolatile, removable, and non-removable media implemented in any method or technology for storage of information, such as computer readable instructions, data structures, program modules, or other data.
- Examples of computer-readable storage media include RAM, ROM, EEPROM, flash memory or other memory technology, CD-ROM, digital versatile disks (DVD) or other optical storage, magnetic cassettes, magnetic tape, magnetic disk storage or other magnetic storage devices, or any other physical medium which can be used to store the desired information and which can be accessed by a computing device.
- Data stores 354 may include a database, text, spreadsheet, folder, file, or the like. Data stores 354 may further include program code, data, algorithms, and the like, for use by a processor, such as central processing unit (CPU) 312 to execute and perform actions. In one embodiment, at least some of data and/or instructions stored in data stores 354 might also be stored on another device of network device 300 , including, but not limited to cd-rom/dvd-rom 326 , hard disk drive 328 , or other computer-readable storage device resident on network device 300 or accessible by network device 300 over, for example, network interface unit 310 .
- the mass memory also stores program code and data.
- One or more applications 350 may be loaded into mass memory and run on operating system 320 .
- Examples of application programs may include transcoders, schedulers, calendars, database programs, word processing programs, Hypertext Transfer Protocol (HTTP) programs, customizable user interface programs, IPSec applications, encryption programs, authentication programs, security programs, SMS message servers, IM message servers, email servers, account managers, and so forth.
- HTTP Hypertext Transfer Protocol
- IPSec applications encryption programs
- authentication programs authentication programs
- security programs SMS message servers
- IM message servers email servers
- account managers and so forth.
- network device 300 may include further applications 350 to perform various functions discussed herein and/or discussed with regard to some of the steps as illustrated in the flowcharts shown below.
- These stored applications are processor-executable code encoded on a processor-readable medium, which, when executed by CPU 312 , enable actions to performed in accordance with the processor-executable code.
- actions may in some embodiments, rather than being performed only by executed software, may instead be performed based on hardware only, or by a combination of hardware and software.
- FIGS. 4-6 The operation of certain aspects of the invention will now be described with respect to FIGS. 4-6 .
- FIG. 4 illustrates a flow chart of an embodiment of process 470 .
- the process proceeds to block 491 , where a log file is received, in which the received log file includes encrypted log messages that indicate execution trace of obfuscated code while leaving code locations of corresponding code in the obfuscated code unknown.
- the encrypted log messages include execution way-point indices.
- the process then advances to block 493 , where at least a portion the log file is decrypted, for example, encrypted messages in the log file may be decrypted.
- the process then moves to block 495 , where a debug log viewer is employed to view the decrypted log file.
- the debug log viewer includes an execution way-point manifest that correlates each of the execution way-point indices to a corresponding code location. The process then proceeds to a return block, where other processing is resumed.
- the actions at blocks 491 , 493 , and 495 may be performed by a server such as server 108 of FIG. 1 in some embodiments.
- the log file may be received from a client device in some embodiments.
- FIG. 5 illustrates a flowchart of an embodiment of process 570 , which may be employed as an embodiment of process 470 of FIG. 4 in which public/private key pair encryption of the log messages is employed.
- the process proceeds to block 571 , where a software program is created by a developer.
- the process then advances to block 572 , where execution way-points are placed in the source code of the software program by the developer.
- the execution way-points may be entry and exit macros.
- Each execution way-point has a corresponding execution way-point index, which may be a non-descript string, or the like.
- the execution way-point itself gives no indication of the code location of the execution-waypoint.
- an execution way-point manifest is created at block 572 .
- the execution way-point manifest contains information such as the source file name and location within the source file where the execution way points were laid.
- the execution way-point manifest ties each of the execution way point indices to a location to the actual source.
- the client does not have access to the execution way-point manifest.
- the process then moves to block 575 , where the software program is compiled and obfuscated.
- the code is first complied and then obfuscated, and in other embodiments the code is first obfuscated and then complied.
- the obfuscation is accomplished by use of one or more obfuscation tools. The obfuscation removes all of the symbols that are normally used to trace the execution path in the software code, the code path is changed, and standard debugging methods are masked as a result of the obfuscation.
- the process then proceeds to block 576 , where the code is deployed by providing the code to a client.
- the process then advances to block 577 , where execution of the code begins.
- a symmetric key is generated, such as an Advanced Encryption Standard (AES) key in some embodiments.
- AES Advanced Encryption Standard
- the process then proceeds to block 579 , where encrypted log messages are generated.
- the execution way points become part of the code path providing a trace of execution when they are written to log messages.
- the execution-way points generate trace data, but there is no indication as to the code locations of the trace generated trace data.
- the log messages are then encrypted using the symmetric key.
- the log messages do not indicate where the code is in the execution path; the log messages simply use execution-way point indices that are non-descript strings that do not indicate where the code is in the execution path.
- the process then moves to decision block 580 , where a determination is made as to whether or not a triggering-event has occurred. If not, the process returns to block 579 , where execution of the code continues, and encrypted log messages are generated by the execution way-points as the code is executed.
- the process advances to block 581 , where the encrypted log messages are saved in a log file.
- the log file is saved by crash log facilities.
- the process then proceeds to block 582 , where the symmetric key is encrypted using a public key supplied within the software library. Block 582 may be done in a different time than indicated here; for example, in some embodiments, the symmetric key is encrypted immediately after the symmetric key is generated.
- the process then moves to block 583 , where the log file and the encrypted symmetric key are sent to a technician, such as at server 108 of FIG. 1 in some embodiments.
- the technician obtains the private key by other means.
- the process then proceeds to block 591 , where the log file and encrypted symmetric key are received (e.g., by server 108 ).
- the process then moves to block 592 , where the encrypted symmetric key is decrypted using the private key of the public-private key pair.
- the process then advances to block 593 , where the at least a portion of the log file is decrypted using the decrypted symmetric key.
- the process then proceeds to block 594 , where the execution way-point manifest and log files are loaded into the debug log viewer.
- the process then moves to block 595 , where the debug log viewer is employed to view the decrypted log file.
- the log view application on the debug log viewer performs the actions of blocks 591 - 595 .
- the execution way-point manifest includes a list of execution way-point indices and corresponding code locations. The function locations within the function library may accordingly be identified. The technician can use the debug log viewer to see where the crash happened based on where the trace stops. The process then proceeds to a return block, where other processing is resumed.
- white-box cryptography may be employed, as discussed below in one embodiment in conjunction with FIG. 6 .
- White-box cryptography is used to protect the generated symmetric key in environments in which malicious users can view, modify, delete, and insert into the code and data of program at will, both dynamically and statically.
- FIG. 6 illustrates a flowchart of an embodiment of process 670 , which may be employed as an embodiment of process 470 of FIG. 4 in which a pre-shared key with white-box cryptography is employed.
- the process proceeds to block 671 , where a software program is created by a developer.
- the process then advances to Block 672 , where execution way-points are placed in the source code of the software program by the developer.
- an execution way-point manifest is created.
- the execution way-point manifest contains information such as the source file name and location within the source file where the execution way points were laid.
- the execution way-point manifests ties the execution way point index for a location to the actual source.
- the process then proceeds to block 673 , where the library is built using white-box cryptography, such as AES white-box cryptography in some embodiments. That is, the library is built to include white-box cryptography module(s) that will subsequently be used to cause the log messages to be encrypted during execution.
- the process then advances to block 674 , where a log viewer is built employing the white-box cryptography pre-shared key.
- the process then moves to block 675 , where the software program is compiled and obfuscated.
- the code is first complied and then obfuscated, and in other embodiments the code is first obfuscated and then complied.
- the obfuscation is accomplished by use of one or more obfuscation tools.
- the obfuscation removes all of the symbols that are normally used to trace the execution path in the software code, the code path is changed, and standard debugging methods are masked as a result of the obfuscation.
- the process then proceeds to block 676 , where the code is deployed by providing the code to a client.
- the process then advances to block 677 , where execution of the code begins.
- the process then proceeds to block 679 , where encrypted log messages are generated.
- the execution way-points become part of the code path providing a trace of execution when they are written to log messages.
- the execution-way points generate trace, data, but there is no indication as to the code locations of the trace generated trace data.
- the log message encryption is accomplished using a pre-shared key with white-box cryptography.
- the process then moves to decision block 680 , where a determination is made as to whether or not a triggering event has occurred. If not, the process returns to block 679 , where execution of the code continued, and encrypted log messages are generated by the execution way-points as the code is executed.
- a triggering event such as a program crash in some embodiments
- the process advances to block 681 , where the encrypted log messages are saved in a log file.
- the log file is saved by crash log facilities.
- the process then moves to block 683 , where the log file is sent to a technician, such as at server 108 of FIG. 1 in some embodiments.
- the process then proceeds to block 691 , where the log file is received (e.g., by server 108 ).
- the process then advances to block 693 , where at least a portion of the log file is decrypted using the pre-shared private key.
- the decryption performed at block 693 is performed by a debug log viewer in some embodiments.
- the process then proceeds to block 694 , where the way-point manifest and log files are loaded into the log viewer.
- the process then moves to block 695 , where the log viewer is employed to view the decrypted log file.
- the execution way-point manifest includes a list of execution way-point indices and corresponding code locations. The function locations within the function library may accordingly be identified. The technician can use the log viewer to see where the crash happened based on where the trace stops.
- the process then proceeds to a return block, where other processing is resumed.
- an embodiment of a method such as that of FIG. 4 , FIG. 5 , or FIG. 6 may be employed in obfuscated digital rights management (DRM) products, obfuscated video optimization plugins, and similar software products that protect premium video content or other critical private data.
- the software may be security software that protects premium video content delivered over the internet, by encrypting the source file on a server side, decrypting the source file on the client side, and requesting a license with the equivalent of a decryption key, and providing the file to a renderer after decryption is performed.
- the software may be a client plug in within a browser so that DRM-protected video content may be viewed in the browser.
- the obfuscation provides protection by preventing unauthorized parties from performing reverse engineering and determining how to decrypt the key to decrypt and steal protected content.
- the video content or other private data is protected by use of obfuscation, but software programs may still be de-bugged by authorized parties using a method such as that discussed with regard to FIG. 4 , FIG. 5 , or FIG. 6 .
- the invention is not so limited, and may be used any application in which obfuscated libraries and/or the like are employed—in this way, authorized parties may troubleshoot defects and crashes and perform logging in spite of the obfuscation.
Abstract
Description
Claims (14)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/557,076 US9213841B2 (en) | 2012-07-24 | 2012-07-24 | Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/557,076 US9213841B2 (en) | 2012-07-24 | 2012-07-24 | Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries |
Publications (2)
Publication Number | Publication Date |
---|---|
US20140032932A1 US20140032932A1 (en) | 2014-01-30 |
US9213841B2 true US9213841B2 (en) | 2015-12-15 |
Family
ID=49996133
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/557,076 Expired - Fee Related US9213841B2 (en) | 2012-07-24 | 2012-07-24 | Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries |
Country Status (1)
Country | Link |
---|---|
US (1) | US9213841B2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150100834A1 (en) * | 2012-10-03 | 2015-04-09 | International Business Machines Corporation | Processing core data produced by a computer process |
US9830478B1 (en) | 2015-07-20 | 2017-11-28 | Semmle Limited | Logging from obfuscated code |
US10606656B2 (en) | 2017-09-07 | 2020-03-31 | Microsoft Technology Licensing, Llc | Dynamic command generation for automated control of computing machines |
US10698787B2 (en) * | 2018-10-31 | 2020-06-30 | Salesforce.Com, Inc. | Log event management mechanism |
Families Citing this family (17)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP2901348A4 (en) * | 2012-09-28 | 2016-12-14 | Hewlett Packard Entpr Dev Lp | Application randomization |
US20140337985A1 (en) * | 2013-05-08 | 2014-11-13 | Jorge Enrique Muyshondt | Security in Digital Manufacturing Systems |
RU2661910C1 (en) * | 2013-12-02 | 2018-07-23 | Мастеркард Интернэшнл Инкорпорейтед | Method and system for protected communication of remote notification service messages to mobile devices without protected elements |
US20150172050A1 (en) * | 2013-12-12 | 2015-06-18 | Nxp B.V. | Random data from gnss signals and secure random value provisioning for secure software component implementations |
US10275767B2 (en) | 2014-10-21 | 2019-04-30 | Mastercard International Incorporated | Method and system for generating cryptograms for validation in a webservice environment |
US9483381B2 (en) * | 2014-12-15 | 2016-11-01 | Dell Products L.P. | Obfuscating debugging filenames |
US9906505B2 (en) * | 2015-05-08 | 2018-02-27 | Nxp B.V. | RSA decryption using multiplicative secret sharing |
GB201522315D0 (en) | 2015-12-17 | 2016-02-03 | Irdeto Bv | Securing webpages, webapps and applications |
US10313383B2 (en) * | 2016-06-01 | 2019-06-04 | Mastercard International Incorporated | Systems and methods for use in evaluating vulnerability risks associated with payment applications |
US10394554B1 (en) * | 2016-09-09 | 2019-08-27 | Stripe, Inc. | Source code extraction via monitoring processing of obfuscated byte code |
US10778654B2 (en) * | 2016-09-16 | 2020-09-15 | Arris Enterprises Llc | Method and apparatus for protecting confidential data in an open software stack |
CN107861877A (en) * | 2017-11-21 | 2018-03-30 | 中国银行股份有限公司 | The encryption method and device of banking system automatic test message |
US11133925B2 (en) * | 2017-12-07 | 2021-09-28 | Palantir Technologies Inc. | Selective access to encrypted logs |
CN109542792B (en) * | 2018-11-28 | 2024-01-16 | 努比亚技术有限公司 | Bitmap processing method, bitmap processing equipment and computer readable storage medium |
US11809576B2 (en) * | 2020-01-30 | 2023-11-07 | Red Hat, Inc. | Establishing secure remote access to debug logs |
US11822641B2 (en) * | 2020-04-29 | 2023-11-21 | Red Hat, Inc. | Establishing controlled remote access to debug logs |
US11558190B2 (en) | 2020-12-07 | 2023-01-17 | International Business Machines Corporation | Using keys for selectively preventing execution of commands on a device |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6249882B1 (en) * | 1998-06-15 | 2001-06-19 | Hewlett-Packard Company | Methods and systems for automated software testing |
US6836881B2 (en) * | 2000-05-19 | 2004-12-28 | International Business Machines Corporation | Remote tracing of data processing nodes in an asynchronous messaging network |
US20050210275A1 (en) * | 1999-07-29 | 2005-09-22 | Intertrust Technologies Corporation | Software self-defense systems and methods |
US20080215891A1 (en) * | 1999-07-29 | 2008-09-04 | Horne William G | Systems and Methods for Watermarking Software and Other Media |
US20090119515A1 (en) * | 2005-10-28 | 2009-05-07 | Matsushita Electric Industrial Co., Ltd. | Obfuscation evaluation method and obfuscation method |
US20110067012A1 (en) * | 2008-05-23 | 2011-03-17 | Irdeto Canada Corporation | System and method for generating white-box implementations of software applications |
US20120170740A1 (en) * | 2011-01-05 | 2012-07-05 | Electronics And Telecommunications Research Institute | Content protection apparatus and content encryption and decryption apparatus using white-box encryption table |
US20130061210A1 (en) * | 2011-09-01 | 2013-03-07 | International Business Machines Corporation | Interactive debugging environments and methods of providing the same |
-
2012
- 2012-07-24 US US13/557,076 patent/US9213841B2/en not_active Expired - Fee Related
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6249882B1 (en) * | 1998-06-15 | 2001-06-19 | Hewlett-Packard Company | Methods and systems for automated software testing |
US20050210275A1 (en) * | 1999-07-29 | 2005-09-22 | Intertrust Technologies Corporation | Software self-defense systems and methods |
US20080215891A1 (en) * | 1999-07-29 | 2008-09-04 | Horne William G | Systems and Methods for Watermarking Software and Other Media |
US20100268958A1 (en) * | 1999-07-29 | 2010-10-21 | Intertrust Technologies, Corp. | Systems and Methods for Watermarking Software and Other Media |
US6836881B2 (en) * | 2000-05-19 | 2004-12-28 | International Business Machines Corporation | Remote tracing of data processing nodes in an asynchronous messaging network |
US20090119515A1 (en) * | 2005-10-28 | 2009-05-07 | Matsushita Electric Industrial Co., Ltd. | Obfuscation evaluation method and obfuscation method |
US20110067012A1 (en) * | 2008-05-23 | 2011-03-17 | Irdeto Canada Corporation | System and method for generating white-box implementations of software applications |
US20120170740A1 (en) * | 2011-01-05 | 2012-07-05 | Electronics And Telecommunications Research Institute | Content protection apparatus and content encryption and decryption apparatus using white-box encryption table |
US20130061210A1 (en) * | 2011-09-01 | 2013-03-07 | International Business Machines Corporation | Interactive debugging environments and methods of providing the same |
Non-Patent Citations (2)
Title |
---|
Jesse C. Rabek, et al., "Detection of Injected, Dynamically Generated and Obfuscated Malicious Code," Oct. 27, 2003, pp. 76-82. * |
S. Cimatto, A. De Santis, U. Ferraro Petrillo, "Overcoming the obfuscation of Java programs by identifier renaming," Jan. 8, 2005, The Journal of Systems and Software 78 (2005) 60-72, pp. 60-72. * |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150100834A1 (en) * | 2012-10-03 | 2015-04-09 | International Business Machines Corporation | Processing core data produced by a computer process |
US9542299B2 (en) * | 2012-10-03 | 2017-01-10 | Globalfoundries Inc. | Processing core data produced by a computer process |
US9830478B1 (en) | 2015-07-20 | 2017-11-28 | Semmle Limited | Logging from obfuscated code |
US10606656B2 (en) | 2017-09-07 | 2020-03-31 | Microsoft Technology Licensing, Llc | Dynamic command generation for automated control of computing machines |
US10698787B2 (en) * | 2018-10-31 | 2020-06-30 | Salesforce.Com, Inc. | Log event management mechanism |
Also Published As
Publication number | Publication date |
---|---|
US20140032932A1 (en) | 2014-01-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9213841B2 (en) | Method, manufacture, and apparatus for secure debug and crash logging of obfuscated libraries | |
US9875363B2 (en) | Use of generic (browser) encryption API to do key exchange (for media files and player) | |
CN109891424B (en) | Establishing links between identifiers without revealing specific identifying information | |
CN108632284B (en) | User data authorization method, medium, device and computing equipment based on block chain | |
CN111143890B (en) | Calculation processing method, device, equipment and medium based on block chain | |
Zhou et al. | Identity, location, disease and more: Inferring your secrets from android public resources | |
US20150039908A1 (en) | System and Method for Securing A Credential Vault On A Trusted Computing Base | |
CN110417543B (en) | Data encryption method, device and storage medium | |
WO2022066910A1 (en) | Monitoring encrypted network traffic | |
Shahzad et al. | Security issues and challenges of mobile cloud computing | |
US8914893B2 (en) | Method and system for mobile information security protection | |
US8904195B1 (en) | Methods and systems for secure communications between client applications and secure elements in mobile devices | |
CN104520873A (en) | Systems and methods for securing and restoring virtual machines | |
CN109768977B (en) | Streaming media data processing method and device, related equipment and medium | |
CN107103211B (en) | SDK send, using publication, using operation method and device | |
CN106598584A (en) | Resource file processing method, apparatus and system | |
CN108306739A (en) | A kind of method, server and computer equipment for detecting subscriber identity information | |
CN109460674A (en) | A kind of JAVA application program guard method | |
Heinrich et al. | OpenHaystack: a framework for tracking personal bluetooth devices via Apple's massive find my network | |
US10764059B2 (en) | Communications security systems and methods | |
Tedeschi et al. | Information security and threats in mobile appliances | |
US8595481B1 (en) | Method, manufacture, and apparatus for centralized wifi encryption for guest | |
US11755722B2 (en) | Sandboxed application extensions | |
TW201349801A (en) | E-mail searching method with privacy protection | |
US20150288518A1 (en) | Algorithm-agnostic approach for systematically hardening encryption |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HIAR, EDWARD CHARLES;FRIAS, RAHUL RICARDO;MACLEAN, DUNCAN;REEL/FRAME:028627/0782Effective date: 20120720 |
|
ZAAA | Notice of allowance and fees due |
Free format text: ORIGINAL CODE: NOA |
|
ZAAB | Notice of allowance mailed |
Free format text: ORIGINAL CODE: MN/=. |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20231215 |