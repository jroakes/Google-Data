CN108140417B - Shift register with reduced wiring complexity - Google Patents
Shift register with reduced wiring complexity Download PDFInfo
- Publication number
- CN108140417B CN108140417B CN201680059741.4A CN201680059741A CN108140417B CN 108140417 B CN108140417 B CN 108140417B CN 201680059741 A CN201680059741 A CN 201680059741A CN 108140417 B CN108140417 B CN 108140417B
- Authority
- CN
- China
- Prior art keywords
- shift
- data
- unit cell
- assigned
- input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 238000012545 processing Methods 0.000 claims description 22
- 238000006073 displacement reaction Methods 0.000 claims 2
- 230000002457 bidirectional effect Effects 0.000 claims 1
- 238000013461 design Methods 0.000 description 28
- 230000006870 function Effects 0.000 description 28
- 238000000034 method Methods 0.000 description 19
- 230000008569 process Effects 0.000 description 10
- 230000008878 coupling Effects 0.000 description 9
- 238000010168 coupling process Methods 0.000 description 9
- 238000005859 coupling reaction Methods 0.000 description 9
- 238000013459 approach Methods 0.000 description 5
- 230000015572 biosynthetic process Effects 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 238000003786 synthesis reaction Methods 0.000 description 3
- 235000008694 Humulus lupulus Nutrition 0.000 description 2
- 230000006399 behavior Effects 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 230000003915 cell function Effects 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 238000004891 communication Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- ODCKICSDIPVTRM-UHFFFAOYSA-N [4-[2-hydroxy-3-(propan-2-ylazaniumyl)propoxy]naphthalen-1-yl] sulfate Chemical compound C1=CC=C2C(OCC(O)CNC(C)C)=CC=C(OS(O)(=O)=O)C2=C1 ODCKICSDIPVTRM-UHFFFAOYSA-N 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 238000004590 computer program Methods 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000003384 imaging method Methods 0.000 description 1
- 230000002452 interceptive effect Effects 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000007620 mathematical function Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000004806 packaging method and process Methods 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 238000009877 rendering Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C19/00—Digital stores in which the information is moved stepwise, e.g. shift registers
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C19/00—Digital stores in which the information is moved stepwise, e.g. shift registers
- G11C19/38—Digital stores in which the information is moved stepwise, e.g. shift registers two-dimensional, e.g. horizontal and vertical shift registers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs
- G06F15/163—Interprocessor communication
- G06F15/173—Interprocessor communication using an interconnection network, e.g. matrix, shuffle, pyramid, star, snowflake
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/76—Architectures of general purpose stored program computers
- G06F15/80—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors
- G06F15/8007—Architectures of general purpose stored program computers comprising an array of processing units with common control, e.g. single instruction multiple data processors single instruction multiple data [SIMD] multiprocessors
- G06F15/8015—One dimensional arrays, e.g. rings, linear arrays, buses
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/20—Processor architectures; Processor configuration, e.g. pipelining
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C19/00—Digital stores in which the information is moved stepwise, e.g. shift registers
- G11C19/28—Digital stores in which the information is moved stepwise, e.g. shift registers using semiconductor elements
-
- G—PHYSICS
- G11—INFORMATION STORAGE
- G11C—STATIC STORES
- G11C7/00—Arrangements for writing information into, or reading information out from, a digital store
- G11C7/10—Input/output [I/O] data interface arrangements, e.g. I/O data control circuits, I/O data buffers
- G11C7/1075—Input/output [I/O] data interface arrangements, e.g. I/O data control circuits, I/O data buffers for multiport memories each having random access ports and serial ports, e.g. video RAM
-
- H—ELECTRICITY
- H01—ELECTRIC ELEMENTS
- H01L—SEMICONDUCTOR DEVICES NOT COVERED BY CLASS H10
- H01L27/00—Devices consisting of a plurality of semiconductor or other solid-state components formed in or on a common substrate
- H01L27/14—Devices consisting of a plurality of semiconductor or other solid-state components formed in or on a common substrate including semiconductor components sensitive to infrared radiation, light, electromagnetic radiation of shorter wavelength or corpuscular radiation and specially adapted either for the conversion of the energy of such radiation into electrical energy or for the control of electrical energy by such radiation
- H01L27/144—Devices controlled by radiation
- H01L27/146—Imager structures
-
- H—ELECTRICITY
- H01—ELECTRIC ELEMENTS
- H01P—WAVEGUIDES; RESONATORS, LINES, OR OTHER DEVICES OF THE WAVEGUIDE TYPE
- H01P5/00—Coupling devices of the waveguide type
- H01P5/12—Coupling devices having more than two ports
-
- H—ELECTRICITY
- H03—ELECTRONIC CIRCUITRY
- H03K—PULSE TECHNIQUE
- H03K19/00—Logic circuits, i.e. having at least two inputs acting on one output; Inverting circuits
- H03K19/02—Logic circuits, i.e. having at least two inputs acting on one output; Inverting circuits using specified components
- H03K19/173—Logic circuits, i.e. having at least two inputs acting on one output; Inverting circuits using specified components using elementary logic circuits as components
- H03K19/177—Logic circuits, i.e. having at least two inputs acting on one output; Inverting circuits using specified components using elementary logic circuits as components arranged in matrix form
- H03K19/17736—Structural details of routing resources
- H03K19/17744—Structural details of routing resources for input/output signals
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N23/00—Cameras or camera modules comprising electronic image sensors; Control thereof
- H04N23/10—Cameras or camera modules comprising electronic image sensors; Control thereof for generating image signals from different wavelengths
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N5/00—Details of television systems
- H04N5/76—Television signal recording
- H04N5/907—Television signal recording using static stores, e.g. storage tubes or semiconductor memories
Abstract
A shift register is described. The shift register includes a plurality of cells and a register space. The shift register comprises a circuit having an input for receiving shift data and an output for transmitting shift data, wherein: i) circuitry of a cell physically located between the first and second logically-ordered cells is configured not to perform any logical shift; ii) the circuitry of the unit coupled to receive shifted data transmitted by an immediately preceding logically ordered unit comprises circuitry for writing data received at an input assigned a shift amount specified in a shift command being executed by the shift register into local register space, and iii) the circuitry of the unit coupled to transmit shifted data to an immediately succeeding logically ordered unit comprises circuitry for transmitting data from an output assigned an incremented shift amount according to the shift amount of the input on which the data was received.
Description
Related case
This application claims the benefit of U.S. provisional application No.62/263,530 entitled "Shift Register With Reduced Wiring Complexity" filed on 12, month 4, 2015, which is incorporated by reference in its entirety.
Technical Field
The field of invention relates generally to computing science and, more particularly, to a shift register with reduced wiring complexity.
Background
Image processing typically involves the processing of pixel values organized into an array. Here, a two-dimensional array of spatial tissue captures the two-dimensional nature of the image (additional dimensions may include time (e.g., a sequence of two-dimensional images) and data type (e.g., color)). In a typical scenario, the arrayed pixel values are provided by a camera that has generated a still image or a series of frames to capture a moving image. Conventional image processors typically fall on either side of two extremes.
The first extreme performs the image processing tasks as software programs executing on a general purpose processor or general purpose class of processors (e.g., a general purpose processor with vector instruction enhancement functionality). While the first extreme typically provides a highly versatile application software development platform, its use of finer-grained data structures combined with associated overhead (e.g., instruction pre-fetching and decoding, processing of on-chip and off-chip data, speculative execution) ultimately results in a greater amount of energy being consumed per unit of data during execution of program code.
The second opposite pole applies fixed function hard-wired circuitry to much larger blocks of data. The use of larger (as opposed to finer granularity) blocks of data directly applied to custom designed circuits greatly reduces power consumption per unit of data. However, the use of custom designed fixed function circuits generally results in a limited set of tasks that the processor is capable of performing. Thus, a widely common programming environment (which is associated with the first extreme) is lacking in the second extreme.
A technology platform that provides both highly versatile application software development opportunities and improved power efficiency per unit data remains a desirable but lacking solution.
Disclosure of Invention
A shift register is described. The shift register includes a plurality of cells and a register space. The shift register comprises a circuit having an input for receiving shift data and an output for transmitting shift data, wherein: i) circuitry of a cell physically located between the first and second logically-ordered cells is configured not to perform any logical shift; ii) the circuitry of the unit coupled to receive shifted data transmitted by an immediately preceding logically ordered unit comprises circuitry for writing data received at an input assigned a shift amount specified in a shift command being executed by the shift register into local register space, and iii) the circuitry of the unit coupled to transmit shifted data to an immediately succeeding logically ordered unit comprises circuitry for transmitting data from an output assigned an incremented shift amount according to the shift amount of the input on which the data was received.
A unit of a shift register is described, the unit having means for receiving respective data items on respective inputs, wherein the inputs are each assigned a different respective shift amount. The unit for the shift register also has means for writing one of the data items received on one of the inputs with a shift amount specified by a shift command into register space. The means for the shift register also has means for transmitting other ones of the data items from respective outputs assigned incrementally higher amounts of shift than those amounts of shift at the respective inputs at which the other ones of the data items were respectively received, wherein the incrementally higher amounts of shift are less than the amounts of shift specified by the shift command. The unit of the shift register also has means for reading data items from the register space and sending the read data items from the output assigned a shift amount with a magnitude of 1.
Drawings
The following description and the annexed drawings set forth in detail certain illustrative embodiments of the invention. In the drawings:
FIG. 1 shows a closed loop shift register;
FIG. 2a shows a closed loop shift register with cells laid out in a non-strict logical order;
FIG. 2b shows a closed loop shift register with cells laid out in a non-strict logical order and supporting different amounts of shift in a single cycle;
FIG. 3 shows an architecture of an improved shift register for supporting different shift amounts in a single cycle;
FIG. 4 illustrates a unit cell design for a support logic circuit for the cells of the shift register of FIG. 3;
FIGS. 5a, 5b and 5c show different shift operations performed by the shift register;
FIG. 6 illustrates a shift operation by a shift register having a different physical layout than the shift registers of FIGS. 5a, 5b and 5 c;
FIG. 7 shows a shift unit cell logic circuit design;
FIG. 8 shows a bi-directional shift register;
FIG. 9 shows a two-dimensional shift register array;
FIG. 10 shows a design for a two-dimensional shift register array using the shift registers of the present application;
FIG. 11 illustrates the coupling between horizontal and vertical shift registers of a two-dimensional shift register;
FIG. 12 shows the coupling between horizontal and vertical shift register unit cell circuits of a two-dimensional shift register;
FIG. 13 illustrates a methodology performed by a shift register as described herein;
FIG. 14 illustrates a stencil (stencil) processor assembly of the image processor;
FIG. 15 illustrates a computing system.
Detailed Description
Fig. 1 shows an exemplary closed loop shift register circuit 100 having a dimension of eight. Here, unique data is stored in each of the eight cells. After the shift command, the contents of each register will shift one cell "to the right" for all but the eighth cell, which rolls its contents back to the first cell. That is, cell 0 will have its content shifted into cell 1, cell 1 will have its content shifted into cell 2, and so on, and cell 7 will have its content shifted into cell 0.
Fig. 1 depicts an exemplary physical layout of a shift register. As observed in fig. 1, the cells are physically laid out in logical order. That is, cell 0 is physically next to cell 1, cell 1 is physically next to cell 2, and so on. A problem with physically laying out cells in logical order is the length of the line 101. Here, as understood in the art, a longer line corresponds to more resistance and capacitance for a given drive strength and thus a slower propagation delay (or conversely, if the line 101 is to be driven with the same propagation delay as a shorter length line between other cells, then the output driver of cell 7 has more power consumption). Here, the signal line is RC dominant. So once a repeater is inserted, the delay scales linearly with distance. Given that line 101 has a longer propagation delay than shorter lines between other cells, the performance of shift register 100 is limited by line 101 even though cells 0 to 6 with much shorter output lines can shift their contents much faster to their neighboring cells than cell 9 can shift their contents into cell 0.
A solution to the problem described immediately above is to physically lay out the cells of the shift register in a different order than their logical order. Fig. 2a demonstrates this approach for the shift register of fig. 1. As observed in fig. 2a, cell 1 is physically next to cell 5. By physically laying out the cells in an order different from their logical order, the longest line in the shift register of fig. 2a is shorter than the line 101 of fig. 1, which in turn corresponds to a better performance possible with the shift register of fig. 2a compared to the shift register of fig. 1.
The two shift registers of fig. 1 and 2a depict only a +1 shift register (a shift register is only capable of shifting the data content to the right by a distance of one logical unit cell). Fig. 2b shows the shift register of fig. 2a in a case where it is further designed to support +2 shift and +1 shift. That is, in a single cycle, any cell of the shift register of FIG. 2b may have its contents shifted into its next logical neighbor or its next logical neighbor.
For example, from the direct wiring of fig. 2b, cell 0 may have its contents shifted into cell 1 (via line 201) or into cell 2 (via line 202). However, a problem with the direct wiring approach of fig. 2b is wiring complexity. In brief, comparing fig. 2a and 2b, by introducing only one more logic shift, a large number of longer lines are introduced into the circuit of fig. 2b compared to the circuit of fig. 2 a. The wiring complexity problem aggravates itself for larger dimension shift registers (in terms of the number of unit cells) and/or shift registers that support a wider range of logical shifts (e.g., +1, +2, +3, and + 4). Using r registers, to support a shift of + n, the method of fig. 2b would require r × n lines, with the longest line being 2 × n (n-1) unit lengths.
Thus, for example, for large-dimensional shift registers with a wide variety of logic shift options where higher performance and reduced power consumption are desired, better shift register designs are needed.
Fig. 3 shows the physical architecture of an improved shift register design 300. As observed in fig. 3, shift register 300 can be viewed as a unit cell whose support logic has an upper portion 301 and a lower portion 302. The logical and physical shifts occur in one direction in a "loop" around the shift register. In various embodiments, the upper portion 301 may be envisioned as physically shifting in one direction (e.g., to the right), while the lower portion 302 may be envisioned as physically shifting in another direction (e.g., to the left), with all logical shifts being in the same direction (e.g., positive or "+"). As observed in fig. 3, the respective logic circuits 303_0 to 303_ N supporting each unit cell may perform shifting in two physical directions.
Fig. 4 shows unit cell logic circuit designs 401, 402 for the support logic circuits 303_1 to 303_ N of fig. 3. Each unit cell logic design 401, 402 of fig. 4 can support shifting in one direction. Thus, each instance of support logic 303_1 to 303_ N of the shift register of fig. 3 has two instances of unit cell logic selected from the unit cell logic designs 401, 402 of fig. 4 (i.e., one selected unit cell logic design per direction, or in other words, one selection for the upper portion and one selection for the lower portion).
As described in more detail further below, which particular unit cell logic design is selected for any particular direction/portion of the support logic for any particular unit cell is a function of the physical layout location of each cell relative to the overall logical relationship between the unit cells of the shift register. Thus, depending on their logical identifier and physical location within the shift register, some unit cells may have two instances of unit cell 401, while other unit cells may have two instances of unit cell 402, while still other unit cells may have one instance of unit cell 401 and one instance of unit cell 402. For example only, the unit cells 401, 402 of FIG. 4 are used in a shift register that can perform +1, +2, +3, and +4 logical shifts. Other shift amount schemes are possible while still complying with the overall design methodology as described in detail below.
The two unit cells of fig. 4 include a shifted unit cell 401 and a non-shifted (or "through") unit cell 402. The shift unit cell 401 receives input data content from neighboring cells. Here, each input represents an amount of logical shift that has been applied to data received at the input. For example, data received at the +1 input has been logically shifted once when it is received at the shift unit cell 401, data received at the +2 input has been logically shifted twice when it is received at the shift unit cell 401, data received at the +3 input has been logically shifted when it is received at the shift unit cell 401, and data received at the +4 input has been logically shifted four times when it is received at the shift unit cell 401.
The shifting unit 401 also has an output indicating how much the data being transmitted has been shifted since the shifting unit 401 transmitted it. That is, the +1 output corresponds to data that has been shifted once at the time it was transmitted by the shift unit 401, the +2 output corresponds to data that has been shifted twice since it was transmitted by the shift unit 401, the +3 output corresponds to data that has been shifted three times since it was transmitted by the shift unit 401, and the +4 output corresponds to data that has been shifted four times since it was transmitted by the shift unit 401.
By definition, the data sent at the +1 output is read from the local register space 403 of the unit cell. That is, the data read from the local register 403 and transmitted from the unit cell 401 to the next cell is shifted by +1 from the time it is transmitted. Thus, the +1 output is coupled to the local register space 403 of the shift unit cell 401. Similarly, the data transmitted from the +2 output terminal must have been shifted by +1 since it was received by the shift unit cell 401. Thus, the +2 output is fed directly from the +1 input. For similar reasons, the +3 output is directly fed by the +2 input and the +4 output is directly fed by the +3 input.
The processing applied by the shift unit to the input data depends on the shift amount command (e.g., +1, +2, +3, + 4). For inputs corresponding to a shift amount less than the shift command (e.g., input data is received at the +1 input and the shift command is +3), shift unit 401 retransmits the input data on the next higher shift output (e.g., for the +3 shift command, data is read from local register 403 and sent at the +1 output, data received at the +1 input is sent from the +2 output and data received at the +2 input is sent from the +3 output). For input data received at an input with the same shift amount as the shift command (e.g., input data received at the +3 input and the shift command is +3), the unit cell stores the input data in its local register space 403. As will become apparent from the discussion below, inputs and outputs having a shift amount greater than the shift command are naturally unused by these units (e.g., no data is present at either the +4 input or the +4 output of any unit for a +3 shift command).
In an embodiment, the local register space 403 is twice the data width and has shifting capability within itself. Here, during a first time frame (e.g., a first one-half cycle), data is read from the "first" half of the register space 403_1 and propagates through the shift register between unit cells along its appropriate input/output path. During a second time frame (e.g., a second half of a cycle), data is written into the "second" half of the register space 403_2 locally at each unit cell. Which portion of the register space 403 to read from (i.e., which half is the "first" half) and which portion to write to (i.e., which half is the "second" half) is switched between successive cycles. According to this process, various amounts of shifting (e.g., +1, +2, +3, and +4) may each occur in a single cycle. It is noted, however, that other methods for implementing register space may be used. For example, a flip-flop based multi-port register file that reads or updates all data on a clock edge may be used in another embodiment. Other possible embodiments are possible.
Pass through cells 402 are used to allow physical placement of cells in a different order than logical order without interfering with schemes that assign certain shift amounts to certain inputs/outputs of shift cells. That is, the correct logical shift order is preserved by pass-through unit 402 by feeding each output node the same shift amount as received at the input node. Thus, if two shift unit cells in a logical order physically have one or more other cells between them, then these other cells have pass-through cells to hold the correct amount of shift as sent at the output of the sending unit cell and as received at the input of the receiving shift unit cell.
Fig. 5a to 5c explore the data paths established by shift registers supporting shifts of +1, +2, +3, and +4 for dimension ten. Consistent with the above discussion, the support logic for each cell may be viewed as having an upper half with four inputs and four outputs that shift data in one direction ("right"), and a lower half that also has four inputs and four outputs that shift data in another direction ("left"). Note that the cells are physically laid out in an order other than purely logical order (not every cell is physically next to its logically ordered neighbors).
As will be clear from the following discussion, the support logic circuits of unit cells 1, 2, 3, and 4 have shift unit cells in their upper half and pass-through unit cells in their lower half. In contrast, the support logic for the unit cells 9, 8, 7, 6 has a through unit cell in its upper half and a shift unit cell in its lower half. The unit cell 5 is composed of a receiving part of the shift unit cell in an upper part thereof and a transmitting part of the shift unit cell in a lower part thereof. The unit cell 0 is composed of a receiving part of a shift unit cell in a lower part thereof and a transmitting part of a shift unit cell in an upper part thereof. For both cell 0 and cell 5, the input of the receive section is wired to the transmit section consistent with the design of the shift unit cell 401.
Fig. 5a illustrates the operation of the +1 shift. Here, in the case where each of units 1 to 4 is physically next to its logical order neighbor on its receiving side, the upper portion of each unit will receive data directly from its correct logical neighbor. Thus, as mentioned above, the upper part of the units 1 to 4 is observed to implement the correct shifting function for +1 shifting. That is, the upper portion of each of units 1 through 4 receives data at its +1 input and stores it in its local register space. Additionally, each of unit cells 1 through 4 reads data from its local register space and sends it from its +1 output.
The unit cells 4 and 5 are physically separated by unit cells 9, 8, 7 and 6. Therefore, the upper half of the unit cells 9, 8, 7, and 6 is observed to perform the through function. Because the upper half of the unit cells 9, 8, 7 and 6 perform the pass-through function, the unit cell 5 receives the data sent by the unit cell 4 at the input reflecting the correct amount of shift (i.e. at its +1 input). Thus, the upper part of the unit cell 5 is observed to perform the receive side function of the shift unit cell. The lower part of the unit cell 5 performs the transmit side function of the shift unit cell. The lower portion of the overall shift register performs the same as the upper portion but in a different direction (except that unit cell 0 performs a receive-side shift unit function in its lower portion and a transmit-side shift unit function in its upper portion). Note that only the +1 inputs and outputs are used by the unit cell logic for all cells. That is, the +2, +3, and +4 input terminals and output terminals of all unit cells do not transmit any data.
Fig. 5b shows the same shift register performing a +2 shift. Here again, the upper portions of cells 1-4 are observed to perform the shift unit cell function for +2 shifts. Each unit of these units locally stores the data it receives at its +2 input, transmits the contents of its local register from its +1 output, and transmits the data it receives at its +1 input from its +2 output. Note here that the cell is utilizing +1 and +2 data inputs and outputs, but not +3 and +4 inputs and outputs. Similarly, the pass-through function performed by the upper portion of unit cells 9, 8, 7, and 6 utilizes both +1 and +2 inputs and outputs. As before, the end unit 5 performs the +2 receive side shift unit function in its top portion and the +2 transmit shift unit function in its bottom portion. Likewise, the end unit 0 performs a +2 receiving-side shift unit function in its lower portion and a +2 transmitting-side shift unit function in its top portion.
Fig. 5c shows the same shift register performing a +3 shift. The upper portions of cells 1-4 are observed to perform the shift unit cell function for +3 shifts. Each of these units stores locally the data it receives at its +3 input, transmits the contents of its local register from its +1 output, transmits the data it receives at its +1 input from its +2 output, and transmits the data it receives at its +2 input from its +3 output. Note here that the unit cell is utilizing +1, +2, and +3 data inputs and outputs, but not the +4 input and output. The pass-through function performed by the upper portion of the unit cells 9, 8, 7 and 6 utilizes +1, +2 and +3 inputs and outputs. As before, the end unit 5 performs the +3 receiving-side shift unit function in its upper portion and the +3 transmitting-side shift unit function in its lower portion. Likewise, the end unit 0 performs a +3 receiving-side shift unit function in its lower portion and a +3 transmitting-side shift unit function at its upper portion.
Fig. 6 shows another dimension ten shift register designed according to the same principles described above except that the physical layout is different. Here, rather than a set of five cells and a set of five adjacent pass cells laid out in logical order (as with the designs of fig. 5 a-5 c), the design of fig. 6 has a set of two cells and a set of two adjacent pass cells laid out in logical order, in contrast. Fig. 6 shows +1 shifting performed by the shift register of fig. 6.
Comparing the shift register of fig. 5a with the shift register of fig. 6, it is noted that the shift register of fig. 5a can be characterized as having a larger number of shortest possible distance hops (8 hops of one cell distance in fig. 5 a) compared to the shift register of fig. 6 (4 hops of one cell distance in fig. 6). Additionally, the shift register of fig. 5a has a longer maximum distance jump than the shift register of fig. 6 (the shift register of fig. 5a has a maximum jump distance of 5 cells, whereas the shift register of fig. 6 has a maximum jump distance of 3 cells).
Therefore, the shift register of fig. 6 should be faster than the shift register of fig. 5 b. The general principle or property of this circuit is that the cells can be physically grouped in logical order up to the maximum amount of shift of the registers before the delay (distance) increases. The shift register of fig. 5a physically groups cells in logical order by an amount (5) greater than the maximum shift register amount (4), whereas the shift register of fig. 6 does not. Thus, again, the circuit of fig. 6 should be faster than the circuit of fig. 5 a.
Fig. 7 shows an embodiment 701 of a logic design for a shift unit cell 401. Here, switch 701 selects which shift input is to be written to its local register space based on the shift command. That is, the shift amount specified by the shift command is directed to the channel selection input of the changeover switch 701. The circuit also utilizes internal control signals, the first of which indicates whether any shift is occurring (+1, +2, +3, or +4) and which is used to enable the +1 output. The second internal control signal indicates whether a +2, +3, or +4 shift is occurring and is used to enable the +2 output. The third internal control signal indicates whether a +3 or +4 shift is occurring and is used to enable the +3 output. The fourth internal control signal indicates whether a +4 shift is occurring and is used to enable the +4 output. A data path is understood to be a multi-bit data path such that wide data words can be transmitted along them.
The above discussion has focused on shift registers that shift in one direction (+ or "right"). Fig. 8 shows a high level view of a bi-directional register that can be shifted in two directions (+ right and-left). Here, the bi-directional shift register is implemented by constructing the supporting unit cell logic 801 for the + shift register and constructing the supporting unit cell logic 802 for the-shift register and coupling the same logic cells for both directions to the same register space 803 (for simplicity fig. 8 shows the coupling for only one cell). The logic design for + shift register 801 is, for example, the same as described above for fig. 5 a-5 c and 6, except that the shift and data flow directions are in a counter-clockwise direction rather than a clockwise direction, however the logic design for-shift register 802 is also the same as described above for fig. 5 a-c. To implement + shifting, + logic 801 is used and-logic is not used. To implement-shift use-logic 802 and not use + logic 801. Thus, the mobile station can move in either direction without consuming additional line resources. That is, the wire is shared between the + shift and shift directions. For example, the data +4 output line of FIG. 7 may also implement a bypass line for the data-4 input line for the same cell. Thus, the present design allows for significant wiring reduction efficiency.
Fig. 9 shows a two-dimensional shift register array 900. As observed in fig. 9, the two-dimensional shift register array includes a number of registers or register rows that effectively form a two-dimensional array of registers. The arrows between the cells indicate that the two-dimensional register array can be moved to the right, left, up, or down (for ease of drawing the loop back capability along any row or column is not depicted, but may be present). Thus, a two-dimensional SHIFT register array may support SHIFT commands of the form SHIFT (+/-X; +/-) where X corresponds to the amount of SHIFT along the row axis, Y corresponds to the amount of SHIFT along the column axis, and the polarity (+ or-) indicates the direction of SHIFT along either axis (left or right along the row axis and up or down along the column axis). The two-dimensional shift register may be implemented, for example, in an imaging process as described in further detail below.
Fig. 10 shows a high level view of a two-dimensional shift register constructed in accordance with the basic shift register design described in detail above with respect to fig. 3-6. Here, the logic circuit instances 1001_1 to 1001_ N respectively implement a unit cell logic circuit for shift registers along a particular row axis, wherein each shift register implements the shift register design principles discussed above. The circuit 1001_1 corresponds to a logic circuit for implementing a shift register along a first row, the circuit 1001_2 corresponds to a logic circuit for implementing a shift register along a second row, and the like. For ease of depiction, the circuit indicates shifting capability in only one direction, however, each of the instances 1001_1 through 1001_ N may implement bi-directional shifting capability consistent with the principles described above with respect to fig. 8.
Similarly, logic circuit instances 1002_1 through 1002_ M accordingly implement a unit cell logic circuit for shift registers along a particular column axis, where each shift register implements the shift register design principles discussed above. The circuit 1002_1 corresponds to a logic circuit for implementing a shift register along a first column, the circuit 1002_2 corresponds to a logic circuit for implementing a shift register along a second column, and the like. Again, for ease of drawing, the circuit indicates shifting capability in only one direction, however, each of the instances 1002_1 through 1002_ N may implement bi-directional shifting capability consistent with the principles described above with respect to fig. 8.
Note that circuit examples 1001, 1002 of fig. 10 depict a logic circuit for realizing a unit of a shift register having a circuit 1001 representing horizontal shift capability and a circuit 1002 representing vertical shift capability. Horizontal shift and vertical unit cell shift circuits associated with the same array cell are coupled to the same register space. To realize the horizontal shift, the horizontal shift circuits 1001_1 to 1001_ M are used to realize the horizontal shift along all the rows and to realize the vertical shift, and the vertical shift circuits 1002_1 to 1002_ M are used to realize the vertical shift along all the columns.
A problem of implementing a two-dimensional SHIFT register is to couple the horizontal SHIFT circuit 1001 to the vertical SHIFT circuit 1002 so that, for example, horizontal SHIFT and vertical SHIFT can be performed with a single command (e.g., SHIFT (+3, + 4)). Fig. 11 shows the physical layout of a 10 × 10 two-dimensional shift register array, where each row register circuit implements the physical cell layout of fig. 5a to 5c and each column register circuit implements the physical layout of fig. 5a to 5 c. Here, the cells of the array contain a numerical syntax of the form Q/R, where Q represents a vertical logical cell assignment and R represents a horizontal logical cell assignment (the "row" and "column" labels appearing along the left and top edges of FIG. 11 correspond to physical rows and columns). Thus, looking only at the R values across any row, the cell patterns of fig. 5 a-5 c are identifiable. Additionally, looking only at the Q values across any column, the cell patterns of fig. 5 a-5 c are also identifiable.
If only horizontal shifting is required, data shifting occurs only along the rows (only circuit instance 1001 of FIG. 10 is used). If only a vertical shift is required, then the data shift occurs only along the columns (only circuit instance 1002 of FIG. 10 is used). If both horizontal and vertical shifting is to occur, then, for example, in an implementation where the data elements are first shifted horizontally and then vertically, it is necessary to shift the data elements correctly from a particular row to the correct logical vertical elements. For example, all cells along row 0 are identified as being within vertical logical cell 0 (each of which has an R value of 0). To perform the shift up of +1, the contents of each cell of row 0 need to be shifted into cells having a vertical logic value of 1 (i.e., the contents need to be shifted into cells each having a Q value of 1). The arrow 1101 thus shows the physical wiring that logically performs the correct shift.
FIG. 12 shows an example of coupling between horizontal shift logic and vertical shift logic. Here, for example, the shift unit cell 1201 corresponds to a horizontal shift logic for any cell of row 0 in fig. 11. The shift unit cell 1202 thus corresponds to the vertical shift logic of the cell into which the horizontal shift logic 1201 shifts in to convert the data shift from horizontal to vertical movement. In this particular example, vertical shift logic 1202 corresponds to vertical shift logic in the same column as horizontal shift logic 1201 but with a logical vertical value of 1 (i.e., with a Q value of 1). Thus, for example, the circuit 1201 corresponds to a horizontal shift circuit for the unit 1102 of fig. 11 and the circuit 1202 corresponds to a vertical shift circuit for the unit 1103 of fig. 11.
The behavior of a shift from the horizontal dimension to the vertical dimension corresponds to a horizontal shift of + 1. Thus, data is received at the +1 input of the next higher vertical logic value cell (e.g., from cell 1102 having a Q value of 0 to cell 1103 having a Q value of 1). Once the data has been shifted into the vertical shift circuit at the +1 input, the operation of the vertical shift circuit operates as described in detail above (e.g., if a +2 vertical shift is required, the +1 vertically shifted data will be shifted up to the +2 signal line and written into the register of the next logically higher cell.
The horizontal to vertical coupling would be similar to the coupling 1101 for each of the rows 0 to 3 of fig. 11. Coupling 1104 is relatively long because the coupling from logic Q4 to logic Q5 requires a jump from row 4 to row 9. Note that in fig. 12, a changeover switch 1203 is present. Here, according to the embodiment, the horizontal shift is performed before the vertical shift for any shift command. Upon completion of all horizontal shifts to satisfy the shift command, if a vertical shift is not specified in the command, the changeover switch 1203 enables a channel written to the local register of the horizontal shift circuit 1201. In contrast, if the command specifies vertical shifting, the changeover switch 1203 starts the channel of routing data up to the vertical shifting circuit 1202 upon completion of all horizontal shifting specified by the shift command. If only a vertical shift of +1 is specified, then the data is written into the local register space of shift circuit 1202. If more vertical shifts are specified, the data shifted from the unit cell 1201 to the unit cell 1202 is transmitted from the +2 output terminal of the unit cell 1202.
It is noted that the circuit description of the shift register used in an EDA compiler (e.g., the RTL description used in the synthesis tool) can be split into two separate shift registers to avoid glitches during synthesis of the overall shift register. For example, the first shift register may be described as the aforementioned upper portion of the shift register of fig. 5a to 5c, for example, with a transmit side shift unit cell circuit on the source side (cell 0) and a receive side shift unit cell circuit on the termination side (cell 5). The second shift register may be described as, for example, the aforementioned lower part of the shift register of fig. 5a to 5 c. By dividing the shift register into two separate shift register descriptions, any problems that the synthesis tool may have with a logic "loop" like design of the shift register can be avoided.
Fig. 13 shows a methodology performed by the cells of the shift register as described above. The method comprises receiving respective data items on respective inputs, each input being assigned a different respective shift amount 1301. The method includes writing one of the data items received on one of the inputs with the shift amount specified by the shift command into register space 1302. The method comprises transmitting other ones of the data items from respective outputs assigned incrementally higher amounts of shift than those at respective inputs at which said other data items were respectively received, wherein the incrementally higher amounts of shift are less than the amount of shift specified by the shift command 1303. The method includes reading data items from a register space and transmitting the read data items from an output assigned a shift amount having a shift amount of magnitude 1 1304.
The embodiments of the two-dimensional shift register array described above may be implemented within an image processor having one or more integrated template processors. As will become more apparent from the discussion below, the template processor is a processor that is optimized or otherwise designed to process templates of image data.
Fig. 14 illustrates an embodiment of a template processor architecture 1400. As observed in fig. 14, the stencil processor includes a data computation component 1401, a scalar processor 1402, and associated memory 1403 and I/O component 1404. The data computation component 1401 comprises an execution channel array 1405, a two-dimensional shift array structure 1406, and a separate random access memory 1407 associated with a particular row or column of the array.
The I/O section 1404 is responsible for loading an input "table" of received image data into the data calculation section 1401 and storing an output table of data from the template processor externally from the data calculation section. Loading table data into the data computation component 1401 in an embodiment entails parsing the received table into rows/columns of image data and loading the rows/columns of image data into the two-dimensional shift register structure 1406 or a corresponding random access memory 1407 that executes the rows/columns of a channel array (described in more detail below). If the table is initially loaded into memory 1407, individual execution channels within the execution channel array 1405 may then load the table data from the random access memory 1407 into the two-dimensional shift register structure 1406 (e.g., as a load instruction just prior to operating on the data of the table) at the appropriate time. Upon completion of loading the table of data into register structure 1406 (whether directly from the table generator or from memory 1407), the execution channels of execution channel array 1405 operate on the data and eventually "write back" the completed data externally from the template processor or into random access memory 1407. If the latter, the I/O component 1404 prefetches data from random access memory 1407 to form an output table which is then written externally from the table generator.
The term "execution lane" refers to a set of one or more execution units (e.g., logic circuits that are executable instructions) that are capable of executing instructions. However, in various embodiments, the execution path may include more processor-like functionality than just the execution unit. For example, an execution channel may include logic to decode a received instruction, or in the case of a more MIMD-like design, to fetch and decode instructions, in addition to one or more execution units. With respect to MIMD-like approaches, although a centralized program control approach has been primarily described herein, a more distributed approach (e.g., including program code and a program controller within each execution lane of the array 1405) may be implemented in various alternative embodiments.
The combination of execution lane array 1405, program controller 1409, and two-dimensional shift register structure 1406 provide a widely adaptable/configurable hardware platform for a wide variety of programmable functions. For example, application software developers can program kernels having a wide variety of different functional capabilities and dimensions (e.g., template sizes) in view of the individual execution channels being able to perform a wide variety of functions and to easily access input image data proximate to any output array location.
During operation, as a result of executing channel array 1405 and two-dimensional shift register 1406, multiple templates of an image may be operated on in parallel (as understood in the art, templates are typically implemented as successive nxm or nxm × C groups of pixels within an image (where N may equal M)). Here, for example, each execution lane performs operations to perform processing for a particular template value of data within the image data, however, the two-dimensional shift array shifts its data to sequentially pass the data of each template to the register space coupled to the execution lane that is performing the task for that template. Note that two-dimensional shift register 106 may also have a larger dimension than execution lane array 105 (e.g., if the execution lane array has dimension X, then two-dimensional shift register 106 may have dimension Y, where Y > X). Here, to fully process the template, the data in shift register 106 will "push" out of the right edge of execution lane array 105 when the left edge of the template is being processed by the execution lane. The extra dimension of shift register 106 can absorb data that is pushed off the edge of the execution lane array.
In addition to being a data store for image data operated on by execution channel array 1405, random access memory 1407 may also hold one or more look-up tables. One or more scalar look-up tables may also be instantiated within scalar memory 1403 in various embodiments.
Scalar lookups involve passing the same data value from the same lookup table of the same index to each execution lane within execution lane array 1405. In various embodiments, the VLIW instruction format described above is extended to also include a scalar opcode that directs a lookup operation performed by a scalar processor into a scalar lookup table. The index designated for use with the opcode may be an immediate operand or a prefetch from some other data storage location. Regardless, in an embodiment, a lookup from a scalar lookup table within scalar memory involves essentially broadcasting the same data value to all execution lanes within execution lane array 1405 during the same clock cycle.
It is noted that the various image processor architectural features described above are not necessarily limited to image processing in the traditional sense and thus may be applied to other applications that may (or may not) cause an image processor to be re-characterized. For example, if any of the various image processor architectural features described above are to be used in the creation and/or generation and/or rendering of an animation that is different from the processing of an actual camera image, the image processor may be characterized as a graphics processing unit. Additionally, the image processor architecture features described above may be applied to other technical applications such as video processing, vision processing, image recognition, and/or machine learning. Applied in this manner, the image processor may be integrated with (e.g., as a coprocessor) a more general-purpose processor (e.g., that is or is part of the CPU of a computing system), or may be a separate processor within the computing system.
The hardware design embodiments discussed above may be embodied within a semiconductor chip and/or as descriptions of circuit designs for eventual use in semiconductor manufacturing processes. In the latter case, such descriptions of the circuit design may take the form of (e.g., VHDL or Verilog) Register Transfer Level (RTL) circuit descriptions, gate level circuit descriptions, transistor level circuit descriptions, or mask descriptions, or various combinations thereof. The description of the circuit design is typically embodied on a computer-readable storage medium, such as a CD-ROM or other type of storage technology. The description of the circuit design is typically embodied on a computer-readable storage medium, such as a CD-ROM or other type of storage technology.
It will be appreciated from the foregoing that an image processor as described above may be embodied in hardware on a computer system (e.g., as part of a system on a chip (SOC) of a handheld device that processes data from a camera of the handheld device). In the case where the image processor is embodied as a hardware circuit, it is noted that the image data processed by the image processor may be received directly from the camera. Here, the image processor may be part of a separate camera, or part of a computing system with an integrated camera. In the latter case, the image data may be received directly from the camera or from a system memory of the computing system (e.g., the camera sends its image data to the system memory instead of the image processor). Also note that many of the features described in the previous section may be applicable to a graphics processor unit (which renders animations).
FIG. 15 provides an exemplary depiction of a computing system. Many of the components of the computing systems described below are suitable for use in computing systems having an integrated camera and associated image processor (e.g., handheld devices such as smart phones or tablet computers). The skilled person will be able to easily delineate between the two.
As observed in fig. 15, a basic computing system may include a central processing unit 1501 (which may include, for example, a plurality of general purpose processing cores 1515_1 through 1515_ N and a main memory controller 1517 disposed on a multi-core processor or an application processor), a system memory 1502, a display 1503 (e.g., a touchscreen, a tablet), a local wired point-to-point link (e.g., USB) interface 1504, various network I/O functions 1505 such as an ethernet interface and/or a cellular modem subsystem, a wireless local area network (e.g., WiFi) interface 1506, a wireless point-to-point link (e.g., bluetooth) interface 1507 and a global positioning system interface 1508, various sensors 1509_1 to 1509_ N, one or more cameras 1510, a battery 1511, a power management control unit 1512, a speaker and microphone 1513, and an audio encoder/decoder 1514.
The application processor or multi-core processor 1550 may include within its CPU 1501 one or more general purpose processing cores 1515, one or more graphics processing units 1516, memory management functions 1517 (e.g., memory controllers), I/O control functions 1518, and an image processing unit 1519. The general purpose processing core 1515 typically executes the operating system and application software of the computing system. The graphics processing unit 1516 typically performs graphics intensive functions to, for example, generate graphics information that is presented on the display 1503. Memory control functions 1517 interface with the system memory 1502 to write data to/read data from the system memory 1502. The power management control unit 1512 generally controls power consumption of the system 1500.
The image processing unit 1519 may be implemented according to any of the image processing unit embodiments described in detail in the previous sections above. Alternatively or in combination, the IPU 1519 may be coupled as its coprocessor to either or both of the GPU 1516 and the CPU 1501. Additionally, in various embodiments, the GPU 1516 may be implemented with any of the image processor features described in detail above.
The shift registers described and illustrated herein may be used for applications other than image processing. For example, a shift register may be used in parallel-to-serial data conversion or serial-to-parallel conversion of data. A shift register may be used in the delay circuit. A shift register may be used in the digital pulse stretcher. The shift register may be used in a Digital Signal Processor (DSP), a general purpose processor core, or in an ASIC.
Each of the touch screen display 1503, the communication interface 1504-. Depending on the implementation, various ones of these I/O components may be integrated on the application processor/multi-core processor 1550 or may be located off-chip or external to the packaging of the application processor/multi-core processor 1550.
In an embodiment, the one or more cameras 1510 include a depth camera capable of measuring depth between the camera and objects in its field of view. Application software, operating system software, device driver software, and/or firmware (or other functional blocks having instruction execution pipelines for executing program code) executing on a general-purpose CPU core of an application processor or other processor may perform any of the functions described above.
Embodiments of the invention may include various processes as set forth above. These processes may be embodied in machine-executable instructions. The instructions may be used to cause a general-purpose or special-purpose processor to perform certain processes. Alternatively, the processes may be performed by specific hardware components that contain hardwired logic for performing the processes, or by any combination of programmed computer components and custom hardware components.
Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine-readable medium may include, but is not limited to, floppy diskettes, optical disks, CD-ROMs, and magneto-optical disks, FLASH memory, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media or other type of media/machine-readable medium suitable for storing electronic instructions. For example, the invention may be downloaded as a computer program which may be transferred from a remote computer (e.g., a server) to a requesting computer (e.g., a client) by way of data signals embodied in a carrier wave or other propagation via a communication link (e.g., a modem or network connection).
In the foregoing specification, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The specification and drawings are, accordingly, to be regarded in an illustrative rather than a restrictive sense.
Claims (19)
1. An apparatus comprising a plurality of shift unit cells arranged physically out of logical order, each shift unit cell comprising a local register space and a circuit having inputs configured to receive shift data and outputs configured to transmit shift data, wherein each of the inputs is assigned a different respective amount of shift and each of the outputs is assigned a different respective amount of shift, wherein the circuit of each shift unit cell comprises:
i) a first circuit configured to receive data from a preceding logically-ordered shift unit cell at respective inputs assigned respective shift amounts specified in a shift command and to write the received data into the local register space of the shift unit cell, and,
ii) a second circuit configured to send data to a subsequent logically-ordered unit from a respective output assigned an incremented shift amount relative to the shift amount of the input on which the data was received.
2. The apparatus of claim 1, wherein said second circuitry further comprises circuitry configured to read data from said local register space of said shift unit cell and transmit said data from an output assigned a shift amount of 1.
3. The apparatus of claim 1, wherein the shift unit cell is configured to propagate data in a closed loop.
4. The apparatus of claim 3, wherein the displacement unit cell is physically arranged such that displacement occurs in a first direction or in a second direction along the closed loop.
5. The apparatus of claim 1, wherein each of the shift unit cells is part of a bi-directional shift register.
6. The apparatus of claim 1, wherein the plurality of shift unit cells form a two-dimensional shift register array.
7. The apparatus of claim 1, further comprising:
for each non-shifting unit cell of each shifting unit cell, each non-shifting unit cell having an input for receiving shifted data and a corresponding output, said output sending the received shifted data without further shifting it, wherein each said input is assigned a different respective shift amount.
8. A two-dimensional shift register array comprising a plurality of rows and columns of shift unit cells, wherein the shift unit cells in a particular row or column are physically arranged out of logical order, each of the shift unit cells comprising a local register space and a circuit having an input configured to receive shift data and an output configured to transmit shift data, wherein each of the inputs is assigned a different respective amount of shift and each of the outputs is assigned a different respective amount of shift, wherein the circuit of each shift unit cell comprises:
i) a first circuit configured to receive data from a preceding logically-ordered shift unit cell at respective inputs assigned respective shift amounts specified in a shift command and to write the received data into the local register space of the shift unit cell, and,
ii) a second circuit configured to send data to a subsequent logically-ordered unit from a respective output assigned an incremented shift amount relative to the shift amount of the input on which the data was received.
9. The two-dimensional shift register array of claim 8, wherein the second circuit further comprises a circuit configured to read data from the local register space of the shift unit cell and transmit the data from an output assigned a shift amount of 1.
10. The two-dimensional shift register array of claim 8, wherein the shift unit cells are configured to propagate data in a closed loop.
11. The two-dimensional shift register array of claim 10, wherein the shift unit cells are physically arranged such that shifting occurs in a first direction or in a second direction along the closed loop.
12. The two-dimensional shift register array of claim 8, wherein each of the shift unit cells is part of a bidirectional shift register.
13. The two-dimensional shift register array of claim 8, wherein the two-dimensional shift register array is within a computing system having one or more processing cores coupled to a system memory.
14. The two-dimensional shift register array of claim 8, further comprising:
for each non-shifting unit cell of each shifting unit cell, each non-shifting unit cell having an input for receiving shifted data and a corresponding output, said output sending the received shifted data without further shifting it, wherein each said input is assigned a different respective shift amount.
15. An image processor comprising:
a two-dimensional execution channel array; and
a two-dimensional shift register array comprising a plurality of rows and columns of shift unit cells, wherein the shift unit cells in a particular row or column are physically arranged out of logical order, each of the shift unit cells comprising a local register space and a circuit having an input configured to receive shift data and an output configured to transmit shift data, wherein each of the inputs is assigned a different respective amount of shift and each of the outputs is assigned a different respective amount of shift, wherein the circuit of each shift unit cell comprises:
i) a first circuit configured to receive data from a preceding logically-ordered shift unit cell at respective inputs assigned respective shift amounts specified in a shift command and to write the received data into the local register space of the shift unit cell, and,
ii) a second circuit configured to send data to a subsequent logically-ordered unit from a respective output assigned an incremented shift amount relative to the shift amount of the input on which the data was received.
16. The image processor of claim 15, wherein the second circuit further comprises a circuit configured to read data from the local register space of the shift unit cell and transmit the data from an output assigned a shift amount of 1.
17. The image processor of claim 15, wherein the shift unit cell is configured to propagate data in a closed loop.
18. The image processor of claim 17, wherein the shift unit cell is physically arranged such that shifting occurs in a first direction or in a second direction along the closed loop.
19. The image processor of claim 15, further comprising:
for each non-shifting unit cell of each shifting unit cell, each non-shifting unit cell having an input for receiving shifted data and a corresponding output, said output sending the received shifted data without further shifting it, wherein each said input is assigned a different respective shift amount.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201562263530P | 2015-12-04 | 2015-12-04 | |
US62/263,530 | 2015-12-04 | ||
US15/352,260 | 2016-11-15 | ||
US15/352,260 US10313641B2 (en) | 2015-12-04 | 2016-11-15 | Shift register with reduced wiring complexity |
PCT/US2016/064034 WO2017095824A1 (en) | 2015-12-04 | 2016-11-29 | Shift register with reduced wiring complexity |
Publications (2)
Publication Number | Publication Date |
---|---|
CN108140417A CN108140417A (en) | 2018-06-08 |
CN108140417B true CN108140417B (en) | 2021-08-03 |
Family
ID=57610386
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201680059741.4A Active CN108140417B (en) | 2015-12-04 | 2016-11-29 | Shift register with reduced wiring complexity |
Country Status (8)
Country | Link |
---|---|
US (3) | US10313641B2 (en) |
EP (2) | EP3605544B1 (en) |
JP (2) | JP6567770B2 (en) |
KR (1) | KR102090885B1 (en) |
CN (1) | CN108140417B (en) |
DE (1) | DE112016005552T5 (en) |
GB (1) | GB2557536B (en) |
WO (1) | WO2017095824A1 (en) |
Families Citing this family (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180007302A1 (en) * | 2016-07-01 | 2018-01-04 | Google Inc. | Block Operations For An Image Processor Having A Two-Dimensional Execution Lane Array and A Two-Dimensional Shift Register |
US10489878B2 (en) * | 2017-05-15 | 2019-11-26 | Google Llc | Configurable and programmable image processor unit |
US11134534B2 (en) * | 2017-10-23 | 2021-09-28 | Avago Technologies International Sales Pte. Limited | System on a chip with multiple cores |
US10552939B1 (en) | 2019-02-12 | 2020-02-04 | Google Llc | Image processor complex transfer functions |
CN113867791B (en) * | 2020-06-30 | 2023-09-26 | 上海寒武纪信息科技有限公司 | Computing device, chip, board card, electronic equipment and computing method |
CN112181354B (en) * | 2020-10-12 | 2021-08-10 | 上海芯旺微电子技术有限公司 | Method for synchronous shift saturation processing and application thereof |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5502731A (en) * | 1994-08-18 | 1996-03-26 | International Business Machines Corporation | Delay test coverage without additional dummy latches in a scan-based test design |
US6356973B1 (en) * | 1993-10-15 | 2002-03-12 | Image Telecommunications Corporation | Memory device having a cyclically configured data memory and having plural data portals for outputting/inputting data |
US6728862B1 (en) * | 2000-05-22 | 2004-04-27 | Gazelle Technology Corporation | Processor array and parallel data processing methods |
CN102543202A (en) * | 2010-10-22 | 2012-07-04 | Nxp股份有限公司 | Shift register, electronic device, control method and software program product |
CN105161042A (en) * | 2015-10-10 | 2015-12-16 | 京东方科技集团股份有限公司 | Array substrate, display panel and display device |
Family Cites Families (86)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4445177A (en) | 1981-05-22 | 1984-04-24 | Data General Corporation | Digital data processing system utilizing a unique arithmetic logic unit for handling uniquely identifiable addresses for operands and instructions |
EP0244973B1 (en) | 1986-04-23 | 1994-02-16 | Texas Instruments Incorporated | Broadband differential amplifier |
GB2211638A (en) * | 1987-10-27 | 1989-07-05 | Ibm | Simd array processor |
DE3851005T2 (en) | 1987-06-01 | 1995-04-20 | Applied Intelligent Syst Inc | Parallel neighboring processing system and method. |
US4935894A (en) | 1987-08-31 | 1990-06-19 | Motorola, Inc. | Multi-processor, multi-bus system with bus interface comprising FIFO register stocks for receiving and transmitting data and control information |
JPH0246598A (en) | 1988-08-09 | 1990-02-15 | Matsushita Electric Ind Co Ltd | Variable length shift register |
US5253308A (en) | 1989-06-21 | 1993-10-12 | Amber Engineering, Inc. | Massively parallel digital image data processor using pixel-mapped input/output and relative indexed addressing |
US5163120A (en) * | 1989-10-13 | 1992-11-10 | Texas Instruments Incorporated | Second nearest-neighbor communication network for synchronous vector processor, systems and methods |
WO1994009595A1 (en) | 1991-09-20 | 1994-04-28 | Shaw Venson M | Method and apparatus including system architecture for multimedia communications |
JP3482660B2 (en) | 1993-09-08 | 2003-12-22 | ソニー株式会社 | Image data processing apparatus and image data processing method |
US5455525A (en) * | 1993-12-06 | 1995-10-03 | Intelligent Logic Systems, Inc. | Hierarchically-structured programmable logic array and system for interconnecting logic elements in the logic array |
US5612693A (en) | 1994-12-14 | 1997-03-18 | International Business Machines Corporation | Sliding window data compression using a toroidal bit shift register |
JP3573755B2 (en) | 1996-01-15 | 2004-10-06 | シーメンス アクチエンゲゼルシヤフト | Image processing processor |
US6263530B1 (en) | 1996-09-24 | 2001-07-24 | Steve Feher | Selectively cooled or heated cushion and apparatus therefor |
US5892962A (en) | 1996-11-12 | 1999-04-06 | Lucent Technologies Inc. | FPGA-based processor |
US5771268A (en) | 1996-12-10 | 1998-06-23 | International Business Machines Corporation | High speed rotator with array method |
US6366289B1 (en) | 1998-07-17 | 2002-04-02 | Microsoft Corporation | Method and system for managing a display image in compressed and uncompressed blocks |
US6587158B1 (en) | 1998-07-23 | 2003-07-01 | Dvdo, Inc. | Method and apparatus for reducing on-chip memory in vertical video processing |
US7010177B1 (en) | 1998-08-27 | 2006-03-07 | Intel Corporation | Portability of digital images |
EP1164544B1 (en) | 1999-03-16 | 2011-11-02 | Hamamatsu Photonics K.K. | High-speed vision sensor |
JP3922859B2 (en) | 1999-12-28 | 2007-05-30 | 株式会社リコー | Image processing apparatus, image processing method, and computer-readable recording medium storing program for causing computer to execute the method |
US6745319B1 (en) | 2000-02-18 | 2004-06-01 | Texas Instruments Incorporated | Microprocessor with instructions for shuffling and dealing data |
US6728722B1 (en) | 2000-08-28 | 2004-04-27 | Sun Microsystems, Inc. | General data structure for describing logical data spaces |
US8058899B2 (en) * | 2000-10-06 | 2011-11-15 | Martin Vorbach | Logic cell array and bus system |
DE60021623T2 (en) | 2000-10-16 | 2006-06-01 | Nokia Corp. | MULTIPLIER AND SHIFTER ARRANGEMENT USING CREDENTIAL NUMBERS |
US7286717B2 (en) | 2001-10-31 | 2007-10-23 | Ricoh Company, Ltd. | Image data processing device processing a plurality of series of data items simultaneously in parallel |
JP4146654B2 (en) | 2002-02-28 | 2008-09-10 | 株式会社リコー | Image processing circuit, composite image processing circuit, and image forming apparatus |
US9170812B2 (en) | 2002-03-21 | 2015-10-27 | Pact Xpp Technologies Ag | Data processing system having integrated pipelined array data processor |
WO2003088033A1 (en) | 2002-04-09 | 2003-10-23 | University Of Rochester | Multiplier-based processor-in-memory architectures for image and graphics processing |
AU2003286131A1 (en) | 2002-08-07 | 2004-03-19 | Pact Xpp Technologies Ag | Method and device for processing data |
GB2395299B (en) * | 2002-09-17 | 2006-06-21 | Micron Technology Inc | Control of processing elements in parallel processors |
GB2397668B (en) * | 2003-01-27 | 2005-12-07 | Picochip Designs Ltd | Processor array |
JP4283014B2 (en) * | 2003-03-19 | 2009-06-24 | パナソニック株式会社 | Solid-state imaging device, driving method of solid-state imaging device, and camera |
US7581080B2 (en) * | 2003-04-23 | 2009-08-25 | Micron Technology, Inc. | Method for manipulating data in a group of processing elements according to locally maintained counts |
US7913062B2 (en) * | 2003-04-23 | 2011-03-22 | Micron Technology, Inc. | Method of rotating data in a plurality of processing elements |
US20060044576A1 (en) | 2004-07-30 | 2006-03-02 | Kabushiki Kaisha Toshiba | Apparatus for image processing |
US7667764B2 (en) | 2004-06-04 | 2010-02-23 | Konica Minolta Holdings, Inc. | Image sensing apparatus |
JP4219887B2 (en) | 2004-12-28 | 2009-02-04 | 富士通マイクロエレクトロニクス株式会社 | Image processing apparatus and image processing method |
KR100594317B1 (en) * | 2005-01-28 | 2006-06-30 | 삼성전자주식회사 | A low power consumption shift register and operating method for the shift register |
ATE504043T1 (en) | 2005-04-28 | 2011-04-15 | Univ Edinburgh | RECONFIGURABLE INSTRUCTION CELL ARRAY |
US7882339B2 (en) | 2005-06-23 | 2011-02-01 | Intel Corporation | Primitives to enhance thread-level speculation |
JP2007067917A (en) | 2005-08-31 | 2007-03-15 | Matsushita Electric Ind Co Ltd | Image data processing apparatus |
US7602974B2 (en) | 2005-10-21 | 2009-10-13 | Mobilic Technology (Cayman) Corp. | Universal fixed-pixel-size ISP scheme |
FR2895103B1 (en) | 2005-12-19 | 2008-02-22 | Dxo Labs Sa | METHOD AND SYSTEM FOR PROCESSING DIGITAL DATA |
US7802073B1 (en) | 2006-03-29 | 2010-09-21 | Oracle America, Inc. | Virtual core management |
US20080111823A1 (en) | 2006-11-13 | 2008-05-15 | Faraday Technology Corp. | Graphics processing system |
EP1927949A1 (en) * | 2006-12-01 | 2008-06-04 | Thomson Licensing | Array of processing elements with local registers |
US8321849B2 (en) | 2007-01-26 | 2012-11-27 | Nvidia Corporation | Virtual architecture and instruction set for parallel thread computing |
US20080244222A1 (en) | 2007-03-30 | 2008-10-02 | Intel Corporation | Many-core processing using virtual processors |
US8126022B2 (en) | 2007-04-02 | 2012-02-28 | Stmicroelectronics Sa | Electronic multimode data shift device, in particular for coding/decoding with an LDPC code |
JP4389976B2 (en) | 2007-06-29 | 2009-12-24 | ブラザー工業株式会社 | Image processing apparatus and image processing program |
JP4844853B2 (en) | 2007-09-05 | 2011-12-28 | 国立大学法人東北大学 | Solid-state imaging device and driving method thereof |
JP5020029B2 (en) * | 2007-11-16 | 2012-09-05 | 株式会社メガチップス | Image processing device |
CN102047241B (en) | 2008-05-30 | 2014-03-12 | 先进微装置公司 | Local and global data share |
JP4999791B2 (en) | 2008-06-30 | 2012-08-15 | キヤノン株式会社 | Information processing apparatus, control method thereof, and program |
US8456480B2 (en) | 2009-01-14 | 2013-06-04 | Calos Fund Limited Liability Company | Method for chaining image-processing functions on a SIMD processor |
KR101572879B1 (en) | 2009-04-29 | 2015-12-01 | 삼성전자주식회사 | Dynamic parallel system and method for parallel application program |
US20110055495A1 (en) | 2009-08-28 | 2011-03-03 | Qualcomm Incorporated | Memory Controller Page Management Devices, Systems, and Methods |
US8976195B1 (en) | 2009-10-14 | 2015-03-10 | Nvidia Corporation | Generating clip state for a batch of vertices |
US8436857B2 (en) | 2009-10-20 | 2013-05-07 | Oracle America, Inc. | System and method for applying level of detail schemes |
US8595428B2 (en) | 2009-12-22 | 2013-11-26 | Intel Corporation | Memory controller functionalities to support data swizzling |
US8749667B2 (en) | 2010-08-02 | 2014-06-10 | Texas Instruments Incorporated | System and method for maintaining maximum input rate while up-scaling an image vertically |
US8508612B2 (en) | 2010-09-30 | 2013-08-13 | Apple Inc. | Image signal processor line buffer configuration for processing ram image data |
US8797323B2 (en) | 2011-01-18 | 2014-08-05 | Intel Corporation | Shadowing dynamic volumetric media |
WO2012105174A1 (en) | 2011-01-31 | 2012-08-09 | パナソニック株式会社 | Program generation device, program generation method, processor device, and multiprocessor system |
US9092267B2 (en) | 2011-06-20 | 2015-07-28 | Qualcomm Incorporated | Memory sharing in graphics processing unit |
US20130027416A1 (en) | 2011-07-25 | 2013-01-31 | Karthikeyan Vaithianathan | Gather method and apparatus for media processing accelerators |
JP5742651B2 (en) | 2011-10-15 | 2015-07-01 | コニカミノルタ株式会社 | Image processing apparatus, linkage method, and linkage program |
FR2984556B1 (en) * | 2011-12-20 | 2014-09-26 | Commissariat Energie Atomique | SYSTEM AND METHOD FOR COMMUNICATION BETWEEN ACQUISITION CIRCUIT AND DATA PROCESSING CIRCUIT |
JP5746100B2 (en) | 2011-12-27 | 2015-07-08 | 京セラドキュメントソリューションズ株式会社 | Image forming apparatus |
US8823736B2 (en) | 2012-01-20 | 2014-09-02 | Intel Corporation | Graphics tiling architecture with bounding volume hierarchies |
US10244246B2 (en) | 2012-02-02 | 2019-03-26 | Texas Instruments Incorporated | Sub-pictures for pixel rate balancing on multi-core platforms |
US9235769B2 (en) | 2012-03-15 | 2016-01-12 | Herta Security, S.L. | Parallel object detection method for heterogeneous multithreaded microarchitectures |
TWI520598B (en) | 2012-05-23 | 2016-02-01 | 晨星半導體股份有限公司 | Image processing apparatus and image processing method |
US20130316094A1 (en) | 2012-05-25 | 2013-11-28 | Novellus Systems, Inc. | Rf-powered, temperature-controlled gas diffuser |
US9232139B2 (en) | 2012-07-24 | 2016-01-05 | Apple Inc. | Image stabilization using striped output transformation unit |
US9378181B2 (en) | 2012-11-09 | 2016-06-28 | Intel Corporation | Scalable computing array |
US8954992B2 (en) | 2013-03-15 | 2015-02-10 | Lenovo Enterprise Solutions (Singapore) Pte. Ltd. | Distributed and scaled-out network switch and packet processing |
US9749548B2 (en) | 2015-01-22 | 2017-08-29 | Google Inc. | Virtual linebuffers for image signal processors |
US9965824B2 (en) | 2015-04-23 | 2018-05-08 | Google Llc | Architecture for high performance, power efficient, programmable image processing |
US10095479B2 (en) | 2015-04-23 | 2018-10-09 | Google Llc | Virtual image processor instruction set architecture (ISA) and memory model and exemplary target hardware having a two-dimensional shift array structure |
US10291813B2 (en) | 2015-04-23 | 2019-05-14 | Google Llc | Sheet generator for image processor |
US9756268B2 (en) | 2015-04-23 | 2017-09-05 | Google Inc. | Line buffer unit for image processor |
US9769356B2 (en) | 2015-04-23 | 2017-09-19 | Google Inc. | Two dimensional shift array for image processor |
US9785423B2 (en) | 2015-04-23 | 2017-10-10 | Google Inc. | Compiler for translating between a virtual image processor instruction set architecture (ISA) and target hardware having a two-dimensional shift array structure |
US9772852B2 (en) | 2015-04-23 | 2017-09-26 | Google Inc. | Energy efficient processor core architecture for image processor |
-
2016
- 2016-11-15 US US15/352,260 patent/US10313641B2/en active Active
- 2016-11-29 GB GB1805589.7A patent/GB2557536B/en active Active
- 2016-11-29 KR KR1020187010358A patent/KR102090885B1/en active IP Right Grant
- 2016-11-29 EP EP19197812.1A patent/EP3605544B1/en active Active
- 2016-11-29 JP JP2018519289A patent/JP6567770B2/en active Active
- 2016-11-29 CN CN201680059741.4A patent/CN108140417B/en active Active
- 2016-11-29 DE DE112016005552.8T patent/DE112016005552T5/en not_active Ceased
- 2016-11-29 EP EP16816792.2A patent/EP3384498B1/en active Active
- 2016-11-29 WO PCT/US2016/064034 patent/WO2017095824A1/en active Application Filing
-
2017
- 2017-05-15 US US15/595,403 patent/US10477164B2/en active Active
-
2019
- 2019-07-30 JP JP2019139835A patent/JP6745389B2/en active Active
- 2019-10-22 US US16/659,695 patent/US10998070B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6356973B1 (en) * | 1993-10-15 | 2002-03-12 | Image Telecommunications Corporation | Memory device having a cyclically configured data memory and having plural data portals for outputting/inputting data |
US5502731A (en) * | 1994-08-18 | 1996-03-26 | International Business Machines Corporation | Delay test coverage without additional dummy latches in a scan-based test design |
US6728862B1 (en) * | 2000-05-22 | 2004-04-27 | Gazelle Technology Corporation | Processor array and parallel data processing methods |
CN102543202A (en) * | 2010-10-22 | 2012-07-04 | Nxp股份有限公司 | Shift register, electronic device, control method and software program product |
CN105161042A (en) * | 2015-10-10 | 2015-12-16 | 京东方科技集团股份有限公司 | Array substrate, display panel and display device |
Also Published As
Publication number | Publication date |
---|---|
US20200162705A1 (en) | 2020-05-21 |
GB2557536A (en) | 2018-06-20 |
WO2017095824A1 (en) | 2017-06-08 |
KR20180045029A (en) | 2018-05-03 |
EP3384498A1 (en) | 2018-10-10 |
DE112016005552T5 (en) | 2018-08-09 |
US10998070B2 (en) | 2021-05-04 |
US10477164B2 (en) | 2019-11-12 |
WO2017095824A4 (en) | 2017-07-20 |
US10313641B2 (en) | 2019-06-04 |
US20170251184A1 (en) | 2017-08-31 |
CN108140417A (en) | 2018-06-08 |
JP6745389B2 (en) | 2020-08-26 |
GB2557536B (en) | 2020-09-23 |
US20170163931A1 (en) | 2017-06-08 |
GB201805589D0 (en) | 2018-05-23 |
JP2019503027A (en) | 2019-01-31 |
EP3384498B1 (en) | 2019-09-18 |
JP2019207745A (en) | 2019-12-05 |
JP6567770B2 (en) | 2019-08-28 |
EP3605544B1 (en) | 2023-08-09 |
EP3605544A1 (en) | 2020-02-05 |
KR102090885B1 (en) | 2020-03-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN108140417B (en) | Shift register with reduced wiring complexity | |
US11153464B2 (en) | Two dimensional shift array for image processor | |
KR101971657B1 (en) | Energy-efficient processor core architecture for image processors | |
KR102232722B1 (en) | Convolutional Neural Network on a Programmable Two-Dimensional Image Processor | |
KR102009906B1 (en) | Compiler technologies for mapping program code to high-performance, power-efficient programmable image processing hardware platforms | |
KR101973733B1 (en) | Architecture for high performance, power efficient, programmable image processing processing | |
CN107133908B (en) | Compiler managed memory for image processor | |
KR20190107101A (en) | Image processor with support internal network and configurable number of active cores |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |