CN102834819A - Client-server input method editor architecture - Google Patents
Client-server input method editor architecture Download PDFInfo
- Publication number
- CN102834819A CN102834819A CN2010800624560A CN201080062456A CN102834819A CN 102834819 A CN102834819 A CN 102834819A CN 2010800624560 A CN2010800624560 A CN 2010800624560A CN 201080062456 A CN201080062456 A CN 201080062456A CN 102834819 A CN102834819 A CN 102834819A
- Authority
- CN
- China
- Prior art keywords
- ime
- server
- client
- key events
- session
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/104—Peer-to-peer [P2P] networks
- H04L67/1087—Peer-to-peer [P2P] networks using cross-functional networking aspects
- H04L67/1091—Interfacing with client-server systems or between P2P systems
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/20—Services signaling; Auxiliary data signalling, i.e. transmitting data via a non-traffic channel
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/54—Indexing scheme relating to G06F9/54
- G06F2209/541—Client-server
Abstract
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving an input method editor (IME) server request, the IME server request including one or more tokens and requesting that an IME server be instantiated, the IME server executing one or more IME functions based on a key event sent from an IME client, wherein the IME server is a stateful server that stores both requests and responses of a communication session between the IME server and the IME client, determining that the IME server can be instantiated in a restrictive environment based on the one or more tokens, and instantiating the IME server in the restrictive environment. Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
Description
The cross reference of related application
The application requires the U. S. application No.61/264 that submits on November 27th, 2009,714 right of priority, with its disclosure in full way of reference clearly be incorporated herein.
Technical field
The disclosure relates to Input Method Editor.
Background technology
Use the language of logograph literal (script), one of them or two characters have the character of Duoing than such as the key on the standard input device of computer keyboard or mobile device keypad haply corresponding to a speech or implication.For example, Japanese comprises hundreds of characters in katakana and hiragana.The related mapping of these potential many-ones can be realized by the Input Method Editor of the input of character of being convenient on input equipment, not find and symbol.Therefore, can use Western-style keyboard to import japanese character.Likewise, can use to be used for following input method: use Western-style keyboard or some other input equipment inputs to comprise many other language of ideographic symbol, such as Chinese, Korean and other language.
In order to realize input method, the user typically must install client software application and storehouse.Yet when working on---for example second computing machine in public computer equipment or the working environment etc.---when the user is not belonging to this user's computer equipment, such installation possibly be inconvenient.Therefore in addition, client software application possibly be that storer and processor are intensive, is burdensome to client, and possibly depends on language, all needs application program for the language of each expectation.
Summary of the invention
This instructions has been described and Input Method Editor, and the relevant technology of Input Method Editor that especially has the client-server architecture.
Generally speaking; One of the theme of describing in this manual has the aspect of novelty in comprising the method for following action, to specialize: receive Input Method Editor (IME) server requests; The IME server requests comprises that one or more tokens and request IME server are by instantiation; The IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein the IME server is the state server that has that is stored in the request of the communication session between IME server and the IME client and responds both; Confirm that based on one or more tokens the IME server can be by instantiation in the restriction environment; And the restriction environment in instantiation IME server.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking; Another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: receive Input Method Editor (IME) server requests; The IME server requests comprises that one or more tokens and request IME server are by instantiation; The IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein the IME server is the state server that has that is stored in the request of the communication session between IME server and the IME client and responds both; One or more tokens are handled; Handle to confirm that based on this IME server can be by instantiation; Instantiation IME server in the restriction environment, the function of restriction environmental restraint IME server; Confirm that the IME server is not limiting in the environment and carry out; And confirm and stop the IME server in response to this.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking, another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: be based upon first session between first Input Method Editor (IME) client and the IME server; Second session of request between the 2nd IME client and first server; Confirm that the version of an IME server is different from the version of the 2nd IME client; Be different from the version of the 2nd IME client in response to the version of confirming an IME server, stop first server; And instantiation the 2nd IME server, the 2nd IME server has the version identical with the version of second client.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking, another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: be based upon first session between first Input Method Editor (IME) client and the IME server; Second session of request between the 2nd an IME client and an IME server; The version of confirming an IME server is identical with the version of the 2nd IME client; Confirm in response to this, be based upon second session between the 2nd an IME client and the IME server; And carry out first session and second session.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking, another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: receive Input Method Editor (IME) server requests, the IME server requests is transmitted by an IME client; Come instantiation the one IME server based on this IME server requests; Be based upon first session between an IME client and the IME server; Second session of request between the 2nd an IME client and an IME server; Confirm that the version of an IME server is different from the version of the 2nd IME client; Be different from the version of the 2nd IME client in response to the version of confirming an IME server, stop an IME server; Instantiation the 2nd IME server, the 2nd IME server has the version identical with the version of the 2nd IME client; And be based upon second session between the 2nd IME client and the 2nd IME server.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking; Another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: at Input Method Editor (IME) server place; Reception is from sending the key events of this IME server to the IME client of this IME server communication; Wherein the IME server is the state server that has that is stored in the request of the communication session between IME server and the IME client and responds both, and the IME client is based on key events sends stateless IME client from request to the IME server; Discern one or more logographic characters through the IME server based on key events; Generate and the corresponding presentation information of these one or more logographic characters through the IME server; And send this presentation information to the IME client from the IME server, to show these one or more logographic characters.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking, another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: from being stateless Input Method Editor (IME) client reception request; Ask instantiation IME server based on this, this IME server has state; Be created on the communication path between IME client and the IME server, this communication path has corresponding pathname; This pathname is offered the IME client; Receive key events at IME server place, this key events is transmitted to the IME server through communication path from the IME client; Discern one or more logographic characters based on this key events; Generate and the corresponding presentation information of these one or more logographic characters; And send this presentation information to the IME client from the IME server, to show these one or more logographic characters.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking; Another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: the generation key events at Input Method Editor (IME) client place, this IME client are only to store request that it sends to the IME server and send the stateless IME client of request to the IME server for each key events; This key events is recorded in the key events sequence this key events of key events sequence storage and before be transmitted at least one or a plurality of previous key events of IME server through the IME client; Send this key events to the IME client communication IME server, the IME server is the state server that has that is stored in the request of the communication session between IME server and the IME client and responds both; At IME client place, confirm that the IME server has stopped running; Stopped confirming of running in response to the IME server, the session of foundation and the 2nd IME server, the 2nd IME server is that state server is arranged; After setting up this session, send the key events sequence that is write down to second server.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Generally speaking, another aspect of the theme of describing in this manual can be specialized in comprising the method for following action: instantiation Input Method Editor (IME) client on equipment, and this IME client is a stateless IME client; Receive user's input of equipment; Generate key events based on this user's input, key events is generated by this IME client; Key events is recorded in the key events sequence in the computer-readable recording medium of the equipment of being stored in; This key events is sent to this IME client communication and is the IME server that state I ME server is arranged; Confirm that this IME server has stopped running; Confirm to come instantiation the 2nd IME server in response to this, the 2nd IME server is that state I ME server is arranged; Be based upon the session between IME client and the 2nd IME server; And after setting up this session, send the key events sequence to the 2nd IME server.Other embodiment of this aspect comprise the action that is configured to carry out this method, are coded in corresponding system, device and computer program on the computer memory device.
Accompanying drawing and below description in set forth the details of one or more embodiment of the theme of describing in this manual.Other characteristics, aspect and the advantage of theme will become obvious from description, accompanying drawing and claim.In addition, the aspect of the theme of describing in this manual comprises above-mentioned aspect, can be combined into one or more combinations.
Description of drawings
Fig. 1 is the block diagram of the common customer end-server architecture of diagram Input Method Editor (IME).
Fig. 2 is the block diagram of examples shown client-server IME architecture.
Fig. 3 is the block diagram of another example client end-server I ME architecture of diagram.
Fig. 4 is the functional block diagram of the server architecture of diagram server.
Fig. 5 A is the table of examples shown text-converted.
Fig. 5 B is the exemplary plot that diagram and the sample text of Fig. 5 A are changed corresponding example rule.
The conversion of Fig. 6 A examples shown text-string.
Fig. 6 B examples shown word lattice battle arrays (lattice).
Fig. 7 is the process flow diagram that diagram is used to set up the instantiation procedure of client-server IME session.
Fig. 8 is that diagram is used to use the text of client-server IME session and the process flow diagram of the instantiation procedure that text-string is changed.
Fig. 9 is the block diagram of diagram version and protocol testing.
Figure 10 is the process flow diagram that diagram is used to provide the instantiation procedure of version and protocol testing.
Figure 11 is the process flow diagram that diagram is used to rebuild the instantiation procedure of client-server IME session.
Reference symbol identical in each accompanying drawing is indicated identical element.
Embodiment
§ 1.0 general introductions
This instructions has been described and the relevant technology of the Input Method Editor that comprises the client-server architecture (IME).Although will under the example linguistic context of Japanese, describe example embodiment,, the disclosure is easy to be applicable to other language that use the logograph literal, comprises Chinese, Korean and/or Dard.
The embodiment of client-server architecture comprises and the stateless client that has state server to dock.As employed in this article, term " client " is meant the application program or the system of the service that access services provider provides.Term " server " is to point to the service provider that client provides service.The term client and server not necessarily is meant independently computer equipment, because client and server when those terms are used in this article, can be realized on single computer equipment.Can be stored in the request of the communication session between the server and client side and respond on both meanings at server, server has state.By this way, server is known the complete history for the communication of special session between client and server.Can store the request of sending in client, but on the meaning that storage server does not respond, client is stateless to server.Therefore, client is not stored the complete history for the communication of special session between client and server.
According to the aspect of the client-server IME architecture that provides in this article, between client and server, set up session.Session is the semipermanent message exchange between IME client and IME server.Message exchange is semi-permanent, because it is realized through one or more connections that the life period in session can be opened or close.In brief, the life-span of session is longer than the life-span of the connection that between this session, takes place.Server can be coordinated the concurrent session with a plurality of clients.Yet server only can communicate with a client at every turn.Therefore, the connection between client and server is opened, so that can carry out message exchange, subsequently, is closed, so that another client can communicate with server.
Client receives user's input, and server is imported based on the user and carried out function and generate presentation information based on it, and client appears or character display based on presentation information.Use stateless client and have state server, client-server architecture to provide the portable and the solution that is independent of language that to stride any various operating system or Platform Implementation.
The embodiment of client-server architecture is included in the server of carrying out in restriction environment or the sandbox of function of limiting server.By this way, with certain mode set up with the malicious client or the user of the session of server can not be through the server access sensitive information.
The embodiment of client-server architecture makes client and/or server and can under the situation that the system that does not need them to carry out is restarted, be updated (for example, from the current version to the redaction) just above that in the communication protocol between the client and server.When the different editions of IME client and IME server has compatible protocol, maintain the connection between IME client and the IME server.Only when the IME client be the version older than IME server, and agreement is when being incompatible, connects just to stop.
The embodiment of client-server architecture also makes session have state server to collapse, end, freeze or cease to function rightly in addition, and new server is resumed under the situation of instantiation.For example, the IME client sends to the IME server with each enter key incident when the enter key incident takes place, and each enter key incident of maintain sessions.When the IME server is restarted (for example, owing to collapse, renewal etc.), the IME client will be sent the whole list entries of key events to the IME server.
Can above-mentioned characteristics combination be become various combinations.For example, can and make client and/or server and the characteristic that can under the situation of not restarting, be updated in the communication protocol between the client and server make up with the sandbox characteristic.Likewise, these characteristics can be individually or combine to make session can have state server collapse, end, freeze or other situation about ceasing to function rightly under the characteristic that be resumed be combined.
Client provides user interface and presents device, and server is carried out core I ME function.This core I ME function comprises that group of text becomes and the management from first syllabic language (for example, hiragana) to the text-converted of second syllabic language (for example, kanji).
The IME framework that specific operation system provided of the equipment that client use client is carried out is above that realized.The function of client comprises: receive user's input (for example, user's input " a "); Generate key events based on user's input; Send key events to server; The presentation information that reception server provides; And provide presentation information to show to the user.As further discuss in detail below, can show corresponding character (for example), and/or can show candidate character list that from this candidate character list, the user can select suitable candidate in response to " あ " of " a " key events based on key events.Client can be used any embodiment that is used for display list.Under the sample situation of web browser, can use Ajax and javascript.
Client can be used as the application program of on equipment, carrying out and is provided, and one or more client can be communicated by letter with particular server.Such application program receives the text input from input equipment (for example, mouse, keyboard, touch pad), and can include but not limited to the web browser, present program, WP and/or spreadsheet program.Different with server, client is not managed any state.Because the role of client is stateless, so much littler than those of conventional I ME to the dependence of the IME framework of specific operation system.
In certain embodiments, can use interprocess communication (IPC) to be based upon the communication between the client and server.IPC is provided among a plurality of threads in one or more processes (for example, client process and server processes), carrying out one group of technology of exchanges data.In certain embodiments, these processes possibly just run on the equipment.In other embodiments, these processes possibly just run on a plurality of equipment that connected by network.The IPC method and technology can comprise remote procedure call (RPC).RPC can carry out subroutine or program (for example, server) in another address space different with the address space of calling program application (for example, client).
In certain embodiments, server needn't use the respective operations system the IME framework by instantiation.This makes server processes platform independence and portable.For example, the different I ME that runs on the different platform can be connected to same server.Server is handled, is generated presentation information and send presentation information to client all key events that receive from client.Presentation information comprises the text of the current and/or part conversion of treating on client application, to show, and the content that is used for any candidate window.
§ 2.0 client-server architectures
Fig. 1 is the block diagram of the common customer end-server architecture 10 of diagram Input Method Editor (IME).Client-server architecture 10 comprises stateless client 12, state server 14 and the communication session between them 16 is arranged.Communication session 16 comprises and causes asking 18 to be transmitted the key events that receives with by server 14 from client 12, and the presentation information that during transmitting with the response 20 that is received by client 12 from server 14, provides.Core I ME function is write as transplantable as far as possible, and is carried out by server 14.As employed in this article, the ability that term " portable " indication server 14 moves on various operating systems, said operating system includes but not limited to Windows, Mac, Linux and/or Google Chrome.In brief, server 14 is not known operation system function, and its any required function that possibly need is provided.The interface of client 12 package servers, and handle the IME application programming interfaces (API) that are used for each operating system.
As stated, one or more clients 12 can be communicated by letter with server 14., under situation about being performed on the joint equipment, further discuss in detail below at client 12 and server 14, the user is typically only docked with a client 12 at every turn.Yet the user can be between client be switched fast, though dock with a client middle the time.For example; Text (for example is input to first client; Client for the WP application instantiates on the particular device) user can be when being typed into text first client middle; Its notice is switched to second client client of the web-browser application instantiation on this particular device (for example, for).The input state of the client 12 that therefore, is associated with the WP application need be retained.As further below argumentation in detail, server 14 can be accepted also maintenance and follow the tracks of the key events from different clients 12 through the peculiar session of foundation and each client 12.
Between session, can open and be closed in a plurality of connections between client 12 and the server 14.Even when the connection between client 12 and server 14 has been closed, it is movable that session can remain.For example, can open connection so that key events is transmitted to server 14 or makes presentation information be transmitted to client 12 from server 14 from client 12.Yet each connects possibly have the shorter lifetime in the Session Time frame.In other words, the lifetime of connection is shorter than the lifetime of its session that is associated.For example, client 12 be opened to server 14 connection, key events is sent to server 12, receives response from server 12, connect then and be closed.Therefore, the key events of each transmission is with session identification (SID).SID makes server 14 keep following the tracks of to having received which key events from which client 12.More specifically, and at the corresponding SID of session between a client 12 and the server 14 couple and the corresponding SID of session between another client 12 and server 14 is unique.An exception is that client 12 sends the order (for example, " CreateSession ") of creating session.When under client 12 is not having the situation of SID, calling this order, server 14 is created sessions, generates corresponding SID and is sent this SID to client 12.This procedural example is provided below.
Like top introduction, client 12 is used and is realized specific to operating system or specific to the IME framework of platform.Example IME framework can comprise text service framework (TSF) or the IMM32 that is used for the Windows of Microsoft.The IME framework is the API (API) that makes it possible to carry out senior, as to be independent of source text input.Can support not know the application of specific IME framework (being that the IME framework is neutral for example) through enabling to comprise the unaware application support (UAS) of cicero unaware application support (CUAS).
As non-limiting example, with describing the embodiment that uses TSF.In the TSF environment, " lmeTextService " handle conversation request, via user's key input and from the response of server 14.When IME was activated at client 12 places at first, client 12 was opened IME user interface (IME-UI) with " lmeTextService::Activate ", is established to the connection and the beginning session of server 14.IME-UI can be used as inlet or the window in current application (the IME-UI window that for example, in word processing is used, ejects) is provided.Each user inputs character (for example, utilizing each key events), " ImeTextService::OnTestKeyDown " just is called.Client 12 key events that send to server 14 comprise key code and modifier, and as response, client 12 receives presentation information from server 14.
When server 14 advances to when key input handled, " ImeTextService::HandleKey " is called.The presentation information of sending from server 14 is applied to the IME-UI in the client application.More specifically, client is drawn the preediting text and is added the section attribute to text, if suitably.If the response from server 14 comprises a plurality of candidates, then client 12 in IME-UI with candidate list show candidate person.Call " ImeCandidateWindow " and present candidate data.Client 12 can provide some functions through the language hurdle.Such function can include but not limited to configuration, show input state and help document is shown.Realize these functions with " ImeButtonMenu ".
Although under the linguistic context of Windows operating system, the foregoing description is provided, yet client-server IME architecture is easy to be applicable to other operating systems.For example, client-server IME architecture can use the IMKit that is used for Leopard operating system to realize.
§ 2.1 example client end-server architecture embodiment
Can use various types of architectures to realize the system of Fig. 1, the example of architecture has been shown in Fig. 2 and 3.Fig. 2 is the block diagram of examples shown client-server IME architecture.In the client-server IME of Fig. 2 architecture, client 12 is performed on same equipment with server 14.As employed in this article, term apparatus is meant to be handled or computer equipment, and it can include but not limited to desk-top computer, laptop computer, flat computer, server system, PDA(Personal Digital Assistant) and/or mobile phone.Client 12 as application A PP1, APP2 ... APPn is provided, its each comprise IME dynamic link library (DLL) 30 and corresponding IME-UI 32.Being each client 12 of user program instantiation of correspondence, for example, can be three clients 12 shown in word processor, browser program and e-mail program have been distinguished instantiation.Server 14 includes state session manager 34, transform engine core 36 and resource 38.In certain embodiments, server 14 can be performed in sandbox 40.The a plurality of connection that has state session manager 34 to coordinate from a plurality of clients 12 (for example, e-mail applications and web browser application).
Fig. 3 is the block diagram of another example client end-server I ME architecture of diagram.Client 12 or a plurality of client 12 are performed on one or more client devices 12, and server 14 is performed on autonomous device 44.Client device 42 communicates through network 46 and server, and network 46 can include but not limited to Local Area Network or wide area network (WAN) (for example, the Internet).
The client-server architecture can be used such as single-threaded and single link model of IPC and realize.Server 14 is only opened a port, and a plurality of connections from client 12 are handled.Single-threaded and single link model provides simplicity and portability.Nearly all platform is all supported single-threaded and single IPC that is connected.
As stated, each key events of client 12 mats (for example, pressing [A] button) is connected to server 14, and obtains the presentation information (for example, [A] should be shown as Japanese [あ]) corresponding to key events from server 14.Connection is stateless, because its not maintenance activity, and be independent of any other connection between client 12 and server 14.Generally speaking, the life-span of each IPC connection is very short.For example, after server sent presentation information to client 12, it was closed connection immediately and waits for other connections.
In some cases, if for example malicious user is connected to server and what is not all done, then server 14 possibly be prevented from.In other cases, if for example malicious server is not sent any response to client 12, then client 12 possibly be prevented from.In order to prevent such situation, for each connection realizes overtime.More specifically, if client 12 or server 14 do not send message in the predetermined time period (for example, 500 megaseconds), then close current connection.
In case server is by instantiation, server just is that the communication between client and server generates the access path name.Some embodiment for example utilize the named pipe pathname, and it is unique about the named pipe pathname that is used for other sessions.Through using unique named pipe pathname, stop malicious user to be generated the pipeline service device of personation name before the instantiation at effective server.Therefore, through generate at random, multidigit pathname (for example, 128 pathnames that generate at random) provides pathname.Server is stored in pathname in the user profiles catalogue.After server is by instantiation, but before sending first key events, client is from user profiles catalog search pathname, and the pathname that use retrieves comes the transfer key incident.
When malicious application (that is, before server can be saved in user profiles with the Actual path name) before startup of server will be palmed off pathname and is kept in the user profiles, another behavior (exploit) can take place.Under these circumstances, and if client used this personation pathname to connect, then client possibly be connected to the server of malice or personation.For example, malicious application is saved in user profiles with pathname, and this pathname will cause client that key events information is sent to malicious server, rather than the server of expection.
Yet client-server architecture 10 can realize making client can know that it just is being connected to the technology of effective server.An example technique can comprise the file of server locking surviving path name.Other example technique can comprise operating system provide the equity in path process ID (PID), the API of the PID that knows equity is provided and/or via connect sending PID.In addition, pathname should only be that validated user is addressable.Therefore, can the effective and safe token be offered corresponding A PI.Security token can conduct interviews local system, keeper and active user.Refuse other user captures.
PID is the peculiar ID that operating system is distributed to each process.Server or client can be discerned its reciprocity ID through the API that uses operating system to provide.In case process has been confirmed the PID that it is reciprocity, this process is just known the various information relevant with this PID, comprises the owner's (for example, user name) corresponding to this PID.Through the inspection owner, server or client process can be known the ID that it is reciprocity.If user name is different from the user name of expection, then server or client process can be refused to connect.
As stated, server 14 can be performed in sandbox.Sandbox is the restriction environment that program is moved therein, with and typically can help in the domestic storehouse of carrying out of limit collar by making such as the process of server processes.When by sandbox, server processes have conditional function.In certain embodiments, server processes only can be visited cpu cycle and storer.For example, in such embodiment, the sandbox server processes can not write dish or show himself window.The function of the permission of server processes is by clear and definite Policy Adjustment.The sandbox storehouse is included in the server processes code.In certain embodiments, code is not carried out in that virtual machine is inner, and therefore, server processes are with primary speed operation and the direct API of accessing operation system.
It is the security of putting the information of letter that sandbox utilize specific operation system to provide to allow can not make the code execution of lasting change or visit computing machine.The architecture that sandbox provides depends on operating system with definite assurance.For example, in Windows, code can not be carried out any type of I/O under the situation of not initiating system call.In most of system call, Windows carries out safety inspection.Sandbox guarantees that safety inspection is because of failing like the specific action that server processes are carried out of forbidding that in corresponding policy, defines.
In certain embodiments, sandbox depends on the protection that operating system mechanism provides, and operating system mechanism can include but not limited to token, object and/or integrity grade.These example mechanism are being highly effective aspect protection operating system, its configuration and the user data.Physical constraints is disposed by policy, and policy is the DLL of the restriction and the permission that define server processes of can being called.In certain embodiments, the example mechanism of control restriction comprises main token, simulation token and work token.Some embodiment further comprise integrity grade (embodiment that for example, comprises Windows VistaTM operating system).
In case, just can carrying out a series of inspections by instantiation, server guarantees that server just is not performed as normal procedure (that is non-sandbox process).These inspections can comprise the value of one or more tokens that the inspection client is provided with.Server can be handled these one or more tokens, and can consequent value and desired value be compared.If consequent value is not equal to desired value, then server is by sandboxization, and server is stopped.Another inspection can comprise that the sign that operating system is provided compares with the expection sign.If the sign that is provided is equal to expection sign, then server is by sandboxization, and client-server connects and be performed, like what provided in this article.
§ 2.1.1 example server architecture and embodiment
Fig. 4 is the functional block diagram of the server architecture of diagram server 12.Server 12 comprises session layer 50, converter layer 52 and accumulation layer 54.Session layer 50 comprises interpreter module 56, state session manager 34 is arranged, key mapping block 58, key map 60, conversion module 62 and converter table 64.Converter layer 52 provides transform engine core 36, and comprises converter function module 66, conversion module 68, one or more rewriter module 70 and user's historical record 72.Accumulation layer comprises lexicon module 74 and resource 38, and resource 38 can comprise user-oriented dictionary 76 and system dictionary 78.
Key map 60 is tables of data with converter table 64, and key mapping block 58 is modules of the data of access stored in the corresponding data table with conversion module 62.Key map 60 is provided for to being transformed into the data of order.Each is to comprising input state and incoming event (for example, KeyEvent).For example; " composition (component) " state is ordered being constrained to " StartConversion " with [space (space)] key events; " conversion (conversion) " and [space] order being constrained to " SelectNextCandidate ", and " conversion " and [enter (carriage return)] is to being constrained to " CommitCurrentCandidate " order.Key shines upon 58 modules carries out such conversion based on key map 60.Converter table 64 is to be used for the table to the conversion of hiragana (for example, [a] to [あ], [ka] to [か]) of Roman capitals for example.Discussed example converter table 64 with reference to figure 5A below.Converter 62 modules are carried out such conversion based on converter table 64.
50 pairs of session layers all have state task to handle, and received key events is made an explanation.More specifically, session layer 50 receives all key events from the user, and they are construed to order.Japanese as example languages, is translated into [あ] with user's input [a] corresponding key events, and/or same, press the corresponding key events of space bar [space] with the user and translated into conversion command.Converter layer 52 is responsible for all conversions, and carries out the Core Feature of IME.Conversion module 68 is provided for inquiry string is converted to the translation function of the lattice battle array of candidate character strings.For example, when a query is [thou Kei Full u ta] (ainouta), the candidate of the string grid array can be provided as [love's song, love's poem, ......] (see Figure 6B).Accumulation layer 54 management dictionary visits.Accumulation layer 54 is bottoms, and manages various types of dictionary data, and is unmodifiable.System dictionary 78 comprises the set of hiragana key, day words and phrases value, part of speech etc.The example collection that system dictionary 78 is provided can comprise あ い (ai) likes (ai/love), noun}, (no), (no), particle}, { う (uta), song (uta/song), noun}.User-oriented dictionary 76 also provides such set, but be variable and the user revisable.
As further discuss in detail below, the instantiation procedure of in session layer 50, realizing can comprise: server layer receives key events from client UI; This incident is construed to order; Send inquiry to converter layer 52, if necessary; Receive the result of this inquiry from converter layer 52; Generate presentation information based on the result; And this presentation information sent to client UI.For example, and with Japanese as example languages, interpreter module 56 can be interpreted as key events and insert character (InsertCharacter) order, to insert japanese hiragana characters (for example, [あ]), substitutes corresponding Roman capitals character (for example, [a]).
Special in figure 5A and 5B, session layer 50 can make up the hiragana character string from key events.This character string is called as preediting.As further discuss in detail below, preediting is provided for converter layer 52 as being processed the inquiry that conversion is provided.This conversion can be described by deterministic finite automaton (DFA) and rule.Fig. 5 A illustrates with Roman capitals and takes passages to the example of the DFA 80 of the form of hiragana converter table, and Fig. 5 B illustrates its corresponding rule 82.
The example converter table of Fig. 5 A supports Roman capitals to the hiragana conversion.For example, if [a] is pressed, then [あ] is inserted into.Rule [kk] comprises unsettled field.More specifically, when presentation information was outputed to client, the DFA state was reset.Yet when designated, current DFA state is write with pending status when unsettled.For example, if user's input [kk], then [つ] at first offered client, and after that, IME hypothesis [k] is transfused to.If the user keys in [kki], then output becomes [つ I].
Refer now to Fig. 6 A and 6B, converter layer 52 provides the Core Feature of client-server IME of the present disclosure.If will key events subsequently being interpreted as conversion (Convert), interpreter module 56 orders with (for example preediting; [あ い]) convert the japanese kanji characters ([love]) of one or more correspondences to, then this preediting is generated and is provided for converter layer 52 as inquiry in session layer 50.50 pairs of these preeditings of converter layer are handled, and generate among a plurality of results that comprise the speech section.Each speech section is provided as the candidate collection, its each comprise word sequence.Each candidate comprises the score value that is associated, and based on the order of score value candidate is listed in the candidate list.
Fig. 6 A illustrates the conversion of sample text character string (promptly; " My name is Nakano (my name is middle open country) " that is provided as the hiragana text-string), comprise a plurality of speech sections (for example, section 0, section 1, section 2) correspondence conversion output and corresponding to the candidate list of each speech section.Each candidate list comprises can be by one or more conversion candidates persons of user's selection.The speech lattice battle array that the speech section generates internally generates, and has discussed the example of speech lattice battle arrays in detail with reference to figure 6B.Converter layer 52 generates this lattice battle array based on language model from the character string inquiry.
Fig. 6 B illustrates the example speech lattice battle array corresponding to [あ い う ], and it is the hiragana text-string corresponding to the love song of roman text character string [ainouta] or English.Converter layer 52 generates the example speech lattice battle array of Fig. 6 B, and it comprises beginning (BOS) and end (EOS) designator of sentence and the candidate conversion of hiragana character of sentence.As stated, the lattice battle array generates based on language model.The example languages model can make up from the web data that can be used as the gathering that text data is provided.
As stated, converter layer 52 comprises one or more rewriter modules 70.Rewriter module 70 is carried out to replenish and is handled, and it can comprise based on (for example, confirming from user's historical record 72) user's history coming candidate is carried out rank again.Rewriter is called after main transfer process and after the user has submitted the result to.Rewriter module 70 can be adjusted the result of main converter, and can the selected candidate of recording user.Example rewriter routine can include but not limited to: the historical study of user (for example; Segment boundary is adjusted and candidate is carried out rank again), single kanji dictionary (for example; Add single kanji character to candidate), the symbol dictionary (for example; Add sign character to candidate), the date (for example; Add date literal to candidate), dictionary of collocations (for example, arrange in pairs or groups candidate is carried out rank again) and quantity (for example, expansion candidate quantity) based on speech.
The historical study of user is useful especially rewriter routine because its based on as the user's that confirms from user's historical record 72 input history come the converter result is adjusted.Revise arbitrary in the candidate with section or both when submitting to as a result when the user follows segment boundary, the historical study of user rewriter record comprises inquiry and user's modification right.During inquiry that user input is next time write down, rewriter based on write down to revising the order of acquiescence border and candidate.The history that the historical study of user rewriter uses cache algorithm to come recording user.Cache algorithm can include but not limited to least recently used (LRU).
Embodiment of the present disclosure can be used for LOUDS the data structure of main dictionary.LOUDS is the data structure algorithm that utilizes TRIE, and TRIE is the data tree structure of ordering, and it is used to store the related array with the key that is provided as character string.Use the LOUDS data structure, data are stored as bit sequence, and it makes size of data very compact.Main dictionary comprises key index, the speech attribute in the array and the speech value among the LOUDS among the LOUDS.Key index is pointed to the speech attribute, and the corresponding leaf of each speech properties point speech value, or the speech attribute has special transliteration position.
§ 3.0 instantiation procedures
Refer now to Fig. 7, illustrate the instantiation procedure 801 that is used to set up client-server IME session.Client-server architecture 10 above process 801 can for example be used in single computer equipment realizes that wherein step can be carried out by operating system, and step can be carried out on client, and step can be carried out on server end.
If session is asked, (for example, IMEserver.exe), and the server executable program is quoted (802) one or more tokens then can to initiate the server executable program.For example, request can comprise one or more tokens, and the server executable program can be quoted token.Process 801 confirms based on the token of being quoted whether server can be by instantiation (804) in sandbox.For example, the server executable program can be handled token, and if token expectation authorization value, then can be by instantiation in sandbox.If server can not be by instantiation in sandbox, then this process is sent mistake (806), finishes then.On the contrary, if server can be by instantiation in sandbox, this process instance server (808) then.For example, operating system continues to carry out the server executable program with complete instantiation server.
Whether the server that process 801 is confirmed instantiation is by actual sandboxization (810).As non-limiting example, one or more below server can be carried out in the inspection: the value of one or more tokens that the inspection client is provided with, and if said value be not equal to desired value, then server is not by sandboxization; The sign that operating system is provided compares with the expection sign, and if the sign that is provided be equal to the expection sign, then server is by sandboxization.If by sandboxization (that is, server is just as the normal procedure operation), then process 801 is not sent mistake (806) to server, finishes then.For example, operating system can respond based on the server to inspection and send mistake.If server is by sandboxization, process 801 users' that confirm to be associated ID (812) then with the application of the request of sending.As non-limiting example, can ID be provided with conversation request.
Carry out session (822).Described in further detail with reference to figure 8 below and can be used as the instantiation procedure that a part that session carries out is performed.
This process confirms whether session waits to be finished (824).For example, if the user closes client application and/or the IME-UI in using, then can on client, generate end session request.In some embodiments, server receives end session request, deletes all resources and/or the object that distribute for special session, and conversation end.If session is not waited to be finished, then process 801 back is recycled to step 822.If session is waited to be finished, then session is terminated, and process 801 finishes.
Fig. 8 is that diagram is used to use the text of client-server IME session and the process flow diagram of the instantiation procedure 901 that text-string is changed.Instantiation procedure 901 can be performed during carrying out session (for example, 822 of Fig. 7).Be described below, the part of process 910 is performed in client, and other parts of this process are performed in server.
Process 901 confirms whether user's input is detected (900).For example, client monitors user's input (for example, button, click, screen touch).If user's input is not detected as yet, then process 901 back circulates.If user's input is detected, then process 901 generates corresponding key events (902), and this key events and SID are sent to server (904).For example, client generates key events based on user's input, and this key events and SID are sent to server.
At the server place, process 901 explains whether key events (906) and definite key events insert order (908) corresponding to character.If key events does not correspond to character and inserts order, then process 901 continues at 910 places.If key events inserts order corresponding to character, then process 901 continues at 912 places.
If key events inserts order corresponding to character, then process 901 is confirmed corresponding characters (912) and is generated presentation information (914) based on key events.For example, server is confirmed corresponding characters and is generated presentation information based on key events.Process 901 sends to client (916) with presentation information.For example, server sends to client through connecting with presentation information.
At server 14 places, if corresponding to character, key events do not insert order, then process 901 confirms that whether key events is corresponding to conversion command (910).If key events is corresponding to conversion command, then process 901 continues at 920 places.If key events does not correspond to conversion command, then process 901 continues at 930 places.At 920 places, process 901 is confirmed preediting (920) based on the key events that after a last conversion is carried out, receives from client device.Because server has state, so server is known key events and order about special session.Process 901 provides preediting to change (922), generate corresponding presentation information (924), presentation information is sent to client (926) as inquiry.Client 12 is in response to receiving presentation information, on the client display or showing corresponding characters (928) such as in word processor and the environment that client 12 is associated, finishes then.
At 930 places, if corresponding to character, key events do not insert order, then another order is indicated.Other orders can comprise moving cursor order and text selecting order.Process 901 is handled (930) at the server place to indicated order.Process 901 generates presentation information (932), presentation information is sent to client (934).Client 12 is in response to receiving presentation information, on the client display or showing corresponding characters (936) such as in word processor and the environment that client 12 is associated, finishes then.
Example client end-server session will be described at present.This example client end-server session is provided as the non-limitative illustration of embodiment of the present disclosure.Example client end-server session comprises following key sequence: [a], [i], [space], [space] and [enter].More specifically, client receive indication [a] is transfused to (for example, [a] key is pressed) on keyboard input (referring to Fig. 8 900).Client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer with this key events be construed to InsertCharacter order (referring to Fig. 8 906 and 908), and should order and sent to preediting with [a].Preediting converts [a] (Japanese Roman capitals) to [あ] (japanese hiragana).Preediting returns to session layer with result " あ (a) ".Corresponding presentation information generated and be transmitted to client (referring to Fig. 8 912,914 and 916), and client to the user show [あ] (referring to Fig. 8 918).
Client receives indication [i] is transfused to (for example, [i] key is pressed) on keyboard input from the user, and definite key input be detected (referring to Fig. 8 900).Client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer with this key events be construed to InsertCharacter order (referring to Fig. 8 906 and 908), and should order and sent to preediting with [i].Preediting converts [i] (Japanese Roman capitals) to [い] (japanese hiragana).Because server has state, so it knows that previous conversion has comprised [a] to [あ].Therefore, preediting is existing returns to session layer with result " あ い (ai) ".Corresponding presentation information generated and be transmitted to client (referring to Fig. 8 912,914 and 916), and client to the user show [あ い] (referring to Fig. 8 918).
Client then from the user receive indication [space] is transfused to (for example, space bar is pressed) on keyboard input (referring to Fig. 8 900).Client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer with this key events be construed to Convert order (referring to Fig. 8 906 and 910).Because server has state, be " あ い (ai) " so server is known previous character string, and should order with " あ い (ai) " and send to converter.Converter converts [love] (kanji) to [あ い] (japanese hiragana).Converter with result's " love " return to session layer (referring to Fig. 8 920 and 922).Corresponding presentation information generated and be transmitted to client (referring to Fig. 8 924 and 926), and client to user's demonstration [love] (referring to Fig. 8 928).
Client then from the user receive indication [space] by once more the input (for example, space bar is pressed on keyboard) input (referring to Fig. 8 900).Client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer with this key events be construed to Convert order (referring to Fig. 8 906 and 910).Because server has state, so server is known the previous conversion from [あ い] (japanese hiragana) to [love] (kanji).This information is provided for converter, and it confirms the one or more candidate conversion from " あ い " (japanese hiragana) to japanese katakana.More specifically, candidate list is generated and is comprised the one or more japanese katakana candidates corresponding to " あ い ".In this example, candidate list can comprise [like, close, あ い, phase ... ] (kanji, katakana or hiragana).Candidate list is returned to session layer, and based on its generate presentation information (referring to Fig. 8 920,922 and 924).Will present information to the client (see Figure 8 of 926), and the client list of candidates to the user [love, together, thou Kei, relative, ......], in which the first candidate [Love] is highlighted or otherwise is indicated for the currently selected candidate (see Figure 8 of 928).
In order to select different candidates from candidate list, the user can enter key incident (for example, by depressing " ↓ " down Arrow).In response to user input, client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer with this key events be interpreted as SelectNextCandidate order and to this order handle (referring to Fig. 8 906 and 930).Corresponding presentation information generated and be transmitted to client (referring to Fig. 8 932 and 934).Client to user's show candidate person tabulation [like, close, あ い, phase ... ], wherein second candidate [closing] by high bright or be indicated as in addition current selection candidate (referring to Fig. 8 936).
In order to select the candidate of current selection from candidate list, the user provides corresponding input (for example, pressing [enter]).In response to user input, client generate key events and with this key events and SID send to server (referring to Fig. 8 902 and 904).When having received key events, session layer generates the corresponding response that is used for selected candidate (for example, [closing]) is submitted to client.Response is received by client, and client is showed selected candidate (for example, [closing]) in application.If there is not further text to wait to be transfused to or to change, then client can send to server with SID with the cancellation conversation message.As response, server finishes client-side session.
Refer now to Fig. 9 and 10, the embodiment of client-server architecture can be updated server under the situation of not restarting client.For example, server can be updated under the situation that needn't close and restart the client application that maybe be just communicates with this server.More specifically, when the client that connects recently had with the compatible communication protocol of current server, renewal can be carried out by reticent ground (that is, under the situation of not warning the user).As the result who upgrades, current server is stopped, and new server is by instantiation.Under the situation of the incompatible version of the communication protocol of the version of the communication protocol of client and new server, this situation is detected, and the user is pointed out.
Fig. 9 is the block diagram of diagram version and protocol testing.Session is in time period t
0Between active client 1002 and current server 1004, carry out.In time period t
0, new client 1006 attempts to set up the session with current server 1004.Though not shown in Fig. 9, if new client 1006 is same versions with current server 1004, this session is established, and active client 1002 carries out with new client 1006 boths and current server 1004 alternately.In the block diagram of Fig. 9,, confirm that the version of new client is newer than the version of current server 1004 in time period t 1.Because the version of new client is newer than the version of current server, so current server 1004 is terminated, and new server 1008 is by instantiation.Between new client 1006 and new server 1008, set up session 1010.Therefore, current sessions 1000 is by temporary suspension.Do not warn this temporary suspension to the user of docking with active client 1002.
In time period t
2, confirm whether the communication protocol of active client 1002 and new server 1008 is compatible.More specifically, agreement comprises the special field that is used for the storage protocol version value.When new server 1008 was initialised, the protocol version value of this server was stored local file.Active client 1002 is uploaded this document, and checks whether the protocol version of this server is identical with the protocol version of client.In certain embodiments, whether the compatible protocol table can be provided and to may be implemented as the protocol version of confirming server identical with the protocol version of client.
If communication protocol is compatible, then between active client 1002 and new server 1008, set up session 1012.In this case, the server version of active client 1002 is older than the server version of new server 1008.Therefore, new server version can with old server version back compatible.If communication protocol is incompatible, then the session between active client 1002 and new server 1008 remains and closes, and to the mistake of user's caution on client.For example, can generate the indication user and restart the caution that particular clients is used.
With reference to Figure 10, illustrate the instantiation procedure 1101 that is used to provide version and protocol testing especially.Process 1101 supposition active clients and the current server of Figure 10 just communicate through current sessions.
If the current server version is older than new client release, then process 1101 stops current server (1106) and finishes with the current sessions of active client.For example, operating system can stop current server.The server (1108) that process 1101 instantiations are new.Process 1101 connects new server and new client (1110).Process 1101 is confirmed whether compatibility (1112) of active client agreements and new server protocol.For example, operating system can confirm whether agreement is compatible.
If active client agreement and new server protocol compatibility, then process 1101 continues at 1114 places.Process 1101 is connected to new server with active client, and session is established (1114) between it.For example, server generation pass name, and to active client granting SID.Process 1101 uses new server to come active client and new client event are handled (1118), finishes then.
Turn back to 1112, if active client agreement and new server protocol are incompatible, then process 1101 uses new server only new client event to handle (1116).Process 1101 is generation error (1120) at the active client place, finishes then.For example, operating system can generate the mistake that the indication user is restarted client at the active client place.
Turn back to 1104, process 1101 is confirmed whether compatibility (1104) of new client protocols and current server agreement.For example, operating system can compare agreement.If new client protocol and current server protocol-compliant then use current server to come active client incident and new client event are handled (1122), this process finishes then.If new client protocol and current server agreement are incompatible, then send mistake (1124) at new client place.Use current server to come the active client incident is handled (1126), this process finishes then.
As discuss in detail in the above, client-server IME architecture 10 comprises stateless client, it sends to each key events server and receives presentation information from server.If between the input session, server is terminated and restarts, and then possibly unexpected presentation information is provided to client.In order to handle such situation, client-server IME of the present disclosure provides the server of restarting termination, detect restarting and the key events sequence of record being sent to server to bring current new session of server.The key events sequence can be stored than short time interval.For example, the key events sequence can be stored the lifetime of current sessions, when finishing this session, is eliminated then.As another example, the key events sequence can be stored in the lifetime of the connection in the current sessions.As stated, connection can be terminated after server will send client to the corresponding presentation information of last key events sequence.
Send the key events sequence and cause client-server IME architecture 10 infinite loop, it can make server repeat collapse, and such collapse key events sequence can be identified and record.For example, because the particular key sequence of events can cause server failing.When restarting server,, can this same keys sequence of events be sent back the server of instantiation recently for the state with current new server takes previous session to.Yet, and, also possibly cause new server failing because the particular key sequence of events possibly be wrong key events sequence.
Refer now to Figure 11, illustrate the instantiation procedure 1201 that is used to rebuild client-server IME session.Process 1201 confirms whether generated incident (1200) at the client place.For example, client 12 can import the monitoring key incident based on the user.
If do not generate incident at the client place, then process 1201 back circulates.If the place has generated incident in client, then process 1201 is with this logout (1202) in sequence of events.More specifically, client can be stored in incident in the sequence of events in the local storage of the equipment that client process carries out above that.Send this incident to server (1204), and process 1201 confirms whether server stops (1206).For example, client 12, IME supporting frame or computer operating system can confirm whether server 14 has stopped running.
If server does not stop, then process continues at 1208 places, wherein receives the presentation information (1208) corresponding to this incident at the client place from server.Process 1201 confirms whether session waits to be finished (1212).If session is not waited to be finished, then process 1201 back is recycled to 1200.If session is waited to be finished, then process 1201 finishes.
Turn back to 1206, if server stops (1206), then process 1201 confirms that whether this terminations are continuous terminations (for example, second, third or the 4th termination continuously) (1207).For example, after each server stopped, IME client 12, IME supporting frame or operating system can make counter increase progressively.If stopping is continuous termination, then generation error (1211), and process 1201 finishes.Mistake can be generated at the client place, and can show to the user.Mistake has been forbidden the infinite loop of server instanceization and termination.
If stopping is not continuous termination, then the new server (1210) of process 1201 instantiations.More specifically, like what discuss in detail in the above, operating system can the new server of instantiation.Client is connected to new server, and process 1201 is set up new session (1214).The sequence of events of record is sent to new server (1216) from client.Use sequence of events, the session that server 14 can instantiation client 12, it is in the identical state of previous session with client 12 when server 14 terminations.Process 1201 back is recycled to 1206 then.
The embodiment of the disclosure of describing in this manual and all functions operation can be with Fundamental Digital Circuit, or with computer software, firmware or hardware, comprise disclosed in this manual structure with and equivalent structures, perhaps realize with above one or more combination.Can embodiment of the present disclosure be embodied as one or more computer programs, promptly one or more computer program instructions modules, it is coded on the computer-readable medium, carried out or the operation of control data treating apparatus by data processing equipment.Computer-readable medium can be: the material composition of machine readable storage device, machine readable storage substrate, memory devices, formation machine readable transmitting signal or above one or more combination.Term " data processing equipment " comprises all devices, equipment and the machine that is used for deal with data, comprises as an example: programmable processor, computing machine or a plurality of processor or computing machine.Except that hardware, device can be included as the code that in question computer program is created execution environment, for example constitute processor firmware, protocol stack, data base management system (DBMS), operating system or more than the code of one or more combination.The signal that the transmitting signal right and wrong generate naturally, the signal of electricity, light or the electromagnetism that generates of machine for example, it is generated coded message to send suitable acceptor device to.
Computer program (being also referred to as program, software, software application, script or code) can be write by programming language in any form; Comprise compiling or interpretative code; And it can be disposed in any form, comprises as stand-alone program or as module, assembly, subroutine or other unit of being suitable in computing environment, using.Computer program needn't be corresponding to the file in the file system.Can be at the file that keeps other programs or data (for example with procedure stores; Be stored in the one or more scripts in the marking language document) a part, be exclusively used in single file or a plurality of coordinative files (for example, storing the file of one or more modules, subroutine or partial code) of in question program.Can computer program be deployed as and perhaps be positioned at the three unities on the computing machine or striding on the distribution of a plurality of places and a plurality of computing machines and carry out by interconnection of telecommunication network.
Process of describing in this manual and logic flow can be carried out to import data through operation and to generate output by one or more programmable processors of carrying out one or more computer programs and carry out function.Said process and logic flow can also be carried out by dedicated logic circuit, and the device can also be implemented as dedicated logic circuit, dedicated logic circuit is FPGA (field programmable gate array) or ASIC (special IC) for example.
The processor that is suitable for computer program comprises, as an example, and general and special microprocessor, and any one or a plurality of processor of the digital machine of any kind.Usually, processor will receive instruction and data from ROM (read-only memory) or RAS or both.The main element of computing machine is processor that is used to execute instruction and the one or more memory devices that are used for storage instruction and data.Usually; Computing machine also will comprise the one or more mass memory units that are used to store data; For example magnetic, magneto-optic disk or CD, or operationally couple receiving data from said one or more mass memory units or to transmit data to said one or more mass memory units, or both.Yet computing machine needn't have such equipment.In addition, can computing machine be embedded in another equipment, said equipment is mobile phone, PDA(Personal Digital Assistant), mobile audio player, GPS (GPS) receiver for example, just lists out some.Be suitable for nonvolatile memory, medium and memory devices that storage computation machine programmed instruction and data computing machine computer-readable recording medium comprise form of ownership, comprise as an example: semiconductor memory devices, for example EPROM, EEPROM and flash memory device; Disk, for example internal hard drive or removable dish; Magneto-optic disk; And CD-ROM and DVD-ROM dish.Processor and storer can be by supplemented, or integrate with dedicated logic circuit.
For mutual with the user is provided, embodiment of the present disclosure can realize having on the following computing machine: be used for the display device to user's display message, for example CRT (cathode-ray tube (CRT)) or LCD (liquid crystal display) monitor; And the user can provide the keyboard and the indicating equipment of input, for example mouse or tracking ball to computing machine through it.Also can use the equipment of other types that mutual with the user is provided; For example, the feedback that offers the user can be any type of perceptible feedback, for example visual feedback, audio feedback or tactile feedback; And can receive input in any form from the user, comprise input acoustics, speech or sense of touch.
Embodiment of the present disclosure can realize in comprising following computing system: aft-end assembly, for example as data server; Perhaps middleware component, for example application server; Perhaps front end assemblies, for example have the user through its can with the client computer of embodiment interactive graphical user interface of the present disclosure or Web browser; Any combination of perhaps one or more such rear end, middleware or front end assemblies.The assembly of system can be through any form of for example communication network or the digital data communication interconnection of medium.The example of communication network comprises LAN (" LAN ") and wide area network (" WAN "), for example the Internet.
Computing system can comprise client and server.It is mutual that client and server passes through communication network usually away from each other and typically.The relation of client and server relies on the computer program generation that moves on each computing machine and have the client-server relation each other.
Though this instructions comprises many details, these details should not be interpreted as the restriction of the scope of the content that maybe can advocate the disclosure, and should be interpreted as the description specific to the characteristic of specific embodiment of the present disclosure.Can also some characteristics combination of in the situation of the embodiment that separates, describing in this manual be realized in single embodiment.On the contrary, also can the various characteristics of in the situation of single embodiment, describing be realized in a plurality of embodiment discretely or in any suitable son combination, realize.In addition; Although possibly in the above feature description worked in making up at some; Even initial opinion so; But in some cases, can the one or more characteristics from the combination of being advocated be left out from combination, and can the combination of being advocated be pointed to the variant of son combination or son combination.
Similarly, though described operation with particular order in the accompanying drawings, not should with this be interpreted as need with shown in particular order or carry out such operation, or need to carry out all illustrated operations with consecutive order, just can reach the result of expectation.In some cases, multitask and parallel processing can be favourable.In addition; Should the separation of in the above-described embodiments various system components be interpreted as all needs such separation in all embodiment; And should be understood that, usually can be with described program component and the system integration to becoming single software product together or being packaged into a plurality of software products.
A plurality of embodiment of the present disclosure has been described.Yet, should be understood that, can under the situation that does not deviate from spirit of the present disclosure and scope, carry out various modifications.Therefore, other embodiment within the scope of the appended claims.
Claims (89)
1. computer implemented method comprises:
Receive Input Method Editor (IME) server requests; Said IME server requests comprises that one or more tokens and request IME server are by instantiation; Said IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
Confirm that based on said one or more tokens said IME server can be by instantiation in the restriction environment; And
The said IME server of instantiation in said restriction environment.
2. computer implemented method according to claim 1 further comprises:
Carry out the said IME server of checking in said restriction environment by one or more inspections of instantiation;
Confirm that based on said one or more inspections said IME server just in said restriction environment, not carry out; And
Just in said restriction environment, do not carry out in response to definite said IME server, stop said IME server.
3. computer implemented method according to claim 2, wherein said one or more inspections comprise at least one in following: token value and desired value are compared; The session identification of said IME server is compared with the expection sign; Confirm that said IME server has System Privileges; And the result who confirms to recover function.
4. computer implemented method according to claim 1 further comprises:
Carry out the said IME server of checking in said restriction environment by one or more inspections of instantiation; And
Confirm that based on said one or more inspections said IME server just carries out in said restriction environment.
5. computer implemented method according to claim 1, the said IME server of wherein said restriction environmental restraint can write store type of data.
6. computer implemented method according to claim 1, wherein said IME server requests is generated by said IME client, and said IME client is the stateless IME client of only storing its request of sending to said IME server.
7. computer implemented method according to claim 1 further comprises:
Come the said restriction environment of instantiation so that the first restriction rank of said restriction environment to be provided based on first token;
Carry out said IME server with the said first restriction rank within the border at said limit collar;
Call function;
In response to said function, come the said restriction environment of instantiation again so that the second restriction rank to be provided based on second token.
8. computer implemented method according to claim 7, the wherein said first restriction rank is different from the said second restriction rank.
9. computer implemented method according to claim 1, wherein said IME client and said IME server are performed on joint equipment.
10. system comprises:
Store the computer-readable recording medium of instruction on it; And
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
Receive Input Method Editor (IME) server requests; Said IME server requests comprises that one or more tokens and request IME server are by instantiation; Said IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
Confirm that based on said one or more tokens said IME server can be by instantiation in the restriction environment; And
The said IME server of instantiation in said restriction environment.
11. system according to claim 10, wherein said operation further comprises:
Carry out one or more inspections;
Confirm that based on said one or more inspections said IME server just in said restriction environment, not carry out; And
Just in said restriction environment, do not carry out in response to definite said IME server, stop said IME server.
12. system according to claim 11, wherein said one or more inspections comprise at least one in following: token value and desired value are compared; The session identification of said IME server is compared with the expection sign; Confirm that said IME server has System Privileges; And the result who confirms to recover function.
13. system according to claim 10, wherein said operation further comprises:
Carry out the said IME server of checking in said restriction environment by one or more inspections of instantiation; And
Confirm that based on said one or more inspections said IME server just carries out in said restriction environment.
14. system according to claim 10, the type of data that the said IME server of wherein said restriction environmental restraint can write store.
15. system according to claim 10, wherein said IME server requests is generated by said IME client, and said IME client is the stateless IME client of only storing its request of sending to said IME server.
16. system according to claim 10, wherein said operation further comprises:
Come the said restriction environment of instantiation so that the first restriction rank of said restriction environment to be provided based on first token;
Carry out said IME server with the said first restriction rank within the border at said limit collar;
Call function;
In response to said function, come the said restriction environment of instantiation again so that the second restriction rank to be provided based on second token.
17. system according to claim 16, the wherein said first restriction rank is different from the said second restriction rank.
18. a computer implemented method comprises:
Receive Input Method Editor (IME) server requests; Said IME server requests comprises that one or more tokens and request IME server are by instantiation; Said IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
Said one or more tokens are handled;
Confirm that based on said processing said IME server can be by instantiation;
The said IME server of instantiation in the restriction environment, the function of the said IME server of said restriction environmental restraint;
Confirm that said IME server just in said restriction environment, not carry out; And
Stop said IME server in response to said confirming.
19. a system comprises:
Store the computer-readable recording medium of instruction on it; And
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
Receive Input Method Editor (IME) server requests; Said IME server requests comprises that one or more tokens and request IME server are by instantiation; Said IME server is carried out one or more IME functions based on sending from the key events of IME client, and wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
Said one or more tokens are handled;
Confirm that based on said processing said IME server can be by instantiation;
The said IME server of instantiation in the restriction environment, the function of the said IME server of said restriction environmental restraint;
Confirm that said IME server just in said restriction environment, not carry out; And
Stop said IME server in response to said confirming.
20. a computer implemented method comprises:
Be based upon first session between first Input Method Editor (IME) client and the IME server;
Second session of request between the 2nd IME client and said first server;
Confirm that the version of a said IME server is different from the version of said the 2nd IME client;
Be different from the said version of said the 2nd IME client in response to the said version of confirming a said IME server, stop said first server; And
Instantiation the 2nd IME server, said the 2nd IME server has the version identical with the said version of said second client.
21. computer implemented method according to claim 20 further comprises: be based upon second session between said the 2nd IME client and said the 2nd IME server.
22. computer implemented method according to claim 20 further comprises: stop said first session.
23. computer implemented method according to claim 20 further comprises:
Stop said first session;
Confirm the protocol version of a said IME client and the protocol edition compatible of said the 2nd IME server; And
In response to the said protocol version of confirming a said IME client and the said protocol edition compatible of said the 2nd IME server, be based upon the 3rd session between a said IME client and said the 2nd IME server.
24. computer implemented method according to claim 23 further comprises: carry out said second session and said the 3rd session.
25. computer implemented method according to claim 20 further comprises:
Stop said first session;
The protocol version of protocol version and said the 2nd IME server of confirming a said IME client is incompatible; And
Said protocol version in response to the said protocol version of confirming a said IME client and said the 2nd IME server is incompatible, at a said IME client place generation error.
26. computer implemented method according to claim 20, a wherein said IME client, said the 2nd IME client, a said IME server and said the 2nd IME server are performed on joint equipment.
27. computer implemented method according to claim 20, the version that the version of wherein confirming a said IME server is different from said the 2nd IME client comprises that the said version of confirming a said IME server is older than the said version of said the 2nd IME client.
28. a computer implemented method comprises:
Be based upon first session between first Input Method Editor (IME) client and the IME server;
Second session of request between the 2nd an IME client and a said IME server;
The version of confirming a said IME server is identical with the version of said the 2nd IME client;
Confirm in response to said, be based upon second session between said the 2nd an IME client and the said IME server; And
Carry out said first session and said second session.
29. a system comprises:
Store the computer-readable recording medium of instruction on it; And
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
Be based upon first session between first Input Method Editor (IME) client and the IME server;
Second session of request between the 2nd IME client and said first server;
Confirm that the version of a said IME server is different from the version of said the 2nd IME client;
Be different from the said version of said the 2nd IME client in response to the said version of confirming a said IME server, stop said first server; And
Instantiation the 2nd IME server, said the 2nd IME server has the version identical with the said version of said second client.
30. system according to claim 29, wherein said operation further comprises: be based upon second session between said the 2nd IME client and said the 2nd IME server.
31. system according to claim 29, wherein said operation further comprises: stop said first session.
32. system according to claim 29, wherein said operation further comprises:
Confirm the protocol version of a said IME client and the protocol edition compatible of said the 2nd IME server; And
In response to the said protocol version of confirming a said IME client and the said protocol edition compatible of said the 2nd IME server, be based upon the 3rd session between a said IME client and said the 2nd IME server.
33. system according to claim 32, wherein said operation further comprises: carry out said second session and said the 3rd session.
34. system according to claim 29, wherein said operation further comprises:
The protocol version of protocol version and said the 2nd IME client of confirming a said IME client is incompatible; And
Said protocol version in response to the said protocol version of confirming a said IME client and said the 2nd IME server is incompatible, at a said IME client place generation error.
35. system according to claim 29, a wherein said IME client, said the 2nd IME client, a said IME server and said the 2nd IME server are performed on joint equipment.
36. system according to claim 29, a wherein said IME client and said the 2nd IME client are included in the application program that is performed on the joint equipment.
37. a system comprises:
Store the computer-readable recording medium of instruction on it; And
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
Be based upon first session between first Input Method Editor (IME) client and the IME server;
Second session of request between the 2nd an IME client and a said IME server;
The version of confirming a said IME server is identical with the version of said the 2nd IME client;
Confirm in response to said, be based upon second session between said the 2nd an IME client and the said IME server; And
Carry out said first session and said second session.
38. a computer implemented method comprises:
Receive Input Method Editor (IME) server requests, said IME server requests is transmitted by an IME client;
Come instantiation the one IME server based on said IME server requests;
Be based upon first session between a said IME client and the said IME server;
Second session of request between the 2nd an IME client and a said IME server;
Confirm that the version of a said IME server is different from the version of said the 2nd IME client;
Be different from the version of said the 2nd IME client in response to the version of confirming a said IME server, stop a said IME server;
Instantiation the 2nd IME server, said the 2nd IME server has the identical version of said version with said the 2nd IME client; And
Be based upon second session between said the 2nd IME client and said the 2nd IME server.
39. a system comprises:
Store the computer-readable recording medium of instruction on it; And
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
Receive Input Method Editor (IME) server requests, said IME server requests is transmitted by an IME client;
Come instantiation the one IME server based on said IME server requests;
Be based upon first session between a said IME client and the said IME server;
Second session of request between the 2nd an IME client and a said IME server;
Confirm that the version of a said IME server is different from the version of said the 2nd IME client;
Be different from the version of said the 2nd IME client in response to the version of confirming a said IME server, stop a said IME server;
Instantiation the 2nd IME server, said the 2nd IME server has the identical version of said version with said the 2nd IME client; And
Be based upon second session between said the 2nd IME client and said the 2nd IME server.
40. a computer implemented method comprises:
At Input Method Editor (IME) server place; Reception is from sending the key events of said IME server to the IME client of said IME server communication; Wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both, and said IME client is based on said key events sends stateless IME client from request to said IME server;
Discern one or more logographic characters through said IME server based on key events;
Generate and the corresponding presentation information of said one or more logographic characters through said IME server; And
Send said presentation information to said IME client from said IME server, to show said one or more logographic characters.
41., further comprise according to the described computer implemented method of claim 40:
Receive conversation request from said IME client;
Be based upon the session between said IME client and the said IME server based on said conversation request;
Generate Session ID through said IME server;
Send said Session ID to said IME client;
Said Session ID is transmitted from said IME client with each key events subsequently; And
At said IME server place, when receiving said key events, receive said Session ID.
42., further comprise according to the described computer implemented method of claim 41:
Receive a plurality of IME client-side session identifiers;
To carry out related with this Session ID about the peculiar session data of each Session ID;
For each key events that is received, under the sight of the said peculiar session data that is associated with the said Session ID that is transmitted with said key events, said key events is handled.
43., further comprise according to the described computer implemented method of claim 40:
Receive conversation request from said IME client;
In response to said conversation request, the said IME server of instantiation;
Be the communication generation pass name between said IME client and said IME server; And
Store said pathname with by said IME client-access.
44., wherein store said pathname and comprise and store said pathname into be associated user profiles with the user of said IME client according to the described computer implemented method of claim 43.
45., further comprise according to the described computer implemented method of claim 43:
Confirm ID based on said conversation request;
The user profiles that identification is associated with said ID; And
Store said pathname into said user profiles.
46. according to the described computer implemented method of claim 43, wherein said pathname comprises at random in the pathname that generates and the URL (URL).
47., further comprise according to the described computer implemented method of claim 40:
Be based upon the session between said IME client and the said IME server, said session is included in the one or more connections that can be opened and closed between said IME client and the said IME server;
Open connection;
When said connection is opened, keep watch on the communication between said IME client and said IME server; And
If one in key events and the presentation information is not transmitted in the predetermined time period, then closes said connection.
48. according to the described computer implemented method of claim 47; Wherein said key events is transmitted to said IME server after said connection is opened; And further comprise:, close said connection in response to said presentation information being sent to said IME client.
49. according to the described computer implemented method of claim 40, further comprise: the place makes an explanation so that corresponding command to be provided to said key events at said IME server, and said presentation information is generated based on said order.
50. according to the described computer implemented method of claim 49, wherein said order comprises one that inserts in character order and the conversion command.
51., further comprise according to the described computer implemented method of claim 40:
The place receives second key events at said IME server, and said second key events is from said IME server communication and be that stateless the 2nd IME client sends said IME server to;
Discern one or more second logographic characters based on said key events;
Generate second presentation information based on said one or more second logographic characters; And
Send said second presentation information to said the 2nd IME client from said IME server, to show said one or more second logographic characters.
52. according to the described computer implemented method of claim 51, wherein said IME client and said the 2nd IME client are included in the application program that is performed on the joint equipment.
53. a system comprises:
Store the computer-readable recording medium of instruction on it;
The equipment that comprises one or more data processing equipments, said one or more data processing equipments are carried out said instruction and are impelled said one or more data processing equipment executable operations, and said operation comprises:
At Input Method Editor (IME) server place; Reception is from sending the key events of said IME server to the IME client of said IME server communication; Wherein said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both, and said IME client is based on said key events sends stateless IME client from request to said IME server;
Discern one or more logographic characters through said IME server based on key events;
Generate and the corresponding presentation information of said one or more logographic characters through said IME server; And
Send said presentation information to said IME client from said IME server, to show said one or more logographic characters.
54. according to the described system of claim 53, wherein said operation further comprises:
Receive conversation request from said IME client;
Be based upon the session between said IME client and the said IME server based on said conversation request;
Generate Session ID through said IME server;
Send said Session ID to said IME client;
Said Session ID is transmitted from said IME client with each key events subsequently; And
At said IME server place, when receiving said key events, receive said Session ID.
55. according to the described system of claim 54, wherein said operation further comprises:
Receive a plurality of IME client-side session identifiers;
To carry out related with this Session ID about the peculiar session data of each Session ID;
For each key events that is received, under the sight of the said peculiar session data that is associated with the said Session ID that is transmitted with said key events, said key events is handled.
56. according to the described system of claim 53, wherein said operation further comprises:
Receive conversation request from said IME client;
In response to said conversation request, the said IME server of instantiation;
Be the communication generation pass name between said IME client and said IME server; And
Store said pathname with by said IME client-access.
57., wherein store said pathname and comprise and store said pathname into be associated user profiles with the user of said IME client according to the described system of claim 56.
58. according to the described system of claim 56, wherein said operation further comprises:
Confirm ID based on said conversation request;
The user profiles that identification is associated with said ID; And
Store said pathname into said user profiles.
59. according to the described system of claim 56, wherein said pathname comprises at random in the pathname that generates and the URL (URL).
60. according to the described system of claim 53, wherein said operation further comprises:
Be based upon the session between said IME client and the said IME server, said session is included in the one or more connections that can be opened and closed between said IME client and the said IME server;
Open connection;
When said connection is opened, keep watch on the communication between said IME client and said IME server; And
If one in key events and the presentation information is not transmitted in the predetermined time period, then closes said connection.
61. according to the described system of claim 60, wherein said key events is transmitted to said IME server after said connection is opened, and further comprises:, close said connection in response to said presentation information being sent to said IME client.
62. according to the described system of claim 53, wherein said operation further comprises: the place makes an explanation so that corresponding command to be provided to said key events at said IME server, and said presentation information is generated based on said order.
63. according to the described system of claim 62, wherein said order comprises one that inserts in character order and the conversion command.
64. according to the described system of claim 53, wherein said operation further comprises:
The place receives second key events at said IME server, and said second key events is from said IME server communication and be that stateless the 2nd IME client sends said IME server to;
Discern one or more second logographic characters based on said key events;
Generate second presentation information based on said one or more second logographic characters; And
Send said second presentation information to said the 2nd IME client from said IME server, to show said one or more second logographic characters.
65. according to the described system of claim 64, wherein said IME client and said the 2nd IME client are included in the application program that is performed on the said equipment.
66. a computer implemented method comprises:
From being stateless Input Method Editor (IME) client reception request;
Come instantiation IME server based on described request, said IME server has state;
Be created on the communication path between said IME client and the said IME server, said communication path has corresponding pathname;
Said pathname is offered said IME client;
Receive key events at said IME server place, said key events is transmitted to said IME server through said communication path from said IME client;
Discern one or more logographic characters based on said key events;
Generate and the corresponding presentation information of said one or more logographic characters; And
Send said presentation information to said IME client from said IME server, to show said one or more logographic characters.
67. a system comprises:
Computer-readable recording medium;
The equipment that comprises one or more data processing equipments, said one or more data processing equipments execute instruction and impel said one or more data processing equipment executable operations, and said operation comprises:
From being stateless Input Method Editor (IME) client reception request;
Come instantiation IME server based on described request, said IME server has state;
Be created on the communication path between said IME client and the said IME server, said communication path has corresponding pathname;
Said pathname is offered said IME client;
Receive key events at said IME server place, said key events is transmitted to said IME server through said communication path from said IME client;
Discern one or more logographic characters based on said key events;
Generate and the corresponding presentation information of said one or more logographic characters; And
Send said presentation information to said IME client from said IME server, to show said one or more logographic characters.
68. a computer implemented method comprises:
Generate key events at Input Method Editor (IME) client place, said IME client is only to store its request of sending to the IME server and send the stateless IME client of request to the IME server for each key events;
Through said IME client said key events is recorded in the key events sequence, said key events sequence is stored said key events and before had been transmitted at least one or a plurality of previous key events of said IME server;
Send said key events to said IME client communication IME server, said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
At said IME client place, confirm that said IME server has stopped running;
Stopped running in response to definite said IME server, the session of foundation and the 2nd IME server, said the 2nd IME server is that state server is arranged; And
After setting up said session, send the key events sequence that is write down to said second server.
69., further comprise according to the described computer implemented method of claim 68:
Receive presentation information from said the 2nd IME server, said presentation information is generated based on said key events sequence at said the 2nd IME server place; And
At said IME client place, show one or more characters based on said presentation information.
70., further comprise according to the described computer implemented method of claim 68:
Confirm that said the 2nd IME server has stopped running; And
In said IME client place, generation error message.
71., further comprise according to the described computer implemented method of claim 70:
With said key events recognition sequence is the reason that said IME server and said the 2nd IME server do not operate;
Generate error reporting based on said key events sequence; And
In response to said error reporting, stop further transmission from the said key events sequence of said IME client.
72. according to the described computer implemented method of claim 68, further comprise: periodically deletion is stored in the key events information in the said key events sequence.
73., further comprise according to the described computer implemented method of claim 68:
Confirm that the connection between said IME client and said the 2nd IME server is the connection of closing; And
In response to said connection of closing, deletion is stored in the key events information in the said key events sequence.
74., further comprise according to the described computer implemented method of claim 68:
Receive presentation information from said the 2nd IME server, said presentation information is generated based on said key events sequence at said the 2nd IME server place; And
In response to receiving said presentation information, deletion is stored in the key events information in the said key events sequence.
75., further comprise according to the described computer implemented method of claim 74:
Generate second key events;
Said second key events is recorded in the said key events sequence; And
Send said second key events to said the 2nd IME server.
76. according to the described computer implemented method of claim 68, wherein said IME client, said IME server and said the 2nd IME server are performed on an equipment.
77. according to the described computer implemented method of claim 68, wherein said IME client is performed on first equipment, and said IME server and said the 2nd IME server with second equipment of said first devices communicating on be performed.
78. a system comprises:
Computer-readable recording medium;
The equipment that comprises one or more data processing equipments, said one or more data processing equipments execute instruction and impel said one or more data processing equipment executable operations, and said operation comprises:
Generate key events at Input Method Editor (IME) client place, said IME client is only to store its request of sending to the IME server and send the stateless IME client of request to the IME server for each key events;
Through said IME client said key events is recorded in the key events sequence, said key events sequence is stored said key events and before had been transmitted at least one or a plurality of previous key events of said IME server;
Send said key events to said IME client communication IME server, said IME server is the state server that has that is stored in the request of the communication session between said IME server and the said IME client and responds both;
At said IME client place, confirm that said IME server has stopped running;
Stopped running in response to definite said IME server, the session of foundation and the 2nd IME server, said the 2nd IME server is that state server is arranged; And
After setting up said session, send the key events sequence that is write down to said second server.
79. according to the described system of claim 78, wherein said operation further comprises:
Receive presentation information from said the 2nd IME server, said presentation information is generated based on said key events sequence at said the 2nd IME server place; And
At said IME client place, show one or more characters based on said presentation information.
80. according to the described system of claim 78, wherein said operation further comprises:
Confirm that said the 2nd IME server has stopped running; And
In said IME client place, generation error message.
81. 0 described system according to Claim 8, wherein said operation further comprises:
With said key events recognition sequence is the reason that said IME server and said the 2nd IME server do not operate;
Generate error reporting based on said key events sequence; And
In response to said error reporting, stop further transmission from the said key events sequence of said IME client.
82. according to the described system of claim 78, wherein said operation further comprises:
Periodically deletion is stored in the key events information in the said key events sequence.
83. according to the described system of claim 78, wherein said operation further comprises:
Confirm that the connection between said IME client and said the 2nd IME server is the connection of closing; And
In response to said connection of closing, deletion is stored in the key events information in the said key events sequence.
84. according to the described system of claim 78, wherein said operation further comprises:
Receive presentation information from said the 2nd IME server, said presentation information is generated based on said key events sequence at said the 2nd IME server place; And
In response to receiving said presentation information, deletion is stored in the key events information in the said key events sequence.
85. 4 described systems according to Claim 8, wherein said operation further comprises:
Generate second key events;
Said second key events is recorded in the said key events sequence; And
Send said second key events to said the 2nd IME server.
86. according to the described system of claim 78, wherein said IME client, said IME server and said the 2nd IME server are performed on said equipment.
87. according to the described system of claim 78, wherein said IME client is performed on said equipment, and said IME server and said the 2nd IME server with second equipment of said devices communicating on be performed.
88. a computer implemented method comprises:
Instantiation Input Method Editor (IME) client on equipment, said IME client is a stateless IME client;
Receive user's input of said equipment;
Generate key events based on said user's input, said key events is generated by said IME client;
Said key events is recorded in the key events sequence in the computer-readable recording medium that is stored in said equipment;
Said key events is sent to said IME client communication and is the IME server that state I ME server is arranged;
Confirm that said IME server has stopped running;
Confirm to come instantiation the 2nd IME server in response to said, said the 2nd IME server is that state I ME server is arranged;
Be based upon the session between said IME client and said the 2nd IME server; And
After setting up said session, send said key events sequence to said the 2nd IME server.
89. a system comprises:
Computer-readable recording medium;
The equipment that comprises one or more data processing equipments, said one or more data processing equipments execute instruction and impel said one or more data processing equipment executable operations, and said operation comprises:
Instantiation Input Method Editor (IME) client on said equipment, said IME client is a stateless IME client;
Receive user's input of said equipment;
Generate key events based on said user's input, said key events is generated by said IME client;
Said key events is recorded in the key events sequence that is stored in the said computer-readable recording medium;
Said key events is sent to said IME client communication and is the IME server that state I ME server is arranged;
Confirm that said IME server has stopped running;
Confirm to come instantiation the 2nd IME server in response to said, said the 2nd IME server is that state I ME server is arranged;
Be based upon the session between said IME client and said the 2nd IME server; And
After setting up said session, send said key events sequence to said the 2nd IME server.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
CN201610429936.5A CN106126350B (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US26471409P | 2009-11-27 | 2009-11-27 | |
US61/264,714 | 2009-11-27 | ||
PCT/US2010/058064 WO2011066434A2 (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201610429936.5A Division CN106126350B (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
Publications (2)
Publication Number | Publication Date |
---|---|
CN102834819A true CN102834819A (en) | 2012-12-19 |
CN102834819B CN102834819B (en) | 2016-08-03 |
Family
ID=44067234
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201610429936.5A Active CN106126350B (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
CN201080062456.0A Active CN102834819B (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201610429936.5A Active CN106126350B (en) | 2009-11-27 | 2010-11-24 | Client-server input method editor architecture |
Country Status (4)
Country | Link |
---|---|
US (2) | US8904012B2 (en) |
KR (2) | KR101743122B1 (en) |
CN (2) | CN106126350B (en) |
WO (1) | WO2011066434A2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107179952A (en) * | 2016-03-11 | 2017-09-19 | 思杰系统有限公司 | Collaboration Input Method Editor (IME) activity between virtual application client and server |
CN107430596A (en) * | 2015-02-12 | 2017-12-01 | 微软技术许可有限责任公司 | The externalizing of Input Method Editor performs |
TWI658401B (en) * | 2017-11-14 | 2019-05-01 | 財團法人工業技術研究院 | Mobile communication device based on virtual mobile infrastructure and related input method switching methods thereof |
CN110753927A (en) * | 2018-05-07 | 2020-02-04 | 谷歌有限责任公司 | Synchronizing access control between computing devices |
Families Citing this family (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110184723A1 (en) * | 2010-01-25 | 2011-07-28 | Microsoft Corporation | Phonetic suggestion engine |
JP5921527B2 (en) | 2010-04-12 | 2016-05-24 | グーグル インコーポレイテッド | Extended framework for input method editor |
US9348479B2 (en) | 2011-12-08 | 2016-05-24 | Microsoft Technology Licensing, Llc | Sentiment aware user interface customization |
US9378290B2 (en) | 2011-12-20 | 2016-06-28 | Microsoft Technology Licensing, Llc | Scenario-adaptive input method editor |
CN110488991A (en) | 2012-06-25 | 2019-11-22 | 微软技术许可有限责任公司 | Input Method Editor application platform |
US8959109B2 (en) | 2012-08-06 | 2015-02-17 | Microsoft Corporation | Business intelligent in-document suggestions |
KR101911999B1 (en) | 2012-08-30 | 2018-10-25 | 마이크로소프트 테크놀로지 라이센싱, 엘엘씨 | Feature-based candidate selection |
WO2015018055A1 (en) | 2013-08-09 | 2015-02-12 | Microsoft Corporation | Input method editor providing language assistance |
US10019985B2 (en) | 2013-11-04 | 2018-07-10 | Google Llc | Asynchronous optimization for sequence training of neural networks |
CN104679766A (en) * | 2013-11-28 | 2015-06-03 | 英业达科技有限公司 | Input system and input method |
JP5907393B2 (en) * | 2013-12-20 | 2016-04-26 | 国立研究開発法人情報通信研究機構 | Complex predicate template collection device and computer program therefor |
JP5904559B2 (en) | 2013-12-20 | 2016-04-13 | 国立研究開発法人情報通信研究機構 | Scenario generation device and computer program therefor |
CN106815525B (en) * | 2016-12-13 | 2020-03-31 | 北京元心科技有限公司 | Data transmission method and device |
CN108845791B (en) * | 2018-05-31 | 2022-03-18 | 浪潮金融信息技术有限公司 | Application program code development processing method and device, readable storage medium and terminal |
CN117093323B (en) * | 2023-08-23 | 2024-03-26 | 北京志凌海纳科技有限公司 | Method and system for realizing sandbox mechanism based on back-end execution engine |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040268256A1 (en) * | 2003-01-30 | 2004-12-30 | Fujitsu Limited | Program, character inputting and editing method, apparatus and storage medium |
US20070050854A1 (en) * | 2005-09-01 | 2007-03-01 | Microsoft Corporation | Resource based dynamic security authorization |
WO2008096891A1 (en) * | 2007-02-09 | 2008-08-14 | Ntt Docomo, Inc. | Terminal device and software inspecting method |
WO2008124734A2 (en) * | 2007-04-09 | 2008-10-16 | Google Inc. | Input method editor user profiles |
JP2009015561A (en) * | 2007-07-04 | 2009-01-22 | Oki Electric Ind Co Ltd | Server, key information conversion method, program, and system |
KR20090016041A (en) * | 2007-08-10 | 2009-02-13 | 에스케이커뮤니케이션즈 주식회사 | Apparatus and method for providing a keyboard input mode in a mobile network device |
US20090106661A1 (en) * | 2007-10-17 | 2009-04-23 | Inventec Corporation | Switching System and Method for Display Interface |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2695483B2 (en) | 1989-09-07 | 1997-12-24 | 富士通株式会社 | Consistency check method |
JPH05307541A (en) | 1992-04-30 | 1993-11-19 | Nec Corp | Kana to kanji converting system |
JPH07121468A (en) | 1993-10-20 | 1995-05-12 | Fuji Xerox Co Ltd | Server selecting device |
JPH08194668A (en) | 1995-01-13 | 1996-07-30 | Nippon Telegr & Teleph Corp <Ntt> | Synchronous starting system based on system version |
JP2000099499A (en) | 1998-09-21 | 2000-04-07 | Mitsubishi Electric Corp | Client and server |
US7171473B1 (en) * | 1999-11-17 | 2007-01-30 | Planet Exchange, Inc. | System using HTTP protocol for maintaining and updating on-line presence information of new user in user table and group table |
US7035850B2 (en) * | 2000-03-22 | 2006-04-25 | Hitachi, Ltd. | Access control system |
US7370239B2 (en) | 2001-05-31 | 2008-05-06 | Fisher-Rosemount Systems, Inc. | Input/output device with configuration, fault isolation and redundant fault assist functionality |
JP2003044471A (en) | 2001-08-02 | 2003-02-14 | Ricoh Co Ltd | Character string processing system |
US7613797B2 (en) * | 2003-03-19 | 2009-11-03 | Unisys Corporation | Remote discovery and system architecture |
CA2428821C (en) * | 2003-05-15 | 2009-03-17 | Ibm Canada Limited - Ibm Canada Limitee | Accessing a platform independent input method editor from an underlying operating system |
US7694328B2 (en) * | 2003-10-21 | 2010-04-06 | Google Inc. | Systems and methods for secure client applications |
US7676549B2 (en) * | 2005-05-27 | 2010-03-09 | Microsoft Corporation | Techniques for providing accessibility options in remote terminal sessions |
US8078740B2 (en) * | 2005-06-03 | 2011-12-13 | Microsoft Corporation | Running internet applications with low rights |
US8935429B2 (en) * | 2006-12-19 | 2015-01-13 | Vmware, Inc. | Automatically determining which remote applications a user or group is entitled to access based on entitlement specifications and providing remote application access to the remote applications |
US20080120541A1 (en) * | 2006-11-22 | 2008-05-22 | Dynacomware Taiwan Inc. | System and method for on-line retrieval and typing of non-standard characters |
US8533291B1 (en) * | 2007-02-07 | 2013-09-10 | Oracle America, Inc. | Method and system for protecting publicly viewable web client reference to server resources and business logic |
TW200835239A (en) * | 2007-02-14 | 2008-08-16 | Tu-Hsin Tsai | System and method for asynchronous exchanging electronic messages |
CN101286093A (en) * | 2007-04-09 | 2008-10-15 | 谷歌股份有限公司 | Client input method |
US8468541B2 (en) * | 2007-08-28 | 2013-06-18 | Red Hat, Inc. | Event driven sendfile |
US7970350B2 (en) * | 2007-10-31 | 2011-06-28 | Motorola Mobility, Inc. | Devices and methods for content sharing |
US8010465B2 (en) * | 2008-02-26 | 2011-08-30 | Microsoft Corporation | Predicting candidates using input scopes |
CN101291302B (en) * | 2008-05-27 | 2011-08-03 | 北京搜狗科技发展有限公司 | Method for instant communication by input method, input method system therefor |
US8756704B2 (en) * | 2008-12-15 | 2014-06-17 | International Business Machines Corporation | User impersonation and authentication |
US9104244B2 (en) * | 2009-06-05 | 2015-08-11 | Yahoo! Inc. | All-in-one Chinese character input method |
-
2010
- 2010-11-24 CN CN201610429936.5A patent/CN106126350B/en active Active
- 2010-11-24 WO PCT/US2010/058064 patent/WO2011066434A2/en active Application Filing
- 2010-11-24 CN CN201080062456.0A patent/CN102834819B/en active Active
- 2010-11-24 KR KR1020127013858A patent/KR101743122B1/en active IP Right Grant
- 2010-11-24 US US12/953,896 patent/US8904012B2/en active Active
- 2010-11-24 KR KR1020177000295A patent/KR101716802B1/en active IP Right Grant
-
2014
- 2014-12-01 US US14/557,384 patent/US9635138B2/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040268256A1 (en) * | 2003-01-30 | 2004-12-30 | Fujitsu Limited | Program, character inputting and editing method, apparatus and storage medium |
US20070050854A1 (en) * | 2005-09-01 | 2007-03-01 | Microsoft Corporation | Resource based dynamic security authorization |
WO2008096891A1 (en) * | 2007-02-09 | 2008-08-14 | Ntt Docomo, Inc. | Terminal device and software inspecting method |
WO2008124734A2 (en) * | 2007-04-09 | 2008-10-16 | Google Inc. | Input method editor user profiles |
JP2009015561A (en) * | 2007-07-04 | 2009-01-22 | Oki Electric Ind Co Ltd | Server, key information conversion method, program, and system |
KR20090016041A (en) * | 2007-08-10 | 2009-02-13 | 에스케이커뮤니케이션즈 주식회사 | Apparatus and method for providing a keyboard input mode in a mobile network device |
US20090106661A1 (en) * | 2007-10-17 | 2009-04-23 | Inventec Corporation | Switching System and Method for Display Interface |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107430596A (en) * | 2015-02-12 | 2017-12-01 | 微软技术许可有限责任公司 | The externalizing of Input Method Editor performs |
CN107179952A (en) * | 2016-03-11 | 2017-09-19 | 思杰系统有限公司 | Collaboration Input Method Editor (IME) activity between virtual application client and server |
CN107179952B (en) * | 2016-03-11 | 2021-03-23 | 思杰系统有限公司 | Collaborative Input Method Editor (IME) activity between virtual application clients and servers |
TWI658401B (en) * | 2017-11-14 | 2019-05-01 | 財團法人工業技術研究院 | Mobile communication device based on virtual mobile infrastructure and related input method switching methods thereof |
US10628614B2 (en) | 2017-11-14 | 2020-04-21 | Industrial Technology Research Institute | Mobile communication device based on virtual mobile infrastructure and related input method switching method thereof |
CN110753927A (en) * | 2018-05-07 | 2020-02-04 | 谷歌有限责任公司 | Synchronizing access control between computing devices |
US11595391B2 (en) | 2018-05-07 | 2023-02-28 | Google Llc | Synchronizing access controls between computing devices |
CN110753927B (en) * | 2018-05-07 | 2023-08-11 | 谷歌有限责任公司 | Synchronizing access control between computing devices |
Also Published As
Publication number | Publication date |
---|---|
CN106126350A (en) | 2016-11-16 |
US20150088985A1 (en) | 2015-03-26 |
KR101743122B1 (en) | 2017-06-15 |
CN102834819B (en) | 2016-08-03 |
WO2011066434A2 (en) | 2011-06-03 |
KR20170005519A (en) | 2017-01-13 |
US9635138B2 (en) | 2017-04-25 |
WO2011066434A3 (en) | 2011-11-24 |
KR101716802B1 (en) | 2017-03-15 |
CN106126350B (en) | 2020-01-24 |
US8904012B2 (en) | 2014-12-02 |
KR20120091253A (en) | 2012-08-17 |
US20110131642A1 (en) | 2011-06-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN102834819A (en) | Client-server input method editor architecture | |
CN102007493B (en) | Universal language input | |
US9996631B2 (en) | Information management and display in web browsers | |
US8037009B2 (en) | Systems and methods for linking an issue with an entry in a knowledgebase | |
US7027975B1 (en) | Guided natural language interface system and method | |
US8533336B1 (en) | Automated web frontend sharding | |
KR101554292B1 (en) | Input Method Editor User Profiles | |
US20160225371A1 (en) | Dynamic inference of voice command for software operation from help information | |
CN101073057B (en) | Mechanism for providing environment to command line instructions | |
US20090063175A1 (en) | Methods and systems for providing multiple support options | |
US11861319B2 (en) | Chatbot conducting a virtual social dialogue | |
CN105940654A (en) | Privileged static hosted WEB applications | |
CN103080873A (en) | Extension framework for input method editor | |
WO2008127939A1 (en) | Input method editor integration | |
WO2010111147A2 (en) | Input content to application via web browser | |
JP2023519713A (en) | Noise Data Augmentation for Natural Language Processing | |
CN101351771A (en) | Mechanism for obtaining and applying constraints to constructs within an interactive environment | |
JP2023551860A (en) | Out-of-domain data augmentation for natural language processing | |
US10853470B2 (en) | Configuration of applications to desired application states | |
US20110040852A1 (en) | Obtaining and providing cached settings within a development platform | |
US10997002B2 (en) | Quick actions | |
US20240004785A1 (en) | Configuration-based system and method for handling transient data in complex systems | |
Chandramouli et al. | Insider: Towards breaking down mobile app silos | |
US20060259913A1 (en) | Daemon assisted command execution | |
KR101346034B1 (en) | On-line terminology dictionary system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder | ||
CP01 | Change in the name or title of a patent holder |
Address after: American CaliforniaPatentee after: Google limited liability companyAddress before: American CaliforniaPatentee before: Google Inc. |