US20240070392A1 - Computing numeric representations of words in a high-dimensional space - Google Patents
Computing numeric representations of words in a high-dimensional space Download PDFInfo
- Publication number
- US20240070392A1 US20240070392A1 US18/503,051 US202318503051A US2024070392A1 US 20240070392 A1 US20240070392 A1 US 20240070392A1 US 202318503051 A US202318503051 A US 202318503051A US 2024070392 A1 US2024070392 A1 US 2024070392A1
- Authority
- US
- United States
- Prior art keywords
- words
- word
- embedding function
- function
- training
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 claims abstract description 69
- 238000012549 training Methods 0.000 claims abstract description 63
- 238000012545 processing Methods 0.000 claims abstract description 16
- 239000013598 vector Substances 0.000 claims description 55
- 230000008569 process Effects 0.000 claims description 41
- 238000004590 computer program Methods 0.000 abstract description 16
- 230000006870 function Effects 0.000 description 78
- 238000010586 diagram Methods 0.000 description 10
- 238000004891 communication Methods 0.000 description 5
- 150000001875 compounds Chemical class 0.000 description 5
- 230000026676 system process Effects 0.000 description 5
- 230000003287 optical effect Effects 0.000 description 4
- 230000009466 transformation Effects 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 2
- 238000007477 logistic regression Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000012706 support-vector machine Methods 0.000 description 2
- 241000282326 Felis catus Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000010365 information processing Effects 0.000 description 1
- 238000012886 linear function Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 230000001537 neural effect Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
Definitions
- This specification relates to computing numeric representations of words.
- some systems convert one or more of the words in the sequence into numeric representations.
- one innovative aspect of the subject matter described in this specification can be embodied in a system that includes a classifier implemented in one or more computers, comprising: an embedding function layer configured to receive an input comprising a plurality of words that surround an unknown word in a sequence of words and map the plurality of words into a numeric representation in a high-dimensional space; and a classifier layer configured to process the numeric representation of the input to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word is the unknown word; and instructions to process each word in a vocabulary of words using the embedding function layer to obtain a respective numeric representation of each word in the vocabulary in the high-dimensional space and to associate each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- the numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
- the embedding layer can map each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
- one innovative aspect of the subject matter described in this specification can be embodied in a system that includes a classifier implemented in one or more computers, comprising: an embedding function layer configured to receive an input comprising an input word and map the input word into a numeric representation in a high-dimensional space, and a plurality of classifiers, wherein each of the classifiers corresponds to a respective position surrounding the input word in a sequence of words, and wherein each of the plurality of classifiers is configured to: process the numeric representation of the input word to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word will be found in the corresponding position relative to the input word; and instructions to process each word in a vocabulary of words using the embedding function layer to obtain a respective numeric representation of each word in the vocabulary in the high-dimensional space and to associate each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- the numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
- the embedding layer can map the input word to a floating point vector.
- another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a set of training data, wherein the set of training data comprises sequences of words; training a plurality of classifiers and an embedding function on the set of training data, wherein the embedding function receives an input word and maps the input word to a numeric representation in the high-dimensional space in accordance with a set of embedding function parameters, wherein each of the classifiers corresponds to a respective position surrounding the input word in a sequence of words, and wherein each of the classifiers processes the numeric representation of the input word to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word will be found in the corresponding position relative to the input word, and wherein training the embedding function comprises obtaining trained values of the embedding function parameters; processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding
- the numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
- the embedding layer can map the input word to a floating point vector.
- another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a set of training data, wherein the set of training data comprises sequences of words; training a classifier and an embedding function on the set of training data, wherein the embedding function receives a plurality of words surrounding an unknown word in a sequence of words and maps the plurality of words into a numeric representation in accordance with a set of embedding function parameters, wherein the classifier processes the numeric representation of the sequence of words to generate a respective word score for each word in a pre-determined set of words, and wherein each of the respective word scores measure a predicted likelihood that the corresponding word is the unknown word, and wherein training the embedding function comprises obtained trained values of the embedding function parameters; processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and associating each word in the vocabulary with the
- the numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
- the embedding layer can map each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
- a system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions.
- One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Unknown words in sequences of words can be effectively predicted if the surrounding words are known.
- Words surrounding a known word in a sequence of words can be effectively predicted.
- Numerical representations of words in a vocabulary of words can be easily and effectively generated. The numerical representations can reveal semantic and syntactic similarities and relationships between the words that they represent.
- the word prediction system can be can be effectively trained on very large word corpuses, e.g., corpuses that contain on the order of 200 billion words, resulting in higher quality numeric representations than those that are obtained by training systems on relatively smaller word corpuses.
- words can be represented in very high-dimensional spaces, e.g., spaces that that have on the order of 1000 dimensions, resulting in higher quality representations than when words are represented in relatively lower-dimensional spaces. Additionally, the time required to train the word prediction system can be greatly reduced.
- FIG. 1 is a block diagram of an example word prediction system.
- FIG. 2 is a flow diagram of an example process for predicting a word based on surrounding words.
- FIG. 3 is a block diagram of another example word prediction system.
- FIG. 4 is a flow diagram of an example process for predicting words that surround a word in a sequence of words.
- FIG. 5 is a flow diagram of an example process for generating numeric representations in a high-dimensional space for a vocabulary of words.
- This specification generally describes systems that can be used to generate numeric representations of words in a high-dimensional space.
- the numeric representations are continuous high-dimensional representations, i.e., words are represented by floating point numbers in a high-dimensional space, e.g., as high-dimensional vectors of floating point numbers.
- the systems can be trained so that positions of the representations in the high-dimensional space generated by the systems reflect semantic and syntactic similarities between the words they represent.
- FIG. 1 is a block diagram of an example word prediction system 100 .
- the word prediction system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the word prediction system 100 receives inputs and generates a predicted output based on the received inputs.
- the inputs are words that surround an unknown word in a sequence of words, e.g., in a phrase or a sentence, and the predicted output is a respective score for each of a predetermined set of words.
- the input words are tokenized before being received by the system, e.g., so that known compounds, e.g., “New York City” and other entity names, are treated as a single word by the system.
- Each score generated for each of the words is a prediction of how likely it is that the corresponding word is the unknown word.
- the word prediction system 100 can receive as an input the words X 1 and X 3 and generate a score for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word is the unknown word X 2 .
- the word prediction system 100 can receive a sequence of words 104 from respective word data stores 102 .
- Each word data store 102 stores words in a respective position in a sequence of words that includes an unknown word. For example, if a word at position t in a sequence of words is unknown, the word data stores 102 may store words at position t ⁇ N, . . . , t ⁇ 1, t+1, . . . , t+N, respectively, where N is a predetermined integer value.
- the sequence of words 104 received by the word prediction system 100 are words at positions t ⁇ N, . . . , t ⁇ 1, t+1, . . .
- the word prediction system 100 uses the sequence of words 104 to predict an output, i.e., a vector of scores that includes a respective score for each word of the set of words that represents a predicted likelihood that the corresponding word will be found at position t in the sequence.
- the word prediction system 100 includes an embedding function 106 and a classifier 110 .
- the embedding function 106 receives a sequence of words and, in accordance with a set of embedding function parameters, applies a transformation to the words that maps the words into a continuous high-dimensional numeric representation. For example, the embedding function 106 can apply a transformation to the words 104 to map the words into a floating point representation 108 . Embedding functions will be described in more detail below with reference to FIG. 2 .
- the classifier 110 receives the numeric representation generated by the embedding function 106 and predicts a value for each field of a word score vector in accordance with values of classifier parameters. Each of the fields in the word score vector corresponds to a respective word in the set of words. For example, the classifier 110 can generate a word score vector 112 from the floating point representation 108 .
- the classifier 110 can be any multiclass or multilabel classifier, e.g., a multiclass logistic regression classifier, a multiclass support vector machine classifier, a Bayesian classifier, and so on.
- the concept term scoring system 100 can include a ranking function that orders the words based on the numeric representation generated by the embedding function 106 , i.e., in order of predicted likelihood of being the word at position t.
- the ranking function may be, e.g., a hinge-loss ranking function, a pairwise ranking function, and so on.
- the word score vectors can be stored in a predicted word store 114 or used for some immediate purpose.
- FIG. 2 is a flow diagram of an example process 200 for predicting a word based on surrounding words.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a word prediction system e.g., the word prediction system 200 of FIG. 2 , appropriately programmed, can perform the process 200 .
- the system obtains a set of input words (step 202 ).
- the set of input words are words from a sequence of words that includes an unknown word whose value is to be predicted. That is, if the sequence includes an unknown word at position t, the set of input words may be the words at position t ⁇ N, . . . , t ⁇ 1, t+1, . . . , and t+N in the sequence.
- the input words are tokenized before being received by the system, e.g., so that known compounds are treated as a single word by the system.
- the system processes the words using an embedding function (step 204 ) to generate a numeric representation of the words.
- the embedding function may be a combining embedding function.
- a combining embedding function maps each word in the sequence of words to a respective continuous high-dimensional representation, e.g., to a respective high-dimensional vector of floating point numbers, based on current parameter values of the embedding function, e.g., as stored in a lookup table, and then merges the respective floating point vectors into a single merged vector.
- the combining embedding function can merge the respective floating point vectors using a linear function, e.g., a sum, average, or weighted linear combination of the respective floating point vectors, or using a nonlinear function, e.g., a component-wise maximum or a norm-constrained linear combination, for example.
- the parallel embedding function may use a single lookup table or multiple different lookup tables. As a simplified example, for the ordered list ⁇ “Atlanta”, “Hotel” ⁇ , the parallel embedding function may map “Atlanta” to a vector [0.1, 0.2, 0.3] and “Hotel” to [0.4, 0.5, 0.6], and then output the sum of the two vectors, i.e., [0.5, 0.7, 0.9].
- the system processes the numeric representations using a classifier (step 206 ) to predict an output for each of a set of words.
- the classifier predicts the output based on values of a set of parameters and the numeric representation.
- the output for a given word is a prediction of the value of a variable that corresponds to the word, e.g., a score for the word that represents the predicted likelihood that the word is the unknown word at position t.
- the system can process the numeric representation of the input words using a ranking function instead of a classifier to predict a ranking of the words according to the predicted likelihood that each of the words is the unknown word in the sequence.
- the process 200 can be performed to predict scores for an input for which the desired output is not known, i.e., for a sequence of words in which one word is not known.
- the process 200 can also be performed on inputs in a set of training data, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the system, i.e., to determine optimal values for the parameters of the classifier and the deep network.
- the process 200 can be performed repeatedly on inputs selected from a set of training data as part of a backpropagation training technique that determines optimal values for each of the parameters.
- the inputs in the set of training data are sequences of words in which every word in the sequence is known.
- the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation.
- the training process can be parallelized in any of a variety of ways.
- the training process can be parallelized using one or more of the techniques for parallelizing the training of a machine learning model described in “Large Scale Distributed Deep Networks,” Jeffrey Dean, et al., Neural Information Processing Systems Conference, 2012.
- FIG. 3 is a block diagram of another example word prediction system 300 .
- the word prediction system 300 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the word prediction system 300 receives an input and generates a predicted output based on the received input.
- the input is a word and the output is a respective score vector for each position surrounding the position of the input word in a sequence of words.
- input words are tokenized before being received by the system, e.g., so that the input word can be a known compound that is treated as a single word by the system.
- the score vector for a given position includes a respective score for each of a predetermined set of words. Each score is a prediction of how likely it is that the word is the word at that position in the sequence.
- the word prediction system 300 can receive as an input the word X 2 and, for each of the words X 1 and X 3 , generate a score for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word will be found at the corresponding position in the sequence relative to the input word, i.e., that the corresponding word is the unknown word X 1 or the unknown word X 3 .
- the word prediction system 300 can receive an input word 304 from a word data store 302 .
- the input word 304 is a word at position t in a sequence of words in which the words in the other positions in the sequence, i.e., the words at positions t ⁇ N, . . . , t ⁇ 1, t+1, . . . , and t+N, are not known, i.e., are to be predicted by the word prediction system 300 .
- the word prediction system 300 uses the input word 304 to predict an output, i.e., for each of the positions t ⁇ N, . . . , t ⁇ 1, t+1, . . . , and t+N, the word prediction 300 generates a vector of scores that includes a respective score for each word of the set of words.
- the word prediction system 300 includes an embedding function 306 and a set of classifiers 310 .
- the embedding function 306 receives an input word and, in accordance with a set of embedding function parameters, applies a transformation to the word that maps the word into a continuous high-dimensional numeric representation.
- the embedding function 306 can apply a transformation to the input word 304 to map the word into a floating point representation 308 .
- Embedding functions will be described in more detail below with reference to FIG. 4 .
- Each of the classifiers 310 receives the numeric representation generated by the embedding function 306 and predicts a value for each field of a respective word score vector in accordance with values of a respective set of classifier parameters. Generally, each of the classifiers 310 will have different values of the classifier parameters.
- Each word score vector corresponds to a respective position in the sequence of words. For example, the word score vector 312 includes values for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word is the word at position t ⁇ N in the sequence.
- the classifiers 310 can be any multiclass or multilabel classifier, e.g., a multiclass logistic regression classifier, a multiclass support vector machine classifier, a Bayesian classifier, and so on.
- the concept term scoring system 300 can include ranking functions that each order the words based on the numeric representation generated by the embedding function 106 , i.e., in order of predicted likelihood of being the word at the corresponding position.
- the ranking function may be, e.g., a hinge-loss ranking function, a pairwise ranking function, and so on.
- the word score vectors can be stored in a respective predicted word store 314 or used for some immediate purpose.
- FIG. 4 is a flow diagram of an example process 400 for predicting words that surround a known word in a sequence of words.
- the process 400 will be described as being performed by a system of one or more computers located in one or more locations.
- a word prediction system e.g., the word prediction system 300 of FIG. 3 , appropriately programmed, can perform the process 400 .
- the system obtains an input word (step 402 ).
- the input word is a word that is at position t in a sequence of words.
- input words are tokenized before being received by the system, e.g., so that the input word can be a known compound that is treated as a single word by the system.
- the system processes the word using an embedding function (step 404 ) to generate a numeric representation of the word in a high-dimensional space.
- the embedding function maps the word to a continuous high-dimensional representation, e.g., to a high-dimensional vector of floating point numbers.
- the embedding function may map the word ‘cat’ to a vector [0.1, 0.5, 0.2] and the word ‘tablet’ to a vector [0.3, 0.9, 0.0], based on current parameter values of the embedding function, e.g., as stored in a lookup table.
- the system processes the numeric representation using each of a set of classifiers (step 406 ) to predict an output for each of a set of positions surrounding position t, i.e., the words in the positions t ⁇ 1V, . . . , t ⁇ 1, t+1, . . . , and t+N in the sequence.
- Each classifier predicts an output for a respective position in the sequence based on values of a set of parameters and the numeric representation.
- the output for a given position in the sequence is a set of predicted values of variables that each correspond to a respective word from the pre-determined set of words, e.g., a score for the word that represents the predicted likelihood that the word is the word in the position.
- the system can process the numeric representation of the input words using ranking functions instead of classifiers to predict a ranking of the words according to the predicted likelihood that each of the words is at the corresponding position in the sequence.
- the process 400 can be performed on inputs for which the desired output is not known, i.e., on an input word for which the surrounding words are not known, or on inputs from a set of training data, i.e., on an input word for which the surrounding words are known, as part of a training process.
- the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation. As described above with reference to FIG. 2 , the training process can be parallelized in any of a variety of ways.
- the numeric representations produced by the embedding functions can be used for a variety of purposes other than as input to a classifier. For example, by training the word prediction system 100 or the word prediction system 300 to generate trained values of embedding function parameters for the embedding function 106 or the embedding function 306 , e.g., as described below with reference to FIG. 5 , the numeric representations produced by the embedding functions can encode many useful regularities.
- the positions of the representations in the high-dimensional space can reflect syntactic similarities, e.g., showing that, by virtue of the positions of the numerical representations of each word in the space, words that are similar to the word “small” include the words “smaller,” “tiny,” smallest,” and so on, and semantic similarities, e.g., showing that the word “queen” is similar to the words “king” and “prince.”
- the numeric representations may show that the word “king” is similar to the word “queen” in the same sense as the word “prince” is similar to the word “princess,” and alternatively that the word “king” is similar to the word “prince” as the word “queen” is similar to the word “princess.”
- operations can be performed on the numeric representations to identify words that have a desired relationship to other words.
- vector subtraction and vector addition operations performed on floating point vectors generated by an embedding function in accordance with trained values of the parameters of the embedding function can be used to determine relationships between words. For example, in order to identify a word that has a similar relationship to a word A as a word B has to a word C, the following operation may be performed on the vectors representing words A, B, and C: vector(A) ⁇ vector(B)+vector(C). For example, the operation vector(“King”) ⁇ vector(“Man”)+vector(“Woman”) may result in a vector that is closest to the vector representation of the word “Queen.”
- FIG. 5 is a flow diagram of an example process 500 for generating numeric representations in a high-dimensional space for a vocabulary of words.
- the process 500 will be described as being performed by a system of one or more computers located in one or more locations.
- a word prediction system e.g., the word prediction system 100 of FIG. 1 or the word prediction system 300 of FIG. 3 , appropriately programmed, can perform the process 500 .
- the system obtains a set of training data (step 502 ).
- the set of training data includes sequences of known words, e.g., sentences or phrases.
- the training data is tokenized before being received by the system, e.g., so that known compounds are treated as a single word by the system.
- the system performs a training process to train one or more classifiers and an embedding function (step 504 ), e.g., the embedding function 106 and the classifier 110 of FIG. 1 or the embedding function 306 and the set of classifiers 310 of FIG. 3 .
- the training process can be performed repeatedly on inputs selected from the set of training data as part of a backpropagation training technique that determines trained values for each of the parameters of the classifier.
- the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation.
- the system processes each word in the vocabulary of words using the embedding function (step 506 ) in accordance with the trained embedding function parameters of the embedding function to generate a respective continuous numeric representation of each of the words in the high-dimensional space.
- the numeric representations may be floating point vectors, i.e., high-dimensional vectors of floating point values.
- the system associates each word in the vocabulary with the respective numeric representation of the word (step 508 ).
- the system can then store the associations, e.g., as a data set of words and their associated representations.
- the numeric representations may reflect certain semantic similarities between the words that they represent. That is, positions of the representations in the high-dimensional space will reflect semantic and syntactic similarities between the represented words.
- the predictions generated by the system 100 or the system 300 can be used in any of a variety of ways.
- the system 100 or the system 300 once trained, can be used to predict missing words at various positions in sentences.
- the system 100 or the system 300 can be used by a question/answer system to predict the answer to a known question or to predict the question to a known answer. That is, the system 100 or the system 300 can be trained on known question-answer pairs, and can then be used to predict a question if all or part of an answer is known or an answer if all or part of a question is known.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- special purpose logic circuitry e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Methods, systems, and apparatus, including computer programs encoded on computer storage media, for computing numeric representations of words. One of the methods includes obtaining a set of training data, wherein the set of training data comprises sequences of words; training a classifier and an embedding function on the set of training data, wherein training the embedding function comprises obtained trained values of the embedding function parameters; processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
Description
- This application is a continuation of U.S. application Ser. No. 17/175,550, filed on Feb. 12, 2021, which is a continuation of U.S. application Ser. No. 16/363,460, filed on Mar. 25, 2019 (now U.S. Pat. No. 10,922,488), which is a continuation of U.S. application Ser. No. 15/682,374, filed on Aug. 21, 2017 (now U.S. Pat. No. 10,241,997), which is a continuation of U.S. application Ser. No. 14/715,421, filed on May 18, 2015 (now U.S. Pat. No. 9,740,680), which is a continuation of U.S. application Ser. No. 13/841,640, filed on Mar. 15, 2013 (now U.S. Pat. No. 9,037,464), which claims the benefit of priority under 35 U.S.C. § 119(e) of U.S. Provisional Application No. 61/752,911, filed on Jan. 15, 2013. The disclosures of the prior applications are considered part of and are incorporated by reference in the disclosure of this application.
- This specification relates to computing numeric representations of words.
- In order to predict one or more unknown words in a sequence of words, e.g., in a sentence or a phrase, some systems convert one or more of the words in the sequence into numeric representations.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in a system that includes a classifier implemented in one or more computers, comprising: an embedding function layer configured to receive an input comprising a plurality of words that surround an unknown word in a sequence of words and map the plurality of words into a numeric representation in a high-dimensional space; and a classifier layer configured to process the numeric representation of the input to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word is the unknown word; and instructions to process each word in a vocabulary of words using the embedding function layer to obtain a respective numeric representation of each word in the vocabulary in the high-dimensional space and to associate each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- These and other embodiments can each optionally include one or more of the following features. The numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations. The embedding layer can map each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in a system that includes a classifier implemented in one or more computers, comprising: an embedding function layer configured to receive an input comprising an input word and map the input word into a numeric representation in a high-dimensional space, and a plurality of classifiers, wherein each of the classifiers corresponds to a respective position surrounding the input word in a sequence of words, and wherein each of the plurality of classifiers is configured to: process the numeric representation of the input word to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word will be found in the corresponding position relative to the input word; and instructions to process each word in a vocabulary of words using the embedding function layer to obtain a respective numeric representation of each word in the vocabulary in the high-dimensional space and to associate each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- These and other embodiments can each optionally include one or more of the following features. The numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations. The embedding layer can map the input word to a floating point vector.
- In general, another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a set of training data, wherein the set of training data comprises sequences of words; training a plurality of classifiers and an embedding function on the set of training data, wherein the embedding function receives an input word and maps the input word to a numeric representation in the high-dimensional space in accordance with a set of embedding function parameters, wherein each of the classifiers corresponds to a respective position surrounding the input word in a sequence of words, and wherein each of the classifiers processes the numeric representation of the input word to generate a respective word score for each word in a pre-determined set of words, wherein each of the respective word scores represents a predicted likelihood that the corresponding word will be found in the corresponding position relative to the input word, and wherein training the embedding function comprises obtaining trained values of the embedding function parameters; processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary; and associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- These and other embodiments can each optionally include one or more of the following features. The numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations. The embedding layer can map the input word to a floating point vector.
- In general, another innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of obtaining a set of training data, wherein the set of training data comprises sequences of words; training a classifier and an embedding function on the set of training data, wherein the embedding function receives a plurality of words surrounding an unknown word in a sequence of words and maps the plurality of words into a numeric representation in accordance with a set of embedding function parameters, wherein the classifier processes the numeric representation of the sequence of words to generate a respective word score for each word in a pre-determined set of words, and wherein each of the respective word scores measure a predicted likelihood that the corresponding word is the unknown word, and wherein training the embedding function comprises obtained trained values of the embedding function parameters; processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- These and other embodiments can each optionally include one or more of the following features. The numeric representations can be continuous representations represented using floating-point numbers. Positions of representations in the high-dimensional space can reflect semantic similarities, syntactic similarities, or both, between words represented by the representations. The embedding layer can map each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
- A system of one or more computers can be configured to perform particular operations or actions by virtue of having software, firmware, hardware, or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Unknown words in sequences of words can be effectively predicted if the surrounding words are known. Words surrounding a known word in a sequence of words can be effectively predicted. Numerical representations of words in a vocabulary of words can be easily and effectively generated. The numerical representations can reveal semantic and syntactic similarities and relationships between the words that they represent.
- By using a word prediction system having a two-layer architecture and by parallelizing the training process, the word prediction system can be can be effectively trained on very large word corpuses, e.g., corpuses that contain on the order of 200 billion words, resulting in higher quality numeric representations than those that are obtained by training systems on relatively smaller word corpuses. Further, words can be represented in very high-dimensional spaces, e.g., spaces that that have on the order of 1000 dimensions, resulting in higher quality representations than when words are represented in relatively lower-dimensional spaces. Additionally, the time required to train the word prediction system can be greatly reduced.
- The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a block diagram of an example word prediction system. -
FIG. 2 is a flow diagram of an example process for predicting a word based on surrounding words. -
FIG. 3 is a block diagram of another example word prediction system. -
FIG. 4 is a flow diagram of an example process for predicting words that surround a word in a sequence of words. -
FIG. 5 is a flow diagram of an example process for generating numeric representations in a high-dimensional space for a vocabulary of words. - Like reference numbers and designations in the various drawings indicate like elements.
- This specification generally describes systems that can be used to generate numeric representations of words in a high-dimensional space. The numeric representations are continuous high-dimensional representations, i.e., words are represented by floating point numbers in a high-dimensional space, e.g., as high-dimensional vectors of floating point numbers. The systems can be trained so that positions of the representations in the high-dimensional space generated by the systems reflect semantic and syntactic similarities between the words they represent.
-
FIG. 1 is a block diagram of an exampleword prediction system 100. Theword prediction system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented. - The
word prediction system 100 receives inputs and generates a predicted output based on the received inputs. In particular, the inputs are words that surround an unknown word in a sequence of words, e.g., in a phrase or a sentence, and the predicted output is a respective score for each of a predetermined set of words. In some implementations, the input words are tokenized before being received by the system, e.g., so that known compounds, e.g., “New York City” and other entity names, are treated as a single word by the system. Each score generated for each of the words is a prediction of how likely it is that the corresponding word is the unknown word. For example, for a sequence of words X1X2X3, where the words X1 and X3 are known and the word X2 is not, theword prediction system 100 can receive as an input the words X1 and X3 and generate a score for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word is the unknown word X2. - For example, the
word prediction system 100 can receive a sequence ofwords 104 from respective word data stores 102. Eachword data store 102 stores words in a respective position in a sequence of words that includes an unknown word. For example, if a word at position t in a sequence of words is unknown, theword data stores 102 may store words at position t−N, . . . , t−1, t+1, . . . , t+N, respectively, where N is a predetermined integer value. Thus, the sequence ofwords 104 received by theword prediction system 100 are words at positions t−N, . . . , t−1, t+1, . . . , t+N, in a particular sequence of words having an unknown word at position t. Theword prediction system 100 uses the sequence ofwords 104 to predict an output, i.e., a vector of scores that includes a respective score for each word of the set of words that represents a predicted likelihood that the corresponding word will be found at position t in the sequence. - The
word prediction system 100 includes an embeddingfunction 106 and aclassifier 110. The embeddingfunction 106 receives a sequence of words and, in accordance with a set of embedding function parameters, applies a transformation to the words that maps the words into a continuous high-dimensional numeric representation. For example, the embeddingfunction 106 can apply a transformation to thewords 104 to map the words into a floatingpoint representation 108. Embedding functions will be described in more detail below with reference toFIG. 2 . - The
classifier 110 receives the numeric representation generated by the embeddingfunction 106 and predicts a value for each field of a word score vector in accordance with values of classifier parameters. Each of the fields in the word score vector corresponds to a respective word in the set of words. For example, theclassifier 110 can generate a word score vector 112 from the floatingpoint representation 108. Theclassifier 110 can be any multiclass or multilabel classifier, e.g., a multiclass logistic regression classifier, a multiclass support vector machine classifier, a Bayesian classifier, and so on. In some implementations, instead of theclassifier 110, the conceptterm scoring system 100 can include a ranking function that orders the words based on the numeric representation generated by the embeddingfunction 106, i.e., in order of predicted likelihood of being the word at position t. The ranking function may be, e.g., a hinge-loss ranking function, a pairwise ranking function, and so on. Once generated, the word score vectors can be stored in a predictedword store 114 or used for some immediate purpose. -
FIG. 2 is a flow diagram of anexample process 200 for predicting a word based on surrounding words. For convenience, theprocess 200 will be described as being performed by a system of one or more computers located in one or more locations. For example, a word prediction system, e.g., theword prediction system 200 ofFIG. 2 , appropriately programmed, can perform theprocess 200. - The system obtains a set of input words (step 202). The set of input words are words from a sequence of words that includes an unknown word whose value is to be predicted. That is, if the sequence includes an unknown word at position t, the set of input words may be the words at position t−N, . . . , t−1, t+1, . . . , and t+N in the sequence. In some implementations, the input words are tokenized before being received by the system, e.g., so that known compounds are treated as a single word by the system.
- The system processes the words using an embedding function (step 204) to generate a numeric representation of the words.
- For example, the embedding function may be a combining embedding function. A combining embedding function maps each word in the sequence of words to a respective continuous high-dimensional representation, e.g., to a respective high-dimensional vector of floating point numbers, based on current parameter values of the embedding function, e.g., as stored in a lookup table, and then merges the respective floating point vectors into a single merged vector. The combining embedding function can merge the respective floating point vectors using a linear function, e.g., a sum, average, or weighted linear combination of the respective floating point vectors, or using a nonlinear function, e.g., a component-wise maximum or a norm-constrained linear combination, for example. In order to identify the respective floating point vectors, the parallel embedding function may use a single lookup table or multiple different lookup tables. As a simplified example, for the ordered list {“Atlanta”, “Hotel”}, the parallel embedding function may map “Atlanta” to a vector [0.1, 0.2, 0.3] and “Hotel” to [0.4, 0.5, 0.6], and then output the sum of the two vectors, i.e., [0.5, 0.7, 0.9].
- The system processes the numeric representations using a classifier (step 206) to predict an output for each of a set of words. The classifier predicts the output based on values of a set of parameters and the numeric representation. The output for a given word is a prediction of the value of a variable that corresponds to the word, e.g., a score for the word that represents the predicted likelihood that the word is the unknown word at position t. In some implementations, the system can process the numeric representation of the input words using a ranking function instead of a classifier to predict a ranking of the words according to the predicted likelihood that each of the words is the unknown word in the sequence.
- The
process 200 can be performed to predict scores for an input for which the desired output is not known, i.e., for a sequence of words in which one word is not known. Theprocess 200 can also be performed on inputs in a set of training data, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the system, i.e., to determine optimal values for the parameters of the classifier and the deep network. For example, theprocess 200 can be performed repeatedly on inputs selected from a set of training data as part of a backpropagation training technique that determines optimal values for each of the parameters. Generally, the inputs in the set of training data are sequences of words in which every word in the sequence is known. - As part of the training process, if the label predicted by the classifier for a particular sequence of words in the set of training data is different from the known desired label for that particular sequence of words, i.e., the word scores generated by the classifier do not align with the actual value of the unknown word, the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation.
- In some circumstances, e.g., for large sets of training data, the training process can be parallelized in any of a variety of ways. For example, the training process can be parallelized using one or more of the techniques for parallelizing the training of a machine learning model described in “Large Scale Distributed Deep Networks,” Jeffrey Dean, et al., Neural Information Processing Systems Conference, 2012.
-
FIG. 3 is a block diagram of another exampleword prediction system 300. Theword prediction system 300 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented. - The
word prediction system 300 receives an input and generates a predicted output based on the received input. In particular, the input is a word and the output is a respective score vector for each position surrounding the position of the input word in a sequence of words. In some implementations, input words are tokenized before being received by the system, e.g., so that the input word can be a known compound that is treated as a single word by the system. The score vector for a given position includes a respective score for each of a predetermined set of words. Each score is a prediction of how likely it is that the word is the word at that position in the sequence. For example, for a sequence of words X1X2X3, where the word X2 is known and the words X1 and X3 are not, theword prediction system 300 can receive as an input the word X2 and, for each of the words X1 and X3, generate a score for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word will be found at the corresponding position in the sequence relative to the input word, i.e., that the corresponding word is the unknown word X1 or the unknown word X3. - For example, the
word prediction system 300 can receive aninput word 304 from aword data store 302. Theinput word 304 is a word at position t in a sequence of words in which the words in the other positions in the sequence, i.e., the words at positions t−N, . . . , t−1, t+1, . . . , and t+N, are not known, i.e., are to be predicted by theword prediction system 300. Theword prediction system 300 uses theinput word 304 to predict an output, i.e., for each of the positions t−N, . . . , t−1, t+1, . . . , and t+N, theword prediction 300 generates a vector of scores that includes a respective score for each word of the set of words. - The
word prediction system 300 includes an embeddingfunction 306 and a set ofclassifiers 310. The embeddingfunction 306 receives an input word and, in accordance with a set of embedding function parameters, applies a transformation to the word that maps the word into a continuous high-dimensional numeric representation. For example, the embeddingfunction 306 can apply a transformation to theinput word 304 to map the word into a floating point representation 308. Embedding functions will be described in more detail below with reference toFIG. 4 . - Each of the
classifiers 310 receives the numeric representation generated by the embeddingfunction 306 and predicts a value for each field of a respective word score vector in accordance with values of a respective set of classifier parameters. Generally, each of theclassifiers 310 will have different values of the classifier parameters. Each word score vector corresponds to a respective position in the sequence of words. For example, theword score vector 312 includes values for each of the predetermined set of words that is a prediction of how likely it is that the corresponding word is the word at position t−N in the sequence. Theclassifiers 310 can be any multiclass or multilabel classifier, e.g., a multiclass logistic regression classifier, a multiclass support vector machine classifier, a Bayesian classifier, and so on. In some implementations, instead of theclassifiers 310, the conceptterm scoring system 300 can include ranking functions that each order the words based on the numeric representation generated by the embeddingfunction 106, i.e., in order of predicted likelihood of being the word at the corresponding position. The ranking function may be, e.g., a hinge-loss ranking function, a pairwise ranking function, and so on. - Once generated, the word score vectors can be stored in a respective predicted
word store 314 or used for some immediate purpose. -
FIG. 4 is a flow diagram of anexample process 400 for predicting words that surround a known word in a sequence of words. For convenience, theprocess 400 will be described as being performed by a system of one or more computers located in one or more locations. For example, a word prediction system, e.g., theword prediction system 300 ofFIG. 3 , appropriately programmed, can perform theprocess 400. - The system obtains an input word (step 402). The input word is a word that is at position t in a sequence of words. In some implementations, input words are tokenized before being received by the system, e.g., so that the input word can be a known compound that is treated as a single word by the system.
- The system processes the word using an embedding function (step 404) to generate a numeric representation of the word in a high-dimensional space. The embedding function maps the word to a continuous high-dimensional representation, e.g., to a high-dimensional vector of floating point numbers. For example, the embedding function may map the word ‘cat’ to a vector [0.1, 0.5, 0.2] and the word ‘tablet’ to a vector [0.3, 0.9, 0.0], based on current parameter values of the embedding function, e.g., as stored in a lookup table.
- The system processes the numeric representation using each of a set of classifiers (step 406) to predict an output for each of a set of positions surrounding position t, i.e., the words in the positions t−1V, . . . , t−1, t+1, . . . , and t+N in the sequence. Each classifier predicts an output for a respective position in the sequence based on values of a set of parameters and the numeric representation. The output for a given position in the sequence is a set of predicted values of variables that each correspond to a respective word from the pre-determined set of words, e.g., a score for the word that represents the predicted likelihood that the word is the word in the position. In some implementations, the system can process the numeric representation of the input words using ranking functions instead of classifiers to predict a ranking of the words according to the predicted likelihood that each of the words is at the corresponding position in the sequence.
- Like the
process 200, theprocess 400 can be performed on inputs for which the desired output is not known, i.e., on an input word for which the surrounding words are not known, or on inputs from a set of training data, i.e., on an input word for which the surrounding words are known, as part of a training process. - As part of the training process, if the label predicted by one of the classifiers for a particular input word in the set of training data is different from the known desired label for that particular word, i.e., the word scores generated by the classifier do not align with the value of the word in the corresponding position, the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation. As described above with reference to
FIG. 2 , the training process can be parallelized in any of a variety of ways. - Once the
word prediction system 100 and theword prediction system 300 have been trained and the parameters of the embeddingfunction 106 and the embeddingfunction 306 have been adjusted, the numeric representations produced by the embedding functions can be used for a variety of purposes other than as input to a classifier. For example, by training theword prediction system 100 or theword prediction system 300 to generate trained values of embedding function parameters for the embeddingfunction 106 or the embeddingfunction 306, e.g., as described below with reference toFIG. 5 , the numeric representations produced by the embedding functions can encode many useful regularities. That is, the positions of the representations in the high-dimensional space can reflect syntactic similarities, e.g., showing that, by virtue of the positions of the numerical representations of each word in the space, words that are similar to the word “small” include the words “smaller,” “tiny,” smallest,” and so on, and semantic similarities, e.g., showing that the word “queen” is similar to the words “king” and “prince.” Furthermore, because of the encoded regularities, the numeric representations may show that the word “king” is similar to the word “queen” in the same sense as the word “prince” is similar to the word “princess,” and alternatively that the word “king” is similar to the word “prince” as the word “queen” is similar to the word “princess.” Advantageously, operations can be performed on the numeric representations to identify words that have a desired relationship to other words. In particular, vector subtraction and vector addition operations performed on floating point vectors generated by an embedding function in accordance with trained values of the parameters of the embedding function can be used to determine relationships between words. For example, in order to identify a word that has a similar relationship to a word A as a word B has to a word C, the following operation may be performed on the vectors representing words A, B, and C: vector(A)−vector(B)+vector(C). For example, the operation vector(“King”)−vector(“Man”)+vector(“Woman”) may result in a vector that is closest to the vector representation of the word “Queen.” -
FIG. 5 is a flow diagram of anexample process 500 for generating numeric representations in a high-dimensional space for a vocabulary of words. For convenience, theprocess 500 will be described as being performed by a system of one or more computers located in one or more locations. For example, a word prediction system, e.g., theword prediction system 100 ofFIG. 1 or theword prediction system 300 ofFIG. 3 , appropriately programmed, can perform theprocess 500. - The system obtains a set of training data (step 502). The set of training data includes sequences of known words, e.g., sentences or phrases. In some implementations, the training data is tokenized before being received by the system, e.g., so that known compounds are treated as a single word by the system.
- The system performs a training process to train one or more classifiers and an embedding function (step 504), e.g., the embedding
function 106 and theclassifier 110 ofFIG. 1 or the embeddingfunction 306 and the set ofclassifiers 310 ofFIG. 3 . The training process can be performed repeatedly on inputs selected from the set of training data as part of a backpropagation training technique that determines trained values for each of the parameters of the classifier. - As part of the training process, if the label predicted by a classifier for a particular sequence of words in the set of training data is different from the known desired label for that particular sequence of words, i.e., the word scores generated by the classifier do not align with the actual value of the unknown word or words in the sequence, the classifier will adjust its parameters so as to reduce the expected error on that particular input using conventional gradient based methods. Furthermore, as part of the backpropagation method, the classifier sends an error signal to the embedding function, which allows the embedding function to adjust its parameters through successive stages of backpropagation.
- The system processes each word in the vocabulary of words using the embedding function (step 506) in accordance with the trained embedding function parameters of the embedding function to generate a respective continuous numeric representation of each of the words in the high-dimensional space. For example, the numeric representations may be floating point vectors, i.e., high-dimensional vectors of floating point values.
- The system associates each word in the vocabulary with the respective numeric representation of the word (step 508). The system can then store the associations, e.g., as a data set of words and their associated representations. As described above, because the numeric representations were generated in accordance with the trained parameters of the embedding function, the numeric representations may reflect certain semantic similarities between the words that they represent. That is, positions of the representations in the high-dimensional space will reflect semantic and syntactic similarities between the represented words.
- Additionally, the predictions generated by the
system 100 or thesystem 300, i.e., predictions of likelihoods of words being found at particular positions in sequences of words, can be used in any of a variety of ways. For example, thesystem 100 or thesystem 300, once trained, can be used to predict missing words at various positions in sentences. As another example, thesystem 100 or thesystem 300 can be used by a question/answer system to predict the answer to a known question or to predict the question to a known answer. That is, thesystem 100 or thesystem 300 can be trained on known question-answer pairs, and can then be used to predict a question if all or part of an answer is known or an answer if all or part of a question is known. - Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
Claims (21)
1. (canceled)
2. A method for assigning a respective point in a high-dimensional space to each word in a vocabulary of words, the method comprising:
obtaining a set of training data, wherein the set of training data comprises sequences of words;
training a ranking function and an embedding function on the set of training data, wherein the embedding function receives a plurality of words surrounding an unknown word in a sequence of words and maps the plurality of words into a numeric representation in accordance with a set of embedding function parameters, wherein the ranking function processes the numeric representation of the sequence of words to generate a predicted ranking of words in a pre-determined set of words according to the predicted likelihood that each of the words in the pre-determined set of words is the unknown word in the sequence, and wherein training the embedding function comprises obtained trained values of the embedding function parameters;
processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and
associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
3. The method of claim 2 , wherein the numeric representations are continuous representations represented using floating-point numbers.
4. The method of claim 2 , wherein positions of representations in the high-dimensional space reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
5. The method of claim 2 , wherein the embedding function maps each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
6. The method of claim 2 , wherein training the classifier and the embedding function comprises preforming a backpropagation training technique to obtain the trained values of the embedding function parameters.
7. The method of claim 2 , wherein the ranking function is a pair-wise ranking function.
8. The method of claim 2 , wherein the ranking function is a hinge-loss ranking function.
9. A system comprising one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform operations for assigning a respective point in a high-dimensional space to each word in a vocabulary of words, the operations comprising:
obtaining a set of training data, wherein the set of training data comprises sequences of words;
training a ranking function and an embedding function on the set of training data, wherein the embedding function receives a plurality of words surrounding an unknown word in a sequence of words and maps the plurality of words into a numeric representation in accordance with a set of embedding function parameters, wherein the ranking function processes the numeric representation of the sequence of words to generate a predicted ranking of words in a pre-determined set of words according to the predicted likelihood that each of the words in the pre-determined set of words is the unknown word in the sequence, and wherein training the embedding function comprises obtained trained values of the embedding function parameters;
processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and
associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
10. The system of claim 9 , wherein the numeric representations are continuous representations represented using floating-point numbers.
11. The system of claim 9 , wherein positions of representations in the high-dimensional space reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
12. The system of claim 9 , wherein the embedding function maps each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
13. The system of claim 9 , wherein training the classifier and the embedding function comprises preforming a backpropagation training technique to obtain the trained values of the embedding function parameters.
14. The system of claim 9 , wherein the ranking function is a pair-wise ranking function.
15. The system of claim 9 , wherein the ranking function is a hinge-loss ranking function.
16. One or more non-transitory computer-readable storage media storing instructions that when executed by one or more computers cause the one or more computers to perform operations for assigning a respective point in a high-dimensional space to each word in a vocabulary of words, the operations comprising:
obtaining a set of training data, wherein the set of training data comprises sequences of words;
training a ranking function and an embedding function on the set of training data, wherein the embedding function receives a plurality of words surrounding an unknown word in a sequence of words and maps the plurality of words into a numeric representation in accordance with a set of embedding function parameters, wherein the ranking function processes the numeric representation of the sequence of words to generate a predicted ranking of words in a pre-determined set of words according to the predicted likelihood that each of the words in the pre-determined set of words is the unknown word in the sequence, and wherein training the embedding function comprises obtained trained values of the embedding function parameters;
processing each word in the vocabulary using the embedding function in accordance with the trained values of the embedding function parameters to generate a respective numerical representation of each word in the vocabulary in the high-dimensional space; and
associating each word in the vocabulary with the respective numeric representation of the word in the high-dimensional space.
17. The computer-readable storage media of claim 16 , wherein the numeric representations are continuous representations represented using floating-point numbers.
18. The computer-readable storage media of claim 16 , wherein positions of representations in the high-dimensional space reflect semantic similarities, syntactic similarities, or both, between words represented by the representations.
19. The computer-readable storage media of claim 16 , wherein the embedding function maps each of the plurality of words to a respective floating point vector and outputs a single merged vector that is a combination of the respective floating point vectors.
20. The computer-readable storage media of claim 16 , wherein training the classifier and the embedding function comprises preforming a backpropagation training technique to obtain the trained values of the embedding function parameters.
21. The computer-readable storage media of claim 16 , wherein the ranking function is a pair-wise ranking function.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US18/503,051 US20240070392A1 (en) | 2013-01-15 | 2023-11-06 | Computing numeric representations of words in a high-dimensional space |
Applications Claiming Priority (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201361752911P | 2013-01-15 | 2013-01-15 | |
US13/841,640 US9037464B1 (en) | 2013-01-15 | 2013-03-15 | Computing numeric representations of words in a high-dimensional space |
US14/715,421 US9740680B1 (en) | 2013-01-15 | 2015-05-18 | Computing numeric representations of words in a high-dimensional space |
US15/682,374 US10241997B1 (en) | 2013-01-15 | 2017-08-21 | Computing numeric representations of words in a high-dimensional space |
US16/363,460 US10922488B1 (en) | 2013-01-15 | 2019-03-25 | Computing numeric representations of words in a high-dimensional space |
US17/175,550 US11809824B1 (en) | 2013-01-15 | 2021-02-12 | Computing numeric representations of words in a high-dimensional space |
US18/503,051 US20240070392A1 (en) | 2013-01-15 | 2023-11-06 | Computing numeric representations of words in a high-dimensional space |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/175,550 Continuation US11809824B1 (en) | 2013-01-15 | 2021-02-12 | Computing numeric representations of words in a high-dimensional space |
Publications (1)
Publication Number | Publication Date |
---|---|
US20240070392A1 true US20240070392A1 (en) | 2024-02-29 |
Family
ID=53054725
Family Applications (6)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/841,640 Active 2033-11-16 US9037464B1 (en) | 2013-01-15 | 2013-03-15 | Computing numeric representations of words in a high-dimensional space |
US14/715,421 Active 2033-06-06 US9740680B1 (en) | 2013-01-15 | 2015-05-18 | Computing numeric representations of words in a high-dimensional space |
US15/682,374 Active US10241997B1 (en) | 2013-01-15 | 2017-08-21 | Computing numeric representations of words in a high-dimensional space |
US16/363,460 Active US10922488B1 (en) | 2013-01-15 | 2019-03-25 | Computing numeric representations of words in a high-dimensional space |
US17/175,550 Active 2033-11-07 US11809824B1 (en) | 2013-01-15 | 2021-02-12 | Computing numeric representations of words in a high-dimensional space |
US18/503,051 Pending US20240070392A1 (en) | 2013-01-15 | 2023-11-06 | Computing numeric representations of words in a high-dimensional space |
Family Applications Before (5)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/841,640 Active 2033-11-16 US9037464B1 (en) | 2013-01-15 | 2013-03-15 | Computing numeric representations of words in a high-dimensional space |
US14/715,421 Active 2033-06-06 US9740680B1 (en) | 2013-01-15 | 2015-05-18 | Computing numeric representations of words in a high-dimensional space |
US15/682,374 Active US10241997B1 (en) | 2013-01-15 | 2017-08-21 | Computing numeric representations of words in a high-dimensional space |
US16/363,460 Active US10922488B1 (en) | 2013-01-15 | 2019-03-25 | Computing numeric representations of words in a high-dimensional space |
US17/175,550 Active 2033-11-07 US11809824B1 (en) | 2013-01-15 | 2021-02-12 | Computing numeric representations of words in a high-dimensional space |
Country Status (1)
Country | Link |
---|---|
US (6) | US9037464B1 (en) |
Families Citing this family (106)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9147154B2 (en) * | 2013-03-13 | 2015-09-29 | Google Inc. | Classifying resources using a deep network |
US9141906B2 (en) * | 2013-03-13 | 2015-09-22 | Google Inc. | Scoring concept terms using a deep network |
RU2579873C2 (en) * | 2013-12-19 | 2016-04-10 | Общество с ограниченной ответственностью "Аби ИнфоПоиск" | Resolution of semantic ambiguity using semantic classifier |
US10769191B2 (en) * | 2013-12-20 | 2020-09-08 | Google Llc | Classifying data objects |
US9805028B1 (en) * | 2014-09-17 | 2017-10-31 | Google Inc. | Translating terms using numeric representations |
US10339440B2 (en) | 2015-02-19 | 2019-07-02 | Digital Reasoning Systems, Inc. | Systems and methods for neural language modeling |
US9940321B2 (en) | 2015-03-15 | 2018-04-10 | Graham MOREHEAD | System for machine translation |
US11443206B2 (en) | 2015-03-23 | 2022-09-13 | Tibco Software Inc. | Adaptive filtering and modeling via adaptive experimental designs to identify emerging data patterns from large volume, high dimensional, high velocity streaming data |
US10467226B2 (en) * | 2016-04-27 | 2019-11-05 | Tibco Software Inc | Method for in-database feature selection for high-dimensional inputs |
US9779085B2 (en) | 2015-05-29 | 2017-10-03 | Oracle International Corporation | Multilingual embeddings for natural language processing |
US20190318407A1 (en) | 2015-07-17 | 2019-10-17 | Devanathan GIRIDHARI | Method for product search using the user-weighted, attribute-based, sort-ordering and system thereof |
US10803380B2 (en) | 2015-09-11 | 2020-10-13 | Google Llc | Generating vector representations of documents |
US20180260860A1 (en) | 2015-09-23 | 2018-09-13 | Giridhari Devanathan | A computer-implemented method and system for analyzing and evaluating user reviews |
EP3360082B1 (en) | 2015-11-12 | 2021-06-02 | Deepmind Technologies Limited | Neural programming |
US10963779B2 (en) | 2015-11-12 | 2021-03-30 | Google Llc | Neural network programmer |
US10032463B1 (en) * | 2015-12-29 | 2018-07-24 | Amazon Technologies, Inc. | Speech processing with learned representation of user interaction history |
US20170286397A1 (en) * | 2016-03-30 | 2017-10-05 | International Business Machines Corporation | Predictive Embeddings |
US10380258B2 (en) * | 2016-03-31 | 2019-08-13 | International Business Machines Corporation | System, method, and recording medium for corpus pattern paraphrasing |
US10303790B2 (en) | 2016-06-08 | 2019-05-28 | International Business Machines Corporation | Processing un-typed triple store data |
KR102604552B1 (en) * | 2016-07-15 | 2023-11-22 | 삼성전자주식회사 | Method and apparatus for word embedding, method and apparatus for voice recognition |
US11294942B2 (en) | 2016-09-29 | 2022-04-05 | Koninklijk Ephilips N.V. | Question generation |
US20180101789A1 (en) * | 2016-10-06 | 2018-04-12 | Fujitsu Limited | Method for editing machine learning result and information processing apparatus |
US11361242B2 (en) * | 2016-10-28 | 2022-06-14 | Meta Platforms, Inc. | Generating recommendations using a deep-learning model |
US9977778B1 (en) | 2016-11-03 | 2018-05-22 | Conduent Business Services, Llc | Probabilistic matching for dialog state tracking with limited training data |
DE102016223193A1 (en) | 2016-11-23 | 2018-05-24 | Fujitsu Limited | Method and apparatus for completing a knowledge graph |
US11068658B2 (en) | 2016-12-07 | 2021-07-20 | Disney Enterprises, Inc. | Dynamic word embeddings |
CN110168544A (en) * | 2016-12-27 | 2019-08-23 | 夏普株式会社 | Answering device, the control method of answering device and control program |
US10878339B2 (en) * | 2017-01-27 | 2020-12-29 | Google Llc | Leveraging machine learning to predict user generated content |
EP3355547B1 (en) | 2017-01-27 | 2020-04-15 | Vectra AI, Inc. | Method and system for learning representations of network flow traffic |
US10692016B2 (en) * | 2017-02-07 | 2020-06-23 | Fmr Llc | Classifying unstructured computer text for complaint-specific interactions using rules-based and machine learning modeling |
US10628471B2 (en) | 2017-02-07 | 2020-04-21 | Fmr Llc | Domain-specific stopword removal from unstructured computer text using a neural network |
JP6862914B2 (en) * | 2017-02-28 | 2021-04-21 | 富士通株式会社 | Analysis program, analysis method and analysis equipment |
US10922734B2 (en) | 2017-03-13 | 2021-02-16 | Fmr Llc | Automatic identification of issues in text-based transcripts |
EP3376400A1 (en) * | 2017-03-14 | 2018-09-19 | Fujitsu Limited | Dynamic context adjustment in language models |
US11960844B2 (en) | 2017-05-10 | 2024-04-16 | Oracle International Corporation | Discourse parsing using semantic and syntactic relations |
US10839154B2 (en) | 2017-05-10 | 2020-11-17 | Oracle International Corporation | Enabling chatbots by detecting and supporting affective argumentation |
US10817670B2 (en) | 2017-05-10 | 2020-10-27 | Oracle International Corporation | Enabling chatbots by validating argumentation |
CN110612525B (en) | 2017-05-10 | 2024-03-19 | 甲骨文国际公司 | Enabling a tutorial analysis by using an alternating speech tree |
US11373632B2 (en) | 2017-05-10 | 2022-06-28 | Oracle International Corporation | Using communicative discourse trees to create a virtual persuasive dialogue |
US10599885B2 (en) | 2017-05-10 | 2020-03-24 | Oracle International Corporation | Utilizing discourse structure of noisy user-generated content for chatbot learning |
US11586827B2 (en) | 2017-05-10 | 2023-02-21 | Oracle International Corporation | Generating desired discourse structure from an arbitrary text |
US10679011B2 (en) | 2017-05-10 | 2020-06-09 | Oracle International Corporation | Enabling chatbots by detecting and supporting argumentation |
US11386274B2 (en) | 2017-05-10 | 2022-07-12 | Oracle International Corporation | Using communicative discourse trees to detect distributed incompetence |
US11615145B2 (en) | 2017-05-10 | 2023-03-28 | Oracle International Corporation | Converting a document into a chatbot-accessible form via the use of communicative discourse trees |
US10372824B2 (en) | 2017-05-15 | 2019-08-06 | International Business Machines Corporation | Disambiguating concepts in natural language |
US10380259B2 (en) * | 2017-05-22 | 2019-08-13 | International Business Machines Corporation | Deep embedding for natural language content based on semantic dependencies |
WO2018218034A1 (en) | 2017-05-25 | 2018-11-29 | J. W. Pepper & Son, Inc. | Sheet music search and discovery system |
US20180341686A1 (en) * | 2017-05-26 | 2018-11-29 | Nanfang Hu | System and method for data search based on top-to-bottom similarity analysis |
US11100144B2 (en) | 2017-06-15 | 2021-08-24 | Oracle International Corporation | Data loss prevention system for cloud security based on document discourse analysis |
US10839161B2 (en) | 2017-06-15 | 2020-11-17 | Oracle International Corporation | Tree kernel learning for text classification into classes of intent |
US11170177B2 (en) * | 2017-07-28 | 2021-11-09 | Nia Marcia Maria Dowell | Computational linguistic analysis of learners' discourse in computer-mediated group learning environments |
US11182412B2 (en) | 2017-09-27 | 2021-11-23 | Oracle International Corporation | Search indexing using discourse trees |
JP7187545B2 (en) | 2017-09-28 | 2022-12-12 | オラクル・インターナショナル・コーポレイション | Determining Cross-Document Rhetorical Connections Based on Parsing and Identifying Named Entities |
US11809825B2 (en) | 2017-09-28 | 2023-11-07 | Oracle International Corporation | Management of a focused information sharing dialogue based on discourse trees |
US11182706B2 (en) * | 2017-11-13 | 2021-11-23 | International Business Machines Corporation | Providing suitable strategies to resolve work items to participants of collaboration system |
CN107844921A (en) * | 2017-12-11 | 2018-03-27 | 四川新网银行股份有限公司 | A kind of customer action predictor method based on embedding technologies |
US11509540B2 (en) | 2017-12-14 | 2022-11-22 | Extreme Networks, Inc. | Systems and methods for zero-footprint large-scale user-entity behavior modeling |
US11288581B2 (en) * | 2017-12-27 | 2022-03-29 | Sap Se | Subsymbolic encoding with preserved semantic relationships |
US11640420B2 (en) | 2017-12-31 | 2023-05-02 | Zignal Labs, Inc. | System and method for automatic summarization of content with event based analysis |
EP3746916A1 (en) | 2018-01-30 | 2020-12-09 | Oracle International Corporation | Using communicative discourse trees to detect a request for an explanation |
US11537645B2 (en) * | 2018-01-30 | 2022-12-27 | Oracle International Corporation | Building dialogue structure by using communicative discourse trees |
CN110119507A (en) * | 2018-02-05 | 2019-08-13 | 阿里巴巴集团控股有限公司 | Term vector generation method, device and equipment |
EP3791292A1 (en) | 2018-05-09 | 2021-03-17 | Oracle International Corporation | Constructing imaginary discourse trees to improve answering convergent questions |
US11455494B2 (en) | 2018-05-30 | 2022-09-27 | Oracle International Corporation | Automated building of expanded datasets for training of autonomous agents |
US11755915B2 (en) | 2018-06-13 | 2023-09-12 | Zignal Labs, Inc. | System and method for quality assurance of media analysis |
US10650191B1 (en) | 2018-06-14 | 2020-05-12 | Elementary IP LLC | Document term extraction based on multiple metrics |
US11356476B2 (en) | 2018-06-26 | 2022-06-07 | Zignal Labs, Inc. | System and method for social network analysis |
RU2712101C2 (en) * | 2018-06-27 | 2020-01-24 | Общество с ограниченной ответственностью "Аби Продакшн" | Prediction of probability of occurrence of line using sequence of vectors |
US11645459B2 (en) | 2018-07-02 | 2023-05-09 | Oracle International Corporation | Social autonomous agent implementation using lattice queries and relevancy detection |
US10726058B2 (en) | 2018-07-31 | 2020-07-28 | Market Advantage, Inc. | System, computer program product and method for generating embeddings of textual and quantitative data |
US10853577B2 (en) * | 2018-09-21 | 2020-12-01 | Salesforce.Com, Inc. | Response recommendation system |
US11037356B2 (en) | 2018-09-24 | 2021-06-15 | Zignal Labs, Inc. | System and method for executing non-graphical algorithms on a GPU (graphics processing unit) |
US11562135B2 (en) * | 2018-10-16 | 2023-01-24 | Oracle International Corporation | Constructing conclusive answers for autonomous agents |
US10915711B2 (en) | 2018-12-09 | 2021-02-09 | International Business Machines Corporation | Numerical representation in natural language processing techniques |
US10796107B2 (en) | 2018-12-26 | 2020-10-06 | Soundhound, Inc. | Unified embeddings for translation |
US11625534B1 (en) | 2019-02-12 | 2023-04-11 | Text IQ, Inc. | Identifying documents that contain potential code words using a machine learning model |
US11321536B2 (en) | 2019-02-13 | 2022-05-03 | Oracle International Corporation | Chatbot conducting a virtual social dialogue |
US10607598B1 (en) * | 2019-04-05 | 2020-03-31 | Capital One Services, Llc | Determining input data for speech processing |
AU2020272235A1 (en) * | 2019-04-12 | 2021-11-04 | Incyzr Pty. Ltd. | Methods, systems and computer program products for implementing neural network based optimization of database search functionality |
US10565317B1 (en) | 2019-05-07 | 2020-02-18 | Moveworks, Inc. | Apparatus for improving responses of automated conversational agents via determination and updating of intent |
JP7211901B2 (en) | 2019-06-07 | 2023-01-24 | 株式会社日立製作所 | Information processing device and information processing method |
US11461590B2 (en) | 2019-06-14 | 2022-10-04 | Micro Focus Llc | Train a machine learning model using IP addresses and connection contexts |
KR20190083629A (en) * | 2019-06-24 | 2019-07-12 | 엘지전자 주식회사 | Method and apparatus for recognizing a voice |
US11017177B2 (en) | 2019-06-27 | 2021-05-25 | Conduent Business Services, Llc | Neural network systems and methods for target identification from text |
US11449682B2 (en) | 2019-08-29 | 2022-09-20 | Oracle International Corporation | Adjusting chatbot conversation to user personality and mood |
KR102280856B1 (en) | 2019-09-16 | 2021-07-23 | 서울대학교산학협력단 | Apparatus and method for generating document embedding |
US11256872B2 (en) | 2019-10-29 | 2022-02-22 | International Business Machines Corporation | Natural language polishing using vector spaces having relative similarity vectors |
US11481554B2 (en) | 2019-11-08 | 2022-10-25 | Oracle International Corporation | Systems and methods for training and evaluating machine learning models using generalized vocabulary tokens for document processing |
US11568143B2 (en) * | 2019-11-15 | 2023-01-31 | Intuit Inc. | Pre-trained contextual embedding models for named entity recognition and confidence prediction |
US11507747B2 (en) * | 2019-11-27 | 2022-11-22 | Oracle International Corporation | Hybrid in-domain and out-of-domain document processing for non-vocabulary tokens of electronic documents |
US11494559B2 (en) * | 2019-11-27 | 2022-11-08 | Oracle International Corporation | Hybrid in-domain and out-of-domain document processing for non-vocabulary tokens of electronic documents |
US11775772B2 (en) | 2019-12-05 | 2023-10-03 | Oracle International Corporation | Chatbot providing a defeating reply |
US11645611B1 (en) | 2019-12-23 | 2023-05-09 | Blue Yonder Group, Inc. | System and method of decoding supply chain signatures |
US11645456B2 (en) * | 2020-01-28 | 2023-05-09 | Microsoft Technology Licensing, Llc | Siamese neural networks for flagging training data in text-based machine learning |
US11422798B2 (en) * | 2020-02-26 | 2022-08-23 | International Business Machines Corporation | Context-based word embedding for programming artifacts |
US11714964B2 (en) | 2020-03-13 | 2023-08-01 | Canon Medical Systems Corporation | Text processing method and apparatus |
JP2021149613A (en) * | 2020-03-19 | 2021-09-27 | 株式会社野村総合研究所 | Natural language processing apparatus and program |
US11586652B2 (en) | 2020-05-18 | 2023-02-21 | International Business Machines Corporation | Variable-length word embedding |
US11210824B2 (en) | 2020-05-21 | 2021-12-28 | At&T Intellectual Property I, L.P. | Integer-based graphical representations of words and texts |
CN113961664A (en) * | 2020-07-15 | 2022-01-21 | 上海乐言信息科技有限公司 | Deep learning-based numerical word processing method, system, terminal and medium |
US11797961B2 (en) * | 2020-07-17 | 2023-10-24 | Intuit, Inc. | Vectorization of transactions |
US11853702B2 (en) | 2021-01-29 | 2023-12-26 | International Business Machines Corporation | Self-supervised semantic shift detection and alignment |
US11418397B1 (en) | 2021-02-01 | 2022-08-16 | Cisco Technology, Inc. | Automated generation of standard network device configurations |
US11438226B2 (en) | 2021-02-02 | 2022-09-06 | Cisco Technology, Inc. | Identification of network device configuration changes |
WO2023102831A1 (en) | 2021-12-09 | 2023-06-15 | Orange | Systems and methods to search for digital twins |
US11610047B1 (en) | 2022-02-01 | 2023-03-21 | Klarna Bank Ab | Dynamic labeling of functionally equivalent neighboring nodes in an object model tree |
Family Cites Families (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5231670A (en) * | 1987-06-01 | 1993-07-27 | Kurzweil Applied Intelligence, Inc. | Voice controlled system and method for generating text from a voice controlled input |
US5454062A (en) * | 1991-03-27 | 1995-09-26 | Audio Navigation Systems, Inc. | Method for recognizing spoken words |
US5425128A (en) * | 1992-05-29 | 1995-06-13 | Sunquest Information Systems, Inc. | Automatic management system for speech recognition processes |
US5909666A (en) * | 1992-11-13 | 1999-06-01 | Dragon Systems, Inc. | Speech recognition system which creates acoustic models by concatenating acoustic models of individual words |
US6092043A (en) * | 1992-11-13 | 2000-07-18 | Dragon Systems, Inc. | Apparatuses and method for training and operating speech recognition systems |
US5675819A (en) * | 1994-06-16 | 1997-10-07 | Xerox Corporation | Document information retrieval using global word co-occurrence patterns |
US5651096A (en) * | 1995-03-14 | 1997-07-22 | Apple Computer, Inc. | Merging of language models from two or more application programs for a speech recognition system |
JP4289715B2 (en) * | 1999-04-02 | 2009-07-01 | キヤノン株式会社 | Speech recognition apparatus, speech recognition method, and tree structure dictionary creation method used in the method |
EP1238250B1 (en) * | 1999-06-10 | 2004-11-17 | Infineon Technologies AG | Voice recognition method and device |
DE19942178C1 (en) * | 1999-09-03 | 2001-01-25 | Siemens Ag | Method of preparing database for automatic speech processing enables very simple generation of database contg. grapheme-phoneme association |
US8566102B1 (en) * | 2002-03-28 | 2013-10-22 | At&T Intellectual Property Ii, L.P. | System and method of automating a spoken dialogue service |
WO2012083540A1 (en) * | 2010-12-23 | 2012-06-28 | Nokia Corporation | Method and apparatus for providing token-based classification of device information |
US8498986B1 (en) * | 2012-01-31 | 2013-07-30 | Business Objects Software Ltd. | Classifying data using machine learning |
DK179049B1 (en) * | 2016-06-11 | 2017-09-18 | Apple Inc | Data driven natural language event detection and classification |
WO2019028261A1 (en) * | 2017-08-02 | 2019-02-07 | [24]7.ai, Inc. | Method and apparatus for training of conversational agents |
-
2013
- 2013-03-15 US US13/841,640 patent/US9037464B1/en active Active
-
2015
- 2015-05-18 US US14/715,421 patent/US9740680B1/en active Active
-
2017
- 2017-08-21 US US15/682,374 patent/US10241997B1/en active Active
-
2019
- 2019-03-25 US US16/363,460 patent/US10922488B1/en active Active
-
2021
- 2021-02-12 US US17/175,550 patent/US11809824B1/en active Active
-
2023
- 2023-11-06 US US18/503,051 patent/US20240070392A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US10922488B1 (en) | 2021-02-16 |
US10241997B1 (en) | 2019-03-26 |
US11809824B1 (en) | 2023-11-07 |
US9740680B1 (en) | 2017-08-22 |
US9037464B1 (en) | 2015-05-19 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11809824B1 (en) | Computing numeric representations of words in a high-dimensional space | |
US11954597B2 (en) | Using embedding functions with a deep network | |
US20200372359A1 (en) | Wide and deep machine learning models | |
US11853879B2 (en) | Generating vector representations of documents | |
US10268671B2 (en) | Generating parse trees of text segments using neural networks | |
US20210117801A1 (en) | Augmenting neural networks with external memory | |
US10083169B1 (en) | Topic-based sequence modeling neural networks | |
US9514405B2 (en) | Scoring concept terms using a deep network | |
US11715009B2 (en) | Training neural networks using synthetic gradients | |
CN109074517B (en) | Global normalized neural network | |
US20200226446A1 (en) | Augmenting neural networks with external memory | |
US11675975B2 (en) | Word classification based on phonetic features | |
US20200401896A1 (en) | Generating larger neural networks | |
US10803380B2 (en) | Generating vector representations of documents | |
US10503837B1 (en) | Translating terms using numeric representations | |
CN110678882A (en) | Selecting answer spans from electronic documents using machine learning | |
CN114298004A (en) | Method, apparatus, device, medium, and program product for generating a retended text |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE, INC.;REEL/FRAME:065520/0588Effective date: 20170929Owner name: GOOGLE, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:MIKOLOV, TOMAS;CHEN, KAI;CORRADO, GREGORY S.;AND OTHERS;REEL/FRAME:065499/0013Effective date: 20140917 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |