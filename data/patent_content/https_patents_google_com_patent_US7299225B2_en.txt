US7299225B2 - High performance predicate push-down for non-matching predicate operands - Google Patents
High performance predicate push-down for non-matching predicate operands Download PDFInfo
- Publication number
- US7299225B2 US7299225B2 US10/304,220 US30422002A US7299225B2 US 7299225 B2 US7299225 B2 US 7299225B2 US 30422002 A US30422002 A US 30422002A US 7299225 B2 US7299225 B2 US 7299225B2
- Authority
- US
- United States
- Prior art keywords
- predicate
- operator
- error
- equal
- logic
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
- 238000000034 method Methods 0.000 claims abstract description 32
- 238000004519 manufacturing process Methods 0.000 claims abstract description 25
- 238000005266 casting Methods 0.000 claims abstract description 16
- 238000012545 processing Methods 0.000 claims description 54
- 238000006243 chemical reaction Methods 0.000 description 8
- 230000006870 function Effects 0.000 description 4
- 238000007726 management method Methods 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 238000004590 computer program Methods 0.000 description 3
- 238000011156 evaluation Methods 0.000 description 3
- 238000013500 data storage Methods 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 208000024891 symptom Diseases 0.000 description 2
- 230000008901 benefit Effects 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000008569 process Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2452—Query translation
- G06F16/24528—Standardisation; Simplification
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99932—Access augmentation or optimizing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99934—Query formulation, input preparation, or translation
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99935—Query augmenting and refining, e.g. inexact access
Definitions
- This invention relates in general to database management systems performed by computers, and in particular, to the optimization of queries using a high performance predicate push-down for non-matching predicate operands.
- RDBMS Relational DataBase Management System
- SQL Structured Query Language
- predicates of SQL queries can be evaluated at various stages and the performance of the predicates can be significantly different depending on where and when they are evaluated. Generally speaking, better performance is obtained when the predicate is evaluated at an earlier stage.
- RDBMS attempt to “push down” predicates to a data manager or index manager for better performance. For example, consider a query against a 10,000 row table with predicate P1 whose filter factor is 1%. In the prior art, P1 may be evaluated only after all 10,000 rows are fetched, which results in P1 being evaluated 10,000 times, i.e., once for each row. Alternatively, P1 could be used to determine a search range in a B-tree index, which results in only 100 rows being fetched (i.e., 1% of the rows).
- the operands are “cast” to a common data type, length and CCSID before the comparison takes place.
- the term “cast” in this context refers to a conversion between data types.
- either or both the target column and the input value may be “cast-up” to a common data type before the operator of the predicate is performed.
- One prior art approach is to always cast-up the “smaller” operand to match the “larger” one.
- the cast-up could be performed on the input value, target column, or both.
- the input value “smallint_exp” may be cast-up to “integer,” the data type of the target column “integer_col.”
- each target column “smallint_col” may be cast-up to “integer,” the data type of the input value “integer_exp.”
- both operands maybe cast-up to the data type “decimal(9,3).”
- Casting the SALARY column to “float” results in a data conversion for each row fetched. It would be desirable if, in this example, the data conversion takes place only once for the entire query. This requires that, instead of casting up the SALARY column, the input value “70000.00” be cast-down to “integer,” which works since there is a corresponding value in the integer domain for 70000.00, i.e., 70000. However, this is not a safe conversion in general, since certain floating point numbers may not fall in the range of a 4-byte integer.
- the present invention supports “cast-down,” which allows casts such as “integer” to “smallint,” “char(32)” to “varchar(16),” etc., as well as cast-up.
- the present invention always casts the input value to the data type of the target column, which significantly reduces the overhead involved in data conversions.
- the present invention permits the RDBMS to perform the cast and then to determine from the result whether the cast will succeed or fail. For example, a cast of the string “database” of type “varchar(15)” to type “char(10)” will succeed.
- the present invention discloses a method, apparatus, and article of manufacture for improving the performance of evaluating predicates with non-matching operands by aggressively casting the input value to the data type of the target column before the data of the target column is accessed.
- FIG. 1 illustrates an exemplary computer hardware and software environment that could be used with an embodiment of the present invention
- FIGS. 2 and 3 are flowcharts illustrating a method of optimizing a query in a computer system, the query being performed by the computer system to retrieve data from a database stored on the computer system, according to the preferred embodiment of the present invention.
- FIG. 1 illustrates an exemplary computer hardware and software environment that could be used with an embodiment of the present invention.
- a computer system 100 is comprised of one or more processors connected to one or more data storage devices 102 and 104 , such as disk drives, that store one or more relational databases.
- An interface 106 such as TCP/IPTM, IMS/DB/DCTM, CICSTM, TSOTM, WINDOWSTM or other similar interface, is used to connect a client computer 108 to the computer 100 , in order that client computer 108 may transmit electrical signals to and from the computer system 100 that represent commands for performing various search and retrieval functions, termed queries, against the databases.
- queries conform to the Structured Query Language (SQL) standard, and invoke functions performed by a Relational DataBase Management System (RDBMS).
- the RDBMS comprises the DB2TM product offered by I.B.M. Corporation for the MVSTM, UNIXTM, or WINDOWSTM operating systems.
- DB2TM product offered by I.B.M. Corporation for the MVSTM, UNIXTM, or WINDOWSTM operating systems.
- the RDBMS includes three major components: a Lock Manager module 110 , Systems Services module 112 , and Database Services module 114 .
- the Lock Manager module 110 handles locking services, because the RDBMS treats data as a shared resource, thereby allowing any number of users to access the same data simultaneously, and thus concurrency control is required to isolate users and to maintain data integrity.
- the Systems Services module 112 controls the overall RDBMS execution environment, including managing log data sets 106 , gathering statistics, handling startup and shutdown, and providing management support.
- the Database Services module 114 contains several submodules, including the Relational Database System (RDS) 116 , the Data Manager 118 , and the Index Manager 120 , as well as other components, such as an SQL compiler/interpreter 122 . These submodules support the functions of the SQL language, i.e., definition, access control, retrieval, and update of user and system data.
- RDS Relational Database System
- the Database Services module 114 contains several submodules, including the Relational Database System (RDS) 116 , the Data Manager 118 , and the Index Manager 120 , as well as other components, such as an SQL compiler/interpreter 122 .
- RDS Relational Database System
- SQL SQL compiler/interpreter
- each of the components, modules, and submodules of the RDBMS comprise instructions and/or data, and are embodied in or retrievable from a computer-readable device, medium, signal or carrier, e.g., a memory, a data storage device, a remote device coupled to the computer 100 by a data communications device, etc.
- a computer-readable device, medium, signal or carrier e.g., a memory, a data storage device, a remote device coupled to the computer 100 by a data communications device, etc.
- these instructions and/or data when read, executed, and/or interpreted by the computer 100 , cause the computer 100 to perform the steps necessary to implement and/or use the present invention.
- the present invention may be implemented as a method, apparatus, or article of manufacture using standard programming and/or engineering techniques to produce software, firmware, hardware, or any combination thereof.
- article of manufacture or alternatively, “computer program carrier,” as used herein is intended to encompass a computer program accessible from any computer-readable device, carrier, or media.
- the present invention improves the performance of evaluating predicates with non-matching operands by aggressively casting the input value to the data type of the target column before the data of the target column is accessed.
- C outer is cast to the data type of C inner only once before T inner is accessed. Therefore, no cast is needed on C inner . Consequently, the total number of casts (3000) is dramatically reduced, as compared to the prior art approach.
- the input value is cast to the data type of the target column before accessing the target table.
- the cast could be a cast-up or cast-down.
- a cast-down is more complicated.
- the cast-down could be successful, for example, a cast-down of a 4-byte “integer” value of “1” to a 2-byte “smallint” value of “1”.
- a cast-down could be problematic, due to overflow, underflow, or loss of precision errors.
- the RDBMS detects any type of error during the cast, based on a comparison operator of the predicate and the error symptom, then the RDBMS pre-processes the predicate and replaces it with an appropriately revised predicate. If the revised predicate is “FALSE,” then the target table access is skipped, or if the revised predicate is “TRUE,” then the predicate evaluation is skipped; otherwise, the revised predicate is pushed down to the data manager or index manager.
- a “float” value of 1.0e+0 is considered to be “equal” to “decimal” value 1.000 . . . 0001, 1.000 . . . 0002, . . . , or 1.000 . . . 0009, if the last digit of the “decimal” value in this example is beyond the 15 th digit.
- the approach to solve this problem is to add an extra range predicate that can be pushed down to the Data Manager 118 or Index Manager 120 to screen out the rows of the inner column table before evaluating the original predicate.
- This extra range predicate is indexable, sargable, and highly selective.
- the Index Manager 120 is able to use it to construct very narrow start and stop keys to restrict the range of rows to be retrieved, so that only a few of rows are fetched. The evaluation time of the original predicate would be significantly reduced.
- decimal_col float_col
- decimal_col float_col
- decimal_col float_col
- decimal_col decimal (17,16).
- an indexable and sargable range predicate is added as: decimal_col BETWEEN (CAST (float_col AS DECIMAL) ⁇ ) AND (CAST (float_col AS DECIMAL)+ ⁇ )
- ⁇ is a small constant in the “decimal_col” data type. Since a cast from “float” to “decimal” is a problematic cast, an overflow or underflow error can occur. If an overflow or underflow error occurs, the predicate is handled in the same way, as either Case 1 or Case 2 above.
- FIGS. 2 and 3 are flowcharts illustrating a method of optimizing a query in a computer system, the query being performed by the computer system to retrieve data from a database stored on the computer system, according to the preferred embodiment of the present invention.
- Block 200 represents the RDBMS evaluating the query, wherein the query is comprised of at least one predicate having a first operand comprising an input value, an operator and a second operand comprising a target column.
- Block 202 is a decision block that represents the RDBMS determining whether an attempt is being made to cast-down a “float” input to a “decimal” target column, when the “decimal” target column has a precision greater than 15. If so, control transfers to Block 204 ; otherwise, control transfers to Block 206 .
- Block 204 represents the RDBMS adding a range predicate when casting down a “float” input value to a “decimal” target column, when the “decimal” target column has a precision greater than 15.
- the range predicate is used to construct start and stop keys to restrict a range of rows to be retrieved, so that only a few of the rows are fetched. Thereafter, control transfers to Block 218 .
- Block 206 represents the RDBMS casting down the input value to a data type of the target column before the target column is accessed, when the evaluated query has non-matching first and second operands in the predicate.
- Block 208 is a decision block that represents the RDBMS determining whether an error occurred when the input value is cast-down, wherein the error is selected from a group comprising overflow, underflow, or loss of precision errors. If so, control transfers to Block 206 ; otherwise, control transfers to Block 218 .
- the logic in the following Blocks comprises detecting the error during the cast-down, based on the operator of the predicate and the error, and then processing the predicate, i.e., not accessing the target column when the predicate is false, not evaluating the predicate when the predicate is true, and pushing down the predicate when the predicate is neither true nor false. This logic is described in more detail below.
- Block 212 represents the RDBMS identifying the predicate as false, and not accessing the target column, when an operator of the predicate is an “EQUAL” operator. Thereafter, control transfers to Block 218 .
- Block 214 is a decision block that represents the RDBMS determining whether an operator of the predicate is a “NOT EQUAL” ( ⁇ >) operator. If so, control transfers to Block 216 ; otherwise, control transfers to FIG. 3 .
- Block 216 represents the RDBMS identifying the predicate as true, not evaluating the predicate, and fetching all rows of the target column, when an operator of the predicate is a “NOT EQUAL” operator. Thereafter, control transfers to Block 218 .
- Block 218 represents the RDBMS executing the query.
- Block 300 is a decision block that represents the RDBMS determining whether an overflow error occurred. If so, control transfers to Block 302 ; otherwise, control transfers to Block 310 .
- Block 304 represents the RDBMS identifying the predicate as false when the error is an overflow error and the operator of the predicate is a “GREATER THAN” or “GREATER THAN OR EQUAL TO” operator. Thereafter, control returns to FIG. 2 .
- Block 308 represents the RDBMS identifying the predicate as true when the error is an overflow error and the operator of the predicate is a “LESS THAN” or “LESS THAN OR EQUAL TO” operator. Thereafter, control returns to FIG. 2 .
- Block 310 is a decision block that represents the RDBMS determining whether an underflow error occurred. If so, control transfers to Block 312 ; otherwise, control transfers to Block 320 .
- Block 314 represents the RDBMS identifying the predicate as true when the error is an underflow error and the operator of the predicate is a “GREATER THAN” or “GREATER THAN OR EQUAL TO” operator. Thereafter, control returns to FIG. 2 .
- Block 318 represents the RDBMS identifying the predicate as false when the error is an underflow error and the operator of the predicate is a “LESS THAN” or “LESS THAN OR EQUAL TO” operator. Thereafter, control returns to FIG. 2 .
- Block 320 is a decision block that represents the RDBMS determining whether a loss of precision error occurred. If so, control transfers to Block 322 ; otherwise, control returns to FIG. 2 .
- Block 324 represents the RDBMS rounding down the input value to a data type of the target column when the error is a loss of precision error and the operator of the predicate is a “GREATER THAN” or “LESS THAN OR EQUAL TO” operator. Moreover, this Block represents the RDBMS identifying the predicate as true when the rounding down causes an underflow error and the operator of the predicate is a “GREATER THAN” operator. Further, this Block represents the RDBMS identifying the predicate as false when the rounding down causes an underflow error and the operator of the predicate is a “LESS THAN OR EQUAL TO” operator. Thereafter, control returns to FIG. 2 .
- Block 328 represents the RDBMS rounding up the input value to a data type of the target column when the error is a loss of precision error and the operator of the predicate is a “LESS THAN” or “GREATER THAN OR EQUAL TO” operator. Moreover, this Block represents the RDBMS identifying the predicate as true when the rounding up causes an underflow error and the operator of the predicate is a “GREATER THAN OR EQUAL TO” operator. Further, this Block represents the RDBMS identifying the predicate as false when the rounding up causes an underflow error and the operator of the predicate is a “LESS THAN” operator. Thereafter, control returns to FIG. 2 .
- the present invention discloses a method, apparatus, and article of manufacture for improving the performance of evaluating predicates with non-matching operands by aggressively casting the input value to the data type of the target column before the data of the target column is accessed.
Abstract
Description
-
- “col” represents an inner table column, also known as a target column;
- “exp” represents an input value, which could be a literal value, constant expression, column or column expression; and
- “op” represents a comparison operator, such as =, <>, >, >=, <, <=, etc.
SELECT*FROM EMPLOYEE E WHERE E.SALARY>70000.00
-
- An overflow error occurs if the value of the decimal_col is larger than MAX_SMALLINT (“32767”).
- An underflow error occurs if the value of the decimal_col is smaller than MIN_SMALLINT (“−32768”)
- A loss of precision error occurs when the decimal digits are truncated when cast from “decimal_col” to “smallint.” For example, a loss of precision results when a decimal “123.65” is truncated to “123.”
-
- A. If the operator is “=” (EQUAL), then the predicate is replaced by “FALSE,” and table access is skipped. Example: the predicate comprises “smallint_col=decimal_col,” and the value of the decimal_col is larger than MAX_SMALLINT (“32767”).
- B. If the operator is “<>” (NOT EQUAL), then the predicate is to be replaced by “TRUE, ” predicate evaluation is skipped and all records of target table are fetched. Example: the predicate comprises “smallint_col<>decimal_col,” and the value of the decimal_col is larger than MAX_SMALLINT (“32767”).
- C. If the operator is “>” (GREATER THAN), “>=” (GREATER THAN OR EQUAL TO), “<” (LESS THAN) or “<=” (LESS THAN OR EQUAL TO), then the predicate is replaced by a revised predicate based on the error symptom of the cast.
- 1. Case 1: Overflow Error
- If the operator is “>” or “>=,” then the predicate is replaced by “FALSE.” Example: the predicate comprises “smallint_col>decimal_col,” and the value of decimal_col is larger than MAX_SMALLINT (“32767”).
- If the operator is “<” or “<=,” then the predicate is replaced by “TRUE.” Example: the predicate comprises “smallint_col>decimal_col,” and the value of the decimal_col is larger than MAX_SMALLINT (“32767”).
- 2. Case 2: Underflow Error
- If the operator is “>” or “>=,” then the predicate is replaced by “TRUE.” Example: the predicate comprises “smallint_col>decimal_col,” and the value of decimal_col is smaller than MIN_SMALLINT (“−32768”).
- If the operator is “<” or “<=,” then the predicate is replaced by “FALSE.” Example: the predicate comprises “smallint_col<decimal_col,” and the value of decimal_col is smaller than MIN_SMALLINT (“−32768”).
- 3. Case 3: Loss of Precision Error
- If the operator is “>” or “<=,” then the input value is rounded down to the data type of the target column. If an underflow error occurs during the round down, then the predicate is handled in the same way as Case 2 above. Instead of the original predicate, the revised predicate is pushed down to the data manager or index manager. Example: the predicate is comprised of “smallint_col>decimal_col(10,2),” and the “decimal” value is cast to “smallint.”
- If the input decimal value is “123.65,” then a loss of precision error occurs due to truncation. In this case, the input value is rounded down to “123,” and the “smallint” value “123” is used as the input value to compare with “smallint_col.”
- If the input decimal value is “−32768.3,” then it is rounded down to “−32769,” which is smaller than MIN_SMALLINT (−32768). The predicate is replaced by “TRUE” if the operator is “>,” or “FALSE” if the operator is “<=.”
- If the operator is “<” or “>=,” then the input value is rounded up to the data type of the target column. If an overflow error occurs during the round up, then the predicate is handled in the same way as Case 1 above. Instead of the original predicate, the revised predicate is pushed down to the data manager or index manager. Example: the predicate is comprised of “smallint_col<decimal_col,” and the “decimal” value is cast to “smallint.”
- If the input decimal value is “123.65,” then a loss of precision error occurs due to truncation. In this case, the input value is rounded up to “124” and the “smallint” value “124” is used as the input value to compare with the “smallint_col.”
- If the input decimal value is “32767.3,” then it is rounded up to “32768,” which is larger than MAX_SMALLINT (32767). The predicate is replaced by “TRUE” if operator is “<” or “FALSE” if operator is “>=.”
- 1. Case 1: Overflow Error
decimal_col BETWEEN (CAST (float_col AS DECIMAL)−δ) AND
(CAST (float_col AS DECIMAL)+δ)
Claims (60)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/304,220 US7299225B2 (en) | 2002-11-26 | 2002-11-26 | High performance predicate push-down for non-matching predicate operands |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/304,220 US7299225B2 (en) | 2002-11-26 | 2002-11-26 | High performance predicate push-down for non-matching predicate operands |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040103082A1 US20040103082A1 (en) | 2004-05-27 |
US7299225B2 true US7299225B2 (en) | 2007-11-20 |
Family
ID=32325157
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/304,220 Expired - Lifetime US7299225B2 (en) | 2002-11-26 | 2002-11-26 | High performance predicate push-down for non-matching predicate operands |
Country Status (1)
Country | Link |
---|---|
US (1) | US7299225B2 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090083233A1 (en) * | 2005-07-06 | 2009-03-26 | International Business Machines Corporation | System and article of manufacture for efficient evaluation of index screening predicates |
US20100241646A1 (en) * | 2009-03-18 | 2010-09-23 | Aster Data Systems, Inc. | System and method of massively parallel data processing |
US20210165892A1 (en) * | 2018-12-06 | 2021-06-03 | International Business Machines Corporation | Sargable evaluation of queries submitted to an encrypted database |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120117054A1 (en) * | 2010-11-08 | 2012-05-10 | Lakshmikant Shrinivas | Query Analysis in a Database |
US9846712B2 (en) * | 2015-04-25 | 2017-12-19 | International Business Machines Corporation | Index-only multi-index access |
US10223419B2 (en) * | 2015-07-16 | 2019-03-05 | Futurewei Technologies, Inc. | System and method for predicate pushdown and partition pruning in a distributed database |
Citations (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5386568A (en) * | 1992-12-01 | 1995-01-31 | Yamaha Corporation | Apparatus and method for linking software modules |
US6032143A (en) | 1997-06-30 | 2000-02-29 | International Business Machines Corporation | Evaluation of existential and universal subquery in a relational database management system for increased efficiency |
US6088524A (en) | 1995-12-27 | 2000-07-11 | Lucent Technologies, Inc. | Method and apparatus for optimizing database queries involving aggregation predicates |
US20010037322A1 (en) | 2000-04-28 | 2001-11-01 | Lindsay Bruce G. | Efficient index-data fetch via callback for table data |
US20010051949A1 (en) | 1997-05-09 | 2001-12-13 | Carey Michael J. | System, method, and program for object building in queries over object views |
US6345266B1 (en) | 1998-12-23 | 2002-02-05 | Novell, Inc. | Predicate indexing for locating objects in a distributed directory |
US20020016907A1 (en) | 1998-12-31 | 2002-02-07 | Grochowski Edward T. | Method and apparatus for conditionally executing a predicated instruction |
US6381616B1 (en) | 1999-03-24 | 2002-04-30 | Microsoft Corporation | System and method for speeding up heterogeneous data access using predicate conversion |
US6385603B1 (en) | 1999-06-14 | 2002-05-07 | International Business Machines Corporation | Joined table expression optimization by query transformation |
US20020069193A1 (en) | 2000-12-06 | 2002-06-06 | Beavin Thomas A. | Optimization of SQL queries using filtering predicates |
US20020078015A1 (en) | 2000-11-22 | 2002-06-20 | Sybase, Inc. | Database system with methodogy providing faster n-ary nested loop joins |
US20020112148A1 (en) | 2000-12-15 | 2002-08-15 | Perry Wang | System and method for executing predicated code out of order |
US6438541B1 (en) | 1999-02-09 | 2002-08-20 | Oracle Corp. | Method and article for processing queries that define outer joined views |
US20020120620A1 (en) | 2000-11-30 | 2002-08-29 | Victor Chan | Method and system for composing a query for a database and traversing the database |
US6578090B1 (en) * | 1998-06-08 | 2003-06-10 | Ricoh Company, Ltd. | System and method for interfacing two modules supporting various applications |
US20030135758A1 (en) * | 2001-07-19 | 2003-07-17 | Turner Elliot B. | System and method for detecting network events |
US6622138B1 (en) * | 2000-09-06 | 2003-09-16 | Oracle International Corporation | Method and apparatus for optimizing computation of OLAP ranking functions |
US20030187858A1 (en) * | 2002-04-02 | 2003-10-02 | Sybase, Inc. | Database system providing methodology for acceleration of queries involving functional expressions against columns having enumerated storage |
US6748377B1 (en) | 2000-10-18 | 2004-06-08 | International Business Machines Corporation | Facilitating query pushdown in a multi-tiered database environment |
US20040111713A1 (en) * | 2002-12-06 | 2004-06-10 | Rioux Christien R. | Software analysis framework |
US20040128657A1 (en) * | 2002-12-31 | 2004-07-01 | Rakesh Ghiya | Estimation of type-cast sets |
US20040268309A1 (en) * | 2003-06-26 | 2004-12-30 | Microsoft Corporation | Software development infrastructure |
US20050015673A1 (en) * | 2003-06-27 | 2005-01-20 | Microsoft Corporation | Type system for representing and checking consistency of heterogeneous program components during the process of compilation |
US20050039124A1 (en) * | 2003-07-24 | 2005-02-17 | International Business Machines Corporation | Applying abstraction to object markup definitions |
US20050097523A1 (en) * | 2003-11-05 | 2005-05-05 | Kabushiki Kaisha Toshiba | System for compiling source programs into machine language programs, a computer implemented method for the compiling and a computer program product for the compiling within the computer system |
US20050097084A1 (en) * | 2003-10-31 | 2005-05-05 | Balmin Andrey L. | XPath containment for index and materialized view matching |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US112148A (en) * | 1871-02-28 | Improvement in ships windlasses | ||
US1607A (en) * | 1840-05-19 | Island | ||
US78015A (en) * | 1868-05-19 | Thomas l | ||
US69193A (en) * | 1867-09-24 | Julius d re us ike | ||
US51949A (en) * | 1866-01-09 | Improved apparatus for raising dough | ||
US37322A (en) * | 1863-01-06 | Improvement in machines for pulverizing quartz | ||
US120620A (en) * | 1871-11-07 | Improvement in fruit-baskets |
-
2002
- 2002-11-26 US US10/304,220 patent/US7299225B2/en not_active Expired - Lifetime
Patent Citations (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5386568A (en) * | 1992-12-01 | 1995-01-31 | Yamaha Corporation | Apparatus and method for linking software modules |
US6088524A (en) | 1995-12-27 | 2000-07-11 | Lucent Technologies, Inc. | Method and apparatus for optimizing database queries involving aggregation predicates |
US20010051949A1 (en) | 1997-05-09 | 2001-12-13 | Carey Michael J. | System, method, and program for object building in queries over object views |
US6032143A (en) | 1997-06-30 | 2000-02-29 | International Business Machines Corporation | Evaluation of existential and universal subquery in a relational database management system for increased efficiency |
US6578090B1 (en) * | 1998-06-08 | 2003-06-10 | Ricoh Company, Ltd. | System and method for interfacing two modules supporting various applications |
US6345266B1 (en) | 1998-12-23 | 2002-02-05 | Novell, Inc. | Predicate indexing for locating objects in a distributed directory |
US20020016907A1 (en) | 1998-12-31 | 2002-02-07 | Grochowski Edward T. | Method and apparatus for conditionally executing a predicated instruction |
US6438541B1 (en) | 1999-02-09 | 2002-08-20 | Oracle Corp. | Method and article for processing queries that define outer joined views |
US6381616B1 (en) | 1999-03-24 | 2002-04-30 | Microsoft Corporation | System and method for speeding up heterogeneous data access using predicate conversion |
US6385603B1 (en) | 1999-06-14 | 2002-05-07 | International Business Machines Corporation | Joined table expression optimization by query transformation |
US20010037322A1 (en) | 2000-04-28 | 2001-11-01 | Lindsay Bruce G. | Efficient index-data fetch via callback for table data |
US6622138B1 (en) * | 2000-09-06 | 2003-09-16 | Oracle International Corporation | Method and apparatus for optimizing computation of OLAP ranking functions |
US6748377B1 (en) | 2000-10-18 | 2004-06-08 | International Business Machines Corporation | Facilitating query pushdown in a multi-tiered database environment |
US20020078015A1 (en) | 2000-11-22 | 2002-06-20 | Sybase, Inc. | Database system with methodogy providing faster n-ary nested loop joins |
US20020120620A1 (en) | 2000-11-30 | 2002-08-29 | Victor Chan | Method and system for composing a query for a database and traversing the database |
US20020069193A1 (en) | 2000-12-06 | 2002-06-06 | Beavin Thomas A. | Optimization of SQL queries using filtering predicates |
US20020112148A1 (en) | 2000-12-15 | 2002-08-15 | Perry Wang | System and method for executing predicated code out of order |
US20030135758A1 (en) * | 2001-07-19 | 2003-07-17 | Turner Elliot B. | System and method for detecting network events |
US20030187858A1 (en) * | 2002-04-02 | 2003-10-02 | Sybase, Inc. | Database system providing methodology for acceleration of queries involving functional expressions against columns having enumerated storage |
US20040111713A1 (en) * | 2002-12-06 | 2004-06-10 | Rioux Christien R. | Software analysis framework |
US20040128657A1 (en) * | 2002-12-31 | 2004-07-01 | Rakesh Ghiya | Estimation of type-cast sets |
US20040268309A1 (en) * | 2003-06-26 | 2004-12-30 | Microsoft Corporation | Software development infrastructure |
US20050015673A1 (en) * | 2003-06-27 | 2005-01-20 | Microsoft Corporation | Type system for representing and checking consistency of heterogeneous program components during the process of compilation |
US20050039124A1 (en) * | 2003-07-24 | 2005-02-17 | International Business Machines Corporation | Applying abstraction to object markup definitions |
US20050097084A1 (en) * | 2003-10-31 | 2005-05-05 | Balmin Andrey L. | XPath containment for index and materialized view matching |
US20050097523A1 (en) * | 2003-11-05 | 2005-05-05 | Kabushiki Kaisha Toshiba | System for compiling source programs into machine language programs, a computer implemented method for the compiling and a computer program product for the compiling within the computer system |
Non-Patent Citations (5)
Title |
---|
"C How To Program" by H.M. Deitel/P.J. Deitel, 2<SUP>nd </SUP>edition, Prentice Hall 1994, 1992, pp. 61, 73-74, 122-125, 158, and 699-700. * |
"Coping With Type Casts in C" by Michael Siff, Satish Chandra, Thomas Ball, Krishna Kunchithapadam, and Thomas Reps, Mathematics Department, Sarah Lawrence Colleg, Bronxville, NY 10708-5999; Bell Laboratories, Lucent Technologies, Naperville, IL 60566. * |
"ORACLE7 The Complete Reference" by George Koch, Covers Versions 6 & 7, pp. 147, 150-151, 738, 762, and 896-897. * |
"Type-Checking OQL Queries in the ODMG Type Systems" by Suad Alagic, ACM transactions on Database Systems, vol. 24, No. 3, Sep. 1999, pp. 319-360. * |
W. Zhang et al., "Speeding up Heterogeneous Data Access by Converting and Pushing down String Comparisons," IEEE, 1999, 3 pages. |
Cited By (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090083233A1 (en) * | 2005-07-06 | 2009-03-26 | International Business Machines Corporation | System and article of manufacture for efficient evaluation of index screening predicates |
US7979440B2 (en) | 2005-07-06 | 2011-07-12 | International Business Machines Corporation | System and article of manufacture for efficient evaluation of index screening predicates |
US20100241646A1 (en) * | 2009-03-18 | 2010-09-23 | Aster Data Systems, Inc. | System and method of massively parallel data processing |
US7966340B2 (en) | 2009-03-18 | 2011-06-21 | Aster Data Systems, Inc. | System and method of massively parallel data processing |
US8903841B2 (en) | 2009-03-18 | 2014-12-02 | Teradata Us, Inc. | System and method of massively parallel data processing |
US20210165892A1 (en) * | 2018-12-06 | 2021-06-03 | International Business Machines Corporation | Sargable evaluation of queries submitted to an encrypted database |
US11042650B2 (en) * | 2018-12-06 | 2021-06-22 | International Business Machines Corporation | Sargable query-predicate evaluation for encrypted databases |
US11620392B2 (en) * | 2018-12-06 | 2023-04-04 | International Business Machines Corporation | Sargable evaluation of queries submitted to an encrypted database |
Also Published As
Publication number | Publication date |
---|---|
US20040103082A1 (en) | 2004-05-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6581205B1 (en) | Intelligent compilation of materialized view maintenance for query processing systems | |
US6571233B2 (en) | Optimization of SQL queries using filtering predicates | |
US6098075A (en) | Deferred referential integrity checking based on determining whether row at-a-time referential integrity checking would yield the same results as deferred integrity checking | |
US5930793A (en) | Performance optimization in a heterogeneous, distributed database environment | |
US5615361A (en) | Exploitation of uniqueness properties using a 1-tuple condition for the optimization of SQL queries | |
US6128610A (en) | Index with entries that store the key of a row and all non-key values of the row | |
US5548754A (en) | Optimization of SQL queries using early-out join transformations | |
US7836022B2 (en) | Reduction of join operations when archiving related database tables | |
JP3297403B2 (en) | Method and apparatus for query optimization | |
US5778354A (en) | Database management system with improved indexed accessing | |
US6438538B1 (en) | Data replication in data warehousing scenarios | |
US6119128A (en) | Recovering different types of objects with one pass of the log | |
US5845274A (en) | Computer program product for avoiding complete index tree traversals in sequential and almost sequential index probes | |
US6167399A (en) | Join index for relational databases | |
US6343286B1 (en) | Efficient technique to defer large object access with intermediate results | |
EP3751426A1 (en) | System and method for migration of a legacy datastore | |
US20140095443A1 (en) | Archiving Data in Database Management Systems | |
US6366902B1 (en) | Using an epoch number to optimize access with rowid columns and direct row access | |
US9471617B2 (en) | Schema evolution via transition information | |
US20080040334A1 (en) | Operation of Relational Database Optimizers by Inserting Redundant Sub-Queries in Complex Queries | |
US6285994B1 (en) | Method and system for efficiently searching an encoded vector index | |
US7979440B2 (en) | System and article of manufacture for efficient evaluation of index screening predicates | |
US20070130115A1 (en) | Optimizing a query that includes a large in list | |
US7299225B2 (en) | High performance predicate push-down for non-matching predicate operands | |
US8041726B2 (en) | System for executing a query having multiple distinct key columns |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:TRAN, BRIAN T.;CHENG, HSIUYING Y.;GUO, SHUANGLIN;AND OTHERS;REEL/FRAME:013769/0712;SIGNING DATES FROM 20030204 TO 20030205 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |