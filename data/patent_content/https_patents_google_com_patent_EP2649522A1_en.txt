EP2649522A1 - Method for providing an application as a library in a virtual machine - Google Patents
Method for providing an application as a library in a virtual machineInfo
- Publication number
- EP2649522A1 EP2649522A1 EP11794119.5A EP11794119A EP2649522A1 EP 2649522 A1 EP2649522 A1 EP 2649522A1 EP 11794119 A EP11794119 A EP 11794119A EP 2649522 A1 EP2649522 A1 EP 2649522A1
- Authority
- EP
- European Patent Office
- Prior art keywords
- application
- virtual machine
- native
- code
- compiled
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000000034 method Methods 0.000 title claims abstract description 132
- 230000001131 transforming effect Effects 0.000 claims abstract description 6
- 230000006870 function Effects 0.000 claims description 14
- 230000007246 mechanism Effects 0.000 claims description 9
- 230000015654 memory Effects 0.000 claims description 9
- 238000004590 computer program Methods 0.000 claims description 8
- 238000004891 communication Methods 0.000 claims description 4
- 238000013507 mapping Methods 0.000 claims description 4
- 230000008569 process Effects 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 230000008901 benefit Effects 0.000 description 4
- 230000003068 static effect Effects 0.000 description 4
- 238000004458 analytical method Methods 0.000 description 3
- 238000005457 optimization Methods 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 239000000725 suspension Substances 0.000 description 2
- 230000001133 acceleration Effects 0.000 description 1
- 230000003044 adaptive effect Effects 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000010586 diagram Methods 0.000 description 1
- 238000003780 insertion Methods 0.000 description 1
- 230000037431 insertion Effects 0.000 description 1
- 238000009434 installation Methods 0.000 description 1
- 230000003993 interaction Effects 0.000 description 1
- 238000004377 microelectronic Methods 0.000 description 1
- 230000000135 prohibitive effect Effects 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/41—Compilation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/547—Remote procedure calls [RPC]; Web services
Definitions
- the invention relates to the compilation and management of the application compilation intended to be implemented on a communication terminal.
- a communication terminal may be a computer, a telephone, a programmable personal assistant, etc.
- the invention does not have these disadvantages of the prior art.
- the invention relates to a method of providing an application via a virtual machine.
- such a method comprises a step of compiling an application written in a source code or an intermediate code into a native application for a platform considered and a step of transforming said compiled native application into a library, said library being made available to said virtual machine.
- the application can be used transparently by the virtual machine using adapted interfaces while retaining the optimizations made during compilation in native code. It is thus not necessary to modify the implementation of the virtual machine or the application. Indeed, the invention makes it possible not to break the virtual machine or the application.
- the technique of the invention is transparent.
- the various steps of the method according to the invention are implemented by software or computer program, this software comprising software instructions intended to be executed by a data processor of a relay module according to the invention. invention and being designed to control the execution of the different steps of this method.
- the invention is also directed to a program that can be executed by a computer or a data processor, which program includes instructions for controlling the execution of the steps of a method as mentioned above.
- This program can use any programming language, and be in the form of source code, object code, or intermediate code between source code and object code, such as in a partially compiled form, or in any other form desirable shape.
- the invention also relates to a data carrier readable by a data processor, and comprising instructions of a program as mentioned above.
- the information carrier may be any entity or device capable of storing the program.
- the medium may comprise storage means, such as a ROM, for example a CD ROM or a microelectronic circuit ROM, or a magnetic recording medium, for example a floppy disk or a disk. hard.
- the information medium may be a transmissible medium such as an electrical or optical signal, which may be conveyed via an electrical or optical cable, by radio or by other means.
- the program according to the invention can be downloaded in particular on an Internet type network.
- the information carrier may be an integrated circuit in which the program is incorporated, the circuit being adapted to execute or to be used in the execution of the method in question.
- the invention is implemented by means of software and / or hardware components.
- module may correspond in this document as well to a software component, a hardware component or a set of hardware and software components.
- a software component corresponds to one or more computer programs, one or more subroutines of a program, or more generally to any element of a program or software capable of implementing a function or a program. set of functions, as described below for the module concerned.
- Such a software component is executed by a data processor of a physical entity (terminal, server, etc.) and is capable of accessing the hardware resources of this physical entity (memories, recording media, communication buses, electronic cards input / output, user interfaces, etc.).
- a hardware component corresponds to any element of a hardware set (or hardware) able to implement a function or a set of functions, as described below for the module concerned. It may be a hardware component that is programmable or has an integrated processor for executing software, for example an integrated circuit, a smart card, a memory card, an electronic card for executing a firmware ( firmware), etc.
- Figure 1 shows a block diagram of the method of the invention
- FIG. 2 illustrates the various steps that take place during compilation, according to one embodiment of the invention
- FIG. 3 describes a provisioning device according to the invention.
- the general principle of the invention is to accelerate an application, which is initially an application that runs via a virtual machine (so an application that can suffer as a rule performance problems) by transforming this application into a native library - that is to say a library written in machine language or in binary language which is therefore directly understandable by the machine.
- a native library - that is to say a library written in machine language or in binary language which is therefore directly understandable by the machine.
- This technique can be implemented in all operating systems that operate a virtual machine.
- This technique can be implemented more specifically with Java TM applications on the Windows TM operating system or on the Linux TM operating system.
- the invention comprises a step of compiling the application (whether in source code or intermediate code) into a native application (that is to say an application that includes own code instructions to the system on which it runs).
- a native application that is to say an application that includes own code instructions to the system on which it runs.
- the invention also comprises a step of transforming said compiled native application into a library, said library being made available to said virtual machine.
- the compilation step which delivers the native code of the Application, includes in other steps:
- a step of analyzing said source code of said application delivering at least one set of objects of said application and at least one set of variables of said application, an object of said set of objects comprising at least one associated method;
- This last stage of creation of the native code is carried out by inserting in the native code in addition to the result of the compilation code of origin native code, the structures of data and the native code necessary for the mapping of the methods and the symbols, the execution primers (stub).
- FIG. 3 an embodiment of a delivery device according to the invention is presented.
- FIG. 3 schematically represents an exemplary structure of a delivery device according to one embodiment of the invention.
- the provisioning device comprises a memory 31 constituted by a buffer memory, a processing unit 32, equipped by example of a microprocessor and RAM, and driven by the computer program 33, implementing a method of provision according to the invention.
- the code instructions of the computer program 33 are for example loaded into a memory before being executed by the processor of the processing unit 32.
- microprocessor the random access memory
- computer program cooperate together and form the means for implementing the method of the invention in this embodiment.
- hardware specific processing modules may be implemented to implement the invention.
- the invention has a technology for accelerating an application, a library, a service or any other program running on a platform such as for example Android TM (hereinafter the term is used).
- a platform such as for example Android TM (hereinafter the term is used).
- the resulting technology of the invention can be embodied in the form of a computer program executable by an Android TM platform in connection with a virtual machine.
- This executable computer program is subsequently named "Bookstore”.
- This library consists of a "Runtime” part that takes care of the interfacing with the virtual machine, and a "Program” part that corresponds to the compilation of the application code and implements the functionalities of the application. application.
- the method of the invention compiles the application in native code, then makes it a library offering the same functionality.
- this library can be loaded with two different techniques.
- the first technique is to load the library by the Application itself, that is to say by a non-compiled part of the Application that is interpreted by the virtual machine and that causes the loading of the Library or average an adequate system library call (for example for the Dalvik virtual machine, the "java.lang.System.loadLibrary" method).
- the second technique is to use the system included in the terminal and loaded at the start thereof. In this last case, all the applications of the terminal benefit from the acceleration of this library.
- the bookseller is accompanied by a link file which allows the original Java methods to be matched, each being represented by their full name (name of the packet, followed by the names of the classes containing them, then the name of the file). the method with the type of these encoded parameters) and the compiled code (that is to say the code contained in the library represented by a symbol name) realizing the same functionality.
- This file is used during the initialization of the Librarian.
- a naming convention makes it possible to map the original Java methods to the compiled code (that is to say the code contained in the library represented by a symbol) performing the same functionality in an algorithmic manner.
- It can be an internal identifier of the virtual machine.
- the method index in the DEX (Dalvik Executable) file that is compatible with a Dalvik virtual machine can be used as a method identifier to retrieve a name. symbol in the Bookseller. At an index 1, the symbol A is matched to an index 2 the symbol B, and so on. Any bijective encoding of this internal symbol name information is possible.
- the bookseller obtained by the subject of the invention is compatible with all the characteristics of the Dalvik virtual machine (dynamic loading of classes, JNI code, garbage collector), exception, etc. Moreover the Bookseller obtained by the object of the invention is non-intrusive in the machine virtual Dalvik since it reuses the internal methods of the Dalvik virtual machine, as well as its algorithms.
- the application compiled by the method of the invention uses the JNI call convention. This is a superset of the C call convention and is therefore efficient.
- the JNI calling convention is an over-all of the C calling convention mainly because it only imposes an additional special naming for the function names and the passing of an additional parameter representing the JNI environment. Therefore the compiled Bookseller can effectively invoke native JNI code since it uses the same calling convention.
- the Librarian compiled by the method of the invention could also use the calling convention of the Dalvik virtual machine. This one is not compatible with the calling convention C, therefore if one wishes to use it in an optimal way, the convention of call of the virtual machine Dalvik must be integrated in the compiler which is used to build the Compiled Library.
- the "LLVM" compiler allows, for example, to easily define its own calling convention and thus generate a code that is compatible with the virtual machine and that is more efficient.
- An alternative to this technique is to use an algorithmic mapping between the name of the Java method and the symbol corresponding to the compiled code.
- each invocation coming from a code not compiled by the method object of the invention must invoke the "stub" (the primer in French, see section “Stub” 5.5.) corresponding to this method. Concretely, it is to indicate by a flag that the method is native, and to inform the function pointer on this "stub".
- the virtual machine wants to invoke the compiled method, it invokes the stub that will transform the call convention of the virtual machine to the calling convention of the compiled method (eg J).
- the method of the invention if it uses the JM calling convention, all the invocations of the Dalvik virtual machine to the compiled code use the algorithm to invoke a JNI method. This algorithm is sometimes considered not always optimal because the Dalvik VM must analyze the signature of the invoked method to determine how to pass the parameters to the method and those at each invocation.
- the runtime object of the invention generates a stub for each method it compiles, because it knows, offline, how the parameters must be passed.
- This stub is invoked by the Dalvik virtual machine, then the stub invokes the compiled method by performing an optimal parameter passing since the analysis of the signature is no longer necessary during the execution.
- the fields of instances (or objects) and static fields are essential notions and extremely used in the Java language. Access to these instance fields and static fields uses the same algorithms as the Dalvik VM to ensure object compatibility. Compatibility is important because objects are accessed by both uncomplicated and compiled methods. These algorithms (in the form of specific native code) are included in the code generated by the object method of the invention in order to obtain optimal performance.
- Instance fields are accessed by adding an "offset" offset to the instance address while static fields are accessed directly by their address.
- the linkage section (5.9) describes the possibilities for managing these offsets and addresses.
- method invocation uses the algorithms of the Dalvik VM to ensure object compatibility. These algorithms are also included in the code compiled by the object method of the invention in order to obtain optimal performance.
- the method according to the invention makes it possible to optimize certain invocations when the invoked method can be determined offline and when the method invoked is also compiled.
- the compilation method finds that an invocation is carried out in a constant way to a given location of the code. For example, this is the case for an invocation which is not of virtual type (hence of static type or a private method) or can not be redefined (method or final class of Java language).
- These invocations can then be replaced by a direct invocation, that is to say a simple function call "C" compiled in the library.
- the invocation algorithms of the Dalvik VM can use addresses or offsets to represent the invoked methods.
- the "Linkage” section describes the possibilities for managing offsets and addresses.
- the method invocation and field access algorithms use offsets and / or addresses to represent the fields and methods used.
- the method which is the subject of the invention offers three possibilities of managing these addresses and its offsets:
- the value of the offset used to represent a method or a field is constant from one execution to another.
- the method which is the subject of the invention can therefore recover their value by performing a first execution of the application and then saving them in a file. This file is then directly used during the compilation of the optimized application in order to offer a maximum opportunity for optimizations.
- These offsets can also be obtained by applying the same algorithms as the Dalvik virtual machine, but off-line and thus avoid the first run to recover these offsets.
- the method object of the invention adds a global variable allowing to save each address representing a method or a field used by the application.
- These global variables are initialized when starting the optimized application by querying the Dalvik VM to obtain the value of these addresses. Subsequently, the compiled code uses these variables without re-querying the Dalvik virtual machine. It is also possible to use these global variables to save the value of the offsets representing a method or a field and not to use the first case.
- JNI native code compatibility with the garbage collector of the Dalvik virtual machine is ensured by using a table of object references imported into the native world.
- the Garbage Collector can in a secure way, be triggered in parallel, it is sufficient to scan this table during its phase of determining root references.
- this table is updated according to the imported references.
- the compiled code can make use of the object references as it wishes without having to maintain a table.
- the compiled code adds the references of living objects in this table, because both at the beginning of the method execution (mechanism described at the beginning of the section), that while invoking a method interpreted, that during object creation, the Garbage Collector can fire.
- the compiler calculates the live variables potentially containing references. It then issues a series of statements that add their contents (the contents of the live variables) to the local reference table of the Dalvik VM. Note that it knows the maximum of the living variables that it will add during the life of the method, and thus, it can generate a check of the available space in the table at the beginning of the execution of the method.
- the compiler can insert a possible suspension point for the Garbage Collector.
- This suspension point is a point in the program where the garbage collector is allowed to run. For this, it generates code sequentially:
- the method of the invention uses a less expensive mechanism compatible with the Dalvik virtual machine. Indeed, this one has a field in its space TLS (Thread Local Storage) containing the Java object which is launched through an exception.
- the method of the invention comprises the insertion of code which makes it possible, when an exception is thrown in the compiled code, to assign this field with the reference of the object to be launched and then to connect to the code dealing with this exception ( either the default try / catch block or the try / catch block defined in the compiled method handling this exception). If the method returns to the interpreter of the Dalvik virtual machine, it will check if there is a pending exception, and perform the appropriate processing.
- the method of the invention inserts during compilation, in each method, a default try / catch encompassing all the code of the method, and whose processing is a simple return method. If the method must return a value, the value returns an arbitrary value. Alternatively, this default try / catch mechanic can be replaced directly by a return to all code places plugging into this default try / catch.
- the method according to the invention also inserts at the end of the compiled method, for each try / catch block encountered in this method, a label followed by a code which decodes according to the type of the exception object (corresponding to the type of kite blocks catch of the same try), and which carries out the adequate treatment associated with this catch. It adds a code that branches to the upper try / catch (ie the closer) if the decoding based on the type of the object did not find a corresponding type.
- the object method of the invention generates code that checks after each instruction that can potentially trigger or propagate an exception (throw, invocation, table access, ...) if there is a pending exception. If so, the method according to the invention inserts a branch to the label corresponding to the try / catch block closest to the invocation or the default try / catch block if none is defined in the compiled method .
Abstract
Description
Claims
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
FR1060148 | 2010-12-06 | ||
PCT/EP2011/071981 WO2012076556A1 (en) | 2010-12-06 | 2011-12-06 | Method for providing an application as a library in a virtual machine |
Publications (2)
Publication Number | Publication Date |
---|---|
EP2649522A1 true EP2649522A1 (en) | 2013-10-16 |
EP2649522B1 EP2649522B1 (en) | 2020-04-01 |
Family
ID=45315777
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP11794119.5A Active EP2649522B1 (en) | 2010-12-06 | 2011-12-06 | Method for providing an application as a library in a virtual machine |
Country Status (3)
Country | Link |
---|---|
US (1) | US9047097B2 (en) |
EP (1) | EP2649522B1 (en) |
WO (1) | WO2012076556A1 (en) |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2014164987A1 (en) * | 2013-03-12 | 2014-10-09 | Bluebox Security Inc. | Methods for dynamic mobile application behavior modification subject to a behavior policy |
US10255158B2 (en) * | 2013-10-15 | 2019-04-09 | Oracle International Corporation | Monitoring and diagnostics of business transaction failures |
US9448827B1 (en) * | 2013-12-13 | 2016-09-20 | Amazon Technologies, Inc. | Stub domain for request servicing |
US9626171B2 (en) | 2015-07-24 | 2017-04-18 | Oracle International Corporation | Composing a module system and a non-module system |
US10078497B2 (en) | 2015-07-24 | 2018-09-18 | Oracle International Corporation | Bridging a module system and a non-module system |
US10104090B2 (en) * | 2015-08-25 | 2018-10-16 | Oracle International Corporation | Restrictive access control for modular reflection |
US10191753B2 (en) | 2016-03-30 | 2019-01-29 | Oracle International Corporation | Generating verification metadata and verifying a runtime type based on verification metadata |
US10394528B2 (en) | 2016-03-30 | 2019-08-27 | Oracle International Corporation | Returning a runtime type loaded from an archive in a module system |
US10387142B2 (en) | 2016-09-16 | 2019-08-20 | Oracle International Corporation | Using annotation processors defined by modules with annotation processors defined by non-module code |
US10360008B2 (en) | 2016-09-16 | 2019-07-23 | Oracle International Corporation | Metadata application constraints within a module system based on modular encapsulation |
US10848410B2 (en) | 2017-03-29 | 2020-11-24 | Oracle International Corporation | Ranking service implementations for a service interface |
US10831456B1 (en) | 2019-05-31 | 2020-11-10 | The Mathworks, Inc. | External code integrations within a computing environment |
Family Cites Families (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5408665A (en) | 1993-04-30 | 1995-04-18 | Borland International, Inc. | System and methods for linking compiled code with extended dictionary support |
US6066181A (en) | 1997-12-08 | 2000-05-23 | Analysis & Technology, Inc. | Java native interface code generator |
US6223335B1 (en) * | 1998-12-09 | 2001-04-24 | Sun Microsystems, Inc. | Platform independent double compare and swap operation |
US6523168B1 (en) * | 1999-07-01 | 2003-02-18 | International Business Machines Corporation | Reduction of object creation during string concatenation and like operations that utilize temporary data storage |
US6834391B2 (en) * | 2000-11-28 | 2004-12-21 | Sun Microsystems, Inc. | Method and apparatus for automated native code isolation |
JP2002169696A (en) * | 2000-12-04 | 2002-06-14 | Mitsubishi Electric Corp | Data processing apparatus |
US6691301B2 (en) * | 2001-01-29 | 2004-02-10 | Celoxica Ltd. | System, method and article of manufacture for signal constructs in a programming language capable of programming hardware architectures |
US20030033588A1 (en) * | 2001-01-29 | 2003-02-13 | John Alexander | System, method and article of manufacture for using a library map to create and maintain IP cores effectively |
US6961932B2 (en) * | 2001-08-15 | 2005-11-01 | Microsoft Corporation | Semantics mapping between different object hierarchies |
US7155702B2 (en) * | 2001-09-13 | 2006-12-26 | Axalto Sa | Interface and stub generation for code distribution and synthesis |
US7024663B2 (en) * | 2002-07-10 | 2006-04-04 | Micron Technology, Inc. | Method and system for generating object code to facilitate predictive memory retrieval |
US7346897B2 (en) * | 2002-11-20 | 2008-03-18 | Purenative Software Corporation | System for translating programming languages |
US20050080813A1 (en) * | 2003-10-14 | 2005-04-14 | Xiaohua Shi | Methods and apparatus to analyze escape analysis of an application |
US7657881B2 (en) * | 2004-12-21 | 2010-02-02 | Intel Corporation | Using optimized libraries to improve performance of deployed application code at runtime |
US7519974B2 (en) * | 2005-01-14 | 2009-04-14 | International Business Machines Corporation | Mechanism that provides more efficient event handler processing |
US7634768B2 (en) | 2005-02-17 | 2009-12-15 | Intel Corporation | Methods and apparatus to support mixed-mode execution within a single instruction set architecture process of a virtual machine |
US7353504B2 (en) * | 2005-12-09 | 2008-04-01 | Bea Systems, Inc. | System and method for efficiently generating native code calls from byte code in virtual machines |
US7814486B2 (en) * | 2006-06-20 | 2010-10-12 | Google Inc. | Multi-thread runtime system |
US8176475B2 (en) * | 2006-10-31 | 2012-05-08 | Oracle America, Inc. | Method and apparatus for identifying instructions associated with execution events in a data space profiler |
US8601452B2 (en) * | 2007-03-02 | 2013-12-03 | Oracle International Corporation | Compiler for JAVA and .NET |
US7712092B2 (en) * | 2007-10-01 | 2010-05-04 | The Board Of Trustees Of The Leland Stanford Junior University | Binary translation using peephole translation rules |
US8136158B1 (en) * | 2008-07-21 | 2012-03-13 | Google Inc. | User-level segmentation mechanism that facilitates safely executing untrusted native code |
US20100153776A1 (en) * | 2008-12-12 | 2010-06-17 | Sun Microsystems, Inc. | Using safepoints to provide precise exception semantics for a virtual machine |
US8239823B2 (en) * | 2009-03-20 | 2012-08-07 | Microsoft Corporation | Generating libraries for reflection without project compilation |
US8898627B2 (en) * | 2010-05-11 | 2014-11-25 | Smartshift Gmbh | Systems and methods for applying rules to transform objects of an application |
US8522222B2 (en) * | 2010-06-21 | 2013-08-27 | Microsoft Corporation | Tracing just-in-time compilation with pointers to local variables |
-
2011
- 2011-12-06 WO PCT/EP2011/071981 patent/WO2012076556A1/en active Application Filing
- 2011-12-06 US US13/992,140 patent/US9047097B2/en active Active
- 2011-12-06 EP EP11794119.5A patent/EP2649522B1/en active Active
Non-Patent Citations (1)
Title |
---|
See references of WO2012076556A1 * |
Also Published As
Publication number | Publication date |
---|---|
US20140089907A1 (en) | 2014-03-27 |
US9047097B2 (en) | 2015-06-02 |
WO2012076556A1 (en) | 2012-06-14 |
EP2649522B1 (en) | 2020-04-01 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2649522B1 (en) | Method for providing an application as a library in a virtual machine | |
EP2649523B1 (en) | Method for compiling an intermediate code of an application | |
WO2015055074A1 (en) | Method and device for dynamically loading and invoking program | |
EP1147467A1 (en) | Method for loading applications in a multiapplication onplatform system equipped with data processing resources, corresponding executing system and method | |
EP1212678A2 (en) | Management protocol, method for verifying and transforming a downloaded programme fragment and corresponding systems | |
WO2012000949A1 (en) | Selective compiling method, device, and corresponding computer program product | |
EP3108361A2 (en) | Method of deploying a set of software application(s) | |
WO2005124544A2 (en) | Method for loading software with an intermediate object oriented language in a portable device | |
WO2019020651A2 (en) | Communication system and method for accessing and deploying temporary microservices on a heterogeneous platform | |
EP1649363B1 (en) | Method of managing software components that are integrated into an embedded system | |
WO2005073860A2 (en) | Method for determining operational characteristics of a program | |
EP4154141A1 (en) | Method for securing a system call, method for implementing an associated security policy and devices for carrying out such methods | |
FR2765363A1 (en) | METHOD AND SYSTEM FOR CONTROLLING THE USE OF A SOFTWARE | |
EP2674860B1 (en) | Method for data processing by a navigation module | |
EP2633440B1 (en) | Indexing and execution of software applications in a network | |
WO2022184998A1 (en) | Method and module for installing a mitigation program in the kernel of a computing device | |
WO2021130420A1 (en) | Method and device implementing said method for generating and installing an executable code in the memory of a core of a virtual machine from a hypervisor | |
WO2019180376A1 (en) | Method and system for creating an image of an application | |
FR2877454A1 (en) | METHOD FOR LOADING AN OBJECT-ORIENTED INTERMEDIATE LANGUAGE CODE IN A PORTABLE DEVICE | |
EP3203405B1 (en) | Method for executing instructions of object-oriented applications by an interpreter | |
EP3874368A1 (en) | Method for executing code portions on execution resources | |
WO2011000722A1 (en) | Method for remotely validating executable code | |
WO2017134399A1 (en) | Method for storing content, method for consulting content, method for managing content and content readers | |
FR2901378A1 (en) | DETERMINING NUMBERS OF CRITICAL METHOD CALLS IN AN OBJECT-LANGUAGE APPLICATION | |
FR2941080A1 (en) | Computer application usage data auditing method for e.g. computing terminal, involves integrating audit instruction in component of framework, where instruction is activated only when component is used and included in component list |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20130626 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
DAX | Request for extension of the european patent (deleted) | ||
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE INC. |
|
17Q | First examination report despatched |
Effective date: 20171006 |
|
RAP1 | Party data changed (applicant data changed or rights of an application transferred) |
Owner name: GOOGLE LLC |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R079Ref document number: 602011066017Country of ref document: DEFree format text: PREVIOUS MAIN CLASS: G06F0009450000Ipc: G06F0008410000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 9/54 20060101ALI20190527BHEPIpc: G06F 8/41 20180101AFI20190527BHEP |
|
INTG | Intention to grant announced |
Effective date: 20190618 |
|
GRAJ | Information related to disapproval of communication of intention to grant by the applicant or resumption of examination proceedings by the epo deleted |
Free format text: ORIGINAL CODE: EPIDOSDIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
INTC | Intention to grant announced (deleted) | ||
INTG | Intention to grant announced |
Effective date: 20191122 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4DFree format text: NOT ENGLISH |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 1252239Country of ref document: ATKind code of ref document: TEffective date: 20200415Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602011066017Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4DFree format text: LANGUAGE OF EP DOCUMENT: FRENCH |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200701 |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20200401 |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602011066017Country of ref document: DERepresentative=s name: VENNER SHIPLEY GERMANY LLP, DERef country code: DERef legal event code: R082Ref document number: 602011066017Country of ref document: DERepresentative=s name: VENNER SHIPLEY LLP, DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200817Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200702Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200701Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200801 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1252239Country of ref document: ATKind code of ref document: TEffective date: 20200401 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: RSFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ALFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602011066017Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: SMFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: FRPayment date: 20201227Year of fee payment: 10 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
26N | No opposition filed |
Effective date: 20210112 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
REG | Reference to a national code |
Ref country code: BERef legal event code: MMEffective date: 20201231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201206Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201206 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: MTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401Ref country code: CYFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20200401 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: BEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20201231 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FRFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20211231 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20221228Year of fee payment: 12 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230510 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20231227Year of fee payment: 13 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: DEPayment date: 20231229Year of fee payment: 13 |