CN113302585A - Accelerating applications and sub-packet installation - Google Patents
Accelerating applications and sub-packet installation Download PDFInfo
- Publication number
- CN113302585A CN113302585A CN201980088644.1A CN201980088644A CN113302585A CN 113302585 A CN113302585 A CN 113302585A CN 201980088644 A CN201980088644 A CN 201980088644A CN 113302585 A CN113302585 A CN 113302585A
- Authority
- CN
- China
- Prior art keywords
- application
- computing device
- patch
- elements
- version
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000009434 installation Methods 0.000 title claims abstract description 45
- 238000000034 method Methods 0.000 claims abstract description 93
- 238000004891 communication Methods 0.000 claims description 47
- 230000006870 function Effects 0.000 claims description 41
- 230000004044 response Effects 0.000 claims description 31
- 230000000977 initiatory effect Effects 0.000 claims description 12
- 230000006835 compression Effects 0.000 description 46
- 238000007906 compression Methods 0.000 description 46
- 238000004422 calculation algorithm Methods 0.000 description 12
- 238000012545 processing Methods 0.000 description 10
- 238000005516 engineering process Methods 0.000 description 9
- 238000010586 diagram Methods 0.000 description 8
- 238000004806 packaging method and process Methods 0.000 description 8
- 230000001413 cellular effect Effects 0.000 description 7
- 238000013461 design Methods 0.000 description 7
- 230000003287 optical effect Effects 0.000 description 7
- 230000006399 behavior Effects 0.000 description 5
- 230000008569 process Effects 0.000 description 5
- 230000008859 change Effects 0.000 description 4
- 239000004973 liquid crystal related substance Substances 0.000 description 4
- 229910001416 lithium ion Inorganic materials 0.000 description 4
- 230000007774 longterm Effects 0.000 description 4
- 230000008521 reorganization Effects 0.000 description 4
- 238000004590 computer program Methods 0.000 description 3
- 238000013500 data storage Methods 0.000 description 3
- 230000006837 decompression Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 230000000007 visual effect Effects 0.000 description 3
- HBBGRARXTFLTSG-UHFFFAOYSA-N Lithium ion Chemical compound [Li+] HBBGRARXTFLTSG-UHFFFAOYSA-N 0.000 description 2
- 239000008186 active pharmaceutical agent Substances 0.000 description 2
- 238000011982 device technology Methods 0.000 description 2
- 239000000835 fiber Substances 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 229920000642 polymer Polymers 0.000 description 2
- 230000035945 sensitivity Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- WQZGKKKJIJFFOK-GASJEMHNSA-N Glucose Natural products OC[C@H]1OC(O)[C@H](O)[C@@H](O)[C@@H]1O WQZGKKKJIJFFOK-GASJEMHNSA-N 0.000 description 1
- 244000035744 Hura crepitans Species 0.000 description 1
- BPKGOZPBGXJDEP-UHFFFAOYSA-N [C].[Zn] Chemical compound [C].[Zn] BPKGOZPBGXJDEP-UHFFFAOYSA-N 0.000 description 1
- 239000002253 acid Substances 0.000 description 1
- 230000009471 action Effects 0.000 description 1
- 238000013459 approach Methods 0.000 description 1
- 238000003491 array Methods 0.000 description 1
- 230000008901 benefit Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 239000000872 buffer Substances 0.000 description 1
- OJIJEKBXJYRIBZ-UHFFFAOYSA-N cadmium nickel Chemical compound [Ni].[Cd] OJIJEKBXJYRIBZ-UHFFFAOYSA-N 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 239000011521 glass Substances 0.000 description 1
- 239000008103 glucose Substances 0.000 description 1
- 230000003116 impacting effect Effects 0.000 description 1
- 230000001939 inductive effect Effects 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 229910052987 metal hydride Inorganic materials 0.000 description 1
- 229910052759 nickel Inorganic materials 0.000 description 1
- PXHVJJICTQNCMI-UHFFFAOYSA-N nickel Substances [Ni] PXHVJJICTQNCMI-UHFFFAOYSA-N 0.000 description 1
- -1 nickel metal hydride Chemical class 0.000 description 1
- 238000012856 packing Methods 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004043 responsiveness Effects 0.000 description 1
- 238000013515 script Methods 0.000 description 1
- 238000010897 surface acoustic wave method Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/61—Installation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
- G06F8/65—Updates
Abstract
In some examples, a method includes downloading, from an application provider, a patch to be applied to a first application element and a stripped-down version of an application that does not include one or more application elements to be reused during application installation, decompressing the first application element to generate a decompressed version of the first application element, and decompressing the patch to generate a patch decompressed version. The method may also include applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element, compressing the patch application element to generate a compressed patch application element, and installing the application using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
Description
Background
Computing devices may perform various functions, such as executing applications, receiving user input, and outputting information for display. For example, a computing device may execute applications such as an email client, travel assistant, messaging client, and the like. A software developer may write such an application with human-readable source code compiled into machine-readable code. In some cases, the machine-readable code may be organized into discrete executable components, such as compiled classes in an object-oriented design. An application may include one or more executable components that implement various functions. In some distributed environments, a user computing device (e.g., a smartphone) may use a media store application to search for and install applications provided by a remote computing system. Typically, when a user selects an application in a media store application to install on the user computing device, the remote computing system sends a single file that includes all executable components to perform all functions of the application, regardless of whether the user actually uses all functions. As application sizes grow, the amount of time required to download and install such applications may grow, requiring users to wait a greater amount of time to install and execute the applications. More network resources may also be used in transferring applications to user computing devices.
Disclosure of Invention
In general, techniques of this disclosure may enable a computing device to more efficiently download applications, including applications that are divided into various sub-packets with discrete sets of functions, by leveraging the content of the applications already installed on the computing device. When a computing device requests an application from an application provider server to be installed on the computing device, the application provider server does not necessarily send each application element of the application or an application-specific sub-packet of the application to the computing device to install the application or application sub-packet. Instead, the application provider server may determine whether one or more application elements of the application or application sub-packet may be obtained from other applications or application sub-packets already installed on the computing device. The use of network resources may be reduced. In some cases, these application elements need to be updated or "patched" so that the application being installed uses those application elements already stored on the device. However, if those application elements are stored in a compressed format, it may be difficult to update or "patch" those application elements to the version required by the application being installed. Current compression schemes tend to concatenate small local changes to files within an application element into large global changes, resulting in a patched version of the application element that is larger than the size of the application. In devices with limited storage and memory, such as mobile computing devices, the larger the application size, the more disadvantageous. Thus, to avoid creating a large-sized patch application, reusable application elements from applications already installed on the device may be restricted to uncompressed application elements. Such a limitation may limit the number of application elements that can be reused, since most application elements (such as libraries) are stored in a compressed format. This, in turn, limits the implementation of (more network efficient) methods of downloading the above-mentioned applications.
Techniques of the present disclosure may enable reuse of compressed application elements that need to be patched without cascading small local changes into large global changes. Thus, the resulting patch compressed application element may be smaller (i.e., require fewer bytes of storage) than if the compressed application element were patched using conventional techniques. Storage and memory on the user's computing device may be more efficiently used.
In response to determining that one or more application elements are available from at least one other application or application sub-packet (already installed on the device), the application provider server may create a stripped version of the application or application sub-packet being installed (i.e., a version of the application or application sub-packet that does not include application elements available on the computing device) and any patches that may be needed to update the application elements. The computing device may establish two download streams with one or more servers of the application provider, and then initiate downloading of the patch using one download stream and the stripped-down application or download of application sub-packets using the other download stream. When the stripped-down application or application sub-packets and patches are being downloaded, the computing device may decompress application elements that are to be reused and need to be patched before they can be reused. Once each patch is downloaded to the computing device, the computing device may decompress the downloaded patch, apply the patch, and then begin recompressing the patch application elements. Since patches are much smaller than stripped application or application sub-packets and therefore require less time to download, application elements can typically be decompressed, patched, and then recompressed before the stripped application or application sub-packet has completed downloading.
As such, techniques of this disclosure may reduce the amount of data sent from an application provider server and received by a computing device to install an application or application sub-packet on the computing device. The use of network resources may be reduced. Rather than limiting application elements that may be shared between applications to uncompressed application elements, the techniques of this disclosure enable application providers to exclude compressed component elements from stripped applications or stripped application sub-packets sent to a computing device (since compressed component elements already stored on the device may now be used), which may further reduce the use of network resources since less data is transmitted. Moreover, these techniques may enable a reduction in data downloaded to a computing device while, if at all, minimally increasing application installation time, or in various cases, reducing application installation time.
Accordingly, the described techniques may improve the functionality of computing devices and computing systems that include computing devices and application provider servers. By reusing application elements of an application or application sub-packet that have been installed on a computing device to install or update an unrelated application, the described techniques reduce the amount of network bandwidth used to transmit elements of an application to be installed on a computing device and may increase the speed of application installation on a computing device.
In some examples, a method comprises: receiving, by a computing device, a user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements; and in response to receiving the user input, sending a request to an application provider to install the application; receiving, from the application provider, an indication of one or more application elements from a respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format. The method may also include downloading, by the computing device from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include one or more application elements to be reused during installation of the application; decompressing, by the computing device, the first application element to generate a decompressed version of the first application element; decompressing, by the computing device, the patch to generate a decompressed version of the patch; applying, by the computing device, the patch decompressed version to a decompressed version of the first application element to generate a patch application element; compressing, by the computing device, the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing, by the computing device, the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
In some examples, a computing device includes one or more processors; a presence-sensitive display that detects user input to install an application that is not currently installed on the computing device; a communication unit; and a computer-readable storage medium storing instructions comprising a plurality of applications, wherein each of the plurality of applications comprises a respective plurality of application elements. The instructions, when executed by the one or more processors, cause the one or more processors to: in response to receiving the user input, sending a request to install the application to an application provider via the communication unit; receiving, from the application provider, an indication of one or more application elements from a respective plurality of application elements included in the plurality of applications currently installed on the computing device via the communication unit, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format. The instructions further cause the one or more processors to: retrieving, via the communication unit, a patch to be applied to the first application element and a stripped-down version of the application that does not include one or more application elements to be reused during installation of the application from the application provider; decompressing the first application element to generate a decompressed version of the first application element; decompressing the patch to generate the patch decompressed version; applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element; compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
A non-transitory computer-readable storage medium (and/or computer program product) encoded with instructions that, when executed, cause one or more processors of a computing device to: receiving an indication of user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements; in response to receiving the indication of the user input, sending a request to the application provider to install the application; and receiving, from the application provider, an indication from one or more application elements of a respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format. The instructions further cause the one or more processors to download, from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include the one or more application elements to be reused during installation of the application; decompressing the first application element to generate a decompressed version of the first application element; decompressing the patch to generate the patch decompressed version; applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element; compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
The details of one or more examples are set forth in the accompanying drawings and the description below. Other features, objects, and advantages of the disclosure will be apparent from the description and drawings, and from the claims.
Drawings
Fig. 1 is a conceptual diagram illustrating an example computing system in which a computing device may download an application from an application provider server and may install the downloaded application on the computing device, according to one or more aspects of the present disclosure.
Fig. 2 is a block diagram illustrating an example computing device configured to install one or more applications by utilizing application elements of an application already installed on the computing device in accordance with one or more aspects of the present disclosure.
Fig. 3 is a block diagram illustrating an example application provider server in accordance with one or more aspects of the present disclosure.
FIG. 4 is a conceptual diagram illustrating an example computing device with an application container for dynamically loading installable subpackets according to the techniques of this disclosure.
Fig. 4 is a flowchart illustrating exemplary operations performed by a computing system including one or more processors executing on a computing device and one or more processors executing at an application provider server according to one or more aspects of the present disclosure.
Fig. 5 is a flowchart illustrating exemplary operations performed by a computing system that includes one or more processors executing on a computing device and one or more processors executing on an application provider server.
Detailed Description
Fig. 1 is a conceptual diagram illustrating an example computing system in which a computing device may download an application from an application provider server and may install the downloaded application on the computing device, according to one or more aspects of the present disclosure. As shown in fig. 1, computing system 1 may include a computing device 2 and an application provider server 4. Computing device 2 may communicate with application provider server 4 via network 8 to download applications, such as application 18, and may install the downloaded applications, such as application 18, on computing device 2. Network 8 represents any public or private communication network, such as cellular, Wi-Fi, and/or other types of networks, for transmitting data between computing systems, servers, and computing devices. When computing device 2 is connected to network 8, application provider server 4 may exchange data with computing device 2 via network 8 to transfer applications to be installed on computing device 2.
The application provider server 4 hosts the application provider 6 (or at least provides access to the application provider 6). The application provider 6 may perform operations described using hardware or a combination of hardware, software, and firmware that reside at the application provider server 4 and/or execute at the application provider server 4. The application provider server 4 may execute the application provider 6 with multiple processors or multiple devices. The application provider server 4 may also execute the application provider 6 as a virtual machine executing on the underlying hardware. In some examples, application provider 6 may also execute as one or more services of an operating system or computing platform, or as one or more executables at an application layer of a computing platform.
In the example of fig. 1, computing device 2 may include User Interface Component (UIC)14, UI module 16, application installer 26, and applications 10 and 12. UI module 16, application installer 26, and applications 10 and 12 may perform operations described using hardware, or a combination of hardware and software and/or firmware, resident in computing device 2 and/or executing at computing device 2. Computing device 2 may execute UI module 16, application installer 26, and applications 10 and 12 using multiple processors or multiple devices. In some cases, computing device 2 may execute UI module 16 and/or application installer 26 as virtual machines executing on the underlying hardware. UI module 16 and/or application installer 26 may also execute as one or more services of an operating system or computing platform or as one or more executable programs at an application layer of a computing platform.
When a user of computing device 2 views output and/or provides input at UIC 14, UI module 16 may cause UIC 14 to output, display, or otherwise present a user interface. For example, as shown in fig. 1, UI module 16 may send instructions to UIC 14 that cause UIC 14 to display a Graphical User Interface (GUI) on a display screen of UIC 14. In other examples, UI module 16 may also cause UIC 14 to output a user interface (such as audio output) in a non-visual form. For example, if computing device 2 is an audio player device, UI module 16 may send instructions to UIC 14 to cause UIC 14 to output audio.
The applications 10 and 12 include sub-packets 20A-20N (collectively, "sub-packets 20") and 22A-22M (collectively, "sub-packets 22"), respectively. Each of the sub-packets 20 and 22 is an installable application sub-packet that provides a discrete set of functions for the applications 10 and 12. By way of example, a software developer may design an application 10 (e.g., a navigation application) having a discrete set of functionality. The application 10 may include a turn-by-turn navigation user interface, a point of interest user interface (e.g., displaying detailed information of a point of interest on a map), and a setup user interface. A software developer may design an application 10 having three different sub-packets (e.g., sub-packets 20A, 20B, and 20N), where each sub-packet 20 includes a set of executable components to implement functionality for a corresponding user interface.
Although all of the sub-packets 20 of the application 10 as a whole may be large, the computing device 2 may retrieve, install, and execute only those sub-packets 20 that are necessary to provide the functionality requested by the user. Thus, when the application 10 is installed and/or executed, only a portion of the sub-packets 20 for the application 10 need to reside locally on the computing device for execution by the application 10. For example, when the application 10 is initially installed, only the sub-packet 20A may be installed. Other sub-packets, such as sub-packets 20B-20N, may include functionality that is not used (i.e., not used) by the user. That is, the user may not have requested or used the functionality provided by one or more of the sub-packets 20B-20N since the application 10 was initially installed. Thus, when a user initially requests functionality provided by one or more sub-packets 20B-20N, one or more of the sub-packets 20B-20N may be installed (i.e., installed on demand). In some examples, if a user does not use the functionality provided by one or more sub-packets 20B-20N for at least a threshold duration (e.g., one day, one week, one month, one year, etc.), the respective one or more sub-packets 20B-20N may be unloaded from the computing device 2. In such an example, the unloaded one or more sub-packets 20B-20N may be re-installed (i.e., re-installed as needed) the next time a user requests functionality provided by the unloaded one or more sub-packets 20B-20N.
When a user requests additional functionality for an application, computing device 2 may automatically retrieve a required sub-packet 20 (e.g., sub-packet 20B, sub-packet 20N, etc.) that provides the requested functionality. When the application 10 is currently executing on the computing device 2, the computing device may automatically retrieve and install the required sub-packets 20. In this way, the application can be installed and loaded more quickly because if only a subset of the application functionality is needed, the entire sub-packet set for the application need not be retrieved and installed. Thus, network, computing, and storage resources for installation may be reduced as compared to retrieving the entire application. The applicant notes that while the techniques of the present disclosure are described with reference to an application in various instances, the same techniques may be applied to an application sub-packet (e.g., a stripped version of the application sub-packet may be provided and installed using a patched version of another application sub-packet already installed on the device in order to provide some functionality). Likewise, even though particular techniques are specifically described with reference to applications, applicants do not limit the description of these techniques to be applicable only to certain applications unless specifically indicated.
The application and application subpackets installed at computing device 2 may each include one or more application elements. An application element of an application may include code used in executing the application. For example, application elements may include executable code and libraries executed by computing device 2 to execute an application, resources (e.g., images, textures, files, scripts, uncompiled code, etc.) accessed during execution of an application, and so forth. Typically, the application elements are included in the application or application sub-packets in a compressed form. That is, when an application or application sub-packet is installed at computing device 2, many or most of the application elements (such as libraries) are stored in a compressed format. It should be understood that other applications may not have access to the application elements of the application without explicit permission of the application containing the application elements. Thus, application elements of an application do not include shared libraries or other data that are accessed by multiple different applications. Likewise, the application 10 may not have access to the application elements of the application 12, and the application 12 may not have access to the application elements of the application 10. In some examples, an application in computing device 2 may execute in a sandbox environment, which isolates application elements of the application from other applications.
In some examples, the application element may be one or more of four types of content: binary content, resources, managed code, and compiled resources. Binary content may refer to native code specific to the architecture of one or more processors of computing device 2. For example, the applications 10 and 12 may include native code for various platforms, including computing devices. The resources may include image content, audio content, video content, and the like. For example, when application 10 or application 12 is executing at computing device 2, application 10 or 12 may output such image content, audio content, and/or video content at UIC 14.
The compiled resource may be a compiled resource, such as a string or extensible markup language (XML) file compiled into the compiled resource. Managed code may be non-architecture specific compiled code and may be executed by a virtual machine, such as compiled Java code, compiled Dalvik executable code, or the like. In some examples, the application may include both managed code and native code as application elements. For example, an application may include one or more libraries written in native code, and may also include one or more other libraries written in managed code.
According to aspects of the present disclosure, computing device 2 may download an application or application sub-packet from application provider server 4 for installation at computing device 2 in a manner that utilizes application elements of the application or application sub-packet currently installed on computing device 2. In the example of fig. 1, to install application 18, application installer 26 may execute at computing device 2 to send a request to application provider 6 at application provider server 4 to download application 18 from application provider server 4 to computing device 2, which may be in response to user input to install an application (optionally providing a particular application function) that is not currently installed on the computing device. When the user input is a request for a function that was not previously used by the particular application, i.e., corresponds to a request to install one or more sub-packets that provide a discrete set of functions, the user input may be received while the particular application is executing at the computing device. When the application installer 26 has received and/or obtained at least one application sub-packet 24A-24O (collectively, "application sub-packets 24") of the application 18, the application installer 26 may install the application 18 at the computing device 2. When the user input is a request for functionality that was not previously used by the particular application, the downloading and installation may be performed while the particular application is executing at the computing device. This instant approach to sub-package installation may improve resource utilization of the mobile computing device without impacting user experience.
In response to receiving a request from computing device 2 to download an application (e.g., application 18) to computing device 2, application provider 6 may determine whether one or more application elements of the application to be downloaded may be obtained from one or more applications that are currently already installed on computing device 2 (i.e., whether one or more sub-packets 20 and/or 22 may be used in place of one or more sub-packets 24). In response to determining that one or more application elements of the application to be downloaded are available from one or more applications that are currently installed on computing device 2, application provider 6 may refrain from sending each application element of the application to computing device 2 when the one or more application elements of the application are available from the one or more applications that are currently installed on computing device 2. In this manner, application provider 6 may refrain from sending each application element of the application to computing device 2 if one or more application elements of the application are available from one or more applications that are currently already installed on computing device 2.
Where the systems discussed herein collect personal information about a user or may make use of personal information, the user may be provided with an opportunity to control whether programs or features collect user information (e.g., information about the user's social network, behavior or activity, profession, user preferences, or the user's current location), or whether and/or how to receive content from a content server that may be more relevant to the user. In addition, certain data may be processed in one or more ways before being stored or used, such that personally identifiable information is removed. For example, the user's identity may be processed such that no personal identity information of the user can be determined, or the user's geographic location (such as to city, zip code, or state level) from which location information is obtained may be generalized such that no specific location of the user can be determined. Thus, the user may control how information about the user is collected and used by the content server.
In the example of fig. 1, a user of computing device 2 may control information collected by application provider 6 about computing device 2. For example, the user may control whether application provider 6 is able to receive and/or access information associated with computing device, such as information about applications currently installed on computing device 2. The user may also control the level of access to this information by the application provider 6. In some cases, application provider 6 may be able to receive and/or access information about applications currently installed on computing device 2, and/or receive and/or access information associated with computing device 2 only after receiving explicit consent from the user of computing device 2.
In the example of fig. 1, application provider 6 may determine whether one or more application elements of application 18 may be obtained from applications 10 and 12 that are currently already installed on computing device 2. For example, application provider 6 may access information indicating one or more applications (e.g., applications 10 and 12) currently installed on computing device 2, as well as information indicating application elements of those applications currently installed on computing device 2. Such information may be stored at the application provider server 4 or at another location (e.g., another remote server) accessible to the application provider 6. Application provider 6 may read such information and may determine one or more application elements of application 18 that may be obtained from one or more applications already installed on computing device 2.
If an application that has been installed on computing device 2 has application elements that are the same as application elements of application 18, application provider 6 may determine that the application elements of application 18 may be obtained from the application that has been installed on computing device 2. For example, if an application element of application 18 is a library, application provider 6 may determine that the library may be obtained from an application already installed at computing device 2. In another example, if the application element of application 18 is a video file, and if the same video file already exists in an application already installed on computing device 2, application provider 6 may determine that the video file may be obtained from the application already installed on computing device 2.
When an application that has been installed on computing device 2 has an application element that can be modified, such as via a patch, to become identical to an application element of application 18, application provider 6 may also determine that the application element of application 18 may be obtained from the application that has been installed on computing device 2. For example, if an application element of application 18 is the latest version of a library, and if an application element of an application that has been installed on computing device 2 contains an old version of the same library, computing device 2 may be able to obtain the latest version of the library from the application that has been installed on computing device 2 by updating the old version of the library to the latest version of the library. In this example, application provider 6 may generate a patch to update an old version of the library to a latest version of the library and may transmit the patch to computing device 2 so that computing device 2 may apply the patch to the old version of the library to update it to the latest version of the library.
When application provider 6 determines that an application element of the application elements may be obtained (or, in other words, available) from an application already installed at computing device 2, application provider 6 may determine whether to request computing device 2 to obtain an application element from an application already installed on computing device 2 and install application 18 using the obtained application element, or whether application provider 6 still sends some of the application elements to computing device 2. Application provider 6 may make the determination based at least in part on a variety of factors, such as the user's sensitivity to download time, the network bandwidth available to computing device 2, the type of network connection computing device 2 has, the available processing power of computing device 2, the remaining battery life of computing device 2, the location of computing device 2, memory and storage limitations of computing device 2, and so forth.
In some examples, application provider 6 may generate a profile for computing device 2 based on these and other factors. Using the profile, application provider 6 may determine whether to instruct computing device 2 to obtain application elements from applications already installed on computing device 2 and install application 18 using the obtained application elements, or whether application provider 6 is still sending application elements of application 18 to computing device 2.
For example, if computing device 2 is connected to application provider 6 via a cellular data connection, application provider 6 may send computing device 2a request to obtain an application element from an application already installed on computing device 2, and may send the application element to computing device 2 if computing device 2 is connected to application provider 6 via Wi-Fi. In another example, if computing device 2 is connected to application provider 6 via a metered network connection, application provider 6 may send computing device 2a request to obtain an application element from an application already installed on computing device 2, and may send the application element to computing device 2 if computing device 2 is connected to application provider 6 via an unmetered network connection or a network connection with unlimited data. In another example, application provider 6 may determine an amount of network bandwidth available to computing device 2 and may send the application element to computing device 2 if the available network bandwidth of computing device 2 is above a threshold.
In another example, if the amount of remaining battery life of computing device 2 is less than the threshold, if computing device 2 is connected to application provider 6 via a cellular data connection, application provider 6 may send a request to computing device 2 to obtain an application element from an application already installed on computing device 2, and if computing device 2 is connected to application provider 6 via Wi-Fi, the application element may be sent to computing device 2 because Wi-Fi may be more power efficient than the cellular data connection.
In some cases, the application 18 may already be installed on the computing device 2, but one or more sub-packets 24 are not installed on the computing device 2. Instead of the initial request to install application 18, the user of computing device 2 may be requesting to use additional functionality of application 18 provided in a sub-packet of application 18 (such as sub-packet 24B) that is not currently installed on computing device 2. In such a case, the application provider 6 may determine the application elements included in the application sub-packet 24B and determine whether any application elements are included in other sub-packets 20, 22 or applications 10, 12 already installed on the computing device 2.
When application provider 6 determines that computing device 2 is to obtain application elements from an application or application sub-packet that has been installed on computing device 2, application provider 6 may send a request to computing device 2 to obtain application elements of application 18 from an application that has been installed on computing device 2. The request may identify application elements of application 18 that may be obtained from applications already installed on computing device 2, identify application elements of applications already installed on computing device 2, identify locations of application elements of applications already installed on computing device 2, and so forth. In other words, computing device 2 may receive, from the application provider, an indication of one or more application elements currently installed on the computing device that are to be reused during installation of application 18. If desired, application provider 6 may also send a patch to computing device 2 that may be used to update application elements of an application that has been installed on computing device 2 such that when patched, the application element is the same as some of the application elements. For example, the one or more application elements may include an application element that updates a current version to a different version required by application 18 by applying a patch to the application element to generate a patch application element.
In this manner, application provider 6 may transmit to computing device 2 and computing device 2 may receive from application provider 6 an indication of one or more application elements of application 18 that may be obtained from an application already installed on computing device 2 and one or more patches of one or more application elements that computing device 2 may apply to an application already installed on computing device 2 to obtain one or more application elements of application 18 from an application already installed on computing device 2.
The request received by computing device 2 may indicate one or more application elements of the one or more applications already installed on computing device 2 that correspond to one or more application elements of application 18 to be obtained from one or more applications already installed on computing device 2. Application elements of applications 18 that have been installed on computing device 2 may correspond to application elements of applications 18 if computing device 2 may generate the application elements of applications 18, such as by making copies of the respective application elements or by applying patches to the respective application elements.
The request may include identification information for each of the one or more application elements of the one or more applications that have been installed on computing device 2, such as a name or other identification information associated with the one or more applications and/or the one or more application elements, a storage location (e.g., directory path) of the one or more application elements in a storage device included in computing device 2 or operatively coupled to computing device 2, and so forth.
The request may also specify how to obtain one or more application elements of application 18 from respective application elements of one or more applications already installed on computing device 2. In one example, if respective application elements of one or more applications that have been installed on computing device 2 are identical to application elements of application 18, application elements of application 18 may be obtained by making copies of the respective application elements and by using the copies of the respective application elements as application elements of application 18.
In another example, if obtaining application elements of application 18 from respective application elements of one or more applications already installed on computing device 2 includes patching the respective application elements, computing device 2 may receive one or more patches from application provider 6, and computing device 2 may apply the patches to the respective application elements to obtain the application elements of application 18. Computing device 2 may apply the patch to the respective application element and may use a copy of the patch of the respective application element (i.e., the patch application element) as an application element of application 18.
In one example, the application 18 to be installed on the computing device 2 may include the application sub-packets 24A and 24B. When sending a request to install application 18, computing device 2 may initiate two or more download streams from application provider 6. Each of the two or more download streams may be used to download a different portion of application 18 from application provider 6. For example, one download stream may be used to download a stripped version of the sub-packet 24A and another download stream may be used to download patches that need to be applied to application elements already installed on the computing device 2 for the application sub-packet 24A to use the application elements.
In this example, the application sub-packet 24A provides the core functionality of the application 18 and is required for execution of the application 18. The application provider 6 may determine that the application elements of the application sub-packet 24A may be obtained from an application or application sub-packet already installed on the computing device 2, and that the application elements need to be patched before they are used by the application sub-packet 24A. In response, the application provider 6 may generate a stripped version of the application sub-packet 24A that does not include application elements already installed on the computing device 2. In some cases, even though the stripped version of the application sub-packet 24A has been compressed using a standard compression algorithm, the application provider 6 may apply a second, different compression algorithm to generate a stripped version of the application sub-packet that is further compressed and thus smaller in size, to further reduce the amount of data that needs to be sent to the computing device 2 and to more efficiently utilize network resources and computing resources, such as memory, storage, and processing power.
The application provider 6 may also generate patches to be applied by the computing device 2 to application elements already installed to modify the application elements to the version of the application elements required by the application sub-packet 24A. Application provider 6 compresses the patch and transmits the patch to computing device 2 using one of the download streams established with computing device 2. The application provider 6 also sends the stripped version of the application sub-packet 24A to the computing device 2 using another one of the established download streams with the computing device 2. Typically, the size of the compressed patch will be smaller than the stripped version of the application sub-packet 24A, and therefore will require less time to transmit to the computing device 2.
Since applying a patch to a compressed application element, such as a library, may result in an inefficient patched version of the element (i.e., larger in size than when applying the patch to an uncompressed version of the same application element), it may be preferable to apply the patch to the uncompressed version of the application element. Thus, in accordance with the techniques of this disclosure, when the application provider 6 is creating and transmitting a stripped version of the patch and application sub-packet 24A, the computing device 2 may create a copy of one or more application elements to be reused by the application sub-packet 24A. If any application elements are stored at computing device 2 in a compressed format, computing device 2 may decompress the copy of the compressed application elements. In various cases, creating a copy of an application element and decompressing a copy of a compressed application element may take less time than the time required to download a patch.
Once each patch is downloaded to computing device 2, computing device 2 decompresses each patch and applies the uncompressed patch to the corresponding uncompressed copy of the application element to generate a patch application element. In the event that the application sub-packet 24A requires that the application elements be stored in a compressed format, the computing device 2 recompresses the patched version of the application elements (to form compressed patched application elements) after the patch is applied. In general, the downloading, decompressing, patching, and recompressing processes require less time than the time required to download the stripped version of the application sub-packet 24A. In this manner, the techniques of this disclosure allow for the use of compressed application elements already installed on computing device 2, even though the compressed application elements may need to be patched before being used by the application sub-packet 24A, and without producing a suboptimal patched version of the application elements. Computing device 2 may then install the application using the compressed patch application element and any other application elements required, as well as stripped versions of the application or application sub-packets. Furthermore, by downloading, decompressing, patching, and recompressing the application elements as described above, the download and installation time required to install the application sub-packet 24A is lower than would be required if the entire application sub-packet 24A were sent to the computing device 2 or if only the uncompressed application elements already installed on the computing device 2 were stripped out in the application sub-packet 24A. Network resources and computing resources, such as memory, storage, and processing power, may also be reduced.
The techniques described herein may also improve the functionality of computing device 2 itself by minimizing the impact of installing application 18 on the battery life and/or processing power of computing device 2. By determining whether to send one or more application elements from application provider server 4 to computing device 2 or to obtain one or more application elements from applications already installed on computing device 2 based at least in part on the type of network connection established by computing device 2, the available bandwidth of the network connection established by computing device 2, the current processor and/or memory load of computing device 2, and/or the remaining battery life of computing device 2, the techniques described herein may adaptively install application 18 on computing device 2 in a manner that minimizes the impact of installing application 18 on the battery life and/or processing power of computing device 2.
Fig. 2 is a block diagram illustrating an example computing device configured to install one or more applications by utilizing application elements of an application already installed on the computing device in accordance with one or more aspects of the present disclosure. Fig. 2 illustrates only one specific example of computing device 2, and many other examples of computing device 2 may be used in other instances and may include a subset of the components included in exemplary computing device 2 or may include additional components not shown in fig. 2.
As shown in the example of fig. 2, computing device 2 includes User Interface Component (UIC)14, one or more processors 36, one or more communication units 38, and one or more storage components 28. UIC 14 includes an output component 32 and an input component 34. Storage components 28 of computing device 2 include UI module 16, application installer 26, and applications 10, 12, and 18.
One or more communication units 38 of computing device 2 may communicate with external devices (e.g., application provider server 4) via one or more wired and/or wireless networks (e.g., network 8) by sending and/or receiving network signals over one or more networks. Examples of communication unit 38 include a network interface card (such as an ethernet card), an optical transceiver, a radio frequency transceiver, a Global Positioning Satellite (GPS) receiver, or any other type of device that can send and/or receive information. Other examples of communication unit 38 may include short wave radios, cellular data radios, wireless network radios, and Universal Serial Bus (USB) controllers.
One or more input components 34 of computing device 2 may receive the input. Examples of inputs are tactile, audio and video inputs. In one example, input component 34 of computing device 2 includes a presence-sensitive input device (e.g., a touch-sensitive screen, a presence-sensitive display), a mouse, a keyboard, a voice response system, a camera, a microphone, or any other type of device for detecting input from a human or machine. In some examples, input components 34 may include one or more sensor components, such as one or more location sensors (GPS components, Wi-Fi components, cellular components), one or more temperature sensors, one or more motion sensors (e.g., accelerometers, gyroscopes), one or more pressure sensors (e.g., barometers), one or more ambient light sensors, and one or more other sensors (e.g., microphones, cameras, infrared proximity sensors, hygrometers, etc.). Other sensors may include heart rate sensors, magnetometers, glucose sensors, hygrometer sensors, olfactory sensors, compass sensors, pedometer sensors, to name a few other non-limiting examples.
One or more output components 32 of computing device 2 may generate output. Examples of outputs are tactile, audio and video outputs. In one example, output components 32 of computing device 2 include a PSD, sound card, video graphics adapter card, speaker, Cathode Ray Tube (CRT) monitor, Liquid Crystal Display (LCD), or any other type of device for producing output to a person or machine.
While illustrated as internal components of computing device 2, UIC 14 may also represent external components that share a data path with computing device 2 for sending and/or receiving input and output. For example, UIC 14, in one example, represents a built-in component of computing device 2 that is located within an outer packaging of computing device 2 and is physically connected to the outer packaging of computing device 2 (e.g., a screen on a mobile phone). In another example, UIC 14 represents an external component of computing device 2 that is located outside of and physically separate from the packaging or housing of computing device 2 (e.g., a monitor, projector, etc. that shares a wired and/or wireless data path with computing device 2).
One or more storage components 28 within computing device 2 may store information for processing during operation of computing device 2 (e.g., computing device 2 may store data accessed by UI module 16, application installer 26, and applications 10, 12, and 18 during execution on computing device 2). In some examples, storage component 28 is a temporary memory, meaning that the primary purpose of storage component 28 is not long-term storage. Storage component 28 on computing device 2 may be configured as volatile memory for short-term storage of information, and therefore does not retain stored content if powered off. Examples of volatile memory include Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), and other forms of volatile memory known in the art.
In some examples, storage component 28 also includes one or more computer-readable storage media. In some examples, storage component 28 includes one or more non-transitory computer-readable storage media. The storage component 28 may be configured to store a greater amount of information than is typically stored by volatile memory. The storage component 28 may further be configured as a non-volatile memory space for long term storage of information and to retain information after power on/off cycles. Examples of non-volatile memory include magnetic hard disks, optical disks, floppy disks, flash memory, or forms of electrically programmable memory (EPROM) or Electrically Erasable and Programmable (EEPROM) memory. Storage component 28 may store program instructions and/or information (e.g., data) associated with UI module 16, application installer 26, and applications 10, 12, and 18. Storage component 28 may include a memory configured to store data or other relevant information associated with UI module 16, application installer 26, and applications 10, 12, and 18.
One or more processors 36 may implement the functions associated with computing device 2 and/or execute instructions associated with computing device 2. Examples of processor 36 include an application processor, a display controller, an auxiliary processor, one or more sensor hubs, and any other hardware configured to function as a processor, processing unit, or processing device. UI module 16, application installer 26, and applications 10, 12, and 18 may be operable by processor 36 to implement various actions, operations, or functions of computing device 2. For example, processor 36 of computing device 2 may retrieve and execute instructions stored by storage component 28, causing processor 36 to perform the operations of UI module 16, application installer 26, and applications 10, 12, and 18. The instructions, when executed by processor 36, may cause computing device 2 to store information within storage component 28.
In response to receiving the request to install application 18 at computing device 2, application installer may send a request for application 18 to application provider 6 at application provider server 4 via communication unit 38. The request may include information that may be used by application provider 6 to determine how to send application elements of application 18 to computing device 2. For example, such information may include a current location (e.g., geographic location) of computing device 2, a type of network connection established by communication unit 38, available bandwidth of the network connection established by communication unit 38, a memory load of current processor and/or processor 36, a remaining battery life of computing device 2, user preferences regarding application 18 downloads, applications currently installed on computing device 2, application elements of applications currently installed on computing device 2, and so forth.
In response to sending a request for application 18 to application provider 6, application installer 26 may receive a first one or more application elements of application 18 from application provider 6. Application installer 26 may receive the first one or more application elements of application 18 in a compressed form in order to reduce the amount of time required to download the first one or more application elements and to reduce network resources used in the download.
Each of the first one or more application elements may have been compressed (e.g., by application provider server 4) using a compression algorithm specific to the application element type of the application element to reduce the size of the first one or more application elements transmitted to computing device 2 via the network. Thus, if the first one or more application elements of the application 18 include two or more application elements of two or more application element types, each of the two or more application elements may have been compressed using a different compression algorithm. To assist in decompressing application elements received from application providers 6, the computing device may store a compression dictionary in storage component 28 for application elements that have been compressed using a dictionary-based compression algorithm in which data blocks, such as character strings, are replaced by referencing the locations of the data blocks in the compression dictionary. The compression dictionary may include indices to data blocks that may be indexed by a dictionary-based compression algorithm in order to compress and decompress data. To decompress application elements that have been compressed using a dictionary-based compression algorithm, application installer 26 may replace references in the compressed graphical elements with data blocks at corresponding reference locations in the compression dictionary.
In some examples, computing device 2 may initiate two or more download streams from application provider 6 when downloading application 18. Each of the two or more download streams may be used to download a different portion of application 18 from application provider 6. For example, one download stream may be used to download a stripped-down version of application 18 (i.e., a version that does not include application elements already installed on computing device 2), while another download stream may be used to download patches that need to be applied to application elements already installed on computing device 2 for application 18 to use the application elements.
While application provider 6 is creating and transmitting patches and stripped-down versions of application 18, computing device 2 may create copies of one or more application elements to be reused by application 18, including application elements that need to be patched. If any application elements are stored at computing device 2 in a compressed format, application installer 26 may decompress the copy of the compressed application element(s). In various cases, creating a copy of an application element and decompressing a copy of the compressed application element(s) may take less time than the time required to download a patch.
Once each patch is downloaded to computing device 2, application installer 26 decompresses each patch and applies the uncompressed patch to the corresponding uncompressed copy of the application element. In the event that application 18 requires that the application elements be stored in a compressed format, application installer 26 recompresses the patch version of the application elements after the patch is applied.
Once application installer 26 receives or obtains each application element of application 18, including the first and second application elements, and has patched the application elements that need to be patched, application installer 26 may install application 18 using the application elements of application 18. Installing the application 18 may include creating a package for the application 18, wherein the application elements of the application 18 are stored within the package in a manner that the package represents an application that the computing device 2 may execute to implement one or more functions.
Fig. 3 is a block diagram illustrating an example application provider server in accordance with one or more aspects of the present disclosure. Fig. 3 illustrates only one specific example of application provider server 4, and many other examples of application provider server 4 may be used in other examples. In other examples, the application provider server may include a subset of the components included in exemplary application provider server 4 or may include additional components not shown in fig. 3. For example, application provider server 4 may comprise a cluster of servers, and each server comprising the cluster of servers of application provider server 4 may include all or some of the components described herein in fig. 3 to implement the techniques disclosed herein.
As shown in the example of fig. 3, application provider server 4 includes one or more processors 40, one or more communication units 42, and one or more storage devices 48. The storage device 48 includes an application provider 6 and an application provider data store 52.
In some examples, storage device 48 is a temporary memory, meaning that the primary purpose of storage device 48 is not long-term storage. In this example, the storage device 48 may be configured as a volatile memory for short-term storage of information, and therefore does not retain stored contents if power is removed. Examples of volatile memory include Random Access Memory (RAM), Dynamic Random Access Memory (DRAM), Static Random Access Memory (SRAM), and other forms of volatile memory known in the art.
In some examples, storage device 48 also includes one or more computer-readable storage media. In some examples, storage device 48 includes one or more non-transitory computer-readable storage media. The storage device 48 may be configured to store a greater amount of information than is typically stored by volatile memory. Storage device 48 may further be configured as a non-volatile memory space for long term storage of information and to retain information after power on/off cycles. Examples of non-volatile memory include magnetic hard disks, optical disks, floppy disks, flash memory, or forms of electrically programmable memory (EPROM) or Electrically Erasable and Programmable (EEPROM) memory. Storage devices 48 may store program instructions and/or information (e.g., data) associated with application provider 6 and application provider data store 52. Storage devices 48 may include memory configured to store data or other relevant information associated with application providers 6 and application provider data stores 52.
The application provider data store 52 may be configured to store information received by, created by, and/or otherwise associated with the application provider 6. For example, application provider data store 52 may store applications that may be downloaded from application provider server 4 for installation on a computing device (such as computing device 2). Such applications may be uploaded to the application provider server 4 by an application developer so that the applications are available for download to the computing device by the application provider 6.
Application provider data store 52 may also store information about applications installed on computing devices in communication with application provider server 4. For example, for computing device 2, application provider data store 52 may store an indication of applications installed on computing device 2, versions of applications installed on computing device 2, application elements that make up applications installed on computing device 2, applications that were previously installed on computing device 2 but are no longer installed on computing device 2, and so forth.
Instead of sending all application elements of the requested application, application provider 6 may determine whether one or more application elements of the application may be obtained from one or more applications that are currently already installed on computing device 2. If so, application provider 6 may instruct computing device 2 to obtain such one or more application elements from one or more applications that are currently already installed on computing device 2, and may refrain from transmitting such one or more application elements to computing device 2.
Application provider data store 52 may store indications of applications currently installed on various computing devices in communication with application provider server 4. For example, when application provider 6 receives a request for an application from computing device 2, application provider server 4 may update application provider data store 52 to include an indication that the requested application is installed on computing device 2. Further, when an application is deleted or otherwise uninstalled from computing device 2, application provider server 4 may receive an indication that the application was deleted or uninstalled from computing device 2, and may update application provider data store 52 to include an indication that the application is no longer installed on computing device 2. In this manner, application provider data store 52 may store an indication of the applications currently installed on computing device 2 in communication with application provider server 4.
When application provider 6 determines that one or more application elements of the requested application are available from applications currently installed on the requesting computing device, application provider 6 may determine to refrain from sending the one or more application elements of the requested application to the requesting computing device, but to instruct the requesting computing device to obtain the one or more application elements of the requested application from applications currently installed on the requesting computing device. In other cases, application provider 6 may send one or more application elements of the requested application to the requesting computing device even when the one or more application elements of the requested application are available from an application currently installed on the requesting computing device.
In some examples, if computing device 2 is connected to application provider 6 via a cellular data connection, rather than Wi-Fi, application provider 6 may refrain from sending one or more application elements of the requested application to the requesting computing device, and may send one or more application elements of the requested application to the requesting computing device if the requesting device is connected to application provider 6 via Wi-Fi.
In some examples, if the requesting computing device is connected to application provider 6 via a metered network connection, application provider 6 may refrain from sending one or more application elements of the requested application to the requesting computing device, and if the requesting device is connected to application provider 6 via an unmetered network connection or a network connection with unlimited data, the one or more application elements of the requested application may be sent to the requesting computing device. In another example, application provider 6 may determine an amount of network bandwidth available to the requesting computing device and may send one or more application elements of the requested application to the requesting computing device if the available network bandwidth of the requesting computing device is above a threshold.
In some examples, when obtaining one or more application elements of the requested application from an application currently installed on the requesting computing device includes applying a patch to an application element of the currently installed application, application provider 6 may determine a processor and/or memory utilization of the patch to be applied to the application element of the currently installed application by the requesting computing device, as well as a current processor and/or memory utilization of the requesting computing device and a remaining battery life of the requesting computing device. Because applying patches to application elements of a currently installed application may be potentially processor-intensive and memory-intensive, and may potentially drain the battery of the requesting computing device, application provider 6 may determine whether the requesting computing device has available resources to apply patches in a faster and/or more resource-efficient manner than downloading one or more application elements of the requested application from application provider server 4.
The application provider 6 may generate and send to the requesting device a stripped-down version of the requested application, along with an indication of one or more application elements of the requested application to be obtained from the application already installed at the requesting device. The stripped-down version of the requested application is a version of the requested application that does not include one or more application elements to be obtained from the application already installed at the requesting device. If necessary, application provider 6 may also generate and transmit one or more patches to the requesting computing device, which may be used to update one or more application elements of an application already installed on the requesting computing device. In various cases, the stripped-down version of the requested application and the patch may be sent to the requesting computing device in parallel using different download streams. By sending the patch in a download stream separate from the stripped version of the requested application, the requesting computing device may begin execution and will typically complete the decompression, patching, and recompression techniques described herein before the stripped version of the requested application is completely downloaded onto the requesting device.
According to aspects of the present disclosure, to further reduce the amount of data sent from application provider server 4 and a computing device (e.g., computing device 2) to send one or more application elements to the computing device to install or update an application on the computing device, application provider server 4 may compress the application elements sent from application provider server 4 to the computing device. In particular, compression module 56 may execute at processor 40 to apply different compression techniques to different types of application elements, and may adjust parameters of the compression techniques for the same type of application elements based on the content of the application elements. In this manner, compression module 56 may be able to better compress different application elements of different types than applying a single compression technique to compress different application elements of different types.
As previously described, an application may include multiple application elements of different application element types. For example, an application may include one or more application elements that are binary content containing architecture-specific native code. To compress this type of application element, compression module 56 may use a compression technique optimized for compressing native code, such as a compression technique that aligns code at the per-CPU instruction level, as compared to a compression technique that treats native code as arbitrary text blocks.
An application may also include one or more application elements as resources, such as images, audio files, video files, and the like. For this type of application element, compression module 56 may rely on existing compression provided by the native file format of images, audio files, video files, and the like. In this case, compression module 56 may not have to further compress the application elements.
The application may also include one or more application elements as managed code. Managed code may be executable code that executes under the management of a virtual machine, such as compiled Java code, compiled Dalvik executable code, and so forth. For this type of application element, compression module 56 may use a compression technique optimized for compressing managed code. For example, such compression techniques may adapt dictionary-based compression algorithms to common phrases in compiled Java code or compiled Dalvik executable code.
The application provider data store 52 may store a compression dictionary for compression techniques that use dictionary-based compression algorithms, where data blocks, such as character strings, may be replaced by referencing the locations of the data blocks in the compression dictionary. The compression dictionary may include indices that a dictionary-based compression algorithm may index to compress and decompress data blocks of data.
According to aspects of the present disclosure, to further reduce the amount of data sent from application provider server 4 and a computing device (e.g., computing device 2) to send one or more application elements to the computing device, application provider server 4 may transform the application elements of the application to reduce the size of patches that may be applied to update previous or old versions of the application elements. For example, application provider 6 may reorganize the code of a new version of the library to reduce the size of patches used to update a previous version of the library to the new version of the library.
Such reorganization may be helpful to an application element as managed code. For managed code, minor changes to the output code generated by the compiler may result in large differences in the parameters created by the offset. Thus, the size of a patch used to patch managed code may be relatively large compared to the size of the managed code, even if the delta changes to the managed code.
A patch for updating a previous version of an application element to an updated version of the application element is a small encoding of the differences between the updated version of the application element and the previous version of the application element. The larger the patch size, the longer the time required to download and apply the patch. By reducing the size of the patch, the application provider 6 may reduce the amount of time it takes to download the patch from the application provider server 4 and the network resources required to transmit the patch, and may also reduce the processing required to apply the patch on the computing device.
For application elements that include code files, such as in the case of managed or native code, reorganization module 58 may reduce the size of a patch that patches a previous version of an application element to a new version of the application element by maximizing the number of consecutive blocks in the code of the new version of the application element that are consecutive blocks of matching consecutive blocks in the code with the previous version of the application element. In a new version of an application element, consecutive blocks that have matching consecutive blocks in a previous version of the application element may be referred to as shared consecutive blocks. The greater the number of shared contiguous blocks, the fewer replacements in the patch that can be encoded, thereby reducing the size of the patch.
To reassemble a new version of an application element, reassembly module 58 may obtain a profile of a previous version of the application element to be patched. In some examples, application provider 6 may perform archiving of previous versions of application elements. In other examples, application provider 6 may receive a profile of a previous version of an application element from another computing device.
The profile of the application element may include information originating from the application element that describes code (e.g., managed code) in the application element, such as methods, constants, classes, etc. in the code, and describes the order of the methods, constants, and classes in the code. When an application element includes more than one code file, each code file may have an associated profile that describes the code within the code file.
In some examples, reorganizing code files for a new version of an application element according to the techniques described above may increase the number of code files in the application element. For example, reassembly module 58 may split a single code file into multiple code files in new versions of an application element, where each code file is associated with a single profile, respectively.
Reconstituting a code file for a new version of an application element in accordance with the techniques described above may increase the number and size of contiguous blocks in the new version of the application element that match contiguous regions in a previous version of the application element. By increasing the number and size of matching contiguous areas, the above-described techniques reduce the size of patches used to update a previous version of an application element to a new version of the application element.
FIG. 4 is a conceptual diagram illustrating an example computing device with an application container for dynamically loading installable subpackets according to the techniques of this disclosure. Fig. 4 illustrates only one specific example of computing device 100. Many other examples of computing device 100 may be used in other instances and may include a subset of the components included in exemplary computing device 100 or may include additional components not shown in exemplary computing device 100 of fig. 4.
As shown in the example of fig. 4, computing device 100 includes one or more processors 240, one or more input components 242, one or more communication units 244, one or more output components 246, one or more storage components 248, and presence-sensitive display 212. The storage components 248 of the computing device 100 include the application container 102, the runtime system 126, and the operating system 136.
One or more processors 240 may implement functions and/or execute instructions within computing device 100. For example, the processors 240 on the computing device 100 may receive and execute instructions stored by the storage component 248 that provide the functionality of the operating system 136, the application containers 102A-102C (collectively, "application containers 102"), and the runtime system 126. Such instructions executed by processor 240 may cause computing device 100 to store and/or modify information in storage component 248 during program execution. Processor 240 may execute instructions of operating system 136, application container 102, and runtime system 126 to implement one or more operations. That is, operating system 136, application container 102, and runtime system 126 may be operated by processor 240 to perform various functions described in this disclosure.
One or more input components 242 of computing device 100 may receive input. Examples of inputs are tactile, audio, kinetic, and optical inputs, to name a few. In one example, input component 242 of computing device 100 includes a mouse, keyboard, voice response system, camera, button, control pad, microphone, or any other type of device for detecting input from a human or machine. In some examples, input component 242 may be a presence-sensitive input component, which may include a presence-sensitive screen, a touch-sensitive screen, and/or the like.
One or more output components 246 of the computing device 100 may generate output. Examples of outputs are tactile, audio and video outputs. In some examples, output components 246 of computing device 100 include a presence-sensitive screen, a sound card, a video graphics adapter card, a speaker, a Cathode Ray Tube (CRT) monitor, a Liquid Crystal Display (LCD), or any other type of device for generating output to a person or machine. The output components may include display components such as a Cathode Ray Tube (CRT) monitor, a Liquid Crystal Display (LCD), Light Emitting Diodes (LEDs), or any other type of device for generating tactile, audio, and/or visual outputs.
In some examples, presence-sensitive display 204 of computing device 100 may include functionality of input component 242 and/or output component 246. In the example of fig. 4, presence-sensitive display 204 may include a presence-sensitive input component 215, such as a presence-sensitive screen or a touch-sensitive screen. In some examples, presence-sensitive input component 215 may detect an object at and/or near presence-sensitive input component 215. As one exemplary range, presence-sensitive input component 215 may detect objects, such as a finger or stylus within two inches or less of presence-sensitive input component 215. Presence-sensitive input component 215 may determine a location (e.g., (x, y) coordinates) of the presence-sensitive input component at which the object was detected. In another exemplary range, presence-sensitive input component 215 may detect objects that are two inches or less from presence-sensitive input component 215, and other ranges are possible. Presence-sensitive input component 215 may use capacitive, inductive, and/or optical recognition techniques to determine the location of presence-sensitive input component 215 selected by the user's finger.
In some examples, presence-sensitive display 204 may also provide output to the user using tactile, audio, or video stimuli as described with reference to output component 246. For example, presence-sensitive display 204 may include a display component 213 that presents a graphical user interface. Display component 213 can be any type of output component that provides visual output, such as described with reference to output component 246. Although illustrated as an integrated component of computing device 100, in some examples, presence-sensitive display 204 may be an external component that shares a data path with other components of computing device 100 to send and/or receive input and output. For example, presence-sensitive display 204 may be a built-in component of computing device 100 that is located within the outer packaging of computing device 100 and physically connected to the outer packaging of computing device 100 (e.g., a screen on a mobile phone). In another example, presence-sensitive display 204 may be an external component of computing device 100 that is located outside of the packaging of computing device 100 and is physically separate from the packaging of computing device 100 (e.g., a monitor, projector, etc. that shares a wired and/or wireless data path with a tablet computer). In some examples, presence-sensitive display 204, when located outside and physically separate from the packaging of computing device 100, may be implemented by two separate components: a presence-sensitive input component 215 for receiving input and a display component 213 for providing output.
As shown in fig. 4, the computing device 100 may include a power supply 258. In some examples, the power source 258 may be a battery. The power supply 258 may provide power to one or more components of the computing device 100. Examples of power source 258 may include, but are not necessarily limited to, a battery having zinc-carbon, lead-acid, nickel-cadmium (NiCd), nickel metal hydride (NiMH), lithium-ion (Li-ion), and/or lithium-ion polymer (Li-ion polymer) chemistries. In some examples, power source 258 may have a limited capacity (e.g., 1000-.
The computing device 100 includes functionality to support applications, such as the applications 10, 12, and 18 of fig. 1, that are divided into various application sub-packets, including sub-packets 20, 22, and 24, respectively. The sub-packets may include resources (e.g., images, text, video, or any other uncompiled data), security and/or signature information, version information and/or dependency information, or any other information of the application. A software developer may design an application to be composed of multiple user-defined sub-packets. Each user-defined sub-packet may include a set of executable components that collectively provide a discrete set of functionality. For example, a software developer may design a navigation application with a number of different user interfaces. Each user interface may include a different set of user interface elements and corresponding behaviors, and likewise, each user interface may be implemented with a different set of executable components. For example, the navigation application may include a turn-by-turn navigation user interface, a point of interest user interface (e.g., displaying detailed information of a point of interest on a map), and a settings user interface. A software developer may design an application with three different sub-packets, where each sub-packet includes a set of executable components to implement the functionality of a corresponding user interface.
By allowing software developers to design applications with separate sub-packets for separate sets of functions, the application container 102 may enable the application to execute at the computing device 100 without requiring all of its corresponding execution components for all of its sub-packets to reside locally on the computing device 100. In this manner, initial execution of the application may not require retrieval and/or installation of all sub-packets, but rather only a subset of sub-packets that include executable components that implement the requested function. Furthermore, by packing multiple executable components in a single sub-packet, retrieval and/or installation of the executable components may occur on a sub-packet basis according to the requested function (e.g., rendering a particular user interface) rather than retrieving and installing the executable components on an executable component by executable component basis, which may have poor performance and/or result in a poor user experience. Because the entire sub-packet set of the application need not be stored locally on the computing device 100, the initial installation and/or initial execution of the application at the computing device 100 may require less time than the entire application needs to be downloaded, installed, and executed by the computing device 100 from a remote computing system. Likewise, the user may experience more responsiveness of the application and/or performance of the application behavior. The network resources required for initial installation may also be reduced compared to downloading the entire application.
To be able to execute such applications, the computing device 100 includes an application container 102 and a runtime system 126. The runtime system 126 implements an execution model for an application built from a particular programming language in which the application was written and built or compiled. The runtime system 126 may include one or more libraries and/or services that are accessible to the application container 102 during execution. As further described in this disclosure, each application container 102 may correspond to a different application. The runtime system 126 may include thread management services, screen drawing and user interface rendering components, and inter-application and intra-application messaging services, to name a few exemplary services. The application container 102 may access the service through an Application Programming Interface (API) exposed by the runtime system 126. In some examples, runtime system 126 may be executed as one or more processes and/or threads. One or more processes and/or threads may execute with or without operating system privileges.
In the event that a user requests execution of an application (such as application 10 of FIG. 1), runtime system 126 receives a request to execute a particular function of the application or to install the entire application that is not currently installed. For example, a user may provide user input at presence-sensitive display 204 to install an application that is not currently installed on the computing device, where the application may be an application sub-package that provides a discrete set of functions. Presence-sensitive display 204 may cause runtime system 126 to generate an event corresponding to the selection of an icon for an application. In response to determining that an application container for maintaining an installable application sub-package of the application is not allocated in volatile memory of the storage component 248, the runtime system 126 retrieves the application definition from a remote computing system (e.g., the application provider 6 of fig. 1). For example, runtime system 126 causes one of communication units 244 to send a request for an application definition to a remote computing system. The application definition may define a plurality of mappings between installable sub-packets of the application and user-specified identifiers.
In response to the application container 102A being allocated in volatile memory of the computing device 100, the runtime system 126 can initiate a particular function of the application based at least in part on the requested user-specified identifier. In response to determining, by the application container 102A executing on the computing device, that an installable subpacket of a particular function is not stored in the computing device 100 based at least in part on the application definition and the user-specified identifier, the application container 102A may retrieve an installable subpacket comprising a plurality of executable components from a remote computing system (e.g., application provider 6).
Rather than downloading each executable component on a component-by-component basis and not all executable components of the application, the computing device 100 may retrieve only one or more sub-packets corresponding to a discrete set of functions required by the application. Further, rather than having the application loader identify each individual executable component that is not stored locally during runtime and execution, and retrieve and install such executable components individually on a component-by-component basis, the application container 102A may download sub-packets for specific functions based on the identification of the software developer of the sub-packet having the user-specified identifier. Likewise, retrieving sub-packets may be a less granular but more efficient retrieval mechanism than retrieving and installing such executable components individually on a component-by-component basis. The application container 102A may perform a particular function of the application using one or more executable components of the retrieved subpacket.
When an application sub-packet is downloaded and installed from the application provider 6, the application provider 6 may determine that the application elements of the application sub-packet are available from an application or application sub-packet already installed on the computing device 100 (e.g., in the example of fig. 1, the applications 10 and 12 and the sub-packets 20 and 22) and determine that the application elements need to be patched before being used by the application sub-packet. In response, the application provider 6 may generate a stripped version of the application sub-packets that does not include application elements already installed at the computing device 100. In some cases, even though the stripped version of the application subpacket has been compressed using a standard compression algorithm, the application provider 6 may apply a second, different compression algorithm to generate a further compressed, and thus smaller sized, version of the stripped application subpacket to further reduce the amount of data required to be sent to the computing device 100.
The application provider 6 may also generate patches to be applied to the application elements by the computing device 100 to change the application elements to the version of the application elements needed for the application sub-packets. Application provider 6 compresses the patch and transmits the patch to computing device 2 using one of the download streams established with computing device 100. The application provider 6 also sends a stripped version of the application subpacket to the computing device 100 using another download stream established with the computing device 100. In general, the compressed patch is smaller in size than the stripped version of the application subpacket, and therefore will require less time to transmit to the computing device 100.
Since applying a patch to a compressed application element, such as a library, may result in an inefficient patched version of the element (i.e., larger in size than when the patch is applied to an uncompressed version of the same application element), it may be preferable to apply the patch to the uncompressed version of the application element. Thus, in accordance with the techniques of this disclosure, when the application provider 6 is creating and sending stripped versions of the patch and application subpacket, the runtime system 126 may create a copy of one or more application elements to be reused by the application subpacket. If any application elements are stored at computing device 100 in a compressed format, runtime system 126 may decompress the copy of the compressed application element(s). In various cases, creating a copy of an application element and decompressing a copy of the compressed application element(s) may take less time than the time required to download a patch.
Once each patch is downloaded to computing device 2, runtime system 126 decompresses each patch and applies the uncompressed patch to the corresponding uncompressed copy of the application element. In the case where the application sub-packets require the application elements to be stored in a compressed format, the runtime system 126 recompresses the patched version of the application elements after the patch is applied. In general, the downloading, decompressing, patching, and recompressing processes require less time than downloading stripped versions of application sub-packets. In this manner, even though the compressed application elements may need to be patched before being used by the application sub-packets, the techniques of the present disclosure enable the use of compressed application elements already installed on the computing device 100 when the application sub-packets are downloaded and installed without producing a suboptimal patched version of the application elements.
In some examples, each respective application container 102 may correspond to a different application. For example, the operating system may include a user interface that allows a user to select different applications based on respective icons corresponding to the different applications (e.g., from a menu or grid of icons). For example, a user may select an email client icon from an operating system user interface, which causes an email client application to be executed with its own separate application container. Unlike application containers, extensions of Web browsers or other sub-applications (e.g., plug-ins, JavaScript, Java virtual machines, etc.) may not be represented as separate applications to be launched in the user interface of the operating system. For example, even if the Web browser creates a separate process for each tab of the tabbed interface, each tab may not be represented as a separate application within the user interface of the operating system as an independently-initiable application.
As described in this disclosure, an application container may be different from a Web browser in that the application container may include a container runtime. As described in this disclosure, the container runtime of an application container may include libraries, but it is also possible to have operating system APIs exposed to the executable components of the subpackets within the application container. Unlike application containers, Web browsers may not expose such operating system APIs to extensions or other sub-applications within the Web browser.
As described in this disclosure, an application container may be different from a Web browser in that the application container may receive a user-specified identifier (e.g., a URI) from a manager component external to the application container (e.g., in a runtime system or operating system), such that sub-packets that change the execution behavior or appearance of the application are retrieved without additional user intervention. The user-specified identifier may originate from other applications executing on the same computing device or different computing devices, and may automatically change the execution behavior or appearance of the application when received by the application container. Instead, the Web browser can receive user input within the Web browser itself (e.g., entering text for a URL), rather than from a source external to the application container (e.g., a manager component or another application external to the Web browser). Further, the Web browser may not include a router and/or application definition, as described within the application container of the present disclosure, to perform a lookup of the user-specified identifier and alter execution of the application represented by the application container. Unlike application containers, Web browsers may not include a callback interface that receives and buffers lifecycle calls to change the operation of subpackets within an application container.
In some examples, a Web browser may include core functionality (e.g., a rendering engine) and one or more third party extensions, plug-ins, and/or sub-applications. Unlike application containers, Web browsers may not function properly or perform at all in the event that all of their core functions are not stored locally and are available to the computing device for execution. Instead, the application container may function properly if a subset of its core functionality (e.g., sub-packets for only a subset of the user interface) is stored locally and available to the computing device for execution.
Fig. 5 is a flowchart illustrating exemplary operations performed by a computing system including one or more processors executing on a computing device and one or more processors executing at an application provider server according to one or more aspects of the present disclosure. As shown in FIG. 5, operations 502, 516, 518, 520, 522, 524, and 526 are described below in the context of computing device 2 shown in FIGS. 1, 2, and 4, and operations 504, 506, 508, 510, 512, and 514 are described below in the context of application provider server 4 shown in FIGS. 1 and 3.
For application elements of application 18 that may be obtained from another application installed on computing device 2 and that need to be patched, application provider server 4 generates the necessary patches (or retrieves previously generated patches, for example, from a repository) and transmits the patches to computing device 2 (510). In various instances, the patch is transmitted using one of a plurality of download streams established between computing device 2 and application provider server 4. The request may include an indication of application elements of the application currently installed on the computing device that are to be patched prior to installing the application 18.
While application provider server 4 is generating the patch and strip application, computing device 2 may at least begin creating a copy of the application element to be reused (516), and in the event the application element needs to be patched and stored in a compressed format, at least begin decompressing the application element (518). Since the patch transmitted by application provider server 4 was transmitted in a compressed format, computing device 2 decompresses the patch after computing device 2 receives the patch (520). After the application elements are patched and the patches are decompressed, computing device 2 applies the patches to the application elements (522) and recompresses the application elements into a compressed version that is usable by application 18 (524). Typically, these decompression, patching and recompression steps occur while the stripped-down application is downloaded from the application provider server 4.
The following numbered examples may illustrate one or more aspects of the present disclosure.
Example 1: a method, comprising: receiving, by a computing device, a user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements; in response to receiving the user input, sending a request to the application provider to install the application; receiving, from the application provider, an indication of one or more application elements from a respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format; downloading, by the computing device from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include one or more application elements to be reused during installation of the application; decompressing, by the computing device, the first application element to generate a decompressed version of the first application element; decompressing, by the computing device, the patch to generate a decompressed version of the patch; applying, by the computing device, the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element; compressing, by the computing device, the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing, by the computing device, the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
Example 2. The method of example 1, wherein: the application currently not installed on the computing device is an application subpacket for a particular application of the plurality of applications already installed on the computing device; the application subpacket is not currently installed on the computing device; the specific application comprises a plurality of application sub-packets; a subset of the plurality of application subpackets are currently installed on the computing device; each of the plurality of application sub-packets of the particular application may be individually installed and provide a discrete set of functions for the particular application; the stripped version of the application is a stripped version of the sub-packet of the application; and installing an application comprises installing the application subpacket on the computing device using the compressed patch application element, the stripped version of the application subpacket, and one or more application elements other than the first application element.
Example 3. The method of example 2, wherein receiving the indication of the one or more application elements, downloading the patch and the stripped version of the application sub-packet, decompressing the first application element, decompressing the patch, applying the decompressed version of the patch, compressing the patch application element, and installing the application sub-packet are performed while executing the particular application on the computing device.
Example 4. The method of example 2 or example 3, wherein: receiving the user input while executing the particular application on the computing device; and the user input to install the application is a user input requesting previously unused functionality of the particular application.
Example 5. The method of example 4, wherein execution of the particular application is managed by an application container executing on the computing device, the method further comprising: in response to receiving the user input, determining, by the application container, whether an installable application subpacket that provides functionality of the particular application requested by the user input is not installed on the computing device; and generating, by the application container, a request to install the application subpacket in response to determining that the installable application subpacket is not installed on the computing device.
Example 6. The method of any of examples 1 to 5, wherein downloading the patch and the stripped-down version of the application comprises: initiating, by the computing device, downloading a patch to be applied to the first application element; and initiating, by the computing device, downloading of a stripped-down version of the application, the stripped-down version not including one or more application elements to be reused during installation of the application.
Example 7. The method of any of examples 1 to 6, further comprising: establishing, by the computing device, at least two download streams with the application provider, wherein initiating downloading of the patch comprises initiating downloading of the patch using a first download stream from the at least two download streams, and wherein initiating downloading of the stripped version of the application comprises initiating downloading of the stripped version of the application using a second download stream from the at least two download streams.
Example 8. The method of any of examples 1 to 7, wherein decompressing the patch, applying the patch, and compressing the patch application element are performed while downloading a stripped-down version of the application.
Example 9. The method of any of examples 1 to 8, wherein decompressing the first application element is performed while downloading the patch.
Example 10. The method of any of examples 1 to 9, further comprising: creating, by the computing device, a respective copy of each application element, including a copy of the first application element, from one or more application elements currently stored on the computing device.
Example 11. a computing device, comprising: one or more processors; a presence-sensitive display that detects user input to install an application that is not currently installed on the computing device; a communication unit; and a computer-readable storage medium storing a plurality of applications, wherein each of the plurality of applications comprises a respective plurality of application elements, and storing instructions that, when executed by the one or more processors, cause the one or more processors to: in response to receiving the user input, sending a request to install the application to an application provider via the communication unit; receiving, from the application provider, an indication of one or more application elements from a respective plurality of application elements included in the plurality of applications currently installed on the computing device, via the communication unit, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format; retrieving, via the communication unit, a patch to be applied to the first application element and a stripped-down version of the application that does not include one or more application elements to be reused during installation of the application from the application provider; decompressing the first application element to generate a decompressed version of the first application element; decompressing the patch to generate a decompressed version of the patch; applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element; compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
Example 12. The computing device of example 11, wherein: the application currently not installed on the computing device is an application subpacket for a particular application of the plurality of applications already installed on the computing device; the application subpacket is not currently installed on the computing device; the specific application comprises a plurality of application sub-packets; a subset of the plurality of application subpackets are currently installed on the computing device; each of the plurality of application sub-packets of the particular application may be individually installed and provide a discrete set of functions for the particular application; the stripped version of the application is a stripped version of the sub-packet of the application; and the instructions cause the one or more processors to install the application comprise causing the one or more processors to install the application subpacket on the computing device using the compressed patch application element, the stripped version of the application subpacket, and one or more application elements other than the first application element.
Example 13. The computing device of example 12, wherein, while executing the particular application on the computing device, the instructions cause the one or more processors to receive an indication of the one or more application elements, download a stripped-down version of the patch and the application sub-packet, decompress the first application element, decompress the patch, apply a decompressed version of the patch, compress the patch application element, and install the application sub-packet.
Example 14. The computing device of example 12 or example 13, wherein: receiving the user input while executing the particular application on the computing device; and the user input to install the application is a user input requesting a previously unused function of the particular application.
Example 15. The computing device of example 14, wherein execution of the particular application is managed by an application container executing on the computing device, and wherein the instructions for the application container executing on the computing device cause the one or more processors to: in response to receiving the user input, determining whether an installable application subpacket that provides the functionality of the particular application requested by the user input is not installed on the computing device; and in response to determining that the installable application subpacket is not installed on the computing device, generating a request to install the application subpacket.
Example 16. The computing device of any of examples 11 to 15, wherein the instructions that cause the one or more processors to download the patch and the stripped-down version of the application comprise instructions that cause the one or more processors to initiate downloading of the patch to be applied to the first application element; and instructions to initiate downloading of a stripped-down version of the application, the stripped-down version not including one or more application elements to be reused during installation of the application.
Example 17. The computing device of any of examples 11 to 16, wherein the instructions further cause the one or more processors to establish at least two download streams with the application provider, wherein the instructions that cause the one or more processors to initiate downloading the patch using a first download stream from the at least two download streams, and wherein the instructions that cause the one or more processors to initiate downloading the stripped version of the application comprise instructions that cause the one or more processors to initiate downloading the stripped version of the application using a second download stream from the at least two download streams.
Example 18. The computing device of any of examples 11 to 17, wherein the instructions that cause the one or more processors to decompress the patch, apply the patch, and compress the patch application element are executed while downloading the stripped-down version of the application.
Example 19. The computing device of any of examples 11 to 18, wherein the instructions that cause the one or more processors to decompress the first application element are executed while the patch is downloaded.
Example 20. The computing device of any of examples 11 to 19, wherein the instructions further cause the one or more processors to create, from one or more application elements currently stored on the computing device, a respective copy of each application element, including a copy of the first application element.
Example 21. A non-transitory computer-readable storage medium encoded with instructions that, when executed, cause one or more processors of a computing device to: receiving an indication of user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements; in response to receiving the indication of the user input, sending a request to the application provider to install the application; receiving, from the application provider, an indication of one or more application elements from a respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format; downloading, from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include one or more application elements to be reused during installation of the application; decompressing the first application element to generate a decompressed version of the first application element; decompressing the patch to generate a decompressed version of the patch; applying the patch decompressed version to a decompressed version of the first application element to generate a patch application element; compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
In one or more examples, the functions described may be implemented in hardware, software, firmware, or any combination thereof. If implemented in software, the functions may be stored on or transmitted over as one or more instructions or code on a computer-readable medium and executed by a hardware-based processing unit. The computer readable medium may comprise a computer readable storage medium corresponding to a tangible medium, such as a data storage medium, or a communication medium, including any medium that facilitates transfer of a computer program from one place to another, for example, according to a communication protocol. In this manner, the computer-readable medium may generally correspond to (1) a tangible computer-readable storage medium that is non-transitory or (2) a communication medium such as a signal or carrier wave. A data storage medium may be any available medium that can be accessed by one or more computers or one or more processors to retrieve instructions, code and/or data structures for implementing the techniques described in this disclosure. The computer program product may include a computer-readable medium.
By way of example, and not limitation, such computer-readable storage media can comprise RAM, ROM, EEPROM, CD-ROM or other optical disk storage, magnetic disk storage or other magnetic storage devices, flash memory, or any other medium that can be used to store desired program code in the form of instructions or data structures and that can be accessed by a computer. Also, any connection is properly termed a computer-readable medium. For example, if the instructions are transmitted from a website, server, or other remote source using a coaxial cable, fiber optic cable, twisted pair, Digital Subscriber Line (DSL), or wireless technologies such as infrared, radio, and microwave, then the definition of medium includes coaxial cable, fiber optic cable, twisted pair, DSL, or wireless technologies such as infrared, radio, and microwave. However, it should be understood that computer-readable storage media and data storage media do not include connections, carrier waves, signals, or other transitory media, but are instead directed to non-transitory, tangible storage media. Disk and disc, as used herein, includes Compact Disc (CD), laser disc, optical disc, Digital Versatile Disc (DVD), floppy disk and blu-ray disc where disks usually reproduce data magnetically, while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer-readable media.
The instructions may be executed by one or more processors, such as one or more Digital Signal Processors (DSPs), general purpose microprocessors, Application Specific Integrated Circuits (ASICs), field programmable logic arrays (FPGAs), or other equivalent integrated or discrete logic circuitry. Thus, as used herein, the term "processor" may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition, in some aspects, the functionality described herein may be provided within dedicated hardware and/or software modules. Also, the techniques may be fully implemented in one or more circuits or logic elements.
The techniques of this disclosure may be implemented in a variety of devices or apparatuses, including a wireless handset, an Integrated Circuit (IC), or a set of ICs (e.g., a chipset). Various components, modules, or units are described in this disclosure to emphasize functional aspects of devices configured to perform the disclosed techniques, but do not necessarily require realization by different hardware units. Rather, as noted above, the various units may be combined in hardware units, or provided by a collection of hardware units including one or more processor interoperations as noted above, in conjunction with suitable software and/or firmware.
Various aspects of the present disclosure have been described. These and other aspects are within the scope of the appended claims.
Claims (14)
1. A method, comprising:
receiving, by a computing device, a user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements;
in response to receiving the user input, sending, by the computing device, a request to install the application to an application provider;
receiving, by the computing device from the application provider, an indication from one or more application elements of the respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format;
downloading, by the computing device from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include the one or more application elements to be reused during installation of the application;
decompressing, by the computing device, the first application element to generate a decompressed version of the first application element;
decompressing, by the computing device, the patch to generate a decompressed version of the patch;
applying, by the computing device, the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element;
compressing, by the computing device, the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and
installing, by the computing device, the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
2. The method of claim 1, wherein:
the application that is not currently installed on the computing device is an application subpacket for a particular application of the plurality of applications that has been installed on the computing device;
the application subpacket is not currently installed on the computing device;
the specific application comprises a plurality of application sub-packets;
a subset of the plurality of application subpackets are currently installed on the computing device;
each of the plurality of application sub-packets of the particular application is individually installable and provides a discrete set of functions for the particular application; and
installing the application includes installing the application subpacket on the computing device using the compressed patch application element, the stripped version of the application subpacket, and the one or more application elements other than the first application element.
3. The method of claim 2, wherein receiving an indication of the one or more application elements, downloading the patch and the stripped-down version of the application sub-packet, decompressing the first application element, decompressing the patch, applying the decompressed version of the patch, compressing the patch application element, and installing the application sub-packet are performed while executing the particular application on the computing device.
4. The method of claim 2, wherein:
receiving the user input while executing the particular application on the computing device; and
the user input to install the application is user input requesting previously unused functionality of the particular application.
5. The method of claim 4, wherein the first and second light sources are selected from the group consisting of a red light source, a green light source, and a blue light source,
wherein execution of the particular application is managed by an application container executing on the computing device,
the method further comprises:
in response to receiving the user input, determining, by the application container, whether an installable application subpacket that provides functionality of the particular application requested by the user input is not installed on the computing device; and
generating, by the application container, the request to install the application subpacket in response to determining that the installable application subpacket is not installed on the computing device.
6. The method according to any one of claims 1 and 2,
wherein downloading the patch and the stripped-down version of the application comprises:
initiating, by the computing device, downloading the patch to be applied to the first application element; and
initiating, by the computing device, downloading of the stripped-down version of the application, the stripped-down version not including the one or more application elements to be reused during installation of the application.
7. The method of claim 6, further comprising:
establishing, by the computing device, at least two download streams with the application provider,
wherein initiating downloading of the patch comprises initiating downloading of the patch using a first download stream from the at least two download streams, and
wherein initiating downloading of the stripped-down version of the application comprises initiating downloading of the stripped-down version of the application using a second download stream from the at least two download streams.
8. The method of claim 6, wherein decompressing the patch, applying the patch, and compressing the patch application element are performed while downloading the stripped-down version of the application.
9. The method of claim 6, wherein decompressing the first application element is performed while downloading the patch.
10. The method of any of claims 1, 2, and 6, further comprising:
creating, by the computing device, a respective copy of each application element, including a copy of the first application element, from the one or more application elements currently stored on the computing device.
11. A computing device comprising means for performing the method of any of claims 1-10.
12. A computer-readable storage medium encoded with instructions that, when executed, cause one or more processors of a computing device to perform the method of any of claims 1-10.
13. A computing device, comprising:
one or more processors;
a presence-sensitive display that detects user input to install an application that is not currently installed on the computing device;
a communication unit; and
a computer-readable storage medium storing a plurality of applications, wherein each of the plurality of applications comprises a respective plurality of application elements, and storing instructions that, when executed by the one or more processors, cause the one or more processors to:
in response to receiving the user input, sending a request to install the application to an application provider via the communication unit;
receiving, from the application provider via the communication unit, an indication from one or more application elements of the respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format;
retrieving, via the communication unit, a patch to be applied to the first application element and a stripped-down version of the application that does not include the one or more application elements to be reused during installation of the application from the application provider;
decompressing the first application element to generate a decompressed version of the first application element;
decompressing the patch to generate a decompressed version of the patch;
applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element;
compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and
installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
14. A non-transitory computer-readable storage medium encoded with instructions that, when executed, cause one or more processors of a computing device to:
receiving an indication of user input to install an application that is not currently installed on the computing device, wherein a plurality of applications are currently installed on the computing device, and wherein each of the plurality of applications comprises a respective plurality of application elements;
in response to receiving the indication of the user input, sending a request to an application provider to install the application;
receiving, from the application provider, an indication from one or more application elements of the respective plurality of application elements included in the plurality of applications currently installed on the computing device, wherein the one or more application elements are to be reused during installation of the application, wherein the one or more application elements include a first application element that is to be updated from a current version to a different version required by the application, and wherein the first application element is stored on the computing device in a compressed format;
downloading, from the application provider, a patch to be applied to the first application element and a stripped-down version of the application that does not include the one or more application elements to be reused during installation of the application;
decompressing the first application element to generate a decompressed version of the first application element;
decompressing the patch to generate a decompressed version of the patch;
applying the decompressed version of the patch to the decompressed version of the first application element to generate a patch application element;
compressing the patch application element to generate a compressed patch application element, the compressed patch application element being a different version of the first application element required by the application; and
installing the application on the computing device using the compressed patch application element, the stripped-down version of the application, and one or more application elements other than the first application element.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/049316 WO2021045723A1 (en) | 2019-09-03 | 2019-09-03 | Accelerating application and sub-package installations |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113302585A true CN113302585A (en) | 2021-08-24 |
Family
ID=67957447
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980088644.1A Pending CN113302585A (en) | 2019-09-03 | 2019-09-03 | Accelerating applications and sub-packet installation |
Country Status (4)
Country | Link |
---|---|
US (2) | US11416232B2 (en) |
EP (2) | EP4296849A1 (en) |
CN (1) | CN113302585A (en) |
WO (1) | WO2021045723A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2021045723A1 (en) * | 2019-09-03 | 2021-03-11 | Google Llc | Accelerating application and sub-package installations |
TWI737106B (en) * | 2019-12-31 | 2021-08-21 | 啟碁科技股份有限公司 | Firmware updating method and firmware updating system |
WO2023055438A1 (en) * | 2021-09-29 | 2023-04-06 | Intel Corporation | Dynamic resource determination for system update |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1777867A (en) * | 2003-12-15 | 2006-05-24 | 微软公司 | System and method for updating files utilizing delta compression patching. |
US20100257520A1 (en) * | 2009-04-07 | 2010-10-07 | Navarro Luis A | Determining and Downloading Portions of a Software Application in a Computer System |
CA2786879A1 (en) * | 2011-11-02 | 2013-05-02 | Research In Motion Limited | Method and system for on-demand patch generation and management |
CN108886511A (en) * | 2015-12-11 | 2018-11-23 | 皇家Kpn公司 | The part of inventory file is updated based on patch |
Family Cites Families (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5619698A (en) * | 1995-05-05 | 1997-04-08 | Apple Computer, Inc. | Method and apparatus for patching operating systems |
US7665081B1 (en) * | 2006-05-06 | 2010-02-16 | Kaspersky Lab, Zao | System and method for difference-based software updating |
WO2009132261A1 (en) * | 2008-04-25 | 2009-10-29 | Vmware, Inc. | Updating a file using differences and file format therefor |
US9720674B1 (en) * | 2008-05-05 | 2017-08-01 | Open Invention Network, Llc | Automating application of software patches to a server having a virtualization layer |
US8954949B2 (en) * | 2010-10-11 | 2015-02-10 | International Business Machines Corporation | Smart patch delivery system |
EP2680135B1 (en) * | 2012-06-27 | 2021-03-10 | Google LLC | Methods for updating applications |
US9075693B2 (en) * | 2012-06-27 | 2015-07-07 | Google Inc. | Methods for updating applications |
US9471300B2 (en) * | 2012-07-26 | 2016-10-18 | Utc Fire And Security America Corporation, Inc. | Wireless firmware upgrades to an alarm security panel |
CN103051723B (en) * | 2012-12-27 | 2016-08-31 | 广州市动景计算机科技有限公司 | A kind of method for updating increment and server, terminal |
CN105404521B (en) * | 2014-05-30 | 2017-05-31 | 广州市动景计算机科技有限公司 | A kind of method for updating increment and relevant apparatus |
EP2993578A1 (en) * | 2014-09-02 | 2016-03-09 | Gemalto M2M GmbH | Method for adapting firmware of a wireless communication device |
CN105808284B (en) * | 2014-12-31 | 2019-10-22 | 广州市动景计算机科技有限公司 | A kind of method for updating increment and the server using it |
US20180150256A1 (en) * | 2016-11-29 | 2018-05-31 | Intel Corporation | Technologies for data deduplication in disaggregated architectures |
US10402273B2 (en) * | 2016-12-14 | 2019-09-03 | Microsoft Technology Licensing, Llc | IoT device update failure recovery |
US10827034B2 (en) * | 2017-07-14 | 2020-11-03 | Vmware, Inc. | Providing application versions via delta volumes |
JP2019036238A (en) * | 2017-08-21 | 2019-03-07 | 株式会社東芝 | Update controller, terminal, update control method, and program |
EP3759885B1 (en) * | 2018-02-27 | 2022-08-17 | Excelfore Corporation | Broker-based bus protocol and multi-client architecture |
US11055087B2 (en) * | 2018-03-16 | 2021-07-06 | Google Llc | Leveraging previously installed application elements to install an application |
US11138295B2 (en) * | 2019-03-11 | 2021-10-05 | Good Way Technology Co., Ltd. | Method for securely updating firmware components and docking station using the same |
WO2021045723A1 (en) * | 2019-09-03 | 2021-03-11 | Google Llc | Accelerating application and sub-package installations |
US11080169B2 (en) * | 2019-11-13 | 2021-08-03 | Google Llc | Framework for providing binary release isolation for parts of a web application |
-
2019
- 2019-09-03 WO PCT/US2019/049316 patent/WO2021045723A1/en unknown
- 2019-09-03 EP EP23189699.4A patent/EP4296849A1/en active Pending
- 2019-09-03 EP EP19769344.3A patent/EP3884375B1/en active Active
- 2019-09-03 US US17/311,657 patent/US11416232B2/en active Active
- 2019-09-03 CN CN201980088644.1A patent/CN113302585A/en active Pending
-
2022
- 2022-07-06 US US17/811,045 patent/US20220334815A1/en active Pending
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN1777867A (en) * | 2003-12-15 | 2006-05-24 | 微软公司 | System and method for updating files utilizing delta compression patching. |
US20100257520A1 (en) * | 2009-04-07 | 2010-10-07 | Navarro Luis A | Determining and Downloading Portions of a Software Application in a Computer System |
CA2786879A1 (en) * | 2011-11-02 | 2013-05-02 | Research In Motion Limited | Method and system for on-demand patch generation and management |
CN108886511A (en) * | 2015-12-11 | 2018-11-23 | 皇家Kpn公司 | The part of inventory file is updated based on patch |
Also Published As
Publication number | Publication date |
---|---|
US11416232B2 (en) | 2022-08-16 |
WO2021045723A1 (en) | 2021-03-11 |
EP3884375A1 (en) | 2021-09-29 |
US20220334815A1 (en) | 2022-10-20 |
US20220137944A1 (en) | 2022-05-05 |
EP3884375B1 (en) | 2023-11-01 |
EP4296849A1 (en) | 2023-12-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10963270B2 (en) | Identifiers across application instances | |
US10445083B2 (en) | Application containers with dynamic sub-package loading | |
US20220334815A1 (en) | Accelerating application and sub-package installations | |
US11288059B2 (en) | Leveraging previously installed application elements to install an application | |
KR20160014629A (en) | Maintaining known dependencies for updates | |
US10394768B2 (en) | Selective data migration on schema breaking changes | |
US20210373881A1 (en) | Memory efficient software patching for updating applications on computing devices | |
CN113568645A (en) | Software updating method and device, electronic equipment and storage medium | |
CN117112500B (en) | Resource management method, device, equipment and storage medium | |
CN115826981A (en) | Real-time operating system driver adaptation method and device, electronic equipment and readable medium | |
CN112947846A (en) | Batch processing task execution method and device of object storage system and electronic equipment | |
CN115951903A (en) | Application deployment method and device |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |