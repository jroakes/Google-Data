CN110603538B - Encrypted search cloud service using password sharing - Google Patents
Encrypted search cloud service using password sharing Download PDFInfo
- Publication number
- CN110603538B CN110603538B CN201880029795.5A CN201880029795A CN110603538B CN 110603538 B CN110603538 B CN 110603538B CN 201880029795 A CN201880029795 A CN 201880029795A CN 110603538 B CN110603538 B CN 110603538B
- Authority
- CN
- China
- Prior art keywords
- shared object
- file
- cryptographic
- read
- shared
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/602—Providing cryptographic facilities or services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
Abstract
A method for sharing read access rights to a file (200) comprising: receiving a shared read access command (250) from a sharer (10 a) sharing read access to a file stored on the memory hardware (150) to a shared object; and receiving a shared read access right request (260) from the shared object (10 b). The shared read access right command includes an encryption value (256) and a first cryptographic shared value (252) based on the write key (204), the read key (202), the file identifier, and the shared object identifier. The method further comprises the steps of: the first and second password shared values are multiplied to determine a password read access value (224). The cryptographic read access value grants read access to the file to the shared object. The method further comprises the steps of: a read access token (222) of the shared object including the cryptographic read access value and the encrypted value is stored in a user read set (220) of the memory hardware.
Description
Technical Field
The present disclosure relates to providing a search function with cryptographic sharing of encrypted items stored on a distributed system.
Background
Businesses and individual users are using distributed storage systems (i.e., cloud storage services) to store data on a memory that spans multiple memory locations. Many of these businesses and individuals encrypt their data prior to uploading the data to a distributed storage system. To use the basic functionality provided by cloud storage services, such as performing search queries on stored data, enterprises are required to provide clear text access to the cloud storage services. As a result, while cloud storage services add convenience and cost advantages, some governments and sensitive private departments such as sanitation, finance, and law may be reluctant to use cloud storage services. In addition, encryption alone may not be sufficient to ensure data privacy, as knowledge of the data access pattern alone may provide a large amount of information about the data without decrypting the data.
Disclosure of Invention
One aspect of the present disclosure provides a method for sharing read access rights. The method comprises the following steps: at the data processing hardware, a shared read access command is received from a sharer sharing read access to a file stored on memory hardware in communication with the data processing hardware to a shared object. The shared read access right command includes an encrypted value and a first cryptographic share value based on a write key of the file, a read key of the file, a file identifier identifying the file, and a shared object identifier identifying the shared object. The method further comprises the steps of: at the data processing hardware, a shared read access request is received from the shared object and the first cryptographic shared value is multiplied by the second cryptographic shared value by the data processing hardware to determine a cryptographic read access value. The shared read access right request includes a shared object identifier, a file identifier, and a second cryptographic share value of a file-based read key and a shared object cryptographic key associated with the shared object. The cryptographic read access value grants read access to the file to the shared object. The method further comprises the steps of: a read access token comprising a cryptographic read access value and an encrypted value of a shared object is centrally stored by a user read of the data processing hardware in the memory hardware. The user read set includes a list of shared object identifiers associated with shared objects having read access to the files.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the sharer is configured to: transmitting the read key of the file to the shared object over a secure and authenticated communication link; creating metadata of the file; calculating an encryption value by encrypting metadata of the file using the read key; and sending a shared read access right command to the data processing hardware. The first cryptographic sharing value may be calculated based on a function of the write key and the file identifier divided by a function of the read key and the shared object identifier. The second cryptographic share value may be calculated based on a function of the read key and the shared object identifier divided by a function of the shared object cryptographic key and the file identifier.
In some examples, the method includes: receiving, at the data processing hardware, a revoke read access command from a sharer that revokes read access to a file stored on the memory hardware from a shared object; and removing, by the data processing hardware, the read access token of the shared object from the user read set. In response to receiving the revoke read access command, the method may include: it is determined by the data processing hardware whether a corresponding write access token exists for the shared object in the user write set of the memory hardware. When a corresponding write access token is present, the method may include removing, by the data processing hardware, the write access token from the memory hardware.
After storing the read access right token of the shared object, the method may include: at data processing hardware, a search query for keywords in a file is received from a shared object. The search query may include a shared object identifier, a file identifier, and a cryptographic search value of a file-based read key, a key, and a shared object cryptographic key associated with the shared object. The method may further comprise: the read access right token of the shared object is retrieved from the user read set of the memory hardware by the data processing hardware, and the cryptographic set token is calculated by the data processing hardware based on the received cryptographic search value and the retrieved read access right token of the shared object. The method may further comprise: it is determined by the data processing hardware whether the calculated cryptographic word set token matches a corresponding cryptographic word set token of a word set stored in the memory hardware. When the calculated cryptographic word set token matches a corresponding cryptographic word set token of the word set, the method may include: the encrypted word metadata of the file associated with the key is retrieved from the memory hardware by the data processing hardware, and the set of search results is sent to the shared object by the data processing hardware. The search response may include encrypted file metadata and encrypted word metadata. The shared object is configured to: decrypting the encrypted file metadata using the read key; and decrypting the encrypted word metadata using the read key.
In some implementations, the method includes: at the data processing hardware, a write access token based on the file write key, the file identifier, the shared object identifier, and the shared object cryptographic key is received from the shared object. The method may further comprise: the write access token is stored by the data processing hardware in a user write set of the memory hardware, the user write set including a list of shared object identifiers associated with shared objects having write access to the file. The shared object may be configured to receive a write key for the file from the sharer over a secure and authenticated communication link. The method may further comprise: at the data processing hardware, receiving a revoke write access command from a sharer, the sharer revoke write access to a file stored on the memory hardware from a shared object; and removing, by the data processing hardware, the write access token of the shared object from the user write set.
Another aspect of the present disclosure provides a second method for sharing write access. The method comprises the following steps: at a shared object device associated with the shared object, a shared write access permission is received from a sharer sharing write access to a file stored on the distributed storage system to the shared object. The shared write access permissions include a read key for the file, a write key for the file, and encrypted metadata for the file. The method further comprises the steps of: a cryptographic write access weight is determined at the shared object device based on the write key of the file, the file identifier identifying the file, the shared object identifier identifying the shared object, and the shared object cryptographic key associated with the shared object. The cryptographic write access value grants write access to the shared object to the file. The method further comprises the steps of: a write access token for the shared object is sent from the shared object device to the distributed storage system. The write access token comprises a cryptographic write access value. In response to receiving the write access token, the distributed storage system is configured to store the write access token in the user write set. The user write set includes a list of shared object identifiers associated with shared objects having write access to the file.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the sharer is configured to revoke write access to files stored on the distributed storage system from the shared object (e.g., after sending the write access token of the shared object) by sending a revoke write access command to the distributed storage system. In response to receiving the revoke write access command, the distributed storage system is configured to remove the write access token of the shared object from the user write set. The method may further comprise: a cryptographic read access weight is determined at the shared object device based on the write key of the file, the file identifier, and the shared object cryptographic key. The cryptographic read access value may grant read access to the file to the shared object. Sending the read access token for the shared object may include cryptographically reading the access value and encrypted metadata of the file to the distributed storage system. The distributed storage system may be configured to store the read access token in the user read set in response to receiving the read access token. The user read set may include a list of shared object identifiers associated with shared objects having read access to the file.
The sharer may be configured to revoke read access to files stored on the distributed storage system from the shared object (e.g., after sending the read access token of the shared object) by sending a revoke read access command to the distributed storage system. In response to receiving the revoke read access command, the distributed storage system is configured to: removing the write access right token of the shared object from the user write set; and removing the read access token of the shared object from the user read set. The sharer may be configured to create metadata for the file prior to receiving a shared write access permission from the sharer; encrypting metadata of the file using the read key; and sending the shared write access permission to the shared object over the secure and authenticated communication link. Receiving the shared write access permission from the sharer may include receiving the shared write access permission from the sharer over a secure and authenticated communication link.
After sending the write access token for the shared object to the distributed storage system, the method may include: creating, by the user device, word metadata of a file associated with words in the file to be edited; and encrypting, by the user device, the character data using the read key of the file. The method may also include: the cryptographic edit value is calculated by the user device based on the read key of the file, the word identifier associated with the word in the file to be edited, the shared object cryptographic key associated with the shared object, the shared object identifier, and the write key of the file. The method may further comprise: an edit manipulation request including a cryptographic edit value, a shared object identifier, a file identifier, and encrypted character data is sent to a distributed storage system. The edit manipulation request may request the distributed storage system to process an edit manipulation on a word in a file to be edited.
In response to receiving the edit manipulation request from the user device, the distributed storage system may be configured to: a write access token is retrieved from the user write set and a cryptographic word set token is calculated based on the cryptographic edit value and the retrieved write access token of the shared object. When the editing operation requested by the editing operation request includes a delete operation, the distributed storage system may process the delete operation by removing a corresponding cryptographic word set token for the word set stored by the distributed storage system.
In response to receiving the edit manipulation request, the distributed storage system may be configured to: a write access token is retrieved from the user write set and a cryptographic word set token is calculated based on the cryptographic edit value and the retrieved write access token of the shared object. When the editing operation requested by the editing operation includes a rewrite operation, the distributed storage system may process the rewrite operation by rewriting a corresponding cryptographic word set token of a word set stored by the distributed storage system using the calculated cryptographic word set token and the cryptographic word metadata.
In response to receiving the edit manipulation request from the user device, the distributed storage system may be configured to: a write access token is retrieved from the user write set and a cryptographic word set token is calculated based on the cryptographic edit value and the retrieved write access token of the shared object. When the editing operation requested by the editing operation request includes an add operation, the distributed storage system may process the add operation by adding the calculated cryptographic word set token and the cryptographic word metadata to the word set stored by the distributed storage system.
Another aspect of the present disclosure provides a system for sharing read access to a file. The system includes a sharer device, a shared object device, data processing hardware of a storage system in communication with the sharer device and the shared object device, and memory hardware in communication with the data processing hardware. The sharer device is configured to create metadata for a file stored on the storage system and encrypt the metadata using a read key for the file and calculate a first cryptographic share value for the file. The first cryptographic sharing value is based on a write key of the file, a read key of the file, a file identifier identifying the file, and a shared object identifier identifying a shared object that receives shared read access to the file. The shared object device is associated with the shared object and is configured to receive a read key of the file from the sharer device over the secure and authenticated communication channel and calculate a second cryptographic share value of the file. The second cryptographic shared value may be based on a read key of the file and a shared object cryptographic key associated with the shared object. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operation includes: a shared read access command is received from a sharer device that shares read access to a shared object. The shared read access right command includes encrypted metadata of the file and a first cryptographic shared value. The operations also include: a shared read access request is received from the shared object device, the shared read access request including a shared object identifier, a file identifier, and a second cryptographic share value. The operations also include: a cryptographic read access value is determined based on the first cryptographic share value and the second cryptographic share value, the cryptographic read access value authorizing a shared object read access to the file. The operations further comprise: a user read set of memory hardware stores a read access token of a shared object including a cryptographic read access value and an encrypted value, the user read set including a list of shared object identifiers associated with the shared object having read access to a file.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, determining the cryptographic read access right includes multiplying the first cryptographic shared value and the second cryptographic shared value. The operations may further include: a revoke read access command is received from a sharer device that revokes read access to a file stored on the storage system from a shared object and removes the shared object's read access token from a user read set. In response to receiving the revoke read access command, the operations may include: determining whether a corresponding write access token exists in a user write set of the memory hardware for the shared object; and removing, by the data processing hardware, the write access token from the memory hardware when the corresponding write access token is present.
After storing the read access right token for the shared object, the operations may include: a search query for keywords in a file is received from a sharer device. The search query may include a shared object identifier, a file identifier, and a cryptographic search value of a file-based read key, a key, and a shared object cryptographic key associated with the shared object. The operations may further include: retrieving a read access token for the shared object from the memory hardware user read set; based on the received cryptographic search value and the read access right token of the retrieved shared object, a cryptographic word set token is calculated and it is determined whether the calculated cryptographic word set token matches a corresponding cryptographic word set token of a word set stored in memory hardware. When the calculated cryptographic word set token matches a corresponding cryptographic word set token of the word set, the method may include: retrieving encrypted word metadata of a file associated with the key from the memory hardware; and sending the search result set to the shared object device, the query response including the encrypted metadata and the encrypted word metadata. The shared object device may be configured to decrypt the encrypted metadata using the read key and decrypt the encrypted word metadata using the read key.
Another aspect of the present disclosure provides a second system for sharing write access to a file. The system includes a sharer device associated with a creator of a file stored on the distributed storage system, a shared object device in communication with the sharer device over a secure and authenticated communication channel, data processing hardware of the distributed storage system in communication with the sharer device and the shared object device, and memory hardware in communication with the data processing hardware. The shared object device is configured to receive a shared write access permission from a sharer device that shares write access to a file stored on the distributed storage system, determine a cryptographic write access value based on a write key of the file, a file identifier that identifies the file, a shared object identifier that identifies the shared object, and a shared object cryptographic key associated with the shared object, and determine a cryptographic read access value based on the write key of the file, the file identifier, and the shared object cryptographic key. The shared write access permissions include a read key for the file, a write key for the file, and encrypted metadata for the file. The cryptographic write access value grants write access to the file to the shared object. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operation includes: receiving a write access token of the shared object device from the shared object device, wherein the write access token comprises a password write access value; and storing the write access token in the user write set. The user write set includes a list of shared object identifiers associated with shared object devices having write access to the files. The operations also include: a cryptographic read access value of the shared object device and a read access token of encrypted metadata of the file are received from the shared object device, and the read access token is stored in the user read set. The user read set includes a list of shared object identifiers associated with shared object devices having read access to the files.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the operations include: a revoke write access command is received from the sharer device to revoke write access to files stored on the distributed storage system from the shared object device. In response to receiving the revoke write access command, operations include: the write access token of the shared object device is removed from the user write set. Operations may also include: a revoke read access command is received from the sharer device to revoke read access to files stored on the distributed storage system from the shared object device. In response to receiving the revoke read access command, the operations may also include: removing the write access right token of the shared object device from the user write set; and removing the read access right token of the shared object device from the user read set.
The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example system for sharing read and/or write access to one or more files stored on a distributed storage system.
FIG. 2A is a schematic diagram of an example read access right token stored in a user read set.
FIG. 2B is a schematic diagram of an example write access token stored in a user write set.
FIG. 3A is a schematic diagram of an example system in which a sharer shares read access rights to files stored on a distributed storage system to a shared object.
FIG. 3B is a schematic diagram of an example system that shares read access to files stored on a distributed storage system revoked from a shared object.
FIG. 4A is a schematic diagram of an example system in which a sharer shares write access to files stored on a distributed storage system to a shared object.
FIG. 4B is a schematic diagram of an example system that shares write access to files stored on a distributed storage system revoked from a shared object.
Fig. 5A and 5B are schematic diagrams of a user sending a search query to a searchable symmetric encryption manager for keywords in an encrypted file stored in a data store.
FIG. 5C provides an exemplary algorithm for a user to perform a search for keywords on a set of files for which the user has read access.
Fig. 6A and 6B are schematic diagrams of a user sending an edit operation request to a searchable symmetric encryption manager to process an edit operation on words in an encrypted file stored in a data store.
FIG. 6C provides an exemplary algorithm for a user to perform editing operations on words in a file for which the user has write access.
FIG. 7 is a flow chart of an example method for sharing read access rights to a file.
FIG. 8 is a flow chart of an example method for sharing write access to a file.
FIG. 9 is a schematic diagram of an example computing device.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
The searchable symmetric encryption scheme is customized to allow the cloud storage provider to provide search functionality on a collection of encrypted items (e.g., files, emails, calendar events, notes, database entries, etc.) that are uploaded and stored at the cloud storage provider. Implementations herein relate to allowing a customer (e.g., an enterprise) to encrypt its data locally using a customer-side key and without giving the cloud service provider clear text access to the encrypted data prior to uploading the data to the cloud service provider. That is, the cloud storage provider stores a cryptographic read access right token in the user read set for each user authorized by the client for read access rights of the corresponding file stored at the cloud storage provider. The cloud storage provider also stores a cryptographic write access token in the user write set for each user authorized by the client for write access to the corresponding file stored at the cloud storage system. The cryptographic read/write access token provides proof to the cloud storage provider that the corresponding user locally has the necessary key to access the file without the user exposing the key to the cloud storage provider. The implementation further includes recording a cryptographic word set token in the word set for each unique pair of words and files for which the words appear in the corresponding file. Here, the cloud storage provider asks the user to provide evidence of proper permissions to access any cryptographic word set token in the word set by its cryptographic read/write access right token in the user read/write set. Thus, the cloud storage provider is able to provide cryptographic assurance when read/write access is revoked/granted without the ability to determine the value of any cryptographic token stored in the user read/write set and word set.
Referring to FIG. 1, in some implementations, the system 100 includes one or more user devices 110, 110a-n associated with one or more users 10, 10a-n that may communicate with a remote system 140 via a network 130. The user devices 110 may also communicate with each other over the secure and authenticated channel 120 without revealing any data or private information to the distributed system 140. Remote system 140 may be a distributed system (e.g., cloud environment) with scalable/resilient resources 142. The resources 142 include computing resources 144 and/or storage resources 146. In some implementations, the remote system 140 includes a data store 150 (e.g., a distributed storage system or data store) configured to store one or more files 200, 200a-n in memory hardware. The data store 150 stores encrypted files 200, which encrypted files 200 may be modified (e.g., added/deleted/edited) by users 10 having write access and/or may be searched by users 10 having read access. As used herein, file 200 may refer to any encrypted item uploaded to remote system 140 for storage within data store 150, such as, but not limited to, an email, a calendar event, a note, a database entry, and the like. In some examples, remote system 140 executes a Searchable Symmetric Encryption (SSE) manager 160 for managing access to encrypted files 200 in data store 150.
User device 110 may be any computing device capable of communicating with one another over network 130 and SSE manager 160 and/or over secure and authenticated channel 120. In the example shown, user 10a is associated with a creator/sharer of one or more files 200 encrypted and stored in data store 150, and user 10n may be associated with a shared object with which creator/sharer 10 shares at least one of write access or read access to any of the encrypted files 200 stored in data store 150. The read access provides the shared object 10n with a search function for each file 200 that the shared object 10n has read access to, while the write access provides the shared object 10n with the ability to modify/edit the search results of each file 200 that the shared object 10n has write access to. The user 10 without read/write access to the encrypted files 200 cannot learn any information about those encrypted files 200. The creator/sharer 10a has read/write access to each file 200 created by the sharer 10a and stored in the data store 150 of the remote system 150. In some examples, creator/sharer 10a revokes read and/or write access to the previous sharing of file 200 from shared object 10 n.
In some implementations, the data store 150 stores a set of file records 210, 210a-n for each encrypted file 200. The creator 10 of each file 200 may generate a secure random file identifier d. Each set of file records 210 includes a user read set (UserRead) 220, a user write set (UserWrite) 230, and a set of file words 240. The user read set 220 includes a user identifier u associated with the user 10 having (or not having) read access to the corresponding file 200 of the file record set 210 1 、u 2 、...、u n Is a set of (3). For example, the user reads the location (u 1 D) 212 and position (u) n D) 212 each comprise a corresponding read access right token T R1 、T Rn 222, the read access right token T R1 、T Rn 222 to and user identifier u 1 、u n Associated user 10 authorizes pairs of textThe read access rights of the file 200 associated with the piece identifier d. In contrast, because of the location (u 2 D) 212 does not include a corresponding read access right token T R 222, so with the user identifier u 2 The associated user 10 does not have read access to the file 200. In particular with the user identifier u 2 The associated user 10 does not possess the cryptographic primitives required by the SSE manager 160 for authorizing read access to the file 200.
The user write set 230 includes a user identifier u associated with a user 10 having (or not having) write access to the corresponding file 200 of the file record set 210 1 、u 2 Collection of the third. For example, the user writes the location (u 1 D) 212 includes a corresponding write access token T W1 232, the write access right token T W1 232 grants write access to the file 200 associated with the file identifier d to the user 10 associated with the user identifier u 1. Instead, the user writes the location (u 2 D) 212 and position (u) n D) 212 does not include a corresponding write access token T W 232, thus, with the user identifier u 2 、u n The associated user 10 does not have write access to the file 200. In particular with the user identifier u 2 、u n The associated user 10 does not possess the encryption primitives required by the SSE manager 160 to authorize write access to the file. Thus, with user identifier u n The associated user 10 has read access to the file 200 (i.e., the location (u n D) 212 includes a corresponding read access right token T Rn 222 But no write access rights to the file 200 (i.e., the location (u) of the user write set 230 n D) 212 does not include a corresponding write access token T W 232)。
The set of words 240 includes a set of words w1, w2, w3, and, where each word appears in the corresponding file 200 associated with the file identifier d. For each unique word-file pair (w 1 ，d)、(w 2 ，d)、(w 3 ，d)、...、(w n D), the word set 240 may record the corresponding cipher word token z for word w d (FIG. 5A) and corresponding encrypted word data m w 556 (FIG. 5B). Encryption word metadata m w Word metadata M comprising a file d associated with a word w d Encryption of (w). Character metadata M d (w) may include a rank, extension, abstract, etc. associated with word w in file 200. The user 10 must have the correct permissions to access any of the cryptographic word tokens in the word set 240. For example, the user 10 may use a corresponding read access token T R To determine the value of the cryptographic token.
With continued reference to fig. 1, a user device 110a associated with the creator/sharer 10a may generate a cryptographic user key K associated with the sharer 10a u 112. Cipher read key for file d 200file d 200 +.>file d 200 d 206。M d 206 may include the title of the file 200 and/or other information associated with the file. User device 110a may be enabled by using the read key +. >pairs M d 206 to calculate the encrypted metadata m associated with the file d 200 d 256. In some examples, the user device 110a locally generates a read access token T associated with the creator/sharer 10a R 222a and sends a read access token T to the SSE manager 160 R 222a for input to the user read set 220. Similarly, the user device 110a may locally generate a write access token T associated with the creator/sharer 10a W 232a, and will write access right token T W 232a are sent to the SSE manager 160 for input to the user write set 230.
Creator/sharingThe person 10a can obtain the counter key K u 112、remote system 140. For example, the creator/sharer 10a may provide the SSE manager 160 with a read access token 222a to prove that the sharer 10a locally owns the user key K u 112 and a read key for read access to the encrypted file 200 stored in the data memory 150 +.>SSE manager 160 to prove that the sharer 10a locally owns the user key K u 112 and a write key for write access to the encrypted file 200 stored in the data storage area 150 +. >data store 150 when accessing encrypted file 200 stored in data store 150 u 112、/>
Referring to FIG. 2A, the read access token 222 includes a corresponding location (u, d) 212 in the user read set 220, a cryptographic read access value 224, and encrypted metadata m d 256. In some examples, possession of the write key encrypted metadata m d 256 is usedThe user 10 may generate the read access token 222 locally and send the read access token 222 to the SSE manager 160 for input to the user read set 220 at the corresponding location (u, d) 212. In other examples, when user 10 corresponds to having only the read key +.>access token 222 for the user 10 and insert the read access token 222 into the user read set 220 at the corresponding location (u, d) 212. In the example shown, the cryptographic read access right 224 comprises a write key +.>key K u 112 and the pseudo-random function F of the file identifier d. The cryptographic read access weight 224 may be calculated, for example, as follows.
Referring to fig. 2B, the write access token 232 includes a corresponding location (u, d) 212 in the user write set 230 and a cryptographic write access value 234. And possession of write key write access token 232 for the user 10 and send the write access token 232 to the SSE manager 160 for input to the user write set 230 at the corresponding location (u, d) 212. In the example shown, the cryptographic write access right 234 comprises a write key +.>key K u 112 and the pseudo-random function F of the user identifier u. The cryptographic write access weight 234 may be calculated, for example, as follows.
In some implementations, the creator/sharer 10a shares read access to the file 200 stored in the data store 150 (e.g., memory hardware) to at least one shared object 10n by sending a shared read access command 250 to the SSE manager 160 via the network 130. Shared read access command 250 includes encrypted metadata m d 256 and read key basedvalue S 1 252. Creator/sharer 10a also provides at least one shared object 10n with the read key of file 200 +.>communication link 120>remote system 140 and onlyIs provided to a user 10 having read access.
To obtain read access to the file 200, the user device 110n associated with the shared object 10n sends a read access request 260 to the SSE manager 160. The read access request 260 includes a shared object identifier u n File identifier d and read key baseduser key Kun 112 associated with the shared object 10n 2 262. In some implementations, in response to receiving the read key from sharer 10a +.>value S 2 262. The SSE manager 160 uses the first cryptographic shared value S received from the sharer 10n in the shared read access right command 250 1 252 and a second cryptographic shared value S received from the shared object 10a 2 262, calculating a corresponding read access right token T for the shared object 10n Rn 222. Thereafter, SSE manager 160 will share the read access right token T of object 10n Rn 222 are stored/recorded in the user read set 220 at locations 212 (u n D).
In some implementations, the sharer 10a shares write access to the file 200 in the data store 150 to at least one shared object 10n by sending a shared write access permission 402 (fig. 4A) to the shared object 10n over the secure and authenticated communication link 120. In the example shown, the shared write access permissions include a read key encrypted metadata m d 256. In response to receiving the shared write access permissions 402, the shared object 10n computes a shareCorresponding write access token T for object 10n W 232 and will write access right token T W 232 to the SSE manager 160 to send the message at the corresponding location 212 (u n D) to the user write set 230. Since write access implies read access, the shared object 10n also calculates a corresponding read access token T for the shared object 10n R 222 and will read the access right token T R 222 to the SSE manager 160 to send the message at the corresponding location 212 (u n D) to the user read set 220.
Fig. 3A and 3B illustrate diagrams 300a, 300B of the example SSE manager 160 authorizing/revoking read access to a file 200 to/from a shared object 10B. Referring to fig. 3a, the sse manager 160 receives a shared read access right command 250 from a sharer 10a sharing read access rights to a file 200 stored in a data memory 150 (e.g., memory hardware) to a shared object 10 b. The shared access right read command 250 includes a first cryptographic share value S associated with the file 200 1 252 and encryption metadata m d 256. In the example shown, the first password shares a value S 1 252 includes a write key
In response to receiving the read key from sharer 10a object 10b u2 112 to calculate a second cryptographic shared value S 2 262. In the example shown, the second password shares a value S 2 262 includes a read key->key K u2 112 and a pseudo-random function F that identifies the file identifier d of the file 200. For example, the second password-sharing value S may be calculated as follows 2 262。
Referring to fig. 3b, the sse manager 160 receives a read access to the file 200 stored in the data storage 150 from the sharer 10a to revoke the shared object 10b The read access command 350 is revoked. In the example shown, the sharer 10a corresponds to the creator of the file and is the only individual who is allowed to revoke read access (and write access) to any shared object 10 that has permission for read access. In other configurations, the sharer 10a may correspond to an author of the file 200 having the ability to share/revoke read access to the file 200 to/from the shared object 10. The revoke read access command 350 may identify the location 212 (u 2 D), position 212 (u 2 D) includes a read access entry (e.g., read access token 222) in the user read set 220 to be removed from the corresponding shared object 10 b. In response to receiving the revoke read access command 350, the SSE manager 160 may send a revoke read access input 352 (e.g., "delete entry") to the set of data records 210 to remove the read access token T from the set of user reads 220 R2 222. Thus, in the process of introducing the token T R2 222 reads the locations 212 (u) in the set 220 from the user 2 D) removed, the shared object 10b no longer has read access permission to the file 200.
In some examples, SSE manager 160 also determines whether a corresponding write access token T exists for shared object 10b at location 212 (u 2, d) in user write set 230 W2 232, and when a write access token T is present W2 232, SSE manager 160 also removes the write access token T from the user write set 230 W2 232. For example, SSE manager 160 may send revoked write access input 452 (FIG. 4B) to data record set 210 to remove write access token T from user write set 230 R2 222。
Fig. 4A and 4B illustrate diagrams 400a, 400B of the example SSE manager 160 authorizing/revoking write access rights to a file 200 to/from a shared object 10B. Referring to fig. 4A, the shared object 10b receives (i.e., via the user device 110b (fig. 1)) a write access permission 402 from a sharer 10a sharing write access to the file 200 stored in the data storage 160 to the shared object 10 b. The shared object 10b may receive the write access permission 402 over the secure and authenticated communication link 120. Shared write access permissions402 includes a read key encrypted metadata m d 256。
Using the write access permissions 402, the shared object 10b calculates a read access token T for the shared object 10b because having write access permissions also includes read access permissions R2 222 and the shared object 10b write access token T W2 232. For example, the shared object 10b may calculate the cryptographic read access weight 224 using equation 1, and will include the cryptographic read access weight 224 and the encrypted metadata m d 256 read access token T R2 222 to the SSE manager 160. Similarly, the shared object 10b may calculate the cryptographic write access value 234 using equation 2 and will include the write access token T of the cryptographic write access value 234 W2 232 to the SSE manager 160. The shared object 10b may send the tokens 222, 232 to the SSE manager separately or simultaneously.
In the example shown, SSE manager 160 responds to receipt of a write access token T from shared object 10b W2 232, write access right token T of shared object 10b W2 232 are stored/recorded in the user write set 230 at locations 212 (u 2 D). Thus, at position 212 (u 2 Write access token T in user write set 230 at d) W2 The entry of 232 grants write access to the shared object 10b to edit (e.g., delete/overwrite/add) the file 200 stored in the data store 160 without providing any private key to the remote system 140.
The SSE manager 160 is also responsive to receiving a read access token T from the shared object 10b R2 222 to share the read access right token T of the object 10b R2 222 are stored/recorded in the user read set 220 at locations 212 (u 2 D). Thus, a location 212 (u 2 Reading at d)Take access right token T R2 222 grant read access to the file 200 stored in the data store 160 to the shared object 10b without providing any private key to the remote system 140.
Referring to fig. 4b, the sse manager 160 receives a revoke write access command 450 from the sharer 10a, which sharer 10a revokes write access to the file 200 stored in the data storage 150 from the shared object 10 b. In the example shown, the sharer 10a corresponds to the creator of the file 200 and is the only person allowed to revoke write access (and read access) from any shared object 10 having permission for write access. In other configurations, the sharer 10a may correspond to an author of the file 200 having the ability to share/revoke write access to the file 200 to/from the shared object 10. The revoke write access command 450 can identify the location 212 (u 2 D), position 212 (u 2 D) includes a write access entry (e.g., write access token 232) in the user write set 230 to be revoked from the corresponding shared object 10 b. In response to receiving the revoke write access command 450, the SSE manager 160 can send a revoke write access input 452 (e.g., "delete entry") to the set of data records 210 to remove the write access token T from the set of user writes 230 W2 232. Thus, in the process of introducing the token T W2 232 from the location 212 (u 2 With the removal at d), the shared object 10b no longer has write access permissions to the file 200. In the example of FIG. 4B, the read access token T is not received by the SSE manager 160 from the sharer 10B to revoke the read access command 350 (FIG. 3B) R2 222 will remain as valid entries in the user read set 220 at locations 212 (u 2 D). The file owner 10 may take the role of the SSE manager 160 for granting/revoking access rights.
Fig. 5A and 5B illustrate schematic diagrams 500a, 500B of an example user 10 sending a search query 550 to an SSE manager 160 via a user device 110 for keywords w in an encrypted file 200 stored in a data store 150. In some cases, SSE manager 160 may correspond to the owner of the file. In the example shownThe user 10 has read access to the encrypted file 200 and may correspond to the creator 10a of the file 200 or the shared object 10a having shared read access to the file 200. In the example shown, search query 550 includes user identifier u, file identifier d, and a read-based key key K u 112 and a file identifier d of the identification file 200. For example, a password search value x d 552 may be calculated as follows.
In some examples, generator g corresponds to a Diffie-Hellman harder group. Cipher search value x d 552 allow SSE manager 160 to determine that user 10 has access to the password read keykey K u 112 without requiring the user 10 to provide either of the keys 112, 202 to the SSE manager 160.
In some implementations, the user 10 sends a set of files U that have read access at the user 10 r (u) search query 550 for keyword w at 200. Thus, user 10 can use equation (5) for file set U r (u) each corresponding file 200 in 200 calculates x d 、x d1 、...、x dn And x is d 、x d1 、...、x dn Each value and each corresponding file identifier d, d 1 、....、d n Including in transmissionIn a search query 550 to SSE manager 160. The user device 110 associated with the user 10 may track each file 200 that the user 10 has read access permission to and include those files 200 in the set of files U r (u) 200.
In response to receiving the search query 550 from the user 10, the SSE manager 160 queries 560 the set of file records 210 to retrieve the read access token T for the user 10 from the user read set 220 of the set of file records 210 at location 212 (u, d) R 222. When a search query 550 and a set of files U are received from user 10 r (u) 200, the SSE manager 160 may query 560 each set of file records 210, 210a-n. The SSE manager 160 retrieves the read access right token T from the user read set 220 R 222 includes a corresponding cryptographic read access value y d 224 and encrypted metadata m d 256。
Referring to FIG. 5B, in some implementations, SSE manager 160 (e.g., data processing hardware) searches for a value x based on a password received from user 10 in search query 550 d 552 and read access token T retrieved from user read set 220 R 222 cryptographic read access rights y d 224 to calculate a cipher word set token z d . For example, SSE manager 160 can calculate a cryptographic word set token z as follows d 。
Thereafter, SSE manager 160 determines the calculated cipher word set token z d Whether or not to correspond to at least one of the encrypted word set tokens z recorded/stored in the word set 240 of the corresponding file 200 d Matching. Here, SSE manager 160 is determining the most recently computed token z d Whether or not it is present in the word set 240 associated with the corresponding file 200. In the illustrated example, SSE manager 160 uses a cipher word set token z d The word set 240 is queried 570. When query 570 identifies a corresponding cipher word set token z d When SSE manager 160 retrieves and matches token z at location (w, d) in word set 240 d Correspondence of associated word wIs the encrypted word metadata m of (1) w 556。
In some implementations, the SSE manager 160 returns a result set 580, the result set 580 including a file identifier d identifying the corresponding file 200, the encrypted metadata m of the file 200 d 256 and encryption word metadata m w 556. The SSE manager 160 can return a corresponding result set 580 for each file that the user 10 has read access to. Using a read key encrypted metadata m d 256 to provide metadata M d And decrypting the encrypted word data to provide the word data M of the file d associated with the word w d (w). In some examples, user device 110 uses metadata M d And the word metadata M of the file d associated with the word w d (w) to rank and display the search results on the display of the user device 110. For example, character metadata M d (w) may include summaries, rankings, extensions, etc. that may be used to rank search results on the display of user device 110. Fig. 5C provides an exemplary algorithm for the user 10 to perform a search for the keyword w on the set of files Ur (u) 200 for which the user has read access.
Fig. 6A and 6B show schematic diagrams 600a,600B of an example user 10 sending an edit operation request 650 to the SSE manager 160 via the user device 110 to edit a word w in an encrypted file 200 stored in the data store 150. In some cases, SSE manager 160 may correspond to the owner of the file. In the example shown, the user 10 has write access permissions to the encrypted file 200 and may correspond to the creator 10a of the file 200 or the shared object 10n having shared write access to the file 200. The editing operation 654 requested by the editing operation request 650 may include one of a delete, rewrite, or add operation to the keyword w in the file 200. In the example shown, the user 10 creates, for the file d, word metadata M associated with a word identifier w identifying the word to be edited d (w). Character metadata M d (w) may be included in the identification file 200A rank, extension, snippet, etc. associated with the word identifier w of the word to be edited. The user can use the read keycharacter metadata m w 556. In some implementations, the user 10 via the user device 110 is based on the read key +.>
In the illustrated example, the edit manipulation request 650 includes a user identifier u, a file identifier d, an edit manipulation 654, encrypted word metadata m w 556 and read-based key key K u 112. A word identifier w and a cryptographic edit value x 652 identifying a user identifier u of the user 10. In some implementations, the cryptographic edit value x 652 includes the read key of generator g +.>key K u 112 and user identifier u multiplied by a write key +.>
In some examples, generator g corresponds to a Diffie-Hellman harder group. The password edit value x 652 allows the SSE manager 160 to determine that the user 10 has access to the password read keykey K u 112 without requiring the user 10 to provide any of the keys 112, 202, 204 to the SSE manager 160.
In response to receiving the edit manipulation request 650 from the user 10, the SSE manager 160 queries 660 the set of file records 210 to retrieve the write access token T for the user 10 from the set of user writes 230 at location 212 (u, d) w 232. The SSE manager 160 retrieves a write access token T from the user write set 230 W 222 includes a corresponding cryptographic write access weight y 234.
Referring to FIG. 6B, in some implementations, SSE manager 160 (e.g., data processing hardware) is based on a cryptographic edit value x 652 received from user 10 in edit operation request 650 and a write access token T retrieved from user write set 230 W The password of 232 is written to the access weight y234 to calculate the password word set token z. For example, SSE manager 160 can compute a cryptographic word set token z as follows.
z＝x y (7)
Thereafter, SSE manager 160 processes 670 the corresponding cryptographic word set token z recorded/stored in the word set 240 of the corresponding file 200 for the editing operation 654 requested by editing operation request 650. For example, when editing operation 654 includes a delete operation, SSE manager 160 may process the delete operation by deleting/removing the corresponding cryptographic word set token z from word set 240. In some examples, when the editing operation 654 includes a rewrite operation, the SSE manager 160 encrypts the word metadata m by using the calculated cryptographic word set token z d 556 replace corresponding cipher word set in word set 240Token z handles 670 the rewrite operation. In yet another example, when the editing operation 654 includes an add operation (e.g., when z is not present in the word set 240), the SSE manager 160 performs the editing operation by combining the calculated encrypted word set token z and the encrypted word metadata m w 556 are added to the word set 240 at locations (w, d) to handle the add operation. Fig. 6C provides an exemplary algorithm for the user 10 to perform a search for the keyword w on the set of files Ur (u) 200 for which the user has read access.
FIG. 7 is a flow diagram of an example method 700 of sharer 10a sharing read access rights to a file 200 stored in data store 150 to a shared object 10 b. The flowchart begins at operation 702 when the SSE manager 160 (e.g., data processing hardware) receives a shared read access right command 250 from the sharer 10 a. The shared read access right command 250 includes a first cryptographic shared value S 1 252 and encrypted metadata m associated with file 200 d 256. First password shared value S 1 252 may be based on a write key of a file
In operation 704, the method 700 includes the SSE manager 160 receiving a shared read access request 260 from the shared object 10b, the shared read access request 260 including the second cryptographic shared value S 2 262 and a shared object identifier u 2 Location 212 associated with file identifier d. In some examples, the shared object 10b is based on a read key object 10b u2 112 to calculate a second cryptographic shared value S 2 262. For example, equation (4) may be used to calculateSecond password shared value S 2 262。
In operation 706, the method 700 includes the SSE manager 160 sharing the value S based on the first password l 252 and a second password sharing value S 2 262 determines the cryptographic read access weight 224 of the shared object 10 b. For example, SSE manager 160 can share a first cryptographic share value S received in a shared read access command 250 from sharer 10a 1 252 with a second cryptographic shared value S received in a shared read access request 260 from the shared object 10b 2 262 to determine the cryptographic read access weight 224 of the shared object 10 b. The SSE manager 160 can use the cryptographic read access value 224 to grant the shared object 10b read access rights to the file 200 stored in the memory hardware.
At operation 708, the method includes the SSE manager 160 storing in a user read set 220 of memory hardware a cryptographic read access right 224 and cryptographic metadata m d 256, and a read access token 222. The user read set 220 includes a shared object identifier u associated with a shared object having read access to the file 200 1 –u n Is a list of (3).
FIG. 8 is a flow diagram of an example method 800 for sharer 10a to share write access to a file 200 stored on a distributed storage system 150 to a shared object 10 b. The flowchart begins at operation 802 when the shared object device 110 associated with the shared object 10b receives a shared write access permission 402 from a sharer 10b that shares write access to a file stored on the distributed storage system to the shared object 10 b. Write access permissions 402 include the read key for file 200file 200 d 256. The shared object device 110 may receive the write access permission 402 from the sharer 10a through a secure and authenticated communication channel.
At operation 804, the method 800 includes the shared object device 110 being based on the write key file 200, a shared object identifier u identifying the shared object 10b, and a shared object cryptographic key K associated with the shared object 10b U 112 to determine a cryptographic write access weight 234. The cryptographic write access weight 234 may be calculated using equation (2). The cryptographic write access value 234 grants write access to the file 200 to the shared object 10 b.
At operation 804, the method 800 includes transmitting a write access token 232 of the shared object 10b including the cryptographic write access value 234 to the distributed storage system 150. In response to receiving the write access token 232, the distributed storage system 150 is configured to store the write access token in the user write set 230. The user write set 230 includes a list of shared object identifiers associated with the shared object 10 having write access to the file 200.
Since write access implies read access, the method 800 may further include the sharing device 110 being based on the write key key K U 112 to determine a cryptographic read access weight 224. The cryptographic read access weight 224 may be calculated using equation (1). The cryptographic read access value grants read access to the file 200 to the shared object 10 b. The method 800 may further include the shared object device 110 sending the read access token 222 of the shared object 10b to the distributed storage system 150. The read access token 222 may include a cryptographic read access value 224 and cryptographic metadata m d 256。
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," app, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
The non-transitory memory may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by the computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., typically for firmware such as a boot program). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
FIG. 9 is a schematic diagram of an example computing device 900 that may be used to implement the systems and methods described in this document. Computing device 900 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The storage device 930 is capable of providing mass storage for the computing device 900. In some implementations, the storage device 930 is a computer-readable medium. In various different implementations, storage device 930 may be an array of floppy disk devices, hard disk devices, optical disk devices, or tape devices, flash memory or other similar solid state storage devices, or devices included in a storage area network or other configuration. In a further implementation, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as the methods described above. The information carrier is a computer-or machine-readable medium, such as the memory 920, the storage device 930, or memory on processor 910.
The high speed controller 940 manages bandwidth-intensive operations of the computing device 900 while the low speed controller 960 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some implementations, a high-speed controller 940 is coupled (e.g., by a graphics processor or accelerator) to the memory 920, the display 980, and the high-speed expansion port 950, the high-speed expansion port 950 may accept various expansion cards (not shown). In some implementations, a low speed controller 960 is coupled to the storage device 930 and the low speed expansion port 970. The low-speed expansion port 970, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices such as a keyboard, a pointing device, a scanner, or a network device such as a switch or router, for example, through a network adapter.
As shown, computing device 900 may be implemented in a number of different forms. For example, it may be implemented as a standard server 900a or as a laptop computer 900b multiple times in a group of such servers 900a or as part of a rack server system 900 c. In some implementations, the computing device 900 implements the SSE manager 160.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementations in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to a storage system, at least one input device, and at least one output device to receive data and instructions therefrom, and to transmit data and instructions thereto.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. The terms "machine-readable medium" and "computer-readable medium" as used herein refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs), including a machine-readable medium that receives machine instructions as a machine-readable signal.
Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Furthermore, the subject matter described in this specification can be implemented as one or more computer program products, i.e., one or more modules of computer program instructions encoded on a computer readable medium for execution by, or to control the operation of, data processing apparatus. The computer readable medium can be a machine readable storage device, a machine readable storage substrate, a storage device, a composition of matter effecting a machine readable propagated signal, or a combination of one or more of them. The terms "data processing apparatus", "computing apparatus" and "computing processor" encompass all means, apparatus and machines for processing data, including, for example, a programmable processor, a computer, or a plurality of processors or computers. In addition to hardware, the apparatus may include code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them. The propagated signal is an artificially generated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus.
A computer program (also known as an application, program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. The computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language file), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store portions of one or more modules, sub-programs, or code). A computer program can be deployed to be executed on one computer or on multiple computers that are located on one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, the computer need not have such a device. Furthermore, the computer may be embedded in another device, such as a mobile phone, a Personal Digital Assistant (PDA), a mobile audio player, a Global Positioning System (GPS) receiver, to name a few. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices including, for example: semiconductor memory devices such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; and CD ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the disclosure may be implemented on a computer having a display device such as a CRT (cathode ray tube), LCD (liquid crystal display) monitor or touch screen for displaying information to the user and optionally a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer. Other types of devices may also be used to provide interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending files to and receiving files from the device used by the user, e.g., by sending Web pages to a Web browser on the user's client device in response to requests received from the Web browser.
One or more aspects of the present disclosure may be implemented in a computing system that includes a back-end component, e.g., as a data server; or include middleware components, such as an application server; or a client computer including a front-end component, e.g., a graphical user interface or Web browser through which a user may interact with an implementation of the subject matter described in this specification; or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), inter-networks (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. The client and server are typically remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., results of user interactions) may be received from the client device at the server.
While this specification contains many specifics, these should not be construed as limitations on the scope of the disclosure or of what may be claimed, but rather as descriptions of features specific to particular implementations of the disclosure. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, although operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Many implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results.
Claims (29)
1. A method (700) for sharing read access rights to a document, comprising:
at data processing hardware (160), receiving a shared read access command (250) from a sharer (10 a) to share read access to a file (200) stored in memory hardware (150) in communication with the data processing hardware (160) to a shared object (10 b), the shared read access command (250) comprising an encryption value (256) and a first cryptographic share value (252), the first cryptographic share value (252) being based on a write key (204) of the file (200), a read key (202) of the file (200), a file identifier (d) identifying the file (200), and a shared object identifier (u 2) identifying the shared object (10 b);
Receiving, at the data processing hardware (160), a shared read access request (260) from the shared object (10 b), the shared read access request (260) comprising the shared object identifier (u 2), the file identifier (d) and a second cryptographic shared value (262), the second cryptographic shared value (262) being based on the read key (202) of the file (200) and a shared object cryptographic key (112) associated with the shared object (10 b);
multiplying, by the data processing hardware (160), the first cryptographic share value (252) and the second cryptographic share value (262) to determine a cryptographic read access value (224), the cryptographic read access value (224) authorizing the shared object (10 b) read access to the file (200); and
-storing, by the data processing hardware (160), a read access token (222) of the shared object (10 b) in a user read set (220) of the memory hardware (150), the read access token (222) comprising the cryptographic read access value (224) and the cryptographic value (256), the user read set (220) comprising a list of shared object identifiers (u 2) associated with shared objects (10 b) having read access to the file (200).
2. The method (700) of claim 1, wherein the sharer (10 a) is configured to:
-sending the read key (202) of the file (200) to the shared object (10 b) over a secure and authenticated communication link (120);
creating metadata of the file (200);
-calculating said encrypted value (256) by encrypting said metadata of said file (200) using said read key (202); and
-sending the shared read access right command (250) to the data processing hardware (160).
3. The method (700) of claim 1, wherein the first cryptographic shared value (252) is calculated based on a function of the write key (204) and the file identifier (d) divided by a function of the read key (202) and the shared object identifier (u 2).
4. The method (700) of claim 1, wherein the second cryptographic share value (262) is calculated based on a function of the read key (202) and the shared object identifier (u 2) divided by a function of the shared object cryptographic key (112) and the file identifier (d).
5. The method (700) of claim 1, further comprising:
-receiving, at the data processing hardware (160), a revoke read access command (350) from the sharer (10 a) to revoke read access to the file (200) stored on the memory hardware (150) from the shared object (10 b); and
-removing, by the data processing hardware (160), the read access token (222) of the shared object (10 b) from the user read set (220).
6. The method (700) of claim 5, further comprising:
responsive to receiving the revoke read access command (350), determining, by the data processing hardware (160), whether a corresponding write access token (232) exists for the shared object (10 b) in a user write set (230) of the memory hardware (150); and
-removing, by the data processing hardware (160), the write access token (232) from the memory hardware (150) when the corresponding write access token (232) is present.
7. The method (700) of claim 1, further comprising, after storing the read access right token (222) of the shared object (10 b):
receiving, at the data processing hardware (160), a search query (550) for a keyword in the file (200) from the shared object (10 b), the search query (550) including a cryptographic search value (552), the cryptographic search value (552) being based on the read key (202) of the file (200), the keyword, and the shared object cryptographic key (112) associated with the shared object (10 b);
-retrieving, by the data processing hardware (160), the read access token (222) of the shared object (10 b) from the user read set (220) of the memory hardware (150);
computing, by the data processing hardware (160), a cryptographic word set token (z) based on the received cryptographic search value (552) and the retrieved read access token (222) of the shared object (10 b);
determining, by the data processing hardware (160), whether the calculated cryptographic word set token (z) matches a corresponding cryptographic word set token (z) of a word set (240) stored in the memory hardware (150); and
when the calculated cryptographic word set token (z) matches the corresponding cryptographic word set token (z) of the word set (240):
retrieving, by the data processing hardware (160), encrypted word metadata (556) of the file (200) associated with the key from the memory hardware (150); and
-sending, by the data processing hardware (160), a set of search results (580) to the shared object (10 b), the set of search results (580) comprising the encrypted value (256) and the encrypted word metadata (556).
8. The method (700) of claim 7, wherein the shared object (10 b) is configured to:
Decrypting the encrypted value (256) using the read key (202); and
-decrypting said encrypted word data (556) using said read key (202).
9. The method (700) according to any one of claims 1-8, further comprising:
-receiving, at the data processing hardware (160), a write access token (232) from the shared object (10 b), the write access token (232) being based on a write key (204) of the file (200), the file identifier (d), the shared object identifier (u 2) and the shared object cryptographic key (112); and
storing, by the data processing hardware (160), the write access token (232) in a user write set (230) of the memory hardware (150), the user write set (230) comprising a list of shared object identifiers (u 2) associated with shared objects (10 b) having write access to the file (200),
wherein the shared object (10 b) is configured to receive the write key (204) of the file (200) from the sharer (10 a) over a secure and authenticated communication link (120).
10. The method (700) of claim 9, further comprising:
-receiving, at the data processing hardware (160), a cancel write access command (450) from the sharer (10 a) to cancel write access from the shared object (10 b) to the file (200) stored on the memory hardware (150); and
-removing, by the data processing hardware (160), the write access token (232) of the shared object (10 b) from the user write set (230).
11. A method (800) for sharing write access to a document, comprising:
receiving, at a shared object device (110 b) associated with a shared object (10 b), a shared write access permission (402) from a sharer (10 a) to share write access to a file (200) stored on a distributed storage system (150) to the shared object (10 b), the shared write access permission (402) comprising a read key (202) of the file (200), a write key (204) of the file (200), and encrypted metadata (256) of the file (200);
-determining, by the shared object device (110 b), a cryptographic write access value (234) based on the write key (204) of the file (200), a file identifier (d) identifying the file (200), a shared object identifier (u 2) identifying the shared object (10 b) and a shared object cryptographic key (112) associated with the shared object (10 b), the cryptographic write access value (234) authorizing write access to the file (200) to the shared object (10 b); and
-sending a write access token (232) of the shared object (10 b) from the shared object device (110 b) to the distributed storage system (150), the write access token (232) comprising the cryptographic write access value (234), the distributed storage system (150) being configured to store the write access token (232) in a user write set (230) in response to receiving the write access token (232), the user write set (230) comprising a list of shared object identifiers (u 2) associated with the shared object (10 b) having write access to the file (200).
12. The method (800) of claim 11, wherein the sharer (10 a) is configured to revoke write access to the file (200) stored on the distributed storage system (150) from the shared object (10 b) by sending a revoke write access command (450) to the distributed storage system (150), the distributed storage system (150) being configured to remove the write access token (232) of the shared object (10 b) from the user write set (230) in response to receiving the revoke write access command (450).
13. The method (800) of claim 11, further comprising:
-determining, by the shared object device (110 b), a cryptographic read access value (224) based on a write key (204) of the file (200), the file identifier (d) and the shared object cryptographic key (112), the cryptographic read access value (224) authorizing the shared object (10 b) read access to the file (200); and
-transmitting a read access token (222) of the shared object (10 b) containing the cryptographic read access value (224) and the encrypted metadata of the file (200) to the distributed storage system (150), the distributed storage system (150) being configured to store the read access token (222) in a user read set (220) in response to receiving the read access token (222), the user read set (220) comprising a list of shared object identifiers (u 2) associated with shared objects (10 b) having read access to the file (200).
14. The method (800) of claim 13, wherein the sharer (10 a) is configured to revoke read access to the file (200) stored on the distributed storage system (150) from the shared object (10 b) by sending a revoke read access command (350) to the distributed storage system (150), the distributed storage system (150) being configured to, in response to receiving the revoke read access command (350):
-removing the write access token (232) of the shared object (10 b) from the user write set (230); and
-removing the read access token (222) of the shared object (10 b) from the user read set (220).
15. The method (800) of claim 11, wherein the sharer (10 a) is configured to:
-creating the metadata of the file (200);
encrypting the metadata of the file (200) using the read key (202); and
the shared write access permission (402) is sent to the shared object (10 b) over a secure and authenticated communication link (120).
16. The method (800) of claim 11, wherein receiving the shared write access permission (402) from the sharer (10 a) comprises: the shared write access permission (402) is received from the sharer (10 a) over a secure and authenticated communication link (120).
17. The method (800) of claim 11, further comprising, after sending the write access token (232) of the shared object (10 b) to the distributed storage system (150):
creating, by the shared object device (110 b), word metadata of the file (200) associated with words in the file (200) to be edited;
Encrypting, by the shared object device (110 b), the character data using the read key (202) of the file (200);
-calculating, by the user device (110), a cryptographic edit value (652) based on the read key (202) of the file (200), a word identifier associated with a word in the file (200) to be edited, a shared object cryptographic key (112) associated with the shared object (10 b), the shared object identifier (u 2) and the write key (204) of the file (200); and
-sending an edit operation request (650) comprising the cryptographic edit value (652), the edit operation request (650) being for requesting the distributed storage system (150) to process an edit operation (654) for the word in the file (200) to be edited.
18. The method (800) of claim 17, wherein, in response to receiving the edit manipulation request (650) from the shared object device (110 b), the distributed storage system (150) is configured to:
-retrieving the write access token (232) from the set of user writes (230);
-calculating a cryptographic word set token (z) based on the cryptographic edit value (652) and the retrieved write access token (232) of the shared object (10 b);
Determining whether the editing operation (654) requested by the editing operation request (650) includes a delete operation; and
when the editing operation (654) requested by the editing operation request (650) comprises a delete operation, the delete operation (150) is processed by removing a corresponding cryptographic word set token (z) of a word set (240) stored by the distributed storage system.
19. The method (800) of claim 17, wherein the distributed storage system (150) is configured, in response to receiving the edit manipulation request (650) from the shared object device (110 b), to:
-retrieving the write access token (232) from the set of user writes (230);
-calculating a cryptographic word set token (z) based on the cryptographic edit value (652) and the retrieved write access token (232) of the shared object (10 b);
determining whether the editing operation (650) requested by the editing operation request (650) includes an overwriting operation; and
when the editing operation (654) requested by the editing operation request (650) includes a rewrite operation, the rewrite operation (150) is processed by rewriting a corresponding cryptographic word set token (z) of a word set (240) stored by the distributed storage system using the calculated cryptographic word set token (z) and the cryptographic word metadata (556).
20. The method (800) of claim 17, wherein the distributed storage system (150) is configured, in response to receiving the edit manipulation request (650) from the shared object device (110 b), to:
-retrieving the write access token (232) from the set of user writes (230);
-calculating a cryptographic word set token (z) based on the cryptographic edit value (652) and the retrieved write access token (232) of the shared object (10 b);
determining whether the editing operation (654) requested by the editing operation request (650) includes an add operation; and
when the editing operation (654) requested by the editing operation request (650) includes an adding operation, the adding operation is processed by adding the calculated cryptographic word set token (z) and the cryptographic word metadata (556) to the word set (240) stored by the distributed storage system (150).
21. A system (100) for sharing read access to a document, comprising:
a sharer device (110 a), the sharer device (110 a) being configured to: creating file (200) metadata (206) stored on a storage system (150), encrypting the metadata (206) using a read key (202) of the file (200), and calculating a first cryptographic share value (252) of the file (200), the first cryptographic share value (252) being based on a write key (204) of the file (200), the read key (202), a file identifier (d) identifying the file (200), and a shared object identifier (u 2), the shared object identifier (u 2) identifying a shared object (10 b) for receiving shared read access rights to the file (200);
-a shared object device (110 b), the shared object device (110 b) being associated with the shared object (10 b) and configured to: -receiving the read key (202) of the file (200) from the sharer device (110 a) over a secure and authenticated communication channel (120), and-calculating a second cryptographic shared value (262) of the file (200), the second cryptographic shared value (262) being based on a shared object cryptographic key (112) associated with the shared object (10 b) and based on the read key (202);
-data processing hardware (160) of the storage system (150) in communication with the sharer device (110 a) and the shared object device (110 b);
memory hardware (150) in communication with the data processing hardware (160), the memory hardware (150) storing instructions that, when executed on the data processing hardware (160), cause the data processing hardware (160) to perform operations comprising:
-receiving a shared read access command (250) from the sharer device (110 a) to share read access to the file (200) to the shared object (10 b), the shared read access command (250) comprising the encrypted metadata (256) of the file (200) and the first cryptographic share value (252);
-receiving a shared read access right request (260) from the shared object device (110 b), the shared read access right request (260) comprising a shared object identifier (u 2), the file identifier (d) and the second cryptographic shared value (262);
-determining a cryptographic read access value (224) based on the first cryptographic share value (252) and the second cryptographic share value (262), the cryptographic read access value (224) authorizing the shared object (10 b) with read access to the file (200); and
-storing in a user read set (220) of the memory hardware (150) a read access token (222) of a shared object (10 b) comprising the cryptographic read access value (224) and the cryptographic value (256), the user read set (220) comprising a list of shared object identifiers (u 2) associated with the shared object (10 b) having read access to the file (200).
22. The system (100) of claim 21, wherein determining the cryptographic read access weight (224) includes: multiplying the first cryptographic shared value (252) and the second cryptographic shared value (262).
23. The system (100) of claim 21, wherein the operations further comprise:
-receiving a revoke read access command (350) from the sharer device (110 a) to revoke read access to the file (200) stored on the storage system (150) from the shared object (10 b); and
-removing the read access token (222) of the shared object (10 b) from the user read set (220).
24. The system (100) of claim 23, wherein the operations further comprise:
in response to receiving the revoke read access command (350), determining whether a corresponding write access token (232) exists for the shared object (10 b) in a user write set (230) of the memory hardware (150); and
when the corresponding write access token (232) is present, the write access token (232) is removed from the memory hardware (150).
25. The system (100) of any one of claims 21 to 24, wherein the operations further comprise, after storing the read access token (222) of the shared object (10 b):
-receiving a search query (550) for a keyword in the file (200) from the shared object device (110 b), the search query (550) comprising a cryptographic search value (552), the cryptographic search value (552) being based on a read key (202) of the file (200), the keyword and the shared object cryptographic key (112) associated with the shared object (10 b);
-retrieving the read access token (222) of the shared object (10 b) from the user read set (220) of the memory hardware (150);
-calculating a cryptographic set token (z) based on the received cryptographic search value (552) and the retrieved read access token (222) of the shared object (10 b);
determining whether the calculated cryptographic word set token (z) matches a corresponding cryptographic word set token (z) of a word set (240) stored in the memory hardware (150); and
when the calculated cryptographic word set token (z) matches the corresponding cryptographic word set token (z) of the word set (240):
retrieving encrypted word metadata (556) of the file (200) associated with the key from the memory hardware (150); and
-sending a set of search results (580) to the shared object device (110 b), the set of search results (580) comprising the encrypted metadata (256) and the encrypted word metadata (556).
26. The system (100) of claim 25, wherein the shared object device (110 b) is configured to:
decrypting the encrypted metadata (256) using the read key (202); and
-decrypting said encrypted word data (556) using said read key (202).
27. A system (100) for sharing read and write access to a document, comprising:
a sharer device (110 a), the sharer device (110 a) being associated with a creator (10 a) of a file (200) stored on a distributed storage system (150);
-a shared object device (110 b), the shared object device (110 b) being associated with a shared object (10 b), the shared object communicating with the sharer device (110 a) through a secure and authenticated communication channel (120), the shared object device (110 b) being configured to:
-receiving a shared write access permission (402) from the sharer device (110 a) to share write access to the file (200), the shared write access permission (402) comprising a read key (202) of the file (200), a write key (204) of the file (200) and encrypted metadata (256) of the file (200);
-determining a cryptographic write access value (234) based on the write key (204), a file identifier (d) identifying the file (200), a shared object identifier (u 2) identifying the shared object (10 b) and a shared object cryptographic key (112) associated with the shared object (10 b), the cryptographic write access value (234) authorizing the shared object (10 b) write access to the file (200); and
-determining a cryptographic read access weight (224) based on the write key (204) of the file (200), the file identifier (d) and the shared object cryptographic key (112);
-data processing hardware (160) of the distributed storage system (150) in communication with the sharer device (110 a) and the shared object device (110 b); and
memory hardware (150) in communication with the data processing hardware (160), the memory hardware (150) storing instructions that, when executed on the data processing hardware (160), cause the data processing hardware (160) to perform operations comprising:
-receiving a write access token (232) from the shared object device (110 b), the write access token (232) comprising the cryptographic write access value (234);
-storing the write access token (232) in a user write set (230), the user write set (230) comprising a list of shared object identifiers (u 2) associated with shared objects (10 b) having write access to the file (200);
-receiving from the shared object device (110 b) a read access token (222) of the shared object device (110 b) comprising the cryptographic read access value (224) and the encrypted metadata of the file (200); and
-storing the read access right token (222) in a user read set (220), the user read set (220) comprising a list of shared object identifiers (u 2) associated with the shared object (10 b) having read access rights to the file (200).
28. The system (100) of claim 27, wherein the operations further comprise:
-receiving a revoke write access command (450) from the sharer device (110 a) to revoke write access to the file (200) stored on the distributed storage system (150) from the shared object (10 b); and
-removing the write access token (232) of the shared object (10 b) from the user write set (230) in response to receiving the revoke write access command (450).
29. The system (100) of claim 27, wherein the operations further comprise:
-receiving a revoke read access command (350) from the sharer device (110 a) to revoke read access to the file (200) stored on the distributed storage system (150) from the shared object (10 b); and
in response to receiving the revoke read access command (350):
-removing the write access token (232) of the shared object (10 b) from the user write set (230); and
-removing the read access token (222) of the shared object (10 b) from the user read set (220).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762508374P | 2017-05-18 | 2017-05-18 | |
US62/508,374 | 2017-05-18 | ||
PCT/US2018/012593 WO2018212794A1 (en) | 2017-05-18 | 2018-01-05 | Encrypted search cloud service with cryptographic sharing |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110603538A CN110603538A (en) | 2019-12-20 |
CN110603538B true CN110603538B (en) | 2023-04-21 |
Family
ID=61074546
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880029795.5A Active CN110603538B (en) | 2017-05-18 | 2018-01-05 | Encrypted search cloud service using password sharing |
Country Status (3)
Country | Link |
---|---|
EP (1) | EP3607485B1 (en) |
CN (1) | CN110603538B (en) |
WO (1) | WO2018212794A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN111339557A (en) * | 2020-02-20 | 2020-06-26 | 北京字节跳动网络技术有限公司 | Online document display method, device, equipment and medium |
CN111835731B (en) * | 2020-06-19 | 2021-06-22 | 北京航空航天大学 | Novel dynamic symmetric searchable encryption method and device for resisting file injection attack |
US11645409B2 (en) | 2020-12-18 | 2023-05-09 | Seagate Technology Llc | Search and access pattern hiding verifiable searchable encryption for distributed settings with malicious servers |
Family Cites Families (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7827416B2 (en) * | 2004-08-26 | 2010-11-02 | Mitsubishi Denki Kabushiki Kaisha | Key management apparatus, document security and editing system, and key management method |
US7668830B2 (en) * | 2004-11-29 | 2010-02-23 | Nokia Corporation | Access rights |
JPWO2009004732A1 (en) * | 2007-07-05 | 2010-08-26 | 日立ソフトウエアエンジニアリング株式会社 | Encryption and decryption processing method for shared encryption file |
US8719582B2 (en) * | 2009-03-03 | 2014-05-06 | Microsoft Corporation | Access control using identifiers in links |
CN101799853A (en) * | 2010-03-05 | 2010-08-11 | 中国人民解放军国防科学技术大学 | Hierarchical information encryption sharing method |
EP3422236B1 (en) * | 2012-10-10 | 2022-06-01 | Citrix Systems, Inc. | Policy-based application management |
KR101992740B1 (en) * | 2013-03-29 | 2019-06-25 | 사이트릭스 시스템스, 인크. | Data management for an application with multiple operation modes |
US10929843B2 (en) * | 2014-05-06 | 2021-02-23 | Apple Inc. | Storage of credential service provider data in a security domain of a secure element |
US9727575B2 (en) * | 2014-08-29 | 2017-08-08 | Microsoft Technology Licensing, Llc | File system with data block sharing |
US10013567B2 (en) * | 2015-01-27 | 2018-07-03 | Apple Inc. | Private and public sharing of electronic assets |
EP3256982A1 (en) * | 2015-02-15 | 2017-12-20 | Schmahmann, Adin Reicin | Systems and methods for secure collaboration with precision access management |
-
2018
- 2018-01-05 CN CN201880029795.5A patent/CN110603538B/en active Active
- 2018-01-05 EP EP18701964.1A patent/EP3607485B1/en active Active
- 2018-01-05 WO PCT/US2018/012593 patent/WO2018212794A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
CN110603538A (en) | 2019-12-20 |
EP3607485B1 (en) | 2020-07-29 |
EP3607485A1 (en) | 2020-02-12 |
WO2018212794A1 (en) | 2018-11-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20210067320A1 (en) | System and method to protect sensitive information via distributed trust | |
KR101813481B1 (en) | Apparatus, storage medium and method for anonymizing user data | |
CN104021157B (en) | Keyword in cloud storage based on Bilinear map can search for encryption method | |
CN102546764B (en) | Safe access method of cloud storage system | |
JP5754655B2 (en) | Non-container data for trusted computing and data services | |
JP2021527274A (en) | Distributed access, storage, and transfer of blockchain | |
Singh et al. | Data privacy protection mechanisms in cloud | |
CN105024802B (en) | Multi-user's multi-key word based on Bilinear map can search for encryption method in cloud storage | |
CN109493017B (en) | Trusted outsourcing storage method based on block chain | |
CN105049196B (en) | The encryption method that multiple keywords of designated position can search in cloud storage | |
Somu et al. | Authentication service in hadoop using one time pad | |
CN110603538B (en) | Encrypted search cloud service using password sharing | |
EP4073673B1 (en) | Encrypted search with a public key | |
Joshi et al. | Secure cloud storage | |
Sangeetha et al. | Multi keyword searchable attribute based encryption for efficient retrieval of health Records in Cloud | |
JP2022544484A (en) | Encrypted Knowledge Graph | |
Suthar et al. | EncryScation: A novel framework for cloud iaas, daas security using encryption and obfuscation techniques | |
Foltz et al. | Simplified key management for digital access control of information objects | |
Shalabi et al. | Cryptographically enforced role-based access control for NoSQL distributed databases | |
Shivanna et al. | Privacy preservation in cloud computing with double encryption method | |
Zhu et al. | Secure data outsourcing scheme in cloud computing with attribute-based encryption | |
Kaliyaperumal et al. | An Efficient Key Generation Scheme for Secure Sharing of Patients Health Records using Attribute Based Encryption | |
Pavithra et al. | Enhanced Secure Big Data in Distributed Mobile Cloud Computing Using Fuzzy Encryption Model | |
JP7350220B2 (en) | Search execution device, search execution method, search execution program, and secret search system | |
Ahamed Ali et al. | A Comprehensive Analysis of Key Management Models in the Cloud: Design, Challenges, and Future Directions |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |