US20110106819A1 - Identifying a group of related instances - Google Patents
Identifying a group of related instances Download PDFInfo
- Publication number
- US20110106819A1 US20110106819A1 US12/608,395 US60839509A US2011106819A1 US 20110106819 A1 US20110106819 A1 US 20110106819A1 US 60839509 A US60839509 A US 60839509A US 2011106819 A1 US2011106819 A1 US 2011106819A1
- Authority
- US
- United States
- Prior art keywords
- instance identifiers
- groups
- instance
- identifiers
- search query
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
- 238000000034 method Methods 0.000 claims abstract description 108
- 238000012545 processing Methods 0.000 claims abstract description 51
- 238000004590 computer program Methods 0.000 claims abstract description 17
- 238000004422 calculation algorithm Methods 0.000 claims description 19
- 238000013500 data storage Methods 0.000 claims description 7
- 238000012549 training Methods 0.000 claims description 3
- 230000008569 process Effects 0.000 description 82
- 230000009471 action Effects 0.000 description 20
- 230000004044 response Effects 0.000 description 9
- 230000000694 effects Effects 0.000 description 8
- 238000004891 communication Methods 0.000 description 6
- 238000000605 extraction Methods 0.000 description 5
- 238000002955 isolation Methods 0.000 description 5
- 230000000644 propagated effect Effects 0.000 description 5
- 230000008859 change Effects 0.000 description 3
- 238000003066 decision tree Methods 0.000 description 3
- 230000003247 decreasing effect Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 238000013515 script Methods 0.000 description 3
- 230000009897 systematic effect Effects 0.000 description 3
- 238000007476 Maximum Likelihood Methods 0.000 description 2
- 238000013459 approach Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 239000000470 constituent Substances 0.000 description 2
- 235000013410 fast food Nutrition 0.000 description 2
- 230000002452 interceptive effect Effects 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000011218 segmentation Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 241000224511 Bodo Species 0.000 description 1
- 241001422033 Thestylus Species 0.000 description 1
- 238000004458 analytical method Methods 0.000 description 1
- 235000012791 bagels Nutrition 0.000 description 1
- 238000007405 data analysis Methods 0.000 description 1
- 238000013499 data model Methods 0.000 description 1
- 230000007123 defense Effects 0.000 description 1
- 238000012217 deletion Methods 0.000 description 1
- 230000037430 deletion Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000012804 iterative process Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 235000013550 pizza Nutrition 0.000 description 1
- 238000003825 pressing Methods 0.000 description 1
- 238000007637 random forest analysis Methods 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 235000014102 seafood Nutrition 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/9038—Presentation of query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/36—Creation of semantic tools, e.g. ontology or thesauri
- G06F16/367—Ontology
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/34—Browsing; Visualisation therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- This specification relates to the identification of a group of related instances, e.g., by searching a unstructured collection of electronic documents.
- Instances are individually identifiable entities. Instances can be grouped according to their attributes. An attribute is a property, feature, or characteristic of an instance. A group of instances can be defined by one or more attributes. The instances that belong to a group are determined by the attributes that define the group. For example, the instances New York, Chicago, and Tokyo can be grouped together as cities, whereas Tokyo is excluded from a group of North American cities.
- Search is an automated process in which a user enters a search query and receives responsive results in a result set.
- the result set can include content that is responsive to the search query and drawn from a collection of electronic documents.
- An electronic document is a collection of machine-readable digital data. Electronic documents are generally individual files and formatted in accordance with a defined format (e.g., PDF, TIFF, HTML, XML, MS Word, PCL, PostScript, or the like). An electronic document collection can be stored as digital data on one or more data storage devices.
- Electronic document collections can either be unstructured or structured.
- the formatting of the documents in an unstructured electronic document collection is not constrained to conform with a predetermined structure and can evolve in often unforeseen ways. In other words, the formatting of individual documents in an unstructured electronic document collection is neither restrictive nor permanent across the document collection. Further, in an unstructured electronic document collection, there are no mechanisms for ensuring that new documents adhere to a format or that changes to a format are applied to previously existing documents. Thus, the documents in an unstructured electronic document collection cannot be expected to share a common structure that can be exploited in the extraction of information. Examples of unstructured electronic document collections include the documents available on the Internet, collections of resumes, collections of journal articles, and collections of news articles. Documents in some unstructured electronic document collections are not prohibited from including links to other documents inside and outside of the collection.
- the documents in structured electronic document collections generally conform with formats that can be both restrictive and permanent.
- the formats imposed on documents in structured electronic document collections can be restrictive in that common formats are applied to all of the documents in the collections, even when the applied formats are not completely appropriate.
- the formats can be permanent in that an upfront commitment to a particular format by the party who assembles the structured electronic document collection is generally required.
- users of the collections in particular, computer programs that use the documents in the collection—rely on the documents' having the expected format.
- format changes can be difficult to implement.
- Structured electronic document collections are best suited to applications where the information content lends itself to simple and stable categorizations.
- the documents in a structured electronic document collection generally share a common structure that can be exploited in the extraction of information.
- structured electronic document collections include databases that are organized and viewed through a database management system (DBMS) in accordance with hierarchical and relational data models, as well as a collections of electronic documents that are created by a single entity for presenting information consistently.
- DBMS database management system
- a collection of web pages that are provided by an online bookseller to present information about individual books can form a structured electronic document collection.
- a collection of web pages that is created by server-side scripts and viewed through an application server can form a structured electronic document collection.
- one or more structured electronic document collections can each be a subset of an unstructured electronic document collection.
- the groups of related instance identifiers are identified by searching an unstructured collection of electronic documents, for example, the electronic documents available on the Internet.
- one innovative aspect of the subject matter described in this specification can be embodied in methods performed by one or more data processing apparatus that include the actions of the data processing apparatus receiving a search query at a data processing apparatus, the data processing apparatus identifying groups of instance identifiers in an unstructured collection of electronic documents with the data processing apparatus, the data processing apparatus determining relevance of the groups of instance identifiers to the search query with the data processing apparatus, and the data processing apparatus scoring at least some of the instance identifiers in the groups of instance identifiers individually with the data processing apparatus; and the data processing apparatus ranking the at least some instance identifiers according to the scores with the data processing apparatus.
- the search query specifies attributes shared by a group of related instances.
- Determining the relevance of the groups of instance identifiers to the search query can include computing relevance of the groups of instance identifiers to source documents that include the groups of instance identifiers, computing likelihoods that the identified groups of instance identifiers are indeed groups of instance identifiers, and computing relevance of source documents which include the groups of instance identifiers to the search query.
- Identifying the groups of instance identifiers can include forming a first new query biased to identify groups, forming a second new query constrained to search compendia sources, and searching the unstructured collection of electronic documents with the received query, the first new query, and the second new query.
- the method can also include the data processing apparatus rescoring the at least some instance identifiers before ranking Scoring at least some of the instance identifiers in the groups of instance identifiers can include representing features of the instance identifiers in a vertex-edge graph and scoring the instance identifiers according to the features represented in the vertex-edge graph.
- the vertices in the vertex-edge graph can represent groups of instance identifiers. Respective edges in the vertex-edge graph can be weighted according to overlap between the vertices connected by the edge. Vertices in the vertex-edge graph can represent individual instance identifiers. Respective edges in the vertex-edge graph represent features shared by the instance identifiers.
- a first edge in the vertex-edge graph can represent an extractor that identified a pair of vertices joined by the first edge.
- a first edge in the vertex-edge graph can represent other instance identifiers in potential groups where vertices joined by the first edge are found.
- a first edge in the vertex-edge graph can represent a class of the query that identified source document where vertices joined by the first edge are found. Scoring the instance identifiers can include identifying cliques in the vertex-edge graph. Scoring the instances identifiers can include scoring the instance identifiers using a predictive analytic tree-building algorithm.
- Scoring the instance identifiers using the predictive analytic tree-building algorithm can include training the predictive analytic tree-building algorithm using a group of instance identifiers of confirmed accuracy that are relevant to a search query, a set of potential groups of instance identifiers that have been identified from an unstructured collection of electronic documents, and features of the instance identifiers in the potential groups and generating a classification and regression tree.
- the programs can include instructions that when executed by data processing apparatus cause a data processing apparatus to perform operations.
- the operations can include receiving a search query at a data processing apparatus, the search query specifying attributes shared by a group of related instances, searching an electronic document collection to identify identifiers of instance that are responsive to the search query, representing features of the instance identifiers in a vertex-edge graph, and scoring relevance of the instance identifiers to the search query according to the features represented in the vertex-edge graph.
- the operations can also include identifying groups of instance identifiers in the electronic documents of the collection and determining relevance of the groups of instance identifiers to the search query.
- a first feature represented in the vertex-edge graph can include the relevance of the groups that include respective instance identifiers to the search query.
- the operations can also include identifying electronic documents available on the Internet that are relevant to the search query and extracting groups of instance identifiers from the electronic documents that are relevant to the search query.
- the operations can also include computing relevance of the electronic documents from which the groups of instance identifiers are extracted to the search query, computing relevance of the groups of instance identifiers to the electronic documents from which the groups of instance identifiers are extracted, and computing likelihoods that the groups of instance identifiers are groups of instance identifiers.
- Identifying the groups of instance identifiers can include forming a new query biased to identify groups and searching the electronic document collection with the new query.
- a first edge in the vertex-edge graph can represent a class of the query that identified a pair of vertices joined by the first edge.
- a first edge in the vertex-edge graph can represent other instance identifiers in potential groups where vertices joined by the first edge are found. Scoring relevance of the instance identifiers to the search query can include identifying cliques in the vertex-edge graph.
- FIG. 1 Another innovative aspect of the subject matter described in this specification can be embodied in systems that include a client device and one or more computers programmed to interact with the client device and the data storage device.
- the computers are programmed to perform operations comprising receiving a search query from the client device, the search query explicitly or implicitly specifying attributes of instances, searching an electronic document collection to identify identifiers of instances that may have the attributes specified by the search query, representing features of the search of the electronic document collection in a vertex-edge graph, scoring the instance identifiers that may have the attributes specified by the search query according to the features represented in the vertex-edge graph, and outputting, the client device, instructions for visually presenting at least some of the instance identifiers.
- Outputting the instructions can include outputting instructions for visually presenting a structured presentation at the client device and the client device is configured to receive the instructions and cause the structured presentation to be visually presented.
- the system can include a data storage device storing a data describing multiple groups of instances.
- the system can include a data storage device storing machine-readable instructions tailored to identify and extract groups of instance identifiers from electronic documents in an unstructured collection.
- Representing features can include representing the relevance of the groups in which the instance identifiers appear in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers individually according to the relevance of the groups in which the instance identifiers appear to the search query.
- Scoring the instance identifiers can include identifying cliques in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers according to an extractor represented in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers according to a class of a query represented in the vertex-edge graph.
- FIG. 1 is a schematic representation of a system in which a group of related instances is identified.
- FIG. 2 is a flow chart of a process for identifying a group of related instances.
- FIG. 3 is a schematic representation of a process for identifying a group of related instances.
- FIG. 4 is a flow chart of a process for identifying electronic documents relevant to a query.
- FIG. 5 is a schematic representation of a process for identifying electronic documents relevant to a query.
- FIG. 6 is a flow chart of a process for determining the relevance of groups of instances to a search query.
- FIG. 7 is a flow chart of a process for scoring instances according to relevance of groups in which instances appear.
- FIG. 8 is a flow chart of a process for scoring instances according to the relevance of groups in which instances appear.
- FIG. 9 is a schematic representation of a vertex-edge graph that represents features of the instances in the potential groups.
- FIG. 10 is a schematic representation of another vertex-edge graph that represents features of the instances in the potential groups.
- FIG. 11 is a flow chart of a process for rescoring instances.
- FIGS. 12-14 are examples of structured presentations that present a group of related instances to user.
- FIG. 1 is a schematic representation of a system 100 in which a group of related instances is identified.
- Related instances are instances that share one or more common attributes.
- a group of related instances is identified in response to a search query.
- the search query specifies the attributes that are shared by the related instances.
- the attributes that are shared by a group of related instances can be specified by the search query explicitly, implicitly, or both explicitly and implicitly.
- a search query “cities” implicitly specifies instances of discrete densely populated urban areas.
- a search query “cities located in North America” explicitly identifies that such urban areas are to be located in North America.
- System 100 includes a search engine 105 , a collection 110 of groups of identifiers of instances, and a client 115 .
- Client 115 is a device for interacting with a user and can be implemented as a computer programmed with machine-readable instructions.
- Client 115 can include one or more input/output devices and can receive, from a user, a search query that specifies the attributes that are shared by a group of related instances. For example, a user who is currently interacting with client 115 can enter a search query using an input device such as a mouse or a keyboard.
- the search query can include text.
- Examples of textual search queries include “US presidents” and “North American cities.”
- a user can enter a search query by interacting with or referring to a graphical elements displayed on display screen 120 .
- a user can click on a cell in a structured presentation or formulate a search query that refers to a feature that appears in a structured presentation (e.g., “ROW — 1”).
- Structured presentations are described in more detail below.
- Client 115 can also present a group of identifiers of related instances that shares the attributes specified by the search query.
- client 115 includes a display screen 120 that displays a presentation 125 .
- Presentation 125 indicates that a group (i.e., “CATEGORY_X”) includes a collection of related instances (i.e., identified by identifiers “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C”).
- presentation 125 is text.
- Other presentations can indicate that a group includes a collection of related instances.
- structured presentations can identify a group in a column header and a collection of related instances in the cells in the column under that header.
- client 115 transmits a representation of the search query, or the search query itself, to search engine 105 in a message 135 .
- Message 135 can be transmitted over a data communications network.
- Search engine 105 can receive message 135 and use the content of message 135 to define parameters for searching.
- Search engine 105 can be implemented on one or more computers deployed at one or more geographical locations that are programmed with one or more sets of machine-readable instructions for identifying a relevant group of related instances from the groups of instances in collection 110 .
- other functionality i.e., functionality in addition to the functionality of search engine 105 —can be implemented on the one or more computers.
- Search engine 105 identifies a relevant group of related instances according to the parameters for searching defined by the content of message 135 .
- the search can yield a result set of relevant instances responsive to the search query described in message 135 .
- the content of the result set, the arrangement of instances in the result set, or both can reflect the likelihood that the constituent instances are relevant to the search query.
- the content or arrangement of instances in the result set can also reflect other factors, such as the relative importance of the instances or a confidence that the instances are indeed responsive to the search query.
- the groups of identifiers of instances in collection 110 can be found in or drawn from electronic documents of an unstructured electronic documents collection.
- collection 110 can be groups of identifiers of instances that are found in electronic documents available on the Internet.
- the source documents of the groups of identifiers of instances are thus not necessarily constrained to conform with a predetermined structure that can be exploited for the extraction of information.
- one or more computers can execute one or more sets of machine-readable instructions that are tailored to identify and extract groups of identifiers of instances from an unstructured electronic documents collection.
- Machine-readable instructions that are tailored in this way can be referred to as “extractors.”
- Collection 110 can include, e.g., lists of instance identifiers 145 , tables of instance identifiers 150 , and structured text 155 that includes instance identifiers.
- a list of instance identifiers 145 is an ordered series of words or numerals.
- a list of instance identifiers can be found in text and identifiable, e.g., by grammatical conventions or mark-up tags. For example, the instance identifiers in a list can be delineated by commas or semicolons in text.
- a table of instance identifiers 150 is a systematic arrangement of instance identifiers. For example, instance identifiers can be arranged in rows or columns.
- tables can be identified, e.g., by lines or spaces that delineate rows and columns or by mark-up tags.
- Structured text 155 includes other structured arrangements of instance identifiers, such as instance identifiers ordered by bullet points or instances in a series of paragraph headings.
- structured text 155 can be identified, e.g., by the structural features of the arrangement of instances or by mark-up tags.
- collection 110 can also include groups of one or more instance identifiers that are formed using text extraction techniques.
- textual patterns that explicitly or implicitly indicate that an identified instance has certain attributes can be used to form groups of one or more instance identifiers. For example, text such as “New York, the largest city in North America, . . . ” and “Quebec was the first North American city to be designated a UNESCO World Heritage Site . . . ” can be identified using pattern identification techniques.
- Garera (CIKM'07, Nov. 6-8, 2007, Lisboa, Portugal) and “Weakly-Supervised Acquisition of Open-Domain Classes and Class Attributes fromWeb Documents and Query Logs” by M. Pasca, B. Van Durme (Proceedings of ACL-08: HLT, pages 19-27, Columbus, Ohio, USA, June 2008) can be used.
- Instance identifiers can be extracted from text and combined to form a group of instance identifiers having the attributes explicitly and implicitly associated with, e.g., North American cities. Extractors can use such characteristics to identify and extract groups of instances from an unstructured electronic documents collection.
- Search engine 105 can transmit a representation of the result set to client 115 in a message 140 .
- Message 140 can be transmitted, e.g., over the same data communications network that transmitted message 135 .
- Client 115 can receive message 140 and use the content of message 140 to display a presentation 125 on display screen 120 .
- Presentation 125 indicates that one or more common attributes are shared by a group of instances, namely, at least some the instances in the result set described in message 135 . In some implementations, presentation 125 can use text to identify the shared attributes and instance identifiers.
- presentation 125 describes that instance identified as “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C” share the attribute of belonging to a category “CATEGORY_X.”
- Category “CATEGORY_X” can explicitly or implicitly specify the attributes shared by instance identified as “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C.”
- presentation 125 can use the spatial arrangement and positioning of information to identify that a group of instance shares one or more common attributes.
- presentation 125 can be a structured presentation, as described further below.
- FIG. 2 is a flow chart of a process 200 for identifying a group of related instance identifiers.
- Process 200 can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions.
- process 200 can be performed by the search engine 105 in system 100 .
- the system performing process 200 receives a query (step 205 ).
- a query For example, in the context of system 100 ( FIG. 1 ), the system can receive a representation of the search query or the search query itself in message 135 over a data communications network.
- the system performing process 200 identifies that the query inquires about a group of related instances (step 210 ).
- the query can be identified as inquiring about a group of related instances from the content of the query, the context of the query, or both.
- the terms in a text search query “cities in California” can be identified as inquiring about a group of related instances such as “San Diego,” “Los Angeles,” and “Bakersfield” due to the plural term “cities” being characterized by a common attribute of those instances, namely, being “in California.”
- the terms in a search query “Ivy League schools” can be identified as inquiring about a group of related instances (such as “Cornell,” “Columbia,” and “Brown”) due to the plural term “schools” being characterized by a common attribute “Ivy League.”
- the context of the receipt of the search query can also be used to identify that a query inquires about a group of related instances. For example, an express indication by a user or the
- the system performing process 200 identifies electronic documents that are relevant to the search query (step 215 ).
- the electronic documents can be identified by matching text, concepts, or both to entries in an indexed database of electronic documents.
- the match between the text or concepts in the electronic documents can be used to determine a page rank that embodies the relevance of the electronic documents to the search query, as well as other factors. Examples of these other factors include, e.g., the age of the electronic document, the number of links from other electronic documents to the electronic document, the likelihood that the electronic document is a “spam document,” and the like.
- the system performing process 200 identifies groups of instance identifiers in the relevant electronic documents (step 220 ).
- groups of instance identifiers can be identified by delineations, mark-up tags, or other characteristics of the arrangement of instance identifiers in the relevant electronic documents.
- the groups of instance identifiers can be extracted from their respective source electronic documents and assembled into a collection, e.g., collection 110 in system 100 ( FIG. 1 ).
- the system performing process 200 determines the relevance of each group of instance identifiers to the search query (step 225 ).
- the relevance of a group of instance identifiers to a search query will differ from the relevance or page rank of its source electronic document to that same query. For example, at least some of the text and concepts that appear in a source electronic document will generally be omitted from a group of instance identifiers in that document.
- the relevance of a group of instance identifiers can be determined according to the relevance or page rank of its source electronic document and other factors, as described further below.
- the system performing process 200 scores the relevance of the instances that appear in the groups individually (step 230 ).
- the scores of the individual instance identifiers can embody the likelihood that each individual instance is relevant to the search query.
- individual instance identifiers are scored according to the relevance of the groups in which the instance identifiers appear, the overlap between the instance identifiers that appear in different groups, other features of the search that identified the groups in which the instance identifiers appeared, or combinations of these and other factors.
- a single group of instance identifiers from a single source electronic document can thus include a collection of instance identifiers that are scored differently. Examples of different approaches to scoring the relevance of groups are described further below.
- the system performing process 200 ranks the individual instance identifiers according to their scores (step 235 ).
- the ranking can characterize the likelihood that individual instances are relevant to the search query. For example, an instance with a high ranking is one that is likely to be an entity that has the attributes explicitly or implicitly identified in the search query. On the other hand, an instance with a low ranking is one that is unlikely to be an entity that has the attributes explicitly or implicitly identified in the search query.
- the ranked instance identifiers can be output in a result set provided to a user, e.g., in a message transmitted over a data transmission network, e.g., message 140 ( FIG. 1 ).
- FIG. 3 is a schematic representation 300 of a process for identifying a group of related instance identifiers.
- the process can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions.
- representation 300 can represent the identification of related instance identifiers using process such as process 200 ( FIG. 2 ) in a system such as system 100 ( FIG. 1 ).
- a collection of electronic documents 305 can be searched to yield a collection 310 of groups of instance identifiers.
- Collection 305 can be an unstructured collection of electronic documents 305 .
- the search can be performed in response to a search query that is used to define parameters for searching.
- the search can identify relevant documents that include groups of instance identifiers. These groups of instance identifiers can be extracted from their respective source documents to yield collection 310 .
- the individual instance identifiers within the groups of instances in collection 310 can then be ranked according to relevance to the search query.
- the instances can thus be entities that share one or more attributes implicitly or explicitly identified in the search query.
- the ranked instance identifiers can be output in a result set provided to a user.
- the top-ranked instance identifiers can be found in different groups of instance identifiers in collection 310 . For example, the highest-ranked instance identifier may be found in a first group of instance identifiers, whereas the second highest-ranked instance identifier may be absent from that first group of instance identifiers.
- FIG. 4 is a flow chart of a process 400 for identifying electronic documents relevant to a query.
- Process 400 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions.
- process 400 can be performed by the search engine 105 in system 100 ( FIG. 1 ).
- Process 400 can be performed in isolation or in conjunction with other digital data processing operations.
- process 400 can be performed in conjunction with the activities of process 200 , e.g., at step 215 ( FIG. 2 ).
- the system performing process 400 receives a search query (step 405 ).
- a search query For example, in the context of system 100 ( FIG. 1 ), the system can receive a representation of the search query or the search query itself in message 135 over a data communications network.
- the system performing process 400 forms one or more new search queries that are biased to identify groups of instance identifiers (step 410 ).
- a biased query can be formed by combining text or concepts represented in the received search query with text or concepts that are biased toward the identification of groups of instance identifiers.
- text drawn from the received search query e.g., “rollercoasters” or “hybrid vehicles”
- text biased toward the identification of groups e.g., “list of [query text],” “this year's [query text],” “my favorite [query text],” “group of [query text],” “the best [query text],” “[query text] such as,” “[query text] including,” and the like).
- a biased query can include text or concepts that are intended to prevent certain groups of instance identifiers from being identified by the biased query.
- a collection of biased queries can be formed, with each including text that specifies a subcategory of a broader category specified by the query text. Examples of such biased queries include “[subcategory — 1] [query text] such as,” “[subcategory — 2] [query text] such as,” and “[subcategory — 3] [query text] such as.”
- a query that is biased to identify groups of instance identifiers such as “[restaurants] including” can be formed.
- this biased query could also identify identifiers of instances of culinary sub-categories of restaurants (e.g., “French restaurants,” “Italian restaurants,” “Thai restaurants,” and “fast food restaurants”).
- text that specifies such sub-categories of the broader category can be included in a collection of biased queries.
- biased queries such as “[French] [restaurants] including,” “[Italian] [restaurants] including,” and “[Thai] [restaurants] including,” “[fast food] [restaurants] including”) can be formed.
- the system performing process 400 also forms one or more new search queries that are constrained to search certain sources (step 415 ).
- searches can be constrained to one or more compendia, such as encyclopedia (e.g., www.wikipedia.org) or dictionaries.
- the searched sources are constrained according to the subject mater of the query. For example, a search for “hybrid vehicles” may be constrained to searching news media and consumer agencies that deal with motor vehicles.
- the system performing process 400 conducts a search using the received search query, the search queries that are biased to identify groups of instance identifiers, and the search queries that are constrained to search certain sources (step 420 ).
- the searches can be run in series or in parallel.
- the searches using the received search query and the biased search queries can be conducted on the same unstructured collection of electronic documents (e.g., the electronic documents available on the Internet).
- Each of the searches can yield a separate search result set that identifies electronic documents relevant to the respective search query.
- the individual documents in each search result set can be scored and ranked, e.g., according to the relevance to the respective search query and other factors.
- the system performing process 400 combines the search result sets yielded by the different searches into a combined search result set (step 425 ).
- the electronic documents identified in the combined search result set can be ranked, e.g., according to the relevancy score or page rank determined in the individual searches.
- the relevancy scores or page ranks determined in the individual searches are normalized to a standard, e.g., so that the highest ranked electronic documents in each search result set are the three highest ranked electronic documents in the combined search result set.
- the relevancy scores or page ranks are weighted to prefer electronic documents found in multiple search result sets or electronic documents found in search result sets yielded by a certain one of the searches. For example, the relevancy scores or page ranks of electronic documents in search result sets yielded by queries that are constrained to search certain sources can be preferentially weighted to appear higher in the rankings of the combined search result set.
- FIG. 5 is a schematic representation 500 of a process for identifying electronic documents relevant to a query.
- the process can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions.
- representation 500 can represent the identification of electronic documents using a process such as process 400 ( FIG. 4 ) in a system such as system 100 ( FIG. 1 ).
- An unstructured collection 505 of electronic documents can be searched multiple times to yield a source-constrained query result set 510 , a result set 515 yielded by a query that is biased to identify groups, and a query result set 520 .
- Result sets 510 , 515 , 520 can identify the same or different electronic documents in collection 505 .
- Result sets 510 , 515 , 520 can be combined together to form a combined result set 525 .
- Combined result set 525 identifies electronic documents which appear in unstructured collection 505 .
- FIG. 6 is a flow chart of a process 600 for determining the relevance of groups of instance identifiers to a search query.
- Process 600 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions.
- process 600 can be performed by the search engine 105 in system 100 ( FIG. 1 ).
- Process 600 can be performed in isolation or in conjunction with other digital data processing operations.
- process 600 can be performed in conjunction with the activities of process 200 , e.g., at step 225 ( FIG. 2 ).
- the system performing process 600 receives a search query (step 605 ).
- a search query For example, in the context of system 100 ( FIG. 1 ), the system can receive a representation of the search query or the search query itself in message 135 over a data communications network.
- the system performing process 600 computes the relevance of each of a collection of source documents to the query (step 610 ).
- the relevance can be computed, e.g., by matching a query to text, concepts, or both in an electronic document.
- the match between the text or concepts in the electronic documents can be used to determine a page rank that embodies the relevance of the electronic documents to the search query and potentially other factors.
- the system performing process 600 computes the likelihood that potential groups of instance identifiers in the source documents are actually groups of instance identifiers (step 615 ).
- delineations, mark-up tags, or other characteristics of the arrangement of instance identifiers in the relevant electronic documents can be used to identify potential groups of instance identifiers.
- commas are generally used to delineate members of a list in text, commas may sometimes be omitted from a list inadvertently or otherwise. In such cases, the certainty that a series of instance identifiers is in fact a list is decreased.
- different textual patterns can be more or less likely to exclusively identify instance identifiers that have certain attributes.
- the likelihood that a potential group of instance identifiers assembled using such textual patterns actually includes correct instance identifiers can be computed according to the accuracy of the textual patterns used.
- mark-up HTML tags such as ⁇ b>, ⁇ li>, ⁇ td>, ⁇ a>, and the like can be used to identify potential groups of instance identifiers.
- HTML tags do not always delineate lists of items. Instead, HTML authors can use them for other purposes.
- mark-up tags designed to define a group of instance identifiers can actually be used to identify a group of instance identifiers.
- the likelihood that a group of instance identifiers has been identified can be computed and expressed as a normalized value between absolute certainty that a group of instance identifiers has been identified (e.g., a “1”) and absolute certainty that a group of instance identifiers has not been identified (e.g., a “0”).
- the system performing process 600 computes the relevance of each potential group of instance identifiers to the source document that includes the potential group (step 620 ).
- a group of instance identifiers is unrelated to other content of the electronic document that includes the group of instance identifiers.
- the cover page of a company newsletter may include a table setting forth the addresses where the company has offices. Although the table is a group of instance identifiers, the content of this table (e.g., office addresses) may be unrelated to other content of the newsletter.
- the system can compute the relevance of each potential group of instance identifiers to the source document that includes the potential group by comparing the text, the concepts, or both in the potential group of instance identifiers to the text, the concepts, or both in the source document.
- the system performing process 600 ranks the potential groups according to the relevance of source document to query, the likelihood that potential group of instance identifiers is a group, and the relevance of potential group to source document (step 620 ).
- a merit score “S G ” can be computed for each potential group of instance identifiers according to a formula that relies upon multiplication, addition, exponentiation, or other computation using the relevance of the source document of the potential group of instance identifiers to the query, the likelihood that the potential group of instance identifiers is in fact a group, and the relevance of the potential group of instance identifiers to the source document that includes the potential group of instance identifiers.
- the merit score “S G ” is computed for each potential group of instances according to the formula:
- R DG is the relevance of the source document of the potential group of instance identifiers to the query
- L G is the likelihood that the potential group of instance identifiers is in fact a group
- R GD is the relevance of the potential group of instance identifiers to the source document that includes it.
- the merit score S G of each potential group of instance identifiers can thus embody the relevance of those potential groups to a search query.
- a merit score “S G ” can be computed for each potential group of instance identifiers using machine-learning techniques. For example, the relevance of source document to query, the likelihood that potential group of instance identifiers is a group, and the relevance of potential group to source document can be input into as features into a predictive analytic tree-building algorithm that has been trained using a groups of known relevance to a search query.
- the merit score “S G ” yielded by a predictive analytic tree-building algorithm can embody the percentage of decision trees that have voted for a group. This percentage can be expressed as a number between 0 and 1. In some implementations, the percentage of decision trees that have voted for a group can be adjusted to account for factors such as the number of times that a group appears, the extent to which the members of the group have been refined, and other factors.
- FIG. 7 is a flow chart of a process 700 for scoring instance identifiers according to relevance of groups in which instance identifiers appear.
- Process 700 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example, process 700 can be performed by the search engine 105 in system 100 ( FIG. 1 ). Process 700 can be performed in isolation or in conjunction with other digital data processing operations. For example, process 700 can be performed in conjunction with the activities of process 200 , e.g., at step 230 ( FIG. 2 ).
- the system performing process 700 receives description information describing potential groups (including the identity of the instance identifiers in the potential groups) and the relevance of these potential groups to a search query (step 705 ). For example, the system can receive a listing of the instance identifiers in each potential group and a merit score S G for each potential group.
- the system performing process 700 estimates the likelihood that each instance identifier appears in a relevant group according to relevance of potential groups in which instance identifier appears (step 710 ).
- a group of instance identifiers is relevant to a search query when the group includes instance identifiers that share the attributes that are implicitly or explicitly specified in the search query.
- the likelihood that each instance identifier appears in a relevant group can thus embody the relevance of the instance identifier to a search query.
- the likelihood that each instance identifier appears in a relevant group is estimated according to a method that relies on an expectation maximization algorithm.
- An expectation maximization algorithm makes maximum-likelihood estimates of one or more parameters of a distribution from a set of data that is incomplete and missing variables.
- An expectation maximization algorithm can pick a set of parameters that best describes a set of data given a model.
- the set of data are the potential groups.
- the model assumes that some potential group are relevant to the query (groups “R”) whereas other potential groups are not relevant to the query (groups “N”). Further, a given item (i) has a probability of occurring in a relevant group “P(i
- N) can initially be estimated based on, e.g., the relevance of the source document of the group to a search query, the likelihood that a group of instances is indeed a group, and the relevance of the group to its source document. The probabilities P(i
- the expectation maximization algorithm can be implemented as iterative processes which alternates between expectation steps and maximization steps.
- expectation steps missing variables are estimated from the observed data and current estimates of the parameters of the distribution.
- maximization steps estimates of the parameters of the distribution is maximized under the assumption that the missing variables are known, i.e., have the values estimated in the previous expectation step. As the steps are iteratively repeated, the estimates of the parameters of the distribution converge.
- Expectation maximization algorithms are described in more detail, e.g., in “Maximum Likelihood from Incomplete Data via the EM Algorithm” by A. P. Dempster, N. M. Laird, D. B. Rubin Journal of the Royal Statistical Society, Series B (Methodological) 39 (1) pp. 1-38 (1977).
- FIG. 8 is a flow chart of a process 800 for scoring instance identifiers according to the relevance of groups in which instance identifiers appear.
- Process 800 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example, process 800 can be performed by the search engine 105 in system 100 ( FIG. 1 ).
- Process 800 can be performed in isolation or in conjunction with other digital data processing operations.
- process 800 can be performed in conjunction with the activities of process 200 , e.g., at step 230 ( FIG. 2 ).
- the system performing process 800 receives description information describing potential groups (including the identity of the instance identifiers in the potential groups) and the relevance of these potential groups to a search query (step 805 ). For example, the system can receive a listing of the instance identifiers in each potential group and a merit score S G for each potential group.
- the system performing process 800 represents features of the instance identifiers in the potential groups in one or more vertex-edge graphs (step 810 ).
- a vertex-edge graph is a representation of a set of objects where some pairs of the objects are connected by links.
- the interconnected objects are represented by vertices and the links that connect some pairs of vertices are called edges.
- FIG. 9 is a schematic representation of a vertex-edge graph 900 that represents features of the instance identifiers in the potential groups.
- Vertex-edge graph 900 includes vertices 905 , 910 , 915 , 920 , 925 , 930 that are connected pairwise by groups of one or more edges 935 , 940 , 945 , 950 , 955 , 960 , 965 .
- Vertex-edge graph 900 is a undirected graph.
- Each of vertices 905 , 910 , 915 , 920 , 925 , 930 represents an instance identifier which is found in a potential group that was identified in one or more searches.
- vertex 920 represents the instance identifier “George Washington”
- vertex 920 represents the instance identifier “Franklin D. Roosevelt”
- vertex 930 represents the instance identifier “Martha Washington.”
- the potential groups from which vertices 905 , 910 , 915 , 920 , 925 , 930 are drawn can be constrained to have at least some threshold level of relevance to the search query.
- the relevance of the potential groups to the search query can be determined, e.g., using process 600 ( FIG. 6 ).
- Each group of edges 935 , 940 , 945 , 950 , 955 , 960 , 965 represents co-occurrences of the vertices connected by the edges in a potential group.
- the four different edges in edge group 955 can represent that “George Washington” vertex 920 was found in four potential groups that also included “Franklin D. Roosevelt.”
- other features can be can be represented by edges. Table 1 is a list of examples of such features.
- EXAMPLE FEATURES query that identified source document that includes vertex pair; class of query (e.g., biased query, source-constrained query) that identified source document(s) that include vertex pair; number of potential groups identified by the query that identified source document(s) that include vertex pair; relevance of the source document source document of the vertex pair; extractor that identified vertex pair; other instances in potential groups where vertex pair is found;
- class of query e.g., biased query, source-constrained query
- edges can be determined from the characteristics of neighboring items.
- FIG. 10 is a schematic representation of another vertex-edge graph 1000 that represents features of the instance identifiers in the potential groups.
- Vertex-edge graph 1000 includes vertices 1005 , 1010 , 1015 , 1020 , 1025 , 1030 that are connected pairwise by individual edges 1035 , 1040 , 1045 , 1050 , 1055 , 1060 , 1065 .
- Each of edges 1035 , 1040 , 1045 , 1050 , 1055 , 1060 , 1065 is weighted by a respective weight 1070 , 1075 , 1080 , 1085 , 1090 , 1095 , 1099 .
- Vertex-edge graph 1000 is thus a weighted undirected graph.
- Each of vertices 1005 , 1010 , 1015 , 1020 , 1025 , 1030 represents a potential group of instance identifiers.
- vertex 1015 represents a group of six instance identifiers
- vertex 1020 represents a group of three instance identifiers
- vertex 1025 represents a group of three instance identifiers.
- the potential groups represented in vertices 1005 , 1010 , 1015 , 1020 , 1025 , 1030 can be constrained to have at least some threshold level of relevance to the search query. The relevance of the potential groups to the search query can be determined, e.g., using process 600 ( FIG. 6 ).
- Each of edges 935 , 940 , 945 , 950 , 955 , 960 , 965 represents the “overlap” between the pair of vertices it connects.
- the “overlap” between two vertices is the number of instance identifiers common to the potential groups represented by those vertices.
- the overlap can be represented by the respective weight 1070 , 1075 , 1080 , 1085 , 1090 , 1095 , 1099 associated with each edge 935 , 940 , 945 , 950 , 955 , 960 , 965 .
- weight 1080 represents that there are no instance identifiers which are common to the potential groups represented by vertices 1015 , 1020 and weight 1085 represents that there are three instance identifiers which are common to the potential groups represented by vertices 1015 , 1025 .
- vertex-edge graph 1000 thus represents the overlap between the potential groups in which instance identifiers are found.
- graphs 900 , 1000 need not be displayed in pictorial form, as shown. Rather, graphs 900 , 1000 can remain abstract representations, e.g., in a computer that performs digital data processing operations.
- the system performing process 800 scores the instance identifiers in the potential groups according to the features represented by the edges in the vertex-edge graph (step 815 ).
- the nature of the scoring can depend on the features represented in the vertex-edge graph as well as the role of the instance identifiers themselves in the vertex-edge graph.
- the instance identifiers in the potential groups can be scored using the result of a machine-learning technique performed by a computers that executes one or more sets of machine-readable instructions.
- a training set of data can first be used to allow a machine to establish a set of rules for scoring instance identifiers. This set of rules for scoring can then be applied to other sets of data.
- a predictive analytic tree-building algorithm such as classification and regression tree analysis can score the instances according to the likelihood that they belong in a relevant group, classify the instance identifiers as to whether they belong in a relevant group, or both.
- Tree-building algorithms determine a set of if-then logical rules for scoring instance identifiers that permit accurate prediction or classification of cases. Trees are built by a collection of rules based on values of variables in a modeling data set. The rules can be selected based on how well splits based on the values of different variables can differentiate observations.
- Tree-building algorithms are described, e.g., in: “Classification and Regression Trees,” Breiman et al., Chapman & Hall (Wadsworth, Inc.) New York ( 1984 ); “CART: Tree-structured Non-parametric Data Analysis,” Steinberg et al., Salford Systems, San Diego, Calif., U.S.A. (1995); and “Random Forests,” Breiman, Machine Learning, Vol. 45:1. (2001), pp. 5-32.
- Such a predictive analytic tree-building algorithm can be trained using a group of instance identifiers of confirmed accuracy that are relevant to a search query, a set of potential groups of instance identifiers that have been identified from an unstructured collection of electronic documents, and features of the instance identifiers in the potential groups.
- the decision trees can make their decisions based on features, e.g., the features listed in Table 1. For example, an exhaustive list of the Presidents of the United States of America, a set of potential groups of instance identifiers that have been identified in response to a search query inquiring about the Presidents of the United States of America, and features of the instance identifiers in these potential groups can be used by a machine to establish a classification and regression tree.
- the set of if-then logical rules for scoring in this classification and regression tree can then be applied to other sets of potential groups of instance identifiers that have been identified in response to other search queries, as well as the features of the instance identifiers in these other potential groups.
- the application of these logical conditions can score the instance identifiers in these other potential groups according to the likelihood that they belong in a relevant group, classify the instances as to whether they belong in a relevant group, or both.
- the instance identifiers in the potential groups can be scored by identifying cliques in a vertex-edge graph.
- a clique is a set of pairwise adjacent vertices, or in other words, an induced subgraph which is a complete graph.
- the size of a clique is the number of vertices within the clique.
- vertices 1015 , 1030 form a complete bipartite graph (or a “biclique”) in which every instance identifier in vertex 1015 is also found in vertex 1030 .
- This high degree of overlap is represented by the relatively high value of weight 1090 (i.e., a value of six).
- Vertices 1015 , 1025 have a middling degree of overlap and share only three constituent instance identifiers. This middling degree of overlap is represented by the intermediate value of weight 1085 (i.e., a value of three). Vertices 1020 , 1030 do not overlap at all and this lack of overlap is represented by the zero value of weight 1099 .
- the identification of cliques and the overlap between vertices can be used to score the instance identifiers in the potential groups represented by these vertices. For example, instance identifiers in large cliques and/or with a high degree of overlap can be treated as more likely to have the attributes specified by a search query, whereas instance identifiers in small cliques and/or with a low degree of overlap can be treated as less likely to have the attributes specified by the search query.
- the size of the clique can be weighted more heavily in scoring than the degree of overlap in smaller cliques.
- vertices 1015 , 1025 , 1030 form a three-vertex clique edges having edges with a minimum weight of three
- vertices 1015 , 1030 form a two-vertex clique edges having edges with a minimum weight of six.
- the larger three-vertex clique can be taken as a collection of independent sources confirming that three common instance identifiers are likely to have the attributes specified by a search query.
- a representation of the set of scored instance identifiers can then be transmitted to a client, e.g., client 115 in system 100 ( FIG. 1 ).
- FIG. 11 is a flow chart of a process 1100 for rescoring instance identifiers.
- Process 1100 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions.
- process 1100 can be performed by the search engine 105 in system 100 ( FIG. 1 ).
- Process 1100 can be performed in isolation or in conjunction with other digital data processing operations.
- process 1100 can be performed in conjunction with the activities of process 700 , e.g., after step 710 ( FIG. 7 ) or in conjunction with the activities of process 800 , e.g., after step 815 ( FIG. 8 ).
- the system performing process 1100 receives description information describing a search query and a collection of scored instance identifiers (step 1105 ).
- the instance identifiers can be scored according to the likelihood that they have the attributes specified by the received search query.
- the system performing process 1100 can remove instance identifiers that match the text of the received search query, or permutations of the text of the received search query (step 1110 ). For example, if a search queries that inquires about “U.S. Presidents,” instance identifiers such as “presidents,” “U.S. President,” and the like can be removed from the set of scored instance identifiers. In some implementation, other instance identifiers such as vulgar words can be removed from the set of scored instance identifiers.
- the system performing process 1100 can change the score of like or related instance identifiers in a set of scored instance identifiers (step 1115 ).
- like or related instance identifiers include that which identify the same instance using words that originate from different orthographies (e.g., defense/defence, behavior/behaviour), words that are different transliterations of foreign words (e.g., tsar/czar/csar), words that are abbreviations or diminutives (Robert Kennedy/Bobby Kennedy/R. F. Kennedy), and words that are a substring of another instance identifier (e.g., George Washington/Biography of George Washington).
- like or related instance identifier can be combined into a single instance identifier.
- the system performing process 1100 can also weight the scores of instance identifiers according to the frequency at which the instance identifiers appear in the electronic documents of an unstructured electronic documents collection (step 1120 ). For example, as a group of electronic documents is being indexed, the number of occurrences of different terms (including the instance identifier terms) appearing in the electronic documents can be determined. The scores for different instance identifiers can then be scaled, e.g., by multiplying the scores by a value that is approximately the inverse of the number of occurrences. As a result, the scores of instance identifiers that appear often in the electronic documents can be decreased relative to the scores of instance identifiers that appear only rarely in the electronic documents.
- instance identifiers that match a fixed blacklist can be removed from the collection altogether, in effect, reducing their score to zero.
- the blacklist can include individual instance identifiers or identifier/search query pairs.
- the score of an instance identifier can be changed to reflect the likelihood that the identifier characterizes a category of instances.
- the likelihood that the identifier characterizes a category of instances can be determined from a log of search queries submitted by different human users. For example, in response to a user switching between searching with a search query that identifies a scored instance (e.g., the search query “car”) to searching with a search query that uses that identifier to identify a category (e.g., the search queries “types of car” and “list of cars”), the score of that instance identifier can be decreased.
- the score of the more specific instance identifier can be increased.
- a representation of the set of rescored instance identifier can then be transmitted to a client, e.g., client 115 in system 100 ( FIG. 1 ).
- FIGS. 12-14 are examples of structured presentations 1200 , 1300 , 1400 that present a group of related instance identifiers to user.
- Structured presentations 1200 , 1300 , 1400 can be presented to a user, e.g., by client 115 in presentation 125 on display screen 120 ( FIG. 1 ).
- Structured presentations 1200 , 1300 , 1400 use the spatial arrangement and positioning of information to identify that a group of instance shares one or more common attributes.
- FIG. 12 is a schematic representation of an example table structured presentation 1200 .
- Table 1200 is an organized, systematic arrangement of one or more identifiers of instances, as well as the values of particular attributes shared by those instances.
- structured presentations such as table 1200 can also include identifiers of attributes shared by those instances, as well as identifiers of the units in which values are expressed.
- table 1200 includes a collection of rows 1202 .
- Each row 1202 includes an instance identifier 1206 and a collection of associated attribute values 1207 .
- the arrangement and positioning of attribute values 1207 and instance identifiers 1206 in rows 1202 thus graphically represents the associations between them. For example, a user can discern the association between attribute values 1207 and the instance identifier 1206 that is found in the same row 1202 .
- Table 1200 also includes a collection of columns 1204 .
- Each column 1204 includes an attribute identifier 1208 and a collection of associated attribute values 1207 .
- the arrangement and positioning of attribute values 1207 and attribute identifier 1208 in columns 1204 thus graphically represent the associations between them. For example, a user can discern the association between attribute values 1207 and the attribute identifier 1208 that is found in the same column 1204 based on their alignment.
- Each row 1202 is a structured record 1210 in that each row 1202 associates a single instance identifier 1206 with a collection of associated attribute values 1207 . Further, the arrangement and positioning used to denote these associations in one structured record 1210 is reproduced in other structured records 1210 (i.e., in other rows 1202 ). Indeed, in many cases, all of the structured records 1210 in a structured presentation 106 are restricted to having the same arrangement and positioning of information. For example, values 1207 of the attribute “ATTR — 2” are restricted to appearing in the same column 1204 in all rows 1202 . As another example, attribute identifiers 1208 all bear the same spatial relationship to the values 1207 appearing in the same column 1204 .
- changes to the arrangement and positioning of information in one structured record 1210 are generally propagated to other structured records 1210 in the structured presentation 1200 .
- a new attribute value 1207 that characterizes a new attribute e.g., “ATTR — 23 ⁇ 4”
- a new column 1204 is added to structured presentation 106 so that the values of attribute “ATTR — 23 ⁇ 4” of all instances can be added to structured presentation 106 .
- values 1207 in table 1200 can be presented in certain units of measure. Examples of units of measure include feet, yards, inches, miles, seconds, gallons, liters, degrees Celsius, and the like. In some instances, the units of measure in which values 1207 are presented are indicated by unit identifiers 1209 . Unit identifiers 1209 can appear, e.g., beside values 1207 and/or beside relevant attribute identifiers 1208 . The association between unit identifiers 1209 and the values 1207 whose units of measure are indicated is indicated to a viewer by such positioning. In many cases, all of the values 1207 associated with a single attribute (e.g., all of the values 1207 in a single column 1204 ) are restricted to being presented in the same unit of measure.
- the instances in a group of related instances can be used to populate table 1200 or other structured presentation in a variety of different ways.
- a structured presentation can be populated with related instances in response to a search query.
- the individual instances most relevant to the search query can be displayed in the structured presentation by default.
- a user can alter, or attempt to alter, those instances by, e.g., interacting with or referring to the structured presentation.
- Other instances can be presented as candidates for replacing the instances which the search engine has determined are most likely to be relevant to the search query.
- FIG. 13 is a schematic representation of another implementation of a structured presentation, namely, a structured presentation table 1300 .
- table 1300 In addition to including attribute identifiers 1208 , instance identifiers 1206 , values 1207 , unit identifiers 1209 organized into rows 1202 and columns 1204 , table 1300 also includes a number of interactive elements for interacting with a user.
- table 1300 includes a collection of instance selection widgets 1305 , a collection of action triggers 1310 , a collection of column action trigger widgets 1315 , and a notes column 1320 .
- Instance selection widgets 1305 are user interface components that allow a user to select structured records 1210 in table 1300 .
- instance selection widgets 1305 can be a collection of one or more clickable checkboxes that are associated with a particular structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210 .
- Instance selection widgets 1305 are “clickable” in that a user can interact with widgets 1305 using a mouse (e.g., hovering over the component and clicking a particular mouse button), a stylus (e.g., pressing a user interface component displayed on a touch screen with the stylus), a keyboard, or other input device to invoke the functionality provided by that component.
- Action triggers 1310 are user interface components that allow a user to trigger the performance of an action on one or more structured records 1210 in table 1300 selected using instance selection widgets 1305 .
- action triggers 1310 can be clickable text phrases, each of which can be used by a user to trigger an action described in the phrase.
- a “keep and remove others” action trigger 1310 triggers the removal of structured records 1210 that are not selected using instance selection widgets 1305 from the display of table 1300 .
- a “remove selected” action trigger 1310 triggers the removal of structured records 1210 that are selected using instance selection widgets 1305 from the display of table 1300 .
- a “show on map” action trigger 1310 triggers display of the position of structured records 1210 that are selected using instance selection widgets 1305 on a geographic map. For example, if a selected instance is a car, locations of car dealerships that sell the selected car can be displayed on a map. As another example, if the selected instances are vacation destinations, these destinations can be displayed on a map.
- Column action trigger widgets 1315 are user interface components that allow a user to apply an action to all of the cells within a single column 1204 .
- a further user interface component is displayed which offers to the user a set of possible actions to be performed.
- the actions in this set can include, e.g., removing the entire column 1204 from the structured presentation 1300 or searching to find values for all the cells in column 1204 which are currently blank.
- notes column 1320 is a user interface component that allows a user to associate information with an instance identifier 1206 .
- notes column 1320 includes one or more notes 1325 that are each associated with a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210 .
- the information content of notes 1325 is unrestricted in that, unlike columns 1204 , notes 1325 are not required to be values of any particular attribute. Instead, the information in notes 1325 can characterize unrelated aspects of the instance identified in structured record 1210 .
- table 1300 can include additional information other than values of any particular attribute.
- table 1300 can include a collection of images 1330 that are associated with the instance identified in a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210 .
- table 1300 can include a collection of text snippets 1335 extracted from electronic documents in collection 102 . The sources of the snippets can be highly ranked results in searches conducted using instance identifiers 1206 as a search string. Text snippets 1335 are associated with the instance identified in a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210 .
- table 1300 can include one or more hypertext links 1340 to individual electronic documents in an electronic document collection.
- the linked documents can be highly ranked results in searches conducted using instance identifiers 1206 as a search string.
- the linked documents can be source of a value 1207 that was extracted to populate table 1300 .
- interaction with hypertext link 1340 can trigger navigation to the source electronic document based on information embedded in hypertext link 1340 (e.g., a web site address).
- FIG. 14 is a schematic representation of another implementation of a structured presentation, namely, a card collection 1400 .
- Card collection 1400 is an organized, systematic arrangement of one or more identifiers of instances, as well as the values of particular attributes of those instances. The attributes of an instance can be specified by values.
- card collection 1400 generally includes identifiers of attributes, as well as identifiers of the units in which values are expressed, where appropriate.
- card collection 1400 includes a collection of cards 1402 .
- Each card 1402 includes an instance identifier 1206 and a collection of associated attribute values 1207 .
- the arrangement and positioning of attribute values 1207 and instance identifiers 1206 in cards 1402 thus graphically represents the associations between them. For example, a user can discern the association between attribute values 1207 and the instance identifier 1206 that is found on the same card 1402 .
- cards 1402 in card collection 1400 also include a collection of attribute identifiers 1208 .
- Attribute identifiers 1208 are organized in a column 1404 and attribute values 1207 are organized in a column 1406 .
- Columns 1404 , 1406 are positioned adjacent one another and aligned so that individual attribute identifiers 1208 are positioned next to the attribute value 1207 that characterizes that identified attribute. This positioning and arrangement allows a viewer to discern the association between attribute identifiers 1208 and the attribute values 1207 that characterize those attributes.
- Each card 1402 is a structured record 1210 in that each card 1402 associates a single instance identifier 1206 with a collection of associated attribute values 1207 . Further, the arrangement and positioning used to denote these associations in one card 1402 is reproduced in other cards 1402 . Indeed, in many cases, all of the cards 1402 are restricted to having the same arrangement and positioning of information. For example, the value 1207 that characterizes the attribute “ATTR — 1” is restricted to bearing the same spatial relationship to instance identifiers 1206 in all cards 1402 . As another example, the order and positioning of attribute identifiers 1208 in all of the cards 1402 is the same.
- changes to the arrangement and positioning of information in one card 1402 are generally propagated to other cards 1402 in card collection 1400 .
- a new attribute value 1207 that characterizes a new attribute e.g., “ATTR — 13 ⁇ 4”
- the positioning of the corresponding attribute values 1207 in other cards 1402 is likewise changed.
- cards 1402 in card collection 1400 can include other features.
- cards 1402 can include interactive elements for interacting with a user, such as instance selection widgets, action triggers, attribute selection widgets, a notes entry, and the like.
- cards 1402 in card collection 1400 can include additional information other than values of any particular attribute, such as images and/or text snippets that are associated with an identified instance.
- cards 1402 in card collection 1400 can include one or more hypertext links to individual electronic documents in collection 102 .
- Such features can be associated with particular instances by virtue of appearing on a card 1402 that includes an instance identifier 1206 that identifies that instance.
- a viewer can interact with the system presenting card collection 1400 to change the display of one or more cards 1402 .
- a viewer can trigger the side-by-side display of two or more of the cards 1402 so that a comparison of the particular instances identified on those cards is facilitated.
- a viewer can trigger a reordering of card 1402 , an end to the display of a particular card 1402 , or the like.
- a viewer can trigger the selection, change, addition, and/or deletion of attributes and/or instances displayed in cards 1402 .
- a viewer can trigger a sorting of cards into multiple piles according to, e.g., the values of an attribute values 1207 in the cards.
- cards 1402 will be displayed with two “sides.”
- a first side can include a graphic representation of the instance identified by instance identifier 1206
- a second side can include instance identifier 1206 and values 1207 . This can be useful, for example, if the user is searching for a particular card in the collection of cards 1400 , allowing the user to identify the particular card with a cursory review of the graphical representations on the first side of the cards 1402 .
- Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- the term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, for identifying a group of related instance identifiers. In one aspect, a computer storage medium is encoded with a computer program. The program comprises instructions that when executed by data processing apparatus cause the data processing apparatus to perform operations. The operations include receiving a search query at a data processing apparatus, the search query specifying attributes shared by a group of related instances, searching an electronic document collection to identify instance identifiers that are responsive to the search query, representing features of the instance identifiers in a vertex-edge graph, and scoring relevance of the instance identifiers to the search query according to the features represented in the vertex-edge graph.
Description
- This specification relates to the identification of a group of related instances, e.g., by searching a unstructured collection of electronic documents.
- Instances are individually identifiable entities. Instances can be grouped according to their attributes. An attribute is a property, feature, or characteristic of an instance. A group of instances can be defined by one or more attributes. The instances that belong to a group are determined by the attributes that define the group. For example, the instances New York, Chicago, and Tokyo can be grouped together as cities, whereas Tokyo is excluded from a group of North American cities.
- Search is an automated process in which a user enters a search query and receives responsive results in a result set. The result set can include content that is responsive to the search query and drawn from a collection of electronic documents. An electronic document is a collection of machine-readable digital data. Electronic documents are generally individual files and formatted in accordance with a defined format (e.g., PDF, TIFF, HTML, XML, MS Word, PCL, PostScript, or the like). An electronic document collection can be stored as digital data on one or more data storage devices.
- Electronic document collections can either be unstructured or structured. The formatting of the documents in an unstructured electronic document collection is not constrained to conform with a predetermined structure and can evolve in often unforeseen ways. In other words, the formatting of individual documents in an unstructured electronic document collection is neither restrictive nor permanent across the document collection. Further, in an unstructured electronic document collection, there are no mechanisms for ensuring that new documents adhere to a format or that changes to a format are applied to previously existing documents. Thus, the documents in an unstructured electronic document collection cannot be expected to share a common structure that can be exploited in the extraction of information. Examples of unstructured electronic document collections include the documents available on the Internet, collections of resumes, collections of journal articles, and collections of news articles. Documents in some unstructured electronic document collections are not prohibited from including links to other documents inside and outside of the collection.
- In contrast, the documents in structured electronic document collections generally conform with formats that can be both restrictive and permanent. The formats imposed on documents in structured electronic document collections can be restrictive in that common formats are applied to all of the documents in the collections, even when the applied formats are not completely appropriate. The formats can be permanent in that an upfront commitment to a particular format by the party who assembles the structured electronic document collection is generally required. Further, users of the collections—in particular, computer programs that use the documents in the collection—rely on the documents' having the expected format. As a result, format changes can be difficult to implement. Structured electronic document collections are best suited to applications where the information content lends itself to simple and stable categorizations. Thus, the documents in a structured electronic document collection generally share a common structure that can be exploited in the extraction of information. Examples of structured electronic document collections include databases that are organized and viewed through a database management system (DBMS) in accordance with hierarchical and relational data models, as well as a collections of electronic documents that are created by a single entity for presenting information consistently. For example, a collection of web pages that are provided by an online bookseller to present information about individual books can form a structured electronic document collection. As another example, a collection of web pages that is created by server-side scripts and viewed through an application server can form a structured electronic document collection. Thus, one or more structured electronic document collections can each be a subset of an unstructured electronic document collection.
- This specification describes technologies relating to the identification of one or more groups of related instances. In some implementations, the groups of related instance identifiers are identified by searching an unstructured collection of electronic documents, for example, the electronic documents available on the Internet.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in methods performed by one or more data processing apparatus that include the actions of the data processing apparatus receiving a search query at a data processing apparatus, the data processing apparatus identifying groups of instance identifiers in an unstructured collection of electronic documents with the data processing apparatus, the data processing apparatus determining relevance of the groups of instance identifiers to the search query with the data processing apparatus, and the data processing apparatus scoring at least some of the instance identifiers in the groups of instance identifiers individually with the data processing apparatus; and the data processing apparatus ranking the at least some instance identifiers according to the scores with the data processing apparatus. The search query specifies attributes shared by a group of related instances.
- Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- These and other embodiments can each optionally include one or more of the following features. Determining the relevance of the groups of instance identifiers to the search query can include computing relevance of the groups of instance identifiers to source documents that include the groups of instance identifiers, computing likelihoods that the identified groups of instance identifiers are indeed groups of instance identifiers, and computing relevance of source documents which include the groups of instance identifiers to the search query. Identifying the groups of instance identifiers can include forming a first new query biased to identify groups, forming a second new query constrained to search compendia sources, and searching the unstructured collection of electronic documents with the received query, the first new query, and the second new query.
- The method can also include the data processing apparatus rescoring the at least some instance identifiers before ranking Scoring at least some of the instance identifiers in the groups of instance identifiers can include representing features of the instance identifiers in a vertex-edge graph and scoring the instance identifiers according to the features represented in the vertex-edge graph. The vertices in the vertex-edge graph can represent groups of instance identifiers. Respective edges in the vertex-edge graph can be weighted according to overlap between the vertices connected by the edge. Vertices in the vertex-edge graph can represent individual instance identifiers. Respective edges in the vertex-edge graph represent features shared by the instance identifiers. A first edge in the vertex-edge graph can represent an extractor that identified a pair of vertices joined by the first edge. A first edge in the vertex-edge graph can represent other instance identifiers in potential groups where vertices joined by the first edge are found. A first edge in the vertex-edge graph can represent a class of the query that identified source document where vertices joined by the first edge are found. Scoring the instance identifiers can include identifying cliques in the vertex-edge graph. Scoring the instances identifiers can include scoring the instance identifiers using a predictive analytic tree-building algorithm. Scoring the instance identifiers using the predictive analytic tree-building algorithm can include training the predictive analytic tree-building algorithm using a group of instance identifiers of confirmed accuracy that are relevant to a search query, a set of potential groups of instance identifiers that have been identified from an unstructured collection of electronic documents, and features of the instance identifiers in the potential groups and generating a classification and regression tree.
- Another innovative aspect of the subject matter described in this specification can be embodied in computer storage media encoded with a computer program. The programs can include instructions that when executed by data processing apparatus cause a data processing apparatus to perform operations. The operations can include receiving a search query at a data processing apparatus, the search query specifying attributes shared by a group of related instances, searching an electronic document collection to identify identifiers of instance that are responsive to the search query, representing features of the instance identifiers in a vertex-edge graph, and scoring relevance of the instance identifiers to the search query according to the features represented in the vertex-edge graph.
- Other embodiments of this aspect include corresponding systems, apparatus, and methods, configured to perform the actions of the operations.
- These and other embodiments can each optionally include one or more of the following features. The operations can also include identifying groups of instance identifiers in the electronic documents of the collection and determining relevance of the groups of instance identifiers to the search query. A first feature represented in the vertex-edge graph can include the relevance of the groups that include respective instance identifiers to the search query. The operations can also include identifying electronic documents available on the Internet that are relevant to the search query and extracting groups of instance identifiers from the electronic documents that are relevant to the search query. The operations can also include computing relevance of the electronic documents from which the groups of instance identifiers are extracted to the search query, computing relevance of the groups of instance identifiers to the electronic documents from which the groups of instance identifiers are extracted, and computing likelihoods that the groups of instance identifiers are groups of instance identifiers.
- Identifying the groups of instance identifiers can include forming a new query biased to identify groups and searching the electronic document collection with the new query. A first edge in the vertex-edge graph can represent a class of the query that identified a pair of vertices joined by the first edge. A first edge in the vertex-edge graph can represent other instance identifiers in potential groups where vertices joined by the first edge are found. Scoring relevance of the instance identifiers to the search query can include identifying cliques in the vertex-edge graph.
- Another innovative aspect of the subject matter described in this specification can be embodied in systems that include a client device and one or more computers programmed to interact with the client device and the data storage device. The computers are programmed to perform operations comprising receiving a search query from the client device, the search query explicitly or implicitly specifying attributes of instances, searching an electronic document collection to identify identifiers of instances that may have the attributes specified by the search query, representing features of the search of the electronic document collection in a vertex-edge graph, scoring the instance identifiers that may have the attributes specified by the search query according to the features represented in the vertex-edge graph, and outputting, the client device, instructions for visually presenting at least some of the instance identifiers.
- Other embodiments of this aspect include corresponding methods and computer programs encoded on computer storage devices configured to perform the operations of the computers.
- These and other embodiments can each optionally include one or more of the following features. Outputting the instructions can include outputting instructions for visually presenting a structured presentation at the client device and the client device is configured to receive the instructions and cause the structured presentation to be visually presented. The system can include a data storage device storing a data describing multiple groups of instances. The system can include a data storage device storing machine-readable instructions tailored to identify and extract groups of instance identifiers from electronic documents in an unstructured collection. Representing features can include representing the relevance of the groups in which the instance identifiers appear in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers individually according to the relevance of the groups in which the instance identifiers appear to the search query. Scoring the instance identifiers can include identifying cliques in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers according to an extractor represented in the vertex-edge graph. Scoring the instance identifiers can include scoring the instance identifiers according to a class of a query represented in the vertex-edge graph.
- The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a schematic representation of a system in which a group of related instances is identified. -
FIG. 2 is a flow chart of a process for identifying a group of related instances. -
FIG. 3 is a schematic representation of a process for identifying a group of related instances. -
FIG. 4 is a flow chart of a process for identifying electronic documents relevant to a query. -
FIG. 5 is a schematic representation of a process for identifying electronic documents relevant to a query. -
FIG. 6 is a flow chart of a process for determining the relevance of groups of instances to a search query. -
FIG. 7 is a flow chart of a process for scoring instances according to relevance of groups in which instances appear. -
FIG. 8 is a flow chart of a process for scoring instances according to the relevance of groups in which instances appear. -
FIG. 9 is a schematic representation of a vertex-edge graph that represents features of the instances in the potential groups. -
FIG. 10 is a schematic representation of another vertex-edge graph that represents features of the instances in the potential groups. -
FIG. 11 is a flow chart of a process for rescoring instances. -
FIGS. 12-14 are examples of structured presentations that present a group of related instances to user. - Like reference numbers and designations in the various drawings indicate like elements.
-
FIG. 1 is a schematic representation of asystem 100 in which a group of related instances is identified. Related instances are instances that share one or more common attributes. Insystem 100, a group of related instances is identified in response to a search query. The search query specifies the attributes that are shared by the related instances. The attributes that are shared by a group of related instances can be specified by the search query explicitly, implicitly, or both explicitly and implicitly. For example, a search query “cities” implicitly specifies instances of discrete densely populated urban areas. As another example, a search query “cities located in North America” explicitly identifies that such urban areas are to be located in North America. -
System 100 includes asearch engine 105, acollection 110 of groups of identifiers of instances, and aclient 115.Client 115 is a device for interacting with a user and can be implemented as a computer programmed with machine-readable instructions.Client 115 can include one or more input/output devices and can receive, from a user, a search query that specifies the attributes that are shared by a group of related instances. For example, a user who is currently interacting withclient 115 can enter a search query using an input device such as a mouse or a keyboard. The search query can include text. Examples of textual search queries include “US presidents” and “North American cities.” As another example, a user can enter a search query by interacting with or referring to a graphical elements displayed ondisplay screen 120. For example, a user can click on a cell in a structured presentation or formulate a search query that refers to a feature that appears in a structured presentation (e.g., “ROW —1”). Structured presentations are described in more detail below. -
Client 115 can also present a group of identifiers of related instances that shares the attributes specified by the search query. In the illustrated example,client 115 includes adisplay screen 120 that displays apresentation 125.Presentation 125 indicates that a group (i.e., “CATEGORY_X”) includes a collection of related instances (i.e., identified by identifiers “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C”). In the illustrated implementation,presentation 125 is text. Other presentations can indicate that a group includes a collection of related instances. For example, structured presentations can identify a group in a column header and a collection of related instances in the cells in the column under that header. - In response to receipt of the search query,
client 115 transmits a representation of the search query, or the search query itself, tosearch engine 105 in amessage 135.Message 135 can be transmitted over a data communications network.Search engine 105 can receivemessage 135 and use the content ofmessage 135 to define parameters for searching. -
Search engine 105 can be implemented on one or more computers deployed at one or more geographical locations that are programmed with one or more sets of machine-readable instructions for identifying a relevant group of related instances from the groups of instances incollection 110. In some implementations, other functionality—i.e., functionality in addition to the functionality ofsearch engine 105—can be implemented on the one or more computers.Search engine 105 identifies a relevant group of related instances according to the parameters for searching defined by the content ofmessage 135. The search can yield a result set of relevant instances responsive to the search query described inmessage 135. The content of the result set, the arrangement of instances in the result set, or both can reflect the likelihood that the constituent instances are relevant to the search query. In some implementations, the content or arrangement of instances in the result set can also reflect other factors, such as the relative importance of the instances or a confidence that the instances are indeed responsive to the search query. - The groups of identifiers of instances in
collection 110 can be found in or drawn from electronic documents of an unstructured electronic documents collection. For example,collection 110 can be groups of identifiers of instances that are found in electronic documents available on the Internet. The source documents of the groups of identifiers of instances are thus not necessarily constrained to conform with a predetermined structure that can be exploited for the extraction of information. For this reason, one or more computers can execute one or more sets of machine-readable instructions that are tailored to identify and extract groups of identifiers of instances from an unstructured electronic documents collection. Machine-readable instructions that are tailored in this way can be referred to as “extractors.” -
Collection 110 can include, e.g., lists ofinstance identifiers 145, tables ofinstance identifiers 150, andstructured text 155 that includes instance identifiers. A list ofinstance identifiers 145 is an ordered series of words or numerals. A list of instance identifiers can be found in text and identifiable, e.g., by grammatical conventions or mark-up tags. For example, the instance identifiers in a list can be delineated by commas or semicolons in text. A table ofinstance identifiers 150 is a systematic arrangement of instance identifiers. For example, instance identifiers can be arranged in rows or columns. In electronic documents, tables can be identified, e.g., by lines or spaces that delineate rows and columns or by mark-up tags.Structured text 155 includes other structured arrangements of instance identifiers, such as instance identifiers ordered by bullet points or instances in a series of paragraph headings. In electronic documents, structuredtext 155 can be identified, e.g., by the structural features of the arrangement of instances or by mark-up tags. - In some implementations,
collection 110 can also include groups of one or more instance identifiers that are formed using text extraction techniques. In particular, textual patterns that explicitly or implicitly indicate that an identified instance has certain attributes can be used to form groups of one or more instance identifiers. For example, text such as “New York, the largest city in North America, . . . ” and “Quebec was the first North American city to be designated a UNESCO World Heritage Site . . . ” can be identified using pattern identification techniques. For example, text extraction techniques using Hearst patterns or the approaches described in, e.g., “The Role of Documents vs. Queries in Extracting Class Attributes from Text,” by M. Pasca, B. Van Durme, and N. Garera (CIKM'07, Nov. 6-8, 2007, Lisboa, Portugal) and “Weakly-Supervised Acquisition of Open-Domain Classes and Class Attributes fromWeb Documents and Query Logs” by M. Pasca, B. Van Durme (Proceedings of ACL-08: HLT, pages 19-27, Columbus, Ohio, USA, June 2008) can be used. Instance identifiers can be extracted from text and combined to form a group of instance identifiers having the attributes explicitly and implicitly associated with, e.g., North American cities. Extractors can use such characteristics to identify and extract groups of instances from an unstructured electronic documents collection. -
Search engine 105 can transmit a representation of the result set toclient 115 in amessage 140.Message 140 can be transmitted, e.g., over the same data communications network that transmittedmessage 135.Client 115 can receivemessage 140 and use the content ofmessage 140 to display apresentation 125 ondisplay screen 120.Presentation 125 indicates that one or more common attributes are shared by a group of instances, namely, at least some the instances in the result set described inmessage 135. In some implementations,presentation 125 can use text to identify the shared attributes and instance identifiers. For example, in the illustratedimplementation presentation 125 describes that instance identified as “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C” share the attribute of belonging to a category “CATEGORY_X.” Category “CATEGORY_X” can explicitly or implicitly specify the attributes shared by instance identified as “INSTANCE_A,” “INSTANCE_B,” and “INSTANCE_C.” - In some implementations,
presentation 125 can use the spatial arrangement and positioning of information to identify that a group of instance shares one or more common attributes. For example,presentation 125 can be a structured presentation, as described further below. -
FIG. 2 is a flow chart of aprocess 200 for identifying a group of related instance identifiers.Process 200 can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions. For example,process 200 can be performed by thesearch engine 105 insystem 100. - The
system performing process 200 receives a query (step 205). For example, in the context of system 100 (FIG. 1 ), the system can receive a representation of the search query or the search query itself inmessage 135 over a data communications network. - The
system performing process 200 identifies that the query inquires about a group of related instances (step 210). The query can be identified as inquiring about a group of related instances from the content of the query, the context of the query, or both. For example, the terms in a text search query “cities in California” can be identified as inquiring about a group of related instances such as “San Diego,” “Los Angeles,” and “Bakersfield” due to the plural term “cities” being characterized by a common attribute of those instances, namely, being “in California.” As another example, the terms in a search query “Ivy League schools” can be identified as inquiring about a group of related instances (such as “Cornell,” “Columbia,” and “Brown”) due to the plural term “schools” being characterized by a common attribute “Ivy League.” The context of the receipt of the search query can also be used to identify that a query inquires about a group of related instances. For example, an express indication by a user or the history of previous queries can be used to identify that a search query inquires about a group of related instances. - The
system performing process 200 identifies electronic documents that are relevant to the search query (step 215). The electronic documents can be identified by matching text, concepts, or both to entries in an indexed database of electronic documents. The match between the text or concepts in the electronic documents can be used to determine a page rank that embodies the relevance of the electronic documents to the search query, as well as other factors. Examples of these other factors include, e.g., the age of the electronic document, the number of links from other electronic documents to the electronic document, the likelihood that the electronic document is a “spam document,” and the like. - The
system performing process 200 identifies groups of instance identifiers in the relevant electronic documents (step 220). For example, groups of instance identifiers can be identified by delineations, mark-up tags, or other characteristics of the arrangement of instance identifiers in the relevant electronic documents. In some implementations, the groups of instance identifiers can be extracted from their respective source electronic documents and assembled into a collection, e.g.,collection 110 in system 100 (FIG. 1 ). - The
system performing process 200 determines the relevance of each group of instance identifiers to the search query (step 225). In general, the relevance of a group of instance identifiers to a search query will differ from the relevance or page rank of its source electronic document to that same query. For example, at least some of the text and concepts that appear in a source electronic document will generally be omitted from a group of instance identifiers in that document. In some implementations, the relevance of a group of instance identifiers can be determined according to the relevance or page rank of its source electronic document and other factors, as described further below. - The
system performing process 200 scores the relevance of the instances that appear in the groups individually (step 230). The scores of the individual instance identifiers can embody the likelihood that each individual instance is relevant to the search query. In some implementations, individual instance identifiers are scored according to the relevance of the groups in which the instance identifiers appear, the overlap between the instance identifiers that appear in different groups, other features of the search that identified the groups in which the instance identifiers appeared, or combinations of these and other factors. A single group of instance identifiers from a single source electronic document can thus include a collection of instance identifiers that are scored differently. Examples of different approaches to scoring the relevance of groups are described further below. - The
system performing process 200 ranks the individual instance identifiers according to their scores (step 235). The ranking can characterize the likelihood that individual instances are relevant to the search query. For example, an instance with a high ranking is one that is likely to be an entity that has the attributes explicitly or implicitly identified in the search query. On the other hand, an instance with a low ranking is one that is unlikely to be an entity that has the attributes explicitly or implicitly identified in the search query. The ranked instance identifiers can be output in a result set provided to a user, e.g., in a message transmitted over a data transmission network, e.g., message 140 (FIG. 1 ). -
FIG. 3 is aschematic representation 300 of a process for identifying a group of related instance identifiers. The process can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions. For example,representation 300 can represent the identification of related instance identifiers using process such as process 200 (FIG. 2 ) in a system such as system 100 (FIG. 1 ). - A collection of
electronic documents 305 can be searched to yield acollection 310 of groups of instance identifiers.Collection 305 can be an unstructured collection ofelectronic documents 305. The search can be performed in response to a search query that is used to define parameters for searching. The search can identify relevant documents that include groups of instance identifiers. These groups of instance identifiers can be extracted from their respective source documents to yieldcollection 310. - The individual instance identifiers within the groups of instances in
collection 310 can then be ranked according to relevance to the search query. The instances can thus be entities that share one or more attributes implicitly or explicitly identified in the search query. The ranked instance identifiers can be output in a result set provided to a user. In some implementations, the top-ranked instance identifiers can be found in different groups of instance identifiers incollection 310. For example, the highest-ranked instance identifier may be found in a first group of instance identifiers, whereas the second highest-ranked instance identifier may be absent from that first group of instance identifiers. -
FIG. 4 is a flow chart of aprocess 400 for identifying electronic documents relevant to a query.Process 400 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example,process 400 can be performed by thesearch engine 105 in system 100 (FIG. 1 ).Process 400 can be performed in isolation or in conjunction with other digital data processing operations. For example,process 400 can be performed in conjunction with the activities ofprocess 200, e.g., at step 215 (FIG. 2 ). - The
system performing process 400 receives a search query (step 405). For example, in the context of system 100 (FIG. 1 ), the system can receive a representation of the search query or the search query itself inmessage 135 over a data communications network. - The
system performing process 400 forms one or more new search queries that are biased to identify groups of instance identifiers (step 410). Such a biased query can be formed by combining text or concepts represented in the received search query with text or concepts that are biased toward the identification of groups of instance identifiers. For example, text drawn from the received search query (e.g., “rollercoasters” or “hybrid vehicles”) can be combined with text biased toward the identification of groups (e.g., “list of [query text],” “this year's [query text],” “my favorite [query text],” “group of [query text],” “the best [query text],” “[query text] such as,” “[query text] including,” and the like). - In some implementations, a biased query can include text or concepts that are intended to prevent certain groups of instance identifiers from being identified by the biased query. For example, in some implementations, a collection of biased queries can be formed, with each including text that specifies a subcategory of a broader category specified by the query text. Examples of such biased queries include “[subcategory—1] [query text] such as,” “[subcategory—2] [query text] such as,” and “[subcategory—3] [query text] such as.”
- By way of example, suppose the search query “restaurants” is received. As discussed above, a query that is biased to identify groups of instance identifiers such as “[restaurants] including” can be formed. However, in addition to identifying individual restaurants (e.g., the instance identifiers “Bodo's Bagels,” “Point Loma Seafood,” and “Pat's Pizza”), this biased query could also identify identifiers of instances of culinary sub-categories of restaurants (e.g., “French restaurants,” “Italian restaurants,” “Thai restaurants,” and “fast food restaurants”). In such instances, text that specifies such sub-categories of the broader category can be included in a collection of biased queries. For example, biased queries such as “[French] [restaurants] including,” “[Italian] [restaurants] including,” and “[Thai] [restaurants] including,” “[fast food] [restaurants] including”) can be formed.
- The
system performing process 400 also forms one or more new search queries that are constrained to search certain sources (step 415). In some implementations, searches can be constrained to one or more compendia, such as encyclopedia (e.g., www.wikipedia.org) or dictionaries. In some implementations, the searched sources are constrained according to the subject mater of the query. For example, a search for “hybrid vehicles” may be constrained to searching news media and consumer agencies that deal with motor vehicles. - The
system performing process 400 conducts a search using the received search query, the search queries that are biased to identify groups of instance identifiers, and the search queries that are constrained to search certain sources (step 420). The searches can be run in series or in parallel. The searches using the received search query and the biased search queries can be conducted on the same unstructured collection of electronic documents (e.g., the electronic documents available on the Internet). Each of the searches can yield a separate search result set that identifies electronic documents relevant to the respective search query. The individual documents in each search result set can be scored and ranked, e.g., according to the relevance to the respective search query and other factors. - The
system performing process 400 combines the search result sets yielded by the different searches into a combined search result set (step 425). The electronic documents identified in the combined search result set can be ranked, e.g., according to the relevancy score or page rank determined in the individual searches. In some implementations, the relevancy scores or page ranks determined in the individual searches are normalized to a standard, e.g., so that the highest ranked electronic documents in each search result set are the three highest ranked electronic documents in the combined search result set. In other implementations, the relevancy scores or page ranks are weighted to prefer electronic documents found in multiple search result sets or electronic documents found in search result sets yielded by a certain one of the searches. For example, the relevancy scores or page ranks of electronic documents in search result sets yielded by queries that are constrained to search certain sources can be preferentially weighted to appear higher in the rankings of the combined search result set. -
FIG. 5 is aschematic representation 500 of a process for identifying electronic documents relevant to a query. The process can be performed by one or more computers that perform operations by executing one or more sets of machine-readable instructions. For example,representation 500 can represent the identification of electronic documents using a process such as process 400 (FIG. 4 ) in a system such as system 100 (FIG. 1 ). - An
unstructured collection 505 of electronic documents (e.g., the documents available on the Internet) can be searched multiple times to yield a source-constrained query result set 510, a result set 515 yielded by a query that is biased to identify groups, and a query result set 520. Result sets 510, 515, 520 can identify the same or different electronic documents incollection 505. Result sets 510, 515, 520 can be combined together to form a combined result set 525. Combined result set 525 identifies electronic documents which appear inunstructured collection 505. -
FIG. 6 is a flow chart of aprocess 600 for determining the relevance of groups of instance identifiers to a search query.Process 600 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example,process 600 can be performed by thesearch engine 105 in system 100 (FIG. 1 ).Process 600 can be performed in isolation or in conjunction with other digital data processing operations. For example,process 600 can be performed in conjunction with the activities ofprocess 200, e.g., at step 225 (FIG. 2 ). - The
system performing process 600 receives a search query (step 605). For example, in the context of system 100 (FIG. 1 ), the system can receive a representation of the search query or the search query itself inmessage 135 over a data communications network. - The
system performing process 600 computes the relevance of each of a collection of source documents to the query (step 610). The relevance can be computed, e.g., by matching a query to text, concepts, or both in an electronic document. The match between the text or concepts in the electronic documents can be used to determine a page rank that embodies the relevance of the electronic documents to the search query and potentially other factors. - The
system performing process 600 computes the likelihood that potential groups of instance identifiers in the source documents are actually groups of instance identifiers (step 615). As described above, delineations, mark-up tags, or other characteristics of the arrangement of instance identifiers in the relevant electronic documents can be used to identify potential groups of instance identifiers. In some circumstances, it is not completely certain that a group of instance identifiers has in fact been identified. For example, although commas are generally used to delineate members of a list in text, commas may sometimes be omitted from a list inadvertently or otherwise. In such cases, the certainty that a series of instance identifiers is in fact a list is decreased. As another example, different textual patterns can be more or less likely to exclusively identify instance identifiers that have certain attributes. The likelihood that a potential group of instance identifiers assembled using such textual patterns actually includes correct instance identifiers can be computed according to the accuracy of the textual patterns used. - As another example, mark-up HTML tags such as <b>, <li>, <td>, <a>, and the like can be used to identify potential groups of instance identifiers. However, such HTML tags do not always delineate lists of items. Instead, HTML authors can use them for other purposes. For example, the HTML tag <li>—which is designed to define list items—can also be used for other formatting purposes or to contain ancillary text that does not identify a group of instance identifiers. Thus, it is not completely certain that even mark-up tags designed to define a group of instance identifiers can actually be used to identify a group of instance identifiers.
- The likelihood that a group of instance identifiers has been identified can be computed and expressed as a normalized value between absolute certainty that a group of instance identifiers has been identified (e.g., a “1”) and absolute certainty that a group of instance identifiers has not been identified (e.g., a “0”).
- The
system performing process 600 computes the relevance of each potential group of instance identifiers to the source document that includes the potential group (step 620). In some circumstances, a group of instance identifiers is unrelated to other content of the electronic document that includes the group of instance identifiers. For example, the cover page of a company newsletter may include a table setting forth the addresses where the company has offices. Although the table is a group of instance identifiers, the content of this table (e.g., office addresses) may be unrelated to other content of the newsletter. The system can compute the relevance of each potential group of instance identifiers to the source document that includes the potential group by comparing the text, the concepts, or both in the potential group of instance identifiers to the text, the concepts, or both in the source document. - The
system performing process 600 ranks the potential groups according to the relevance of source document to query, the likelihood that potential group of instance identifiers is a group, and the relevance of potential group to source document (step 620). For example, a merit score “SG” can be computed for each potential group of instance identifiers according to a formula that relies upon multiplication, addition, exponentiation, or other computation using the relevance of the source document of the potential group of instance identifiers to the query, the likelihood that the potential group of instance identifiers is in fact a group, and the relevance of the potential group of instance identifiers to the source document that includes the potential group of instance identifiers. For example, in some implementations, the merit score “SG” is computed for each potential group of instances according to the formula: -
SG=RDQLGRGD Equation 1 - where “RDG” is the relevance of the source document of the potential group of instance identifiers to the query, “LG” is the likelihood that the potential group of instance identifiers is in fact a group, and “RGD” is the relevance of the potential group of instance identifiers to the source document that includes it. The merit score SG of each potential group of instance identifiers can thus embody the relevance of those potential groups to a search query.
- As another example, a merit score “SG” can be computed for each potential group of instance identifiers using machine-learning techniques. For example, the relevance of source document to query, the likelihood that potential group of instance identifiers is a group, and the relevance of potential group to source document can be input into as features into a predictive analytic tree-building algorithm that has been trained using a groups of known relevance to a search query. The merit score “SG” yielded by a predictive analytic tree-building algorithm can embody the percentage of decision trees that have voted for a group. This percentage can be expressed as a number between 0 and 1. In some implementations, the percentage of decision trees that have voted for a group can be adjusted to account for factors such as the number of times that a group appears, the extent to which the members of the group have been refined, and other factors.
-
FIG. 7 is a flow chart of aprocess 700 for scoring instance identifiers according to relevance of groups in which instance identifiers appear.Process 700 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example,process 700 can be performed by thesearch engine 105 in system 100 (FIG. 1 ).Process 700 can be performed in isolation or in conjunction with other digital data processing operations. For example,process 700 can be performed in conjunction with the activities ofprocess 200, e.g., at step 230 (FIG. 2 ). - The
system performing process 700 receives description information describing potential groups (including the identity of the instance identifiers in the potential groups) and the relevance of these potential groups to a search query (step 705). For example, the system can receive a listing of the instance identifiers in each potential group and a merit score SG for each potential group. - The
system performing process 700 estimates the likelihood that each instance identifier appears in a relevant group according to relevance of potential groups in which instance identifier appears (step 710). A group of instance identifiers is relevant to a search query when the group includes instance identifiers that share the attributes that are implicitly or explicitly specified in the search query. The likelihood that each instance identifier appears in a relevant group can thus embody the relevance of the instance identifier to a search query. - In some implementations, the likelihood that each instance identifier appears in a relevant group is estimated according to a method that relies on an expectation maximization algorithm. An expectation maximization algorithm makes maximum-likelihood estimates of one or more parameters of a distribution from a set of data that is incomplete and missing variables. An expectation maximization algorithm can pick a set of parameters that best describes a set of data given a model.
- In the present context, the set of data are the potential groups. The model assumes that some potential group are relevant to the query (groups “R”) whereas other potential groups are not relevant to the query (groups “N”). Further, a given item (i) has a probability of occurring in a relevant group “P(i|R)” and a probability of occurring in an irrelevant group “P(i|N)”. The probabilities P(i|R), P(i|N) can initially be estimated based on, e.g., the relevance of the source document of the group to a search query, the likelihood that a group of instances is indeed a group, and the relevance of the group to its source document. The probabilities P(i|R), P(i|N) can then be maximized using the expectation maximization algorithm.
- The expectation maximization algorithm can be implemented as iterative processes which alternates between expectation steps and maximization steps. In expectation steps, missing variables are estimated from the observed data and current estimates of the parameters of the distribution. In maximization steps, estimates of the parameters of the distribution is maximized under the assumption that the missing variables are known, i.e., have the values estimated in the previous expectation step. As the steps are iteratively repeated, the estimates of the parameters of the distribution converge. Expectation maximization algorithms are described in more detail, e.g., in “Maximum Likelihood from Incomplete Data via the EM Algorithm” by A. P. Dempster, N. M. Laird, D. B. Rubin Journal of the Royal Statistical Society, Series B (Methodological) 39 (1) pp. 1-38 (1977).
-
FIG. 8 is a flow chart of aprocess 800 for scoring instance identifiers according to the relevance of groups in which instance identifiers appear.Process 800 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example,process 800 can be performed by thesearch engine 105 in system 100 (FIG. 1 ).Process 800 can be performed in isolation or in conjunction with other digital data processing operations. For example,process 800 can be performed in conjunction with the activities ofprocess 200, e.g., at step 230 (FIG. 2 ). - The
system performing process 800 receives description information describing potential groups (including the identity of the instance identifiers in the potential groups) and the relevance of these potential groups to a search query (step 805). For example, the system can receive a listing of the instance identifiers in each potential group and a merit score SG for each potential group. - The
system performing process 800 represents features of the instance identifiers in the potential groups in one or more vertex-edge graphs (step 810). A vertex-edge graph is a representation of a set of objects where some pairs of the objects are connected by links. The interconnected objects are represented by vertices and the links that connect some pairs of vertices are called edges. -
FIG. 9 is a schematic representation of a vertex-edge graph 900 that represents features of the instance identifiers in the potential groups. Vertex-edge graph 900 includesvertices more edges edge graph 900 is a undirected graph. - Each of
vertices vertex 920 represents the instance identifier “George Washington,”vertex 920 represents the instance identifier “Franklin D. Roosevelt,” andvertex 930 represents the instance identifier “Martha Washington.” The potential groups from whichvertices FIG. 6 ). - Each group of
edges edge group 955 can represent that “George Washington”vertex 920 was found in four potential groups that also included “Franklin D. Roosevelt.” In some implementations, other features can be can be represented by edges. Table 1 is a list of examples of such features. -
TABLE 1 EXAMPLE FEATURES query that identified source document that includes vertex pair; class of query (e.g., biased query, source-constrained query) that identified source document(s) that include vertex pair; number of potential groups identified by the query that identified source document(s) that include vertex pair; relevance of the source document source document of the vertex pair; extractor that identified vertex pair; other instances in potential groups where vertex pair is found; - In some implementations, other features that can be represented by edges can be determined from the characteristics of neighboring items.
-
FIG. 10 is a schematic representation of another vertex-edge graph 1000 that represents features of the instance identifiers in the potential groups. Vertex-edge graph 1000 includesvertices individual edges edges respective weight edge graph 1000 is thus a weighted undirected graph. - Each of
vertices vertex 1015 represents a group of six instance identifiers,vertex 1020 represents a group of three instance identifiers, andvertex 1025 represents a group of three instance identifiers. The potential groups represented invertices FIG. 6 ). - Each of
edges respective weight edge weight 1080 represents that there are no instance identifiers which are common to the potential groups represented byvertices weight 1085 represents that there are three instance identifiers which are common to the potential groups represented byvertices edge graph 1000. Vertex-edge graph 1000 thus represents the overlap between the potential groups in which instance identifiers are found. - The vertices and edges of
graphs graphs - Returning to
FIG. 8 , thesystem performing process 800 scores the instance identifiers in the potential groups according to the features represented by the edges in the vertex-edge graph (step 815). The nature of the scoring can depend on the features represented in the vertex-edge graph as well as the role of the instance identifiers themselves in the vertex-edge graph. - In some implementations, the instance identifiers in the potential groups can be scored using the result of a machine-learning technique performed by a computers that executes one or more sets of machine-readable instructions. A training set of data can first be used to allow a machine to establish a set of rules for scoring instance identifiers. This set of rules for scoring can then be applied to other sets of data.
- For example, in the context of vertex-edge graph 900 (
FIG. 9 ), a predictive analytic tree-building algorithm such as classification and regression tree analysis can score the instances according to the likelihood that they belong in a relevant group, classify the instance identifiers as to whether they belong in a relevant group, or both. Tree-building algorithms determine a set of if-then logical rules for scoring instance identifiers that permit accurate prediction or classification of cases. Trees are built by a collection of rules based on values of variables in a modeling data set. The rules can be selected based on how well splits based on the values of different variables can differentiate observations. Examples of tree-building algorithms are described, e.g., in: “Classification and Regression Trees,” Breiman et al., Chapman & Hall (Wadsworth, Inc.) New York (1984); “CART: Tree-structured Non-parametric Data Analysis,” Steinberg et al., Salford Systems, San Diego, Calif., U.S.A. (1995); and “Random Forests,” Breiman, Machine Learning, Vol. 45:1. (2001), pp. 5-32. - Such a predictive analytic tree-building algorithm can be trained using a group of instance identifiers of confirmed accuracy that are relevant to a search query, a set of potential groups of instance identifiers that have been identified from an unstructured collection of electronic documents, and features of the instance identifiers in the potential groups. The decision trees can make their decisions based on features, e.g., the features listed in Table 1. For example, an exhaustive list of the Presidents of the United States of America, a set of potential groups of instance identifiers that have been identified in response to a search query inquiring about the Presidents of the United States of America, and features of the instance identifiers in these potential groups can be used by a machine to establish a classification and regression tree. The set of if-then logical rules for scoring in this classification and regression tree can then be applied to other sets of potential groups of instance identifiers that have been identified in response to other search queries, as well as the features of the instance identifiers in these other potential groups. The application of these logical conditions can score the instance identifiers in these other potential groups according to the likelihood that they belong in a relevant group, classify the instances as to whether they belong in a relevant group, or both.
- In some implementations, the instance identifiers in the potential groups can be scored by identifying cliques in a vertex-edge graph. A clique is a set of pairwise adjacent vertices, or in other words, an induced subgraph which is a complete graph. The size of a clique is the number of vertices within the clique. In the context of vertex-edge graph 1000 (
FIG. 10 ),vertices vertex 1015 is also found invertex 1030. This high degree of overlap is represented by the relatively high value of weight 1090 (i.e., a value of six).Vertices Vertices weight 1099. - The identification of cliques and the overlap between vertices can be used to score the instance identifiers in the potential groups represented by these vertices. For example, instance identifiers in large cliques and/or with a high degree of overlap can be treated as more likely to have the attributes specified by a search query, whereas instance identifiers in small cliques and/or with a low degree of overlap can be treated as less likely to have the attributes specified by the search query. In some implementations, the size of the clique can be weighted more heavily in scoring than the degree of overlap in smaller cliques. For example,
vertices vertices client 115 in system 100 (FIG. 1 ). -
FIG. 11 is a flow chart of aprocess 1100 for rescoring instance identifiers.Process 1100 can be performed by one or more computers that perform digital data processing operations by executing one or more sets of machine-readable instructions. For example,process 1100 can be performed by thesearch engine 105 in system 100 (FIG. 1 ).Process 1100 can be performed in isolation or in conjunction with other digital data processing operations. For example,process 1100 can be performed in conjunction with the activities ofprocess 700, e.g., after step 710 (FIG. 7 ) or in conjunction with the activities ofprocess 800, e.g., after step 815 (FIG. 8 ). - The
system performing process 1100 receives description information describing a search query and a collection of scored instance identifiers (step 1105). The instance identifiers can be scored according to the likelihood that they have the attributes specified by the received search query. - The
system performing process 1100 can remove instance identifiers that match the text of the received search query, or permutations of the text of the received search query (step 1110). For example, if a search queries that inquires about “U.S. Presidents,” instance identifiers such as “presidents,” “U.S. President,” and the like can be removed from the set of scored instance identifiers. In some implementation, other instance identifiers such as vulgar words can be removed from the set of scored instance identifiers. - The
system performing process 1100 can change the score of like or related instance identifiers in a set of scored instance identifiers (step 1115). Examples of like or related instance identifiers include that which identify the same instance using words that originate from different orthographies (e.g., defense/defence, behavior/behaviour), words that are different transliterations of foreign words (e.g., tsar/czar/csar), words that are abbreviations or diminutives (Robert Kennedy/Bobby Kennedy/R. F. Kennedy), and words that are a substring of another instance identifier (e.g., George Washington/Biography of George Washington). In some implementations, like or related instance identifier can be combined into a single instance identifier. - The
system performing process 1100 can also weight the scores of instance identifiers according to the frequency at which the instance identifiers appear in the electronic documents of an unstructured electronic documents collection (step 1120). For example, as a group of electronic documents is being indexed, the number of occurrences of different terms (including the instance identifier terms) appearing in the electronic documents can be determined. The scores for different instance identifiers can then be scaled, e.g., by multiplying the scores by a value that is approximately the inverse of the number of occurrences. As a result, the scores of instance identifiers that appear often in the electronic documents can be decreased relative to the scores of instance identifiers that appear only rarely in the electronic documents. - In some implementations, other activities can be used to rescore a collection of instances. For example, in some implementations, instance identifiers that match a fixed blacklist can be removed from the collection altogether, in effect, reducing their score to zero. The blacklist can include individual instance identifiers or identifier/search query pairs.
- In some implementations, the score of an instance identifier can be changed to reflect the likelihood that the identifier characterizes a category of instances. In some implementations, the likelihood that the identifier characterizes a category of instances can be determined from a log of search queries submitted by different human users. For example, in response to a user switching between searching with a search query that identifies a scored instance (e.g., the search query “car”) to searching with a search query that uses that identifier to identify a category (e.g., the search queries “types of car” and “list of cars”), the score of that instance identifier can be decreased. As another example, in response to a user switching between searching with a search query that identifies a scored instance (e.g., the search query “car”) to searching with an identifier of a more specific instance within that category (e.g., the search query “prius” within the category “car”), the score of the more specific instance identifier can be increased.
- In some implementations, a representation of the set of rescored instance identifier can then be transmitted to a client, e.g.,
client 115 in system 100 (FIG. 1 ). -
FIGS. 12-14 are examples ofstructured presentations Structured presentations client 115 inpresentation 125 on display screen 120 (FIG. 1 ).Structured presentations -
FIG. 12 is a schematic representation of an example table structuredpresentation 1200. Table 1200 is an organized, systematic arrangement of one or more identifiers of instances, as well as the values of particular attributes shared by those instances. In some implementations, structured presentations such as table 1200 can also include identifiers of attributes shared by those instances, as well as identifiers of the units in which values are expressed. - The grouping, segmentation, and arrangement of information in table 1200 can be selected to facilitate understanding of the information by a user. In this regard, table 1200 includes a collection of rows 1202. Each row 1202 includes an
instance identifier 1206 and a collection of associated attribute values 1207. The arrangement and positioning ofattribute values 1207 andinstance identifiers 1206 in rows 1202 thus graphically represents the associations between them. For example, a user can discern the association betweenattribute values 1207 and theinstance identifier 1206 that is found in the same row 1202. - Table 1200 also includes a collection of
columns 1204. Eachcolumn 1204 includes anattribute identifier 1208 and a collection of associated attribute values 1207. The arrangement and positioning ofattribute values 1207 and attributeidentifier 1208 incolumns 1204 thus graphically represent the associations between them. For example, a user can discern the association betweenattribute values 1207 and theattribute identifier 1208 that is found in thesame column 1204 based on their alignment. - Each row 1202 is a structured record 1210 in that each row 1202 associates a
single instance identifier 1206 with a collection of associated attribute values 1207. Further, the arrangement and positioning used to denote these associations in one structured record 1210 is reproduced in other structured records 1210 (i.e., in other rows 1202). Indeed, in many cases, all of the structured records 1210 in a structured presentation 106 are restricted to having the same arrangement and positioning of information. For example, values 1207 of the attribute “ATTR —2” are restricted to appearing in thesame column 1204 in all rows 1202. As another example, attributeidentifiers 1208 all bear the same spatial relationship to thevalues 1207 appearing in thesame column 1204. Moreover, changes to the arrangement and positioning of information in one structured record 1210 are generally propagated to other structured records 1210 in the structuredpresentation 1200. For example, if anew attribute value 1207 that characterizes a new attribute (e.g., “ATTR—2¾”) is added to one structured record 1210, then anew column 1204 is added to structured presentation 106 so that the values of attribute “ATTR—2¾” of all instances can be added to structured presentation 106. - In some implementations,
values 1207 in table 1200 can be presented in certain units of measure. Examples of units of measure include feet, yards, inches, miles, seconds, gallons, liters, degrees Celsius, and the like. In some instances, the units of measure in which values 1207 are presented are indicated byunit identifiers 1209.Unit identifiers 1209 can appear, e.g., besidevalues 1207 and/or besiderelevant attribute identifiers 1208. The association betweenunit identifiers 1209 and thevalues 1207 whose units of measure are indicated is indicated to a viewer by such positioning. In many cases, all of thevalues 1207 associated with a single attribute (e.g., all of thevalues 1207 in a single column 1204) are restricted to being presented in the same unit of measure. - The instances in a group of related instances (such as described in message 140 (
FIG. 1 )) can be used to populate table 1200 or other structured presentation in a variety of different ways. For example, a structured presentation can be populated with related instances in response to a search query. For example, the individual instances most relevant to the search query can be displayed in the structured presentation by default. A user can alter, or attempt to alter, those instances by, e.g., interacting with or referring to the structured presentation. Other instances can be presented as candidates for replacing the instances which the search engine has determined are most likely to be relevant to the search query. -
FIG. 13 is a schematic representation of another implementation of a structured presentation, namely, a structured presentation table 1300. In addition to includingattribute identifiers 1208,instance identifiers 1206,values 1207,unit identifiers 1209 organized into rows 1202 andcolumns 1204, table 1300 also includes a number of interactive elements for interacting with a user. In particular, table 1300 includes a collection ofinstance selection widgets 1305, a collection of action triggers 1310, a collection of columnaction trigger widgets 1315, and anotes column 1320. -
Instance selection widgets 1305 are user interface components that allow a user to select structured records 1210 in table 1300. For example,instance selection widgets 1305 can be a collection of one or more clickable checkboxes that are associated with a particular structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210.Instance selection widgets 1305 are “clickable” in that a user can interact withwidgets 1305 using a mouse (e.g., hovering over the component and clicking a particular mouse button), a stylus (e.g., pressing a user interface component displayed on a touch screen with the stylus), a keyboard, or other input device to invoke the functionality provided by that component. - Action triggers 1310 are user interface components that allow a user to trigger the performance of an action on one or more structured records 1210 in table 1300 selected using
instance selection widgets 1305. For example, action triggers 1310 can be clickable text phrases, each of which can be used by a user to trigger an action described in the phrase. For example, a “keep and remove others”action trigger 1310 triggers the removal of structured records 1210 that are not selected usinginstance selection widgets 1305 from the display of table 1300. As another example, a “remove selected”action trigger 1310 triggers the removal of structured records 1210 that are selected usinginstance selection widgets 1305 from the display of table 1300. As yet another example, a “show on map”action trigger 1310 triggers display of the position of structured records 1210 that are selected usinginstance selection widgets 1305 on a geographic map. For example, if a selected instance is a car, locations of car dealerships that sell the selected car can be displayed on a map. As another example, if the selected instances are vacation destinations, these destinations can be displayed on a map. - Column
action trigger widgets 1315 are user interface components that allow a user to apply an action to all of the cells within asingle column 1204. When a user interacts with the clickable ‘+’ sign, a further user interface component is displayed which offers to the user a set of possible actions to be performed. The actions in this set can include, e.g., removing theentire column 1204 from the structuredpresentation 1300 or searching to find values for all the cells incolumn 1204 which are currently blank. -
Notes column 1320 is a user interface component that allows a user to associate information with aninstance identifier 1206. In particular, notescolumn 1320 includes one ormore notes 1325 that are each associated with a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210. The information content ofnotes 1325 is unrestricted in that, unlikecolumns 1204, notes 1325 are not required to be values of any particular attribute. Instead, the information innotes 1325 can characterize unrelated aspects of the instance identified in structured record 1210. - In some implementations, table 1300 can include additional information other than values of any particular attribute. For example, table 1300 can include a collection of
images 1330 that are associated with the instance identified in a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210. As another example, table 1300 can include a collection oftext snippets 1335 extracted from electronic documents in collection 102. The sources of the snippets can be highly ranked results in searches conducted usinginstance identifiers 1206 as a search string.Text snippets 1335 are associated with the instance identified in a structured record 1210 by virtue of arrangement and positioning relative to that structured record 1210. - As another example, table 1300 can include one or more hypertext links 1340 to individual electronic documents in an electronic document collection. For example, the linked documents can be highly ranked results in searches conducted using
instance identifiers 1206 as a search string. As another example, the linked documents can be source of avalue 1207 that was extracted to populate table 1300. In some instances, interaction with hypertext link 1340 can trigger navigation to the source electronic document based on information embedded in hypertext link 1340 (e.g., a web site address). -
FIG. 14 is a schematic representation of another implementation of a structured presentation, namely, acard collection 1400.Card collection 1400 is an organized, systematic arrangement of one or more identifiers of instances, as well as the values of particular attributes of those instances. The attributes of an instance can be specified by values. Moreover,card collection 1400 generally includes identifiers of attributes, as well as identifiers of the units in which values are expressed, where appropriate. - The grouping, segmentation, and arrangement of information in
card collection 1400 can be selected to facilitate an understanding of the information by a user. In this regard,card collection 1400 includes a collection of cards 1402. Each card 1402 includes aninstance identifier 1206 and a collection of associated attribute values 1207. The arrangement and positioning ofattribute values 1207 andinstance identifiers 1206 in cards 1402 thus graphically represents the associations between them. For example, a user can discern the association betweenattribute values 1207 and theinstance identifier 1206 that is found on the same card 1402. - In the illustrated implementation, cards 1402 in
card collection 1400 also include a collection ofattribute identifiers 1208.Attribute identifiers 1208 are organized in acolumn 1404 andattribute values 1207 are organized in acolumn 1406.Columns individual attribute identifiers 1208 are positioned next to theattribute value 1207 that characterizes that identified attribute. This positioning and arrangement allows a viewer to discern the association betweenattribute identifiers 1208 and the attribute values 1207 that characterize those attributes. - Each card 1402 is a structured record 1210 in that each card 1402 associates a
single instance identifier 1206 with a collection of associated attribute values 1207. Further, the arrangement and positioning used to denote these associations in one card 1402 is reproduced in other cards 1402. Indeed, in many cases, all of the cards 1402 are restricted to having the same arrangement and positioning of information. For example, thevalue 1207 that characterizes the attribute “ATTR —1” is restricted to bearing the same spatial relationship toinstance identifiers 1206 in all cards 1402. As another example, the order and positioning ofattribute identifiers 1208 in all of the cards 1402 is the same. Moreover, changes to the arrangement and positioning of information in one card 1402 are generally propagated to other cards 1402 incard collection 1400. For example, if anew attribute value 1207 that characterizes a new attribute (e.g., “ATTR—1¾”) is inserted between the attribute values “value —1—1” and “value 2—1” in one card 1402, then the positioning of thecorresponding attribute values 1207 in other cards 1402 is likewise changed. - In some implementations, cards 1402 in
card collection 1400 can include other features. For example, cards 1402 can include interactive elements for interacting with a user, such as instance selection widgets, action triggers, attribute selection widgets, a notes entry, and the like. As another example, cards 1402 incard collection 1400 can include additional information other than values of any particular attribute, such as images and/or text snippets that are associated with an identified instance. As another example, cards 1402 incard collection 1400 can include one or more hypertext links to individual electronic documents in collection 102. Such features can be associated with particular instances by virtue of appearing on a card 1402 that includes aninstance identifier 1206 that identifies that instance. - During operation, a viewer can interact with the system presenting
card collection 1400 to change the display of one or more cards 1402. For example, a viewer can trigger the side-by-side display of two or more of the cards 1402 so that a comparison of the particular instances identified on those cards is facilitated. As another example, a viewer can trigger a reordering of card 1402, an end to the display of a particular card 1402, or the like. As another example, a viewer can trigger the selection, change, addition, and/or deletion of attributes and/or instances displayed in cards 1402. As yet another example, a viewer can trigger a sorting of cards into multiple piles according to, e.g., the values of an attribute values 1207 in the cards. - In some implementations, cards 1402 will be displayed with two “sides.” For example, a first side can include a graphic representation of the instance identified by
instance identifier 1206, while a second side can includeinstance identifier 1206 and values 1207. This can be useful, for example, if the user is searching for a particular card in the collection ofcards 1400, allowing the user to identify the particular card with a cursory review of the graphical representations on the first side of the cards 1402. - Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The term “data processing apparatus” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In certain implementations, multitasking and parallel processing may be advantageous.
- Accordingly, various modifications may be made.
Claims (29)
1. A method performed by one or more data processing apparatus, the method comprising:
the data processing apparatus receiving a search query at a data processing apparatus, the search query specifying attributes shared by a group of related instances;
the data processing apparatus identifying groups of instance identifiers in an unstructured collection of electronic documents with the data processing apparatus;
the data processing apparatus determining relevance of the groups of instance identifiers to the search query with the data processing apparatus;
the data processing apparatus scoring at least some of the instance identifiers in the groups of instance identifiers individually with the data processing apparatus; and
the data processing apparatus ranking the at least some instance identifiers according to the scores with the data processing apparatus.
2. The method of claim 1 , wherein determining the relevance of the groups of instance identifiers to the search query comprises:
computing relevance of the groups of instance identifiers to source documents that include the groups of instance identifiers;
computing likelihoods that the identified groups of instance identifiers are indeed groups of instance identifiers; and
computing relevance of source documents which include the groups of instance identifiers to the search query.
3. The method of claim 1 , wherein identifying the groups of instance identifiers comprises:
forming a first new query biased to identify groups;
forming a second new query constrained to search compendia sources; and
searching the unstructured collection of electronic documents with the received query, the first new query, and the second new query.
4. The method of claim 1 , further comprising the data processing apparatus rescoring the at least some instance identifiers before ranking.
5. The method of claim 1 , wherein scoring at least some of the instance identifiers in the groups of instance identifiers comprises:
representing features of the instance identifiers in a vertex-edge graph; and
scoring the instance identifiers according to the features represented in the vertex-edge graph.
6. The method of claim 5 , wherein:
vertices in the vertex-edge graph represent groups of instance identifiers; and
respective edges in the vertex-edge graph are weighted according to overlap between the vertices connected by the edge.
7. The method of claim 5 , wherein:
vertices in the vertex-edge graph represent individual instance identifiers; and
respective edges in the vertex-edge graph represent features shared by the instance identifiers.
8. The method of claim 6 , wherein a first edge in the vertex-edge graph represents an extractor that identified a pair of vertices joined by the first edge.
9. The method of claim 6 , wherein a first edge in the vertex-edge graph represents other instance identifiers in potential groups where vertices joined by the first edge are found.
10. The method of claim 6 , wherein a first edge in the vertex-edge graph represents a class of the query that identified source document where vertices joined by the first edge are found.
11. The method of claim 5 , wherein scoring the instance identifiers comprises identifying cliques in the vertex-edge graph.
12. The method of claim 1 , wherein scoring the instances identifiers comprises scoring the instance identifiers using a predictive analytic tree-building algorithm.
13. The method of claim 1 , wherein scoring the instance identifiers using the predictive analytic tree-building algorithm comprises:
training the predictive analytic tree-building algorithm using
a group of instance identifiers of confirmed accuracy that are relevant to a search query,
a set of potential groups of instance identifiers that have been identified from an unstructured collection of electronic documents, and
features of the instance identifiers in the potential groups; and
generating a classification and regression tree.
14. One or more computer storage media encoded with a computer program, the program comprising instructions that when executed by one or more data processing apparatus cause the data processing apparatus to perform operations, the operations comprising:
receiving a search query at a data processing apparatus, the search query specifying attributes shared by a group of related instances;
searching an electronic document collection to identify identifiers of instance that are responsive to the search query;
representing features of the instance identifiers in a vertex-edge graph; and
scoring relevance of the instance identifiers to the search query according to the features represented in the vertex-edge graph.
15. The computer storage medium of claim 14 , wherein:
the operations further comprise:
identifying groups of instance identifiers in the electronic documents of the collection; and
determining relevance of the groups of instance identifiers to the search query; and
a first feature represented in the vertex-edge graph comprises the relevance of the groups that include respective instance identifiers to the search query.
16. The computer storage medium of claim 14 , the operations further comprising:
identifying electronic documents available on the Internet that are relevant to the search query; and
extracting groups of instance identifiers from the electronic documents that are relevant to the search query.
17. The computer storage medium of claim 16 , the operations further comprising:
computing relevance of the electronic documents from which the groups of instance identifiers are extracted to the search query;
computing relevance of the groups of instance identifiers to the electronic documents from which the groups of instance identifiers are extracted; and
computing likelihoods that the groups of instance identifiers are groups of instance identifiers.
18. The computer storage medium of claim 15 , wherein identifying the groups of instance identifiers comprises:
forming a new query biased to identify groups; and
searching the electronic document collection with the new query.
19. The computer storage medium of claim 14 , wherein a first edge in the vertex-edge graph represents a class of the query that identified a pair of vertices joined by the first edge.
20. The computer storage medium of claim 14 , wherein a first edge in the vertex-edge graph represents other instance identifiers in potential groups where vertices joined by the first edge are found.
21. The computer storage medium of claim 14 , wherein scoring relevance of the instance identifiers to the search query comprises identifying cliques in the vertex-edge graph.
22. A system comprising:
a client device; and
one or more computers programmed to interact with the client device and the data storage device, the computers programmed to perform operations comprising:
receiving a search query from the client device, the search query explicitly or implicitly specifying attributes of instances;
searching an electronic document collection to identify identifiers of instances that may have the attributes specified by the search query;
representing features of the search of the electronic document collection in a vertex-edge graph;
scoring the instance identifiers that may have the attributes specified by the search query according to the features represented in the vertex-edge graph; and
outputting, the client device, instructions for visually presenting at least some of the instance identifiers.
23. The system of claim 22 , wherein:
outputting the instructions comprises outputting instructions for visually presenting a structured presentation at the client device; and
the client device is configured to receive the instructions and cause the structured presentation to be visually presented.
24. The system of claim 22 , further comprising a data storage device storing a data describing multiple groups of instances.
25. The system of claim 22 , further comprising a data storage device storing machine-readable instructions tailored to identify and extract groups of instance identifiers from electronic documents in an unstructured collection.
26. The system of claim 22 , wherein:
representing features comprises representing the relevance of the groups in which the instance identifiers appear in the vertex-edge graph; and
scoring the instance identifiers comprises scoring the instance identifiers individually according to the relevance of the groups in which the instance identifiers appear to the search query.
27. The system of claim 22 , wherein scoring the instance identifiers comprises identifying cliques in the vertex-edge graph.
28. The system of claim 22 , wherein scoring the instance identifiers comprises scoring the instance identifiers according to an extractor represented in the vertex-edge graph.
29. The system of claim 22 , wherein scoring the instance identifiers comprises scoring the instance identifiers according to a class of a query represented in the vertex-edge graph.
Priority Applications (7)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/608,395 US20110106819A1 (en) | 2009-10-29 | 2009-10-29 | Identifying a group of related instances |
CN201080034010.7A CN102460440B (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
PCT/US2010/036949 WO2010141502A2 (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
KR1020117031688A KR20120038418A (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
AU2010256777A AU2010256777A1 (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
CA2764157A CA2764157A1 (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
EP10783951A EP2438544A2 (en) | 2009-06-01 | 2010-06-01 | Searching methods and devices |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/608,395 US20110106819A1 (en) | 2009-10-29 | 2009-10-29 | Identifying a group of related instances |
Publications (1)
Publication Number | Publication Date |
---|---|
US20110106819A1 true US20110106819A1 (en) | 2011-05-05 |
Family
ID=43926503
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/608,395 Abandoned US20110106819A1 (en) | 2009-06-01 | 2009-10-29 | Identifying a group of related instances |
Country Status (1)
Country | Link |
---|---|
US (1) | US20110106819A1 (en) |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100185666A1 (en) * | 2009-01-16 | 2010-07-22 | Google, Inc. | Accessing a search interface in a structured presentation |
US20100185934A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new attributes to a structured presentation |
US20100185651A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Retrieving and displaying information from an unstructured electronic document collection |
US20100306223A1 (en) * | 2009-06-01 | 2010-12-02 | Google Inc. | Rankings in Search Results with User Corrections |
US20130124624A1 (en) * | 2011-11-11 | 2013-05-16 | Robert William Cathcart | Enabling preference portability for users of a social networking system |
US8484208B1 (en) * | 2012-02-16 | 2013-07-09 | Oracle International Corporation | Displaying results of keyword search over enterprise data |
US8682932B2 (en) | 2012-02-16 | 2014-03-25 | Oracle International Corporation | Mechanisms for searching enterprise data graphs |
US8700673B2 (en) | 2012-02-16 | 2014-04-15 | Oracle International Corporation | Mechanisms for metadata search in enterprise applications |
US20140297643A1 (en) * | 2011-04-23 | 2014-10-02 | Infoblox Inc. | Synthesized identifiers for system information database |
US8924436B1 (en) | 2009-01-16 | 2014-12-30 | Google Inc. | Populating a structured presentation with new values |
USD768670S1 (en) * | 2014-03-28 | 2016-10-11 | Jan Magnus Edman | Display screen with graphical user interface |
WO2018226694A1 (en) * | 2017-06-05 | 2018-12-13 | Ancestry.Com Dna, Llc | Customized coordinate ascent for ranking data records |
CN110046180A (en) * | 2019-01-10 | 2019-07-23 | 阿里巴巴集团控股有限公司 | It is a kind of for positioning the method, apparatus and electronic equipment of similar case |
US20190311065A1 (en) * | 2018-04-05 | 2019-10-10 | Sap Se | Text searches on graph data |
US10521655B1 (en) * | 2019-02-11 | 2019-12-31 | Google Llc | Generating and provisioning of additional content for biased portion(s) of a document |
CN110674360A (en) * | 2019-09-27 | 2020-01-10 | 厦门美亚亿安信息科技有限公司 | Method and system for constructing data association graph and tracing data |
US11314930B2 (en) * | 2019-02-11 | 2022-04-26 | Google Llc | Generating and provisioning of additional content for source perspective(s) of a document |
US11372874B2 (en) * | 2014-05-01 | 2022-06-28 | RELX Inc. | Systems and methods for displaying estimated relevance indicators for result sets of documents and for displaying query visualizations |
US11500884B2 (en) | 2019-02-01 | 2022-11-15 | Ancestry.Com Operations Inc. | Search and ranking of records across different databases |
US11947774B1 (en) * | 2021-04-28 | 2024-04-02 | Amazon Technologies, Inc. | Techniques for utilizing audio segments for expression |
Citations (96)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3576983A (en) * | 1968-10-02 | 1971-05-04 | Hewlett Packard Co | Digital calculator system for computing square roots |
US4269492A (en) * | 1978-09-24 | 1981-05-26 | Agfa-Gevaert, A.G. | Photographic camera with single selector structure performing exposure-parameter adjustment and also switching of control and monitoring circuits |
US4374381A (en) * | 1980-07-18 | 1983-02-15 | Interaction Systems, Inc. | Touch terminal with reliable pad selection |
US4797569A (en) * | 1987-01-27 | 1989-01-10 | Maxim Integrated Products | Apparatus for pre-defining circuit characteristics |
US4837422A (en) * | 1987-09-08 | 1989-06-06 | Juergen Dethloff | Multi-user card system |
US5293319A (en) * | 1990-12-24 | 1994-03-08 | Pitney Bowes Inc. | Postage meter system |
US5308303A (en) * | 1992-10-02 | 1994-05-03 | Stairmaster Sports/Medical Products, Inc. | Resistance training machine |
US5321750A (en) * | 1989-02-07 | 1994-06-14 | Market Data Corporation | Restricted information distribution system apparatus and methods |
US5381349A (en) * | 1993-06-29 | 1995-01-10 | Hewlett-Packard Company | System for calibrating a color display to enable color-matching |
US5387170A (en) * | 1992-10-02 | 1995-02-07 | Stairmaster Sports/Medical Products, Inc. | Resistance training machine |
US5396588A (en) * | 1990-07-03 | 1995-03-07 | Froessl; Horst | Data processing using digitized images |
US5494097A (en) * | 1993-09-27 | 1996-02-27 | Mercedes-Benz Ag | Method and device for regulating or controlling the temperature of an interior space, especially that of a motor vehicle |
US5499366A (en) * | 1991-08-15 | 1996-03-12 | Borland International, Inc. | System and methods for generation of design images based on user design inputs |
US5634054A (en) * | 1994-03-22 | 1997-05-27 | General Electric Company | Document-based data definition generator |
US5768158A (en) * | 1995-12-08 | 1998-06-16 | Inventure America Inc. | Computer-based system and method for data processing |
US5870749A (en) * | 1996-12-19 | 1999-02-09 | Dset Corporation | Automatic translation between CMIP PDUs and custom data structures |
US5893125A (en) * | 1995-01-27 | 1999-04-06 | Borland International, Inc. | Non-modal database system with methods for incremental maintenance |
US5923330A (en) * | 1996-08-12 | 1999-07-13 | Ncr Corporation | System and method for navigation and interaction in structured information spaces |
US5995973A (en) * | 1997-08-29 | 1999-11-30 | International Business Machines Corporation | Storing relationship tables identifying object relationships |
US6057935A (en) * | 1997-12-24 | 2000-05-02 | Adobe Systems Incorporated | Producing an enhanced raster image |
US6128365A (en) * | 1998-02-11 | 2000-10-03 | Analogic Corporation | Apparatus and method for combining related objects in computed tomography data |
US20020032671A1 (en) * | 2000-09-12 | 2002-03-14 | Tetsuya Iinuma | File system and file caching method in the same |
US6424976B1 (en) * | 2000-03-23 | 2002-07-23 | Novell, Inc. | Method of implementing a forward compatibility network directory syntax |
US20020107853A1 (en) * | 2000-07-26 | 2002-08-08 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US20020111951A1 (en) * | 2000-05-18 | 2002-08-15 | Licheng Zeng | Parsing system |
US20030014441A1 (en) * | 2001-06-29 | 2003-01-16 | Akira Suzuki | Document data structure, information recording medium, information processing apparatus, information processing system and information processing method |
US20030016943A1 (en) * | 2001-07-07 | 2003-01-23 | Samsung Electronics Co.Ltd. | Reproducing apparatus and method of providing bookmark information thereof |
US20030033275A1 (en) * | 2001-08-13 | 2003-02-13 | Alpha Shamim A. | Combined database index of unstructured and structured columns |
US20030037050A1 (en) * | 2002-08-30 | 2003-02-20 | Emergency 24, Inc. | System and method for predicting additional search results of a computerized database search user based on an initial search query |
US6564213B1 (en) * | 2000-04-18 | 2003-05-13 | Amazon.Com, Inc. | Search query autocompletion |
US20030101052A1 (en) * | 2001-10-05 | 2003-05-29 | Chen Lang S. | Voice recognition and activation system |
US6574628B1 (en) * | 1995-05-30 | 2003-06-03 | Corporation For National Research Initiatives | System for distributed task execution |
US20030120681A1 (en) * | 1999-10-04 | 2003-06-26 | Jarg Corporation | Classification of information sources using graphic structures |
US20030145004A1 (en) * | 2002-01-25 | 2003-07-31 | Decode Genetics, Ehf | Inference control method in a data cube |
US6681370B2 (en) * | 1999-05-19 | 2004-01-20 | Microsoft Corporation | HTML/XML tree synchronization |
US20040019588A1 (en) * | 2002-07-23 | 2004-01-29 | Doganata Yurdaer N. | Method and apparatus for search optimization based on generation of context focused queries |
US20040019536A1 (en) * | 2002-07-23 | 2004-01-29 | Amir Ashkenazi | Systems and methods for facilitating internet shopping |
US6687689B1 (en) * | 2000-06-16 | 2004-02-03 | Nusuara Technologies Sdn. Bhd. | System and methods for document retrieval using natural language-based queries |
US6694307B2 (en) * | 2001-03-07 | 2004-02-17 | Netvention | System for collecting specific information from several sources of unstructured digitized data |
US6704727B1 (en) * | 2000-01-31 | 2004-03-09 | Overture Services, Inc. | Method and system for generating a set of search terms |
US6728707B1 (en) * | 2000-08-11 | 2004-04-27 | Attensity Corporation | Relational text index creation and searching |
US6732098B1 (en) * | 2000-08-11 | 2004-05-04 | Attensity Corporation | Relational text index creation and searching |
US6732097B1 (en) * | 2000-08-11 | 2004-05-04 | Attensity Corporation | Relational text index creation and searching |
US20040093321A1 (en) * | 2002-11-13 | 2004-05-13 | Xerox Corporation | Search engine with structured contextual clustering |
US6738765B1 (en) * | 2000-08-11 | 2004-05-18 | Attensity Corporation | Relational text index creation and searching |
US6741988B1 (en) * | 2000-08-11 | 2004-05-25 | Attensity Corporation | Relational text index creation and searching |
US20040103116A1 (en) * | 2002-11-26 | 2004-05-27 | Lingathurai Palanisamy | Intelligent retrieval and classification of information from a product manual |
US20040117436A1 (en) * | 2002-12-12 | 2004-06-17 | Xerox Corporation | Methods, apparatus, and program products for utilizing contextual property metadata in networked computing environments |
US20040167885A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Data products of processes of extracting role related information from free text sources |
US20050076015A1 (en) * | 2003-10-02 | 2005-04-07 | International Business Machines Corporation | Dynamic query building based on the desired number of results |
US20050080771A1 (en) * | 2003-10-14 | 2005-04-14 | Fish Edmund J. | Search enhancement system with information from a selected source |
US20050086215A1 (en) * | 2002-06-14 | 2005-04-21 | Igor Perisic | System and method for harmonizing content relevancy across structured and unstructured data |
US20050102259A1 (en) * | 2003-11-12 | 2005-05-12 | Yahoo! Inc. | Systems and methods for search query processing using trend analysis |
US20050132274A1 (en) * | 2003-12-11 | 2005-06-16 | International Business Machine Corporation | Creating a presentation document |
US20060053383A1 (en) * | 2000-07-21 | 2006-03-09 | Microsoft Corporation | Integrated method for creating a refreshable web query |
US20060074859A1 (en) * | 2003-05-28 | 2006-04-06 | Bomi Patel-Framroze Of Row2 Technologies Inc. | System, apparatus, and method for user tunable and selectable searching of a database using a weighted quantized feature vector |
US20060129446A1 (en) * | 2004-12-14 | 2006-06-15 | Ruhl Jan M | Method and system for finding and aggregating reviews for a product |
US20070011150A1 (en) * | 2005-06-28 | 2007-01-11 | Metacarta, Inc. | User Interface For Geographic Search |
US20070011183A1 (en) * | 2005-07-05 | 2007-01-11 | Justin Langseth | Analysis and transformation tools for structured and unstructured data |
US20070078850A1 (en) * | 2005-10-03 | 2007-04-05 | Microsoft Corporation | Commerical web data extraction system |
US7225197B2 (en) * | 2002-10-31 | 2007-05-29 | Elecdecom, Inc. | Data entry, cross reference database and search systems and methods thereof |
US7325194B2 (en) * | 2002-05-07 | 2008-01-29 | Microsoft Corporation | Method, system, and apparatus for converting numbers between measurement systems based upon semantically labeled strings |
US7346629B2 (en) * | 2003-10-09 | 2008-03-18 | Yahoo! Inc. | Systems and methods for search processing using superunits |
US7356537B2 (en) * | 2002-06-06 | 2008-04-08 | Microsoft Corporation | Providing contextually sensitive tools and help content in computer-generated documents |
US7370072B2 (en) * | 2002-07-08 | 2008-05-06 | Electronic Evidence Discovery, Inc. | System and method for collecting electronic evidence data |
US20080114795A1 (en) * | 2006-11-14 | 2008-05-15 | Microsoft Corporation | On-demand incremental update of data structures using edit list |
US7392479B2 (en) * | 2002-06-27 | 2008-06-24 | Microsoft Corporation | System and method for providing namespace related information |
US20080162456A1 (en) * | 2006-12-27 | 2008-07-03 | Rakshit Daga | Structure extraction from unstructured documents |
US7398201B2 (en) * | 2001-08-14 | 2008-07-08 | Evri Inc. | Method and system for enhanced data searching |
US7487146B2 (en) * | 2005-08-03 | 2009-02-03 | Novell, Inc. | System and method of searching for providing dynamic search results with temporary visual display |
US7526486B2 (en) * | 2006-05-22 | 2009-04-28 | Initiate Systems, Inc. | Method and system for indexing information about entities with respect to hierarchies |
US7526425B2 (en) * | 2001-08-14 | 2009-04-28 | Evri Inc. | Method and system for extending keyword searching to syntactically and semantically annotated data |
US7558841B2 (en) * | 2003-05-14 | 2009-07-07 | Microsoft Corporation | Method, system, and computer-readable medium for communicating results to a data query in a computer network |
US7562104B2 (en) * | 2005-02-25 | 2009-07-14 | Microsoft Corporation | Method and system for collecting contact information from contact sources and tracking contact sources |
US20100030780A1 (en) * | 2008-07-30 | 2010-02-04 | Kave Eshghi | Identifying related objects in a computer database |
US7672932B2 (en) * | 2005-08-24 | 2010-03-02 | Yahoo! Inc. | Speculative search result based on a not-yet-submitted search query |
US20100070496A1 (en) * | 2008-09-15 | 2010-03-18 | Oracle International Corporation | Searchable Object Network |
US7707024B2 (en) * | 2002-05-23 | 2010-04-27 | Microsoft Corporation | Method, system, and apparatus for converting currency values based upon semantically labeled strings |
US7707496B1 (en) * | 2002-05-09 | 2010-04-27 | Microsoft Corporation | Method, system, and apparatus for converting dates between calendars and languages based upon semantically labeled strings |
US7707505B1 (en) * | 2000-03-23 | 2010-04-27 | Insweb Corporation | Dynamic tabs for a graphical user interface |
US7711550B1 (en) * | 2003-04-29 | 2010-05-04 | Microsoft Corporation | Methods and system for recognizing names in a computer-generated document and for providing helpful actions associated with recognized names |
US7712024B2 (en) * | 2000-06-06 | 2010-05-04 | Microsoft Corporation | Application program interfaces for semantically labeling strings and providing actions based on semantically labeled strings |
US7716676B2 (en) * | 2002-06-25 | 2010-05-11 | Microsoft Corporation | System and method for issuing a message to a program |
US7716163B2 (en) * | 2000-06-06 | 2010-05-11 | Microsoft Corporation | Method and system for defining semantic categories and actions |
US7734606B2 (en) * | 2004-09-15 | 2010-06-08 | Graematter, Inc. | System and method for regulatory intelligence |
US7742048B1 (en) * | 2002-05-23 | 2010-06-22 | Microsoft Corporation | Method, system, and apparatus for converting numbers based upon semantically labeled strings |
US20100185653A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Populating a structured presentation with new values |
US20100185651A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Retrieving and displaying information from an unstructured electronic document collection |
US20100185934A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new attributes to a structured presentation |
US20100185654A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new instances to a structured presentation |
US20100185666A1 (en) * | 2009-01-16 | 2010-07-22 | Google, Inc. | Accessing a search interface in a structured presentation |
US20100211894A1 (en) * | 2009-02-18 | 2010-08-19 | Google Inc. | Identifying Object Using Generative Model |
US7865478B2 (en) * | 2005-06-04 | 2011-01-04 | International Business Machines Corporation | Based on repeated experience, system for modification of expression and negating overload from media and optimizing referential efficiency |
US7915816B2 (en) * | 2007-05-14 | 2011-03-29 | Sony Corporation | Organic electroluminescence display device comprising auxiliary wiring |
US7962480B1 (en) * | 2007-07-31 | 2011-06-14 | Hewlett-Packard Development Company, L.P. | Using a weighted tree to determine document relevance |
US8010534B2 (en) * | 2006-08-31 | 2011-08-30 | Orcatec Llc | Identifying related objects using quantum clustering |
-
2009
- 2009-10-29 US US12/608,395 patent/US20110106819A1/en not_active Abandoned
Patent Citations (103)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US3576983A (en) * | 1968-10-02 | 1971-05-04 | Hewlett Packard Co | Digital calculator system for computing square roots |
US4269492A (en) * | 1978-09-24 | 1981-05-26 | Agfa-Gevaert, A.G. | Photographic camera with single selector structure performing exposure-parameter adjustment and also switching of control and monitoring circuits |
US4374381A (en) * | 1980-07-18 | 1983-02-15 | Interaction Systems, Inc. | Touch terminal with reliable pad selection |
US4797569A (en) * | 1987-01-27 | 1989-01-10 | Maxim Integrated Products | Apparatus for pre-defining circuit characteristics |
US4837422A (en) * | 1987-09-08 | 1989-06-06 | Juergen Dethloff | Multi-user card system |
US5321750A (en) * | 1989-02-07 | 1994-06-14 | Market Data Corporation | Restricted information distribution system apparatus and methods |
US5396588A (en) * | 1990-07-03 | 1995-03-07 | Froessl; Horst | Data processing using digitized images |
US5293319A (en) * | 1990-12-24 | 1994-03-08 | Pitney Bowes Inc. | Postage meter system |
US5499366A (en) * | 1991-08-15 | 1996-03-12 | Borland International, Inc. | System and methods for generation of design images based on user design inputs |
US5308303A (en) * | 1992-10-02 | 1994-05-03 | Stairmaster Sports/Medical Products, Inc. | Resistance training machine |
US5387170A (en) * | 1992-10-02 | 1995-02-07 | Stairmaster Sports/Medical Products, Inc. | Resistance training machine |
US5381349A (en) * | 1993-06-29 | 1995-01-10 | Hewlett-Packard Company | System for calibrating a color display to enable color-matching |
US5494097A (en) * | 1993-09-27 | 1996-02-27 | Mercedes-Benz Ag | Method and device for regulating or controlling the temperature of an interior space, especially that of a motor vehicle |
US5634054A (en) * | 1994-03-22 | 1997-05-27 | General Electric Company | Document-based data definition generator |
US5893125A (en) * | 1995-01-27 | 1999-04-06 | Borland International, Inc. | Non-modal database system with methods for incremental maintenance |
US6574628B1 (en) * | 1995-05-30 | 2003-06-03 | Corporation For National Research Initiatives | System for distributed task execution |
US5768158A (en) * | 1995-12-08 | 1998-06-16 | Inventure America Inc. | Computer-based system and method for data processing |
US5923330A (en) * | 1996-08-12 | 1999-07-13 | Ncr Corporation | System and method for navigation and interaction in structured information spaces |
US5870749A (en) * | 1996-12-19 | 1999-02-09 | Dset Corporation | Automatic translation between CMIP PDUs and custom data structures |
US5995973A (en) * | 1997-08-29 | 1999-11-30 | International Business Machines Corporation | Storing relationship tables identifying object relationships |
US6057935A (en) * | 1997-12-24 | 2000-05-02 | Adobe Systems Incorporated | Producing an enhanced raster image |
US6128365A (en) * | 1998-02-11 | 2000-10-03 | Analogic Corporation | Apparatus and method for combining related objects in computed tomography data |
US6681370B2 (en) * | 1999-05-19 | 2004-01-20 | Microsoft Corporation | HTML/XML tree synchronization |
US20030120681A1 (en) * | 1999-10-04 | 2003-06-26 | Jarg Corporation | Classification of information sources using graphic structures |
US6704727B1 (en) * | 2000-01-31 | 2004-03-09 | Overture Services, Inc. | Method and system for generating a set of search terms |
US7707505B1 (en) * | 2000-03-23 | 2010-04-27 | Insweb Corporation | Dynamic tabs for a graphical user interface |
US6424976B1 (en) * | 2000-03-23 | 2002-07-23 | Novell, Inc. | Method of implementing a forward compatibility network directory syntax |
US6564213B1 (en) * | 2000-04-18 | 2003-05-13 | Amazon.Com, Inc. | Search query autocompletion |
US20020111951A1 (en) * | 2000-05-18 | 2002-08-15 | Licheng Zeng | Parsing system |
US7712024B2 (en) * | 2000-06-06 | 2010-05-04 | Microsoft Corporation | Application program interfaces for semantically labeling strings and providing actions based on semantically labeled strings |
US7716163B2 (en) * | 2000-06-06 | 2010-05-11 | Microsoft Corporation | Method and system for defining semantic categories and actions |
US6687689B1 (en) * | 2000-06-16 | 2004-02-03 | Nusuara Technologies Sdn. Bhd. | System and methods for document retrieval using natural language-based queries |
US20060053383A1 (en) * | 2000-07-21 | 2006-03-09 | Microsoft Corporation | Integrated method for creating a refreshable web query |
US20020107853A1 (en) * | 2000-07-26 | 2002-08-08 | Recommind Inc. | System and method for personalized search, information filtering, and for generating recommendations utilizing statistical latent class models |
US6741988B1 (en) * | 2000-08-11 | 2004-05-25 | Attensity Corporation | Relational text index creation and searching |
US6738765B1 (en) * | 2000-08-11 | 2004-05-18 | Attensity Corporation | Relational text index creation and searching |
US6732097B1 (en) * | 2000-08-11 | 2004-05-04 | Attensity Corporation | Relational text index creation and searching |
US6732098B1 (en) * | 2000-08-11 | 2004-05-04 | Attensity Corporation | Relational text index creation and searching |
US6728707B1 (en) * | 2000-08-11 | 2004-04-27 | Attensity Corporation | Relational text index creation and searching |
US20020032671A1 (en) * | 2000-09-12 | 2002-03-14 | Tetsuya Iinuma | File system and file caching method in the same |
US6694307B2 (en) * | 2001-03-07 | 2004-02-17 | Netvention | System for collecting specific information from several sources of unstructured digitized data |
US20030014441A1 (en) * | 2001-06-29 | 2003-01-16 | Akira Suzuki | Document data structure, information recording medium, information processing apparatus, information processing system and information processing method |
US20030016943A1 (en) * | 2001-07-07 | 2003-01-23 | Samsung Electronics Co.Ltd. | Reproducing apparatus and method of providing bookmark information thereof |
US20030033275A1 (en) * | 2001-08-13 | 2003-02-13 | Alpha Shamim A. | Combined database index of unstructured and structured columns |
US7526425B2 (en) * | 2001-08-14 | 2009-04-28 | Evri Inc. | Method and system for extending keyword searching to syntactically and semantically annotated data |
US7398201B2 (en) * | 2001-08-14 | 2008-07-08 | Evri Inc. | Method and system for enhanced data searching |
US20030101052A1 (en) * | 2001-10-05 | 2003-05-29 | Chen Lang S. | Voice recognition and activation system |
US20030145004A1 (en) * | 2002-01-25 | 2003-07-31 | Decode Genetics, Ehf | Inference control method in a data cube |
US7325194B2 (en) * | 2002-05-07 | 2008-01-29 | Microsoft Corporation | Method, system, and apparatus for converting numbers between measurement systems based upon semantically labeled strings |
US7707496B1 (en) * | 2002-05-09 | 2010-04-27 | Microsoft Corporation | Method, system, and apparatus for converting dates between calendars and languages based upon semantically labeled strings |
US7707024B2 (en) * | 2002-05-23 | 2010-04-27 | Microsoft Corporation | Method, system, and apparatus for converting currency values based upon semantically labeled strings |
US7742048B1 (en) * | 2002-05-23 | 2010-06-22 | Microsoft Corporation | Method, system, and apparatus for converting numbers based upon semantically labeled strings |
US7356537B2 (en) * | 2002-06-06 | 2008-04-08 | Microsoft Corporation | Providing contextually sensitive tools and help content in computer-generated documents |
US20050086215A1 (en) * | 2002-06-14 | 2005-04-21 | Igor Perisic | System and method for harmonizing content relevancy across structured and unstructured data |
US7716676B2 (en) * | 2002-06-25 | 2010-05-11 | Microsoft Corporation | System and method for issuing a message to a program |
US7392479B2 (en) * | 2002-06-27 | 2008-06-24 | Microsoft Corporation | System and method for providing namespace related information |
US7370072B2 (en) * | 2002-07-08 | 2008-05-06 | Electronic Evidence Discovery, Inc. | System and method for collecting electronic evidence data |
US20040019536A1 (en) * | 2002-07-23 | 2004-01-29 | Amir Ashkenazi | Systems and methods for facilitating internet shopping |
US20040019588A1 (en) * | 2002-07-23 | 2004-01-29 | Doganata Yurdaer N. | Method and apparatus for search optimization based on generation of context focused queries |
US20030037050A1 (en) * | 2002-08-30 | 2003-02-20 | Emergency 24, Inc. | System and method for predicting additional search results of a computerized database search user based on an initial search query |
US7225197B2 (en) * | 2002-10-31 | 2007-05-29 | Elecdecom, Inc. | Data entry, cross reference database and search systems and methods thereof |
US20040093321A1 (en) * | 2002-11-13 | 2004-05-13 | Xerox Corporation | Search engine with structured contextual clustering |
US20040103116A1 (en) * | 2002-11-26 | 2004-05-27 | Lingathurai Palanisamy | Intelligent retrieval and classification of information from a product manual |
US20040167870A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Systems and methods for providing a mixed data integration service |
US20050108256A1 (en) * | 2002-12-06 | 2005-05-19 | Attensity Corporation | Visualization of integrated structured and unstructured data |
US20040167885A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Data products of processes of extracting role related information from free text sources |
US20040167886A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Production of role related information from free text sources utilizing thematic caseframes |
US20040167884A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Methods and products for producing role related information from free text sources |
US20040167883A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Methods and systems for providing a service for producing structured data elements from free text sources |
US20040167887A1 (en) * | 2002-12-06 | 2004-08-26 | Attensity Corporation | Integration of structured data with relational facts from free text for data mining |
US20040117436A1 (en) * | 2002-12-12 | 2004-06-17 | Xerox Corporation | Methods, apparatus, and program products for utilizing contextual property metadata in networked computing environments |
US7711550B1 (en) * | 2003-04-29 | 2010-05-04 | Microsoft Corporation | Methods and system for recognizing names in a computer-generated document and for providing helpful actions associated with recognized names |
US7558841B2 (en) * | 2003-05-14 | 2009-07-07 | Microsoft Corporation | Method, system, and computer-readable medium for communicating results to a data query in a computer network |
US20060074859A1 (en) * | 2003-05-28 | 2006-04-06 | Bomi Patel-Framroze Of Row2 Technologies Inc. | System, apparatus, and method for user tunable and selectable searching of a database using a weighted quantized feature vector |
US20050076015A1 (en) * | 2003-10-02 | 2005-04-07 | International Business Machines Corporation | Dynamic query building based on the desired number of results |
US7346629B2 (en) * | 2003-10-09 | 2008-03-18 | Yahoo! Inc. | Systems and methods for search processing using superunits |
US20050080771A1 (en) * | 2003-10-14 | 2005-04-14 | Fish Edmund J. | Search enhancement system with information from a selected source |
US20050102259A1 (en) * | 2003-11-12 | 2005-05-12 | Yahoo! Inc. | Systems and methods for search query processing using trend analysis |
US20050132274A1 (en) * | 2003-12-11 | 2005-06-16 | International Business Machine Corporation | Creating a presentation document |
US7734606B2 (en) * | 2004-09-15 | 2010-06-08 | Graematter, Inc. | System and method for regulatory intelligence |
US20060129446A1 (en) * | 2004-12-14 | 2006-06-15 | Ruhl Jan M | Method and system for finding and aggregating reviews for a product |
US7562104B2 (en) * | 2005-02-25 | 2009-07-14 | Microsoft Corporation | Method and system for collecting contact information from contact sources and tracking contact sources |
US7865478B2 (en) * | 2005-06-04 | 2011-01-04 | International Business Machines Corporation | Based on repeated experience, system for modification of expression and negating overload from media and optimizing referential efficiency |
US20070011150A1 (en) * | 2005-06-28 | 2007-01-11 | Metacarta, Inc. | User Interface For Geographic Search |
US20070011183A1 (en) * | 2005-07-05 | 2007-01-11 | Justin Langseth | Analysis and transformation tools for structured and unstructured data |
US7487146B2 (en) * | 2005-08-03 | 2009-02-03 | Novell, Inc. | System and method of searching for providing dynamic search results with temporary visual display |
US20100161661A1 (en) * | 2005-08-24 | 2010-06-24 | Stephen Hood | Performing an ordered search of different databases |
US7672932B2 (en) * | 2005-08-24 | 2010-03-02 | Yahoo! Inc. | Speculative search result based on a not-yet-submitted search query |
US20070078850A1 (en) * | 2005-10-03 | 2007-04-05 | Microsoft Corporation | Commerical web data extraction system |
US7526486B2 (en) * | 2006-05-22 | 2009-04-28 | Initiate Systems, Inc. | Method and system for indexing information about entities with respect to hierarchies |
US8010534B2 (en) * | 2006-08-31 | 2011-08-30 | Orcatec Llc | Identifying related objects using quantum clustering |
US20080114795A1 (en) * | 2006-11-14 | 2008-05-15 | Microsoft Corporation | On-demand incremental update of data structures using edit list |
US20080162456A1 (en) * | 2006-12-27 | 2008-07-03 | Rakshit Daga | Structure extraction from unstructured documents |
US7915816B2 (en) * | 2007-05-14 | 2011-03-29 | Sony Corporation | Organic electroluminescence display device comprising auxiliary wiring |
US7962480B1 (en) * | 2007-07-31 | 2011-06-14 | Hewlett-Packard Development Company, L.P. | Using a weighted tree to determine document relevance |
US20100030780A1 (en) * | 2008-07-30 | 2010-02-04 | Kave Eshghi | Identifying related objects in a computer database |
US20100070496A1 (en) * | 2008-09-15 | 2010-03-18 | Oracle International Corporation | Searchable Object Network |
US20100185653A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Populating a structured presentation with new values |
US20100185651A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Retrieving and displaying information from an unstructured electronic document collection |
US20100185934A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new attributes to a structured presentation |
US20100185654A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new instances to a structured presentation |
US20100185666A1 (en) * | 2009-01-16 | 2010-07-22 | Google, Inc. | Accessing a search interface in a structured presentation |
US20100211894A1 (en) * | 2009-02-18 | 2010-08-19 | Google Inc. | Identifying Object Using Generative Model |
Cited By (32)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100185934A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Adding new attributes to a structured presentation |
US20100185651A1 (en) * | 2009-01-16 | 2010-07-22 | Google Inc. | Retrieving and displaying information from an unstructured electronic document collection |
US20100185666A1 (en) * | 2009-01-16 | 2010-07-22 | Google, Inc. | Accessing a search interface in a structured presentation |
US8977645B2 (en) | 2009-01-16 | 2015-03-10 | Google Inc. | Accessing a search interface in a structured presentation |
US8615707B2 (en) | 2009-01-16 | 2013-12-24 | Google Inc. | Adding new attributes to a structured presentation |
US8924436B1 (en) | 2009-01-16 | 2014-12-30 | Google Inc. | Populating a structured presentation with new values |
US20100306223A1 (en) * | 2009-06-01 | 2010-12-02 | Google Inc. | Rankings in Search Results with User Corrections |
US20140297643A1 (en) * | 2011-04-23 | 2014-10-02 | Infoblox Inc. | Synthesized identifiers for system information database |
US9317514B2 (en) * | 2011-04-23 | 2016-04-19 | Infoblox Inc. | Synthesized identifiers for system information database |
US20130124624A1 (en) * | 2011-11-11 | 2013-05-16 | Robert William Cathcart | Enabling preference portability for users of a social networking system |
US10210465B2 (en) * | 2011-11-11 | 2019-02-19 | Facebook, Inc. | Enabling preference portability for users of a social networking system |
US8700673B2 (en) | 2012-02-16 | 2014-04-15 | Oracle International Corporation | Mechanisms for metadata search in enterprise applications |
US8682932B2 (en) | 2012-02-16 | 2014-03-25 | Oracle International Corporation | Mechanisms for searching enterprise data graphs |
US20130282710A1 (en) * | 2012-02-16 | 2013-10-24 | Oracle International Corporation | Displaying results of keyword search over enterprise data |
US9015150B2 (en) * | 2012-02-16 | 2015-04-21 | Oracle International Corporation | Displaying results of keyword search over enterprise data |
US9171065B2 (en) | 2012-02-16 | 2015-10-27 | Oracle International Corporation | Mechanisms for searching enterprise data graphs |
US8484208B1 (en) * | 2012-02-16 | 2013-07-09 | Oracle International Corporation | Displaying results of keyword search over enterprise data |
USD768670S1 (en) * | 2014-03-28 | 2016-10-11 | Jan Magnus Edman | Display screen with graphical user interface |
US11372874B2 (en) * | 2014-05-01 | 2022-06-28 | RELX Inc. | Systems and methods for displaying estimated relevance indicators for result sets of documents and for displaying query visualizations |
US10635680B2 (en) | 2017-06-05 | 2020-04-28 | Ancestry.Com Operations Inc. | Customized coordinate ascent for ranking data records |
AU2018282218B2 (en) * | 2017-06-05 | 2022-10-27 | Ancestry.Com Operations Inc. | Customized coordinate ascent for ranking data records |
US11416501B2 (en) | 2017-06-05 | 2022-08-16 | Ancestry.Com Operations Inc. | Customized coordinate ascent for ranking data records |
WO2018226694A1 (en) * | 2017-06-05 | 2018-12-13 | Ancestry.Com Dna, Llc | Customized coordinate ascent for ranking data records |
US10769188B2 (en) * | 2018-04-05 | 2020-09-08 | Sap Se | Text searches on graph data |
US20190311065A1 (en) * | 2018-04-05 | 2019-10-10 | Sap Se | Text searches on graph data |
CN110046180A (en) * | 2019-01-10 | 2019-07-23 | 阿里巴巴集团控股有限公司 | It is a kind of for positioning the method, apparatus and electronic equipment of similar case |
CN110046180B (en) * | 2019-01-10 | 2023-10-27 | 创新先进技术有限公司 | Method and device for locating similar examples and electronic equipment |
US11500884B2 (en) | 2019-02-01 | 2022-11-15 | Ancestry.Com Operations Inc. | Search and ranking of records across different databases |
US11314930B2 (en) * | 2019-02-11 | 2022-04-26 | Google Llc | Generating and provisioning of additional content for source perspective(s) of a document |
US10521655B1 (en) * | 2019-02-11 | 2019-12-31 | Google Llc | Generating and provisioning of additional content for biased portion(s) of a document |
CN110674360A (en) * | 2019-09-27 | 2020-01-10 | 厦门美亚亿安信息科技有限公司 | Method and system for constructing data association graph and tracing data |
US11947774B1 (en) * | 2021-04-28 | 2024-04-02 | Amazon Technologies, Inc. | Techniques for utilizing audio segments for expression |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20110106819A1 (en) | Identifying a group of related instances | |
US7756855B2 (en) | Search phrase refinement by search term replacement | |
US8903794B2 (en) | Generating and presenting lateral concepts | |
US8812541B2 (en) | Generation of refinement terms for search queries | |
US8903810B2 (en) | Techniques for ranking search results | |
EP2823410B1 (en) | Entity augmentation service from latent relational data | |
AU2012312072B2 (en) | Providing topic based search guidance | |
US8438178B2 (en) | Interactions among online digital identities | |
US8756245B2 (en) | Systems and methods for answering user questions | |
US8615707B2 (en) | Adding new attributes to a structured presentation | |
US20100185651A1 (en) | Retrieving and displaying information from an unstructured electronic document collection | |
US20090119281A1 (en) | Granular knowledge based search engine | |
US20130124512A1 (en) | Negative associations for generation of refinement options | |
US20110093452A1 (en) | Automatic comparative analysis | |
US20080040342A1 (en) | Data processing apparatus and methods | |
US8977645B2 (en) | Accessing a search interface in a structured presentation | |
US20100306223A1 (en) | Rankings in Search Results with User Corrections | |
CN104216942A (en) | Query suggestion templates | |
CN109952571B (en) | Context-based image search results | |
AU2010256777A1 (en) | Searching methods and devices | |
WO2007124430A2 (en) | Search techniques using association graphs | |
Jannach et al. | Automated ontology instantiation from tabular web sources—the AllRight system | |
Weninger et al. | The parallel path framework for entity discovery on the web | |
US11023519B1 (en) | Image keywords | |
Varnaseri et al. | The assessment of the effect of query expansion on improving the performance of scientific texts retrieval in Persian |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BROWN, RANDOLPH G.;QUINE, DANIEL N.;COPPEL, YOHANN R.;AND OTHERS;SIGNING DATES FROM 20091015 TO 20091026;REEL/FRAME:023584/0289 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |