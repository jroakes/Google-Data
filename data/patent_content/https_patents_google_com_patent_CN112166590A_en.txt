CN112166590A - Constrained environment for message generation in a networked environment - Google Patents
Constrained environment for message generation in a networked environment Download PDFInfo
- Publication number
- CN112166590A CN112166590A CN201980026394.9A CN201980026394A CN112166590A CN 112166590 A CN112166590 A CN 112166590A CN 201980026394 A CN201980026394 A CN 201980026394A CN 112166590 A CN112166590 A CN 112166590A
- Authority
- CN
- China
- Prior art keywords
- content
- client device
- server
- parameters
- web browser
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6263—Protecting personal data, e.g. for financial or medical purposes during internet communication, e.g. revealing personal data from cookies
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6227—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database where protection concerns the structure of data, e.g. records, types, queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6254—Protecting personal data, e.g. for financial or medical purposes by anonymising data, e.g. decorrelating personal data from the owner's identification
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/14—Session management
- H04L67/146—Markers for unambiguous identification of a particular session, e.g. session cookie or URL-encoding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/561—Adding application-functional data or data for application control, e.g. adding metadata
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/564—Enhancement of application control based on intercepted application data
Abstract
The systems and methods described herein can provide a restricted environment for the local execution of processor-executable instructions provided by a server. The restricted environment can be maintained by a web browser to enable sandboxing of content requests by the web browser during rendering of a web page. The restricted environment may enable the web browser to control the generation and transmission of the content request.
Description
Background
When a client device accesses a website, the website is able to transmit small data packets to the client device. The small data packet can include preferences, session information, or be used to authenticate and maintain a session between the client device and the device hosting the website. The data stored by the resulting web site can be stored indefinitely or can be purged at regular intervals. When the client device is not in an active session with a domain, the web browser can prevent the domain from accessing data of other domains or storing data on the client device. Preventing the web browser from storing and accessing data can prevent content rendered by the web browser from selecting customized content for insertion into the content.
Disclosure of Invention
The systems and methods described herein can allow delivery of customized content without compromising the privacy of the user by controlling content requests generated through the web browser. The system can include a Secure Vault (Secure Vault) or a restricted environment in which the browser executes processor-executable instructions to generate content items for populating content slots. The system can control the input received by the restricted environment (e.g., which device capabilities or identifiers the restricted environment can receive). In some implementations, the restricted environment can also control the allowed destination of the content request. For example, the restricted environment can enable the content slot to generate requests that can only be transmitted to an agent, which obscures the web browser and client device from the content server. The proxy is capable of masking an Internet Protocol (IP) address of the web browser from the content server. The proxy can also enforce aggregation requirements to further obfuscate the web browser from the content server. For example, the request to the agent can include a list of parameters for requesting customized content. The agent can enforce the aggregate requirement by not allowing the request to be fulfilled before a given parameter list has been requested a predetermined number of times. This can ensure that parameters that are highly specific to the web browser or client device (and thus may enable identification by third parties) cannot be used for extraction or selection of content items.
According to at least one aspect of the present disclosure, a method for exchanging data in a networked system may include: a client device profile is stored by a web browser executed by a client device, which may include a plurality of client device parameters and processor-executable instructions for generating a content request in a restricted environment of the client device. The restricted environment may be associated with a content server. The method may include transmitting, by the web browser, content item parameters to the restricted environment based on the web browser receiving a web page. The method can include executing, by a web browser, processor-executable instructions stored in a restricted environment to generate a parameter list based on the client device profile and content item parameters. The method can include transmitting, by the web browser, the parameter list to a proxy server. The method can include receiving, by the web browser, a content item to be rendered in a content slot of the web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
According to at least one aspect of the present disclosure, a system for exchanging data in a networked system may include a web browser executed by one or more processors of a client device. The Web browser can maintain one or more restricted environments. The Web browser can store a client device profile in a restricted environment, the client device profile can include a plurality of client device parameters and processor-executable instructions for generating a content request. The restricted environment can be associated with a content server. The Web browser is capable of transmitting content item parameters to a restricted environment based on the Web browser receiving a Web page. The Web browser is capable of generating a parameter list based on the client device profile and content item parameters based on execution of processor-executable instructions stored in a restricted environment. The Web browser can transmit the parameter list to a proxy server. The Web browser can receive a content item to be rendered in a content slot of the Web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
The foregoing general description, as well as the following brief and detailed description of the drawings, are exemplary and explanatory and are intended to provide further explanation of the invention as claimed. Other objects, advantages and novel features will become apparent to one skilled in the art from the following brief description of the drawings and detailed description.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
FIG. 1 illustrates a block diagram of an example network and device environment for data exchange, in accordance with some embodiments;
FIG. 2 illustrates a block diagram of an example computing device for use in the example network and device environment illustrated in FIG. 1, in accordance with some embodiments;
FIG. 3 illustrates a flow diagram for configuring a restricted environment in the example network and device environment illustrated in FIG. 1, in accordance with some embodiments;
FIG. 4 illustrates a flow diagram for exchanging data in the example network device environment illustrated in FIG. 1, in accordance with some embodiments; and
fig. 5 illustrates a block diagram of an example method for exchanging data in the example network device environment illustrated in fig. 1, in accordance with some embodiments.
Detailed Description
The various concepts introduced above and discussed in greater detail below can be implemented in any of numerous ways, as the concepts described are not limited to any particular manner of implementation. Examples of specific embodiments and applications are provided primarily for illustrative purposes.
Content, such as a web page, can include content slots that include processor-executable instructions that, when executed by a web browser, can cause the web browser to request customized content to be rendered into the content slots. The content can be customized based on, for example, device capabilities (e.g., screen resolution or orientation, color depth, bandwidth, etc.) or any other such information. The systems and methods described herein can allow customized content to be provided without compromising the privacy of the user by controlling content requests generated by the web browser. The system can include a secure library or a restricted environment in which the browser executes processor-executable instructions to generate content items to fill content slots. The system can control the input received by the restricted environment (e.g., which device capabilities or identifiers the restricted environment can receive). In some implementations, the restricted environment can also control the allowed destination of the content request. For example, the restricted environment may enable the content slot to generate requests that can only be transmitted to an agent, which obscures the web browser and client device from the content server. The proxy is capable of masking an Internet Protocol (IP) address of the web browser from a content server. The proxy can also enforce aggregation requirements to further obfuscate the web browser from the content server. For example, the request to the agent can include a list of parameters for requesting the customized content. The broker can enforce the aggregate requirement by not allowing fulfillment of the request until a given parameter list has been requested a predetermined number of times. This can ensure that parameters that are highly specific to the web browser or client device (and thus can be made identifiable by a third party) cannot be used for the extraction or selection of content items.
FIG. 1 illustrates a block diagram of an example network and device environment 100 for data exchange. As shown, one or more client devices 102 can communicate via network 106 with one or more content servers 110(1) -110(N), which can be referred to generally as content servers 110. Client device 102 is capable of communicating with content server 110 via one or more intermediate servers 108. The client device 102 can include any type and form of computing device, including a desktop computer, a laptop computer, a portable computer, a tablet computer, a wearable computer, an embedded computer, a smart television, a console, an internet of things (IoT) device or smart appliance, or any other type and form of computing device. The client device 102 can request content from the content server 110. For example, the content server 110 can provide content that the client device 102 renders into one or more content slots of an application or web page. The content slot can include JavaScript or other processor-executable instructions that enable client device 102 to request content from content server 110 (via intermediate server 108) to fill the content slot. The processor-executable instructions can be provided by content server 110.
The system 100 can include one or more networks 106. Network 106 can include a network of any type and form, including a Local Area Network (LAN), a Wide Area Network (WAN) such as the internet, a satellite network, a cable network, a broadband network, a fiber optic network, a microwave network, a cellular network, a wireless network, or any combination of these or other such networks. The system 100 can include networks 106 of the same or different types. For example, the network 106 between the client device 102 and the intermediary server 108 may be of a first type, while the network 106 between the intermediary server 108 and the content server 110 may be of a second type. The network 106 between the client device 102 and the intermediary server 108 and the network 106 between the intermediary server 108 and the content server 110 may be the same network or components of the same network.
The system 100 can include one or more intermediary servers 108. The intermediary server 108 may be a proxy between the client device 102 and the content server 110. The client device 102 can transmit the request to the intermediary server 108, and the intermediary server 108 can forward the request to the content server 110 for fulfillment. The request can include a header indicating a forwarding destination or a final destination of the request. Intermediary server 108 can prevent content server 110 from receiving one or more identifiers (e.g., IP addresses) from client device 102. Intermediate server 108 can apply one or more forwarding policies to the received request before determining to forward the request to one or more of content servers 110. For example, one of these forwarding policies may be an aggregation policy that sets a threshold for the number of similar requests that intermediate server 108 must receive within a given time period before intermediate server 108 forwards the request to one or more content servers 110. The forwarding policy can include a domain or content server specific aggregation policy. For example, the aggregation policy can hold the requests until or unless a predetermined number of requests are received for a particular domain (e.g., www.example.com). The forwarding policy can include an aggregation policy or threshold for multiple aggregation domains. The multidimensional policy can set thresholds for a domain (e.g., www.example.com) and a predetermined content server.
In some implementations, the request does not indicate the target content server 110, and the intermediate server 108 is able to select which content servers 110 to send the request to. The selection can be via a load balancing algorithm, an auction algorithm (e.g., where the content server 110 bids on opportunities to provide content), and so forth. The intermediate server 108 can thus be referred to as a switching server, a load balancer, or by any other such means. In some implementations, the intermediary server 108 can forward the request to another exchange server or load balancer that can select the content server 110 from a pool of content servers 110.
The intermediary server 108 can manage the return responses from the content server 110 to the client device 102. For example, content server 110 can select a content item in response to a request forwarded from intermediary server 108 to content server 110. The content server 110 can transmit the content item to the intermediary server 108, and the intermediary server 108 can forward the content item to the client device 102 that generated the original request for the content.
The system 100 can include one or more content servers 110. Content server 110 can include a content repository. Content server 110 can select content from a content repository in response to receiving a content request from intermediary server 108 or client device 102. In some implementations, the content request from the client device 102 can include an identifier, such as a cookie, provided to the client device 102 by the content server 110 in an earlier data exchange or parameter list. The content server 110 can select content from the content repository based on the identifier. For example, the content server 110 can associate the identifier with a preference such as, but not limited to, the client device 102 and computing resources (e.g., screen size and resolution). Content server 110 can select the content from the data repository based on the data associated with the identifier. Content server 110 can select the content item based on a list of parameters included in the request. The parameter list may include parameters (e.g., screen size, resolution, content slot size, topic) that content server 110 is able to use in selecting the content item.
FIG. 2 illustrates a block diagram of an example computing device for use in the example network and device environment illustrated in FIG. 1. The example network and device environment can include one or more client devices 102 capable of communicating with one or more content servers 110 via one or more intermediary servers 108.
As discussed above, the client device 102 may be referred to as a client, a device, a client device, a computing device, a user device, or any other such terminology. Client device 102 can include or be a component of a desktop computer, a laptop computer, a tablet computer, a smart phone, a video game console, a smart television or set-top box, a server, a workstation, or any other type and form of computing device capable of communicating over network 106. In some implementations, the client device 102 can execute an application 208 for communicating over the network 106. The application 208 may be a service, server, daemon, routine, or other executable logic for communicating over the network 106. The application 208 may be a web browser, mail client, video player, music player, video game, or any other such application. Such applications can include command line interfaces, graphical user interfaces, or any combination of these or other interfaces.
The client device 102 can include one or more processors 200, a network interface 202, and an I/O interface 204. The client device 102 can include a memory 206. The memory 206 is capable of storing machine instructions that, when executed by the processor 200, cause the processor 200 to perform one or more of the operations described herein. The processor 200 can include a microprocessor, ASIC, FPGA, the like, or a combination thereof. The processor 200 may be a multi-core processor or an array of processors. The memory 206 can include, but is not limited to, an electronic, optical, magnetic, or any other storage device capable of providing program instructions to the processor 200. Memory 206 can include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ROM, RAM, EEPROM, EPROM, flash memory, optical media, or any other suitable memory from which processor 200 can read instructions. The instructions can include code from any suitable computer programming language, such as, but not limited to C, C + +, C #, Java, JavaScript, Perl, HTML, XML, Python, and Visual Basic.
The client device 102 can include one or more network interfaces 202. The network interface 202 can include any type and form of interface, including an ethernet network including 10Base T, 100Base T, or 1000Base T; any of a variety of 802.11 radios, such as 802.11a, 802.11b, 802.11g, 802.11n, or 802.11 ac; cells, including CDMA, LTE, 3G, or 4G cells; bluetooth or other short-range wireless connection; or any combination of these or other interfaces for communicating with the network 106. The client device 102 can include multiple network interfaces 202 of different types, allowing connection to various networks 106 or networks 106 such as the internet via different sub-networks.
The client device 102 can include one or more I/O interfaces 204. The I/O interface 204 may be hardware-based or software-based. The I/O interface 204 may be any electronic device (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.) that communicates data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, haptic feedback, etc.) and/or converts sensory information received from a user into electronic signals. According to various embodiments, one or more user interface devices may be internal to the housing of client device 102, such as a built-in display, touch screen, microphone, etc., or external to the housing of client device 102, such as a monitor connected to client device 102, a speaker connected to client device 102, etc.
The client device 102 can store data and processor-executable instructions in the memory 206. For example, the client device 102 can store the application 208 as processor-executable instructions in the memory 206. The application 208 may be an application, applet, script, service, daemon, routine, or other executable logic for receiving content via the I/O interface 204 (e.g., display, speaker, etc.) of the client device and displaying or otherwise outputting the content. For example, the application 208 may be a web browser that receives and renders a web page or other content. The application 208 can include functionality for displaying content received via the network interface 202 and/or generated locally by the processor 200.
The client device 102 can include a device ID 210. The client device 102 can identify itself to the intermediary server 108 or the content server 110 using the device ID 210. The device ID210 may be an alphanumeric string, a data string, a serial number, a Media Access Control (MAC) address, an IP address, a username or account name, a Globally Unique Identifier (GUID), a cookie, a random or pseudo-random number, or any other type and form of identifier, including combinations of these or other identifiers. For example, the device ID210 may be a hash of the user agent or MAC address of the client device. The device identifier 210 can be fixed to the client device 102. For example, the device ID210 can be pre-configured in the device by the manufacturer. For example, the device ID210 may be a manufacturer serial number or a MAC address. The device ID210 can be dynamically set by the client device 102, the intermediary server 108, or the content server 110. The device ID210 may be static. The device ID210 can be updated at a predetermined interface. For example, a unique or new device identifier 210 can be set for each communication with the intermediary server 108. The device ID210 can be changed or updated periodically (e.g., hourly, daily, weekly, etc.) or at other intervals (e.g., upon rebooting the client device, logging into an internet service, etc.). The device ID210 can be associated with one or more other device identifiers 210 (e.g., a device identifier for a mobile device, a device identifier for a home computer, etc.).
The client device 102 can include one or more restricted environments 212. Restricted environment 212 may be a component of application 208 or can be maintained by application 208. For example, the application 208 may be a web browser and the web browser is capable of creating, maintaining, and removing the restricted environment 212 from the memory 206 of the client device 102. The restricted environment 212 may be an application, applet, script, service, daemon, routine, or other executable logic for receiving content item parameters and generating a parameter list based on the content item parameters and the client device profile 214. The restricted environment 212 may be a secure storage location within the memory 206. Restricted environment 212 may be or include a "sandbox" that isolates processor-executable instructions executing within restricted environment 212 from data or other processor-executable instructions stored outside of restricted environment 212. The client device 102 can include a different restricted environment 212 for each of the content servers 110 with which the client device 102 interacts. For example, during an earlier data exchange (e.g., an authentication procedure), the content server 110 can provide processor-executable instructions to the client device 102 for storage within the restricted environment 212 for the content server 110.
In some implementations, the restricted environment 212 may be a component of a document, resource, or web page that is executed or rendered by the application 208. For example, the application 208 may be a web browser that receives and renders a web page. The restricted environment 212 may be defined within a frame (e.g., iframe) of the web page. The framework can include processor-executable instructions (e.g., JavaScript) and the restricted environment 212 can restrict the processor-executable instructions from interacting with other processor-executable instructions or data that is not contained within the restricted environment 212 (or provided to the restricted environment 212). Restricted environment 212 is capable of limiting the resources and network transmission of processor-executable instructions executing within restricted environment 212. The restricted environment 212 can restrict content or other requests from processor-executable instructions. For example, restricted environment 212 can limit content requests generated by processor-executable instructions within restricted environment 212 to only intermediary server 108. The intermediary server 108 can forward the message to the content server 110 for fulfillment.
The restricted environment 212 can include a client device profile 214. The client device profile 214 can be generated, updated, and maintained by the profile generator 216. The client device profile 214 may be a data structure for storing data that the content server 110 can use to identify content items 228 for the client device 102. As described above, client device 102 can include a different restricted environment 212 for each of content servers 110. The data included by the client device profile 214 within a given restricted environment 212 can be used by the corresponding content server 110 to identify a content item 228 for the client device 102. The client device profile 214 may be or include an alphanumeric string, a data string, a serial number, a MAC address, an IP address, a username or account name, a GUID, a random or pseudo-random number, or any other type and form of identifier, including combinations of these or other identifiers. For example, the client device profile 214 may be a hash of the client device's user agent, MAC address, demographics, interests, intentions, browsing history, or other data related to the client device. The client device profile 214 can include preferences of a user of the client device 102. The user of the client device 102 can set the preferences stored in the client device profile 214. For example, during an authentication process with the content server 110, a user can select one or more preferred content types or preferred topics. The preferences can be set automatically by the profile generator 216. For example, when a browser renders a web page, the profile generator 216 can receive a Uniform Resource Locator (URL) from the web browser. The profile generator 216 can determine the subject matter of the web page. The profile generator 216 can add the identification of the topic to the client device profile 214. The user of client device 102 can instruct application 208 to delete client device profile 214 at regular intervals (e.g., daily, weekly, monthly, etc.), or application 208 can delete client device profile 214 at a time specified by the user.
The restricted environment 212 can include a profile generator 216. Profile generator 216 may be an application, applet, script, service, daemon, routine, or other executable logic for generating and maintaining client device profiles 214. The client device 102 can receive logic (e.g., processor-executable instructions of the profile generator 216) for the profile generator 216 of the content server 110. For example, the logic may be included in the web page, as further described with respect to fig. 3. For example, the logic may be JavaScript within the iframe. The content server 110 can provide the logic to the publisher of the web page, which can include the logic in a content slot or iframe.
The restricted environment 212 can include a parameter selector 220. Parameter selector 220 may be an application, applet, script, service, daemon, routine, or other executable logic for generating or updating parameter list 218. As described below, parameter list 218 may be a data structure that includes settings, requirements, or other parameters that can be used by content server 110 to select content. The parameter selector 220 can generate the parameter list 218 in response to receiving a content request. For example, application 208 can render a web page, which can include a content slot, and which can include processor-executable instructions for extracting content from one of content servers 110. Application 208 can transmit or provide the content request for the content slot to restricted environment 212 associated with content server 110. The request can include one or more parameters for the content item to be returned in response to the request. For example, the request can include a dimension of the content item that should be returned. The parameter selector 220 can add one or more parameters from the content item to the parameter list 218. For example, the one or more parameters may be concatenated into an array of parameters in parameter list 218. The parameter selector 220 can select or generate parameters to be added to the parameter list 218 (either in addition to or instead of parameters in the content request). Parameter selector 220 can add the parameters to parameter list 218 based on client device profile 214. For example, as described above, the client device profile 214 can include preferences and configuration information for the client device 102. Parameter selector 220 is capable of selecting parameters based on preference or configuration information stored in client device profile 214. For example, the client device profile 214 can indicate a user's theme preferences, such as interest in automobiles. In this example, the parameter selector 220 can append "cars" or their identifiers to the parameter list 218 to indicate to the content server 110 that the user is interested in cars and that the content server 110 should select a content item 228 related to cars.
As further illustrated in fig. 2, the system 100 can include an intermediary server 108. Like the client device 102, the intermediary server 108 can include one or more processors 200, memory 206, a network interface 202, and an I/O interface 204. The intermediate server 108 is capable of communicating with the client device 102 and the content server 110 via the network 106. The memory 206 of the intermediary server 108 is capable of storing one or more applications for execution by the processor 200 of the intermediary server 108. For example, the intermediary server 108 can include an application that enables the intermediary server 108 to act as a proxy between the client device 102 and the content server 110.
The intermediary server 108 can include an aggregator 224. The aggregator 224 may be an application, applet, script, service, daemon, routine, or other executable logic for aggregating requests received from the client device 102. The intermediate server 108 is capable of receiving a content request from the client device 102 for forwarding onto the content server 110. Each of these content requests can include a parameter list 218. The aggregator 224 and the intermediary server 108 can protect the privacy of the client device 102 from the content server 110. For example, the intermediary server 108 and aggregator 224 can mask, hide, or otherwise prevent the receiving content server 110 from knowing the IP address of the client device 102 from which the content request originated. In some implementations, the content server 110 may be able to identify the client device 102 based on parameters within the parameter list 218 transmitted in the content request. For example, a particular combination of parameters (e.g., { zipCode:12345, interest: automobiles, agent: chrome }) can be shared by a group of client devices 102 or by a small group of client devices 102. In instances where the parameter list is shared by only a small set of client devices 102, content server 110 can use parameter list 218 to identify client devices 102.
The aggregator 224 can prevent the client device 102 from being identified by the content server 110 via a particular parameter list by ensuring that the parameter list 218 satisfies an aggregation threshold before transmitting or forwarding the parameter list 218 to the content server 110. The aggregation threshold can prevent the parameter list from being too specific to the client device 102. For example, if only a single client device 102 makes a request for content within a predetermined time frame, it may be possible to identify the client device 102 from the request. However, by requiring an aggregation threshold, the aggregator 224 can prevent the client devices 102 from being identified from the request because at least the number of client devices 102 of the aggregation threshold have also made the request. For example, the aggregator 224 can save an indication of the parameter list 218 to the aggregation table 226. In some implementations, the aggregator 224 can generate a hash (e.g., a cryptographic hash or SHA-256 hash) of the parameter list 218 that is stored to the aggregation table 226. The aggregator 224 can save an indication of the parameter list 218 to the aggregation table 226 in association with the timestamp. The aggregator 224 can save an indication of the parameter list 218 as a complete list to the aggregation table 226. The complete list can be hashed cryptographically or encrypted before being stored as a complete list. The aggregator 224 can parse the parameter list 218 to identify individual parameters within the parameter list 218 and save an indication of the individual parameters to the aggregation table 226. For example, the exemplary parameter list can be saved to aggregation table 226 as a hash ({ zipCode:12345, interest: automobiles, agent: chrome }) hash or as three separate entries hash ({ zipCode:12345}), hash ({ interest: automobiles }) and hash ({ agent: chrome }).
Based on the timestamps associated with the parameters saved to the aggregation table 226, the aggregator 224 can determine a count or frequency of receipt of each parameter or combination of parameters in the parameter list 218. The aggregator 224 can determine a count of a predetermined time window (e.g., past hour, day, week, or month). When intermediary server 108 receives the content request, aggregator 224 can add the parameters of parameter list 218 to aggregation table 226 and determine whether the parameters satisfy an aggregation threshold. The aggregator 224 can determine if the parameter was received more than a predetermined number of times within a predetermined time window. As one example, the aggregation threshold may be 50 times per day. The aggregator 224 can determine whether a combination of parameters in the parameter list 218 was received more or less than 50 times on the last day. In some implementations, if the parameter list 218 satisfies the aggregation threshold (e.g., received more than 50 times the last day in the above example), the intermediary server 108 can forward the request and the parameter list 218 to the content server 110. In some implementations, if the parameter list 218 does not satisfy the aggregation threshold, the aggregator 224 can pass the parameter list 218 to the parameter selector 220 of the intermediary server 108. In some implementations, if the parameter list 218 does not satisfy the aggregation threshold, the intermediate server 108 can remove the parameter list 218 from the content request and forward the modified content request to the content server 110. In this example, the content server 110 may select a generic content item because the content server 110 will not receive a list of parameters that can be used by the content selector 230 of the content server to select the content item 228 in order to fulfill the content request.
The intermediary server 108 can include a parameter selector 220. The parameter selector 220 of the intermediary server can perform all of the functions described with respect to the parameter selector 220 of the client device, and the parameter selector 220 of the client device can perform all of the functions described with respect to the parameter selector 220 of the intermediary server. In some implementations, the parameter selector 220 can refine, update, change, or remove parameters from the parameter list 218 received from the client device 102. For example, when the aggregator 224 determines that the parameter list 218 does not satisfy the aggregation threshold, the aggregator 224 can forward the parameter list 218 to the parameter selector 220 for updating. The parameter selector 220 can remove parameters from the parameter list 218 to make the parameter list 218 more versatile. The parameter selector 220 can update the parameters from the parameter list 218 to make the parameter list 218 more generic or less generic. For example, if the parameter is { zipCode:90001}, parameter selector 220 can update the parameter to a more general parameter such as { location: California }.
The intermediate server 108 can include an aggregation table 226. As described above, the aggregator 224 can store an indication of the parameter or list of parameters 218 to the aggregation table 226. The aggregation table 226 may be a table, hash table, database, or other collection of data. Each parameter or parameter list 218 may be stored in an aggregation table 226 along with a timestamp. The aggregator 224 can clear or delete entries in the aggregation table 226 that are older than a predetermined threshold (e.g., 1 day, 1 week, 1 month, or 3 months). Each parameter or parameter list 218 may be stored as an entry in an aggregation table 226, and the aggregator 224 can process through the aggregation table 226 to count the number of occurrences of the parameter or parameter list 218. In some implementations, the aggregation table 226 can store only entries for unique parameters or parameter lists. For example, when typing a parameter or list of parameters 218 into the aggregation table 226, if the aggregator 224 determines that the parameter or list of parameters 218 is not unique (e.g., the parameter or list of parameters 218 is already in the list), the aggregator 224 can increment a count value stored in the aggregation table 226 in association with the unique parameter or list of parameters 218.
The intermediary server 108 can include a content provider selector 222. The content provider selector 222 can include an application, server, service, daemon, routine, or other executable logic. The content provider selector 222 can be configured to select the content server 110 from a list of content servers 110. For example, the content provider selector 222 can select a content server 110 from a list of content servers 110 using a polling or other load balancing system or via an auction-based system. The content provider selector 222 can be configured to transmit requests to the content server 110 and receive responses from the content server 110, such as bids for opportunities to provide content to the client device 102. The content server 110 can be configured to generate content requests or forward content requests from the client device 102 to a selected content server 110. The content request can include the parameter list 218 (or an updated version thereof). In some implementations, the content provider selector 222 can be a component of the second intermediary server 108. For example, the client device 102 can transmit the request to a first intermediary server 108 that can include the aggregator 224. The first intermediate server 108 can update the parameter list as needed and forward the updated parameter list to the second intermediate server 108. The second intermediate server 108 can identify one or more content servers 110 via the content provider selector 222 and forward the request to the selected content server 110.
As also illustrated in fig. 2, the system 100 can include one or more content servers 110. Each of these content servers 110 can include one or more computing devices connected to the network 106 and configured to provide content items 228 to the client device 102 via the intermediary server 108. The content items 228 provided by the content server 110 can be referred to as secondary content because the content items 228 can be rendered into content slots of primary content, such as web pages. In some implementations, the content item 228 can be or include primary content. Content server 110 can be variously referred to as a content provider, a server, a web server, a data server, a publisher, a service provider, or by other similar terms. The content server 110 can include a plurality of computing devices configured as a server farm or cloud, and may include routers, load balancers, network address translators, firewalls, or other such devices. The content server 110 may be a computer server (e.g., FTP server, file sharing server, web server, etc.) or a combination of servers (e.g., data center, cloud computing platform, etc.). Content server 110 can provide any type and form of content including text, images, video, audio, multimedia or other data or any combination thereof. Content items 228 can include live media content, pre-recorded media content, rendered content, movies, television shows, podcasts, video blogs, video games or other interactive content, advertisements in any format, social media, or any other type and form of content.
The content selector 230 may select the content item 228 for delivery to the client device 102 based on the parameters parsed from the parameter list 218 received in the content request. For example, the parameters may include information about device capabilities (e.g., screen resolution or orientation, color depth, bandwidth, etc.) or any other such information for selecting customized content. The information can be indexed in the database by one or more of these parameters. In response to selecting the content item 228, the content selector 230 can push, stream, or otherwise deliver the content item 228 to the client device 102. The content server 110 can transmit the content item 228 directly to the client device 102 or indirectly to the client device 102 via the intermediate server 108. The content items 228 may be any type and form of data including audio, video, animation, text, multimedia, still or animated graphics, executable scripts, or any other type and form of content. Each of the content items 228 can be associated with a tag, an identifier, a ULR, or processor-executable instructions. For example, each content item 228 can include processor-executable instructions such that when the application 208 renders and displays the content item 228, a selection (e.g., a user selection or click) of the rendered content item 228 can redirect the application 208 to a URL identified by the content item 228. For example, the content item 228 can include an HTML tag that identifies the content item 228 as containing a web link (e.g., a URL) to the second web page.
FIG. 3 illustrates a flow diagram 300 for configuring a restricted environment in a networked environment. Flowchart 300 illustrates steps performed by application 208 and restricted environment 212 on client device 102, intermediate server 108, and content server 110. In one example, the application 208 may be a web browser executed by the client device 102. The flowchart 300 begins with rendering a web page (step 302). The web page can include one or more content slots. The content slots can include processor-executable instructions (e.g., JavaScript). The processor-executable instructions contained within the web page can include processor-executable instructions that cause application 208 to generate restricted environment 212 for content server 110 at client device 102, the content server 110 providing the processor-executable instructions contained within the web page. When first generated, the restricted environment 212 may not include a client device profile 214 from which the parameter selector 220 can generate the parameter list 218. In this case, the content request described below may not include the parameter list 218, and the content server 110 can return the generic content item 228. The content item 228 may be generic in that it is not selected based on one or more parameters from the client device 102.
The application 208 is capable of executing processor-executable instructions within the content slot. When rendering the web page, the application 208 can generate a content request that is passed to the restricted environment 212 (step 304). Restricted environment 212 can generate parameter list 218 based on the content request. Restricted environment 212 can encode the content request as a fetch request. Restricted environment 212 can encode parameter list 218 as a URL included in the fetch request.
The content server 110 can select a content item and forward the content item to the intermediate server 108 (step 310). The content server 110 can transmit the content item to the intermediate server 108 for forwarding to the client device 102. In some implementations, the content item can be a URL that identifies the location of the content. For example, the content item may be a URL to a resource that, when rendered by the application 208, extracts content from a location identified by the URL.
The intermediary server 108 can forward the content item to the application 208 (step 312). In some implementations, the request transmitted by the restricted environment 212 to the intermediary server 108 can include a request identifier. Upon receiving the request, intermediary server 108 can store the request identifier in a database in association with the IP address of the client device 102 that provided the request. The intermediary server 108 can include the request identifier in the request forwarded to the content server 110, but can remove identifying information about the client device 102, such as the client device's IP address, from the request. Content server 110 can include the request identifier in the response at step 310. The request identifier can indicate to the intermediary server 108 to which client device 102 (and its IP address) the returned response from the content server 110 should be forwarded. For example, the intermediary server 108 can create a hash of the request identifier as a key to a lookup table to identify the IP address stored in association with the request identifier. The intermediate server 108 can add, for example, the IP address as a destination for the data packet forming the return response.
At step 314, the application 208 can render the returned resource. The application 208 can render the returned resources (e.g., content items) into the content slots of the web page for which the request was generated. At step 316, the restricted environment 212 can request a profile. In some embodiments, step 316-322 can occur in parallel with step 304-314 or after step 304-314. Referring additionally to FIG. 2, the profile may be a client device profile 214. The restricted environment 212 can request the profile to update the profile based on the web page rendered at step 302, the content item returned by the content server 110, or a combination thereof. The profile generator 216 of the restricted environment 212 can request the client device profile 214 from the application 208. For example, the application 208 can manage local storage of the restricted environment 212 to the client device 102. In some implementations, the client device profile 214 may be stored in the restricted environment 212, and the profile generator 216 may be capable of extracting the client device profile 214 from the restricted environment 212. Restricted environment 212 can request the client device profile 214 through an Application Programming Interface (API) call made to application 208 or through one or more hooks (hooks) provided by application 208. At step 316, the application 208 can return the requested profile. Application 208 can read client device profile 214 from a memory of client device 102 and provide client device profile 214 to restricted environment 212.
At step 320, the restricted environment 212 can update the profile. The profile generator 216 can update the client device profile 214. The profile generator 216 can update the client device profile 214 based on: the web page rendered at step 302 (e.g., the URL of the web page, the subject matter of the web page, the title of the web page, or other content contained therein); content items returned by the content server 110 (e.g., a URL of a content item, a subject of a content item, an identifier of a content item, or an indication of whether a content item was viewed or clicked on by a user); a time of day at which the web page or content item was requested, parameters or content (e.g., metadata and tags) included in the web page or content item but not displayed by rendering; or a combination thereof. In some implementations, one of the web pages or content items can include a tag or other identifier to the profile generator 216 that indicates that the client device profile 214 should not be updated based on the web page or content item that includes the tag. For example, web pages that include sensitive information, such as financial or health information, can include such tags indicating that the client device profile 214 should not be updated based on the content of the respective web page. In some implementations, the profile generator 216 can determine whether the web page is whitelisted or blacklisted before updating the client device profile 214 based on the web page. At step 322, the restricted environment 212 can save the updated profile. Restricted environment 212 can save updated client device profile 214 to restricted environment 212, or restricted environment 212 can pass updated client device profile 214 to application 208, which application 208 can save updated client device profile 214 to a portion of memory maintained by application 208 for restricted environment 212.
Fig. 4 illustrates a flow diagram 400 for selecting customized content in response to a request. At step 404, the client device 102 can render the webpage. Referring additionally to FIG. 2, in particular, the application 208 can render the web page. For example, a URL of a web page can be entered into application 208 and application 208 can fetch the web page at the URL and then render the web page. Rendering the web page enables display of the web page via an application. The web page can include one or more content slots 402. Content slot 402 can include processor-executable instructions for requesting or extracting content for application 208 to render into content slot 402. In some implementations, the content slot 402 can include processor-executable instructions that are provided to the processor-executable instructions just like JavaScript to interact with the restricted environment 212. For example, the content slot 402 can request the client device profile 214 from the restricted environment 212.
At step 406, the content slot 402 can request a profile. The content slot 402 can request the client device profile 214 from the restricted environment 212. Application 208 can authorize content slot 402 to receive content or otherwise interact with restricted environment 212. For example, application 208 can authorize content slot 402 to interact only with restricted environment 212 having the same source (e.g., content server 110) as content slot 402. For example, the content slot 402 can be configured to request a content item from a predetermined content server 110. As described above, application 208 is able to generate a different restricted environment 212 for each of content servers 110 when application 208 renders content slots 402 that include processor-executable instructions from the respective content server 110. Application 208 can restrict content slot 402 to interacting with restricted environment 212 associated with the same content server 110, which content server 110 is associated with content server 110. In some implementations, the content slot 402 can request that the restricted environment 212 can communicate the content request to the content provider on behalf of the content slot 402.
At step 408, the client device 102 can return the profile to the content slot 402. Restricted environment 212 can read client device profile 214 from memory and return the client device profile 214 to content slot 402. In some implementations, the restricted environment 212 can return the parameter list 218 to the content slot 402 based on the client device profile 214. At step 410, the content slot 402 can encode the profile. For example, the content slot 402 can concatenate the profile into a parameter value string in a URL. The content slot 402 can include the profile (or parameter list 218) as a URL. For example, the URL can include a base URL of the content server 110. The content slot 402 can concatenate one or more parameters to the base URL as URL parameters to form a resource URL. At step 412, the content slot 402 can request that the resource URL be fetched. The content slot 402 can request that the application 208 fetch a resource (e.g., a content item) located at the resource URL.
At step 414, the client device 102 can fetch the resource URL. The client device 102, via the application 208, can request a resource by transmitting the URL to the intermediate server 108. Application 208 can communicate the request to intermediary server 108 by using any suitable protocol, such as an http request or a RESTful request (resource presentation layer state transition request). At step 416, the intermediate server 108 can forward the request to the content server 110. As described above, and as further described with respect to fig. 5, the intermediary server 108 can forward the request to the content server 110 if the parameters encoded in the resource URL satisfy an aggregation threshold.
At step 418, content server 110 can receive the fetched request from intermediate server 108 and can resolve the URL. At step 410, the content server 110 can parse the resource URL to identify one or more parameters that the content slot 402 encodes into the resource URL at step 410. At step 420, content server 110 can select content. Referring additionally to FIG. 2, in particular, the content selector 230 can use one or more parsed parameters to select the content item 228. The content selector 230 is capable of selecting the content item 228 based on the parameters. For example, the parameters can identify the size, type, and subject matter of the content item 228 to be selected. In addition to the parameters, the content server 110 can use a load balancing system (e.g., a round robin system) or an auction based system to select the content item 228. At step 422, the content server 110 can transmit the selected content item to the intermediary server 108. At step 424, the intermediary server 108 can forward the selected content item to the client device 102. As described above, the request transmitted to intermediary server 108 at step 414 can include a request identifier. Content server 110 can include the request identifier with the returned content at step 422. At step 424, the intermediate server 108 can use the request identifier to determine to which client device 102 the content item should be forwarded. The intermediary server 108 can forward the content item to the client device 102 identified by the request identifier. At step 426, the client device 102 can receive the content item and can render the content item. For example, the application 208 can render the content item selected for the request into the content slot 402 that generated the request.
Fig. 5 illustrates a block diagram of an example method 500 for exchanging data in a networked environment. Fig. 5 illustrates steps or actions performed by the client device 102, the intermediary server 108, and the content server 110. The method 500 can include rendering a content slot (step 502). With additional reference to FIG. 2, among other things, the client device 102 is capable of executing applications 208. Application 208 may be a web browser. The web browser can receive or request web pages and can render the web pages to display them to a user. The web page can include one or more content slots. The content slots can include processor-executable instructions for requesting content from content server 110 for rendering into the content slots by application 208.
Based on rendering the content slots, the method 500 can include transmitting content item parameters (step 504). The application 208 can execute processor-executable instructions contained within the content slot, and execution of the processor-executable instructions can include the application 208 communicating or providing content item parameters to the restricted environment 212. The content item parameters can include an identifier of the content slot, a request identifier, a base resource URL (e.g., a URL for requesting content), a URL of a web page, or a combination thereof.
The method 500 can include identifying a profile (step 506). The profile may be a client device profile 214. The client device profile 214 can be stored within the restricted environment 212 or accessed via the restricted environment 212. In some implementations, the content slot can be associated with content server 110. For example, processor-executable instructions within the content slot for requesting content for the content slot can be provided by content server 110. To identify the client device profile 214, the application 208 can identify the content server 110 associated with the content slot and then select or identify the restricted environment 212 associated with the content server 110.
The method 500 can include selecting parameters (step 508). A parameter selector 220 within the identified restricted environment 212 is able to select the parameter. In some implementations, the parameter selector 220 can select each of the parameters associated with the client device profile 214. In some implementations, the parameter selector 220 can select a portion of the parameters associated with the client device profile 214. The parameter selector 220 is capable of selecting the parameter based on the content item parameter. For example, the content item parameter can indicate a size of a topic or content slot of a web page. The parameter selector 220 can, for example, select a parameter indicating a preference associated with the topic of the indicated web page. In some implementations, the parameter selector 220 can select parameters to meet an aggregation threshold of the intermediary server 108. For example, parameter selector 220 may not select a particular combination of parameters because the combination does not pass the aggregation threshold of intermediary server 108. Rather, parameter selector 220 may include one or more general parameters such that the combination of parameters satisfies the aggregation threshold of intermediary server 108.
The method 500 can include generating a parameter list (step 510). The parameter selector 220 can generate the parameter list 218 including the parameters selected at step 508. The restricted environment 212 can encode the parameter list 218 as a URL or URL parameter. The encoding parameter list 218 can be appended to a base resource URL (e.g., a URL for requesting content). For example, the base resource URL may be a URL (e.g., www.example.com) of the content server 110. In examples where the selected parameter is location and interest, the parameter list 218 can be encoded as "zipCode: 12345 interests: automobiles". In the above example, restricted environment 212 is able to combine the base URL and encoding parameter list 218 to form a URL "www.example.com/? zipcode 12345& interests automobiles ".
The method 500 can include transmitting the parameter list (step 512). Restricted environment 212 can include the parameter list as an encoded value in the URL. Restricted environment 212 can pass the URL to application 208, which application 208 can transmit the URL to intermediary server 108. Application 208 can communicate the URL to intermediate server 108 as an http request or a RESTful request.
The method 500 can include determining whether a parameter of the parameter list satisfies an aggregation threshold (step 514). The aggregation threshold can indicate a number of times a parameter or combination of parameters must be received in a content request by the intermediary server 108 within each time window. For example, the aggregation threshold for a combination of parameters may be 50/day, which indicates that when the combination of parameters is received in a request, the combination of parameters must be included in 50 requests within the last 24 hours (from different web browsers) for intermediary server 108 to determine that the combination of parameters passes the aggregation threshold. If the parameter or combination of parameters received by intermediary server 108 passes the aggregation threshold, method 500 can continue to step 520. If the parameter or combination of parameters received by the intermediary server 108 fails the aggregation threshold, the method 500 can continue to step 516. The aggregation threshold can include a plurality of dimensions. For example, the aggregated threshold can include a plurality of different thresholds for different parameters. In some embodiments, each of the different dimensional thresholds must be satisfied for the parameters of the parameter list to satisfy the aggregation threshold.
The method 500 can include determining to refine the parameter list (step 516). In response to the parameter failing the aggregation threshold, intermediary server 108 can determine whether the list of parameters should be refined. In some implementations, the intermediary servers 108 can include a blacklist or whitelist of URLs associated with the content servers 110 that restricts or allows updating of parameter lists in requests sent by the intermediary servers 108 to the respective content servers 110. In some implementations, the URL transmitted by the client device 102 to the intermediary server 108 can include a URL value indicating whether the intermediary server 108 is authorized to update the parameter or parameter list. If the intermediate server 108 is authorized to update the parameter list, the method 500 continues to step 518, while if the intermediate server 108 is not authorized to update the parameter list, the method 500 continues to step 524.
The method 500 can include generating an updated parameter list (step 518). The intermediary server 108 can update the parameter list by making one or more of the parameters more generic. For example, the location parameter can change from a zip code to a state containing the zip code. By changing the parameters to indicate an interest in automobiles, the parameters used to indicate an interest in a particular brand of automobile may be made more versatile. The method 500 can include updating the parameter list by removing one or more parameters from the parameter list. For example, the intermediary server 108 can determine the frequency at which the intermediary server 108 receives each of the parameters in the list of parameters. The intermediary server 108 can rank the parameters based on the frequency. In some implementations, the intermediary server 108 can remove parameters having a frequency below a predetermined threshold. For example, the intermediary server 108 can remove the rarely occurring parameters from the parameter list, thereby making the parameters or combination of parameters more unique and attributable to a particular client device 102. In some implementations, the intermediary server 108 can maintain only parameters with frequencies above a predetermined threshold. For example, the intermediary server 108 can only keep the most frequently occurring parameters in the parameter list. Modifying the parameters based on frequency in this manner can improve the efficiency of selecting the parameters.
Returning to step 516, if the intermediate server 108 determines that the parameter does not meet the aggregation threshold and the intermediate server 108 is not authorized to update the parameter list, the intermediate server 108 can remove or strip the parameter list from the request URL. For example, the intermediate server 108 can strip the encoding parameters to convert "www.example.com: 12345 interests: automobiles" to "www.example.com". Without the parameter list, the content server 110 selects a generic content item to return to the client device 102, as further described with respect to step 524.
The method 500 can include parsing the parameter list (step 520). In response to intermediary server 108 forwarding the request and the parameter list (or updated parameter list) to content server 110, content server 110 can receive and parse the parameters from the parameter list. The parameters can be encoded into a parameter list according to a pattern shared between the intermediary server 108 and the content server 110 that enables the content server 110 to parse the parameters from the parameter list.
The method 500 can include selecting content based on the parameters (step 522). Referring additionally to FIG. 2, in particular, the content selector 230 can use one or more parsed parameters to select the content item 228. The content selector 230 is capable of selecting the content item 228 based on the parameters. For example, the parameters can identify the size, type, and subject matter of the content item 228 to be selected. In some implementations, the content server 110 can use the parameters as keywords to find content items associated with the respective parameters. In some implementations, the content server 110 can select content items corresponding to each of the parsed parameters (e.g., the content server 110 searches for content items associated with parameters 1 and 2 and 3) or corresponding to one or more of the parsed parameters (e.g., the content server 110 searches for content items associated with parameters 1 or 2 or 3).
The method 500 can include selecting a generic content item (step 524). As described above, if the parameter list does not satisfy the aggregation threshold, intermediary server 108 may pass the request to content server 110 without the parameter list. Because the request does not include a parameter list, the content server 110 is unable to select a content item that is customized for the client device 102. The content server 110 is able to select a generic content item that is randomly selected by the polling system or by the auction system.
The method 500 can include transmitting content (step 526). The content items that can be selected based on the parameter list at step 522 or universally selected at step 524 can be transmitted back to the intermediary server 108. The intermediary server 108 can forward the content item to the client device 102. In some implementations, the content server 110 can transmit the content item directly (e.g., without passing through the intermediary server 108) to the client device 102.
The method 500 can include rendering the content (step 528). In response to client device 102 receiving the content (from content server 110 or intermediary server 108), client device 102 can render the content item into the content slot rendered at step 502.
Accordingly, a method for exchanging data in a networked system can include storing, by a web browser executed by a client device, a client device profile that can include a plurality of client device parameters and processor-executable instructions for generating a content request in a restricted environment of the client device. The restricted environment can be associated with a content server. The method can include transmitting, by a web browser, content item parameters to the restricted environment based on the web browser receiving a web page. The method can include executing, by the web browser, processor-executable instructions stored in the restricted environment to generate a parameter list based on the client device profile and content item parameters. The method can include transmitting the parameter list to a proxy server through a web browser. The method can include receiving, by the web browser, a content item to be rendered in a content slot of the web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
In some implementations, the method can include generating, by a web browser, a plurality of restricted environments. Each of the plurality of restricted environments can include a respective client device profile and a respective set of processor-executable instructions for generating the content request. Each of the plurality of restricted environments can be associated with a different content server. In some implementations, the method can include identifying, by a web browser, a content server associated with a content slot of the web page. The method can include selecting, by a web browser, a restricted environment from a plurality of restricted environments based on an identification of a content server associated with a content slot of the web page.
The content item parameter can include at least one of an identifier of the content slot, a request identifier, a base resource URL, or a URL of a web page. The method can include receiving, by the web browser, a second web page, which can include a second set of processor-executable instructions for generating the content request. The second set of processor-executable instructions can be provided by the content server. The method can include updating, by the web browser, processor-executable instructions stored in the restricted environment based on a second set of processor-executable instructions.
The method can include transmitting, by the web browser, a second content item parameter to the restricted environment based on the web browser receiving a second web page. The method can include generating, by the web browser executing processor-executable instructions stored in the restricted environment, a second parameter list based on the client device profile and second content item parameters. The method can include transmitting, by the web browser, the second parameter list to a proxy server. The method can include receiving, by the web browser, a generic content item to be rendered in a content slot of a second web page based on the proxy server determining that a second aggregate value of at least one parameter in a second parameter list does not satisfy a predetermined threshold.
In some implementations, the method can include selecting a portion of the client device parameters to include in the parameter list to satisfy the predetermined threshold. The content item can be selected based on at least one of the parameters in the parameter list. The method can include receiving the content item from the proxy server in response to the proxy server receiving the content item from the content server. The method can include: encoding the parameter list into URL parameters; generating a request URL by concatenating the URL parameter to a base URL included in the content item parameter; and transmitting the request URL to a proxy server.
According to at least one aspect of the present disclosure, a system for exchanging data in a networked environment can include a web browser executed by one or more processors of a client device. The Web browser is capable of maintaining one or more restricted environments. The Web browser can store a client device profile in a restricted environment, the client device profile can include a plurality of client device parameters and processor-executable instructions for generating a content request. The restricted environment can be associated with a content server. A Web browser may transmit content item parameters to the restricted environment based on the Web browser receiving a Web page. The Web browser is capable of generating a parameter list based on the client device profile and content item parameters based on execution of processor-executable instructions stored in the restricted environment. The Web browser can transmit the parameter list to a proxy server. The Web browser can receive a content item to be rendered in a content slot of a Web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
In some implementations, the web browser can generate multiple restricted environments. Each of the plurality of restricted environments can include a respective client device profile and a respective set of processor-executable instructions for generating the content request. Each of the plurality of restricted environments can be associated with a different content server. The Web browser can identify a content server associated with a content slot of the Web page. The Web browser can select the restricted environment from a plurality of restricted environments based on an identification of a content server associated with a content slot of the Web page.
In some implementations, the content item parameter can include at least one of an identifier of the content slot, a request identifier, a base resource URL, or a URL of a web page. The Web browser can receive a second Web page that can include a second set of processor-executable instructions for generating the content request. The second set of processor-executable instructions can be provided by the content server. The Web browser is capable of updating processor-executable instructions stored in the restricted environment based on the second set of processor-executable instructions.
In some implementations, the web browser can transmit a second content item parameter to the restricted environment based on the web browser receiving a second web page. The Web browser is capable of generating a second parameter list based on the client device profile and second content item parameters by executing processor-executable instructions stored in the restricted environment. The Web browser can transmit the second parameter list to the proxy server. The Web browser can receive a generic content item to be rendered in a content slot of a second Web page based on the proxy server determining that a second aggregate value of at least one parameter in a second parameter list does not satisfy a predetermined threshold.
In some implementations, the web browser can select a portion of the client device parameters to include in the parameter list to satisfy the predetermined threshold. The content item can be selected based on at least one parameter in the parameter list. The Web browser can receive the content item from the proxy server in response to the proxy server receiving the content item from the content server. The Web browser can encode the parameter list as a URL parameter, generate a request URL by concatenating the URL parameter to a basic URL included in the content item parameter, and transmit the request URL to the proxy server.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs (e.g., one or more modules of computer program instructions) encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal (e.g., a machine-generated electrical, optical, or electromagnetic signal) that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage media may be or be embodied in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage media may also be or be embodied in one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). Thus, computer storage media may be tangible.
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "client" or "server" includes all kinds of devices, apparatuses and machines for processing data, such as a programmable processor, a computer, a system on a chip or a plurality of devices or a combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., a Field Programmable Gate Array (FPGA) or an Application Specific Integrated Circuit (ASIC). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question (e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform execution environment, a virtual machine, or a combination of one or more of them). The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). The computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA or an ASIC.
Processors suitable for the execution of a computer program include, but are not limited to, general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices); magnetic disks (e.g., internal hard disks or removable disks); magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a Cathode Ray Tube (CRT), a Liquid Crystal Display (LCD), an Organic Light Emitting Diode (OLED), a Thin Film Transistor (TFT), a plasma, other flexible configurations, or any other monitor for displaying information to a user and a keyboard, a pointing device (e.g., a mouse, a trackball, or the like, or a touch screen, touch pad, or the like) through which a user can provide input to the computer. Other types of devices may be used to provide for interaction with a user as well; feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input. In addition, the computer may interact with the user by sending documents to and receiving documents from the device used by the user, by sending web pages to a web browser on the user's client device in response to requests received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), a middleware component (e.g., an application server), or a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. The communication network may include a Local Area Network (LAN) and a Wide Area Network (WAN), an interconnection network (e.g., the internet), and a peer-to-peer network (e.g., an ad hoc peer-to-peer network).
Where the systems and methods discussed herein collect or otherwise make use of personal information about a user, the user may be provided with the following opportunities: whether or not a program or feature collects user information (e.g., information about the user's social network, social behavior, profession, the user's preferences, or the user's location), or whether and/or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, some data may be anonymized in one or more ways prior to storage or use, so that personally identifiable information is deleted when generating the parameters. For example, the identity of the user may be anonymized such that personally identifiable information cannot be determined for the user, or the geographic location of the user may be generalized where location information (e.g., city, zip code, or state level) is obtained such that a particular location of the user cannot be determined. Thus, the user may control how information about him or her is collected and used by the content server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking or parallel processing may be utilized.
Claims (22)
1. A method for exchanging data in a networked system, comprising:
storing, by a web browser executed by a client device, a client device profile comprising a plurality of client device parameters and processor-executable instructions for generating a content request in a restricted environment of the client device, wherein the restricted environment is associated with a content server;
based on the web browser receiving a web page, transmitting, by the web browser, content item parameters to the restricted environment stored on the client device;
generating, by the web browser executing the processor-executable instructions stored in the restricted environment, a list of parameters based on the client device profile and the content item parameters;
transmitting, by the web browser, the parameter list to a proxy server; and
receiving, by the web browser, a content item to be rendered in a content slot of the web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
2. The method of claim 1, further comprising: generating, by the web browser, a plurality of restricted environments, each of the plurality of restricted environments comprising a respective client device profile and a respective set of processor-executable instructions for generating the content request, wherein each of the plurality of restricted environments is associated with a different content server.
3. The method of claim 1 or 2, further comprising:
identifying, by the web browser, a content server associated with a content slot of the web page; and
selecting, by the web browser, the restricted environment from a plurality of restricted environments based on an identification of the content server associated with a content slot of the web page.
4. The method of any preceding claim, wherein the content item parameters comprise at least one of an identifier of the content slot, a request identifier, a basic resource Uniform Resource Locator (URL), or a URL of the web page.
5. The method of any preceding claim, further comprising:
receiving, by the web browser, a second web page comprising a second set of processor-executable instructions for generating the content request, wherein the second set of processor-executable instructions is provided by the content server; and
updating, by the web browser, the processor-executable instructions stored in the restricted environment based on the second set of processor-executable instructions.
6. The method of any preceding claim, further comprising:
based on the web browser receiving a second web page, transmitting, by the web browser, a second content item parameter to the restricted environment;
generating, by the web browser, a second parameter list based on the client device profile and the second content item parameters executing the processor-executable instructions stored in the restricted environment;
transmitting, by the web browser, the second parameter list to the proxy server; and
receiving, by the web browser, a generic content item to be rendered in a content slot of the second web page based on the proxy server determining that a second aggregate value of at least one parameter in the second parameter list does not satisfy the predetermined threshold.
7. The method of any preceding claim, further comprising selecting a portion of client device parameters to be included in the parameter list to meet the predetermined threshold.
8. The method of any preceding claim, wherein the content item is selected based on at least one of the parameters in the parameter list.
9. A method according to any preceding claim, wherein the parameters of the parameter list are configured based on the frequency of occurrence of the parameters.
10. The method of any preceding claim, wherein receiving the content item comprises receiving the content item from the proxy server in response to the proxy server receiving the content item from the content server.
11. The method of any preceding claim, wherein transmitting the list of parameters to the proxy server further comprises:
encoding the parameter list into URL parameters;
generating a request URL by concatenating the URL parameter to a base URL included in the content item parameter; and
transmitting the request URL to the proxy server.
12. A system for exchanging data in a networked system, comprising:
a Web browser executed by one or more processors of a client device, the Web browser maintaining one or more restricted environments to:
storing a client device profile in a restricted environment, the client device profile comprising a plurality of client device parameters and processor-executable instructions for generating a content request, wherein the restricted environment is associated with a content server;
based on the web browser receiving a web page, transmitting content item parameters to the restricted environment stored on the client device;
generating a parameter list based on the client device profile and the content item parameters based on execution of the processor-executable instructions stored in the restricted environment;
transmitting the parameter list to a proxy server; and
receiving a content item to be rendered in a content slot of the web page based on the proxy server determining that an aggregate value of at least one parameter in the parameter list satisfies a predetermined threshold.
13. The system of claim 12, further comprising the web browser to generate a plurality of restricted environments, each of the plurality of restricted environments comprising a respective client device profile and a respective set of processor-executable instructions to generate the content request, wherein each of the plurality of restricted environments is associated with a different content server.
14. The system of claim 12 or 13, further comprising the web browser to:
identifying a content server associated with a content slot of the web page; and is
Selecting the restricted environment from a plurality of restricted environments based on an identification of the content server associated with a content slot of the web page.
15. The system of claim 12, 13 or 14, wherein the content item parameters comprise at least one of an identifier of the content slot, a request identifier, a basic resource URL, or a URL of the web page.
16. The system of any of claims 12 to 15, further comprising the web browser to:
receiving a second web page comprising a second set of processor-executable instructions for generating the content request, wherein the second set of processor-executable instructions is provided by the content server; and is
Updating the processor-executable instructions stored in the restricted environment based on the second set of processor-executable instructions.
17. The system of any of claims 12 to 16, further comprising the web browser to:
based on the web browser receiving a second web page, transmitting a second content item parameter to the restricted environment;
generating, by executing the processor-executable instructions stored in the restricted environment, a second parameter list based on the client device profile and the second content item parameters;
transmitting the second parameter list to the proxy server; and is
Receiving a generic content item to be rendered in a content slot of the second web page based on the proxy server determining that a second aggregate value of at least one parameter in the second parameter list does not satisfy the predetermined threshold.
18. The system of any of claims 12 to 17, further comprising the web browser for selecting a portion of client device parameters to include in the parameter list to satisfy the predetermined threshold.
19. The system of any of claims 12 to 18, wherein the content item is selected based on at least one of the parameters in the parameter list.
20. The system of any of claims 12 to 19, wherein the parameters of the parameter list are configured based on a frequency of occurrence of the parameters.
21. The system of any of claims 12 to 20, further comprising the web browser to receive the content item from the proxy server in response to the proxy server receiving the content item from the content server.
22. The system of any of claims 12 to 21, further comprising the web browser to:
encoding the parameter list into URL parameters;
generating a request URL by concatenating the URL parameter to a base URL included in the content item parameter; and is
Transmitting the request URL to the proxy server.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/027736 WO2020214156A1 (en) | 2019-04-16 | 2019-04-16 | Restricted environments for message generation in networked environments |
Publications (2)
Publication Number | Publication Date |
---|---|
CN112166590A true CN112166590A (en) | 2021-01-01 |
CN112166590B CN112166590B (en) | 2023-08-18 |
Family
ID=66380187
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980026394.9A Active CN112166590B (en) | 2019-04-16 | 2019-04-16 | Restricted environment for message generation in a networking environment |
Country Status (4)
Country | Link |
---|---|
US (1) | US20210240854A1 (en) |
EP (1) | EP3763108B1 (en) |
CN (1) | CN112166590B (en) |
WO (1) | WO2020214156A1 (en) |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11074369B2 (en) * | 2019-07-29 | 2021-07-27 | Google Llc | Privacy preserving remarketing |
US11281794B2 (en) * | 2019-09-26 | 2022-03-22 | Microsoft Technology Licensing, Llc | Fine grained access control on procedural language for databases based on accessed resources |
US11947499B2 (en) * | 2020-07-31 | 2024-04-02 | EMC IP Holding Company LLC | Peer-to-peer global namespace for storage system metadata federations |
US20220343018A1 (en) * | 2021-04-21 | 2022-10-27 | SafePorter LLC | Method for providing a privacy-enabled service to users |
US20230054501A1 (en) * | 2021-08-19 | 2023-02-23 | Twilio Inc. | Using ad-hoc stored procedures for online transaction processing |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP1233333A1 (en) * | 2001-02-19 | 2002-08-21 | Hewlett-Packard Company | Process for executing a downloadable service receiving restrictive access rights to al least one profile file |
US20040205650A1 (en) * | 2001-09-10 | 2004-10-14 | Lebin Cheng | Dynamic web content unfolding in wireless information gateways |
US20170032147A1 (en) * | 2015-07-30 | 2017-02-02 | International Business Machines Corporation | Obscuring user web usage patterns |
US20180218145A1 (en) * | 2017-01-27 | 2018-08-02 | Duo Security, Inc. | Systems and methods for access control to web applications and identification of web browsers |
Family Cites Families (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9537885B2 (en) * | 2013-12-02 | 2017-01-03 | At&T Intellectual Property I, L.P. | Secure browsing via a transparent network proxy |
US10027700B2 (en) * | 2015-02-20 | 2018-07-17 | Authentic8, Inc. | Secure analysis application for accessing web resources via URL forwarding |
-
2019
- 2019-04-16 WO PCT/US2019/027736 patent/WO2020214156A1/en unknown
- 2019-04-16 CN CN201980026394.9A patent/CN112166590B/en active Active
- 2019-04-16 US US17/042,785 patent/US20210240854A1/en active Pending
- 2019-04-16 EP EP19721478.6A patent/EP3763108B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP1233333A1 (en) * | 2001-02-19 | 2002-08-21 | Hewlett-Packard Company | Process for executing a downloadable service receiving restrictive access rights to al least one profile file |
US20040205650A1 (en) * | 2001-09-10 | 2004-10-14 | Lebin Cheng | Dynamic web content unfolding in wireless information gateways |
US20170032147A1 (en) * | 2015-07-30 | 2017-02-02 | International Business Machines Corporation | Obscuring user web usage patterns |
US20180218145A1 (en) * | 2017-01-27 | 2018-08-02 | Duo Security, Inc. | Systems and methods for access control to web applications and identification of web browsers |
Non-Patent Citations (2)
Title |
---|
M. EJAZ AHMED等: "QoS-aware device selection using user preferences for tasks in ubiquitous environments", 《2011 7TH INTERNATIONAL CONFERENCE ON EMERGING TECHNOLOGIES》 * |
吕佳;: "Web日志挖掘技术应用研究", 重庆师范大学学报(自然科学版), no. 04 * |
Also Published As
Publication number | Publication date |
---|---|
EP3763108B1 (en) | 2022-01-05 |
WO2020214156A1 (en) | 2020-10-22 |
CN112166590B (en) | 2023-08-18 |
EP3763108A1 (en) | 2021-01-13 |
US20210240854A1 (en) | 2021-08-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN112166590B (en) | Restricted environment for message generation in a networking environment | |
KR102390938B1 (en) | A domain-specific browser identifier that replaces browser cookies | |
US11711436B2 (en) | Aggregated conversion measurement | |
JP7301223B2 (en) | Privacy-preserving data collection and analysis | |
JP7015400B2 (en) | Self-authentication domain-specific browser identifier |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |