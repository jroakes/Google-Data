US8893014B1 - Deferred loading of a web page - Google Patents
Deferred loading of a web page Download PDFInfo
- Publication number
- US8893014B1 US8893014B1 US13/536,950 US201213536950A US8893014B1 US 8893014 B1 US8893014 B1 US 8893014B1 US 201213536950 A US201213536950 A US 201213536950A US 8893014 B1 US8893014 B1 US 8893014B1
- Authority
- US
- United States
- Prior art keywords
- user
- user interface
- web page
- loading
- interface component
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/451—Execution arrangements for user interfaces
Definitions
- the specification relates to a system and method for determining a loading of components of a web page.
- the specification relates to loading different user interface components of a web page based on static content and user behavior.
- the specification describes a system and method for deferring the loading of user interface components (referred hereafter as “UI components”) of a web page.
- a processing module receives data describing user activities and generates user behavior data for a user in a social network.
- a component engine generates the data for loading different UI components of the web page.
- a user behavior module receives the user behavior data and determines an order in which each UI component of the web page is loaded.
- a loading engine transmits data to a user's browser for loading a static version of the web page and then loads the different UI components according to the order.
- the specification describes a computer-implemented method for determining a loading of a web page comprising receiving, using the one or more computing devices, a first call from a browser for loading a first and a second user interface component of the web page, determining, using one or more computing devices, a user in a social network based on the first call, receiving, using the one or more computing devices, user behavior data associated with the user, the user behavior data including a frequency of the user interacting with each user interface component, determining, using the one or more computing devices, a higher priority for loading the first user interface component than the second user interface component based at least in part on the received user behavior data associated with the user and transmitting, using the one or more computing devices, data for loading the first user interface component before transmitting data for loading the second user interface component.
- FIG. 1 is a high-level block diagram illustrating one embodiment of a system for deferring the loading of components of a web page.
- FIG. 2A is a block diagram illustrating one embodiment of hardware implementing the functionality of deferring the loading of components of a web page.
- FIG. 2B is a block diagram illustrating one embodiment of a deployment manager.
- FIG. 3 is a graphic representation of a user interface for presenting UI components of a web page at a deferred time according to one embodiment.
- FIGS. 4A and 4B are flow diagrams of one embodiment of a method for deferring the loading of components of a web page.
- Embodiments herein relate to deferred loading of components of a web page.
- embodiments involve loading different UI components of the web page depending upon a user's browsing behavior.
- a webpage in the browser includes (1) inline content on the base HyperText Markup Language (HTML) page; and (2) resources referenced in the base HTML page that are fetched additionally.
- the base HTML page can include multiple types of programming languages, such as Cascading Style Sheet (CSS), HTML and inline JavaScript.
- the additional resources can include images and deferred JavaScript files.
- a deployment manager serves the content for the web page in three stages: (1) serving of the base HTML page entities; (2) serving of the images; and (3) serving of deferred JavaScript files.
- a deployment manager includes a component engine, a user behavior module and a loading engine.
- the component engine generates the data for loading the different UI components.
- the user behavior module receives user behavior data and determines an order in which each UI component should be loaded.
- the loading engine transmits data to a user's browser for loading a static version of the web page from a cache and transmits instructions for loading different UI components in response to receiving a call from the browser. For example, when generating a user profile page for a user in a social network, the loading engine instructs the browser to first load UI components that include the user's personal data such as a notification component that indicates a number of notifications for the user. Next, the browser loads UI components that are less frequently accessed by the user.
- a first user and a second user want to view a web page of an online store.
- the first user is a customer who always searches products in a merchandise list on the web page.
- the user behavior module 205 determines a high priority for loading the merchandise list when the web page of the online store is loaded for the first user.
- the second user is a vendor who sells products on the online store. Rather than checking the merchandise list, the second user more frequently checks the statistical information about inventory or product selling such as a number of a specific products that were sold, top-selling products, sold-out products, etc. In this case, the user behavior module 205 determines that an icon showing the statistical information should be loaded before the merchandise list when the web page of the online store is loaded for the second user.
- the user behavior module determines the order for loading UI components based on a frequency that a user interacts with the UI components on the web page and determines a priority for loading the UI components based at least in part on the frequency. If the user frequently interacts with a UI component, the user behavior module determines a higher priority for loading that UI component than UI components that are less frequently accessed. In another embodiment, the user behavior module also determines a priority for loading UI components based on experimental running conditions.
- FIG. 1 illustrates a block diagram of a system 100 for deferring the loading of components of a web page according to one embodiment.
- the illustrated system 100 for deferring the loading of components of the web page includes user devices 115 a . . . 115 n that are accessed by users 125 a . . . 125 n and a control server 101 .
- these entities are communicatively coupled via a network 113 .
- a letter after a reference number for example, “ 115 a ” is a reference to the element having that particular reference number.
- a reference number in the text without a following letter, for example, “ 115 ” is a general reference to any or all instances of the element bearing that reference number. Although only two devices are illustrated, persons of ordinary skill in the art will recognize that any number of user devices 115 n is available to any number of users 125 n.
- the control server 101 may be a hardware server device.
- the control server 101 is communicatively coupled to the network 113 via signal line 102 .
- the control server 101 comprises, among other things, a deployment manager 103 and a storage device 105 .
- the deployment manager 103 is code and routines for determining how to load a web page for a user 125 a . . . 125 n .
- the deployment manager 103 first transmits data for displaying UI components that include the user's personal data such as a notification component that indicates a number of notifications for the user.
- the deployment manager 103 determines a priority for instructing the browser to load each UI component based on user behavior data associated with a user, in particular, a frequency that the user interacts with a UI component on the web page.
- the deployment manager 103 determines a higher priority for the browser to load data for that UI component than UI components that are less frequently accessed.
- the UI component includes invisible service code that is used to enhance the user's experience in interacting with the web page.
- the deployment manager 103 also determines a priority for the browser to load UI components based on experimental running conditions.
- the deployment manager 103 collects user behavior data for a user in a social network, determines an order in which each UI component of a web page is loaded based at least in part on the user behavior data and instructs the browser to load the different UI components of the web page for the user according to the order.
- the deployment manager 103 is described in more detail below with reference to FIG. 2B .
- the storage 105 may be a non-volatile memory device or similar persistent storage media for storing instructions and/or data for deferring the loading of UI components of a web page.
- the storage 105 stores a set of scripts for loading a UI component.
- the storage 105 is communicatively coupled to the deployment manager 103 .
- the network 113 can be a conventional type, wired or wireless, and may have any number of configurations such as a star configuration, token ring configuration or other configurations known to those skilled in the art. Furthermore, the network 113 may comprise a local area network (LAN), a wide area network (WAN) (e.g., the Internet), and/or any other interconnected data path across which multiple devices may communicate. In yet another embodiment, the network 113 may be a peer-to-peer network. The network 113 may also be coupled to or includes portions of a telecommunications network for sending data in a variety of different communication protocols. In yet another embodiment, the network 113 includes Bluetooth communication networks or a cellular communications network for sending and receiving data such as via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, WAP, email, etc.
- SMS short messaging service
- MMS multimedia messaging service
- HTTP hypertext transfer protocol
- Each user device 115 a . . . 115 n can be a computing device, for example, a laptop computer, a desktop computer, a tablet computer, a mobile telephone, a personal digital assistant (PDA), a mobile email device, a portable game player, a portable music player, a television with one or more processors embedded therein or coupled thereto or any other electronic device capable of accessing a network.
- the system 100 comprises a combination of different types of user devices 115 a . . . 115 n.
- the user device 115 a is communicatively coupled to the network 113 via signal line 104 a .
- the user 125 a interacts with the user device 115 a .
- the user device 115 a comprises, among other things, a browser 117 a .
- the user device 115 n is communicatively coupled to the network 113 via signal line 104 n .
- the user 125 n interacts with the user device 115 n .
- the user device 115 n comprises, among other things, a browser 117 n.
- the browser 117 a . . . 117 n is code and routines stored in a memory of the user device 115 a . . . 115 n and executed by a processor of the user device 115 a . . . 115 n .
- a browser 117 of the user devices 115 a . . . 115 n loads a web page and presents the loaded web page to the users 125 a . . . 125 n .
- the browser 117 presents a graphical user interface (GUI) to a user and allows the user to input information via the GUI.
- GUI graphical user interface
- FIG. 2A is a block diagram of a control server 101 that includes a processor 235 , memory 237 , storage 105 , and a communication unit 239 .
- the processor 235 comprises some or all of an arithmetic logic unit, a microprocessor, a general purpose controller or some other processor array to perform computations and provide electronic display signals to a display device.
- the processor 235 is coupled to the bus 220 for communication with the other components via signal line 236 .
- Processor 235 processes data signals and may comprise various computing architectures including a complex instruction set computer (CISC) architecture, a reduced instruction set computer (RISC) architecture, or an architecture implementing a combination of instruction sets. Although only a single processor is shown in FIG. 2A , multiple processors may be included.
- the processing capability may be limited to supporting the display of images and the capture and transmission of images. The processing capability might be enough to perform more complex tasks, including various types of feature extraction and sampling. It will be obvious to one skilled in the art that other processors, operating systems, sensors, displays and physical configurations are possible.
- the memory 237 stores instructions and/or data that may be executed by processor 235 .
- the memory 237 includes the deployment manager 103 .
- the memory 237 is coupled to the bus 220 for communication with the other components via signal line 238 .
- the instructions and/or data may comprise code for performing any and/or all of the techniques described herein.
- the memory 237 may be a dynamic random access memory (DRAM) device, a static random access memory (SRAM) device, flash memory or some other memory device known in the art.
- DRAM dynamic random access memory
- SRAM static random access memory
- the memory 237 also includes a non-volatile memory or similar permanent storage device and media such as a hard disk drive, a floppy disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
- a non-volatile memory or similar permanent storage device and media such as a hard disk drive, a floppy disk drive, a CD-ROM device, a DVD-ROM device, a DVD-RAM device, a DVD-RW device, a flash memory device, or some other mass storage device known in the art for storing information on a more permanent basis.
- the communication unit 239 transmits and receives data to and from the control server 101 .
- the communication unit 239 is coupled to the bus 220 via signal line 240 .
- the communication unit 239 includes a port for direct physical connection to the network 113 or to another communication channel.
- the communication unit 239 includes a USB, SD, CAT-5 or similar port for wired communication with the user device 115 .
- the communication unit 239 includes a wireless transceiver for exchanging data with the user device 115 or any other communication channel using one or more wireless communication methods, such as IEEE 802.11, IEEE 802.16, BLUETOOTH® or another suitable wireless communication method.
- the communication unit 239 includes a cellular communications transceiver for sending and receiving data over a cellular communications network such as via short messaging service (SMS), multimedia messaging service (MMS), hypertext transfer protocol (HTTP), direct data connection, WAP, e-mail or another suitable type of electronic communication.
- SMS short messaging service
- MMS multimedia messaging service
- HTTP hypertext transfer protocol
- WAP direct data connection
- e-mail e-mail
- the communication unit 239 includes a wired port and a wireless transceiver.
- the communication unit 239 also provides other conventional connections to the network for distribution of files and/or media objects using standard network protocols such as TCP/IP, HTTP, HTTPS and SMTP as will be understood to those skilled in the art.
- the deployment manager 103 comprises a processing module 201 , a social network engine 202 , a component engine 203 , a user behavior module 205 and a loading engine 209 that communicate over the software communication mechanism 221 .
- Software communication mechanism 221 may be an object bus (such as CORBA), direct socket communication (such as TCP/IP sockets) among software modules, remote procedure calls, UDP broadcasts and receipts, HTTP connections, function or procedure calls, etc. Further, any or all of the communication could be secure (SSH, HTTPS, etc).
- the software communication can be implemented on any underlying hardware, such as a network, the Internet, a bus 220 , a combination thereof, etc.
- the processing module 201 includes hardware and/or software logic for receiving data describing user activities and generating user behavior data for a user in a social network based on the received data.
- the processing module 201 is a set of instructions executable by the processor 235 to provide the functionality described below for generating the user behavior data.
- the processing module 201 is stored in the memory 237 of the control server 101 and is accessible and executable by the processor 235 . In either embodiment, the processing module 201 is adapted for cooperation and communication with the processor 235 and other components of the control server 101 via the software communication mechanism 221 .
- the processing module 201 receives user behavior data associated with a user interacting with a social network from the user device 115 .
- the user behavior data includes, for example, the length of time that a user is present for each session of interacting with a social network application, the items on the web page that the user selected or hovered over, search terms, sharing, rating and other types of interactions in the social network.
- the processing module 201 processes user behavior data on searching that includes a number of searches sent by a user for displaying an image, a number of images received by the user in response to searching for an image and a number of selections made by the user in response to receiving the images.
- the user behavior data includes user preferences determined based at least in part on different types of interactions.
- the processing module 201 generates user behavior data including user interests, preferred languages, etc.
- the processing module 201 processes user behavior data that includes information about how a user accesses a web page.
- the user behavior data includes a frequency of a user interacting with each user interface (UI) component of a web page.
- the UI component of the web page includes, for example, text or an icon on the web page, and will be described in more detail below with reference to the component engine 203 .
- the processing module 201 processes user behavior data indicating that, when a user accesses an electronic messaging web page, the user frequently selects an inbox icon to check incoming emails and rarely selects a setting icon to change the configuration of the electronic messaging web page.
- the processing module 201 receives data from user inputs and actions across a range of data sources (e.g., web search data, social activity data, etc.) and organizes the received data to generate user behavior data associated with a user. For example, the processing module 201 collects navigational information from a user's browser history, identifies a set of navigational information that describes a user accessing a web page, summarizes the set of navigational information such as counting the times the user selected a UI component of the web page and computes a frequency of the user selecting the UI component.
- data sources e.g., web search data, social activity data, etc.
- the processing module 201 collects navigational information from a user's browser history, identifies a set of navigational information that describes a user accessing a web page, summarizes the set of navigational information such as counting the times the user selected a UI component of the web page and computes a frequency of the user selecting the UI component.
- the processing module 201 extracts features from the user behavior data to process metrics associated with the user behavior data. For example, the processing module 201 receives information about how long a user's mouse was positioned over a link. The processing module 201 compares the time that the mouse was positioned over the link to a threshold period of time. Regardless of a user selecting the link or not, a time positioned over the link greater than the threshold period of time suggests that the user was interested in the link. The processing module 201 determines that the user prefers this link rather than other links and generates the user behavior data to reflect this preference.
- the processing module 201 determines that the link is interesting to the user and takes this interest into account when processing the metrics of the user behavior data.
- the processing module 201 sends the user behavior data to the user behavior module 205 . In another embodiment, the processing module 201 stores the user behavior data on the storage 105 .
- the social network engine 202 includes hardware and/or software logic for generating a social network, registering users and managing interactions in the social network.
- the social network engine 202 is a set of instructions executable by the processor 235 to provide the functionality described below for managing the social network.
- the social network engine 202 is stored in the memory 237 of the control server 101 and is accessible and executable by the processor 235
- social network as used herein encompasses its plain and ordinary meaning, including, but not limited to various types of social structures where the users are connected by a common feature.
- the common feature includes friendship, family, work, an interest, etc.
- the common features are provided by the social network, for example, explicitly-defined relationships and relationships implied by social connections with other users, where the relationships are defined in a social graph.
- the social graph is a mapping of users in a social network and how they are related to each other.
- the social network engine 202 is stored on a separate server than the deployment manager 103 .
- the social network engine 202 receives information for registering the user, generates a user profile and maintains user relationships with the social graph.
- the social network engine 202 generates a social network where users post content, images, comment, share content, videos, etc.
- the social network engine 202 generates a messaging environment where users communicate electronically with each other and are connected through their messaging contacts.
- the social network engine 202 instructs the component engine 203 to generate the graphical images and code for displaying the social network once it is rendered by the browser 117 on the user device 115 .
- the component engine 203 includes hardware and/or software logic for generating the graphical data for displaying the web page and instructions for loading different UI components of a web page.
- the component engine 203 is a set of instructions executable by the processor 235 to provide the functionality described below for generating the graphical data for displaying the web page and instructions for loading the different UI components of the web page.
- the component engine 203 is stored in the memory 237 of the control server 101 and is accessible and executable by the processor 235 . In either embodiment, the component engine 203 is adapted for cooperation and communication with the processor 235 and other components of the control server 101 via the software communication mechanism 221 .
- UI component as used herein encompasses its plain and ordinary meaning including, but not limited to, an element that is part of a web page.
- the UI component includes a visual element of the web page such as a word, an icon, an image, a link, a title, text, etc.
- the UI component includes an element that is visually imperceptible to a user.
- the UI component is a pixel on a blank page that is used as a background of a web page.
- a UI component is used to cover a specific application need.
- a UI component of a web page is used to publish a chart on the web page.
- the component engine 203 receives instructions to generate graphical data for displaying a web page from the social network engine 202 and generates a set of scripts for loading the UI components of a web page.
- Each UI component is associated with at least one independent script.
- the component engine 203 generates a first script of static content (e.g., an HTML script) for loading a basic outline of a web page such as a title, a menu, etc. and generates a second script of active content (e.g., a JavaScript application) for loading a dynamic UI component such as a counter that indicates the number of people that visited the web page by the loading time.
- a first script of static content e.g., an HTML script
- active content e.g., a JavaScript application
- the component engine 203 generates static content that includes static images and deferred JavaScript files so that the same file can be served at a given time to a large number of users of a category without customizing the physical content for each request.
- the component engine 203 generates a deferred JavaScript file that is composed of modules, each of which can be enabled or disabled, and which can be initialized with data that can be variable for each base page rendering. Data for initializing a module, or enabling or disabling a module, is rendered on the base page as part of inline JavaScript on the base HTML page. The content can be varied for each base page rendering.
- the component engine 203 also organizes the inline JavaScript into modules that can be related one-to-one with modules in the deferred JavaScript file.
- the rendering of the inline JavaScript can be configured to include various combinations of inline modules according to the need of the module's functionality for the user's content for which it is being delivered.
- Inline JavaScript modules associated to deferred modules that they depend on for implementation support. So the selection of inline JavaScript modules to include in a given rendering helps determine what deferred JavaScript files containing the deferred modules are to be loaded to support the page.
- the component engine 203 generates inline content in a way that can be integrated into a wide variety of services provided by the component engine 203 .
- the component engine 203 generates inline components as a set of pre-rendered content pieces that are embedded into the web page output stream.
- the component engine 203 generates reusable templates for the content pieces and receives content from the social network engine 202 to fill the templates and embeds the results in the web page output stream.
- the component engine 203 is configured to integrate into a wide variety of host frontends in a way that prevents interference with the primary functionality of the host frontend.
- host frontends may have their own set of deferred content, for example images and JavaScript, fetched separately.
- One goal is therefore to avoid competing for browser resources, such as network connections and JavaScript execution load. This is accomplished by waiting before the deferred JavaScript is loaded.
- the component engine 203 generates parameters for loading the UI components of the web page. For example, the component engine 203 generates parameters for different functions that are embedded in a set of scripts for loading different UI components. In yet another embodiment, the component engine 203 generates other data structures for loading the UI components of the web page. For example, the component engine 203 generates a data package as a placeholder to include every script that will be loaded and executed at a deferred time.
- the component engine 203 stores the data for loading the UI components of a web page on the storage 105 . In another embodiment, the component engine 203 transmits the data for loading the UI components of the web page to the loading engine 209 . In yet another embodiment, the component engine 203 receives a call for updating a UI component of the web page and transmits the updated data associated with the UI component of the web page to the loading engine 209 .
- the user behavior module 205 includes hardware and/or software logic for receiving user behavior data associated with the social network and for determining an order in which each UI component of a web page is loaded.
- the user behavior module 205 is a set of instructions executable by the processor 235 to provide the functionality described below for determining the order in which each UI component is loaded.
- the user behavior module 205 is stored in the memory 237 of the control server 101 and is accessible and executable by the processor 235 . In either embodiment, the user behavior module 205 is adapted for cooperation and communication with the processor 235 and other components of the control server 101 via the software communication mechanism 221 .
- the user behavior module 205 determines an order for loading each UI component of a web page. When different UI components are loaded at different times according to the order determined for a user, the potential loading latency caused by simultaneous loading of an entire web page is reduced and this improves the user's website experience. In addition, the user behavior module 205 determines a user-specific loading order for each user who requests the loading of a web page.
- the user behavior module 205 receives user behavior data associated with a user from the user device 115 via the processing module 201 and determines an order in which each UI component of a web page is loaded based at least in part on the user behavior data.
- the user behavior data associated with the user includes at least a frequency that the user interacts with each UI component of the web page.
- the user behavior module 205 determines a high priority for loading a UI component if the user behavior module 205 receives a high frequency of the user interacting with the UI component.
- the user behavior module 205 determines an order for loading the first UI component before the second UI component. For example, when a user requests that the browser 117 running on a user device 115 load a messaging web page, the user behavior module 205 determines an order that allows a number of electronic messages (e.g. emails) to be loaded on the web page before a contact list. The user frequently clicks on the number to check incoming emails. On the other hand, the user knows who may be on his or her contact list and therefore seldom checks the contact list.
- a number of electronic messages e.g. emails
- the user behavior module 205 uses the user behavior data associated with a user to determine a user-specific order. This personalized order allows each UI component of a web page to be personalized for each user.
- the identity of the user is determined before the user behavior module 205 determines the order for displaying the UI components. The identity is determined in a variety of ways, including through user logins and cookies.
- the user behavior module 205 takes into account attributes other than the frequency information in the user behavior data to determine the order for loading the UI components of a web page. For example, the user behavior module 205 determines that images and text in Chinese should be loaded before English components when loading a user profile page for a user in a social network because the user behavior data associated with the user indicates that the user's native language is Chinese.
- the user behavior module 205 also determines a priority for loading a UI component based on experimental running conditions. For example, the social network engine 202 introduces a new feature in the social network, such as a banner or a widget. The user behavior module 205 gives priority to loading the new feature to make it readily available to the users in order to collect metrics about the new feature. In some embodiments, the user behavior module 205 predicts which kinds of users will find a new feature interesting and the new feature is only disclosed to those users. For example, a new calendar widget appears on the web page of users that frequently use a separate calendar program associated with the social network.
- the user behavior module 205 determines an order for first loading a static version of a web page and then loading other UI components of the web page.
- a static version of a web page serves a minimal amount of static data of the web page and is presented to a user exactly as it is stored.
- a static version of a user profile page for a user in a social network includes unchanging UI components such as a menu bar, a navigation bar, standard text and other components formatted using a template.
- the static version of the web page also includes personal data of a user such as the user's name, photo, welcome messages specific for the user, etc.
- the user behavior module 205 instructs the browser 117 to first load a static version of the web page because this minimal amount of static data can be loaded with the least latency in terms of avoiding network overload.
- the user behavior module 205 determines the order for loading other UI components of the web page based at least in part on user behavior data associated with the user as described above.
- the loading engine 209 includes hardware and/or software logic for loading different UI components of a web page for a user.
- the loading engine 209 is a set of instructions executable by the processor 235 to provide the functionality described below for loading the UI components of the web page for the user.
- the loading engine 209 is stored in the memory 237 of the control server 101 and is accessible and executable by the processor 235 . In either embodiment, the loading engine 209 is adapted for cooperation and communication with the processor 235 and other components of the control server 101 via the software communication mechanism 221 .
- the loading engine 209 transmits data to a user's browser 117 for loading a static version of a web page and then for loading different UI components of the web page.
- the loading engine 209 identifies a user who requests the loading of a web page and transmits a static version of the web page for caching to the user's browser. For example, when generating a user profile page for a user in a social network, the loading engine 209 first transmits data for displaying an outline of the user profile page and user's personal data such as a name for the user. The loading engine 209 also prepopulates and transmits data associated with different UI components of the web page.
- the loading engine 209 prepopulates data saved or cached from a previous loading of the web page. For example, the loading engine 209 prepopulates and transmits data for displaying a notification component on a user's profile page.
- the notification component contains a number that indicates how many notifications the user had in the previous loading of the user profile page.
- the loading engine 209 transmits data for loading the static version of the web page and the prepopulated data.
- the loading engine 209 transmits the UI components of the web page in response to receiving a first call from a user's browser.
- the first call is a communication message (e.g., a ping command) automatically generated by the browser at a predetermined time interval.
- the first call from the browser triggers the user behavior module 205 to retrieve user behavior data associated with the user and determine an order to load the UI components of the web page based at least in part on the user behavior data.
- the loading engine 209 receives the order from the user behavior module 205 , retrieves data for loading UI components of the web page from the component engine 203 and determines to load a first UI component before a second UI component. In some embodiments, if the loading engine 209 receives an order indicating that the priority for loading a first UI component of a web page is higher than loading a second UI component of the web page, the loading engine 209 transmits data for loading the first UI component before transmitting data for loading the second UI component. As a result, the browser loads the first UI component before the second UI component for the user.
- the loading engine 209 transmits data for displaying a notification component that indicates a current number of notifications for the user before transmitting data for displaying a UI component indicating a title change of the web page because the user accesses the notification component more frequently than the title change.
- the loading engine 209 updates a UI component of the web page in response to receiving a second call initiated by the user.
- the second call is received responsive to a user action such as a mouse hover-over, a button clicking, etc.
- the second call initiated by the user triggers the component engine 203 to generate updated data for loading a UI component.
- the loading engine 209 retrieves the updated data associated with the UI component and transmits the updated data for displaying the updated UI component to the user. For example, a user hovers over a notification component of a user profile page and sends out a second call to notify updating the notification component.
- the notification component indicates a number of notifications that the user has.
- the loading engine 209 Responsive to receiving the second call, the loading engine 209 transmits the updated data associated with the notification component to display the updated number of notifications for the user. In another embodiment, the loading engine 209 also transmits updated data associated with a UI component based at least in part on experimental running conditions.
- the loading engine 209 instructs the user's browser to store the updated data associated with a UI component as prepopulated data.
- the loading engine 209 may first prepopulate the stored data for the UI component.
- the user interface 300 includes a window 302 having a number of UI components including a menu bar 304 , a notification component 306 and a display area 308 .
- the user interface 300 presents an email page for a user in a social network.
- the menu bar 304 and the display area 308 are first loaded and displayed to the user.
- the notification component 306 is prepopulated and transmitted from stored prepopulated data.
- the prepopulated data is stored in the browser cache as a previous loading of the messaging web page.
- a number 3 in the notification component 306 indicates that there were three unread notifications when the messaging web page was loaded for the user the last time (not shown).
- a call repeatedly and automatically generated from the user's browser notifies the loading of the notification component 306 after the loading of prepopulated data. Responsive to receiving the call, a number “2” in the notification component 306 indicates that there are two unread notifications for the user when the user currently requests the email page. The deferred loading of the notification component 306 is useful to reduce an overall loading latency.
- FIGS. 4A and 4B are flow diagrams that illustrate one embodiment of the methods for deferring the loading of UI components of a web page.
- a deployment manager 103 includes a processing module 201 , a social network engine 202 , a component engine 203 , a user behavior module 205 and a loading engine 209 .
- the loading engine 209 transmits 402 a static version of the web page associated with a social network for caching to a browser 117 on a user device 115 .
- the loading engine 209 when generating a user profile page for a user in a social network, the loading engine 209 first transmits data such as a menu, a title and user's personal data (e.g., a name) to the browser 117 .
- the social network was generated by the social network engine 202 .
- the loading engine 209 prepopulates and transmits 404 data associated with a previous loading of the webpage.
- the browser 117 accesses a cached snapshot for displaying a notification component on a user's profile page from the last time the user visited the web page.
- the loading engine 209 receives 406 a first call from the browser 117 for loading the UI components.
- the first call can be a communication message (e.g., a ping command) automatically generated by the browser at a predetermined time interval.
- the loading engine 209 determines 408 a user associated with the social network. In one embodiment, the loading engine 209 performs the determining step based on the first call from the browser. In another embodiment, the loading engine 209 performs the determining step independent of the browser call.
- the user behavior module 205 retrieves 410 user behavior data associated with the user from the processing module 201 .
- the user behavior data includes at least a frequency of the user interacting with each UI component of the web page.
- the user behavior module 205 determines 412 an order for loading different UI components of the web page based at least in part on the user behavior, such as frequency. For example, when the user behavior module 205 receives a higher frequency of a user interacting with a first UI component than a second UI component, the user behavior module 205 determines that the priority for loading the first UI component is higher than the priority for loading the second UI component.
- the order is further modified based on the experimental running condition of a component. For example, if the social network engine 202 is testing out a new feature, the new feature is loaded before other features because the administrator of the social network wants to maximize the amount of time that the new feature is present on the web page.
- the browser 117 determines 414 to load the first UI component before the second UI component according to the order.
- the component engine 203 generates the data for loading the first UI component.
- the data includes at least scripts, parameters and other data structures used for loading the first UI component of the web page.
- the loading engine 209 receives 416 a second call initiated by the user from the processing module 201 for updating the first UI component.
- the second call is received responsive to a user action such as a mouse hover-over, a button clicking, etc.
- the loading engine 209 transmits 418 the updated data associated with the first UI component.
- the loading engine 209 instructs 420 the browser to store the updated data associated with the first UI component as prepopulated data.
- the browser 117 retrieves the prepopulated data from the cache.
- modules, routines, features, attributes, methodologies and other aspects of the disclosure can be implemented as software, hardware, firmware or any combination of the three.
- a component an example of which is a module, of the specification is implemented as software
- the component can be implemented as a standalone program, as part of a larger program, as a plurality of separate programs, as a statically or dynamically linked library, as a kernel loadable module, as a device driver, and/or in every and any other way known now or in the future to those of ordinary skill in the art of computer programming.
- the disclosure is in no way limited to implementation in any specific programming language, or for any specific operating system or environment. Accordingly, the disclosure is intended to be illustrative, but not limiting, of the scope of the specification, which is set forth in the following claims.
- the present embodiment of the specification also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored in the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, and magnetic disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, flash memories including USB keys with non-volatile memory or any type of media suitable for storing electronic instructions, each coupled to a computer system bus.
- the specification can take the form of an entirely hardware embodiment, an entirely software embodiment or an embodiment containing both hardware and software elements.
- the specification is implemented in software, which includes but is not limited to firmware, resident software, microcode, etc.
- a computer-usable or computer-readable medium can be any apparatus that can contain, store, communicate, propagate, or transport the program for use by or in connection with the instruction execution system, apparatus, or device.
- a data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus.
- the memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.
- I/O devices including but not limited to keyboards, displays, pointing devices, etc.
- I/O controllers can be coupled to the system either directly or through intervening I/O controllers.
- Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks.
- Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters.
Abstract
Description
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/536,950 US8893014B1 (en) | 2012-06-28 | 2012-06-28 | Deferred loading of a web page |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/536,950 US8893014B1 (en) | 2012-06-28 | 2012-06-28 | Deferred loading of a web page |
Publications (1)
Publication Number | Publication Date |
---|---|
US8893014B1 true US8893014B1 (en) | 2014-11-18 |
Family
ID=51870302
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/536,950 Expired - Fee Related US8893014B1 (en) | 2012-06-28 | 2012-06-28 | Deferred loading of a web page |
Country Status (1)
Country | Link |
---|---|
US (1) | US8893014B1 (en) |
Cited By (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140074962A1 (en) * | 2012-09-13 | 2014-03-13 | Konica Minolta Inc. | Browser device, browser program, browser system, image forming apparatus, and non-transitory storage medium |
US20140310395A1 (en) * | 2013-04-12 | 2014-10-16 | Nternational Business Machines Corporation | User-Influenced Page Loading of Web Content |
US20140324571A1 (en) * | 2013-03-12 | 2014-10-30 | Tencent Technology (Shenzhen) Company Limited | System and method for selecting and rendering content |
US20150180733A1 (en) * | 2013-12-23 | 2015-06-25 | Yahoo! Inc. | Method and system for delivering web page content using edge server |
US9454618B1 (en) | 2015-09-11 | 2016-09-27 | International Business Machines Corporation | Intelligent rendering of webpages |
WO2017079207A1 (en) * | 2015-11-04 | 2017-05-11 | Microsoft Technology Licensing, Llc | Generating a deferrable data flow |
US9723056B1 (en) * | 2014-05-30 | 2017-08-01 | Amazon Technologies, Inc. | Adapting a page based on a client environment |
CN107315646A (en) * | 2016-04-27 | 2017-11-03 | 北京京东尚科信息技术有限公司 | Data flow control method and device between page assembly |
US9922006B1 (en) * | 2013-09-19 | 2018-03-20 | Amazon Technologies, Inc. | Conditional promotion through metadata-based priority hinting |
US10013500B1 (en) * | 2013-12-09 | 2018-07-03 | Amazon Technologies, Inc. | Behavior based optimization for content presentation |
US10521485B1 (en) * | 2014-10-20 | 2019-12-31 | Amazon Technologies, Inc. | Measuring page value |
CN112231606A (en) * | 2015-10-14 | 2021-01-15 | 创新先进技术有限公司 | Webpage processing method and device |
US10991030B2 (en) | 2017-09-22 | 2021-04-27 | International Business Machines Corporation | Rendering a list in chronological order |
CN113434149A (en) * | 2021-07-07 | 2021-09-24 | 腾讯科技（深圳）有限公司 | Application program generating and loading method, device and medium |
EP3866031A4 (en) * | 2018-10-18 | 2021-12-08 | Wangsu Science & Technology Co., Ltd. | Webpage loading method, intermediate server, and webpage loading system |
CN114745272A (en) * | 2020-12-23 | 2022-07-12 | 武汉斗鱼网络科技有限公司 | Method, server, medium, and apparatus for increasing application start speed |
US20230350969A1 (en) * | 2019-12-13 | 2023-11-02 | Prine Strategy Co., Ltd. | Automatic display control method for web content |
US20240004674A1 (en) * | 2022-06-29 | 2024-01-04 | Atlassian Pty Ltd. | Buffering and replaying user interaction event content received at a frontend application while asynchronously loading resources supporting a page from a backend application of a multiuser collaboration tool |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7286997B2 (en) * | 2002-05-07 | 2007-10-23 | Cembex Care Solutions, Llc | Internet-based, customizable clinical information system |
US20120110480A1 (en) * | 2010-10-31 | 2012-05-03 | Sap Portals Israel Ltd | Method and apparatus for rendering a web page |
-
2012
- 2012-06-28 US US13/536,950 patent/US8893014B1/en not_active Expired - Fee Related
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7286997B2 (en) * | 2002-05-07 | 2007-10-23 | Cembex Care Solutions, Llc | Internet-based, customizable clinical information system |
US20120110480A1 (en) * | 2010-10-31 | 2012-05-03 | Sap Portals Israel Ltd | Method and apparatus for rendering a web page |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140074962A1 (en) * | 2012-09-13 | 2014-03-13 | Konica Minolta Inc. | Browser device, browser program, browser system, image forming apparatus, and non-transitory storage medium |
US20140324571A1 (en) * | 2013-03-12 | 2014-10-30 | Tencent Technology (Shenzhen) Company Limited | System and method for selecting and rendering content |
US20140310395A1 (en) * | 2013-04-12 | 2014-10-16 | Nternational Business Machines Corporation | User-Influenced Page Loading of Web Content |
US9231996B2 (en) * | 2013-04-12 | 2016-01-05 | International Business Machines Corporation | User-influenced page loading of web content |
US9922006B1 (en) * | 2013-09-19 | 2018-03-20 | Amazon Technologies, Inc. | Conditional promotion through metadata-based priority hinting |
US10013500B1 (en) * | 2013-12-09 | 2018-07-03 | Amazon Technologies, Inc. | Behavior based optimization for content presentation |
US11194882B1 (en) * | 2013-12-09 | 2021-12-07 | Amazon Technologies, Inc. | Behavior based optimization for content presentation |
US20150180733A1 (en) * | 2013-12-23 | 2015-06-25 | Yahoo! Inc. | Method and system for delivering web page content using edge server |
US11252053B2 (en) | 2013-12-23 | 2022-02-15 | Verizon Patent And Licensing Inc. | Method and system for delivering web page content using edge server |
US10771357B2 (en) * | 2013-12-23 | 2020-09-08 | Oath Inc. | Method and system for delivering web page content using edge server |
US9723056B1 (en) * | 2014-05-30 | 2017-08-01 | Amazon Technologies, Inc. | Adapting a page based on a client environment |
US10521485B1 (en) * | 2014-10-20 | 2019-12-31 | Amazon Technologies, Inc. | Measuring page value |
US10082937B2 (en) | 2015-09-11 | 2018-09-25 | International Business Machines Corporation | Intelligent rendering of webpages |
US9703460B2 (en) | 2015-09-11 | 2017-07-11 | International Business Machines Corporation | Intelligent rendering of webpages |
US9454618B1 (en) | 2015-09-11 | 2016-09-27 | International Business Machines Corporation | Intelligent rendering of webpages |
US9582480B1 (en) | 2015-09-11 | 2017-02-28 | International Business Machines Corporation | Intelligent rendering of webpages |
CN112231606A (en) * | 2015-10-14 | 2021-01-15 | 创新先进技术有限公司 | Webpage processing method and device |
CN112231606B (en) * | 2015-10-14 | 2024-03-12 | 创新先进技术有限公司 | Webpage processing method and device |
WO2017079207A1 (en) * | 2015-11-04 | 2017-05-11 | Microsoft Technology Licensing, Llc | Generating a deferrable data flow |
CN108351888A (en) * | 2015-11-04 | 2018-07-31 | 微软技术许可有限责任公司 | Generation can postpone data flow |
US10608900B2 (en) | 2015-11-04 | 2020-03-31 | Microsoft Technology Licensing, Llc | Generating a deferrable data flow |
CN107315646A (en) * | 2016-04-27 | 2017-11-03 | 北京京东尚科信息技术有限公司 | Data flow control method and device between page assembly |
US10991030B2 (en) | 2017-09-22 | 2021-04-27 | International Business Machines Corporation | Rendering a list in chronological order |
EP3866031A4 (en) * | 2018-10-18 | 2021-12-08 | Wangsu Science & Technology Co., Ltd. | Webpage loading method, intermediate server, and webpage loading system |
US20230350969A1 (en) * | 2019-12-13 | 2023-11-02 | Prine Strategy Co., Ltd. | Automatic display control method for web content |
CN114745272A (en) * | 2020-12-23 | 2022-07-12 | 武汉斗鱼网络科技有限公司 | Method, server, medium, and apparatus for increasing application start speed |
CN114745272B (en) * | 2020-12-23 | 2023-09-15 | 武汉斗鱼网络科技有限公司 | Method, server, medium and device for improving starting speed of application program |
CN113434149A (en) * | 2021-07-07 | 2021-09-24 | 腾讯科技（深圳）有限公司 | Application program generating and loading method, device and medium |
CN113434149B (en) * | 2021-07-07 | 2023-09-08 | 腾讯科技（深圳）有限公司 | Application program generating and loading method, device and medium |
US20240004674A1 (en) * | 2022-06-29 | 2024-01-04 | Atlassian Pty Ltd. | Buffering and replaying user interaction event content received at a frontend application while asynchronously loading resources supporting a page from a backend application of a multiuser collaboration tool |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8893014B1 (en) | Deferred loading of a web page | |
US11615161B2 (en) | System and method for dynamically enabling customized web content and applications | |
US10091628B2 (en) | Message based application state and card sharing methods for user devices | |
US20120229473A1 (en) | Dynamic Animation in a Mobile Device | |
US20180011720A1 (en) | Embedding non-blocking help components in a display page using discovery drawer feature cues | |
US8949739B2 (en) | Creating and maintaining images of browsed documents | |
EP2507715B1 (en) | Communication channel between web application and process outside browser | |
US8479113B2 (en) | Apparatus, system and method for an icon driven tile bar in a graphical user interface | |
US8239772B2 (en) | Apparatus, system and method for a user profiled-based OS for mobile devices | |
US20130030922A1 (en) | System and method for syndicating a conversation | |
WO2017075515A1 (en) | Interactive icons with embedded functionality used in text messages | |
US9542365B1 (en) | Methods for generating e-mail message interfaces | |
CN103685528A (en) | Information displaying method and device | |
US9830304B1 (en) | Systems and methods for integrating dynamic content into electronic media | |
US20100058167A1 (en) | Displaying Subscribable Content | |
US9542668B2 (en) | Systems and methods for clustering electronic messages | |
US20100153884A1 (en) | Enhanced web toolbar | |
US20140012686A1 (en) | Systems and methods for providing message-enabled advertisements and content delivery | |
US20100023875A1 (en) | Automatic rendering of user interface elements | |
US11811718B2 (en) | System and method for generating and rendering intent-based actionable content using input interface | |
US20120233560A1 (en) | Method for managing widgets in an electronic device to improve the user experience of the device | |
US8386604B1 (en) | Assigning blame to web browser extensions and applications | |
US8924492B2 (en) | Method and system for generating recipients while composing electronic mails | |
US20110066935A1 (en) | Data file and rule driven synchronous or asynchronous document generation | |
US20130073582A1 (en) | Web search results with live data |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:AU, CAROLYN F.;TANSUWAN, JUSTIN J.;VENUGOPALAN, VENKAT;AND OTHERS;SIGNING DATES FROM 20120720 TO 20120918;REEL/FRAME:028996/0835 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20221118 |