CN110710206B - Method and apparatus for modifying scan order to limit scan distance - Google Patents
Method and apparatus for modifying scan order to limit scan distance Download PDFInfo
- Publication number
- CN110710206B CN110710206B CN201880037152.5A CN201880037152A CN110710206B CN 110710206 B CN110710206 B CN 110710206B CN 201880037152 A CN201880037152 A CN 201880037152A CN 110710206 B CN110710206 B CN 110710206B
- Authority
- CN
- China
- Prior art keywords
- coefficient
- scan
- scan order
- coefficients
- context
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/129—Scanning of coding units, e.g. zig-zag scan of transform coefficients or flexible macroblock ordering [FMO]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/124—Quantisation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/102—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or selection affected or controlled by the adaptive coding
- H04N19/13—Adaptive entropy coding, e.g. adaptive variable length coding [AVLC] or context adaptive binary arithmetic coding [CABAC]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/156—Availability of hardware or computational resources, e.g. encoding based on power-saving criteria
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/134—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the element, parameter or criterion affecting or controlling the adaptive coding
- H04N19/157—Assigned coding mode, i.e. the coding mode being predefined or preselected to be further used for selection of another element or parameter
- H04N19/159—Prediction type, e.g. intra-frame, inter-frame or bidirectional frame prediction
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/10—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding
- H04N19/169—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding
- H04N19/18—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using adaptive coding characterised by the coding unit, i.e. the structural portion or semantic portion of the video signal being the object or the subject of the adaptive coding the unit being a set of transform coefficients
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/42—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by implementation details or hardware specially adapted for video compression or decompression, e.g. dedicated software implementation
- H04N19/423—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by implementation details or hardware specially adapted for video compression or decompression, e.g. dedicated software implementation characterised by memory arrangements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/60—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding
- H04N19/61—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using transform coding in combination with predictive coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/80—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation
- H04N19/82—Details of filtering operations specially adapted for video compression, e.g. for pixel interpolation involving filtering within a prediction loop
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/85—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using pre-processing or post-processing specially adapted for video compression
- H04N19/86—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using pre-processing or post-processing specially adapted for video compression involving reduction of coding artifacts, e.g. of blockiness
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/90—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals using coding techniques not provided for in groups H04N19/10-H04N19/85, e.g. fractals
- H04N19/91—Entropy coding, e.g. variable length coding [VLC] or arithmetic coding
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N11/00—Colour television systems
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N7/00—Television systems
- H04N7/18—Closed-circuit television [CCTV] systems, i.e. systems in which the video signal is not broadcast
Abstract
A method for encoding a transform block of coefficients includes generating a new scan order from an original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, and encoding coefficients based on the new scan order. An apparatus for decoding a transform block of coefficients includes a memory and a processor. The memory includes instructions executable by the processor to identify an original scan order for encoding coefficients, generate a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, and decode the coefficients from the encoded bitstream based on the new scan order.
Description
Background
A digital video stream may represent video using a series of frames or still images. Digital video may be used for a variety of applications including, for example, video conferencing, high definition video entertainment, video advertising, or sharing user generated video. Digital video streams may contain large amounts of data and consume a large amount of computing or communication resources of a computing device to process, transmit, or store the video data. Various schemes have been proposed to reduce the amount of data in a video stream, including compression and other encoding techniques, and to reduce the complexity and cost of the hardware involved in the compression and encoding techniques.
Disclosure of Invention
An aspect of the disclosure is a method for encoding a transform block of coefficients. The method includes identifying an original scan order for encoding coefficients, generating a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, and encoding the coefficients based on the new scan order.
Another aspect is an apparatus for encoding a transform block of coefficients. The apparatus includes a memory and a processor. The memory includes instructions executable by the processor to identify an original scan order for encoding coefficients, generate a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, and encode the coefficients in the encoded bitstream based on the new scan order.
Yet another aspect is a device for decoding a transform block of coefficients. The apparatus includes a memory and a processor. The memory includes instructions executable by the processor to identify an original scan order for decoding coefficients, generate a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, and decode the coefficients from the encoded bitstream based on the new scan order.
These and other variations are described in further detail below.
Drawings
The description herein makes reference to the accompanying drawings wherein like reference numerals refer to like parts throughout the several views.
Fig. 1 is a schematic diagram of a video encoding and decoding system.
Fig. 2 is a block diagram of an example of a computing device that may implement a transmitting station or a receiving station.
Fig. 3 is a diagram of an example of a video stream to be encoded and subsequently decoded.
Fig. 4 is a block diagram of an encoder according to an embodiment of the present disclosure.
Fig. 5 is a block diagram of a decoder according to an embodiment of the present disclosure.
Fig. 6 is a block diagram of a representation of a portion of a frame according to an embodiment of the present disclosure.
Fig. 7 illustrates a diagram of an example of a transform block and an example of an entropy encoding scan order according to an embodiment of the present disclosure.
Fig. 8 is a flowchart of encoding using a context adaptive scan order for entropy encoding according to an embodiment of the present disclosure.
Fig. 9 is a flow diagram of identifying a context adaptive scan order for entropy encoding according to an embodiment of the present disclosure.
Fig. 10 shows a diagram of an example of an estimated non-zero coefficient probability matrix of a transform block, an example of a corresponding magnitude-based scan order, and an example of a corresponding context-adaptive scan order, according to an embodiment of the present disclosure.
Fig. 11 is a flowchart of decoding using a context adaptive scan order for entropy coding according to an embodiment of the present disclosure.
Fig. 12 is an exemplary diagram of a representation of a portion of a transform coefficient scan pattern for encoding and decoding using efficient context processing in arithmetic coding according to an embodiment of the present disclosure.
Fig. 13 is a flowchart of a process for encoding a quantized transform block of coefficients according to an embodiment of the present disclosure.
FIG. 14 is a graphical illustration of an example of a maximum number of coefficients that may be present in a queue according to an embodiment of the disclosure
DETAILED DESCRIPTION OF EMBODIMENT (S) OF INVENTION
Video compression schemes may include dividing each image or frame into smaller portions, such as blocks, and generating an output bitstream using techniques that limit the information contained in each block in the output. The encoded bitstream can be decoded to reconstruct the block and source images from limited information. Encoding the video stream may include entropy encoding of quantized transform coefficients of the quantized transform block.
Entropy coding is a lossless compression technique that may involve replacing bit patterns or symbols in the output data stream with tokens or codewords. In some implementations, tokens for a symbol may be determined based on context coefficients such as the coefficient immediately to the left of the current coefficient being encoded, the coefficient immediately above the current coefficient, or a combination of both. Other context coefficients may be used. The transform coefficients of the quantized transform block may be encoded according to a scan order. The scan order specifies the order in which the transform coefficients are traversed. The scan order tends to gather zero-valued coefficients at the end of the scan order. The cluster of zero-valued coefficients at the end of the scan order may be referred to as the zero-coefficient tail. The zero coefficient tail can be used to improve compression performance.
As described above, the coefficients of the quantized transform block may be traversed according to a scan order. The access (i.e., traversal) coefficients are then entropy encoded. Probability distributions for entropy encoding non-zero transform coefficients may be identified based on context. For example, entropy encoding of coefficients of a transform block may map a two-dimensional block of transform coefficients into a one-dimensional sequence (i.e., scan order). The scan order may be a hard-coded (i.e., predetermined) scan order. Examples of the predetermined scan order include a zigzag order and a column offset zigzag order. The selected scanning order depends on the type of transform applied to the transform block. For example, when applying a two-dimensional discrete cosine transform (2D-DCT), a zig-zag scan order may be selected. For example, when applying Asymmetric Discrete Sine Transform (ADST) -DCT combinatorial transform, a column-biased zig-zag scan order may be selected.
In some embodiments, the context-adaptive scan order used for entropy coding may be used to improve coding efficiency by generating the context-adaptive scan order. For example, the adaptive scan order may be a context-constrained non-zero probability adaptive scan order, wherein the positions of the transform coefficients in the context-adaptive scan order are based on the decreasing probability that the respective coefficients are non-zero coefficients.
Context-adaptive scan order may use, for example, topological ordering to rank (e.g., in descending, ascending, or other order) scan order positions based on the likelihood that they contain non-zero quantized transform coefficients. The resulting scan order may then be used for transform coefficient block coding for the next frame.
Generating the context adaptive scan order may comprise maintaining a correspondence between a transform coefficient and a corresponding context coefficient by assigning a higher context adaptive scan order position to the transform coefficient than the context coefficient, wherein the context coefficient may have a lower probability of being a non-zero coefficient. Context coefficients may be included in a context-adaptive scan order based on a defined scan order, such as a zig-zag scan order, or based on recursively or topologically assigning context-adaptive scan order positions to context coefficients. The context adaptive scan order may increase the scan distance between coefficients and their context neighbors. The scan distance of a coefficient may be defined as the maximum difference between the scan index of the coefficient and the scan index of the coefficient used as the context of the coefficient. The maximum scan distance of a scan order may be defined as the maximum scan distance of all coefficients using the scan order.
In some embodiments, the decoder may store each decoded coefficient of a block in a context coefficient register for decoding subsequent coefficients. The size of the context coefficient register may be a function of the size of the coefficient matrix used for encoding. For example, the coefficient matrix may be an N × M matrix, e.g. a 32 × 32 matrix, encoded using a non-consecutive coding order, such as the coding order partially shown in fig. 9, and the context coefficient register may comprise N × M coefficients, e.g. 1024(32 × 32 ═ 1024) coefficients. In some embodiments, each coefficient may be stored using B bits, such as 3 bits, and the size of the context coefficient register may be B × N × M bits, such as 3072 bits (1024 × 3 bits). This set of coefficient buffers may be referred to as a line buffer.
A hardware-implemented codec (i.e., an encoder and/or decoder) may use a line buffer to buffer decoded transform coefficients following a scan order. When encoding a current coefficient of a transform coefficient, a codec acquires the transform coefficient, which is used as context information of the current coefficient. To do this efficiently, it is desirable to cache the required context coefficients (i.e., context coefficients) in a line buffer. Thus, the length of the line buffer is bounded by the maximum scan distance of a given scan order (i.e., the minimum size that should be present). For hardware efficiency, it is desirable to keep the line buffers small.
Furthermore, to reduce implementation costs (e.g., the cost of a hardware codec), it is desirable to limit the size of the line buffers. However, as described above, the context adaptive scan order may increase the scan distance between coefficients and their context neighbors. Other scan orders may also have large scan distances. The large scan distance in turn results in an increase in the line buffer size, thereby increasing hardware implementation costs.
Embodiments of the present disclosure may generate a scan order that limits the scan distance to a maximum scan distance. The maximum scanning distance may be a predetermined scanning distance. For example, given a scan order, embodiments of the present disclosure may generate a new scan order from the scan order such that a maximum scan distance in the new scan order is defined by a particular (e.g., predetermined) value. Thus, the size of the line buffer can be limited and the hardware implementation optimized.
Fig. 1 is a schematic diagram of a video encoding and decoding system 100. Transmitting station 102 may be, for example, a computer having an internal configuration of hardware as described in fig. 2. However, other suitable implementations of transmitting station 102 are possible. For example, the processing of transmitting station 102 may be distributed among multiple devices.
In one example, the receiving station 106 may be a computer having an internal configuration of hardware as described in fig. 2. However, other suitable implementations of the receiving station 106 are possible. For example, the processing of the receiving station 106 may be distributed among multiple devices.
Other implementations of the video encoding and decoding system 100 are possible. For example, embodiments may omit network 104. In another embodiment, the video stream may be encoded and then stored for later transmission to the receiving station 106 or any other device having memory. In one embodiment, the receiving station 106 receives (e.g., via the network 104, a computer bus, and/or some communication path) the encoded video stream and stores the video stream for later decoding. In an example embodiment, the real-time transport protocol (RTP) is used to transmit encoded video over the network 104. In another embodiment, transport protocols other than RTP may be used, such as the hypertext transfer protocol (HTTP) -based video streaming protocol.
For example, when used in a video conferencing system, transmitting station 102 and/or receiving station 106 may include the capability to encode and decode video streams as described below. For example, the receiving station 106 may be a video conference participant that receives an encoded video bitstream from a video conference server (e.g., the transmitting station 102) for decoding and viewing, and further encodes and transmits its own video bitstream to the video conference server for decoding and viewing by other participants.
Fig. 2 is a block diagram of an example of a computing device 200 that may implement a transmitting station or a receiving station. For example, computing device 200 may implement one or both of transmitting station 102 and receiving station 106 of fig. 1. Computing device 200 may be in the form of a computing system including multiple computing devices, or in the form of a single computing device, such as a mobile phone, a tablet computer, a laptop computer, a notebook computer, a desktop computer, and so forth.
The CPU 202 in the computing device 200 may be a central processing unit. Alternatively, CPU 202 may be any other type of device, or devices, capable of manipulating or processing existing or later developed information. Although the disclosed embodiments may be implemented with a single processor (e.g., CPU 202) as shown, advantages in speed and efficiency may be realized using more than one processor.
In an embodiment, the memory 204 in the computing device 200 may be a Read Only Memory (ROM) device or a Random Access Memory (RAM) device. Any other suitable type of storage device may be used for memory 204. The memory 204 may include code and data 206 that are accessed by the CPU 202 using the bus 212. The memory 204 may also include an operating system 208 and application programs 210, the application programs 210 including at least one program that allows the CPU 202 to perform the methods described herein. For example, the application programs 210 may include applications 1 through N, which also include video coding applications that perform the methods described herein. The computing device 200 may also include secondary storage 214, and the secondary storage 214 may be, for example, a memory card for use with the mobile computing device 200. Because video communication sessions may contain a large amount of information, they may be stored in whole or in part in secondary storage 214 and loaded into memory 204 as needed for processing.
The computing device 200 may also include or be in communication with a sound sensing device 222, the sound sensing device 222 being, for example, a microphone or any other existing or later-developed sound sensing device that may sense sound in the vicinity of the computing device 200. The sound sensing device 222 can be positioned such that it is directed toward a user operating the computing device 200, and can be configured to receive sound, such as speech or other utterances, emitted by the user as the user operates the computing device 200.
Although fig. 2 depicts the CPU 202 and memory 204 of the computing device 200 as integrated into a single unit, other configurations may also be used. The operations of CPU 202 may be distributed over multiple machines (each machine having one or more of the processors), which may be coupled directly or across a local area network or other network. Memory 204 may be distributed across multiple machines, such as a network-based memory or memory in multiple machines that perform operations for computing device 200. Although described herein as a single bus, the bus 212 of the computing device 200 may be comprised of multiple buses. Further, secondary storage 214 may be directly coupled to other components of computing device 200 or may be accessible via a network and may comprise a single integrated unit, such as a memory card, or multiple units, such as multiple memory cards. Computing device 200 may thus be implemented in a variety of configurations.
Fig. 3 is a diagram of an example of a video stream 300 to be encoded and subsequently decoded. The video stream 300 includes a video sequence 302. At the next level, the video sequence 302 includes a plurality of adjacent frames 304. Although three frames are depicted as adjacent frames 304, the video sequence 302 may include any number of adjacent frames 304. The adjacent frames 304 may then be further subdivided into individual frames, such as frame 306. At the next level, the frame 306 may be divided into a series of slices 308 or planes. For example, the segment 308 may be a subset of frames that allow parallel processing. The segment 308 may also be a subset of a frame that may separate the video data into separate colors. For example, a frame 306 of color video data may include a luminance plane and two chrominance planes. The segments 308 may be sampled at different resolutions.
Regardless of whether frame 306 is divided into segments 308, frame 306 may be further subdivided into blocks 310, and blocks 310 may contain data corresponding to, for example, 16 × 16 pixels in frame 306. The block 310 may also be arranged to include data from one or more segments 308 of pixel data. The block 310 may also be any other suitable size, such as 4 × 4 pixels, 8 × 8 pixels, 16 × 8 pixels, 8 × 16 pixels, 16 × 16 pixels, or larger.
Fig. 4 is a block diagram of an encoder 400 according to an embodiment of the present disclosure. As described above, encoder 400 may be implemented in transmitting station 102, such as by providing a computer software program stored in a memory, e.g., memory 204. The computer software program may include machine instructions that, when executed by a processor such as CPU 202, cause transmitting station 102 to encode video data in the manner described herein. Encoder 400 may also be implemented as dedicated hardware included in, for example, transmitting station 102. The encoder 400 has the following stages for performing various functions in the forward path (shown by the solid connection lines) to produce an encoded or compressed bitstream 420 using the video stream 300 as input: an intra/inter prediction stage 402, a transform stage 404, a quantization stage 406, and an entropy coding stage 408. The encoder 400 may also include a reconstruction path (shown by dashed connecting lines) to reconstruct the frame used to encode future blocks. In fig. 4, the encoder 400 has the following stages for performing various functions in the reconstruction path: a dequantization stage 410, an inverse transform stage 412, a reconstruction stage 414, and a loop filtering stage 416. Other structural changes to encoder 400 may be used to encode video stream 300.
When the video stream 300 is presented for encoding, the frames 306 may be processed in units of blocks. In the intra/inter prediction stage 402, the blocks may be encoded using intra-prediction (also referred to as intra-prediction) or inter-prediction (also referred to as inter-prediction), or a combination of both. In any case, a prediction block may be formed. In the case of intra prediction, all or part of the prediction block may be formed of samples in the current frame that have been previously encoded and reconstructed. In the case of inter prediction, all or part of the prediction block may be formed from samples in one or more previously constructed reference frames determined using motion vectors.
Next, still referring to FIG. 4, the prediction block may be subtracted from the current block in an intra/inter prediction stage 402 to produce a residual block (also referred to as a residual). The transform stage 404 transforms the residual into transform coefficients, e.g., in the frequency domain, using a block-based transform. Such block-based transforms include, for example, DCT and ADST. Other block-based transforms are also possible. Furthermore, a combination of different transforms may be applied to a single residual. In one example of applying a transform, the DCT transforms the residual block to the frequency domain, where the transform coefficient values are based on spatial frequency. The lowest frequency (DC) coefficients are at the top left of the matrix and the highest frequency coefficients are at the bottom right of the matrix. It is worth noting that the size of the prediction block, and thus the residual block, may be different from the size of the transform block. For example, a prediction block may be divided into smaller blocks to which separate transforms are applied.
The quantization stage 406 uses quantizer values or quantization levels to convert the transform coefficients into discrete quantum values, which are referred to as quantized transform coefficients. For example, the transform coefficients may be divided by the quantizer value and truncated. The quantized transform coefficients are then entropy encoded by entropy encoding stage 408. Entropy encoding may be performed using any number of techniques, including tokens and binary trees. The entropy coded coefficients, as well as other information used to decode the block (which may include, for example, the type of prediction used, the type of transform, the motion vector, and the quantizer value), are then output to a compressed bitstream 420. The information to decode the block may be entropy encoded into a block, frame, slice, and/or section header within the compressed bitstream 420. The compressed bitstream 420 may also be referred to as an encoded video stream or an encoded video bitstream, and these terms will be used interchangeably herein.
The reconstruction path (shown by dashed lines) in fig. 4 may be used to ensure that encoder 400 and decoder 500 (described below) use the same reference frames and blocks to decode compressed bitstream 420. The reconstruction path performs functions similar to those occurring during decoding, which will be discussed in more detail below, including dequantizing the quantized transform coefficients in a dequantization stage 410 and inverse transforming the dequantized transform coefficients in an inverse transform stage 412 to produce a block of derived residuals (also referred to as derived residuals). In the reconstruction stage 414, the prediction block predicted in the intra/inter prediction stage 402 may be added to the derived residual to create a reconstructed block. A loop filtering stage 416 may be applied to the reconstructed block to reduce distortion, such as block artifacts.
Other variations of the encoder 400 may be used to encode the compressed bitstream 420. For example, for some blocks or frames, the non-transform based encoder 400 may quantize the residual signal directly without the transform stage 404. In another embodiment, the encoder 400 may combine the quantization stage 406 and the dequantization stage 410 into a single stage.
Fig. 5 is a block diagram of a decoder 500 according to an embodiment of the present disclosure. The decoder 500 may be implemented in the receiving station 106, for example, by providing a computer software program stored in the memory 204. The computer software program may include machine instructions that, when executed by a processor such as CPU 202, cause receiving station 106 to decode video data in the manner described below in fig. 8 and 9. Decoder 500 may also be implemented in hardware included in, for example, transmitting station 102 or receiving station 106. Similar to the reconstruction path of the encoder 400 discussed above, the decoder 500 in one example includes the following stages that perform various functions to generate the output video stream 516 from the compressed bitstream 420: entropy decoding stage 502, dequantization stage 504, inverse transform stage 506, intra/inter prediction stage 508, reconstruction stage 510, loop filtering stage 512, and deblocking filtering stage 514. Other structural variations of the decoder 500 may also be used to decode the compressed bitstream 420.
When the compressed bitstream 420 is presented for decoding, data elements within the compressed bitstream 420 may be decoded by the entropy decoding stage 502 to produce a set of quantized transform coefficients. Dequantization stage 504 dequantizes the quantized transform coefficients (e.g., by multiplying the quantized transform coefficients by quantizer values), and inverse transform stage 506 inverse transforms the dequantized transform coefficients using the selected transform type to produce a derived residual, which may be the same as the derived residual created by inverse transform stage 412 in encoder 400. Using the header information decoded from the compressed bitstream 420, the decoder 500 may use the intra/inter prediction stage 508 to create the same prediction block as was created in the encoder 400, e.g., in the intra/inter prediction stage 402. In the reconstruction stage 510, the predicted block may be added to the derived residual to create a reconstructed block. The loop filtering stage 512 may be applied to the reconstructed block to reduce block artifacts. Other filtering may be applied to the reconstructed block. In an example, the deblock filtering stage 514 is applied to the reconstructed block to reduce block distortion, and the result is output as the output video stream 516. The output video stream 516 may also be referred to as a decoded video stream, and these terms will be used interchangeably herein.
Other variations of the decoder 500 may be used to decode the compressed bitstream 420. For example, the decoder 500 may generate the output video stream 516 without the deblocking filtering stage 514. In some embodiments of the decoder 500, the deblocking filtering stage 514 is applied before the loop filtering stage 512. Additionally or alternatively, the encoder 400 includes a deblocking filtering stage in addition to the loop filtering stage 416.
Fig. 6 is a block diagram of a representation of a portion 600 of a frame, such as frame 306 shown in fig. 3, according to an embodiment of the present disclosure. As shown, the portion 600 of the frame includes four 64 x 64 blocks 610 in two rows and two columns in a matrix or cartesian plane. In some embodiments, a 64 × 64 block may be a largest coding unit, N — 64. Each 64 x 64 block may include four 32 x 32 blocks 620. Each 32 x 32 block may include four 16 x 16 blocks 630. Each 16 x 16 block may include four 8 x 8 blocks 640. Each 8 x 8 block 640 may include four 4 x 4 blocks 650. Each 4 x 4 block 650 may include 16 pixels, which may be represented in four rows and four columns in each respective block in a cartesian plane or matrix. The pixels may include information representing an image captured in a frame, such as luminance information, color information, and position information. In some implementations, a block, such as the 16 × 16 pixel block shown, may include a luma block 660, which luma block 660 may include luma pixels 662; and two chroma blocks 670, 680, such as a U or Cb chroma block 670 and a V or Cr chroma block 680. The chroma blocks 670, 680 may include chroma pixels 690. For example, luma block 660 may include 16 × 16 luma pixels 662 and each chroma block 670, 680 may include 8 × 8 chroma pixels 690, as shown. Although one arrangement of blocks is shown, any arrangement may be used. Although fig. 6 shows an N × N block, in some embodiments, an N × M block may be used. For example, 32 × 64 blocks, 64 × 32 blocks, 16 × 32 blocks, 32 × 16 blocks, or any other size block may be used. In some embodiments, an N × 2N block, a 2N × N block, or a combination thereof may be used.
In some implementations, video encoding can include ordered block-level encoding. Sequential block-level encoding may include encoding blocks of a frame in an order such as raster scan order, where blocks may be identified and processed starting with a block in the upper left corner of the frame or portion of the frame and proceeding from left to right along rows and from the upper row to the lower row, identifying each block and then processing. For example, a 64 × 64 block in the upper row and left column of a frame may be a first block to be encoded, and a 64 × 64 block immediately to the right of the first block may be a second block to be encoded. The second row from the top may be the second row being encoded such that the 64 x 64 block in the left column of the second row may be encoded after the 64 x 64 block in the rightmost column of the first row.
In some embodiments, encoding the block may include using quadtree encoding, which may include encoding smaller block units within the block in raster scan order. For example, the 64 × 64 block shown in the lower left corner of the frame portion shown in fig. 6 may be encoded using quad-tree coding, where the upper left 32 × 32 block may be encoded, then the upper right 32 × 32 block may be encoded, then the lower left 32 × 32 block may be encoded, and then the lower right 32 × 32 block may be encoded. Each 32 x 32 block may be encoded using quad-tree coding, where the top left 16 x 16 block may be encoded, then the top right 16 x 16 block may be encoded, then the bottom left 16 x 16 block may be encoded, then the bottom right 16 x 16 block may be encoded. Each 16 x 16 block may be encoded using quad-tree coding, where the top left 8 x 8 block may be encoded, then the top right 8 x 8 block may be encoded, then the bottom left 8 x 8 block may be encoded, then the bottom right 8 x 8 block may be encoded. Each 8 x 8 block may be encoded using quad-tree coding, where the top left 4 x 4 block may be encoded, then the top right 4 x 4 block may be encoded, then the bottom left 4 x 4 block may be encoded, then the bottom right 4 x 4 block may be encoded. In some embodiments, for a 16 × 16 block, the 8 × 8 block may be omitted and the 16 × 16 block may be encoded using quad-tree encoding, where the top-left 4 × 4 block may be encoded and then the other 4 × 4 blocks in the 16 × 16 block may be encoded in raster scan order.
In some embodiments, video encoding may include compressing information included in the original frame or the input frame by, for example, omitting some of the information in the original frame from the corresponding encoded frame. For example, the encoding may include reducing spectral redundancy, reducing spatial redundancy, reducing temporal redundancy, or a combination thereof.
In some embodiments, reducing spectral redundancy may include using a color model based on a luminance component (Y) and two chrominance components (U and V or Cb and Cr), which may be referred to as a YUM or YCbCr color model or color space. Using the YUM color model may include representing a luminance component of a portion of a frame using a relatively large amount of information and representing each corresponding chrominance component of the portion of the frame using a relatively small amount of information. For example, the portion of the frame may be represented by a high-resolution luma component, which may include a 16 × 16 block of pixels, and two lower-resolution chroma components, each of which represents the portion of the frame as an 8 × 8 block of pixels. A pixel may indicate a value in the range of, for example, 0 to 255, and may be stored or transmitted using, for example, eight bits. Although the present disclosure is described with reference to the YUM color model, any color model may be used.
In some embodiments, reducing spatial redundancy may include transforming the block to the frequency domain using, for example, a Discrete Cosine Transform (DCT). For example, a unit of an encoder, such as transform stage 404 shown in fig. 4, may perform a DCT using spatial frequency based transform coefficient values.
In some implementations, reducing temporal redundancy can include using similarities between frames to encode frames using a relatively small amount of data based on one or more reference frames, which can be previously encoded, decoded, and reconstructed frames of a video stream. For example, a block or pixel of the current frame may be similar to a spatially corresponding block or pixel of the reference frame. In some embodiments, the block or pixel of the current frame may be similar to a block or pixel of the reference frame at a different spatial location, and reducing temporal redundancy may include generating motion information indicative of a spatial difference or translation between the location of the block or pixel in the current frame and a corresponding location of the block or pixel in the reference frame.
In some implementations, reducing temporal redundancy can include identifying a portion of a reference frame that corresponds to a current block or pixel of a current frame. For example, a reference frame or a portion of a reference frame, which may be stored in memory, may be searched to identify a portion for generating a predictor for encoding a current block or pixel of a current frame with maximum efficiency. For example, the search may identify a portion of a reference frame for which a difference in pixel values between a current block and a prediction block generated based on the portion of the reference frame is minimized, and may be referred to as a motion search. In some implementations, the portion of the reference frame that is searched may be limited. For example, the portion of the reference frame being searched that may be referred to as a search area may include a limited number of rows of the reference frame. In an example, identifying the portion of the reference frame used to generate the predictor may include computing a cost function, such as a Sum of Absolute Differences (SAD), between pixels of the portion of the search region and pixels of the current block.
In some embodiments, the spatial difference between the position of the reference frame portion used to generate the predictor in the reference frame and the current block in the current frame may be represented as a motion vector. The difference in pixel values between the predictor block and the current block may be referred to as difference data, residual data, prediction error, or a residual block. In some implementations, generating a motion vector may be referred to as motion estimation, and the current blockMay use cartesian coordinates such as f x,y Indicated based on its location. Similarly, pixels of the search area of the reference frame may use cartesian coordinates such as r x,y Indicated based on its location. The Motion Vector (MV) of the current block may be determined based on, for example, the SAD between pixels of the current frame and corresponding pixels of the reference frame.
Although described herein with reference to a matrix or cartesian representation of a frame for clarity, a frame may be stored, transmitted, processed, or any combination thereof in any data structure such that pixel values may be efficiently represented for a frame or image. For example, the frames may be stored, transmitted, processed, or any combination thereof, in a two-dimensional data structure, such as a matrix as shown, or a one-dimensional data structure, such as a vector array. In one embodiment, a representation of a frame, such as the two-dimensional representation shown, may correspond to a physical location when the frame is rendered as an image. For example, the position of the top left corner of the block in the top left corner of the frame may correspond to the physical position of the top left corner where the frame is rendered as an image.
In some embodiments, block-based coding efficiency may be improved by partitioning an input block into one or more prediction partitions, which may be rectangular partitions including squares used for prediction coding. In some embodiments, video encoding using predictive partitioning may include selecting a predictive partitioning scheme from a plurality of candidate predictive partitioning schemes. For example, in some embodiments, the candidate prediction partition scheme for a 64 × 64 coding unit may include rectangular prediction partitions having a size ranging from 4 × 4 to 64 × 64, such as 4 × 4, 4 × 8, 8 × 4, 8 × 8, 8 × 16, 16 × 8, 16 × 16, 16 × 32, 32 × 16, 32 × 32, 32 × 64, 64 × 32, or 64 × 64. In some embodiments, video encoding using predictive partitions may include a full predictive partition search, which may include selecting a predictive partition scheme by encoding a coding unit using each available candidate predictive partition scheme, and then selecting the best scheme, such as the scheme that produces the smallest rate distortion error.
In some implementations, encoding a video frame may include identifying a prediction partition scheme for encoding a current block, such as block 610. In some embodiments, identifying the prediction partitioning scheme may include determining whether to encode a block as a single prediction partition that may be a maximum coding unit size of 64 × 64 as shown, or to partition the block into multiple prediction partitions corresponding to sub-blocks, such as 32 × 32 block 620, 16 × 16 block 630, or 8 × 8 block 640 as shown, and may include determining whether to partition the prediction partitions into one or more smaller prediction partitions. For example, a 64 × 64 block may be partitioned into four 32 × 32 prediction partitions. Three of the four 32 x 32 prediction partitions may be encoded as 32 x 32 prediction partitions and the fourth 32 x 32 prediction partition may be further partitioned into four 16 x 16 prediction partitions. Three of the four 16 x 16 prediction partitions may be encoded as 16 x 16 prediction partitions, and the fourth 16 x 16 prediction partition may be further partitioned into four 8 x 8 prediction partitions, each of which may be encoded as an 8 x 8 prediction partition. In some embodiments, identifying a predictive partitioning scheme may include using a predictive partitioning decision tree.
In some embodiments, video encoding of a current block may include identifying an optimal predictive encoding mode from a plurality of candidate predictive encoding modes, which may provide flexibility in handling video signals having various statistical properties and may improve compression efficiency. For example, the video encoder may evaluate each candidate predictive encoding mode to identify the best predictive encoding mode, which may be, for example, the predictive encoding mode that minimizes an error metric, such as a rate-distortion cost, for the current block. In some implementations, the complexity of searching for candidate predictive coding modes may be reduced by limiting the set of available candidate predictive coding modes based on the similarity between the current block and the respective prediction block. In some embodiments, by performing a directed refinement mode search, the complexity of searching each candidate predictive coding mode may be reduced. For example, metrics may be generated for a limited set of candidate block sizes, such as 16 × 16, 8 × 8, and 4 × 4; the error metric associated with each block size may be in descending order; and additional candidate block sizes may be evaluated, such as 4 x 8 and 8 x 4 block sizes.
In some embodiments, block-based coding efficiency may be improved by partitioning a current residual block into one or more transform partitions, which may be rectangular partitions including squares for transform coding. In some embodiments, video encoding using transform partitions may include selecting a unified transform partition scheme. For example, a current residual block, such as block 610, may be a 64 × 64 block and may be transformed using a 64 × 64 transform without partitioning.
Although not explicitly shown in fig. 6, the residual block may be transform partitioned using a unified transform partitioning scheme. For example, a 64 × 64 residual block may be transform partitioned using a unified transform partitioning scheme including four 32 × 32 transform blocks, using a unified transform partitioning scheme including sixteen 16 × 16 transform blocks, using a unified transform partitioning scheme including sixty-four 8 × 8 transform blocks, or using a unified transform partitioning scheme including 256 4 × 4 transform blocks.
In some embodiments, video encoding using transform partitions may include identifying multiple transform block sizes of a residual block using multiple forms of transform partition encoding. In some embodiments, the multi-form transform partition encoding may include recursively determining whether to transform the current block using a current block size transform or by partitioning the current block and multi-form transform partition encoding each partition. For example, the lower left block 610 shown in fig. 6 may be a 64 × 64 residual block, and the multi-form transform partition encoding may include determining whether to encode the current 64 × 64 residual block using a 64 × 64 transform, or to encode the 64 × 64 residual block by partitioning the 64 × 64 residual block into partitions such as four 32 × 32 blocks 620 and multi-form transform partition encoding for each partition. In some implementations, determining whether to transform the current block into a partition may be based on comparing a sum of a cost of encoding the current block using a current block size transform and a cost of encoding each partition using a partition size transform.
FIG. 7 shows a diagram of an example of a transform block 700 and an example of an entropy encoding scan order 702 and 708 according to an embodiment of the disclosure.
In some embodiments, elements of an encoder, such as transform stage 404 of encoder 400 shown in fig. 4, may generate transform block 700. In some embodiments, an element of an encoder, such as the quantization stage 406 of the encoder 400 shown in fig. 4, may quantize the transform block 700 to generate a quantized transform block. As used herein, unless explicitly indicated otherwise, the term "transform block" may refer to a block, matrix, or other data structure of transform coefficients or quantized transform coefficients. Although 4 x 4 blocks are shown for simplicity, any size block may be used. For example, a 64 × 64 block, a 64 × 32 block, a 32 × 64 block, a 32 × 32 block, a 32 × 16 block, a 16 × 8 block, an 8 × 16 block, an 8 × 8 block, an 8 × 4 block, or a 4 × 8 block may be used.
In the transform block 700 shown in fig. 7, the value shown in each position indicates the transform coefficient value of the corresponding position. For clarity, the location of a transform coefficient of a block may be referred to as the "location", "position", or a variation thereof of the transform coefficient. As used herein, references to "proximity", "spatial proximity", or "distance" between transform coefficients may indicate proximity or distance in a transform coefficient matrix representation of the transform coefficients of a block.
In some embodiments, the transform block 700 may be processed in scan order to improve entropy coding efficiency. For example, the scan order may tend to group zero-valued coefficients at the end of a block, and consecutive zero-valued coefficients at the end of the block in scan order (i.e., zero-valued tails) may be omitted from the output bitstream without losing data.
In some implementations, entropy encoding may include encoding the coefficients of transform block 700 in a scan order, such as horizontal scan order 702, vertical scan order 704, diagonal scan order 706, or zig-zag scan order 708. The values shown in each block of the scanning order represent the order in which the corresponding coefficients were entropy encoded. Although 4 x 4 blocks are shown for simplicity, any size block may be used. For example, a 64 × 64 block, a 64 × 32 block, a 32 × 64 block, a 32 × 32 block, a 32 × 16 block, a 16 × 8 block, an 8 × 16 block, an 8 × 8 block, an 8 × 4 block, or a 4 × 8 block may be used.
In some implementations, encoding the coefficients of the transform coefficient matrix in scan order may include generating a one-dimensional array of transform coefficients, such as a vector, by including each transform coefficient in a vector in scan order. For example, the DC coefficient, which may be the coefficient in the upper left corner of the transform coefficient matrix, may be the first element of the scan order vector, may have a transform coefficient matrix position of (0,0), and may have a scan order position of (0).
As used herein, the terms "order", "scan position", "vector position" or variants thereof of transform coefficients refer to the relative position or index of the transform coefficients in a scan order or scan order vector. Although fig. 7 shows an example of a sequential scanning pattern, the coefficients may be encoded using a non-sequential scanning pattern.
Fig. 8 is a flow diagram of encoding for entropy encoding 800 using context adaptive scan order, according to an embodiment of the present disclosure. In some embodiments, encoding using context-adaptive scan order for entropy encoding may be implemented in an encoder, such as encoder 400 shown in fig. 4. For example, the entropy encoding stage 408 of the encoder 400 shown in fig. 4 may use the entropy encoded context-adaptive scan order to implement the encoding. In some embodiments, encoding using a context adaptive scan order for entropy encoding (which may be a context constrained non-zero probability adaptive scan order) may include identifying a current block at 810, encoding the current block at 820, transmitting or storing an output bitstream at 830, or any combination thereof.
The current block is identified at 810. The current block may be a residual block or a partition thereof. For example, the current block may be identified as a 64 × 64 residual block, such as the lower left 64 × 64 residual block 610 shown in fig. 6. In another example, the current block may be identified as a sub-block of a residual block, such as a lower left 32 × 32 block 620 shown in fig. 6, a lower left 16 × 16 sub-block 630 shown in fig. 6, a lower left 8 × 8 sub-block 640 shown in fig. 6, a lower left 4 × 4 sub-block 650 shown in fig. 6, or another size block. Although not explicitly shown in FIG. 8, in some embodiments, identifying the current block at 810 may include identifying the current block from an input video frame, generating one or more prediction blocks for the current block, generating one or more residual blocks based on the prediction blocks, or a combination thereof, such as by the intra/inter prediction stage 402 shown in FIG. 4.
The current block is encoded at 820. For example, the current block may be encoded by an encoder, such as encoder 400 shown in fig. 4, which may include generating a transform block at 822 by transforming the residual, or a portion thereof, such as by transform stage 404 shown in fig. 4, identifying the scan order at 824, and entropy encoding the transform block (or quantized transform block) at 826.
A transform block is generated at 822. Generating the transform block at 822 may include partitioning the current residual block into one or more transform partitions, which may be rectangular partitions including squares for transform coding. In some embodiments, video encoding using transform partitioning may include selecting a unified transform partitioning scheme or a multi-form transform partitioning scheme, as shown in fig. 6. Generating the transform block at 822 may include, for example, partition transforming the residual block or residual block into transform coefficients by a transform unit, such as transform stage 404 shown in fig. 4. Although not explicitly expressed in fig. 8, in some embodiments, the quantized transform block may be generated by quantizing the transform block, such as by quantization stage 406 shown in fig. 4.
A scan order, such as a context adaptive scan order, is identified at 824. The scan order is used to entropy encode the transform block or quantized transform block identified at 822. Identifying the context-adaptive scan order at 824 may include identifying the scan order based on a non-zero coefficient probability while preserving the context, as shown in fig. 9. The identified scan order may indicate a scan pattern, a direction within a scan pattern, or both.
Based on the context-adaptive scan order identified at 824, the transform block (or quantized transform block) is entropy encoded at 826. For example, entropy encoding the transform block may include sequentially encoding the transform coefficients from the transform block in the context-adaptive scan order identified at 824, including encoding the entropy encoded transform coefficients in an output data stream, such as the compressed bitstream 420 shown in fig. 4, or a combination thereof. In some implementations, the current transform coefficient may be a zero-valued transform coefficient, the current block of transform coefficients may not include a subsequent non-zero-valued transform coefficient, and entropy encoding of the current block may be complete.
At 830, the output bitstream is transmitted or stored. For example, the output may be transmitted as a signal via a network, such as network 104 shown in fig. 1, such that a device, such as computing device 200 shown in fig. 2 or transmitting station 102 or receiving station 106 of fig. 1 (which may include a decoder, such as decoder 500 shown in fig. 5), may receive the signal via the network, may decode the encoded video bitstream, and may generate a reconstructed frame or a portion of a reconstructed frame corresponding to the current frame. In another example, the encoded video bitstream may be stored as stored encoded video in a memory (e.g., memory 204 shown in fig. 2) of a device, such as computing device 200 shown in fig. 2 or transmitting station 102 or receiving station 106 of fig. 1, so that the device, or any other device having access to the memory, may retrieve the stored encoded video, so that a decoder, such as decoder 500 shown in fig. 5, may decode the encoded video, and may generate a reconstructed frame, or a portion of a reconstructed frame, corresponding to the current frame.
Other embodiments are available that use the context-adaptive scan order for entropy coding as shown in fig. 8 for encoding. In an embodiment, additional elements may be added that are encoded using context-adaptive scan order for entropy encoding, certain elements may be combined, and/or certain elements may be removed.
Fig. 9 is a flow diagram of identifying a context adaptive scan order for entropy encoding 900 according to an embodiment of the present disclosure. In some implementations, encoding the transform block, such as the encoding shown at 820 in fig. 8, may include identifying a current transform coefficient that is not encoded from the transform block based on the context adaptive scan order, identifying an entropy encoding probability distribution for the current transform coefficient, representing the current transform coefficient as a code based on the entropy encoding probability distribution, including encoding the code in the output data stream, or a combination thereof. In some embodiments, entropy encoding probability distributions may be based on estimated probabilities, calculated probabilities, or a combination of estimated and calculated probabilities that symbols will appear in the input data stream, and may be ordered such that the shortest code may be associated with the most frequently occurring symbols (coefficients).
The context adaptive scan order identifying entropy coding 900 may be implemented in an encoder, such as encoder 400 shown in fig. 4. For example, the entropy encoding stage 408 of the encoder 400 shown in fig. 4 may identify the context-adaptive scan order of entropy encoding. In some embodiments, the context-adaptive scan order for identifying entropy coding at 900 in fig. 9 may be similar to the context-adaptive scan order for identifying entropy coding shown at 824 in fig. 8. In some implementations, identifying the context adaptive scan order for entropy encoding 900 may include identifying a transform coefficient probability at 910, identifying a current transform coefficient position at 920, identifying a context position at 930, identifying a context position scan order at 940, identifying a current position scan order at 950, or any combination thereof.
Transform coefficient probabilities are identified at 910. For each position or location in the transform block, a transform coefficient probability or a non-zero coefficient probability may indicate a respective probability that the corresponding transform coefficient is a non-zero coefficient. In some implementations, the current transform coefficient may be a zero-valued transform coefficient, the current block of transform coefficients may not include a subsequent non-zero-valued transform coefficient, and entropy encoding of the current block may be completed.
Identifying the non-zero coefficient probabilities at 910 may include generating, maintaining, tracking statistics indicating the probabilities for respective locations in the transform block that include non-zero coefficients, or a combination of these operations. For example, the non-zero coefficient probability for the current block may be an updated non-zero coefficient probability and the updated non-zero coefficient probability may be a non-zero coefficient probability for encoding a previously encoded block that is updated based on a non-zero coefficient count for the previously encoded block.
Transform coefficient probabilities may be identified at 910 based on one or more previously encoded frames, estimated probabilities for a current frame, or a combination thereof. In some embodiments, for a previously encoded frame (i-th frame), (r) may indicate a frequency index in the vertical direction, which may correspond to a row number in the transform coefficient matrix, (c) may indicate a frequency index in the horizontal direction, which may correspond to a column number in the transform coefficient matrix, and a count of non-zero coefficients may be determined for each position or location (r, c) in the transform block. A count of non-zero coefficients C [ i ] [ r ] [ C ] of corresponding transform coefficient positions may be determined for each transform block in the frame, which may be indicated by a transform block number (M). The transform block number (M) may indicate the number or base of transform blocks of a defined size in a frame. A frame may include two or more transform block sizes. For each block size (t), the cardinality M (t)) of the t-sized transform block of the frame may be indicated, and the count of non-zero coefficients C [ t ] [ i ] [ r ] [ C ] of the corresponding transform coefficient position may be determined.
The non-zero coefficient probability Pc [ i ] [ r ] [ C ] observed at each position of the corresponding transform block (M) in the previously encoded frame (i) may be determined by dividing the non-zero coefficient count C [ i ] [ r ] [ C ] of the corresponding transform coefficient position by the transform block number (M), which may be expressed as Pc [ i ] [ r ] [ C ] ═ C ] [ r ]/M. In some embodiments, the estimated probability Pe [ i ] [ r ] [ c ] of a non-zero coefficient at each position in the corresponding transform block of the previously identified frame (i) may be identified. The estimated probability Pe [ i ] [ r ] [ c ] may indicate the probability generated for encoding the previously encoded frame.
In some embodiments, (a) may indicate an update rate, and the non-zero probability Pe [ i +1] [ r ] [ c ] of the transform block of the current frame (i +1) may be estimated based on a combination of the estimated probability Pe [ i ] [ r ] [ c ] of the non-zero coefficient of the previous coded frame (i) and the observed probability Pc [ i ] [ r ] [ c ] of the non-zero coefficient of the previous coded frame (i), which may be expressed as Pe [ i +1] [ r ] [ c ] + a [ i ] [ r ] [ c ].
The current transform coefficient position is identified at 920. Identifying the current transform coefficient position may include identifying a maximum non-zero coefficient probability from among the transform coefficient probabilities identified at 910. For example, the maximum non-zero coefficient probability may be the probability having the highest value among the transform coefficient probabilities identified at 910, which may correspond to the location in the transform block most likely to include a non-zero coefficient.
Identifying the current transform coefficient position at 920 may include identifying a largest unassigned transform coefficient position from the transform block, and omitting from the identification of the current transform coefficient position a transform coefficient position having an assigned position in the context adaptive scan order. In some implementations, identifying the context adaptive scan order for entropy encoding 900 may include proceeding sequentially or iteratively as indicated by the dashed line of 960, identifying the current transform coefficient position at 920, identifying the context position at 930, identifying the context position scan order at 940, and identifying the current position scan order for each position in the current block at 950.
For example, identifying the current transform coefficient position may include sorting the estimated non-zero probability Pe [ i +1] [ r ] [ c ] of the current transform block and selecting the current transform coefficient position in the sorted order.
In some implementations, an entropy encoding probability distribution for entropy encoding a current transform coefficient may be identified or adapted based on one or more entropy encoding context locations, such as one or more previously encoded transform coefficients for a current block.
Entropy coding context locations are identified at 930. In some implementations, the entropy coded context location may include a previously entropy coded coefficient from the current block that is spatially close to the current coefficient. In some implementations, spatially close entropy encoding context locations can be identified based on a scan order, which can be different from a context adaptive scan order. For example, spatially close entropy coding context locations may be identified based on a raster scan order, such as the horizontal scan order 702 shown in FIG. 7. For example, the entropy coding context location may comprise a previously entropy coded transform coefficient that is spatially close to a current coefficient in a current block of transform coefficients, such as the coefficient immediately to the left of the current coefficient, the coefficient immediately above the current coefficient, or the coefficients immediately below and to the left of the current coefficient.
In some implementations, the entropy coding context location used to entropy code the current transform coefficient may include a coefficient adjacent to the current coefficient and may include an entropy coding context location of a coefficient adjacent to the current coefficient. For example, the entropy coding context locations for the coefficient labeled 6 in the horizontal scanning order 702 of fig. 7 may include coefficients labeled 1,2, and 5, and the entropy coding context locations for the coefficient labeled 11 in the horizontal scanning order 702 of fig. 7 may include coefficients labeled 1,2, 3, 5, 6, 7, 9, and 10.
The entropy coding context position scan order is identified at 940. The context adaptive scan order may include an assigned scan order (assigned entropy coding context position) of one or more of the entropy coding context positions identified at 930, and an entropy coding context position scan order from the context adaptive scan order having the entropy coding context position of the assigned scan order in the context adaptive scan order may be identified as the entropy coding context position scan order at 940. In some implementations, the context adaptive scan order can omit an assigned scan order for one or more of the entropy coding context locations identified at 930 (unassigned entropy coding context locations), and identifying the entropy coding context location scan order at 940 can include ordering the unassigned entropy coding context locations using a defined scan order, such as a zig-zag scan order, or topologically ordering the unassigned entropy coding context locations.
The scan order position in the context adaptive scan order for the current position is identified at 950. For example, the smallest unassigned scan order position in the context adaptive scan order that may be greater than the corresponding assigned scan order position identified at 940 for the entropy encoded context position identified at 930 may be identified at 950 as the assigned scan order position in the context adaptive scan order for the current position identified at 920.
Identifying the context-adaptive scan order may include using as inputs: (len) indicates the length or size of the current transform block, such as 4 for a 4 x 4 block and 8 for an 8 x 8 block; (ci) indicates a coefficient index corresponding to position (r, c), which may be expressed as ci-r × len + c; (N) indicates the number or cardinality of coefficient positions in the transform block, which may be expressed as N ═ len · len for a square (len × len) block; scan [ si ] indicates a correlation between the scan order (si) and the coefficient index (ci), such as a mapping from scan order (si) to coefficient index (ci); dep [ ci ] indicates a coefficient index list of entropy coding context locations for the current coefficient with index ci; and visit [ ci ] indicates a table or other data storage structure that may indicate whether the coefficient with index ci is a previously scanned and encoded coefficient. In some embodiments, floor () is a function that maps real numbers to the largest previous integer, and the position (r, c) of the coefficient index ci may be expressed as r ═ floor (ci/len), c ═ ci modules (%) len.
Identifying a context adaptive scan order may include generating the following outputs: new _ scan [ si ], which indicates an updated or modified correlation between the scan order (si) and the coefficient index (ci), such as an updated mapping from the scan order (si) to the coefficient index (ci). For example, in a 4 × 4 square transform block, a coefficient index ci identifying a fourth scan coefficient, which may be scan order 3, may be expressed as ci — new _ scan [3 ]. The coefficient index ci of the fourth scan coefficient may be 7(ci ═ new _ scan [3] ═ 7), and a coefficient having a coefficient index of 5(ci ═ 5) may be scanned by the fourth scan. The position (r, c) of the coefficient with coefficient index of 7 may be identified based on the corresponding coefficient index ci (ci ═ 7), which may be expressed as r ═ floor (7/4) ═ 1 and c ═ 7% 4 ═ 3, indicating that the coefficients at the second row and the fourth column may be scanned by the fourth scan. The generation of new _ scan [ si ] can be expressed as follows:
FIG. 10 shows a diagram of an example of an estimated non-zero coefficient probability matrix 1000, an example of a corresponding magnitude-based scan order 1010, and an example of a corresponding context- adaptive scan order 1020 and 1028 for a transform block, according to an embodiment of the present disclosure.
In some embodiments, the estimated non-zero coefficient probability matrix 1000 may be an estimated non-zero coefficient probability matrix. For example, the estimated non-zero coefficient probability matrix 1000 may be the identified estimated non-zero coefficient probability matrix as shown at 910 in fig. 9. As shown in fig. 10, for each coefficient position in the transform block, the estimated non-zero coefficient probability matrix 1000 indicates an estimated probability that the corresponding coefficient in the transform block has a non-zero value. For clarity, the positions of the transform coefficients and the corresponding estimated probabilities may be referenced using cartesian coordinates.
In the example shown in fig. 10, the estimated non-zero coefficient probability matrix 1000 indicates:
a. the transform coefficient at the top left position (0,0) in the respective transform block is the estimated probability of the highest estimated non-zero coefficient probability (0.51) of the transform block;
b. the transform coefficients at the third row and third column (2,2) in the respective transform block are estimated probabilities of a second highest estimated non-zero coefficient probability (0.47) of the transform block;
c. the transform coefficients at the first row and third column (0,2) in the respective transform block are estimated probabilities of a third highest estimated non-zero coefficient probability (0.45) of the transform block;
d. the transform coefficients at the first row and fourth column (0,3) in the respective transform block are estimated probabilities of a fourth highest estimated non-zero coefficient probability (0.42) of the transform block;
e. the transform coefficient at the second row and the first column (1,0) in the respective transform block is the estimated probability of the fifth highest estimated non-zero coefficient probability (0.41) of the transform block;
f. the transform coefficient at the first row and second column (0,1) in the respective transform block is an estimated probability of a sixth highest estimated non-zero coefficient probability (0.39) of the transform block;
g. the transform coefficients at the third row and the first column (2,0) in the respective transform block are estimated probabilities of a seventh highly estimated non-zero coefficient probability (0.33) of the transform block;
h. the transform coefficients at the fourth row and the first column (3,0) in the respective transform block are estimated probabilities of an eighth highest estimated non-zero coefficient probability (0.31) of the transform block;
i. the transform coefficients at the second row and third column (1,2) in the respective transform block are estimated probabilities of a ninth highest estimated non-zero coefficient probability (0.28) of the transform block;
j. the transform coefficient at the third row and second column (2,1) in the respective transform block is an estimated probability of a non-zero coefficient probability (0.26) of the tenth highest estimate of the transform block;
k. the transform coefficient at the second row and the second column (1,1) in the respective transform block is an estimated probability of a non-zero coefficient probability (0.21) of the eleventh highest estimate of the transform block;
the transform coefficient at the fourth row and second column (3,1) in the respective transform block is the estimated probability of a twelfth highest estimated non-zero coefficient probability (0.19) of the transform block;
m. the estimated probability that the transform coefficient at the second row and fourth column (1,3) in the respective transform block is a non-zero coefficient probability (0.18) of the thirteenth highest estimate of the transform block;
n. the transform coefficients at the fourth and third rows (3,2) in the respective transform block are estimated probabilities of a fourteenth high estimated non-zero coefficient probability (0.14) of the transform block;
o. the transform coefficients at the third row and fourth column (2,3) in the respective transform block are estimated probabilities of a fifteenth highest estimated non-zero coefficient probability (0.11) of the transform block; and also
p. the estimated probability that the transform coefficient at the bottom right position (3,3) in the respective transform block is the lowest estimated non-zero coefficient probability (0.06) of the transform block.
The entropy coding scan order may be identified based on the magnitude of the estimated non-zero coefficient probabilities in the estimated non-zero coefficient probability matrix 1000, such as the order of the non-zero coefficient probability estimated from the maximum, highest, or maximum value to the minimum, lowest, or minimum value, as shown by the entropy coding scan order in magnitude order 1010.
For example, in the estimated non-zero coefficient probability matrix 1000, the transform coefficient at the top left position (0,0) in the respective transform block is the highest estimated non-zero coefficient probability (0.51) and the smallest or lowest (1) unassigned estimated probability of the entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the top left position (0,0) as shown by the top left position (0,0) of the entropy coding scan order 1010 in magnitude order.
The transform coefficients at the third row and third column (2,2) in the respective transform block are the second highest estimated non-zero coefficient probability (0.47) of the transform block, and the second lowest (2) unassigned estimated probability of the entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the third row and third column (2,2) as shown in the third row and third column (2,2) of the entropy coding scan order 1010 in magnitude order. The transform coefficients at the first row and third column (0,2) in the respective transform block are the third highest estimated non-zero coefficient probability (0.45) of the transform block, and the third lowest (3) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the first row and third column (0,2) as shown in the first row and third column (0,2) of the entropy coding scan order 1010 in magnitude order.
The transform coefficients at the first row and fourth column (0,3) in the respective transform block are the fourth highest estimated non-zero coefficient probability (0.42) of the transform block, and the fourth lowest (4) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the first row and fourth column (0,3) as shown in the first row and fourth column (0,3) of the entropy coding scan order 1010 in magnitude order. The transform coefficient at the second row and first column (1,0) in the respective transform block is the fifth highest estimated non-zero coefficient probability (0.41) of the transform block, and the fifth lowest (5) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the second row and first column (1,0) as shown by the second row and first column (1,0) of the entropy coding scan order 1010 in magnitude order.
The transform coefficient at the first row and second column (0,1) in the respective transform block is the sixth highest estimated non-zero coefficient probability (0.39) of the transform block, and the sixth lowest (6) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the context entropy coding scan order position at the first row and second column (0,1) as shown by the first row and second column (0,1) of the entropy coding scan order 1010 in magnitude order. The transform coefficients at the third row and first column (2,0) in the respective transform block are the seventh highest estimated non-zero coefficient probability (0.33) of the transform block, and the seventh lowest (7) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the third row and first column (2,0) as shown in the third row and first column (2,0) of the entropy coding scan order 1010 in magnitude order.
The transform coefficients at the fourth row and first column (3,0) in the respective transform block are the eighth highest estimated non-zero coefficient probability (0.31) of the transform block, and the eighth lowest (8) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the fourth row and first column (3,0) as shown in the fourth row and first column (3,0) of the entropy coding scan order 1010 in magnitude order. The transform coefficient at the second row and third column (1,2) in the respective transform block is the ninth highest estimated non-zero coefficient probability (0.28) of the transform block, and the ninth lowest (9) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the second row and third column (1,2) as shown in the second row and third column (1,2) of the entropy coding scan order 1010 in magnitude order.
The transform coefficient at the third row and second column (2,1) in the respective transform block is the tenth highest estimated non-zero coefficient probability (0.26) of the transform block, and the tenth lowest (10) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the third row and second column (2,1) as shown in the third row and second column (2,1) of the entropy coding scan order 1010 in magnitude order. The transform coefficient at the second row and second column (1,1) in the respective transform block is the non-zero coefficient probability (0.21) of the eleventh high estimate of the transform block, and the estimated probability of the eleventh low (11) unassigned entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position of the second row and second column (1,1) as shown at the second row and second column (1,1) of the entropy coding scan order 1010 in magnitude order.
The transform coefficient at the fourth row and second column (3,1) in the respective transform block is the twelfth highest estimated non-zero coefficient probability (0.19) of the transform block, and the twelfth lowest (12) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the fourth row and second column (3,1) as shown by the fourth row and second column (3,1) of the entropy coding scan order 1010 in magnitude order. The transform coefficients at the second row and fourth column (1,3) in the respective transform block are the non-zero coefficient probabilities (0.18) of the thirteenth high estimate of the transform block, and the estimated probability that the thirteenth low (13) is not assigned an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the context entropy coding scan order position at the second row and fourth column (1,3) as shown in the second row and fourth column (1,3) of the entropy coding scan order 1010 in magnitude order.
The transform coefficients at the fourth and third columns (3,2) in the respective transform block are the fourteenth highest estimated non-zero coefficient probability (0.14) of the transform block, and the fourteenth lowest (14) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the fourth and third columns (3,2) as shown in the fourth and third columns (3,2) of the entropy coding scan order 1010 in magnitude order. The transform coefficients at the third row and fourth column (2,3) in the respective transform block are the fifteenth highest estimated non-zero coefficient probability (0.11) of the transform block, and the fifteenth lowest (15) estimated probability of not assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the third row and fourth column (2,3) as shown in the third row and fourth column (2,3) of the entropy coding scan order 1010 in magnitude order.
The transform coefficient at the bottom right position (3,3) in the respective transform block is the lowest estimated non-zero coefficient probability (0.06) of the transform block, and the highest or maximum value (16) has no estimated probability of assigning an entropy coding scan order position can be identified or assigned as the entropy coding scan order position of the entropy coding context position at the bottom right position (3,3) as shown by the bottom right position (3,3) of the entropy coding scan order 1010 in magnitude order.
In some embodiments, the context-adaptive scan order may be identified based on the magnitude of the estimated non-zero coefficient probabilities in the estimated non-zero coefficient probability matrix 1000 and the context order shown by the context-adaptive scan order 1020-1028.
For example, in the estimated non-zero coefficient probability matrix 1000, the transform coefficient at the top left position (0,0) in the corresponding transform block is the highest estimated non-zero coefficient probability (0.51) of the transform block, and the smallest or lowest (1) estimated probability of an unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position of an entropy coded context position at the top left position (0,0) as shown by the top left position (0,0) of the first context adaptive scan order 1020.
In the estimated non-zero coefficient probability matrix 1000, the transform coefficients at the third row and third column (2,2) in the respective transform block are the second highest estimated non-zero coefficient probability (0.47) of the transform block, and the estimated probabilities of the non-zero coefficient probability locations at the third row and third column (2,2) are shown with cross-hatching to indicate that the non-zero coefficient probability locations at the third row and third column (2,2) are the current non-zero coefficient probability locations relative to the first context adaptive scan order 1020.
For a current non-zero coefficient probability position, an entropy coding context position is identified. For example, an entropy coding context position may be identified for the current non-zero coefficient probability position, as shown at 920 in FIG. 9. Entropy coding context locations may be identified based on a defined context selection scheme. For example, in the estimated non-zero coefficient probability matrix 1000 shown in fig. 10, the positions above, to the left, and above and to the left of the current non-zero coefficient probability position (2,2) — (0,0), (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), and (2,1) — the entropy coding context coefficients that can be identified as the current non-zero coefficient probability position (2,2), as shown by the dotted background in the estimated non-zero coefficient probability matrix 1000.
The context adaptive scan order may comprise a context adaptive scan order position assigned for one or more of the entropy coded context positions. For example, the first context adaptive scan order 1020 includes a context adaptive scan order position (1) assigned for the top-left entropy coded context position (0, 0).
The context adaptive scan order may omit the context adaptive scan order position assigned for one or more of the entropy coded context positions. For example, the first context adaptive scan order 1020 omits the context adaptive scan order positions assigned for entropy coded context positions (0,1), (0,2), (1,0), (1,1), (1,2), (2,0), and (2,1) instead of the upper left entropy coded context position (0, 0). For simplicity, entropy coding context positions with context-adaptive scan order omitting assigned context-adaptive scan order positions may be referred to as unassigned entropy coding context positions.
An assigned context adaptive scan order position may be identified for an unassigned entropy coding context position. For example, as shown at 940 in FIG. 9, an assigned context adaptive scan order position may be identified for an unassigned entropy coding context position. In some embodiments, unassigned entropy coding context positions, which may be a set of unassigned entropy coding context positions, for which assigned context adaptive scan order positions are identified, may be ordered based on a defined scan order or based on topology or recursively.
In fig. 10, the second context adaptive scan order 1022 includes an assigned context adaptive scan order position of the entropy coded context position identified for the current non-zero coefficient probability position. The position indicated with the cross-hatched background in the second context-adaptive scan order 1022 corresponds to the current non-zero coefficient probability position (2, 2). The upper left entropy coded context position (0,0) in the second context adaptive scan order 1022 indicates the assigned context adaptive scan order position (1) that is assigned based on the magnitude of the corresponding estimated probability. Entropy coded context positions (0,1), (0,2), (1,0), (1,1), (1,2), (2,0) and (2,1) indicated by the dotted backgrounds in the second context adaptive scan order 1022 include an assigned context adaptive scan order position (2-8) assigned based on the zigzag scan order. In some implementations, the transform blocks may be generated using, for example, a two-dimensional (2D) DCT, and the zig-zag scan order may correspond to a scan order based on an ascending transform frequency.
The third context-adaptive scan order 1024 includes a context-adaptive scan order position assigned for entropy coding context positions identified by topological or recursive ordering of entropy coding context positions based on non-zero coefficient probability measures. The position indicated with cross-hatched background in the third context-adaptive scan order 1024 corresponds to the current non-zero coefficient probability position (2, 2). The upper left entropy coded context position (0,0) in the third context adaptive scan order 1024 indicates the assigned context adaptive scan order position (1) based on the magnitude assignment of the respective estimated probability. The entropy coding context positions (0,1), (0,2), (1,0), (1,2), (2,1) indicated by the dotted backgrounds in the third context adaptive scan order 1024 include an assigned context adaptive scan order position (2-8) assigned by topologically or recursively ordering the entropy coding context positions based on non-zero coefficient probability magnitude values.
In some implementations, topologically or recursively ranking entropy coding context locations based on non-zero coefficient probability magnitudes can include identifying a current entropy coding context location, identifying a context location of a current entropy coding context location, identifying a context location scan order, identifying a current location scan order, or a combination thereof.
Identifying the current entropy coding context location may be similar to identifying the current transform coefficient location as shown at 920 in fig. 9, except that the current entropy coding context location may be the entropy coding context location with the largest magnitude. For example, in fig. 10, among the entropy coding context positions indicated by the dotted backgrounds in the third context adaptive scanning order 1024, the entropy coding context position (0,2) with the largest magnitude (0.45) may be identified as the current entropy coding context position.
Identifying a context location for the current entropy coding context location may be similar to identifying a context location as shown at 930 in fig. 9, except that the context location may be identified based on the current entropy coding context location. For example, in fig. 10, in the third context adaptive scan order 1024, the current entropy coding context position may be entropy coding context position (0,2), and the context positions of the current entropy coding context position (0,2) may be identified as context positions (0,0) and (0, 1).
Identifying the context position scan order may be similar to the context scan order identification shown at 940 in fig. 9, except that the context position scan order may be identified for context positions (0,0) and (0,1) of the current entropy coded context position (0, 2). As shown in the third context-adaptive scan order 1024, the upper left entropy coded context position (0,0) in the third context-adaptive scan order 1024 indicates the assigned context-adaptive scan order position (1) that is assigned based on the magnitude of the respective estimated probability. The smallest or lowest (2) unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position for entropy coded context position (0,1), as shown in the third context adaptive scan order 1024.
The current position scan order that identifies the current entropy coding context position (0,2) may be similar to the current position scan order identified at 950 shown in fig. 9, except that the current position scan order may be identified for the current entropy coding context position (0, 2). For example, the smallest or lowest (3) unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position of the current entropy coded context position (0,2), as shown in the third context adaptive scan order 1024.
In the example shown at 1024, the entropy coding unit, such as after assigning the third scanning order to entropy coding context position (0,2), the entropy coding context position (1,0) with the largest magnitude (0.41) among the unassigned entropy coding context positions indicated by the dotted background in the third context adaptation scan order 1024 may be identified as the current entropy coding context position, the context position of the current entropy coding context position (1,0) may be identified as context position (0,0), the entropy coding context position (0,0) may have an assigned context adaptive scan order position (1), and the smallest or lowest (4) unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position for the current entropy coded context position (1,0), as shown in the third context adaptive scan order 1024.
In the example shown in 1024, such as after assigning the fourth scanning order to entropy coding context position (1,0), entropy coding context position (2,0) having the largest magnitude (0.33) among the unassigned entropy coding context positions indicated by the dotted background in the third context adaptation scanning order 1024 may be identified as the current entropy coding context position, context positions (0,0) and (1,0) of the current entropy coding context position (2,0) may have assigned context adaptation scanning order positions, and the smallest or lowest (5) unassigned context adaptation scanning order position may be identified or assigned as the context adaptation scanning order position of the current entropy coding context position (2,0), as shown in the third context adaptation scanning order 1024.
In the example shown in 1024, such as after assigning the fifth scanning order to entropy coding context position (2,0), the entropy coding context position (1,2) with the largest magnitude (0.28) among the unassigned entropy coding context positions indicated by the dotted background in the third context adaptation scanning order 1024 may be identified as the current entropy coding context position, the context positions (0,0), (0,1), (0,2) and (1,0) of the current entropy coding context position (2,0) may have assigned context adaptation scanning order positions, the context position (1,1) of the current entropy coding context position (2,0) may be an unassigned context position, the smallest or lowest (6) unassigned context adaptation scanning order position may be identified as or assigned as an unassigned context position (1,1) and the next smallest or lowest (7) unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position of the current entropy coded context position (1,2), as shown in the third context adaptive scan order 1024.
In the example shown at 1024, the entropy coding unit, such as after assigning the seventh scanning order to entropy coding context position (1,2), the entropy coding context position (2,1) with the largest magnitude (0.26) among the unassigned entropy coding context positions indicated by the dotted background in the third context adaptation scan order 1024 may be identified as the current entropy coding context position, context positions (0,0), (0,1), (1,0), (1,1) and (2,0) of the current entropy coding context position (2,0) may have an assigned context adaptive scan order position, and the next smallest or lowest (8) unassigned context adaptive scan order position may be identified or assigned as the context adaptive scan order position for the current entropy coded context position (2,1), as shown in the third context adaptive scan order 1024.
The fourth context adaptive scan order 1026 includes context adaptive scan order positions assigned for the estimated non-zero coefficient probability matrix 1000, as shown by the second context adaptive scan order 1022, and includes context adaptive scan order positions (9-16) assigned for entropy coded context positions (2,2), (0,3), (3,0), (3,1), (1,3), (3,2), (2,3), and (3,3) assigned based on the magnitudes of the respective estimated probabilities.
The fifth context-adaptive scan order 1028 includes the assigned context-adaptive scan order positions for the estimated non-zero coefficient probability matrix 1000, as shown by the third context-adaptive scan order 1024, and includes the assigned context-adaptive scan order positions (9-16) for the entropy-encoded context positions (2,2), (0,3), (3,0), (3,1), (1,3), (3,2), (2,3), and (3,3) based on the magnitudes of the respective estimated probabilities.
Fig. 11 is a flow diagram of decoding using a context-adaptive scan order for entropy encoding 1100 according to an embodiment of the present disclosure. In some embodiments, decoding using context-adaptive scan order for entropy encoding may be implemented in a decoder, such as decoder 500 shown in fig. 5. For example, the entropy decoding stage 502 of the decoder 500 shown in fig. 5 may implement decoding using the context-adaptive scan order for entropy encoding. Decoding using the context-adaptive scan order for entropy encoding may include receiving an encoded bitstream or a portion thereof at 1110, decoding the current block at 1120, and rendering or storing the decoded video at 1130.
In some implementations, decoding 1120 the current block includes identifying 1122 a context adaptive scan order and entropy decoding 1124 the transform coefficients (or quantized transform coefficients). Identifying a context-adaptive scan order at 1122 may be similar to identifying a context-adaptive scan order for entropy encoding as shown at 900 in fig. 9.
Other embodiments of the context entropy decoding graph as shown in fig. 11 are available. Additional elements of context entropy decoding may be added, certain elements may be combined, and/or certain elements may be removed. For example, in an embodiment, context entropy decoding may include additional elements related to generating entropy coding models.
Context entropy decoding may include storing each decoded coefficient of the block in a decoder coefficient register, which may be stored in a data storage unit, such as memory 204 shown in fig. 2, and identifying the context coefficient at 1120 may include reading the context coefficient from the decoder coefficient register.
The size of the context coefficient register may be a function of the size of the coefficient matrix used for encoding. For example, the coefficient matrix may be an N × M matrix, such as a 32 × 32 matrix, encoded using a non-consecutive coding order, such as the coding order partially shown in fig. 9, and the context coefficient register may include N × M coefficients, such as 1024(32 × 32 ═ 1024) coefficients. In some embodiments, each coefficient may be stored using B bits, such as 3 bits, and the size of the context coefficient register may be B × N × M bits, such as 3072 bits (1024 × 3 bits).
Fig. 12 is an exemplary diagram of a representation of a portion 1200 of a transform coefficient scan pattern for encoding and decoding using efficient context processing in arithmetic coding according to an embodiment of the present disclosure. The scan pattern may be the original scan order or the new scan order described with reference to fig. 13. In some embodiments, efficient context processing in arithmetic coding may include decoding a current coefficient based on a reduced size context coefficient register. For example, efficient context processing in arithmetic coding may include decoding a current coefficient of a 32 x 32 matrix encoded using a non-consecutive coding order, such as the non-consecutive coding order partially shown in fig. 9 or 1200 shown in fig. 12, based on a context coefficient register comprising 87 coefficients.
In an example, the current coefficient 1210 at scan order position 11 may be decoded using a coefficient to the left of the current coefficient, such as coefficient 1220 at scan order position 6, a coefficient above the current coefficient, such as coefficient 1230 at scan order position 7, or a combination thereof. In fig. 12, the current scan order position corresponding to the current coding coefficient is shown with a bold border, the scan order position corresponding to the decoded coefficient is shown with a white background, and the scan order position corresponding to the coding coefficient is shown with a line background.
An example of a portion 1250A of the context coefficient register is shown, which includes coefficients at scan order positions 10, 9, 8, 7, 6, 5, 4, 3,2, 1, and 0. The portion of the context coefficient register after the shift operation is shown at 1250B and includes coefficients at scan order positions 11, 10, 9, 8, 7, 6, 5, 4, 3,2, and 1.
Fig. 13 is a flow diagram of a process 1300 for encoding a quantized transform block of coefficients according to an embodiment of the present disclosure. Process 1300 generates a new scan order from the original scan order. The new scan order is such that a maximum scan distance in the new scan order is less than or equal to a predetermined distance. The new scan order may optimize the codec hardware implementation by limiting the size of the line buffer. The process 1300 includes identifying 1302 an original scan order for encoding coefficients of a quantized transform block, generating 1304 a new scan order from the original scan order, and encoding 1306 the coefficients based on the new scan order.
In this context, "quantized transform block" and "transform block" both encompass quantized and non-quantized transform blocks; both "quantized transform coefficients" and "transform coefficients" encompass quantized and non-quantized transform coefficients. That is, for example, a reference to a "transform coefficient" may be a reference to a quantized transform coefficient, or may be a reference to a non-quantized transform coefficient, depending on whether the codec encodes quantized transform coefficients or non-quantized transform coefficients.
When implemented by an encoder, process 1300 may receive (not shown) a quantized transform block, such as the quantized transform block generated by quantization stage 406 of fig. 4, and encode the quantized transform block in an encoded bitstream, such as compressed bitstream 420 of fig. 4. When implemented by an encoder, "encoding" means encoding in a compressed bitstream.
When implemented by a decoder, process 1300 decodes a block of quantized transform coefficients from an encoded bitstream, such as compressed bitstream 420 of fig. 5. When implemented by a decoder, "encoding" means decoding from a compressed bitstream.
At 1302, process 1300 identifies an original scan order for encoding coefficients of a quantized transform block. The scan order may be identified in any manner. For example, the original scan order may be identified as described with respect to 824 of fig. 8, 940 of fig. 9, or 1124 of fig. 11.
At 1304, process 1300 generates a new scan order from the original scan order. The new scan order is such that the maximum scan distance of the new scan order is less than or equal to the maximum distance. The maximum distance may be a predefined maximum distance. In an example, the process 1300 may generate the new scan order by overwriting (e.g., replacing) the original scan order. In another example, process 1300 may generate the new scan order as a separate data structure from the original scan order.
At 1306, process 1300 encodes the transform coefficients based on (i.e., using) the new scan order. When implemented by an encoder, the encoding 1306 may be or may be similar to the transmission or storage of the output bitstream at 830 of fig. 8. When implemented by a decoder, the encoding 1306 may be or may be similar to decoding the current block at 1120 of FIG. 11.
Returning to generating the new scan order from the original scan order, at 1304, the new scan order can be generated from the original scan order. As described above, the scan distance of a coefficient (i.e., scan _ distance) may be defined as the maximum difference between the scan index of the coefficient (i.e., scan _ idx) and the scan index of the context neighbor of the coefficient (i.e., neighbor _ scan _ idx). Context neighbors are coefficients of a transform block that can be used as context to determine a probability model for entropy coding the coefficients. The scan index of the coefficients can be determined using equation 1:
scan_distance＝scan_idx-neighbor_scan_idx (1)
for example, and referring to fig. 12, the scan distance of current coefficient 1210 is the maximum of the scan distance of current coefficient 1210 relative to coefficients 1220 and 1230, where coefficients 1220 and 1230 are the context coefficients used to encode current coefficient 1210. Thus, the scan distance of the current coefficient 1210 may be given by max (11-7,11-6) ═ max (4,5) ═ 5.
The maximum scan distance of the new scan order is the maximum of the scan distances of some of the coefficients in the new scan order (i.e., the maximum of the respective scan distances of at least some of the coefficients); also, as described above, the scan distance of a coefficient is the maximum of the scan distances between the coefficient and each of its context coefficients (i.e., the maximum of the respective scan distances between the coefficient and each of its context coefficients). In an embodiment, a scan distance smaller than all transform coefficients is used to determine the maximum scan distance of the scan order. For example, the scan distance of zero transform coefficients beyond the end-of-block transform coefficient is not used. In an embodiment, the maximum scan distance may be determined using the scan distance of each of the coefficients of the transform block.
Generating the new scan order from the original scan order may include assigning a new respective scan index in the new scan order to at least some of the coefficients. That is, process 1300 may assign a new scan index in the new scan order to each of the transform coefficients. The new scan index may be the same or different scan index as the scan index in the original scan order.
In an example, the process 1300 may modify the original scanning order (e.g., org _ scan _ arr [ ]) to the new scanning order (e.g., new _ scan _ arr [ ]) such that the scanning distance between each coefficient and its context neighbor is less than or equal to a predetermined distance (e.g., max _ distance). The original scan order (e.g., org _ scan _ arr [ ]) and the new scan order (e.g., new _ scan _ arr [ ]) may be a one-dimensional array that maps the scan index (scan _ idx) to the coefficient index (coeff _ idx).
For example, referring to fig. 7, the coefficients of the transform block 700 may be converted into coefficient indices according to a raster scan order using the following formula:
coeff_idx＝coefficient_row*transform_block_width+coefficient_col
for example, the coefficient index (coeff _ idx) of the coefficient 701 of fig. 7 (which is at column index 1 and row index 2 of the transform block 700) may be given by coeff _ idx-2 × 4+ 1-9. Thus, when the vertical scan order 704 is used, org _ scan _ arr [6] ═ 9 (i.e., scan position 705). That is, scan position 6 (i.e., scan position 705) contains a coefficient having coeff _ idx 9 (i.e., coefficient 701).
In an embodiment, process 1300 may access the scan positions of the original scan order sequentially (i.e., from 0 to the number of coefficients in the transform block) to generate a new scan order. Process 1300 may use a queue that keeps track of coefficients (including references thereto) that have at least one context neighbor already scanned. The context neighbors are as described above with respect to the context coefficients. That is, "context neighbors" and "context coefficients" may be used interchangeably in the context of process 1300. "context neighbors that have been scanned" means transform coefficients that have been assigned a scan position in the new scan order. When a coefficient is assigned to a scan index in the new scan order (i.e., when the coefficient is processed), coefficients that are its context neighbors are pushed into the queue.
For example, and referring to fig. 12, and where the left and upper neighbors of a coefficient are used as context neighbors, coefficient 1230 is a context neighbor of coefficients 1210 and 1231. This is because coefficient 1230 is the upper neighbor of coefficient 1210 and is the left neighbor of coefficient 1231. In other words, coefficient 1210 is the coefficient immediately below coefficient 1230, and coefficient 1231 is the coefficient immediately to the right of coefficient 1230. Thus, when process 1300 assigns a new index to coefficient 1230, process 1300 may push (i.e., add) coefficients 1210 and 1231 to the queue. Also, for purposes of illustration, the top and right neighbors are used as context coefficients. However, the present disclosure is not limited thereto. The context coefficient may be any other coefficient.
The queue may be used to monitor the scan distance of the coefficients in the queue relative to the next scan position to be assigned to the coefficients in the new scan order. As described above, the scan positions of the original scan order are sequentially processed. However, before assigning a new scan position in the new scan order to a coefficient, the process 1300 determines whether the queue head coefficient (i.e., the coefficient at the head of the queue) has a scan distance that exceeds the limit (i.e., the conservative maximum distance). The limit may be a safety limit that is less than a predetermined distance. If the conservative maximum distance is to be exceeded, process 1300 may process those coefficients in the queue that are to exceed the conservative maximum distance before processing the coefficients suggested by the original scan order.
The conservative maximum distance may be used to account for situations where multiple coefficients may pop off the queue. As described further below, popping a coefficient from a queue means that the coefficient is removed from the queue and assigned a new scan position in a new scan order. Coefficients that share neighbors of the same context in the queue (i.e., co-parent coefficient) are popped from the queue together with the parent coefficient. Popping up with the parent coefficient prevents the maximum scan distance of the new scan order from exceeding a predetermined distance. As each co-parent coefficient pops out of the queue, the maximum scan distance in the new scan order approaches the predetermined distance by 1. In this way, the conservative maximum distance is used to begin assigning new scan positions to coefficients in the queue to circumvent the situation where the scan distances (in the new scan order) of the coefficients would exceed a predetermined distance if the coefficients were later assigned new scan positions.
To reiterate, when the safety limit (conservative maximum distance) is exceeded, it may be desirable to assign the next scan position value (and potentially subsequent scan position values) to a coefficient in the queue, rather than assigning the next scan position value (i.e., the next scan position to be assigned) to a coefficient that is not in the queue.
The maximum number of coefficients that share the same neighbor _ scan _ idx with its previous coefficient in the queue (i.e., max _ accumulated _ scan _ distance) can be given by equation (2):
max_increased_scan_distance＝ceiling(max_unscanned_neighbors*(max_context_neighbors-1)/max_context_neighbors) (2)
Generating the new scan order may include assigning the new scan index to a current coefficient that is immediately followed by a next coefficient in the original scan order and is a context coefficient for entropy encoding another coefficient, the next scan index being assigned to the another coefficient before the next scan index is assigned to the next coefficient on a condition that a scan distance of the another coefficient is greater than or equal to a conservative maximum distance.
Generating the new scan order may include assigning the new scan index to a current coefficient that is preceded by a previous coefficient in the original scan order, identifying that the previous coefficient is a coefficient above and below it, and assigning a next scan index to the coefficient before assigning the next scan index to a further coefficient after the current coefficient on a condition that a scan distance of the coefficient is greater than or equal to a conservative maximum distance.
The conservative maximum distance can be given by the following equation (3):
conserve_max_distance＝max_distance-ceiling(max_unscanned_neighbors*(max_context_neighbors-1)/max_context_neighbors)
in equation (3), max _ context _ neighbors is the maximum number of coefficients that use the same coefficient as context information; max _ distance is the predetermined distance as described above; max _ unscanned _ neighbors is the maximum number of coefficients that can be contained in the queue. That is, max _ unscanned _ neighbors is the maximum number of unscanned (i.e., not yet processed) coefficients for which at least one context coefficient has been scanned (i.e., processed). For example, in the case where the upper and left side coefficients are used as context coefficients, max _ unscanned _ neighbors can be given by equation (4):
max_unscanned_neighbors＝tx_width+tx_height-2 (4)
in equation (4), tx _ width is the width of the transform block and tx _ height is the height of the transform block. Equation (4) reflects the constraint of the original scan order, i.e., when scanning a coefficient, its left and top neighbors have been previously scanned. That is, it is desirable to scan the context coefficients before the current coefficient is encoded.
Fig. 14 is an illustration of examples 1400 and 1410 of the maximum number of coefficients that may be in a queue according to an embodiment of the disclosure. Examples 1400 and 1410 depict a transform block with a width (tx _ width) of 8 and a height (tx _ height) of 4. In example 1400, the shaded blocks as block 1402 are scanned (i.e., processed) coefficients, and the shaded blocks as block 1404 are unscanned coefficients (i.e., coefficients in a queue) having at least one scan context neighbor. As can be seen from example 1400, there are a total of 9 unscanned coefficients. On the other hand, in the example 1410, which shows the maximum number of unscanned coefficients, there are 21 scanned coefficients 1412 and 10 (i.e., 8+4-2) unscanned coefficients 1414.
Pseudo code is now presented for an example function (limit _ neighbor _ distance) that modifies the scan order to limit the scan distance.
The function takes as input the original scan order (org _ scan _ arr), the width of the transform block (tx _ width), the height of the transform block (tx _ height), the maximum number of coefficients using the same neighboring coefficients as context information (max _ context _ neighbors), and a predetermined distance (max _ distance) that is the desired maximum difference between each coefficient and its context neighbor's scan index. This function generates as output a new scan order array (new _ scan _ arr).
This function uses as variables the number of coefficients in the transform block (coeff num), the scan index to be assigned in the new scan order (new scan arr) (new scan idx), the queue for storing coefficients (queue) so that each coefficient has at least one scanned context neighbor, an array indicating the processing state of the coefficients of the transform block (accessed), max _ unscanned _ neighbors as described above with reference to fig. 14, and constant _ max _ distance as described above with reference to fig. 13.
In the queue, the coefficients are stored as "item (item)" objects containing the parent scan index of the coefficient (i.e. the scan index of the context coefficient of the coefficient) and the coefficient index of the coefficient itself in the new scan order (neighbor _ scan _ idx); top indicates the item to be popped from the queue (i.e., the head of the queue); pop () pops (i.e., removes and returns) the head entry from the queue; push (item) pushes (adds to the head of the queue) the item. For an accessed array, the NOT _ VISIBITED value at the coefficient index indicates that the coefficient is NOT SCANNED and NOT IN the QUEUE, while the "IN _ QUEUE" value indicates that the coefficient is IN the QUEUE, and the "SCANNED" value indicates that the coefficient has been assigned a new scan index IN a new scan order. The limit _ neighbor _ distance () function may be as follows:
the function limit _ neighbor _ distance () uses the auxiliary function assign _ scan _ index (). The function assign _ scan _ index to the position corresponding to the coefficient index (coeff _ idx) new _ scan _ index in the new scan order. After assigning scan _ id, the function pushes coefficients into the queue using the coefficient at coeff _ idx as context information. The coefficients that use the coefficient at coeff _ idx as context information are called neighbors in assign _ scan _ index. The function assign _ scan _ index () takes as input the coefficient index (coeff _ idx), the scan index to be assigned in the new scan order (new _ scan _ idx), the new scan order array (new _ scan _ arr), the transform block width (tx _ width), and the transform block height (tx _ height).
assign _ scan _ index () generates or modifies as output the scan index (new _ scan _ idx), new scan order array (new _ scan _ arr), queue (queue) and accessed array to be assigned. The assign _ scan _ index () function can be shown as follows:
embodiments according to the present disclosure may generate a new scan order such that a maximum scan distance in the new scan order is less than or equal to a desired predetermined distance (e.g., max distance). Since there may be more than one coefficient in the queue sharing the same neighbor scan index, a conservative maximum distance as discussed above may be used to ensure that scan positions may be assigned to entries on the queue (i.e., processing coefficients on the queue) such that the maximum scan distance does not exceed the desired predetermined distance. As such, the conservative maximum distance may be used as a trigger and safety limit to begin assigning scan positions to entries in the queue.
Table I below gives a hypothetical example of a queue entry. The example of table I assumes that the maximum number of coefficients (max _ context _ neighbors) using the same neighbor coefficients as context information is 2, the maximum number of unscanned (i.e., not yet processed) coefficients for which at least one context coefficient has been scanned is 8 (hence, the queue is considered to be full because it includes 8 entries), the conservative maximum distance (conservative _ max _ distance) is 10, and the desired predetermined distance (max _ distance) is 14 (calculated according to equation (3)).
TABLE I
The "pop order" column shows the queue position. Pop order 0 refers to the head of the queue (first entry). The head of the queue is the next entry to pop from the queue. The shaded column of table I indicates the coefficient (neighbor _ scan _ idx) that shares the same context coefficient with the coefficient to the left of it. For example, the coefficients at queue pop order positions 0 and 1 share the same context coefficient, i.e., the context coefficient with scan position 7 in the new scan order.
Scanning positions are assigned to coefficients on the queue according to embodiments of the present disclosure such that the maximum scanning distance does not exceed a predetermined distance. The coefficients in the queue are processed when the scan distance of the queue head coefficient exceeds or equals the conservative maximum distance. Thus, the scan positions are assigned in the new scan order, as shown by the row scan _ idx. The coefficient at queue position 0 (pop-up order 0) is assigned to scan position 17 in the new scan order (scan _ idx 17); the coefficient at queue position 1 (pop order 1) is then popped from the queue and assigned to the next scanning position 18; and so on. The row scan _ distance of table I shows the scan distance based on the assigned scan position (i.e., scan _ idx-neighbor _ scan _ idx). It can be seen that the minimum scan distance corresponds to a conservative maximum distance (i.e., 10) because the coefficient at pop position 0 is the first pop queue. It can also be seen that the maximum scanning distance (i.e. 14) is assigned to the coefficient at the ejection position 7. The maximum scanning distance does not exceed a predetermined distance (max _ distance 14).
The words "example" or "embodiment" as used herein are intended to be used as an example, instance, or illustration. Any aspect or design described herein as "exemplary" or "embodiment" is not necessarily to be construed as preferred or advantageous over other aspects or designs. Rather, the word "example" or "implementation" is used to present concepts in a concrete fashion. As used in this application, the term "or" is intended to mean an inclusive "or" rather than an exclusive "or". That is, unless otherwise indicated, or clear from context, "X comprises a or B" is intended to mean any of the natural inclusive permutations. That is, if X comprises A; x comprises B; or X includes both A and B, then "X includes A or B" is satisfied under any of the foregoing circumstances. In addition, the articles "a" and "an" as used in this application and the appended claims should generally be construed to mean "one or more" unless specified otherwise or clear from context to be directed to a singular form. Furthermore, unless so described, the use of the term "embodiment" or "one embodiment" throughout does not mean the same embodiment or implementation.
Embodiments of transmitting station 102 and/or receiving station 106 (as well as algorithms, methods, instructions, etc. stored thereon and/or executed thereby, including by encoder 400 and decoder 500) may be implemented in hardware, software, or any combination thereof. The hardware may include, for example, a computer, an Intellectual Property (IP) core, an Application Specific Integrated Circuit (ASIC), a programmable logic array, an optical processor, a programmable logic controller, microcode, a microcontroller, a server, a microprocessor, a digital signal processor, or any other suitable circuitry. In the claims, the term "processor" should be understood to encompass any of the aforementioned hardware, alone or in combination. The terms "signal" and "data" are used interchangeably. Moreover, portions of transmitting station 102 and receiving station 106 may not be implemented in the same manner.
Further, in an aspect, for example, transmitting station 102 or receiving station 106 may be implemented using a general purpose computer or general purpose processor having a computer program that, when executed, performs any of the respective methods, algorithms, and/or instructions described herein. Additionally or alternatively, for example, a special purpose computer/processor may be utilized which may contain other hardware for performing any of the methods, algorithms, or instructions described herein.
Transmitting station 102 and receiving station 106 may be implemented on computers in a video conferencing system, for example. Alternatively, the transmitting station 102 may be implemented on a server and the receiving station 106 may be implemented on a device separate from the server, such as a handheld communication device. In this case, transmitting station 102 may encode the content into an encoded video signal using encoder 400 and transmit the encoded video signal to the communication device. The communication device may then decode the encoded video signal using the decoder 500. Alternatively, the communication device may decode content stored locally on the communication device, e.g., content that was not transmitted by the transmitting station 102. Other transmitting station 102 and receiving station 106 implementations are available. For example, the receiving station 106 may be a generally stationary personal computer rather than a portable communication device, and/or a device including the encoder 400 may also include the decoder 500.
Furthermore, all or portions of embodiments of the present disclosure may take the form of a computer program product accessible from, for example, a tangible computer-usable or computer-readable medium. A computer-usable or computer-readable medium may be any apparatus that can, for example, tangibly contain, store, communicate, or transport the program for use by or in connection with any processor. The medium may be, for example, an electronic, magnetic, optical, electromagnetic, or semiconductor device. Other suitable media are also available.
The above-described embodiments, implementations, and aspects have been described in order to facilitate understanding of the present disclosure, and do not limit the present disclosure. On the contrary, the disclosure is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims, which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structures as is permitted under the law.
Claims (14)
1. A method for encoding a transform block of coefficients of a block of video data, comprising:
identifying an original scan order for encoding the coefficients, the scan order for generating a one-dimensional array of transform coefficients from a block of transform coefficients, wherein a scan index of a coefficient represents a position of a transform coefficient in the scan order;
generating a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, wherein a scan distance of a coefficient is a maximum difference between a scan index of the coefficient and a scan index of the coefficient used as a context for entropy encoding the coefficient, and a maximum scan distance in a scan order is a maximum scan distance among all coefficients using the scan order; and
encoding the coefficients based on the new scan order;
wherein generating the new scan order comprises:
assigning a new scan index to a current coefficient, the current coefficient immediately following a next coefficient in the original scan order, and the current coefficient being a coefficient for entropy encoding a context of another coefficient; and
in a state where the scan distance of the other coefficient is greater than or equal to the maximum distance smaller than the predetermined distance, a next scan index in the new scan order is assigned to the other coefficient before assigning the scan index in the new scan order to the next coefficient.
2. The method of claim 1, wherein the predetermined distance is a size of a line buffer used to buffer the encoded transform coefficients.
3. The method of claim 1, wherein generating the new scan order from the original scan order comprises:
assigning respective scan indices to at least some of the coefficients in the new scan order.
4. The method of claim 1, wherein the coefficient is a coefficient immediately below or to the right of the current coefficient in the transform block.
5. The method of any of claims 1 to 4, wherein:
the maximum scan distance is a maximum of respective scan distances of at least some of the coefficients, and
the respective scan distance of a coefficient is a maximum of the respective scan distances between the coefficient and each of the coefficients used as contexts for entropy encoding the coefficient.
6. An apparatus for encoding a transform block of coefficients of a block of video data, comprising:
a processor configured to:
identifying an original scan order for encoding the coefficients, the scan order for generating a one-dimensional array of transform coefficients from a block of transform coefficients, wherein a scan index of a coefficient represents a position of a transform coefficient in the scan order;
generating a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, wherein a scan distance of a coefficient is a maximum difference between a scan index of the coefficient and a scan index of the coefficient used as a context for entropy encoding the coefficient, and a maximum scan distance in a scan order is a maximum scan distance among all coefficients using the scan order; and
encoding the coefficients in an encoded bitstream based on the new scan order;
wherein to generate the new scan order, the processor is configured to:
assigning a new scan index to a current coefficient, wherein the current coefficient is preceded by a previous coefficient in the original scan order;
identifying a coefficient that uses the previous coefficient as a context for entropy encoding the coefficient; and
in a state where a scan distance of the coefficient is greater than or equal to a maximum distance smaller than the predetermined distance, a next scan index in the new scan order is assigned to the coefficient before assigning a scan index in the new scan order to another coefficient after the current coefficient.
7. The apparatus of claim 6, wherein the predetermined distance is a size of a line buffer used to buffer the encoded transform coefficients.
8. The apparatus of claim 6 or 7, wherein generating the new scan order from the original scan order comprises:
assigning respective scan indices to at least some of the coefficients in the new scan order.
9. The apparatus of claim 6, wherein the coefficient is a coefficient immediately below or to the right of the current coefficient in the transform block.
10. The apparatus of claim 6, wherein:
the maximum scan distance is a maximum of respective scan distances of at least some of the coefficients, and
the respective scan distance of a coefficient is the maximum of the respective scan distances between the coefficient and each of the coefficients used to entropy encode the coefficient.
11. An apparatus for decoding a transform block of coefficients of video data, comprising:
a processor configured to:
identifying an original scan order for decoding the coefficients, the scan order being for reconstructing a transform block of coefficients from a one-dimensional array of transform coefficients, wherein a scan index of a coefficient represents a position of a transform coefficient in the scan order;
generating a new scan order from the original scan order such that a maximum scan distance of the new scan order is less than or equal to a predetermined distance, wherein a scan distance of a coefficient is a maximum difference between a scan index of the coefficient and a scan index of the coefficient used as a context for entropy encoding the coefficient, and a maximum scan distance in a scan order is a maximum scan distance among all coefficients using the scan order; and
decoding the coefficients from an encoded bitstream based on the new scan order;
wherein to generate the new scan order, the processor is configured to:
assigning a new scan index to a current coefficient, wherein the current coefficient is preceded by a previous coefficient in the original scan order;
identifying a coefficient that uses the previous coefficient as a context for entropy encoding the coefficient; and
in a state where a scan distance of the coefficient is greater than or equal to a maximum distance smaller than the predetermined distance, a next scan index in the new scan order is assigned to the coefficient before assigning a scan index in the new scan order to another coefficient after the current coefficient.
12. The apparatus of claim 11, wherein the predetermined distance is a size of a line buffer used to buffer the encoded transform coefficients.
13. The apparatus of claim 11, wherein generating the new scan order from the original scan order comprises:
assigning respective scan indices to at least some of the coefficients in the new scan order.
14. The apparatus of any of claims 11 to 13, wherein:
the maximum scan distance is a maximum of respective scan distances of at least some of the coefficients, and
the respective scan distance of a coefficient is a maximum of the respective scan distances between the coefficient and each of the coefficients used as contexts for entropy encoding the coefficient.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762545570P | 2017-08-15 | 2017-08-15 | |
US62/545,570 | 2017-08-15 | ||
US15/950,225 US10326994B2 (en) | 2017-08-15 | 2018-04-11 | Modifying a scan order to limit scan distance |
US15/950,225 | 2018-04-11 | ||
PCT/US2018/031234 WO2019036077A1 (en) | 2017-08-15 | 2018-05-04 | Modifying a scan order to limit scan distance |
Publications (2)
Publication Number | Publication Date |
---|---|
CN110710206A CN110710206A (en) | 2020-01-17 |
CN110710206B true CN110710206B (en) | 2022-08-02 |
Family
ID=65360901
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201880037152.5A Active CN110710206B (en) | 2017-08-15 | 2018-05-04 | Method and apparatus for modifying scan order to limit scan distance |
Country Status (4)
Country | Link |
---|---|
US (2) | US10326994B2 (en) |
EP (1) | EP3669541A1 (en) |
CN (1) | CN110710206B (en) |
WO (1) | WO2019036077A1 (en) |
Families Citing this family (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6963182B2 (en) * | 2018-05-22 | 2021-11-05 | 日本電信電話株式会社 | Optical communication system, optical transmitter and optical receiver |
CN110798688A (en) * | 2019-11-20 | 2020-02-14 | 珠海市长盛电线电缆有限公司 | High-definition video compression coding system based on real-time transmission |
US11368694B1 (en) | 2021-01-26 | 2022-06-21 | Meta Platforms, Inc. | Architecture for rate estimation in video coding |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5721822A (en) | 1995-07-21 | 1998-02-24 | Intel Corporation | Run-length encoding/decoding video signals using scan patterns explicitly encoded into bitstreams |
US8824553B2 (en) * | 2003-05-12 | 2014-09-02 | Google Inc. | Video compression method |
US8428133B2 (en) * | 2007-06-15 | 2013-04-23 | Qualcomm Incorporated | Adaptive coding of video block prediction mode |
US9641846B2 (en) * | 2010-10-22 | 2017-05-02 | Qualcomm Incorporated | Adaptive scanning of transform coefficients for video coding |
US9781424B2 (en) * | 2015-01-19 | 2017-10-03 | Google Inc. | Efficient context handling in arithmetic coding |
-
2018
- 2018-04-11 US US15/950,225 patent/US10326994B2/en active Active
- 2018-05-04 EP EP18726675.4A patent/EP3669541A1/en not_active Withdrawn
- 2018-05-04 CN CN201880037152.5A patent/CN110710206B/en active Active
- 2018-05-04 WO PCT/US2018/031234 patent/WO2019036077A1/en unknown
-
2019
- 2019-05-03 US US16/402,411 patent/US10523944B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
WO2019036077A1 (en) | 2019-02-21 |
EP3669541A1 (en) | 2020-06-24 |
US10523944B2 (en) | 2019-12-31 |
US20190058883A1 (en) | 2019-02-21 |
CN110710206A (en) | 2020-01-17 |
US20190268598A1 (en) | 2019-08-29 |
US10326994B2 (en) | 2019-06-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN107347159B (en) | Method and equipment for coding and decoding video bit stream | |
CN107027038B (en) | Dynamic reference motion vector coding mode | |
US10484707B1 (en) | Dynamic reference motion vector coding mode | |
CN110679148A (en) | Method and apparatus for coding blocks of video data | |
GB2550995A (en) | Block size adapative directional intra prediction | |
CN107231557B (en) | Encoding, decoding methods and apparatus for intelligent reordering in recursive block partitioning for advanced intra prediction in video coding | |
CN110800299A (en) | Scan order adaptation for entropy coding of blocks of image data | |
US9392288B2 (en) | Video coding using scatter-based scan tables | |
WO2019152570A9 (en) | Efficient context model computation design in transform coefficient coding | |
CN110710206B (en) | Method and apparatus for modifying scan order to limit scan distance | |
US11917156B2 (en) | Adaptation of scan order for entropy coding | |
US10951894B2 (en) | Transform block-level scan order selection for video coding | |
WO2018222238A1 (en) | Improved coding of intra-prediction modes | |
CN112040230B (en) | Method for encoding a current block of image or video data | |
GB2547754A (en) | Dynamic reference motion vector coding mode |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |