US9600520B2 - Method and system for prospective search query management - Google Patents
Method and system for prospective search query management Download PDFInfo
- Publication number
- US9600520B2 US9600520B2 US14/274,803 US201414274803A US9600520B2 US 9600520 B2 US9600520 B2 US 9600520B2 US 201414274803 A US201414274803 A US 201414274803A US 9600520 B2 US9600520 B2 US 9600520B2
- Authority
- US
- United States
- Prior art keywords
- search query
- prospective search
- prospective
- input
- query
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
-
- G06F17/30386—
Definitions
- the present disclosure is related generally to prospective searching and, more particularly, to managing prospective search queries.
- the search application In a search application that uses retrospective search techniques, such as a Google search, the search application initially builds an index of data to be searched at a later time.
- the index may be updated as new data is provided. While the index allows for efficient searches when a search query is provided, the need to index the data before executing the search query increases the complexity and expense of some real-time applications.
- the search queries In order to obtain a real-time or near real-time result for several search queries, the search queries must be executed separately against a potentially large index with repetitions for each update to the index.
- prospective search techniques entail the comparing of continuous input streams of data sets against a set of predefined queries, as a result of which each data set of the stream may be matched to one or more of the predefined queries. Based on the matching of a data set to one or more of the queries, certain predefined actions corresponding to the matched queries may then be triggered.
- a prospective search query is an anticipatory query that is defined prior to the arrival of data and may act as a “selector” for the subsequent stream of incoming data sets. The matching is performed on the arrival of a data set in the stream and an action associated with a query is performed if the data set matches that query.
- a mobile device e.g., a client
- an update server e.g., a server
- several software updates or configuration settings for mobile devices may be maintained on the server while only certain updates or settings are needed by a given device.
- the data set for a mobile device matches more than one predefined query, as a result of which a repetitive set of predefined actions (e.g., transmission of an over-the-air software update or updated device configuration settings to the mobile device) would be triggered.
- FIG. 1 is a block diagram illustrating a system for managing prospective queries, according to an embodiment
- FIG. 2 is a flowchart of a method for managing prospective queries that may be performed by the system of FIG. 1 , according to an embodiment
- FIG. 3 is a diagram of prospective search queries that may be managed using the method of FIG. 2 , according to an embodiment.
- FIG. 4 is another diagram of prospective search queries that may be managed using the method of FIG. 2 , according to an embodiment.
- the present disclosure describes methods and devices for management of prospective search queries.
- Various embodiments provide a method and system for reducing non-mutually exclusive data queries during a prospective search process.
- redundant effects or search hits may be reduced by providing an indication of those prospective search queries that are not mutually exclusive.
- it is determined whether there are “duplicates” of the query. Duplicate queries exist where for a given data set, there is more than one query that matches the data set, therefore performing multiple actions for that data set.
- One embodiment includes a method for managing prospective search queries.
- a first prospective search query is received.
- a first sample data set is determined based on a union of the first prospective search query and a second prospective search query.
- An indication that the first prospective search query is not mutually exclusive with the second prospective search query is provided if the first sample data set matches the second prospective search query.
- Another embodiment includes a method for managing prospective search queries.
- An input prospective search query is received.
- the input prospective search query is compared with one or more prospective search queries of a stored set of prospective search queries.
- An indication is provided if the input prospective search query is not mutually exclusive with the stored set based on the comparison.
- the input prospective search query is added to the stored set if the input prospective search query is mutually exclusive with the stored set.
- Yet another embodiment includes a system for processing prospective search queries.
- the system includes a query server with a processor and memory.
- the query server stores a stored set of prospective search queries.
- the query server compares the input prospective search query with one or more prospective search queries of the stored set.
- the query server provides an indication if the input prospective search query is not mutually exclusive with the stored set based on the comparison.
- the query server adds the input prospective search query to the stored set if the input prospective search query is mutually exclusive with the stored set.
- the query server processes a stream of data sets with the stored set of prospective search queries.
- the system 100 includes an electronic device that performs, stores, or manages prospective search queries (“queries”), such as a query server 120 .
- the query server 120 performs prospective search queries on (e.g., processes) one or more data sets, such as a stream of data sets.
- the query server 120 includes a processor 121 and a memory 122 , as described herein.
- Examples of the query server 120 include an application server, web server, database server, or other network entity accessible either directly or indirectly via one or more intermediate devices or networks (e.g., via a WLAN access point, the Internet, LTE network, or other network).
- the query server 120 is implemented as a cloud server 125 or portion thereof that provides a cloud service.
- the system 100 may further include a content server 130 , a remote terminal 140 , and a set of mobile devices 150 .
- the content server 130 includes a processor 131 and a memory 132 , as described herein. Examples of the content server 130 include an application server, web server, database server, or other network entity accessible either directly or indirectly via one or more intermediate devices or networks (e.g., via a WLAN access point, the Internet, LTE network, or other network). In other implementations, the content server 130 is implemented as a cloud server 125 or portion thereof that provides a cloud service.
- the content server 130 stores content updates for the set of mobile devices 150 , such as software updates, firmware updates, configuration information, or other data.
- the content server 130 may send content updates to one or more of the set of mobile devices 150 upon an instruction from the query server 120 . For example, if a data set from a mobile device matches a query, the query server 120 may trigger the content server 130 to send a content update to the mobile device.
- Examples of the remote terminal 140 include a work station, computer, smartphone, or other electronic device capable of providing a user interface.
- the query server 120 may include a user interface 123 .
- the set of mobile devices 150 includes mobile devices 152 , 154 , and 156 .
- additional or fewer mobile devices may be present.
- Examples of the mobile devices 152 , 154 , and 156 include, but are not limited to, mobile devices, smart phones, smart watches, wireless devices, tablet computing devices, personal digital assistants, personal navigation devices, touch screen input device, touch or pen-based input devices, portable video and/or audio players, and the like.
- the mobile device 100 may take the form of a variety of form factors, such as, but not limited to, bar, tablet, flip/clam, slider, rotator, and wearable form factors.
- One or more of the query server 120 , the content server 130 , the remote terminal 140 , or the set of mobile devices 150 are communicatively coupled, for example, by communication links 160 , 161 , 162 , or 163 .
- Examples of the communication links 160 , 161 , 162 , or 163 include wired networks (e.g., local area networks, wide area networks, the Internet), wireless networks (e.g., IEEE 802.11, Bluetooth, infrared, cellular, or other radio frequency networks), or combinations thereof.
- the query server 120 , the content server 130 , the remote terminal 140 , or the set of mobile devices 150 may communicate over the communication links 160 , 161 , 162 , or 163 using standard interfaces, or proprietary interfaces.
- the query server 120 , the content server 130 , the remote terminal 140 , or the set of mobile devices 150 may also be configured for secure or encrypted communications over one or more of the communication links 160 , 161 , 162 , or 163 .
- the query server 120 may receive the queries from a user of the remote terminal 140 , from a user of the mobile devices 152 , 154 , or 156 , a service provider, network operator, or other sources (e.g., from a content server).
- the query server 120 may receive the stream of data sets from the set of mobile devices 150 or other network entities.
- the query server 120 may receive one or more data sets per mobile device at a same time or over a period of time.
- the query server 120 Upon receipt of a data set, the query server 120 performs one or more of the queries (e.g., compares the query to a data set) and determines whether the data set matches the queries. If a query matches the data set, the query server 120 may provide or store an indication of the match, perform an action that corresponds to the matched query, or take some other action. Examples of actions for queries include sending messages or data to the mobile device, such as over-the-air updates, updates to settings of a mobile device, freeform notifications, or other data. For example, the query server 120 may receive a data set with configuration information for the mobile device 152 when the mobile device 152 registers with a mobile network (not shown).
- the configuration information may include an operating system version for the mobile device 152 and the queries may correspond to updates to the operating system. Accordingly, if one of the queries matches the operating system version, the query server 120 may provide or trigger a software update to the mobile device 152 .
- Other examples of data sets, queries, and actions will be apparent to those skilled in the art.
- flowchart 200 illustrates one example of a process flow for managing prospective search queries that may be performed by the system 100 (e.g., by the query server 120 ).
- the query server 120 stores a stored set of prospective search queries for comparison to a data set.
- the stored set of queries may be queries that were previously entered by a user, loaded from a configuration file, or otherwise received by the query server 120 .
- the query server 120 receives ( 210 ) a first query (e.g., an input prospective search query), for example, from a user of the remote terminal 140 .
- the first query includes one or more first keys with corresponding first values.
- the query server 120 selects ( 220 ) a second query (e.g., a selected prospective search query) from the stored set of queries.
- the second query includes one or more second keys with corresponding second values.
- the query server 120 determines ( 230 ) a sample data set (e.g., a partial data set) based on a union of the first query and the second query.
- the sample data set includes keys with corresponding values.
- the query server 120 determines the keys for the sample data set as a union of the first keys and the second keys such that the sample data set does not contain duplicate keys.
- the sample data set is thus a “superset” with a condition that, for any individual key, if the same key exists in both the first query and the second query, then the value from the first query is selected for the sample data set.
- the query server 120 determines a corresponding value for each key of the first sample data set as the corresponding second value for the key if the first prospective search query does not contain the key and as the corresponding first value for the key if the first prospective search query contains the key.
- the query server 120 determines ( 240 ) whether the sample data set matches the second query. If the sample data set matches the second query and thus the first query is not mutually exclusive with the second query (YES at 240 ), the query server 120 provides ( 250 ) an indication that the first query is not mutually exclusive with the second query if the first sample data set matches the second query. To provide the indication, the query server 120 in one example stores the first query with a duplication flag that indicates that the first query is not mutually exclusive with the second query. In another example, the query server 120 sends a notification to the user that entered the first query. The notification indicates that the first query is not mutually exclusive with the second query.
- the query server 120 determines whether additional queries of the stored set of queries are available. If additional queries are available (YES at 260 ), the query server 120 returns to select ( 220 ) another query (e.g., a third query) from the stored set of queries, determine ( 230 ) another sample data set (e.g., a second sample data set), and determine ( 240 ) whether the second sample data set matches the third query. If no additional queries are available from the stored set of queries (NO at 260 ), the first query has been found to be mutually exclusive with each query of the stored set of queries. The query server 120 then adds ( 270 ) the first query to the stored set of queries. The query server 120 may then use the first query when processing the stream of data sets.
- another query e.g., a third query
- a new query may be added to the stored set before the new query has been compared against each other query of the stored set. For example, if the stored set is large, it may be desirable to add the new query to the stored set while performing the comparisons in a background operation. In this case, the query server 120 may disable the new query upon a determination that the new query is not mutually exclusive with the stored set.
- the query server 120 stores a query 320 that corresponds to a first action “UPDATE 1.”
- the query server 120 unions the query 320 with the query 330 to create a sample data set 340 (e.g., a “superset”) with the condition that, for any individual key, if the same key exists in query 320 and query 330 then the value from the query 330 is used in the sample data set 340 .
- query 330 is a non-duplicating query (i.e., mutually exclusive).
- the query server 120 in one example stores the query 320 that corresponds to the first action “UPDATE 1.”
- the sample data set 440 matches the query 320 , which indicates that query 430 “duplicates” or is not mutually exclusive with query 320 .
- the query server 120 thus provides the indication that the query 430 is not mutually exclusive.
- the query server 120 checks the new query against the stored set of queries before the new query is added to the stored set of queries to reduce the occurrence for duplicate actions. While the above-mentioned examples use AND operators to join the keys of the queries, other Boolean, algebraic, or mathematical operators may be used, such as OR, greater than, less than, greater than or equal to, and other operators as will be apparent to those skilled in the art.
- the apparatus described herein may include a processor, a memory for storing program data to be executed by the processor, a permanent storage such as a disk drive, a communications port for handling communications with external devices, and user interface devices, including a display, touch panel, keys, buttons, etc.
- these software modules may be stored as program instructions or computer readable code executable by the processor on a non-transitory computer-readable media such as magnetic storage media (e.g., magnetic tapes, hard disks, floppy disks), optical recording media (e.g., CD-ROMs, Digital Versatile Discs (DVDs), etc.), and solid state memory (e.g., random-access memory (RAM), read-only memory (ROM), static random-access memory (SRAM), electrically erasable programmable read-only memory (EEPROM), flash memory, thumb drives, etc.).
- the computer readable recording media may also be distributed over network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion. This computer readable recording media may be read by the computer, stored in the memory, and executed by the processor.
- the disclosed embodiments may be described in terms of functional block components and various processing steps. Such functional blocks may be realized by any number of hardware and/or software components configured to perform the specified functions.
- the disclosed embodiments may employ various integrated circuit components, e.g., memory elements, processing elements, logic elements, look-up tables, and the like, which may carry out a variety of functions under the control of one or more microprocessors or other control devices.
- the elements of the disclosed embodiments are implemented using software programming or software elements
- the disclosed embodiments may be implemented with any programming or scripting language such as C, C++, JAVA®, assembler, or the like, with the various algorithms being implemented with any combination of data structures, objects, processes, routines or other programming elements.
Abstract
Description
Claims (17)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/274,803 US9600520B2 (en) | 2014-01-24 | 2014-05-12 | Method and system for prospective search query management |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201461931307P | 2014-01-24 | 2014-01-24 | |
US14/274,803 US9600520B2 (en) | 2014-01-24 | 2014-05-12 | Method and system for prospective search query management |
Publications (2)
Publication Number | Publication Date |
---|---|
US20150213084A1 US20150213084A1 (en) | 2015-07-30 |
US9600520B2 true US9600520B2 (en) | 2017-03-21 |
Family
ID=53679249
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/274,803 Expired - Fee Related US9600520B2 (en) | 2014-01-24 | 2014-05-12 | Method and system for prospective search query management |
Country Status (1)
Country | Link |
---|---|
US (1) | US9600520B2 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR102348084B1 (en) * | 2014-09-16 | 2022-01-10 | 삼성전자주식회사 | Image Displaying Device, Driving Method of Image Displaying Device, and Computer Readable Recording Medium |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020183068A1 (en) * | 2001-04-24 | 2002-12-05 | Greg Dunko | Searching method for mobile terminal |
US7464062B2 (en) | 2003-06-26 | 2008-12-09 | International Business Machines Corporation | Administering devices in dependence upon user metric vectors including generic metric spaces |
US20090037395A1 (en) | 2007-08-01 | 2009-02-05 | Sybase, Inc. | Persistent query system for automatic on-demand data subscriptions from mobile devices |
US20130006965A1 (en) * | 2011-06-30 | 2013-01-03 | International Business Machines Corporation | Database Query Optimization |
-
2014
- 2014-05-12 US US14/274,803 patent/US9600520B2/en not_active Expired - Fee Related
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020183068A1 (en) * | 2001-04-24 | 2002-12-05 | Greg Dunko | Searching method for mobile terminal |
US7464062B2 (en) | 2003-06-26 | 2008-12-09 | International Business Machines Corporation | Administering devices in dependence upon user metric vectors including generic metric spaces |
US20090037395A1 (en) | 2007-08-01 | 2009-02-05 | Sybase, Inc. | Persistent query system for automatic on-demand data subscriptions from mobile devices |
US20130006965A1 (en) * | 2011-06-30 | 2013-01-03 | International Business Machines Corporation | Database Query Optimization |
Also Published As
Publication number | Publication date |
---|---|
US20150213084A1 (en) | 2015-07-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9226137B2 (en) | Method and apparatus for real-time sharing of multimedia content between wireless devices | |
CN111278012B (en) | Device isolation in wireless networks | |
KR102122483B1 (en) | Method for sharing media data and an electronic device thereof | |
CN106095458B (en) | The management method and device of plug-in unit in a kind of application program | |
US8819587B1 (en) | Methods of managing items in a shared workspace | |
KR101657379B1 (en) | Method and apparatus for providing data entry content to a remote environment | |
KR101678038B1 (en) | Method, apparatus, program, and recording medium for automatically connecting wireless network | |
US20190155461A1 (en) | Method for displaying and an electronic device thereof | |
EP3472699B1 (en) | Method and electronic device for managing functionality of applications | |
EP2605174B1 (en) | Apparatus and method for analyzing malware in data analysis system | |
US9438609B2 (en) | Device verification prior to registration | |
CN109564517B (en) | Method and server for retaining locally deleted content at storage service | |
US20180113753A1 (en) | Techniques to share application data through a messaging system | |
US20180046635A1 (en) | Discovery of calling application for control of file hydration behavior | |
WO2022089409A1 (en) | File sending method and apparatus, and electronic device | |
US9170780B2 (en) | Processing changed application metadata based on relevance | |
US9600520B2 (en) | Method and system for prospective search query management | |
WO2019194794A1 (en) | Social media content management | |
US20180034940A1 (en) | Method, apparatus and system for uploading a file | |
KR102524674B1 (en) | Electronic apparatus and notification service providing method thereof | |
US20160283566A1 (en) | Analyzing sorted mobile application operational state sequences based on sequence metrics | |
US9854035B2 (en) | Maintaining state synchronization of an application between computing devices as well as maintaining state synchronization of common information between different applications without requiring periodic synchronization | |
CN104933085A (en) | Electronic book update method, terminal and server | |
CN105704521A (en) | A method and apparatus for realizing a customized channel list | |
KR102516081B1 (en) | Team member contact information sharing system |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MOTOROLA MOBILITY LLC, ILLINOISFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:JEYAKEERTHI, JEYAPPRAGASH J;REEL/FRAME:032870/0032Effective date: 20140308 |
|
AS | Assignment |
Owner name: GOOGLE TECHNOLOGY HOLDINGS LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MOTOROLA MOBILITY LLC;REEL/FRAME:034402/0001Effective date: 20141028 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20210321 |