TWI829208B - Method and system for determining design parameter values of hardware architectures for processing streaming input data, and computer-readable storage medium - Google Patents
Method and system for determining design parameter values of hardware architectures for processing streaming input data, and computer-readable storage medium Download PDFInfo
- Publication number
- TWI829208B TWI829208B TW111123650A TW111123650A TWI829208B TW I829208 B TWI829208 B TW I829208B TW 111123650 A TW111123650 A TW 111123650A TW 111123650 A TW111123650 A TW 111123650A TW I829208 B TWI829208 B TW I829208B
- Authority
- TW
- Taiwan
- Prior art keywords
- hardware
- input data
- hardware architecture
- values
- architecture
- Prior art date
Links
- 238000013461 design Methods 0.000 title claims abstract description 131
- 238000000034 method Methods 0.000 title claims abstract description 127
- 238000003860 storage Methods 0.000 title claims abstract description 19
- 238000012545 processing Methods 0.000 title claims description 147
- 230000008569 process Effects 0.000 claims abstract description 49
- 239000011159 matrix material Substances 0.000 claims description 104
- 239000013598 vector Substances 0.000 claims description 95
- 238000010801 machine learning Methods 0.000 claims description 20
- 238000004519 manufacturing process Methods 0.000 claims description 18
- 238000005070 sampling Methods 0.000 claims description 10
- 238000004088 simulation Methods 0.000 claims description 8
- 238000010845 search algorithm Methods 0.000 claims description 7
- 230000004044 response Effects 0.000 claims description 5
- 238000004422 calculation algorithm Methods 0.000 claims description 4
- 230000006835 compression Effects 0.000 claims description 3
- 238000007906 compression Methods 0.000 claims description 3
- 238000004590 computer program Methods 0.000 abstract description 14
- 239000012634 fragment Substances 0.000 description 31
- 238000003491 array Methods 0.000 description 12
- 230000009471 action Effects 0.000 description 5
- 238000013528 artificial neural network Methods 0.000 description 5
- 238000004891 communication Methods 0.000 description 5
- 238000004458 analytical method Methods 0.000 description 4
- 239000000872 buffer Substances 0.000 description 4
- 238000005516 engineering process Methods 0.000 description 4
- 238000013473 artificial intelligence Methods 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000002411 adverse Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000000903 blocking effect Effects 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 230000008859 change Effects 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 230000018109 developmental process Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000009467 reduction Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000012549 training Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000015572 biosynthetic process Effects 0.000 description 1
- 210000004556 brain Anatomy 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 230000002068 genetic effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000005457 optimization Methods 0.000 description 1
- 238000005498 polishing Methods 0.000 description 1
- 230000011218 segmentation Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 239000000126 substance Substances 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000003786 synthesis reaction Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T1/00—General purpose image data processing
- G06T1/20—Processor architectures; Processor configuration, e.g. pipelining
Abstract
Description
本說明書係關於使用一可擴充硬體架構模板來針對對串流輸入資料執行操作之硬體組件(例如，機器學習處理器)產生硬體設計參數及使用該等參數來製造處理器。 This specification is about using an extensible hardware architecture template to generate hardware design parameters for a hardware component that performs operations on streaming input data (eg, a machine learning processor) and using those parameters to fabricate the processor.
人工智慧(AI)係藉由機器演示之智慧且表示一電腦程式或一機器思考及學習之能力。可使用一或多個電腦來執行AI運算以訓練機器進行各自任務。AI運算可包含由一或多個機器學習模型表示之運算。 Artificial intelligence (AI) is intelligence demonstrated by machines and represents the ability of a computer program or a machine to think and learn. One or more computers can be used to perform AI operations to train the machine to perform its respective tasks. AI operations may include operations represented by one or more machine learning models.
神經網路屬於機器學習模型之一子領域。神經網路可採用表示多個操作(例如，向量或矩陣操作)之一或多層節點。一或多個電腦可經組態以執行神經網路之操作或運算以產生一輸出，例如，一所接收輸入之一分類、一預測或一分段。除一輸出層以外，一些神經網路亦包含一或多個隱藏層。使用各隱藏層之輸出作為至網路中之下一層(即，下一隱藏層或輸出層)之輸入。網路之各層根據一各自網路參數集之當前值自一所接收輸入產生一輸出。 Neural networks are a subfield of machine learning models. A neural network may employ one or more layers of nodes that represent multiple operations (eg, vector or matrix operations). One or more computers may be configured to perform neural network operations or calculations to produce an output, such as a classification, a prediction, or a segmentation of a received input. In addition to an output layer, some neural networks also contain one or more hidden layers. The output of each hidden layer is used as input to the next layer in the network (i.e., the next hidden layer or the output layer). Each layer of the network produces an output from a received input based on the current value of a respective network parameter set.
以下說明書中描述之技術係關於使用一可擴充硬體架構模 板來針對對串流輸入資料執行操作之硬體組件(例如，機器學習處理器)產生硬體設計參數及使用該等參數來製造處理器。硬體架構模板可包含用於製造硬體組件之一可組態設計參數集，該等硬體組件可經組態以對串流輸入資料執行操作，使得架構可基於串流輸入資料之特性進行放大或縮小。技術可用於判定設計參數集之值且使用硬體架構模板及經判定值來實體化一硬體架構。 The techniques described in the following specification are about using a scalable hardware architecture model The board is used to generate hardware design parameters for a hardware component that performs operations on streaming input data (eg, a machine learning processor) and to use the parameters to fabricate the processor. The hardware architecture template may contain a configurable set of design parameters for fabricating hardware components that can be configured to perform operations on the streaming input data such that the architecture can be based on the characteristics of the streaming input data. Zoom in or out. Techniques may be used to determine the values of a set of design parameters and use the hardware architecture template and the determined values to materialize a hardware architecture.
一硬體架構(亦被稱為一硬體架構表示)大體上係關於一設計(或待設計)電子或機電硬體區塊、組件或系統之一表示。硬體架構可涵蓋用於識別、原型設計及/或製造此一硬體區塊、組件或系統之資料。可用表示區塊、組件或系統之一結構之資料(例如，識別包含於硬體區塊、組件或系統中之子組件或子系統及其等之相互關係之資料)對一硬體架構進行編碼。一硬體架構亦可包含表示製造硬體區塊、組件或系統之一程序之資料，或表示用於有效地實施硬體區塊、組件或系統之設計之規則之資料或兩者。 A hardware architecture (also called a hardware architecture representation) is generally a representation of a designed (or to be designed) electronic or electromechanical hardware block, component, or system. Hardware architecture may include information used to identify, prototype and/or manufacture this hardware block, component or system. A hardware architecture may be encoded with data that represents the structure of a block, component, or system (e.g., data that identifies subcomponents or subsystems included in a hardware block, component, or system, and their interrelationships). A hardware architecture may also include information that represents a process for manufacturing a hardware block, component, or system, or information that represents rules for efficiently implementing the design of a hardware block, component, or system, or both.
本文件中之術語「硬體架構模板」係指表示具有一硬體組件(諸如經組態以對串流輸入執行機器學習運算之一機器學習處理器)之一設計參數集之一模板之資料。一硬體架構模板可為具有待基於設計參數集(例如，待包含於硬體架構中之不同運算單元之類型、數量或階層)定製或客製化之多個態樣之一硬體架構之一預設通用設計。 The term "hardware architecture template" in this document means data representing a template with a set of design parameters for a hardware component, such as a machine learning processor configured to perform machine learning operations on streaming inputs. . A hardware architecture template may be a hardware architecture with aspects to be customized or customized based on a set of design parameters (e.g., the type, number, or hierarchy of different computing units to be included in the hardware architecture) One preset universal design.
一硬體架構模板可為一抽象概念且非實體化的，直至判定設計參數集之值。在(例如)使用本文件中描述之各種程序判定設計參數之值之後，硬體架構模板可用於基於設計參數集之經判定值而實體化一硬體架構。在一些實施方案中，硬體架構模板可表示以可合成至硬體電路且以 一物件導向方式程式化之一高階電腦語言(例如，C或C++)編碼之資料。為了簡單起見，術語「硬體架構模板」在本文件中有時被稱為「模板」。 A hardware architecture template may be an abstract concept and not materialized until the values of the set of design parameters are determined. After determining the values of the design parameters, for example using the various procedures described in this document, the hardware architecture template can be used to materialize a hardware architecture based on the determined values of the set of design parameters. In some embodiments, a hardware architectural template may be represented in a form that may be synthesized into a hardware circuit and An object-oriented approach to programming data coded in a high-level computer language (for example, C or C++). For simplicity, the term "hardware architecture template" is sometimes referred to as "template" in this document.
設計參數集可在形成或具有一多維「搜尋空間」，在其內鑑於特定設計要求或準則執行搜尋設計參數集之各自值。可藉由使用一或多個演算法或技術探索搜尋空間而判定設計參數之值。在本文件中，術語「搜尋空間」係指涵蓋給定可用資源之設計參數集之全部或至少一組可能解決方案(例如，值)(舉例而言，包含於一硬體架構中之不同運算單元之全部可能類型及數量)之一解決方案空間。 The set of design parameters may form or have a multi-dimensional "search space" within which a search is performed for the respective values of the set of design parameters in view of specific design requirements or criteria. The values of the design parameters may be determined by exploring the search space using one or more algorithms or techniques. In this document, the term "search space" refers to all or at least a set of possible solutions (e.g., values) covering a set of design parameters given available resources (e.g., different operations included in a hardware architecture). a solution space of all possible types and numbers of units).
可基於用於執行運算操作之資料之特性重新組態模板。在一些情境中，歸因於輸入資料之一變化(例如，具有一不同稀疏性位準之一不同輸入矩陣)，可即時重新實體化藉由模板產生之一硬體架構。 Templates can be reconfigured based on the characteristics of the data used to perform computational operations. In some scenarios, a hardware architecture generated by a template can be instantaneously rematerialized due to a change in the input data (eg, a different input matrix with a different sparsity level).
術語「硬體組件」係指用於執行運算操作(例如，機器學習運算)之硬體組件，包含(舉例而言)經組態以基於串流輸入資料而執行向量縮減、張量乘法、基本算術運算及邏輯運算之適合硬體運算單元或運算單元群集。舉例而言，硬體組件可包含一或多個塊(tile)(例如，乘積累加運算(MAC)單元)、包含多個MAC單元之一或多個處理元件、包含多個處理元件之一或多個群集及處理單元(諸如圖形處理單元(GPU)及張量處理單元(TPU))。 The term "hardware component" means a hardware component used to perform computational operations (e.g., machine learning operations), including, for example, configured to perform vector reduction, tensor multiplication, basic Arithmetic operations and logical operations are suitable for hardware computing units or clusters of computing units. For example, a hardware component may include one or more tiles (eg, a multiply-accumulate (MAC) unit), include one or more processing elements of a plurality of MAC units, include one or more of a plurality of processing elements, or Multiple clusters and processing units such as graphics processing units (GPUs) and tensor processing units (TPUs).
術語「串流輸入資料」係指連續提供至一硬體組件用於處理資料的資料。舉例而言，資料可包含多個資料訊框，其中在一特定時間間隔產生各訊框，且將各資料訊框提供至一硬體組件用於以一特定速率進行處理。術語「時間間隔」及「速率」係指用於產生或接收一訊框及一下一資料訊框之一時間週期或一頻率。舉例而言，串流輸入資料之一速率可 為每幾毫秒、幾秒、幾分鐘或其他適當時間週期之一個資料訊框。 The term "streaming input data" refers to data that is continuously provided to a hardware component for processing. For example, the data may include a plurality of data frames, with each frame generated at a specific time interval and provided to a hardware component for processing at a specific rate. The terms "time interval" and "rate" refer to a time period or a frequency used to generate or receive one frame and the next data frame. For example, streaming input data at a rate can A data frame every few milliseconds, seconds, minutes, or other appropriate time period.
串流輸入資料可為藉由一影像感測器根據一時間序列收集之串流影像圖框或視訊圖框。影像感測器可包含一相機或一錄影機。串流影像圖框可藉由影像感測器以一特定速率收集，或以一特定抵達率提供至一硬體組件。 The streaming input data may be streaming image frames or video frames collected by an image sensor according to a time series. The image sensor may include a camera or a video recorder. Streaming image frames may be collected by an image sensor at a specific rate, or provided to a hardware component at a specific arrival rate.
串流輸入資料之各訊框可具有一特定大小。舉例而言，串流影像圖框之各者可包含一各自影像解析度，例如，50×50個像素、640×480個像素、1440×1080個像素或4096×2160個像素。 Each frame of the stream input data can have a specific size. For example, each of the streaming image frames may include a respective image resolution, such as 50×50 pixels, 640×480 pixels, 1440×1080 pixels, or 4096×2160 pixels.
一硬體組件可經組態以處理以一特定速率接收之串流輸入資料。如上文描述，串流輸入資料可(例如)從一或多個源逐訊框連續產生，且以一特定抵達率提供至硬體組件。舉例而言，速率可為每單位時間之一訊框，或每單位時間之像素數量。理想地，硬體組件可在輸入資料之下一訊框抵達之前處理串流輸入資料之各訊框以及時產生輸出資料。然而，若硬體組件無法在下一訊框抵達之前處理訊框，則硬體組件可導致處理串流輸入資料之後續訊框之背壓。背壓可導致產生輸出資料之中斷或時間延遲，增加系統耗用，特定言之在一系統中之其他硬體組件經組態以處理藉由硬體組件產生之輸出資料時，或導致硬體組件之操作及/或藉由硬體組件進行之運算中之錯誤。 A hardware component can be configured to handle streaming input data received at a specific rate. As described above, streaming input data may, for example, be generated continuously frame by frame from one or more sources and provided to hardware components at a specified arrival rate. For example, the rate can be one frame per unit time, or the number of pixels per unit time. Ideally, the hardware component can process each frame of the streaming input data and generate output data in a timely manner before the next frame of input data arrives. However, if the hardware component is unable to process the frame before the next frame arrives, the hardware component can cause back pressure in processing subsequent frames of the stream input data. Backpressure can cause interruptions or delays in the generation of output data, increase system consumption, particularly when other hardware components in a system are configured to handle output data generated by the hardware component, or cause the hardware to Errors in the operation of components and/or calculations performed by hardware components.
在一些實施方案中，一系統可使用具有一較大訊框大小或以一較高頻率或兩者之新串流輸入資料來產生具有較高準確度之輸出資料(例如，具有每影像之一較高解析度之每單位時間之更多影像圖框)。一最初適合硬體組件可能無法在下一訊框抵達之前處理新串流輸入資料之各訊框，此導致處理串流輸入資料之稍後抵達訊框之背壓。 In some implementations, a system may use new stream input data with a larger frame size or at a higher frequency, or both, to produce output data with higher accuracy (e.g., with one per image Higher resolution (more image frames per unit time). An initially suitable hardware component may not be able to process each frame of new stream input data before the next frame arrives, causing back pressure to process later arriving frames of stream input data.
執行廣義矩陣乘法(GEMM)及廣義矩陣向量乘法(GEMV)之技術無法應用於處理串流輸入資料，此係因為依序接收串流輸入資料之各訊框。舉例而言，可藉由一輸入矩陣表示串流輸入資料之各訊框，且在一特定時間窗期間藉由硬體組件逐列接收輸入矩陣。GEMM或GEMV技術之一實例被稱為迴圈分塊(亦被稱為迴圈巢套最佳化)，其將一迴圈之迭代空間分成較小組塊或區塊用於執行矩陣-矩陣或矩陣-向量運算，使得可平行運算輸入之各較小組塊或區塊。然而，迴圈分塊技術不太可能經調適用於處理串流輸入資料，此係因為根據一序列逐列接收輸入。預先儲存一當前訊框之一最後列或一下一訊框之一列且對此等列執行操作同時平行處理當前訊框中之一不同列係不可能或至少不切實際的。 Techniques that perform generalized matrix multiplication (GEMM) and generalized matrix vector multiplication (GEMV) cannot be applied to processing stream input data because frames of the stream input data are received sequentially. For example, each frame of the stream input data may be represented by an input matrix, and the input matrix may be received column-by-column by a hardware component during a specific time window. An example of a GEMM or GEMV technique is called loop blocking (also known as loop nested optimization), which divides the iteration space of a loop into smaller chunks or chunks for performing matrix-matrix or Matrix-vector operations enable parallel operations on smaller chunks or blocks of input. However, loop blocking techniques are unlikely to be adapted to handle streaming input data because input is received column-by-column in a sequence. It is not possible, or at least impractical, to pre-store the last column of a current frame or a column of the next frame and perform operations on these columns while processing a different series in the current frame in parallel.
當串流輸入資料在大小或頻率上增加時，一些技術訴諸於藉由包含更多處理元件(PE)或運算單元來解決背壓問題。然而，其可能效率低下、無法擴充，且可在訊框大小或抵達率按比例擴大時，很快達到一硬體組件之一最大功率要求。舉例而言，經組態以處理串流輸入資料(例如，使用輸入資料之各訊框來執行運算)之邊緣裝置(例如，智慧型電話、平板電腦、膝上型電腦及手錶)可能具有功率消耗率之一上限。因此，整合於一邊緣裝置之一硬體組件內之運算單元之總數量或數目可能受一最大功率要求，或每次充電之電池壽命之一要求或兩者的限制。 As stream input data increases in size or frequency, some technologies resort to solving the backpressure problem by including more processing elements (PEs) or computing units. However, it can be inefficient and scalable, and can quickly reach one of the maximum power requirements of a hardware component as the frame size or arrival rate scales up. For example, edge devices (e.g., smartphones, tablets, laptops, and watches) configured to process streaming input data (e.g., use frames of the input data to perform operations) may have power An upper limit on the consumption rate. Therefore, the total number or number of computing units integrated within a hardware component of an edge device may be limited by either a maximum power requirement, a battery life requirement per charge, or both.
為了以高處理能力更高效且穩健地處理串流輸入資料，本文件中描述之技術實施具有一設計參數集之一硬體架構模板。執行所描述技術之一系統可基於串流輸入資料之特性而判定設計參數集之值且使用具有經判定設計參數值之硬體架構模板來實體化一硬體架構。硬體架構包含藉由設計參數值指定之運算單元之一特定配置且表示適於處理串流輸入資 料之一硬體組件。硬體架構可用於製造硬體組件。 In order to process streaming input data more efficiently and robustly with high processing power, the technology described in this document implements a hardware architecture template with a design parameter set. One system performing the techniques described may determine values for a set of design parameters based on characteristics of the streaming input data and use a hardware architecture template with the determined design parameter values to materialize a hardware architecture. The hardware architecture consists of a specific configuration of computing units specified by design parameter values and is suitable for processing streaming input data. One of the hardware components. Hardware architecture can be used to manufacture hardware components.
根據一個態樣，文件描述一種基於一特定串流輸入資料產生一硬體架構之方法。可使用硬體架構來製造可令人滿意地處理特定串流輸入資料之一硬體組件。方法包含接收表示具有一可組態設計參數集之一硬體架構模板之資料，其中設計參數集可包含群集之一數量、各群集中之處理單元之一數量及各處理單元中之一硬體單元陣列之一大小之兩者或更多者。 According to one aspect, the document describes a method for generating a hardware architecture based on a specific stream of input data. Hardware architecture can be used to create a hardware component that satisfactorily handles specific stream input data. The method includes receiving data representing a hardware architecture template having a configurable set of design parameters, where the design parameter set may include a number of clusters, a number of processing units in each cluster, and a hardware in each processing unit. Two or more of the sizes of one of the cell arrays.
方法進一步包含至少部分基於待藉由硬體組件處理之串流輸入資料之特性而判定可組態設計參數集之值。判定程序包含：使用可組態設計參數之一搜尋空間來產生多個候選硬體架構；判定與各候選硬體架構相關聯之一組效能度量之各自值；至少部分基於該組效能度量之該等各自值而從全部該多個候選硬體架構選擇一個候選硬體架構；及基於該選定候選硬體架構而判定該等設計參數之值。 The method further includes determining values for the set of configurable design parameters based at least in part on characteristics of the streamed input data to be processed by the hardware component. The determination process includes: generating a plurality of candidate hardware architectures using a search space of configurable design parameters; determining respective values of a set of performance metrics associated with each candidate hardware architecture; based at least in part on the set of performance metrics Select one candidate hardware architecture from all of the plurality of candidate hardware architectures based on their respective values; and determine the values of the design parameters based on the selected candidate hardware architecture.
藉由方法產生之輸出資料可至少包含用於製造硬體架構之設計參數值。 Output data generated by the method may include at least design parameter values used to fabricate the hardware architecture.
在一些實施方案中，方法包含將輸出資料提供至硬體架構模板，基於經判定設計參數值而實體化一硬體架構，及使用該硬體架構來製造一硬體組件。 In some implementations, a method includes providing output data to a hardware architecture template, materializing a hardware architecture based on determined design parameter values, and using the hardware architecture to fabricate a hardware component.
在一些實施方案中，串流輸入資料之特性可包含各訊框之一抵達率及各訊框之一大小。該組效能度量可包含用於處理給定硬體組件之各自串流輸入資料之延時、功率消耗、資源使用或處理能力之至少一者之度量。效能模型可包含一分析成本模型、一機器學習成本模型或一硬體模擬模型之至少一者。串流輸入資料可為藉由一影像感測器根據一時間序 列收集之串流影像圖框。串流影像圖框之特性可包含一特定抵達率，其中串流影像圖框之各圖框可具有一各自影像解析度。在一些實施方案中，串流影像圖框之特性可包含影像圖框之各自影像解析度。串流影像圖框之特性可包含一遮沒週期(例如，一垂直遮沒週期及/或一水平遮沒週期)、一像素或色彩格式(例如，一RGB或YUV色彩格式)及影像圖框之一抵達順序。串流輸入資料可為藉由一音訊感測器根據收集之串流音訊。音訊串流資料之特性可包含串流音訊之一特定取樣率、串流音訊之一位元深度、串流音訊之一位元率或串流音訊之一音訊格式之至少一者。 In some implementations, characteristics of the stream input data may include an arrival rate of each frame and a size of each frame. The set of performance metrics may include a measure of at least one of latency, power consumption, resource usage, or processing capability for processing respective stream input data for a given hardware component. The performance model may include at least one of an analytical cost model, a machine learning cost model, or a hardware simulation model. Streaming input data can be generated by an image sensor according to a time sequence List the streaming video frames of the collection. Characteristics of the streaming image frame may include a specific arrival rate, wherein each frame of the streaming image frame may have a respective image resolution. In some implementations, the characteristics of the streaming image frames may include the respective image resolutions of the image frames. Characteristics of the streaming image frame may include a blanking period (eg, a vertical blanking period and/or a horizontal blanking period), a pixel or color format (eg, an RGB or YUV color format), and the image frame one arrival order. The streaming input data may be streaming audio from the network via an audio sensor. Characteristics of the audio streaming data may include at least one of a specific sampling rate of the streaming audio, a bit depth of the streaming audio, a bit rate of the streaming audio, or an audio format of the streaming audio.
在一些實施方案中，可以矩陣或向量形式接收串流輸入資料。方法進一步包含將來自一矩陣之輸入之一訊框分段成多個向量，將一矩陣乘矩陣乘法分解成多個向量乘矩陣乘法，判定一矩陣(例如，儲存於一記憶體單元中且用於與串流輸入資料相乘之一矩陣)之一稀疏性位準，及/或判定所儲存矩陣中之非零值以改良運算效率。 In some implementations, streaming input data may be received in matrix or vector form. The method further includes segmenting a frame from an input of a matrix into a plurality of vectors, decomposing a matrix by matrix multiplication into a plurality of vector by matrix multiplication, determining a matrix (e.g., stored in a memory unit and using A level of sparsity in a matrix multiplied by the stream input data), and/or determining non-zero values in the stored matrix to improve computational efficiency.
可實施本說明書中描述之標的物之特定實施例以實現以下優勢之一或多者。本文件中描述之技術可穩健地產生能夠處理具有不同訊框大小及抵達率之不同串流資料之硬體組件(例如，機器學習處理器)。更明確言之，執行所描述技術之一系統可藉由判定一硬體架構模板之設計參數值而客製化特定串流輸入資料之一硬體架構。技術可快速判定參數值以實現敏捷硬體開發。硬體架構模板可用於基於經判定設計參數值而實體化一硬體架構，從而允許能夠支援在資料速率、資料大小及/或其他特性上具有廣泛變動之串流輸入資料之可擴充及可客製化硬體架構。在處理特定串流輸入資料時，可增強實體化硬體架構以減少且甚至消除背壓。硬體架構可經組態以即時重新實體化以處理非串流且具有至多50%之一稀疏性位 準之不同稀疏性位準之不同矩陣。 Specific embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. The techniques described in this document can robustly produce hardware components (e.g., machine learning processors) that can handle different streaming data with different frame sizes and arrival rates. More specifically, a system implementing the techniques described may customize a hardware architecture for specific stream input data by determining design parameter values for a hardware architecture template. Technology can quickly determine parameter values to enable agile hardware development. Hardware architecture templates can be used to instantiate a hardware architecture based on determined design parameter values, thereby allowing for scalable and customizable streaming input data that can support wide variations in data rates, data sizes, and/or other characteristics. Customized hardware architecture. The physical hardware architecture can be enhanced to reduce or even eliminate backpressure when processing specific streaming input data. The hardware architecture can be configured for on-the-fly rematerialization to handle non-streaming with up to a 50% sparsity bit Different matrices with different sparsity levels.
另外，本文件中描述之技術改良處理串流輸入資料之效率。更明確言之，所描述技術可使用較少運算資源、較少功率及較少記憶體來對串流輸入資料執行運算(例如，機器學習運算)。基於一或多個因素、要求或準則來判定模板之設計參數值，例如，可判定設計參數值以最小化功率使用且維持一特定輸入抵達率。舉例而言，可判定設計參數，使得可在無背壓之情況下處理串流輸入資料同時仍符合硬體組件之功率及/或大小要求。執行所描述技術之一系統亦可對稀疏矩陣執行特定處理以減少記憶體使用。舉例而言，系統可避免儲存用於處理串流輸入資料之非串流矩陣之零值，且僅對與非串流矩陣之非零值相關聯之輸入值執行操作，此減少用於執行操作之運算資源，且減小用於資料傳送之記憶體頻寬及用於儲存之記憶體大小。 In addition, the techniques described in this document improve the efficiency of processing streaming input data. More specifically, the techniques described can use less computing resources, less power, and less memory to perform operations (eg, machine learning operations) on streaming input data. Design parameter values for the template are determined based on one or more factors, requirements, or criteria. For example, design parameter values may be determined to minimize power usage and maintain a specific input arrival rate. For example, design parameters can be determined such that streaming input data can be processed without backpressure while still meeting the power and/or size requirements of the hardware components. Systems implementing one of the techniques described may also perform specific processing on sparse matrices to reduce memory usage. For example, the system can avoid storing zero values of non-streaming matrices used to process streaming input data and only perform operations on input values associated with non-zero values of non-streaming matrices. This reduction is used to perform operations computing resources, and reduce the memory bandwidth used for data transmission and the memory size used for storage.
此外，本文件中描述之技術可以高處理能力及效能處理串流輸入資料。所描述技術可藉由根據不同處理要求平衡處理速度及運算單元閒置時間而減少處理串流輸入資料之延時。舉例而言，藉由模板產生之一硬體組件可以一較快速度處理串流輸入資料之各訊框且可能導致硬體組件中之一或多個運算單元之更多閒置時間。替代地，硬體組件可以一降低速度處理各訊框但仍能夠及時處理各訊框。所描述技術亦可藉由避免潛在邏輯擁塞或降低硬體時脈速率而保證一高處理能力。舉例而言，所描述技術可僅探索設計參數集之一子集，直至所產生硬體架構達到一可擴充性極限，其中進一步增加設計參數之子集之值將導致邏輯擁塞或不利地影響硬體時脈速率。 In addition, the technology described in this document can handle streaming input data with high processing power and efficiency. The techniques described can reduce latency in processing streaming input data by balancing processing speed and computing unit idle time according to different processing requirements. For example, a hardware component generated by a template may process each frame of the stream input data at a faster rate and may result in more idle time for one or more computing units in the hardware component. Alternatively, hardware components may process frames at a reduced speed but still be able to process frames in a timely manner. The techniques described can also ensure a high processing capacity by avoiding potential logic congestion or reducing hardware clock rates. For example, the described techniques may explore only a subset of a set of design parameters until the resulting hardware architecture reaches a scalability limit, where further increasing the value of the subset of design parameters would cause logic congestion or adversely affect the hardware. Clock rate.
在以下隨附圖式及描述中陳述本說明書之標的物之一或多 項實施例之細節。將從描述、圖式及發明申請專利範圍明白標的物之其他特徵、態樣及優勢。 One or more of the subject matter of this specification are set forth in the following accompanying drawings and descriptions Details of this embodiment. Other features, aspects and advantages of the subject matter will be understood from the description, drawings and scope of the invention patent application.
100:架構設計系統 100:Architecture Design System
110:輸入資料 110:Enter information
120:架構增強子系統 120: Architecture Enhancement Subsystem
130:增強引擎 130: Enhanced engine
140:候選者產生器 140: Candidate generator
145:候選架構 145: Candidate architecture
150:分析引擎 150:Analysis Engine
155:效能值 155:Efficacy value
160:選擇引擎 160:Select engine
170:輸出資料 170:Output data
175:製造系統 175:Manufacturing System
185:效能模型 185:Performance Model
190:記憶體單元 190:Memory unit
195:架構模板 195: Architecture Template
200:硬體架構 200:Hardware architecture
210:串流輸入向量 210: Streaming input vector
215a:非重疊部分片段 215a: Non-overlapping partial fragments
215b:非重疊部分片段 215b: Non-overlapping partial fragments
215c:非重疊部分片段 215c: Non-overlapping partial fragments
220:矩陣資料 220:Matrix data
230:群集 230:Cluster
240:處理單元 240: Processing unit
250:硬體運算單元陣列 250:Hardware computing unit array
260:累加器陣列 260: Accumulator array
300:硬體架構 300:Hardware architecture
310:串流輸入向量 310: Streaming input vector
315a:部分片段 315a: Partial fragment
315b:部分片段 315b: Partial fragment
315c:部分片段 315c: Partial fragment
320:矩陣資料 320:Matrix data
330:群集 330:Cluster
340a:處理單元 340a: Processing unit
340b:處理單元 340b: Processing unit
340c:處理單元 340c: Processing unit
350a:硬體單元陣列 350a: Hardware cell array
350b:硬體單元陣列 350b: Hardware cell array
350c:硬體單元陣列 350c: Hardware cell array
360:累加器陣列 360: Accumulator array
400:硬體架構 400:Hardware architecture
410:串流輸入向量 410: Streaming input vector
415a:部分片段 415a: Partial fragment
415b:部分片段 415b: Partial fragment
415c:部分片段 415c: Partial fragment
420:矩陣資料 420:Matrix data
430a:群集 430a: cluster
430b:群集 430b: cluster
440a:處理單元 440a: Processing unit
440b:處理單元 440b: Processing unit
450a:硬體單元陣列 450a: Hardware cell array
450b:硬體單元陣列 450b: Hardware cell array
455:累加器單元 455: Accumulator unit
460:累加器陣列 460: Accumulator array
500:硬體架構 500:Hardware architecture
510:串流輸入向量 510: Streaming input vector
515a:部分片段 515a: Partial fragment
515b:部分片段 515b: Partial fragment
515c:部分片段 515c: Partial fragment
520:矩陣資料 520:Matrix data
530a:群集 530a: cluster
530x:群集 530x:cluster
540a:處理單元 540a: Processing unit
540h:處理單元 540h: Processing unit
540r:處理單元 540r: Processing unit
540x:處理單元 540x: Processing unit
550a:硬體單元陣列 550a: Hardware cell array
550b:硬體單元陣列 550b: Hardware cell array
550x:硬體單元陣列 550x: Hardware cell array
550y:硬體單元陣列 550y: Hardware cell array
555:累加器單元 555: Accumulator unit
560:累加器陣列 560: Accumulator array
600:非串流矩陣 600: Non-streaming matrix
615a:部分片段 615a: Partial fragment
630a:群集 630a: Cluster
630b:群集 630b:Cluster
640a:處理元件(PE)/處理單元 640a: Processing Element (PE)/Processing Unit
640b:處理元件(PE)/處理單元 640b: Processing element (PE)/processing unit
640c:處理元件(PE)/處理單元 640c: Processing Element (PE)/Processing Unit
640d至f:處理元件(PE) 640d to f: Processing Element (PE)
700:程序 700:Program
720:矩陣資料 720:Matrix data
735:非零元素 735: non-zero element
735a至d:向量資料 735a to d: Vector data
740:零元素 740: Zero element
750a:壓縮資料 750a: Compressed data
750b:壓縮資料 750b: Compressed data
750c:壓縮資料 750c: Compressed data
750d:壓縮資料 750d: Compressed data
760:識別符 760:Identifier
800:程序 800:Program
810:步驟 810: Steps
820:步驟 820: Steps
830:步驟 830: Steps
840:步驟 840: Steps
850:步驟 850: Steps
860:步驟 860:Step
870:步驟 870: Steps
圖1繪示一例示性架構設計系統。 Figure 1 illustrates an exemplary architectural design system.
圖2繪示用於處理串流輸入資料之一訊框之一例示性情境。 Figure 2 illustrates an exemplary scenario for processing a frame of stream input data.
圖3繪示用於處理串流輸入資料之一訊框之另一例示性情境。 Figure 3 illustrates another exemplary scenario for processing a frame of stream input data.
圖4繪示用於處理串流輸入資料之一訊框之另一例示性情境。 Figure 4 illustrates another exemplary scenario for processing a frame of stream input data.
圖5繪示用於處理串流輸入資料之一訊框之另一例示性情境。 Figure 5 illustrates another exemplary scenario for processing a frame of stream input data.
圖6繪示用於一非串流矩陣之一例示性資料存取型樣。 Figure 6 illustrates an exemplary data access pattern for a non-streaming matrix.
圖7係處理一稀疏非串流矩陣之一例示性程序。 Figure 7 is an exemplary procedure for processing a sparse non-streaming matrix.
圖8係使用一硬體架構模板來產生一輸出資料之一例示性程序之一流程圖。 Figure 8 is a flowchart of an exemplary process for generating an output data using a hardware architecture template.
各個圖式中之相同元件符號及名稱指示相同元件。 The same component symbols and names in the various drawings identify the same components.
圖1繪示一例示性架構設計系統100。架構設計系統100係在一或多個位置中之一或多個電腦上實施之一系統之一實例，其中可實施下文描述之系統、組件及技術。架構設計系統100之一些組件可實施為經組態以在一或多個電腦上運行之電腦程式。 Figure 1 illustrates an exemplary architectural design system 100. Architectural design system 100 is an example of a system implemented on one or more computers in one or more locations in which the systems, components, and techniques described below may be implemented. Some components of the architectural design system 100 may be implemented as computer programs configured to run on one or more computers.
如圖1中展示，架構設計系統100可包含一架構增強子系統 120，該架構增強子系統120經組態以處理輸入資料110以產生與一硬體組件之一增強硬體架構相關聯之輸出資料170。 As shown in Figure 1, the architecture design system 100 may include an architecture enhancement subsystem 120. The architecture enhancement subsystem 120 is configured to process input data 110 to generate output data 170 associated with an enhanced hardware architecture of a hardware component.
更明確言之，可使用輸出資料170來實體化一硬體架構且可使用硬體架構來製造經組態以處理串流輸入資料(例如，一影像串流)之一硬體組件。硬體組件可經組態以執行不同操作以處理串流輸入資料，舉例而言，使用藉由組件儲存之一矩陣或一向量及串流輸入資料之機器學習運算之操作。串流輸入資料可呈向量、矩陣或張量形式。硬體組件可為一圖形處理單元(GPU)、一張量處理單元(TPU)、一特定應用積體電路(ASIC)或經組態以令人滿意地處理影像串流之另一適當處理單元或電路。 More specifically, the output data 170 may be used to instantiate a hardware architecture and the hardware architecture may be used to fabricate a hardware component configured to process streaming input data (eg, an image stream). Hardware components can be configured to perform different operations to process streaming input data, for example, operations using a matrix or a vector stored by the component and machine learning operations on the streaming input data. Streaming input data can be in the form of vectors, matrices or tensors. The hardware component may be a graphics processing unit (GPU), a tensor processing unit (TPU), an application specific integrated circuit (ASIC), or another suitable processing unit configured to satisfactorily process the image stream or circuit.
作為一實例，一硬體組件可為被設計成具有經組態以處理一串流輸入資料(例如，一影像或視訊串流)之一或多個運算單元之一用戶端裝置或一邊緣裝置(諸如一智慧型電話、一電腦、一攜帶式平板電腦等)之部分。串流輸入資料可藉由硬體組件以一定義時間間隔逐訊框接收，且藉由邊緣裝置根據接收順序(例如，使用儲存於邊緣裝置處之其他資料)進行處理。舉例而言，邊緣裝置可執行一神經網路之推理操作以逐圖框處理一輸入視訊以使用儲存於邊緣裝置處之網路權重來辨識面部。 As an example, a hardware component may be a client device or an edge device designed to have one or more computing units configured to process a stream of input data (eg, an image or video stream) (such as a smart phone, a computer, a portable tablet, etc.). Streaming input data may be received by a hardware component on a frame-by-frame basis at a defined time interval and processed by the edge device according to the order in which it is received (e.g., using other data stored at the edge device). For example, the edge device can perform a neural network inference operation to process an input video frame by frame to recognize faces using network weights stored at the edge device.
輸入資料110可包含表示待藉由具有一特定硬體架構之一硬體組件處理之串流輸入資料之特性之資料。特性可包含串流輸入資料之一特定接收速率。舉例而言，接收速率可為每毫秒、每秒、每分鐘或其他適當時間單位一個訊框。在一些實施方案中，串流輸入資料可包含(例如)一視訊之多個影像圖框。特性可進一步包含在一時間步階接收之各訊框之一特定資料大小。舉例而言，當各訊框係一影像圖框時，資料大小可為 720×480個像素、1280×720個像素、1920×1080個像素、4096×2160個像素或更大之一像素解析度。在另一實例中，各訊框之資料大小可為各訊框之位元或位元組之數量。舉例而言，當訊框係其他類型之資料時，可以位元或位元組表示資料大小。 Input data 110 may include data representative of characteristics of streaming input data to be processed by a hardware component having a particular hardware architecture. Characteristics may include a specific receive rate for streaming input data. For example, the reception rate may be one frame per millisecond, per second, per minute, or other appropriate time unit. In some implementations, the stream input data may include, for example, multiple image frames of a video. Characteristics may further include a specific data size for each frame received at a time step. For example, when each frame is an image frame, the data size can be 720×480 pixels, 1280×720 pixels, 1920×1080 pixels, 4096×2160 pixels or one of the larger pixel resolutions. In another example, the data size of each frame may be the number of bits or bytes of each frame. For example, when the frame is other types of data, the data size can be expressed in bits or bytes.
輸入資料亦可包含其他特性。特性之一個實例可為經組態以接收串流輸入資料之一感測器之一遮沒週期。遮沒週期可包含一垂直遮沒週期、一水平遮沒週期或兩者。遮沒週期通常係指一感測器接收到一訊框或場之最後可見線(例如，一底部或一左側線)之結束之一時間與感測器接收到下一訊框之第一可見線(例如，一頂部或一右側線)之開始之一時間之間的一時間週期。在一個特定實例中，遮沒週期之頻率(即，時間週期之倒數)對於垂直遮沒週期可為60Hz且對於水平遮沒週期可為15,750Hz。亦可使用其他頻率。因此，一硬體組件之處理速率理想地適應串流影像圖框之遮沒週期。 Input data can also contain other characteristics. One example of a characteristic may be the blanking period of a sensor configured to receive streaming input data. The occlusion period may include a vertical occlusion period, a horizontal occlusion period, or both. The occlusion period usually refers to the time between the end of a sensor receiving the last visible line of a frame or field (for example, a bottom or a left line) and the sensor receiving the first visible line of the next frame. A time period between the beginning of a line (for example, a top or a right side line). In one specific example, the frequency of the blanking period (ie, the inverse of the time period) may be 60 Hz for the vertical blanking period and 15,750 Hz for the horizontal blanking period. Other frequencies may also be used. Therefore, the processing speed of a hardware component is ideally adapted to the blanking period of the streaming image frame.
另一例示性特性可為串流輸入影像資料之像素格式(或色彩格式)，例如，RGB或YUV。另外，串流輸入資料之特性可包含串流輸入資料之各訊框之一抵達順序。 Another exemplary characteristic may be the pixel format (or color format) of the streamed input image data, such as RGB or YUV. Additionally, the characteristics of the stream input data may include an arrival sequence of frames of the stream input data.
串流輸入資料亦可為音訊資料或信號。舉例而言，音訊資料可包含藉由一或多個個體產生之一或多個話音之一記錄、聲音之一記錄、背景雜訊或其他適當類型之音訊資料。串流音訊資料可包含藉由一智慧型揚聲器或其他類型之數位助理裝置擷取之音訊。串流音訊輸入可包含播客、無線電廣播及/或可藉由一音訊感測器(例如，一麥克風)擷取之其他類型之音訊。 Streaming input data can also be audio data or signals. For example, audio data may include a recording of one or more voices produced by one or more individuals, a recording of sounds, background noise, or other suitable types of audio data. Streaming audio data may include audio captured through a smart speaker or other type of digital assistant device. Streaming audio input may include podcasts, radio broadcasts, and/or other types of audio that may be captured by an audio sensor (eg, a microphone).
串流輸入資料可包含串流音訊輸入資料之不同特性。舉例 而言，串流音訊之特性可包含一取樣率。取樣率通常係指使用一音訊感測器從音訊信號取樣之類比信號之一取樣頻率，即，每單位時間收集之樣本類比信號之數量。取樣率可為44.1kHz、48kHz、88.2kHz、96kHz、192kHz或更大。作為另一實例，串流音訊輸入資料之特性可包含一位元深度。位元深度通常係指每音訊樣本之一位元大小，其有時亦被稱為一音訊樣本之一音訊解析度。位元深度可為4位元、16位元、24位元、64位元或其他適當位元深度。在一些實施方案中，串流音訊輸入資料之特性可包含一位元率。位元率通常係指每單位時間輸送或處理之位元之數量。可基於取樣率及位元深度來計算位元率，舉例而言，當一數位音訊光碟音訊(CD)具有44.1kHz之一取樣率、16位元之一位元深度及雙軌時，CD可具有1.4Mbit/s之一位元率。一硬體組件之處理速率理想地快於音訊串流輸入資料之位元率以避免硬體組件處理串流輸入音訊時之積壓。 The streaming input data may include different characteristics of the streaming audio input data. Example For example, the characteristics of the streaming audio may include a sampling rate. Sampling rate generally refers to the sampling frequency of an analog signal sampled from an audio signal using an audio sensor, that is, the number of samples of the analog signal collected per unit time. The sampling rate can be 44.1kHz, 48kHz, 88.2kHz, 96kHz, 192kHz or greater. As another example, characteristics of the streaming audio input data may include a bit depth. Bit depth usually refers to the size of bits per audio sample, which is sometimes referred to as the audio resolution per audio sample. The bit depth can be 4 bits, 16 bits, 24 bits, 64 bits, or other appropriate bit depths. In some implementations, the characteristics of the streaming audio input data may include a bit rate. Bit rate usually refers to the number of bits transmitted or processed per unit time. The bit rate can be calculated based on the sampling rate and bit depth. For example, when a digital audio disc (CD) has a sampling rate of 44.1kHz, a bit depth of 16 bits, and two tracks, the CD can have One bit rate of 1.4Mbit/s. The processing speed of a hardware component is ideally faster than the bit rate of the audio stream input data to avoid a backlog in the hardware component processing the stream input data.
音訊串流輸入資料之其他特性可包含資料之音訊格式。舉例而言，音訊串流輸入資料可以脈衝編碼調變(PCM)、MPEG-1音訊層3(MP3)、視窗媒體音訊(WMA)或其他適當音訊格式的一音訊格式進行編碼。 Other characteristics of the audio stream input data may include the audio format of the data. For example, the audio stream input data may be encoded in an audio format such as Pulse Code Modulation (PCM), MPEG-1 Audio Layer 3 (MP3), Window Media Audio (WMA), or other suitable audio formats.
在一些實施方案中，輸入資料110可包含待藉由一硬體組件(例如，執行機器學習運算之一機器學習處理器)處理之串流輸入資料。架構增強子系統120可經組態以分析串流輸入資料以產生表示串流輸入資料之特性(例如，各訊框之一接收速率或抵達率及各訊框之一大小)之資料。 In some implementations, input data 110 may include streaming input data to be processed by a hardware component (eg, a machine learning processor that performs machine learning operations). The architecture enhancement subsystem 120 may be configured to analyze the streaming input data to generate data representative of characteristics of the streaming input data (eg, a reception rate or arrival rate of each frame and a size of each frame).
視情況，輸入資料110亦可包含表示用於實體化硬體架構模板之可組態設計參數集之初始值之資料。可使用初始值來實體化一預設 架構，例如，包含每群集一個MAC單元之一架構。預設架構可包含(舉例而言)一群集中之一基於靜態隨機存取記憶體(SRAM)之行緩衝單元，其中行緩衝單元具有一單一記憶體庫且經組態以儲存各訊框之一整行輸入像素。作為另一實例，初始值可包含指示一預設架構中之零累加器陣列之資料。 Optionally, input data 110 may also include data representing initial values for a configurable set of design parameters used to materialize the hardware architecture template. Can use initial values to instantiate a preset The architecture, for example, contains one architecture with one MAC unit per cluster. The default architecture may include, for example, a set of static random access memory (SRAM) based line buffer units, where the line buffer units have a single memory bank and are configured to store one of each frame Entire row of input pixels. As another example, the initial value may include data indicating an array of zero accumulators in a default architecture.
儘管上述實例中之串流輸入資料係一影像圖框串流，然應瞭解，串流輸入資料可包含不同類型之資料，諸如音訊記錄、資料結構(諸如向量及張量)，僅舉幾例。 Although the stream input data in the above example is a stream of image frames, it should be understood that the stream input data can include different types of data, such as audio records, data structures (such as vectors and tensors), to name a few .
輸出資料170可包含使用架構模板來實體化或重新實體化一硬體架構之至少一組增強參數值。針對架構模板之一設計參數集來判定該組增強參數值。設計參數可至少包含一硬體架構中之群集的數量、各群集中之PE的數量、各處理元件(PE)中之一MAC陣列的一大小，或兩個或更多個此等參數的任何組合。舉例而言，一MAC陣列之大小可為1、4、10或更大。作為另一實例，各群集中之PE的數量可為1、4、7、20、50或更大。作為另一實例，一硬體架構中之群集的數量可為1、2、8、15、30或更大。在一些實施方案中，輸出資料170可包含定義增強硬體架構的資料，包含該組增強參數值及定義應如何製造硬體組件的任何其他資料。 The output data 170 may include at least one set of enhanced parameter values for instantiating or re-entifying a hardware architecture using an architecture template. A parameter set is designed for one of the architectural templates to determine the set of enhanced parameter values. Design parameters may include at least the number of clusters in a hardware architecture, the number of PEs in each cluster, a size of a MAC array in each processing element (PE), or any two or more of these parameters. combination. For example, the size of a MAC array may be 1, 4, 10, or larger. As another example, the number of PEs in each cluster may be 1, 4, 7, 20, 50, or greater. As another example, the number of clusters in a hardware architecture may be 1, 2, 8, 15, 30, or greater. In some implementations, the output data 170 may include data that defines the architecture of the enhancement hardware, including the set of enhancement parameter values and any other data that defines how the hardware component should be manufactured.
輸出資料170可以可被合成至硬體電路中，且以一物件導向方式程式化之一高階電腦語言(例如，C或C++)進行編碼，如上文描述。在其他實例中，輸出資料170可為一增強參數值清單。 The output data 170 may be synthesized into hardware circuitry and encoded in a high-level computer language (eg, C or C++) programmed in an object-oriented manner, as described above. In other examples, the output data 170 may be a list of enhanced parameter values.
可為一製造系統175提供輸出資料170以產生具有藉由模板使用輸出資料中之參數值實體化之一硬體架構之一硬體組件。製造系統175可為用於製造硬體組件之任何適合系統，例如，一製作系統或一化學 機械拋光系統。 Output data 170 may be provided to a manufacturing system 175 to produce a hardware component having a hardware architecture materialized through a template using parameter values in the output data. Manufacturing system 175 may be any suitable system for manufacturing hardware components, such as a fabrication system or a chemical Mechanical polishing system.
架構增強子系統120可包含一增強引擎130，該增強引擎130經組態以藉由基於輸入資料110處理一架構模板195來產生輸出資料170。舉例而言，架構增強子系統120可包含一記憶體單元190，該記憶體單元190經組態以儲存表示架構模板195之資料，且將該資料提供至增強引擎130。替代地，增強引擎130可接收來自架構增強子系統120外部之一伺服器或一記憶體單元之架構模板195。 Architecture enhancement subsystem 120 may include an enhancement engine 130 configured to generate output data 170 by processing an architecture template 195 based on input data 110 . For example, architecture enhancement subsystem 120 may include a memory unit 190 configured to store data representing architecture templates 195 and provide this data to enhancement engine 130 . Alternatively, the enhancement engine 130 may receive the architecture template 195 from a server or a memory unit external to the architecture enhancement subsystem 120 .
架構模板195可為具有多個可組態設計參數之一高階程式碼。架構模板195經組態以接收一組設計參數值，且一旦藉由系統執行，便可產生表示用於製造用於處理一特定類型之串流輸入資料之一硬體組件之一硬體架構的一輸出資料。舉例而言，增強引擎130可將多個組設計參數值提供至架構模板195且產生多個候選架構145。 Architecture template 195 may be a high-level code with multiple configurable design parameters. Architecture template 195 is configured to receive a set of design parameter values and, once executed by the system, can generate a hardware architecture representing a hardware component for manufacturing a hardware component for processing a specific type of stream input data. 1. Output data. For example, enhancement engine 130 may provide multiple sets of design parameter values to architecture template 195 and generate multiple candidate architectures 145 .
增強引擎130包含經組態以產生多個候選架構145之一候選者產生器140。候選者產生器140可處理輸入資料110及架構模板195以產生多個候選架構145。候選者產生器140經組態以探索藉由給定一特定時間週期內之可用資源的設計參數集所形成之一搜尋空間中的多個參數值。取決於處理串流輸入資料之標定運算要求，搜尋空間可具有範圍從十個、幾百個、數萬個設計點(例如，各包含全部設計參數之各自值的元組)或其他適當數目個設計點之一大小。對於藉由探索獲取之各組候選設計參數值，候選者產生器140可使用架構模板195來實體化一對應硬體架構。下文描述探索一搜尋空間之細節。 Enhancement engine 130 includes a candidate generator 140 configured to generate a plurality of candidate architectures 145 . The candidate generator 140 may process the input data 110 and the architecture template 195 to generate a plurality of candidate architectures 145 . Candidate generator 140 is configured to explore a plurality of parameter values in a search space formed by a set of design parameters given the available resources within a specific time period. Depending on the calibration algorithm requirements for processing the streaming input data, the search space may range from ten, hundreds, tens of thousands of design points (e.g., each tuple containing a respective value for all design parameters), or other appropriate number. Design point one size. For each set of candidate design parameter values obtained through exploration, the candidate generator 140 may use the architecture template 195 to instantiate a corresponding hardware architecture. Details of exploring a search space are described below.
增強引擎130亦包含一分析引擎150，該分析引擎150經組態以分析候選架構145且使用一或多個效能模型185來產生各候選架構145 之一效能值155。舉例而言，效能值可包含任何適合數值，例如，範圍從0至100之一標量值，其指示候選架構145在處理串流輸入資料時之一效能。舉例而言，一候選架構145之效能值155可指示候選硬體架構145在用於處理串流輸入資料時之有效程度。舉例而言，對於符合避免背壓之資料處理速率要求之該等架構，效率可基於運算速度、背壓情形中之時間之一百分比、資料處理速率或相對於資料處理速率之功率或空間消耗。預測一硬體架構在處理一第一串流輸入資料時具有一高效能值(例如，100個中有90個)，但在處理具有不同於第一串流輸入資料之特性之第二串流輸入資料時具有一低效能值(例如，100個中有30個)並不少見。因此，藉由產生與用於處理一特定串流輸入資料之多個(例如，全部)候選架構相關聯之效能值，系統100可高效地獲取用於使用架構模板195來處理特定串流輸入資料之最佳執行候選架構設計之一或多者。 Enhancement engine 130 also includes an analysis engine 150 configured to analyze candidate architectures 145 and generate each candidate architecture 145 using one or more performance models 185 One effectiveness value is 155. For example, the performance value may include any suitable value, such as a scalar value ranging from 0 to 100 that indicates the performance of the candidate architecture 145 in processing streaming input data. For example, a performance value 155 of a candidate architecture 145 may indicate how effective the candidate hardware architecture 145 is in processing streaming input data. For example, for such architectures that meet data processing rate requirements to avoid backpressure, efficiency may be based on operation speed, percentage of time in backpressure conditions, data processing rate, or power or space consumption relative to data processing rate. Predict that a hardware architecture will have a high performance value (e.g., 90 out of 100) when processing a first stream of input data, but will have a high performance value (e.g., 90 out of 100) when processing a second stream of input data that has different characteristics from the first stream of input data. It is not uncommon to have a low performance value (for example, 30 out of 100) when entering data. Therefore, by generating performance values associated with multiple (eg, all) candidate architectures for processing a particular stream input data, the system 100 can efficiently obtain the architecture template 195 for use in processing a particular stream input data. one or more of the best performing candidate architectural designs.
效能模型185可為一分析、一基於機器學習或一模擬模型，其經組態以存取一硬體架構之效能之不同態樣以處理一特定類型之串流輸入資料。效能度量可量測硬體架構之不同態樣，例如，功率消耗、資源使用、處理能力或在處理具有藉由輸入資料110指示之特性之串流輸入資料時是否將存在任何背壓。 Performance model 185 may be an analytical, a machine learning-based, or a simulation model configured to access different aspects of a hardware architecture's performance for processing a specific type of streaming input data. Performance metrics can measure different aspects of the hardware architecture, such as power consumption, resource usage, processing power, or whether there will be any back pressure when processing streaming input data with characteristics indicated by input data 110.
可以儲存於架構增強子系統120中之記憶體單元190中或藉由一外部記憶體單元或一伺服器提供之資料表示效能模型185。 The data representation performance model 185 may be stored in the memory unit 190 in the architecture enhancement subsystem 120 or provided by an external memory unit or a server.
如圖1中展示，選擇引擎160可經組態以基於效能值155從多個候選架構145選擇一候選架構作為一增強硬體架構。舉例而言，選擇引擎160可選擇具有最高效能值155之一候選架構作為增強候選架構。作為另一實例，選擇引擎160可選擇具有超過一指定(例如，預定義)臨限值 之一效能值155且使用最少功率或資源或兩者之一候選架構。舉例而言，選擇引擎160可從候選架構145過濾具有未滿足或超過指定臨限值之一效能值155之各候選架構。接著，選擇引擎160可基於其等效能值、功率消耗估計、所需資源及/或(若干)電路板上之空間等從剩餘候選架構選擇一特定候選架構。舉例而言，選擇引擎160可選擇消耗最少量功率及/或需要最少量空間之剩餘候選架構145。 As shown in FIG. 1 , the selection engine 160 may be configured to select a candidate architecture from a plurality of candidate architectures 145 as an enhanced hardware architecture based on a performance value 155 . For example, the selection engine 160 may select the candidate architecture with the highest performance value 155 as the enhancement candidate architecture. As another example, selection engine 160 may select items that have a value that exceeds a specified (eg, predefined) threshold. A candidate architecture with a performance value of 155 and using the least power or resources or both. For example, selection engine 160 may filter candidate architectures 145 that have a performance value 155 that does not meet or exceeds a specified threshold. The selection engine 160 may then select a specific candidate architecture from the remaining candidate architectures based on its equivalent performance value, power consumption estimate, required resources and/or space on the circuit board(s), etc. For example, selection engine 160 may select the remaining candidate architecture 145 that consumes the least amount of power and/or requires the least amount of space.
在另一實例中，選擇引擎160可基於功率消耗及/或所需空間來過濾候選架構145。舉例而言，針對其設計硬體組件之一裝置可具有有限可用功率及/或空間，例如，尤其在裝置係一智慧型電話或其他行動裝置之情況下。在此實例中，選擇引擎160可從候選架構145過濾將超過可用功率或空間之各候選架構145。接著，選擇引擎160可基於效能值155從剩餘候選架構145選擇，例如，藉由選擇具有最高效能值155之剩餘候選架構。 In another example, selection engine 160 may filter candidate architectures 145 based on power consumption and/or required space. For example, a device for which hardware components are designed may have limited available power and/or space, for example, particularly if the device is a smartphone or other mobile device. In this example, selection engine 160 may filter candidate architectures 145 from candidate architectures 145 that would exceed available power or space. Selection engine 160 may then select from remaining candidate architectures 145 based on performance value 155, for example, by selecting the remaining candidate architecture with the highest performance value 155.
選擇引擎160可將增強硬體架構或增強參數值或兩者編碼至輸出資料170中用於進一步操作。舉例而言，可將增強參數值提供至多個電腦用於平行實體化增強硬體架構。作為另一實例，可將增強硬體架構提供至一或多個製造設備以(例如)基於增強硬體架構平行製造對應硬體組件。 Selection engine 160 may encode the enhanced hardware architecture or enhanced parameter values, or both, into output data 170 for further operation. For example, enhancement parameter values may be provided to multiple computers for parallel physicalization of the enhancement hardware architecture. As another example, the enhanced hardware architecture may be provided to one or more manufacturing equipment to, for example, fabricate corresponding hardware components in parallel based on the enhanced hardware architecture.
圖2至圖5繪示其中具有不同設計之例示性硬體組件處理串流輸入資料之一訊框之例示性情境。為了方便起見，上述程序被描述為藉由定位於一或多個位置中之一或多個電腦之一硬體組件執行。舉例而言，使用圖1之架構設計系統100製造之適當地程式化之一硬體組件可執行此等程序。 2-5 illustrate exemplary scenarios in which exemplary hardware components with different designs process a frame of streaming input data. For convenience, the above processes are described as being executed by a hardware component of one or more computers located in one or more locations. For example, a suitably programmed hardware component manufactured using the architectural design system 100 of Figure 1 may perform these processes.
使用模板製造之所描述硬體組件經組態以用不同設計層級處理串流輸入資料。舉例而言，硬體架構可具有用於群集之一第一級設計、用於處理元件(在本文件中亦被稱為處理單元)之一第二級設計及用於硬體單元陣列(亦被稱為硬體運算單元陣列，或下文硬體運算陣列，例如，MAC單元陣列)之一第三級設計。在判定各設計層級之後可從一模板實體化所描述硬體架構。舉例而言，設計參數可包含群集之一數量及/或配置、各群集中之PE之一數量及/或配置及/或各PE中之硬體單元陣列之一數量。作為另一實例，設計參數對應於各硬體單元陣列之一尺寸，例如，一硬體單元陣列中之硬體單元(例如，MAC單元)之一尺寸或數量。 The described hardware components fabricated using templates are configured to process streaming input data at different design levels. For example, a hardware architecture may have a first-level design for clusters, a second-level design for processing elements (also referred to in this document as processing units), and a second-level design for arrays of hardware cells (also referred to in this document as processing units). A third-level design known as a hardware arithmetic unit array, or below a hardware arithmetic array (e.g., MAC unit array). The described hardware architecture can be materialized from a template after determining each design level. For example, design parameters may include a number and/or configuration of clusters, a number and/or configuration of PEs in each cluster, and/or a number of hardware element arrays in each PE. As another example, the design parameters correspond to a size of each hardware unit array, for example, a size or number of hardware units (eg, MAC units) in a hardware unit array.
如圖2中展示，一例示性硬體架構200可包含包括一個處理單元240的一個群集230。處理單元240可包含一硬體運算單元陣列250。作為另一實例，圖3中展示之硬體架構300，各群集330可包含多個處理單元340a至340c，各處理單元340a至340c分別具有一個硬體單元陣列350a至350c。另外，硬體架構400之另一實例可包含多個群集430a、430b。各群集430a及430b可包含一處理單元440a及440b。各處理單元440a及440b可分別包含一個硬體單元陣列450a及450b。此外，硬體架構500之另一實例可包含多個群集530a至530x，各群集具有多個處理單元540a至540x，各處理單元540a至540x包含一硬體單元陣列550a至550z。儘管對於各硬體架構200至500，為了便於繪示，圖2至圖5中僅描繪兩個、三個或四個群集、處理單元或硬體單元陣列，然應瞭解，一硬體架構可包含其他數量之群集、處理單元或硬體單元陣列。 As shown in FIG. 2 , an exemplary hardware architecture 200 may include a cluster 230 including a processing unit 240 . The processing unit 240 may include a hardware computing unit array 250 . As another example, in the hardware architecture 300 shown in FIG. 3, each cluster 330 may include a plurality of processing units 340a to 340c, and each processing unit 340a to 340c has a hardware unit array 350a to 350c respectively. Additionally, another example of hardware architecture 400 may include multiple clusters 430a, 430b. Each cluster 430a and 430b may include a processing unit 440a and 440b. Each processing unit 440a and 440b may include a hardware unit array 450a and 450b respectively. In addition, another example of the hardware architecture 500 may include a plurality of clusters 530a to 530x, each cluster having a plurality of processing units 540a to 540x, and each processing unit 540a to 540x including a hardware unit array 550a to 550z. Although for each hardware architecture 200 - 500 , only two, three, or four clusters, processing units, or arrays of hardware elements are depicted in FIGS. 2 - 5 for ease of illustration, it should be understood that a hardware architecture may Contains other numbers of clusters, processing units, or arrays of hardware units.
硬體架構可經組態以每單位時間(例如，以各訊框之一時間步階)處理串流輸入資料之一訊框。可以具有多個尺寸之一向量形式(例 如，2、5、10或20個條目之一向量)接收串流輸入資料之各訊框。輸入向量之尺寸可為1×inputdim。替代地，可以一矩陣形式接收串流輸入資料之各訊框，可藉由將輸入矩陣分解成多個向量而將其作為向量處理。 The hardware architecture can be configured to process one frame of streaming input data per unit of time (eg, in one time step per frame). Each frame of the stream input data may be received in the form of a vector of multiple sizes (eg, a vector of 2, 5, 10, or 20 entries). The size of the input vector can be 1×input dim . Alternatively, each frame of the stream input data may be received in the form of a matrix, which may be processed as vectors by decomposing the input matrix into multiple vectors.
通常，硬體架構可運用一預儲存矩陣或向量對輸入向量執行操作。預儲存矩陣可經建構為具有尺寸(例如，inputdim×outputdim)之一矩陣。在一些實施方案中，操作包含向量或矩陣乘法，因此藉由硬體架構產生之輸出資料可呈具有1×outputdim之一尺寸之一向量形式。或，輸出可呈矩陣形式，例如，若操作包含矩陣-矩陣乘法。 Typically, the hardware architecture can use a pre-stored matrix or vector to perform operations on the input vector. The pre-stored matrix may be constructed as a matrix with dimensions (eg, input dim × output dim ). In some implementations, the operations include vector or matrix multiplication, so the output data generated by the hardware architecture may be in the form of a vector with dimensions of 1×output dim . Alternatively, the output can be in matrix form, for example, if the operation involves matrix-matrix multiplication.
在使用所描述模板基於設計參數值判定硬體架構之後，基於所描述硬體架構製造之一硬體組件或系統可基於一硬體單元陣列之一尺寸(例如，一陣列中之MAC單元之數量)將串流輸入資料之各訊框(例如，一輸入向量)劃分成一或多個部分塊。舉例而言，假設一MAC單元陣列包含陣列中之D個MAC單元，各輸入塊之尺寸可為一尺寸D。部分塊在以下說明書中亦被稱為部分片段。各部分塊包含輸入向量之非重疊值。 After using the described template to determine the hardware architecture based on the design parameter values, manufacturing a hardware component or system based on the described hardware architecture can be based on a size of an array of hardware units (e.g., the number of MAC units in an array). ) divides each frame of stream input data (eg, an input vector) into one or more partial blocks. For example, assuming a MAC unit array includes D MAC units in the array, the size of each input block may be a size D. Partial blocks are also referred to as partial fragments in the following description. Each partial block contains non-overlapping values of the input vector.
返回參考圖2至圖5，可逐訊框以一矩陣或向量形式接收串流輸入。若以一矩陣形式接收一訊框之串流輸入，則一控制器或一排程器可將輸入矩陣重新映射或重新塑形為一長形向量或多個向量供硬體組件進一步處理。舉例而言，若以一矩陣形式接收串流輸入資料之各訊框，則控制器或排程器可將矩陣之各列視為一向量，且將運算從矩陣乘矩陣乘法變換為向量乘矩陣乘法。乘以輸入矩陣或向量之另一矩陣係儲存於一記憶體單元中之一矩陣，例如，而非額外串流輸入資料。 Referring back to Figures 2 to 5, the stream input can be received in a matrix or vector form frame by frame. If a frame's streaming input is received in the form of a matrix, a controller or a scheduler can remap or reshape the input matrix into a long vector or vectors for further processing by hardware components. For example, if each frame of the stream input data is received in the form of a matrix, the controller or scheduler can treat each column of the matrix as a vector and transform the operation from matrix-by-matrix multiplication to vector-by-matrix multiplication. The input matrix or vector is multiplied by another matrix that is stored in a memory unit, for example, rather than additionally streaming the input data.
可將串流輸入向量210劃分成多個非重疊部分片段215a至215c，其等各具有對應於硬體單元陣列250之大小之一尺寸D。系統中之 一控制器或一排程器(例如，一硬體階層狀態機)可產生此等片段215a至215c且使用此等片段來排程操作以在不同群集、PE及MAC單元陣列中執行。類似地，串流輸入向量310、410及510可分別被劃分成多個部分片段315a至315c、415a至415c及515a至515c。儘管圖2至圖5中僅展示三個部分片段，然應瞭解，可將一時間步階之輸入向量之各訊框劃分成多於3個部分片段，例如，4、8、12、24、51個或另一適當數目個部分片段。 The streaming input vector 210 may be divided into a plurality of non-overlapping partial segments 215a to 215c, each of which has a dimension D corresponding to the size of the hardware cell array 250. in the system A controller or scheduler (eg, a hardware hierarchy state machine) can generate these fragments 215a-215c and use these fragments to schedule operations for execution in different clusters, PE and MAC cell arrays. Similarly, the streaming input vectors 310, 410, and 510 may be divided into partial segments 315a to 315c, 415a to 415c, and 515a to 515c, respectively. Although only three partial segments are shown in Figures 2 to 5, it should be understood that each frame of the input vector of a time step can be divided into more than 3 partial segments, for example, 4, 8, 12, 24, 51 or another appropriate number of partial fragments.
一般而言，尺寸D可與inputdim相同或小於inputdim，inputdim係儲存於硬體組件中之輸入矩陣之行或列長度。舉例而言，串流輸入資料之一訊框可具有一輸入尺寸100。各部分塊及一對應硬體單元陣列可具有1、10、20、50、100之一尺寸或另一適當尺寸。 In general, dimension D can be the same as or smaller than input dim , which is the row or column length of the input matrix stored in the hardware component. For example, a frame of the stream input data may have an input size of 100. Each partial block and a corresponding hardware unit array may have one size of 1, 10, 20, 50, 100, or another appropriate size.
組件或系統可將全部部分片段儲存於一或多個緩衝區(例如，包含硬體單元陣列之一處理單元中之緩衝區)中。 A component or system may store all partial fragments in one or more buffers (eg, a buffer in a processing unit that includes an array of hardware units).
硬體組件或系統可經組態以基於從預儲存矩陣之一對應列或行(例如，對應於部分塊之一部分列或行)提取或預提取之大小D之一向量對各輸入部分塊執行操作。返回參考圖2至圖5，預儲存矩陣可分別為矩陣資料220、320、420及520。操作可包含(舉例而言)點積及其他適合逐元素算術運算。硬體組件或系統可藉由以此時間步階執行上述操作而產生一部分輸出(例如，一部分和)且將該部分輸出儲存於一累加器陣列(例如，圖2至圖5中分別展示之累加器陣列260、360、460及560)中。 The hardware component or system may be configured to perform execution on each input partial block based on a vector of size D fetched or prefetched from a corresponding column or row of the prestored matrix (e.g., corresponding to a partial column or row of the partial block) operate. Referring back to FIGS. 2 to 5 , the pre-stored matrices may be matrix data 220, 320, 420 and 520 respectively. Operations may include, for example, dot products and other suitable element-wise arithmetic operations. A hardware component or system can generate a portion of the output (e.g., a portion of the sum) by performing the above operations at this time step and storing the portion of the output in an accumulator array (e.g., the accumulators shown in Figures 2 through 5, respectively). device arrays 260, 360, 460 and 560).
硬體組件或系統可針對各輸入部分塊及預儲存矩陣之對應部分列或行重複執行上述操作。總重複次數可基於設計參數，例如，群集、PE及硬體單元陣列之不同數量及各硬體單元陣列之尺寸D。 The hardware component or system may perform the above operations repeatedly for each input partial block and corresponding partial column or row of the pre-stored matrix. The total number of iterations may be based on design parameters, such as different numbers of clusters, PEs, and hardware cell arrays, and the size D of each hardware cell array.
舉例而言且返回參考圖2，對於串流輸入資料之各訊框， 硬體組件或系統可將上述操作重複達outputdim次。因此，累加器陣列之大小可為outputdim用於儲存全部部分輸出。累加器陣列260可彙總所儲存部分輸出且提供彙總輸出用於進一步操作。 For example, referring back to Figure 2, the hardware component or system may repeat the above operations up to output dim times for each frame of the stream input data. Therefore, the size of the accumulator array can be output dim to store the entire partial output. Accumulator array 260 may summarize the stored partial outputs and provide a summarized output for further operations.
作為另一實例且返回參考圖3，硬體架構300可包含一群集330中之多個處理單元340a至340c。假設各處理單元340a至340c可具有大小1之一硬體單元陣列350a至350c(MAC陣列)(例如，各硬體單元陣列350a至350c中僅一單一MAC單元)，則MAC陣列之數量等於群集330中之處理單元340a至340c之數量。所描述硬體組件或系統可將輸入向量劃分成多個部分塊，其等各具有一個元素之一尺寸，此係因為硬體單元陣列具有1之一尺寸。 As another example and referring back to FIG. 3 , hardware architecture 300 may include a plurality of processing units 340 a - 340 c in a cluster 330 . Assuming that each processing unit 340a - 340c may have one hardware unit array 350a - 350c (MAC array) of size 1 (eg, only a single MAC unit in each hardware unit array 350a - 350c ), then the number of MAC arrays is equal to the cluster The number of processing units 340a to 340c in 330. The described hardware component or system can divide the input vector into a plurality of partial blocks, each of which has a size of one element, because the hardware cell array has a size of 1.
假設輸出尺寸大於或等於處理單元之數量，可使用一或多 個處理單元來執行多於一個部分塊，即，若干Assuming that the output size is greater than or equal to the number of processing units, one or more processing units can be used to execute more than one partial block, i.e., several
參考圖4，例示性硬體架構400可包含多個群集，例如，兩個群集430a及430b。將串流輸入向量410劃分成多個部分片段415a至415c。多個部分片段415a至415c之各者具有作為(若干)硬體單元陣列450a及450b之一尺寸。 Referring to Figure 4, an exemplary hardware architecture 400 may include multiple clusters, such as two clusters 430a and 430b. The streaming input vector 410 is divided into a plurality of partial segments 415a to 415c. Each of the plurality of partial segments 415a to 415c has a size as one of the hardware cell array(s) 450a and 450b.
多個部分片段415a至415c可均勻分佈至兩個群集430a及430b之各者。舉例而言，如圖4中展示，將部分片段415a及415c指派給群 集430a，且將部分片段415b及另一部分片段(未展示)指派給群集430b。 The plurality of partial segments 415a-415c may be evenly distributed to each of the two clusters 430a and 430b. For example, as shown in Figure 4, partial segments 415a and 415c are assigned to the group Set 430a, and assign part of segment 415b and another part of segment (not shown) to cluster 430b.
群集430a及430b之各者可經組態以使用矩陣資料420之對應部分列或行來處理經指派部分片段。在各群集中執行之程序及操作類似於關於圖2描述之程序及操作。各群集430a及430b可藉由處理經指派部分片段而產生一各自部分和，其中部分和可具有1×outputdim之一尺寸。各群集430a及430b可進一步經組態以將各自部分和向量提供至累加器單元455。累加器單元455可經組態以組合來自不同群集之部分和向量以產生一輸出向量且將該輸出向量提供至累加器陣列460。在一些實施方案中，累加器陣列可具有1×outputdim之一尺寸。 Each of clusters 430a and 430b may be configured to use corresponding partial columns or rows of matrix data 420 to process assigned partial segments. The procedures and operations performed in each cluster are similar to those described with respect to FIG. 2 . Each cluster 430a and 430b may produce a respective partial sum by processing the assigned partial fragment, where the partial sum may have a size of 1×output dim . Each cluster 430a and 430b may be further configured to provide respective portions and vectors to accumulator unit 455. Accumulator unit 455 may be configured to combine partial sum vectors from different clusters to produce an output vector and provide the output vector to accumulator array 460 . In some implementations, the accumulator array may have one size of 1×output dim .
參考圖5且如上文描述，例示性硬體架構500可包含多個群集530a至530x，各群集具有多個處理單元540a至540x，各處理單元具有一各自硬體單元陣列550a至550y。 Referring to Figure 5 and described above, the exemplary hardware architecture 500 may include a plurality of clusters 530a-530x, each cluster having a plurality of processing units 540a-540x, each processing unit having a respective array of hardware units 550a-550y.
類似於圖4之程序，所描述硬體組件或系統可經組態以在一時間步階將一輸入向量之一訊框劃分成多個部分片段515a至515c。各群集530a至530x實質上均勻地被指派有部分片段之一各自子集。舉例而言，如圖5中展示，將部分片段515a及515c指派給群集530a，且將部分片段515b及另一部分片段(未展示)指派給群集530x。 Similar to the process of Figure 4, the described hardware component or system may be configured to divide a frame of an input vector into a plurality of partial segments 515a-515c at a time step. Each cluster 530a-530x is assigned substantially evenly a respective subset of the partial fragments. For example, as shown in Figure 5, partial segments 515a and 515c are assigned to cluster 530a, and partial segment 515b and another partial segment (not shown) are assigned to cluster 530x.
各群集530a至530x執行類似於關於圖3描述之程序及操作的一各自程序及操作。各群集530a至530x可產生具有1×outputdim之一尺寸之一各自部分和向量且將各自部分和提供至累加器單元555。累加器單元555經組態以組合對應部分和向量且產生一輸出向量以提供至累加器陣列560供進一步操作。累加器陣列560可包含1×outputdim之一尺寸。 Each cluster 530a - 530x performs a respective process and operations similar to those described with respect to FIG. 3 . Each cluster 530a - 530x may generate a respective partial sum vector having a size of 1×output dim and provide the respective partial sum to accumulator unit 555 . Accumulator unit 555 is configured to combine corresponding portions and vectors and generate an output vector to provide to accumulator array 560 for further operation. Accumulator array 560 may contain a size of 1×output dim .
返回參考圖1且結合圖2至圖5，架構設計系統100可根據不 同串流輸入資料之特性產生硬體架構200、300、400及500。舉例而言，當串流輸入資料具有一較慢抵達率(例如，每秒)或各訊框具有一小的大小(例如，對於一影像圖框為120個像素)時，架構設計系統100可使用一群集中之一單一處理單元來產生類似於硬體架構200之一硬體架構。作為另一實例，當串流輸入資料具有一較快抵達率(例如，每毫秒)，或各訊框具有類似於硬體架構300、400或500之一大的大小(例如，對於一影像圖框為4000個像素)時，具有一群集中之多個處理元件，或具有多個群集。 Referring back to Figure 1 and in conjunction with Figures 2 to 5, the architecture design system 100 can be based on different The characteristics of the same stream input data generate hardware architectures 200, 300, 400 and 500. For example, when the streaming input data has a slow arrival rate (eg, per second) or the frames have a small size (eg, 120 pixels for an image frame), the architecture design system 100 may A hardware architecture similar to hardware architecture 200 is produced using a single processing unit in a cluster. As another example, when the streaming input data has a faster arrival rate (e.g., per millisecond), or each frame has a large size similar to the hardware architecture 300, 400, or 500 (e.g., for an image box is 4000 pixels), have multiple processing elements in a cluster, or have multiple clusters.
如上文描述，例示性硬體架構可具有與硬體單元陣列之尺寸、一處理單元中之硬體單元陣列之一數量、一群集中之處理單元之一數量及一硬體架構中之群集之一數量之至少一者相關聯之一組設計參數值。鑑於輸入資料抵達率、處理能力、功率消耗及可用面積或空間之要求之約束，系統經組態以使用藉由設計參數集形成之一搜尋空間來判定一組設計參數值。結合圖8描述判定一組設計參數值之細節。 As described above, exemplary hardware architectures may have dimensions related to hardware cell arrays, a number of hardware cell arrays in a processing unit, a number of processing units in a cluster, and one of clusters in a hardware architecture. At least one of the quantities is associated with a set of design parameter values. Given the constraints of input data arrival rate, processing power, power consumption, and available area or space requirements, the system is configured to determine a set of design parameter values using a search space formed by a set of design parameters. Details of determining a set of design parameter values are described in conjunction with Figure 8.
轉向用於處理輸入向量之預儲存矩陣。將預儲存矩陣(亦被稱為非串流矩陣)提取或預提取至裝置上記憶體，例如，一片上靜態隨機存取記憶體(SRAM)單元。由於預儲存矩陣之大小對應於輸入向量在一時間步階之大小，故一較大向量輸入需要一較大預儲存矩陣，此導致較大片上SRAM消耗。 Go to the prestored matrix used to process the input vector. Fetch or prefetch a pre-stored matrix (also known as a non-streaming matrix) to on-device memory, such as an on-chip static random access memory (SRAM) cell. Since the size of the pre-storage matrix corresponds to the size of the input vector at a time step, a larger vector input requires a larger pre-storage matrix, which results in larger on-chip SRAM consumption.
圖6繪示用於一非串流矩陣600之一例示性資料存取型樣。為了方便起見，資料存取型樣與藉由定位於一或多個位置中之一或多個電腦之一系統執行之一程序相關聯。舉例而言，基於從圖1之架構設計系統100產生之一硬體架構製造之適當地程式化之一硬體組件可執行程序以產生資料存取型樣。 Figure 6 illustrates an exemplary data access pattern for a non-streaming matrix 600. For convenience, a data access pattern is associated with a program executed by a system located on one or more computers in one or more locations. For example, a suitably programmed hardware component executable based on a hardware architecture generated from the architecture design system 100 of FIG. 1 can be used to generate a data access pattern.
結合圖5，假設硬體架構包含兩個群集，例如，群集630a及630b，各群集具有三個PE(或處理單元)640a至640c，各PE2具有大小4之一MAC陣列，系統可將例示性非串流矩陣600劃分成以如圖6中展示之兩個矩形繪示之兩個部分。可將頂部部分指派給群集630a且可將底部部分指派給群集630b。 5, assuming that the hardware architecture includes two clusters, for example, clusters 630a and 630b, each cluster has three PEs (or processing units) 640a to 640c, each PE2 has a MAC array of size 4, the system can be illustratively The non-streaming matrix 600 is divided into two parts represented by two rectangles as shown in FIG. 6 . The top portion may be assigned to cluster 630a and the bottom portion may be assigned to cluster 630b.
系統可存取非串流矩陣600之一各自部分以處理一對應部分片段。非串流矩陣600具有8×9之一尺寸。舉例而言，當群集630a在PE 640a處接收大小4之一部分片段615a時。群集亦可存取頂部部分之第一行(例如，非串流矩陣600之一部分行)且對部分片段615a之各元素與PE 640a處之部分行中之一對應元素執行逐元素操作以產生一第一部分和。類似地，群集630a可在PE 640b處接收部分片段615a且存取頂部部分之第二行，且使用PE 640b來執行部分片段615a及頂部部分之第二行之操作以產生一第二部分和。群集630a可在PE 640c處接收部分片段615a且存取頂部部分之第三行，且使用PE 640c來執行部分片段615a及頂部部分之第三行之操作以產生一第三部分和。第一、第二及第三部分和可配置成尺寸3之一部分和向量。 The system may access a respective portion of the non-streaming matrix 600 to process a corresponding portion of the segment. The non-streaming matrix 600 has a size of 8x9. For example, when cluster 630a receives partial segment 615a of size 4 at PE 640a. The cluster may also access the first row of the top portion (e.g., a partial row of non-streaming matrix 600) and perform an element-wise operation on each element of partial segment 615a and one of the corresponding elements in the partial row at PE 640a to produce a Part one and. Similarly, cluster 630a may receive partial fragment 615a and access the second row of the top portion at PE 640b, and use PE 640b to perform operations on partial fragment 615a and the second row of the top portion to produce a second partial sum. Cluster 630a may receive partial fragment 615a and access the third row of the top portion at PE 640c, and use PE 640c to perform operations on partial fragment 615a and the third row of the top portion to produce a third partial sum. The first, second and third partial sums can be configured as a partial sum vector of size 3.
接著，PE 640a至640c可藉由存取頂部部分之第四至第六行以產生尺寸3之一第二部分和向量，且存取頂部部分之第七至第九行以產生尺寸3之一第三部分和向量而重複操作。群集630a可將第一、第二及第三部分和向量提供至一累加器單元(例如，圖5之累加器單元555)以形成尺寸1×9之一中間部分和向量。 PEs 640a through 640c can then generate a second part and vector of size 3 by accessing the fourth through sixth rows of the top section, and accessing the seventh through ninth rows of the top section to generate one of size 3 Repeat for the third part and vector. Cluster 630a may provide the first, second, and third partial sum vectors to an accumulator unit (eg, accumulator unit 555 of Figure 5) to form an intermediate partial sum vector of size 1×9.
轉向非串流矩陣600之底部部分(亦即，部分片段615b)，群集630b及其對應PE 640d至640f可存取底部部分(亦即，部分片段615b) 之各行以產生尺寸1×9之另一中間部分和向量。在一些實施方案中，系統可提供兩個中間部分和向量作為輸出資料。替代地，系統可組合部分和向量以產生具有1×9之一尺寸之一輸出資料。 Turning to the bottom portion of the non-streaming matrix 600 (ie, partial segment 615b), cluster 630b and its corresponding PEs 640d through 640f have access to the bottom portion (ie, partial segment 615b) rows to produce another middle section and vector of size 1×9. In some embodiments, the system may provide both intermediate components and vectors as output data. Alternatively, the system can combine parts and vectors to produce an output data with one of dimensions 1×9.
當串流輸入資料之一訊框呈一矩陣形式時，系統可依照類似於上述技術之一程序執行操作以處理串流輸入資料之訊框。舉例而言，若輸入訊框具有M列及K行之一尺寸且在硬體組件或系統處被逐列接收，且非串流矩陣具有K列及N行之一尺寸。系統可處理輸入矩陣之各列且載入非串流矩陣達M次。 When a frame of the stream input data is in the form of a matrix, the system may perform operations to process the frame of the stream input data in accordance with a procedure similar to the technique described above. For example, if the input frame has dimensions of M columns and K rows and is received column-by-column at a hardware component or system, and the non-streaming matrix has dimensions of K columns and N rows. The system can process each column of the input matrix and load the non-streamed matrix up to M times.
然而，當輸入訊框之大小為大且非串流矩陣係具有一特定稀疏性位準之一稀疏矩陣(即，具有一特定百分比之零元素之一矩陣)時，多次載入或預提取一大的大小之非串流矩陣在功率消耗及運算資源方面效率低下。結合圖7描述處理一稀疏非串流矩陣之技術。 However, when the size of the input frame is large and the non-streamed matrix is a sparse matrix with a specific sparsity level (i.e., a matrix with a specific percentage of zero elements), multiple loading or prefetching A large size non-streaming matrix is inefficient in terms of power consumption and computing resources. A technique for processing a sparse non-streaming matrix is described with reference to FIG. 7 .
圖7係處理一稀疏非串流矩陣之一例示性程序700。為了方便起見，程序700被描述為藉由定位於一或多個位置中之一或多個電腦之一系統執行。舉例而言，根據從圖1之架構設計系統100產生之一硬體架構製造之適當地程式化之一硬體組件可執行程序700。 Figure 7 illustrates an exemplary procedure 700 for processing a sparse non-streaming matrix. For convenience, process 700 is described as being executed by a system located on one or more computers in one or more locations. For example, a suitably programmed hardware component executable 700 is manufactured based on a hardware architecture generated from the architecture design system 100 of FIG. 1 .
由於非串流矩陣係預定的且儲存於一片上記憶體中，故系統可判定矩陣之一稀疏性位準及矩陣之零元素。稀疏性位準可為10%、20%、50%或另一適當稀疏性位準。 Because the non-streaming matrix is predetermined and stored in on-chip memory, the system can determine a sparsity level of the matrix and the zero elements of the matrix. The sparsity level may be 10%, 20%, 50%, or another appropriate sparsity level.
在一些實施方案中，稀疏性位準可為被定義為1×N向量之一區塊中之K個非零元素之一區塊稀疏性比率。可針對各自任務(諸如面部偵測、視線偵測或深度圖產生)調諧非串流矩陣之區塊稀疏性比率。由於可預定稀疏性位準，故本說明書中描述之硬體組件或系統可離線預處理 並壓縮稀疏矩陣。 In some implementations, the sparsity level may be a block sparsity ratio defined as a block sparsity ratio of K non-zero elements in a block of a 1×N vector. The block sparsity ratio of the non-streaming matrix can be tuned for respective tasks such as face detection, gaze detection or depth map generation. Because sparsity levels can be predetermined, the hardware components or systems described in this specification can be preprocessed offline. and compress sparse matrices.
另外，所描述技術亦可基於預定稀疏性位準及串流輸入資料之特性而判定用於劃分輸入向量之一分段大小(尺寸大小D)。在判定尺寸大小D之後，系統可存取D個元素之粒度中之一非串流矩陣且對非串流矩陣之各部分行或列之非零元素進行編碼。以此方式，與使用現有壓縮格式(例如，壓縮稀疏列(CSR)格式或壓縮稀疏行(CSC)格式)相比，所描述技術可最大化硬體單元陣列之利用且降低後設資料儲存耗用及解碼硬體索引之複雜性。 Additionally, the described techniques may also determine the segment size (size D) used to divide the input vector based on a predetermined sparsity level and characteristics of the streaming input data. After determining the size D, the system can access a non-streaming matrix at a granularity of D elements and encode the non-zero elements of each partial row or column of the non-streaming matrix. In this manner, the described techniques maximize utilization of the hardware cell array and reduce metadata storage consumption compared to using existing compression formats, such as compressed sparse column (CSR) format or compressed sparse row (CSC) format. The complexity of using and decoding hardware indexes.
如圖7中展示，一例示性非串流矩陣(例如，矩陣資料720)包含在陰影區中描繪之非零元素735及在白色區中描繪之零元素740。舉例而言，向量資料735a至735d之各者包含四個元素。向量資料735a之第一及第三元素非零，且向量資料735a之第二及第四元素係零。向量資料735b之第一及第四元素非零，且向量資料735b之第二及第三元素係零。向量資料735c之第二及第三元素非零，且向量資料735c之第一及第四元素係零。 As shown in Figure 7, an exemplary non-streaming matrix (eg, matrix data 720) includes non-zero elements 735 depicted in shaded areas and zero elements 740 depicted in white areas. For example, each of vector data 735a through 735d contains four elements. The first and third elements of vector data 735a are non-zero, and the second and fourth elements of vector data 735a are zero. The first and fourth elements of vector data 735b are non-zero, and the second and third elements of vector data 735b are zero. The second and third elements of vector data 735c are non-zero, and the first and fourth elements of vector data 735c are zero.
系統可處理各向量資料735a至735d以產生一各自壓縮資料750a至750d，其中各壓縮資料僅包含具有指示相對於原始向量資料735a至735d之一相對位置之識別符760之非零元素。可基於一索引映射或一位元圖來產生識別符760。在於一PE處接收到一部分片段之後，系統可使用識別符從部分片段選擇值以處理部分片段。從部分片段選擇之值對應於對應壓縮資料750a至750d中之非零元素。 The system may process each vector data 735a-735d to produce a respective compressed data 750a-750d, where each compressed data contains only non-zero elements having an identifier 760 indicating a relative position relative to the original vector data 735a-735d. The identifier 760 may be generated based on an index map or a bitmap. After receiving a partial fragment at a PE, the system may use the identifier to select values from the partial fragment to process the partial fragment. The values selected from the partial fragments correspond to non-zero elements in the corresponding compressed data 750a through 750d.
舉例而言，基於向量資料735a產生之壓縮資料750可僅包含非零資料，即，第一及第三元素，及與第一及第三元素相關聯之識別符 760。識別符760經組態以指示壓縮資料750之第一元素對應於向量資料735a之第一位置，且壓縮資料750a之第二元素對應於向量資料735a之第三位置。在處理具有一對應輸入部分片段之向量資料735a時，系統可僅從定位於輸入部分片段之第一及第三位置中之部分片段選擇值且運用壓縮資料750a中之對應非零元素來執行選定值之逐元素操作。 For example, compressed data 750 generated based on vector data 735a may include only non-zero data, namely, first and third elements, and identifiers associated with the first and third elements. 760. Identifier 760 is configured to indicate that the first element of compressed data 750 corresponds to the first position of vector data 735a, and that the second element of compressed data 750a corresponds to the third position of vector data 735a. When processing vector data 735a with a corresponding input partial fragment, the system may select values from only the partial fragments located in the first and third positions of the input partial fragment and perform the selection using the corresponding non-zero elements in the compressed data 750a Element-wise operations on values.
此外，所描述技術可支援密集運算及稀疏運算兩者。更明確言之，所描述技術可在硬體組件在執行操作以處理串流輸入資料時回應於判定儲存於硬體組件中之一輸入矩陣之一變化而在一密集模式與一稀疏模式之間切換硬體組件處理串流輸入資料之一模式。舉例而言，所製造之硬體組件可包含一控制及狀態暫存器(CSR)，該控制及狀態暫存器(CSR)用於回應於判定新的非串流矩陣符合稀疏矩陣模式之一臨限稀疏值而將運用一新的非串流資料處理串流輸入資料之硬體組件從一密集矩陣模式切換至一稀疏矩陣模式。應注意，識別符僅用於稀疏矩陣模式。 Additionally, the techniques described can support both dense and sparse operations. More specifically, the techniques described may determine whether a dense mode or a sparse mode changes in response to a change in an input matrix stored in the hardware component when the hardware component performs operations to process streaming input data. Switches the hardware component to one of the modes for processing streaming input data. For example, the fabricated hardware component may include a control and status register (CSR) in response to determining that the new non-streaming matrix conforms to one of the sparse matrix modes. The threshold sparsity value switches the hardware component that uses a new non-streaming data to process the streaming input data from a dense matrix mode to a sparse matrix mode. It should be noted that the identifier is only used in sparse matrix mode.
圖8係使用一硬體架構模板來產生一輸出資料之一例示性程序800之一流程圖。為了方便起見，程序800被描述為藉由定位於一或多個位置中之一或多個電腦之一系統執行。舉例而言，適當地程式化之一系統(例如，圖1之架構設計系統100)可執行程序800。 Figure 8 is a flowchart of an exemplary process 800 for generating an output data using a hardware architecture template. For convenience, process 800 is described as being executed by a system located on one or more computers in one or more locations. For example, a suitably programmed system (eg, architecture design system 100 of FIG. 1 ) may execute program 800 .
系統接收表示一硬體架構模板之資料(810)。如上文描述，硬體架構模板經組態以包含一可組態設計參數集且基於經判定設計參數值而實體化一硬體架構。可使用硬體架構來製造經組態以處理特定串流輸入資料之一硬體組件。設計參數集包含以下項之兩個或更多個：(i)一硬體架構中之群集之一數量；(ii)各群集中之處理單元之一數量；及(iii)各處理單元中之一硬體單元陣列之一大小。 The system receives data representing a hardware architecture template (810). As described above, the hardware architecture template is configured to contain a configurable design parameter set and materialize a hardware architecture based on determined design parameter values. The hardware architecture can be used to create a hardware component configured to handle specific stream input data. The design parameter set includes two or more of the following: (i) the number of clusters in a hardware architecture; (ii) the number of processing units in each cluster; and (iii) the number of processing units in each processing unit. One size of a hardware cell array.
系統針對用於製造一硬體組件之一硬體架構判定可組態設計參數集之值(820)。值之判定至少部分基於給定硬體組件之各自串流輸入資料之特性。結合步驟840至870描述判定程序之細節。 The system determines values for a set of configurable design parameters for a hardware architecture used to manufacture a hardware component (820). Values are determined based, at least in part, on the characteristics of a given hardware component's respective stream input data. Details of the determination process are described in conjunction with steps 840 to 870.
系統產生包含值之輸出資料(830)。在一些實施方案中，輸出資料可包含藉由運用硬體模板之經判定值來設定可組態設計參數集所產生之一實體化硬體架構。替代地，輸出資料可包含所獲得設計參數值及基於來自模板之值而產生之一對應硬體架構兩者。系統可進一步基於硬體架構來提供用於製造硬體組件之輸出資料。 The system generates output data containing values (830). In some implementations, the output data may include a materialized hardware architecture generated by setting a set of configurable design parameters using determined values of the hardware template. Alternatively, the output data may include both the obtained design parameter values and a corresponding hardware architecture generated based on the values from the template. The system can further provide output data for manufacturing hardware components based on the hardware architecture.
為產生可組態設計參數集之值，系統首先基於可組態設計參數集之一搜尋空間來產生多個候選硬體架構(840)。如上文描述，搜尋空間係基於可組態設計參數集且受基於可用運算資源、功率消耗及片上面積使用之可能參數值的限制。系統可產生具有一或多個可能組之設計參數值中之一各自組之設計參數值的多個候選硬體架構。 To generate values for a configurable design parameter set, the system first generates a plurality of candidate hardware architectures based on a search space of one of the configurable design parameter sets (840). As described above, the search space is based on a configurable design parameter set and is limited by possible parameter values based on available computing resources, power consumption, and on-chip area usage. The system may generate a plurality of candidate hardware architectures having a respective set of design parameter values for one or more possible sets of design parameter values.
可使用一或多個不同搜尋演算法來判定一或多個可能組之設計參數值。舉例而言，系統可執行隨機搜尋、窮舉搜尋或起源搜尋(genetic search)演算法。 One or more different search algorithms may be used to determine one or more possible sets of design parameter values. For example, the system can perform random search, exhaustive search, or genetic search algorithms.
設計參數集之一個實例範圍可為用於製造一硬體組件之5個群集、20個PE及100個MAC單元陣列。換言之，候選硬體組件可具有範圍從1至5之數量的群集，各群集可具有範圍從1至20之數量的PE，且各PE可具有各具有一各自大小之1至100個MAC單元陣列。系統可使用上述搜尋演算法來產生多個候選硬體架構以從實例範圍搜尋多個可能值，且使用模板來應用各集以實體化一各自硬體組件。舉例而言，系統可從設計參數集之最小值開始，且逐漸增加設計參數之一或多者的值。一旦獲取適於 處理能力要求之一組設計參數值，系統便可停止搜尋。 An example range of design parameter sets may be an array of 5 clusters, 20 PEs, and 100 MAC cells used to manufacture a hardware component. In other words, candidate hardware components may have a number of clusters ranging from 1 to 5, each cluster may have a number of PEs ranging from 1 to 20, and each PE may have an array of 1 to 100 MAC cells each having a respective size. . The system may use the search algorithm described above to generate multiple candidate hardware architectures to search multiple possible values from the instance scope, and use templates to apply each set to instantiate a respective hardware component. For example, the system may start with the minimum value of a set of design parameters and gradually increase the value of one or more of the design parameters. Once acquired it is suitable for The system can stop searching if a set of design parameter values is required for processing capacity.
在一些實施方案中，系統可搜尋與硬體單元陣列之一大小、一PE中之硬體單元陣列之一數量及一群集中之PE之一數量相關聯的參數值，但不搜尋或增加群集之一數量直至判定一轉折點，此處進一步增加硬體單元陣列之大小或每群集之PE之數量將不利地影響運算時脈速率或導致邏輯擁塞，即，硬體單元陣列之大小及每群集之處理單元之數量處於群集之一可擴充性極限。以此方式，系統可配置更多硬體單元及PE，且最小化用於實體化一硬體架構之群集的數量以滿足所需處理能力。 In some implementations, the system may search for parameter values associated with a size of a hardware cell array, a number of hardware cell arrays in a PE, and a number of PEs in a cluster, but does not search or increase the size of the cluster. A number until a tipping point is determined where further increasing the size of the hardware unit array or the number of PEs per cluster will adversely affect the computing clock rate or cause logical congestion, i.e., the size of the hardware unit array and the processing per cluster. The number of units is at one of the cluster's scalability limits. In this way, the system can be configured with more hardware units and PEs, and the number of clusters used to materialize a hardware architecture is minimized to meet the required processing capabilities.
系統針對多個候選硬體架構之各者判定一組效能度量之各自值(850)。使用一效能模型(或一成本模型)針對各候選硬體架構判定效能值組之各自值。效能值各與表示一成本或多個成本之組合之一數值相關聯。成本可表示延時、處理能力、功率消耗、片上面積使用、運算資源使用或其等之任何適合組合之一位準。 The system determines respective values of a set of performance metrics for each of the plurality of candidate hardware architectures (850). A performance model (or a cost model) is used to determine respective values of the performance value set for each candidate hardware architecture. Performance values are each associated with a numerical value that represents a cost or a combination of costs. Cost may represent a level of latency, processing power, power consumption, on-chip area usage, computing resource usage, or any suitable combination thereof.
效能模型可為用於處理具有一組設計參數值之一硬體架構之任何適合模型。效能模型可為一分析模型、一基於機器學習之模型或一硬體模擬模型，僅舉幾例。 The performance model may be any suitable model for processing a hardware architecture that has a set of design parameter values. The performance model can be an analytical model, a machine learning-based model, or a hardware simulation model, to name a few.
一分析模型通常可判定硬體架構之一拓撲(例如，介面、佈線、運算單元(諸如乘法器、加法器及邏輯單元)之數量)，且基於拓撲判定硬體架構之效能值。一個例示性分析模型可為一基於頂線(roofline)之模型，其依據機器峰值效能、機器峰值頻寬及算術強度產生一硬體架構之效能值。基於頂線之模型之輸出可為表示在特定運算要求或資源限制下之硬體架構之一效能上限(upper bound)(例如，「上限(ceiling)」)之一功能曲線。基於頂線之模型可自動判定整體效能之「瓶頸」因素且輸出表示延 時、處理能力或功率消耗或兩者之一位準之效能值，如上文描述。 An analytical model typically determines the topology of the hardware architecture (eg, the number of interfaces, wiring, arithmetic units (such as multipliers, adders, and logic units)) and determines the performance value of the hardware architecture based on the topology. An exemplary analysis model may be a roofline-based model that generates performance values for a hardware architecture based on peak machine performance, peak machine bandwidth, and arithmetic intensity. The output of the topline-based model may be a functional curve that represents an upper bound (eg, "ceiling") of the performance of the hardware architecture under specific computing requirements or resource constraints. The top-line-based model automatically determines the "bottleneck" factors in overall performance and outputs representations of delays. Performance values in terms of time, processing power, or power consumption, or both, as described above.
替代地，一效能模型可為運用經標記訓練樣本(例如，監督式學習)訓練之一機器學習模型。可使用高階合成及暫存器傳送級模擬來產生訓練樣本。經訓練機器學習模型經組態以產生效能值之一預測且可為任何適合機器學習模型，例如，一多層感知器模型。 Alternatively, a performance model may be a machine learning model trained using labeled training samples (eg, supervised learning). High-level synthesis and register transfer level simulation can be used to generate training samples. The trained machine learning model is configured to produce a prediction of a performance value and can be any suitable machine learning model, for example, a multi-layer perceptron model.
另外，一效能模型可為一模擬模型。鑑於一或多個隨機化輸入刺激，模擬模型可基於硬體架構之特性而產生功率運算及處理能力之一估計。 Additionally, a performance model may be a simulation model. Given one or more randomized input stimuli, the simulation model can generate an estimate of power computing and processing capabilities based on characteristics of the hardware architecture.
系統選擇一候選硬體架構作為硬體組件之硬體架構(860)。更明確言之，系統可至少部分基於效能值來選擇增強硬體架構。如上文描述，硬體架構可為具有最高效能值之一候選硬體架構。替代地，硬體架構可具有不錯的效能值但需要最少運算資源。 The system selects a candidate hardware architecture as the hardware architecture of the hardware component (860). More specifically, the system may select enhanced hardware architecture based at least in part on performance values. As described above, the hardware architecture may be a candidate hardware architecture with one of the highest performance values. Alternatively, a hardware architecture can have good performance values but require minimal computing resources.
系統基於與選定候選硬體架構相關聯之設計參數值來判定值(870)。經判定值可被包含於為使用模板實體化一硬體架構而提供或用於製造一硬體組件之輸出資料中。 The system determines values based on design parameter values associated with the selected candidate hardware architecture (870). The determined values may be included in output data provided for use of templates to instantiate a hardware architecture or for manufacturing a hardware component.
可在數位電子電路中、在有形體現之電腦軟體或韌體中、在電腦硬體中(包含本說明書中揭示之結構及其等結構等效物)、或在其等之一或多者之組合中實施本說明書中描述之標的物及功能操作之實施例。本說明書中描述之標的物之實施例可經實施為一或多個電腦程式，例如，在一有形非暫時性儲存媒體上編碼以由資料處理設備執行或控制資料處理設備之操作之電腦程式指令之一或多個模組。電腦儲存媒體可係一機器可讀儲存裝置、一機器可讀儲存基板、一隨機或串列存取記憶體裝置或其等之一或多者之一組合。替代地或另外地，程式指令可在一人工產生之傳播 信號(例如，一機器產生之電氣、光學或電磁信號)上編碼，該信號經產生以對資訊進行編碼以傳輸至適合接收器設備供一資料處理設備執行。 It can be in a digital electronic circuit, in a tangible embodiment of computer software or firmware, in computer hardware (including the structure disclosed in this specification and its structural equivalents), or in one or more of them. Embodiments that implement the subject matter and functional operations described in this specification in combination. Embodiments of the subject matter described in this specification may be implemented as one or more computer programs, e.g., computer program instructions encoded on a tangible non-transitory storage medium for execution by, or to control the operation of, data processing equipment. one or more modules. The computer storage medium may be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of these. Alternatively or additionally, program instructions may be transmitted in an artificially generated Encoding on a signal (eg, an electrical, optical, or electromagnetic signal generated by a machine) that is generated to encode information for transmission to a suitable receiver device for execution by a data processing device.
術語「資料處理設備」係指資料處理硬體且涵蓋用於處理資料之全部種類之設備、裝置及機器，包含(藉由實例)一可程式化處理器、一電腦或多個處理器或電腦。設備亦可係或進一步包含專用邏輯電路，例如，一FPGA(場可程式化閘陣列)或一ASIC(特定應用積體電路)。除硬體以外，設備可視情況亦包含創建電腦程式之一執行環境之程式碼，例如，組成處理器韌體、一協定堆疊、一資料庫管理系統、一作業系統或其等之一或多者之一組合之程式碼。 The term "data processing equipment" means data processing hardware and encompasses all types of equipment, devices and machines used to process data, including (by way of example) a programmable processor, a computer or processors or computers . The device may also be or further include dedicated logic circuitry, such as an FPGA (Field Programmable Gate Array) or an ASIC (Application Specific Integrated Circuit). In addition to hardware, a device may also contain code that creates an execution environment for computer programs, for example, constituting processor firmware, a protocol stack, a database management system, an operating system, or one or more of the same A combination of code.
亦可被稱為或描述為一程式、軟體、一軟體應用程式、一應用程式、一模組、一軟體模組、一指令碼或程式碼之一電腦程式可以任何形式之程式設計語言(包含編譯或解釋語言，或宣告式或程序語言)撰寫，且其可以任何形式(包含作為一獨立程式或作為一模組、組件、副常式，或適於用於一運算環境中之其他單元)部署。一程式可能但非必需對應於一檔案系統中之一檔案。一程式可儲存於保存其他程式或資料(例如，儲存於一標記語言文件中之一或多個指令碼)之一檔案之一部分中、儲存於專用於討論中程式之一單一檔案中、或儲存於多個協調檔案(例如，儲存程式碼之一或多個模組、副程式或部分之檔案)中。一電腦程式可經部署以在一個電腦上執行或在定位於一個位點處或跨多個位點分佈且藉由一資料通信網路互連之多個電腦上執行。 A computer program, which may also be called or described as a program, software, a software application, an application, a module, a software module, a script, or code, may be any form of programming language, including compiled or interpreted language, or declarative or programming language), and it may be written in any form (including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment) deploy. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (for example, one or more scripts in a markup language file), in a single file dedicated to the program in question, or in a In multiple coordinated files (for example, files that store code for one or more modules, subroutines, or parts). A computer program may be deployed to execute on one computer or on multiple computers located at one site or distributed across multiple sites and interconnected by a data communications network.
一或多個電腦之一系統經組態以執行特定操作或動作意謂系統已在其上安裝在操作中導致系統執行操作或動作之軟體、韌體、硬體或其等之一組合。一或多個電腦程式經組態以執行特定操作或動作意謂一 或多個程式包含在由資料處理設備執行時導致設備執行操作或動作的指令。 A system of one or more computers configured to perform a particular operation or action means that the system has installed thereon software, firmware, hardware, or a combination thereof that in operation causes the system to perform an operation or action. One or more computer programs configured to perform a specific operation or action means a The programs or programs contain instructions that, when executed by data processing equipment, cause the equipment to perform operations or actions.
如本說明書中使用，一「引擎」或「軟體引擎」係指提供不同於輸入之一輸出之一軟體實施之輸入/輸出系統。一引擎可係一編碼功能性區塊，諸如一程式庫、一平台、一軟體開發工具包(「SDK」)或一物件。可在包含一或多個處理器及電腦可讀媒體之任何適當類型之運算裝置(例如，伺服器、行動電話、平板電腦、筆記型電腦、音樂播放器、電子書閱讀器、膝上型或桌上型電腦、PDA、智慧型電話或其他固定或攜帶式裝置)上實施各引擎。此外，可在同一運算裝置上或在不同運算裝置上實施引擎之兩者或更多者。 As used in this specification, an "engine" or "software engine" refers to an input/output system that provides a software implementation of output other than input. An engine may be a functional block of code, such as a library, a platform, a software development kit ("SDK"), or an object. Any suitable type of computing device (e.g., server, mobile phone, tablet, laptop, music player, e-book reader, laptop, or computer) including one or more processors and computer-readable media. Each engine is implemented on a desktop computer, PDA, smart phone or other fixed or portable device). Furthermore, two or more of the engines may be implemented on the same computing device or on different computing devices.
可由執行一或多個電腦程式之一或多個可程式化電腦執行本說明書中描述之程序及邏輯流程以藉由對輸入資料進行操作且產生輸出而執行功能。亦可由專用邏輯電路(例如，一FPGA或一ASIC)，或藉由專用邏輯電路及一或多個程式化電腦之一組合執行程序及邏輯流程。 The programs and logic flows described in this specification may be executed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and producing output. Programs and logic flows may also be executed by dedicated logic circuits (eg, an FPGA or an ASIC), or by a combination of dedicated logic circuits and one or more programmed computers.
適於執行一電腦程式之電腦可基於通用或專用微處理器或兩者，或任何其他種類之中央處理單元。通常，一中央處理單元將接收來自一唯讀記憶體或一隨機存取記憶體或兩者之指令及資料。一電腦之必要元件係用於執行(performing或executing)指令之一中央處理單元及用於儲存指令及資料之一或多個記憶體裝置。中央處理單元及記憶體可藉由專用邏輯電路補充或併入專用邏輯電路中。通常，一電腦亦將包含用於儲存資料之一或多個大容量儲存裝置(例如，磁碟、磁光碟或光碟)，或操作地耦合以接收來自該一或多個大容量儲存裝置之資料或將資料傳送至該一或多個大容量儲存裝置或兩者。然而，一電腦未必具有此等裝置。此外，一電 腦可嵌入在另一裝置(例如，一行動電話、一個人數位助理(PDA)、一行動音訊或視訊播放器、一遊戲主控台、一全球定位系統(GPS)接收器或一攜帶式儲存裝置，例如，一通用串列匯流排(USB)快閃隨身碟，僅舉幾例)中。 A computer suitable for executing a computer program may be based on a general or special purpose microprocessor or both, or any other type of central processing unit. Typically, a central processing unit will receive instructions and data from a read-only memory or a random access memory, or both. The essential components of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and memory may be supplemented by or incorporated into special purpose logic circuits. Typically, a computer will also contain one or more mass storage devices (e.g., magnetic disks, magneto-optical disks, or optical disks) for storing data, or be operatively coupled to receive data from the one or more mass storage devices. or transfer data to the one or more mass storage devices or both. However, a computer may not have these devices. In addition, a power The brain can be embedded in another device (for example, a mobile phone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a global positioning system (GPS) receiver, or a portable storage device , for example, a Universal Serial Bus (USB) flash drive, to name a few).
適於儲存電腦程式指令及資料之電腦可讀媒體包含全部形式之非揮發性記憶體、媒體及記憶體裝置，包含(藉由實例)：半導體記憶體裝置，例如，EPROM、EEPROM及快閃記憶體裝置；磁碟，例如，內部硬碟或可移除磁碟；磁光碟；以及CD-ROM及DVD-ROM光碟。 Computer-readable media suitable for storage of computer program instructions and data include all forms of non-volatile memory, media, and memory devices, including (by way of example): semiconductor memory devices, such as EPROM, EEPROM, and flash memory physical devices; disks, such as internal hard drives or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
為提供與一使用者的互動，可在具有用於將資訊顯示給使用者之一顯示裝置(例如，一CRT(陰極射線管)或LCD(液晶顯示器)監視器)及一鍵盤及指標裝置(例如，一滑鼠、軌跡球或一存在敏感顯示器或使用者可藉由其提供輸入至電腦之其他表面)之一電腦上實施本說明書中描述之標的物之實施例。亦可使用其他種類之裝置來提供與一使用者的互動；舉例而言，提供給使用者之回饋可係任何形式之感覺回饋，例如，視覺回饋、聽覺回饋或觸覺回饋；且來自使用者之輸入可以任何形式被接收，包含聲學、語音或觸覺輸入。另外，一電腦可藉由將文件發送至由使用者使用之一裝置且接收來自該裝置之文件而與一使用者互動；舉例而言，藉由回應於從一使用者之裝置上之一網頁瀏覽器接收之請求而將網頁發送至網頁瀏覽器。再者，一電腦可藉由將文字訊息或其他形式之訊息發送至運行一傳訊應用程式之一個人裝置(例如，一智慧型電話)且作為回報接收來自使用者之回應訊息而與一使用者互動。 To provide interaction with a user, a computer may be provided with a display device (eg, a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and pointing device ( For example, embodiments of the subject matter described in this specification may be implemented on a computer such as a mouse, trackball, or a presence-sensitive display or other surface through which a user can provide input to the computer. Other types of devices may also be used to provide interaction with a user; for example, the feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and from the user Input can be received in any form, including acoustic, speech or tactile input. Additionally, a computer can interact with a user by sending files to and receiving files from a device used by the user; for example, by responding to a web page from a user's device The browser receives the request and sends the web page to the web browser. Furthermore, a computer can interact with a user by sending text messages or other forms of messages to a personal device (e.g., a smartphone) running a messaging application and receiving response messages from the user in return. .
可在一運算系統中實施本說明書中描述之標的物之實施例，該運算系統包含一後端組件(例如，作為一資料伺服器)，或包含一中 間組件(例如，一應用程式伺服器)，或包含一前端組件(例如，具有一使用者可透過其與本說明書中描述之標的物之一實施方案互動之一圖形使用者介面、一網頁瀏覽器或一應用程式之一用戶端電腦)，或一或多個此等後端組件、中間組件或前端組件之任何組合。系統之組件可藉由任何形式或介質之數位資料通信(例如，一通信網路)互連。通信網路之實例包含一區域網路(LAN)及一廣域網路(WAN)，例如，網際網路。 Embodiments of the subject matter described in this specification may be implemented in a computing system that includes a back-end component (e.g., as a data server) or that includes a Intermediate components (e.g., an application server), or include a front-end component (e.g., a graphical user interface, a web browser, a graphical user interface through which a user can interact with an implementation of the subject matter described in this specification) server or a client computer of an application), or any combination of one or more of these back-end components, middle components or front-end components. The components of the system may be interconnected by any form or medium of digital data communication (eg, a communications network). Examples of communication networks include a local area network (LAN) and a wide area network (WAN), such as the Internet.
運算系統可包含用戶端及伺服器。一用戶端及伺服器通常遠離彼此且通常透過一通信網路互動。用戶端及伺服器之關係憑藉在各自電腦上運行且具有相對於彼此之一用戶端-伺服器關係之電腦程式而產生。在一些實施例中，一伺服器將資料(例如，一HTML頁面)傳輸至一使用者裝置，例如，用於將資料顯示給與充當一用戶端之裝置互動之一使用者且接收來自該使用者之使用者輸入之目的。可在伺服器處從裝置接收使用者裝置處產生之資料(例如，使用者互動之結果)。 The computing system may include clients and servers. A client and server are usually remote from each other and usually interact through a communications network. The client and server relationship arises by virtue of computer programs running on the respective computers and having a client-server relationship with respect to each other. In some embodiments, a server transmits data (e.g., an HTML page) to a user device, e.g., for displaying the data to a user interacting with the device acting as a client and receiving data from the user device. The purpose of user input. Data generated at the user's device (e.g., results of user interactions) may be received at the server from the device.
除上文描述之實施例以外，以下實施例亦係創新性的：實施例1係一種方法，其包含：接收表示用於針對經組態以對各自串流輸入資料執行操作之硬體組件產生硬體架構之一硬體架構模板之資料，其中該硬體架構模板包含一可組態設計參數集，其包含以下項之兩個或更多個：(i)一硬體架構中之群集之一數量；(ii)各群集中之處理單元之一數量；及(iii)各處理單元中之一硬體單元陣列之一大小；至少部分基於一給定硬體組件之該各自串流輸入資料之特性而針對該給定硬體組件之一給定硬體架構判定該可組態設計參數集之值，該判定包含：基於該可組態設計參數集之一搜尋空間而使用該硬體架構模板來產生該給定硬體組件之複數個候選硬體架構，其中各候選硬體架構包含該可組態設計參數 集之各自設計參數值；基於一效能模型及該給定硬體組件之該各自串流輸入資料之該等特性而針對該複數個候選硬體架構之各者判定與該候選硬體架構相關聯之一組效能度量之各自值；至少部分基於該組效能度量之該等各自值而從該複數個候選硬體架構選擇一候選硬體架構作為該給定硬體架構；及判定與該選定候選硬體架構相關聯之設計參數值作為該給定硬體架構之該可組態設計參數集之該等值；及產生指示該給定硬體架構之該設計參數集之該等值之輸出資料。 In addition to the embodiments described above, the following embodiments are also innovative: Embodiment 1 is a method comprising: receiving representations generated for hardware components configured to perform operations on respective stream input data. Information about a hardware architecture template of a hardware architecture, wherein the hardware architecture template includes a configurable design parameter set that includes two or more of the following: (i) A set of clusters in a hardware architecture a number; (ii) a number of processing units in each cluster; and (iii) a size of an array of hardware units in each processing unit; based at least in part on the respective streaming input data of a given hardware component Determining the value of the configurable design parameter set for a given hardware architecture of the given hardware component, the determination includes: using the hardware architecture based on a search space of the configurable design parameter set Template to generate a plurality of candidate hardware architectures for the given hardware component, where each candidate hardware architecture includes the configurable design parameters Set respective design parameter values; determine for each of the plurality of candidate hardware architectures associated with the candidate hardware architecture based on a performance model and the characteristics of the respective stream input data of the given hardware component a set of respective values of performance metrics; selecting a candidate hardware architecture from the plurality of candidate hardware architectures as the given hardware architecture based at least in part on the respective values of the set of performance metrics; and determining the relationship between the selected candidate and the selected candidate hardware architecture. Design parameter values associated with a hardware architecture as the values of the configurable set of design parameters for the given hardware architecture; and generating output data indicative of the values of the set of design parameters for the given hardware architecture .
實施例2係實施例1之方法，其進一步包含：將該輸出資料提供至該硬體架構模板；基於該給定硬體架構之該設計參數集之該等值而實體化該給定硬體架構；及基於該給定硬體架構而製造該給定硬體組件。 Embodiment 2 is the method of Embodiment 1, further comprising: providing the output data to the hardware architecture template; materializing the given hardware based on the equivalent values of the design parameter set of the given hardware architecture architecture; and manufacturing the given hardware component based on the given hardware architecture.
實施例3係實施例1或2之方法，其中該給定硬體組件之該各自串流輸入資料之該等特性包含該給定硬體組件之該各自串流輸入資料之各訊框之一抵達率及各訊框之一大小。 Embodiment 3 is the method of embodiment 1 or 2, wherein the characteristics of the respective stream input data of the given hardware component comprise one of the frames of the respective stream input data of the given hardware component Arrival rate and one size of each frame.
實施例4係實施例1至3中任一項之方法，其中該組效能度量包含以下項之至少一者之度量：延時、功率消耗、資源使用或用於處理該給定硬體組件之該各自串流輸入資料之處理能力，其中該效能模型包含一分析成本模型、一機器學習成本模型或一硬體模擬模型之至少一者。 Embodiment 4 is the method of any one of embodiments 1 to 3, wherein the set of performance metrics includes metrics of at least one of: latency, power consumption, resource usage, or the amount of time used to process the given hardware component. The processing capabilities of respective stream input data, wherein the performance model includes at least one of an analytical cost model, a machine learning cost model, or a hardware simulation model.
實施例5係實施例1至4中任一項之方法，其中該給定硬體組件之該各自串流輸入資料包括藉由一影像感測器根據一時間序列收集之串流影像圖框。 Embodiment 5 is the method of any one of embodiments 1 to 4, wherein the respective streaming input data for the given hardware component includes streaming image frames collected by an image sensor according to a time series.
實施例6係實施例5之方法，其中該等串流影像圖框之特性包括影像圖框之一特定抵達率及該等影像圖框之各者之一各自影像解析度之至少一者。 Embodiment 6 is the method of Embodiment 5, wherein the characteristics of the streaming image frames include at least one of a specific arrival rate of the image frames and a respective image resolution of each of the image frames.
實施例7係實施例5之方法，其中該等串流影像圖框之特性包括包含一垂直遮沒週期或一水平遮沒週期之至少一者之一遮沒週期。 Embodiment 7 is the method of Embodiment 5, wherein the characteristics of the streaming image frames include a blanking period including at least one of a vertical blanking period or a horizontal blanking period.
實施例8係實施例5之方法，其中該等串流影像圖框之特性包括一像素格式，其中該像素格式包括一RGB或YUV色彩格式。 Embodiment 8 is the method of Embodiment 5, wherein the characteristics of the stream image frames include a pixel format, and the pixel format includes an RGB or YUV color format.
實施例9係實施例1至8中任一項之方法，其中該給定硬體組件之該各自串流輸入資料包括藉由一音訊感測器收集之串流音訊。 Embodiment 9 is the method of any one of embodiments 1-8, wherein the respective stream input data for the given hardware component includes stream audio collected by an audio sensor.
實施例10係實施例9之方法，其中該串流輸入資料之特性包括該串流音訊之一特定取樣率、該串流音訊之一位元深度、該串流音訊之一位元率或該串流音訊之一音訊格式之至少一者。 Embodiment 10 is the method of Embodiment 9, wherein the characteristics of the stream input data include a specific sampling rate of the stream audio, a bit depth of the stream audio, a bit rate of the stream audio, or the At least one of the audio formats of the streaming audio.
實施例11係實施例1至10中任一項之方法，其中使用該給定硬體組件對該各自串流輸入資料執行操作包含：對於該串流輸入資料之各訊框：將該訊框之一輸入向量分段成各包含該輸入向量之非重疊值之複數個部分向量；及對於該複數個部分向量之各部分向量，將該部分向量指派至複數個群集之一各自群集，其等各具有一各自數量之處理單元且各處理單元具有對應於該給定硬體架構之該設計參數集之該等值之一各自大小之一硬體單元陣列；藉由該各自群集將該部分向量之各值與儲存於記憶體中之一矩陣之一部分列之一對應值相乘以產生一各自部分和；及將該各自部分和儲存於一累加器陣列中。 Embodiment 11 is the method of any one of embodiments 1 to 10, wherein using the given hardware component to perform an operation on the respective stream input data includes: for each frame of the stream input data: converting the frame segment an input vector into a plurality of partial vectors each containing non-overlapping values of the input vector; and for each partial vector of the plurality of partial vectors, assign the partial vector to a respective one of a plurality of clusters, etc. Each has a respective number of processing units and each processing unit has a respective size of a hardware unit array corresponding to the value of the set of design parameters for the given hardware architecture; the portion of the vector is represented by the respective cluster Each value of is multiplied by a corresponding value of a partial column of a matrix stored in memory to produce a respective partial sum; and the respective partial sum is stored in an accumulator array.
實施例12係實施例11之方法，其中使用該給定硬體組件對該給定硬體組件之該各自串流輸入資料執行操作包含基於儲存於記憶體中之該矩陣之一稀疏性位準而執行該等操作。 Embodiment 12 is the method of embodiment 11, wherein performing an operation on the respective stream input data of the given hardware component using the given hardware component includes based on a sparsity level of the matrix stored in memory. and perform such operations.
實施例13係實施例1至12中任一項之方法，其中在一密集矩陣模式與一稀疏矩陣模式之間切換該等執行操作，其中藉由一控制及狀 態(CSR)暫存器控制該切換程序。 Embodiment 13 is the method of any one of embodiments 1 to 12, wherein the execution operations are switched between a dense matrix mode and a sparse matrix mode, wherein the execution operations are switched by a control and state Status (CSR) register controls the switching procedure.
實施例14係實施例11之方法，其中在一稀疏矩陣模式下執行產生儲存於記憶體中之該矩陣之該部分列之該等對應值時，且其中該產生進一步包含：判定儲存於記憶體中之該矩陣之該部分列中之非零值；產生指示該矩陣中之該部分列之該等非零值之位置的識別符，其中該等識別符包含索引或位元圖；及產生與對應識別符相關聯之非零值之一壓縮向量作為該矩陣之該部分列之該等對應值。 Embodiment 14 is the method of Embodiment 11, wherein executing in a sparse matrix mode generates the corresponding values of the partial column of the matrix stored in the memory, and wherein the generating further includes: determining whether to store in the memory the non-zero values in the partial column of the matrix; generate identifiers indicating the positions of the non-zero values in the partial column of the matrix, wherein the identifiers comprise indexes or bitmaps; and generate and A compressed vector of non-zero values associated with the corresponding identifier serves as the corresponding value for the partial column of the matrix.
實施例15係實施例14之方法，其進一步包含：基於該等對應識別符而選擇對應於該壓縮向量之該部分向量之值；及將該部分向量之該等選定值之各者與該壓縮向量之一對應非零值相乘。 Embodiment 15 is the method of Embodiment 14, further comprising: selecting a value of the partial vector corresponding to the compressed vector based on the corresponding identifier; and combining each of the selected values of the partial vector with the compressed vector. One of the vectors corresponding to non-zero values is multiplied.
實施例16係實施例1至15中任一項之方法，其中該給定硬體架構包含指示儲存於記憶體中之一或多個矩陣之一上限稀疏性位準之資料，其中該給定硬體架構經組態以動態地重新實體化以運用該一或多個矩陣之具有不同於該一或多個矩陣之一第一矩陣之一稀疏性位準之一第二矩陣來處理該串流輸入資料。 Embodiment 16 is the method of any one of embodiments 1-15, wherein the given hardware architecture includes data indicating an upper bound sparsity level of one or more matrices stored in memory, wherein the given The hardware architecture is configured to dynamically re-materialize to process the sequence using a second matrix of the one or more matrices having a sparsity level that is different from the first matrix of the one or more matrices. Stream input data.
實施例17係實施例1至16中任一項之方法，其中基於該可組態設計參數集之該搜尋空間使用該硬體架構模板產生該複數個候選硬體架構包含使用以下項之至少一者來探索該設計參數集之該搜尋空間：一隨機搜尋演算法、一窮盡搜尋演算法，或一起源演算法。 Embodiment 17 is the method of any one of embodiments 1 to 16, wherein generating the plurality of candidate hardware architectures using the hardware architecture template based on the search space of the configurable design parameter set includes using at least one of the following The search space of the set of design parameters is explored by: a random search algorithm, an exhaustive search algorithm, or a source algorithm.
實施例18係實施例1至17中任一項之方法，其中探索該可組態設計參數集之該搜尋空間包含：探索對應於各處理單元中之一硬體單元陣列之該大小及一群集中之處理單元之該數量之設計參數值；判定對應於該硬體單元陣列之該大小及該群集中之處理單元之該數量之該等設計參 數值處於該群集之一可擴充性極限；及作為回應，探索對應於群集之該數量之設計參數值。 Embodiment 18 is the method of any one of embodiments 1-17, wherein exploring the search space of the set of configurable design parameters includes exploring the size and cluster corresponding to an array of hardware units in each processing unit. design parameter values for the number of processing units; determine the design parameter values corresponding to the size of the hardware unit array and the number of processing units in the cluster. The value is at one of the scalability limits of the cluster; and in response, design parameter values corresponding to that number of clusters are explored.
實施例19係一種包含一或多個電腦及儲存指令之一或多個儲存裝置的系統，該等指令可操作以在由該一或多個電腦執行時導致該一或多個電腦執行實施例1至18中任一項之方法。 Embodiment 19 is a system including one or more computers and one or more storage devices storing instructions operable to cause the one or more computers, when executed by the one or more computers, to perform an embodiment Any method from 1 to 18.
實施例20係一種編碼有一電腦程式之電腦儲存媒體，該程式包含可操作以在由資料處理設備執行時導致該資料處理設備執行實施例1至18中任一項之方法的指令。 Embodiment 20 is a computer storage medium encoded with a computer program including instructions operable to cause the data processing device to perform the method of any one of embodiments 1 to 18 when executed by a data processing device.
雖然本說明書含有許多特定實施方案細節，但此等不應被解釋為對任何發明之範疇或對可主張之內容之範疇之限制，而係被解釋為可能特定於特定發明之特定實施例之特徵之描述。本說明書中在分開的實施例之背景內容中描述之某些特徵亦可在一單一實施例中組合實施。相反地，在一單一實施例之背景內容中描述之各種特徵亦可在多個實施例中分開地或以任何適合子組合實施。此外，儘管特徵在上文可被描述為以某些組合起作用且甚至最初如此主張，然來自一所主張組合之一或多個特徵在一些情況中可從該組合刪除，且所主張組合可能係關於一子組合或一子組合之變化例。 Although this specification contains many specific embodiment details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as features of particular embodiments that may be specific to particular inventions. description. Certain features that are described in this specification in the context of separate embodiments can also be implemented together in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as functioning in certain combinations and even initially claimed as such, one or more features from a claimed combination may in some cases be deleted from that combination, and the claimed combination may It is about a sub-combination or a variation of a sub-combination.
類似地，雖然在圖式中以一特定順序描繪操作，但此不應被理解為要求以所展示之特定順序或以循序順序執行此等操作，或執行全部所繪示操作以達成所要結果。在某些境況中，多任務及平行處理可係有利的。此外，上文描述之實施例中之各種系統模組及組件之分離不應被理解為在全部實施例中要求此分離，且應瞭解，所描述之程式組件及系統通常可一起整合於一單一軟體產品中或封裝至多個軟體產品中。 Similarly, although operations are depicted in a particular order in the drawings, this should not be understood as requiring that such operations be performed in the specific order shown, or in sequential order, or that all illustrated operations be performed to achieve desirable results. In some situations, multitasking and parallel processing can be advantageous. In addition, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the program components and systems described can generally be integrated together into a single in a software product or packaged into multiple software products.
已描述標的物之特定實施例。其他實施例在以下發明申請專利範圍之範疇內。舉例而言，發明申請專利範圍中敘述之動作可按一不同順序執行且仍達成所要結果。作為一個實例，附圖中描繪之程序不一定要求所展示之特定順序，或循序順序以達成所要結果。在特定情況中，多任務及平行處理可係有利的。 Specific embodiments of the subject matter have been described. Other embodiments are within the scope of the following invention claims. For example, the actions described in the claimed invention may be performed in a different order and still achieve the desired results. As one example, the procedures depicted in the figures do not necessarily require the specific order shown, or sequential order, to achieve desirable results. In certain situations, multitasking and parallel processing can be advantageous.
100:架構設計系統 100:Architecture Design System
110:輸入資料 110:Enter information
120:架構增強子系統 120: Architecture Enhancement Subsystem
130:增強引擎 130: Enhanced engine
140:候選者產生器 140: Candidate generator
145:候選架構 145: Candidate architecture
150:分析引擎 150:Analysis Engine
155:效能值 155:Efficacy value
160:選擇引擎 160:Select engine
170:輸出資料 170:Output data
175:製造系統 175:Manufacturing System
185:效能模型 185:Performance Model
190:記憶體單元 190:Memory unit
195:架構模板 195: Architecture Template
Claims (20)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/062817 WO2023107119A1 (en) | 2021-12-10 | 2021-12-10 | Scalable hardware architecture template for processing streaming input data |
WOPCT/US21/62817 | 2021-12-10 |
Publications (2)
Publication Number | Publication Date |
---|---|
TW202324087A TW202324087A (en) | 2023-06-16 |
TWI829208B true TWI829208B (en) | 2024-01-11 |
Family
ID=80112132
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
TW111123650A TWI829208B (en) | 2021-12-10 | 2022-06-24 | Method and system for determining design parameter values of hardware architectures for processing streaming input data, and computer-readable storage medium |
Country Status (3)
Country | Link |
---|---|
KR (1) | KR20240056563A (en) |
TW (1) | TWI829208B (en) |
WO (1) | WO2023107119A1 (en) |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
TW200511113A (en) * | 2003-08-18 | 2005-03-16 | Nvidia Corp | Adaptive load balancing in a multi-processor graphics processing system |
US7305649B2 (en) * | 2005-04-20 | 2007-12-04 | Motorola, Inc. | Automatic generation of a streaming processor circuit |
TW200813705A (en) * | 2005-12-27 | 2008-03-16 | Sony Corp | Information processing apparatus, information processing method and program |
TW201814512A (en) * | 2016-10-04 | 2018-04-16 | 聯發科技股份有限公司 | Scenario-based method and apparatus for performance and power management in electronic apparatus |
US20180189032A1 (en) * | 2016-12-30 | 2018-07-05 | Eriko Nurvitadhi | Apparatus and method for processing sparse data |
US20190050968A1 (en) * | 2016-05-10 | 2019-02-14 | Olympus Corporation | Image processing device, image processing method, and non-transitory computer readable medium storing image processing program |
US20190355091A1 (en) * | 2018-05-17 | 2019-11-21 | Intel Corporation | Tile-based multiple resolution rendering of images |
US20200280739A1 (en) * | 2017-11-21 | 2020-09-03 | Immersive Robotics Pty Ltd | Image Compression For Digital Reality |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10394991B2 (en) * | 2016-10-06 | 2019-08-27 | Altera Corporation | Methods and apparatus for dynamically configuring soft processors on an integrated circuit |
-
2021
- 2021-12-10 KR KR1020247010747A patent/KR20240056563A/en unknown
- 2021-12-10 WO PCT/US2021/062817 patent/WO2023107119A1/en active Application Filing
-
2022
- 2022-06-24 TW TW111123650A patent/TWI829208B/en active
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
TW200511113A (en) * | 2003-08-18 | 2005-03-16 | Nvidia Corp | Adaptive load balancing in a multi-processor graphics processing system |
US7305649B2 (en) * | 2005-04-20 | 2007-12-04 | Motorola, Inc. | Automatic generation of a streaming processor circuit |
TW200813705A (en) * | 2005-12-27 | 2008-03-16 | Sony Corp | Information processing apparatus, information processing method and program |
US20190050968A1 (en) * | 2016-05-10 | 2019-02-14 | Olympus Corporation | Image processing device, image processing method, and non-transitory computer readable medium storing image processing program |
TW201814512A (en) * | 2016-10-04 | 2018-04-16 | 聯發科技股份有限公司 | Scenario-based method and apparatus for performance and power management in electronic apparatus |
US20180189032A1 (en) * | 2016-12-30 | 2018-07-05 | Eriko Nurvitadhi | Apparatus and method for processing sparse data |
US20200280739A1 (en) * | 2017-11-21 | 2020-09-03 | Immersive Robotics Pty Ltd | Image Compression For Digital Reality |
US20190355091A1 (en) * | 2018-05-17 | 2019-11-21 | Intel Corporation | Tile-based multiple resolution rendering of images |
Also Published As
Publication number | Publication date |
---|---|
KR20240056563A (en) | 2024-04-30 |
TW202324087A (en) | 2023-06-16 |
WO2023107119A1 (en) | 2023-06-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102434726B1 (en) | Treatment method and device | |
US20230350351A1 (en) | Computer-implemented perceptual apparatus | |
CN111652368A (en) | Data processing method and related product | |
Mazumder et al. | A survey on the optimization of neural network accelerators for micro-ai on-device inference | |
US11567770B2 (en) | Human-machine-interface system comprising a convolutional neural network hardware accelerator | |
Daghero et al. | Energy-efficient deep learning inference on edge devices | |
EP3637327B1 (en) | Computing device and method | |
US20210182670A1 (en) | Method and apparatus with training verification of neural network between different frameworks | |
Liu et al. | AdaDeep: A usage-driven, automated deep model compression framework for enabling ubiquitous intelligent mobiles | |
CN115104108A (en) | Method and system for partitioning and bit width allocation of deep learning model for distributed system reasoning | |
US20230267307A1 (en) | Systems and Methods for Generation of Machine-Learned Multitask Models | |
Liu et al. | AdaSpring: Context-adaptive and runtime-evolutionary deep model compression for mobile applications | |
JP2022546271A (en) | Method and apparatus for predicting kernel tuning parameters | |
Lin et al. | Tiny Machine Learning: Progress and Futures [Feature] | |
US20210279594A1 (en) | Method and apparatus for video coding | |
US11461662B1 (en) | Compilation time reduction for memory and compute bound neural networks | |
TWI829208B (en) | Method and system for determining design parameter values of hardware architectures for processing streaming input data, and computer-readable storage medium | |
CN117063208A (en) | Unsupervised multi-model joint reasoning system and method | |
US11861452B1 (en) | Quantized softmax layer for neural networks | |
CN115409150A (en) | Data compression method, data decompression method and related equipment | |
CN118056203A (en) | Scalable hardware architecture template for processing streaming input data | |
Kandaswamy et al. | Real-time hyper-dimensional reconfiguration at the edge using hardware accelerators | |
US11755883B2 (en) | Systems and methods for machine-learned models having convolution and attention | |
US20230206113A1 (en) | Feature management for machine learning system | |
KR102429804B1 (en) | Electronic device control method and program for filter conversion of artificial intelligence model |