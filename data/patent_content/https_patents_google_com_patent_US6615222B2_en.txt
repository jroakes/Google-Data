US6615222B2 - System and process for evaluating the performance of a database system - Google Patents
System and process for evaluating the performance of a database system Download PDFInfo
- Publication number
- US6615222B2 US6615222B2 US09/404,440 US40444099A US6615222B2 US 6615222 B2 US6615222 B2 US 6615222B2 US 40444099 A US40444099 A US 40444099A US 6615222 B2 US6615222 B2 US 6615222B2
- Authority
- US
- United States
- Prior art keywords
- tables
- database
- management system
- test
- database management
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3457—Performance evaluation by simulation
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99936—Pattern matching access
Definitions
- the invention provides a process for analyzing and predicting the performance of a Database Management System (DBMS) through the creation and use of a simulated test DBMS.
- DBMS Database Management System
- the relatively small test database system reduces the cost of performing the analysis and minimizes the impact on the actual operating DBMS.
- Database systems often contain databases of immense size and complexity. Because of this size and complexity, obtaining the desired information in response to a query becomes a very complex process. This requires, for most queries, that the system must make many choices as to the manner in which to seek the data. In many cases, if the query is complex, it is often difficult to determine whether the database manager has selected the most optimum process for obtaining the required data.
- Analyzing the performance of the system to a query could be done by running the query on the operational database system itself. It could also be done using a complete replica of the system. Modifications might also be made in the original database or replica to test and see if the query might be made to run faster.
- the first approach of using the operational system has an obvious negative impact on the system as it reduces system availability to other users, whereas, in the case of using a separate test system itself, it might be a very expensive proposition.
- replica method Another variation of the replica method that exists today is to avoid copying the data from the user tables that contain the data, but instead, creating empty tables and modifying the database catalogs to reflect information (statistics) that is needed by the compiler to match that of the original database. This could also require a large system and more time with the only advantage of reduced storage space as compared to the full replica.
- the present invention overcomes this problem by using a test database on which the performance of the database system can be simulated without impacting the operational database system and without the need to create any of the user tables or modify associated information in the catalogs.
- the invention creates a copy of the database catalogs used in queries as data tables.
- the test database system can use these simulated catalogs to compile the query in a special simulation mode that does not need to reference the tables in the operational database system.
- the invention provides a simulation tool for testing the performance of an operational DBMS where a separate test database is created having a copy of the system catalogs.
- the copy is stored as a set of user tables called simulation catalogs in the test database.
- Queries, compiled on the test database in a simulation mode use the simulated catalogs instead of the normal system catalogs. With this process it is possible to recreate access plans which are equivalent to the access plans which would be generated by the operating DBMS in response to the same query.
- the invention enables analyzing the access plans without compiling on the operational DBMS and without the need to copy user data onto the test database system.
- the present invention provides a system for analyzing the performance of an operational database management system comprising a test database management system including means for storing a copy of system catalog tables as simulated catalog tables in user tables in the test database, means for accepting test queries in the test system, means for compiling the test queries in the test system and means for generating an access plan in response to the test queries whereby analysis of the performance of the operational database management system can be performed.
- the invention also describes a process for evaluating the performance of an operational database system which consists of the steps of creating a test database management system, storing a copy of system catalogue tables from said operational database management system in user tables in said test database, compiling queries on said test database and generating access plans for the queries, the access plans being used to evaluate the performance of the operational database management system.
- a primary object of the invention is to analyze or predict the performance of an operational DBMS without impacting the operation of the DBMS.
- a further object of the invention is to create a copy of catalog tables in an operational DBMS as user tables in a test DBMS to enable query processing in said test DBMS without accessing the operational DBMS during the query processing.
- a further object of the invention is to compile test queries for an operational DBMS on a test database and generate access plans for the test queries without accessing the operational DBMS during the compilation.
- FIG. 1 is an example of a Prior Art Data Processing System for implementing a database system.
- FIG. 2 is an example of a typical prior art database.
- FIG. 3 illustrates an example of Catalog Tables stored in a typical database system.
- FIG. 4 illustrates a typical query processing example in a database system.
- FIG. 5 illustrates the importation of catalogs into users tables in a test database in accordance with the present invention.
- FIG. 6 illustrates the simulation of a query in the test database in accordance with the present invention.
- FIG. 7 illustrates the relationship between a large complex database system and the simulation of that system on a small test database system in accordance with the present invention.
- FIG. 1 provides a functional diagram exemplifying a data processing system for implementing a database system with which the present invention may be useful.
- the data processor 1 is coupled to a primary bus 2 and a memory space 3 .
- Bus 2 is coupled to a direct access storage device external store 4 and possibly a magnetic tape external store 5 .
- User terminal 6 coupled to bus 2 enables query inputs to the data processing system that responds with appropriate data from a database stored on the storage device.
- the software that runs on these database processor systems allow users to add, modify, delete or retrieve data from the database and is known as a database management system.
- FIG. 2 shows a well-know database model.
- Data is stored in tables whose columns are predefined when the table is created. Each row contains values for each column and makes up an entry in the table.
- a database of this nature is called a Relational Database.
- a relational database 7 can be created with a user command to the database management system. This activity automatically creates a set of tables that are called system catalogs tables 8 . At this point in time, there are no user tables 9 in the database.
- the system catalog tables 8 will contain the information necessary for the database management system to access data that the user might store in the database. In order to store data in the database the user creates user tables 13 as shown in database 11 .
- the definition of a user table 13 and information required to access the data in these user tables 13 is stored within the system catalog tables 12 .
- the user can change data directly only in the user tables 13 using an appropriate language interface to the database management system.
- the catalog tables 12 are maintained by the database management system. When a user creates a table 13 in the database, for example, some catalog tables 12 are automatically updated to store the definition of this new table 13 .
- Some systems allow some information to be directly modified by the user. This is usually information that is not critical to maintain the consistency of the database. Statistics about the data is one such piece of information.
- each system catalog table 12 has an ID that lets the database know where the catalog table 12 is stored on the storage device 4 .
- an array of catalog IDs 14 is used to store the set for all the catalog tables.
- the tables catalog 15 contains information about all of the tables in the database. It has, for example, the names of the tables, the IDs that are used to locate the data on the storage device and statistics that give some information on the size of the user tables.
- the columns catalog 16 has information pertaining to each column of all the tables 15 . It contains, for example, the column name, the column type and length and statistics that might help the database manager to understand the nature of the values in the columns. For the purpose of the present invention, we do not need to elaborate further on the contents of the catalogs 15 and 16 .
- FIG. 4 the database management system is shown in greater detail.
- the user's database query, input at user terminal 6 (See FIG. 1 ), is provided in a language that the database manager can understand.
- the Structured Query Language (SQL) is commonly used in relational database management systems.
- the SQL Compiler 19 and the execution engine 31 together make up the database management system.
- the database that is stored on a storage device is made up of system catalog tables 17 and user tables 18 .
- the user's query 20 is input to the database management system. It is parsed by a query parser 21 for any syntax errors. If the syntax is invalid, an error is issued to the user 22 . If the syntax is acceptable, the parser and the next phase, the query graph generator 23 look for semantic errors. To do this, the parser and query graph generator phases use information from the system catalogs 17 . These phases of the SQL Compiler need the information concerning the various user tables referenced in the user query. If there are no errors, a query graph model 24 is constructed in memory space 3 (See FIG. 1 ). This query graph can be enhanced through a rewrite phase 25 that provides a revised query graph 26 .
- the optimizer processor 17 takes this revised graph and looks at various options on how to access the data. It attempts to choose the most optimal plan to access the data. Among other things, it uses statistics on the data that were stored in the system catalogs 17 .
- the final access plan 28 is stored in memory space 3 .
- the code generator phase 29 translates the access plan into execution code 30 .
- the execution engine 31 uses this code to access the data and return the result of the query to the user 32 .
- the set of phases including the SQL parser 21 , the query graph generator 23 , the query graph rewriter 25 , the optimizer 27 and the code generator 29 is usually referred to as the SQL Compiler 19 .
- all information necessary for the compiler to generate an access plan for the given user query is available in the system catalogs tables 17 .
- the actual user data is required by the database manager only in the execution engine phase 31 . Most often, this data is not required to analyze the performance of the database system or to do a what-if kind of analysis. For example, by looking at the final access plan through appropriate tools that capture it from the memory space, an analyst might be able to find out why a particular access plan would not perform well. The analyst could then suggest ways to improve the performance of accessing the data.
- This invention is based on the assumption that given the information in the system catalogs 17 , the information provided by the SQL compiler helps an analyst to study the behaviour of an application as far as accessing the data within the database is concerned.
- FIG. 5 and FIG. 6 illustrate the system catalog simulation tool of the present invention.
- the motivation is to be able to analyze the data access plan in a test environment that is similar to that in the operational database system possibly using additional problem solving tools.
- the aim is to obtain a similar access plan or execution code that the user would obtain on the operational database 33 .
- a copy of the system catalog tables 34 used in query compilation is required by the simulation tool to generate the required information.
- any other database manager or database configuration information necessary for the SQL compiler is also available in the catalog tables 34 .
- An example of this information might be the speed that the computer executes the instructions to access the data or the speed of the transfer of data from the storage device or the amount of memory available to the database manager. If this information is not stored in the catalog tables 34 , a separate step may be necessary to obtain this information.
- a convenient interface allows one to retrieve and update such configuration parameters.
- FIG. 5 shows the step necessary before simulation of the compilation phase of the user's query.
- the set of catalog tables 34 necessary for compilation are imported into the analysts test database system 37 as regular user tables 41 in the user table 39 part of the database 37 . Relational databases usually have convenient mechanisms to copy this data.
- This set of tables will be referred to as a simulation catalog 41 . While the table names in catalog 41 may be the same as those in catalog tables 38 , the schema name or qualifier of the simulated catalog tables 41 are different and this helps distinguish the two sets.
- the system catalog tables 38 and simulated catalog tables 41 contain the same information that is in the system catalogs 34 of the operational database. Given the user query (and any changes to the database manager and database configuration parameters that may be necessary), the analyst can start the simulation tool on the test database.
- the SQL compiler fetches information from the system catalogs 38 .
- the array of catalog IDs 40 are switched to point to the set of simulated catalogs 41 instead of the system catalogs 38 .
- the compilation will be performed as if it were done on the operational database and thus one can obtain the same query access plan or execution code on the test database as the user obtained on the operational database. This is done conveniently on the analyst's test database in a suitable problem solving environment with tools that may not be available in the operational environment of the actual DBMS.
- the steps required to use the simulation catalog tool include:
- test systems catalog simulation tool through a command provided as part of the database manager to switch the array of catalog IDs 40 to point to the simulated catalogs 41 .
- test systems catalog simulation tool is disabled through a command provided to switch the catalog IDs to point back to the test system's catalog tables 38 .
- FIG. 6 shows a query 46 being processed by the SQL compiler 45 on the test system during simulation.
- the query parser 47 and the query graph generator 49 use the simulated catalogs 44 instead of the test database's system catalogs 42 .
- the execution code 56 generated by the code generator 55 is not sent to the execution engine 57 .
- This query execution engine 57 would not work as the user tables referenced by the user's query are not present in the test database.
- the processing of the query 46 through the SQL compiler 45 on the analyst's test database is very similar to the processing which would take place in the user's database. Analysis can be done on any aspect, relevant to the SQL Compiler, that does not require any more information about the actual data in the user's database other than what is in the simulated catalogs 44 .
- the catalog simulation tool can also be exploited to do what-if experiments.
- the SQL compiler 45 bases its decision to choose a particular access plan for a given query on the information it fetches from the system catalog tables 44 .
- it is possible to try what-if experiments by changing some of the information in the system catalog tables 44 and looking at how the SQL compiler 46 adjusts the access plan it generates based on these changes. For example, one might want to see how much time it would take to access the data given that in future the data in the database will double.
- details in the query access plan might indicate how much time accessing the data is likely to take.
- indexes are auxiliary structures that help access the data within the tables. Without the simulation catalog tool the index would have to be created on disk which could take time and space if done on the real database. This is necessary because the system catalog tables are consistent with the data within the database.
- the simulation catalog tool enables adding an index by simply inserting a row in the simulated catalog table. The simulated catalogs are not linked to the real data as the system catalogs in the operational database are. In such a what-if experiment, no index is actually created on disk. In the simulation mode, the access plan could be analyzed to see how beneficial such an index might be for a given query.
- a separate copy of the SQL compiler's array of catalog IDs may be created rather than just overwriting the original array. This is useful if other users are using the database. Other users will use the system catalogs based on the original array of catalog IDs. This allows the simulation mode in an active operational system itself where one might want to do the what-if scenarios or analyze application queries and access of the data. Here the system catalogs are copied as simulated catalogs within the database itself. When one user is in simulation mode, other users of the database will not be affected in the same way as they would if the actual system catalogs were used to do the analysis. Multiple users could do analysis using simulated catalogs at the same time.
- FIG. 7 shows such a system 65 .
- the system catalogs are stored on one of the nodes. This is referred to as the catalog node 58 . A user can connect to any one of these nodes to pass the query to the database management system.
- This node is referred to as the coordinator node 59 .
- the catalog node 58 and the coordinator node 59 could be the same.
- the SQL compiler 60 processes the query 61 on the coordinator node 59 in a similar manner as that in a single node database system.
- the catalog information is retrieved from the catalog node 58 which may be on another node. All information on how the data is partitioned across the nodes is contained in the system catalogs.
- the SQL compiler evaluates and chooses the optimal plan in terms of how best to access the data from each partition. This is based on how the tables are partitioned and laid out on the various nodes and how the data is referenced within the user's query.
- the access plan execution code is passed to the execution engine 62 on the coordinator node 59 . From here portions of the execution code are passed appropriately to the execution engines on all nodes that are involved in accessing data to satisfy the query. The response is passed back to the user through the coordinator node.
- a previous method of simulating such a large partitioned operational database was to create empty tables similar to the user's tables on a test database.
- the test computer environment had to be similar to that of the operational site in terms of the number of nodes and partitions of the database. This necessitated a large multi-node computer system to mimic that of the operational system.
- the statistics of the tables in the test database had to be updated to match the actual user tables statistics as these are necessary to get the same access plan. This is usually time consuming and often not feasible with the requirement of many nodes, even though the tables are empty.
- the process can be error prone with very complex queries involving many tables and associated entities whose definitions and related information need to be transferred to the test database.
- This invention relies on the user's database catalogs to provide all the necessary information to the SQL compiler about the data in the tables, the related entities and the way the data is partitioned in the multi-node system. There is no need to create tables like those in the operational database since the simulation stops at the end of the compilation phase.
- FIG. 7 we show a test database processor system 66 that has system catalogs and test data unrelated to that of the operational system.
- the system catalogs from the operational database are imported as user tables into the test database system 66 .
- a simulation command switches the array of catalog IDs to point to the simulated catalogs 64 .
- the user query is then sent to the test database management system in order to do whatever was intended with the simulation.
- the SQL Compiler thinks it is using the large operational computer system.
Abstract
Description
Claims (14)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/404,440 US6615222B2 (en) | 1999-09-22 | 1999-09-22 | System and process for evaluating the performance of a database system |
CA002283052A CA2283052C (en) | 1999-09-22 | 1999-09-23 | A system and process for evaluating the performance of a database system |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/404,440 US6615222B2 (en) | 1999-09-22 | 1999-09-22 | System and process for evaluating the performance of a database system |
CA002283052A CA2283052C (en) | 1999-09-22 | 1999-09-23 | A system and process for evaluating the performance of a database system |
Publications (2)
Publication Number | Publication Date |
---|---|
US20030115212A1 US20030115212A1 (en) | 2003-06-19 |
US6615222B2 true US6615222B2 (en) | 2003-09-02 |
Family
ID=27805855
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/404,440 Expired - Lifetime US6615222B2 (en) | 1999-09-22 | 1999-09-22 | System and process for evaluating the performance of a database system |
Country Status (2)
Country | Link |
---|---|
US (1) | US6615222B2 (en) |
CA (1) | CA2283052C (en) |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030105758A1 (en) * | 2001-12-05 | 2003-06-05 | International Business Machines Corporation | System and method for testing and promoting database update code |
US20040225390A1 (en) * | 2002-05-20 | 2004-11-11 | Lsi Logic Corporation | Direct methods system for assembly of products |
US20050055673A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Automatic database diagnostic monitor architecture |
US20050055383A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Capturing session activity as in-memory snapshots using a time-based sampling technique within a database for performance tuning and problem diagnosis |
US20050055672A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Time model |
WO2005028627A2 (en) * | 2003-09-19 | 2005-03-31 | Netezza Corporation | Performing sequence analysis as a relational join |
US20050086242A1 (en) * | 2003-09-04 | 2005-04-21 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
US20050216490A1 (en) * | 2004-03-26 | 2005-09-29 | Oracle International Corporation | Automatic database diagnostic usage models |
US20060047696A1 (en) * | 2004-08-24 | 2006-03-02 | Microsoft Corporation | Partially materialized views |
US20070162418A1 (en) * | 2006-01-12 | 2007-07-12 | International Business Machines Corporation | Method and system for performing a non-invasive runtime simulation for a database system |
US20070220017A1 (en) * | 2006-03-14 | 2007-09-20 | International Business Machines Corporation | Method and system to estimate the number of distinct value combinations for a set of attributes in a database system |
US20080114801A1 (en) * | 2006-11-14 | 2008-05-15 | Microsoft Corporation | Statistics based database population |
US20090106756A1 (en) * | 2007-10-19 | 2009-04-23 | Oracle International Corporation | Automatic Workload Repository Performance Baselines |
US20090106219A1 (en) * | 2007-10-17 | 2009-04-23 | Peter Belknap | SQL Execution Plan Verification |
US20090132602A1 (en) * | 2007-11-19 | 2009-05-21 | Douglas Brown | Virtual data maintenance |
WO2011145116A2 (en) | 2010-05-18 | 2011-11-24 | Tata Consultancy Services Limited | System and method for sql performance assurance services |
US8341178B2 (en) * | 2007-09-18 | 2012-12-25 | Oracle International Corporation | SQL performance analyzer |
US8903801B2 (en) * | 2007-09-14 | 2014-12-02 | Oracle International Corporation | Fully automated SQL tuning |
DE102016015663A1 (en) * | 2016-12-23 | 2018-06-28 | Friedrich-Schiller-Universität Jena | Model-based generation of synthetic database statistics |
US20180210910A1 (en) * | 2017-01-25 | 2018-07-26 | Salesforce.Com, Inc | Relational database instruction validation |
US10545962B2 (en) | 2017-01-25 | 2020-01-28 | Salesforce.Com, Inc. | Relational database instruction validation |
US10621064B2 (en) | 2014-07-07 | 2020-04-14 | Oracle International Corporation | Proactive impact measurement of database changes on production systems |
US11048677B1 (en) | 2014-10-01 | 2021-06-29 | Servicenow, Inc. | Streamlined transaction and dimension data collection |
US11327932B2 (en) | 2017-09-30 | 2022-05-10 | Oracle International Corporation | Autonomous multitenant database cloud service framework |
US11386058B2 (en) | 2017-09-29 | 2022-07-12 | Oracle International Corporation | Rule-based autonomous database cloud service framework |
Families Citing this family (18)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6978272B1 (en) * | 1999-11-29 | 2005-12-20 | Ncr Corporation | Method and apparatus for displaying instrumentation parameters in a database system |
US7698167B2 (en) * | 2000-04-28 | 2010-04-13 | Computer Pundits, Inc. | Catalog building method and system |
JP4162184B2 (en) * | 2001-11-14 | 2008-10-08 | 株式会社日立製作所 | Storage device having means for acquiring execution information of database management system |
CA2382714A1 (en) * | 2002-04-19 | 2003-10-19 | Ibm Canada Limited-Ibm Canada Limitee | Substituting parameter markers for literals in a database query language statement to promote reuse of previously generated access plans |
US8161037B2 (en) * | 2004-06-03 | 2012-04-17 | International Business Machines Corporation | Method for autonomically generating a query implementation that meets a defined performance specification |
EP1637955A1 (en) * | 2004-09-15 | 2006-03-22 | Ubs Ag | Generation of anonymized data sets for testing and developping applications |
US8161038B2 (en) * | 2004-10-29 | 2012-04-17 | International Business Machines Corporation | Maintain optimal query performance by presenting differences between access plans |
US8005803B2 (en) * | 2005-07-14 | 2011-08-23 | Microsoft Corporation | Best practices analyzer |
US20070185912A1 (en) * | 2006-02-08 | 2007-08-09 | International Business Machines Corporation | Off-loading I/O and computationally intensive operations to secondary systems |
US8214807B2 (en) * | 2007-01-10 | 2012-07-03 | International Business Machines Corporation | Code path tracking |
US7702623B2 (en) * | 2007-07-31 | 2010-04-20 | Oracle International Corporation | Extended cursor sharing |
US7689550B2 (en) * | 2007-07-31 | 2010-03-30 | Oracle International Corporation | Adaptive cursor sharing |
US8452754B2 (en) * | 2009-05-08 | 2013-05-28 | Microsoft Corporation | Static analysis framework for database applications |
US8818991B2 (en) * | 2009-12-23 | 2014-08-26 | Pivotal Software, Inc. | Apparatus and method for analyzing query optimizer performance |
US10353893B2 (en) | 2015-05-14 | 2019-07-16 | Deephaven Data Labs Llc | Data partitioning and ordering |
US11194809B2 (en) | 2016-12-02 | 2021-12-07 | International Business Machines Corporation | Predicting performance of database queries |
US10002154B1 (en) | 2017-08-24 | 2018-06-19 | Illumon Llc | Computer data system data source having an update propagation graph with feedback cyclicality |
JP6943128B2 (en) * | 2017-10-06 | 2021-09-29 | 株式会社島津製作所 | Analytical database registration device, analytical data collection system, analytical system and analytical database registration method |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5671403A (en) | 1994-12-30 | 1997-09-23 | International Business Machines Corporation | Iterative dynamic programming system for query optimization with bounded complexity |
US5819268A (en) * | 1995-01-10 | 1998-10-06 | International Business Machines Corporation | Method and system for testing for equality/difference in multiple tables of a database |
US5848393A (en) | 1995-12-15 | 1998-12-08 | Ncr Corporation | "What if . . . " function for simulating operations within a task workflow management system |
US5991754A (en) * | 1998-12-28 | 1999-11-23 | Oracle Corporation | Rewriting a query in terms of a summary based on aggregate computability and canonical format, and when a dimension table is on the child side of an outer join |
US6496819B1 (en) * | 1998-12-28 | 2002-12-17 | Oracle Corporation | Rewriting a query in terms of a summary based on functional dependencies and join backs, and based on join derivability |
-
1999
- 1999-09-22 US US09/404,440 patent/US6615222B2/en not_active Expired - Lifetime
- 1999-09-23 CA CA002283052A patent/CA2283052C/en not_active Expired - Fee Related
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5671403A (en) | 1994-12-30 | 1997-09-23 | International Business Machines Corporation | Iterative dynamic programming system for query optimization with bounded complexity |
US5819268A (en) * | 1995-01-10 | 1998-10-06 | International Business Machines Corporation | Method and system for testing for equality/difference in multiple tables of a database |
US5848393A (en) | 1995-12-15 | 1998-12-08 | Ncr Corporation | "What if . . . " function for simulating operations within a task workflow management system |
US5991754A (en) * | 1998-12-28 | 1999-11-23 | Oracle Corporation | Rewriting a query in terms of a summary based on aggregate computability and canonical format, and when a dimension table is on the child side of an outer join |
US6496819B1 (en) * | 1998-12-28 | 2002-12-17 | Oracle Corporation | Rewriting a query in terms of a summary based on functional dependencies and join backs, and based on join derivability |
Non-Patent Citations (6)
Title |
---|
Ehnes et al., The pen and paper paradigm-supporting multiple users on the Virtual Table, Virtual Reality, 2001, Proceedings, IEEE, 2001, pp. 157-164.* * |
Ehnes et al., The pen and paper paradigm—supporting multiple users on the Virtual Table, Virtual Reality, 2001, Proceedings, IEEE, 2001, pp. 157-164.* |
Legakis et al., Intelligent subject matter classification and retrieval, Electrical and Computer Engineering, 1993, Canadian Conference on, Sep. 14-17, 1993, pp. 15-18, vol. 1.* * |
Tsuhara, RDB structure chart display using fuzzy rules, Parallel and Distributed Systems, 1996, Proceedings, 1996 International Conference on, Jun. 3-6, 1996, pp. 510-515.* * |
www.google.com's cache of www.allenhayden.com/cgi-bin/getdoc.pl?file=ascr82.htm. * |
www.storm.aoml.noaa.gov/Reports/Y1Report.* * |
Cited By (59)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030105758A1 (en) * | 2001-12-05 | 2003-06-05 | International Business Machines Corporation | System and method for testing and promoting database update code |
US20040225390A1 (en) * | 2002-05-20 | 2004-11-11 | Lsi Logic Corporation | Direct methods system for assembly of products |
US7526508B2 (en) | 2003-09-04 | 2009-04-28 | Oracle International Corporation | Self-managing database architecture |
US7664798B2 (en) | 2003-09-04 | 2010-02-16 | Oracle International Corporation | Database performance baselines |
US20050086242A1 (en) * | 2003-09-04 | 2005-04-21 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
US20050086195A1 (en) * | 2003-09-04 | 2005-04-21 | Leng Leng Tan | Self-managing database architecture |
US7603340B2 (en) | 2003-09-04 | 2009-10-13 | Oracle International Corporation | Automatic workload repository battery of performance statistics |
US20050055383A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Capturing session activity as in-memory snapshots using a time-based sampling technique within a database for performance tuning and problem diagnosis |
US20050055672A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Time model |
US20050055673A1 (en) * | 2003-09-05 | 2005-03-10 | Oracle International Corporation | Automatic database diagnostic monitor architecture |
US7376682B2 (en) | 2003-09-05 | 2008-05-20 | Oracle International Corporation | Time model |
US7292961B2 (en) | 2003-09-05 | 2007-11-06 | Oracle International Corporation | Capturing session activity as in-memory snapshots using a time-based sampling technique within a database for performance tuning and problem diagnosis |
US7673291B2 (en) | 2003-09-05 | 2010-03-02 | Oracle International Corporation | Automatic database diagnostic monitor architecture |
WO2005028627A3 (en) * | 2003-09-19 | 2006-06-15 | Netezza Corp | Performing sequence analysis as a relational join |
US9679011B2 (en) | 2003-09-19 | 2017-06-13 | Ibm International Group B.V. | Performing sequence analysis as a relational join |
US9589018B2 (en) | 2003-09-19 | 2017-03-07 | Ibm International Group B.V. | Performing sequence analysis as a relational join |
US9183256B2 (en) * | 2003-09-19 | 2015-11-10 | Ibm International Group B.V. | Performing sequence analysis as a relational join |
US8805818B2 (en) | 2003-09-19 | 2014-08-12 | Ibm International Group B.V. | Performing sequence analysis as a multipart plan storing intermediate results as a relation |
US20110010358A1 (en) * | 2003-09-19 | 2011-01-13 | Zane Barry M | Performing sequence analysis as a multipart plan storing intermediate results as a relation |
US20050097103A1 (en) * | 2003-09-19 | 2005-05-05 | Netezza Corporation | Performing sequence analysis as a multipart plan storing intermediate results as a relation |
US7702610B2 (en) | 2003-09-19 | 2010-04-20 | Netezza Corporation | Performing sequence analysis as a multipart plan storing intermediate results as a relation |
US20050091238A1 (en) * | 2003-09-19 | 2005-04-28 | Netezza Corporation | Performing sequence analysis as a relational join |
WO2005028627A2 (en) * | 2003-09-19 | 2005-03-31 | Netezza Corporation | Performing sequence analysis as a relational join |
US20050216490A1 (en) * | 2004-03-26 | 2005-09-29 | Oracle International Corporation | Automatic database diagnostic usage models |
US8024301B2 (en) * | 2004-03-26 | 2011-09-20 | Oracle International Corporation | Automatic database diagnostic usage models |
US20060047696A1 (en) * | 2004-08-24 | 2006-03-02 | Microsoft Corporation | Partially materialized views |
US20070162418A1 (en) * | 2006-01-12 | 2007-07-12 | International Business Machines Corporation | Method and system for performing a non-invasive runtime simulation for a database system |
US7805434B2 (en) | 2006-01-12 | 2010-09-28 | International Business Machines Corporation | Performing a non-invasive runtime simulation for a database system |
US8572067B2 (en) | 2006-03-14 | 2013-10-29 | International Business Machines Corporation | Method to estimate the number of distinct value combinations for a set of attributes in a database system |
US20070220017A1 (en) * | 2006-03-14 | 2007-09-20 | International Business Machines Corporation | Method and system to estimate the number of distinct value combinations for a set of attributes in a database system |
US7933932B2 (en) * | 2006-11-14 | 2011-04-26 | Microsoft Corporation | Statistics based database population |
US20080114801A1 (en) * | 2006-11-14 | 2008-05-15 | Microsoft Corporation | Statistics based database population |
US9720941B2 (en) | 2007-09-14 | 2017-08-01 | Oracle International Corporation | Fully automated SQL tuning |
US8903801B2 (en) * | 2007-09-14 | 2014-12-02 | Oracle International Corporation | Fully automated SQL tuning |
US9734200B2 (en) | 2007-09-14 | 2017-08-15 | Oracle International Corporation | Identifying high risk database statements in changing database environments |
US8341178B2 (en) * | 2007-09-18 | 2012-12-25 | Oracle International Corporation | SQL performance analyzer |
US8600977B2 (en) | 2007-10-17 | 2013-12-03 | Oracle International Corporation | Automatic recognition and capture of SQL execution plans |
US8700608B2 (en) | 2007-10-17 | 2014-04-15 | Oracle International Corporation | SQL execution plan verification |
US20090106219A1 (en) * | 2007-10-17 | 2009-04-23 | Peter Belknap | SQL Execution Plan Verification |
US8335767B2 (en) | 2007-10-17 | 2012-12-18 | Oracle International Corporation | Maintaining and utilizing SQL execution plan histories |
US10229158B2 (en) | 2007-10-17 | 2019-03-12 | Oracle International Corporation | SQL execution plan verification |
US9189522B2 (en) | 2007-10-17 | 2015-11-17 | Oracle International Corporation | SQL execution plan baselines |
US20090106321A1 (en) * | 2007-10-17 | 2009-04-23 | Dinesh Das | Maintaining and Utilizing SQL Execution Plan Histories |
US20090106306A1 (en) * | 2007-10-17 | 2009-04-23 | Dinesh Das | SQL Execution Plan Baselines |
US9710353B2 (en) | 2007-10-19 | 2017-07-18 | Oracle International Corporation | Creating composite baselines based on a plurality of different baselines |
US8990811B2 (en) | 2007-10-19 | 2015-03-24 | Oracle International Corporation | Future-based performance baselines |
US20090106756A1 (en) * | 2007-10-19 | 2009-04-23 | Oracle International Corporation | Automatic Workload Repository Performance Baselines |
US8392461B2 (en) * | 2007-11-19 | 2013-03-05 | Teradota Us, Inc. | Virtual data maintenance |
US20090132602A1 (en) * | 2007-11-19 | 2009-05-21 | Douglas Brown | Virtual data maintenance |
US8930918B2 (en) | 2010-05-18 | 2015-01-06 | Tata Consultancy Services Limited | System and method for SQL performance assurance services |
WO2011145116A2 (en) | 2010-05-18 | 2011-11-24 | Tata Consultancy Services Limited | System and method for sql performance assurance services |
US10621064B2 (en) | 2014-07-07 | 2020-04-14 | Oracle International Corporation | Proactive impact measurement of database changes on production systems |
US11048677B1 (en) | 2014-10-01 | 2021-06-29 | Servicenow, Inc. | Streamlined transaction and dimension data collection |
DE102016015663A1 (en) * | 2016-12-23 | 2018-06-28 | Friedrich-Schiller-Universität Jena | Model-based generation of synthetic database statistics |
US20180210910A1 (en) * | 2017-01-25 | 2018-07-26 | Salesforce.Com, Inc | Relational database instruction validation |
US10545962B2 (en) | 2017-01-25 | 2020-01-28 | Salesforce.Com, Inc. | Relational database instruction validation |
US10650028B2 (en) * | 2017-01-25 | 2020-05-12 | Salesforce.Com, Inc. | Relational database instruction validation |
US11386058B2 (en) | 2017-09-29 | 2022-07-12 | Oracle International Corporation | Rule-based autonomous database cloud service framework |
US11327932B2 (en) | 2017-09-30 | 2022-05-10 | Oracle International Corporation | Autonomous multitenant database cloud service framework |
Also Published As
Publication number | Publication date |
---|---|
CA2283052C (en) | 2002-11-05 |
US20030115212A1 (en) | 2003-06-19 |
CA2283052A1 (en) | 2001-03-23 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6615222B2 (en) | System and process for evaluating the performance of a database system | |
Blasgen et al. | System R: An architectural overview | |
US7370043B1 (en) | Method and system for upgrade validation of database query plans | |
EP0534466B1 (en) | Change definition language for computer database system | |
Schmidt et al. | Relational database systems: analysis and comparison | |
Eastman | System facilities for CAD databases | |
JPH08339319A (en) | Method with high-availablity compilation of sql program and relational database system | |
CA2980333A1 (en) | Field specialization systems and methods for improving program performance | |
Hicks | Knowledge base management systems-tools for creating verified intelligent systems | |
Stodghill | A relational approach to the automatic generation of sequential sparse matrix codes | |
Rowland et al. | The 3B20D processor & DMERT operating system: Software development system | |
Haffner et al. | mutable: A Modern DBMS for Research and Fast Prototyping | |
GB2420638A (en) | Method of substituting code fragments in Internal Representation | |
Lee et al. | Designing triggers with trigger-by-example | |
Ceri et al. | Software prototyping by relational techniques: experiences with program construction systems | |
Yao et al. | The Oregon Report Data-Base Systems | |
Taylor et al. | Database program conversion: A framework for research | |
Sunderic | Stored Procedure Programming | |
Feiler et al. | Granularity issues in a knowledge-based programming environment | |
Nations et al. | Some DML instruction sequences for application program analysis and conversion | |
US8527498B1 (en) | Method and system for organizing values of alternative equality conditions | |
Thalheim | The database design system (DB2) | |
Kraft et al. | CHICAGO: a test and evaluation environment for coarse-grained optimization | |
Thalheim | Towards a Framework for Database Design Strategies | |
Chaudhri et al. | A performance study of object database management systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HORNIBROOK, JOHN F.;LUMBY, JOHN E.;RJAIBI, WALID;AND OTHERS;REEL/FRAME:010414/0865Effective date: 19991116 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |