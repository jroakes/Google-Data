WO2024072749A1 - Retrieval augmented text-to-image generation - Google Patents
Retrieval augmented text-to-image generation Download PDFInfo
- Publication number
- WO2024072749A1 WO2024072749A1 PCT/US2023/033622 US2023033622W WO2024072749A1 WO 2024072749 A1 WO2024072749 A1 WO 2024072749A1 US 2023033622 W US2023033622 W US 2023033622W WO 2024072749 A1 WO2024072749 A1 WO 2024072749A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- text
- image
- neighbor
- time step
- model
- Prior art date
Links
- 230000003190 augmentative effect Effects 0.000 title description 6
- 238000000034 method Methods 0.000 claims abstract description 56
- 230000007246 mechanism Effects 0.000 claims abstract description 12
- 230000001143 conditioned effect Effects 0.000 claims abstract description 10
- 238000003860 storage Methods 0.000 claims abstract description 10
- 238000009792 diffusion process Methods 0.000 claims description 46
- 238000012545 processing Methods 0.000 claims description 24
- 238000012549 training Methods 0.000 claims description 18
- 238000013139 quantization Methods 0.000 claims description 5
- 238000013138 pruning Methods 0.000 claims description 2
- 238000004590 computer program Methods 0.000 abstract description 14
- 230000008569 process Effects 0.000 description 30
- 238000013528 artificial neural network Methods 0.000 description 11
- 230000006870 function Effects 0.000 description 9
- 230000000007 visual effect Effects 0.000 description 7
- 238000010801 machine learning Methods 0.000 description 6
- 238000004891 communication Methods 0.000 description 5
- 238000010586 diagram Methods 0.000 description 4
- 238000009826 distribution Methods 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000003993 interaction Effects 0.000 description 3
- 230000004044 response Effects 0.000 description 3
- 230000026676 system process Effects 0.000 description 3
- 230000003750 conditioning effect Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 230000009466 transformation Effects 0.000 description 2
- 241001465754 Metazoa Species 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000013527 convolutional neural network Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 238000005070 sampling Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000002123 temporal effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/70—Information retrieval; Database structures therefor; File system structures therefor of video data
- G06F16/78—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/783—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/042—Knowledge-based neural networks; Logical representations of neural networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
- G06N3/0455—Auto-encoder networks; Encoder-decoder networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0464—Convolutional networks [CNN, ConvNet]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/0475—Generative networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/003—Reconstruction from projections, e.g. tomography
- G06T11/006—Inverse problem, transformation from projection-space into object-space, e.g. transform methods, back-projection, algebraic methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2211/00—Image generation
- G06T2211/40—Computed tomography
- G06T2211/456—Optical coherence tomography [OCT]
Definitions
- This specification relates to processing images using neural networks.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification describes a system implemented as computer programs on one or more computers in one or more locations that generates an output image from an input.
- the input may include input text submitted by a user of the system specifying a particular class of objects or a particular object, and the system can generate the output image conditioned on that input text, i.e., generate the output image that shows an object belonging to the particular class or the particular object.
- a neural network system as described in this specification can generate images from input text with higher fidelity and faithfulness.
- the performance of the text-to-image diffusion model can be improved, i.e., the accuracy of the visual appearance of the objects that appear in the output images generated by the model can be increased.
- the neural network system can generate output images with better real-world faithfulness across a diverse range of objects, even including objects (or object classes) that are rarely seen or completely unseen by the model during training.
- the neural network system when generating video frames, can generate more consistent contents by predicting the next video frame in a video, conditioned on a text input and by using information retrieved from the already generated video frames.
- the use of the retrieval augmented generative process allows the system to generate video frames depicting highly realistic objects in a consistent manner for many frames into the future, i.e., by continuing to append frames generated by the system to the end of temporal sequences to generate more frames.
- FIG. l is a block diagram of an example image generation system flow.
- FIG. 2 is a flow diagram of an example process for updating an intermediate representation of the output image.
- FIG. 3 is an example illustration of updating an intermediate representation of the output image.
- FIG. 1 is a block diagram of an example image generation system 100 flow.
- the image generation system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations that generates an output image 135 conditioned on input text 102.
- the input text 102 characterizes one or more desired visual properties for the output image 135, i.e., characterizes one or more visual properties that the output image 135 generated by the system should have.
- the input text 102 includes text that specifies a particular object that should appear in the output image 102.
- the input text 102 includes text that specifies a particular class of objects from a plurality of object classes to which an object depicted in the output image 135 should belong.
- the input text 102 includes text that specifies the output image 135 should be a next frame that is a prediction of the next video frame in a sequence of video frames already known to the image generation system 100. The known sequence of video frames depicts an object, e.g., having a particular motion.
- the image generation system 100 To generate the output image 135 conditioned on the input text 102, the image generation system 100 includes a text-to-image model 110 and a database comprising a multi-modal knowledge base 120. The image generation system 100 uses the text-to-image model 110 and the multi-modal knowledge base 120 to perform retrieval -augmented, conditional image generation by generating the intensity values of the pixels of the output image 135.
- the text-to-image model 110 is used to generate the output image 135 across multiple time steps (referred to as “reverse diffusion time steps”) T, T — 1, 1 by performing a reverse diffusion process.
- the text-to-image model 110 can have any appropriate diffusion model neural network (or “diffusion model” for short) architecture that allows the text-to-image model to map a diffusion input that has the same dimensionality as the output image 135 over the reverse diffusion process to a diffusion output that also has the same dimensionality as the output image 135.
- diffusion model for short
- the text-to-image model 110 can be a convolutional neural network, e.g., a U-Net or other architecture, that maps one input of a given dimensionality to an output of the same dimensionality.
- a convolutional neural network e.g., a U-Net or other architecture
- the text-to-image model 110 has been trained, e.g., by the image generation system 100 or another training system, to, at any given time step, process a model input for the time step that includes an intermediate representation of the output image (as of the time step) to generate a model output for the time step.
- the model output includes or otherwise specifies a noise term that is an estimate of the noise that needs to be added to the output image 135 being generated by the system 100, to generate the intermediate representation.
- the text-to-image model 110 can be trained on a set of training text and image pairs using one of the loss functions described in Jonathan Ho, et al. Denoising Diffusion Probabilistic Models. arXiv:2006.11239, 2020, Chitwan Saharia, et al.
- Other appropriate training methods can also be used.
- the multi-modal knowledge base 120 includes one or more datasets. Each dataset includes multiple pairs of image and text. Generally, for each pair of image and text, the image depicts an object and the text defines, describes, characterizes, or otherwise relates to the object depicted in the image.
- the multi-modal knowledge base 120 can include a single dataset that includes images of different classes of objects and their associated text description.
- the different classes of objects can, for example, include one or more of: landmarks, landscape or location features, vehicles, or tools, food, clothing, animals, or human.
- the multi-modal knowledge base 120 can include multiple, separate datasets arranged according to object classes.
- the multi-modal knowledge base 120 can include a first dataset that corresponds to a first object class (or, one or more first object classes), a second dataset that corresponds to a second object class (or, one or more second object classes), and so on.
- the first dataset stores multiple pairs of image and text, where each image shows an object belonging to the first object class (or, one of the one or more first object classes) corresponding to the dataset.
- the second dataset stores multiple pairs of image and text, where each image shows an object belonging to one of the second object class (or, one of the one or more second object classes) corresponding to the dataset.
- the multi-modal knowledge base 120 can include a dataset that stores a sequence of video frames of one or more objects and corresponding text description of the video frames. That is, for each image and text pair stored in the dataset, the image is a video frame, and the text is a caption for the video frame.
- the datasets in the multi-modal knowledge base 120 are local datasets that are already maintained by the image generation system 100.
- the image generation system 100 can receive one of the local datasets as an upload from a user of the system.
- the datasets in the multi-modal knowledge base 120 are remote datasets that are maintained at another server system that is accessible by the image generation system 100, e.g., through an application programming interface (API) or another data interface.
- API application programming interface
- some of the datasets in the multi-modal knowledge base are local datasets, while others of the datasets are remote datasets.
- the local or remote datasets in these implementations can have any size.
- some remote datasets accessible by the image generation system 100 can be large-scale, e.g., Web-scale, datasets that include hundreds of millions or more of image and text pairs.
- a remote system identifies the different images by crawling electronic resources, such as, for example, web pages, electronic files, or other resources that are available on a network, e.g., the Internet.
- the images are labeled, and the labeled images are stored in the format of image and text pairs in one of the remote datasets.
- the multi-modal knowledge base 120 thus represents external knowledge, i.e., knowledge that is external to the text-to-image model 110, that may not have been used in the training of the text-to-image model 110.
- the provision of the multi-modal knowledge base 120 allows for the image generation system 100 to augment the process of generating the output image 135 conditioned on the input text 102 with information retrieved from the multi-modal knowledge base 120.
- the image generation system described in this specification generates images with improved real-world faithfulness (e.g. improved accuracy), as measured by for example the Frechet inception distance (FID) score, compared to other systems which do not use the described techniques.
- the image generation system uses the relevant information included in the neighbor image and text pairs 122 to boost the performance of the text-to-image model 110 to generate output images 135 with better real -world faithfulness across a diverse range of objects, even including objects (or object classes) that are rarely seen or completely unseen by the model during training.
- the image generation system 100 selects one or more neighbor image and text pairs 122 based on their similarities to the input text 102, and subsequently applies an attention mechanism to generate an attended feature map, which is then processed by the text-to-image model 110 to generate an updated intermediate representation of the output image 135 for the reverse diffusion time step.
- the image generation system 100 uses the model output generated by the text- to-image model 110 and one or more neighbor image and text pairs 122 to update the intermediate representation of the output image 135 as of the time step.
- the image generation system 100 uses one or more attention heads, which can be implemented as one or more neural networks.
- Each attention head generates a set of queries, a set of keys, and a set of values, and then applies any of a variety of variants of query-key-value (QKV) attention, e.g., a dot product attention function or a scaled dot product attention function, using the queries, keys, and values to generate an output.
- QKV query-key-value
- Each query, key, value can be a vector that includes one or more vector elements.
- the attention mechanism in FIG.l can be a cross-attention mechanism.
- the queries are generated from a feature map that have been generated based on the intermediate representation of the output image for the reverse diffusion time step, while the keys and values are generated from a feature map that have been generated based on the one or more neighbor image and text pairs 122 selected for the reverse diffusion time step.
- the neighbor image and text pairs 122 are image and text pairs that are selected based on (i) text-to-text similarity between the text in the pairs and the input text 102, (ii) text-to-image similarity between the images in the pairs and the input text 102, or both (i) and (ii).
- the text-to-text similarity can be a TF/IDF similarity or a BM25 similarity
- the text-to-image similarity can be a similarity, e.g., CLIP similarity, computed based on a distance between respective embeddings of the images in the pairs and the input text in a co-embedding space that include both text and image embeddings.
- the image generation system 100 receives an input text 102 which includes the following text: “Two Chortai are running on the field.” Accordingly, at a given reverse diffusion time step T — 1, the image generation system 100 selects, from the multi-modal knowledge base 120, multiple neighbor image and text pairs 122. Because “Chortai” is mentioned in the input text 102, each neighbor pair 122 selected by the system includes an image of a Chortai, e.g., Chortai image A 122A, Chortai image B 122B, or
- the image generation system 100 uses text-to-image similarity to select the neighbor image and text pairs 122. Specifically, the system selects neighbor images from the multi-modal knowledge base 120 based on text-to-image similarities, and in turn, uses the image and text pairs from the multi-modal knowledge base 120 which includes the selected neighbor images as the neighbor image and text pairs 122. [0042] In general, any number of neighbor images that satisfy a text-to-image similarity threshold can be selected.
- the image generation system 100 can select, as the neighbor images, one or more images from (the one or more datasets within) the multi-modal knowledge base 120 that have the highest text-to-image similarities relative to the input text 102 among the text-to-image similarities of all images stored in the multi-modal knowledge base 120.
- the image generation system 100 can select, as the neighbor images, one or more images from (the one or more datasets within) the multi-modal knowledge base 120 that each have a text-to-image similarity relative to the input text 102 that is greater than a given value.
- the image generation system 100 uses text-to-text similarity to select the neighbor image and text pairs 122. Specifically, the system selects neighbor text from the multi-modal knowledge base 120 based on text-to-text similarities, and in turn, uses the image and text pairs from the multi-modal knowledge base 120 which includes the selected neighbor text as the neighbor image and text pairs 122.
- any number of neighbor text that satisfy a text-to-text similarity threshold can be selected.
- the image generation system 100 can select, as the neighbor text, one or more text from (the one or more datasets within) the multi-modal knowledge base 120 that have the highest text-to-text similarities relative to the input text 102 among the text-to-text similarities of all text stored in the multi-modal knowledge base 120.
- the image generation system 100 can select, as the neighbor text, one or more text from (the one or more datasets within) the multi-modal knowledge base 120 that each have a text-to-text similarity relative to the input text 102 that is greater than a given value.
- the image generation system 100 uses both text-to- image similarity and text-to-text similarity to select the neighbor image and text pairs 122. Specifically, for each image of text pair stored in the multi-modal knowledge base 120, the system can combine, e.g., by computing a sum or product of, (i) the text-to-image similarity of the image included in the pair relative to the input text 102 and (ii) the text-to-text similarity of the text included in the pair relative to the input text 102, to generate a combined similarity for the pair, and then select one or more neighbor images and text pairs 122 that satisfy a combined similarity threshold.
- a total of three neighbor image and text pairs 122 are selected at the given step. It will be appreciated that, in other examples, more or fewer pairs can be selected. In some cases, the image generation system 100 selects the same, fixed number of neighbor image and text pairs 122 at different reverse diffusion time steps, while in other cases, the image generation system 100 selects varying numbers of neighbor image and text pairs 122 across different reverse diffusion time steps.
- the same text (e.g., the text of “Chortai is a breed of dog” in the example of FIG. 1) is included all of the three neighbor image and text pairs 122; thus different neighbor pairs include different images but the same text.
- different text may be included in the three neighbor image and text pairs 122; thus different neighbor pairs include different images and also different text.
- the image generation system 100 outputs the updated intermediate representation as the final output image 135.
- the final output image 135 is the updated intermediate representation generated in the last step of the multiple reverse diffusion time steps.
- the reverse diffusion process was augmented by information (e.g., high-level semantics information, low-level visual detail information, or both) included in the neighbor image and text pairs 122 retrieved from the multi-modal knowledge base 120, the final output image 135 will have improved accuracy in the visual appearances of the objects specified in the input text 102.
- information e.g., high-level semantics information, low-level visual detail information, or both
- the image generation system 100 can provide the output image 135 for presentation to a user on a user computer, e.g., as a response to the user who submitted the input text 102.
- the image generation system 100 can store the output image 135 for later use.
- FIG. 2 is a flow diagram of an example process 200 for updating an intermediate representation of the output image by using a text-to-image model and a multi-modal knowledge base.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a data generation system e.g., the system used in the data generation system 100 flow depicted in FIG. 1, appropriately programmed in accordance with this specification, can perform the process 200.
- FIG. 3 is an example illustration 300 of updating an intermediate representation of the output image.
- the system can perform multiple iterations of the process 200 to generate an output image in response to receiving input text.
- the output image will depict the particular object.
- the input text includes text that specifies or describes a particular class of objects from a plurality of object classes
- the output image will depict an object that belongs to the particular class.
- the input text includes text that specifies the output image should be a next frame that is a prediction of the next video frame in a sequence of video frames already known to the system
- the output image will be a frame that shows the same object that has been depicted in the sequence of video frames, e.g., having a continued motion.
- the system Prior to the first iteration of the process 200, the system initializes a representation of the output image.
- the initial representation of the output image is the same dimensionality as the final output image but has noisy values.
- the system can initialize the output image, i.e., can generate the initial representation of the output image, by sampling each of one or more intensity values for each pixel in the output image from a corresponding noise distribution, e.g., a Gaussian distribution, or a different noise distribution. That is, the output image includes multiple intensity values and the initial representation of the output image includes the same number of intensity values, with each intensity value being sampled from a corresponding noise distribution.
- a noise distribution e.g., a Gaussian distribution, or a different noise distribution.
- the system then generates the final output image by repeatedly, i.e., at each of multiple time steps, performing an iteration of the process 200 to update an intermediate representation of the output image.
- the final output image is the updated intermediate representation generated in the last iteration of the process 200.
- the multiple iterations of the process 200 can be collectively referred to as a reverse diffusion process, with one iteration of the process 200 being performed at each reverse diffusion time step during the reverse diffusion process.
- the system processes a model input that includes (i) an intermediate representation x t of the output image for the time step, (ii) the input text c p (or data derived from the input text c p , e.g., an embedding of the input text generated by a text encoder neural network from processing the input text), and (iii) time step data t defining the time step using a text-to- image model to generate a first feature map for the time step (step 202).
- the intermediate representation x t is the initial representation.
- the intermediate representation x t is the updated intermediate representation that has been generated in the immediately preceding time step.
- the text-to-image model has a U-Net architecture, which includes an encoder 310 (a downsampling encoder or “D Stack”) and a decoder 320 (an upsampling decoder or “UStack”).
- the encoder 310 of the text-to-image model processes the model input to generate the first feature map that is defined by: where F represents the feature map width, d represents the hidden dimension, and 0 represents the parameters of the text-to-image model.
- the system selects one or more neighbor image and text pairs from the multi-modal knowledge base based on their similarities to the input text (step 204). Selecting the one or more neighbor images and text pairs from the multi-modal knowledge base may comprise querying the multi-modal knowledge base.
- the input text may be used as the query.
- the system determines, for each image and text pair stored in the multi-modal knowledge, a corresponding similarity of the image and text pair to the input text based on (i) a text-to-text similarity between the input text and the text in the image and text pair, (ii) a text-to-image similarity between the input text and the image in the image and text pair, or both (i) and (ii).
- the text-to-text similarity can be a TF/IDF similarity or a BM25 similarity
- the text-to-image similarity can be a CLIP similarity or a different similarity computed based on distances in an embedding space.
- the system can use search space pruning, search space quantization, or both.
- quantization technique the system can use an anisotropic quantization-based MIPS technique descried in more detail at Ruiqi Guo, et al. Accelerating large-scale inference with anisotropic vector quantization. In International Conference on Machine Learning, pp. 3887-3896. PMLR, 2020.
- the system processes (i) the image in the neighbor image and text pair and (ii) the text in the neighbor image and text pair (or data derived from the text, e.g., an embedding of the text generated by a text encoder neural network from processing the text) using the text-to-image model to generate a second feature map for the neighbor image and text pair (step 206).
- the image in the neighbor image and text pair comprises pixels. Processing the image in the neighbor image and text pair may comprise processing the pixels.
- the encoder 310 of the text-to-image model which generated the first feature map at step 202, also processes the neighbor images and text pairs to generate one or more second feature maps that is defined by:
- a different component of the system e.g. one or more other encoder neural networks, are used to process the neighbor images and text pairs to generate the second feature map.
- the system applies an attention mechanism over the one or more second feature maps using one or more queries derived from the first feature map for the time step to generate an attended feature map (step 208). That is, the system generates an attended feature map that is defined by:
- the attention mechanism can be a cross-attention mechanism.
- crossattention the system uses the first feature map to generate one or more queries, e.g., by applying a query linear transformation to the first feature map.
- the system also uses the one or more second feature maps to generate one or more keys and one or more and values, e.g., by applying a key or a value linear transformation to the one or more second feature maps.
- QKV query-key -value
- the system processes the attended feature map for the time step using the text-to- image model to generate a noise term e for the time step (step 210).
- a noise term e for the time step
- the decoder 320 of the text-to-image model generate a noise term e that is defined by: where 0 represents the parameters of the text-to-image model, c p represents the input text, and c n represents the neighbor image and text pairs.
- the system makes use of a guidance when generating the noise term e.
- the system can use classifier-free guidance that follows an interleaved guidance schedule which alternates between input text guidance and neighbor retrieval guidance to improve both text alignment and object alignment.
- the noise term e can be computed by: 2 where e p and e n are the text-enhanced noise term prediction and neighbor-enhanced noise term prediction, respectively; a> p is the input text guidance weight, and a> n is the neighbor retrieval guidance weight.
- the two guidance predictions are interleaved by a predefined ratio J], At each guidance step, a number R is randomly sampled from [0, 1], and if R ⁇ TJ, e p is computed, otherwise e n is computed.
- the predefined ratio T can be a tunable parameter of the system that balances the faithfulness with respect to input text or the neighbor image and text pairs.
- the system generates an updated intermediate representation of the output image for the time step based on using the noise term e to update the intermediate representation x t of the output image (step 212).
- the updated intermediate representation x t- can be computed by using the noise term e to de-noise the intermediate representation x t as follows: where and O; ' defines the variance for the time step according to a predetermined variance schedule ? 2 > ⁇ > PT-I> PT an d c is the conditioning input that includes both the input text c p and the neighbor images and text pairs c n .
- the system can update an intermediate representation of the output image to generate the final output image. That is, the process 200 can be performed as part of predicting an output image from input text for which the desired output, i.e., the output image that should be generated by the system from the input text, is not known.
- steps of the process 200 can also be performed as part of processing training inputs derived from a training dataset, i.e., inputs derived from a set of input text and/or images for which the output images that should be generated by the system is known, in order to fine-tune a pre-trained text-to-image model to determine finetuned values for the parameters of the model, i.e., from their pre-trained values.
- a training dataset i.e., inputs derived from a set of input text and/or images for which the output images that should be generated by the system is known
- the system can repeatedly perform steps 202-210 on training inputs selected from an image and text dataset as part of a diffusion model training process to finetune the text-to-image model to optimize a fine-tuning objective function that is appropriate for the retrieval-augmented conditional image generation task that the text-to-image model is configured to perform.
- the fine-tuning objective function can include a time re-weighted square error loss term that trains the text-to-image model 6 on images x 0 selected from a set of images to minimize a squared error loss between each image x 0 and an estimate of the image x 0 generated by the text-to-image model as of a sampled reverse diffusion time step t within the reverse diffusion process: where 2 and c is the conditioning input, Xf - •” T V 1 - rif.e represents the noisy image as of the time step t, with the noise term e ⁇ N(0, 1),
- the system can incorporate any number of techniques to improve the speed, the effectiveness, or both of the training process.
- the text-to-image diffusion model can be configured to make unconditional noise predictions 0 by randomly dropping out the input text, i.e., by setting c p and/or c n to null.
- some implementations of the text-to-image model can include a sequence (or “cascade”) of a low resolution diffusion model and a high resolution diffusion model, which is configured to generate a high resolution image as the output image conditioned on a low resolution image generated by the lower resolution diffusion model.
- the system can iteratively up-scale the resolution of the image, ensuring that a high-resolution image can be generated without requiring a single model to generate the image at the desired output resolution directly.
- the system can train the low resolution diffusion model and the high resolution diffusion model on different training inputs.
- This specification uses the term “configured” in connection with systems and computer program components.
- a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions.
- one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine- readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations.
- the index database can include multiple collections of data, each of which may be organized and accessed differently.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user’s device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework or a JAX framework.
- a machine learning framework e.g., a TensorFlow framework or a JAX framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Methods, systems, and apparatus, including computer programs encoded on computer storage media, for generating an output image using a text-to-image model and conditioned on both the input text and image and text pairs selected from a multi-modal knowledge base. In one aspect, a method includes, at each of multiple time steps: generating a first feature map for the time step; selecting one or more neighbor image and text pairs based on their similarities to the input text; for each of the one or more neighbor images and text pairs, generating a second feature map for the neighbor image and text pair; applying an attention mechanism over the one or more second feature maps to generate an attended feature map; and generating an updated intermediate representation of the output image for the time step.
Description
RETRIEVAL AUGMENTED TEXT-TO-IMAGE GENERATION
CROSS-REFERENCE TO RELATED APPLICATION
[001] This application claims priority to U.S. Provisional Application No. 63/410,414, filed on September 27, 2022. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
BACKGROUND
[002] This specification relates to processing images using neural networks.
[003] Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input. Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer. Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
SUMMARY
[004] This specification describes a system implemented as computer programs on one or more computers in one or more locations that generates an output image from an input. For example, the input may include input text submitted by a user of the system specifying a particular class of objects or a particular object, and the system can generate the output image conditioned on that input text, i.e., generate the output image that shows an object belonging to the particular class or the particular object.
[005] Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. A neural network system as described in this specification can generate images from input text with higher fidelity and faithfulness. In particular, by augmenting the conditional generative process performed by using a text-to-image diffusion model with an information retrieval process which retrieves relevant information from a multi-modal knowledge base of text and image pairs, the performance of the text-to-image diffusion model can be improved, i.e., the accuracy of the visual appearance of the objects that appear in the output images generated by the model can be increased.
[006] By generating the output image using a conditional generative process augmented with information of high-level semantics and low-level visual details of images in relevant text and image pairs selected from the multi-modal knowledge base, the neural network system can generate output images with better real-world faithfulness across a diverse range of objects, even including objects (or object classes) that are rarely seen or completely unseen by the model during training.
[007] When generating video frames, the neural network system as described in this specification can generate more consistent contents by predicting the next video frame in a video, conditioned on a text input and by using information retrieved from the already generated video frames. The use of the retrieval augmented generative process allows the system to generate video frames depicting highly realistic objects in a consistent manner for many frames into the future, i.e., by continuing to append frames generated by the system to the end of temporal sequences to generate more frames.
[008] The details of one or more embodiments of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
BRIEF DESCRIPTION OF THE DRAWINGS
[009] FIG. l is a block diagram of an example image generation system flow.
[0010] FIG. 2 is a flow diagram of an example process for updating an intermediate representation of the output image.
[0011] FIG. 3 is an example illustration of updating an intermediate representation of the output image.
[0012] Like reference numbers and designations in the various drawings indicate like elements.
DETAILED DESCRIPTION
[0013] FIG. 1 is a block diagram of an example image generation system 100 flow. The image generation system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations that generates an output image 135 conditioned on input text 102.
[0014] Generally, the input text 102 characterizes one or more desired visual properties for the output image 135, i.e., characterizes one or more visual properties that the output image 135 generated by the system should have.
[0015] For example, the input text 102 includes text that specifies a particular object that should appear in the output image 102. As another example, the input text 102 includes text that specifies a particular class of objects from a plurality of object classes to which an object depicted in the output image 135 should belong. As yet another example, the input text 102 includes text that specifies the output image 135 should be a next frame that is a prediction of the next video frame in a sequence of video frames already known to the image generation system 100. The known sequence of video frames depicts an object, e.g., having a particular motion.
[0016] To generate the output image 135 conditioned on the input text 102, the image generation system 100 includes a text-to-image model 110 and a database comprising a multi-modal knowledge base 120. The image generation system 100 uses the text-to-image model 110 and the multi-modal knowledge base 120 to perform retrieval -augmented, conditional image generation by generating the intensity values of the pixels of the output image 135.
[0017] The text-to-image model 110 is used to generate the output image 135 across multiple time steps (referred to as “reverse diffusion time steps”) T, T — 1, 1 by performing a reverse diffusion process.
[0018] The text-to-image model 110 can have any appropriate diffusion model neural network (or “diffusion model” for short) architecture that allows the text-to-image model to map a diffusion input that has the same dimensionality as the output image 135 over the reverse diffusion process to a diffusion output that also has the same dimensionality as the output image 135.
[0019] For example, the text-to-image model 110 can be a convolutional neural network, e.g., a U-Net or other architecture, that maps one input of a given dimensionality to an output of the same dimensionality.
[0020] The text-to-image model 110 has been trained, e.g., by the image generation system 100 or another training system, to, at any given time step, process a model input for the time step that includes an intermediate representation of the output image (as of the time step) to generate a model output for the time step. The model output includes or otherwise specifies a noise term that is an estimate of the noise that needs to be added to the output image 135 being generated by the system 100, to generate the intermediate representation.
[0021] For example, the text-to-image model 110 can be trained on a set of training text and image pairs using one of the loss functions described in Jonathan Ho, et al. Denoising Diffusion Probabilistic Models. arXiv:2006.11239, 2020, Chitwan Saharia, et al.
Photorealistic text-to-image diffusion models with deep language understanding. arXiv preprint arXiv:2205.11487, 2022, and Aditya Ramesh, et al. Hierarchical textconditional image generation with clip latents. arXiv preprint arXiv:2204.06125, 2022, to generate the model output. Other appropriate training methods can also be used.
[0022] The multi-modal knowledge base 120 includes one or more datasets. Each dataset includes multiple pairs of image and text. Generally, for each pair of image and text, the image depicts an object and the text defines, describes, characterizes, or otherwise relates to the object depicted in the image.
[0023] For example, the multi-modal knowledge base 120 can include a single dataset that includes images of different classes of objects and their associated text description. The different classes of objects can, for example, include one or more of: landmarks, landscape or location features, vehicles, or tools, food, clothing, animals, or human.
[0024] As another example, the multi-modal knowledge base 120 can include multiple, separate datasets arranged according to object classes. For example, the multi-modal knowledge base 120 can include a first dataset that corresponds to a first object class (or, one or more first object classes), a second dataset that corresponds to a second object class (or, one or more second object classes), and so on.
[0025] In this example, the first dataset stores multiple pairs of image and text, where each image shows an object belonging to the first object class (or, one of the one or more first object classes) corresponding to the dataset. Likewise, the second dataset stores multiple pairs of image and text, where each image shows an object belonging to one of the second object class (or, one of the one or more second object classes) corresponding to the dataset.
[0026] As yet another example, the multi-modal knowledge base 120 can include a dataset that stores a sequence of video frames of one or more objects and corresponding text description of the video frames. That is, for each image and text pair stored in the dataset, the image is a video frame, and the text is a caption for the video frame.
[0027] In some implementations, the datasets in the multi-modal knowledge base 120 are local datasets that are already maintained by the image generation system 100. For example, the image generation system 100 can receive one of the local datasets as an upload from a user of the system.
[0028] In some other implementations, the datasets in the multi-modal knowledge base 120 are remote datasets that are maintained at another server system that is accessible by the image generation system 100, e.g., through an application programming interface (API) or another data interface.
[0029] In yet other implementations, some of the datasets in the multi-modal knowledge base are local datasets, while others of the datasets are remote datasets.
[0030] The local or remote datasets in these implementations can have any size. For example, some remote datasets accessible by the image generation system 100 can be large-scale, e.g., Web-scale, datasets that include hundreds of millions or more of image and text pairs. For example, a remote system identifies the different images by crawling electronic resources, such as, for example, web pages, electronic files, or other resources that are available on a network, e.g., the Internet. The images are labeled, and the labeled images are stored in the format of image and text pairs in one of the remote datasets.
[0031] Given the variety, breadth, or both of the very large number of image and text pairs stored therein, the multi-modal knowledge base 120 thus represents external knowledge, i.e., knowledge that is external to the text-to-image model 110, that may not have been used in the training of the text-to-image model 110.
[0032] The provision of the multi-modal knowledge base 120 allows for the image generation system 100 to augment the process of generating the output image 135 conditioned on the input text 102 with information retrieved from the multi-modal knowledge base 120.
[0033] In this way, the image generation system described in this specification generates images with improved real-world faithfulness (e.g. improved accuracy), as measured by for example the Frechet inception distance (FID) score, compared to other systems which do not use the described techniques. In particular, the image generation system uses the relevant information included in the neighbor image and text pairs 122 to boost the performance of the text-to-image model 110 to generate output images 135 with better real -world faithfulness across a diverse range of objects, even including objects (or object classes) that are rarely seen or completely unseen by the model during training.
[0034] To that end, at each of one or more of the multiple reverse diffusion time steps over the reverse diffusion process, the image generation system 100 selects one or more neighbor image and text pairs 122 based on their similarities to the input text 102, and subsequently applies an attention mechanism to generate an attended feature map, which is then processed
by the text-to-image model 110 to generate an updated intermediate representation of the output image 135 for the reverse diffusion time step.
[0035] That is, the image generation system 100 uses the model output generated by the text- to-image model 110 and one or more neighbor image and text pairs 122 to update the intermediate representation of the output image 135 as of the time step.
[0036] Generally, to apply the attention mechanism, the image generation system 100 uses one or more attention heads, which can be implemented as one or more neural networks. Each attention head generates a set of queries, a set of keys, and a set of values, and then applies any of a variety of variants of query-key-value (QKV) attention, e.g., a dot product attention function or a scaled dot product attention function, using the queries, keys, and values to generate an output. Each query, key, value can be a vector that includes one or more vector elements.
[0037] For example, the attention mechanism in FIG.l can be a cross-attention mechanism. In cross-attention, the queries are generated from a feature map that have been generated based on the intermediate representation of the output image for the reverse diffusion time step, while the keys and values are generated from a feature map that have been generated based on the one or more neighbor image and text pairs 122 selected for the reverse diffusion time step.
[0038] As used herein, the neighbor image and text pairs 122 are image and text pairs that are selected based on (i) text-to-text similarity between the text in the pairs and the input text 102, (ii) text-to-image similarity between the images in the pairs and the input text 102, or both (i) and (ii).
[0039] For example, the text-to-text similarity can be a TF/IDF similarity or a BM25 similarity, while the text-to-image similarity can be a similarity, e.g., CLIP similarity, computed based on a distance between respective embeddings of the images in the pairs and the input text in a co-embedding space that include both text and image embeddings.
[0040] As illustrated in FIG. 1, the image generation system 100 receives an input text 102 which includes the following text: “Two Chortai are running on the field.” Accordingly, at a given reverse diffusion time step T — 1, the image generation system 100 selects, from the multi-modal knowledge base 120, multiple neighbor image and text pairs 122. Because “Chortai” is mentioned in the input text 102, each neighbor pair 122 selected by the system includes an image of a Chortai, e.g., Chortai image A 122A, Chortai image B 122B, or
Chortai image C 122C, and the text 122D of “Chortai is a breed of dog.”
[0041] In some implementations, the image generation system 100 uses text-to-image similarity to select the neighbor image and text pairs 122. Specifically, the system selects neighbor images from the multi-modal knowledge base 120 based on text-to-image similarities, and in turn, uses the image and text pairs from the multi-modal knowledge base 120 which includes the selected neighbor images as the neighbor image and text pairs 122. [0042] In general, any number of neighbor images that satisfy a text-to-image similarity threshold can be selected. For example, the image generation system 100 can select, as the neighbor images, one or more images from (the one or more datasets within) the multi-modal knowledge base 120 that have the highest text-to-image similarities relative to the input text 102 among the text-to-image similarities of all images stored in the multi-modal knowledge base 120.
[0043] As another example, the image generation system 100 can select, as the neighbor images, one or more images from (the one or more datasets within) the multi-modal knowledge base 120 that each have a text-to-image similarity relative to the input text 102 that is greater than a given value.
[0044] In some other implementations, the image generation system 100 uses text-to-text similarity to select the neighbor image and text pairs 122. Specifically, the system selects neighbor text from the multi-modal knowledge base 120 based on text-to-text similarities, and in turn, uses the image and text pairs from the multi-modal knowledge base 120 which includes the selected neighbor text as the neighbor image and text pairs 122.
[0045] Analogously, any number of neighbor text that satisfy a text-to-text similarity threshold can be selected. For example, the image generation system 100 can select, as the neighbor text, one or more text from (the one or more datasets within) the multi-modal knowledge base 120 that have the highest text-to-text similarities relative to the input text 102 among the text-to-text similarities of all text stored in the multi-modal knowledge base 120. [0046] As another example, the image generation system 100 can select, as the neighbor text, one or more text from (the one or more datasets within) the multi-modal knowledge base 120 that each have a text-to-text similarity relative to the input text 102 that is greater than a given value.
[0047] In yet other implementations, the image generation system 100 uses both text-to- image similarity and text-to-text similarity to select the neighbor image and text pairs 122. Specifically, for each image of text pair stored in the multi-modal knowledge base 120, the system can combine, e.g., by computing a sum or product of, (i) the text-to-image similarity of the image included in the pair relative to the input text 102 and (ii) the text-to-text
similarity of the text included in the pair relative to the input text 102, to generate a combined similarity for the pair, and then select one or more neighbor images and text pairs 122 that satisfy a combined similarity threshold.
[0048] In the example of FIG. 1, a total of three neighbor image and text pairs 122 are selected at the given step. It will be appreciated that, in other examples, more or fewer pairs can be selected. In some cases, the image generation system 100 selects the same, fixed number of neighbor image and text pairs 122 at different reverse diffusion time steps, while in other cases, the image generation system 100 selects varying numbers of neighbor image and text pairs 122 across different reverse diffusion time steps.
[0049] Moreover, in some cases, the same text (e.g., the text of “Chortai is a breed of dog” in the example of FIG. 1) is included all of the three neighbor image and text pairs 122; thus different neighbor pairs include different images but the same text. In other cases, however, different text may be included in the three neighbor image and text pairs 122; thus different neighbor pairs include different images and also different text.
[0050] Performing retrieval-augmented reverse diffusion process is described in more detail below with reference to FIGS. 2-3.
[0051] After the last reverse diffusion time step in the process, the image generation system 100 outputs the updated intermediate representation as the final output image 135. In other words, the final output image 135 is the updated intermediate representation generated in the last step of the multiple reverse diffusion time steps.
[0052] Because the reverse diffusion process was augmented by information (e.g., high-level semantics information, low-level visual detail information, or both) included in the neighbor image and text pairs 122 retrieved from the multi-modal knowledge base 120, the final output image 135 will have improved accuracy in the visual appearances of the objects specified in the input text 102.
[0053] For example, the image generation system 100 can provide the output image 135 for presentation to a user on a user computer, e.g., as a response to the user who submitted the input text 102. As another example, the image generation system 100 can store the output image 135 for later use.
[0054] FIG. 2 is a flow diagram of an example process 200 for updating an intermediate representation of the output image by using a text-to-image model and a multi-modal knowledge base. For convenience, the process 200 will be described as being performed by a system of one or more computers located in one or more locations. For example, a data generation system, e.g., the system used in the data generation system 100 flow depicted in
FIG. 1, appropriately programmed in accordance with this specification, can perform the process 200.
[0055] The example process 200 is described with reference to FIG. 3, which is an example illustration 300 of updating an intermediate representation of the output image.
[0056] The system can perform multiple iterations of the process 200 to generate an output image in response to receiving input text. For example, when the input text includes text that specifies or describes a particular object, the output image will depict the particular object. As another example, when the input text includes text that specifies or describes a particular class of objects from a plurality of object classes, the output image will depict an object that belongs to the particular class. As yet another example, when the input text includes text that specifies the output image should be a next frame that is a prediction of the next video frame in a sequence of video frames already known to the system, the output image will be a frame that shows the same object that has been depicted in the sequence of video frames, e.g., having a continued motion.
[0057] Prior to the first iteration of the process 200, the system initializes a representation of the output image. The initial representation of the output image is the same dimensionality as the final output image but has noisy values.
[0058] For example, the system can initialize the output image, i.e., can generate the initial representation of the output image, by sampling each of one or more intensity values for each pixel in the output image from a corresponding noise distribution, e.g., a Gaussian distribution, or a different noise distribution. That is, the output image includes multiple intensity values and the initial representation of the output image includes the same number of intensity values, with each intensity value being sampled from a corresponding noise distribution.
[0059] The system then generates the final output image by repeatedly, i.e., at each of multiple time steps, performing an iteration of the process 200 to update an intermediate representation of the output image. In other words, the final output image is the updated intermediate representation generated in the last iteration of the process 200. In some situations, the multiple iterations of the process 200 can be collectively referred to as a reverse diffusion process, with one iteration of the process 200 being performed at each reverse diffusion time step during the reverse diffusion process.
[0060] The system processes a model input that includes (i) an intermediate representation xt of the output image for the time step, (ii) the input text cp (or data derived from the input text
cp, e.g., an embedding of the input text generated by a text encoder neural network from processing the input text), and (iii) time step data t defining the time step using a text-to- image model to generate a first feature map for the time step (step 202). For the very first time step, the intermediate representation xt is the initial representation. For any subsequent time step, the intermediate representation xt is the updated intermediate representation that has been generated in the immediately preceding time step.
[0061] In the example of FIG. 3, the text-to-image model has a U-Net architecture, which includes an encoder 310 (a downsampling encoder or “D Stack”) and a decoder 320 (an upsampling decoder or “UStack”). As illustrated, the encoder 310 of the text-to-image model processes the model input to generate the first feature map that is defined by:
[0062] The system selects one or more neighbor image and text pairs from the multi-modal knowledge base based on their similarities to the input text (step 204). Selecting the one or more neighbor images and text pairs from the multi-modal knowledge base may comprise querying the multi-modal knowledge base. The input text may be used as the query. To perform this selection, the system determines, for each image and text pair stored in the multi-modal knowledge, a corresponding similarity of the image and text pair to the input text based on (i) a text-to-text similarity between the input text and the text in the image and text pair, (ii) a text-to-image similarity between the input text and the image in the image and text pair, or both (i) and (ii).
[0063] For example, the text-to-text similarity can be a TF/IDF similarity or a BM25 similarity, and the text-to-image similarity can be a CLIP similarity or a different similarity computed based on distances in an embedding space.
[0064] When a large number of, e.g., one million, ten million, one billion, or more, image and text pairs are stored in the multi-modal knowledge base, however, computation of their similarities to the input text is slow and processor resource intensive. Some implementations of the system thus use an approximate nearest neighbor matching technique, i.e., instead of a brute-force method, to enable faster computation time while retaining a high level of accuracy.
[0065] For example, the system can use search space pruning, search space quantization, or both. As a particular example of quantization technique, the system can use an anisotropic quantization-based MIPS technique descried in more detail at Ruiqi Guo, et al. Accelerating large-scale inference with anisotropic vector quantization. In International Conference on Machine Learning, pp. 3887-3896. PMLR, 2020.
[0066] For each of the one or more neighbor images and text pairs, the system processes (i) the image in the neighbor image and text pair and (ii) the text in the neighbor image and text pair (or data derived from the text, e.g., an embedding of the text generated by a text encoder neural network from processing the text) using the text-to-image model to generate a second feature map for the neighbor image and text pair (step 206). In various implementations, the image in the neighbor image and text pair comprises pixels. Processing the image in the neighbor image and text pair may comprise processing the pixels.
[0067] In the example of FIG. 3, the encoder 310 of the text-to-image model, which generated the first feature map at step 202, also processes the neighbor images and text pairs to generate one or more second feature maps that is defined by:
/,(Cn„ 0) € A'x x Fx d
Where cn represents neighbor images and text pairs, e.g., cn ■= [< image, text >1,- ■ ■ , < image, text > ], which represents the K neighbor images and text pairs (where K is an integer greater than or equal to one), and the time step data is set to null (Z=0).
[0068] It will be appreciated that, in other examples, a different component of the system, e.g,. one or more other encoder neural networks, are used to process the neighbor images and text pairs to generate the second feature map.
[0069] The system applies an attention mechanism over the one or more second feature maps using one or more queries derived from the first feature map for the time step to generate an attended feature map (step 208). That is, the system generates an attended feature map that is defined by:
6 represents the parameters of the text-to-image model.
[0070] For example, the attention mechanism can be a cross-attention mechanism. In crossattention, the system uses the first feature map to generate one or more queries, e.g., by applying a query linear transformation to the first feature map. The system also uses the one or more second feature maps to generate one or more keys and one or more and values, e.g., by applying a key or a value linear transformation to the one or more second feature maps.
Next, the system applies any of a variety of variants of query-key -value (QKV) attention, e.g., a dot product attention function or a scaled dot product attention function, using the one or more queries, the one or more keys, and the one or more values to generate the attended feature map as an output of the attention mechanism.
[0071] The system processes the attended feature map for the time step using the text-to- image model to generate a noise term e for the time step (step 210). In the example of FIG.
3, the decoder 320 of the text-to-image model generate a noise term e that is defined by:
[0072] In some implementations, the system makes use of a guidance when generating the noise term e. For example, the system can use classifier-free guidance that follows an interleaved guidance schedule which alternates between input text guidance and neighbor retrieval guidance to improve both text alignment and object alignment. In this example, the noise term e can be computed by:
[0073] The system generates an updated intermediate representation
[0074] For example, the updated intermediate representation xt- can be computed by using the noise term e to de-noise the intermediate representation xt as follows:
[0075] By repeatedly performing the process 200, the system can update an intermediate representation of the output image to generate the final output image. That is, the process 200 can be performed as part of predicting an output image from input text for which the desired output, i.e., the output image that should be generated by the system from the input text, is not known.
[0076] Some or all steps of the process 200, e.g., steps 202-210, can also be performed as part of processing training inputs derived from a training dataset, i.e., inputs derived from a set of input text and/or images for which the output images that should be generated by the system is known, in order to fine-tune a pre-trained text-to-image model to determine finetuned values for the parameters of the model, i.e., from their pre-trained values.
[0077] Specifically, the system can repeatedly perform steps 202-210 on training inputs selected from an image and text dataset as part of a diffusion model training process to finetune the text-to-image model to optimize a fine-tuning objective function that is appropriate for the retrieval-augmented conditional image generation task that the text-to-image model is configured to perform.
[0078] For example, the fine-tuning objective function can include a time re-weighted square error loss term that trains the text-to-image model 6 on images x0 selected from a set of images to minimize a squared error loss between each image x0 and an estimate of the image x0 generated by the text-to-image model as of a sampled reverse diffusion time step t within the reverse diffusion process:
[0079] During training, the system can incorporate any number of techniques to improve the speed, the effectiveness, or both of the training process. For example, during the training, the text-to-image diffusion model can be configured to make unconditional noise predictions 0 by randomly dropping out the input text, i.e., by setting cp and/or cn to null.
[0080] As another example, some implementations of the text-to-image model can include a sequence (or “cascade”) of a low resolution diffusion model and a high resolution diffusion model, which is configured to generate a high resolution image as the output image conditioned on a low resolution image generated by the lower resolution diffusion model. By making use of a sequence of diffusion models that can each be conditioned on the text input, the system can iteratively up-scale the resolution of the image, ensuring that a high-resolution image can be generated without requiring a single model to generate the image at the desired output resolution directly. In these implementations, the system can train the low resolution diffusion model and the high resolution diffusion model on different training inputs.
[0081] This specification uses the term “configured” in connection with systems and computer program components. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
[0082] Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine- readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
[0083] The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
[0084] A computer program, which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
[0085] In this specification, the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations. Thus, for example, the index database can include multiple collections of data, each of which may be organized and accessed differently.
[0086] Similarly, in this specification the term “engine” is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Generally, an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
[0087] The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
[0088] Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few. [0089] Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
[0090] To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user’s device in response to requests received from the web browser. Also, a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
[0091] Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and
compute-intensive parts of machine learning training or production, i.e., inference, workloads.
[0092] Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework or a JAX framework.
[0093] Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
[0094] The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client. Data generated at the user device, e.g., a result of the user interaction, can be received at the server from the device.
[0095] While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially be claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
[0096] Similarly, while operations are depicted in the drawings and recited in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
[0097] Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
[0098] What is claimed is:
Claims
1. A computer-implemented method comprising: receiving input text; generating, by using a text-to-image model and conditioned on both the input text and image and text pairs selected from a multi-modal knowledge base, an output image, wherein the generating comprises, at each of multiple time steps: processing (i) an intermediate representation of the output image for the time step and (ii) the input text using an encoder of the text-to-image model to generate a first feature map for the time step; selecting one or more neighbor image and text pairs from the multi-modal knowledge base based on their similarities to the input text; for each of the one or more neighbor images and text pairs, processing (i) the image in the neighbor image and text pair and (ii) the text in the neighbor image and text pair using the encoder of the text-to-image model to generate a second feature map for the neighbor image and text pair; applying an attention mechanism over the one or more second feature maps using one or more queries derived from the first feature map for the time step to generate an attended feature map; and generating an updated intermediate representation of the output image for the time step based on using a noise term to de-noise the intermediate representation of the output image, comprising processing the attended feature map for the time step using a decoder of the text-to-image model to generate the noise term.
2. The method of claim 1, wherein: the input text specifies a particular object class; and the output image depicts an object belonging to the particular object class.
3. The method of any one of claims 1-2, wherein generate the first feature map for the time step further comprises processing time step data defining the time step using the encoder of the text-to-image model.
4. The method of any one of claims 1-3, wherein selecting the one or more neighbor image and text pairs from the multi-modal knowledge base based on their similarities to the input text comprises, for each image and text pair: determining a corresponding similarity of the image and text pair to the input text based on (i) a text-to-text similarity between the input text and the text in the image and text pair, (ii) a text-to-image similarity between the input text and the image in the image and text pair, or both (i) and (ii).
5. The method of claim 4, wherein the text-to-text similarity comprises a BM25 similarity.
6. The method of claim 4, wherein the text-to-image similarity comprises a CLIP similarity.
7. The method of any one of claims 1-6, wherein selecting the one or more neighbor image and text pairs from the multi-modal knowledge base comprises using search space pruning and quantization techniques.
8. The method of any one of claims 1-7, wherein applying the attention mechanism over the_one or more second feature maps comprises: using the one or more second feature maps to generate one or more keys; and applying the attention mechanism over the one or more second feature maps generated from the one or more neighbor image and text pairs using the one or more queries and the one or more keys.
9. The method of any one of claims 1-8, wherein the text-to-image image is a text-to- image diffusion model and each time step corresponds to a reverse diffusion time step.
10. The method of claim 9, wherein the text-to-image diffusion model comprises a cascade of a low resolution diffusion model and a high resolution diffusion model, the high resolution diffusion model configured to generate a high resolution image as the output image conditioned on a low resolution image generated by the lower resolution diffusion model.
11. The method of any one of claims 9-10, wherein generating the output image comprises using a classifier-free guidance.
12. The method of any one of claims 9-10, wherein generating the output image comprises using an interleaved guidance schedule of text-enhanced noise predictions and neighbor-enhanced noise predictions.
13. The method of any one of claims 9-12, further comprising training the text-to-image diffusion model on an image and text dataset to determine trained values of parameters of the text-to-image diffusion model based on optimizing a time re-weighted square error loss.
14. The method of claim 13, wherein the training comprises training the text-to-image diffusion model to make unconditional noise predictions by randomly dropping out the input text.
15. A system comprising one or more computers and one or more storage devices storing instructions that are operable, when executed by the one or more computers, to cause the one or more computers to perform the operations of the respective method of any preceding claim.
16. A computer storage medium encoded with instructions that, when executed by one or more computers, cause the one or more computers to perform the operations of the respective method of any preceding claim.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202263410414P | 2022-09-27 | 2022-09-27 | |
US63/410,414 | 2022-09-27 |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2024072749A1 true WO2024072749A1 (en) | 2024-04-04 |
Family
ID=88558595
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2023/033622 WO2024072749A1 (en) | 2022-09-27 | 2023-09-25 | Retrieval augmented text-to-image generation |
Country Status (1)
Country | Link |
---|---|
WO (1) | WO2024072749A1 (en) |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114817673A (en) * | 2022-04-14 | 2022-07-29 | 华侨大学 | Cross-modal retrieval method based on modal relation learning |
-
2023
- 2023-09-25 WO PCT/US2023/033622 patent/WO2024072749A1/en unknown
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114817673A (en) * | 2022-04-14 | 2022-07-29 | 华侨大学 | Cross-modal retrieval method based on modal relation learning |
Non-Patent Citations (6)
Title |
---|
ADITYA RAMESH ET AL.: "Hierarchical textconditional image generation with clip latents", ARXIV PREPRINT ARXIV:2204.06125, 2022 |
CHITWAN SAHARIA ET AL.: "Photorealistic text-to-image diffusion models with deep language understanding", ARXIV PREPRINT ARXIV:2205.11487, 2022 |
FEDERICO A GALATOLO ET AL: "Generating images from caption and vice versa via CLIP-Guided Generative Latent Space Search", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 2 February 2021 (2021-02-02), XP091065824, DOI: 10.5220/0010503701660174 * |
JONATHAN HO ET AL.: "Denoising Diffusion Probabilistic Models", ARXIV:2006.11239, 2020 |
RUIQI GUO ET AL.: "Accelerating large-scale inference with anisotropic vector quantization", INTERNATIONAL CONFERENCE ON MACHINE LEARNING, 2020, pages 3887 - 3896 |
ZIHAO WANG ET AL: "CLIP-GEN: Language-Free Training of a Text-to-Image Generator with CLIP", ARXIV.ORG, CORNELL UNIVERSITY LIBRARY, 201 OLIN LIBRARY CORNELL UNIVERSITY ITHACA, NY 14853, 1 March 2022 (2022-03-01), pages 1 - 15, XP091174927 * |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10817805B2 (en) | Learning data augmentation policies | |
JP7295906B2 (en) | Scene understanding and generation using neural networks | |
US11669744B2 (en) | Regularized neural network architecture search | |
US11380034B2 (en) | Semantically-consistent image style transfer | |
CN109564575A (en) | Classified using machine learning model to image | |
US11797839B2 (en) | Training neural networks using priority queues | |
WO2018093935A1 (en) | Training neural networks using a clustering loss | |
US20200410344A1 (en) | Fast decoding in sequence models using discrete latent variables | |
US20230306258A1 (en) | Training video data generation neural networks using video frame embeddings | |
WO2020182930A1 (en) | Compressed sensing using neural networks | |
US20220215580A1 (en) | Unsupervised learning of object keypoint locations in images through temporal transport or spatio-temporal transport | |
US20230029590A1 (en) | Evaluating output sequences using an auto-regressive language model neural network | |
WO2024072749A1 (en) | Retrieval augmented text-to-image generation | |
US20230244907A1 (en) | Generating sequences of data elements using cross-attention operations | |
WO2024044258A1 (en) | Personalized text-to-image diffusion model | |
WO2022248727A1 (en) | Generating neural network outputs by cross attention of query embeddings over a set of latent embeddings | |
WO2023059737A1 (en) | Self-attention based neural networks for processing network inputs from multiple modalities | |
EP3948679A1 (en) | Energy-based associative memory neural networks | |
JP2023527511A (en) | A Cross-Transformer Neural Network System for Few-Shot Similarity Determination and Classification | |
CN118043860A (en) | Personalized text-to-image diffusion model |