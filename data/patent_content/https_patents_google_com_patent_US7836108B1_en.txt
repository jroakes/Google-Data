US7836108B1 - Clustering by previous representative - Google Patents
Clustering by previous representative Download PDFInfo
- Publication number
- US7836108B1 US7836108B1 US12/059,628 US5962808A US7836108B1 US 7836108 B1 US7836108 B1 US 7836108B1 US 5962808 A US5962808 A US 5962808A US 7836108 B1 US7836108 B1 US 7836108B1
- Authority
- US
- United States
- Prior art keywords
- document
- clusters
- representative
- documents
- current
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
- 238000000034 method Methods 0.000 claims abstract description 91
- 230000008569 process Effects 0.000 claims description 60
- 238000010586 diagram Methods 0.000 description 16
- 241000239290 Araneae Species 0.000 description 10
- 238000004891 communication Methods 0.000 description 5
- 238000012545 processing Methods 0.000 description 5
- 230000008859 change Effects 0.000 description 3
- 230000007246 mechanism Effects 0.000 description 3
- HFHZKZSRXITVMK-UHFFFAOYSA-N oxyphenbutazone Chemical compound O=C1C(CCCC)C(=O)N(C=2C=CC=CC=2)N1C1=CC=C(O)C=C1 HFHZKZSRXITVMK-UHFFFAOYSA-N 0.000 description 3
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000008520 organization Effects 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 230000000593 degrading effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
Definitions
- Crawler-based search engines may employ various algorithms to identify documents on the World Wide Web (“web”) relevant to search terms contained in a user's query.
- a crawler-based search engine will include a crawler, an indexer and a search engine.
- the crawler is a software tool that searches the web for content (e.g., documents).
- the crawler may be provided with a seed list of addresses (e.g., Uniform Resource Locators (URLs) or some other form of Uniform Resource Identifier (URI)) to visit based on one or more search criteria.
- URLs Uniform Resource Locators
- URI Uniform Resource Identifier
- the crawler may visit a document corresponding to an address in the seed list and/or reference a robots.txt file (e.g., on a web site) that provides the crawler with a list of documents that are inaccessible. As the crawler spiders a document, the crawler may, among other things, extract outgoing links to other documents (e.g., hyperlinks) that are associated with the visited document. These outgoing links or addresses may be added to the seed list. The process of visiting documents may be repeated until the crawler decides to stop. The crawler may periodically return to these addresses so that if changes have been made to these documents, the indexer may be updated.
- a robots.txt file e.g., on a web site
- the indexer may create an index of the documents crawled by the crawler. For example, the indexer may catalog and maintain a copy of every document that the crawler discovers and/or a location of or a pointer to the document (e.g., a URL).
- the search engine may sort through the information in the indexer and present the user with the most relevant results in a particular order (e.g., a descending order of relevance).
- indexing duplicate documents wastes resources (e.g., memory, processing, etc.).
- an indexer may select one of these documents to index. However, determining which of the duplicate documents to index can be difficult. Additionally, given the volume of documents that an indexer may be processing, differences in freshness among the documents exists. For example, while the crawler may re-visit documents to determine if changes have been made, the crawler may not re-visit all of the documents at the same time and/or with the same frequency.
- an automated method may include identifying documents in a current clustering operation, assigning the identified documents to one or more clusters, selecting a current representative document for each of the one or more clusters, determining whether the current representative document has been re-crawled, determining a previous representative document with which the current representative document was previously associated in a prior clustering operation, if it is determined that the current representative document has not been re-crawled, determining one of the one or more clusters to which the previous representative document has been assigned in the current clustering operation, combining one of the one or more clusters associated with the current representative document that has not been re-crawled with the one of the one or more clusters associated with the previous representative document into a combined cluster, and storing information regarding the combined cluster.
- a system may include at least one memory and at least one processor.
- the at least one processor may be connected to the at least one memory to store re-crawl information indicating which document of a plurality of documents has been re-crawled, assign the documents to one or more clusters in a current clustering operation, select a current representative document for each of the one or more clusters, determine whether the current representative document has been re-crawled based on the re-crawl information, determine a previous representative document associated with the current representative document, if it is determined that the current representative document has not been re-crawled, combine together one of the one or more clusters associated with the current representative document that has not been re-crawled and one of the one or more clusters to which the previous representative document has been assigned in the current clustering operation, and store information related to each of the one or more clusters.
- a system may include at least one computer-readable medium containing computer-executable instructions, the at least one computer-readable medium may include one or more instructions for clustering documents into one or more clusters in a current clustering process, one or more instructions for selecting a representative for each of the one or more clusters, one or more instructions for determining if the representative has been re-crawled since a prior clustering process, one or more instructions for determining a previous representative associated with the representative in the prior clustering process, if it is determined that the representative has not been re-crawled, one or more instructions for forming a combined cluster that includes a one of the one or more clusters associated with the representative that has not been re-crawled and a one of the one or more clusters to which the previous representative has been assigned in the current clustering process, and one or more instructions for storing information related to the combined cluster.
- a system may include means for clustering documents into one or more clusters in a current clustering operation, means for assigning a measure of quality to each of the documents of the one or more clusters, means for selecting a current representative document for each of the one or more clusters based on the measure of quality, means for determining whether the current representative document has been re-crawled, means for determining a previous representative document associated with the current representative document, if it is determined that the current representative document has not been re-crawled, means for assigning one of the one or more clusters that includes the current representative document that has not been re-crawled to a same cluster of the one or more clusters to which the previous representative document has been assigned in the current clustering operation, and means for storing information related to the one or more clusters.
- a method may include identifying documents in a current clustering operation, assigned the identified documents to one or more clusters, determining whether each of the identified documents has been re-crawled since a prior clustering operation, determining, for one of the identified documents that has not been re-crawled, a representative document with which the one identified document was previously associated in the prior clustering operation, determining one of the one or more clusters to which the representative document has been assigned in the current clustering operation, assigning the one identified document that has not been re-crawled to the one of the one or more clusters to which the representative document has been assigned, and storing information regarding the one of the one or more clusters to which the one identified document is assigned.
- FIGS. 1A and 1B are diagrams illustrating concepts described herein;
- FIG. 2 is a diagram illustrating an exemplary network in which systems and methods described herein may be implemented
- FIG. 3 is a diagram illustrating exemplary components of the crawler/indexer system depicted in FIG. 2 ;
- FIG. 4 is a diagram illustrating exemplary functional components of the crawler/indexer system depicted in FIG. 2 ;
- FIG. 5 is a diagram illustrating exemplary functional components of the crawler engine depicted in FIG. 4 ;
- FIG. 6 is a diagram illustrating exemplary functional components of the indexing engine depicted in FIG. 4 ;
- FIG. 7 is a diagram illustrating an exemplary process for determining clusters and representatives
- FIG. 8 is a diagram illustrating an exemplary set of documents to be clustered.
- FIGS. 9A-9E are diagrams illustrating exemplary index information.
- a “document,” as the term is used herein, is to be broadly interpreted to include any machine-readable and machine-storable work product.
- a document may include, for example, an e-mail, a file, a combination of files, one or more files with embedded links to other files, a news group posting, a blog, a business listing, an electronic version of printed text, a web advertisement, an image, a database record, a dynamically generated document, etc.
- a common form of a “document” is a web page. Web pages often include textual information and may include embedded information (e.g., metadata, images, or hyperlinks) and/or embedded instructions (e.g., JavaScript).
- a “web site,” as the term is used herein, is to be broadly interpreted to include a collection of related documents, such as documents associated with a same host, domain, or organization.
- a collection of related documents may include all or a subset of all of the documents associated with a traditional web site, directory, or sub-directory, or some other collection or set of documents that are related to each other (e.g., on the same host or associated with the same domain or organization).
- quality information is to be broadly interpreted to include any information associated with a document.
- quality information may include link information.
- a “link,” as the term is used herein, is to be broadly interpreted to include any reference to/from a document from/to another document or another part of the same document.
- quality information may include, for example, a date a document is created, a page (or document) rank, anchor text information, an aesthetic of address information (e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.), popularity information, source of content information (e.g., quality of a web site, age of a web site), and/or other kinds of information that may indicate whether a document may be a representative.
- an aesthetic of address information e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.
- popularity information e.g., quality of a web site, age of a web site
- source of content information e.g., quality of
- duplicate documents i.e., documents with the same or substantially the same content
- resources e.g., processing, storage, and/or network resources
- One technique described herein may select one duplicate document, as representative of a cluster of duplicative documents, to index.
- This representative document also referred to as a canonical
- This representative document may then be indexed and/or served as a part of the search results.
- FIG. 1A is a diagram illustrating this concept. As illustrated, a collection of documents 110 may be produced for an indexing system 105 . During a clustering process, documents 110 may be clustered and a representative document may be selected for each cluster.
- documents (A 1 , A 2 , and A 5 ) may be grouped together in cluster 115 , with document (A 1 ) being selected as the representative (as illustrated by a “REP”); documents (A 3 , A 4 , A 7 , A 8 , A 11 , and A 12 ) may be grouped together in cluster 120 , with document (A 7 ) being selected as the representative; and documents (A 6 , A 9 , and A 10 ) may grouped together in cluster 125 , with document (A 10 ) being selected as the representative.
- a crawler 125 may re-visit only a subset of documents 110 during a period between a prior clustering process and a current clustering process. That is, for example, crawler 110 may have re-crawled documents (A 1 , A 2 , A 3 , A 6 , A 7 , A 10 , A 11 , and A 12 ), but may not have re-crawled documents (A 4 , A 5 , A 8 , and A 9 ). In this instance, however, the clustering process may re-cluster all of documents 110 .
- documents (A 1 and A 2 ) may be clustered together in cluster 115 , with document (A 1 ) being selected as the representative; documents (A 3 , A 7 , A 11 , and A 12 ) may be clustered together in cluster 120 , with document (A 7 ) being selected as the representative; and documents (A 6 and A 10 ) may be clustered together in cluster 130 , with document A 10 being selected as the representative.
- the subset of documents 110 that were not re-crawled may form new clusters because the subset of documents 110 that were re-crawled may have changed content.
- document (A 5 ) may form cluster 135 , with document (A 5 ) being selected as the representative
- document (A 9 ) may form cluster 140 , with document (A 9 ) being selected as the representative
- documents (A 4 and A 8 ) may form cluster 144 , with document (A 4 ) being selected as the representative.
- clusters 135 , 140 , and 145 One approach for addressing the additional clusters (i.e., clusters 135 , 140 , and 145 ) is to determine the respective previous representatives associated with the representatives of clusters 135 , 140 , and 145 . That is, the clustering process may determine what previous representative was associated with the representative when, for example, the clustering process was previously run. By applying this rule, documents that have not been re-crawled may not form additional clusters. Rather, each of these documents may remain with a cluster previously determined based on a remembrance of the representative's previous representative. For example, the representative of cluster 135 is document (A 5 ), and its previous representative was document (A 1 ).
- document (A 5 ) may not have been re-crawled, as illustrated in FIG. 1B , document (A 5 ) would not form an additional cluster, but instead may be clustered with document (A 1 ).
- document (A 9 ) may be clustered together with its previous representative (document (A 10 ))
- document (A 4 ) may be clustered together with its previous representative (document (A 7 )).
- Document (A 8 ) may be clustered together with document (A 4 )'s previous representative (document (A 7 )).
- FIG. 2 is a diagram illustrating an exemplary environment 200 in which systems and methods described herein may be implemented.
- environment 200 may include multiple document hosts 210 connected to a crawler/indexer system 220 via a network 230 .
- the number of document hosts 210 , crawler/indexer system 220 , and/or network 230 may be different, as well as the arrangement. Further, one or more of document hosts 210 and crawler indexer system 220 may be the same device.
- Document hosts 210 may include entities that store and/or manage documents.
- An entity may be defined, for example, as a device (e.g., a computer, a personal digital assistant (PDA), a telephone, etc.), a process running on a device (e.g., a program, a thread, a fiber), and/or an object executable by a device.
- a device e.g., a computer, a personal digital assistant (PDA), a telephone, etc.
- PDA personal digital assistant
- process running on a device e.g., a program, a thread, a fiber
- an object executable by a device e.g., a device that stores documents.
- Crawler/indexer system 220 may include an entity that crawls, processes, indexes and/or maintains documents.
- crawler/indexer system 220 may crawl a corpus of documents, index the documents, and/or store information associated with the documents in a repository of documents.
- Crawler/indexer system 220 may be employed as a single entity or as distributed entities.
- Network 230 may include, for example, a local area network (LAN), a wide area network (WAN), a telephone network, such as the Public Switched Telephone Network (PSTN) or a cellular network, an intranet, the Internet, and/or a combination of networks.
- Document hosts 210 and crawler/indexer system 220 may connect to network 230 via wired and/or wireless connections. The connections may either be direct or indirect connections.
- FIG. 3 is a diagram illustrating exemplary components of crawler/indexer system 200 .
- crawler/indexer system 220 may include a bus 310 , a processor 320 , a main memory 330 , a read only memory (ROM) 340 , a storage device 350 , an input device 360 , an output device 370 , and a communication interface 380 .
- the term “component,” as used herein, is intended to be broadly interpreted to include software, hardware, or a combination of hardware and software.
- Bus 310 may include a path that permits communication among the components of crawler/indexer system 220 .
- Processor 320 may include a processor, microprocessor, or processing logic that may interpret and execute instructions.
- Main memory 330 may include a random access memory (RAM) or another type of dynamic storage device that may store information and/or instructions for execution by processor 320 .
- ROM 340 may include a ROM device or another type of static storage device that may store static information and/or instructions for execution by processor 320 .
- Storage device 350 may include a magnetic and/or an optical recording medium and its corresponding drive.
- Input device 360 may include a component that permits an operator to input information to crawler/indexer system 220 , such as a keyboard, a mouse, a pen, voice recognition and/or biometric mechanisms, etc.
- Output device 370 may include a component that outputs information to an operator, including a display, a printer, a speaker, etc.
- Communication interface 380 may include any transceiver-like mechanism that enables crawler/indexer system 220 to communicate with other devices and/or systems.
- communication interface 380 may include components for communicating with another device or system via a network, such as network 230 .
- Crawler/indexer system 220 may perform certain operations, as will be described in detail below, in response to processor 320 executing software instructions contained in a computer-readable medium, such as memory 330 .
- a computer-readable medium may be defined as a physical or a logical memory device.
- the software instructions may be read into memory 330 from another computer-readable medium, such as storage device 350 , or from another device via communication interface 380 .
- the software instructions contained in memory 330 may cause processor 320 to perform processes that will be described later.
- hardwired circuitry may be used in place of or in combination with software instructions to implement processes as described herein.
- implementations as described herein are not limited to any specific combination of hardware circuitry and software.
- FIG. 4 is a diagram illustrating exemplary functional components of crawler/indexer system 220 .
- crawler/indexer system 220 may include a crawler engine 410 , an indexing engine 420 connected to a database 430 . While FIG. 4 illustrates these functional components within crawler/indexer system 220 , in other implementations, crawler engine 410 , indexing engine 420 , and/or database 430 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- Crawler engine 410 may operate from a list of addresses to fetch the corresponding documents from a corpus of documents (e.g., the web). Crawler engine 410 may extract the addresses associated with the outgoing links in the document and add the addresses to the list of addresses to be crawled. Crawler engine 410 may also store information associated with the document, such as all or part of the document, in database 430 .
- Indexing engine 420 may process documents provided by crawler engine 410 .
- indexing engine 420 may create an index of the documents and store the index in database 430 .
- Indexing engine 420 may form clusters of duplicate documents.
- Indexing engine 420 may select a representative document from each cluster.
- indexing engine 420 may utilize previous representative information and whether a document was crawled or not crawled to influence the forming of clusters and the selecting of representatives. As a result, indexing engine 420 may reduce the chance of creating superfluous or unnecessary clusters and, thus, reduce the likelihood that a duplicative document will be indexed and provided as a search result.
- Database 430 may be embodied within a single memory device, within multiple (possibly distributed) memory devices, and/or within a single or multiple storage devices.
- Database 430 may store various types of information, such as a list of addresses used by crawler engine 410 , information associated with documents crawled by crawler engine 410 , and/or an index generated by indexing engine 420 .
- FIG. 5 is a diagram illustrating exemplary functional components of crawler engine 410 .
- crawler engine 410 may include spiders 510 and a content manager 520 . While FIG. 5 illustrates these functional components within crawler/indexer system 220 , in other implementations, spiders 510 and/or content manager 520 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- a spider 510 may crawl a document from a corpus of documents and provide the document to a content manager 520 .
- spider 510 may refer to, for example, a robots.txt file.
- Spiders 510 may operate from a list of addresses provided by content manager 520 .
- Spiders 510 may re-visit documents from the corpus for updates or changing information based on re-visit policies (e.g., refresh policies, politeness policies, load on a given host, rate limits, etc.).
- documents may be re-visited at different times and/or frequencies.
- Content manger 520 may parse a document crawled by a spider 510 to identify outgoing links that the document contains. Content manager 520 may add addresses associated with the outgoing links to a list of addresses that it maintains. Content manger 520 may provide addresses from the list to spiders 510 as instructions for spiders 510 to crawl the corresponding documents. Content manager 520 may also store information associated with the documents (e.g., all or a part of the documents), including quality information, in database 430 .
- FIG. 6 is a diagram illustrating exemplary functional components of indexing engine 420 .
- indexing engine 420 may include a duplicate detector 610 , a representative selector 620 , and an indexer 630 . While FIG. 6 illustrates these functional components within crawler/indexer system 220 , in other implementations, duplicate detector 610 , representative selector 620 , and/or indexer 630 may be implemented partially or wholly within another device or a group of devices, including or excluding, crawler/indexer system 220 .
- Duplicate detector 610 may include one or more clustering algorithms or decision processes for determining whether two documents are duplicates (including substantial duplicates) of each other. These clustering algorithms or decision processes may employ one or more criteria to cluster (i.e., group) documents. In general, the criteria for determining duplicate documents may include content-based clustering and/or predictive clustering.
- Content-based clustering may require analysis of the contents of the documents.
- duplicator detector 610 may compute a checksum or a hash over the content or a portion of the content of the document. In this instance, two documents that share the same checksum value (or checksum ID) may be considered duplicates of each other.
- Redirection is a technique for making a document available under more than one address (e.g., URL).
- a redirect causes a browser to change from a source address to a target address.
- status code redirects e.g., Hypertext Transfer Protocol (HTTP) status codes 301 or 302
- meta refresh redirects e.g., JavaScript redirects.
- JavaScript redirects e.g., JavaScript redirects.
- the target document may correspond to a final target document. That is, a concatenation of redirects may include an intermediary target document, which may not constitute a final target document.
- a document may not be associated with a source document and may not be considered a (final) target document. Rather, in such instances, the document may be considered a content document.
- a final target document and a content document may be distinguished based on a presence or an absence of a source document.
- Predictive-based clustering may identify duplicate documents without analyzing the contents of the documents. For example, predictive-based clustering may involve computing checksums or hashes over documents of a web site, a directory, a subdirectory, or a combination of address parameters, and generating a set of rules that given an address, assigns a predictive identifier (ID) for the document associated with the address. The predictive ID may then be utilized to determine whether two documents are duplicates. Additionally, or alternatively, other sets of rules may be generated for a web site, a directory, a sub-directory, or an address parameter combination. In some cases, these rules may include a list of address prefixes that have been determined as being equivalents of each other.
- An example of this may include a rule that specifies that www.mysite.com and www.planetearth.com/mysite are equivalents of each other.
- address pairs such as www.mysite.com/document and www.planetearth.com/mysite/document, or www.mysite.com/index and www.planetearth.com/mysite/index, etc., may be mapped to the same predictive ID, respectively.
- the rules may specify that a portion of an address is unimportant, and may be ignored for considering whether two addresses are equivalent.
- a rule may specify that a session identifier within an address does not matter.
- duplicate detector 610 may assign each document with the same predictive ID.
- duplicate detector 610 may determine whether the document belongs to an existing cluster or forms a new cluster.
- a cluster may include one document, thousands of documents, or millions of documents, sharing the same key.
- Duplicate detector 610 may store information regarding a cluster to which a document belongs in, for example, database 430 . As will be described in detail below, the information may include whether the document was re-crawled.
- Representative selector 620 may process each cluster in a set of clusters to select a representative document. For example, representative selector 620 may rank the documents in a cluster in some manner to create a ranked list. In one implementation, representative selector 620 may utilize information that reflects a measure of quality of the documents to rank the documents. For example, representative selector 620 may utilize quality information as a measure of quality and/or some other type of information as a measure of quality. Representative selector 620 may store information associated with representatives in, for example, database 430 . The information stored may include quality information.
- Indexer 630 may index one or more top-ranked documents from each of the ranked lists. For example, indexer 630 may take the text or other data of a top-ranked document in a ranked list, extract individual terms or other data from the text of the document, and sort those terms or other data (e.g., alphabetically) in an index. Other techniques for extracting and indexing content, that are more than simple word-level indexing, may also or alternatively be used, including techniques for indexing Extensible Markup Language (XML) data, images, videos, etc. Each entity in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- XML Extensible Markup Language
- FIG. 7 is a flowchart illustrating an exemplary process 700 for determining clusters and representatives.
- process 700 may be performed by indexing engine 420 .
- process 700 may be performed wholly or partially by one or more other components, including or excluding, indexing engine 420 .
- Process 700 will be described as having an initial state where a previous clustering and selection of representatives associated with documents already occurred, and that the clustering information and the representative information was stored in, for example, database 430 .
- process 700 may begin with identifying documents to be clustered (block 710 ).
- indexing engine 420 may refresh index information stored in a repository (e.g., database 430 ) based on refresh policies.
- the refresh policies may be different (e.g., in terms of time and/or frequency) for some documents compared to other documents in database 430 .
- indexing engine 420 may identify documents to be clustered.
- indexing engine 420 may identify documents to be clustered based on a previous clustering process and/or selection of representative process. For discussion and illustration purposes, consider that documents 800 (A 1 , A 2 , . . . , A 6 ) correspond to a subset of the identified documents to be clustered, as illustrated in FIG. 8 .
- FIGS. 9A and 9B illustrate exemplary index information associated with identified documents 800 .
- FIG. 9A illustrates an indexing table 905 that may include a document field 910 ; a key value field 915 ; a re-crawled field 920 ; and a representative (“rep”) field 925 .
- Document field 910 may provide a name and/or an address (e.g., a URL) of a document.
- Key value field 915 may provide a document identifier (e.g., a string), corresponding to the document identified in document field 910 , based on, for example, a clustering process.
- Re-crawled field 920 may indicate whether the document, identified in document field 910 , was re-crawled.
- Rep field 925 may indicate the representative document associated with the document identified in document field 910 . Since this index information may have been associated with documents 800 before block 710 , this index information relates to previous decisions by indexing engine 420 . Additionally, since the index information is exemplary, in practice, the index information may be different. Additionally, or alternatively, in other implementations, the index information may include additional or less data than the data depicted in FIG. 9A .
- re-crawled field 920 may include timestamp information.
- FIG. 9B illustrates an alternative representation of the information provided in FIG. 9A . That is, documents (A 1 , A 2 , and A 3 ) were clustered together having shared the same key value field 915 (i.e., “3”), with document (A 1 ) having been selected as the representative (as illustrated by a “REP”), and documents (A 4 , A 5 , and A 6 ) were clustered together having shared the same key value field 915 (i.e., “5”), with document (A 4 ) having been selected as the representative. Additionally, all of the documents 800 were re-crawled (as illustrated by an “R”).
- documents (A 1 , A 2 , and A 3 ) were clustered together having shared the same key value field 915 (i.e., “3”), with document (A 1 ) having been selected as the representative (as illustrated by a “REP”), and documents (A 4 , A 5 , and A 6 ) were clustered together having shared the
- duplicate detector 610 may cluster documents 800 based on a content-based clustering technique. For example, duplicate detector 610 may determine a checksum ID or a target ID for each document of documents 800 . In another implementation, duplicate detector 610 may cluster documents 800 based on a predictive-based clustering technique. For example, duplicator detector 610 may determine a predictive ID. In still other implementations, duplicate detector 610 may cluster documents 800 based on a combination of a content-based clustering technique and a predictive-based clustering technique, and/or some other type of clustering technique not specifically mentioned herein.
- indexing table 905 may include information regarding previous decisions and information regarding current decisions.
- the previous decisions information corresponds to the information presented in FIG. 9A .
- the current decisions information may include a re-crawled field 930 and a key value field 935 .
- the re-crawled field 930 may indicate that documents (A 1 , A 3 , and A 4 ) were re-crawled, but that documents (A 2 , A 5 , and A 6 ) were not re-crawled.
- key value field 935 may indicate that documents that were re-crawled have, for example, new checksum values compared to their previous key value field 915 .
- the documents that were re-crawled may have changed in content and correspondingly may have a different checksum value compared to a previous checksum value.
- the documents that were not re-crawled have, for example, the same checksum values as before, as indicated by a comparison of key value field 915 and key value field 935 . Since this index information is being generated as process 700 operates, this information is labeled as current decisions. It is to be understood, however, that the mere operation of re-crawling a document does not necessarily mean that key value field 935 will change. In other words, a document's content may not change from one crawling operation to the next. In this case, the document's key value may stay the same.
- a measure of quality may be determined for document(s) in each cluster (block 730 ).
- a measure of quality also referred to herein as a quality score
- the measure of quality for a document may be based on quality information.
- representative selector 620 may determine a quality score for each document in a cluster based on, for example, quality information associated with documents 800 (A 1 , A 2 , . . . , A 6 ).
- quality information may include link information, a date a document is created, a page (or document) rank, anchor text information, an aesthetic of address information (e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.), popularity information, source of content information (e.g., quality of web site, age of web site), and/or other kinds of information that may indicate whether a document may be a good representative.
- an aesthetic of address information e.g., a short and/or a word-based URL may have a higher aesthetic value than a long and/or a non-word based URL containing, for example, symbols, such as ?, !, ⁇ , *, etc.
- popularity information e.g., quality of web site, age of web site
- source of content information e.g., quality of web site, age of web site
- a representative for each cluster may be determined (block 740 ). For example, representative selector 620 may determine the representative for each cluster based on the measure of quality associated with each document. In one implementation, representative selector 620 may select the representative for each cluster based on a measure of quality associated with the document. Additionally, or alternatively, representative selector 620 may select a document having the highest measure of quality in a cluster as the representative document of the cluster.
- FIG. 9D illustrates exemplary indexing information in indexing table 905 .
- indexing table 905 may include representative (“rep”) field 940 .
- Rep field 940 may indicate the representatives determined in block 740 .
- documents A 1 , A 2 , A 4 , and A 5 ) may be selected as representatives.
- Whether the representative has been re-crawled may be determined (block 750 ).
- indexing engine 420 e.g., duplicator detector 610 or representative selector 620
- indexing engine 420 may determine the previous representative associated with the representative that was not re-crawled (block 770 ). For example, indexing engine 420 may refer to rep field 925 for documents (A 2 and A 5 ). In this example, indexing engine 420 may determine that the previous representative associated with document (A 2 ) is document (A 1 ), and that the previous representative associated with document (A 5 ) is document (A 4 ).
- Each document associated with the representative not re-crawled may be clustered based on the representative's previous representative (block 780 ). For example, based on the representative's previous representatives, document (A 2 ) may be clustered (or assigned) with documents (A 1 and A 3 ), and documents (A 5 and A 6 ) may be clustered (or assigned) with document (A 4 ).
- FIG. 9E is a diagram illustrating the exemplary index information in indexing table 905 corresponding to this decision process. As illustrated, documents (A 2 , A 5 , and A 6 ) were clustered to a different cluster. Additionally, key value 935 associated with documents (A 2 , A 5 , and A 6 ) may be modified. For example, key value 935 associated with documents (A 2 , A 5 , and A 6 ) may be modified to a value indicative of the different cluster. Additionally, or alternatively, various types of information may be stored regarding the clusters and/or the associated documents.
- process 700 may end at block 760 and block 790 , additional operations may be performed by crawler/indexer system 220 before and/or after process 700 .
- a representative may be selected from the clusters that were re-clustered.
- a representative may be selected from the cluster including documents (A 1 , A 2 , and A 3 ).
- indexing engine 420 e.g., indexer 630
- indexing may also or alternatively be used, including techniques for indexing XML data, images, videos, etc.
- Each entry in the index may contain a term or other data stored in association with a list of documents in which the term or other data appears and the location within the document where the term or other data appears.
- process 700 may be modified to attain an identical or similar result.
- block ( 750 ) may be altered to determine which documents have not been re-crawled.
- Block ( 770 ) may include determining the previous representative for each of the documents not re-crawled (whether or not those documents are representatives), and block ( 780 ) may include clustering each document not re-crawled based on its previous representative.
- Other modifications, not explicitly described herein, may be implemented. However, regardless of the specific implementation, it will be appreciated that documents that have not been re-crawled may be assigned to a cluster based on previous representative information.
- a clustering process and/or a canonical process relating to a collection of documents, including or excluding documents 800 may precede process 700 . Additionally, or alternatively, it will be appreciated that a clustering process and/or a canonical process relating to a collection of documents, including or excluding documents 800 , may succeed process 700 .
- a clustering process preceding and/or succeeding process 700 may utilize a different type of clustering than the type of clustering utilized during process 700 . For example, if process 700 utilizes a content-based clustering technique, then a clustering process preceding and/or succeeding process 700 may utilize a predictive-based clustering technique.
- the clustering techniques preceding and/or succeeding process 700 may utilize a clustering process identical to a clustering process performed during process 700 , or similar thereto (e.g., a content-based clustering technique (checksum ID) during process 700 and a content-based clustering technique (target ID) preceding and/or succeeding process 700 ).
- a content-based clustering technique checksum ID
- target ID content-based clustering technique
- Implementations described herein may facilitate the clustering of duplicative documents that have not been re-crawled since a prior clustering process.
Abstract
Description
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/059,628 US7836108B1 (en) | 2008-03-31 | 2008-03-31 | Clustering by previous representative |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/059,628 US7836108B1 (en) | 2008-03-31 | 2008-03-31 | Clustering by previous representative |
Publications (1)
Publication Number | Publication Date |
---|---|
US7836108B1 true US7836108B1 (en) | 2010-11-16 |
Family
ID=43065950
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/059,628 Expired - Fee Related US7836108B1 (en) | 2008-03-31 | 2008-03-31 | Clustering by previous representative |
Country Status (1)
Country | Link |
---|---|
US (1) | US7836108B1 (en) |
Cited By (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110022599A1 (en) * | 2009-07-22 | 2011-01-27 | Xerox Corporation | Scalable indexing for layout based document retrieval and ranking |
US20110264628A1 (en) * | 2010-04-26 | 2011-10-27 | Microsoft Corporation | Data collector |
US20110314122A1 (en) * | 2010-06-17 | 2011-12-22 | Microsoft Corporation | Discrepancy detection for web crawling |
US9009156B1 (en) * | 2009-11-10 | 2015-04-14 | Hrl Laboratories, Llc | System for automatic data clustering utilizing bio-inspired computing models |
US20150161267A1 (en) * | 2012-09-12 | 2015-06-11 | Google Inc. | Deduplication in Search Results |
US10331713B1 (en) | 2018-10-03 | 2019-06-25 | Gurbaksh Singh Chahal | User activity analysis using word clouds |
US11250074B2 (en) | 2016-11-30 | 2022-02-15 | Microsoft Technology Licensing, Llc | Auto-generation of key-value clusters to classify implicit app queries and increase coverage for existing classified queries |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7680773B1 (en) * | 2005-03-31 | 2010-03-16 | Google Inc. | System for automatically managing duplicate documents when crawling dynamic documents |
US7725465B2 (en) * | 2006-03-01 | 2010-05-25 | Oracle International Corporation | Document date as a ranking factor for crawling |
-
2008
- 2008-03-31 US US12/059,628 patent/US7836108B1/en not_active Expired - Fee Related
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7680773B1 (en) * | 2005-03-31 | 2010-03-16 | Google Inc. | System for automatically managing duplicate documents when crawling dynamic documents |
US7725465B2 (en) * | 2006-03-01 | 2010-05-25 | Oracle International Corporation | Document date as a ranking factor for crawling |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110022599A1 (en) * | 2009-07-22 | 2011-01-27 | Xerox Corporation | Scalable indexing for layout based document retrieval and ranking |
US7953679B2 (en) * | 2009-07-22 | 2011-05-31 | Xerox Corporation | Scalable indexing for layout based document retrieval and ranking |
US9009156B1 (en) * | 2009-11-10 | 2015-04-14 | Hrl Laboratories, Llc | System for automatic data clustering utilizing bio-inspired computing models |
US20110264628A1 (en) * | 2010-04-26 | 2011-10-27 | Microsoft Corporation | Data collector |
US8949184B2 (en) * | 2010-04-26 | 2015-02-03 | Microsoft Technology Licensing, Llc | Data collector |
US20110314122A1 (en) * | 2010-06-17 | 2011-12-22 | Microsoft Corporation | Discrepancy detection for web crawling |
US8639773B2 (en) * | 2010-06-17 | 2014-01-28 | Microsoft Corporation | Discrepancy detection for web crawling |
US20150161267A1 (en) * | 2012-09-12 | 2015-06-11 | Google Inc. | Deduplication in Search Results |
US10007731B2 (en) * | 2012-09-12 | 2018-06-26 | Google Llc | Deduplication in search results |
US11250074B2 (en) | 2016-11-30 | 2022-02-15 | Microsoft Technology Licensing, Llc | Auto-generation of key-value clusters to classify implicit app queries and increase coverage for existing classified queries |
US10331713B1 (en) | 2018-10-03 | 2019-06-25 | Gurbaksh Singh Chahal | User activity analysis using word clouds |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10275434B1 (en) | Identifying a primary version of a document | |
JP6006267B2 (en) | System and method for narrowing a search using index keys | |
JP5425140B2 (en) | System and method for providing search results | |
US8554759B1 (en) | Selection of documents to place in search index | |
US9305100B2 (en) | Object oriented data and metadata based search | |
US8027974B2 (en) | Method and system for URL autocompletion using ranked results | |
US10162802B1 (en) | Systems and methods for syndicating and hosting customized news content | |
US9081851B2 (en) | Method and system for autocompletion using ranked results | |
JP5268073B2 (en) | Bookmarking and ranking | |
US11361036B2 (en) | Using historical information to improve search across heterogeneous indices | |
US8990193B1 (en) | Method, system, and graphical user interface for improved search result displays via user-specified annotations | |
US7836108B1 (en) | Clustering by previous representative | |
US7024405B2 (en) | Method and apparatus for improved internet searching | |
US8423885B1 (en) | Updating search engine document index based on calculated age of changed portions in a document | |
US8661069B1 (en) | Predictive-based clustering with representative redirect targets | |
WO2005033977A1 (en) | Systems and methods for determining document freshness | |
US8521746B1 (en) | Detection of bounce pad sites | |
US20080281811A1 (en) | Method of Obtaining a Representation of a Text | |
US8595225B1 (en) | Systems and methods for correlating document topicality and popularity | |
Deogun et al. | Structural abstractions of hypertext documents for web-based retrieval | |
JP2006235882A (en) | Method and system for browsing informations | |
US7496600B2 (en) | System and method for accessing web-based search services | |
Lin et al. | Vipas: virtual link powered authority search in the web |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KUPKE, JOACHIM;PROUDFOOT, DAVID MICHAEL;REEL/FRAME:020904/0276Effective date: 20080407 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.) |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20181116 |