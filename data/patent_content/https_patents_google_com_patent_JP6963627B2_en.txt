JP6963627B2 - Neural architecture search for convolutional neural networks - Google Patents
Neural architecture search for convolutional neural networks Download PDFInfo
- Publication number
- JP6963627B2 JP6963627B2 JP2019553406A JP2019553406A JP6963627B2 JP 6963627 B2 JP6963627 B2 JP 6963627B2 JP 2019553406 A JP2019553406 A JP 2019553406A JP 2019553406 A JP2019553406 A JP 2019553406A JP 6963627 B2 JP6963627 B2 JP 6963627B2
- Authority
- JP
- Japan
- Prior art keywords
- neural network
- cell
- output
- convolution
- child
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/04—Inference or reasoning models
- G06N5/046—Forward inferencing; Production systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T7/00—Image analysis
- G06T7/0002—Inspection of images, e.g. flaw detection
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T2207/00—Indexing scheme for image analysis or image enhancement
- G06T2207/20—Special algorithmic details
- G06T2207/20084—Artificial neural networks [ANN]
Description
関連出願の相互参照
本出願は、2017年7月21日に出願された米国仮出願第62/535,806号の優先権を主張するものである。先行出願の開示は、本出願の開示の一部とみなされ、参照により本出願の開示に組み込まれる。
Cross-reference to related applications This application claims the priority of US Provisional Application No. 62 / 535,806 filed on July 21, 2017. The disclosure of the prior application is considered part of the disclosure of this application and is incorporated by reference into the disclosure of this application.
本明細書は、畳み込みニューラルネットワークのためのアーキテクチャを決定することに関する。 The present specification relates to determining an architecture for a convolutional neural network.
ニューラルネットワークは、非線形ユニットの1つまたは複数の層を利用して、受信された入力について出力を予測する機械学習モデルである。一部のニューラルネットワークは、出力層に加えて、1つまたは複数の隠れ層を含む。各隠れ層の出力は、ネットワークにおける次の層、すなわち、次の隠れ層または出力層への入力として用いられる。ネットワークの各層は、パラメータのそれぞれの組の現在値に従って、受信された入力から出力を生成する。 A neural network is a machine learning model that utilizes one or more layers of nonlinear units to predict the output for a received input. Some neural networks include one or more hidden layers in addition to the output layer. The output of each hidden layer is used as an input to the next layer in the network, i.e., the next hidden layer or output layer. Each layer of the network produces an output from the received input according to the current value of each set of parameters.
一部のニューラルネットワークは、再帰型ニューラルネットワークである。再帰型ニューラルネットワークは、入力シーケンスを受信し、この入力シーケンスから出力シーケンスを生成するニューラルネットワークである。詳細には、再帰型ニューラルネットワークは、現在の時間ステップにおいて出力を計算する際に前の時間ステップからネットワークの内部状態の一部または全部を用いることができる。再帰型ニューラルネットワークの一例として長短期(LSTM)ニューラルネットワークがあり、これは1つまたは複数のLSTMメモリブロックを含む。各LSTMメモリブロックは1つまたは複数のセルを含んでよく、このセルは、セルに関する前の状態をセルが記憶することを可能にする入力ゲート、忘却ゲートおよび出力ゲートをそれぞれ含み、これはたとえば、現在のアクティベーションを起こす際に用いるため、またはLSTMニューラルネットワークの他の構成要素に提供されるためである。 Some neural networks are recurrent neural networks. A recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence. In particular, recurrent neural networks can use some or all of the internal state of the network from the previous time step when calculating the output at the current time step. An example of a recurrent neural network is a long short-term (LSTM) neural network, which contains one or more blocks of LSTM memory. Each LSTM memory block may contain one or more cells, which each contain an input gate, an oblivion gate, and an output gate that allow the cell to remember the previous state of the cell, for example. , To be used in invoking the current activation, or to be provided to other components of the LSTM neural network.
本明細書は、1つまたは複数の場所にある1つまたは複数のコンピュータ上にコンピュータプログラムとして実装されるシステムについて記述し、このシステムは、ネットワークアーキテクチャ全体にわたって繰り返される畳み込みセルについてアーキテクチャを決定することによって、畳み込みニューラルネットワークのためのネットワークアーキテクチャを決定する。 This specification describes a system implemented as a computer program on one or more computers in one or more locations, and this system determines the architecture for convolution cells that are repeated throughout the network architecture. Determines the network architecture for the convolutional neural network.
本明細書中に記述される主題は、以下の利点のうちの1つまたは複数を実現するために特定の実施形態において実装され得る。1つまたは複数のタイプの畳み込みセルのアーキテクチャを予測し、次に、畳み込みニューラルネットワーク内に現れるそのタイプの各畳み込みセルに対して同一のアーキテクチャを再利用することによって、システムは、悪影響を及ぼすことなく、いくつかの場合にはさらに結果として生じるアーキテクチャの性能を向上させて、可能なアーキテクチャの検索スペースを効果的に限定する。このようにして、本明細書中に記述されるように可能なアーキテクチャの検索スペースを効果的に限定することによって、システムは、他の技術に比べてはるかに少ない計算リソースを用いながら、アーキテクチャのより大きなスペースを検索する他の技術によって見つけられるアーキテクチャの性能に匹敵し、またはこれを上回るアーキテクチャを決定することができる。加えて、システムはより小さなデータの組上で畳み込みセルのアーキテクチャを効果的に決定し、次に、さまざまな範囲のデータおよび計算基準にわたって同一セルのアーキテクチャを再利用することができる。詳細には、システムは、携帯型および埋込み型のプラットフォーム向けの合理的なアーキテクチャに匹敵するかこれより効率の良い少ない計算量で、結果として生じる学習されたアーキテクチャを効果的に利用して画像処理タスクを実行することができる。 The subject matter described herein may be implemented in a particular embodiment to achieve one or more of the following advantages: By predicting the architecture of one or more types of convolutional cells and then reusing the same architecture for each convolutional cell of that type that appears in the convolutional neural network, the system can be adversely affected. In some cases, it further improves the performance of the resulting architecture, effectively limiting the search space for possible architectures. In this way, by effectively limiting the search space for possible architectures as described herein, the system uses much less computational resources than other technologies, while still using the architecture's It is possible to determine architectures that match or exceed the performance of architectures found by other technologies that search for larger spaces. In addition, the system can effectively determine the architecture of the convolution cell on a smaller set of data and then reuse the architecture of the same cell across different ranges of data and computational criteria. In detail, the system processes images by effectively utilizing the resulting learned architecture with less computational complexity, which is comparable to or more efficient than rational architectures for portable and embedded platforms. Can perform tasks.
本明細書中に記述される主題の1つまたは複数の実施形態の詳細については、添付の図面および以下の記述において説明される。主題の他の特徴、態様および利点については、記述、図面および特許請求の範囲から明らかになるであろう。 Details of one or more embodiments of the subject matter described herein will be described in the accompanying drawings and in the following description. Other features, aspects and advantages of the subject matter will become apparent from the description, drawings and claims.
さまざまな図面における同様の参照番号および表示は、同様の要素を示す。 Similar reference numbers and indications in various drawings indicate similar elements.
本明細書は、1つまたは複数の場所にある1つまたは複数のコンピュータ上にコンピュータプログラムとして実装されるシステムについて記述し、このシステムは、コントローラニューラルネットワークを用いて、ネットワークアーキテクチャ全体にわたって繰り返される第1の畳み込みセルについてアーキテクチャを決定することによって、チャイルド畳み込みニューラルネットワークのためのネットワークアーキテクチャを決定する。このチャイルド畳み込みニューラルネットワーク(CNN)は、画像処理タスクを実行するように構成される。 This specification describes a system implemented as a computer program on one or more computers in one or more locations, which is repeated throughout the network architecture using a controller neural network. Determine the network architecture for a child convolutional neural network by determining the architecture for one convolution cell. This child convolutional neural network (CNN) is configured to perform image processing tasks.
一般に、チャイルドCNNは、入力画像を受信し、かつこの入力画像を処理して入力画像についてネットワーク出力を生成するように構成される。たとえば、所与の画像についてニューラルネットワークによって生成された出力は対象物カテゴリの組のそれぞれのスコアであり得、各スコアは画像がそのカテゴリに属する対象物の画像を含むという推定された可能性を表す。別の例では、ニューラルネットワークによって生成された出力は、入力画像の数値埋込みであり得る。さらに別の例として、ニューラルネットワークによって生成された出力は、特定のタイプの対象物が描写される入力画像中の場所を識別することができる。 Generally, a child CNN is configured to receive an input image and process the input image to generate a network output for the input image. For example, the output generated by a neural network for a given image can be the respective score of a set of object categories, with each score being an estimated possibility that the image contains an image of an object belonging to that category. show. In another example, the output produced by the neural network can be a numerical embedding of the input image. As yet another example, the output produced by a neural network can identify a location in an input image in which a particular type of object is depicted.
図1は、例示的なニューラルアーキテクチャ検索システム100を示す。ニューラルアーキテクチャ検索システム100は、1つまたは複数の場所にある1つまたは複数のコンピュータ上にコンピュータプログラムとして実装されるシステムの一例であり、以下に記述されるシステム、構成要素および技術が実装され得る。 FIG. 1 shows an exemplary neural architecture search system 100. The Neural Architecture Search System 100 is an example of a system implemented as a computer program on one or more computers in one or more locations, and the systems, components and techniques described below may be implemented. ..
ニューラルアーキテクチャ検索システム100は、特定のタスクを実行するために畳み込みニューラルネットワークを訓練するための訓練データ102、および特定のタスク上での畳み込みニューラルネットワークの性能を評価する検証セット104を取得し、かつ、これらの訓練データ102および検証セット104を用いて、画像処理タスクを実行するように構成されたチャイルドCNNのためのネットワークアーキテクチャを決定するシステムである。詳細には、システム100は、コントローラニューラルネットワークを用いて、ネットワークアーキテクチャ全体にわたって繰り返される第1の畳み込みセルについてアーキテクチャを決定することによって、チャイルドCNNのためのネットワークアーキテクチャを決定する。すなわち、チャイルドCNNは第1の畳み込みセルの複数のインスタンスを含む。第1の畳み込みセルのインスタンス内の畳み込み動作のフィルタの数は、チャイルドCNN内のインスタンスの位置に基づいて異なることがある。 The neural architecture search system 100 obtains training data 102 for training a convolutional neural network to perform a specific task, and a validation set 104 for evaluating the performance of the convolutional neural network on a specific task, and , These training data 102 and validation set 104 are used to determine the network architecture for a child CNN configured to perform image processing tasks. In particular, System 100 determines the network architecture for a child CNN by using a controller neural network to determine the architecture for a first convolution cell that repeats throughout the network architecture. That is, the child CNN contains multiple instances of the first convolution cell. The number of filters for convolution behavior within an instance of the first convolution cell can vary based on the location of the instance within the child CNN.
一般に、訓練データ102および検証セット104はいずれも、入力画像の組と、入力画像ごとに、画像処理タスクを実行するためにチャイルドCNNによって生成されるべきそれぞれの対象出力とを含む。たとえば、より多くの訓練データの組は、訓練データ102および検証セット104を生成するためにランダムに区分されていることがある。 In general, both the training data 102 and the validation set 104 include a set of input images and, for each input image, the respective target output that should be generated by the child CNN to perform the image processing task. For example, more sets of training data may be randomly partitioned to generate training data 102 and validation set 104.
システム100は、さまざまな方法のうちの任意の方法で訓練データ102および検証セット104を受信することができる。例として、システム100は、たとえばシステム100によって利用可能となるアプリケーションプログラミングインターフェース(API)を用いる等、データ通信ネットワーク上のシステムのリモートユーザからのアップロードとして訓練データを受信し、このアップロードされたデータを訓練データ102と検証セット104とにランダムに分割することができる。別の例を挙げると、システム100は、システム100によって既に保持されているどのデータが畳み込みニューラルネットワークを訓練するのに用いられるべきかを指定するユーザからの入力を受信し、次に、この指定されたデータを訓練データ102と検証セット104とに分割することができる。 System 100 can receive training data 102 and validation set 104 in any of a variety of ways. As an example, the system 100 receives training data as an upload from a remote user of the system on a data communication network, for example using an application programming interface (API) made available by the system 100, and uses this uploaded data. It can be randomly divided into training data 102 and validation set 104. To give another example, system 100 receives input from the user that specifies which data already held by system 100 should be used to train the convolutional neural network, and then this specification. The resulting data can be divided into training data 102 and validation set 104.
図1に示されるように、ニューラルアーキテクチャ検索システム100は、コントローラニューラルネットワーク110、訓練エンジン120およびコントローラパラメータ更新エンジン130を含む。
As shown in FIG. 1, the neural architecture search system 100 includes a controller
コントローラニューラルネットワーク110は、本明細書において「コントローラパラメータ」と呼ばれるパラメータを有するニューラルネットワークである。詳細には、コントローラニューラルネットワークは、1つまたは複数の再帰型ニューラルネットワーク層および1つまたは複数の出力層を含む再帰型ニューラルネットワークである。出力層は、ソフトマックスニューラルネットワーク層であってよい。コントローラニューラルネットワークの例示的なアーキテクチャについては、図2Bを参照して、以下でより詳細に記述される。
The controller
コントローラニューラルネットワーク110は、コントローラパラメータに従って出力シーケンスのバッチを生成するように構成される。コントローラニューラルネットワーク110によって生成された各出力シーケンスは、第1の畳み込みセルについて、また、任意選択的にチャイルド畳み込みニューラルネットワーク全体でも繰り返される1つまたは複数の他の畳み込みセルについて、それぞれ可能なアーキテクチャを定める。第1の畳み込みセルは、セル入力を受信し、かつセル出力を生成するように構成される。このセル出力は、たとえば同じ高さ、同じ幅、同じ深さである等、セル入力と同じ大きさであってよい。たとえば、第1の畳み込みセルは、入力として特徴マップを受信し、この入力特徴マップと同じ大きさの出力特徴マップを生成することができる。第1の畳み込みセルはB個の動作ブロックのシーケンスを含み、ここで、Bは所定の正の整数である。たとえば、Bは3、5または10であり得る。第1の畳み込みセル内の各動作ブロックは、1つまたは複数の各入力隠れ状態を受信し、各出力隠れ状態を生成する。動作ブロックの例示的なアーキテクチャについては、図2Aを参照して、以下でより詳細に記述される。
The controller
各出力シーケンスは複数の時間ステップのそれぞれにおいて各出力を含み、出力シーケンス中のそれぞれの時間ステップは第1の畳み込みセルのアーキテクチャの異なるハイパーパラメータに対応する。それゆえ、各出力シーケンスは、それぞれの時間ステップにおいて、対応するハイパーパラメータの各値を含む。集合的に、所与の出力シーケンスにおけるハイパーパラメータの値は、第1の畳み込みセルについてアーキテクチャを定める。一般に、ハイパーパラメータは、第1の畳み込みセルによって実行される動作に影響を及ぼす設定である。第1の畳み込みセルのハイパーパラメータは、第1の畳み込みセルの複数のインスタンスを有するチャイルドCNNの訓練の開始より前に設定される。これらのハイパーパラメータは、チャイルドCNNの訓練の間は学習されず、すなわち、これらのハイパーパラメータは、チャイルドCNNの訓練の間は変化しない。出力シーケンスおよび可能なハイパーパラメータは、図2A、図2Bおよび図3を参照して、以下でより詳細に考察される。 Each output sequence contains each output in each of the plurality of time steps, and each time step in the output sequence corresponds to different hyperparameters of the architecture of the first convolution cell. Therefore, each output sequence contains each value of the corresponding hyperparameter at each time step. Collectively, the values of hyperparameters in a given output sequence define the architecture for the first convolution cell. In general, hyperparameters are settings that affect the actions performed by the first convolution cell. The hyperparameters of the first convolution cell are set prior to the start of training for a child CNN with multiple instances of the first convolution cell. These hyperparameters are not learned during child CNN training, i.e., these hyperparameters do not change during child CNN training. The output sequences and possible hyperparameters are discussed in more detail below with reference to FIGS. 2A, 2B and 3.
いくつかの実装形態において、バッチ内の各出力シーケンスは、第2のセル入力を受信し、かつ、この第2のセル入力から、高さがより小さい、幅がより小さい、またはこれら両方がより小さい第2のセル出力を生成するように構成された第2の畳み込みセルについてアーキテクチャをさらに定める。たとえば、第2の畳み込みセルは、入力として特徴マップを受信し、特徴マップの高さおよび幅を2分の1に減じた出力特徴マップを生成することができる。第1の畳み込みセルと同様に、第2の畳み込みセルは動作ブロックのシーケンスを含み、ここで、第2の畳み込みセル内の動作ブロックの数は所定の正の整数である。第2の畳み込みセルは、第1の畳み込みセルと同数の動作ブロック(すなわちB個のブロック)を有することができる。第2の畳み込みセル内の各動作ブロックは、1つまたは複数の各入力隠れ状態を受信し、各出力隠れ状態を生成する。これらの実装形態では、出力シーケンスごとのチャイルドCNNのインスタンスはまた、出力シーケンスによって定められたアーキテクチャを有する第2の畳み込みセルの複数のインスタンスを含む。たとえば、チャイルドCNNのインスタンスは、(i)第1の畳み込みセルの3つのインスタンス、および(ii)第2の畳み込みセルの2つまたは3つのインスタンスを含んでよい。 In some implementations, each output sequence in a batch receives a second cell input, and from this second cell input it is less tall, less wide, or both. Further define the architecture for the second convolution cell configured to produce a smaller second cell output. For example, the second convolution cell can receive a feature map as input and generate an output feature map with the height and width of the feature map reduced by half. Like the first convolution cell, the second convolution cell contains a sequence of motion blocks, where the number of motion blocks in the second convolution cell is a predetermined positive integer. The second convolution cell can have as many motion blocks (ie, B blocks) as the first convolution cell. Each action block in the second convolution cell receives each input hidden state and produces each output hidden state. In these implementations, an instance of a child CNN per output sequence also includes multiple instances of a second convolution cell with the architecture defined by the output sequence. For example, an instance of a child CNN may contain (i) three instances of the first convolution cell and (ii) two or three instances of the second convolution cell.
これらの実装形態において、各出力シーケンスは複数の時間ステップのそれぞれにおいて各出力を含み、出力シーケンス中のそれぞれの時間ステップは第1の畳み込みセルおよび第2の畳み込みセルのアーキテクチャの異なるハイパーパラメータに対応する。それゆえ、各出力シーケンスは、それぞれの時間ステップにおいて、対応するハイパーパラメータの各値を含む。集合的に、所与の出力シーケンスにおけるハイパーパラメータの値は、第1の畳み込みセルおよび第2の畳み込みセルについてアーキテクチャを定める。一般に、ハイパーパラメータは、第1の畳み込みセルまたは第2の畳み込みセルによって実行される動作に影響を及ぼす設定である。第1の畳み込みセルおよび第2の畳み込みセルのハイパーパラメータは、第1の畳み込みセルの複数のインスタンスおよび第2の畳み込みセルの複数のインスタンスを有するチャイルドCNNの訓練の開始より前に設定される。これらのハイパーパラメータは、チャイルドCNNの訓練の間は学習されず、すなわち、これらのハイパーパラメータは、チャイルドCNNの訓練の間は変化しない。 In these implementations, each output sequence contains each output in each of multiple time steps, and each time step in the output sequence corresponds to different hyperparameters of the architecture of the first and second convolution cells. do. Therefore, each output sequence contains each value of the corresponding hyperparameter at each time step. Collectively, the values of hyperparameters in a given output sequence define the architecture for the first convolution cell and the second convolution cell. In general, hyperparameters are settings that affect the actions performed by the first or second convolution cell. The hyperparameters of the first convolutional cell and the second convolutional cell are set prior to the start of training for a child CNN with multiple instances of the first convolutional cell and multiple instances of the second convolutional cell. These hyperparameters are not learned during child CNN training, i.e., these hyperparameters do not change during child CNN training.
一般に、システム100は、コントローラニューラルネットワーク110を訓練することによって第1の畳み込みセルについてアーキテクチャを決定して、コントローラパラメータの値を調整する。
In general, the system 100 determines the architecture for the first convolution cell by training the controller
詳細には、訓練プロシージャの反復の間、システム100は、コントローラパラメータの現在値に従って、コントローラニューラルネットワーク110を用いて出力シーケンスのバッチ112を生成する。
Specifically, during the iteration of the training procedure, the system 100 generates a batch 112 of output sequences using the controller
このバッチ112内の出力シーケンスごとに、訓練エンジン120は、出力シーケンスによって定められたアーキテクチャを有する第1の畳み込みセルの複数のインスタンスを含むチャイルドCNNのインスタンスを生成する。各インスタンスは、同一の有向グラフ内で結合される同数の構成要素を含む。詳細には、各インスタンスは、有向グラフ内の所定の位置において第1のセルの同数のインスタンスを含む。しかしながら、第1のセルのアーキテクチャは、異なるインスタンス間で異なる。出力シーケンスが第2の畳み込みセルについてのアーキテクチャも定めるとき、各インスタンスはまた、グラフ内の所定の位置において複数の第2の畳み込みセルを含む。
For each output sequence in this batch 112, the
たとえば、チャイルドCNNのインスタンスは、その次に第2の畳み込みセル、N個の第1の畳み込みセル、第2の畳み込みセル、そしてN個の第1の畳み込みセルと続くN個の第1の畳み込みセルを含むことができる。 For example, an instance of a child CNN is then a second convolution cell, N first convolution cells, a second convolution cell, and N first convolution cells followed by N first convolution cells. Can include cells.
別の例では、チャイルドCNNのインスタンスは、その次にN個の第1の畳み込みセル、第2の畳み込みセル、N個の第1の畳み込みセル、第2の畳み込みセル、そしてN個の第1の畳み込みセルと続く1つまたは複数の第2の畳み込みセルを含むことができる。Nは2以上の整数である。 In another example, an instance of a child CNN would then have N first convolution cells, a second convolution cell, N first convolution cells, a second convolution cell, and N first convolution cells. Can include a convolution cell followed by one or more second convolution cells. N is an integer greater than or equal to 2.
各インスタンスはまた、有向グラフ内のさまざまな所定の位置において、固定アーキテクチャを備え、かつ出力シーケンスによって定められない他の構成要素、すなわち、出力層および/または1つまたは複数の他のタイプの層を含んでよい。 Each instance also has other components that have a fixed architecture and are not defined by the output sequence, i.e. the output layer and / or one or more other types of layers, at various predetermined locations in the directed graph. May include.
訓練エンジン120は、チャイルドCNNのインスタンスを訓練して、すなわち訓練データ102上でインスタンスを訓練することによって、画像処理タスクを実行する。訓練エンジン120は、画像処理タスク上でのチャイルドCNNの訓練されたインスタンスの性能を評価して(すなわち、検証セット104上で訓練されたインスタンスの性能を評価することによって)、チャイルドCNNの訓練されたインスタンスに関して性能測定基準を決定する。
The
コントローラパラメータ更新エンジン130は次に、チャイルドCNNの訓練されたインスタンスに関する性能測定基準を用いて、コントローラニューラルネットワーク110のコントローラパラメータの現在値を調整する。コントローラパラメータの現在値は、画像処理タスク上でコントローラニューラルネットワーク110によって生成された出力シーケンスによって定められたアーキテクチャの期待性能を向上させるために調整される。訓練されたインスタンスの性能を評価するステップおよびコントローラパラメータの現在値を更新するステップは、図3を参照して、以下でより詳細に記述される。
The controller parameter update engine 130 then adjusts the current values of the controller parameters of the controller
システムは、出力シーケンスのバッチの生成およびコントローラパラメータの値の調整を上記の方法で繰り返し行うことができる。 The system can iteratively generate batches of output sequences and adjust the values of controller parameters as described above.
この方法でコントローラパラメータの値を繰り返し更新することによって、システム100は、コントローラニューラルネットワーク110を訓練して、画像処理タスク上で向上した性能を備えるチャイルドニューラルネットワークをもたらす出力シーケンスを生成することができ、これはすなわち、コントローラニューラルネットワーク110によって提案されたアーキテクチャの検証セット104上での期待精度を最大限にすることである。
By repeatedly updating the values of the controller parameters in this way, the system 100 can train the controller
一旦コントローラパラメータの訓練された値が決定されると、すなわち一旦コントローラニューラルネットワーク110の訓練がある終了基準を満たすと、システムは、第1の畳み込みセル(およびコントローラニューラルネットワークにより生成された出力シーケンスによって定められた任意の他の畳み込みセル)について最終的なアーキテクチャを決定する。たとえば、システム100は、コントローラパラメータの訓練された値に従って最終的な出力シーケンスを生成し、この最終的な出力シーケンスによって定められたアーキテクチャを第1の畳み込みセルおよび任意の他の畳み込みセルについての最終的なアーキテクチャとして用いることができる。別の例を挙げると、システム100は、訓練の間検証セット104上で最良の性能を発揮したチャイルドCNNをもたらした出力シーケンスを選択し、この出力シーケンスによって定められたアーキテクチャを第1の畳み込みセルおよび任意の他の畳み込みセルの最終的なアーキテクチャとして用いることができる。
Once the trained values of the controller parameters have been determined, i.e. once the controller
ニューラルアーキテクチャ検索システム100は次に、第1の畳み込みセル(および出力シーケンスによって定められた任意の他の畳み込みセル)を含む畳み込みニューラルネットワークのアーキテクチャを指定するアーキテクチャデータ150を出力することができる。たとえば、この出力されたアーキテクチャデータ150は、第1の畳み込みセルおよび任意の他の畳み込みセルの一部である動作ブロック、この動作ブロック間の接続性、この動作ブロックによって実行される動作、およびセル間の接続性を指定するデータを含む。たとえば、ニューラルアーキテクチャ検索システム100は、訓練データを提示したユーザに対してアーキテクチャデータ150を出力することができる。 The neural architecture search system 100 can then output architecture data 150 that specifies the architecture of the convolutional neural network, including the first convolutional cell (and any other convolutional cell defined by the output sequence). For example, this output architecture data 150 is a motion block that is part of a first convolution cell and any other convolution cell, connectivity between the motion blocks, actions performed by this motion block, and cells. Contains data that specifies connectivity between. For example, the neural architecture search system 100 can output the architecture data 150 to the user who presented the training data.
いくつかの実装形態において、アーキテクチャデータ150を出力する代わりに、またはこれに加えて、システム100は、たとえば、最初から、または畳み込みセルの複数のインスタンスを有するチャイルドCNNのインスタンスの訓練の結果として生成されたパラメータ値を微調整する等、決定された畳み込みセルの複数のインスタンスを有するチャイルドCNNのインスタンスを訓練し、次に、たとえばシステムによって提供されるAPIを介する等して、訓練されたチャイルドCNNを用いてユーザによって受信されたリクエストを処理する。換言すれば、システム100は、処理されるべき入力を受信し、訓練されたチャイルドCNNを用いてこの入力を処理し、訓練されたチャイルドCNNによって生成された出力または受信された入力に応答して生成された出力から派生したデータを提供することができる。 In some implementations, instead of or in addition to outputting the architecture data 150, the system 100 is generated, for example, from the beginning or as a result of training an instance of a child CNN with multiple instances of a convolution cell. Train an instance of a child CNN that has multiple instances of a determined convolution cell, such as fine-tuning the parameter values, and then train the child CNN, for example via an API provided by the system. Is used to process requests received by the user. In other words, system 100 receives the input to be processed, processes this input with the trained child CNN, and responds to the output or received input generated by the trained child CNN. Data derived from the generated output can be provided.
訓練後、システムは、コントローラパラメータの調整された値を用いて、第1の畳み込みセルおよび/または第2の畳み込みセルについてアーキテクチャを生成することができる。いくつかの場合には、システムは次に、チャイルドCNNのインスタンスより少ない第1の畳み込みセルのインスタンスおよび/またはチャイルドCNNのインスタンスより少ない第2の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークの計算効率の良いアーキテクチャを生成することができ、ここで、第1の畳み込みセル(および/または第2の畳み込みセル)のインスタンスは生成されたアーキテクチャを有する。いくつかの他の場合には、システムは、より複雑な画像処理タスクにおいて用いるために、チャイルドCNNのインスタンスより多い第1の畳み込みセルのインスタンスおよび/またはチャイルドCNNのインスタンスより多い第2の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークのより大きなアーキテクチャを生成することができ、ここで、第1の畳み込みセル(および/または第2の畳み込みセル)のインスタンスは生成されたアーキテクチャを有する。 After training, the system can use the adjusted values of the controller parameters to generate an architecture for the first convolution cell and / or the second convolution cell. In some cases, the system then computes the computational efficiency of a convolutional neural network that contains fewer instances of the first convolutional cell than instances of the child CNN and / or instances of the second convolutional cell less than the instances of the child CNN. A good architecture can be generated, where the instance of the first convolutional cell (and / or the second convolutional cell) has the generated architecture. In some other cases, the system has more instances of the first convolutional cell and / or more instances of the child CNN than instances of the child CNN for use in more complex image processing tasks. A larger architecture of the convolutional neural network containing an instance of can be generated, where the instance of the first convolutional cell (and / or the second convolutional cell) has the generated architecture.
図2Aは、第1の畳み込みセルの例示的な動作ブロック200を示す。
FIG. 2A shows an
動作ブロック200は、第1の動作206を動作ブロックに対する第1の入力隠れ状態202に適用して第1の出力を生成するように構成される。動作ブロック200は、第2の動作208を動作ブロックに対する第2の入力隠れ状態204に適用して第2の出力を生成するように構成される。動作ブロック200は次に、組合せ動作210を第1の出力および第2の出力に適用して動作ブロックについて出力隠れ状態212を生成するように構成される。第1の入力隠れ状態202、第2の入力隠れ状態204、第1の動作206、第2の動作208および組合せ動作210は、図2Bを参照して以下で詳細に記述されるように、コントローラニューラルネットワークにより生成された出力シーケンスによって定められ得る。第1の畳み込みセルは、複数の、すなわち全部でB個の順次配列された動作ブロックを有することができ、これら複数の動作ブロックそれぞれのハイパーパラメータは出力シーケンスによって定められている。
The
図2Bは、出力シーケンスを生成するコントローラニューラルネットワーク110の一例を示す図250である。
FIG. 2B is FIG. 250 showing an example of a controller
コントローラニューラルネットワーク110は、B個の動作ブロックを含む第1の畳み込みセルについて可能なアーキテクチャを予測するように構成される。したがって、第1の畳み込みセルについてのコントローラニューラルネットワーク110の予測はB個のグループに分類され得、各グループは、それぞれの動作ブロックを決定するためにコントローラニューラルネットワーク110によって実行される所定の数の予測ステップを有する。このことは、コントローラニューラルネットワーク110によって実行される予測ステップの総数が5×Bステップであることを意味する。
The controller
図250は、出力シーケンスを生成する間の、それぞれt、…、tn+4である5つの時間ステップにおいてコントローラニューラルネットワーク110によって実行される5つの例示的な予測ステップを表す。コントローラニューラルネットワーク110は、上記5つの予測ステップを、第1の畳み込みセル内のB個の動作ブロックに対応するB回繰り返す。以下でより詳細に記述されるように、5つの時間ステップt、…、tn+4のそれぞれは、チャイルドCNNのアーキテクチャの異なるハイパーパラメータに対応する。
FIG. 250 represents five exemplary predictive steps performed by the controller
一般に、ハイパーパラメータは、第1の畳み込みセルによって実行される動作に影響を及ぼす設定である。たとえば、B個の動作ブロックのシーケンスを含む第1の畳み込みセルのアーキテクチャを予測するために、コントローラニューラルネットワーク110は、B組のハイパーパラメータに関する値を含む出力シーケンスを生成する。ハイパーパラメータの各組は、B個の動作ブロックの1つに対応する。たとえば、図2Aの動作ブロック200に対応するハイパーパラメータの組は、次のハイパーパラメータを含む。すなわち、第1の入力隠れ状態としてどの隠れ状態が用いられるかを表す第1のハイパーパラメータ、第2の入力隠れ状態としてどの隠れ状態が用いられるかを表す第2のハイパーパラメータ、第1の動作としてどの動作が用いられるかを表す第3のハイパーパラメータ、第2の動作としてどの動作が用いられるかを表す第4のハイパーパラメータ、および第1の動作の出力と第2の動作の出力とを組み合せるための組合せ動作としてどの動作が用いられるかを表す第5のハイパーパラメータである。
In general, hyperparameters are settings that affect the actions performed by the first convolution cell. For example, to predict the architecture of the first convolution cell containing a sequence of B motion blocks, the controller
コントローラニューラルネットワーク110は、たとえば層224等1つまたは複数の再帰型ニューラルネットワーク層を含む再帰型ニューラルネットワークであり、この層は、時間ステップごとに所与の出力シーケンス中の先行する時間ステップに対応するハイパーパラメータの値を入力として受信し、かつ、この入力を処理して再帰型ニューラルネットワークの現在の隠れ状態を更新するように構成される。たとえば、コントローラニューラルネットワーク110の再帰層は長短期メモリ(LSTM)層またはGRU(gated recurrent unit)層であってよい。図2Bの例では、時間ステップtnにおいて、層224は先行する時間ステップtn-1からハイパーパラメータの値を入力として受信し、層の隠れ状態を時間ステップtn-1から更新して、更新された隠れ状態225を出力として生成する。
The controller
コントローラニューラルネットワーク110はまた、出力シーケンス中の時間ステップごとにそれぞれの出力層を含み、たとえば、時間ステップtn、tn+1、tn+2、tn+3、tn+4について出力層214、216、218、220、222をそれぞれ含む。出力層のそれぞれは、時間ステップにおいて更新された隠れ状態を含む出力層入力を受信し、かつ、時間ステップにおけるハイパーパラメータの可能な値上でスコア分布を定める時間ステップに関する出力を生成するように構成される。たとえば、各出力層はまず、出力層入力を対応するハイパーパラメータに関する可能な値の数に適した次元数に投影し、次に投影した出力層入力にソフトマックスを適用して、時間ステップにおけるハイパーパラメータに関する複数の可能な値のそれぞれにそれぞれのスコアを生成することができる。
The controller
出力シーケンス中の所与の時間ステップについてハイパーパラメータの値を生成するために、システム100は、コントローラニューラルネットワーク110への入力として出力シーケンス中の先行する時間ステップにおけるハイパーパラメータの値を提供し、コントローラニューラルネットワーク110は、時間ステップにおけるハイパーパラメータの可能な値上でスコア分布を定める時間ステップに関する出力を生成する。出力シーケンス中の最初の時間ステップについては、先行する時間ステップがないため、システム100は代わりに所定のプレースホルダ入力を提供することができる。システム100は次に、スコア分布に従って可能な値からサンプリングして、出力シーケンス中の時間ステップにおけるハイパーパラメータの値を決定する。所与のハイパーパラメータが取ることのできる可能な値は、チャイルドCNNの訓練より前に固定され、可能な値の数はハイパーパラメータの違いによって異なっていてよい。
To generate hyperparameter values for a given time step in the output sequence, system 100 provides the hyperparameter values in the preceding time step in the output sequence as input to the controller
図250において図示されるように、時間ステップtnに関する出力層214は、隠れ状態225を含む入力を受信し、かつ、動作ブロック(たとえば、図2Aの動作ブロック200)について第1の入力隠れ状態としてどの隠れ状態が用いられるかを表すハイパーパラメータに関して複数の可能な値のそれぞれにそれぞれのスコアを生成するように構成される。動作ブロックについての第1の入力隠れ状態に関するソースは、(i)チャイルドCNNにおける畳み込みセルのシーケンス中の1つまたは複数の先行する畳み込みセルによって生成された出力、(ii)チャイルドCNNの入力画像、または(iii)第1の畳み込みセル内の動作ブロックのシーケンス中の先行する動作ブロックの出力隠れ状態、のうちの1つまたは複数から選択される。
As illustrated in FIG. 250, the output layer 214 with respect to time step t n receives the input including the hidden
時間ステップtn+1に関する出力層216は、隠れ状態227を含む入力を受信し、かつ、動作ブロックについて第2の入力隠れ状態としてどの隠れ状態が用いられるかを表すハイパーパラメータに関して複数の可能な値のそれぞれにそれぞれのスコアを生成するように構成される。動作ブロックについての第2の入力隠れ状態に関するソースは、(i)畳み込みセルのシーケンス中の1つまたは複数の先行する畳み込みセルによって生成された出力、(ii)入力画像、または(iii)畳み込みセル内の動作ブロックのシーケンス中の先行する動作ブロックの出力隠れ状態、のうちの1つまたは複数から選択される。
時間ステップtn+2に関する出力層218は、隠れ状態229を含む入力を受信し、かつ、第1の入力隠れ状態に適用されるべき第1の動作に関する動作タイプを表すハイパーパラメータに関して複数の可能な値のそれぞれにそれぞれのスコアを生成するように構成される。第1の動作は、畳み込みニューラルネットワーク動作の所定の組から選択されてよい。たとえば、畳み込みニューラルネットワーク動作の所定の組は次の動作、すなわち、アイデンティティ(identity)、1×7次に7×1の畳み込み(1×7 then 7×1 convolution)、3×3の平均プーリング(3×3 average pooling)、5×5の最大プーリング(5×5 max pooling)、1×1の畳み込み(1×1 convolution)、3×3の深さ方向に分離可能な畳み込み(3×3 depthwise-separable convolution)、7×7の深さ方向に分離可能な畳み込み(7×7 depthwise-separable convolution)、1×3次に3×1の畳み込み(1×3 then 3×1 convolution)、3×3の拡張畳み込み(3×3 dilated convolution)、3×3の最大プーリング(3×3 max pooling)、7×7の最大プーリング(7×7 max pooling)、3×3の畳み込み(3×3 convolution)、および5×5の深さ方向に分離可能な畳み込み(5×5 depthwise-separable convolution)、のうちの1つまたは複数を含んでよい。
時間ステップtn+3に関する出力層220は、隠れ状態231を含む入力を受信し、かつ、第2の入力隠れ状態に適用されるべき第2の動作に関する動作タイプを表すハイパーパラメータに関して複数の可能な値のそれぞれにそれぞれのスコアを生成するように構成される。第2の動作は、畳み込みニューラルネットワーク動作の上記所定の組から選択されてよい。
時間ステップtn+4に関する出力層222は、隠れ状態233を含む入力を受信し、かつ、第1の動作の出力と第2の動作の出力とを組み合せて動作ブロックについて新たな隠れ状態を生成するために用いられる組合せ動作に関する動作タイプを表すハイパーパラメータに関して複数の可能な値のそれぞれにそれぞれのスコアを生成するように構成される。組合せ動作は、組合せ動作の所定の組から選択されてよい。たとえば、組合せ動作の所定の組は、(i)2つの出力間の要素ごとの加算、および(ii)フィルタの大きさに沿った2つの出力間の連結、を含んでよい。
The
第1の畳み込みセルは、第1の畳み込みセル内のブロックの任意のブロックへの入力として選択されない第1の畳み込みセル内のブロックの出力隠れ状態を組み合せることによって、セル入力に関するセル出力を生成するように構成される。たとえば、第1の畳み込みセルは、すべての使用されていない出力隠れ状態を深さ方向に1つに連結させて、最終的なセル出力を生成することができる。 The first convolution cell generates cell output for cell input by combining the output hidden states of the blocks in the first convolution cell that are not selected as inputs to any block of the blocks in the first convolution cell. It is configured to do. For example, the first convolution cell can concatenate all unused output hidden states into one in the depth direction to produce the final cell output.
図3は、コントローラニューラルネットワークのコントローラパラメータの現在値を更新するための例示的なプロセスのフロー図である。便宜上、プロセス300は、1つまたは複数の場所にある1つまたは複数のコンピュータのシステムによって実行されるものとして記述される。例として、たとえば図1に示すニューラルアーキテクチャ検索システム100等適切にプログラムされたニューラルアーキテクチャ検索システムは、プロセス300を実行することができる。
FIG. 3 is a flow diagram of an exemplary process for updating the current values of controller parameters in a controller neural network. For convenience,
システムは、プロセス300を繰り返し実行して、コントローラニューラルネットワークを訓練する、すなわち、コントローラパラメータの初期値からコントローラパラメータの訓練された値を決定することができる。
The system can iteratively run
システムは、コントローラニューラルネットワークを用いて、反復の時点でのコントローラパラメータの現在値に従って、出力シーケンスのバッチを生成する(ステップ302)。バッチ内の各出力シーケンスは、セル入力を受信し、かつセル出力を生成するように構成された第1の畳み込みセルについてアーキテクチャを定める。第1の畳み込みセルのセル出力は、セル入力と同じ高さおよび幅であってよい。 The system uses a controller neural network to generate a batch of output sequences according to the current values of the controller parameters at the time of the iteration (step 302). Each output sequence in a batch defines the architecture for a first convolution cell configured to receive cell input and generate cell output. The cell output of the first convolution cell may be the same height and width as the cell input.
詳細には、各出力シーケンスは、複数の時間ステップのそれぞれにおいてそれぞれの出力を含み、出力シーケンス中のそれぞれの時間ステップは第1の畳み込みセルのアーキテクチャの異なるハイパーパラメータに対応する。それゆえ、各出力シーケンスは、それぞれの時間ステップにおいて対応するハイパーパラメータの各値を含む。集合的に、所与の出力シーケンスにおけるハイパーパラメータの値は、第1の畳み込みセルについてアーキテクチャを定める。詳細には、前述のとおり、システムは、出力シーケンスにおける各ハイパーパラメータの値を生成するときにスコア分布からサンプリングするので、バッチ内のシーケンスは、同一のコントローラパラメータ値に従ってそれぞれ生成されたとしても異なるものになるのが一般的である。バッチは、一般に、たとえば、8、16、32または64シーケンス等、所定の数の出力シーケンスを含む。 Specifically, each output sequence contains its own output at each of the plurality of time steps, and each time step in the output sequence corresponds to a different hyperparameter of the architecture of the first convolution cell. Therefore, each output sequence contains each value of the corresponding hyperparameter in each time step. Collectively, the values of hyperparameters in a given output sequence define the architecture for the first convolution cell. In particular, as mentioned above, the system samples from the score distribution when generating the values for each hyperparameter in the output sequence, so the sequences in the batch are different even if they are generated according to the same controller parameter values. It is common to be a thing. A batch generally contains a predetermined number of output sequences, for example 8, 16, 32 or 64 sequences.
バッチ内の出力シーケンスごとに、システムは、出力シーケンスによって定められたアーキテクチャを有する第1の畳み込みセルの複数のインスタンスを含むチャイルドCNNのインスタンスを生成する(ステップ304)。たとえば、チャイルドCNNは第1の畳み込みセルの3つのインスタンスを含んでよい。第1の畳み込みセルのインスタンス内の畳み込み動作のフィルタの数は、チャイルドCNN内のインスタンスの位置に基づいて異なっていてよい。 For each output sequence in the batch, the system creates an instance of the child CNN containing multiple instances of the first convolution cell with the architecture defined by the output sequence (step 304). For example, a child CNN may contain three instances of the first convolution cell. The number of filters for convolution behavior within an instance of the first convolution cell may vary based on the location of the instance within the child CNN.
いくつかの実装形態において、バッチ内の各出力シーケンスは、第2のセル入力を受信し、かつ、この第2のセル入力から、高さがより小さい、幅がより小さい、またはこれら両方がより小さい第2のセル出力を生成するように構成された第2の畳み込みセルについてアーキテクチャをさらに定める。これらの実装形態では、出力シーケンスごとのチャイルドCNNのインスタンスはまた、出力シーケンスによって定められたアーキテクチャを有する第2の畳み込みセルの複数のインスタンスを含む。たとえば、チャイルドCNNのインスタンスは、(i)第1の畳み込みセルの3つのインスタンス、および(ii)第2の畳み込みセルの2つまたは3つのインスタンスを含んでよい。 In some implementations, each output sequence in a batch receives a second cell input, and from this second cell input it is less tall, less wide, or both. Further define the architecture for the second convolution cell configured to produce a smaller second cell output. In these implementations, an instance of a child CNN per output sequence also includes multiple instances of a second convolution cell with the architecture defined by the output sequence. For example, an instance of a child CNN may contain (i) three instances of the first convolution cell and (ii) two or three instances of the second convolution cell.
システムは、画像処理タスクを実行するためにチャイルドニューラルネットワークのインスタンスを訓練する(ステップ306)。すなわち、特定のニューラルネットワークタスクを実行するために、バッチ内の出力シーケンスごとに、システムは、出力シーケンスによって定められたアーキテクチャを有する第1の畳み込みセルの複数のインスタンスを含むチャイルドCNNのインスタンスを生成し、受信された訓練データ上でチャイルドCNNのインスタンスを訓練する。システムは、たとえば誤差逆伝播法を伴う確率的勾配降下法等、タスクに適した従来の機械学習訓練技術を用いてチャイルドCNNのインスタンスを訓練する。いくつかの実装形態において、システムはチャイルドCNNのインスタンスの訓練を並列に処理して、コントローラニューラルネットワークのための全訓練時間を短縮する。システムは、チャイルドCNNの各インスタンスを一定時間にわたって訓練すること(すなわち、各インスタンスを一定時間が経過するまで訓練すること)ができ、または、一定の訓練反復回数にわたって訓練することができる。この訓練の後、チャイルドCNNの訓練されたインスタンス内の第1の畳み込みセルの異なるインスタンスは異なるパラメータ値を有してよい。 The system trains an instance of a child neural network to perform image processing tasks (step 306). That is, to perform a particular neural network task, for each output sequence in the batch, the system instantiates a child CNN containing multiple instances of the first convolution cell with the architecture defined by the output sequence. And train an instance of the child CNN on the received training data. The system trains an instance of a child CNN using traditional machine learning training techniques suitable for the task, such as stochastic gradient descent with backpropagation. In some implementations, the system processes training of child CNN instances in parallel, reducing the total training time for the controller neural network. The system can train each instance of a child CNN over a period of time (ie, train each instance until a period of time has elapsed), or it can train over a period of training iterations. After this training, different instances of the first convolution cell within the trained instance of the child CNN may have different parameter values.
バッチ内の出力シーケンスごとに、システムは、画像処理タスク上のチャイルドCNNの対応する訓練されたインスタンスの性能を評価して、特定のニューラルネットワークタスク上の訓練されたインスタンスに関して性能測定基準を決定する(ステップ308)。たとえば、性能測定基準は、適切な精度測定によって測定されるような検証セット上の訓練されたインスタンスの精度であってよい。例として、精度は、タスクが分類タスクであるときは分類エラー率であり得、または、タスクが回帰タスクであるときはインターセクションオーバーユニオンの差異測定であり得る。別の例として、性能測定基準は、インスタンスの訓練の最後の2、5、または10エポックのそれぞれについてのインスタンスの精度の平均値または最大値であり得る。 For each output sequence in a batch, the system evaluates the performance of the corresponding trained instance of the child CNN on the image processing task to determine performance metrics for the trained instance on a particular neural network task. (Step 308). For example, the performance metric may be the accuracy of the trained instance on the validation set as measured by the appropriate accuracy measurement. As an example, accuracy can be a classification error rate when the task is a classification task, or an intersection overunion variance measurement when the task is a regression task. As another example, the performance metric can be the average or maximum of instance accuracy for each of the last 2, 5, or 10 epochs of instance training.
システムは、チャイルドCNNの訓練されたインスタンスに関する性能測定基準を用いて、コントローラニューラルネットワークのコントローラパラメータの現在値を調整する(ステップ310)。 The system adjusts the current values of controller parameters in the controller neural network using performance metrics for trained instances of child CNNs (step 310).
詳細には、システムは、コントローラニューラルネットワークを訓練することによって現在値を調整して、機械学習技術を用いて向上した性能測定基準を備えるチャイルドCNNをもたらす出力シーケンスを生成する。より具体的には、システムは、コントローラニューラルネットワークを訓練して、訓練されたインスタンスの性能測定基準に基づいて決定される受信された報酬を最大限にする出力シーケンスを生成する。詳細には、所与の出力シーケンスに関する報酬は訓練されたインスタンスに関する性能測定基準の関数である。たとえば、報酬は、性能測定基準、性能測定基準の二乗、性能測定基準の三乗、性能測定基準の二乗根等のうちの1つであってよい。 In particular, the system adjusts the current value by training the controller neural network to generate an output sequence that results in a child CNN with improved performance metrics using machine learning techniques. More specifically, the system trains the controller neural network to generate an output sequence that maximizes the received rewards determined based on the performance metrics of the trained instance. Specifically, the reward for a given output sequence is a function of performance metrics for trained instances. For example, the reward may be one of a performance metric, a square of the performance metric, a cube of the performance metric, a cube root of the performance metric, and so on.
いくつかの場合には、システムはコントローラニューラルネットワークを訓練して、方策勾配法を用いて期待報酬を最大限にする。 In some cases, the system trains the controller neural network and uses the policy gradient method to maximize the expected reward.
たとえば、方策勾配法はREINFORCE法であり得る。たとえば、システムは、 For example, the policy gradient method can be the REINFORCE method. For example, the system
を満たす勾配の推定量を用いてコントローラパラメータに関して期待報酬の勾配を推定することができ、ここで、mはバッチ内のシーケンスの数、Tはバッチ内の各シーケンス中の時間ステップの数、atは所与の出力シーケンス中の時間ステップtにおける出力、Rkは出力シーケンスkに関する報酬、θcはコントローラパラメータ、bはたとえば、以前のアーキテクチャ精度の指数関数的移動平均等の基線関数である。 You can estimate the expected reward gradient for the controller parameters using a gradient estimator that satisfies, where m is the number of sequences in the batch, T is the number of time steps in each sequence in the batch, a t is the output at time step t in a given output sequence, R k is the reward for the output sequence k, θ c is the controller parameter, b is the baseline function, for example, the exponential moving average of the previous architectural precision. ..
別の例として、方策勾配法は近傍方策最適化(PPO)法とすることができる。具体的には、システムは、コントローラニューラルネットワークによって制御されるチャイルドCNNのプールを生成するためのグローバルワークキューシステムを使用することによってPPOを用いてコントローラニューラルネットワークを訓練することができる。PPO法については、J. Schulman、F. Wolski、P. Dhariwal、A. Radford、and O. Klimov、「Proximal policy optimization algorithms」、arXiv preprint arXiv:1707.06347、2017年においてより詳細に記述される。 As another example, the policy gradient method can be a neighborhood policy optimization (PPO) method. Specifically, the system can train the controller neural network with PPO by using a global work queue system to generate a pool of child CNNs controlled by the controller neural network. The PPO method is described in more detail in J. Schulman, F. Wolski, P. Dhariwal, A. Radford, and O. Klimov, "Proximal policy optimization algorithms", arXiv preprint arXiv: 1707.06347, 2017.
さらに別の例として、方策勾配法は信頼領域方策最適化(TRPO)法であってよく、これについては、John Schulman、Sergey Levine、Philipp Moritz、Michael I. Jordan、Pieter Abbeel、「Trust Region Policy Optimization」、Proceedings of the 31st International Conference on Machine Learning、リール、フランス、2015年において詳細に記述される。 As yet another example, the policy gradient method may be a Trust Region Policy Optimization (TRPO) method, which John Schulman, Sergey Levine, Philipp Moritz, Michael I. Jordan, Pieter Abbeel, "Trust Region Policy Optimization". , Proceedings of the 31 st International Conference on Machine Learning, Lille, France, 2015.
いくつかの実装形態において、システムは、分散方法でコントローラニューラルネットワークを訓練する。すなわち、訓練の間、システムはコントローラニューラルネットワークの複数の複製を保持し、非同期的に複製のパラメータ値を更新する。つまり、システムは複製ごとにステップ302〜308を非同期的に実行することができ、複製のそれぞれに決定された勾配を用いてコントローラパラメータを更新することができる。 In some implementations, the system trains a controller neural network in a distributed manner. That is, during training, the system maintains multiple replicas of the controller neural network and asynchronously updates the replica parameter values. That is, the system can perform steps 302-308 asynchronously for each replication and update the controller parameters with the gradient determined for each replication.
訓練後、システムは、コントロータパラメータの調整された値を用いて第1の畳み込みセルについてアーキテクチャを生成することができる。 After training, the system can generate an architecture for the first convolution cell using the adjusted values of the controller parameters.
いくつかの場合には、システムは次に、チャイルドCNNのインスタンスより少ない第1の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークの計算効率の良いアーキテクチャを生成することができ、ここで、第1の畳み込みセルのインスタンスは生成されたアーキテクチャを有する。この技術は、システムが、十分に計算効率の良い最終的なアーキテクチャをなお維持しつつ評価の間利用できるさらなる計算能力を活用することを可能にし、その結果、携帯デバイス上または他の資源制約環境において展開される。 In some cases, the system can then generate a computationally efficient architecture for a convolutional neural network that contains fewer instances of the first convolutional cell than instances of the child CNN, where the first convolution is. The cell instance has the generated architecture. This technology allows the system to take advantage of the additional computational power available during evaluation while still maintaining a sufficiently computationally efficient final architecture, resulting in a mobile device or other resource-constrained environment. Expanded in.
いくつかの他の場合には、システムは、より複雑な画像処理タスクにおいて用いるために、チャイルドCNNのインスタンスより多い第1の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークのより大きなアーキテクチャを生成することができ、ここで、第1の畳み込みセルのインスタンスは生成されたアーキテクチャを有する。この技術は、プロセスの計算効率を向上させ、システムが、プロセスの間より大きなアーキテクチャを繰り返し評価することを要せずに高い性能を達成することを可能にする。 In some other cases, the system may generate a larger architecture of a convolutional neural network that contains more instances of the first convolutional cell than instances of the child CNN for use in more complex image processing tasks. Yes, where the instance of the first convolutional cell has the generated architecture. This technique improves the computational efficiency of the process and allows the system to achieve high performance without the need to repeatedly evaluate larger architectures during the process.
本明細書は、システムおよびコンピュータプログラム構成要素に関連して「構成される(構成された)」という用語を用いる。特定の動作または作用を実行するように構成されるべき1つまたは複数のコンピュータのシステムに関しては、システムが動作中システムにそれらの動作または作用を実行させるソフトウェア、ファームウェア、ハードウェアまたはこれらの組合せをそこに組み込んでいることを意味する。特定の動作または作用を実行するように構成されるべき1つまたは複数のコンピュータプログラムに関しては、データ処理装置によって実行されるときに、1つまたは複数のプログラムがその装置にそれらの動作または作用を実行させる命令を含むことを意味する。 The present specification uses the term "composed" in relation to system and computer program components. For a system of one or more computers that should be configured to perform a particular action or action, the system is running software, firmware, hardware, or a combination thereof that causes the system to perform those actions or actions. It means that it is incorporated there. For one or more computer programs that should be configured to perform a particular action or action, when executed by a data processor, one or more programs give those actions or actions to that device. It means to include an instruction to be executed.
本明細書において記述される主題および機能動作の実施形態は、本明細書で開示される構造およびそれらの構造的均等物を含む、デジタル電子回路、有形に実施されるコンピュータソフトウェアもしくはファームウェア、コンピュータハードウェアにおいて、またはそれらのうちの1つまたは複数の組合せにおいて実装され得る。本明細書において記述される主題の実施形態は、1つまたは複数のコンピュータプログラムとして、すなわち、データ処理装置によって実行するため、またはデータ処理装置の動作を制御するための有形の非一時的記憶媒体に符号化されたコンピュータプログラム命令の1つまたは複数のモジュールとして実装され得る。コンピュータ記憶媒体は機械可読記憶デバイス、機械可読記憶基板、ランダムもしくはシリアルアクセスメモリデバイス、またはそれらのうちの1つもしくは複数の組合せであってよい。別法として、または追加として、プログラム命令は、データ処理装置による実行に適した受信装置に送信するための情報を符号化するために生成される人工的に生成された伝播信号、たとえば、機械生成の電気、光または電磁信号において符号化され得る。 Embodiments of the subject matter and functional operation described herein include digital electronic circuits, tangibly implemented computer software or firmware, computer hardware, including the structures disclosed herein and their structural equivalents. It can be implemented in the ware, or in one or more combinations of them. Embodiments of the subject described herein are tangible non-temporary storage media as one or more computer programs, i.e., to be executed by a data processor or to control the operation of the data processor. It can be implemented as one or more modules of computer program instructions encoded in. The computer storage medium may be a machine-readable storage device, a machine-readable storage board, a random or serial access memory device, or a combination thereof. Alternatively or additionally, the program instruction is an artificially generated propagating signal, eg, machine-generated, that is generated to encode information for transmission to a receiver suitable for execution by a data processor. Can be encoded in an electric, optical or electromagnetic signal.
「データ処理装置」という用語はデータ処理ハードウェアを指し、例としてプログラマブルプロセッサ、コンピュータ、または複数のプロセッサもしくはコンピュータを含む、データを処理するためのすべての種類の装置、デバイスおよび機械を包含する。装置はまた、たとえばFPGA(フィールドプログラマブルゲートアレイ)またはASIC(特定用途向け集積回路)等の専用論理回路であってよく、またはこれをさらに含むこともできる。装置は、任意選択的に、ハードウェアに加えて、コンピュータプログラムのための実行環境を作出するコード、たとえば、プロセッサファームウェア、プロトコルスタック、データベース管理システム、オペレーティングシステム、またはそれらのうちの1つもしくは複数の組合せを構成するコードを含むことができる。 The term "data processing equipment" refers to data processing hardware and includes all types of equipment, devices and machines for processing data, including, for example, programmable processors, computers, or multiple processors or computers. The device may also be, or may further include, dedicated logic circuits such as FPGAs (Field Programmable Gate Arrays) or ASICs (Application Specific Integrated Circuits). The device, in addition to the hardware, optionally creates code that creates an execution environment for computer programs, such as processor firmware, protocol stacks, database management systems, operating systems, or one or more of them. Can include codes that make up the combination of.
プログラム、ソフトウェア、ソフトウェアアプリケーション、アプリ(app)、モジュール、ソフトウェアモジュール、スクリプトまたはコードとも呼ばれ、または記述されることもあるコンピュータプログラムは、コンパイルされた言語もしくは解釈された言語、または宣言型言語もしくは手続き型言語を含む任意の形式のプログラミング言語で書かれてよく、独立型のプログラムとして、またはモジュール、構成要素、サブルーチン、もしくはコンピューティング環境での使用に適した他のユニットとしての形態を含む、任意の形態で展開され得る。プログラムはファイルシステムのファイルに対応することがあるが、必ずしも対応するわけではない。プログラムは、たとえば、マークアップ言語文書、当該プログラムに専用の単一ファイル、または、たとえば1つまたは複数のモジュール、サブプログラムもしくはコードの部分を記憶するファイル等複数の協調ファイルに記憶された1つまたは複数のスクリプト等、他のプログラムまたはデータを保持するファイルの一部に記憶され得る。コンピュータプログラムは、1つのコンピュータ上で、または1つの場所に配置され、もしくは複数の場所に分散されデータ通信ネットワークによって相互接続される複数のコンピュータ上で実行されるように展開され得る。 A computer program, sometimes referred to as a program, software, software application, app, module, software module, script or code, is a compiled or interpreted language, or a declarative language or Written in any form of programming language, including procedural languages, including forms as stand-alone programs or as modules, components, subroutines, or other units suitable for use in a computing environment. It can be deployed in any form. Programs may, but do not necessarily, support files in the file system. A program is stored in multiple collaborative files, such as a markup language document, a single file dedicated to the program, or, for example, a file that stores one or more modules, subprograms, or parts of code. Alternatively, it may be stored in a part of a file that holds other programs or data, such as multiple scripts. Computer programs can be deployed to run on one computer, or on multiple computers that are located in one location, or distributed in multiple locations and interconnected by a data communication network.
本明細書において「データベース」という用語は任意のデータの集合を指すために広く用いられ、データは特定の方法で構築される必要はなく、または全く構築される必要がなく、1つまたは複数の場所にある記憶デバイスに記憶されてよい。それゆえ、たとえば、インデックスデータベースは複数のデータの集合を含むことができ、このそれぞれが異なって組織化され、アクセスされてよい。 The term "database" is widely used herein to refer to any set of data, and the data need not be constructed in any particular way, or at all, and may be one or more. It may be stored in a storage device at the location. Thus, for example, an index database can contain multiple sets of data, each of which may be organized and accessed differently.
同様に、本明細書において「エンジン」という用語は、1つまたは複数の特定の機能を実行するようにプログラムされたソフトウェアベースのシステム、サブシステム、またはプロセスを指すために広く用いられる。エンジンは、1つまたは複数の場所にある1つまたは複数のコンピュータに組み込まれる、1つまたは複数のソフトウェアモジュールまたは構成要素として実装されるのが一般的である。いくつかの場合には、1つまたは複数のコンピュータが特定のエンジン専用であり、他の場合には、複数のエンジンが同じ1つまたは複数のコンピュータ上に組み込まれて作動することができる。 Similarly, the term "engine" as used herein is widely used to refer to a software-based system, subsystem, or process programmed to perform one or more specific functions. Engines are typically implemented as one or more software modules or components that are embedded in one or more computers in one or more locations. In some cases, one or more computers may be dedicated to a particular engine, and in other cases, multiple engines may be embedded and run on the same one or more computers.
本明細書において記述されるプロセスおよび論理の流れは、1つまたは複数のコンピュータプログラムを実行して入力データ上で動作し出力を生成することによって機能を実行する1つまたは複数のプログラマブルコンピュータによって実行され得る。プロセスおよび論理の流れはまた、たとえばFPGAまたはASIC等の専用論理回路によって、または、専用論理回路と1つまたは複数のプログラムされたコンピュータとの組合せによって実行されることもある。 The process and logical flows described herein are performed by one or more programmable computers that run one or more computer programs to run on input data and perform functions by producing output. Can be done. Process and logic flows may also be performed by dedicated logic circuits such as FPGAs or ASICs, or by a combination of dedicated logic circuits and one or more programmed computers.
コンピュータプログラムの実行に適したコンピュータは、汎用もしくは専用のマイクロプロセッサ、またはその両方、あるいは任意の他の種類の中央処理装置に基づくことができる。中央処理装置は、読取り専用メモリもしくはランダムアクセスメモリまたはその両方から命令およびデータを受信することになるのが一般的である。コンピュータの必須要素は、命令を実行するための中央処理装置、ならびに命令およびデータを記憶するための1つまたは複数のメモリデバイスである。中央処理装置およびメモリは、専用の論理回路によって補完されるか、または専用の論理回路に組み込まれ得る。一般に、コンピュータはまた、データを記憶するための1つまたは複数のマス記憶デバイス、たとえば磁気ディスク、光磁気ディスクまたは光学ディスクを含むか、あるいはこれらの間でデータを受信もしくは送信するように、または送受信の両方を行うように動作可能に結合される。しかしながら、コンピュータはそのようなデバイスを有する必要はない。その上、コンピュータは、別のデバイス、たとえばごく一部の例を挙げると、携帯電話、個人用携帯情報端末(PDA)、携帯オーディオもしくはビデオプレイヤ、ゲーム機、全地球測位システム(GPS)受信機、またはたとえばユニバーサルシリアルバス(USB)フラッシュドライブ等の携帯記憶デバイス等に埋込み可能である。 A computer suitable for running a computer program can be based on a general purpose and / or dedicated microprocessor, or both, or any other type of central processing unit. Central processing units typically receive instructions and data from read-only memory and / or random access memory. Essential elements of a computer are a central processing unit for executing instructions and one or more memory devices for storing instructions and data. The central processing unit and memory can be complemented by a dedicated logic circuit or incorporated into a dedicated logic circuit. In general, computers also include, or receive, or transmit data between one or more mass storage devices for storing data, such as magnetic disks, magneto-optical disks, or optical disks. Operatedly combined to do both sending and receiving. However, the computer does not have to have such a device. Moreover, computers are other devices, such as mobile phones, personal digital assistants (PDAs), portable audio or video players, game consoles, and Global Positioning System (GPS) receivers, to name a few. Or, for example, it can be embedded in a portable storage device such as a universal serial bus (USB) flash drive.
コンピュータプログラム命令およびデータを記憶するのに適したコンピュータ可読媒体は、例として、たとえばEPROM、EEPROMおよびフラッシュメモリデバイス等の半導体メモリデバイス、たとえば内蔵ハードディスクまたはリムーバブルディスク等の磁気ディスク、光磁気ディスク、ならびにCD-ROMディスクおよびDVD-ROMディスクを含む、すべての形態の不揮発性メモリ、媒体およびメモリデバイスを含む。 Computer-readable media suitable for storing computer program instructions and data include, for example, semiconductor memory devices such as EPROM, EEPROM and flash memory devices, such as magnetic disks such as internal hard disks or removable disks, optomagnetic disks, and Includes all forms of non-volatile memory, media and memory devices, including CD-ROM discs and DVD-ROM discs.
ユーザとの対話を可能にするために、本明細書において記述される主題の実施形態は、情報をユーザに表示するためのディスプレイデバイス、たとえばブラウン管(CRT)モニタまたは液晶表示(LCD)モニタ、ならびにユーザがコンピュータに入力できるようにするキーボードおよびポインティングデバイス、たとえばマウスまたはトラックボール等を有するコンピュータ上に実装され得る。他の種類のデバイスが、ユーザとの対話を可能にするために同じように用いられてもよく、たとえば、ユーザに提供されるフィードバックは、感覚フィードバック、たとえば視覚フィードバック、聴覚フィードバックまたは触覚フィードバック等の任意の形式であってよく、ユーザからの入力は、音響、音声または触覚入力を含む任意の形式で受信され得る。加えて、コンピュータは、ユーザが使用するデバイスとの間でドキュメントを送受信することによって、たとえば、ウェブブラウザから受信した要求に応答してユーザのデバイス上でウェブブラウザにウェブページを送信することによって、ユーザと対話することができる。また、コンピュータは、たとえばメッセージアプリケーションを動作させているスマートフォン等の個人用デバイスにテキストメッセージまたは他の形式のメッセージを送信することによって、およびユーザから返信として応答メッセージを受信することによって、ユーザと対話することができる。 To enable interaction with the user, embodiments of the subject matter described herein include display devices for displaying information to the user, such as a brown tube (CRT) monitor or liquid crystal display (LCD) monitor, as well. It can be implemented on a computer that has a keyboard and pointing device that allows the user to type on the computer, such as a mouse or trackball. Other types of devices may be used in the same way to allow interaction with the user, for example, the feedback provided to the user may be sensory feedback, such as visual feedback, auditory feedback or tactile feedback. It may be in any format and the input from the user may be received in any format including acoustic, audio or tactile input. In addition, the computer sends and receives documents to and from the device used by the user, for example, by sending a web page to the web browser on the user's device in response to a request received from the web browser. Can interact with the user. The computer also interacts with the user by sending a text message or other form of message to a personal device, such as a smartphone running a messaging application, and by receiving a response message in reply from the user. can do.
機械学習モデルを実装するデータ処理装置はまた、たとえば機械学習訓練または製品の共通部分およびコンピュータ集約的部分、すなわち推論、作業負荷を処理する専用ハードウェアアクセラレータユニットを含み得る。 A data processor that implements a machine learning model may also include, for example, machine learning training or a common and computer intensive part of the product, i.e. a dedicated hardware accelerator unit that handles inference, workload.
機械学習モデルは、たとえばTensorFlowフレームワーク、Microsoft Cognitive Toolkitフレームワーク、Apache SingaフレームワークまたはApache MXNetフレームワーク等の機械学習フレームワークを用いて実装および展開され得る。 Machine learning models can be implemented and deployed using machine learning frameworks such as the TensorFlow framework, Microsoft Cognitive Toolkit framework, Apache Singa framework or Apache MXNet framework.
本明細書において記述される主題の実施形態は、たとえばデータサーバとしてバックエンド構成要素を含む、または、たとえばアプリケーションサーバ等のミドルウェア構成要素を含む、または、たとえばユーザが本明細書に記述される主題の一実装形態と対話することができるグラフィカルユーザインターフェース、ウェブブラウザもしくはアプリを有するクライアントコンピュータ等のフロントエンド構成要素を含むコンピューティングシステムにおいて、あるいは1つまたは複数のそのようなバックエンド、ミドルウェアもしくはフロントエンド構成要素の任意の組合せにおいて実装され得る。システムの構成要素は、たとえば通信ネットワーク等のデジタルデータ通信の任意の形態または媒体によって相互接続され得る。通信ネットワークの例として、ローカルエリアネットワーク(LAN)および広域ネットワーク(WAN)、たとえばインターネットを含む。 Embodiments of the subject matter described herein include, for example, a back-end component as a data server, or, for example, a middleware component such as an application server, or, for example, a subject described herein by a user. In a computing system that includes a graphical user interface capable of interacting with one implementation, a front-end component such as a client computer with a web browser or application, or one or more such back-ends, middleware or fronts. It can be implemented in any combination of end components. The components of the system can be interconnected by any form or medium of digital data communication, such as a communication network. Examples of communication networks include local area networks (LANs) and wide area networks (WANs), such as the Internet.
コンピューティングシステムは、クライアントおよびサーバを含むことができる。クライアントおよびサーバは、一般に互いにリモートであり、典型的には通信ネットワークを介して対話する。クライアントとサーバとの関係性は、それぞれのコンピュータにおいて動作し、かつ互いにクライアント-サーバの関係にあるコンピュータプログラムに基づいて生じる。いくつかの実施形態では、サーバは、たとえばクライアントとして作用するデバイスと対話するユーザにデータを表示し、このユーザからユーザ入力を受信する目的で、たとえばHTMLページ等のデータをユーザデバイスに送信する。ユーザデバイスにおいて生成されるデータ、たとえばユーザとの対話の結果は、このデバイスからサーバにおいて受信され得る。 The computing system can include clients and servers. Clients and servers are generally remote to each other and typically interact over a communication network. The client-server relationship arises based on computer programs that run on their respective computers and have a client-server relationship with each other. In some embodiments, the server displays data to a user interacting with a device acting as a client, for example, and sends data to the user device, such as an HTML page, for the purpose of receiving user input from this user. Data generated on the user device, such as the result of a user interaction, can be received from this device on the server.
本明細書は、多くの具体的な実装形態の詳細を含んでいるが、これらは、いかなる発明の範囲についても、または特許請求され得る範囲についても、これを限定するものと解釈されるべきではなく、むしろ特定の発明の特定の実施形態に固有であり得る特徴の説明と解釈されるべきである。別個の実施形態の文脈で本明細書において記述される一定の特徴はまた、単一の実施形態における組合せで実装されてもよい。逆に、単一の実施形態の文脈において記述されるさまざまな特徴もまた、複数の実施形態において別個に、または任意の適切な副組合せで実装されてもよい。その上、特徴については一定の組合せにおいて作用するものとして上述され、そのようなものとしてさらに最初に特許請求され得るが、特許請求される組合せからの1つまたは複数の特徴は、いくつかの場合においては組合せから削除され得、特許請求される組合せは、副組合せまたは副組合せの変形形態を対象とすることができる。 Although the present specification includes details of many specific implementations, these should be construed as limiting the scope of any invention or claims. Rather, it should be construed as an explanation of features that may be unique to a particular embodiment of a particular invention. Certain features described herein in the context of separate embodiments may also be implemented in combination in a single embodiment. Conversely, various features described in the context of a single embodiment may also be implemented separately in multiple embodiments or in any suitable subcombination. Moreover, the features are described above as acting in certain combinations and may be claimed first as such, but one or more features from the claimed combination may in some cases. Can be removed from a combination in, and the claimed combination can be a sub-combination or a variant of the sub-combination.
同様に、動作は特定の順序で図面において表され、特許請求の範囲において列挙されているが、このことは、望ましい結果を達成するために、そのような動作が図示された特定の順序もしくは連続的な順序で実行される必要がある、または例示された動作がすべて実行される必要があるものと理解されるべきではない。一定の状況においては、マルチタスクおよび並列処理が有利な場合もある。さらに、上述の実施形態におけるさまざまなシステムモジュールおよび構成要素の分離は、すべての実施形態においてそのような分離を必要とすると理解されるべきではなく、記述されるプログラム構成要素およびシステムは、一般に、単一のソフトウェア製品に一体化され、または複数のソフトウェア製品にパッケージ化され得ることを理解すべきである。 Similarly, the actions are represented in the drawings in a particular order and are listed in the claims, which means that such actions are shown in a particular order or sequence in order to achieve the desired result. It should not be understood that they need to be performed in a specific order, or that all the illustrated actions need to be performed. In certain situations, multitasking and parallel processing may be advantageous. Moreover, the separation of the various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and the program components and systems described are generally generally. It should be understood that it can be integrated into a single software product or packaged into multiple software products.
主題の特定の実施形態について記述されてきた。他の実施形態は、以下の特許請求の範囲の範囲内にある。たとえば、特許請求の範囲に列挙される作用は、異なる順序で実行されてよく、それでも望ましい結果を達成することができる。一例として、添付の図面において表されるプロセスは、望ましい結果を達成するために、図示された特定の順序または連続的な順序を必ずしも要するわけではない。いくつかの場合には、マルチタスクおよび並列処理が有利なこともある。 Specific embodiments of the subject have been described. Other embodiments are within the scope of the following claims. For example, the actions listed in the claims may be performed in a different order and still achieve the desired result. As an example, the process represented in the accompanying drawings does not necessarily require the specific order or sequential order shown to achieve the desired result. In some cases, multitasking and parallelism may be advantageous.
100 ニューラルアーキテクチャ検索システム、システム
102 訓練データ
104 検証セット
110 コントローラニューラルネットワーク
112 出力シーケンスのバッチ、バッチ
120 訓練エンジン
130 コントローラパラメータ更新エンジン
150 アーキテクチャデータ
200 動作ブロック
202 第1の入力隠れ状態
204 第2の入力隠れ状態
206 第1の動作
208 第2の動作
210 組合せ動作
212 出力隠れ状態
214 出力層
216 出力層
218 出力層
220 出力層
222 出力層
224 層
225 更新された隠れ状態、隠れ状態
227 隠れ状態
229 隠れ状態
231 隠れ状態
233 隠れ状態
100 Neural Architecture Search System, System
102 Training data
104 verification set
110 Controller Neural Network
112 Output sequence batch, batch
120 training engine
130 Controller parameter update engine
150 architecture data
200 operating blocks
202 First input hidden state
204 Second input hidden state
206 First action
208 Second action
210 Combination operation
212 Output hidden state
214 Output layer
216 Output layer
218 Output layer
220 output layer
222 Output layer
224 layers
225 Updated hidden state, hidden state
227 Hidden state
229 Hidden state
231 Hidden state
233 Hidden state
Claims (22)
複数のコントローラパラメータを有するコントローラニューラルネットワークを用い、前記コントローラパラメータの現在値に従って、出力シーケンスのバッチを生成するステップであって、
前記バッチ内の各出力シーケンスは、セル入力を受信し、かつセル出力を生成するように構成された第1の畳み込みセルについてアーキテクチャを定め、
前記第1の畳み込みセルは、それぞれ1つまたは複数の各入力隠れ状態を受信し、各出力隠れ状態を生成する所定の数の動作ブロックのシーケンスを含み、前記バッチ内の各出力シーケンスは、前記動作ブロックのそれぞれに、
(i)チャイルド畳み込みニューラルネットワークの1つまたは複数の他の構成要素によって生成された出力、(ii)入力画像、または(iii)前記第1の畳み込みセル内の前記動作ブロックのシーケンス中の先行する動作ブロックの出力隠れ状態、のうちの1つまたは複数から選択された前記動作ブロックについての第1の入力隠れ状態に関するソースと、
(i)前記第1の畳み込みセルのシーケンス中の1つまたは複数の先行する畳み込みセルによって生成された出力、(ii)前記入力画像、または(iii)前記第1の畳み込みセル内の前記動作ブロックのシーケンス中の先行する動作ブロックの出力隠れ状態、のうちの1つまたは複数から選択された前記動作ブロックについての第2の入力隠れ状態に関するソースと、
畳み込みニューラルネットワーク動作の所定の組から選択された第1の動作に関する動作タイプと、
前記畳み込みニューラルネットワーク動作の所定の組から選択された第2の動作に関する動作タイプと
を定め、
前記バッチ内の出力シーケンスごとに、
前記出力シーケンスによって定められた前記アーキテクチャを有する前記第1の畳み込みセルの複数のインスタンスを含む前記チャイルド畳み込みニューラルネットワークのインスタンスを生成し、
画像処理タスクを実行するために前記チャイルド畳み込みニューラルネットワークの前記インスタンスを訓練し、
前記画像処理タスク上での前記チャイルド畳み込みニューラルネットワークの前記訓練されたインスタンスの性能を評価して、前記チャイルド畳み込みニューラルネットワークの前記訓練されたインスタンスに関して性能測定基準を決定する、ステップと、
前記チャイルド畳み込みニューラルネットワークの前記訓練されたインスタンスに関する前記性能測定基準を用いて、前記コントローラニューラルネットワークの前記コントローラパラメータの前記現在値を調整するステップと、
前記コントローラパラメータの調整値に従って、前記コントローラニューラルネットワークを使用して、前記第1の畳み込みセルの最終的なアーキテクチャを生成するステップと、
を含む、
方法。 It ’s a computer implementation method.
A step of generating a batch of output sequences according to the current values of the controller parameters using a controller neural network with multiple controller parameters.
Each output sequence in the batch defines the architecture for a first convolution cell configured to receive cell input and generate cell output.
The first convolution cell contains a predetermined number of sequences of operating blocks that each receive one or more input hidden states and generate each output hidden state, and each output sequence in the batch is said to be said. For each of the motion blocks,
(i) Output produced by one or more other components of the child convolutional neural network, (ii) Input image, or (iii) Preceding in the sequence of said motion blocks in said first convolutional cell. A source for the first input hidden state of the motion block selected from one or more of the output hidden states of the motion block,
(i) the output produced by one or more preceding convolution cells in the sequence of the first convolution cell, (ii) the input image, or (iii) the motion block in the first convolution cell. Source for a second input hidden state for the action block selected from one or more of the output hidden states of the preceding action block in the sequence of
The motion type for the first motion selected from a given set of convolutional neural network motions,
With the motion type related to the second motion selected from the predetermined set of convolutional neural network motions.
And set
For each output sequence in the batch
Creates an instance of the child convolution neural network comprising a plurality of instances of the first convolution cell having the architecture defined by the output sequence,
Train the instance of the child convolutional neural network to perform image processing tasks and
A step of evaluating the performance of the trained instance of the child convolutional neural network on the image processing task and determining performance metrics for the trained instance of the child convolutional neural network.
A step of adjusting the current value of the controller parameter of the controller neural network using the performance metric for the trained instance of the child convolutional neural network .
A step of generating the final architecture of the first convolution cell using the controller neural network according to the adjusted values of the controller parameters.
including,
Method.
請求項1に記載の方法。 After the training, different instances of the first convolution cell within the trained instance of the child convolutional neural network have different parameter values.
The method according to claim 1.
第1の動作を前記第1の入力隠れ状態に適用して第1の出力を生成し、
第2の動作を前記第2の入力隠れ状態に適用して第2の出力を生成し、
組合せ動作を前記第1の出力および前記第2の出力に適用して出力隠れ状態を生成するように構成されている、
請求項1または2に記載の方法。 Each motion block in the first convolution cell
A first operation to generate a first output is applied to the first input hidden state,
A second operation to generate a second output applied to the second input hidden states,
The combination operation is applied to the first output and the second output to generate an output hidden state.
The method of claim 1 or 2.
組合せ動作の所定の組から選択された前記組合せ動作に関する動作タイプをさらに定める、
請求項1に記載の方法。 Each output sequence in the batch is for each operation block of the first convolution cell.
Further defining an action type for said combinatorial action selected from a predetermined set of combinatorial actions.
The method according to claim 1.
請求項1または4に記載の方法。 The first convolution cell produces the cell output by combining the output hidden states of the block in the first convolution cell that are not selected as inputs to any block of the blocks in the first convolution cell. Further configured to generate,
The method of claim 1 or 4 .
前記コントローラニューラルネットワークを訓練して、機械学習訓練技術を用いて向上した性能測定基準を有するチャイルド畳み込みニューラルネットワークをもたらす出力シーケンスを生成するステップを含む、
請求項1から5のいずれか一項に記載の方法。 The step of adjusting the current value of the controller parameter of the controller neural network using the performance metric for the trained instance of the child convolutional neural network is
A step of training the controller neural network to generate an output sequence that results in a child convolutional neural network with improved performance metrics using machine learning training techniques.
The method according to any one of claims 1 to 5.
請求項6に記載の方法。 The machine learning training technique is a policy gradient method,
The method according to claim 6.
請求項6または7に記載の方法。 The machine learning training technique is the REINFORCE method.
The method of claim 6 or 7 .
請求項6に記載の方法。 The machine learning training technique is a neighborhood policy optimization (PPO) method.
The method according to claim 6.
請求項6から9のいずれか一項に記載の方法。 Further comprising the step of using at least one of the child convolutional neural networks having improved performance metrics to perform the image processing task.
The method according to any one of claims 6 to 9.
請求項1から9のいずれか一項に記載の方法。 Each output sequence contains the value of each hyperparameter of the first convolution cell at each of the plurality of time steps.
The method according to any one of claims 1 to 9.
所与の出力シーケンスについて、およびそれぞれの時間ステップにおいて、
前記所与の出力シーケンス中の先行する時間ステップにおける前記ハイパーパラメータの値を入力として受信し、前記入力を処理して再帰型ニューラルネットワークの現在の隠れ状態を更新するように構成された、1つまたは複数の再帰型ニューラルネットワーク層と、
それぞれの出力層が、前記所与の出力シーケンスについて、
前記時間ステップにおいて前記更新された隠れ状態を含む出力層入力を受信し、前記時間ステップにおける前記ハイパーパラメータの可能な値上でスコア分布を定める前記時間ステップに関する出力を生成するように構成された、時間ステップごとの各出力層とを含む、
請求項11に記載の方法。 The controller neural network is a recurrent neural network, and the recurrent neural network is
For a given output sequence and at each time step
One configured to receive as input the value of the hyperparameter in the preceding time step in the given output sequence and process the input to update the current hidden state of the recurrent neural network. Or with multiple recurrent neural network layers,
Each output layer is for the given output sequence.
It is configured to receive an output layer input containing the updated hidden state in the time step and generate an output for the time step that determines the score distribution on possible values of the hyperparameters in the time step. Including each output layer for each time step,
The method of claim 11.
前記コントローラニューラルネットワークへの入力として、前記出力シーケンス中の前記先行する時間ステップにおける前記ハイパーパラメータの前記値を提供して、前記時間ステップにおける前記ハイパーパラメータの可能な値上でスコア分布を定める前記時間ステップに関する出力を生成するステップと、
前記スコア分布に従って前記可能な値からサンプリングして、前記出力シーケンス中の前記時間ステップにおける前記ハイパーパラメータの前記値を決定するステップとを含む、
請求項12に記載の方法。 Using a controller neural network with a plurality of controller parameters, the steps of generating a batch of output sequences according to the current values of the controller parameters are performed for each output sequence within the batch and for each of the plurality of time steps.
The time that provides the values of the hyperparameters in the preceding time step in the output sequence as inputs to the controller neural network and determines the score distribution on possible values of the hyperparameters in the time steps. Steps that generate output about the steps, and
Including a step of sampling from the possible values according to the score distribution and determining the value of the hyperparameter in the time step in the output sequence.
The method of claim 12.
請求項1から12のいずれか一項に記載の方法。 The number of filters for convolutional behavior within the instance of the first convolutional cell varies based on the location of the instance within the child convolutional neural network.
The method according to any one of claims 1 to 12.
請求項1から13のいずれか一項に記載の方法。 The cell output of the first convolution cell has the same height and width as the cell input.
The method according to any one of claims 1 to 13.
出力シーケンスごとの前記チャイルド畳み込みニューラルネットワークの前記インスタンスは、前記出力シーケンスによって定められた前記アーキテクチャを有する前記第2の畳み込みセルの複数のインスタンスも含む、
請求項14に記載の方法。 Each output sequence in the batch receives a second cell input and produces a second cell output from the second cell input that is smaller in height, smaller in width, or both smaller. Further define the architecture for the second convolution cell configured to
The instance of the child convolutional neural network per output sequence also includes a plurality of instances of the second convolutional cell having the architecture defined by the output sequence.
The method of claim 14.
請求項1から15のいずれか一項に記載の方法。 The step of training each instance of the child convolutional neural network includes a step of training each instance until a certain period of time elapses.
The method according to any one of claims 1 to 15.
前記チャイルド畳み込みニューラルネットワークのインスタンスより少ない前記第1の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークの計算効率の良いアーキテクチャを生成するステップであって、前記畳み込みセルの前記インスタンスは、前記生成されたアーキテクチャを有する、ステップとをさらに含む、
請求項1から16のいずれか一項に記載の方法。 Using the adjusted values of the controller parameters to generate an architecture for the first convolution cell, and
A step of generating a computationally efficient architecture of a convolutional neural network that includes fewer instances of the first convolutional cell than an instance of the child convolutional neural network, wherein the instance of the convolutional cell has the generated architecture. Have, including further steps
The method according to any one of claims 1 to 16.
より複雑な画像処理タスクにおいて用いるために、前記チャイルド畳み込みニューラルネットワークのインスタンスより多い前記第1の畳み込みセルのインスタンスを含む畳み込みニューラルネットワークのより大きなアーキテクチャを生成するステップであって、前記第1の畳み込みセルの前記インスタンスは、前記生成されたアーキテクチャを有する、ステップとをさらに含む、
請求項1から16のいずれか一項に記載の方法。 Using the adjusted values of the controller parameters to generate an architecture for the first convolution cell, and
A step of generating a larger architecture of a convolutional neural network that includes more instances of the first convolutional cell than more instances of the child convolutional neural network for use in more complex image processing tasks, the first convolutional neural network. The instance of the cell further comprises a step having the generated architecture.
The method according to any one of claims 1 to 16.
請求項19に記載の方法。 Further comprising performing the more complex image processing task with a convolutional neural network that includes more instances of the first convolutional cell than more instances of the child convolutional neural network.
The method of claim 19.
前記1つまたは複数の記憶デバイスが、前記1つまたは複数のコンピュータに、請求項1から20のいずれか一項に記載の方法を実行させる命令を記憶する、
システム。 A system with one or more computers and one or more storage devices.
The storage device stores an instruction that causes the computer or computer to perform the method according to any one of claims 1 to 20.
system.
1つまたは複数のコンピュータ可読記憶媒体。 Stores an instruction to cause one or more computers to perform the method according to any one of claims 1-20.
One or more computer-readable storage media.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762535806P | 2017-07-21 | 2017-07-21 | |
US62/535,806 | 2017-07-21 | ||
PCT/US2018/042456 WO2019018375A1 (en) | 2017-07-21 | 2018-07-17 | Neural architecture search for convolutional neural networks |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2020522035A JP2020522035A (en) | 2020-07-27 |
JP6963627B2 true JP6963627B2 (en) | 2021-11-10 |
Family
ID=63104074
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2019553406A Active JP6963627B2 (en) | 2017-07-21 | 2018-07-17 | Neural architecture search for convolutional neural networks |
Country Status (5)
Country | Link |
---|---|
US (3) | US10521729B2 (en) |
EP (1) | EP3583553A1 (en) |
JP (1) | JP6963627B2 (en) |
CN (2) | CN110476172B (en) |
WO (1) | WO2019018375A1 (en) |
Families Citing this family (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2019081705A1 (en) * | 2017-10-27 | 2019-05-02 | Deepmind Technologies Limited | Using hierarchical representations for neural network architecture searching |
WO2019096952A1 (en) * | 2017-11-15 | 2019-05-23 | NEC Laboratories Europe GmbH | A system and method for single image object density estimation |
CN110889487A (en) * | 2018-09-10 | 2020-03-17 | 富士通株式会社 | Neural network architecture search apparatus and method, and computer-readable recording medium |
US11544536B2 (en) * | 2018-09-27 | 2023-01-03 | Google Llc | Hybrid neural architecture search |
KR20210116640A (en) * | 2019-02-25 | 2021-09-27 | 구글 엘엘씨 | Systems and methods for creating an architecture of pyramid hierarchies |
CN110009048B (en) * | 2019-04-10 | 2021-08-24 | 苏州浪潮智能科技有限公司 | Method and equipment for constructing neural network model |
CN110175671B (en) * | 2019-04-28 | 2022-12-27 | 华为技术有限公司 | Neural network construction method, image processing method and device |
US11537664B2 (en) * | 2019-05-23 | 2022-12-27 | Google Llc | Learning to select vocabularies for categorical features |
CN111684472A (en) * | 2019-05-31 | 2020-09-18 | 深圳市大疆创新科技有限公司 | Method and apparatus for network structure search, computer storage medium, and computer program product |
CN111684471A (en) * | 2019-05-31 | 2020-09-18 | 深圳市大疆创新科技有限公司 | Method and apparatus for network structure search, computer storage medium, and computer program product |
CN110288084A (en) * | 2019-06-06 | 2019-09-27 | 北京小米智能科技有限公司 | Super-network training method and device |
US11768912B2 (en) * | 2019-07-12 | 2023-09-26 | International Business Machines Corporation | Performing multivariate time series prediction with three-dimensional transformations |
WO2021007743A1 (en) * | 2019-07-15 | 2021-01-21 | 富士通株式会社 | Method and apparatus for searching neural network architecture |
CN110674326A (en) * | 2019-08-06 | 2020-01-10 | 厦门大学 | Neural network structure retrieval method based on polynomial distribution learning |
US11443162B2 (en) * | 2019-08-23 | 2022-09-13 | Google Llc | Resource constrained neural network architecture search |
CN112445823A (en) * | 2019-09-04 | 2021-03-05 | 华为技术有限公司 | Searching method of neural network structure, image processing method and device |
CN110598629B (en) * | 2019-09-11 | 2023-06-06 | 北京百度网讯科技有限公司 | Super-network search space construction method and device and electronic equipment |
CN110705573A (en) * | 2019-09-25 | 2020-01-17 | 苏州浪潮智能科技有限公司 | Automatic modeling method and device of target detection model |
CN110609560A (en) * | 2019-10-29 | 2019-12-24 | 广州高新兴机器人有限公司 | Mobile robot obstacle avoidance planning method and computer storage medium |
WO2021081809A1 (en) * | 2019-10-30 | 2021-05-06 | 深圳市大疆创新科技有限公司 | Network architecture search method and apparatus, and storage medium and computer program product |
CN113361680B (en) * | 2020-03-05 | 2024-04-12 | 华为云计算技术有限公司 | Neural network architecture searching method, device, equipment and medium |
US11568249B2 (en) | 2020-04-07 | 2023-01-31 | International Business Machines Corporation | Automated decision making for neural architecture search |
US11521028B2 (en) | 2020-04-10 | 2022-12-06 | Toyota Research Institute, Inc. | Meta-learning neural architecture search via graph networks on search space lattices |
CN113570029A (en) * | 2020-04-29 | 2021-10-29 | 华为技术有限公司 | Method for obtaining neural network model, image processing method and device |
CN111516700A (en) * | 2020-05-11 | 2020-08-11 | 安徽大学 | Driver distraction fine-granularity monitoring method and system |
CN111639752B (en) * | 2020-05-29 | 2023-09-26 | 北京百度网讯科技有限公司 | Method, apparatus, device and storage medium for training super network |
CN113837374A (en) * | 2020-06-23 | 2021-12-24 | 中兴通讯股份有限公司 | Neural network generation method, device and computer readable storage medium |
CN111860540B (en) * | 2020-07-20 | 2024-01-12 | 深圳大学 | Neural network image feature extraction system based on FPGA |
CN112101428B (en) * | 2020-08-27 | 2023-11-10 | 上海交通大学 | Image classification method and system based on convolutional neural network |
CN112036512B (en) * | 2020-11-03 | 2021-03-26 | 浙江大学 | Image classification neural network architecture searching method and device based on network clipping |
US11825371B2 (en) * | 2020-11-11 | 2023-11-21 | Samsung Electronics Co., Ltd. | Method and apparatus for distributing traffic load between different communication cells |
CN112489012A (en) * | 2020-11-27 | 2021-03-12 | 大连东软教育科技集团有限公司 | Neural network architecture method for CT image recognition |
CN112465838B (en) * | 2020-12-10 | 2023-01-31 | 桂林理工大学 | Ceramic crystal grain image segmentation method, system, storage medium and computer equipment |
CN112949842B (en) * | 2021-05-13 | 2021-09-14 | 北京市商汤科技开发有限公司 | Neural network structure searching method, apparatus, computer device and storage medium |
CN113344283B (en) * | 2021-06-23 | 2023-11-28 | 国网黑龙江省电力有限公司 | Energy internet new energy consumption capability assessment method based on edge intelligence |
CN113688977B (en) * | 2021-08-30 | 2023-12-05 | 浙江大学 | Human-computer symbiotic reinforcement learning method and device oriented to countermeasure task, computing equipment and storage medium |
CN116151352A (en) * | 2023-04-13 | 2023-05-23 | 中浙信科技咨询有限公司 | Convolutional neural network diagnosis method based on brain information path integration mechanism |
CN116822325B (en) * | 2023-04-29 | 2023-12-26 | 中国人民解放军63963部队 | Diesel engine performance optimization design method and system under overall configuration constraint |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH0554012A (en) | 1991-08-27 | 1993-03-05 | Toshiba Corp | Neural circuit network automatic constituting device using expert system |
US9679258B2 (en) * | 2013-10-08 | 2017-06-13 | Google Inc. | Methods and apparatus for reinforcement learning |
US10275719B2 (en) * | 2015-01-29 | 2019-04-30 | Qualcomm Incorporated | Hyper-parameter selection for deep convolutional networks |
US11080587B2 (en) * | 2015-02-06 | 2021-08-03 | Deepmind Technologies Limited | Recurrent neural networks for data item generation |
EP3360084A1 (en) * | 2015-11-12 | 2018-08-15 | Google LLC | Generating larger neural networks |
US11263514B2 (en) * | 2016-01-13 | 2022-03-01 | Google Llc | Processing and generating sets using recurrent neural networks |
US10586173B2 (en) * | 2016-01-27 | 2020-03-10 | Bonsai AI, Inc. | Searchable database of trained artificial intelligence objects that can be reused, reconfigured, and recomposed, into one or more subsequent artificial intelligence models |
US20180336453A1 (en) * | 2017-05-19 | 2018-11-22 | Salesforce.Com, Inc. | Domain specific language for generation of recurrent neural network architectures |
-
2018
- 2018-07-17 EP EP18749981.9A patent/EP3583553A1/en active Pending
- 2018-07-17 CN CN201880022762.8A patent/CN110476172B/en active Active
- 2018-07-17 JP JP2019553406A patent/JP6963627B2/en active Active
- 2018-07-17 CN CN202410092735.5A patent/CN117892774A/en active Pending
- 2018-07-17 WO PCT/US2018/042456 patent/WO2019018375A1/en unknown
- 2018-07-19 US US16/040,067 patent/US10521729B2/en active Active
-
2019
- 2019-11-05 US US16/674,801 patent/US11651259B2/en active Active
-
2023
- 2023-04-20 US US18/137,398 patent/US20230252327A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US11651259B2 (en) | 2023-05-16 |
EP3583553A1 (en) | 2019-12-25 |
US20190026639A1 (en) | 2019-01-24 |
WO2019018375A1 (en) | 2019-01-24 |
US20200065689A1 (en) | 2020-02-27 |
US20230252327A1 (en) | 2023-08-10 |
CN110476172B (en) | 2024-01-30 |
CN110476172A (en) | 2019-11-19 |
CN117892774A (en) | 2024-04-16 |
US10521729B2 (en) | 2019-12-31 |
JP2020522035A (en) | 2020-07-27 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6963627B2 (en) | Neural architecture search for convolutional neural networks | |
JP6828121B2 (en) | Training neural networks with prioritized empirical memory | |
JP6817431B2 (en) | Neural architecture search | |
JP6926203B2 (en) | Reinforcement learning with auxiliary tasks | |
KR102242516B1 (en) | Train machine learning models on multiple machine learning tasks | |
JP7247274B2 (en) | Asynchronous deep reinforcement learning | |
JP6827539B2 (en) | Training action selection neural networks | |
JP7043596B2 (en) | Neural architecture search | |
CN110520868B (en) | Method, program product and storage medium for distributed reinforcement learning | |
JP2021504844A (en) | Neural architecture search using performance prediction neural network | |
EP3602419B1 (en) | Neural network optimizer search | |
JP2019517074A (en) | Reinforcement learning using pseudo counts |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20191125 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20201221 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20210112 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20210412 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20210921 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20211015 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 6963627Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |