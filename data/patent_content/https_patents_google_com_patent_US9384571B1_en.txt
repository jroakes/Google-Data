US9384571B1 - Incremental updates to propagated social network labels - Google Patents
Incremental updates to propagated social network labels Download PDFInfo
- Publication number
- US9384571B1 US9384571B1 US14/024,330 US201314024330A US9384571B1 US 9384571 B1 US9384571 B1 US 9384571B1 US 201314024330 A US201314024330 A US 201314024330A US 9384571 B1 US9384571 B1 US 9384571B1
- Authority
- US
- United States
- Prior art keywords
- matrix
- graph
- label
- labels
- node
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06T—IMAGE DATA PROCESSING OR GENERATION, IN GENERAL
- G06T11/00—2D [Two Dimensional] image generation
- G06T11/20—Drawing from basic elements, e.g. lines or circles
- G06T11/206—Drawing of charts or graphs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q10/00—Administration; Management
- G06Q10/10—Office automation; Time management
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
- G06F16/235—Update request formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
- G06F16/2358—Change logging, detection, and notification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q50/00—Systems or methods specially adapted for specific business sectors, e.g. utilities or tourism
- G06Q50/01—Social networking
Definitions
- This specification relates to information presentation.
- the Internet provides access to a wide variety of resources. For example, video and/or audio files, as well as web pages for particular subjects or particular news articles, are accessible over the Internet. Access to these resources presents opportunities for other content (e.g., advertisements) to be provided with the resources.
- a web page can include slots in which content can be presented. These slots can be defined in the web page or defined for presentation with a web page, for example, along with search results.
- Social networks can permit users to post information about themselves and communicate with other people, such as their friends, family, and co-workers. Some social networks permit users to specify links (e.g., connections or relations) with other users and affinity or lack thereof to certain content or entities. Additionally, social network users may provide descriptions of their interests and disinterests (e.g., what they like or don't like), compose stories, describe their lives, etc. Some users may generate a great amount of content, while other users may generate little or no content. User interests and disinterests can be determined implicitly, such as from user actions, e.g., web pages visited, ads clicked, etc.
- Social networking systems can include information about a user's social network connections. For example, the information can identify other individuals that the user has declared as friends, celebrities of whom the user has declared himself a fan or follower, vendors that the user has decided to follow or subscribe, interest groups that the user has placed himself within, and other social connections.
- companies can provide improved personalized recommendations and personalized content, e.g., based on the user's interests and various social connections.
- Content selection algorithms can utilize a user's social network connections to (1) inherit preferences from a user's friends/connections, and (2) propagate or influence the user's friends/connections with preferences associated with the user.
- the preferences can be based on interests and disinterests of the users, which can be propagated through a social network.
- one innovative aspect of the subject matter described in this specification can be implemented in methods that include a method implemented by a computer system for updating graphs.
- the method includes identifying, by the computer system, a set of labels to be associated with nodes of a graph, the labels including one or more designators for describing an attribute that is associated with a given node.
- the method further includes providing the graph, wherein one or more labels of the identified set of labels have been assigned to each node and wherein an initial set of weights for the labels have been assigned reflecting a magnitude of a contribution of an associated label to a characterization of a respective node and wherein at least a portion of the labels are assigned based on a propagation from other nodes that are connected to a given node in the graph.
- the method further includes identifying a change in the graph that when propagated will affect one or more other nodes in the graph.
- the method further includes generating sparse matrices that describe the change containing nonzero entries only in those rows wherein connection weights have changed or labels have changed or both.
- the method further includes generating, by one or more processors, a new graph that includes the change, including changed weights for one or more nodes affected by the change using the sparse matrices without having to recalculate weights for other nodes in the graph not affected by the change.
- the nodes can represent users in a social network, and the labels can represent characteristics that are associated with a given user.
- the change can be a change to add or subtract one or more nodes to/from the graph.
- the change can be a change to add or subtract one or more labels to/from the graph.
- the graph can be represented by a matrix of weights that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a weight that reflects a magnitude of contribution of the label associated with the given column to the node.
- the matrix of weights can be constructed from an un-propagated matrix of weights and a matrix of connections, wherein the un-propagated matrix of weights is a matrix that includes rows and columns, and wherein a row corresponds to a node, and a column corresponds to a label, wherein an entry in a row at a column indicates a weight that reflects a magnitude of contribution of the label associated with the given column to the node before taking into consideration effects from labels propagated from connections to a given node, and wherein the matrix of connections includes rows and columns that represent nodes and wherein an entry in the matrix of connections represents a degree of connection between a given pair of nodes in the graph.
- the sparse matrices can include a sparse matrix of weights and a sparse matrix of connections.
- the new graph can be represented by a new matrix that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a new weight that reflects a magnitude of contribution of the label associated with the given column to the node after the change.
- Generating a new graph using the sparse matrices can include determining a change to label weights included in the graph including determining a connection change matrix and a weight change matrix that reflect changes to the connections and changes to the weights as compared to the original connections and weights used to generate the graph, respectively.
- Generating the new graph can include generating a matrix ⁇ X that represents the new graph in accordance with the formula: ⁇ X ⁇ W ⁇ X+ ⁇ WX 0 + ⁇ L, wherein W is a weight matrix; wherein ⁇ W is a weight delta matrix; wherein X 0 is a matrix of final-label weights, where each row in the matrix corresponds to a node and each column in the matrix corresponds to a label; wherein X 0 ⁇ W 0 X 0 +L 0 ; wherein W 0 is the matrix of node-to-node connection weights; and wherein L 0 is the matrix of prior-label weights.
- the rows of the un-propagated weight matrix and the rows and columns of the matrix of connections can be normalized prior to constructing the matrix.
- the method can further include using the new matrix to select content for distribution to users in a social network based on labels associated with a user and respective weights.
- the nodes can represent users in a social network, and the labels can represent characteristics that are associated with a given user.
- the change can be a change to add or subtract one or more nodes to/from the graph.
- the change can be a change to add or subtract one or more labels to/from the graph.
- the graph can be represented by a matrix of weights that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a weight that reflects a magnitude of contribution of the label associated with the given column to the node.
- the matrix of weights can be constructed from an un-propagated matrix of weights and a matrix of connections, wherein the un-propagated matrix of weights is a matrix that includes rows and columns, and wherein a row corresponds to a node, and a column corresponds to a label, wherein an entry in a row at a column indicates a weight that reflects a magnitude of contribution of the label associated with the given column to the node before taking into consideration effects from labels propagated from connections to a given node, and wherein the matrix of connections includes rows and columns that represent nodes and wherein an entry in the matrix of connections represents a degree of connection between a given pair of nodes in the graph.
- the sparse matrices can include a sparse matrix of weights and a sparse matrix of connections.
- the new graph can be represented by a new matrix that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a new weight that reflects a magnitude of contribution of the label associated with the given column to the node after the change.
- Generating a new graph using the sparse matrices can include determining a change to label weights included in the graph including determining a connection change matrix and a weight change matrix that reflect changes to the connections and changes to the weights as compared to the original connections and weights used to generate the graph, respectively.
- Generating the new graph can include generating a matrix ⁇ X that represents the new graph in accordance with the formula: ⁇ X ⁇ W ⁇ X+ ⁇ WX 0 + ⁇ L, wherein W is a weight matrix; wherein ⁇ W is a weight delta matrix; wherein X 0 is a matrix of final-label weights, where each row in the matrix corresponds to a node and each column in the matrix corresponds to a label; wherein X 0 ⁇ W 0 X 0 +L 0 ; wherein W 0 is the matrix of node-to-node connection weights; and wherein L 0 is the matrix of prior-label weights.
- the rows of the un-propagated weight matrix and the rows and columns of the matrix of connections can be normalized prior to constructing the matrix.
- the method can further include using the new matrix to select content for distribution to users in a social network based on labels associated with a user and respective weights.
- the system includes a data structure generator for creating a graph that represents a network, where users of the network are represented by user nodes in the graph, wherein the graph includes a set of labels to be associated with nodes in the graph, the labels including designators for describing at attribute that is associated with a given node, wherein one or more labels of the identified set of labels have been assigned to each node and wherein an initial set of weights for the labels have been assigned reflecting a magnitude of a contribution of an associated label to a characterization of a respective node and wherein at least a portion of the labels are assigned based on a propagation from other nodes that are connected to a given node in the graph.
- the system also includes a classification module for associating labels with the users, the labels including one or more designators for areas of interest and areas of disinterest for a user.
- the system also includes a node relationship/association module for: determining, for each respective node having one or more labels, weights for the labels, each weight reflecting a magnitude of a contribution of an associated label to a characterization of the respective node; grouping the labels for a given node in two groups, one associated with areas of interest and one associated with areas of disinterest; separately normalizing the labels for the two groups; propagating labels for a respective node to other nodes that are related to the respective node by a relationship including normalizing the labels for two groups as a single group; identifying a change in the graph that when propagated will affect one or more other nodes in the graph; generating sparse matrices that describe the change containing nonzero entries only in those rows wherein connection weights have changed or labels have changed or both; and generating, by one or more processors, a new graph
- Particular implementations may realize none, one or more of the following advantages.
- changes in the network can be quickly and easily made even where the network is substantial in size.
- Labels e.g., associated with user interests, video recommendations, or stock funds
- nodes e.g., that represent other users, other videos, or other funds
- the use of sparse matrices can improve efficiency when propagating labels in a network (e.g., a social network) and can lead to near-real-time and accurate content selection based on propagated labels.
- FIG. 1 is a schematic of an example system for determining label information.
- FIG. 2 is a box diagram of an example system that determines labels for users of a social network system.
- FIG. 3A is a flow chart of an example method for propagating labels.
- FIG. 3B is a flow chart of an example method for using sparse matrices to update labels and weights in a graph.
- FIGS. 4A-4D show exemplary information used for generating labels for users and groups of users.
- FIG. 5 shows an example method for determining labels based on a neighboring node's labels.
- FIGS. 6A-6E show example graphs of users in a social network, where an algorithm is used to determine label weights for the users.
- FIG. 7 is an alternative graph for use in inferring user interests.
- FIG. 8 is a block diagram of example computing devices that may be used to implement the systems and methods described in this document.
- This document describes systems and techniques for determining labels based on users' interests and disinterests.
- this document describes systems and techniques for updating weights associated with labels when conditions in the network change. Such updates can be accomplished quickly and efficiently, particularly for those portions of the network removed or unaffected by the changes.
- the systems and techniques are described primarily in the context of social networks and user interests. However, the systems and techniques are equally applicable to other graph and label propagation applications.
- Other examples include: video-to-video graphs, based on co-view data, that can then be used to provide video recommendations that have watched one or more videos in the graph; domain-to-domain graphs, based on cross-links, that can be used to provide better topic labels for domains with less readily available or reliable text; financial fund-to-fund graphs based on correlated price movements in historical quotes, that can provide suggestions for comparable funds to invest in, given an interest in one fund.
- the techniques disclosed are applicable to any or all such graphs, as well as others not mentioned here.
- Social networks can host information about, and generated by, the social networks' users.
- users can create or have inferred user content 102 (e.g., user profiles), which can include interests and disinterests, stories, facts or descriptions about a user.
- user interests and disinterests can be based on user actions, and/or user affinity designations (e.g., from what the user likes or dislikes, content on which the user performs a +1 (plus one) or ⁇ 1 (minus one) action, or any other user-specified preference or user-performed action related to interests and disinterests).
- users can specify social relationships with other users. For example, a user can specify other users that are “friends.” In another example, a user can specify that they are similar or dissimilar to another user.
- Some implementations can provide incremental updates to a network (e.g., a social network) based upon just the portion of the network that has changed since the last update.
- Updating a network in the context of the techniques described herein, can include, for example, propagating interests and disinterests (e.g., in the form of labels) from one user to another, and updating matrices, for example, that represent connections between users, interests of users, and weights associated with those interests.
- Incremental updates to a network can be critical, for example, for use in network-based content selection systems that work on large social networks.
- Conventional systems may run propagation algorithms in batch mode (e.g., uniformly over the entire social network).
- changes in the network e.g., social network
- changes in the network when adding a new user can have an effect over a large portion of, or even the entire, network.
- only a small portion of the network need be updated in each iteration.
- Updates can occur in three common scenarios.
- a new user joins the social network and specifies a few friends (e.g., people) to follow.
- the techniques described herein can quickly inherit preferences and propagate the user's preferences to his/her friends and friends-of-friends, etc., without requiring a full (e.g., batch-style) update to the entire social network.
- a new advertiser joins the social network
- systems that provide content can quickly recommend people to follow the advertiser based on even a small initial group of users who follow the advertiser.
- the network can be quickly adapted to this new information without requiring a full (e.g., batch-style) update.
- Other types of changes to the network are possible.
- the methods proposed will allow for a quick and efficient mechanism for responding to the changes without having to re-process the entire network. Processing the network is discussed in greater detail below.
- techniques for incrementally updating an existing network can be represented using a series of equations.
- the original network X 0 can be given by: X 0 ⁇ W 0 X 0 +L 0 (1)
- L 0 is a matrix of prior-label weights.
- Each row in the matrix can correspond to a node in a graph representing the network.
- Each node in the graph is an entity in the network, such as a person, a group, a company, or some other entity.
- Each column in the matrix can correspond to a label, such as an interest, a keyword, a category, or some other label that can be associated with an entity.
- prior-label weights can be set up based on information known about that node itself (that is information known about a user from, for example, his profile without any consideration for the influence one or more others that are connected to the user may have).
- Known information can include, for example, the “name” of the node, e.g., to allow for recommendations for new connections, once the names had propagated through the graph).
- Known information for interest groups or vendors can include, for example, the categories that best describe the node (e.g., for ExampleBrandName, women's apparel, women's shoes, women's handbags, or other categories).
- the last column in L 0 can corresponds to an uncertainty label that indicates how much uncertainty is added to each node's label as it is propagated through the network.
- all entries in L 0 can be non-negative, with dislikes (e.g., disinterests) represented separately from likes (e.g., interests), even for the same item.
- all entries in the last column can be positive, e.g., to insure system-wide stability.
- W 0 is the matrix of node-to-node connection weights. Rows and columns in W 0 can correspond to nodes, with any given cell in the matrix indicating a connection between the nodes represented by the corresponding row and column.
- the weight can indicate, for example, how much the two nodes are “related” to each other. For example, the weight can indicate how many followers two advertisers A and B have in common, how many friends two users share, and a variety of other measures.
- Equation (1) X 0 is the matrix of final-label weights, where each row corresponds to a node, and each column corresponds to a label. This corresponds, for example, to the labels (e.g., keywords, categories, etc.) that are assigned to an entity (e.g., an advertiser, person, etc.).
- the final-label weights can be based on the best label set, given the prior label weights and any propagated label weights. In some implementations, if Equation (1) is run to convergence (e.g., so that the difference between X 0 and W 0 X 0 +L 0 is negligibly small), then these values can become the steady-state label values.
- the steady-state labels will have an L 1 norm of one for each row.
- the last column, corresponding to the uncertainty label, can provide a measure of how strongly the given label set is supported by the matrix and prior labels.
- extra rows and columns can be introduced into the original descriptions given by W 0 , L 0 and X 0 .
- the extra rows and columns that are added correspond to the number of nodes and labels that are introduced into the network.
- the rows and columns that are added to W 0 can have all zero values.
- the rows and columns that are added to L 0 and X 0 can have all zero values.
- the newly added rows are allowed to be identically zero in the “pre-change” matrices, since they are only being added to simplify processing for using change matrices.
- This approach can be used to address an expanding network with the same framework as is used for the network before expansion (e.g., an expansion caused by someone already in the network adding a new friend or a new interest).
- network changes e.g., expanding/adding connections, removing connections, changing weights on existing connections
- Equation (4) can be solved iteratively and, for example, more efficiently than the full solution (e.g., of re-computing the entire matrix) because the delta matrices are typically very sparse.
- other techniques can be used, such as techniques that use stabilized bi-conjugate gradient descent or Gaussian elimination.
- the final solution for a matrix of updated derived label distributions can be given by adding ⁇ X to the steady-state solution for the original matrix WX 0 .
- improvements can be made to an initial estimate for ⁇ X.
- an initial estimate for ⁇ X can be made.
- the initial estimate can be made by setting to zero all of the rows where ⁇ L ⁇ 0 and ⁇ W ⁇ 0 and setting ⁇ X to WX 0 +L ⁇ X 0 in those rows where there was a connection or prior-label weight change.
- content delivery systems can select online content (e.g., advertisements or “ads”) for persons based on their interests and/or disinterests, e.g., determined from the content of their user profiles hosted on the social network.
- content e.g., advertisements or “ads”
- labels can be associated with a user, and the labels can be used in selecting content (e.g., ads) to that user.
- a user may not provide enough (or any) information (e.g., in the user profile), or the user's interests/disinterests may not be known, which may make it difficult to select online content that is relevant for the user.
- content delivery systems can select content that corresponds to a user's interests, while avoiding selecting content that corresponds to a user's disinterests.
- Advertising systems are just one example type of content provider which can select content using labels based on user interests and disinterests.
- Labels can be associated with (or assigned to) a user in various ways. For example, labels can be assigned based on an evaluation of content associated with a user, including the user's likes/dislikes, web pages visited by the user, the user's location, demographic information for the user, and so on. Labels can be assigned based on a combination of explicit designations (e.g. information supplied by the user) and implicit determinations (e.g., labels inferred for the user). Implicit determinations can be based on user interaction with content, such as click-throughs, conversions, etc. Labels associated with each user can also reflect a relative level of interest or disinterest, such as by using percentages.
- percentages ranging from 1%-30% can designate a low interest, 31%-70% can designate a moderate interest, and 71%-100% can designate a high interest.
- interests and disinterests of other users that are related to the first user can be used for selecting content for the user.
- labels associated with a user's friends can be propagated to the user, and the propagated labels can be used to select content.
- a first user Isaac may not have any information in his profile except that he has two friends, Jacob and Esau.
- the server system 104 can use information from Jacob's and Esau's profiles and/or other interest/disinterest information to infer information for Isaac's interests/disinterests.
- the inferred information can be used to generate online ads that are displayed when Isaac's profile is viewed.
- Selecting content can occur regardless of whether the interests and/or disinterests are explicitly determined for the user, or are implicitly determined, such as by user actions or by propagating labels (and interests/disinterests) from other users.
- user B's interests can be propagated to user A as disinterests
- user B's disinterests can be propagated to user A as interests.
- labels can be propagated to user groups, e.g., user networks or user circles.
- a label that is propagated to a user group can be propagated to each user in the user group, or to the user group itself, or a combination of both.
- a label when propagated from node A to node B, as used in this disclosure, it means that, if node B already has that label, then node B's label weight is updated based on the value of the node A's label weight for the same label. If node B does not already have that label, then the label is created for node B and is assigned a label weight that is based on the value of node A's label weight for that label. Assigned weights can be normalized as will be discussed in greater detail below.
- profiles for social network users may include terms or colloquialisms that do not correspond to keywords that advertisers use to select content from their campaigns. These terms or colloquialisms can be mapped to keywords that are used by advertisers by inferring associations between the terms or colloquialisms (collectively referred to as non-advertising keywords) and the keywords.
- the inferred associations between the non-advertising keywords and the advertising keywords can be based on social relationships specified in user profiles.
- Jacob may include a term in his profile, such as “hax0r” (i.e., hacker) that does not correspond to advertising keywords.
- Jacob's profile specifies that Leah and Rachel are friends.
- Both Leah and Rachel include terms in their profile, such as “Ajax” (i.e., asynchronous JavaScript and XML) and Perl (Practical Extraction and Reporting Language) that do correspond to advertising keywords.
- a content delivery system such as the server system 104 , can be used to generate associations between Leah and George's terms and Jacob's terms so that content selected for Leah and Rachel based on the keywords in their profile can also be used to select content for Jacob because an association is inferred between Jacob's profile and terms in Leah and George's profiles.
- user interests and disinterests can be determined implicitly based on user activity.
- a user's search logs or search history can be used to determine which web pages the user has visited. If, for example, web histories for the user indicate that the user spent a significant amount of time on sports-related websites, then an implicit determination can be made that the user is interested in sports. Further, the relative number of sports-related websites visited and/or the relative amount of time that the user spent on the web sites can indicate the degree of interest of the user. Conversely, by not visiting politically-related websites, or by quickly clicking away from such web sites, an implicit determination can be made that the user is disinterested in politics. Search logs and search histories can be anonymized so that the privacy of users is protected.
- quasi-unique identifiers can be associated with users, but the actual identifying information of the users may not be stored in the search logs.
- any identified user preferences or user interactions can be generalized (for example, generalized based on user demographics) rather than associated with a particular user. Encryption and obfuscation techniques can also be used to protect the privacy of users.
- FIG. 1 is a schematic of an example system 100 for determining label information.
- the label information can include content-selection labels for a first social network user that is determined based on label information of another user who is socially related to (e.g., a friend of) the first social network user.
- the system includes a social network system 106 and the server system 104 discussed previously, which can, for example, determine associations between content in individual users' profiles based on social relationships specified by the profiles.
- the social network system 106 includes the user content 102 , which can include user-generated content, such as user interests and disinterests, user blogs, postings by the user on the user's profile or other users' profiles (e. g., comments in a commentary section of a web page), a user's selection of hosted audio, images, and other files, and demographic information about the user, such as age, gender, address, etc.
- user-generated content such as user interests and disinterests, user blogs, postings by the user on the user's profile or other users' profiles (e. g., comments in a commentary section of a web page), a user's selection of hosted audio, images, and other files, and demographic information about the user, such as age, gender, address, etc.
- the user content 102 can include social relationships that specify associations between users of the social network system 106 .
- a user Joshua may list Aaron and Caleb as friends, and Joshua may be a member of the Trumpet Player Society, which includes Izzy as a second member.
- the specified friendship and group membership relationships can be used to infer a similarity in user interests among the users Joshua, Aaron, Caleb, and Izzy.
- the server system 104 can use a label generator 111 to create labels for users for which interests and disinterests are known along with labels for users who are less well-known (e.g., users having incomplete or sparsely populated user profiles) based on content associated with related users (e.g., profiles of friends or members of the same group, clubs, society, etc.).
- a label generator 111 to create labels for users for which interests and disinterests are known along with labels for users who are less well-known (e.g., users having incomplete or sparsely populated user profiles) based on content associated with related users (e.g., profiles of friends or members of the same group, clubs, society, etc.).
- the labels can include keywords associated with the profiles.
- a label may be a keyword (e.g., “cars”) that is included in a web page profile.
- the labels may be categories associated with content in a profile, for example, a profile can include content describing Corvettes, Vipers, and Hugos.
- a label applied to the profile may be “cars” based on predetermined associations between the Corvette, Viper, and Hugo terms and the category “cars.”
- the server system 104 includes a data store 112 , where information about the labels can be stored.
- each user profile may be associated with more than one label.
- the associations between each profile and corresponding labels can be stored in a data structure, such as a label weight table 114 .
- the label weight table 114 can also include label weights that indicate a possible interest or disinterest level for each label.
- Adam's profile can include content about gardening and animal husbandry, but twice as much content may be focused on gardening.
- the label weight table 114 can include an interest label weigh of 0.66 for gardening and 0.33 for animal husbandry under Adam's profile entry, which indicates the profile includes twice as much information on gardening as animal husbandry.
- the data store 112 can also include advertising information 116 used to generate online advertisements (ads) 120 directed to profiles hosted by the social network system 106 .
- the online advertisements 120 can be transmitted by an ad server 118 hosted by the server system 104 .
- the ad server 118 can use the label information in the label weight table 114 to generate or select online ads 120 that are relevant to the user based on labels associated with the user profiles.
- the server system 104 can transmit, as indicated by arrow 122 , the selected ads 120 to the social network system 106 for display with the user profiles or to the users associated with the user profiles. While reference is made to selecting and serving ads, other forms of sponsored content can be served.
- FIG. 2 is a diagram of an example system 200 that shows a server system 202 and infers labels for user profiles hosted by a social network system.
- the server system 202 includes a label generator 204 , a first data store 206 that includes label and content information, a second data store 208 that includes predetermined labels 210 , and a content server 212 .
- the server system 202 can receive content 214 , e.g., including user interests and disinterests from user profiles of a social network system, as indicated by arrow 216 .
- the server system can use the content 214 to identify or generate labels based on the content 214 , where the labels can be used to generate or identify online content items (e.g., ads 218 ) that are selected based on users or user profiles.
- content 214 e.g., including user interests and disinterests from user profiles of a social network system, as indicated by arrow 216 .
- the server system can use the content 214 to identify or generate labels based on the content 214 , where the labels can be used to generate or identify online content items (e.g., ads 218 ) that are selected based on users or user profiles.
- online content items e.g., ads 218
- the label generator 204 includes a data structure generator 220 that can create a data structure used to infer the labels.
- the data structure generator 220 can generate a graph, where each user is represented by a node in the graph.
- the graph data structure is just one of several data structures or mechanisms that can be used to represent users and infer labels. As such, no physical graph need be drawn in order to infer labels among users. In some implementations, multiple graphs can be used.
- the examples that follow use graphs that include nodes that represent users, but other data structures can be used.
- the data structure generator 220 can include a node relationship/association module 222 that links the nodes with edges based on social relationships specified by the users. For example, a user Adam may specify in his profile that Seth is a friend.
- the node relationship/association module 222 can join the user nodes for Adam and Seth with an edge.
- the edges may be bi-directional or uni-directional; however for the purposes of clarity, the edges in the following examples are bi-directional unless otherwise specified.
- the label generator 204 also includes a classification module 224 , which can associate users of the social network system with labels, such as the predetermined labels 210 in the second data store 208 .
- the classification module 224 can use text analysis techniques, such as those described in “A Comparative Study on Feature Selection in Text Categorization Source,” Yang, Yiming and Pedersen, Jan O., Proceedings of the Fourteenth International Conference on Machine Learning, pages 412-420; “Machine learning in automated text categorization,” Sebastiani, Fabrizio, ACM Computing Surveys (CSUR) archive, Volume 34, Issue 1 (March, 2002), pages 1-47; and “Text Categorization with Support Vector Machines: Learning with Many Relevant Features,” Joachims, Thorsten, Lecture Notes In Computer Science, Vol.
- Text analysis can be used to determine labels to associate with user nodes in a generated graph.
- the subject of the analysis can include user profiles, comments posted by a user, descriptions of groups to which a user belongs, etc.
- the predetermined labels 210 can be based on keywords 231 , which are submitted by content sponsors (e.g., advertisers).
- the keywords 231 can include the term “furniture.” This can be used as a predetermined label, which the classifying module 224 associates with users that have profiles that include the term “furniture.” Additionally, the classifying module can associate the users with the label “furniture” if the user profiles include words that are associated with “furniture,” such as chair, table, or home decorating.
- the label generator 220 also includes a label weight modifier module 226 .
- the label weight modifier module 226 can modify label weights associated with users using methods and structures more fully described below. For example, modifications to the weights can occur during propagation of label weights among users or during updates to the data structure, as described below.
- Initial and modified label weights can, in some implementations, be stored in a data structure, such as a label weight table 228 of the first data store 206 .
- the label weight table 228 can include label weights for interest and disinterest labels associated with users, groups of users, or other associations.
- the content server 212 can use information 230 stored in the first data store to generate or select electronic content items that are based on the label or label weights associated with each user.
- the information 230 can include, for example, keywords 231 that a content sponsor selected to associate with their content 232 .
- the information 230 can also include word groups 234 (also referred to as ad groups), which are categories that include related keywords and are associated with content to display when one of the keywords corresponds to a user's interests, e.g., occurs in the user's profile.
- the information 230 can include information 236 about the content sponsors, such as an identifier, payment information, bidding price, etc.
- FIG. 3A is a flow chart of an example method 300 for propagating interest and disinterest labels among user nodes.
- the method 300 includes steps that can be implemented as instructions and executed by a processor in a computer system, e.g., in the server system 202 .
- the method 300 can begin when a set of labels is determined ( 302 ).
- the labels are to be associated with users of a social network.
- the classifying module 224 can identify the labels using the user interest and disinterests 214 .
- the users are represented by nodes in a graph that represents the social network.
- the data structure generator 220 can create a graph that represents the social network, where each user is represented by a node in the graph, and edges in the graph represent social connections (e.g., friendships) between users.
- the labels include one or more designators for areas of interest, and areas of disinterest, for a user.
- labels can include both categories of interest (e.g., Music, Dogs, Movies, Business, etc.) and keywords (Music Star A, Tables, Masks, etc.).
- categories or keywords are selected as labels.
- a subset of categories or keywords can be selected from the superset to use as labels.
- a user may input and/or select particular keywords using a user interface associated with the label generator 204 .
- user selection can specify that the label generator 204 should use the categories such as Opera, Racing, Politics, religion, Stocks, Music, Cats and Dogs as keywords.
- Labels selected in step 302 are used to associate user nodes with the labels ( 304 ).
- the classifying module 224 can classify each user with defined labels, e.g., based on information in their user profile or other content that the user has created.
- the classifying module 224 can use text-classification machine learning algorithms to accomplish the classifications.
- a user can be classified using more than one label.
- the labels used to label user nodes in this step can include labels for user interests and/or disinterests.
- the data structure generator 220 can label user nodes in a graph that represents the users in a social network, as described below.
- the classifying module 224 can attempt to categorize the groups based on text and other content that describes the group or is associated with the group, such as message boards for the group. In some implementations, the classifying module 224 can classify the groups in a substantially similar way as the user classification is accomplished.
- Weights are determined for the labels of each respective node ( 306 ). Each weight reflects a magnitude of a contribution of an associated label to a characterization of the respective node. For example, for any particular user node, there can be several labels which correspond to a user's interest (e.g., an interest in content associated with the label). The user's profile, for example, may indicate that the user has a strong interest in Cats and a small interest in Dogs. As a result, the classifying module 224 , for example, can assign a weight of a greater magnitude to the Cats label, and a weight of a lesser magnitude to the Dogs label. These weights can be added (e.g., by the data structure generator 220 ) to the labels in the node of the graph.
- label nodes having multiple label weights for different labels are also associated with user nodes. These label nodes can “inject” label weights into the user node (e.g., see FIG. 4C ). This is described in more detail in association with FIG. 4C .
- the label generator 204 generates a second data structure, such as a second graph.
- the second graph can also include nodes substantially similar to the first graph, except that each user can be associated with one or more label nodes that reflect a single subject of interest (e.g., see FIG. 7 ).
- the label weights are normalized ( 308 ).
- the normalization occurs for all of the weights in a group that includes both the areas of interest and the areas of disinterest for a particular user.
- the label generator 204 can normalize the label weights to weights between a 0 and 1, where the each weight reflects the label weight's contribution relative to the other label weights' contributions.
- the normalized weights of the interest labels and disinterest labels, as a combined group can sum to 1.0.
- the pre-normalized label weights for a user node include a 0.75 interest weight for religion, a 0.25 interest weight for Music, a 1.0 disinterest weight for Stocks, and a 0.5 disinterest weight for Cats, then the normalized weights are 0.3, 0.1, 0.4 and 0.2, respectively.
- Labels and/or label weights for a respective node are propagated to other nodes that are related to the respective node by a relationship ( 310 ).
- the label generator 204 and/or the label weight modifier module 226 can determine, for a selected user node, the neighboring user nodes (e.g., representing the user's friends) that are linked to the selected user node, e.g., with edge connections on the graph. Then, the label weights in the neighboring user nodes can be used to generate a new label (e.g., if the label has not been assigned to the user node) or modified label weight for the selected user node. This step can be repeated for all user nodes in the graph.
- the step can be repeated several times until, for example, until the label weights at the user nodes stop changing significantly.
- Other indicators can be used to control when the repetitions of the step can stop, including, for example, the number of iterations of propagation. Simple and efficient propagation methods and systems are described in greater detail below.
- steps 306 - 310 can also be performed on the second graph described in association with step 306 .
- the label generator 204 can select and compare the resulting label weights magnitudes for a corresponding user node from both the first and second graphs.
- the label generator 204 can combine the label weight magnitudes from each graph through linear weighting to determine a final label weight magnitude (e.g., the first graph's label weight contributes 0.7 and the second graph's label weight contributes 0.3).
- the weights can be weighed equally to determine the final label weight (e.g., 0.5, 0.5), or the label generator 204 can give one weight its full contribution while ignoring the weight from the other graph (e.g., [1.0, 0.0] or [0.0, 1.0]).
- the label generator 204 can use a cross-validation method to set the contribution weights for label weight magnitudes from each graph. For example, the label generator 204 can access user nodes in a graph, where the user nodes have label weight magnitudes that are known. The label generator 204 can compare the actual label weight magnitudes with the known label weight magnitudes. The label generator 204 can then weight each graph based on how closely its weights match the known label weights.
- the label generator 204 can compare the label weight magnitudes to an expected a priori distribution, instead of (or in addition to) examining the final label magnitudes. For example, if a summed weight of label_A across all label nodes is 8.0 and the weight of label_B across all of the label nodes is 4.0, then the a priori distribution suggests that label_A may be twice as likely to occur as label_B. The label generator 204 can use this expectation to calibrate the label weight magnitudes for each user node. If in node n, label_A weight is 1.5 and label_B weight is 1.0, then the evidence for label_A, although higher than label_B, is not as high as expected because the ratio is not as high as the a priori distribution. This decreases the confidence that the difference in magnitudes is meaningful. A confidence factor can be translated back into the weights.
- the label generator 204 can increase the weight for a label having a lower-than-expected weight. For example, if label_A's weight is expected to be three times the weight of label_B, but was only 1.1 times greater than label_B, then the label generator 204 can assign label_B a higher weight, e.g., in proportion to the expected weight.
- the confidence factor can be kept as a confidence measure, which can be used, for example, by machine learning algorithms to weight the resultant label weight magnitudes.
- the label generator 204 can compare the label weight magnitudes based on an end distribution of magnitudes across all nodes. For example, the label generator 204 can measure how different a particular node's distribution is from an average, as calculated across all nodes in a graph.
- the content server 212 can use the labels to select content (e.g., ads) to display. For example, if a user node is associated with the label Music Star A, the content server 212 can select music content to display with a user profile associated with the user node. In another example, if the label is religion, then the content server 212 can select content that is determined to be religious or content that a sponsor specified to be displayed based on an occurrence of terms relating to religion.
- content e.g., ads
- the content server 212 can factor in how much a sponsor is willing to pay for display of the content, such as the cost per impression/click/transaction/etc., to determine whether to display a content item and which content item to display.
- FIG. 3B is a flow chart of an example method 320 for using sparse matrices to update labels and weights in a graph, for example in a graph associated with users and interests in a social network.
- the method 320 includes steps that can be implemented as instructions and executed by a processor in a computer system, e.g., in the server system 202 .
- a set of labels to be associated with nodes of a graph is identified ( 322 ).
- the labels include one or more designators for describing an attribute that is associated with a given node.
- the server system 202 can identify a graph that includes a set of labels associated with nodes.
- the labels for example, can correspond to interests and disinterests of users in a social network.
- the labels can be represented in a graph, e.g., in a matrix of nodes versus labels.
- the designators for example, can be the names of entities or subjects that are associated with each of the nodes.
- the nodes can represent users in a social network
- the labels can represent characteristics that are associated with a given user.
- the graph can represent interests (and disinterests) of users in a social network.
- the graph is provided, wherein one or more labels of the identified set of labels have been assigned to each node ( 324 ).
- An initial set of weights for the labels can be assigned reflecting a magnitude of a contribution of an associated label to a characterization of a respective node.
- At least a portion of the labels are assigned based on a propagation from other nodes that are connected to a given node in the graph. For example, columns in the matrix can represent labels for which each row in the matrix can have a weight.
- the weights for example, indicate the node's characterization with that label, such as a user's interest in the entity/subject associated with the label.
- the weights can be based on interest information for the user as well as interest and disinterests propagated from other users, as described above.
- the weights for example, can indicate a level of interest or disinterest by the user in the subject represented by the label.
- the matrix of user interests can be represented by X 0 , as described above for Equation (1).
- the graph can be represented by a matrix of weights that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a weight that reflects a magnitude of contribution of the label associated with the given column to the node.
- users' interests in a social network can be represented by a two-dimensional matrix. Each row in the matrix can correspond to a user in the social network. Each column in the matrix can correspond to a label associated with an interest and/or disinterest. Any one cell in the matrix can include a weight associated with an extent of user's interest or disinterest in the interest identified by the label.
- a cell contains a zero value, for example, then the user (represented by the row) has no interest in the subject identified by the label (represented by the column).
- separate matrices can exist for each of interests and disinterests, or for other purposes.
- the matrix of weights can be constructed from an un-propagated matrix of weights and a matrix of connections.
- the un-propagated matrix of weights e.g., W 0
- W 0 can be a matrix that includes rows and columns, where each row corresponds to a node (e.g., user), and each column corresponds to a label.
- An entry in a row at a column can indicate a weight that reflects a magnitude of contribution of the label associated with the given column to the node (e.g., user) before taking into consideration effects from labels propagated from connections to a given node (e.g., user).
- the matrix of connections for example, can include rows and columns that represent nodes (e.g., users), and an entry in the matrix of connections can represent a degree of connection between a given pair of nodes in the graph.
- rows of the un-propagated weight matrix and the rows and columns of the matrix of connections can be normalized prior to constructing the matrix.
- the normalization can include normalizing the weights for a particular node so that all of the weights associated with the connected nodes and labels total to one. This can occur separately, for example, for weights associated with interests and weights associated with disinterests. Other types of normalization can occur.
- a change in the graph is identified that when propagated will affect one or more other nodes in the graph ( 326 ).
- the change can be a change in the social network, such as the addition of a new user, changes to connections among users, or a new interest shown by a user.
- the change can be a change to add or subtract one or more nodes to/from the graph.
- a new user that is added to a social network can be represented in the graph as an added node.
- an existing user that is deleted from the social network can be represented by deleting a node (e.g., corresponding to the user) from the graph. If the graph is represented by a matrix, for example, then adding a node can be represented by adding a row in the matrix, and deleting a node can be represented by deleting a row from the matrix.
- the change can be a change to add (or subtract) one or more labels to (or from) the graph.
- an added label e.g., based on a new user interest
- a subtracted label can be represented in the graph by deleting a column, or by modifying a column in the graph for the node (e.g., user) for which there is no longer an interest.
- Sparse matrices are generated that describe the change ( 328 ).
- the sparse matrices contain nonzero entries only in those rows wherein connection weights have changed or labels have changed or both.
- the sparse matrices can include a sparse matrix of weights and a sparse matrix of connections, e.g., ⁇ W and ⁇ L as described above. Other sparse matrices can also be used.
- a new graph is generated that includes the change ( 330 ).
- the new graph includes changed weights for one or more nodes affected by the change using the sparse matrices without having to recalculate weights for other nodes in the graph not affected by the change.
- the new graph that includes the new weights can be given by ⁇ X in Equation (4), as described above.
- the new graph can be represented by a new matrix that includes rows and columns, wherein a row corresponds to a node, a column corresponds to a label, and wherein an entry in a row at a column indicates a new weight that reflects a magnitude of contribution of the label associated with the given column to the node after the change.
- ⁇ X in Equation (4) includes new weights for cells in the matrix that have been generated from the sparse matrices ⁇ L and ⁇ W, as described above.
- generating a new graph can use the sparse matrices includes determining a change to label weights included in the graph including determining a connection change matrix and a weight change matrix that reflect changes to the connections and changes to the weights as compared to the original connections and weights used to generate the graph, respectively.
- the sparse matrices ⁇ L and ⁇ W, as described above include changes to labels and weights that reflect changes to the social network.
- the process 320 can be used for video recommendations.
- the connection graph can be constructed from co-view data, e.g., including information about videos that were watched by the same people within 24 hours of each other.
- each node can represent a video, and weights that are propagated are weights associated with the same video, e.g., so that propagation can be used to suggest videos to watch, based on view data from the population of users' co-views.
- the process 320 can be used for topic inference for top-level domains, e.g., for selecting advertising to be shown on those sites, for example.
- the connection graph can be constructed from the set of links that connect across domains.
- the un-propagated weights can be associated, for example, with the topic categories that are determined by doing text classification on each of the pages within the domain and aggregating the results.
- the process 320 can be used for financial analyses and recommendations.
- the connection graph can be constructed from the observed positive and negative correlations in price fluctuations after removing the full-market correlation.
- the un-propagated weights can be associated, for example, with the trading volume of each fund. The propagated labels would then provide positive and negative associations between funds.
- FIGS. 4A and 4B show example information used for labeling users and groups of users based on the users' interests and disinterests.
- Table 400 shown in FIG. 4A includes information about users of a social network.
- Table 400 has five columns, which include member identifiers 402 , friends identifiers 404 that specify each user's friends, initial interest labels 406 that specify each user's interests, initial disinterest labels 407 that specify each user's disinterests, and group identifiers 408 that specify groups with which each user is associated.
- Labels 406 and 408 can be determined in various ways, either explicitly or implicitly, such as being generated based on user-provided content (e.g., on a user profile page), determined explicitly from the actions of the users (e.g., content that the user accesses or avoids), and so on. Further, labels 406 and 408 also have an associated weight that provides a relative indication of the user's interest or disinterest. For example, the user Fran has a 0.2 weight interest in dogs and a 0.8 weight interest in cats, and the user Emma has a 1.0 weight disinterest in stocks and a 0.5 weight disinterest in cats.
- FIG. 4B shows an example table 410 that includes group identifiers 412 for groups in the social network system, group interest labels 414 , and group disinterest labels 415 .
- interests and disinterests can be generated based on content from the group's profile page on the social network.
- the labels 414 and 415 may be generated and stored in the table 410 by the classifying module 224 using textual analysis techniques as described previously.
- the names of the group identifiers 412 in the table 410 correspond to the group identifiers 408 in the table 400 , meaning that the users associated with those groups inherit interests and disinterests that correspond to the groups.
- This information can also be represented by a graph data structure 416 as shown in FIG. 4C .
- Each of the users in a social network can be represented as nodes in the graph.
- Abby, Bart, Carl, Dave, Emma and Fran are represented by nodes 418 , 420 , 422 , 424 , 426 and 428 respectively.
- the graph data structure 416 does not explicitly show nodes associated with groups, such as the Web Agnostics and Young Web Democratic groups included in the table 410 of FIG. 4B .
- interests and disinterests associated with the groups are associated with the members of the groups. This is described in more detail below.
- the user nodes are linked by edges based on social relationships specified by the users. For example, Abby node 418 is linked by edge 419 to Carl node 422 because, for example, Abby has specified that Carl is a friend (e.g., on her profile page).
- FIG. 4C also shows label nodes 430 - 438 that associate user nodes with labels having weights that reflect a probable interest or disinterest of the user.
- the interest and disinterest weights in the label nodes may not change based on the interest and disinterest weights for labels of neighboring nodes. This is illustrated in this figure by the uni-directional edge 439 .
- Abby node 418 is associated with label node 430 having interest weights 1.8 for the Racing label, 0.2 for Stocks, 0.9 for Politics, and 0.1 Religion, which reflect how much each label should contribute to the user node.
- the label Racing specifies that Abby is interested in Racing based, for example, on information in Abby's profile.
- Abby's interest and/or disinterest can be determined explicitly or implicitly from various sources, such as Abby's profile page where Abby can indicate an interest weight for racing of 0.8.
- the interest weight for Racing in the label node 430 is increased to 1.8 because Abby is a member of the NASCAR group (e.g., having an interest weight of 1.0), which is also associated with the label Racing.
- the label node 430 also includes an interest weight 0.2 for Stocks because of the 0.2 weight for Stocks for Abby in the initial interests column 406 in the table 400 .
- Other interest weights for Abby include 0.9 for Politics and 0.1 for Religion, as determined from the group Young Web Democrats and the interest weights listed in the table 410 .
- a disinterest weight of 1.0 for Opera originates from the NASCAR group to which Abby is associated.
- Carl node 422 is associated with a label node 432 , which specifies that Carl has interests in Stocks (interest weight 1.0), Religion (interest weight 0.75) and Music (interest weight 0.25).
- the interest weight's for Carl's interest in Religion and Music are based on Carl's membership in the Web Agnostics group.
- the label node 434 is associated with Dave node 424 and specifies that Dave is interested in Music (interest weight 1.25), Politics (interest weight 0.90) and Religion (interest weight 0.85).
- Dave's Music interest weight is the sum of Dave's 1.0 interest weight and the 0.25 interest weight from the Web Agnostics group of which Dave is a member.
- Dave's Politics interest weight 0.90 is also based on his membership in the Web Agnostics group.
- Dave's religion interest weight 0.85 is a sum of the 0.75 and 0.10 interest weights of the Web Agnostics group and the Young Web Democrats, respectively.
- Emma node 426 is associated with the label node 436 .
- the disinterest weights of 1.0 for Stocks and 0.5 for cats are based on disinterests unique to Emma, e.g., from Emma's user profile.
- Emma's interest weights of 0.75 for Religion and 0.25 for Music are based on Emma's membership in the Web Agnostics group.
- Fran node 428 is associated with the label node 438 .
- Fran's interests include Dogs (interest weight 0.2) and Cats (interest weight 0.8), both of which are based on interest information for Fran as a user (e.g., from a user profile), and not from membership in a group.
- propagation of interest and disinterest labels can still occur.
- the interest (or disinterest) can be reversed for labels that are propagated to the user who specifies the dissimilarity. For example, suppose that Dave (e.g., see user node 424 ) has indicated that he is not at all similar to Fran (e.g., see user node 428 ). This dissimilarity can be represented in the graph 416 as a dashed arrow 440 a , indicating Dave's dissimilarity indication and that interests and disinterests will be reversed during propagation. For example, Fran's interest in dogs and cats can be propagated to Dave as disinterests.
- Fran may have indicated that Dave is a friend, implying similarity in interests and disinterests.
- solid arrow 440 b indicates that Dave's interests and disinterests will be propagated to Fran as interests and disinterests, and not reversed.
- FIG. 4D shows another implementation of a graph data structure 441 for the information illustrated in FIGS. 4A and 4B .
- each user node is associated with a variable label node 442 (e.g., Opera, Racing, Politics, Religion, Stocks, Music, Cats and Dogs).
- the variable label nodes 442 may include interest and disinterest weights that can be modified based on interest and disinterest weights of neighboring nodes in the graph structure 441 .
- the variable label nodes 442 are also associated with “static” label nodes 444 that specify a single label weight.
- the user nodes can be associated with more than one variable label node 442 .
- group nodes 446 that are linked by edges to user nodes 418 - 428 based on user membership in the groups.
- the group nodes 446 are also linked to label nodes, where, for example, the classifying module 224 links the groups to the label nodes based on textual descriptions of the groups. For example, the Young Web Democrats group node 446 is linked to variable label nodes 442 for religion and Politics.
- FIG. 5 shows an example method 500 for determining labels based on neighboring nodes' labels.
- the label generator 204 can perform the method 500 using instructions that are executed by a processor of the server system 104 .
- the method 500 can be executed using information from the graphs shown in FIGS. 4C and 4D and can be executed for every node in the graphs.
- the method 500 can start with step 502 , which determines if a specified number of iterations have run for a graph. If the number is not complete, then step 504 is performed.
- step 504 a node is selected.
- the label generator 204 can select a node that has label weights that may be modified by the algorithm, such as user nodes, variable label nodes, group nodes, etc.
- a label is selected from the selected node.
- the label generator 204 can select the label Stocks if present in the selected node.
- a label weight for the selected label is initialized to zero.
- the label generator 204 can set the label weight for Stocks to zero.
- a neighboring node of the selected node can be selected.
- the selected node may specify that Abby is a friend.
- the label generator 204 can select a neighboring user node representing Abby.
- a corresponding weighted label weight of a selected neighbor is added to a label weight of the selected label. For example, if Abby has a label weight for the label Stocks, then the label generator 204 can add this weight to the selected node's label weight for Stocks.
- the label weight can also be based on a weight associated with the edge.
- the edge weight can reflect an explicit association between two nodes. For instance, a first node may specify that the associated user likes a friend Jack (where the weight associated with liking Jack is 0.8), that the user likes friend Jill half as much as Jack, etc.
- the relative strength of a friendship between two users can be used to generate a numeric connection weight on the edge in a graph that connects the users' corresponding user nodes.
- the connection weight can be used (e.g., as a multiplier) in determining the extent that a label weight is propagated to a neighboring node. For example, label weights that are propagated between two strong friends can use higher weights than those used for two users having a weaker friendship.
- Connection weights can be based on various factors including, for example, a user's explicit designation of a relative weighting between relationships, two users' mutual explicit designation of affirmation of a relationship, or a measure of degree of relatedness of a node to other nodes in the graph.
- two nodes that share a significant number of interests e.g., as indicated by a significant overlap of labels in the two nodes
- the contribution can be weighted based on whether a link to a neighboring node is bidirectional (e.g., the neighboring node also specifies the selected node as a friend).
- step 514 it is determined whether there is another neighbor node to select.
- the label generator 204 can determine if the selected node is linked by a single edge to any additional neighbors that have not been selected.
- a user may specify how many degrees out (e.g., linked by two edges, three edges, etc.) the label generator 204 should search for neighbors. If there is another neighbor that has not been selected, then steps 510 and 512 can be repeated, as indicated by step 514 . If there is not another neighbor, then step 516 can be performed.
- step 516 it is determined whether there is another label in the selected node.
- the selected node can have multiple labels, such as Business, Dogs, and Stocks. If these additional labels have not been selected, then the label generator 204 can select one of the previously unselected labels and repeat steps 506 - 514 . If all the labels in the node have been selected, then the label weights of the selected node can be normalized, as shown in step 518 .
- the label generator 204 can normalize each label weight so that it has a weight between 0 and 1, where the label weight's magnitude is proportional to its contribution relative to all the label weights associated with that node. The normalization can occur for all weights in a group that includes weights for labels associated with interests and weights for labels associated with disinterests.
- step 520 it can be determined whether there are additional nodes in the graph to select. If there are additional nodes, then the method can return to step 504 . If all the nodes in the graph have been selected, then the method can return to step 502 to determine whether the specified number of iterations have been performed on the graph. If so, then the method 500 can end.
- the method 500 can include the use of the following pseudo code:
- the label generator 204 can examine one or more of the nodes of the graph and probabilistically assign a label to each node based on the weights of the labels (e.g., a label with the maximum label weight can be assigned to the node).
- the number of the iterations is specified in advance.
- the algorithm terminates (or can terminate early) when the label weights for the labels at each node reach a steady state (e.g., a state where the difference in the label weight change between iterations is smaller than a specified epsilon).
- label weights for user nodes can be inferred by executing a random walk algorithm on the graphs. More specifically, in some implementations, given a graph, G, the label generator 204 can calculate label weights, or label weights, for every node by starting a random walk from each node.
- the random walk algorithm can include reversing the direction of each edge in the graph if the edge is directed. If the edge is bi-directional, the edge can be left unchanged.
- the label generator 204 can select a node of interest and start a random walk from that node to linked nodes. At each node where there are multiple-out nodes (e.g., nodes with links to multiple other nodes), the label generator 204 can randomly select an edge to follow. If the edges are weighted, the label generator 204 can select an edge based on the edge's weight (e.g., the greatest weighted edge can be selected first).
- the classification for this walk is the label associated with the labeling node.
- the label generator 204 can maintain a tally of the labels associated with each classification.
- the label generator 204 selects the next random path, or edge, to follow.
- the label generator 204 can repeat the random walk multiple times (e.g., 1000s to 100,000s of times) for each node of interest. After completion, the label generator 204 can derive the label weights based on the tally of labels. This process can be repeated for each node of interest.
- FIGS. 6A-6E show different states of an example graph 600 representing users in a social network, where an algorithm is used to propagate label weights throughout nodes in the graph.
- the algorithm may include some or all of the steps of the method 500 , the above pseudo code, or the described random walk algorithm.
- the graph 600 includes nodes representing only six users in the social network. However, other entities may be represented in the graph 600 as well, such as hundreds or thousands of other users, groups of users, labels, etc.
- the algorithm can be run for a user-specified number of iterations. During each iteration, an initial value is created for each label weight of each node, and added to that initial value is a value corresponding to a label weight of each of the neighboring nodes having the same label. However, in the example illustrated collectively by FIGS. 6A-6E , only one iteration of propagation is used.
- each node in the graph 600 can be connected to less than all of the other user nodes with which a user has a relationship.
- connections can be limited to a user's closest friends, e.g., the ones that the user has designated as closest friends and/or closest friends automatically determined based on interactions between the user in the social network (e.g., postings, tagging of photos, emails, etc.).
- the graph 600 includes six user nodes 418 - 428 , each of which represents a user within a social network system.
- the labels for each user appear in the corresponding label nodes 430 - 438 .
- Each of the label nodes associates a user node with labels having weights that reflect a probable interest or disinterest of the user, e.g., an interest in content associated with that label.
- the labels for the graph 600 include Opera, Racing, Politics, Religion, Stocks, Music, Cats and Dogs.
- the labels associated with each user node can be determined by the classifying module 224 , e.g., determined from user profiles, from posts made by the users, from text describing groups to which the users belongs, etc.
- FIG. 6A shows an example state of the graph 600 before propagation.
- each of the label nodes 430 - 438 shows the respective user's interests and disinterests, but no normalization is shown.
- the label node 436 for Emma indicates a disinterest weight 1.0 for Stocks and a disinterest weight 0.5 for Cats.
- a user's interests can be normalized before each propagation. Normalization can also occur separately for the user's disinterests.
- the normalized weights can each be in the range of 0.0 to 1.0, and they can total to 1.0.
- the graph 600 does not reflect user interests represented by interest weights associated with the group nodes 446 shown in FIG. 4D .
- FIG. 6B shows an example subsequent state of the graph 600 after propagation in which the graph 600 includes weight nodes 602 - 612 that are associated with user nodes 418 - 428 , respectively.
- Each of the weight nodes 602 - 612 includes interest and/or disinterest weights based on propagation from the user's explicit interests/disinterests, the groups to which the user belongs, and interests/disinterests of other users. For example, because Emma belongs to the Web Agnostics group which includes associated interests in religion and music, the weight node 610 for Emma includes interest weights for religion and music. Further, the weight node 610 for Emma includes an interest weight for Stocks that is propagated from Carl. In some implementations, different percentages (or propagation weights) can be used for propagation.
- a user's own interests and disinterests can be propagated back to the user using a propagation weight of 100% (e.g., Fran's interest weights of 0.2 and 0.8 for Dogs and Cats).
- the interests/disinterests associated with the group(s) to which the user belongs can be propagated at 100% (e.g., 0.75 and 0.25 interest weights in Religion and Music, respectively).
- Other propagation weights can be used for a user's associated groups.
- smaller propagation weights can be used to propagate interests and disinterests between users, e.g., using a 50% propagation weight for interests and a 10% propagation weight for disinterests. In this way, the interests of a user's friends (and to a greater extent the disinterests of a user's friends) can be prevented from over-powering the interests of the user.
- the weight node 610 associated with the user Emma can include Emma's normalized disinterests in Stocks and Cats, resulting in propagated disinterest weights of 0.667 and 0.333 for Stocks and Cats respectively.
- the interest weights of 0.75 for Religion and 0.25 for Music can result from Emma's association with the Agnostic group, and the 0.5 interest weight can result from 50% of Carl's 1.0 interest weight in Stocks.
- a user's group-based interests can be propagated to other users; however this feature is not used in the current example.
- propagation of interest and disinterest labels can be adjusted accordingly.
- the interest (or disinterest) can be reversed for labels that are propagated to the user who specifies the dissimilarity.
- dashed arrow 440 a can indicate that Dave is not at all similar to Fran, and the dissimilarity indication can cause interests and disinterests to be reversed during propagation from Fran to Dave.
- Fran's 0.2 interest weight in Dogs and 0.8 interest weight in Cats can be propagated to Dave as disinterests (though scaled using propagation weights of 10%).
- Fran may have indicated that Dave is a friend, implying similarity in interests and disinterests.
- solid arrow 440 b indicates that Dave's interests and disinterests will be propagated to Fran as interests and disinterests, and not reversed.
- FIG. 6C shows an example new state of the graph 600 of FIG. 6B after interests and disinterests are normalized independently.
- the sum of Abby's interest weights of 1.3, 0.7, 0.9 and 0.1 for Racing, Stocks, Politics and Religion, respectively is 3.0.
- the sum can be used as a divisor to compute normalized interest weights.
- normalized interest weights of 0.433, 0.233, 0.300 and 0.033 can be computed for Racing, Stocks, Politics and Religion, respectively.
- the Opera disinterest weight being the only disinterest weight, can itself be used as a divisor, resulting in a normalized disinterest weight of 1.0 for Opera.
- FIG. 6D shows an example new state of the graph 600 of FIG. 6C after interests and disinterests are summed or combined.
- a sum can be determined from Bart's propagated (then normalized) interest in Stocks from Abby and the propagated (then normalized) disinterest from Emma, resulting in a total reflecting an effective disinterest in Stocks.
- FIG. 6E shows an example new state of the graph 600 of 6 D after group normalization.
- the interests and disinterests can be normalized as a group by summing the values, including interests and disinterests, and dividing each interest and disinterest by the sum.
- label weights in the label nodes are not modified. Instead, for every iteration, the label nodes can provide one or more static label weights that are used to modify the label weights of user nodes to which they are linked. In some implementations, the static label weights can be normalized.
- weights for interest-related labels propagated from one node to another can be reduced using a percentage factor (e.g., 50%) so that a user's interest can have a significantly higher weight than a friend's interest that is propagated.
- a percentage factor e.g. 50%
- Fran's interest in Dogs (0.2) and Cats (0.8) when propagated to Bart, can be propagated at one-tenth their weight, e.g., at Dogs (0.1) and Cats (0.4), so as not to overpower Bart own interests and disinterests.
- weights for disinterest-related labels propagated from one node to another can be reduced using an even smaller factor (e.g., 10%).
- Abby's disinterest in Opera (0.25), when propagated to Carl, can be propagated at one-tenth the weight (e.g., at 0.025).
- FIG. 7 is an alternative graph 700 for use in inferring user interests.
- the graph 700 is substantially similar to the graph described in association with FIG. 4D ; however, the label nodes that inject static label weights are excluded for clarity.
- the graph 700 includes user nodes 702 , group nodes 704 , and keyword nodes 706 .
- the labels are keywords.
- the user nodes 702 can be linked to the group nodes 704 based on membership relationships as discussed previously, and the user and group nodes 702 , 704 can be linked to the keyword nodes 706 in a substantially similar way as these nodes 702 , 704 are linked to other label nodes.
- the label generator 204 can use multiple graphs to determine the label weights and compare the output of processed graphs to determine final label weights based on an expected a priori distribution.
- a graph can include one or more uncharacterized label nodes that are used to reduce the effect by distant nodes on a respective node.
- the weight assigned to the uncharacterized label can be ignored and the remaining weights used in the determination.
- the uncharacterized label nodes' contribution can be removed from the calculation of the label weights at the end of the algorithm (e.g., after the label weights have reached a steady state or a specified number of iterations have occurred).
- uncharacterized label nodes can be used in any or all of the graphs generated by the label generator 204 .
- a user may specify for which graph(s) the uncharacterized label nodes are to be used.
- uncharacterized label nodes are associated with all nodes in the graph. In some implementations, uncharacterized label nodes are assigned to a small number of nodes, such as nodes that are not associated with initial labels (e.g., based on a lack on label-derivable information in the content of user profiles, etc.).
- FIG. 8 is a block diagram of computing devices 800 , 850 that may be used to implement the systems and methods described in this document, as either a client or as a server or plurality of servers.
- Computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 850 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 800 includes a processor 802 , memory 804 , a storage device 806 , a high-speed interface 808 connecting to memory 804 and high-speed expansion ports 810 , and a low speed interface 812 connecting to low speed bus 814 and storage device 806 .
- Each of the components 802 , 804 , 806 , 808 , 810 , and 812 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 802 can process instructions for execution within the computing device 800 , including instructions stored in the memory 804 or on the storage device 806 to display graphical information for a GUI on an external input/output device, such as display 816 coupled to high speed interface 808 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 804 stores information within the computing device 800 .
- the memory 804 is a computer-readable medium.
- the memory 804 is a volatile memory unit or units.
- the memory 804 is a non-volatile memory unit or units.
- the storage device 806 is capable of providing mass storage for the computing device 800 .
- the storage device 806 is a computer-readable medium.
- the storage device 806 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 804 , the storage device 806 , or memory on processor 802 .
- the high speed controller 808 manages bandwidth-intensive operations for the computing device 800 , while the low speed controller 812 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 808 is coupled to memory 804 , display 816 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 810 , which may accept various expansion cards (not shown).
- low-speed controller 812 is coupled to storage device 806 and low-speed expansion port 814 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 800 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 820 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 824 . In addition, it may be implemented in a personal computer such as a laptop computer 822 . Alternatively, components from computing device 800 may be combined with other components in a mobile device (not shown), such as device 850 . Each of such devices may contain one or more of computing device 800 , 850 , and an entire system may be made up of multiple computing devices 800 , 850 communicating with each other.
- Computing device 850 includes a processor 852 , memory 864 , and an input/output device such as a display 854 , a communication interface 866 , and a transceiver 868 , among other components.
- the device 850 may also be provided with a storage device, such as a Microdrive or other device, to provide additional storage.
- a storage device such as a Microdrive or other device, to provide additional storage.
- Each of the components 850 , 852 , 864 , 854 , 866 , and 868 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 852 can process instructions for execution within the computing device 850 , including instructions stored in the memory 864 .
- the processor may also include separate analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 850 , such as control of user interfaces, applications run by device 850 , and wireless communication by device 850 .
- Processor 852 may communicate with a user through control interface 858 and display interface 856 coupled to a display 854 .
- the display 854 may be, for example, a TFT LCD display or an OLED display, or other appropriate display technology.
- the display interface 856 may comprise appropriate circuitry for driving the display 854 to present graphical and other information to a user.
- the control interface 858 may receive commands from a user and convert them for submission to the processor 852 .
- an external interface 862 may be provided in communication with processor 852 , so as to enable near area communication of device 850 with other devices. External interface 862 may provide, for example, for wired communication (e.g., via a docking procedure) or for wireless communication (e.g., via Bluetooth or other such technologies).
- the memory 864 stores information within the computing device 850 .
- the memory 864 is a computer-readable medium.
- the memory 864 is a volatile memory unit or units.
- the memory 864 is a non-volatile memory unit or units.
- Expansion memory 874 may also be provided and connected to device 850 through expansion interface 872 , which may include, for example, a SIMM card interface. Such expansion memory 874 may provide extra storage space for device 850 , or may also store applications or other information for device 850 .
- expansion memory 874 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 874 may be provide as a security module for device 850 , and may be programmed with instructions that permit secure use of device 850 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hack able manner.
- the memory may include for example, flash memory and/or MRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 864 , expansion memory 874 , or memory on processor 852 .
- Device 850 may communicate wirelessly through communication interface 866 , which may include digital signal processing circuitry where necessary. Communication interface 866 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 868 . In addition, short-range communication may occur, such as using a Bluetooth, Wi-Fi, or other such transceiver (not shown). In addition, GPS receiver module 870 may provide additional wireless data to device 850 , which may be used as appropriate by applications running on device 850 .
- GPS receiver module 870 may provide additional wireless data to device 850 , which may be used as appropriate by applications running on device 850 .
- Device 850 may also communicate audibly using audio codec 860 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- Audio codec 860 may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- the computing device 850 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 880 . It may also be implemented as part of a smartphone 882 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- the label nodes do not have to be high-level semantic nodes. Instead, they may be individual keywords. For example, they may be the union of the set of keywords that occur on every user's page/description of themselves and every group's description, etc.
- keywords that are uncommon there may be keywords that are uncommon.
- the common word “the” may not provide much information, but the relatively uncommon keyword “basketball” may.
- these types of words can be used by classifying module 224 when implementing, for example, the common TF-IDF (term frequency-inverse document frequency) measure.
- the keywords can be selected from terms that advertisers often use to specify selection of online ads, or keywords including hand-selected terms that are of interest.
- the graph or graphs that are created do not have to have an edge between all the friends that a user specifies. If the friends are ranked or weighted, only the top N friends may be chosen (e.g., a user's best friends). In other implementations, the label generator 204 may only select the links for which each user specifies each other as a friend.
- a graph may have weighted edges.
- each connection can be weighted the same.
- edges can be weighted differently based on a number of factors. For example, if user-A specifies that he likes user-B more than user-C, then the connection from A to B may be stronger than from A to C. In another example, if user-A and user-B both specify that they like each other, the strength of the connection may be stronger (for example, the connection may be twice as strong). In yet another example, the label generator 204 can weight the edges in proportion to the out-degree of a node.
- weights on the edges may be greater for preferred groups, such as groups that include frequent content postings from the user.
- a user may have a stronger affinity for some keywords rather than for other keywords (e.g., a user may use the word “venture” much more than the word “sports”).
- Weights between users also can be based on a frequency of interaction, such as messages between the users, visits to each other's home pages or profiles, etc.
- edges can be weighted based on when a ‘friend’ was added. For example, a link to a recently added friend can be weighted greater than previously added friends because the recently added friend may indicate a current interest. In another implementation, an edge linking an “older” friend can be weighted more heavily. For example, if the friend has been a friend for a while, and it is known that the user takes off friends periodically, then a friend who has lasted on the friend list can be weighted higher. Additionally, similarity metrics between users (e.g., a percent of overlap in the words that they use) can be used to weight the connections.
- users that have a heavy overlap in term usage can have links that are weighted more heavily than users who do not have a significant overlap.
- the described algorithm and methods do not have to run until convergence. They can be stopped earlier, and the label generator 204 can read the magnitudes of the label weights at the nodes.
- the combination-weights that are used to combine the end results may be set to (0,1) or (1,0), which selects only one of the graphs and not the other.
- the combination function may not be linear or continuous.
- the label generator 204 may specify that if the labels produced from Graph-A are too uniform then only labels generated from Graph-B are selected for use, for example, in selecting online ads.
- the term ‘user,’ as specified, for example, in the described pseudo code and method 500 may actually be a group in the social network system. Additionally, the term “user” can be substituted for other entities described in the graphs, such as keywords, advertisers, ad groups, etc.
- the set of labels used can include advertisements.
- the labels propagated through the graph can include advertisements on which one or more users have clicked.
- the label generator 204 can output a set of advertisements on which each user may be likely to click.
- the label generator 204 can select labels for use in selecting ads for users, etc., where the labels are derived based on an initial machine-learning classification, or the label generator 204 can use the inferred labels generated by executing the above algorithms and methods on the graph to infer labels for each user.
- the links between users may be optional if there are enough common groups/keywords. For example, there may be “enough” common groups/keywords if a defined threshold of the graph connectivity is met (e.g., if the average user node is connected by two edges to at least two other users, etc.)
- the normalization step as described in the algorithms and methods linearly weights the magnitudes of the label weights and scales them to 1.0; however, the label generator 204 can use various normalization or non-linear function for normalization.
- the label generator 204 can modify a graph's structure (e.g., remove a percentage of the connections, such as the connections that fall within the lowest one percent of weighted connections). This may approximate the random walk discussed previously. Additionally, instead of maintaining all labels at every node, the label generator 204 may only maintain subset of the labels.
- highly connected nodes may be processed using the same processor, which may reduce message passing.
- the approximation can be computed in a layer-wise manner, where each layer includes, for example, a certain type of node.
- one layer may include user nodes, another layer group nodes, and another layer keyword nodes, as shown in FIG. 9A .
- the algorithms and methods discussed above can be computed for pairs of layers instead of all the layers at once. For example, some number of iterations of the method are computed between a first and second layer, some between the second and third layer, and some between the third and fourth layer) and then the method can be repeated, etc.
- first and second data stores 206 , 208 can reside in a single storage device, such as a hard drive.
Abstract
Description
X 0 ≈W 0 X 0 +L 0 (1)
ΔL=L−L 0 (2)
and:
ΔW=W−W 0 (3)
ΔX=WΔX+WX 0 +ΔL (4)
-
- Initialize the label: nl,t=0.0;
For t=1 . . . x iterations:
- Initialize the label: nl,t=0.0;
-
- For each label, 1:
- Initialize the label amount: nl,t+1=nl,t
For each node to be labeled, n, in the graph, G:
- Initialize the label amount: nl,t+1=nl,t
- For each label, 1:
-
- Initialize the label amount: nl,t+1=0.0;
For each node, n, in the graph, G:
- Initialize the label amount: nl,t+1=0.0;
-
- For each label:
n l,t+1 =n l,t+1+(w mn *n l,t)
- For each label:
Claims (15)
ΔX≈WΔX+ΔWX 0 +ΔL
ΔX≈WΔX+ΔWX 0 +ΔL
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/024,330 US9384571B1 (en) | 2013-09-11 | 2013-09-11 | Incremental updates to propagated social network labels |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/024,330 US9384571B1 (en) | 2013-09-11 | 2013-09-11 | Incremental updates to propagated social network labels |
Publications (1)
Publication Number | Publication Date |
---|---|
US9384571B1 true US9384571B1 (en) | 2016-07-05 |
Family
ID=56234962
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/024,330 Expired - Fee Related US9384571B1 (en) | 2013-09-11 | 2013-09-11 | Incremental updates to propagated social network labels |
Country Status (1)
Country | Link |
---|---|
US (1) | US9384571B1 (en) |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20170351681A1 (en) * | 2016-06-03 | 2017-12-07 | International Business Machines Corporation | Label propagation in graphs |
US10264048B2 (en) * | 2016-02-23 | 2019-04-16 | Microsoft Technology Licensing, Llc | Graph framework using heterogeneous social networks |
US10536342B2 (en) * | 2017-12-21 | 2020-01-14 | Microsoft Technology Licensing, Llc | Network estimation |
CN111241297A (en) * | 2020-01-06 | 2020-06-05 | 广州拉卡拉信息技术有限公司 | Map data processing method and device based on label propagation algorithm |
US20210224324A1 (en) * | 2020-01-20 | 2021-07-22 | Microsoft Technology Licensing, Llc | Graph-based activity discovery in heterogeneous personal corpora |
US11100688B2 (en) * | 2018-07-26 | 2021-08-24 | Google Llc | Methods and systems for encoding graphs |
CN113379474A (en) * | 2021-07-13 | 2021-09-10 | 京东数科海益信息科技有限公司 | Method, device, equipment and medium for matching user group and information push |
US20210349920A1 (en) * | 2019-11-13 | 2021-11-11 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Method and apparatus for outputting information |
CN113873333A (en) * | 2021-09-30 | 2021-12-31 | 海看网络科技(山东)股份有限公司 | Method for calculating program portrait on IPTV |
US11301774B2 (en) | 2017-02-28 | 2022-04-12 | Nec Corporation | System and method for multi-modal graph-based personalization |
US11606671B2 (en) * | 2016-06-06 | 2023-03-14 | Tencent Technology (Shenzhen) Company Limited | Method for mining social account of target object, server, and storage medium |
US11609937B2 (en) * | 2019-03-13 | 2023-03-21 | Fair Isaac Corporation | Efficient association of related entities |
US11868916B1 (en) * | 2016-08-12 | 2024-01-09 | Snap Inc. | Social graph refinement |
CN111241297B (en) * | 2020-01-06 | 2024-05-14 | 广州拉卡拉信息技术有限公司 | Atlas data processing method and apparatus based on label propagation algorithm |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070005753A1 (en) * | 2005-06-29 | 2007-01-04 | Simon Crosby | Methods, apparatus, and systems for distributed hypothesis testing in autonomic processing machines |
US20080275861A1 (en) * | 2007-05-01 | 2008-11-06 | Google Inc. | Inferring User Interests |
US7853622B1 (en) * | 2007-11-01 | 2010-12-14 | Google Inc. | Video-related recommendations using link structure |
US20110295626A1 (en) * | 2010-05-28 | 2011-12-01 | Microsoft Corporation | Influence assessment in social networks |
US20120005238A1 (en) * | 2008-12-12 | 2012-01-05 | Tony Jebara | Machine optimization devices, methods, and systems |
US8194535B2 (en) * | 2004-05-28 | 2012-06-05 | Alcatel Lucent | Efficient and robust routing of potentially-variable traffic in IP-over-optical networks with resiliency against router failures |
US8583659B1 (en) * | 2012-07-09 | 2013-11-12 | Facebook, Inc. | Labeling samples in a similarity graph |
US20130312060A1 (en) * | 2010-12-22 | 2013-11-21 | Koninklijke Philips N.V. | Creating an Access Control Policy Based on Consumer Privacy Preferences |
-
2013
- 2013-09-11 US US14/024,330 patent/US9384571B1/en not_active Expired - Fee Related
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8194535B2 (en) * | 2004-05-28 | 2012-06-05 | Alcatel Lucent | Efficient and robust routing of potentially-variable traffic in IP-over-optical networks with resiliency against router failures |
US20070005753A1 (en) * | 2005-06-29 | 2007-01-04 | Simon Crosby | Methods, apparatus, and systems for distributed hypothesis testing in autonomic processing machines |
US20080275861A1 (en) * | 2007-05-01 | 2008-11-06 | Google Inc. | Inferring User Interests |
US20120054205A1 (en) * | 2007-05-01 | 2012-03-01 | Google Inc. | Inferring user interests |
US7853622B1 (en) * | 2007-11-01 | 2010-12-14 | Google Inc. | Video-related recommendations using link structure |
US20120005238A1 (en) * | 2008-12-12 | 2012-01-05 | Tony Jebara | Machine optimization devices, methods, and systems |
US20110295626A1 (en) * | 2010-05-28 | 2011-12-01 | Microsoft Corporation | Influence assessment in social networks |
US20130312060A1 (en) * | 2010-12-22 | 2013-11-21 | Koninklijke Philips N.V. | Creating an Access Control Policy Based on Consumer Privacy Preferences |
US8583659B1 (en) * | 2012-07-09 | 2013-11-12 | Facebook, Inc. | Labeling samples in a similarity graph |
Non-Patent Citations (3)
Title |
---|
Joachims, "Text Categorization with Support Vector Machines: Learning with Many Relevant Features," Lecture Notes in Computer Science, vol. 1398 archive, Proceedings of the 10th European Conference on Machine Learning, pp. 137-142, 1998. |
Sebastian, "Machine learning in automated text categorization," ACM Computing Surveys (CSUR) archive, 34(1):1-47, (Mar. 2002). |
Yang et al., "A Comparative Study on Feature Selection in Text Categorization Source," Proceedings of the Fourteenth International Conference on Machine Learning, pp. 412-420, 1997. |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10264048B2 (en) * | 2016-02-23 | 2019-04-16 | Microsoft Technology Licensing, Llc | Graph framework using heterogeneous social networks |
US10824674B2 (en) * | 2016-06-03 | 2020-11-03 | International Business Machines Corporation | Label propagation in graphs |
US20170351681A1 (en) * | 2016-06-03 | 2017-12-07 | International Business Machines Corporation | Label propagation in graphs |
US11606671B2 (en) * | 2016-06-06 | 2023-03-14 | Tencent Technology (Shenzhen) Company Limited | Method for mining social account of target object, server, and storage medium |
US11868916B1 (en) * | 2016-08-12 | 2024-01-09 | Snap Inc. | Social graph refinement |
US11301774B2 (en) | 2017-02-28 | 2022-04-12 | Nec Corporation | System and method for multi-modal graph-based personalization |
US10536342B2 (en) * | 2017-12-21 | 2020-01-14 | Microsoft Technology Licensing, Llc | Network estimation |
US11100688B2 (en) * | 2018-07-26 | 2021-08-24 | Google Llc | Methods and systems for encoding graphs |
US11609937B2 (en) * | 2019-03-13 | 2023-03-21 | Fair Isaac Corporation | Efficient association of related entities |
US20210349920A1 (en) * | 2019-11-13 | 2021-11-11 | Beijing Baidu Netcom Science And Technology Co., Ltd. | Method and apparatus for outputting information |
CN111241297A (en) * | 2020-01-06 | 2020-06-05 | 广州拉卡拉信息技术有限公司 | Map data processing method and device based on label propagation algorithm |
CN111241297B (en) * | 2020-01-06 | 2024-05-14 | 广州拉卡拉信息技术有限公司 | Atlas data processing method and apparatus based on label propagation algorithm |
US20210224324A1 (en) * | 2020-01-20 | 2021-07-22 | Microsoft Technology Licensing, Llc | Graph-based activity discovery in heterogeneous personal corpora |
CN113379474A (en) * | 2021-07-13 | 2021-09-10 | 京东数科海益信息科技有限公司 | Method, device, equipment and medium for matching user group and information push |
CN113379474B (en) * | 2021-07-13 | 2024-02-06 | 京东科技信息技术有限公司 | Method, device, equipment and medium for matching user belonging group and information pushing |
CN113873333A (en) * | 2021-09-30 | 2021-12-31 | 海看网络科技(山东)股份有限公司 | Method for calculating program portrait on IPTV |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9031951B1 (en) | Associating interest and disinterest keywords with similar and dissimilar users | |
US9384571B1 (en) | Incremental updates to propagated social network labels | |
US8055664B2 (en) | Inferring user interests | |
US8572099B2 (en) | Advertiser and user association | |
Chong et al. | Predicting consumer product demands via Big Data: the roles of online promotional marketing and online reviews | |
US20210049645A1 (en) | System and method providing personalized recommendations | |
US7853622B1 (en) | Video-related recommendations using link structure | |
US11188937B2 (en) | Generating machine-learned entity embeddings based on online interactions and semantic context | |
US10366400B2 (en) | Reducing un-subscription rates for electronic marketing communications | |
US9805391B2 (en) | Determining whether to provide an advertisement to a user of a social network | |
US10354184B1 (en) | Joint modeling of user behavior | |
US8543518B2 (en) | Deducing shadow user profiles for ad campaigns | |
US20120290399A1 (en) | Web Optimization and Campaign Management in a Syndicated Commerce Environment | |
US20110066507A1 (en) | Context Enhanced Marketing of Content and Targeted Advertising to Mobile Device Users | |
US20180089318A1 (en) | Two-sided network growth optimization in social networks | |
US20200401949A1 (en) | Optimizing machine learned models based on dwell time of networked-transmitted content items | |
CN113065882A (en) | Commodity processing method and device and electronic equipment | |
Li et al. | Online advertisement allocation under customer choices and algorithmic fairness | |
US20170061480A1 (en) | Optimizing acquisition channels based on customer lifetime values | |
Shen et al. | A planning approach to revenue management for non‐guaranteed targeted display advertising | |
US20160148271A1 (en) | Personalized Marketing Based on Sequence Mining | |
Gauran et al. | Nonparametric modeling of clustered customer survival data | |
US20180089192A1 (en) | Using potential interactions to improve subsequent social network activity | |
Rodriguez | eCRM PERSONALIZATION STRATEGIES: Influence of content personalization on consumer engagement performance of email marketing campaigns | |
Joy | Enhanced Architecture Design for Tri Layer Communication Using Communal Micro blog Information |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:COVELL, MICHELE;BALUJA, SHUMEET;SIGNING DATES FROM 20131002 TO 20131003;REEL/FRAME:031339/0629 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20200705 |