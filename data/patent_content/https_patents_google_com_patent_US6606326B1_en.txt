US6606326B1 - Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path - Google Patents
Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path Download PDFInfo
- Publication number
- US6606326B1 US6606326B1 US09/347,161 US34716199A US6606326B1 US 6606326 B1 US6606326 B1 US 6606326B1 US 34716199 A US34716199 A US 34716199A US 6606326 B1 US6606326 B1 US 6606326B1
- Authority
- US
- United States
- Prior art keywords
- output port
- path
- central queue
- sequence
- input port
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/34—Source routing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L49/00—Packet switching elements
- H04L49/10—Packet switching elements characterised by the switching fabric construction
- H04L49/103—Packet switching elements characterised by the switching fabric construction using a shared central buffer; using a shared memory
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L49/00—Packet switching elements
- H04L49/15—Interconnection of switching modules
- H04L49/1515—Non-blocking multistage, e.g. Clos
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L49/00—Packet switching elements
- H04L49/90—Buffering arrangements
Definitions
- This invention relates in general to a central queue-based packet switch, illustratively an eight-way router, that advantageously allows for dynamic transfer of message portions of a single data packet from a shared central queue path to a cross-point switching matrix path coupled in parallel therewith between input ports and output ports of the packet switch.
- distributed processing involves extending a processing load across a number of separate processors, all collectively operating in a parallel or pipelined manner, with some type of interconnection scheme being used to couple all of the processors together in order to facilitate message passing and data sharing thereamong.
- distributed processing architectures of which many variants exist, generally entailed use of a relatively small number of interconnected processors, typically two and often less than ten separate highly sophisticated central processing units as would be used in a traditional mainframe or super-minicomputer, in which these processors would be interconnected,either directly through, e.g., an inter-processor bus, or indirectly through, e.g., a multi-ported shared memory, such as a shared digital access storage device (DASD), or other communication path.
- DASD shared digital access storage device
- each processing element typically contains a separate microprocessor and its associated support circuitry, the latter being typified by, for example, random access memory (RAM), for program and data storage, and input/output (I/O) circuitry.
- RAM random access memory
- I/O input/output circuitry
- each element may also contain read only memory (ROM), to store initialization (“boot”) routines as well as configuration information, and/or other circuitry.
- Each distributed processing element particularly in a massively parallel processing system, also contains a communication sub-system that interfaces that element to the communications fabric.
- this sub-system is formed of appropriate hardware circuitry, such as a communications interface within the I/O circuitry, and associated controlling software routines, the latter being invoked by an application executing within that one element in order to communicate with any other such processing element in the system.
- the overall performance of a massively parallel processing system tends to be heavily constrained by the performance of the underlying network used therein. Generally speaking, if the network is too slow and particularly to the point of adversely affecting overall system throughput, it may sharply reduce the attractiveness of using a massively parallel processing system in a given application.
- each processing element executes a given portion of an application.
- each processing element must be able to transfer data to another such element as required by the portions of the application then executing at each of these elements.
- the destination element if any one processing element (i.e. the “destination” element) requests data from another such element (i.e. the “originating” element), the destination element remains idle until it receives a message containing the needed data transmitted by the originating element, at which point the destination element once again commences application processing.
- a finite amount of time is required to transport a message containing the request from the destination to the originating processing elements and, in an opposite direction, a responding message containing the requested data.
- This time unavoidably injects a degree of latency into that portion of the application executing at the destination element. Since most processing elements in the system function as destination elements for corresponding portions of the application, then, if this communication induced latency is too long, system throughput may noticeably diminish. This, in turn, will significantly and disadvantageously degrade overall system performance. To avoid this, the network needs to pass each message between any two communicating processing elements as quickly as possible in order to reduce this latency.
- the network must also be able to simultaneously route a relatively large number of messages among the processing elements.
- the network is usually formed of a packet network rather than a circuit switched or other type of network.
- packet networks provide the most efficient vehicle to carry these messages, in terms of reduced circuit complexity, and decreased network cost and physical size of the network including its associated switches.
- a massively parallel processing system needs to utilize a packet network, and particularly packet switches therein, that can route an anticipated peak load of inter-processor messages with minimal latency.
- incoming packets contain a header field with an embedded routing code and a length field, an information field generally containing requested data, and finally a trailing field that may contain an error correcting code field as well as various message delimiters.
- the routing code generally specifies the particular input port on the switch at which the message originates and the particular output port on the switch for which the message is destined.
- the length field specifies the length, typically in bytes, of the entire message.
- the routing code and the length fields are generated by input circuitry associated with the network and appended, as a prefix, to the message prior to the message being routed therethrough.
- Input circuitry within the switch reads the routing code and then sets appropriate cross-point connections within the switch in order to link the desired input and output ports of the switch and route the message therebetween. Once the link is established, the message is routed through the cross-point matrix, typically on a bit- or byte-serial basis, from the originating input port to the destination output port. The routing code for this particular switch is simply removed from the message and discarded by the circuitry in the destination output port of the switch. The remainder of the routing code is that which will be used to route the message through successive downstream switches in the network. Once the message is fully routed through the switch, the cross-point connections are reset to collapse, i.e. tear down, the link then existing between the input and output ports.
- the error correcting code field contains a value obtained by processing the information field through a predetermined error correcting polynomial, such as a known cyclic redundancy code (CRC), to yield a resulting value.
- a predetermined error correcting polynomial such as a known cyclic redundancy code (CRC)
- CRC cyclic redundancy code
- this architecture generally functions well if a destination output port on a cross-point based switch is always available to accept a message then situated at an originating input port.
- this availability can not be guaranteed during periods of heavy message traffic.
- this message generally waits at the input port, until the output port becomes available, before being routed through the cross-point matrix.
- each input port contains a first-in first-out (FIFO) queue to store incoming messages that are to be routed through that port.
- FIFO first-in first-out
- the FIFO queue by providing input buffering, permits the upstream circuitry and the cross-point switch to operate at different speeds.
- Messages move through the queue on a serial time ordered basis: the first message entered into the queue reaches the output of the queue and hence is routed through the cross-point matrix before the next successive message in the queue and so forth for all messages then stored in the queue.
- all successive messages in the queue can not advance through the cross-point matrix. This, in turn, stalls all the messages then residing in the queue.
- Input blocking can become significant during peak traffic loads and hence greatly reduce the throughput of the switch at these times.
- Cross-point based packet switches that contain input queues and thus may likely experience significant input blocking are shown in the following U.S. Pat. No. 5,140,582 (issued to M. Tsuboi et al. on Aug. 18, 1992); U.S. Pat. No. 4,947,387 (issued to E. Knorpp et al. on Aug. 7, 1990); U.S. Pat. No. 4,922,488 (issued to G. Niestegge on May 1, 1990) and U.S. Pat. No. 4,752,777 (issued to P. A. Franaszek on Jun. 21, 1988 and assigned to the present assignee hereof). Given the susceptibility of such switches to input blocking, cross-point packet switches that contain input queues are generally not suited for use with high peak traffic loads, and thus have not been appropriate for use in a massively parallel processing environment.
- Output contention occurs whenever two or more input ports simultaneously contain messages at the heads of their respective queues which are to be routed to the same output port. In essence, both messages are contending for the same output port. The switch must decide which one of these messages is to be routed to the output port while the remainder of these messages wait to be routed during a subsequent switching cycle. Inasmuch as various techniques now appear to exist in the art to rapidly resolve output contention, such as within a single clock cycle or concurrently with other tasks inherent in routing a message through a packet switch, output contention resolution no longer appears to be a major factor in limiting the performance of a packet switch, including those destined for use in, e.g., a massively parallel processing environment.
- the 8-byte chunks destined therefor are sent to a central queue.
- This queue implements a buffered time-multiplexed 8-way router.
- the queue accepts one message chunk from each receiver on a first-come first-served basis per clock cycle.
- the central queue is composed of 128 8-byte locations all of which are shared and dynamically allocated according to demand then existing.
- the central queue stores all of the message chunks, until the corresponding transmitter becomes available, at which point the chunks are sent thereto.
- the stored messages are organized into eight linked lists with each list associated with a different transmitter.
- the eight transmitters are served by the central queue on a first-come first-serve basis. As long as chunks are available within the central queue, one of these transmitters is served each clock cycle. Each transmitter accepts message chunks from the central queue, serializes these chunks, buffers the resulting serial information in a 16-byte output queue and then transmits the resulting buffered information to an output channel in accordance with the channel flow control protocol.
- the router chip also incorporated byte-serial by-pass channels which, whenever an output port is not experiencing any contention, permits messages to pass directly from the receivers to the transmitter for this port with very low latency.
- use of such a central queue substantially, and generally totally, eliminates blocking, i.e., a message packet at any input port which can not be routed due to the unavailability of its corresponding output port would not block other message packets then queued at the same input port.
- the central queue is shared by all the input ports, its utilization tends to be much higher than input port resident buffering schemes.
- the router chip and a packet network fabricated of these chips is uni-directional in nature. Consequently, it is oftentimes not readily possible to operate a desired portion, e.g., one or more but not all processing racks, of a massively parallel processing system that has such a packet network with a uni-directional topology without having to disconnect and appropriately re-arrange cables that inter-connect these chips.
- the corresponding queues on each of the associated router chips are each filled with opposing traffic, e.g., all the message chunks on one such FIFO are to be routed in a direction opposite to that of the traffic in the corresponding FIFO, none of this traffic can move.
- a deadlock condition occurs which then completely prevents any packets from moving between these ports, thereby significantly reducing and possibly halting application processing at the system. Since instantaneous traffic loads can be quite high in a massively parallel processing system, a significant likelihood exists that deadlock with an attendant reduction and/or halt in application processing will occur in a system having a bi-directional topology.
- Each receiver classifies its resident chunks (as critical or non-critical) based upon both the urgency with which that chunk must be transmitted to its destination output port and by the status of the central queue.
- a critical chunk i.e., one that must be transported as soon as possible to an output port is stored within the dedicated slot of the central queue for that particular output port.
- Non-critical chunks are stored within available shared slots in the central queue.
- the present invention comprises in one aspect a method for forwarding a data packet within a packet switch having an input port, an output port, and a bypass path and a central queue path coupled in parallel between the input port and output port.
- the method includes: dividing the data packet into a sequence of multiple portions; forwarding the sequence of multiple portions from the input port to the output port through the central queue path; during the forwarding, determining that one portion of the multiple portions of the sequence comprises a critical portion; and switching forwarding of the sequence of multiple portions from the input port to the output port to the bypass path, the switching resulting in passing of the critical portion from the input port to the output port through the bypass path irrespective of whether contention exists for the output port.
- a system for forwarding a data packet within a packet switch having an input port, an output port, and a bypass path and a central queue path coupled in parallel between the input port and the output port.
- the system includes means for dividing the data packet into a sequence of multiple portions and means for forwarding the sequence of multiple portions from the input port to the output port through the central queue path.
- the system further includes means for determining that one portion of the multiple portions comprises a critical portion and means for switching forwarding of the sequence of multiple portions from the input port to the output port to the bypass path, the switching resulting in passing of the critical portion from the input port to the output port through the bypass path irrespective of whether contention exists for the output port.
- a packet switch having multiple input ports and multiple output ports with a central queue path and a bypass path coupled in parallel therebetween.
- the packet switch also includes data packet flow control circuitry coupled to the multiple input ports and the multiple output ports for controlling transfer of a data packet from at least one input port to at least one output port.
- the data packet control circuitry is adapted to forward a sequence of multiple portions of the data packet from the at least one input port to the at least one output port through the central queue path, and to identify during the forwarding a next portion of the multiple portions of the sequence as a critical portion to the at least one output port, and in response thereto, to switch forwarding of the sequence of multiple portions of the data packet from the central queue path to the bypass path so that the critical portion is passed directly from the at least one input port to the at least one output port through the bypass path irrespective of whether contention exists for the at least one output port.
- the invention comprises an article of manufacture including a computer program product comprising computer usable medium having computer readable program code means therein for use in forwarding a data packet within a packet switch having an input port, an output port, and a bypass path and a central queue path coupled in parallel to the input port and the output port.
- the computer readable program code means in the computer program product includes: computer readable program code means for causing a computer to effect dividing the data packet into a sequence of multiple portions; computer readable program code means for causing a computer to effect forwarding the sequence of multiple portions from the input port to the output port through the central queue path; computer readable program code means for causing a computer to effect determining during the forwarding that one portion of the multiple portions of the sequence comprises a critical portion; and computer readable program code means for causing a computer to effect switching forwarding of the sequence of multiple portions from the input port to the output port through the bypass path, the switching resulting in passing the critical portion from the input port to the output port through the bypass path irrespective of whether contention exists for the output port.
- a switch network implemented in accordance with principles of the present invention eliminates any need for dedicating one (or more) data slots in the central queue for each output port. Therefore, all space within the central queue is able to be shared among the output ports. Performance simulation of switch networks indicates that the more shared buffering available, the better the overall switch network performance.
- FIG. 1 is a block diagram of a scalable parallel processing system 5 to employ the principles of the present invention
- FIG. 2 depicts a simplified block diagram of a flow control and communication protocol used for inter-processor communication that occurs within system 5 shown in FIG. 1;
- FIG. 3 is a block diagram illustrating a switching circuit 25 1 situated within system 5 shown in FIG. 1;
- FIG. 4 diagrammatically depicts a deadlock condition
- FIG. 5 is a simplified block diagram useful in discussing data packet flow in accordance with the principles of the present invention.
- FIG. 6 is a flowchart of conventional data packet forwarding using cross-point switching matrix 360 and central queue 350 of FIG. 2;
- FIG. 7 is a flowchart of data packet forwarding within the switching circuit of FIG. 3 in accordance with the principles of the present invention.
- bi-directional packet networks known in the art (regardless of their end use), and particularly bi-directional packet switches used therein, may often be susceptible to deadlock
- this invention will find ready application in any of these switches to dramatically improve its traffic handling capacity and hence generally improve the performance of the system in which that switch is used.
- the present invention is specifically described below in the context of use within a bi-directional packet switch that facilitates inter-processor communication in a scalable parallel processing system.
- a bi-directional packet switch that facilitates inter-processor communication in a scalable parallel processing system.
- Such a system can be readily scaled upward to a size that is synonymous with what is commonly referred to as a massively parallel processing system.
- FIG. 1 depicts a high level block diagram of a scalable parallel processing system 5 that incorporates the teachings of the present invention.
- This system is the 9076 SP1 system which is commercially available from International Business Machines (IBM) Corporation of Armonk, N.Y. which is also the present assignee hereof.
- IBM International Business Machines
- system 5 is configured as containing sixty-four separate processing elements 15 . All of these processing elements operate in parallel with each of these elements performing a distinct portion of a given application. In order for each of these elements to perform its individual processing task, that element communicates with other processing elements through high speed bi-directional packet network 8 , and specifically transfers application data through packet messages with other such elements, as the application requires. In that regard, each processing element undertakes its associated application processing upon receipt of the needed data from other processing elements and then communicates the results of that processing onward to another processing element(s), again by packet messages, for subsequent use therein, and so on.
- system 5 is organized into four separate processing clusters, each of which contains sixteen separate processing elements 15 connected to corresponding nodes of a 16-by-16 bi-directional packet switch array.
- processing clusters 10 1 , 10 2 , 10 3 and 10 4 contain switch arrays 17 1 , 17 2 , 17 3 and 17 4 which are connected to processors 15 1 , . . . , 15 16 ; 15 7 , . . . , 15 32 ; 15 33 , . . . , 15 48 ; and 15 49 , . . . , 15 64 , respectively.
- All four packet switch arrays 17 1 , 17 2 , 17 3 and 17 4 are themselves interconnected through leads 35 to implement packet network 8 .
- arrays 17 1 , and 17 2 , 17 1 , and 17 3 , 17 1 , and 17 4 , 17 2 and 17 4 , and 17 3 and 17 4 are interconnected through respective leads 35 3 , 35 1 , 35 2 , 15 11 and 15 8 .
- file servers 40 which are conventional and well known in the art, are coupled, for packet communication, through leads 35 , specifically leads 35 4 , 35 5 , 35 6 and 35 7 to the switch arrays within respective processing clusters 10 1 , 10 3 , 10 4 and 10 2 in order to write (download) a desired file(s) into any processing element for subsequent use thereat or to receive (upload) and subsequently store a file(s) from any processing element.
- cluster 10 1 This cluster contains sixteen separate processing elements, all of which are identical.
- Each of these processing elements is microprocessor based and specifically contains a reduced instruction set (RISC) microprocessor, such as preferably a RISC System/6000 type microprocessor manufactured by the IBM Corporation, and associated memory, input/output (I/O) and supporting circuitry. Since the circuitry of each of these elements has essentially no bearing on the invention and is conventional and certainly readily apparent to anyone skilled in the art, each of these elements will not be discussed in any greater detail.
- RISC reduced instruction set
- Each processing element such as illustratively elements 15 1 , and 15 16 , can communicate on a bi-directional basis through bi-directional switch array 17 1 , and hence through packet network 8 with any other such element or the file servers. In doing so, each of these elements is connected through a pair of half-duplex links to a corresponding input port (also hereinafter referred to as a “receiver”) of an 8-by-8 port bi-directional switching circuit located within this switch array.
- Switch array 17 contains eight separate identical 8-by-8 switching circuits 25 (specifically circuits 25 1 , 25 2 , 25 3 , 25 4 , 25 5 , 25 6 , 25 7 and 25 8 ) inter-connected through leads 27 .
- each of these switching circuits routes packets from any of eight input ports to any of eight output ports.
- the inter-connected switching circuits situated within switch array 17 implement a bi-directional 16-by-16 packet switch.
- Our invention resides within each of the switching circuits.
- each pair of half-duplex lines that connects to each processing element is shown as a single full-duplex line, such as lines 22 1 and 22 16 that respectively link processing elements 15 1 and 15 16 to switching circuits 25 1 and 25 4 .
- each processing element such as element 15 1
- a packet i.e., an “originating” element
- a destination element such as element 15 33
- the entire packet (also referred to herein as a “message”) is limited to a maximum of 255 by tesin length.
- the length field specifies the length of the entire packet, in bytes.
- the routing code is formed of a number of successive groups of three-bit values, packed two groups per byte, with each group designating an output port address within a given 8-by-8 switching circuit.
- a number of such switching circuits are serially connected to implement successive routing stages.
- the number of such three-bit groups is governed by the number of successive routing stages, i.e., successive inter-connected individual switching circuits, used within the network.
- that stage examines the most significant three-bit group to discern the specific output port for that packet and then discards this group and shortens that packet accordingly. Accordingly, the next three-bit group becomes the most significant group for use by the next successive routing stage, and so forth.
- the data is a variable length field of application data provided by an application executing at the origination processing element and destined for use by a destination processing element.
- FIG. 2 depicts a simplified block diagram of a token based flow control and communication protocol used for inter-processor communication within system 5 shown in FIG. 1 .
- ten leads carry communication between a transmitting, i.e., originating, processing element (or other switching circuit), here shown as illustratively element 15 1 , and a receiving, i.e., destination, processing element (or other switching circuit), here illustratively element 15 33 .
- Eight-bit leads 270 carry byte serial data, i.e., one message byte at a time per clock cycle.
- Single-bit lead 280 carries a data valid signal which indicates, through a high level, the presence of a valid signal on leads 270 .
- single-bit lead 260 shown in FIG. 2, carries a token signal which can be simplistically viewed as a single bit signal traveling across this lead. This signal, which is directed in the reverse direction as the data flow over leads 270 , when received, represents a right of its recipient, here element 15 1 , to send another byte of data.
- transmitting element 15 1 contains an internal token counter which, at system initialization, is preset to contain a specific number of tokens, typically “31”. Whenever that element sends a message byte across leads 270 , the token count at this element is decremented by one. Whenever receiving element 15 33 is willing to accept another message byte from this transmitting element, the former element sends a token back across lead 260 to increment the token count at the latter element.
- the transmitting element can only send message bytes if its internal token counter contains a non-zero count. Once the count reaches zero, the transmitter is inhibited from sending any further bytes until its token count is appropriately changed.
- the token signal in practice, is encoded as a two-bit serial signal: “O1” defines zero tokens and “10” defines two tokens.
- receiving element 1533 can decide to send either zero or two tokens to transmitting element 15 1 .
- Essentially identical token based flow control operations occur within receiving element 15 33 to control the number of bytes that element can receive.
- each token impinging upon the receiving element and stored within its internal token counter represents the right of that particular element to receive another message byte.
- FIG. 3 a block diagram of the switching circuit, illustratively circuit 25 1 and which is situated within system 5 shown in FIG. 1, is depicted in FIG. 3 .
- all input ports (receivers) are shown on the left side of FIG. 3 and all output ports (transmitters) are shown on the right side.
- that element is connected to both an input port and an output port of the same switching circuit.
- the switching circuit is illustratively embodied within an 8-by-8 packet router, the present invention can be readily used within nearly any size packet switch (router) to avoid deadlocks.
- switching circuit 25 1 contains eight identical input port circuits (receivers) 310 1 , 310 2 , 310 3 , . . . , 310 8 , all of which collectively form receivers 310 ; eight identical output port circuits (transmitters) 380 1 , 380 2 , 380 3 , . . . , 380 8 , all of which collectively form transmitters 380 ; central queue 350 ; and cross-point switching matrix 360 .
- Each of receivers 310 such as receiver 310 1 , is connected, through the ten-lead token based protocol arrangement described above in connection with FIG. 2, via associated leads, such as leads 22 1 , to a corresponding processing element, such as processing element 15 1 .
- the eight-bit data leads and the single-bit valid lead are collectively shown as a common input (IN) lead, such as lead 311 .
- the token (flow control-FC) lead is shown as separate single-bit lead 313 .
- Each of these receivers performs four major functions as discussed in detail below: administering the channel flow-control protocol, buffering incoming messages using an internal queue, deserializing incoming messages into 8-byte message portions (hereinafter referred to as “chunks”) and decoding message routing information.
- Each processor is responsible for fully assembling a packet, including embedding appropriate header and trailer information, prior to supplying that packet to the companion receiver. Based upon contention, message chunks are then directed from the associated receivers along either of two paths.
- cross-point matrix 360 If the destination output port for that chunk is then available and hence not experiencing any contention, that chunk is immediately routed through cross-point matrix 360 to effectuate a very low latency packet transfer. Alternatively, if there is traffic in the central queue contending for routing to the same output port, then that chunk is written into a corresponding 64-bit slot within the central queue. The packet is thereafter transferred out of the central queue to its destination output port circuit when that circuit once again becomes available.
- Central queue 350 is dual-ported and contains 128 64-bit locations, each of which can store a message chunk. Since both the central queue and the cross-point switching matrix can route packets to the same destination output port circuit, cross-point switching matrix 360 forms a so-called “by-pass” path around the central queue.
- each receiver has a separate eight-byte output (labeled 0 Q ) which is connected, via 64-bit bus 315 , to a 64-bit data input (labeled IN) on central queue 350 .
- the central queue has a 64-bit output (labeled OUT) which is connected, via bus 370 , to a 64-bit input of each of the transmitters. Chunks are supplied to and written from the central queue on a time-multiplexed basis, with each receiver supplying its associated chunk during a corresponding clock cycle and each transmitter obtaining a message chunk destined therefor during its associated corresponding clock cycle. As long as chunks are situated within corresponding receivers for subsequent routing or are situated in the central queue and awaiting delivery to a destination transmitter, one of these receivers and one of these transmitters is served each clock cycle, with the receivers being independently served apart from the transmitters.
- each receiver issues a request signal to the destination transmitter.
- the destination transmitter contains an arbiter which arbitrates the status of eight request signals, one from each receiver, and determines which of the receivers, if any, is then to be granted permission to send its message chunk through the cross-point switch to that output port.
- each of the receivers issues eight request (REQ) signals, and particularly one to each transmitter.
- receiver 310 issues eight separate request signals REQ (1,1), . . .
- the request and grant signals e.g., REQ (1,8) carry sub-scripts wherein the first sub-script denotes the index of the specific originating receiver, here receiver 310 1 , and the second sub-script denotes the index of the specific destination transmitter, here illustratively transmitter 380 8 .
- each of the other receivers issues eight separate request signals REQ (2,1), . . . , (2,8) ; REQ (3,1), . . . , (3,8) ; . . . , REQ (8,1), . . . REQ(8,8) which are connected, through eight-bit leads 314 2 , 314 3 , . . .
- each transmitter supplies eight grant signals, with one of these grant signals being connected to the same corresponding grant signal input on each receiver.
- transmitter 380 supplies eight grant signals (GRT (1,1), . . .
- the grant signals (GRT (1,2), . . . , (8,2) ; GRT (1,3), . . . , (8,3) ; . . . GRT (1,8), . . . , (8,8) ) issued by each of the other transmitters, are connected by corresponding leads 376 2 , 376 3 , . . . , 376 8 , bus 320 and leads 316 2 , 316 3 , . . . , 316 8 to corresponding grant signal inputs of each of the receivers.
- that receiver In response to the particular grant signal being asserted at a given receiver, that receiver then routes its current message chunk, in eight-byte serial fashion, onward, via output leads (O x ) into cross-point switching matrix 360 .
- Receivers 310 1 , 310 2 , 310 3 , . . . , 310 8 are connected, via 8-bit leads 312 1 , 312 2 , 312 3 , . . . , 312 8 , to corresponding byte-serial inputs of the cross-point switching matrix.
- Separate byte-serial outputs of this switching matrix are connected through leads 372 1 , 372 2 , 372 3 , . . .
- switching matrix 360 is of conventional design, it will not be discussed in any greater detail.
- Those message chunks that are experiencing contention are routed into available 64-bit slots within central queue 350 , pending subsequent availability of the destination transmitters.
- This queue implements a buffered time-multiplexed 8-way router.
- the stored messages are organized into eight linked lists with each list being associated with a different transmitter.
- Each of transmitters 380 specifically transmitters 380 1 , 380 2 , 380 3 , . . . , 380 8 , as described in detail below, performs several functions. Specifically, each transmitter accepts message chunks, in time-divisional fashion and in 64-bit parallel form, from the central queue, serializes these chunks, buffers the resulting serial information in an output queue and then transmits the resulting buffered information, as a byte-serial bit stream, to an output channel in accordance with the ten-bit token based flow control protocol.
- Each transmitter also accepts message portions in byte-serial fashion that have been routed through cross-point switching matrix 360 and properly multiplexes these byte-serial portions into the byte-serial bit stream for the associated output channel.
- each transmitter produces byte-wise serial data on eight data leads and a valid data signal on a separate one-bit lead. For simplicity, all these nine leads are shown as a single common lead (OUT).
- the associated flow control lead is shown as a separate lead (FC). All these output leads collectively form leads 390 with those leads supplied by illustratively transmitter 380 1 being leads 390 1 .
- Control circuitry 340 which is conventional logic and finite state machine circuitry, generates various control and clock signals to properly control the operation of switching circuit 25 1 . These control signals are typified by appropriate clock and timing signals applied, via leads 344 , to central queue 350 and, via leads 346 , to other components of this circuit. An external source of clock pulses is applied over lead 342 as an input to control circuitry 340 . Inasmuch as all these clock and control signals would be readily apparent to anyone skilled in the art and to simplify the drawing, none of these particular signals is shown or described in any greater detail.
- central queue 350 contains 128 8-byte locations all of which would be shared and dynamically allocated according to demand then existing. Furthermore, the receivers and transmitters are served on a first-come first-served basis.
- the present invention comprises a switching circuit, predicated on that described above, that advantageously avoids deadlock when used in a bi-directional packet network.
- the central queue rather than having all its 8-byte slots shared among all the output ports, is apportioned to contain one (or more) slots that is dedicated (reserved) to each output port with all the remaining slots being shared among all these ports.
- one slot is dedicated to each output port with the remaining 120 slots being shared by all these ports.
- each of the receivers appropriately classifies each message chunk that is then to be routed to a destination transmitter based upon its current need at that transmitter, i.e., whether that chunk is “critical” in the sense that this chunk must be routed as soon as possible to the transmitter or “non-critical” in the sense that this chunk can wait, and whether the shared portion of the central queue is currently full or not. If the current message chunk is critical, regardless of whether the shared portion is full or not, that chunk is unconditionally stored in the dedicated slot, of the central queue, for the corresponding transmitter. Once this transmitter becomes available, that chunk is read, during a single clock cycle, from this slot into this transmitter.
- the current message chunk can be accommodated regardless of the status of the shared portion of the queue.
- this message chunk is non-critical and the shared portion of the central queue is not full, i.e. a shared slot(s) is then available to store that message chunk, a request is made by the receiver to an arbiter to determine whether, in view of similar requests then being made by all the other receivers, this chunk is to be stored in the shared portion of the central queue.
- Arbitration is conducted on a least recently used basis, i.e., the receiver that was not serviced for the longest time becomes the next one to be serviced.
- Arbitration is also conducted, in response to requests made by the transmitters, to extract stored message chunks, if any exist from the shared portion of the central queue that are destined for these transmitters. This arbitration is also conducted on a least recently used basis.
- separate arbitration is used to control access into and from the central queue. Though utilizing the same least recently used methodology, these arbitrations function separately and totally independently of one another to assure the requisite fairness among all the input and output ports then separately vying for write or read access, respectively, to the central queue.
- FIG. 4 illustrates a deadlock condition
- FIG. 4 depicts two illustrative switching circuits 25 1 and 253 33 , within system 5 , that are situated on opposite ends of an inter-processor communication channel.
- Processing elements 15 1 and 15 33 are respectively connected to circuits 25 1 and 25 33 in order to bi-directionally transfer message packets therebetween. Deadlock arises if, during the course of system processing, all the message storage locations become full in such a manner as to block any further message transfers. This can occur, as shown in FIG.
- central queues 350 and 450 when each one of two corresponding memory portions of both switching circuits (central queues 350 and 450 , and internal receiver FIFO (first-in first-out) queues 410 and 430 , and transmitter FIFO queues 420 and 440 ) is totally full with traffic that is heading in an opposing direction to the traffic then stored in the other corresponding memory portion, i.e., central queue 350 is completely full with message traffic headed to the right while central queue 450 is completely full with message traffic headed to the left.
- central queue 350 is completely full with message traffic headed to the right
- central queue 450 is completely full with message traffic headed to the left.
- central queue 350 of switching circuit 25 1 contains two types of slots in the above-incorporated U.S. Pat. No. 5,546,391: eight dedicated slots in which each output port has a dedicated slot into which a message chunk can be stored for transfer to that port; with the remaining 120 slots being shared among all output ports and dynamically allocated for use by any of the output ports based upon current traffic needs.
- each of the receivers contains an appropriate classifier circuit that, based upon the status of that chunk (critical/non-critical) and the status of the central queue (full/not full) either stores that chunk in the dedicated slot in the central queue for the output port to which the chunk is destined or issues a request to store that chunk in a shared slot in this queue.
- the status of the central queue (QS) is provided by signals appearing on leads 355 , shown in FIG. 3 and connected to each of the receivers.
- identical separate least recently used arbiters 368 and 385 are used to separately arbitrate access into (write access) and from (read access) the central queue.
- each one of receivers 310 (specifically receivers 310 1 , 310 2 , 310 3 , . . . , 310 8 ) issues a separate central queue write (input) request signal over a corresponding request lead within leads 386 (which respectively contains paired grant and request leads 386 1 , 386 2 , 386 3 , . . . , 386 8 ) to arbiter 385 .
- this arbiter In response to the requests then occurring, this arbiter generates a grant signal (GRT_QI), typically by asserting an appropriate logic level on the grant lead within the appropriate paired request and grant leads, back to the receiver then accorded permission to write a memory chunk into the central queue.
- GRT_QI grant signal
- arbiter 385 also generates an enable signal, on leads 389 , to signal the central queue to write the message chunk then appearing on bus 315 into this queue and to specify the destination transmitter for this chunk.
- circuitry within the central queue selects the particular slot to use to store this particular incoming message chunk and the particular list to which the current message containing this chunk is to be appended.
- a critical chunk is written into the dedicated slot for the corresponding destination transmitter since that slot will always be available at the time.
- a non-critical chunk is typically written into the first available shared slot.
- Message chunks are stored within the central queue in the form of eight linked lists: one list for each different transmitter. Each list contains all the successive message chunks that have been stored for the corresponding transmitter as well as, whenever the need arises, separate successive messages destined therefor. As each message chunk is stored within the central queue, that chunk is simply added to the tail of the corresponding list with that list being extended accordingly. Conventional circuitry within the central queue maintains an internal table with entries that maintain links between the chunks then stored within the central queue in order to define the eight lists.
- this circuitry In response to the read and write enable signals applied to the central queue, this circuitry manipulates the appropriate list and updates the table: either by accessing the chunk stored at the head of the list in the case of a read operation or adding an incoming message chunk to the tail of this list in the case of a write operation, and altering the list structure accordingly.
- each one of transmitters 380 (specifically transmitters 380 1 , 380 2 , 380 3 , . . . , 380 8 ) issues a separate central queue read (output) request signal over a corresponding request lead within leads 383 (which respectively contains paired grant and request leads 383 1 , 383 2 , 383 3 , . . . , 383 8 ) to arbiter 368 .
- this arbiter In response to the requests then occurring, this arbiter generates a grant signal (GRT_QO) on leads 365 back to the read enable inputs of the central queue.
- the status of the grant signals specifies the specific transmitter then accorded permission to obtain a stored chunk from the central queue.
- the central queue In response to these grant signals appearing at the read enable inputs, the central queue reads the message chunk situated at the head of the list for that specific transmitter onto 8-byte bus 370 , and then deletes this chunk from the list.
- the grant signal is also applied, typically by asserting an appropriate logic level on the grant lead within the appropriate paired request and grant leads 383 , to this transmitter.
- performance simulations of switch networks indicate that the more shared buffering available, the better the overall switch network performance. Therefore, disclosed herein is an approach for enhancing the amount of shared logic within the central queue by removing the need to dedicate one (or more) chunk worth of space in the central queue for each output port of the switch network.
- the solution is to implement processing within the switch network which dynamically transfers message portions of a data packet from the shared central queue path to the cross-point switching matrix path, i.e., the bypass path, whenever a critical chunk is encountered and irrespective of any contention at the output port.
- FIG. 5 depicts a simplified view of a central queue-base packet switch, generally denoted 500 , in accordance with the principles of the present invention.
- Packet switch 500 includes multiple receivers 510 each of which is coupled through a shared bus 520 to parallel coupled bypass path 530 and central shared queue path 540 .
- the outputs of the bypass path and the central shared queue path are sent through a second common bus 550 to one or more transmitters or output ports 560 of the packet switch 500 .
- a receiver is allowed to request the bypass path when the beginning of a packet is received. If the desired output port is free, the receiver is granted the bypass path giving the data transfer a low latency.
- the receiver writes the data to the central shared queue allowing the transfer to continue. Also, after the receiver is granted the dedicated bypass path, if the output port cannot transmit data, the receiver will be informed of this condition and the receiver changes from using the bypass path to writing the data to the central shared queue. When the receiver starts writing data to the shared queue, the output transmitter is notified and the rest of the packet is forwarded through the central shared queue, and thus, in the prior design of the U.S. Pat. No. 5,546,391, it is necessary to have dedicated slots or emergency slots within the common shared buffer for handling forwarding of a critical chunk to a waiting output port.
- the packet switch is modified to transfer message portions of a data packet from the central shared queue path to the bypass path (i.e., the cross-point switching matrix path) upon detection of a critical chunk of data.
- the bypass path i.e., the cross-point switching matrix path
- transfer of data message portions from forwarding through the bypass path to the shared central queue path is accompanied with selective transfer of data message portions from forwarding through the shared central queue path back to the bypass path.
- This return to the bypass path is used if the receiver starts writing data to the shared queue and stops receiving data before the packet is finished or is unable to keep ahead of the output port due to congestion in the central shared queue.
- the central queue controls will signal both the receiver and the output port telling them to change operation and use the bypass path.
- FIG. 6 depicts one embodiment of conventional flow control within a central queue-based packet switch.
- Control starts 600 with receipt of the beginning message portion of a data packet 610 .
- the bypass path is requested 620 and a determination is made whether the bypass path has been granted 630 . If “yes”, then an “iword” is sent to the cross-point switch (i.e., the bypass path) 640 .
- an “iword” comprises a portion of a chunk of data.
- the logic determines whether the end of the data packet has been reached 650 , and if “no”, then the logic continues sending the next iword to the bypass path. Once the end of packet is reached, processing returns to await receipt of a next data packet 610 .
- the message chunk is sent to a central queue path 660 and processing determines whether the end of packet has been reached 670 . If “no”, then a next chunk in the data packet is forwarded to the central queue path 660 for transfer to the output port, and the process repeats until all message chunks have been forwarded. Once the end of packet is reached, processing returns to await receipt of a next data packet 610 .
- FIG. 7 depicts one embodiment of message data processing in accordance with the principles of the present invention. As shown, in this embodiment there is a dynamic transfer of data chunks from the central queue path back to the bypass path.
- processing determines whether a beginning portion of a data packet has been received 710 . Once the beginning of a data packet is received, processing requests bypass path access 720 and then queries whether the bypass path has been granted 730 . If “yes”, then a first portion of the data (i.e., an “iword”) is forwarded to the cross-point switch, 740 . After forwarding each iword, processing determines whether the end of the data packet has been reached 750 . If “yes”, then return is made to await receipt of the next data packet 710 .
- processing determines whether the output port has signaled it is out of tokens for handling a next data portion 760 . If “no”, then a next “iword” of the data packet is forwarded to the cross-point switch 740 , and this process repeats until all message portions have been forwarded.
- a next portion of the data packet (i.e., a data “chunk”) is forwarded to the central queue buffer 770 for retrieval by the output port when additional tokens are received.
- processing would have initially sent a chunk of data to the central queue buffer from inquiry 730 as shown in FIG. 7 .
- processing determines whether the end of the data packet has been reached 780 . If “yes”, then return is made to await receipt of a next data packet 710 . Assuming that additional data portions of the packet are to be forwarded, then processing determines whether the output port is signaling to use the cross-point switch path 790 .
- This signal from the output port may comprise the same signal used in the above described U.S. Pat. No. 5,546,391 to place a data portion into an emergency slot within the central queue buffer.
- the signal is used to initiate transfer of the next data portion, and subsequent data portions, from the central queue path to the bypass path. Therefore, if the output port is signaling that the cross-point switch is to be used 790 , then processing transfers a next “iword” of data to the cross point switch 740 . (Again an iword comprises a portion of a chunk of data.) Otherwise, a next chunk of data is forwarded to the central queue buffer 770 .
- the present invention can be included in an article of manufacture (e.g., one or more computer program products) having, for instance, computer usable media.
- the media has embodied therein, for instance, computer readable program code means for providing and facilitating the capabilities of the present invention.
- the article of manufacture can be included as part of a computer system or sold separately.
- At least one program storage device readable by a machine tangibly embodying at least one program of instructions executable by the machine to perform the capabilities of the invention can be provided.
Abstract
Description
Claims (22)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/347,161 US6606326B1 (en) | 1999-07-02 | 1999-07-02 | Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/347,161 US6606326B1 (en) | 1999-07-02 | 1999-07-02 | Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path |
Publications (1)
Publication Number | Publication Date |
---|---|
US6606326B1 true US6606326B1 (en) | 2003-08-12 |
Family
ID=27662962
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/347,161 Expired - Lifetime US6606326B1 (en) | 1999-07-02 | 1999-07-02 | Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path |
Country Status (1)
Country | Link |
---|---|
US (1) | US6606326B1 (en) |
Cited By (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020075267A1 (en) * | 2000-11-17 | 2002-06-20 | Anthony Cake | Processing web editor for data processing in a digital oscilloscope or similar instrument |
US20020147851A1 (en) * | 2001-03-01 | 2002-10-10 | Tomohiro Morimura | Multi-processor system apparatus |
US20030079091A1 (en) * | 2000-05-12 | 2003-04-24 | Masao Nakano | Data control device and an ATM control device |
US20030189942A1 (en) * | 2002-04-04 | 2003-10-09 | Fujitsu Network Communications, Inc. | Crosspoint switch having multicast functionality |
US20030223415A1 (en) * | 2002-05-29 | 2003-12-04 | Rahul Saxena | Method and system for a multi-level memory |
US20030223447A1 (en) * | 2002-05-29 | 2003-12-04 | Rahul Saxena | Method and system to synchronize a multi-level memory |
US20050074010A1 (en) * | 2003-02-18 | 2005-04-07 | Kil-Lyeon Kim | Method and apparatus for exchanging routing information in distributed router system |
US20050083921A1 (en) * | 2000-10-31 | 2005-04-21 | Chiaro Networks Ltd. | Router switch fabric protection using forward error correction |
US6904474B1 (en) * | 1999-07-16 | 2005-06-07 | Texas Instruments Incorporated | Using write request queue to prevent bottlenecking on slow ports in transfer controller with hub and ports architecture |
US6963577B1 (en) * | 1999-08-23 | 2005-11-08 | Fujitsu Limited | Packet Switch |
US6993018B1 (en) * | 1999-08-03 | 2006-01-31 | Telefonaktiebolaget Lm Ericsson (Publ) | Priority signaling for cell switching |
US20060031625A1 (en) * | 2001-03-22 | 2006-02-09 | I-Bus Corporation | Hybrid switching architecture |
US7042891B2 (en) * | 2001-01-04 | 2006-05-09 | Nishan Systems, Inc. | Dynamic selection of lowest latency path in a network switch |
US20060174052A1 (en) * | 2005-02-02 | 2006-08-03 | Nobukazu Kondo | Integrated circuit and information processing device |
US7493428B2 (en) | 2006-07-25 | 2009-02-17 | International Business Machines Corporation | Method and system for dynamic queue splitting for maximizing throughput of queue based operations while maintaining per-destination order of operations |
US7672303B1 (en) * | 2005-02-17 | 2010-03-02 | Emc Corporation | Arbitration method and system |
US7707367B1 (en) * | 2007-06-28 | 2010-04-27 | Emc Corporation | Data storage system having separate atomic operation/non-atomic operation paths |
US7729239B1 (en) * | 2004-12-27 | 2010-06-01 | Emc Corporation | Packet switching network end point controller |
US7751402B2 (en) * | 1999-12-29 | 2010-07-06 | Intel Corporation | Method and apparatus for gigabit packet assignment for multithreaded packet processing |
US20110158250A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Assigning Work From Multiple Sources to Multiple Sinks Given Assignment Constraints |
US20110158254A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Dual scheduling of work from multiple sources to multiple sinks using source and sink attributes to achieve fairness and processing efficiency |
US20110158249A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Assignment Constraint Matrix for Assigning Work From Multiple Sources to Multiple Sinks |
US7979572B1 (en) | 2007-06-28 | 2011-07-12 | Emc Corporation | Data storage system having operation code in address portion for atomic operations |
US8234653B1 (en) * | 2003-03-07 | 2012-07-31 | Juniper Networks, Inc. | Scalable packet processing systems and methods |
US20130136129A1 (en) * | 2011-11-09 | 2013-05-30 | Stmicroelectronics (Grenoble 2) Sas | Zero-cycle router for networks on-chip |
US20150188845A1 (en) * | 2014-01-02 | 2015-07-02 | Broadcom Corporation | Mitigating bandwidth degradation in a switching device |
US20150264730A1 (en) * | 2014-03-12 | 2015-09-17 | Tencent Technology (Shenzhen) Company Limited | Method and device for controlling peripheral devices via a social networking platform |
JP2016220202A (en) * | 2015-05-15 | 2016-12-22 | 華為技術有限公司Ｈｕａｗｅｉ Ｔｅｃｈｎｏｌｏｇｉｅｓ Ｃｏ．，Ｌｔｄ． | Data exchange system, method for transmitting data and exchange apparatus |
US11502934B2 (en) * | 2018-08-21 | 2022-11-15 | The George Washington Univesity | EZ-pass: an energy performance-efficient power-gating router architecture for scalable on-chip interconnect architecture |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4475192A (en) | 1982-02-16 | 1984-10-02 | At&T Bell Laboratories | Data packet flow control scheme for switching networks |
US4760570A (en) | 1986-08-06 | 1988-07-26 | American Telephone & Telegraph Company, At&T Bell Laboratories | N-by-N "knockout" switch for a high-performance packet switching system |
US5274642A (en) | 1992-06-05 | 1993-12-28 | Indra Widjaja | Output buffered packet switch with a flexible buffer management scheme |
US5291482A (en) | 1992-07-24 | 1994-03-01 | At&T Bell Laboratories | High bandwidth packet switch |
US5453978A (en) * | 1994-04-04 | 1995-09-26 | International Business Machines Corporation | Technique for accomplishing deadlock free routing through a multi-stage cross-point packet switch |
US5546391A (en) * | 1993-03-04 | 1996-08-13 | International Business Machines Corporation | Central shared queue based time multiplexed packet switch with deadlock avoidance |
US5557607A (en) | 1994-04-28 | 1996-09-17 | Network Synthesis, Inc. | Methods and apparatus for enqueueing and dequeueing data cells in an ATM switch fabric architecture |
US5602841A (en) * | 1994-04-07 | 1997-02-11 | International Business Machines Corporation | Efficient point-to-point and multi-point routing mechanism for programmable packet switching nodes in high speed data transmission networks |
US5602988A (en) | 1993-11-26 | 1997-02-11 | Telefonaktiebolaget Lm Ericsson | Fault tolerant queue system |
US5612952A (en) | 1993-09-20 | 1997-03-18 | Kabushiki Kaisha Toshiba | Packet switch and buffer for storing and processing packets routing to different ports |
US5812549A (en) * | 1996-06-25 | 1998-09-22 | International Business Machines Corporation | Route restrictions for deadlock free routing with increased bandwidth in a multi-stage cross point packet switch |
-
1999
- 1999-07-02 US US09/347,161 patent/US6606326B1/en not_active Expired - Lifetime
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4475192A (en) | 1982-02-16 | 1984-10-02 | At&T Bell Laboratories | Data packet flow control scheme for switching networks |
US4760570A (en) | 1986-08-06 | 1988-07-26 | American Telephone & Telegraph Company, At&T Bell Laboratories | N-by-N "knockout" switch for a high-performance packet switching system |
US5274642A (en) | 1992-06-05 | 1993-12-28 | Indra Widjaja | Output buffered packet switch with a flexible buffer management scheme |
US5291482A (en) | 1992-07-24 | 1994-03-01 | At&T Bell Laboratories | High bandwidth packet switch |
US5546391A (en) * | 1993-03-04 | 1996-08-13 | International Business Machines Corporation | Central shared queue based time multiplexed packet switch with deadlock avoidance |
US5805589A (en) * | 1993-03-04 | 1998-09-08 | International Business Machines Corporation | Central shared queue based time multiplexed packet switch with deadlock avoidance |
US5612952A (en) | 1993-09-20 | 1997-03-18 | Kabushiki Kaisha Toshiba | Packet switch and buffer for storing and processing packets routing to different ports |
US5602988A (en) | 1993-11-26 | 1997-02-11 | Telefonaktiebolaget Lm Ericsson | Fault tolerant queue system |
US5453978A (en) * | 1994-04-04 | 1995-09-26 | International Business Machines Corporation | Technique for accomplishing deadlock free routing through a multi-stage cross-point packet switch |
US5602841A (en) * | 1994-04-07 | 1997-02-11 | International Business Machines Corporation | Efficient point-to-point and multi-point routing mechanism for programmable packet switching nodes in high speed data transmission networks |
US5557607A (en) | 1994-04-28 | 1996-09-17 | Network Synthesis, Inc. | Methods and apparatus for enqueueing and dequeueing data cells in an ATM switch fabric architecture |
US5812549A (en) * | 1996-06-25 | 1998-09-22 | International Business Machines Corporation | Route restrictions for deadlock free routing with increased bandwidth in a multi-stage cross point packet switch |
Cited By (47)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100274946A1 (en) * | 1999-02-23 | 2010-10-28 | Nobukazu Kondo | Integrated circuit and information processing device |
US6904474B1 (en) * | 1999-07-16 | 2005-06-07 | Texas Instruments Incorporated | Using write request queue to prevent bottlenecking on slow ports in transfer controller with hub and ports architecture |
US6993018B1 (en) * | 1999-08-03 | 2006-01-31 | Telefonaktiebolaget Lm Ericsson (Publ) | Priority signaling for cell switching |
US6963577B1 (en) * | 1999-08-23 | 2005-11-08 | Fujitsu Limited | Packet Switch |
US7751402B2 (en) * | 1999-12-29 | 2010-07-06 | Intel Corporation | Method and apparatus for gigabit packet assignment for multithreaded packet processing |
US6895473B2 (en) * | 2000-05-12 | 2005-05-17 | Fujitsu Limited | Data control device and an ATM control device |
US20030079091A1 (en) * | 2000-05-12 | 2003-04-24 | Masao Nakano | Data control device and an ATM control device |
US8315175B2 (en) * | 2000-10-31 | 2012-11-20 | Foundry Networks, Llc | Router switch fabric protection using forward error correction |
US20050083921A1 (en) * | 2000-10-31 | 2005-04-21 | Chiaro Networks Ltd. | Router switch fabric protection using forward error correction |
US20020075267A1 (en) * | 2000-11-17 | 2002-06-20 | Anthony Cake | Processing web editor for data processing in a digital oscilloscope or similar instrument |
US7042891B2 (en) * | 2001-01-04 | 2006-05-09 | Nishan Systems, Inc. | Dynamic selection of lowest latency path in a network switch |
US7203816B2 (en) * | 2001-03-01 | 2007-04-10 | Semiconductor Technology Academic Research Center | Multi-processor system apparatus allowing a compiler to conduct a static scheduling process over a large scale system of processors and memory modules |
US20020147851A1 (en) * | 2001-03-01 | 2002-10-10 | Tomohiro Morimura | Multi-processor system apparatus |
US20060031625A1 (en) * | 2001-03-22 | 2006-02-09 | I-Bus Corporation | Hybrid switching architecture |
US7151777B2 (en) * | 2002-04-04 | 2006-12-19 | Fujitsu Limited | Crosspoint switch having multicast functionality |
US20030189942A1 (en) * | 2002-04-04 | 2003-10-09 | Fujitsu Network Communications, Inc. | Crosspoint switch having multicast functionality |
US7293130B2 (en) * | 2002-05-29 | 2007-11-06 | Intel Corporation | Method and system for a multi-level memory |
US20030223447A1 (en) * | 2002-05-29 | 2003-12-04 | Rahul Saxena | Method and system to synchronize a multi-level memory |
US20030223415A1 (en) * | 2002-05-29 | 2003-12-04 | Rahul Saxena | Method and system for a multi-level memory |
US20050074010A1 (en) * | 2003-02-18 | 2005-04-07 | Kil-Lyeon Kim | Method and apparatus for exchanging routing information in distributed router system |
US8713575B2 (en) | 2003-03-07 | 2014-04-29 | Juniper Networks, Inc. | Scalable packet processing systems and methods |
US8234653B1 (en) * | 2003-03-07 | 2012-07-31 | Juniper Networks, Inc. | Scalable packet processing systems and methods |
US7729239B1 (en) * | 2004-12-27 | 2010-06-01 | Emc Corporation | Packet switching network end point controller |
US20060174052A1 (en) * | 2005-02-02 | 2006-08-03 | Nobukazu Kondo | Integrated circuit and information processing device |
US7672303B1 (en) * | 2005-02-17 | 2010-03-02 | Emc Corporation | Arbitration method and system |
US7493428B2 (en) | 2006-07-25 | 2009-02-17 | International Business Machines Corporation | Method and system for dynamic queue splitting for maximizing throughput of queue based operations while maintaining per-destination order of operations |
US7707367B1 (en) * | 2007-06-28 | 2010-04-27 | Emc Corporation | Data storage system having separate atomic operation/non-atomic operation paths |
US7979572B1 (en) | 2007-06-28 | 2011-07-12 | Emc Corporation | Data storage system having operation code in address portion for atomic operations |
US8391305B2 (en) | 2009-12-30 | 2013-03-05 | International Business Machines Corporation | Assignment constraint matrix for assigning work from multiple sources to multiple sinks |
US20110158249A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Assignment Constraint Matrix for Assigning Work From Multiple Sources to Multiple Sinks |
US20110158254A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Dual scheduling of work from multiple sources to multiple sinks using source and sink attributes to achieve fairness and processing efficiency |
US20110158250A1 (en) * | 2009-12-30 | 2011-06-30 | International Business Machines Corporation | Assigning Work From Multiple Sources to Multiple Sinks Given Assignment Constraints |
US8295305B2 (en) | 2009-12-30 | 2012-10-23 | International Business Machines Corporation | Dual scheduling of work from multiple sources to multiple sinks using source and sink attributes to achieve fairness and processing efficiency |
US8532129B2 (en) | 2009-12-30 | 2013-09-10 | International Business Machines Corporation | Assigning work from multiple sources to multiple sinks given assignment constraints |
US9306844B2 (en) * | 2011-11-09 | 2016-04-05 | Stmicroelectronics (Grenoble 2) Sas | Zero-cycle router for networks on-chip |
US20130136129A1 (en) * | 2011-11-09 | 2013-05-30 | Stmicroelectronics (Grenoble 2) Sas | Zero-cycle router for networks on-chip |
US20150188845A1 (en) * | 2014-01-02 | 2015-07-02 | Broadcom Corporation | Mitigating bandwidth degradation in a switching device |
US20150264730A1 (en) * | 2014-03-12 | 2015-09-17 | Tencent Technology (Shenzhen) Company Limited | Method and device for controlling peripheral devices via a social networking platform |
US9313289B2 (en) * | 2014-03-12 | 2016-04-12 | Tencent Technology (Shenzhen) Company Limited | Method and device for controlling peripheral devices via a social networking platform |
US9565263B2 (en) | 2014-03-12 | 2017-02-07 | Tencent Technology (Shenzhen) Company Limited | Method and device for controlling peripheral devices via a social networking platform |
US9614923B2 (en) | 2014-03-12 | 2017-04-04 | Tencent Technology (Shenzhen) Company Limited | Method and device for controlling peripheral devices via a social networking platform |
JP2016220202A (en) * | 2015-05-15 | 2016-12-22 | 華為技術有限公司Ｈｕａｗｅｉ Ｔｅｃｈｎｏｌｏｇｉｅｓ Ｃｏ．，Ｌｔｄ． | Data exchange system, method for transmitting data and exchange apparatus |
CN106302252A (en) * | 2015-05-15 | 2017-01-04 | 华为技术有限公司 | Data exchange system framework, the method sending data traffic and switch |
EP3094056A3 (en) * | 2015-05-15 | 2017-04-26 | Huawei Technologies Co., Ltd. | Data switching system, method for sending data traffic, and switching apparatus |
US9883261B2 (en) | 2015-05-15 | 2018-01-30 | Huawei Technologies Co., Ltd. | Data switching system, method for sending data traffic, and switching apparatus |
CN106302252B (en) * | 2015-05-15 | 2019-11-26 | 华为技术有限公司 | Data exchange system framework, the method and switch for sending data traffic |
US11502934B2 (en) * | 2018-08-21 | 2022-11-15 | The George Washington Univesity | EZ-pass: an energy performance-efficient power-gating router architecture for scalable on-chip interconnect architecture |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6606326B1 (en) | Packet switch employing dynamic transfer of data packet from central shared queue path to cross-point switching matrix path | |
US5546391A (en) | Central shared queue based time multiplexed packet switch with deadlock avoidance | |
US5894481A (en) | Fiber channel switch employing distributed queuing | |
EP0391583B1 (en) | Dual-path computer interconnect system with four-ported packet memory control | |
US5020020A (en) | Computer interconnect system with transmit-abort function | |
US5187780A (en) | Dual-path computer interconnect system with zone manager for packet memory | |
US5136582A (en) | Memory management system and method for network controller | |
EP0617368B1 (en) | Arbitration process for controlling data flow through an I/O controller | |
JP4124491B2 (en) | Packet routing switch that controls access to shared memory at different data rates | |
US8316171B2 (en) | Network on chip (NoC) with QoS features | |
US7039058B2 (en) | Switched interconnection network with increased bandwidth and port count | |
US7046633B2 (en) | Router implemented with a gamma graph interconnection network | |
US5675736A (en) | Multi-node network with internode switching performed within processor nodes, each node separately processing data and control messages | |
EP1287648B1 (en) | Switching system | |
US20020083233A1 (en) | System and method of allocating bandwith to a plurality of devices interconnected by a plurality of point-to-point communication links | |
US6922749B1 (en) | Apparatus and methodology for an input port of a switch that supports cut-through operation within the switch | |
JPH07210527A (en) | Cluster control device and cluster-connected multiprocessing system | |
JP2002508099A (en) | Method and apparatus for arbitrating access to shared memory for network ports operating at different data rates | |
US6046982A (en) | Method and apparatus for reducing data loss in data transfer devices | |
JP4391819B2 (en) | I / O node of computer system | |
US7218638B2 (en) | Switch operation scheduling mechanism with concurrent connection and queue scheduling | |
US20040081158A1 (en) | Centralized switching fabric scheduler supporting simultaneous updates | |
US11947483B2 (en) | Data flow management | |
JPH07244622A (en) | Data communication control equipment for computer system | |
JPH03179846A (en) | Self-routing speech path |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
REMI | Maintenance fee reminder mailed | ||
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HERRING, JAY R.;REEL/FRAME:026141/0526Effective date: 19990628 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |