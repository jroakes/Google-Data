US7036010B2 - Method and apparatus for a secure communications session with a remote system via an access-controlling intermediate system - Google Patents
Method and apparatus for a secure communications session with a remote system via an access-controlling intermediate system Download PDFInfo
- Publication number
- US7036010B2 US7036010B2 US09/733,475 US73347500A US7036010B2 US 7036010 B2 US7036010 B2 US 7036010B2 US 73347500 A US73347500 A US 73347500A US 7036010 B2 US7036010 B2 US 7036010B2
- Authority
- US
- United States
- Prior art keywords
- entity
- security
- application
- party
- session
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls
- H04L63/0281—Proxies
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/02—Network architectures or network communication protocols for network security for separating internal from external traffic, e.g. firewalls
- H04L63/029—Firewall traversal, e.g. tunnelling or, creating pinholes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0428—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload
- H04L63/0442—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the data content is protected, e.g. by encrypting or encapsulating the payload wherein the sending and receiving network entities apply asymmetric encryption, i.e. different keys for encryption and decryption
Definitions
- the present invention relates to a security protocol and an entity for implementing the protocol.
- SSL protocol Secure Socket Layer
- TLS Transport Layer Security
- TLS supports both client and server authentication and includes a key exchange so that a secure communication channel providing message encryption and integrity checking can be set up.
- TLS is directly linked to the TCP/IP as a transport. The receiver of a TLS message determines which TLS session it is for from the socket it receives it on. Since a single TLS session corresponds to one authenticated entity at each end, the overall result is to require a separate TLS session and TCP/IP connection for each pair of communicating entities.
- the client and server authentication is normally based on X.509 certificates and therefore identity driven.
- TLS does not support the mutual verification of attributes represented as tags in S ⁇ KI certificates (see References[ 2 ] and [ 3 ]).
- SSL does not support tunnelling in the sense of having an accessed-controlling intermediate system forward messages from a web browser to a target server. More particularly whilst a web proxy can be set up to act as a relay for SSL messages, there is no authentication of the browser by the web-proxy.
- IPSEC is another known security protocol (see Reference [ 4 ]). IPSEC deals with network link-level security and therefore exists much lower down the network stack than SSL and addresses different problems. IPSEC supports identity-driven tunnelling. IPSEC tunnels treat all packets on the same “simplex” connection as being part of the same tunnel. The IPSEC headers contain indication whether they are being employed in transport or tunnel mode and this information may not be available in the Security Association Database; the receiving entity therefore has to work out for itself whether it is meant to be effecting a tunnelling operation.
- a system with a local application entity and communications means by which the local application entity can exchange application messages with peer remote application entities on other systems the communication means including a transport entity for providing transport services, and a security entity logically positioned above the transport entity and operative to set up secure communication sessions with peer security entities in other systems for the passing of application messages in protocol data units (PDUs) exchanged between the security entities, the security entity including a tunnelling mechanism for establishing a tunnel through an access-controlling intermediate system whereby to enable the local application entity to exchange application messages securely with a remote application entity on another system reachable via said intermediate system, the tunnelling mechanism establishing this tunnel by first setting up a first security session with said intermediate system and then a nested, second, security session with said another system with PDUs associated with the second session being encapsulated within PDUs associated with the first session and being extracted by the intermediate system for sending to said another system; and each PDU having a message-type field by which the security entity in the intermediate system can determine whether
- a system with a local application entity and communications means by which the local application entity can exchange application messages with peer remote application entities on other systems including a transport entity for providing transport services, and a security entity logically positioned above the transport entity and operative to set up secure communication sessions with peer security entities in other systems for the passing of application messages in protocol data units (PDUs) exchanged between the security entities, each said security session being between specified application entities and the establishment of a security session being effected through a handshake process between the security entities concerned during which each application entity involved is required to show, by attribute certificates exchanged between the security entities, that it possesses certain attributes required of it by the other application entity;
- the security entity including a tunnelling mechanism for establishing a tunnel through an access-controlling intermediate system whereby to enable the local application entity to exchange application messages securely with a remote application entity on another system reachable via said intermediate system, the tunnelling mechanism establishing this tunnel by first setting up a first security session with said intermediate system and then a nes
- an arrangement comprising first, second and third systems each with a respective application entity and communications means by which the application entity can exchange application messages with the application entities on the other systems, the communication means including a transport entity for providing transport services, and a security entity logically positioned above the transport entity and operative to set up secure communication sessions with the security entities in the other systems for the passing of application messages in protocol data units (PDUs) exchanged between the security entities, the establishment of security sessions being dependent on each participating entity proving possession of, or access to, particular attributes, if any, required of it by the other entity;
- the security entity of the first system including a tunnelling mechanism for establishing a tunnel through the second system to the third system whereby to enable the application entity of the first system to exchange application messages securely with the application entity of the third system, the tunnelling mechanism establishing this tunnel by first setting up a first security session with the second system and then a nested, second, security session through the second system to the third system with PDUs associated with the second session
- FIG. 1 is a diagram of an end-to-end communication arrangement showing details of an embodiment of a Session layer Security (SLS) protocol entity used to establish a secure session over the communication arrangement;
- SLS Session layer Security
- FIG. 2 is a diagram depicting the basic Diffie-Hellman key exchange protocol
- FIG. 3 is a diagram showing the addition of signatures to the FIG. 2 protocol
- FIG. 4 is a diagram showing the addition of DH group flexibility to the FIG. 3 protocol
- FIG. 5 is a diagram showing the addition of justifications to the FIG. 4 protocol
- FIG. 6 is a diagram showing the addition of SPI exchange to the FIG. 5 protocol
- FIG. 7 is a diagram showing the addition of attribute advisories to the FIG. 6 protocol
- FIG. 8 is a diagram showing the FIG. 7 protocol with cipher suite negotiation added
- FIG. 9 is a diagram of the SLS key exchange handshake protocol
- FIG. 10 is a diagram of a sending subsystem of the secure channel functional block of the SLS entity of FIG. 1 ;
- FIG. 11 is a diagram of a receiving subsystem of the secure channel functional block of the SLS entity of FIG. 1 ;
- FIG. 12 is a diagram depicting tunnelling supported by nested sessions established by an SLS protocol entity
- FIG. 13 is a protocol stack including an XML generator layer below an SLS layer;
- FIG. 14 is a diagram illustrating the use of SLS entities in resource mediation environment
- FIG. 15 is a diagram illustrating the use of an SLS plug-in in a web browser for establishing a secure session with a resource mediation environment on a broker server;
- FIG. 16 is a diagram similar to FIG. 15 but showing the use of an SSL connection to provide a secure path between the web browser and broker server.
- FIG. 1 depicts an end-to-end secure communication path between a client 10 of a first end system 11 and a target service 12 of a second end-system 13 which client 10 wishes to use.
- This communication path involves a reliable connection 16 established between the end systems 11 , 13 by transport entities 14 , 15 of the two systems.
- the precise details of the transport mechanism used to establish and maintain connection 16 is not of importance to the present invention; however, by way of example, the connection 16 can be a TCP/IP connection.
- the transport entities 14 , 15 are arranged to handle multiple simultaneous connections potentially of different types, and this is represented by arrows 17 in FIG. 1 .
- connection 16 may carry traffic for multiple simultaneous sessions of one or more applications (the client 10 being one such application) as is indicated by arrows 18 .
- client 10 being one such application
- arrows 18 the client 10 and service 11
- the following description which is primarily concerned with how security is provided during communication between two applications (client 10 and service 11 ), will focus on the provision of security for a single secure session between the client 10 and service 12 over the connection 16 .
- SLS session-level security
- SLS session-level security
- Each SLS entity is capable of handling multiple simultaneous sessions involving different client-service pairings.
- the protocol operated between the SLS entities is herein referred to as the SLS protocol.
- the SLS entities When the client 10 wishes to establish a communication session with service, the SLS entities first carry out a handshake procedure the purpose of which is two-fold:
- An ‘attribute’ expresses some property such as a name, a location, a credit limit, an owner or a role. Attributes are proved by certificates that are exchanged and authenticated to ensure that neither party (client or service) is making false claims about the possession of an attribute. Whilst the identity of the client or service constitutes an attribute, there is no a priori requirement that this attribute must be presented and verified—it is up to the parties (client 10 , service 10 ) to specify what attributes they require of the other.
- attribute certificate means any signed electronic instrument bestowing an attribute on the subject of the certificate and therefore encompasses both SPKI ‘attribute’ certificates and SPKI ‘authorization’ certificates.
- Proving that a party has a particular attribute means establishing a trust chain of valid certificates back to a party inherently trusted in relation to matters concerning the attribute.
- This trust chain may involve not only attribute certificates but also ‘name’ certificates.
- the issuer and subject of an SPKI certificate is fundamentally a principal constituted by a public key (or it's hash).
- the subject of certificate may also be specified by a name but in this case there should also be a name certificate mapping the name to the corresponding principal.
- the SLS entity 20 (and correspondingly the entity 30 ) comprises:
- the client 10 holds its own private key 33 used for digitally signing messages during the key exchange to authenticate them as originating from itself.
- the signing functionality is provided by the cryptographic services block 22 .
- the client also holds its own collection of SPKI certificates in certificate library 32 from which it can extract the certificates appropriate for proving that it has particular attributes. Whilst the client endeavors to keep a record of the chain of certificates appropriate for proving each of its attributes, it can call on the trust chain discovery functionality provided by the certificate services block 21 to help it find such a chain (a suitable form of trust-chain discovery engine is described in our above-mentioned co-pending patent application).
- the client 10 can also call on the certificate services block to prove that a set of certificates provided by the service 12 actually prove that the latter has required attributes (proving this may require not only the certificate reduction functionality of block 21 , but also the trust chain discovery functionality if the certificates are presented out of order); the signature verification service of the cryptographic services block 22 will also be needed to verify that the certificates presented check out.
- SLS is a layered protocol with a base layer implemented by the SLS PDU processor 28 , the latter serving to assemble/disassemble SLS PDUs (protocol data units) by adding/removing a heading to/from a payload formed the output of the higher SLS protocol layer (for example the key-exchange protocol operated by the handshake protocol engine 24 or the secure channel protocol operated by the secure channel protocol engine 25 ).
- the general form of the SLS PDUs is depicted in FIG. 1 for a PDU 35 .
- the PDU 35 has, in addition to a payload 39 , a heading made up of three fields as follows:
- the key exchange handshake protocol effected by the handshake protocol engine 24 to set up a secure channel will next be described in detail, the approach taken being to build up the protocol element by element.
- the participants in the protocol are called ‘Alice’ and ‘Bob’ with Alice initiating the protocol exchange.
- Alice and Bob respectively correspond to the client and service sides of the FIG. 1 arrangement—it should, however, be noted that Alice encompasses both the client 10 and SLS entity 20 and Bob encompasses both the service 12 and the SLS entity 30 though it will be apparent from what has been written above, where any particular processing takes place.
- the key exchange protocol used in the present SLS implementation provides the following features:
- the protocol is based on the well known Diffie-Hellman key exchange protocol shown in FIG. 2 .
- Alice chooses a random number a, computes g a and sends it to Bob in a handshake_Start message hsS;
- Bob chooses his own random number b, computes g b and sends this value to Alice in a handshake_Reply message hsR.
- the computations are done in a group G, here called the Diffie-Hellman group or DH-group for short.
- the element g is a generator of G.
- Both a and b are random numbers in the range 0, . . . , r ⁇ 1 where r is the order of the group G.
- the operator ⁇ R denotes the choosing a random element in a range.
- a group is a structure which defines a multiplication. Exponentiation is defined by repeated multiplication, as it is done in the case of integers. Implementers will need to understand the group structure in order to implement the necessary multiplication.
- the actual group that is used can be varied; this is a choice that has its own tradeoffs between message size, efficiency, security, and simplicity of code. Suitable groups can readily be specified by competent cryptographers.
- the DH protocol is based on the fact that Alice can compute g ab given a and g b , and that Bob can compute the same value g ab given b and g a . However, an attacker that has access to the communicated messages knows only g a and g b . In a suitable DH-group it is computationally infeasible to compute g ab given only g a and g b . The end result is therefore that both Alice and Bob have the same number k, but an eavesdropper cannot know k.
- the secret key k can now be used to establish a secure link to exchange further messages. These messages can be authenticated and encrypted using k. This provides confidentiality of the message contents and proves to the receiver of the message that it originated from the sender.
- the basic DH protocol has a weakness in that Alice and Bob only know that they are talking to someone, but not whether they are talking to each other.
- two digital signatures are introduced into the protocol (see FIG. 3 ) which require a private key to create and a public key to verify.
- the data that is signed in each signature consists of all the message data that was exchanged in the protocol before the signature.
- SIG B signs g a and g b in handshake_Reply message hsR
- SIG A signs g a , g b and SIG B in a new message, handshake_Finish hsF.
- Bob can derive much the same conclusions as Alice can.
- Alice i.e. the party that knows the private key needed to create signatures
- k is only known to Bob and Alice.
- DH Group Flexibility As mentioned there are many possible DH groups that can be used. As time progresses and computers get faster it will become necessary to use larger and larger groups (or a different type of group) to maintain the same security level. It is therefore not possible to fix the group to be used. Furthermore, as mentioned, the choice of group has its own tradeoffs and different installations might choose differently.
- FIG. 4 shows how the protocol is extended to accommodate varying DH groups.
- Alice starts out by choosing a suitable DH group G. For most implementations only a single group will be used, and Alice will use whatever group was configured (generating a DH group usually takes a fair amount of time, so Alice should not do this on-line.)
- Alice sends the definition of the DH group to Bob in the first message hsS.
- the definition of G includes the type of group and the choice of the generator g.
- Checking the validity of a group typically involves at least an order of magnitude more work than the rest of the protocol.
- Bob preferably keep a cache of ‘approved’ groups that have passed the checks.
- a major purpose of the key exchange protocol is to verify attributes. That is, Alice wants to verify that Bob has certain attributes and Bob wants to verify that Alice has certain attributes. These attributes can express an identity (‘1 am Bob’), a property (‘1 work for HP labs in Bristol’), or an authorisation (‘1 am allowed to use the printers on floor 2’).
- the key exchange process has a fairly simple interface to the attribute system.
- For party to prove that it has a attribute two things are needed: a attribute justification linking the attribute with a public key (allegedly that of the party concerned), and a proof that the party possesses the related private key.
- the attribute justification will typically consist of a set of certificates from the certificate library 32 of one party and verified by the attribute justification system of the other party.
- a justification implies a statement of the form: ‘The holder of the private key corresponding to the public key X has attributes c 1 , c 2 , . . . ’.
- the extension of the protocol as so far described to accommodate Bob and Alice proving to the other that they possess certain attributes involves each of them sending their own attribute justification JUST, and using their corresponding private key to create the signature already in the protocol (note that Alice or Bob may well have more than one associated public/private key pair with certain attributes being associated with one public key and other attributes with a different public key—obviously, the correct private key must be used for the attribute requiring to be proved).
- the exchange of attribute justifications is shown in FIG. 5 : Bob's attribute justification JUST B is included in message hsR whilst Alice's attribute justification JUST A is included in message hsF.
- Bob's signature is done with the key that proves possession of the attributes that are the subject of attribute justification JUST B .
- Alice's signature is done with the key that proves possession of the attributes according to JUST A .
- the protocol does not necessarily identify the two parties other than by their public keys.
- Attributes that depend on multiple keys There may be some situations in which it is simpler for the attribute system to use several private keys. In that case the justification corresponds to a statement of the form: ‘The holder of the private keys corresponding to the public keys X 1 , X 2 . . . has attributes c 1 , c 2 , . . . ’.
- the protocol can support this—instead of sending a single signature, the party that uses such a multi-key justification sends a separate signature with each of the private keys.
- SIG B would consist of a list of signatures, one for each of the keys required by the justification.
- all these signatures sign the same data string which consists of all the data exchanged before the signatures. (Thus, the last signature does not include the earlier signatures of the same list in its signature data.)
- this generalization is ignored for the remainder of this discussion of the key exchange protocol as to include it makes the overall description more complex without adding any significant under-standing.
- multi-key justifications and signatures can be used in the SLS protocol.
- FIG. 6 shows how the SPI A and SPI B fields are added to the messages, SPI B being included in message hsR and SPI A being included in message hsF. These fields are automatically included in the signatures.
- Alice and Bob store the SPI values with the other information of the secure channel for identification purposes.
- Attribute Selection Advice During the protocol, Alice and Bob have to provide a set of attributes. This poses the question how they know which attributes to include. It is certainly inadvisable to include every attribute they possess. A system administrator might easily have thousands of attributes. To deal with this problem, a system of attribute advisories is used to help the participants select the appropriate attributes.
- the attribute advisory system is asymmetric; that is, the features it provides to Alice and to Bob are slightly different. There are two reasons for this asymmetry. First of all, the 3-message protocol is inherently asymmetrical and adding advisories results in an asymmetric advisory system.
- the advisory system could be made symmetrical by reducing the functionality for one side, or by adding two messages to the protocol. Adding messages is too expensive (in terms of additional delay, and complexity). Restricting the functionality would force the system to discover the information in a different manner, probably using at least two additional messages.
- Alice is the initiator. She is the one who wants to send a message to Bob and set up a secure channel for it. Presumably Alice knows what she intends to do, and which attributes she would like Bob to show. Bob, on the other hand, has no idea what Alice wants. Therefore, it can be impossible for Bob to give any good advise on what attributes he will require of Alice without some information about what Alice intends to do.
- the existing 3-message structure allows the parties to exchange exactly that information without adding additional messages.
- a typical example would be that the client Alice tries to access the resource Bob. Alice knows what she wants to do with the resource, and which attributes she requires the resource to have. Bob has no idea what functions Alice wants to call on the resource.
- the attribute advice system consists of three fields, as shown in FIG. 7 .
- the first field is in the first message hsS, and is called ADV B .
- This is Alice's advice as to which attributes Bob should include in JUST B .
- the other two fields are a more complex negotiation to help Alice determine which attributes she should include in JUST A .
- Alice sends QRY A to Bob.
- This is a query field which Alice and Bob are arranged to interpret in the same way.
- QRY A contains the enough information for Bob to give a sensible ADV A to Alice.
- the QRY A could consist of a set of resource operations Alice plans to call in the future.
- Bob can then inform Alice in ADV A what attributes are required for this.
- the ADV A field is included in the second message hsR.
- the advisories are just that, advisory. If Alice requests Bob to show attribute X, and he does not, then Alice is likely to refuse to use the resulting secure channel that the protocol establishes. Similarly, Bob is likely to refuse to process messages from the secure channel if Alice has not shown enough attributes during the key exchange protocol. In fact, either Bob or Alice is likely to decide not to complete the setting up of a secure channel if the other cannot show the required attributes.
- Bob can indicate this by setting a “relay” flag in the hsR message and it is then up to Alice to decide whether she wishes to access Charlie by tunneling through Bob.
- each cipher suite is a full set of cryptographic algorithms for the secure channel.
- Each cipher suite is assigned a unique identifier by a central authority.
- Alice and Bob negotiate a suite to use. Alice sends a list of suites she is willing to use, in decreasing order of preference. Bob selects one of the suites on the list and informs Alice of his choice. This is the suite that both will use.
- FIG. 8 shows the necessary addition to the protocol thus far built.
- Alice chooses a list of cipher suite identifiers CS L . This list is in decreasing order of preference. This list is sent in the first message hsS to Bob. When Bob receives the list he selects one of the cipher suites. Bob should choose the first cipher suite in the list that is acceptable for him. This is the cipher suite that will be used for the secure connection. Bob sends his selection CS in the second message hsR to Alice, who in turn cheeks that this selection is valid.
- An example of one possible combination of algorithms making up a cipher suite is given hereinafter when describing the secure channel.
- the final key exchange handshake protocol is shown in FIG. 9 . This is identical to that depicted in FIG. 8 except for the added operation of storing the information required for the secure channel (for FIG. 1 , this would be in session memory 27 ). This information is the result of the protocol.
- Alice would typically store a communication address that will reach Bob, the list of attributes that Bob showed to Alice in the protocol, the list of attributes that Alice showed to Bob during the protocol, the validity periods and conditions of the various attributes, and the shared secret key k.
- Bob would store similar information.
- handshake messages are incorporated into PDUs by SLS PDU processor 28 before transmission, the message type of such PDUs being set to HANDSHAKE.
- the key exchange protocol was initiated by Alice to be able to send a message to Bob.
- Alice has all the information about the secure channel before she sends the last message hsF in the protocol. It is therefore possible for Alice to send the first message on the secure channel in the same PDU as the last message of the key exchange protocol.
- This is a preferred implementation as it can result in a significant overhead reduction; this requires the use an appropriate message format that allows the last message of the key exchange protocol to co-exist with the first message on the secure channel (the design of such a format is within the competence of persons skilled in the relevant art).
- the parsing rule for this field must be the same across all applications that use the same key. For example, the following rules can be used for this identification field.
- a suitable identification string for SIG B would be “Hewlett-Packard/e-speak; client-resource key exchange protocol, version x/date; sigB”. This identifies the application, the protocol and version number, and the function within that protocol. (The date is included in the version information to ensure uniqueness.)
- the identification string for SIG A could be similar: “Hewlett-Packard/e-speak; client-resource key exchange protocol, version x/date; sigA”. Note that the overhead of this identification field is very low. The application simply starts every string to be signed or verified with a fixed sequence of bytes (which include the 2-byte length encoding).
- This secure channel has the following features:
- the secure channel has a limited life-time.
- the attributes shown in the key exchange protocol typically have a limited validity period.
- the validity periods of the attributes exchanged are held in the session memory and checked regularly by the control block 26 (for example, before each message is processed. When these attributes expire the key exchange protocol will have to be re-run to set up a new secure channel.
- either party is free to discard the information relating to a secure channel at any time. This could, for example, be done when the first attribute associated with the channel lapses, when there has been a significant period of time without any activity on the channel, or when the application signals that it will no longer need the channel.
- the protocol engine 23 decides to discard a channel, it sends a corresponding message to the other side of the channel; this message should of course be authenticated in the same way as all other messages.
- the SPI numbers should not be recycled too rapidly by the protocol engine 23 . If a message is received for an unknown SPI this will be signaled as such. If the SPI has been re-used, the message will generate an authentication-failure error, which does not provide the sender with the information that the old channel has been discarded.
- the secure channel makes use of four functions in the selected cipher suite, namely a hash function h(), a MAC function MAC(), an encryption function E() and the associated decryption function D(); the algorithms used for each function is determined by the cipher suite chosen for use.
- One possible cipher suite comprises:
- the MAC function has two associated authentication keys and the encryption/decryption functions have two associated encryption (and decryption) keys.
- a further function namely a helper function h′ that is used in conjunction with the hash function.
- the hash function h maps arbitrary length input strings to a output strings of a fixed length. The length of the output string is fixed for any function h, but it depends on the choice of that function.
- the helper function h′ provides a variable-length output and is part of the services provided by the cryptographic services block 22 .
- s ) i ⁇ 1 h ′( s,l ): The first l bytes of s 0
- the construction has been chosen to ensure that the entropy of the result is not limited by the output size of the hash function or by the internal state size for a standard iterative hash function.
- the encryption algorithm from the chosen cipher suite specifies the length of the encryption keys.
- the MAC algorithm from the chosen cipher suite specifies the length of the authentication keys.
- the result of the key exchange protocol is a shared group element k. This must first be converted to a string using a canonical binary representation.
- the group definition should define such a canonical representation. We will call the canonical representation k s .
- the encryption keys are called K E AB for the key that will encrypt traffic from Alice to Bob and K E BA for the key that will encrypt traffic from Bob to Alice.
- the authentication keys will be called K A AB and K A BA .
- l A be the length of the authentication keys and 1 E the length of the encryption keys (as specified by the respective authentication and encryption algorithms).
- K A BA h′(“Authenticate Bob to Alice”
- both Alice and Bob will store all four keys in their session memories 27 .
- Sequence Counters One generic attack against a protocol is to resend an old message. If the message is only authenticated then it will be accepted as real by the recipient. There are various ways in which replay attacks can be avoided. Here a sequence counter is used.
- Alice keeps a sequence counter C AB for the messages that she sends to Bob over the secure channel. This counter starts at 1 for the first message and increments for every message that Alice sends.
- Bob keeps track of the c′ AB , namely, the largest counter value he has seen in a proper message. If a new message arrives, and the MAC code checks out, Bob compares the counter value c in the message with c′ AB . If c ⁇ c′ AB then the packet is at least as old as the last accepted message, and it is discarded. If c>c′ AB then this is a newer message and the variable c′ AB is set to the value c. It is easy to see that this rule prevents Bob from ever accepting the same message twice, or accepting messages out of order. Of course, for messages from Bob to Alice the same mechanism is used with Bob keeping a counter c BA and Alice keeping the largest valid counter value yet c′ BA .
- the first counter value that is sent in a message is 1. This allows the recipient to initialize the c′ variable to 0 and proceed as normally.
- the sequence number c of a message is provided to both the encryption (and decryption) block and the MAC block (in the case of the latter, this is in addition to c being included in the data in respect of which a MAC is to be formed).
- This is done to enable the use of certain encryption and MAC functions (if agreed by the parties) which have the potential of being faster. For example, if a stream cipher is used, care has to be taken that every message is encrypted with its own unique key stream.
- the counter value allows the stream cipher to ensure that this is the case. It is also possible to have MAC functions that are very fast, but which can only be used once for each key.
- the counter value c can be used to derive unique authentication keys for each message from the channel authentication key.
- FIG. 10 depicts the main functional processing blocks of the secure-channel sending sub-system 40 and the message transform they each effect.
- the sending sub-system is supplied with a reference enabling it to retrieve the relevant session data (block 41 ); this data includes the sending sequence number c, the cipher suite and session keys to be used, and the SPI value for the recipient (thus Alice will use SPI B for messages she sends to Bob).
- the message m is usually variable-length, while c and SPI are fixed length (here assumed as 4 bytes).
- MAC: MAC(K A , c, SPI
- the appropriate authentication key K A and the counter value c are also inputs to the MAC function.
- the result of the encryption is called q.
- Many encryption algorithms require padding, which increases the length, and some might implement compression which could reduce the length. Note that here the padding is considered to be part of the encryption function as the padding requirements depend on the details of the encryption function being used. Note that the encryption step can result in an increase in overall message length.
- the message (PDU) that is finally sent consists of the concatenation of SPI, c, and q plus certain additional information, such as addresses, as already described in relation to the fields 36 , 37 and 38 of PDU 35 of FIG. 1 .
- the assembly of the PDU is the responsibility of the SLS PDU processor 28 .
- the overall operation of the sending subsystem is coordinated by a state machine 44 .
- the SLS PDU processor 28 disassembles the message and passes SPI, c, and q to a receiving sub-system 50 (see FIG. 11 ). Even though it would be possible to arrange for the message delivery layer to provide some information about the originator of the message to higher processing layers, all such information should be discarded as it has not been authenticated. Once the received message has been authenticated the sender information can be reliably looked up in the secure channel information.
- the received SPI is used by the receiving sub-system to find its internally-held information about the secure channel in question (block 51 ). Since the SPI has not yet authenticated, the sub-system needs to be robust and not crash even if the SPI is corrupted. For this reason, the SPI value should not be chosen as the memory address of a secure channel data structure holding the required information about the channel; the SPI value can, however, be chosen as an array index provided appropriate range checks are implemented during the lookup.
- the secure channel information provides the keys that will be used for the decryption and authentication verification.
- the first step is to decrypt the message (block 53 ).
- the field q is the ciphertext which is passed to the decryption function of the current cipher suite (also specified by the secure channel information).
- the decryption function also takes the counter value c and the appropriate encryption key from the channel information as inputs.
- the result is a single string, which is split into the m and MAC fields using the known length of the MAC field (defined by the MAC function of the cipher suite).
- the value of the MAC field is then checked by re-computing the appropriate MAC value from the SPI, c and m field using the authentication key K A (block 54 ) and comparing it with the value in the MAC field (block 55 ). If these two values are different, the message does not pass the authentication check and is discarded.
- the receiving sub-system performs its checks on the counter value (block 52 ), and updates its own c′ value. If desired, the check that c is greater than the current c′ can be done before decryption and authentication. However, updating the c′ variable must only be done after authentication has been completed.
- the overall operation of the receiving subsystem is coordinated by a state machine 56 .
- the SLS protocol supports tunneling, that is, the passing of PDUs through an access-controlling intermediate system to a final destination.
- PDUs that are to be tunneled are encapsulated in SLS PDUs which have their message type (field 37 , FIG. 1 ) set to TUNNEL. Tunneling requires the consent of the intermediate system concerned as will be more fully explained below with reference to FIG. 12 .
- the parties to the SLS handshake are Alice and Bob, with Alice initiating as client.
- Alice sends a handshakeStart message to Bob she is expecting a handshakeReply from Bob that includes Bob's proof of the attributes Alice required of him.
- Bob is not in a position to supply the proof—for example, consider the case where Alice has the address of a service that appears to reside at Bob, but Bob is in fact a mediator (gateway application) for the service and forwards requests to another party, Charlie, who implements the service.
- Charlie is shown in FIG. 12 as a system 60 composed of a transport entity 61 , an SLS entity 62 and a service 63 .
- Bob When the relay flag is true, Bob is telling Alice that he is a mediator, and so may not be able to prove all Alice's required attributes. It is up to Alice whether this is acceptable. If it is, she can complete the handshake and set up a session with Bob (the Alice-Bob session 64 ). Alice now needs to set up a session with the entity Bob is relaying to—Charlie in this case (the Alice-Charlie session 65 ). Alice does this using Alice-Bob session PDUs of message type TUNNEL. These PDUs carry, as payload, PDUs for the Alice-Charlie session 65 (effectively a nested session within the Alice-Bob session).
- the PDUs for the Alice-Charlie session contain the messages (initially, handshake messages but subsequently encrypted message data), and the unencrypted PDU fields 36 – 38 —since this information will be visible as such on the Bob-Charlie connection, there is no great benefit in Alice encrypting the payload of the Alice-Bob session PDUs and this step can therefore be omitted to reduce processing overhead though forming a MAC for this payload should still be done.
- Bob receives an Alice-Bob session PDU with its message type set to TUNNEL, he forwards its payload as a PDU to the mediated entity (Charlie).
- Bob performs the security processing negotiated for his session with Alice in the usual way. If Bob receives a PDU from Alice with message type set to APPLICATION rather than TUNNEL, Bob assumes the message is for him and attempts to decrypt the payload of the PDU in the usual way.
- Alice now sets up the Alice-Charlie session 65 with Charlie. Notice that once a secure channel has been set up between Alice and Charlie, then assuming Alice encrypts the payload of the Alice-Charlie session PDUs, Bob will not be able to read the payload being passed to Charlie. All he will be able to see is the header fields 36 – 38 .
- the control block 26 of the protocol engine 23 of Alice's system (the sending system) needs to keep a track of the session nesting. This can be done by including in the data stored for each session the SPI of any immediately-nested session.
- the session data for the Alice-Bob session 64 (which would generally be the session data initially retrieved by control block 26 when Alice indicates she want to send a message to Charlie) would show that the session was with Bob, not Charlie, and that there was a nested session with a stated SPI (being the SPI of the Alice-Charlie session 65 ).
- control block 26 This tells the control block 26 that when sending data to Charlie the Alice-Bob session 64 is simply acting as a channel for a nested session with the consequence that the PDUs of session 64 should be set to type TUNNEL (the question of whether or not the payload of these PDUs is to be encrypted can be set by policy, by choice of cipher suite, or by an explicit flag set in the session data).
- the control block 26 next looks at the data for the session corresponding to the SPI in the Alice-Bob session data, namely the Alice-Charlie session data; this indicates that the receiver is Charlie (the required recipient) so that the PDUs for this session will have a message type APPLICATION and the payload will be encrypted.
- control block looks up the session data for session 64 , it can see that the recipient is Bob and so PDUs can be set directly to APPLICATION and there is no need to use any nested sessions; in other words, the control block does not need to concern itself with the fact that session 64 carries a nested session as indicated by the session 65 SPI in the session 64 data.
- handling of tunneling by the recipient (Bob) of a PDU of the message type TUNNEL is very simple and does not require any tracking mechanism—the recipient simply take the payload of the received PDU, carries out any MAC-based checking (and possibly decryption) needed and forwards the payload (minus MAC, if present) to the entity (Charlie) indicated in the “to” address included in the header field 36 that forms part of the payload of the received PDU.
- the address of this entity is probably not known to Alice and Bob must supply this address, inserting it in the “to” address of the PDU to be forwarded.
- the address of Charlie is conveniently held by Bob in his session data for the Alice-Bob session ready for use when a TUNNEL PDU is received from Alice.
- Bob will generally also set the “from” address to show that the message is from him.
- XML DTD Document Type Declaration
- SLS PDU Structure Type Declaration
- XML is a markup language details of which can be found in Reference [9].
- An XML DTD describes the structure of a document and may be appended at the beginning of the document concerned.
- XML is finding rapid acceptance as a markup language for World Wide Web documents as it permits much more richly structured documents than is possible with HTML. As a result, many web browsers are now XML capable.
- FIG. 13 depicts an end system in which an SLS layer 71 provides secure session services to an application.; interposed between the SLS layer and the transport layer is an XML generator layer 72 .
- the transport layer comprises a set of transports 73 – 76 (including TCP transport 73 , e-mail transport 74 and HTTP transport 76 ).
- the XML generator layer converts the SLS PDUs into XML documents that can then be transported by any of the indicated transports (among others).
- an XML interpreter reforms the PDU into the form familiar to the SLS layer.
- E-speak deals in terms of “resources” described by metadata.
- the metadata defines resource type, attributes and security properties.
- Resource metadata is registered with a repository in an e-speak daemon known as a “core”; this metadata can be exported from core to core.
- An active service registers itself as the handler for a resource with a core which then forwards messages for the resource to the handler.
- the handler and resource will be treated as equivalent to a “service” application such as the service 15 of FIG. 1 ; also, for simplicity, the resource and handler will not be distinguished and are jointly referred to below as a “resource”.
- a client typically connects to a core, does an attribute-based lookup to find a resource and then is able to invoke the resource.
- the core passes messages from the client to the resource. All resources are referred to by name.
- the SLS layer is intended to form a part of an e-speak core to provide security (access control and confidentiality) for communication between a client and a resource.
- FIG. 14 depicts this situation where a client end system 80 communicates with a resource system 81 .
- the client end system comprises the client application 82 , an e-speak core 83 including SLS layer 84 , and a transport entity 85 .
- the resource system comprises a resource 86 , an e-speak core 87 with SLS layer 88 , and a transport entity 89 .
- the e-speak cores are shown hatched for clarity.
- the client and e-speak core may not, however, always reside on the same end system.
- a client may simply be a small application 93 running in a web browser 94 (see FIG. 15 ) with the most convenient e-speak core 95 being one hosted by a broker system 96 connected to the web.
- client 93 can establish a secure session 97 over an HTTP connection with broker application 98 running on system 96 and make use of core 95 to locate a target resource 100 .
- the client can then establish a nested session 101 with the resource 100 , tunneling through the broker system; the connection between the broker system and the system running resource 100 is, for example a TCP connection.
- setting up the sessions 97 and 101 requires the participating parties to prove required attributes to each other in the manner already explained when describing the SLS protocol.
- the client running in the browser could use an HTTP/SSL secure connection 105 (see FIG. 16 ) to talk to the broker application 98 with the broker authenticating the client by any suitable method (client side certificates, basic authentication or digest authentication).
- the broker application 98 then creates a client proxy 106 to represent the client 93 in an SLS session 107 established using the e-speak core 95 on the broker system 96 to the resource 100 . It will not be a secure end to end session between the web browser and the resource 100 as the proxy has to be trusted.
Abstract
Description
-
- to determine if each party has certain ‘attributes’ required of it by the other—if this is not the case, then a communication session is not established
- to exchange cryptographic data to enable shared keys to be established for the communication session being established (if allowed).
Assuming the handshake was successful, the SLS entities are then responsible for operating the resultant secure channel established between theclient 10 andservice 11.
-
- a certificate services block 21 for providing trust chain discovery and certificate reduction services;
- a cryptographic services block 22 for providing signature creation and checking services and exponentiation services during the key-exchange handshake, key generation services for generating the session keys for the secure channel established following a successful handshake, and MAC (Message Authentication Code)creation/checking services and encryption/decryption services for message exchanged over the secure channel; and
- a
protocol engine 23 with a key exchange handshakefunctional block 24, a secure channelfunctional block 25, a SLSPDU processing block 28, and acontrol block 26.
Thecontrol block 26 is responsible for coordinating the other elements of theprotocol engine 23 according to input received from theclient 10 and present in the unencrypted header fields of messages received overconnection 16 via thetransport entity 14. As already mentioned, the SLS entity is capable of handling multiple simultaneous sessions and thecontrol block 26 is responsible for correctly associating client input and messages with the appropriate secure communication session (or to initiate a new session if no session currently exists whenclient 10 requests to communicate with services 12); this it does by assigning an identifier to each secure session, this identifier being herein called the Security Parameters Identifier (SPI) following the terminology used in the IPSec documents (see reference [4]). The SPI is carried in clear by messages passed over the secure channel. Thecontrol block 26 stores information relevant to each session, including the related SPI, in asession memory 27 and whenever the protocol engine receives a message fromtransport entity 14, it uses the SPI to look up the appropriate session data. The session data can also be accessed by client id.Block 29 inFIG. 1 indicates the most important data items held for each session, the role of each item being explained hereinafter when describing the key-exchange handshake and the processing of messages for the secure channel.
-
- a
header field 36 containing the receiving party's SPI for the current session, to and from addresses (in any form suitable for transport entity 14), and a message serial number c described below; - a
message type field 37 indicating one of the following four message types:- HANDSHAKE
- APPLICATION (payload to be passed to application)
- TUNNEL (messages for nested sessions)
- ALERT (error messages)
- an
encoding type field 38 indicates the security processing in force as determined by the current cipher suite (see below), namely, clear text, a message protected by a MAC or an encrypted message (also with a MAC)
- a
- 1 . Each party can present a set of attributes to the other party.
- 2. Each party is convinced that the other party has the claimed attributes if the protocol completes.
- 3. The protocol results in a shared secret key that can be used for establishing a secure channel. Only the two participants in the protocol have access to this key. The key is tied to the attributes that have been demonstrated by both parties.
- 4. The attribute-proving system is only required to be signature-capable. That is, it is assumed that the attribute certification scheme ties attributes to the possession of a signature-capable private key. The protocol uses only the signature attribute of this key.
- 5. If the private signature keys used in this protocol are compromised after the protocol has for use in the secure channel is not compromised.
- 1. Somebody knows the secret key necessary to create SIGB. Alice sent a random value ga and received a signature back that included this value. This signature must therefore have been created after Alice chose a, which implies that somebody (which we call ‘Bob’) has access to that private key.
- 2. The pair (ga gb) was approved by Bob. In this protocol the interpretation is along the lines of: “I received ga and chose gb as my reply in the DH protocol that we are executing.”
- 3. The value k is only known to Alice and Bob.
- 1. The field is an ASCII string of characters without any control sequences.
- 2. The string consists of the application name, protocol name, protocol version, and name of the signature within the protocol. (Applications that store signatures on disk will, of course, require a different identification scheme but should still use a string that starts with the application name to avoid collisions).
- 3. Each string of bytes that is signed starts with the length of the identification string encoded as a 2-byte integer in network order (MSByte first), followed by the identification string in question.
- 1. Messages on the secure channel are authenticated. Alice will only accept messages that were sent by Bob and vice versa.
- 2. Messages are encrypted: an eavesdropper cannot determine the contents of the message being sent.
- 3. The sequence of message that Alice receives is a subsequence of the messages that Bob sent, and vice versa. This prevents replay attacks, reflection attacks, etc. Note that the channel does not guarantee that every message will be delivered, only that they will not arrive out of order.
The encryption and authentication functions of the secure channel use symmetric key cryptography and are therefore orders of magnitude faster than public-key functions.
-
- Hash function:—SHA-1 (see Reference [5])
- MAC function—HMAC-SHA1–96 (see Reference [6])
- Encryption/Decryption—3DES in CBC mode (see References [7],[8])
s o :=h(s)
s i :=h(s 0 |s 1 |. . . s i-1 |s) i≧1
h′(s,l):=The first l bytes of s 0 |s 1 |s 2|. . .
where | is used to denote concatenation of strings. The hash function h is used repeatedly to generate enough output, and then take the l leading bytes are taken.
K A AB:=h′(“Authenticate Alice to Bob”|k s , l A)
K A BA:=h′(“Authenticate Bob to Alice”|k s , l A)
K E AB:=h′(“Encrypt Alice to Bob”|k s , l E)
K E BA:=h′(“Encrypt Bob to Alice”|k s , l E)
where the literal strings are plain ASCII strings (without any terminating zeroes).
- [1] T. Dierke et al., “The TLS Protocol, Version 1.0”, IETF RFC2246 January 1999.
- [2] C. Ellison et al., “SPKI Certificate Theory”, IETF RFC2693 September 1999.
- [3] C. Ellison et al., “SPKI Examples”, IETF RFC 2692 September 1999
- [4] S. Kent et al., “Security Architecture for the Internet Protocol” IEFT RFC 2401 November 1998.
- [5] National Institute of Standards and Technology. Secure Hash Standard, Apr. 17, 1995. FIPS PUB 180–1, available from http://www.itl.nist.gov/fipspubs/.
- [6] Mihir Bellare, Ran Canetti, and Hugo Krawczyk. “Keying hash functions for message authentication”. In Neal Koblitz, editor, Advances in Cryptology-CRYPTO '96, volume 1109 of Lecture Notes in Computer Science, pages 1–15. Springer-Verlag, 1996.
- [7] National Institute of Standards and Technology. Data Encryption Standard (DES), 1999. DRAFT FIPS PUB 46–3, available from http://www.ncsl.nist.gov/fips/.
- [8] National Institute of Standards and Technology. DES Modes of Operation, Dec. 2, 1980.
FIPS PUB 81, available from http://www.itl.nist.gov/fipspubs/.] - [9] Tim Bray, Jean Paoli, C. M. Sperberg-McQueen “Extensible Markup Language (XML) 1.0 Specification”, February 1998, available at http://www.w3.org/TR/REC-xml
- [10] “E-speak Architecture Specification”, Hewlett-Packard Company, September 1999 available at http://www.e-speak.hp.com/
Appendix
- <?xml version=“1.0” encoding=“UTF-8”?>
- <!-- A DTD (Document Type Definition) for the Session Layer Security Protocol (SLS).-->
- <!DOCTYPE SLS [
- <!-- XML SLS DTD -->
- <!ENTITY % uint8 “#PCDATA”>
- <!-- Where the PCDATA is an 8-bit unsigned integer. -->
- <!ENTITY % uint32 “#PCDATA”>
- <!-- Where the PCDATA is an 32-bit unsigned integer. -->
- <!ENTITY % Address “#PCDATA”>
- <!ENTITY String “#PCDATA”>
- <!ELEMENT Opaque (#PCDATA) >
- <!ATTLIST Opaque
- encoding CDATA “urn:ietf-org:base64”>
- <!ELEMENT % Object (#PCDATA)>
- <!ATTLIST Object
- encoding CDATA #IMPLIED>
- <!ELEMENT % ADR (#PCDATA)>
- <!-- Where the PCDATA conforms to the ADR syntax. -->
- <!ATTLIST ADR
- entity CDATA #IMPLIED>
- <!-- Can use the entity to indicate which ADR syntax we want. -->
- <!ELEMENT % ADRList (#PCDATA)>
- <!-- Where the PCDATA conforms to the ADR syntax for a list. -->
- <!ATTLIST ADR
- entity CDATA #IMPLIED>
- <!-- Can use the entity to indicate which ADR syntax we want. -->
- <!ENTITY % MessageType “ALERT|HANDSHAKE|APPLICATION_MESSAGE|TUNNEL”>
- <!ENTITY % EncodingType “SECURE_DATA|PROTECTED_DATA|CLEAR_DATA”>
- <!ELEMENT versionMajor (%uint8;)>
- <!ELEMENT versionMinor (%uint8;)>
- <!ELEMENT spi (%uint32;)>
- <!ELEMENT serial (%uint32;)>
- <!ELEMENT inReplyTo (%uint32;)>
- <!ELEMENT messageType (%MessageType;)>
- <!ELEMENT encodingType (%EncodingType;)>
- <!ELEMENT toAddress (%Address;)>
- <!ELEMENT fromAddress (%Address;)>
- <!ENTITY % PDUdata “SecureData|ProtectedData|ClearData”>
- <!ELEMENT PDU (
- versionMajor,
- versionMinor,
- spi,
- serial,
- inReplyTo?,
- messageType,
- encodingType,
- toAddress,
- fromAddress,
- %PDUdata;)>
- <!ELEMENT SecureData (Opaque)>
- <!ELEMENT ProtectedData (mac, data)>
- <!ELEMENT mac (Opaque)>
- <!ELEMENT ClearData (Alert|%Handshake;|ApplicationMessage|PDU)>
- <!ELEMENT Alert (level, code, detail?)>
- <!ELEMENT level (%AlertLevel;)>
- <!ELEMENT code (%AlertCode; )>
- <!ELEMENT detail (%String;)>
- <!ENTITY % AlertLevel “FATAL|WARNING|DEBUG”>
- <!ENTITY % AlertCode”
- CLOSE_NOTIFY
- |UNEXPECTED_MESSAGE
- |BAD_SPI
- |BAD_SERIAL
- |BAD_MAC
- |HANDSHAKE_FAILURE
- |BAD_CERTIFICATE
- |UNSUPPORTED_CERTIFICATE
- |CERTIFICATE_REVOKED
- |CERTIFICATE_VERIFICATION_FAILED
- |ILLEGAL_PARAMETER
- |BAD_PROTOCOL_VERSION
- |INSUFFICIENT_SECURITY
- |NO_RENEGOTIATION
- ERROR ”>
- <!ENTITY % Handshake “HandshakeRequest
- |HandshakeStart
- |HandshakeReply
- |HandshakeFinish ”>
- <!ELEMENT HandshakeStart
- (versionMajor,
- versionMinor,
- spi,
- group,
- keyData,
- cipherSuiteList,
- tags?,
- query?)>
- <!ELEMENT group (%ADR;)>
- <!ELEMENT keyData (%ADR;)>
- <!ELEMENT cipherSuiteList (%ADRList;)>
- <!ELEMENT tags (%ADRList;)>
- <!ELEMENT query (%ADR;)>
- <!ELEMENT HandshakeReply
- (versionMajor,
- versionMinor,
- spi,
- spiB,
- keyData,
- cipherSuite,
- proof?,
- response?,
- tags?,
- relay?,
- forwardAddress?,
- signature)>
- <!ELEMENT spiB (%uint32;)>
- <!ELEMENT cipherSuite (%ADR;)>
- <!ELEMENT proof (%ADR;)>
- <!ELEMENT response (%ADR;)>
- <!ELEMENT relay (%boolean;)>
- <!ELEMENT forwardAddress (%Address;)>
- <!ELEMENT signature (%ADR;)>
- <!ENTITY % boolean “FALSE|TRUE”>
- <!ELEMENT HandshakeFinish
- (spi,
- proof?,
- signature)>
- <!ELEMENT ApplicationMessage ANY>
- <!ELEMENT MessageForResource (
- versionMajor,
- versionMinor,
- primaryResource,
- secondaryResources?,
- tags?,
- handlerInfo?,
- payloadType,
- payload?)>
- <!ELEMENT primaryResource (ResourceReference)>
- <!ELEMENT secondaryResources (ResourceReference*)>
- <!ELEMENT handlerInfo (ResourceInfo*)>
- <!ELEMENT payloadType (%PayloadType;)>
- <!ELEMENT ResourceReference (#PCDATA)>
- <!ELEMENT ResourceInfo (#PCDATA)>
- <!ENTITY PayloadType“
- METHOD_CALL
- |METHOD_RESULT
- |EXCEPTION
- |EVENT ”>
- <!ELEMENT payload (MethodCall|Object)>
- <!ELEMENT MethodCall
- (interfaceName,
- methodName,
- args)>
- <!ELEMENT interfaceName (%String;)>
- <!ELEMENT methodName (%String;)>
- <!ELEMENT args (Object*)>]>
Claims (7)
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
GB9929030A GB2357226B (en) | 1999-12-08 | 1999-12-08 | Security protocol |
GB9929030.6 | 1999-12-08 |
Publications (2)
Publication Number | Publication Date |
---|---|
US20010023482A1 US20010023482A1 (en) | 2001-09-20 |
US7036010B2 true US7036010B2 (en) | 2006-04-25 |
Family
ID=10865945
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/733,475 Expired - Lifetime US7036010B2 (en) | 1999-12-08 | 2000-12-07 | Method and apparatus for a secure communications session with a remote system via an access-controlling intermediate system |
Country Status (2)
Country | Link |
---|---|
US (1) | US7036010B2 (en) |
GB (1) | GB2357226B (en) |
Cited By (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20030217166A1 (en) * | 2002-05-17 | 2003-11-20 | Mario Dal Canto | System and method for provisioning universal stateless digital and computing services |
US20040148522A1 (en) * | 2001-04-05 | 2004-07-29 | Hofheinz Walter-Juergen | Method for a secure information transfer |
US20050152539A1 (en) * | 2004-01-12 | 2005-07-14 | Brickell Ernie F. | Method of protecting cryptographic operations from side channel attacks |
US20050198648A1 (en) * | 2004-01-16 | 2005-09-08 | Microsoft Corporation | Remote system administration using command line environment |
US20060062188A1 (en) * | 2004-09-20 | 2006-03-23 | Kaisa Nyberg | Replay prevention in wireless communications networks |
US20060294362A1 (en) * | 2002-09-30 | 2006-12-28 | Koninklijke Philips Electronics N.V. | Verifying a node on a network |
US7430755B1 (en) * | 2002-09-03 | 2008-09-30 | Fs Networks, Inc. | Method and system for providing persistence in a secure network access |
US20090300180A1 (en) * | 2008-05-30 | 2009-12-03 | Dehaan Michael | Systems and methods for remote management of networked systems using secure modular platform |
US20100138696A1 (en) * | 2008-11-28 | 2010-06-03 | Dehaan Michael Paul | Systems and methods for monitoring hardware resources in a software provisioning environment |
US7770181B2 (en) | 2004-01-16 | 2010-08-03 | Microsoft Corporation | System and method for transferring computer-readable objects across a remote boundary |
US20100223369A1 (en) * | 2009-02-27 | 2010-09-02 | Dehaan Michael Paul | Systems and methods for depopulation of user data from network |
US20100223473A1 (en) * | 2009-02-27 | 2010-09-02 | Dehaan Michael Paul | Systems and methods for network management using secure mesh command and control framework |
US20110066739A1 (en) * | 2004-04-12 | 2011-03-17 | Simtone Corporation (F/K/A Xds, Inc.) | System and method for automatically initiating and dynamically establishing secure internet connections between a fire-walled server and a fire-walled client |
US20120036567A1 (en) * | 2010-08-05 | 2012-02-09 | Motorola Solutions, Inc. | Methods for establishing a security session in a communications system |
US8375123B2 (en) | 2010-05-04 | 2013-02-12 | International Business Machines Corporation | Remote session management |
US9100297B2 (en) | 2008-08-20 | 2015-08-04 | Red Hat, Inc. | Registering new machines in a software provisioning environment |
US20180287803A1 (en) * | 2015-10-07 | 2018-10-04 | Westgate Cyber Security Limited | Public Key Infrastructure & Method of Distribution |
US10110595B2 (en) | 2015-03-16 | 2018-10-23 | Convida Wireless, Llc | End-to-end authentication at the service layer using public keying mechanisms |
US10129031B2 (en) * | 2014-10-31 | 2018-11-13 | Convida Wireless, Llc | End-to-end service layer authentication |
US10203946B2 (en) | 2009-05-29 | 2019-02-12 | Red Hat, Inc. | Retiring target machines by a provisioning server |
US10348706B2 (en) * | 2017-05-04 | 2019-07-09 | Ernest Brickell | Assuring external accessibility for devices on a network |
US10498712B2 (en) | 2016-11-10 | 2019-12-03 | Ernest Brickell | Balancing public and personal security needs |
US10652245B2 (en) | 2017-05-04 | 2020-05-12 | Ernest Brickell | External accessibility for network devices |
AU2017412654B2 (en) * | 2017-05-04 | 2020-07-09 | Brickell Cryptology Llc | Assuring external accessibility for devices on a network |
US10855465B2 (en) | 2016-11-10 | 2020-12-01 | Ernest Brickell | Audited use of a cryptographic key |
US11398906B2 (en) | 2016-11-10 | 2022-07-26 | Brickell Cryptology Llc | Confirming receipt of audit records for audited use of a cryptographic key |
US11405201B2 (en) | 2016-11-10 | 2022-08-02 | Brickell Cryptology Llc | Secure transfer of protected application storage keys with change of trusted computing base |
LU102626B1 (en) * | 2021-03-01 | 2022-09-01 | Wenzl Ehm Alexander | Process for the transmission of encrypted messages |
Families Citing this family (57)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7174452B2 (en) * | 2001-01-24 | 2007-02-06 | Broadcom Corporation | Method for processing multiple security policies applied to a data packet structure |
US7739497B1 (en) * | 2001-03-21 | 2010-06-15 | Verizon Corporate Services Group Inc. | Method and apparatus for anonymous IP datagram exchange using dynamic network address translation |
US20020138589A1 (en) * | 2001-03-21 | 2002-09-26 | Binnur Al-Kazily | System and method for service caching on-demand |
US7752419B1 (en) | 2001-03-22 | 2010-07-06 | Qst Holdings, Llc | Method and system for managing hardware resources to implement system functions using an adaptive computing architecture |
US7653710B2 (en) | 2002-06-25 | 2010-01-26 | Qst Holdings, Llc. | Hardware task manager |
US6836839B2 (en) | 2001-03-22 | 2004-12-28 | Quicksilver Technology, Inc. | Adaptive integrated circuitry with heterogeneous and reconfigurable matrices of diverse and adaptive computational units having fixed, application specific computational elements |
US7962716B2 (en) | 2001-03-22 | 2011-06-14 | Qst Holdings, Inc. | Adaptive integrated circuitry with heterogeneous and reconfigurable matrices of diverse and adaptive computational units having fixed, application specific computational elements |
US7249242B2 (en) | 2002-10-28 | 2007-07-24 | Nvidia Corporation | Input pipeline registers for a node in an adaptive computing engine |
US6577678B2 (en) | 2001-05-08 | 2003-06-10 | Quicksilver Technology | Method and system for reconfigurable channel coding |
US6988667B2 (en) | 2001-05-31 | 2006-01-24 | Alien Technology Corporation | Methods and apparatuses to identify devices |
US7117267B2 (en) * | 2001-06-28 | 2006-10-03 | Sun Microsystems, Inc. | System and method for providing tunnel connections between entities in a messaging system |
GB2378009B (en) * | 2001-07-27 | 2005-08-31 | Hewlett Packard Co | Method of establishing a secure data connection |
US7193504B2 (en) * | 2001-10-09 | 2007-03-20 | Alien Technology Corporation | Methods and apparatuses for identification |
US7046635B2 (en) | 2001-11-28 | 2006-05-16 | Quicksilver Technology, Inc. | System for authorizing functionality in adaptable hardware devices |
US8412915B2 (en) | 2001-11-30 | 2013-04-02 | Altera Corporation | Apparatus, system and method for configuration of adaptive integrated circuitry having heterogeneous computational elements |
US6986021B2 (en) | 2001-11-30 | 2006-01-10 | Quick Silver Technology, Inc. | Apparatus, method, system and executable module for configuration and operation of adaptive integrated circuitry having fixed, application specific computational elements |
US7215701B2 (en) | 2001-12-12 | 2007-05-08 | Sharad Sambhwani | Low I/O bandwidth method and system for implementing detection and identification of scrambling codes |
US7403981B2 (en) | 2002-01-04 | 2008-07-22 | Quicksilver Technology, Inc. | Apparatus and method for adaptive multimedia reception and transmission in communication environments |
US7246236B2 (en) * | 2002-04-18 | 2007-07-17 | Nokia Corporation | Method and apparatus for providing peer authentication for a transport layer session |
US7269730B2 (en) * | 2002-04-18 | 2007-09-11 | Nokia Corporation | Method and apparatus for providing peer authentication for an internet key exchange |
US7328414B1 (en) | 2003-05-13 | 2008-02-05 | Qst Holdings, Llc | Method and system for creating and programming an adaptive computing engine |
US7660984B1 (en) | 2003-05-13 | 2010-02-09 | Quicksilver Technology | Method and system for achieving individualized protected space in an operating system |
US7529933B2 (en) * | 2002-05-30 | 2009-05-05 | Microsoft Corporation | TLS tunneling |
US20040133795A1 (en) * | 2002-07-26 | 2004-07-08 | Eric Murray | Method and system for handling multiple security protocols in a processing system |
US8108656B2 (en) | 2002-08-29 | 2012-01-31 | Qst Holdings, Llc | Task definition for specifying resource requirements |
US20040098458A1 (en) * | 2002-09-16 | 2004-05-20 | Husain Syed Mohammad Amir | Distributed computing infrastructure including multiple collaborative sessions |
US7937591B1 (en) | 2002-10-25 | 2011-05-03 | Qst Holdings, Llc | Method and system for providing a device which can be adapted on an ongoing basis |
US8276135B2 (en) | 2002-11-07 | 2012-09-25 | Qst Holdings Llc | Profiling of software and circuit designs utilizing data operation analyses |
US7591001B2 (en) * | 2004-05-14 | 2009-09-15 | Liquidware Labs, Inc. | System, apparatuses, methods and computer-readable media for determining the security status of a computer before establishing a network connection |
US7386889B2 (en) | 2002-11-18 | 2008-06-10 | Trusted Network Technologies, Inc. | System and method for intrusion prevention in a communications network |
US7660980B2 (en) * | 2002-11-18 | 2010-02-09 | Liquidware Labs, Inc. | Establishing secure TCP/IP communications using embedded IDs |
US7549159B2 (en) * | 2004-05-10 | 2009-06-16 | Liquidware Labs, Inc. | System, apparatuses, methods and computer-readable media for determining the security status of a computer before establishing connection thereto |
US7225301B2 (en) | 2002-11-22 | 2007-05-29 | Quicksilver Technologies | External memory controller node |
US8245032B2 (en) * | 2003-03-27 | 2012-08-14 | Avaya Inc. | Method to authenticate packet payloads |
US7434045B1 (en) * | 2003-04-21 | 2008-10-07 | Cisco Technology, Inc. | Method and apparatus for indexing an inbound security association database |
US20040230825A1 (en) * | 2003-05-16 | 2004-11-18 | Shepherd Eric Robert | Secure browser |
US8102244B2 (en) | 2003-08-09 | 2012-01-24 | Alien Technology Corporation | Methods and apparatuses to identify devices |
US7716160B2 (en) | 2003-11-07 | 2010-05-11 | Alien Technology Corporation | Methods and apparatuses to identify devices |
FR2865335A1 (en) * | 2004-01-16 | 2005-07-22 | France Telecom | Internal and external internet protocol terminals communication system, has control server that is provided in public IP network and that controls mediation system via communication channel passing via firewall |
FR2871251B1 (en) * | 2004-06-03 | 2007-02-16 | Henri Hovette | METHOD FOR UNIVERSAL AUTHENTICATION OF DOCUMENTS |
US7848332B2 (en) * | 2004-11-15 | 2010-12-07 | Cisco Technology, Inc. | Method and apparatus for classifying a network protocol and aligning a network protocol header relative to cache line boundary |
US20060294366A1 (en) * | 2005-06-23 | 2006-12-28 | International Business Machines Corp. | Method and system for establishing a secure connection based on an attribute certificate having user credentials |
US8631078B2 (en) * | 2006-07-07 | 2014-01-14 | Google Inc. | Method and system for embedded personalized communication |
JP4081724B1 (en) * | 2006-12-27 | 2008-04-30 | 日本電気株式会社 | Client terminal, relay server, communication system, and communication method |
US9021503B2 (en) * | 2007-11-16 | 2015-04-28 | Microsoft Technology Licensing, Llc | Coordinating application state and communication medium state |
US8719841B2 (en) * | 2007-11-16 | 2014-05-06 | Microsoft Corporation | Dispatch mechanism for coordinating application and communication medium state |
US8505030B2 (en) * | 2007-11-16 | 2013-08-06 | Microsoft Corporation | Coordinating resources using a volatile network intermediary |
US8301706B2 (en) | 2009-06-15 | 2012-10-30 | Microsoft Corporation | Routing of pooled messages via an intermediary |
US9912654B2 (en) * | 2009-11-12 | 2018-03-06 | Microsoft Technology Licensing, Llc | IP security certificate exchange based on certificate attributes |
JP5990466B2 (en) | 2010-01-21 | 2016-09-14 | スビラル・インコーポレーテッド | Method and apparatus for a general purpose multi-core system for implementing stream-based operations |
US8549538B2 (en) * | 2010-03-18 | 2013-10-01 | Microsoft Corporation | Coordinating communication medium state for subtasks |
US8250234B2 (en) * | 2010-04-26 | 2012-08-21 | Microsoft Corporation | Hierarchically disassembling messages |
US9137216B2 (en) * | 2013-08-13 | 2015-09-15 | Verizon Patent And Licensing Inc. | Session layer data security |
US10291589B1 (en) * | 2014-12-12 | 2019-05-14 | Amazon Technologies, Inc. | Session-based access control determinations |
US9985946B2 (en) * | 2015-12-22 | 2018-05-29 | Intel Corporation | System, apparatus and method for safety state management of internet things (IoT) devices |
US10218686B2 (en) * | 2016-10-24 | 2019-02-26 | International Business Machines Corporation | Dynamically managing, from a centralized service, valid cipher suites allowed for secured sessions |
CA3127711A1 (en) * | 2019-04-25 | 2020-10-29 | Deere & Company | Systems, methods and controllers for secure communications |
Citations (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP0328232A2 (en) | 1988-02-12 | 1989-08-16 | Addison M. Fischer | Public key/signature cryptosystem with enhanced digital signature certification |
EP0402083A2 (en) | 1989-06-05 | 1990-12-12 | Motorola, Inc. | Teleconferencing method for a secure key management system |
US5005200A (en) | 1988-02-12 | 1991-04-02 | Fischer Addison M | Public key/signature cryptosystem with enhanced digital signature certification |
EP0503765A2 (en) | 1991-03-08 | 1992-09-16 | International Computers Limited | Access control in a distributed computer system |
US5218637A (en) | 1987-09-07 | 1993-06-08 | L'etat Francais Represente Par Le Ministre Des Postes, Des Telecommunications Et De L'espace | Method of transferring a secret, by the exchange of two certificates between two microcomputers which establish reciprocal authorization |
WO1994003859A1 (en) | 1992-07-31 | 1994-02-17 | International Standard Electric Corp. | Apparatus and method for providing network security |
EP0651533A2 (en) | 1993-11-02 | 1995-05-03 | Sun Microsystems, Inc. | Method and apparatus for privacy and authentication in a mobile wireless network |
WO1995023468A1 (en) | 1994-02-24 | 1995-08-31 | Merdan Group, Inc. | Apparatus and method for establishing a cryptographic link between elements of a system |
WO1996002993A2 (en) | 1994-07-19 | 1996-02-01 | Bankers Trust Company | Method for securely using digital signatures in a commercial cryptographic system |
US5497422A (en) | 1993-09-30 | 1996-03-05 | Apple Computer, Inc. | Message protection mechanism and graphical user interface therefor |
JPH08110869A (en) | 1994-10-12 | 1996-04-30 | Fuji Xerox Co Ltd | File system |
US5515441A (en) | 1994-05-12 | 1996-05-07 | At&T Corp. | Secure communication method and apparatus |
EP0820176A2 (en) | 1996-07-15 | 1998-01-21 | AT&T Corp. | A method and apparatus for restricting access to private information in domain name systems by filtering information |
WO1998038759A2 (en) | 1997-02-14 | 1998-09-03 | International Business Machines Corporation | Generic user authentication for network computers |
GB2323757A (en) | 1997-03-28 | 1998-09-30 | Ibm | Lightweight secure communication tunnelling over the internet |
US5819044A (en) | 1994-10-12 | 1998-10-06 | Fuji Xerox Co., Ltd. | Name service apparatus using resource management, name resolution and virtual resource realization for realizing a virtual resource by applying the procedure to the actual resource |
US5825890A (en) | 1995-08-25 | 1998-10-20 | Netscape Communications Corporation | Secure socket layer application program apparatus and method |
JPH1131129A (en) | 1997-07-14 | 1999-02-02 | Fujitsu Ltd | System for linking plural www servers |
US5898784A (en) * | 1996-01-16 | 1999-04-27 | Raptor Systems, Inc. | Transferring encrypted packets over a public network |
US5907621A (en) | 1996-11-15 | 1999-05-25 | International Business Machines Corporation | System and method for session management |
JPH11184818A (en) | 1997-12-25 | 1999-07-09 | Ntt Data Corp | Authentication system, its method and client machine for the certification system |
US5923842A (en) | 1997-03-06 | 1999-07-13 | Citrix Systems, Inc. | Method and apparatus for simultaneously providing anonymous user login for multiple users |
GB2333878A (en) | 1998-01-28 | 1999-08-04 | Citibank Na | Performing an online transaction using card information and PIN |
US5940591A (en) | 1991-07-11 | 1999-08-17 | Itt Corporation | Apparatus and method for providing network security |
US5958050A (en) | 1996-09-24 | 1999-09-28 | Electric Communities | Trusted delegation system |
EP0969366A1 (en) | 1998-06-29 | 2000-01-05 | Sun Microsystems, Inc. | Controlling access to services between modular applications |
WO2000008818A1 (en) | 1998-08-03 | 2000-02-17 | Sun Microsystems, Inc. | Chained registrations for mobile ip |
EP0989501A2 (en) | 1998-09-24 | 2000-03-29 | International Business Machines Corporation | Method and apparatus for collaboration support |
US6081900A (en) * | 1999-03-16 | 2000-06-27 | Novell, Inc. | Secure intranet access |
US6094485A (en) | 1997-09-18 | 2000-07-25 | Netscape Communications Corporation | SSL step-up |
US6094437A (en) * | 1998-10-09 | 2000-07-25 | Asc - Advanced Switching Communications | Layer two tunneling protocol (L2TP) merging and management |
US6134550A (en) | 1998-03-18 | 2000-10-17 | Entrust Technologies Limited | Method and apparatus for use in determining validity of a certificate in a communication system employing trusted paths |
US6292839B1 (en) * | 1998-12-09 | 2001-09-18 | 3Com Corporation | Method and system for reflexive tunneling |
US20020035635A1 (en) | 1996-07-30 | 2002-03-21 | Holden James M. | Method and system for establishing a security perimeter in computer networks |
US6377691B1 (en) | 1996-12-09 | 2002-04-23 | Microsoft Corporation | Challenge-response authentication and key exchange for a connectionless security protocol |
US6574224B1 (en) * | 1999-07-02 | 2003-06-03 | Nortel Networks Limited | Processing communication traffic |
US6591306B1 (en) * | 1999-04-01 | 2003-07-08 | Nec Corporation | IP network access for portable devices |
US6643701B1 (en) | 1999-11-17 | 2003-11-04 | Sun Microsystems, Inc. | Method and apparatus for providing secure communication with a relay in a network |
-
1999
- 1999-12-08 GB GB9929030A patent/GB2357226B/en not_active Expired - Fee Related
-
2000
- 2000-12-07 US US09/733,475 patent/US7036010B2/en not_active Expired - Lifetime
Patent Citations (40)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5218637A (en) | 1987-09-07 | 1993-06-08 | L'etat Francais Represente Par Le Ministre Des Postes, Des Telecommunications Et De L'espace | Method of transferring a secret, by the exchange of two certificates between two microcomputers which establish reciprocal authorization |
US4868877A (en) | 1988-02-12 | 1989-09-19 | Fischer Addison M | Public key/signature cryptosystem with enhanced digital signature certification |
US5005200A (en) | 1988-02-12 | 1991-04-02 | Fischer Addison M | Public key/signature cryptosystem with enhanced digital signature certification |
EP0328232A2 (en) | 1988-02-12 | 1989-08-16 | Addison M. Fischer | Public key/signature cryptosystem with enhanced digital signature certification |
EP0586022A1 (en) | 1989-03-07 | 1994-03-09 | Addison M. Fischer | Improved public key/signature cryptosystem with enhanced digital signature certification field |
EP0402083A2 (en) | 1989-06-05 | 1990-12-12 | Motorola, Inc. | Teleconferencing method for a secure key management system |
EP0503765A2 (en) | 1991-03-08 | 1992-09-16 | International Computers Limited | Access control in a distributed computer system |
US5940591A (en) | 1991-07-11 | 1999-08-17 | Itt Corporation | Apparatus and method for providing network security |
WO1994003859A1 (en) | 1992-07-31 | 1994-02-17 | International Standard Electric Corp. | Apparatus and method for providing network security |
US5497422A (en) | 1993-09-30 | 1996-03-05 | Apple Computer, Inc. | Message protection mechanism and graphical user interface therefor |
EP0651533A2 (en) | 1993-11-02 | 1995-05-03 | Sun Microsystems, Inc. | Method and apparatus for privacy and authentication in a mobile wireless network |
WO1995023468A1 (en) | 1994-02-24 | 1995-08-31 | Merdan Group, Inc. | Apparatus and method for establishing a cryptographic link between elements of a system |
US5515441A (en) | 1994-05-12 | 1996-05-07 | At&T Corp. | Secure communication method and apparatus |
WO1996002993A2 (en) | 1994-07-19 | 1996-02-01 | Bankers Trust Company | Method for securely using digital signatures in a commercial cryptographic system |
JPH08110869A (en) | 1994-10-12 | 1996-04-30 | Fuji Xerox Co Ltd | File system |
US5819044A (en) | 1994-10-12 | 1998-10-06 | Fuji Xerox Co., Ltd. | Name service apparatus using resource management, name resolution and virtual resource realization for realizing a virtual resource by applying the procedure to the actual resource |
US5825890A (en) | 1995-08-25 | 1998-10-20 | Netscape Communications Corporation | Secure socket layer application program apparatus and method |
US5898784A (en) * | 1996-01-16 | 1999-04-27 | Raptor Systems, Inc. | Transferring encrypted packets over a public network |
EP0820176A2 (en) | 1996-07-15 | 1998-01-21 | AT&T Corp. | A method and apparatus for restricting access to private information in domain name systems by filtering information |
US20020035635A1 (en) | 1996-07-30 | 2002-03-21 | Holden James M. | Method and system for establishing a security perimeter in computer networks |
US5958050A (en) | 1996-09-24 | 1999-09-28 | Electric Communities | Trusted delegation system |
US5907621A (en) | 1996-11-15 | 1999-05-25 | International Business Machines Corporation | System and method for session management |
US6377691B1 (en) | 1996-12-09 | 2002-04-23 | Microsoft Corporation | Challenge-response authentication and key exchange for a connectionless security protocol |
WO1998038759A2 (en) | 1997-02-14 | 1998-09-03 | International Business Machines Corporation | Generic user authentication for network computers |
US5923842A (en) | 1997-03-06 | 1999-07-13 | Citrix Systems, Inc. | Method and apparatus for simultaneously providing anonymous user login for multiple users |
GB2323757A (en) | 1997-03-28 | 1998-09-30 | Ibm | Lightweight secure communication tunnelling over the internet |
JPH1131129A (en) | 1997-07-14 | 1999-02-02 | Fujitsu Ltd | System for linking plural www servers |
US6094485A (en) | 1997-09-18 | 2000-07-25 | Netscape Communications Corporation | SSL step-up |
JPH11184818A (en) | 1997-12-25 | 1999-07-09 | Ntt Data Corp | Authentication system, its method and client machine for the certification system |
GB2333878A (en) | 1998-01-28 | 1999-08-04 | Citibank Na | Performing an online transaction using card information and PIN |
US6134550A (en) | 1998-03-18 | 2000-10-17 | Entrust Technologies Limited | Method and apparatus for use in determining validity of a certificate in a communication system employing trusted paths |
EP0969366A1 (en) | 1998-06-29 | 2000-01-05 | Sun Microsystems, Inc. | Controlling access to services between modular applications |
WO2000008818A1 (en) | 1998-08-03 | 2000-02-17 | Sun Microsystems, Inc. | Chained registrations for mobile ip |
EP0989501A2 (en) | 1998-09-24 | 2000-03-29 | International Business Machines Corporation | Method and apparatus for collaboration support |
US6094437A (en) * | 1998-10-09 | 2000-07-25 | Asc - Advanced Switching Communications | Layer two tunneling protocol (L2TP) merging and management |
US6292839B1 (en) * | 1998-12-09 | 2001-09-18 | 3Com Corporation | Method and system for reflexive tunneling |
US6081900A (en) * | 1999-03-16 | 2000-06-27 | Novell, Inc. | Secure intranet access |
US6591306B1 (en) * | 1999-04-01 | 2003-07-08 | Nec Corporation | IP network access for portable devices |
US6574224B1 (en) * | 1999-07-02 | 2003-06-03 | Nortel Networks Limited | Processing communication traffic |
US6643701B1 (en) | 1999-11-17 | 2003-11-04 | Sun Microsystems, Inc. | Method and apparatus for providing secure communication with a relay in a network |
Non-Patent Citations (18)
Title |
---|
Bray, Tim, et al., "Extensible Markup Language (XML) 1.0 Specification", Second Edition, W3C, available at http://www.w3.org/TR/REC-xml, Feb. 1998, pp. 1-57. |
Dierkes, T., et al., "The TLS Protocol, Version 1.0", IETF RFC2246, Network Working Group, Jan. 1999, pp. 1-67. |
Elien, Jean-Emile, "Certificate Discovery Using SPKI/SDSI 2.0 Certificates", Masters Thesis MIT LCS, available at http://theory.lcs.mit.edu/~cis/theses/elien-masters.ps, May 1998, pp. 11-54. |
Ellison, C., "Simple Public Key Certificate", IETF draft draft-ietf-spki-cert-structure-05.text, available at http://www.clark.net/pub/cme/spki.txt, Mar. 13, 1998, pp. 1-35. |
Ellison, C., "SPKI Requirements", IETF RFC 2692, Network Working Group, Sep. 1999, pp. 1-14. |
Ellison, C., et al., "SPKI Certificate Theory", IETF RFC2693, Network Working Group, Sep. 1999, pp. 1-36. |
Ellison, C., et al., "SPKI Examples", <draft-ietf-spki-cert-examples-01.txt>, available at http://www.clark.net/pub/cme/examples.txt, Mar. 10, 1998, pp. 1-13. |
Farrell, S., et al., "Limited AttributeCertificate Acquisition Protocol", available at http://search.ietf.org/internet-drafts/draft-ietf-pkix-laap-00.txt, Internet Engineering Task Force, PKIX Working Group, Internet Draft, published Oct. 1999, pp. 1-10. |
Harkins, D., et al., "The Internet Key Exchange (IKE)", IETF RFC 2409, Network Working Group, Nov. 1998, pp. 1-34. |
Hewlett-Packard Company, "e-Speak Architecture Specification", Version Beta 2.0, available at http://www.e-speak.hp.com/ , Sep. 1999, pp. i-xvi, 1-200. |
Kent, S., et al., "Security Architecture for the Internet Protocol", IEFT RFC 2401, Network Working Group, Nov. 1998, pp. 1-66. |
Meenezes, A., et al. The Book of Applied Cryptography, CRC Press, pp. 572-576 (1997). |
Merkow, Mark, "More Than A Language-XML Is A Security Tool Too!", Internet.com e-Commerce Guide, available at http://ecommerce.internet.com/outlook/print/0, ,7761<SUB>-</SUB>124821,00.html, May 13, 1999, pp. 1-4. |
National Institute of Standards and Technology, Data Encryption Standard (DES), Draft Fips Pub 46-3, U.S. Department of Commerce, available at http://www.ncsl.nist.gov/fips/ , Jan. 20, 1999, pp. 1-20. |
National Institute of Standards and Technology, Des Modes of Operation, FIPS Pub 81, available at http://www.itl.nist.gov/fipspubs/.], Dec. 2, 1980, pp. 1-22. |
National Institute of Standards and Technology, Secure Hash Standard, FIPS Pub 180-1, available at http://www.itl.nist.gov/fipspubs/, Apr. 17, 1995, pp. 1-16. |
Reagle, Jr., Joseph, editor, W3C Working Draft, "XML Signature Requirements", IETF, available at http://www.w3.org/TR/xmldsig-requirements, Oct. 14, 1999, pp. 1-6. |
Rivest, R., "S-Expressions draft-rivest-sexp-00.txt", Network Working Group, available at http://theory.lcs.mit.edu/~rivest/sexp.txt, May 4, 1997, pp. 1-11. |
Cited By (54)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040148522A1 (en) * | 2001-04-05 | 2004-07-29 | Hofheinz Walter-Juergen | Method for a secure information transfer |
US7966657B2 (en) * | 2001-04-05 | 2011-06-21 | Siemens Aktiengesellschaft | Method for a secure information transfer |
US7363363B2 (en) | 2002-05-17 | 2008-04-22 | Xds, Inc. | System and method for provisioning universal stateless digital and computing services |
US7783701B2 (en) | 2002-05-17 | 2010-08-24 | Simtone Corporation | System and method for provisioning universal stateless digital and computing services |
US20110093940A1 (en) * | 2002-05-17 | 2011-04-21 | Simtone Corporation (F/K/A Xds, Inc.) | System and method for provisioning universal stateless digital and computing services |
US20030217166A1 (en) * | 2002-05-17 | 2003-11-20 | Mario Dal Canto | System and method for provisioning universal stateless digital and computing services |
US20080071860A1 (en) * | 2002-05-17 | 2008-03-20 | Xds Inc. | System and method for provisioning universal stateless digital and computing services |
US20080072298A1 (en) * | 2002-05-17 | 2008-03-20 | Xds Inc. | System and method for provisioning universal stateless digital and computing services |
US8769265B1 (en) | 2002-09-03 | 2014-07-01 | F5 Networks, Inc. | Method and system for providing persistence in a secure network access |
US7430755B1 (en) * | 2002-09-03 | 2008-09-30 | Fs Networks, Inc. | Method and system for providing persistence in a secure network access |
US8407771B1 (en) | 2002-09-03 | 2013-03-26 | F5 Networks, Inc. | Method and system for providing persistence in a secure network access |
US7996886B1 (en) | 2002-09-03 | 2011-08-09 | F5 Networks, Inc. | Method and system for providing persistence in a secure network access |
US9210163B1 (en) | 2002-09-03 | 2015-12-08 | F5 Networks, Inc. | Method and system for providing persistence in a secure network access |
US8762727B2 (en) * | 2002-09-30 | 2014-06-24 | Koninklijke Philips N.V. | Verifying a node on a network |
US20060294362A1 (en) * | 2002-09-30 | 2006-12-28 | Koninklijke Philips Electronics N.V. | Verifying a node on a network |
US20050152539A1 (en) * | 2004-01-12 | 2005-07-14 | Brickell Ernie F. | Method of protecting cryptographic operations from side channel attacks |
US7770181B2 (en) | 2004-01-16 | 2010-08-03 | Microsoft Corporation | System and method for transferring computer-readable objects across a remote boundary |
US20050198648A1 (en) * | 2004-01-16 | 2005-09-08 | Microsoft Corporation | Remote system administration using command line environment |
US7698359B2 (en) * | 2004-01-16 | 2010-04-13 | Microsoft Corporation | Remote system administration using command line environment |
US20110066739A1 (en) * | 2004-04-12 | 2011-03-17 | Simtone Corporation (F/K/A Xds, Inc.) | System and method for automatically initiating and dynamically establishing secure internet connections between a fire-walled server and a fire-walled client |
US20060062188A1 (en) * | 2004-09-20 | 2006-03-23 | Kaisa Nyberg | Replay prevention in wireless communications networks |
US20090300180A1 (en) * | 2008-05-30 | 2009-12-03 | Dehaan Michael | Systems and methods for remote management of networked systems using secure modular platform |
US8713177B2 (en) * | 2008-05-30 | 2014-04-29 | Red Hat, Inc. | Remote management of networked systems using secure modular platform |
US9100297B2 (en) | 2008-08-20 | 2015-08-04 | Red Hat, Inc. | Registering new machines in a software provisioning environment |
US20100138696A1 (en) * | 2008-11-28 | 2010-06-03 | Dehaan Michael Paul | Systems and methods for monitoring hardware resources in a software provisioning environment |
US8782204B2 (en) | 2008-11-28 | 2014-07-15 | Red Hat, Inc. | Monitoring hardware resources in a software provisioning environment |
US9313105B2 (en) | 2009-02-27 | 2016-04-12 | Red Hat, Inc. | Network management using secure mesh command and control framework |
US20100223369A1 (en) * | 2009-02-27 | 2010-09-02 | Dehaan Michael Paul | Systems and methods for depopulation of user data from network |
US9558195B2 (en) | 2009-02-27 | 2017-01-31 | Red Hat, Inc. | Depopulation of user data from network |
US20100223473A1 (en) * | 2009-02-27 | 2010-09-02 | Dehaan Michael Paul | Systems and methods for network management using secure mesh command and control framework |
US10203946B2 (en) | 2009-05-29 | 2019-02-12 | Red Hat, Inc. | Retiring target machines by a provisioning server |
US8375123B2 (en) | 2010-05-04 | 2013-02-12 | International Business Machines Corporation | Remote session management |
US8984129B2 (en) | 2010-05-04 | 2015-03-17 | International Business Machines Corporation | Remote session management |
US8448235B2 (en) | 2010-08-05 | 2013-05-21 | Motorola Solutions, Inc. | Method for key identification using an internet security association and key management based protocol |
US20120036567A1 (en) * | 2010-08-05 | 2012-02-09 | Motorola Solutions, Inc. | Methods for establishing a security session in a communications system |
US10601594B2 (en) | 2014-10-31 | 2020-03-24 | Convida Wireless, Llc | End-to-end service layer authentication |
US10129031B2 (en) * | 2014-10-31 | 2018-11-13 | Convida Wireless, Llc | End-to-end service layer authentication |
US10110595B2 (en) | 2015-03-16 | 2018-10-23 | Convida Wireless, Llc | End-to-end authentication at the service layer using public keying mechanisms |
US10880294B2 (en) | 2015-03-16 | 2020-12-29 | Convida Wireless, Llc | End-to-end authentication at the service layer using public keying mechanisms |
US10826711B2 (en) * | 2015-10-07 | 2020-11-03 | Enclave Networks Limited | Public key infrastructure and method of distribution |
US20180287803A1 (en) * | 2015-10-07 | 2018-10-04 | Westgate Cyber Security Limited | Public Key Infrastructure & Method of Distribution |
US11398906B2 (en) | 2016-11-10 | 2022-07-26 | Brickell Cryptology Llc | Confirming receipt of audit records for audited use of a cryptographic key |
US10855465B2 (en) | 2016-11-10 | 2020-12-01 | Ernest Brickell | Audited use of a cryptographic key |
US10498712B2 (en) | 2016-11-10 | 2019-12-03 | Ernest Brickell | Balancing public and personal security needs |
US11115208B2 (en) | 2016-11-10 | 2021-09-07 | Ernest Brickell | Protecting sensitive information from an authorized device unlock |
US11405201B2 (en) | 2016-11-10 | 2022-08-02 | Brickell Cryptology Llc | Secure transfer of protected application storage keys with change of trusted computing base |
AU2017412654B2 (en) * | 2017-05-04 | 2020-07-09 | Brickell Cryptology Llc | Assuring external accessibility for devices on a network |
US10771467B1 (en) | 2017-05-04 | 2020-09-08 | Ernest Brickell | External accessibility for computing devices |
US10652245B2 (en) | 2017-05-04 | 2020-05-12 | Ernest Brickell | External accessibility for network devices |
US10904256B2 (en) | 2017-05-04 | 2021-01-26 | Ernest Brickell | External accessibility for computing devices |
AU2020204174B2 (en) * | 2017-05-04 | 2021-07-15 | Brickell Cryptology Llc | Assuring external accessibility for devices on a network |
US10348706B2 (en) * | 2017-05-04 | 2019-07-09 | Ernest Brickell | Assuring external accessibility for devices on a network |
LU102626B1 (en) * | 2021-03-01 | 2022-09-01 | Wenzl Ehm Alexander | Process for the transmission of encrypted messages |
WO2022184717A1 (en) * | 2021-03-01 | 2022-09-09 | Wenzl Ehm Alexander | Method for transmitting encrypted messages |
Also Published As
Publication number | Publication date |
---|---|
US20010023482A1 (en) | 2001-09-20 |
GB2357226B (en) | 2003-07-16 |
GB2357226A (en) | 2001-06-13 |
GB9929030D0 (en) | 2000-02-02 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7036010B2 (en) | Method and apparatus for a secure communications session with a remote system via an access-controlling intermediate system | |
US6952768B2 (en) | Security protocol | |
US6993651B2 (en) | Security protocol | |
US11122018B2 (en) | Secure end-to-end transport through intermediary nodes | |
Maughan et al. | Internet security association and key management protocol (ISAKMP) | |
US6092200A (en) | Method and apparatus for providing a virtual private network | |
EP1376976B1 (en) | Methods for authenticating potential members invited to join a group | |
US7039713B1 (en) | System and method of user authentication for network communication through a policy agent | |
US7305548B2 (en) | Using atomic messaging to increase the security of transferring data across a network | |
US6026167A (en) | Method and apparatus for sending secure datagram multicasts | |
US6091820A (en) | Method and apparatus for achieving perfect forward secrecy in closed user groups | |
KR19990072733A (en) | Method and Apparatus for Conducting Crypto-Ignition Processes between Thin Client Devices and Server Devices over Data Network | |
WO2005008950A1 (en) | Secure seed generation protocol | |
Maughan et al. | RFC2408: Internet Security Association and Key Management Protocol (ISAKMP) | |
CN116684093B (en) | Identity authentication and key exchange method and system | |
Wang | Security issues to tele-medicine system design | |
Stallings | Protocol Basics: Secure Shell Protocol. The Internet Protocol Journal, Volume 12, No. 4 | |
Bai et al. | Access revocation and prevention of false repudiation in secure email exchanges | |
Al-Fantookh et al. | Secure Socket Layer (SSL) | |
Vaisla et al. | Modified Authentication Protocol of X. 509–Directory Authentication Services | |
Xu | Security modules in building a secure Internet | |
LIN et al. | SECURE INTERNET ACCESSIBLE MATHEMATICAL COMPUTATION FRAMEWORK | |
Bai | Secure electronic mail |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: HEWLETT-PACKARD COMPANY, CALIFORNIAFree format text: ASSIGNMENT BY OPERATION OF LAW;ASSIGNORS:HEWLETT-PACKARD LIMITED;WRAY, MICHAEL;REEL/FRAME:011357/0161Effective date: 20001130 |
|
AS | Assignment |
Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY L.P., TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:014061/0492Effective date: 20030926Owner name: HEWLETT-PACKARD DEVELOPMENT COMPANY L.P.,TEXASFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:HEWLETT-PACKARD COMPANY;REEL/FRAME:014061/0492Effective date: 20030926 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEWLETT-PACKARD DEVELOPMENT COMPANY, L.P.;HEWLETT-PACKARD COMPANY;REEL/FRAME:027661/0258Effective date: 20111025 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553)Year of fee payment: 12 |