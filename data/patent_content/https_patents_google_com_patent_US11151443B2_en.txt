US11151443B2 - Augmenting neural networks with sparsely-accessed external memory - Google Patents
Augmenting neural networks with sparsely-accessed external memory Download PDFInfo
- Publication number
- US11151443B2 US11151443B2 US15/424,685 US201715424685A US11151443B2 US 11151443 B2 US11151443 B2 US 11151443B2 US 201715424685 A US201715424685 A US 201715424685A US 11151443 B2 US11151443 B2 US 11151443B2
- Authority
- US
- United States
- Prior art keywords
- neural network
- locations
- reading
- location
- weights
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/06—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons
- G06N3/063—Physical realisation, i.e. hardware implementation of neural networks, neurons or parts of neurons using electronic means
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G06N3/0445—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
- G06N3/082—Learning methods modifying the architecture, e.g. adding, deleting or silencing nodes or connections
Definitions
- This specification relates to neural network system architectures.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- a recurrent neural network is a neural network that receives an input sequence and generates an output sequence from the input sequence.
- a recurrent neural network can use some or all of the internal state of the network from processing a previous input in computing a current output.
- An example of a recurrent neural network is a Long Short-Term Memory (LSTM) neural network that includes one or more LSTM memory blocks. Each LSTM memory block can include one or more cells that each include an input gate, a forget gate, and an output gate that allow the cell to store previous states for the cell, e.g., for use in generating a current activation or to be provided to other components of the LSTM neural network.
- LSTM Long Short-Term Memory
- This specification describes technologies that relate to augmented neural network systems, i.e., neural network systems that are augmented with an external memory.
- a memory-augmented neural network system includes a neural network configured to receive a neural network input and generate a neural network output, an external memory, i.e., a memory that is external to the controller neural network, that stores values derived from portions of the neural network output, and a subsystem that is configured to receive portions of the neural network output and erase, write, and read from the external memory using the received portions.
- an external memory i.e., a memory that is external to the controller neural network, that stores values derived from portions of the neural network output
- a subsystem that is configured to receive portions of the neural network output and erase, write, and read from the external memory using the received portions.
- the subsystem is configured to generate a sparse set of reading weights that includes a respective reading weight for each of the locations in the external memory using the neural network output and to read data from the locations in the external memory in accordance with the reading weights.
- the subsystem is configured to generate a set of writing weights that includes a respective writing weight for each of the locations in the external memory and write a write vector to the locations in the external memory in accordance with the writing weights.
- the set of writing weights is also a sparse set of weights.
- a sparse set of weights is a set of weights that includes only a small number, e.g., four, five, eight, or nine, non-zero weights and a large number of weights that are zero.
- the external memory can have anywhere from on the order of two hundred locations, on the order of fifty thousand locations, to on the order of a million locations, with the reading weight only being non-zero for a small number, e.g., four, five, eight, or nine of those locations at any given time.
- the memory may be able to include on the order of a billion locations.
- a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions.
- one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- the augmented neural network can more accurately generate outputs from received inputs for a variety of machine learning tasks.
- the augmented neural network can effectively use information generated by the augmented neural network during processing of many preceding inputs in the sequence by reading from the external memory.
- the augmented neural network can store information generated during processing of the current input in the external memory.
- the size of the external memory can be increased without increasing the number of trainable parameters of the augmented neural network.
- the entire mechanism for accessing the external memory can be treated as being differentiable, the memory-augmented neural network system can be trained efficiently.
- the system as described in this specification allows for more efficient interaction with the external memory by ensuring that the weights used to read and write from the external memory are sparse. This allows the system to read and write from the external memory more quickly and using fewer computing resources. In particular, by using the sparse reading and writing mechanisms described in this specification, run-time and memory overhead can be decreased while maintaining a high level of accuracy in the outputs generated by the system.
- the time and computing resources required to train the controller neural network can be reduced, both because reading and writing is also sparse during training, but also because sparse reads and writes result in fewer gradients needing to be computed and backpropagated through the controller neural network during the training.
- FIG. 1 shows an example augmented neural network system.
- FIG. 2 is a flow diagram of an example process for generating a system output from a system input.
- FIG. 3 is a flow diagram of an example process for reading from an external memory.
- FIG. 4 is a flow diagram of an example process for writing to the external memory and erasing from the external memory.
- FIG. 1 shows an example augmented neural network system 100 .
- the memory-augmented neural network system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below are implemented.
- the memory-augmented neural network system 100 is a machine learning system that receives a sequence that includes a respective system input at each of multiple time steps and generates a sequence of system outputs from the system inputs.
- the memory-augmented neural network system 100 can receive a system input x at a given time step in an input sequence and generate a system output y for the time step from the system input x.
- the memory-augmented neural network system 100 can store the generated sequence of outputs in an output data repository or provide the output for use for some other immediate purpose, e.g., for presentation to a user or for further processing by another system.
- the memory-augmented neural network system 100 can be configured to receive any kind of digital data input and to generate any kind of score, classification, or regression output based on the input.
- the output generated by the memory-augmented neural network system 100 for a given image may be scores for each of a set of object categories, with each score representing an estimated likelihood that the image contains an image of an object belonging to the category.
- the output generated by the memory-augmented neural network system 100 for a given Internet resource, document, or portion of a document may be a score for each of a set of topics, with each score representing an estimated likelihood that the Internet resource, document, or document portion is about the topic.
- the output generated by the memory-augmented neural network system 100 may be a score that represents an estimated likelihood that the particular selectable content item will be selected e.g., clicked on.
- the output generated by the memory-augmented neural network system 100 may be a score for each of a set of content items, with each score representing an estimated likelihood that the user will respond favorably to being recommended the content item.
- the output generated by the memory-augmented neural network system 100 may be a score for each of a set of pieces of text in another language, with each score representing an estimated likelihood that the piece of text in the other language is a proper translation of the input text into the other language.
- the output generated by the memory-augmented neural network system 100 may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is the correct transcript for the utterance or sequence of utterances.
- the memory-augmented neural network system 100 can be part of a speech synthesis system.
- the memory-augmented neural network system 100 can be part of a video processing system.
- the memory-augmented neural network system 100 can be part of a dialogue system.
- the memory-augmented neural network system 100 can be part of an autocompletion system.
- the memory-augmented neural network system 100 can be part of a text processing system.
- the memory-augmented neural network system 100 can be part of a reinforcement learning system.
- the output generated by the system may be a score for each of a set of pieces of text, each score representing an estimated likelihood that the piece of text is text that is present in the input image.
- the output generated by the system may identify a predicted output of the computer program.
- the memory-augmented neural network system 100 includes a controller neural network 102 and an external memory 104 .
- the controller neural network 102 may be a feedfoward neural network or a recurrent neural network, e.g., a shallow or deep long short-term memory (LSTM) neural network, that is configured to receive a neural network input and process the controller neural network input to generate a neural network output.
- LSTM long short-term memory
- the neural network input received by the controller neural network 102 is a combination of the current system input and data read from the external memory by a sparse memory access subsystem 106 .
- the controller neural network 102 may be configured to receive the current system input x and data r read from the external memory 104 and to generate a neural network output o that is provided to the sparse memory access subsystem 106 .
- the sparse memory access subsystem 106 receives outputs generated by the controller neural network, e.g., the output o, and translates the received outputs into erase, read, and write operations to be performed on the external memory 104 . That is, the sparse memory access subsystem 106 receives an output o from the controller neural network 102 and, based on the output o, erases data e from the external memory 104 , writes data w to the external memory 104 , and reads data r from the external memory 104 . The data read by the sparse memory access subsystem 106 can then be provided to the controller neural network 102 as a portion of a later neural network input, e.g., along with a system input.
- the sparse memory access subsystem 106 also generates a system output y from the data r read from the external memory, the neural network output o, or both.
- the sparse memory access subsystem 106 provides the read data r as the system output y.
- the sparse memory access subsystem 106 processes the read data r through one or more output neural network layers, e.g., one or more linear layers, to generate the system output y.
- output neural network layers e.g., one or more linear layers
- the sparse memory access subsystem 106 combines, e.g., concatenates or sums, the neural network output o and the read data r, and then either provides the combination as the system output y or processes the combination through one or more output neural network layers, e.g., one or more linear layers, to generate the system output y.
- the neural network output o includes an output portion that is different from the portions used to read, write, and erase from the external memory 104 .
- the sparse memory access subsystem 106 can either provide the output portion as the system output y or process the output portion through one or more output neural network layers, e.g., one or more linear layers, to generate the system output y.
- the neural network output o includes a write portion for use by the sparse memory access subsystem 106 in writing to the external memory 104 and a read portion used by the sparse memory access subsystem 106 to read from the external memory 104 .
- the external memory 104 stores data vectors written to the external memory 104 by the sparse memory access subsystem 106 .
- the external memory 104 is a real-valued matrix memory that has elements M(i,j), where i indexes location and j indexes the vector element.
- M(i,j) would be the value stored at element j of the vector stored at location i in the external memory 104 .
- FIG. 2 is a flow diagram of an example process 200 for generating a system output for a given time step from a system input for the time step.
- the process 200 will be described as being performed by a system of one or more computers located in one or more locations.
- a memory-augmented neural network system e.g., the memory-augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 200 .
- the system receives a system input for the time step (step 202 ).
- the system input is one of a sequence of system inputs received by the system.
- the system obtains a read data vector generated by reading from an external memory (step 204 ), e.g., the external memory 104 of FIG. 1 .
- the read data vector was generated by the system by reading from the external memory during processing of the preceding input in the sequence of system inputs, i.e., during processing of the system input at the preceding time step.
- the system generates a neural network input for the time step by combining the system input and the data read from the external memory (step 206 ). For example, the system can concatenate the system input and the read data vector to generate the neural network input. For the first system input, i.e., the system input at the first time step, the system can concatenate the system input with a pre-determined vector, e.g., a learned state of the controller neural network.
- a pre-determined vector e.g., a learned state of the controller neural network.
- the system processes the neural network input using a controller neural network, e.g., the controller neural network 102 of FIG. 1 , to generate a neural network output for the time step from the neural network input (step 208 ).
- a controller neural network e.g., the controller neural network 102 of FIG. 1
- the controller neural network can either be a feed-forward neural network, e.g., a convolutional neural network or another kind of deep feed-forward neural network, or a recurrent neural network, e.g., an LSTM neural network. If the controller neural network is a recurrent neural network, the recurrent neural network also uses the internal state of the recurrent neural network from the preceding neural network input in the sequence in processing the current neural network input to generate the neural network output. In some implementations, the controller neural network includes both recurrent and feed-forward layers.
- the system writes to the external memory using a write portion of the neural network output (step 210 ).
- the write portion of the neural network output is a predetermined portion of the neural network output that has been designated as the portion to be used in writing to the external memory.
- the system determines writing weights using the write portion of the neural network output and writes a write vector to the external memory in accordance with the writing weights.
- Determining writing weights and writing to the external memory is described in more detail below with reference to FIG. 4 .
- the system erases from the external memory (step 212 ).
- the system erases from the least recently used location in the external memory using an erase vector.
- the system reads from the external memory using a read portion of the neural network output to generate a read vector (step 214 ).
- the read portion of the neural network output is a predetermined portion of the neural network output that has been designated as the portion to be used in reading from the external memory.
- the system determines reading weights using the read portion of the neural network output and then reads from the locations in the external memory in accordance with the reading weights.
- the system can perform the erase, read, and write operations in any order. For example, in some implementations, the system erases, then writes, and then reads from the external memory. However, in other implementations, the system can perform these operations in a different order. In principle, one or more of the erase, read, or write operations may not be required at a particular time step.
- the system generates a system output for the time step (step 216 ).
- the system provides the data read from the external memory as the system output.
- the systems processes the data read from the external memory through one or more output neural network layers, e.g., one or more linear layers, to generate the system output.
- output neural network layers e.g., one or more linear layers
- the system combines, e.g., concatenates or sums, the neural network output and the read data and then processes the combination through one or more output neural network layers, e.g., one or more linear layers, to generate the system output.
- one or more output neural network layers e.g., one or more linear layers
- the neural network output includes an output portion that is different from the portions used to read, write, and erase from the external memory.
- the system can either provide the output portion as the system output or process the output portion through one or more output neural network layers, e.g., one or more linear layers, to generate the system output.
- the process 200 can be performed for each system input in a sequence of system inputs to generate a sequence of system outputs for the sequence of system inputs.
- the sequence of system inputs can be a sequence for which the desired output, i.e., the output sequence that should be generated by the system for the input sequence, is not known.
- the system can also perform the process 200 on inputs in a set of training data, i.e., a set of inputs for which the output that should be predicted by the system is known, in order to train the components of the system, i.e., to determine trained values for the parameters of the controller neural network and any additional parameters of processes used in erasing, writing, and reading from the external memory.
- the process 200 can be performed repeatedly on inputs selected from a set of training data as part of a conventional machine learning training technique to train the controller neural network, e.g., a backpropagation through time training technique if the controller neural network is a recurrent neural network or a stochastic gradient descent with backpropagation technique if the controller neural network is a feedforward neural network.
- a backpropagation through time training technique if the controller neural network is a recurrent neural network or a stochastic gradient descent with backpropagation technique if the controller neural network is a feedforward neural network.
- FIG. 3 is a flow diagram of an example process 300 for reading from an external memory.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a memory-augmented neural network system e.g., the memory-augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system receives a read portion of the neural network output (step 302 ).
- the read portion includes a read key.
- the system processes the read portion through one or more projection layers to generate the read key.
- the read key is a vector of values that has the same dimensionality as the vectors stored in the external memory.
- the system determines the K locations in the external memory that are most similar to the read key according to a similarity measure, e.g., cosine similarity or Euclidian distance (step 304 ).
- K is a predetermined integer that is small relative to the number of locations in the external memory.
- K can be equal to four or to eight, while the external memory can have anywhere from on the order of two hundred locations to on the order of fifty thousand locations.
- the system determines a respective similarity measure between the read key and each of the locations in the external memory and selects the K most similar locations based on the similarity measures.
- the system determines the K most similar locations using a k-nearest neighbors technique or, for additional time and computing resource savings, an approximate nearest neighbor technique.
- the system when querying the memory to determine the K most similar locations, can use an approximate neural network index (ANN) to search over the external memory for the K most similar locations. This may be done by indexing the datapoints in a hierarchical (or tree-based) structure to search for nearby points via comparison-based search, or via locality sensitive hash (LSH) functions that map points into buckets.
- ANN neural network index
- LSH locality sensitive hash
- the system assigns a zero reading weight to each location in the external memory other than the K locations (step 306 ). That is, the system sets the reading weight to each other location to zero.
- the system determines the reading weights for the K locations from the similarity measure between the locations and the read key (step 308 ).
- the reading weight for the i-th location in the external memory M(i, ⁇ ) may satisfy:
- the system only needs to calculate f(d(k,M(i, ⁇ , t)) for each of the K locations, i.e., and not for all of the locations in the external memory, reducing the computation time and the amount of computational resources necessary to determine the reading weights.
- the reading weights are sparse, i.e., only the K weights corresponding to the K most similar locations are non-zero.
- the system reads data from the external memory in accordance with the reading weights to generate a read data vector (step 310 ).
- the system generates a read data vector by combining the vector stored at each location in the external memory in accordance with the final reading weights. That is, the system computes a weighted sum of each vector stored in the external memory, with the weight for each vector being the final reading weight for the corresponding memory location, i.e., for the memory location where the vector is stored.
- the system can efficiently compute the weighted sum, i.e., because the system only needs to consider the K locations with non-zero weights when determining the weighted sum.
- FIG. 4 is a flow diagram of an example process 400 for writing data to the external memory and erasing data from the external memory.
- the process 400 will be described as being performed by a system of one or more computers located in one or more locations.
- a memory-augmented neural network system e.g., the memory-augmented neural network system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 400 .
- the system receives a write portion of the neural network output (step 402 ).
- the write portion of the neural network output includes a write vector, an interpolation gate parameter, and a write gate parameter.
- the system processes the write portion through one or more projection layers to generate the write vector, the interpolation gate parameter, and the write gate parameter.
- the system determines the least recently accessed location in the external memory (step 404 ).
- the system maintains a respective usage value for each of the locations in the external memory and selects the location having the smallest usage value as the least recently accessed location.
- the respective usage value for each of the locations is a time discounted sum of the weights for the location for previous time steps.
- the usage value U(i) of the i-th location at time step T satisfies:
- the usage value for each of the locations is a number of time steps since a non-negligible memory access of the location.
- the usage value for a given location at time step T is t max ⁇ T, where t max is the largest time step for which the sum of the reading weight for the location at the time step and the writing weight for the location at the time step exceeded a predetermined threshold value, e.g., 0.001, 0.005, or 0.010.
- the system determines a respective initial writing weight for each location other than the least recently accessed location from the reading weight for the location at the preceding time step and the interpolation gate parameter (step 406 ). Because the reading weights for the preceding time step are sparse as described above, the system can determine these initial writing weights by setting to zero the initial writing weight for each location other than the K locations with non-zero reading weights at the preceding time step and setting the initial writing weight for each of the K locations to the preceding reading weight for the location multiplied by the interpolation gate parameter.
- the system determines an initial writing weight for the least recently accessed location by performing an interpolation between the reading weight for the location at the preceding time step and a constant value in accordance with the interpolation parameter (step 408 ).
- the reading weight for the least recently accessed location will be zero, i.e., because otherwise the location would have a usage value that indicates that it was very recently accessed, and the system can set the initial writing weight for the least recently used location to one minus the interpolation parameter.
- the system determines the final writing weights for the locations by applying the write gate parameter to each of the initial writing weights (step 410 ).
- the final writing weights are also a sparse set of writing weights.
- the sparse set of writing weight will generally have only one more non-zero value than the reading weights.
- the system writes data defined by the write vector to the external memory in accordance with the final writing weights (step 412 ). That is, to write to a given location in the external memory, the system multiplies the write vector by the final writing weight for the location to determine an adjusted write vector for the location and then sums the vector currently stored at the location with the adjusted write vector for the location.
- the final writing weights are sparse, the system can efficiently compute the weighted sum, i.e., because the system only needs to consider the locations with non-zero weights when determining the weighted sum.
- the system erases data from the least recently used location in the external memory (step 414 ).
- the system subtracts a vector of all ones, i.e., a vector with each value being a one, from the vector currently stored at the least recently used location.
- the system element-wise multiplies the vector currently stored at the least recently used location by a vector of zeroes.
- the system can use the processes 300 and 400 to read and erase from and write to the external memory in a computationally-efficient and time-efficient manner.
- reading and erasing from and writing to the external memory using the processes 300 and 400 can also improve the efficiency of the backpropagation of gradients that is necessary to update the values of the parameters of the controller neural network.
- only a small number of non-zero gradients need to be passed back to the controller neural network. This can result in an improved training process without degrading the performance of the trained controller neural network.
- the system can maintain various degrees of persistence of the data stored in the external memory based on outputs received from the controller neural network. For example, in some implementations, the system re-sets the external memory after each sequence of system inputs has been fully processed by the system. As another example, in some implementations, the data stored in the external memory persists between input sequences. That is, the system does not delete any data from the external memory between sequences of system inputs. In these implementations, the system may re-set the external memory after a given task assigned to the system is completed and before the system begins a different machine learning task. Alternatively, the system may maintain the external memory without deleting values even between tasks. Thus, while processing a current input sequence, the system may be able to leverage data stored in the memory while processing a previous input sequence or even while performing a previous machine learning task.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory program carrier for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be or further include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program (which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code) can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- special purpose logic circuitry e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- Computers suitable for the execution of a computer program include, by way of example, can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a relationship graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
where d(k,M(j, ●, t)) is the similarity measure between the read key and the vector stored at the j-th location in the external memory, f is a differential monotonic transformation, e.g., a softmax, and L is the total number of locations in the external memory.
where λ is a constant value, wt W (i) is the writing weight for location i at time step t, and wt R (i) is the reading weight for location i at time step t.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/424,685 US11151443B2 (en) | 2016-02-05 | 2017-02-03 | Augmenting neural networks with sparsely-accessed external memory |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662292169P | 2016-02-05 | 2016-02-05 | |
US15/424,685 US11151443B2 (en) | 2016-02-05 | 2017-02-03 | Augmenting neural networks with sparsely-accessed external memory |
Publications (2)
Publication Number | Publication Date |
---|---|
US20170228638A1 US20170228638A1 (en) | 2017-08-10 |
US11151443B2 true US11151443B2 (en) | 2021-10-19 |
Family
ID=58267159
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/424,685 Active 2040-03-13 US11151443B2 (en) | 2016-02-05 | 2017-02-03 | Augmenting neural networks with sparsely-accessed external memory |
Country Status (4)
Country | Link |
---|---|
US (1) | US11151443B2 (en) |
EP (1) | EP3295381B1 (en) |
CN (1) | CN109313720B (en) |
WO (1) | WO2017136665A1 (en) |
Families Citing this family (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10817784B2 (en) | 2015-08-25 | 2020-10-27 | Ryskamp Innovations, LLC | Systems and methods for machine learning using a network of decision-making nodes |
US11551028B2 (en) * | 2017-04-04 | 2023-01-10 | Hailo Technologies Ltd. | Structured weight based sparsity in an artificial neural network |
US10387298B2 (en) | 2017-04-04 | 2019-08-20 | Hailo Technologies Ltd | Artificial neural network incorporating emphasis and focus techniques |
US11544545B2 (en) | 2017-04-04 | 2023-01-03 | Hailo Technologies Ltd. | Structured activation based sparsity in an artificial neural network |
US11615297B2 (en) | 2017-04-04 | 2023-03-28 | Hailo Technologies Ltd. | Structured weight based sparsity in an artificial neural network compiler |
US11651223B2 (en) * | 2017-10-27 | 2023-05-16 | Baidu Usa Llc | Systems and methods for block-sparse recurrent neural networks |
KR20190123540A (en) | 2018-04-24 | 2019-11-01 | 한국전자통신연구원 | System and method of neural network memory computing |
US11403521B2 (en) | 2018-06-22 | 2022-08-02 | Insilico Medicine Ip Limited | Mutual information adversarial autoencoder |
US11068773B2 (en) | 2019-07-11 | 2021-07-20 | Capital One Services, Llc | Memory management in memory augmented deep neural networks |
US11461645B2 (en) * | 2019-12-02 | 2022-10-04 | International Business Machines Corporation | Initialization of memory networks |
US11874900B2 (en) | 2020-09-29 | 2024-01-16 | Hailo Technologies Ltd. | Cluster interlayer safety mechanism in an artificial neural network processor |
US11811421B2 (en) | 2020-09-29 | 2023-11-07 | Hailo Technologies Ltd. | Weights safety mechanism in an artificial neural network processor |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6377941B1 (en) | 1998-11-26 | 2002-04-23 | International Business Machines Corporation | Implementing automatic learning according to the K nearest neighbor mode in artificial neural networks |
US20170103305A1 (en) * | 2015-10-08 | 2017-04-13 | Via Alliance Semiconductor Co., Ltd. | Neural network unit that performs concurrent lstm cell calculations |
Family Cites Families (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP3230898B2 (en) * | 1993-06-02 | 2001-11-19 | シャープ株式会社 | Data driven information processing system |
US6882992B1 (en) * | 1999-09-02 | 2005-04-19 | Paul J. Werbos | Neural networks for intelligent control |
KR20030057562A (en) * | 2000-11-30 | 2003-07-04 | 양 밍 폭 | Neural Cortex |
US7457901B2 (en) * | 2005-07-05 | 2008-11-25 | Via Technologies, Inc. | Microprocessor apparatus and method for enabling variable width data transfers |
US9129222B2 (en) * | 2011-06-22 | 2015-09-08 | Qualcomm Incorporated | Method and apparatus for a local competitive learning rule that leads to sparse connectivity |
US20150206050A1 (en) * | 2014-01-23 | 2015-07-23 | Qualcomm Incorporated | Configuring neural network for low spiking rate |
-
2017
- 2017-02-03 WO PCT/US2017/016415 patent/WO2017136665A1/en active Application Filing
- 2017-02-03 EP EP17710628.3A patent/EP3295381B1/en active Active
- 2017-02-03 CN CN201780015350.7A patent/CN109313720B/en active Active
- 2017-02-03 US US15/424,685 patent/US11151443B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6377941B1 (en) | 1998-11-26 | 2002-04-23 | International Business Machines Corporation | Implementing automatic learning according to the K nearest neighbor mode in artificial neural networks |
US20170103305A1 (en) * | 2015-10-08 | 2017-04-13 | Via Alliance Semiconductor Co., Ltd. | Neural network unit that performs concurrent lstm cell calculations |
Non-Patent Citations (12)
Title |
---|
EP Communication pursuant to Article 94(3) EPC in European Appln. No. 17710628.3, dated Feb. 25, 2020, 5 pages. |
Graves et al. "Neural Turing Machines," arXiv preprint arXiv1410.5401v1, Oct. 20, 2014, 26 pages. |
Graves, Alex, Greg Wayne, and Ivo Danihelka. "Neural turing machines." arXiv preprint arXiv:1410.5401 (2014). (Year: 2014). * |
Indyk and Motwani, "Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality," STOC '98 Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 604-613, ACM Press, 1998. |
International Search Report and Written Opinion in International Application No. PCT/US2017/016415, dated Jun. 1, 2017, 16 pages. |
Khalid. "The unconventional replacement algorithms," ACM SIGARCH computer architecture, 2 Penn Plaza Suite 701, New York, NY, Nol. 23, No. 5, Dec. 15, 1995, 7 pages. |
Liu et al. "Sparse Convolutional Neural Networks," 2015 IEEE Conference on Computer Vision and Pattern Recognition, Jun. 7, 2015, 9 pages. |
Muja et al. "Scalable nearest neighbor algorithms for high dimensional data," IEEE Transactions on Pattern Analysis and Machine Intelligence, 36.11, Nov. 1, 2014, 14 pages. |
O'Neil et al. "The LRU-K page replacement algorithm for database disk buggering," Management of Data, ACM 2 Penn Plaza Suite 701, New York, NY, Jun. 1, 1993, 10 pages. |
Rae et al. "Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes," arXiV preprint arXiv 1610.09027, Oct. 27, 2016, 17 pages. |
Robinson, John T., and Murthy V. Devarakonda. "Data cache management using frequency-based replacement." Proceedings of the 1990 ACM SIGMETRICS conference on Measurement and modeling of computer systems. 1990. (Year: 1990). * |
Weston, Jason, Sumit Chopra, and Antoine Bordes. "Memory networks." arXiv preprint arXiv:1410.3916 (2014). (Year: 2014). * |
Also Published As
Publication number | Publication date |
---|---|
WO2017136665A1 (en) | 2017-08-10 |
CN109313720B (en) | 2023-07-18 |
EP3295381A1 (en) | 2018-03-21 |
CN109313720A (en) | 2019-02-05 |
EP3295381B1 (en) | 2022-08-24 |
US20170228638A1 (en) | 2017-08-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11151443B2 (en) | Augmenting neural networks with sparsely-accessed external memory | |
US20210117801A1 (en) | Augmenting neural networks with external memory | |
US11809824B1 (en) | Computing numeric representations of words in a high-dimensional space | |
US11714993B2 (en) | Classifying input examples using a comparison set | |
US11210579B2 (en) | Augmenting neural networks with external memory | |
US20230259784A1 (en) | Regularized neural network architecture search | |
US11113479B2 (en) | Utilizing a gated self-attention memory network model for predicting a candidate answer match to a query | |
US10885426B2 (en) | Augmenting neural networks with external memory | |
US10860928B2 (en) | Generating output data items using template data items | |
US20230289598A1 (en) | Augmented recurrent neural network with external memory | |
US11010664B2 (en) | Augmenting neural networks with hierarchical external memory | |
US20230049747A1 (en) | Training machine learning models using teacher annealing | |
US11080594B2 (en) | Augmenting neural networks with external memory using reinforcement learning | |
US20190147365A1 (en) | Deep vector table machine systems | |
US20240005131A1 (en) | Attention neural networks with tree attention mechanisms | |
US20230206030A1 (en) | Hyperparameter neural network ensembles |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DANIHELKA, IVO;WAYNE, GREGORY DUNCAN;WANG, FU-MIN;AND OTHERS;SIGNING DATES FROM 20160328 TO 20160331;REEL/FRAME:041182/0813 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
AS | Assignment |
Owner name: DEEPMIND TECHNOLOGIES LIMITED, UNITED KINGDOMFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044242/0116Effective date: 20170921 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NOTICE OF ALLOWANCE MAILED -- APPLICATION RECEIVED IN OFFICE OF PUBLICATIONS |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: PUBLICATIONS -- ISSUE FEE PAYMENT VERIFIED |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: DEEPMIND TECHNOLOGIES LIMITED, UNITED KINGDOMFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE DECLARATION PREVIOUSLY RECORDED AT REEL: 044129 FRAME: 0001. ASSIGNOR(S) HEREBY CONFIRMS THE DECLARATION;ASSIGNOR:DEEPMIND TECHNOLOGIES LIMITED;REEL/FRAME:058721/0308Effective date: 20220111 |