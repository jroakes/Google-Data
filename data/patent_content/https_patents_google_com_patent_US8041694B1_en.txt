US8041694B1 - Similarity-based searching - Google Patents
Similarity-based searching Download PDFInfo
- Publication number
- US8041694B1 US8041694B1 US12/059,302 US5930208A US8041694B1 US 8041694 B1 US8041694 B1 US 8041694B1 US 5930208 A US5930208 A US 5930208A US 8041694 B1 US8041694 B1 US 8041694B1
- Authority
- US
- United States
- Prior art keywords
- vector
- vectors
- similarity
- candidate
- comparison
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/3331—Query processing
- G06F16/334—Query execution
- G06F16/3347—Query execution using vector based model
Definitions
- This disclosure relates to information management.
- Finding similar documents can be useful in document management, such as for removing duplicate documents in a database.
- the objects to be analyzed can be represented as vectors. Finding similar pairs of objects can involve computing similarity scores between pairs of vectors, and keeping track of which vectors (or which parts of the vectors) have already been compared.
- the similarity scores can be compared with a threshold, and pairs of vectors whose similarity scores above the threshold are provided as the search result.
- one way to identify similar pairs of vectors is to compute sim(x, y) for all pairs of vectors x and y in the dataset V and identify the pairs of vectors x and y for which sim(x, y) ⁇ t.
- pairs of similar vectors in a set of vectors are identified.
- a comparison vector x is identified, and a set of candidate vectors corresponding to the vector x is identified.
- For each candidate vector y in the set a similarity estimate between the comparison vector x and the candidate vector y is determined; if the similarity estimate meets a similarity threshold, a similarity score of the comparison vector x and the candidate vector y is determined; and if the similarity score meets the similarity threshold, the pair of vectors (x, y) is included in a list of similar pairs of vectors.
- the similarity estimate can be determined based on a predetermined function such that the similarity estimate is greater than or equal to the similarity score between the comparison vector x and the candidate vector y.
- the similarity estimate can be based on a sum of (i) a similarity between a set of processed features of the comparison vector x and a set of processed features of the candidate vector y, and (ii) a product of a minimum size of at least one of the candidate vector x or a set of non-processed features of the candidate vector y, and a similarity score between a maximum weight of the comparison vector x and a maximum weight of the candidate vector y.
- the vector v For each vector v different from x in a set of vectors, the vector v can be identified as a comparison vector, and a set of candidate vectors corresponding to v can be identified. For each candidate vector w in the set, a similarity estimate between the comparison vector v and the candidate vector w can be determined. If the similarity estimate meets the similarity threshold, a similarity score of the comparison vector v and the candidate vector w can be determined. If the similarity score meets the similarity threshold, the pair of vectors (v, w) can be included in the list of similar pairs of vectors.
- pairs of similar vectors in a set of vectors are identified.
- a pair of similar vectors (x, y) in a set of vectors are identified based on a similarity threshold and an accumulation of partial similarity scores each representing a similarity between features of the vector x and other vectors in the set.
- An upper bound of a sum of partial similarity scores of non-processed features of the vector x and non-processed features of the other vectors is determined, the non-processed features being features that have not been used to calculate the partial similarity scores.
- the number of partial similarity scores that need to be computed is reduced by not calculating partial similarity scores for some vectors when the upper bound meets a predetermined criterion.
- Implementations may include one or more of the following features.
- the upper bound can meet the predetermined criterion when the upper bound is less than the similarity threshold.
- the upper bound can be updated over time by, after processing each feature x i of the vector x, reducing the upper bound based on a similarity between the feature x i and a maximum corresponding feature among the other vectors. Identifying the pair of similar vectors (x, y) can include iteratively processing features of the comparison vector x, adding some of the vectors having features that have been processed to a set of candidate vectors, and stop adding new vectors to the set of candidate vectors when the upper bound meets the predetermined criterion.
- partial similarity scores between features of the vector x and corresponding features of vectors already in the set of candidate vectors can continue to be accumulated.
- a similarity estimate between the comparison vector x and a candidate vector y can be determined; if the similarity estimate meets a similarity threshold, a similarity score of the comparison vector x and the candidate vector y can be determined; and if the similarity score meets the similarity threshold, the pair of vectors (x, y) can be identified as a pair of similar vectors.
- a vector y in the set of candidate vectors can be identified such that a similarity between the vector y and the comparison vector x meets the similarity threshold.
- pairs of similar vectors in a set of vectors are identified.
- a similarity threshold is identified; one or more features of vectors are processed according to a predetermined process; a comparison vector x having processed features and non-processed features is identified, in which the processed features have been processed by the predetermined process and the non-processed features have not been processed by the predetermined process.
- Based on the comparison vector x a first set of vectors is identified, each vector having corresponding processed features and corresponding non-processed features.
- a candidate vector y is identified from the first set of vectors; a maximum similarity between the non-processed features of x and the non-processed features of y is determined; and the vector y is removed from the first set of vectors if the maximum similarity does not meet the similarity threshold.
- Implementations may include one or more of the following features. Processing one or more features of vectors according to the predetermined process can include determining a similarity of two features. Processing one or more features of vectors according to the predetermined process can include incrementing an accumulated similarity score according to the similarity of the features. A subset of vectors can be removed from the first set based on the maximum similarity between the non-processed features of x and the non-processed features of each vector in the first set. A similarity between the comparison vector x and the candidate vector y can be determined, and the pair of vectors (x, y) can be included in a set of similar pairs of vectors if the similarity between the vectors x and y meets the similarity threshold.
- the vector v For each vector v different from x in a second set of vectors, in which each vector v has processed features and non-processed features, the vector v can be identified as a comparison vector; based on the comparison vector v, a set of vectors corresponding to v can be identified, each vector having corresponding processed features and corresponding non-processed features; a candidate vector y v can be identified from the set of vectors corresponding to v; and based on a maximum similarity between the non-processed features of v and the non-processed features of y v , the vector y v is removed from the set of vectors corresponding to v.
- the maximum similarity between the non-processed features of x and the non-processed features of y can be determined based on a similarity between the non-processed features of x and a bounding vector having an ith coordinate equal to a largest feature in an ith coordinate among all vectors in a second set of vectors.
- each vector can represent a corresponding document, and each feature of each vector can represent a frequency with which a word appears in the document.
- the vector x can be displayed.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent a preference of the corresponding user towards an object in a set of objects.
- An object can be recommended to a user corresponding to the vector x based on the vector y.
- the set of objects can include a set of musical works or a set of dramatic works.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent the corresponding user's click-behavior with regard to a content item.
- a pair of vectors (x, y) can be identified as representing a group of colluding users.
- the content item can include at least one of an advertisement or a web page.
- Each vector can represent a corresponding query, and each feature of each vector can represent a relevance of a corresponding document to the query.
- a query corresponding to the vector y can be suggested to a user.
- a dataset tool identifies a comparison vector x, and a set of candidate vectors corresponding to the vector x.
- a similarity tool determines a similarity estimate between the comparison vector x and each candidate vector y in the set, and identifies a similarity score between the comparison vector x and each candidate vector y if the similarity estimate meets a similarity threshold.
- a results tool includes the pair of vectors (x, y) for each candidate vector y in a list of similar pairs of vectors if the similarity score meets the similarity threshold.
- the similarity tool can determine the similarity estimate of the comparison vector x and the candidate vector y based on a predetermined function such that the similarity estimate is greater than or equal to a similarity score of the comparison vector x and the candidate vector y.
- the similarity tool can determine the similarity estimate based on a sum of (i) a similarity between a set of processed features of the comparison vector x and a set of processed features of the candidate vector y, and (ii) a product of a minimum size of at least one of the candidate vector x or a set of non-processed features of the candidate vector y, and a similarity score of a maximum weight of the comparison vector x and a maximum weight of the candidate vector y.
- the dataset tool can identify each vector v different from x in a set of vectors as a comparison vector, and identify a set of candidate vectors corresponding to each vector v.
- the similarity tool can determine, for each candidate vector w, a similarity estimate between the comparison vector v and the candidate vector w.
- the similarity tool can determine a similarity score of the comparison vector v and the candidate vector w if the similarity estimate meets the similarity threshold.
- the results tool can include the pair of vectors (v, w) in the list of similar pairs of vectors if the similarity score meets the similarity threshold.
- a dataset tool identifies a comparison vector x having processed features and non-processed features, based on the comparison vector x, a first set of vectors, each vector having corresponding processed features and corresponding non-processed features, and a candidate vector y from the first set of vectors.
- a similarity tool determines a similarity threshold, and a maximum similarity between the non-processed features of x and the non-processed features of y. The dataset tool removes the vector y from the first set of vectors if the maximum similarity does not meet the similarity threshold.
- Implementations may include one or more of the following features.
- the dataset tool can remove a subset of vectors from the first set of vectors based on the maximum similarity between the non-processed features of the vector x and the non-processed features of each vector in the first set.
- the similarity tool can determine a similarity between the comparison vector x and the candidate vector y.
- a results tool can include the vectors (x, y) in a set of similar pairs of vectors if the similarity between the vectors x and y meets the similarity threshold.
- Each vector v different from x can have processed features and non-processed features, in which the dataset tool can identify each vector v different from x as a comparison vector.
- the dataset tool can identify a set of vectors corresponding to v based on the comparison vector v, each vector in the set of vectors corresponding to v having corresponding processed features and corresponding non-processed features.
- the dataset tool can identify a candidate vector y v from the set of vectors corresponding to v.
- the dataset tool can remove the vector y v from the set of vectors corresponding to v if a maximum similarity between the non-processed features of v and the non-processed features of y v does not meet the similarity threshold.
- the maximum similarity between the non-processed features of x and the non-processed features of y can be determined based on a similarity between the non-processed features of x and a bounding vector having an ith coordinate equal to a largest feature in an ith coordinate among all vectors in a second set of vectors.
- each vector can represent a corresponding document, and each feature of each vector can represent a frequency with which a word appears in the document.
- each vector can represent a corresponding user in a community, and each feature of each vector can represents a preference of the corresponding user towards an object in a set of objects.
- a results tool recommends an object to a user corresponding to the vector x based on the vector y.
- the set of objects can include a set of musical works or a set of dramatic works.
- each vector can represent a corresponding user in a community, and each feature of each vector can represents the corresponding user's click-behavior with regard to a content item.
- the content item can include an advertisement or a web page.
- each vector can represents a corresponding query, and each feature of each vector can represents a relevance of a corresponding document to the query.
- a results tool can suggest a query corresponding to the vector y to a user.
- a comparison vector x that has non-zero features in a set of vectors is identified; an estimated similarity contribution of a subset of features of the comparison vector x to a similarity between the comparison vector x and each vector in the set of vectors is identified; an index that includes features based on a comparison of the similarity contribution with a similarity threshold is generated; and another vector in the set of vectors that is similar to the vector x using the index is identified.
- Implementations may include one or more of the following features.
- the set of vectors can include dimensions that are ordered such that a number of features occurring in a dimension i varies as a monotonic function of i.
- the estimated similarity contribution can be based on a similarity between the subset of features and a bounding vector whose ith coordinate equals a largest feature in a dimension i of the set of vectors.
- the subset of features can be removed from the comparison vector x if the subset of features are included in the index.
- the vector v For each vector v different from the vector x in the set of vectors, the vector v can be identified as a comparison vector, an estimated similarity contribution of a subset of features of the comparison vector v to a similarity between the comparison vector v and each vector in the set of vectors can be determined, and an index that includes features based on a comparison of the similarity contribution with a similarity threshold can be generated.
- each vector can represent a corresponding document, in which each feature of each vector can represent a frequency with which a word appears in the document.
- the vector x can be displayed, and the set of vectors that has been identified as similar to x can be removed.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent a preference of the corresponding user towards an object in a set of objects. After identifying another vector in the set of vectors that is similar to x, an object can be recommended to the user corresponding to the vector x based on the identified similar vector.
- the set of objects can include a set of musical works or a set of dramatic works.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent the corresponding user's click-behavior with regard to a content item.
- vectors that are similar to the vector x can be identified as representing a group of colluding users.
- the content item can include an advertisement or a web page.
- Each vector can represent a corresponding query, and each feature of each vector can represent a relevance of a corresponding document to the query. After identifying another vector in the set of vectors that is similar to the vector x, a query corresponding to the identified similar vector can be suggested to a user.
- a dataset tool identifies a comparison vector x in a set of vectors, the comparison vector x having non-zero features; a similarity tool determines an estimated similarity contribution of a subset of features of the comparison vector x to a similarity between the comparison vector x and each vector in the set of vectors; an index tool generates an index that includes features based on a comparison of the similarity contribution with a similarity threshold; and a results tool identifies another vector in the set of vectors that is similar to the vector x using the index.
- Implementations may include one or more of the following features.
- the set of vectors can include dimensions that are ordered such that a number of features occurring in a dimension i varies as a monotonic function of i.
- the estimated similarity contribution can be determined based on a similarity between the subset of features and a bounding vector whose ith coordinate equals a largest feature in a dimension i of the set of vectors.
- the dataset tool identifies, for each vector v different from the vector x in the set of vectors, v as a comparison vector, and the similarity tool determines, for each vector v different from the vector x in the set of vectors, an estimated similarity contribution of a subset of features of the comparison vector v to a similarity between the comparison vector v and each vector in the set of vectors.
- the index tool can use the index to identify a set of vectors similar to v.
- each vector can represent a corresponding document, and each feature of each vector can represent a frequency with which a word appears in the document.
- the results tool can output the vector x, and the dataset tool can remove from the set of vectors the vectors that have been identified as similar to the vector x.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent a preference of the corresponding user towards an object in a set of objects.
- the similarity tool can identify another vector in the set of vectors that is similar to the vector x, and the results tool can recommend an object to the user corresponding to the vector x based on the identified similar vector.
- the set of objects can include a set of musical works or a set of dramatic works.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent the corresponding user's click-behavior with regard to a content item.
- the similarity tool can identify another vector in the set of vectors that is similar to the vector x, and the results tool can identify vectors that are similar to the vector x as representing a group of colluding users.
- the content item can include an advertisement or a web page.
- each vector can represent a corresponding query, and each feature of each vector represents a relevance of a corresponding document to the query.
- the similarity tool can identify another vector in the set of vectors that is similar to the vector x, and the results tool can suggest a query corresponding to the identified similar vector to a user.
- a system in another aspect, includes means for identifying a comparison vector x in a set of vectors, the comparison vector x having non-zero features; means for determining an estimated similarity contribution of a subset of features of the comparison vector x to a similarity between the comparison vector x and each vector in the set of vectors; means for generating an index that includes features based on a comparison of the similarity contribution with a similarity threshold; and means for identifying another vector in the set of vectors that is similar to the vector x using the index.
- pairs of similar vectors in a set of vectors are identified.
- a comparison vector x in a set of vectors is identified;
- a size threshold is determined such that if a similarity between the vector x and a vector y in the set of vectors is equal to or greater than a similarity threshold, then the vector y has a size at least equal to the size threshold, the size of the candidate vector y being determined based on a number of non-zero features in the vector y; and a vector having a size less than the size threshold is removed from the set of candidate vectors.
- Implementations may include one or more of the following features.
- the set of vectors can be ordered according to a maximum weight of each vector, and the set of vectors can be represented as an index.
- Removing a candidate vector can include removing a vector appearing in an initial position in the index prior to removal.
- the maximum weight of a vector can be determined based on a largest feature of the vector.
- the size threshold can be based on a function of the similarity threshold and a maximum weight of the comparison vector x, e.g., the similarity threshold divided by the maximum weight of the comparison vector x.
- the size threshold can be based on a function of the similarity threshold and a size of the comparison vector x, e.g., the size of the comparison vector x multiplied by the square of the similarity threshold.
- a candidate vector y in the set is identified; and an estimated similarity between the comparison vector x and the candidate vector y is determined.
- a similarity between the comparison vector x and the candidate vector y is determined if the estimated similarity meets the similarity threshold; and the pair of vectors (x, y) are identified as a similar pair if the similarity between the comparison vector x and the candidate vector y meets the similarity threshold.
- the vector v For each vector v different from the vector x in the set, the vector v is identified as a comparison vector, and a corresponding set of candidate vectors are identified based on the vector v; and for each vector v different from the vector x in the set whose corresponding set of candidate vectors is not empty, a subset of candidate vectors that are similar to v are identified based on a similarity between vectors in the subset and v.
- the pair of similar vectors (x, y) can be outputted.
- Each vector can represent a corresponding document, and each feature of each vector can represent a frequency with which a word appears in the document.
- Each vector can represent a corresponding user in a community, and each feature of each vector can represent a preference of the corresponding user towards an object in a set of objects.
- An object can be recommended to a user corresponding to the vector x based on the vector y.
- the set of objects can include a set of musical works or a set of dramatic works.
- Each vector can represent a corresponding user in a community, and each feature of each vector can represent the corresponding user's click-behavior with regard to a content item.
- a pair of vectors (x, y) can be identified as representing a group of colluding users that correspond to the vectors x and y.
- the content item can include an advertisement or a web page.
- Each vector can represent a corresponding query, and each feature of each vector can represent a relevance of a corresponding document to the query.
- a query corresponding to the vector y can be suggested to a user.
- a dataset tool identifies a set of candidate vectors in a set of vectors, each candidate vector having features, and identifies a comparison vector x in the set of vectors; and a similarity tool determines a size threshold such that if a similarity between one of the candidate vectors y and the comparison vector x is equal to or greater than a similarity threshold, then the vector y has a size at least equal to the size threshold.
- the dataset tool removes a vector having a size less than the size threshold from the set of vectors.
- the similarity tool can determine the size threshold based on a function of the similarity threshold and a maximum weight of the comparison vector x, e.g., the similarity threshold divided by the maximum weight of the comparison vector x. In some examples, the similarity tool can determine the size threshold based on a function of the similarity threshold and a size of the comparison vector x, e.g., the size of the comparison vector x multiplied by the square of the similarity threshold.
- the results tool can identify a candidate vector y in the set after removing the vector having a size less than the size threshold, and the similarity tool can identify an estimated similarity between the comparison vector x and the candidate vector y.
- the similarity tool can determine a similarity between the comparison vector x and the candidate vector y if the estimated similarity meets the similarity threshold.
- a results tool can identify vectors (x, y) as a similar pair if the similarity between the comparison vector x and the candidate vector y meets the similarity threshold.
- each vector can represent a corresponding document, and each feature of each vector can represent a frequency with which a word appears in the document.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent a preference of the corresponding user towards an object in a set of objects.
- each vector can represent a corresponding user in a community, and each feature of each vector can represent the corresponding user's click-behavior with regard to a content item.
- each vector can represent a corresponding query, and each feature of each vector can represent a relevance of a corresponding document to the query.
- Advantages of particular implementations may include one or more of the following. All similar pairs (x, y) are identified in searching. In order to facilitate the comparison, an index is created that is relatively small, but enough features of each vector are indexed so that vectors that are similar to a given vector x are identified as candidate vectors for x by using the index. In deciding whether to index a particular feature, or in deciding whether two vectors are similar, using similarity estimates (instead of exact similarity scores) can provide enough information to decide whether to index, or whether two vectors are similar. Using similarity estimates instead of exact similarity scores increases the performance of indexing and finding matches.
- FIG. 1A is an example set of vectors.
- FIGS. 1B and 1C are schematic illustrations of example inverted indices.
- FIG. 2 is a schematic representation of a search system.
- FIG. 3 is a schematic depiction of an example search engine.
- FIG. 4 is a flowchart for an example process for searching and indexing a dataset.
- FIG. 5 is a flowchart for an example search and index processes.
- FIG. 6 is an example illustration of ordering dimensions.
- FIG. 7 is an example illustration of ordering vectors.
- FIG. 8 is a flowchart for an example similarity accumulation algorithm.
- FIG. 9 is an example algorithm for finding pairs of vectors similar to a given vector.
- FIG. 10 is a block diagram of a computing device that may be used to implement the search system, as either a client or as a server or plurality of servers.
- finding all pairs of similar objects in a population of objects includes using an inverted index to keep track of the objects (or portions of objects) that have been examined.
- the inverted index is built by including only items that satisfy certain criteria, thus increasing the speed of computation and reducing the amount of data that needs to be stored.
- the computation can be made more efficient by using estimates on similarity to determine whether pairs of objects are sufficiently similar without computing an exact similarity score between the objects.
- V The symbol V denotes a dataset that can, by way of example, be represented as a set of n vectors, each vector having m dimensions.
- Each vector can represent an object, so finding pairs of similar objects involves finding pairs of similar vectors.
- a superscript is used to differentiate vectors in the list, but does not necessarily indicate a vector's position in the list.
- Size The size of a vector x, denoted
- , is defined as the number of features of x. For example, the vector x (10, 2, 0, 0, 0, 0, 0, 10) has a size
- 3.
- denotes the absolute value of a.
- a norm is the Euclidean norm, defined by
- the size of a vector is not a norm. For example, if x is a vector and a is a scalar, then
- x. Thus, the size of a vector does not satisfy property (2) above.
- Similarity function sim( ⁇ , ⁇ )
- the similarity function provides a measure of similarity between pairs of vectors, such that in one implementation if sim(x,y) is greater than sim(a,b), then the vectors x and y are “closer” or “more similar” to each other than the vectors a and b are to each other.
- the similarity function can have values that are, e.g., real numbers.
- Similarity Given a dataset V, a similarity function sim( ⁇ , ⁇ ) is useful in identifying all pairs of vectors in the dataset V having a degree of similarity equal to or greater than a specified similarity threshold.
- the similarity function can be used to find all pairs x and y such that sim(x,y) ⁇ t, for a specified threshold t.
- referring to vectors x and y as “similar” means that the vectors x and y have a degree of similarity above a specified similarity threshold for a given similarity function.
- similarity does not necessarily imply a transitive relation among vectors. For example, if a vector x is similar to a vector y and y is similar to a vector z, then x can be, but need not be, similar to z.
- similarity also does not necessarily imply a reflexive relation among vectors: a vector x need not be similar to itself. For example, using the dot product as a similarity function, a vector having only one feature x 1 is not self-similar for a similarity threshold t greater than (x 1 ) 2 .
- An inverted index I is a collection of lists I 1 , . . . , I m , where each list I i is a set of vector-feature pairs (x, x i ) such that x is a vector in V and x i is a feature of x.
- the list I i is a collection of features, together with their associated vectors, that occur in the i-th dimension of the vectors in V.
- the term I i represents the i-th dimension of the inverted index I, and is sometimes referred to as the inverted index I i .
- the inverted index has three dimensions.
- Each feature of V is contained within a dashed line I 1 , I 2 , or I 3 .
- a feature enclosed by a dashed line I 1 is contained in the inverted index I 1
- a feature enclosed by a dashed line I 2 is contained in the inverted index I 2
- a feature enclosed by a dashed line I 3 is contained in the inverted index I 3 .
- An inverted index of a dataset V can, e.g., include a portion (less than all) of the features of V.
- an inverted index I may be built from a dataset V in a feature-by-feature or vector-by-vector manner.
- the inverted index I may be built by iterating feature-by-feature or vector-by-vector through one or more logical loops.
- the term “inverted index” describes I at each iteration even though in some implementations some vector-feature pairs (x, x i ) do not appear in the inverted index I after a particular iteration. Adding a feature to the inverted index is referred to as “indexing” the feature.
- a dataset V represents a collection of strings of text, e.g., documents such as HTML pages or plain text files. Other forms of data are possible.
- each vector represents a string of text, e.g., a document.
- each dimension in the dataset V corresponds to a word, and coordinates of a vector correspond to the frequency of the corresponding word in a string of text.
- the first dimension may correspond to the word “apple,” and the second dimension may correspond to the word “ball.”
- a vector having (2, 4) as the first and second coordinates indicates that the document has two occurrences of “apple” and four occurrences of “ball.”
- Similar pairs or clusters of similar documents may contain similar information. Accordingly, and by way of example, after identifying all pairs or clusters of similar documents, one document in each pair or cluster can be displayed or used, while other similar document(s) in the pair or cluster is/are suppressed or deleted.
- a dataset V can include vectors in which each vector is associated with a particular query, different vectors corresponding to different queries.
- each dimension of the dataset V corresponds to a document, and each coordinate of a vector represents the relevance of a corresponding document to a particular query.
- the dataset V may represent a collection of queries, and identifying similar pairs of vectors can be used to identify similar pairs of queries.
- upon receiving a query Q from a user other queries similar to the query Q are identified and suggested to the user as alternative queries.
- the dataset V may include vectors each describing a person's preferences for certain items (e.g., musical works, dramatic works, movies, artists, web pages, etc.)
- each dimension of the dataset V may correspond to one of the items, and each coordinate of a vector may represent the user's preference for the corresponding item.
- similar vectors correspond to users having similar preferences for the items, and identifying pairs (or clusters) of similar vectors may be used in identifying pairs (or clusters) of users with similar preferences.
- Similar vectors correspond to users having similar preferences for the items, and identifying pairs (or clusters) of similar vectors may be used in identifying pairs (or clusters) of users with similar preferences.
- identifying pairs of similar users can be used to recommend a particular song to a user, based on another, similar user's preference towards the song.
- identifying pairs of similar users can be used to introduce a friend of a first user to a second user, based on a similarity (e.g., overlap) between the friends of the first and second users.
- the set V may include vectors each describing a user's click-behavior with regard to certain advertisements or web pages.
- each dimension of the dataset V may correspondence to a particular advertisement (or web page), different dimensions corresponding to different advertisements (or web pages).
- each coordinate of a vector may represent how often a user has clicked on the corresponding advertisement (or web page).
- identifying pairs (or clusters) of similar vectors may be used to identify pairs (or clusters) of users with similar click-behavior. Identifying a cluster of users that behave similarly may be useful in, e.g., identifying users that collude to commit fraudulent activities.
- the following describes systems and processes for identifying all pairs of vectors in V with similarity scores above a specified threshold.
- FIG. 2 is a schematic representation of an example of a search system 10 .
- the system 10 is in data communication with one or more (e.g., several) users 12 through, for example, a wired or wireless network 11 .
- the user 12 can be, e.g., a human user or a non-human user, such as a computer program.
- the search system 10 includes a search engine 14 , one or more (e.g., several) datasets 16 , one or more (e.g., several) indices 18 , one or more (e.g., several) sets of search parameters 20 , and one or more (e.g. several) results sets 22 , each result set 22 listing all the similar pairs from a particular dataset 16 .
- Each dataset 16 may correspond to one or more (e.g., several) indices 18 .
- the search system 10 can associate one or more (e.g., several) datasets 16 or one or more (e.g., several) sets of search parameters 20 with one or more (e.g., several) users 12 .
- Each user 12 can establish a user profile with the search system 10 to define the user's preferences with regard to the parameters 20 .
- the search parameters 20 include a similarity threshold 24 and a similarity function 26 .
- the similarity threshold 24 or the similarity function 26 can be provided by the user 12 , or provided by another source (e.g., a preset similarity threshold 24 or a preset similarity function 26 provided with the search system 10 ).
- the similarity threshold 24 includes a condition under which two vectors in a dataset 16 are considered similar.
- the condition includes a numerical value, in which similar pairs of vectors are defined as pairs whose similarity score is greater than or equal to the numerical threshold.
- the similarity function 26 includes a formula that can associate a similarity score with a pair of vectors.
- FIG. 3 is a schematic depiction of an example search engine 14 .
- the example search engine 14 includes a dataset tool 28 , a similarity tool 30 , an index tool 32 , and a results tool 34 .
- Each of the tools 28 , 30 , 32 , and 34 can be implemented in, for example, hardware, software, or a combination thereof.
- the dataset tool 28 is operable to read from or write to the dataset 16 .
- the dataset tool 28 can sort the dataset 16 according to one or more sort criteria, identify particular features in the dataset 16 (e.g., a largest feature in a particular dimension or the largest feature in a particular vector), or remove features from a vector. For example, if a feature of a vector is written in the inverted index 18 , then the dataset tool 28 can remove a corresponding feature of a corresponding vector in the dataset 16 .
- the similarity tool 30 is operable to determine or estimate a similarity score between two pairs of vectors in the dataset 16 .
- the similarity tool 30 may invoke the similarity function 26 to determine the similarity score between two vectors.
- the similarity tool 30 may accumulate partial similarity scores between portions of vectors.
- the similarity tool 30 may accumulate partial similarity scores by iteratively defining a function or a table describing a similarity score between vectors on each iteration.
- the index tool 32 is operable to read from or write to the inverted index 18 .
- the index tool 32 writes vectors or features of vectors to the index 18 based on data provided by the dataset tool 28 or the similarity tool 30 . For example, based on an estimated similarity score between two vectors, the index tool 32 may index a particular feature of a particular vector provided by the dataset tool 28 .
- the results tool 34 is operable to read from or write to the results set 22 .
- the results tool 34 writes vectors or features to the results set 22 based on data provided by the dataset tool 28 , the similarity tool 30 , or the index tool 32 .
- the results tool 34 may write a pair of vectors provided from the index tool 32 or the dataset tool 28 to the results set 22 .
- the results tool 34 may provide information read from the results set 22 to the user 12 in response to a request from the user 12 .
- FIG. 4 is a flowchart of an example of a general process 35 for identifying similar pairs in a dataset in which the dataset is partially indexed.
- a dataset V is identified.
- the dataset V can include one or more (e.g., several) vectors, one or more (e.g., several) functions with finite domains, one or more (e.g., several) arrays, etc.
- the dataset V may be a dataset 16 in the search system 10 .
- the dataset V is described as having a collection of vectors, but the searching methods can also be extended to other types of data sets mutatis mutandis.
- the dataset V can include an array (e.g., each column in the array being treated as a vector), or a set of functions (e.g., a function ⁇ can be considered a vector whose i-th component equals ⁇ (i)).
- the dataset V is identified by the dataset tool 28 .
- a similarity threshold t is identified.
- t may be a similarity threshold 24 in the search system 10 .
- the similarity threshold t is identified by the similarity tool 30 .
- a similarity function sim( ⁇ , ⁇ ) is identified.
- sim( ⁇ , ⁇ ) may be a similarity function 26 in the search system 10 .
- the similarity function is identified by the similarity tool 30 .
- the dataset 16 is preliminarily sorted according to one or more criteria (step 42 ).
- the preliminary sorting can include sorting dimensions in the dataset V, or vectors in the dataset V.
- the preliminary sorting can allow certain estimates of similarity to be computed based in part on an order of dimensions or vectors.
- the preliminary sorting can be performed by the dataset tool 28 . The sorting will be described below.
- a vector x is identified.
- the vector x is identified based on the preliminary sort. For example, if the vectors in the dataset V were ordered according to certain criteria, then the vector x and subsequent vectors can be identified in an order consistent with the order in the dataset V. In some implementations, the vector x is identified by the dataset tool 28 .
- the vector x identified in step 44 is referred to as a “comparison vector,” which is used for comparing to other vectors.
- a different vector y may be identified in step 44 .
- y (and not x) is referred to as a comparison vector.
- an identified vector y is referred to as a “candidate vector,” indicating that it is a candidate as a member in the potentially similar pair (x, y).
- a different vector z in the dataset V may be identified in step 46 .
- the vector z (and not y) is considered a candidate vector. Note that a vector that was identified as a candidate vector in one iteration of the loop 44 to 56 may serve as a comparison vector in a different iteration of the loop.
- a vector y is identified as a candidate vector based on an estimated similarity between x and y.
- the similarity tool 30 may determine an estimated similarity between vectors x and y, and if the estimated similarity meets the similarity threshold 24 , then the vector y is identified as a candidate vector. Determining the estimated similarity may involve less computation than determining an exact similarity score, and can be useful in quickly eliminating vectors that are unlikely to be candidate vectors. In some implementations, there need not be any candidate vectors identified.
- Similarity scores are determined between the comparison vector x and any of the candidate vectors y (step 48 ).
- the similarity scores are determined by the similarity tool 30 .
- the similarity score may be determined by invoking the similarity function 26 , or by accumulating partial similarity scores in, for example, a table or a function. If the similarity score between the comparison vector x and a candidate vector y meets the similarity threshold 24 , then the pair of vectors (x, y) is identified as a similar pair in step 48 .
- the results tool 34 records the vectors (x, y) as a similar pair in the results set 22 (step 50 ).
- the index tool 32 determines whether to index a particular feature of the comparison vector x. For example, a feature may be indexed based on an estimated similarity contribution of the feature to similarity scores among other vectors in the dataset V. Indexing features of the comparison vector x on the basis of an estimated similarity contribution between x and other vectors in the dataset allows the index to remain relatively small, while simultaneously indexing enough features of each vector so that similar vectors are identified as candidate vectors.
- the features of the comparison vector x to be indexed are written to the index (step 54 ). In some implementations, the index tool 32 writes the features to the index 18 .
- step 44 the loop 44 to 56 is repeated using these vectors.
- the dataset tool 28 determines whether there are any such vectors. After repeating the loop 44 to 56 until every vector in the dataset has been identified, each pair of similar vectors (x, y) is recorded in step 50 .
- FIG. 5 is a flowchart of an example of a process 59 for identifying similar pairs of vectors in a dataset.
- the process 59 is based on the general process 35 of FIG. 4 .
- a dataset V, a similarity threshold t, and a similarity function sim( ⁇ , ⁇ ) are identified (step 60 ).
- the similar pairs are written to a “results file,” which can be an electronic file or any type of data structure such as a set, a list, a string, etc.
- results file may be included in the results set 22 of FIG. 2 .
- the results file and the inverted index I can be initialized to be empty (step 62 ).
- the index I is initialized by the index tool 32 and results file is initialized by the results tool 34 .
- the dataset V is preliminarily sorted (step 64 ).
- the dataset V is preliminarily sorted by the dataset tool 28 .
- the preliminary sort may involve either sorting the dimensions of the dataset V, sorting the vectors in V, or sorting both the dimensions and the vectors in V.
- the dimensions 1, . . . , m (e.g., rows in a vector representation) of V can be ordered monotonically by the number of features that appear among the vectors of the dataset V.
- this order is non-increasing, i.e., when i ⁇ j, there are at least as many features among the vectors in V that occur in dimension i as there are occurring in dimension j.
- the order can be non-decreasing.
- FIG. 6 is an example illustration of ordering dimensions of a dataset so that the number of features is non-increasing as the dimension increases.
- the dataset of FIG. 1B is used as an example.
- a dataset V 1 initially includes vectors (3, 1, 0), (3, 0, 3), (4, 0, 1), and (1, 2, 3).
- the dataset V 1 becomes a dataset V 2 , which includes vectors (3, 0, 1), (3, 3, 0), (4, 1, 0), and (1, 3, 2).
- the dataset V 2 has four features (e.g., 3, 3, 4, and 1) that occur in dimension 1, three features (e.g., 3, 1, and 3) that occur in dimension 2, and two features (e.g., 1 and 2) that occur in dimension 3.
- n(i) is the function defined as the number of features occurring among the vectors in the dataset V in dimension i, then n(1) ⁇ n(2) ⁇ n(3) after ordering the dimensions.
- the vectors v 1 , . . . , v m of V can be ordered monotonically by the maximum weight of the vector.
- the order is non-increasing; i.e., when i ⁇ j, maxweight(v i ) ⁇ maxweight(v j ).
- a non-decreasing order can also be used.
- FIG. 7 is an example illustration of ordering vectors.
- a dataset V 3 is processed so that the vectors in the dataset V 3 are sorted in a non-increasing order of the maximum weight function maxweight( ⁇ ) resulting in a sorted dataset V 4 .
- the vector v 3 has the largest maximum weight (i.e., 4), so it appears first in the sorted dataset V 4 .
- the other vectors each have maximum weight 3 , so in some implementations their relative order remains unchanged.
- the dataset V consists entirely of binary vectors (i.e., vectors whose features are all equal to 1)
- sorting by maxweight( ⁇ ) is trivial, since all vectors have weights equal to 1 or 0.
- the dataset V can be sorted by vector size; i.e.,
- Ordering the dimensions of a dataset is useful for locating similar pairs of vectors because ordering the dimensions can reduce the size of the resultant index compared to indices created from datasets whose dimensions are not ordered. Similarly, ordering the vectors in the dataset is useful for locating similar pairs of vectors because ordering the vectors allows for certain estimates (including, but not limited to, step 74 , FIG. 8 , step 110 , FIG. 5 ) that can avoid unnecessary computation.
- the dimensions and/or vectors of the dataset V are named consistently with their ordering.
- the number of features in dimension n is equal to or greater than the number of features in dimension n+1.
- a comparison vector x is identified in the dataset V (step 66 ).
- the comparison vector x is identified by the dataset tool 28 . If the vectors are ordered in step 64 , then the comparison vector x (and subsequent comparison vectors in subsequent iterations) is identified in an order consistent with the order of the vectors in the dataset. For example, when the vectors in V are sorted in non-increasing order of maxweight( ⁇ ) the first vector in V is identified first.
- a partial measure of similarity between x and other vectors of V is accumulated.
- the similarity is accumulated in a similarity accumulation function A( ⁇ ) defined on certain vectors (e.g., identified in step 78 , FIG. 8 ) in the dataset V.
- similarity is accumulated by the similarity tool 30 .
- FIG. 8 is a flowchart for an example similarity accumulation process 69 .
- the accumulation function A( ⁇ ) is initialized.
- the initialization includes setting A(y) to be undefined for each vector y in the dataset V.
- A(y) can be initialized to 0 for each y in V.
- the similarity tool 30 initializes A( ⁇ ).
- a variable remscore is used to estimate an upper bound of the maximum similarity between the non-processed features of the comparison vector x and the non-processed features of the other vectors in the dataset V.
- the similarity accumulation process 69 may include iterative steps that perform computations on certain features during each iterative step.
- each iterative step may involve determining a partial similarity score sim(x i , y i ) between features x i and y i and adding the partial similarity score to the similarity accumulation function A( ⁇ ).
- a feature x i is said to be “processed” when the feature x i has been used to compute a partial similarity score
- a feature x j is said to be “non-processed” when, for example, the feature x j has not been used to compute a partial similarity score.
- contributions of the non-processed features to an overall similarity score can be estimated, reducing the need to process every feature that has not been processed and thereby reducing computation time. This is because if a vector y j has not been processed and the estimated contribution associated with the vector y j indicates that the vector's contribution will not meet the similarity threshold, then there is no need to process the vector y j further.
- any estimate of the upper bound of the maximum similarity may be used for determining the value of remscore. Estimates which require a relatively few number of computations are effective in increasing the speed of searching for pairs of similar vectors. For example, in step 72 , the value of remscore can be initialized to sim(x, bound(V)). If the similarity function is the dot product of vectors, then
- variable remscore is initialized by the similarity tool 30 .
- the dataset V consists entirely of binary vectors
- a variable minsize is used to reduce the number of candidate vectors.
- the variable minsize is used as an estimate of a lower bound of the minimum size of a candidate vector in order for the candidate vector to be similar to the comparison vector x, for a given similarity threshold and a given similarity function.
- the variable minsize is identified in step 74 .
- minsize is identified by the similarity tool 30 . Any estimate of the lower bound of the minimum size may be used for determining the value of minsize.
- Minsize is effective when the vectors of the dataset are sorted by maxweight( ⁇ ) for example in step 64 ( FIG. 5 ). If the vectors are not sorted by maxweight( ⁇ ) a vector y which is actually similar to the comparison vector x may not be identified as a candidate vector in step 78 .
- a feature x i of the comparison vector x is identified.
- the feature x i identified in step 76 is one that has not been previously identified.
- the feature x i is identified by the dataset tool 28 . For example, if the dimensions of V were ordered (e.g., in step 64 of FIG. 5 ), then the features x i may be identified in an order consistent with the order of the dimensions.
- a candidate vector is identified in step 78 .
- the candidate vector is identified by the index tool 32 .
- candidate vectors can include any vector y such that the vector-feature pair (y, y i ) appears in the index I i .
- this set of possible candidate vectors can be reduced using the estimates described above. For example, if a current value of remscore does not meet the similarity threshold t (i.e., remscore ⁇ t), then no candidate vectors y need be identified in step 78 .
- the dataset V consists entirely of binary vectors, then no candidate vectors need be identified in step 78 if remscore ⁇ minsize. In either case, even if remscore ⁇ t, vectors having a size less than minsize may be excluded from the set of candidate vectors in some implementations.
- One way to exclude vectors having a size less than minsize is to examine the size of every vector in the index I i . But if the index is large, this may involve a large amount of computation. On the other hand, if the size of a vector bears a relationship with its maximum weight, then the relationship can be used to find vectors having a size less than minsize. For example, when the vectors in the dataset V are normalized (e.g., in the Euclidean norm) so that their lengths are equal (e.g., equal to 1), then vector size tends to be inversely proportional to a vector's maximum weight.
- step 80 the accumulation function A(y) is increased by an amount equal to sim(x i , y i ). Since the similarity of the feature x i is now accounted for in A(y), the variable remscore is decreased so that it remains an estimate of the non-processed features.
- step 82 the variable remscore is decreased by an amount equal to sim(x i , max i (V)).
- the accumulation function A reflects the similarity between the vectors x and y for the first i coordinates (if being identified in order).
- the upper bound remscore is decreased by the corresponding estimate for the similarity between the vectors x and y in the ith dimension.
- the value of the variable remscore represents an upper bound on the similarity between the coordinates i+1, . . . , n of the vectors x and y.
- steps 78 to 82 are repeated using these vectors or features.
- steps 78 to 84 have been performed for each candidate vector or feature, if there are more features of the comparison vector x that have not yet been identified in step 76 (decision 86 ), then steps 76 to 84 are repeated to process these features.
- the value of the accumulation function A( ⁇ ) represents an accumulation of the similarity scores between the comparison vector x and all the candidate vectors.
- vectors similar to the comparison vector x are identified in step 88 .
- the vectors similar to the comparison vector x are identified by the similarity tool 30 .
- FIG. 9 is an example process 89 for finding pairs of vectors, each pair including a vector x and another vector similar to the vector x.
- a candidate vector y is identified.
- the candidate vector y can be identified from a pool of candidate vectors as described above.
- the candidate vector is identified by the index tool 32 .
- An estimate E of the similarity sim(x, y) is identified in step 92 .
- the estimate E is determined by the similarity tool 30 .
- the estimate E can be determined using any estimate of the similarity score sim(x, y) such that E ⁇ sim(x, y).
- the estimate E requires fewer computations to identify than it does to compute sim(x, y). Thus, one may use the estimate E to exclude the possibility that the comparison x is similar to the candidate vector y without having to resort to computing sim(x, y).
- the estimate E does not meet the similarity threshold (decision 94 ), e.g., E ⁇ t, then the candidate vector y is not a match, and the next candidate vector may be identified. On the other hand, if E ⁇ t, then y may be (but need not be) similar to x. In some implementations, to determine whether y is similar to x, the full similarity score sim(x, y) is used.
- results file includes all the vectors y similar to the comparison vector x.
- an upper bound b will be used in indexing the comparison vector x.
- the upper bound b measures the estimated maximum contribution from the comparison vector x to the similarity score accumulation, discussed below.
- the upper bound b is initialized to 0 (step 106 ) and a dimension i corresponding to a feature x i of x is identified (step 108 ).
- the upper bound b is initialized by the similarity tool 30 .
- the upper bound b is incremented by an estimated similarity contribution (step 110 ), a quantity that represents the maximum similarity contribution from the feature x i to the similarity between x and other vectors in the dataset V.
- the estimated similarity contribution can be determined by sim(max i (V), x i ). If the dataset was ordered by maxweight( ⁇ ), then a second estimate is given by sim(maxweight(x), x i ).
- both estimates are computed, and the smaller of the two may be used.
- the similarity contribution is equal to 1, which may be used instead of one of the estimates described above.
- the estimated similarity contribution is determined by the similarity tool 30 .
- the value of b after step 110 represents an estimated upper bound of the similarity between the features identified step 108 (including previous iterations of step 108 ), and any other vector in the dataset V.
- the feature x i is indexed (step 114 ).
- the similarity threshold i.e., b ⁇ t
- the feature x i is written to the index by the index tool 32 . After being indexed in step 114 , the feature x i may be removed from the comparison vector x (step 116 ).
- the dataset tool 28 removes the feature x i from the dataset V.
- Indexing features x i in step 114 only after b is greater or equal to the similarity threshold allows the process 59 to maintain a relatively small index, yet index enough features of each vector to ensure that, for a given vector, any similar vector is actually identified as a candidate vector during step 88 .
- removing a feature x i after indexing in step 114 may be accomplished by setting the i-th coordinate equal to 0 in x′, and setting the i-the coordinate equal to x i in x′′.
- x x′+x′′.
- sim( ⁇ , ⁇ ) is not linear, often sim(x, y) bears a relationship with sim(x′, y)+sim(x′′, y) such that the estimates described here can be used to accurately identify similar pairs of vectors.
- step 116 it is determined whether there are more features of the comparison vector x that have not yet been identified (decision 118 ). If there are more features of x that have not yet been identified, steps or decisions 66 , 68 , 88 , and 104 to 116 are repeated to process these features. In some implementations, the dimensions are identified in subsequent iterations of step 66 in an order consistent with the order employed in the preliminary sort of step 64 .
- n(i) the number of features among the vectors in the dataset V that occur in dimension i (denoted n(i)) is a non-increasing function of i
- the smallest dimension corresponding to a feature of the comparison vector x may be identified in step 66 .
- the largest dimension corresponding to a feature of the comparison vector x may be identified in step 66 .
- steps or decisions 66 , 68 , 88 , and 104 to 116 if there are any vectors in the dataset V that have not yet been identified (decision 120 ), then steps or decisions 66 , 68 , 88 , and 104 to 116 are repeated for these vectors.
- the results file contains all pairs of vectors (x, y) in the dataset V such that sim(x, y) ⁇ t.
- the contents of results file may be partially or completely displayed by the search system 10 (step 124 ).
- the above steps or decisions may be performed in any logically possible order.
- performing the steps in certain orders may involve ancillary data processing.
- the dataset V and the results set or results file may be stored on an optical or magnetic disk in a computer, while a portion of the dataset V, the index I and the similarity accumulation function A are stored in a memory of the computer. If the dataset V is large enough such that the entire inverted index I or similarity accumulation function A cannot be kept in the memory of the computer, then portions of I or A can be moved back and forth between memory and another storage medium, e.g., the optical or magnetic disk. However, such ancillary data processing may slow down the performance of the search process.
- one strategy is to build the index (e.g., iterate through steps 66 to 120 ) until indexing (e.g., steps 106 to 118 ) would exceed available memory, or come within a pre-defined threshold of exceeding available memory.
- the search process can switch to a “matching only” phase. For example, in a matching-only phase, the decision 120 would follow step 104 , without any intervening steps.
- the matching-only phase persists until the dataset V has been examined for matches.
- the index I is cleared, and indexing is resumed, starting from the point at which indexing was previously suspended.
- the index I may be cleared during the course of the matching-only phase. For example, if the dataset is ordered by maxweight( ⁇ ) and all the vectors currently in the index have a size below minsize, then they may all be removed. In some implementations, if the index I is cleared prior to examining the contents of V during the match-only phase, indexing is resumed from the point at which it was previously suspended.
- the dimensions of dataset V of FIG. 1A are such that the number of features in a dimension i varies monotonically as a function of i, but the vectors are not sorted in order of maxweight( ⁇ ).
- applying the process 59 to the dataset V does not involve estimates or techniques that depend on a vector order.
- the variable remscore is not used in identifying candidate vectors.
- Timestep 0 illustrates the state of the accumulation A( ⁇ ) function, the upper bound b, the inverted index I, and the results file at step 60 in FIG. 5 , before the first iteration of the loop 66 , 68 , 88 , 104 to 120 .
- A( ⁇ ), b, I, and the results file are initialized.
- the vector v 1 is identified as the comparison vector x in step 66 ( FIG. 5 ).
- steps 72 and 74 FIG. 8
- all vectors in the inverted index I are identified as candidate vectors. Since the index I is empty so far, no vector is identified in step 78 , and A( ⁇ ) is unchanged in step 80 .
- decision 84 there are no more candidate vectors.
- step 88 Similar vectors to v 1 are sought in step 88 ( FIG. 5 ). Referring to FIG. 9 , since no candidate vectors were identified, loop 90 to 102 bears no results. Proceeding to step 106 in FIG. 5 , b is initialized to 0.
- the similarity contribution estimate in step 110 is equal to sim(max i (V), x i ).
- the current state is shown in the Table 1 above at timestep 1 .
- the comparison vector x has features in dimensions 1 and 2. However, the index only includes features from dimension 3, namely (v 1 , 1). Therefore, there are no candidate vectors to identify in step 78 , the value of A( ⁇ ) remains unchanged through each iteration of the loop 76 to 84 , and there no results to return in step 100 of FIG. 9 .
- timestep 3 There are no more features of x. This state is shown in timestep 3 .
- V there are other vectors in V, namely v 3 and v 4 .
- the loop 76 to 84 produces no results from x 1 .
- x 2 is identified.
- v 2 is identified as a candidate vector in step 78
- the estimate of similarity in steps 92 to 94 is not utilized, and a direct similarity computation is performed.
- the candidate vectors include v 1 , v 2 , and v 3 .
- FIG. 10 is a block diagram of a example device (e.g., computing device 126 ) that may be used to implement the search system 10 , as either a client or as a server or plurality of servers.
- Computing device 126 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. While in this example reference is made to computing devices, the techniques and processes discussed can be implemented in whole or part on other types of electronic devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 126 includes a processor 128 , memory 130 , a storage device 132 , a high-speed interface 134 connecting to memory 130 and high-speed expansion ports 136 , and a low-speed interface 138 connecting to low-speed bus 140 and storage device 132 .
- Each of the components 128 , 130 , 132 , 134 , 136 , and 138 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 128 can process instructions for execution within the computing device 126 , including but not limited to instructions stored in the memory 130 or on the storage device 132 to display graphical information for a GUI on an external input/output device, such as display 142 coupled to high-speed interface 134 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 126 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 130 stores information within the computing device 126 .
- the memory 130 is a computer-readable medium.
- the memory 130 is a volatile memory unit or units.
- the memory 130 is a non-volatile memory unit or units.
- the storage device 132 is capable of providing mass storage for the computing device 126 .
- the storage device 132 is a computer-readable medium.
- the storage device 132 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including but not limited to devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 130 , the storage device 132 , memory on processor 128 , or a propagated signal.
- the high-speed interface 134 manages bandwidth-intensive operations for the computing device 126 , while the low-speed interface 138 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed interface 134 is coupled to memory 130 , display 142 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 136 , which may accept various expansion cards (not shown).
- low-speed interface 138 is coupled to storage device 132 and low-speed bus 140 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 126 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 130 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 146 . In addition, it may be implemented in a personal computer such as a laptop computer 148 .
- search system 10 can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including but not limited to at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the search system 10 can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including but not limited to acoustic, speech, or tactile input.
- the search system 10 can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the search system 10 ), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- the dataset V can be used to represent several types of groups of objects.
- V can be an m ⁇ n array that can be partitioned into n vectors (e.g., the columns of the array), with each vector having m dimensions.
- the user 12 in FIG. 1 can be, e.g., a human user or a non-human user, such as a computer program.
Abstract
Description
∥x+y∥≦∥x∥+∥y∥, (1)
∥ax∥=|a|·∥x∥, and (2)
∥x∥=0 if and only if x=0 (3)
for all vectors x, y and all scalars a. When a is a scalar, the notation |a| denotes the absolute value of a. One example of a norm is the Euclidean norm, defined by
Note that in many examples the size of a vector is not a norm. For example, if x is a vector and a is a scalar, then |ax|=x. Thus, the size of a vector does not satisfy property (2) above.
and the cosine-similarity of vectors, defined by cos(x, y)=dot(x,y)/(∥x∥·∥y∥). Note that use of term cosine-similarity does not imply that the dataset V or its constituent vectors have an underlying geometric structure, or that there is necessarily an angle between two vectors. Other examples of similarity functions include the following:
Similarity functions may be derived from the above formulas, for example, by replacing any instance of |·| with ∥·∥.
I 1={(v 1,3),(v 2,3),(v 3,4),(v 4,1)}
I 2={(v 1,1),(v 4,2)}
I 3={(v 2,3),(v 3,1),(v 4,3)}.
In this example, the inverted index has three dimensions.
I 1={(v 2,3),(v 3,4),(v 4,1)}
I 2={(v 4,2)}
I3={ }.
In some implementations, the variable remscore is initialized by the similarity tool 30. In the case that the dataset V consists entirely of binary vectors, note that
If it is known a priori that the dataset V consists of binary vectors, initializing remscore to |x| (without computing
can save computational resources.
minsize=t/maxweight(x),
where t is the similarity threshold and x is the comparison vector. Utilizing minsize as described below is effective when the vectors of the dataset are sorted by maxweight(·) for example in step 64 (
E=A(y)+min(|x|,|y′|)·sim(maxweight(x),maxweight(y)), (1)
where y′ denotes the unindexed portion of the candidate vector y. For example, when the dot product is used as the similarity function, then equation (1) above becomes
E=A(y)+min(|x|,|y′|)·maxweight(x)·maxweight(y), (2)
where y′ denotes the non-indexed portion of y.
TABLE 1 | |||||
Com- | Similar | ||||
Time- | parison | Pairs | |||
step | Vector | A | b | Index | (results file) |
0 | none | undefined | undefined | empty | empty |
1 | x = v1 | undefined | 12 | empty | empty |
2 | x = v1 | undefined | 14 | I3 = {(v1, 3)} | empty |
3 | x = v2 | undefined | 21 | I2 = {(v2, 3)} | empty |
I3 = {(v1, 3)} | |||||
4 | x = v3 | A(v2) = 3 | 21 | I2 = {(v2, 3)} | {(v3, v2)} |
I3 = {(v1, 3)} | |||||
5 | x = v3 | A(v2) = 3 | 19 | I1 = {(v3, 4)} | {(v3, v2)} |
I2 = {(v2, 3), | |||||
(v3, 1)} | |||||
I3 = {(v1, 3)} | |||||
6 | x = v4 | A(v1) = 2 | 19 | I1 = {(v3, 4)} | {(v3, v2)} |
A(v2) = 12 | I2 = {(v2, 3), | ||||
(v3, 1)} | |||||
A(v3) = 7 | I3 = {(v1, 3)} | ||||
7 | x = v4 | A(v1) = 2 | 17 | I1 = {(v3, 4)} | {(v3, v2)} |
A(v2) = 12 | I2 = {(v2, 3), | ||||
(v3, 1)} | |||||
I3 = {(v1, 3), | |||||
(v4, 2)} | |||||
Claims (102)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/059,302 US8041694B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US90939007P | 2007-03-30 | 2007-03-30 | |
US12/059,302 US8041694B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
Publications (1)
Publication Number | Publication Date |
---|---|
US8041694B1 true US8041694B1 (en) | 2011-10-18 |
Family
ID=44513649
Family Applications (5)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/059,302 Active 2029-05-23 US8041694B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
US12/059,318 Active 2029-06-17 US8015190B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
US12/059,314 Active 2029-05-23 US8032507B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
US13/213,760 Active US8180756B1 (en) | 2007-03-30 | 2011-08-19 | Similarity-based searching |
US13/213,768 Active US8190592B1 (en) | 2007-03-30 | 2011-08-19 | Similarity-based searching |
Family Applications After (4)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/059,318 Active 2029-06-17 US8015190B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
US12/059,314 Active 2029-05-23 US8032507B1 (en) | 2007-03-30 | 2008-03-31 | Similarity-based searching |
US13/213,760 Active US8180756B1 (en) | 2007-03-30 | 2011-08-19 | Similarity-based searching |
US13/213,768 Active US8190592B1 (en) | 2007-03-30 | 2011-08-19 | Similarity-based searching |
Country Status (1)
Country | Link |
---|---|
US (5) | US8041694B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120078943A1 (en) * | 2010-09-27 | 2012-03-29 | International Business Machines Corporation | High quantitative pattern searching using spatial indexing |
US20130318063A1 (en) * | 2012-05-24 | 2013-11-28 | Evernote Corporation | Related notes and multi-layer search in personal and shared content |
US20160224636A1 (en) * | 2015-01-30 | 2016-08-04 | Nec Europe Ltd. | Scalable system and method for weighted similarity estimation in massive datasets revealed in a streaming fashion |
US20190286381A1 (en) * | 2018-03-13 | 2019-09-19 | Kabushiki Kaisha Toshiba | Information processing apparatus, information processing method, and information storage medium |
US11960550B1 (en) * | 2022-10-26 | 2024-04-16 | Microsoft Technology Licensing, Llc | Embedding-based retrieval techniques for feeds |
Families Citing this family (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8725724B2 (en) * | 2008-02-19 | 2014-05-13 | Roy Gelbard | Method for efficient association of multiple distributions |
US8504547B1 (en) | 2008-04-23 | 2013-08-06 | Google Inc. | Customizing image search for user attributes |
CN102016859A (en) * | 2008-05-09 | 2011-04-13 | 皇家飞利浦电子股份有限公司 | Method and system for personalized guideline-based therapy augmented by imaging information |
US8972410B2 (en) * | 2008-07-30 | 2015-03-03 | Hewlett-Packard Development Company, L.P. | Identifying related objects in a computer database |
US8219539B2 (en) * | 2009-04-07 | 2012-07-10 | Microsoft Corporation | Search queries with shifting intent |
US8271432B2 (en) * | 2009-07-07 | 2012-09-18 | Oracle Otc Subsidiary Llc | Community-driven relational filtering of unstructured text |
US8561184B1 (en) | 2010-02-04 | 2013-10-15 | Adometry, Inc. | System, method and computer program product for comprehensive collusion detection and network traffic quality prediction |
US8533825B1 (en) | 2010-02-04 | 2013-09-10 | Adometry, Inc. | System, method and computer program product for collusion detection |
NO20100464A1 (en) * | 2010-03-29 | 2011-09-30 | Companybook | Method and arrangement for business matching and detection of changes for a business using mathematical models |
KR20120052636A (en) * | 2010-11-16 | 2012-05-24 | 한국전자통신연구원 | A hscode recommendation service system and method using ontology |
US9594851B1 (en) * | 2012-02-07 | 2017-03-14 | Google Inc. | Determining query suggestions |
CN103870668A (en) * | 2012-12-17 | 2014-06-18 | 上海联影医疗科技有限公司 | Method and device for establishing master patient index oriented to regional medical treatment |
US9311823B2 (en) | 2013-06-20 | 2016-04-12 | International Business Machines Corporation | Caching natural language questions and results in a question and answer system |
CN103810241B (en) * | 2013-11-22 | 2017-04-05 | 北京奇虎科技有限公司 | Filter method and device that a kind of low frequency is clicked on |
WO2015118887A1 (en) * | 2014-02-10 | 2015-08-13 | 日本電気株式会社 | Search system, search method, and program recording medium |
US10102482B2 (en) * | 2015-08-07 | 2018-10-16 | Google Llc | Factorized models |
EP3410416B1 (en) * | 2016-01-28 | 2021-08-04 | Ricoh Company, Ltd. | Image processing device, imaging device, mobile entity apparatus control system, image processing method, and program |
US10782964B2 (en) * | 2017-06-29 | 2020-09-22 | Red Hat, Inc. | Measuring similarity of software components |
US10719520B2 (en) | 2018-12-12 | 2020-07-21 | Bank Of America Corporation | Database query tool |
WO2020213158A1 (en) * | 2019-04-19 | 2020-10-22 | 富士通株式会社 | Identification method, generation method, dimensionality reduction method, display method, and information processing device |
CN113515588A (en) * | 2020-04-10 | 2021-10-19 | 富泰华工业（深圳）有限公司 | Form data detection method, computer device and storage medium |
US20220207050A1 (en) * | 2020-12-29 | 2022-06-30 | Atlassian Pty Ltd. | Systems and methods for identifying similar electronic content items |
US11620271B2 (en) * | 2021-08-11 | 2023-04-04 | Sap Se | Relationship analysis using vector representations of database tables |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5933806A (en) | 1995-08-28 | 1999-08-03 | U.S. Philips Corporation | Method and system for pattern recognition based on dynamically constructing a subset of reference vectors |
US6055540A (en) * | 1997-06-13 | 2000-04-25 | Sun Microsystems, Inc. | Method and apparatus for creating a category hierarchy for classification of documents |
US20040194612A1 (en) * | 2003-04-04 | 2004-10-07 | International Business Machines Corporation | Method, system and program product for automatically categorizing computer audio files |
US20050234953A1 (en) * | 2004-04-15 | 2005-10-20 | Microsoft Corporation | Verifying relevance between keywords and Web site contents |
US20080005223A1 (en) * | 2006-06-28 | 2008-01-03 | Microsoft Corporation | Reputation data for entities and data processing |
US20080021860A1 (en) | 2006-07-21 | 2008-01-24 | Aol Llc | Culturally relevant search results |
US20080031203A1 (en) | 2006-08-03 | 2008-02-07 | Aol Llc | Wireless social networking |
-
2008
- 2008-03-31 US US12/059,302 patent/US8041694B1/en active Active
- 2008-03-31 US US12/059,318 patent/US8015190B1/en active Active
- 2008-03-31 US US12/059,314 patent/US8032507B1/en active Active
-
2011
- 2011-08-19 US US13/213,760 patent/US8180756B1/en active Active
- 2011-08-19 US US13/213,768 patent/US8190592B1/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5933806A (en) | 1995-08-28 | 1999-08-03 | U.S. Philips Corporation | Method and system for pattern recognition based on dynamically constructing a subset of reference vectors |
US6055540A (en) * | 1997-06-13 | 2000-04-25 | Sun Microsystems, Inc. | Method and apparatus for creating a category hierarchy for classification of documents |
US20040194612A1 (en) * | 2003-04-04 | 2004-10-07 | International Business Machines Corporation | Method, system and program product for automatically categorizing computer audio files |
US20050234953A1 (en) * | 2004-04-15 | 2005-10-20 | Microsoft Corporation | Verifying relevance between keywords and Web site contents |
US20080005223A1 (en) * | 2006-06-28 | 2008-01-03 | Microsoft Corporation | Reputation data for entities and data processing |
US20080021860A1 (en) | 2006-07-21 | 2008-01-24 | Aol Llc | Culturally relevant search results |
US20080031203A1 (en) | 2006-08-03 | 2008-02-07 | Aol Llc | Wireless social networking |
Non-Patent Citations (16)
Title |
---|
Arasu, A., et al., "Efficient Exact Set-Similarity Joins," VLDB '06 Proceedings of the 32nd International Conference on Very Large Data Bases, Sep. 12-15, 2006, Seoul, Korea, pp. 918-929. |
Bayardo, R.J., et al., ' Scaling Up All Pairs Similarity Search,' Proc. of the 16th Int'l Conf. on World Wide Web, WWW 2007, May 8-12, 2007, Banff, Alberta, Canada, pp. 131-140, revised May 21, 2007. |
Bayardo, R.J., et al., ‘ Scaling Up All Pairs Similarity Search,’ Proc. of the 16th Int'l Conf. on World Wide Web, WWW 2007, May 8-12, 2007, Banff, Alberta, Canada, pp. 131-140, revised May 21, 2007. |
Broder, A.Z., et al., "Syntactic Clustering Conference of the Web," Proc. Of the 6th Int'l World Wide Web Conference, 1997, pp. 391-303. |
Broder, A.Z., et al., "Syntactic Clustering Conference of the Web," Proc. Of the 6th Int'l World Wide Web Conference, 1997, pp. 391-303. |
Buckley et al., "Optimization of Inverted Vector Searches" Proc. of the Eight Annual Int'l Conf. on Research & Dev. In Information Retrieval, pp. 97-110, 1985, 14 pages. |
Charikar, M.S., "Similarity Estimation Techniques from Rounding Algorithms," Proc. Of the 34th Annual Symposium on Theory of Computing, 2002, pp. 380-388. |
Charikar, M.S., "Similarity Estimation Techniques from Rounding Algorithms," Proc. Of the 34th Annual Symposium on Theory of Computing, 2002, pp. 380-388. |
Chaudhuri et al., "A Primitive Operator for Similarity Joins in Data Cleaning" Proc. of the 22nd Int'l Conf. on Data Engineering, (to appear), 2006, 12 pages. |
Chien, S., and Immorlica, N., "Semantic Similarity Between Search Engine Queries Using Temporal Correlation," Proc. Of the 14th Int'l World Wide Web Conference, 2005, pp. 2-11. |
Fagin, R., et al., "Efficient Similarity Search and Classification via Rank Aggregation," Proc. Of the 2003 ACM-SIGMOID Int'l Conference on Management of Data, 2003, pp.301-312. |
Gionis, A., "Similarity Search in High Dimensions via Hashing," Proc. Of the 25th Int'l Conference on Very Large Data Bases, 1999,pp. 518-529. |
Gionis, A., "Similarity Search in High Dimensions via Hashing," Proc. Of the 25th Int'l Conference on Very Large Data Bases, 1999,pp. 518-529. |
Indyk, P., and Motwani, R., "Approximate Nearest Neighbors: Towards Removing the Curse of Dimensionality," Proc. Of the 30th Symposium on the Theory of Computing, 1998, pp. 604-613. |
Sarawagi et al., "Efficient set joins on similarity predicates" Proc. of the ACM SIGMOD, pp. 743-754, 2004, 12 pages. |
Turtle et al., "Query Evaluation: Strategies and Optimizations" Inform. Process. & Management 31(6):831-850, 1995, 20 pages. |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120078943A1 (en) * | 2010-09-27 | 2012-03-29 | International Business Machines Corporation | High quantitative pattern searching using spatial indexing |
US8688692B2 (en) * | 2010-09-27 | 2014-04-01 | International Business Machines Corporation | High quantitative pattern searching using spatial indexing |
US20130318063A1 (en) * | 2012-05-24 | 2013-11-28 | Evernote Corporation | Related notes and multi-layer search in personal and shared content |
US11157570B2 (en) * | 2012-05-24 | 2021-10-26 | Evernote Corporation | Related notes and multi-layer search in personal and shared content |
US20160224636A1 (en) * | 2015-01-30 | 2016-08-04 | Nec Europe Ltd. | Scalable system and method for weighted similarity estimation in massive datasets revealed in a streaming fashion |
US10402414B2 (en) * | 2015-01-30 | 2019-09-03 | Nec Corporation | Scalable system and method for weighted similarity estimation in massive datasets revealed in a streaming fashion |
US10970296B2 (en) | 2015-01-30 | 2021-04-06 | Nec Corporation | System and method for data mining and similarity estimation |
US20190286381A1 (en) * | 2018-03-13 | 2019-09-19 | Kabushiki Kaisha Toshiba | Information processing apparatus, information processing method, and information storage medium |
US11960550B1 (en) * | 2022-10-26 | 2024-04-16 | Microsoft Technology Licensing, Llc | Embedding-based retrieval techniques for feeds |
Also Published As
Publication number | Publication date |
---|---|
US8180756B1 (en) | 2012-05-15 |
US8015190B1 (en) | 2011-09-06 |
US8190592B1 (en) | 2012-05-29 |
US8032507B1 (en) | 2011-10-04 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8041694B1 (en) | Similarity-based searching | |
Morse et al. | Efficient continuous skyline computation | |
Broder et al. | Scalable k-means by ranked retrieval | |
US8918348B2 (en) | Web-scale entity relationship extraction | |
US8073818B2 (en) | Co-location visual pattern mining for near-duplicate image retrieval | |
US8972410B2 (en) | Identifying related objects in a computer database | |
US7743062B2 (en) | Apparatus for selecting documents in response to a plurality of inquiries by a plurality of clients by estimating the relevance of documents | |
US7636713B2 (en) | Using activation paths to cluster proximity query results | |
US20160210301A1 (en) | Context-Aware Query Suggestion by Mining Log Data | |
US7308451B1 (en) | Method and system for guided cluster based processing on prototypes | |
US20120278321A1 (en) | Visualization of concepts within a collection of information | |
US20050289102A1 (en) | Ranking database query results | |
US8051021B2 (en) | System and method for resource adaptive classification of data streams | |
US7818278B2 (en) | Large scale item representation matching | |
US20140149429A1 (en) | Web search ranking | |
US7533094B2 (en) | Method and system for determining similarity of items based on similarity objects and their features | |
JP2003030222A (en) | Method and system for retrieving, detecting and identifying main cluster and outlier cluster in large scale database, recording medium and server | |
US8375022B2 (en) | Keyword determination based on a weight of meaningfulness | |
US11630854B2 (en) | Segmenting users with sparse data utilizing hash partitions | |
CN113660541A (en) | News video abstract generation method and device | |
CN106599122B (en) | Parallel frequent closed sequence mining method based on vertical decomposition | |
US11163831B2 (en) | Organizing hierarchical data for improved data locality | |
AU2018313274B2 (en) | Diversity evaluation in genealogy search | |
EP1195694A2 (en) | Automatic determination of OLAP Cube dimensions | |
US20230368509A1 (en) | Multimodal machine learning image and text combined search method |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BAYARDO, ROBERTO J.;MA, YIMING;SRIKANT, RAMAKRISHNAN;SIGNING DATES FROM 20080423 TO 20080429;REEL/FRAME:020916/0540 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |