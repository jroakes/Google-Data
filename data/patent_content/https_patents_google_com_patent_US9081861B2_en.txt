US9081861B2 - Uniform resource locator canonicalization - Google Patents
Uniform resource locator canonicalization Download PDFInfo
- Publication number
- US9081861B2 US9081861B2 US12/177,111 US17711108A US9081861B2 US 9081861 B2 US9081861 B2 US 9081861B2 US 17711108 A US17711108 A US 17711108A US 9081861 B2 US9081861 B2 US 9081861B2
- Authority
- US
- United States
- Prior art keywords
- url
- urls
- parameter
- parameters
- content
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G06F17/30876—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/955—Retrieval from the web using information identifiers, e.g. uniform resource locators [URL]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G06F17/30864—
Definitions
- This description relates to online crawling and search and, in particular, to uniform resource locator canonicalization.
- Online resources or content items (e.g., web pages, video files, audio files, documents, etc.) available on the Internet can be associated with a document identifier, e.g., a Uniform Resource Locator (URL), that can be used to identify and locate a content item.
- a document identifier e.g., a Uniform Resource Locator (URL)
- URL Uniform Resource Locator
- the Internet is organic and heterogeneous, often many distinct URLs point to the same content item. Thus, even though the URLs themselves are different, the data fetched from the distinct URLs can be identical. Because of this, a web crawler that loads URLs from link tags on web pages that point to content (e.g., to index, store, and make the content accessible via a search query) may download the identical content that is specified by two different URLs.
- resources e.g., video files
- other online content e.g., text-based HTML web pages
- bandwidth is an expensive and limited resource, it is desirable to avoid downloading the same content more than once.
- a computer-implemented method includes receiving a plurality of uniform resource locators (URLs), where the URLs identify content files, and where the URLs include at least one parameter. Fingerprints of the content files are identified. A first entropy of values of the fingerprints conditional on values of a first parameter is determined, and a second entropy of values of the first parameter conditional on values of the fingerprints is determined. It is determined that the first parameter is irrelevant to the identification of a unique content file by the URLs based, at least in part, on the first and second entropy values.
- URLs uniform resource locators
- a computer-implemented method includes receiving a plurality of uniform resource locators (URL), where the URLs identify a host and content files, and where the URLs include a plurality of parameters.
- An information content, relevant to the identification of a unique content file, of the parameters is determined, where the determination of the information content is based, at least in part, on an entropy of values of fingerprints of the content files conditional on values of the parameters and based, at least in part, on an entropy of values of the parameters conditional on values of the fingerprints.
- First parameters that are irrelevant to the identification of a unique content file on the host by the URLs are determined based, at least in part, on the information content of the first parameter, and second parameters that are relevant to the identification of a unique content file on the host by the URLs are determined based, at least in part, on the information content of the second parameters.
- a computer program product tangibly embodied on a computer-readable medium includes executable instructions.
- the instructions When executed they cause a data processing apparatus to receive a plurality of uniform resource locators (URL), where the URLs identify a host and content files stored on the host, and where the URLs include a plurality of parameters.
- the executed instructions also cause the data processing apparatus to determine an information content, relevant to the identification of a unique content file stored on the host, of the parameters, where the determination of the information content is based, at least in part, on an entropy of values of fingerprints of the content files conditional on values of the parameters and is based, at least in part, on an entropy of values of the parameters conditional on values of the fingerprints.
- the executed instructions also cause the data processing apparatus to determine first parameters that are irrelevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the first parameters and to determine second parameters that are relevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the second parameters.
- a system for crawling and indexing online content includes a parser configured to parse a plurality of URLs to identify parameters in the URLs, where the URLs identify a host and content files.
- the system further includes an information content calculation module configured to determine an information content, relevant to the identification of a unique content file, of the parameters, where the determination of the information content is based, at least in part, on an entropy of values of fingerprints of the content files conditional on values of the parameters and based, at least in part, on an entropy of values of the parameters conditional on values of the fingerprints.
- the system also includes a relevancy calculation module configured to determine first parameters that are irrelevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the first parameters and configured to determine second parameters that are relevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the second parameters.
- a relevancy calculation module configured to determine first parameters that are irrelevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the first parameters and configured to determine second parameters that are relevant to the identification of a unique content file on the host by the URLs based, at least in part, on the information content of the second parameters.
- FIG. 1 is a schematic block diagram of a system for determining the relevance of a URL parameter for identifying a content item referenced by the URL.
- FIG. 2 is a flowchart illustrating example operations of the system of FIG. 1 .
- FIG. 3 is a flowchart illustrating other example operations of the system of FIG. 1 .
- FIG. 4 is a flowchart illustrating more example operations of the system of FIG. 1 .
- FIG. 1 is a schematic block diagram of a system 100 for identifying different URLs that reference the same content and for generating canonical URLs that are equivalent, for purposes of identifying the content, to the different URLs that reference the same content.
- the system 100 can receive, as input, a number of different URLs, some of which reference the same content and some of which reference different content. Based on this input the system can determine which portions of the URLs are relevant, and which portions are irrelevant, to the identification of the content. From this information the system 100 may determine canonical URLs that provide a simple template of the basic relevant parameters that are required to identify content.
- a canonicalized version of the new URL can be compared to the canonical URLs, and if the canonicalized version of the new URL matches a canonical URL that references already-downloaded content, the new URL can be equated with the canonical URL, such that the content referenced by the new URL need not be downloaded. If a match is not found then the content referenced by the new URL can be downloaded for further analysis and use.
- a web crawler 104 can crawl or otherwise search through a corpus of content files 102 (e.g., websites available on the world-wide web (WWW)) to select material (e.g., web pages, documents, audio files, and video files) for storage in an indexed form in a data center 108 .
- a module 106 that includes an indexer 107 can compress, index, and rank the selected material before the material is stored in the data center 108 .
- an analysis module 110 can identify different URLs that reference the same content and can determine a canonical URL equivalent to the different URLs that reference the identical content.
- a client 112 may submit a search query to a search engine server 114 to request material relevant to the query.
- a user of the client 112 can enter the query through a web browser running on the client 112 .
- the query can be expressed in the form of an unstructured text string entered in a single entry field of the browser, and the query can include a number of phrases, where a phrase can be a single word, a group of words, or a character string.
- the query may include a text string that is generated from an audio file, e.g., when the user submits a query in the form of a spoken message that is converted to the text string through a voice recognition processor.
- An intake module 116 of the server 114 can receive the query from the client 112 , and a parser 118 can parse the query into subcomponents.
- a search engine running on the server 114 can use phrases specified in the query, as well as synonyms and stems for the phases, to identify highly-ranked material that satisfy the query.
- the server 114 can return responses to the query via an output module 120 to the web browser of the client 112 , where the responses contain information (e.g., webpages, documents, video files, audio files) satisfying the query along with ranking information and references to the identified documents.
- the query can include a URL that references content desired by a user.
- the URL of the desired content, and/or parsed components of the URL can be passed to the compression, indexing, and ranking module 106 , where a comparison module 121 can compare it to a list of canonical URLs stored in database 128 . If a match between a canonical URL and a canonicalized version of the URL of the desired content exists, the desired content can be served from the data store 108 , and if a match does not exist, the desired content can be sourced from another location.
- a download module 122 (e.g., included in the web crawler 104 ) can be used to download content files identified by URLs.
- the web crawler 104 can include a program or an automated script that browses the WWW in a methodical, automated manner to identify content for analysis, storage, and serving to client users.
- the download module 122 can be used to download content files identified by URLs.
- the web crawler 104 can include a program or an automated script that browses the WWW in a methodical, automated manner to identify content for analysis, storage, and serving to client users.
- the download module 122 can be downloaded by the download module 122 .
- the web crawler can identify the content referenced by all URLs on a web page for download. Then, any URLs in the downloaded content can be followed to identify additional content for downloading. This process of following the links in the URLs of downloaded content to identify additional content for downloading can be repeated to identify and download a large corpus of content.
- Other implementations of the web crawler can use different methods to
- the analysis module 110 can analyze the URLs and the content to determine parameters of the URLs that are relevant or irrelevant to the identification of unique content files.
- HTTP hypertext transfer protocol
- URLs typically include a host, a path, and a query.
- host specifies the name of the host
- path specifies a path on the host
- query specifies a query.
- http specifies that the HTTP protocol is used to access the content.
- the analysis module 110 can include a parser 111 configured to parse URLs to determine different parts of the URL (e.g., the host, path, and different parameters).
- two URLs that reference the same content file might differ in any of the host, the path, or the query parts of the URL.
- the host part (“xyz.com”) and the path part (“content”) of the URLs are identical, and the three URLs differ only in their query parts.
- the query portion of the URLs can include a sequence of parameter-value pairs separated by ampersands. In general, the exact order of the parameters within the URL does not play a role in identifying particular content.
- a canonicalization function that transforms the input URL into its equivalence class can be applied to the URLs and the results of the function can then be compared.
- the URLs shown in equations (4) and (5) point to the same content, and their canonicalized URLs are also equal, as they should be.
- the URL shown in equation (6) points to different content and has a different canonical URL than that of the URLs shown in equations (4) and (5).
- Such a canonicalization function is universal across HTTP URLs and can be applied to any URL.
- the question of whether the parameter can be safely removed from the URL according to a canonicalization function depends on how the parameter is used in URLs that are specific to a particular host.
- Other parameters that are common to many hosts may be classified as either universally relevant or universally irrelevant to the identification of a content item.
- Parameters that generally are relevant across all hosts are parameters whose values capture the most information about which content item is being requested, e.g. a filename, a folder, or a content ID.
- a good canonicalization function maintains such parameters as relevant, while discarding parameters that are identified as irrelevant to the identification of specific content items.
- relevant parameters can include parameters that uniquely identify a content file, e.g., a content identification parameter or a path that includes a filename.
- Relevant parameters also include parameters that assist in uniquely identifying a content file, even though the parameters themselves do not uniquely identify the content, e.g., parameters that identify a path, a content category, and certain parameters that identify some general file names of file types (e.g., file extensions that are generally known to refer to different content, such as “mpg,” “mov,” and “wmv.”).
- Irrelevant parameters can include parameters that refer to state information, session parameters that are not essential for retrieval (e.g., tracking IDs), session parameters essential for retrieval but that do not identify or assist in identifying content (e.g., login information or session IDs), and parameters that are obsolete.
- irrelevant vs. relevant parameters may be necessary to the retrieval of the content, even though their value does not give information about which content item is referenced by the URL. For example, a host specified by the URL may require such a parameter to validate a user's login credentials. Because a canonicalization function is used only to determine which equivalence class a URL falls into for purposes of identifying a content item, and is not used to generate a valid URL that could be used to retrieve the content item, necessary, irrelevant parameters can be discarded by a canonicalization function even if they are necessary for the retrieval of the content. Thus, although canonical URLs are useful for relating different URLs that reference the same content, canonical URLs cannot necessarily be used to retrieve the content.
- an information content calculation module (ICCM) 124 within the analysis module 110 can analyze the relationships between a number of different URLs and a number of different content files referenced by the URLs to determine the information content of each parameter.
- the ICCM 124 can use a generalized algorithm based on information theory to classify each parameter as relevant or irrelevant given a corpus of URLs and the content referenced by the URLs. This corpus can be compiled from URLs that have been crawled by the web crawler 104 and the content that has been downloaded by the download module 122 .
- the ICCM 124 receives as input a number of URLs that differ in at least some of their query parameters and also receives as input fingerprints of the content referenced by the URLs.
- a fingerprint of a content file can be a hash of the content file (e.g., an MD5 hash), which provides a small-size hexadecimal string that represents the content file.
- the fingerprints of the content files can be downloaded by the download module 112 , or can be generated within the system 100 by a fingerprint generator 116 .
- the fingerprint generator 116 can be part of the analysis module 110 .
- the fingerprint of a content item can be the entire content item itself.
- the information content of a parameter can be illustrated with the examples shown in the following four tables, each of which considers a case showing four relationships between the value of the URL parameter and a fingerprint of a content file referenced by the URL.
- the value of a parameter, V is shown in a column on the left
- a fingerprint (FP) is shown in a column on the right.
- the ICCM 124 can compute an entropy of the fingerprint values conditional on the values of the parameters of the URLs and an entropy of the parameter values conditional on the fingerprint values.
- These entropies can also be known as the conditional entropies, H(fingerprints
- V) also can be known as the entropy of fingerprint values conditional on the parameter values
- F) can be known as the entropy of the parameter values conditional on the fingerprint values. Both entropies can be measured in units of bits.
- F) is H ( V
- V) is H ( F
- F) 2 bits and H(F
- V) 0 bits.
- F) 1 bits and H(F
- V) 1 bit.
- F) 0 bits and H(F
- V) 0 bits.
- V) represents the uncertainty that remains about which fingerprint is pointed to by a URL having a particular parameter, given that the value of the parameter is known. If H(F
- F) represents the uncertainty that remains about the value of the parameter, given that the fingerprint is known. If the parameter value is essentially random and not related to the fingerprint, H(V
- a relevancy calculation module (RCM) 126 , which can determine whether a parameter is relevant or not, based, at least in part, on the values of H(F
- RCM relevancy calculation module
- the above calculations can be applied to a group of URLs that all refer to the same host and path, or to a group of URLs that all refer to the same host but to different paths, or to URLs that can refer to any host/path combination.
- entropies when entropies are calculated for a cluster of URLs that refer to a particular host or host/path combination, if the host or host/path cluster contains fewer than a fixed number of URLs, no rules are generated for the cluster. Otherwise, for each query parameter in the URLs, the ICCM 124 and the RCM 126 can determine whether the parameter is relevant or not, using the entropy quantities described above.
- a canonical URL generator (CUG) 127 can generate canonical URLs by applying rules to parameters of a URL based on whether the parameters in the URLs are relevant or not.
- the rule can be ⁇ ParameterName: IGNORE>.
- the rule can be ⁇ ParameterName: ACCEPT>.
- the automatically generated rules for each host or host/path can be merged together and applied by the CUG 127 to all URLs that reference the particular host.
- the automatically generated rules can also be combined with a list of manually generated heuristic rules to generate the final list of rules for each host.
- Such manually generated rules may include a rule that orders individual URL parameters alphabetically, a case-sensitivity rule that converts all upper case letters to lower case letters, a rule that deems any parameter having a name equal to “vid,” “file,” or “path” to be relevant, and a rule that deems any parameter having a name equal to “sessionid” to be irrelevant.
- a database of such rules can be maintained in the system 100 , e.g., in the RCM 126 .
- the entropy calculation is performed for parameters using all URLs for a given host, rather than for individual host/path clusters on a host, no host/path rule merging is required.
- the automatically generated rules can also be combined with the list of manually generated heuristic rules.
- the RCM 126 may determine that the rule for the parameter can be host/path specific, such that it is different for different host/path combinations. In another implementation, the RCM 126 may determine the final rule for the parameter, which can apply for all host/path combinations, by calculating a ratio between the number of host/paths for which the parameter is relevant to the number of host/paths for which the parameter is irrelevant.
- the RCM 126 may determine that the parameter is a relevant final rule, and if the ratio is below or equal to the threshold value then the RCM 126 may deep the parameter to be irrelevant. In another implementation, the RCM 126 may determine that a parameter is relevant for all paths on a host if the parameter is determined to be relevant on any of the paths for the host.
- an automatically generated rule for a URL parameter may conflict with a manually generated heuristic rule for a particular host.
- the manually generated heuristic rule may trump the automatically generated rule for that URL parameter on that host.
- the final rules as determined by the ICCM 124 and the RCM 126 can be used by the CUG 127 in a canonicalization function to transform a URL into its equivalence class, for example, by accepting or rejecting certain parameters as relevant for purposes of identifying a unique content file.
- Canonical URLs can be stored in a data store 128 , which, in one implementation, can be part of the compression, indexing, and ranking module 106 .
- a canonicalization function can be applied to compare URLs that reference the same host and path, or URLs that reference only the same host, or URLs that reference any host and any path.
- the canonicalization function may not drop any query parameters, but it may alter the URL according to the one or more heuristic rules.
- URL parameters can be ordered alphabetically or made case-insensitive.
- URLs can be unescaped, to convert them to their unescaped equivalents.
- special URL encoded characters e.g., “%20,” which represents a space between characters in an HTTP URL
- query parameters can be deemed relevant or irrelevant based on a fixed list of relevant or irrelevant parameters.
- the web crawler 104 can use the canonical URLs as follows. As the web crawler 104 crawls through and extracts URLs from web pages, an extracted URL can be parsed, e.g., by a parser 130 , to determine the components of the URL and then the URL is canonicalized according to a canonicalization function to produce a canonical URL. A comparison module 132 of the web crawler 104 can query the database 128 to determine whether a matching canonical URL exists in the database 128 , and if a content item corresponding to the matching URL has been retrieved before. If the content item has been retrieved before, the download module 122 of the crawler need not download the content again, and the web crawler 104 can discard the URL from further consideration.
- the download module 122 downloads the content referenced by the original extracted URL (not the canonicalized URL) and stores the content in the data store 108 .
- the ICCM 124 , the RCM 126 , and the CUG 127 can generate a canonical URL from the original extracted URL, and this canonical URL is stored in the database 128 and serves to index the downloaded content.
- An indexer 107 can index the content, such that the content can be easily retrieved based on the index information, such as, for example, the canonical URL, keywords, and other metadata.
- the fingerprint generator 116 can compute a fingerprint of the downloaded content to provide training data for the above-described information theoretical techniques used to generate canonical URLs.
- the download module 122 can periodically download a small, random sample content items that are referenced by discarded URLs. These discarded URLs and the content they point to can provide further evidence to support or refute existing rules, or can provide training data for new rules.
- a query parameter of a URL can itself be a URL.
- the presence of certain, specific character sequences e.g. “http” and “://” in the value of a query parameter can indicate that the query parameter is in fact itself a URL.
- the relevance of a group of two or more parameters, considered together can be determined by the ICCM 124 and the RCM 126 . This is done because the group of parameters might be considered relevant by the RCM 126 even if the parameters would be deemed irrelevant when considered individually.
- the ICCM 124 may consider the path and file parameters to be irrelevant, because H(V
- F) 1 for both the path and file parameters, and this entropy value may be above some predetermined threshold. However, both the path and file parameters are required to uniquely determine which content item is referenced by the URL, and therefore the combination of the path and file parameters is relevant.
- This relevancy information can be determined automatically as follows. After an initial analysis, as described above, of whether or not parameters on a host are individually relevant, the ICCM 124 and the RCM 126 can analyze tuples (e.g., pairs, triples etc.) of query parameters, where at least one of the parameters in the tuple has been marked as individually irrelevant. Then, the ICCM 1224 can determine H(V′
- tuples e.g., pairs, triples etc.
- the ICCM 124 when considering the relevance of the path/file tuple for the URLs ( 15 ), ( 16 ), ( 17 ), and ( 18 ), the ICCM 124 would determine that H(V′
- F) 0 and H(F
- V′) 0. The RCM 126 therefore would determine that the tuple is relevant, and both the path and file parameters would be deemed relevant for purposes of identifying a content file. A canonicalization function would retain both parameters as relevant.
- Whether a URL parameter is case-sensitive for purposes of identifying a content file, can be analyzed by the system 100 .
- the parameter likely is not case-sensitive.
- a canonicalization function applied by the CUG 127 can discard case information for case-insensitive query parameters, but retain case information for case-sensitive parameters.
- the analysis module 110 can determine automatically whether or not a parameter is case-sensitive as follows.
- the ICCM 124 can create a set of test URLs in which the case information of a parameter is removed by converting each value of the parameter into lower case for all the URLs in the set.
- the set of URLs with a value having its case information removed can be denoted as lower(V).
- the ICCM 124 can determine the quantity, H(F
- the value of this quantity is 1 bit, which, if the value of the threshold is less than 1, would indicate that the parameter is case-sensitive and that the case of the parameter values should be preserved according to a canonicalization function.
- the ICCM 124 can determine the information content of a path for purposes of identifying a content file.
- path components of a set of URLs can be considered as URL parameters, and the entropy values, H(V
- this analysis is performed on a per-host basis, such that the information content of paths on a particular host are considered.
- the generated canonicalization rules then would specify on a per-host basis whether the path itself or any of its components should be stripped during canonicalization.
- the path parameter may be irrelevant to the identification of the content file and can be stripped from the URL during canonicalization of the URL.
- a path would be deemed to be irrelevant if considered individually, but a tuple of the path and one or more query parameters may be deemed to be relevant, so path parameters generally should be analyzed together with the regular query parameters as tuples, as described above.
- Calculating a conditional entropy of a host portion of a set of URLs to determine whether the host is relevant to the identification of unique content files may not yield significant information.
- certain parts of a host name can be analyzed individually to determine whether they are relevant to the identification of a unique content file. For example, a portion of the host name that appears before the domain name can be analyzed (e.g., in the host name, video.google.com, the domain is “google.com” and the prefix is “video.”).
- the non-domain prefix part of the host can be treated as a separate query parameter to be processed by the ICCM 124 to determine its information content.
- the analysis module 110 can pass a known URL that references a known content item having a known fingerprint to the web crawler 104 .
- the analysis module 110 can instruct the web crawler 104 to modify or remove a value of the URL parameter that is initially determined to be irrelevant and then to download the content item referenced by the modified URL.
- the comparison module 132 can compare the downloaded content item to the known content item (or can compare their fingerprints).
- a smaller size fingerprint of the content file can be downloaded by the download module 122 . For example, if two HTTP content files are identical, it is likely that value of the “Content-Length” header field of the two files also is identical.
- the download module 122 may issue an HTTP HEAD request to download some or all header information of content files referenced by URLs rather than issuing an HTTP GET request to download the entire content, and the information downloaded in response to the HEAD request can be used as a fingerprint of the content files in the entropy calculations performed by the ICCM 124 .
- the ultimate determination of whether or not a URL parameter is relevant to the identification of content files can be based on multiple sources of information, including the conditional entropy calculations, H(V
- the RCM 126 may determine that a relevance determination based on the conditional entropy calculations is accurate 90% of the time, that a relevance determination based on manual heuristic rules is accurate 95% of the time, and that a relevance determination based on a fixed list of relevant and irrelevant parameters is accurate 80% of the time. Then, the RCM 126 may compute a probability that a parameter is relevant based on the combination of the information derived from these different analyses.
- an initial determination of the probability that the parameter is relevant can be determined by the RCM 126 . Then, only parameters whose probabilities lie within some predetermined range of uncertainty (e.g. 10% ⁇ p ⁇ 90%) would be tested by the HTTP HEAD or HTTP GET request for content referenced by a modified URL.
- FIG. 2 is a flowchart 200 illustrating example operations of the system of FIG. 1 .
- a plurality of uniform resource locators are received ( 202 ).
- the URLs can be received as a result of a web crawling process performed by the web crawler 104 .
- the URLs can be received from a database that stores a group of URLs.
- the URLs identify content files, and include at least one parameter.
- An information content of a first parameter of the URLs is determined, where the information content provides a measure of the relevance of the parameter to the identification of a unique content file ( 204 ). Then, it is determined, based, at least in part, on the information content of the parameter, that the first parameter is irrelevant to the identification of a unique content file by the URLs ( 206 ).
- the information content of the first parameter can be determined by an ICCM 124 that calculates an entropy of values of the fingerprints conditional on values of the first parameter for the URLs and that calculates an entropy of values of the first parameter conditional on values of the fingerprints.
- an information content of a second parameter of the URLs can be determined ( 208 ). Then, it can be determined, based, at least in part, on the information content of the second parameter, that the second parameter is relevant to the identification of a unique content file by the URLs ( 210 ). For example, the information content of the second parameter also can be determined by the ICCM 124 , which can calculate an entropy of values of the fingerprints conditional on values of the second parameter and which can calculate an entropy of values of the first parameter conditional on values of the fingerprints.
- Another URL can be received in addition to the plurality of URLs ( 212 ), and the other URL can be identified as equivalent to one of the plurality of URLs for purposes of identifying a particular content file ( 214 ), based at least on the other URL and the equivalent URL having an identical value for the second parameter, even though the other URL and the equivalent URL have different values for the first parameter.
- the web crawler 104 may locate a URL as a result of a crawling process, which may be canonicalized and compared to the canonical URLs in the database 128 . If the other URL and one of the canonical URLs have identical values for relevant parameters in the URLs they may be identified as equivalent for purposes of identifying a content file, even though the other URL and the equivalent URL have different values for the first parameter.
- the server can compare the other URL to canonical URLs stored in a database. Then, if the other URL and one of the canonical URLs have identical values for relevant parameters in the URLs they may be identified as equivalent for purposes of identifying a content file, even though the other URL and the equivalent URL have different values for the first parameter. If such a match is found between the canonicalized form of the other URL and one of the canonical URLs, then the server may serve the requested content from cached content that is identified by the canonical URL.
- a copy of a particular content file can be cached ( 216 ), and a copy of the cached particular content file can be served ( 218 ) in response to a request for a content file identified by the other URL, and a copy of the cached particular content file also can be served in response to a request for a content file identified by the equivalent URL ( 220 ).
- FIG. 3 is a flowchart 300 illustrating other example operations of the system of FIG. 1 .
- a plurality of URLs are received ( 302 ), where the URLs identify a host and content files and include at least one parameter.
- An information content of the parameters, relevant to the identification of a unique content file, is determined ( 304 ), and the determination is based, at least in part, on an entropy of values of fingerprints of the content files conditional on values of the parameters and based, at least in part, on an entropy of values of the parameters conditional on values of the fingerprints.
- First parameters that are irrelevant to the identification of a unique content file on the host by the URLs are determined ( 306 ) based, at least in part, on the information content of the first parameters.
- second parameters that are relevant to the identification of a unique content file on the host by the URLs are determined ( 308 ) based, at least in part, on the information content of the second parameters.
- canonical URLs for identifying content files on the host can be determined based on which of the first and second parameters are included in the received URLs ( 310 ) and these canonical URLs can be stored ( 312 ) (e.g., in the database 128 ).
- the CUG 127 can canonicalize one of the received URLs by applying a canonicalization function to the URL.
- the canonicalization function can act to retain relevant parameters and discard irrelevant parameters in the received URL.
- Another URL in addition to the plurality of URLs can be received ( 314 ).
- the other URL can be canonicalized and compared to the stored canonical URLs ( 316 ), and, if the comparison yields a match between the other URL and a stored canonical URL ( 318 ), then a content file identified by the other URL can be downloaded and stored ( 320 ). Otherwise, a content file identified by the other URL can be equated with an already-stored content file identified by the canonical URL that matches the other URL ( 322 ).
- FIG. 4 is a flowchart 400 illustrating other example operations of the system of FIG. 1 .
- a plurality of URLs are received ( 402 ), where the URLs identify a host and content files and include at least one parameter.
- An information content of the parameters, relevant to the identification of a unique content file, is determined ( 404 ), and the determination is based, at least in part, on an entropy of values of fingerprints of the content files conditional on values of the parameters and based, at least in part, on an entropy of values of the parameters conditional on values of the fingerprints.
- First parameters that are irrelevant to the identification of a unique content file on the host by the URLs are determined ( 406 ) based, at least in part, on the information content of the first parameters.
- second parameters that are relevant to the identification of a unique content file on the host by the URLs are determined ( 408 ) based, at least in part, on the information content of the second parameters.
- a URL is received, where the URL includes a first parameter that has been determined to be irrelevant to the identification of a unique content file on the host ( 410 ).
- a first fingerprint of a content file identified by the received URL is received ( 412 ).
- a test URL identical to the received URL but for the omission of the first parameter from the test URL is generated ( 414 ).
- a second fingerprint of a content file identified by the test URL is received ( 416 ), and the first and second fingerprints are compared ( 418 ). The determination that the first parameter is irrelevant to the identification of a unique content file on the host can be refined based at least in part on the comparison ( 420 ).
- Implementations of the various techniques described herein may be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. Implementations may implemented as a computer program product, i.e., a computer program tangibly-embodied in a machine-readable storage device (e.g., a random access memory, a read only memory, a hard disk, an optical disk, or combinations thereof), for execution by, or to control the operation of, data processing apparatus, e.g., a programmable processor, a computer, or multiple computers.
- a machine-readable storage device e.g., a random access memory, a read only memory, a hard disk, an optical disk, or combinations thereof
- data processing apparatus e.g., a programmable processor, a computer, or multiple computers.
- a computer program such as the computer program(s) described above, can be written in any form of programming language, including compiled or interpreted languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
- Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by, and an apparatus may be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- FPGA field programmable gate array
- ASIC application-specific integrated circuit
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data.
- a computer also may include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- Information carriers suitable for embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto-optical disks e.g., CD-ROM and DVD-ROM disks.
- the processor and the memory may be supplemented by, or incorporated in special purpose logic circuitry.
- implementations may be implemented on a computer having a display device, e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a cathode ray tube (CRT) or liquid crystal display (LCD) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- Implementations may be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation, or any combination of such back-end, middleware, or front-end components.
- Components may be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
Abstract
Description
http://xyz.com/content/video?file=news20080115&player=small (1)
http://xyz.com/content/video?player=small&file=news20080115 (2)
http://xyz.com/content/video?player=small&file=news20080115 &irrelevantparam=1 (3)
In each case of the example URLs (1), (2), and (3), the host part (“xyz.com”) and the path part (“content”) of the URLs are identical, and the three URLs differ only in their query parts. Because this is true for a large proportion of URLs that point to the same video, we treat this example situation first, where only the query part of the URLs vary, while the host and the path are identical for all the URLs under consideration. As shown in the URLs above, the query portion of the URLs can include a sequence of parameter-value pairs separated by ampersands. In general, the exact order of the parameters within the URL does not play a role in identifying particular content.
C(http://xyz.com/video?z=1&m=2&a=3)=http://xyz.com/video?a=3&m=2&z=1 (4)
C(http://xyz.com/video?m=2&z=3&z=1)=http://xyz.com/video?a=3&m=2&z=1 (5)
C(http://xyz.com/video?z=1&q=4&a=3)=http://xyz.com/video?a=3&q=4&z=1 (6)
http://xyz.com/video?junk=123&file=news.mpeg, (7)
http://xyz.com/video?file=news.mpeg. (8)
However, on a different host the parameter “junk” may provide useful information for the identification of unique content files an should not be discarded in a canonicalization process
TABLE 1 |
Case 1 |
V | FP | ||
A | 1 | ||
B | 1 | ||
C | 1 | ||
D | 1 | ||
TABLE 2 |
Case 2 |
V | FP | ||
A | 1 | ||
A | 3 | ||
A | 2 | ||
A | 4 | ||
TABLE 3 |
Case 3 |
V | FP | ||
A | 1 | ||
B | 1 | ||
A | 2 | ||
B | 2 | ||
TABLE 4 |
Case 4 |
V | FP | ||
A | 1 | ||
C | 3 | ||
B | 2 | ||
D | 4 | ||
where P(x) is the probably of an event, x, and P(x, y) is the joint probability of events x and y. These probabilities are computed by dividing a count of the parameter values or fingerprints in the list of URLs by the total number of URLs. For the purpose of this calculation, if the parameter is not present in a specific URL, a special “unused” value marker can be substituted.
H(V|F)=−4·(0.25)·log2(0.25)+P(1)·log2 P(1)=2 bits, (10)
and the entropy H(F|V) is
H(F|V)=−4·(0.25)·log2(0.25)+4·(0.25)·log2(0.25)=0 bits. (11)
Similarly, for Case 2, H(V|F)=2 bits and H(F|V)=0 bits. For Case 3, H(V|F)=1 bits and H(F|V)=1 bit. For Case 4, H(V|F)=0 bits and H(F|V)=0 bits.
http://xyz.com/video?irrelevant=1&url=“http://abc.com/video?irrelevant2=2” (12)
http://xyz.com/video?irrelevant=2&url=“http://abc.com/video?irrelevant2=3” (13)
each might be transformed via a canonicalization function, C(URL) to the canonical URL
http://xyz.com/video?url=“http://abc.com/video” (14)
where the parameters “irrelevant” and “irrelevant2” are determined to be irrelevant. Thus, when certain character sequences (e.g., “http” or “://”) are detected in the value of a URL parameter (e.g., by the
http://xyz.com/video?path=cats/kittens&file=a.mpg, (15)
http://xyz.com/video?path=cats/kittens&file=b.mpg, (16)
http://xyz.com/video?path=cats/tigers&file=a.mpg, (17)
http://xyz.com/video?path=cats/tigers&file=b.mpg, (18)
the
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/177,111 US9081861B2 (en) | 2008-07-21 | 2008-07-21 | Uniform resource locator canonicalization |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/177,111 US9081861B2 (en) | 2008-07-21 | 2008-07-21 | Uniform resource locator canonicalization |
Publications (2)
Publication Number | Publication Date |
---|---|
US20130144834A1 US20130144834A1 (en) | 2013-06-06 |
US9081861B2 true US9081861B2 (en) | 2015-07-14 |
Family
ID=48524752
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/177,111 Active 2033-01-03 US9081861B2 (en) | 2008-07-21 | 2008-07-21 | Uniform resource locator canonicalization |
Country Status (1)
Country | Link |
---|---|
US (1) | US9081861B2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9516130B1 (en) * | 2015-09-17 | 2016-12-06 | Cloudflare, Inc. | Canonical API parameters |
US20180018705A1 (en) * | 2016-07-18 | 2018-01-18 | Catalyst Trade C/O Jeffrey Tognetti | Data management platform and method of bridging offline and online retargeted advertising with a telecom platform |
US20180018706A1 (en) * | 2016-07-18 | 2018-01-18 | Catalyst Trade C/O Jeffrey Tognetti | Data management platform and method of bridging offline collected data with automated online retargeted advertising |
US10083244B2 (en) | 2016-02-12 | 2018-09-25 | Costar Realty Information, Inc. | Uniform resource identifier encoding |
Families Citing this family (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110119268A1 (en) * | 2009-11-13 | 2011-05-19 | Rajaram Shyam Sundar | Method and system for segmenting query urls |
US9015043B2 (en) * | 2010-10-01 | 2015-04-21 | Google Inc. | Choosing recognized text from a background environment |
US9098477B2 (en) | 2013-05-15 | 2015-08-04 | Cloudflare, Inc. | Method and apparatus for automatically optimizing the loading of images in a cloud-based proxy service |
US9734195B1 (en) * | 2013-05-16 | 2017-08-15 | Veritas Technologies Llc | Automated data flow tracking |
US20150020178A1 (en) * | 2013-07-12 | 2015-01-15 | International Business Machines Corporation | Using Personalized URL for Advanced Login Security |
CN104572427B (en) * | 2013-10-15 | 2018-07-06 | 腾讯科技（深圳）有限公司 | A kind of method, server and the system of page test |
US10154041B2 (en) * | 2015-01-13 | 2018-12-11 | Microsoft Technology Licensing, Llc | Website access control |
US10534778B2 (en) | 2015-06-05 | 2020-01-14 | Apple Inc. | Search results based on subscription information |
US20160357737A1 (en) * | 2015-06-05 | 2016-12-08 | Apple Inc. | Networked media player with searching capabilities |
US11200207B1 (en) * | 2016-09-29 | 2021-12-14 | EMC IP Holding Company LLC | Compliance namespace separation to achieve snapshot based consistency across failover-failback while maintaining data retention regulation compliance |
CN108268498B (en) * | 2016-12-30 | 2021-06-22 | 北京国双科技有限公司 | Processing method and device for batch crawler tasks |
US10530746B2 (en) * | 2017-10-17 | 2020-01-07 | Servicenow, Inc. | Deployment of a custom address to a remotely managed computational instance |
US10866963B2 (en) | 2017-12-28 | 2020-12-15 | Dropbox, Inc. | File system authentication |
US11238026B2 (en) | 2018-11-26 | 2022-02-01 | Home Box Office, Inc. | Identifier technology for entertainment data |
CN113297847B (en) * | 2020-02-21 | 2023-09-05 | 南京烽火星空通信发展有限公司 | Http protocol information extraction method and device |
JP2022029280A (en) * | 2020-08-04 | 2022-02-17 | キヤノン株式会社 | Information processing apparatus, system, information processing method, and program |
US10972349B1 (en) * | 2020-08-13 | 2021-04-06 | Matthew Branton | Cryptographic verification of data inputs for executables on a network |
US11533346B2 (en) | 2021-01-05 | 2022-12-20 | Tencent America LLC | Methods and apparatuses for dynamic adaptive streaming over HTTP |
US20230059796A1 (en) * | 2021-08-05 | 2023-02-23 | Cloud Linux Software Inc. | Systems and methods for robust malware signature detection in databases |
US11895213B2 (en) * | 2022-05-20 | 2024-02-06 | Samsung Electronics Co., Ltd. | Application server assisted content management in cellular network |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6547829B1 (en) * | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20030131048A1 (en) * | 2002-01-04 | 2003-07-10 | Najork Marc A. | System and method for identifying cloaked web servers |
US20060218143A1 (en) * | 2005-03-25 | 2006-09-28 | Microsoft Corporation | Systems and methods for inferring uniform resource locator (URL) normalization rules |
US20070208703A1 (en) * | 2006-03-03 | 2007-09-06 | Microsoft Corporation | Web forum crawler |
US20080091685A1 (en) * | 2006-10-13 | 2008-04-17 | Garg Priyank S | Handling dynamic URLs in crawl for better coverage of unique content |
US20090164502A1 (en) * | 2007-12-24 | 2009-06-25 | Anirban Dasgupta | Systems and methods of universal resource locator normalization |
-
2008
- 2008-07-21 US US12/177,111 patent/US9081861B2/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6547829B1 (en) * | 1999-06-30 | 2003-04-15 | Microsoft Corporation | Method and system for detecting duplicate documents in web crawls |
US20030131048A1 (en) * | 2002-01-04 | 2003-07-10 | Najork Marc A. | System and method for identifying cloaked web servers |
US6910077B2 (en) * | 2002-01-04 | 2005-06-21 | Hewlett-Packard Development Company, L.P. | System and method for identifying cloaked web servers |
US20060218143A1 (en) * | 2005-03-25 | 2006-09-28 | Microsoft Corporation | Systems and methods for inferring uniform resource locator (URL) normalization rules |
US20070208703A1 (en) * | 2006-03-03 | 2007-09-06 | Microsoft Corporation | Web forum crawler |
US20080091685A1 (en) * | 2006-10-13 | 2008-04-17 | Garg Priyank S | Handling dynamic URLs in crawl for better coverage of unique content |
US20090164502A1 (en) * | 2007-12-24 | 2009-06-25 | Anirban Dasgupta | Systems and methods of universal resource locator normalization |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9516130B1 (en) * | 2015-09-17 | 2016-12-06 | Cloudflare, Inc. | Canonical API parameters |
US10083244B2 (en) | 2016-02-12 | 2018-09-25 | Costar Realty Information, Inc. | Uniform resource identifier encoding |
US10846354B2 (en) | 2016-02-12 | 2020-11-24 | Costar Realty Information, Inc. | Uniform resource identifier encoding |
US20180018705A1 (en) * | 2016-07-18 | 2018-01-18 | Catalyst Trade C/O Jeffrey Tognetti | Data management platform and method of bridging offline and online retargeted advertising with a telecom platform |
US20180018706A1 (en) * | 2016-07-18 | 2018-01-18 | Catalyst Trade C/O Jeffrey Tognetti | Data management platform and method of bridging offline collected data with automated online retargeted advertising |
Also Published As
Publication number | Publication date |
---|---|
US20130144834A1 (en) | 2013-06-06 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9081861B2 (en) | Uniform resource locator canonicalization | |
US8095530B1 (en) | Detecting common prefixes and suffixes in a list of strings | |
US9760570B2 (en) | Finding and disambiguating references to entities on web pages | |
US8402021B2 (en) | Providing posts to discussion threads in response to a search query | |
US20090089278A1 (en) | Techniques for keyword extraction from urls using statistical analysis | |
US20070143317A1 (en) | Mechanism for managing facts in a fact repository | |
US20070239704A1 (en) | Aggregating citation information from disparate documents | |
US7310633B1 (en) | Methods and systems for generating textual information | |
JP2006018843A (en) | Dispersing search engine result by using page category information | |
JP2013516022A (en) | Cluster and present search suggestions | |
US20110225162A1 (en) | Assigning Tags to Digital Content | |
CA2713932C (en) | Automated boolean expression generation for computerized search and indexing | |
US20100287191A1 (en) | Tracking and retrieval of keywords used to access user resources on a per-user basis | |
US20100005088A1 (en) | Using An Encyclopedia To Build User Profiles | |
US10810181B2 (en) | Refining structured data indexes | |
JP2004280569A (en) | Information monitoring device | |
US8667013B1 (en) | Systems and methods for determining an article association measure | |
US10380195B1 (en) | Grouping documents by content similarity | |
EP2662785A2 (en) | A method and system for non-ephemeral search | |
JP2003173351A (en) | Method, device, program and storage medium for analysis, collection and retrieval of information | |
US11726972B2 (en) | Directed data indexing based on conceptual relevance | |
Ali et al. | What’s changed? measuring document change in web crawling for search engines | |
US9996621B2 (en) | System and method for retrieving internet pages using page partitions | |
JP5903370B2 (en) | Information search apparatus, information search method, and program | |
US8930373B2 (en) | Searching with exclusion tokens |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LLOYD, MATTHEW;BERGAN, THOMAS;REEL/FRAME:021553/0021Effective date: 20080716 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044334/0466Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |