EP2183881B1 - Cross-domain communication - Google Patents
Cross-domain communication Download PDFInfo
- Publication number
- EP2183881B1 EP2183881B1 EP08796891.3A EP08796891A EP2183881B1 EP 2183881 B1 EP2183881 B1 EP 2183881B1 EP 08796891 A EP08796891 A EP 08796891A EP 2183881 B1 EP2183881 B1 EP 2183881B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- information
- child
- internet domain
- document
- documents
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Not-in-force
Links
- 238000004891 communication Methods 0.000 title description 33
- 238000000034 method Methods 0.000 claims description 37
- 239000012634 fragment Substances 0.000 claims description 18
- 230000005540 biological transmission Effects 0.000 claims 3
- 230000004044 response Effects 0.000 description 24
- 230000015654 memory Effects 0.000 description 12
- 230000006870 function Effects 0.000 description 11
- 238000010586 diagram Methods 0.000 description 7
- 238000004590 computer program Methods 0.000 description 6
- 230000009471 action Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000008569 process Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 2
- 241000593989 Scardinius erythrophthalmus Species 0.000 description 1
- 230000006399 behavior Effects 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000013467 fragmentation Methods 0.000 description 1
- 238000006062 fragmentation reaction Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 201000005111 ocular hyperemia Diseases 0.000 description 1
- 230000000644 propagated effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/34—Network arrangements or protocols for supporting network services or applications involving the movement of software or configuration parameters
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
Definitions
- This specification relates to communications between different Internet domains.
- the Internet applications are web pages having embedded JavaScript applications that display the content to a user when a user views the web page with an Internet browser.
- Some browsers incorporate security models that limit communication between different Internet domains. For example, a web application on Internet domain A can make a request for information from a server on Internet domain B, but cannot receive the response back to an application associated with Internet domain A (instead, the response is sent to an application or element associated with Internet domain B). This may prevent the application associated with Internet domain A from manipulating or displaying the requested information.
- Non-patent disclosure " Cross Domain XMLHttpRequest using an IFrame Proxy" of J. Burke, 13 July 2007 , XP055151199, discloses a technique to allow cross domain requests based on using iframes that communicate with each other by changing URL fragment identifiers.
- Non-patent disclosure " Curiosity is thought: Cross-document messaging hack" of J. Couvreur, 26 July 2007 , XP055150848, discloses a cross-document messaging hack that allows two iframes in different domains to communicate.
- interdomain communication can be simplified using a JavaScript library that can be referenced by a pointer embedded in a web page.
- interdomain communication can be accomplished without hosting a file on a web server requesting the communications.
- interdomain communications using a single request and response can be executed.
- interdomain communications is accomplished without restrictions on the size of information passed between two Internet domains.
- the speed of interdomain communication can be increased by using iframe content requests for cached files.
- a web page hosted on a first Internet domain can include JavaScript (or a pointer to JavaScript hosted elsewhere) that initiates a request for information hosted on a second Internet domain.
- Applications such as JavaScript applications, hosted on the web page at the first domain can receive this information for manipulation or display.
- inline frames are used for interdomain communications (also referred to as cross-domain communications).
- an iframe associated with an Internet domain "foo.com” can request information, such as a user's calendar data, from a server at a second Internet domain "bar.com.”
- the server at bar.com returns the requested calendar data to the iframe, which is then associated with bar.com.
- the iframe can generate child iframes that are associated with foo.com, and the iframe can pass the information to the child iframes, where the information is available to objects hosted at foo.com, such as a JavaScript application that integrates and/or modifies the user's calendar data and displays it on the webpage,.
- FIG. 1 is a schematic diagram of an exemplary system 100 for communicating information across different Internet domains.
- the system 100 can include a web server 102 that hosts a web page 104 at a first Internet domain 106.
- Content documents within the web page 104 can request and receive information, such as user data 108, from a data server 110 associated with a second Internet domain 112.
- the content documents within the web page that facilitate communication between different Internet domains can include web page elements used to contain content (regardless of whether the content is displayed or accessible to a user viewing the website).
- the content documents can include iframes, frames, and xframes.
- the content documents are explained in terms of iframes, although the use of iframes in the description is not intended to be limiting.
- the web server 102 can make the received information available to applications, such as a JavaScript application 118 embedded in the web page 104, running on the first Internet domain 106.
- the web server 102 can make this information available by passing the received information from content documents associated the second Internet domain 112 to a content document associated with the first Internet domain 106.
- the application 118 can manipulate and display the information to a user 120 viewing the web page 104 on a client 122 as illustrated in FIG. 1 .
- the content document 114 embedded in the web page 104 is configured to receive content from the second Internet domain.
- the content document 114 (now referred to as the parent content document 114 for clarity) can generate child container documents that are associated with the first Internet domain 106 that is hosting the web page 104.
- the received content can then be passed from the parent container document to the generated child container documents 116.
- the web page 104 (or the application 118 embedded in the web page 104) can request the content from the child container documents 116 because the application 118 and the child container documents 116 share the same domain, namely, the first Internet domain 106.
- applications on the first Internet domain 106 can access and manipulate the data from the data server 110 even though different Internet domains host the data server 110 and the application 118.
- the application 118 can receive the user's calendar data and use it in a JavaScript application, which can modify and display the calendar data to the user 120.
- the user 120 can direct a browser on the client 122 to the web page 104.
- the web page 104 using, for example, JavaScript, initiates cross-domain communications, and a JavaScript application receives a user's calendar data for display by the web page 104.
- the data requested during cross-domain communications included a user's data.
- a user may have information, such as photos, calendar dates, contact information, bank account information, insurance information, email, etc., stored at the data server 110.
- the web page 104 may be able to access this user data after obtaining permission from the user.
- the web page 104 can direct a user to the data server 110 so that the user can authorize the web page 104 to access the information stored at the data server 110.
- the data server can provide the web page with a token that evidences the user's permission for the web page to access the user's data.
- the data server can include data that is not originated by or related to the user, such as third party data 124.
- the third party data can include dictionary definitions, public records information (e.g., white pages), the content of other web pages or blogs, etc.
- an application embedded in the web page can manipulate the third party information. For example, if the third party information includes names and phone numbers, such as in the white pages, the application may combine and present the names and numbers to a user. The user can select a name, and a telephony application hosted at the web server 102 can dial the associated number so that the user can speak to the selected person, for example, through a microphone at the client.
- FIG. 2 is a box diagram of an exemplary system 200 showing more detailed interactions between two servers that are hosted on different Internet domains.
- the system 200 can include a server at a first Internet domain, which is referred to as "foo.com” 202 for the purposes of illustration.
- Applications hosted at foo.com 202 can use content documents, such as iframes, to receive information from a different Internet domain, such as the Internet domain "bar.com” 204.
- executable code such as JavaScript embedded in a web page, can generate the iframes and handle portions of the cross-domain communication.
- the cross-domain communications can start when a user navigates to foo.com 202 using an Internet browser.
- foo.com 202 hosts a hypertext markup language (HTML) document, or web page, that incorporates a uniform resource identifier (URI) that points to a JavaScript library used for cross-domain communications.
- HTTP hypertext markup language
- URI uniform resource identifier
- This library is represented in FIG. 2 as the XD library 206, and the functions defined by the library can be executed by the Internet browser viewing the web page.
- the browser calls the library to generate an iframe 208 that is associated with the foo.com Internet domain.
- a container generator 210 included in the library can generate the iframe along with the iframe's properties.
- the code within the library can specify that the iframe have an attribute of "hidden" so that the iframe is not visible when the browser displays the web page.
- the library also can initiate a request for information from bar.com 204 using elements associated with the iframe.
- Functions within the library can place the URI and appended data in the form element 216's ACTION attribute, which uses the URI to specify bar.com as the server to process the information request submitted by the form element 216.
- the browser executing the form element 216 can have browser limitations that restrict the size of data included in the ACTION attribute.
- the requested information can be specified using data, or parameters, included in the form's fields (or directly in the POST or GET transactions). For example, if the request is for a user's photographs stored at bar.com, the parameters may specify a token authenticating the request as authorized by the user, an identifier that specifies the user's account, a particular album from which to retrieve the photographs, how many photographs to retrieve, size limits for photographs retrieved, etc.
- An arrow 214 indicates the submission of the request for information from, for example, the form 216 to bar.com 204.
- the browser can associate the iframe 208 with the Internet domain bar.com.
- the iframe having the new association is represented by the separate dashed box 212 in FIG. 2 .
- the browser may make this association as part of a standard browser behavior, where a content document, such as the iframe, is associated with an Internet domain from which it requests content.
- a polling process can begin, which checks for the existence of additional child container documents within the iframe 212.
- the child container documents are child iframes.
- the XD library 206 can generate the child iframes in response to a receipt of the requested information from bar.com 204.
- the presence of a child container document can indicate that the requested information has been received and is accessible to web pages, applications, or other executable instructions that are associated with foo.com 202.
- Bar.com 204 can fulfill the request for the information using parameters included in the request, for example, the number of photographs to retrieve.
- the return of the requested information is indicated by an arrow 218.
- the requested information can be passed within a single element, such as in a ⁇ SRC> tag of a document (referred to as to "response page") that is returned in response to the requested made by the iframe 212 now associated with bar.com.
- the server at bar.com 204 can pad the URI of the ⁇ SRC> attribute of the response page that the server sends to the iframe 212.
- the server appends the URI that specifies the bar.com domain with the requested information.
- the requested information can be passed within other elements, such as name attribute, the language attribute, or the ID attribute.
- executable code at foo.com 202 can generate one or more child container documents, such as child iframes that are associated with the foo.com domain.
- the received information can be transmitted to the child container documents.
- the response document can use the XD library 206 to generate child iframes within the iframe 212 (now referred to as the "parent iframe 212" for purposes of clarity) associated with bar.com.
- executable code that generates the one or more child container documents can be hosted on a third party server and can be referenced.
- a response page returned from bar.com can reference the XD library 206 hosted on the third party server in order to perform the described functions.
- the parent iframe 212 can pass the information to one or more child iframes by including the information in a ⁇ SRC> attribute of the generated child iframes.
- the response page can use the XD library to create a child iframe and point its ⁇ SRC> attribute to a nonexistent file on the foo.com domain.
- the response page also can, for example, append the information received from boo.com to the URI, so that the format of the URI included in the ⁇ SRC> attribute is http://foo.com/non-existent#$ ⁇ information request from boo.com ⁇ .
- the server at foo.com to returns an error page that has the domain foo.com when the above URI for a non-existent page is used in the ⁇ SRC> attribute.
- the response page can point the child iframe's ⁇ SRC> attribute to a file existing on foo.com, such as an image file or a Cascading Style Sheets (CSS) file.
- a file existing on foo.com such as an image file or a Cascading Style Sheets (CSS) file.
- CCS Cascading Style Sheets
- the response page can point the child iframe's ⁇ SCR> attribute to a file that has a high likelihood of existing on foo.com.
- a browser like Firefox (available from Mozilla Corp. in Mountain View, CA) and Safari (available from Apple, Inc. in Cupertino, CA)
- the child iframe can point to a "robots.txt” file hosted on that domain (e.g., " http://foo.com/robots.txt").
- the rebots.txt file may exist on many domains to inform search engines whether and what web pages can be indexed on the domain.
- the response page can point the child iframe's ⁇ SCR> attribute to the current page as the dummy resource.
- the current page can be executed so that an initialization function (e.g., init () function) that starts the described interdomain communication is called by the XD library when the page is loaded.
- an initialization function e.g., init () function
- the XD library detects that the call is made from an iframe, the initialization function is skipped.
- the iframe can be prevented from loading the page entirely.
- the child container documents have attributes specifying they should not be visible. For example, if a child iframe has an attribute specifying that it is "hidden," a user would not see the error page or the requested file returned to the child iframe. In another example, if a parent iframe has an attribute specifying that it is hidden, any child iframes contained within the parent iframe are automatically hidden as well.
- the browser running on the client 122 may have limitations on the amount of data that can be included in the URI.
- the requested information can be fragmented and additional child container documents can be generated, where each of the child container documents receives a piece of the fragmented information.
- the browser may have a limitation that prohibits data exceeding 4k from being passed using the ⁇ SRC> attribute.
- the parent iframe 212 can generate 4 child iframes.
- the parent iframe 212 can use the XD library to fragment the received information into 4 fragments - 4k, 4k, 4k, and 1 k. Each fragment can be passed to a child iframe.
- FIG. 2 illustrates one implementation where the XD library 206 transmits the fragments of information to the child iframes "response (0)" 220 through "response (n-1)" 222.
- information can be generated that specifies how many fragments of information exist.
- the XD library 206 can create an additional child iframe "response-info" 224 that includes information about the response including how many fragments the response is broken into, the order into which the fragments should be assembled, formatting requirements for the assembled information, error-checking information, the starting and ending points of individual files, etc. within the assembled (or unassembled) information, etc.
- applications hosted on foo.com can retrieve the information.
- the web page (or another set executable instructions) executed by the browser can initiate a polling process to determine whether one or more of the child container documents are available.
- the web page can poll to determine whether the iframe response-info 224 exists. If so, the web page can retrieve the information from each of the child iframes because the child iframes share the same Internet domain, namely, foo.com. Some browser implementations may permit this intra-domain communication.
- FIG. 2 shows the retrieval of information from the child iframes, as indicated by an arrow 226.
- the XD library retrieves the information from the child iframes and assembles it. The information is then passed to the web page (or other applications) hosted on the foo.com as indicated by an arrow 228.
- the web page can assemble the retrieved information from each of the child container documents based on information, for example, stored in iframe response-info 224.
- the web page can access the child frames using hierarchical element calls, for example, iframe[i].iframe.[j], where iframe[i] is one of the parent iframes associated with bar.com and iframe.[j] is one of the child iframes associated with foo.com.
- the web page manipulates the information.
- the web page can use the information in an application hosted on foo.com, such an online photo-editing program embedded in the web page and displayed to a user.
- the application can present the photo to a user who can, for example, apply filters, crop the photo, remove red-eye, etc.
- the modified data then can be uploaded to the source from which it was obtained.
- an iframe such as the iframe 208 associated with foo.com can upload the edited photos back to bar.com using the form 216 to submit the information along with instructions specifying how bar.com should use the photos (e.g., store the photos or replace the originals).
- the form 216 can submit the photo data in a substantially similar way as the photos were requested.
- FIG. 3 is a flow chart of an exemplary method 300 for interdomain communications presented in a summary fashion for clarity.
- a web server, a browser at a client, or a combination of both can execute the method.
- the method 300 starts in step 302, where a first container document is generated.
- the browser can execute JavaScript code on a web page that generates a parent iframe with a hidden attribute.
- the parent iframe can be initially associated with the domain that is hosting the web page.
- step 304 information can be requested from a second Internet domain that is different from the one hosting the web page.
- the parent iframe can use a HTML form to request information from the second Internet domain.
- the information can be received by the first container document.
- the browser can associate the parent iframe with the second Internet domain.
- the parent iframe can receive the information as part of a padded URI of a ⁇ SRC> attribute of a response page returned by a server at the second Internet domain.
- the information can be passed from the first container document to a communication module.
- the parent iframe can call a JavaScript application that has a communication module (defined by executable functions) that stores the information.
- the JavaScript application may be part of a library that is reference by the web page or directly within the parent iframe.
- the parent iframe associated with the second Internet domain can use the XD library to generate child iframes associated with the first Internet domain (the one which hosts the web page).
- the parent iframe can generate one or more child iframes based on the URI limits of the browser accessing the web page.
- the parent iframe can use the XD library to fragment the information into chucks that are equal or less than the URI limits. After fragmentation, the communication module can pass each chuck to a child iframe. If the child iframes exist, the method 300 moves to step 312. If the child iframes do not exist (or information about the frames, such as the iframe response-info do not exist), step 310 is repeated until the child iframes are available.
- the information received from the second Internet domain is transmitted from the child container documents to one or more applications hosted on the first Internet domain.
- the web page can use the XD library to retrieve and reassemble the information stored in the child iframes.
- the web page hosted on foo.com can directly access the information held by the child iframes because the child iframes and the web page are associated with the same Internet domain. The web page can then manipulate and display the retrieved information to a user viewing the web page.
- the method 300 can end.
- FIG. 4 is a flow chart of an exemplary method 400 for communicating between different Internet domains while avoiding size restrictions.
- a web server, a client having an Internet browser, or a combination of both can execute the method 400.
- the method 400 can begin in step 402 when information requested from a second Internet domain is received at a first Internet domain, as described previously (e.g., in association with step 306).
- this information can be included in a single response.
- a data server at bar.com can return request information to a web server at foo.com in a ⁇ SRC> attribute of a single response page.
- some internet browsers, such as Internet Explorer permit unlimited URI lengths following the character "?” in the ⁇ SRC> attribute. The "?” requests can be used to make requests to a remote server and can be substantially unlimited in length.
- a parent iframe can receive the response page.
- the parent iframe can be associated with the second Internet domain and may not be able to share information with applications hosted at the first Internet domain. Instead, the parent iframe can generate a child iframe that is associated with the first Internet domain and pass the information to the child iframe.
- Internet browsers - which are viewing the web page that has the iframes - can have size limitations that prevent passing data from a parent to a child iframe if the data exceeds the size limitations. For example, an internet browser can limit the amount of data based after a "#" character in a ⁇ SRC> field. The "#" requests can be used when passing information within a client browser.
- the Internet browsers and their associated limits can be stored in a file accessible to the XD library, for example.
- the XD library can determine the browser type based on the request for the web page and may use the file to determine whether the identified browser has any browser limitations.
- the XD library can determine that the requesting Internet browser is Microsoft's Internet Explorer (IE) Version 6 (available from Microsoft Corp., located in Redmond, WA) based on information received in the requests for the web page from the web server.
- the XD library can access the file to determine that this version of IE has URI handling capabilities that are limited to 4k of information.
- a number of child container documents needed to accommodate the information from the second Internet domain is calculated.
- the XD library can divide the total size of the received information by the URI handling capabilities of the browser to determine how many child iframes to generate.
- the received information is fragmented into portions that do not exceed the data handling capabilities of the browser.
- the parent iframe can call the XD library to divide the received information into fragments that are equal to or less than the data limitations of the identified browser requesting to view the web site.
- the child container documents are generated and provided the fragmented information.
- the parent iframe can generate the number of child iframes as determined in step 406.
- the parent iframe can request that the XD library pass the fragments of the information from the parent iframe to the child iframes.
- the information is passed from each of the child container documents to the website.
- the website at the first Internet domain can poll for the existence of one or more child iframes created by the parent iframe. Once the existence is detected, the website can access the XD library to retrieve and reassembly the information stored in each of the child iframes.
- the information can be appended to a URI within a ⁇ SRC> attribute of each iframe.
- the XD library can parse the URI until it identifies a portion that includes the information from the second Internet domain. It can retrieve this information and combine it with information extracted from the other child iframes (if additional child iframes exist).
- the web page can access the information for manipulation or for display to the user viewing the web page.
- the method 400 can end.
- FIGs. 5A and 5B are an exemplary screenshot of a webpage that modifies and displays information hosted on a different Internet domain and a schematic of exemplary components used to generate the webpage, respectively.
- FIG. 5A is an exemplary screen shot of a web page 502 hosted at an Internet domain CalendarManager.com.
- a user can use the browser 504 to load or execute instructions embedded in the web page 502, such as JavaScript instructions that initiate cross-domain communications between a web server hosting the viewed web page and, for example, a data server having the user's calendar data.
- the user authorizes the web server to retrieve the user's data from the data server.
- a day planner application embedded in the web page can receive the information using the interdomain communications discussed previously and can display this information to the user.
- the application 506 displays the calendar data so that a user can see a summary of each day within a month.
- the day can expand with a more detailed view as shown in expanded day 508.
- the application can modify, for example, the format of the data so it can have different colors, fonts, sizes, etc. based on when an event occurs, whether events overlap, etc.
- the application 506 can integrate data from several data servers.
- the application 506 has several tabs, such as a calendar tab (which is currently selected), a contacts tab, a projects tab, and a next action tab.
- Each of these tabs may display data that is gathered from different data servers and integrated into the single application 506 displayed on the web page 502.
- the application can obtain the content displayed in the contact tab from an email server that stores email contact information for the user.
- FIG. 5B shows a schematic diagram of elements used to generate the application 506 embedded in the web page 502.
- a server 510 at ThirdPartyDomain.com returns the calendar data 512 as indicated by an arrow labeled A.
- a hidden parent iframe 514 associated with the ThirdPartyDomain.com receives the calendar data and calls a JavaScript library to 515 to receive the calendar data (indicated by an arrow labeled B) and generate three hidden child iframes 516 (as indicated by an arrow labeled C), where each child iframe is associated with the CalendarManager.com domain.
- the parent iframe uses the JavaScript library 515 to fragment the calendar data based on the browser 504's URI handling capabilities and passes fragments of the calendar data to the child iframes.
- the calendar application 506 hosted on CalendarManager.com then can access the calendar data by calling the XD library to assemble the data within the child iframes also associated with CalendarManager.com and pass the calendar data to the application 506.
- the calendar application can then manipulate and display the calendar data as described above.
- FIG. 6 is a schematic diagram of a computer system 600.
- the system 600 can be used for the operations described in association with any of the computer-implement methods described previously, according to one implementation.
- the system 600 is intended to include various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the system 600 also can include mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices.
- the system can include portable storage media, such as, Universal Serial Bus (USB) flash drives.
- USB flash drives may store operating systems and other applications.
- the USB flash drives can include input/output components, such as a wireless transmitter or USB connector that may be inserted into a USB port of another computing device.
- the system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 are interconnected using a system bus 650.
- the processor 610 is capable of processing instructions for execution within the system 600. In one implementation, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor.
- the processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630 to display graphical information for a user interface on the input/output device 640.
- the memory 620 stores information within the system 600.
- the memory 620 is a computer-readable medium.
- the memory 620 is a volatile memory unit.
- the memory 620 is a non-volatile memory unit.
- the storage device 630 is capable of providing mass storage for the system 600.
- the storage device 630 is a computer-readable medium.
- the storage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device.
- the input/output device 640 provides input/output operations for the system 600.
- the input/output device 640 includes a keyboard and/or pointing device.
- the input/output device 640 includes a display unit for displaying graphical user interfaces.
- the features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them.
- the apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output.
- the described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device.
- a computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result.
- a computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data.
- a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks.
- Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- semiconductor memory devices such as EPROM, EEPROM, and flash memory devices
- magnetic disks such as internal hard disks and removable disks
- magneto-optical disks and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).
- ASICs application-specific integrated circuits
- the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.
- a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.
- the features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them.
- the components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- LAN local area network
- WAN wide area network
- peer-to-peer networks having ad-hoc or static members
- grid computing infrastructures and the Internet.
- the computer system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a network, such as the described one.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Description
- This specification relates to communications between different Internet domains.
- With the advent of Web 2.0, Internet applications that combine content from more than one source are becoming more common. In some implementations, the Internet applications are web pages having embedded JavaScript applications that display the content to a user when a user views the web page with an Internet browser.
- Some browsers incorporate security models that limit communication between different Internet domains. For example, a web application on Internet domain A can make a request for information from a server on Internet domain B, but cannot receive the response back to an application associated with Internet domain A (instead, the response is sent to an application or element associated with Internet domain B). This may prevent the application associated with Internet domain A from manipulating or displaying the requested information.
- Non-patent disclosure "Cross Domain XMLHttpRequest using an IFrame Proxy" of J. Burke, 13 July 2007, XP055151199, discloses a technique to allow cross domain requests based on using iframes that communicate with each other by changing URL fragment identifiers.
- Non-patent disclosure "Curiosity is bliss: Cross-document messaging hack" of J. Couvreur, 26 July 2007, XP055150848, discloses a cross-document messaging hack that allows two iframes in different domains to communicate.
- In general, this document describes interdomain communications.
- In a first general aspect, a computer-implemented method according to
claim 1 is described. - Preferred embodiments of the method are recited in the dependent claims.
- In a second general aspect, a system according to
claim 13 is described. - The systems and techniques described here may provide one or more of the following advantages. First, interdomain communication can be simplified using a JavaScript library that can be referenced by a pointer embedded in a web page. Second, interdomain communication can be accomplished without hosting a file on a web server requesting the communications. Third, interdomain communications using a single request and response can be executed. Fourth, interdomain communications is accomplished without restrictions on the size of information passed between two Internet domains. Fifth, the speed of interdomain communication can be increased by using iframe content requests for cached files.
- The details of one or more implementations of the interdomain communication feature are set forth in the accompanying drawings and the description below. Other features and advantages of the interdomain communication feature will be apparent from the description and drawings, and from the claims.
-
-
FIG. 1 is a schematic diagram of an exemplary system for communicating information across different Internet domains. -
FIG. 2 is a box diagram of an exemplary system showing more detailed interactions between two servers that are hosted on different Internet domains. -
FIG. 3 is a flow chart of an exemplary method for interdomain communications. -
FIG. 4 is a flow chart of an exemplary method for communicating between different Internet domains while avoiding size restrictions. -
FIGs. 5A and 5B are an exemplary screenshot of a webpage that modifies and displays information hosted on a different Internet domain and a schematic of exemplary components used to generate the webpage, respectively. -
FIG. 6 is a schematic diagram of a general computer system. - Like reference symbols in the various drawings indicate like elements.
- This document describes systems and techniques for communications between different Internet domains. In some implementations, a web page hosted on a first Internet domain can include JavaScript (or a pointer to JavaScript hosted elsewhere) that initiates a request for information hosted on a second Internet domain. Applications, such as JavaScript applications, hosted on the web page at the first domain can receive this information for manipulation or display.
- In some implementations, inline frames (or iframes) are used for interdomain communications (also referred to as cross-domain communications). For example, an iframe associated with an Internet domain "foo.com" can request information, such as a user's calendar data, from a server at a second Internet domain "bar.com." The server at bar.com returns the requested calendar data to the iframe, which is then associated with bar.com. The iframe can generate child iframes that are associated with foo.com, and the iframe can pass the information to the child iframes, where the information is available to objects hosted at foo.com, such as a JavaScript application that integrates and/or modifies the user's calendar data and displays it on the webpage,.
-
FIG. 1 is a schematic diagram of anexemplary system 100 for communicating information across different Internet domains. Thesystem 100 can include aweb server 102 that hosts aweb page 104 at afirst Internet domain 106. Content documents within theweb page 104 can request and receive information, such asuser data 108, from adata server 110 associated with asecond Internet domain 112. - The content documents within the web page that facilitate communication between different Internet domains can include web page elements used to contain content (regardless of whether the content is displayed or accessible to a user viewing the website). For example, the content documents can include iframes, frames, and xframes. For the purposes of illustration, the content documents are explained in terms of iframes, although the use of iframes in the description is not intended to be limiting.
- The
web server 102 can make the received information available to applications, such as a JavaScriptapplication 118 embedded in theweb page 104, running on thefirst Internet domain 106. Theweb server 102 can make this information available by passing the received information from content documents associated thesecond Internet domain 112 to a content document associated with thefirst Internet domain 106. Theapplication 118 can manipulate and display the information to auser 120 viewing theweb page 104 on aclient 122 as illustrated inFIG. 1 . - In the
exemplary system 100, thecontent document 114 embedded in theweb page 104 is configured to receive content from the second Internet domain. The content document 114 (now referred to as theparent content document 114 for clarity) can generate child container documents that are associated with thefirst Internet domain 106 that is hosting theweb page 104. The received content can then be passed from the parent container document to the generatedchild container documents 116. The web page 104 (or theapplication 118 embedded in the web page 104) can request the content from thechild container documents 116 because theapplication 118 and thechild container documents 116 share the same domain, namely, thefirst Internet domain 106. - In some implementations, applications on the
first Internet domain 106, such as theapplication 118, can access and manipulate the data from thedata server 110 even though different Internet domains host thedata server 110 and theapplication 118. For example, theapplication 118 can receive the user's calendar data and use it in a JavaScript application, which can modify and display the calendar data to theuser 120. Theuser 120 can direct a browser on theclient 122 to theweb page 104. When the browser executes theweb page 104, theweb page 104 using, for example, JavaScript, initiates cross-domain communications, and a JavaScript application receives a user's calendar data for display by theweb page 104. - In the examples described above, the data requested during cross-domain communications included a user's data. For example, a user may have information, such as photos, calendar dates, contact information, bank account information, insurance information, email, etc., stored at the
data server 110. In some implementations, theweb page 104 may be able to access this user data after obtaining permission from the user. For example, theweb page 104 can direct a user to thedata server 110 so that the user can authorize theweb page 104 to access the information stored at thedata server 110. The data server can provide the web page with a token that evidences the user's permission for the web page to access the user's data. - In other implementations, the data server can include data that is not originated by or related to the user, such as third party data 124. For example, the third party data can include dictionary definitions, public records information (e.g., white pages), the content of other web pages or blogs, etc. After the cross-domain request and receipt of the third party information, an application embedded in the web page can manipulate the third party information. For example, if the third party information includes names and phone numbers, such as in the white pages, the application may combine and present the names and numbers to a user. The user can select a name, and a telephony application hosted at the
web server 102 can dial the associated number so that the user can speak to the selected person, for example, through a microphone at the client. -
FIG. 2 is a box diagram of anexemplary system 200 showing more detailed interactions between two servers that are hosted on different Internet domains. Thesystem 200 can include a server at a first Internet domain, which is referred to as "foo.com" 202 for the purposes of illustration. Applications hosted at foo.com 202 can use content documents, such as iframes, to receive information from a different Internet domain, such as the Internet domain "bar.com" 204. In some implementations, executable code, such as JavaScript embedded in a web page, can generate the iframes and handle portions of the cross-domain communication. - The cross-domain communications can start when a user navigates to foo.com 202 using an Internet browser. In this example, foo.com 202 hosts a hypertext markup language (HTML) document, or web page, that incorporates a uniform resource identifier (URI) that points to a JavaScript library used for cross-domain communications. This library is represented in
FIG. 2 as theXD library 206, and the functions defined by the library can be executed by the Internet browser viewing the web page. - In certain implementations, the browser calls the library to generate an
iframe 208 that is associated with the foo.com Internet domain. More specifically, acontainer generator 210, included in the library can generate the iframe along with the iframe's properties. For example, the code within the library can specify that the iframe have an attribute of "hidden" so that the iframe is not visible when the browser displays the web page. - The library also can initiate a request for information from bar.com 204 using elements associated with the iframe. For example, functions within the library can generate an
HTML form element 216 that has a method=POST attribute that transmits a request for information to bar.com using an HTTP post request. Use of the HTTP post transaction can permit an unrestricted amount of data to be included in the request for information. In another example, theHTML form element 216 can transmit the request for information using a method=GET attribute. Aform element 216 having a method=GET attribute can append data used to specify the requested information to a URI (in this case bar.com). Functions within the library can place the URI and appended data in theform element 216's ACTION attribute, which uses the URI to specify bar.com as the server to process the information request submitted by theform element 216. In some implementations, the browser executing the form element 216 (or "form" 216) can have browser limitations that restrict the size of data included in the ACTION attribute. - In some implementations, the requested information can be specified using data, or parameters, included in the form's fields (or directly in the POST or GET transactions). For example, if the request is for a user's photographs stored at bar.com, the parameters may specify a token authenticating the request as authorized by the user, an identifier that specifies the user's account, a particular album from which to retrieve the photographs, how many photographs to retrieve, size limits for photographs retrieved, etc.
- An
arrow 214 indicates the submission of the request for information from, for example, theform 216 to bar.com 204. In some implementations, after submitting theform 216, the browser can associate theiframe 208 with the Internet domain bar.com. The iframe having the new association is represented by the separate dashedbox 212 inFIG. 2 . The browser may make this association as part of a standard browser behavior, where a content document, such as the iframe, is associated with an Internet domain from which it requests content. - In some implementations after the request for information is submitted, for example, by executing functions within the
XD library 206, a polling process can begin, which checks for the existence of additional child container documents within theiframe 212. In some implementations, the child container documents are child iframes. For example, theXD library 206 can generate the child iframes in response to a receipt of the requested information from bar.com 204. The presence of a child container document can indicate that the requested information has been received and is accessible to web pages, applications, or other executable instructions that are associated with foo.com 202. - Bar.com 204 can fulfill the request for the information using parameters included in the request, for example, the number of photographs to retrieve. The return of the requested information is indicated by an
arrow 218. In some implementations, the requested information can be passed within a single element, such as in a <SRC> tag of a document (referred to as to "response page") that is returned in response to the requested made by theiframe 212 now associated with bar.com. For example, the server at bar.com 204 can pad the URI of the <SRC> attribute of the response page that the server sends to theiframe 212. InFIG. 2 , the server appends the URI that specifies the bar.com domain with the requested information. - In other implementations, the requested information can be passed within other elements, such as name attribute, the language attribute, or the ID attribute.
- In some implementations, executable code at foo.com 202 can generate one or more child container documents, such as child iframes that are associated with the foo.com domain. The received information can be transmitted to the child container documents. For example, the response document can use the
XD library 206 to generate child iframes within the iframe 212 (now referred to as the "parent iframe 212" for purposes of clarity) associated with bar.com. - In other implementations, executable code that generates the one or more child container documents can be hosted on a third party server and can be referenced. For example, a response page returned from bar.com can reference the
XD library 206 hosted on the third party server in order to perform the described functions. - In some implementations, the
parent iframe 212 can pass the information to one or more child iframes by including the information in a <SRC> attribute of the generated child iframes. For example, the response page can use the XD library to create a child iframe and point its <SRC> attribute to a nonexistent file on the foo.com domain. The response page also can, for example, append the information received from boo.com to the URI, so that the format of the URI included in the <SRC> attribute is http://foo.com/non-existent#${information request from boo.com}.
In some implementations, the server at foo.com to returns an error page that has the domain foo.com when the above URI for a non-existent page is used in the <SRC> attribute. - In other implementations, the response page can point the child iframe's <SRC> attribute to a file existing on foo.com, such as an image file or a Cascading Style Sheets (CSS) file. This, in some implementations, can save time when generating the child container documents because the browser does not have to make a request from the server at foo.com if the specified file has already been cached by the browser. If the browser has cached the content specified in the <SCR> attribute of the child iframe, the browser can return it from local storage instead of requesting it from the web server.
- In another implementation, the response page can point the child iframe's <SCR> attribute to a file that has a high likelihood of existing on foo.com. For example, for a browser like Firefox (available from Mozilla Corp. in Mountain View, CA) and Safari (available from Apple, Inc. in Cupertino, CA), where accessing a non-existing page results in a error page response, instead of requesting a "non-existent" resource, the child iframe can point to a "robots.txt" file hosted on that domain (e.g., " http://foo.com/robots.txt"). The rebots.txt file may exist on many domains to inform search engines whether and what web pages can be indexed on the domain.
- In another example, for a browser like IE, where accessing a non-existing page results in an error, the response page can point the child iframe's <SCR> attribute to the current page as the dummy resource. The current page can be executed so that an initialization function (e.g., init () function) that starts the described interdomain communication is called by the XD library when the page is loaded. However, if the XD library detects that the call is made from an iframe, the initialization function is skipped. In another implementation, if the XD library detects that the call is made from an iframe, the iframe can be prevented from loading the page entirely.
- In certain implementations, the child container documents have attributes specifying they should not be visible. For example, if a child iframe has an attribute specifying that it is "hidden," a user would not see the error page or the requested file returned to the child iframe. In another example, if a parent iframe has an attribute specifying that it is hidden, any child iframes contained within the parent iframe are automatically hidden as well.
- In some implementations, the browser running on the
client 122 may have limitations on the amount of data that can be included in the URI. In this situation, the requested information can be fragmented and additional child container documents can be generated, where each of the child container documents receives a piece of the fragmented information. - For example, the browser may have a limitation that prohibits data exceeding 4k from being passed using the <SRC> attribute. If the received information is 13k, then the
parent iframe 212 can generate 4 child iframes. Theparent iframe 212 can use the XD library to fragment the received information into 4 fragments - 4k, 4k, 4k, and 1 k. Each fragment can be passed to a child iframe.FIG. 2 illustrates one implementation where theXD library 206 transmits the fragments of information to the child iframes "response (0)" 220 through "response (n-1)" 222. - In some implementations, information can be generated that specifies how many fragments of information exist. For example, the
XD library 206 can create an additional child iframe "response-info" 224 that includes information about the response including how many fragments the response is broken into, the order into which the fragments should be assembled, formatting requirements for the assembled information, error-checking information, the starting and ending points of individual files, etc. within the assembled (or unassembled) information, etc. - After the child or child container documents are generated, in some implementations, applications hosted on foo.com can retrieve the information. The web page (or another set executable instructions) executed by the browser can initiate a polling process to determine whether one or more of the child container documents are available.
- For example, the web page can poll to determine whether the iframe response-
info 224 exists. If so, the web page can retrieve the information from each of the child iframes because the child iframes share the same Internet domain, namely, foo.com. Some browser implementations may permit this intra-domain communication. -
FIG. 2 shows the retrieval of information from the child iframes, as indicated by anarrow 226. In this implementation, the XD library retrieves the information from the child iframes and assembles it. The information is then passed to the web page (or other applications) hosted on the foo.com as indicated by anarrow 228. - The web page can assemble the retrieved information from each of the child container documents based on information, for example, stored in iframe response-
info 224. The web page can access the child frames using hierarchical element calls, for example, iframe[i].iframe.[j], where iframe[i] is one of the parent iframes associated with bar.com and iframe.[j] is one of the child iframes associated with foo.com. - In some implementations, after assembly, the web page manipulates the information. For example, the web page can use the information in an application hosted on foo.com, such an online photo-editing program embedded in the web page and displayed to a user. The application can present the photo to a user who can, for example, apply filters, crop the photo, remove red-eye, etc.
- In some implementations, the modified data then can be uploaded to the source from which it was obtained. For example, an iframe, such as the
iframe 208 associated with foo.com can upload the edited photos back to bar.com using theform 216 to submit the information along with instructions specifying how bar.com should use the photos (e.g., store the photos or replace the originals). Theform 216 can submit the photo data in a substantially similar way as the photos were requested. For example, the photo data can be transmitted using the method=POST function of theform 216. -
FIG. 3 is a flow chart of anexemplary method 300 for interdomain communications presented in a summary fashion for clarity. A web server, a browser at a client, or a combination of both can execute the method. Themethod 300 starts instep 302, where a first container document is generated. For example, the browser can execute JavaScript code on a web page that generates a parent iframe with a hidden attribute. The parent iframe can be initially associated with the domain that is hosting the web page. - In
step 304, information can be requested from a second Internet domain that is different from the one hosting the web page. For example, the parent iframe can use a HTML form to request information from the second Internet domain. - In
step 306, the information can be received by the first container document. For example, the browser can associate the parent iframe with the second Internet domain. The parent iframe can receive the information as part of a padded URI of a <SRC> attribute of a response page returned by a server at the second Internet domain. - In
step 308, the information can be passed from the first container document to a communication module. For example, the parent iframe can call a JavaScript application that has a communication module (defined by executable functions) that stores the information. The JavaScript application may be part of a library that is reference by the web page or directly within the parent iframe. - In
step 310, a determination is made regarding whether child container documents have been created. For example, the parent iframe associated with the second Internet domain can use the XD library to generate child iframes associated with the first Internet domain (the one which hosts the web page). The parent iframe can generate one or more child iframes based on the URI limits of the browser accessing the web page. - If the information received from the second Internet domain is larger than the URI limits of the browser, the parent iframe can use the XD library to fragment the information into chucks that are equal or less than the URI limits. After fragmentation, the communication module can pass each chuck to a child iframe. If the child iframes exist, the
method 300 moves to step 312. If the child iframes do not exist (or information about the frames, such as the iframe response-info do not exist),step 310 is repeated until the child iframes are available. - In
step 312, the information received from the second Internet domain is transmitted from the child container documents to one or more applications hosted on the first Internet domain. For example, the web page can use the XD library to retrieve and reassemble the information stored in the child iframes. In some implementations, the web page hosted on foo.com can directly access the information held by the child iframes because the child iframes and the web page are associated with the same Internet domain. The web page can then manipulate and display the retrieved information to a user viewing the web page. Next themethod 300 can end. -
FIG. 4 is a flow chart of anexemplary method 400 for communicating between different Internet domains while avoiding size restrictions. In some implementations, a web server, a client having an Internet browser, or a combination of both can execute themethod 400. - The
method 400 can begin instep 402 when information requested from a second Internet domain is received at a first Internet domain, as described previously (e.g., in association with step 306). In some implementations, this information can be included in a single response. For example, a data server at bar.com can return request information to a web server at foo.com in a <SRC> attribute of a single response page. For example, some internet browsers, such as Internet Explorer permit unlimited URI lengths following the character "?" in the <SRC> attribute. The "?" requests can be used to make requests to a remote server and can be substantially unlimited in length. - In
step 404, it may be determined whether a browser limits exists that prevents the received information from being passed to child container document. For example, a parent iframe can receive the response page. The parent iframe can be associated with the second Internet domain and may not be able to share information with applications hosted at the first Internet domain. Instead, the parent iframe can generate a child iframe that is associated with the first Internet domain and pass the information to the child iframe. - In some implementations, Internet browsers - which are viewing the web page that has the iframes - can have size limitations that prevent passing data from a parent to a child iframe if the data exceeds the size limitations. For example, an internet browser can limit the amount of data based after a "#" character in a <SRC> field. The "#" requests can be used when passing information within a client browser.
- The Internet browsers and their associated limits can be stored in a file accessible to the XD library, for example. The XD library can determine the browser type based on the request for the web page and may use the file to determine whether the identified browser has any browser limitations.
- For example, the XD library can determine that the requesting Internet browser is Microsoft's Internet Explorer (IE) Version 6 (available from Microsoft Corp., located in Redmond, WA) based on information received in the requests for the web page from the web server. The XD library can access the file to determine that this version of IE has URI handling capabilities that are limited to 4k of information.
- In
step 406, a number of child container documents needed to accommodate the information from the second Internet domain is calculated. For example, the XD library can divide the total size of the received information by the URI handling capabilities of the browser to determine how many child iframes to generate. - In
step 408, the received information is fragmented into portions that do not exceed the data handling capabilities of the browser. For example, the parent iframe can call the XD library to divide the received information into fragments that are equal to or less than the data limitations of the identified browser requesting to view the web site. - In
step 410, the child container documents are generated and provided the fragmented information. For example, the parent iframe can generate the number of child iframes as determined instep 406. The parent iframe can request that the XD library pass the fragments of the information from the parent iframe to the child iframes. - In
step 412, the information is passed from each of the child container documents to the website. For example, the website at the first Internet domain can poll for the existence of one or more child iframes created by the parent iframe. Once the existence is detected, the website can access the XD library to retrieve and reassembly the information stored in each of the child iframes. - For example, the information can be appended to a URI within a <SRC> attribute of each iframe. The XD library can parse the URI until it identifies a portion that includes the information from the second Internet domain. It can retrieve this information and combine it with information extracted from the other child iframes (if additional child iframes exist). The web page can access the information for manipulation or for display to the user viewing the web page. Next, the
method 400 can end. -
FIGs. 5A and 5B are an exemplary screenshot of a webpage that modifies and displays information hosted on a different Internet domain and a schematic of exemplary components used to generate the webpage, respectively.FIG. 5A is an exemplary screen shot of aweb page 502 hosted at an Internet domain CalendarManager.com. A user can use thebrowser 504 to load or execute instructions embedded in theweb page 502, such as JavaScript instructions that initiate cross-domain communications between a web server hosting the viewed web page and, for example, a data server having the user's calendar data. - In some implementations, the user authorizes the web server to retrieve the user's data from the data server. A day planner application embedded in the web page can receive the information using the interdomain communications discussed previously and can display this information to the user. In
FIG. 5A , theapplication 506 displays the calendar data so that a user can see a summary of each day within a month. When a user selects a day, for example, with a mouse pointer, the day can expand with a more detailed view as shown in expandedday 508. The application can modify, for example, the format of the data so it can have different colors, fonts, sizes, etc. based on when an event occurs, whether events overlap, etc. - The
application 506 can integrate data from several data servers. For example, theapplication 506 has several tabs, such as a calendar tab (which is currently selected), a contacts tab, a projects tab, and a next action tab. Each of these tabs may display data that is gathered from different data servers and integrated into thesingle application 506 displayed on theweb page 502. For example, the application can obtain the content displayed in the contact tab from an email server that stores email contact information for the user. -
FIG. 5B shows a schematic diagram of elements used to generate theapplication 506 embedded in theweb page 502. For example, in response to a request for calendar data, aserver 510 at ThirdPartyDomain.com returns thecalendar data 512 as indicated by an arrow labeled A. Ahidden parent iframe 514 associated with the ThirdPartyDomain.com receives the calendar data and calls a JavaScript library to 515 to receive the calendar data (indicated by an arrow labeled B) and generate three hidden child iframes 516 (as indicated by an arrow labeled C), where each child iframe is associated with the CalendarManager.com domain. - The parent iframe uses the
JavaScript library 515 to fragment the calendar data based on thebrowser 504's URI handling capabilities and passes fragments of the calendar data to the child iframes. Thecalendar application 506 hosted on CalendarManager.com then can access the calendar data by calling the XD library to assemble the data within the child iframes also associated with CalendarManager.com and pass the calendar data to theapplication 506. The calendar application can then manipulate and display the calendar data as described above. -
FIG. 6 is a schematic diagram of a computer system 600. The system 600 can be used for the operations described in association with any of the computer-implement methods described previously, according to one implementation. The system 600 is intended to include various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The system 600 also can include mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices. Additionally the system can include portable storage media, such as, Universal Serial Bus (USB) flash drives. For example, the USB flash drives may store operating systems and other applications. The USB flash drives can include input/output components, such as a wireless transmitter or USB connector that may be inserted into a USB port of another computing device. - The system 600 includes a
processor 610, amemory 620, astorage device 630, and an input/output device 640. Each of thecomponents system bus 650. Theprocessor 610 is capable of processing instructions for execution within the system 600. In one implementation, theprocessor 610 is a single-threaded processor. In another implementation, theprocessor 610 is a multi-threaded processor. Theprocessor 610 is capable of processing instructions stored in thememory 620 or on thestorage device 630 to display graphical information for a user interface on the input/output device 640. - The
memory 620 stores information within the system 600. In one implementation, thememory 620 is a computer-readable medium. In one implementation, thememory 620 is a volatile memory unit. In another implementation, thememory 620 is a non-volatile memory unit. - The
storage device 630 is capable of providing mass storage for the system 600. In one implementation, thestorage device 630 is a computer-readable medium. In various different implementations, thestorage device 630 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device. - The input/output device 640 provides input/output operations for the system 600. In one implementation, the input/output device 640 includes a keyboard and/or pointing device. In another implementation, the input/output device 640 includes a display unit for displaying graphical user interfaces.
- The features described can be implemented in digital electronic circuitry, or in computer hardware, firmware, software, or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier, e.g., in a machine-readable storage device or in a propagated signal, for execution by a programmable processor; and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from, and to transmit data and instructions to, a data storage system, at least one input device, and at least one output device. A computer program is a set of instructions that can be used, directly or indirectly, in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language, including compiled or interpreted languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- Suitable processors for the execution of a program of instructions include, by way of example, both general and special purpose microprocessors, and the sole processor or one of multiple processors of any kind of computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally, a computer will also include, or be operatively coupled to communicate with, one or more mass storage devices for storing data files; such devices include magnetic disks, such as internal hard disks and removable disks; magneto-optical disks; and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non-volatile memory, including by way of example semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks such as internal hard disks and removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, ASICs (application-specific integrated circuits).
- To provide for interaction with a user, the features can be implemented on a computer having a display device such as a CRT (cathode ray tube) or LCD (liquid crystal display) monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.
- The features can be implemented in a computer system that includes a back-end component, such as a data server, or that includes a middleware component, such as an application server or an Internet server, or that includes a front-end component, such as a client computer having a graphical user interface or an Internet browser, or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include a local area network ("LAN"), a wide area network ("WAN"), peer-to-peer networks (having ad-hoc or static members), grid computing infrastructures, and the Internet.
- The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network, such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- Although a few implementations have been described in detail above, other modifications are possible. For example, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other implementations are within the scope of the following claims.
Claims (12)
- A computer-implemented method comprising:generating, within a web-accessible document (104; 502), a parent container document (114; 514) associated with a first Internet domain (106) and a plurality of child container documents (116; 516) within the parent container document (114; 514) and associated with a second Internet domain (112);receiving, by the parent container document (114; 514), information (108; 512) requested from a server (102) associated with the first Internet domain (106); andcommunicating the information (108; 512) from the first Internet domain (106) to the second Internet domain (112) using the parent container document (114; 514) associated with the first Internet domain (106) to transmit the information (108; 512) to the plurality of child container documents (116; 516) associated with the second Internet domain (112),characterized in thatthe transmission of the information (108; 512) from the parent container document (114; 514) to the plurality of child container documents (116; 516) comprises accessing a library (206; 515) having executable code that fragments the information (108; 512) and distributes the fragmented information to the plurality of child container documents (116; 512),wherein the method further comprises determining how many child container documents (116; 516) are generated by the parent container document (114; 514) based on a size of the received information (108; 512).
- The method of claim 1, wherein the determination comprises comparing the size of the received information (108; 512) to a uniform resource identifier, URI, size limit of a client browser (504) accessing the web-accessible document (104; 502).
- The method of claim 2, further comprising fragmenting the received information (108; 512) into fragments that are substantially equal to or less than the URI size limit.
- The method of claim 3, further comprising generating additional child container documents (116; 512), each to receive a fragment, until every fragment has a corresponding child container document (116; 512).
- The method of any of claims 1 to 4, further comprising requesting the information (108; 512) from the server (102) using a markup language form (216) generated by the parent container document (114; 514).
- The method of claim 1, wherein the library (206; 515) is hosted at a first server remote from a second server (102) that hosts the web-accessible document (104; 502).
- The method of claim 1, further comprising requesting the fragmented information from the plurality of child container documents (116; 516) and reassembling the fragmented information for use by an application (118; 506) hosted at the first Internet domain (106).
- The method of any of claims 1 to 7, further comprising specifying for the plurality of child container documents (116; 516) dummy uniform resource identifiers associated with the first Internet domain (106), wherein the dummy uniform resource identifier is not associated with existing content.
- The method of claim 8, further comprising padding the dummy uniform resource identifier with at least a portion of the information (108; 512) received from the server.
- The method of any of claims 1 to 9, further comprising accessing the information (108; 512) from the plurality of child container documents (116; 516) using an application (118; 506) hosted at the first Internet domain (106).
- The method of any of claims 1 to 10, further comprising specifying for the plurality of child container documents (116; 516) a uniform resource identifier of a file used to specify whether a search engine can index content on the second internet domain (112).
- A system (100; 200) comprising:a container generator (210) to generate, for a web-accessible document (104; 502), a parent container document (114; 514) associated with a first Internet domain (106) and a plurality of child container documents (116; 516) within the parent container document (114; 514) and associated with a second Internet domain (112);an interface for receiving, by the parent container document (114; 514), information (108; 512) requested from a server (102) associated with the first Internet domain (106); andmeans for communicating the information (108; 512) from the first Internet domain (106) to the second Internet domain (112) by transmission of the information (108; 512) from the parent container document (114; 514) to the plurality of child container documents (116; 516),characterized in thatthe transmission of the information (108; 512) from the parent container document (114; 514) to the plurality of child container documents (116; 516) comprises accessing a library (206; 515) having executable code that fragments the information (108; 512) and distributes the fragmented information to the plurality of child container documents (116; 512),wherein the system further comprises means for determining how many child container documents (116; 516) are generated by the parent container document (114; 514) based on a size of the received information (108; 512).
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/830,434 US7979791B2 (en) | 2007-07-30 | 2007-07-30 | Cross-domain communication |
PCT/US2008/071640 WO2009018375A1 (en) | 2007-07-30 | 2008-07-30 | Cross-domain communication |
Publications (3)
Publication Number | Publication Date |
---|---|
EP2183881A1 EP2183881A1 (en) | 2010-05-12 |
EP2183881A4 EP2183881A4 (en) | 2014-12-24 |
EP2183881B1 true EP2183881B1 (en) | 2016-09-07 |
Family
ID=40304851
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP08796891.3A Not-in-force EP2183881B1 (en) | 2007-07-30 | 2008-07-30 | Cross-domain communication |
Country Status (3)
Country | Link |
---|---|
US (1) | US7979791B2 (en) |
EP (1) | EP2183881B1 (en) |
WO (1) | WO2009018375A1 (en) |
Families Citing this family (55)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20040268139A1 (en) * | 2003-06-25 | 2004-12-30 | Microsoft Corporation | Systems and methods for declarative client input security screening |
US8245049B2 (en) * | 2004-06-14 | 2012-08-14 | Microsoft Corporation | Method and system for validating access to a group of related elements |
US8078740B2 (en) * | 2005-06-03 | 2011-12-13 | Microsoft Corporation | Running internet applications with low rights |
US8185737B2 (en) | 2006-06-23 | 2012-05-22 | Microsoft Corporation | Communication across domains |
US7606897B2 (en) * | 2007-04-05 | 2009-10-20 | Yahoo! Inc. | Accelerated and reproducible domain visitor targeting |
US10019570B2 (en) | 2007-06-14 | 2018-07-10 | Microsoft Technology Licensing, Llc | Protection and communication abstractions for web browsers |
US8108770B2 (en) * | 2007-08-27 | 2012-01-31 | Yahoo! Inc. | Secure inter-module communication mechanism |
US20090132713A1 (en) * | 2007-11-20 | 2009-05-21 | Microsoft Corporation | Single-roundtrip exchange for cross-domain data access |
CA2709623A1 (en) * | 2007-12-17 | 2009-06-25 | Samuel Palahnuk | Communications network system |
US8965787B2 (en) * | 2007-12-17 | 2015-02-24 | Smooth Productions Inc. | Communications system and method for serving electronic content |
US8341184B2 (en) | 2008-05-07 | 2012-12-25 | Smooth Productions Inc. | Communications network system and service provider |
US20090299862A1 (en) * | 2008-06-03 | 2009-12-03 | Microsoft Corporation | Online ad serving |
US9524344B2 (en) * | 2008-06-03 | 2016-12-20 | Microsoft Corporation | User interface for online ads |
CN101615179B (en) * | 2008-06-25 | 2011-08-17 | 国际商业机器公司 | Method and system of cross-domain alternation for Web application |
US20090327869A1 (en) * | 2008-06-27 | 2009-12-31 | Microsoft Corporation | Online ad serving |
CN101662460B (en) | 2008-08-25 | 2015-07-15 | 阿里巴巴集团控股有限公司 | Method, system and device for cross-domain communication |
TW201015912A (en) * | 2008-10-01 | 2010-04-16 | Avermedia Tech Inc | Network communication method, dispatch server and server |
US20100180330A1 (en) * | 2009-01-09 | 2010-07-15 | Microsoft Corporation | Securing Communications for Web Mashups |
US9459936B2 (en) | 2009-05-01 | 2016-10-04 | Kaazing Corporation | Enterprise client-server system and methods of providing web application support through distributed emulation of websocket communications |
TWI486039B (en) * | 2009-05-13 | 2015-05-21 | Alibaba Group Holding Ltd | Inter-domain communication methods, systems and devices |
US8601364B2 (en) | 2009-08-31 | 2013-12-03 | Ebay Inc. | System and method to provide a domain split display |
US8984409B2 (en) | 2010-03-12 | 2015-03-17 | Salesforce.Com, Inc. | Service cloud console |
US20110296338A1 (en) * | 2010-05-27 | 2011-12-01 | Richard Morgan Helms | System and Method for Cross-Domain Communications for Web Browsers |
US8626865B1 (en) | 2010-06-07 | 2014-01-07 | Google Inc. | Shared worker application |
US8438289B1 (en) | 2010-06-07 | 2013-05-07 | Google Inc. | Cross-domain communications with a shared worker application |
US9400699B2 (en) | 2010-07-28 | 2016-07-26 | Orange | Data communication between modules |
US20120042261A1 (en) * | 2010-08-12 | 2012-02-16 | Google Inc. | Sub-component instantiation and synchronization using a shared worker |
US9558289B2 (en) * | 2010-09-30 | 2017-01-31 | Microsoft Technology Licensing, Llc | Securely rendering online ads in a host page |
KR20120050083A (en) * | 2010-11-10 | 2012-05-18 | 삼성전자주식회사 | Display apparatus, remote controller and control method thereof |
FR2967856A1 (en) * | 2010-11-23 | 2012-05-25 | France Telecom | COMMUNICATION BETWEEN TWO WEB APPLICATIONS |
US8689099B1 (en) * | 2010-12-23 | 2014-04-01 | Amazon Technologies, Inc. | Cross-domain communication |
US9037963B1 (en) | 2011-04-22 | 2015-05-19 | Amazon Technologies, Inc. | Secure cross-domain web browser communications |
US9015577B2 (en) * | 2011-05-06 | 2015-04-21 | Microsoft Technology Licensing, Llc | Content flow through containers |
US9342274B2 (en) | 2011-05-19 | 2016-05-17 | Microsoft Technology Licensing, Llc | Dynamic code generation and memory management for component object model data constructs |
US8881101B2 (en) | 2011-05-24 | 2014-11-04 | Microsoft Corporation | Binding between a layout engine and a scripting engine |
US9215096B2 (en) | 2011-08-26 | 2015-12-15 | Salesforce.Com, Inc. | Computer implemented methods and apparatus for providing communication between network domains in a service cloud |
CA2853033C (en) | 2011-10-21 | 2019-07-16 | Nest Labs, Inc. | User-friendly, network connected learning thermostat and related systems and methods |
US9262782B2 (en) * | 2012-03-14 | 2016-02-16 | Doing Good Better, Llc | Secure transaction processing system and method |
US9154470B2 (en) | 2012-05-25 | 2015-10-06 | Canon U.S.A., Inc. | System and method for processing transactions |
US9503501B2 (en) * | 2012-09-17 | 2016-11-22 | Salesforce.Com, Inc. | Cross domain in-browser proxy |
US9264507B2 (en) | 2013-01-03 | 2016-02-16 | Sap Portals Israel Ltd | Cross domain communication channel |
US9430452B2 (en) | 2013-06-06 | 2016-08-30 | Microsoft Technology Licensing, Llc | Memory model for a layout engine and scripting engine |
US9189466B2 (en) * | 2013-09-13 | 2015-11-17 | Linkedin Corporation | Cross document communication |
US9697188B2 (en) | 2013-11-15 | 2017-07-04 | Instart Logic, Inc. | Method to enable cross-origin resource sharing from a webpage inside a private network |
US10769644B2 (en) | 2014-03-11 | 2020-09-08 | Adobe Inc. | Cross-domain identity service |
CN104965690B (en) * | 2014-04-18 | 2018-07-06 | 腾讯科技（深圳）有限公司 | Data processing method and device |
US9740672B2 (en) * | 2014-10-24 | 2017-08-22 | POWr Inc. | Systems and methods for dynamic, real time management of cross-domain web plugin content |
CN106874323A (en) | 2016-06-28 | 2017-06-20 | 阿里巴巴集团控股有限公司 | A kind of date storage method and device |
US10404765B2 (en) | 2016-11-01 | 2019-09-03 | Microsoft Technology Licensing, Llc | Re-homing embedded web content via cross-iframe signaling |
US10678615B1 (en) | 2018-05-22 | 2020-06-09 | Express Scripts Strategic Development, Inc. | Interconnected framework for distributed data realization |
US11132404B2 (en) * | 2018-05-30 | 2021-09-28 | Apple Inc. | Techniques for facilitating communications between isolated processes executing within a web browser |
US11979334B2 (en) | 2019-07-22 | 2024-05-07 | International Business Machines Corporation | Internet activity compartmentalization |
US11405699B2 (en) * | 2019-10-01 | 2022-08-02 | Qualcomm Incorporated | Using GLTF2 extensions to support video and audio data |
US11677739B2 (en) * | 2021-06-25 | 2023-06-13 | Microsoft Technology Licensing, Llc | Token brokering in parent frame on behalf of child frame |
US11882113B2 (en) | 2021-06-29 | 2024-01-23 | Microsoft Technology Licensing, Llc | Token brokering in a descendant frame |
Family Cites Families (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6957416B2 (en) | 2001-01-31 | 2005-10-18 | Hewlett-Packard Development Company, L.P. | Document builder classes and methods |
US20040210536A1 (en) * | 2002-12-18 | 2004-10-21 | Tino Gudelj | Cross-domain transactions through simulated pop-ups |
US8280819B2 (en) * | 2004-07-09 | 2012-10-02 | Ebay Inc. | Method and apparatus for securely displaying and communicating trusted and untrusted internet content |
US8005920B2 (en) * | 2005-08-24 | 2011-08-23 | Postx Corporation | Method and apparatus for transmitting arbitrarily large amounts of data over the internet |
US7506248B2 (en) * | 2005-10-14 | 2009-03-17 | Ebay Inc. | Asynchronously loading dynamically generated content across multiple internet domains |
US20070169165A1 (en) * | 2005-12-22 | 2007-07-19 | Crull Robert W | Social network-enabled interactive media player |
US8250082B2 (en) * | 2006-06-23 | 2012-08-21 | Microsoft Corporation | Cross domain communication |
US8185737B2 (en) * | 2006-06-23 | 2012-05-22 | Microsoft Corporation | Communication across domains |
US7958516B2 (en) * | 2007-04-18 | 2011-06-07 | Google Inc | Controlling communication within a container document |
US7809785B2 (en) * | 2007-05-28 | 2010-10-05 | Google Inc. | System using router in a web browser for inter-domain communication |
US10019570B2 (en) * | 2007-06-14 | 2018-07-10 | Microsoft Technology Licensing, Llc | Protection and communication abstractions for web browsers |
-
2007
- 2007-07-30 US US11/830,434 patent/US7979791B2/en active Active
-
2008
- 2008-07-30 WO PCT/US2008/071640 patent/WO2009018375A1/en active Application Filing
- 2008-07-30 EP EP08796891.3A patent/EP2183881B1/en not_active Not-in-force
Also Published As
Publication number | Publication date |
---|---|
US20090037806A1 (en) | 2009-02-05 |
EP2183881A4 (en) | 2014-12-24 |
US7979791B2 (en) | 2011-07-12 |
EP2183881A1 (en) | 2010-05-12 |
WO2009018375A1 (en) | 2009-02-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP2183881B1 (en) | Cross-domain communication | |
US8533238B2 (en) | Sharing information about a document across a private computer network | |
JP6800184B2 (en) | Document management and collaboration system | |
US9183316B2 (en) | Providing action links to share web content | |
CA2787104C (en) | Social network media sharing with client library | |
JP4546744B2 (en) | Method for processing e-mail and alert messages, computer program, and computer-readable recording medium having the computer program | |
US8078693B2 (en) | Inserting a multimedia file through a web-based desktop productivity application | |
US8578036B1 (en) | Providing standardized transparency for cookies and other website data using a server side description file | |
JP6238331B2 (en) | Providing executable content to computing devices based on user actions | |
US9459888B2 (en) | Implementing browser based hypertext transfer protocol session storage | |
JP2006092539A (en) | Method, system, and apparatus for receiving and responding to knowledge interchange queries | |
MXPA05012066A (en) | System and method for restricting user access to a network document. | |
US20110010397A1 (en) | Managing annotations decoupled from local or remote sources | |
WO2018223941A1 (en) | Device and method for issuing multiple insurance policies and computer readable storage medium | |
US7103606B2 (en) | Method and apparatus for removing information from a server | |
WO2006071324A2 (en) | Imroved bitmask access for managing blog content | |
US9319480B2 (en) | Managing digital media presented in online digital media store | |
US20080216023A1 (en) | Method and a system for creating a website guide | |
JP4807411B2 (en) | Method for using information of another domain, program for using information of another domain, and information transfer program | |
US20170244649A1 (en) | Method of and a system for providing access to a file to a web resource | |
US20160026931A1 (en) | System and Method for Providing a Machine Learning Re-Training Trigger | |
US20130104034A1 (en) | System and method of providing off-network access to network content | |
US20230409743A1 (en) | Methods And Systems For Obtaining, Controlling And Viewing User Data | |
CN117424929A (en) | Notification message processing method and device, electronic equipment and storage medium | |
JP5948930B2 (en) | Relay device, method and program |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
17P | Request for examination filed |
Effective date: 20100204 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MT NL NO PL PT RO SE SI SK TR |
|
AX | Request for extension of the european patent |
Extension state: AL BA MK RS |
|
DAX | Request for extension of the european patent (deleted) | ||
A4 | Supplementary search report drawn up and despatched |
Effective date: 20141125 |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: H04L 12/28 20060101AFI20141119BHEPIpc: H04L 29/08 20060101ALI20141119BHEP |
|
17Q | First examination report despatched |
Effective date: 20150109 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
INTG | Intention to grant announced |
Effective date: 20160401 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MT NL NO PL PT RO SE SI SK TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: REFRef document number: 827698Country of ref document: ATKind code of ref document: TEffective date: 20161015 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602008046192Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG4D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20160907 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: HRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: FIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: NOFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161207 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 827698Country of ref document: ATKind code of ref document: TEffective date: 20160907 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161208Ref country code: SEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: LVFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602008046192Country of ref document: DERepresentative=s name: MAIKOWSKI & NINNEMANN PATENTANWAELTE PARTNERSC, DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: EEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: ROFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CZFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: PLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20161207Ref country code: SKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: BEFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170107Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20170109 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R097Ref document number: 602008046192Country of ref document: DE |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ITFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
PLBE | No opposition filed within time limit |
Free format text: ORIGINAL CODE: 0009261 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: NO OPPOSITION FILED WITHIN TIME LIMIT |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DKFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
26N | No opposition filed |
Effective date: 20170608 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: SIFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R082Ref document number: 602008046192Country of ref document: DERepresentative=s name: MAIKOWSKI & NINNEMANN PATENTANWAELTE PARTNERSC, DERef country code: DERef legal event code: R081Ref document number: 602008046192Country of ref document: DEOwner name: GOOGLE LLC (N.D.GES.D. STAATES DELAWARE), MOUN, USFree format text: FORMER OWNER: GOOGLE, INC., MOUNTAIN VIEW, CALIF., US |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: PL |
|
REG | Reference to a national code |
Ref country code: FRRef legal event code: STEffective date: 20180330 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LIFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170731Ref country code: CHFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170731 |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: MM4A |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: FRFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170731 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LUFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170730 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: IEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170730 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MTFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20170730 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: MCFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907Ref country code: HUFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMIT; INVALID AB INITIOEffective date: 20080730 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: CYFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20160907 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: TRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20160907 |
|
PGFP | Annual fee paid to national office [announced via postgrant information from national office to epo] |
Ref country code: GBPayment date: 20220727Year of fee payment: 15Ref country code: DEPayment date: 20220727Year of fee payment: 15 |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230505 |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R119Ref document number: 602008046192Country of ref document: DE |
|
GBPC | Gb: european patent ceased through non-payment of renewal fee |
Effective date: 20230730 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: DEFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20240201Ref country code: GBFree format text: LAPSE BECAUSE OF NON-PAYMENT OF DUE FEESEffective date: 20230730 |