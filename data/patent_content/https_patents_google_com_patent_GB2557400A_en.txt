GB2557400A - Voice to text conversion based on third-party agent content - Google Patents
Voice to text conversion based on third-party agent content Download PDFInfo
- Publication number
- GB2557400A GB2557400A GB1715619.1A GB201715619A GB2557400A GB 2557400 A GB2557400 A GB 2557400A GB 201715619 A GB201715619 A GB 201715619A GB 2557400 A GB2557400 A GB 2557400A
- Authority
- GB
- United Kingdom
- Prior art keywords
- voice
- text
- agent
- content
- voice input
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
- 238000006243 chemical reaction Methods 0.000 title claims abstract description 117
- 230000004044 response Effects 0.000 claims abstract description 47
- 238000004891 communication Methods 0.000 claims abstract description 18
- 238000000034 method Methods 0.000 claims description 67
- 230000009471 action Effects 0.000 claims description 32
- 230000015654 memory Effects 0.000 claims description 7
- 230000005540 biological transmission Effects 0.000 claims description 6
- 239000003795 chemical substances by application Substances 0.000 description 327
- 230000003466 anti-cipated effect Effects 0.000 description 8
- 238000001514 detection method Methods 0.000 description 6
- 239000000463 material Substances 0.000 description 5
- 235000013550 pizza Nutrition 0.000 description 5
- 230000003993 interaction Effects 0.000 description 4
- 230000008569 process Effects 0.000 description 4
- 235000008429 bread Nutrition 0.000 description 3
- 238000012545 processing Methods 0.000 description 3
- 238000013475 authorization Methods 0.000 description 2
- 238000012790 confirmation Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 235000013305 food Nutrition 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 230000009118 appropriate response Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 230000004927 fusion Effects 0.000 description 1
- 230000008570 general process Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 230000002093 peripheral effect Effects 0.000 description 1
- 230000002085 persistent effect Effects 0.000 description 1
- 238000011160 research Methods 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/279—Recognition of textual entities
- G06F40/284—Lexical analysis, e.g. tokenisation or collocates
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/30—Semantic analysis
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/1815—Semantic context, e.g. disambiguation of the recognition hypotheses based on word meaning
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/28—Constructional details of speech recognition systems
- G10L15/30—Distributed recognition, e.g. in client-server systems, for mobile phones or network applications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/27—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/223—Execution procedure of a spoken command
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
- G10L2015/226—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics
- G10L2015/228—Procedures used during a speech recognition process, e.g. man-machine dialogue using non-speech characteristics of application context
Abstract
Implementations relate to dynamically, and in a context-sensitive manner, biasing voice to text conversion. Biasing of voice to text conversions is performed by a voice to text engine of a local agent, and the biasing is based at least in part on content provided to the local agent by a third-party (3P) agent that is in network communication with the local agent. In some of those implementations, the content includes contextual parameters that are provided by the 3P agent in combination with responsive content generated by the 3P agent during a dialog that: is between the 3P agent, and a user of a voice-enabled electronic device; and is facilitated by the local agent. The contextual parameters indicate potential feature(s) of further voice input that is to be provided in response to the responsive content generated by the 3P agent. Implementations described herein reduce the use of various computational resources that may otherwise be consumed by inaccurate representations of voice inputs (e.g., network traffic consumed by additional turns that may be necessary to correct inaccurate representations of voice input).
Description
(12,UK Patent Application „9)GB «,„2557400 | (13) A 20.06.2018 | |
(43) Date of A Publication | ||
(21) Application No: 1715619.1 (22) Date of Filing: 27.09.2017 (30) Priority Data: (31) 15372188 (32) 07.12.2016 (33) US | (51) INT CL: G10L 75/783 (2013.01) G10L 75/30 (2013.01) (56) Documents Cited: WO 2015/179510 A1 US 20150370787 A1 (58) Field of Search: | |
(71) Applicant(s): Google LLC 1600 Amphitheatre Parkway, Mountain View 94043, California, United States of America | INT CLG10L Other: WPI,EPODOC, INSPEC | |
(72) Inventor(s): Barnaby John James Bo Wang Sunil Vemuri David Schairer Ulas Kirazci Ertan Dogrultan | ||
(74) Agent and/or Address for Service: Venner Shipley LLP The Surrey Technology Centre, The Surrey Research Park, 40 Occam Road, Guildford, Surrey, GU2 7YG, United Kingdom |
Title of the Invention: Voice to text conversion based on third-party agent content Abstract Title: Voice to text conversion based on third-party agent content (57) Implementations relate to dynamically, and in a contextsensitive manner, biasing voice to text conversion.
Biasing of voice to text conversions is performed by a voice to text engine of a local agent, and the biasing is based at least in part on content provided to the local agent by a third-party (3P) agent that is in network communication with the local agent. In some of those implementations, the content includes contextual parameters that are provided by the 3P agent in combination with responsive content generated by the 3P agent during a dialog that: is between the 3P agent, and a user of a voice-enabled electronic device; and is facilitated by the local agent. The contextual parameters indicate potential feature(s) of further voice input that is to be provided in response to the responsive content generated by the 3P agent. Implementations described herein reduce the use of various computational resources that may otherwise be consumed by inaccurate representations of voice inputs (e.g., network traffic consumed by additional “turns” that may be necessary to correct inaccurate representations of voice input).
200
1/7
FIG. 1
2/7
200
FIG. 2
3/7
300
FIG. 3
4/7
400
FIG. 4
5/7
500
FIG. 5
6/7
Book a table at eight 680A
This is Widget app. Any cuisine preference? 682A
Yup 680C
Laotian 680B
Lao Cafe has availability, has Laotian cuisine, and is highly rated Want me to book? 682B
Done. I’ll text you a confirmation.
682C
FIG. 6
7/7
710
FIG. 7
Voice to Text Conversion Based on Third-Party Agent Content
Background [0001] Voice-enabled electronic devices such as smart phones, vehicle computing systems, wearable devices, tablet computers, and standalone voice-activated speakers are becoming more ubiquitous. A voice-enabled electronic device often includes, and/or is in network communication with, a local agent that facilitates various aspects of a user's voice-based interactions with the device. The local agent may be implemented via the voice-enabled electronic device itself and/or via one or more remote computing devices that are in network communication with the voice-enabled electronic device (e.g., computing device(s) in the cloud).
[0002] The local agent is local in the sense that it directly receives voice input (e.g., a streaming audio recording of a human's voice) provided via the voice-enabled electronic device, at least initially process the received voice input, and provides, for presentation (e.g., audible and/or graphical) via the electronic device, output that is responsive to the received voice input. For example, the local agent may initially process received voice input by performing at least voice to text (also known as speech to text) conversion that converts that voice input to text. Also, for example, the local agent may further provide output that is responsive to that voice input. For instance, the local agent itself may generate responsive content, and generate output that is based on the responsive content.
Summary [0003] This specification is directed generally to various implementations that dynamically, and in a context-sensitive manner, bias voice to text conversions. The voice to text conversions are each of corresponding voice input that is based on spoken input of a corresponding user and that is captured by microphone(s) and/or other transducer(s) of a voice-enabled electronic device (also referred to herein as electronic device).
[0004] In various implementations, the biasing of voice to text conversions is performed by a voice to text engine of a local agent, and the biasing is based at least in part on content provided to the local agent by a third-party (3P) agent that is in network communication with the local agent. In some of those implementations, the content includes contextual parameters that are provided by the 3P agent in combination with responsive content
-2generated by the 3P agent during a dialog that: is between the 3P agent and a user of a voice-enabled electronic device; and is facilitated by the local agent. The contextual parameters indicate potential feature(s) of further voice input that is to be provided in response to the responsive content generated by the 3P agent.
[0005] As one example, the local agent may be in network communication with both the electronic device and the 3P agent. In facilitating a dialog between the 3P agent and the user of the electronic device, the local agent may perform one or more iterations of: receiving voice input from the electronic device; converting the voice input to text (optionally based on a most recent iteration of 3P agent provided contextual parameters); transmitting at least part of the converted text (and optionally additional content) to the 3P agent; receiving responsive content (and optionally dynamically updated contextual parameters) from the 3P agent in response to the transmitting; and providing output that is based on the responsive content (e.g., performing a text to voice conversion when the responsive content is in a textual format, and providing the converted voice output to the electronic device for audible presentation).
[0006] Accordingly, for received voice input that is intended for transmission to a 3P agent, a voice to text engine of a local agent may convert that voice input into text while taking into account contextual parameters of the 3P agent that are relevant to that voice input. This may increase the accuracy and/or robustness of the voice to text conversion performed by the voice to text engine. For example, the voice to text engine may modify one or more values of, and/or generated by, a voice to text model used in voice to text conversion - and may modify those values to increase the likelihood that text that conforms to the contextual parameters of the 3P agent is selected as the text that conforms to the received voice input. Moreover, in various implementations the contextual parameters may be dynamically updated by the 3P agent (and provided to the local agent) at each turn of a dialog, thereby enabling the local agent to adapt the voice to text conversion at each turn to be more tailored to likely voice input to be received at that turn. As described in more detail herein, contextually converted text may be transmitted by the local agent to the 3P agent, and the 3P agent may generate further responsive content that is based on that contextually converted text. Implementations described herein increase the likelihood that the contextually converted text provided to the 3P agent is an accurate representation of the corresponding voice input and, as a result, an accurate representation of the spoken
-3input on which that corresponding voice input is based. This may improve performance of the 3P agent and/or reduce the use of various computational resources that may otherwise be consumed by inaccurate representations of voice inputs (e.g., network traffic consumed by additional turns that may be necessary to correct inaccurate representations of voice input).
[0007] As used herein, a 3P agent references one or more computing devices and/or associated software managed by a party that is separate from a party that manages a local agent. The 3P agent is configured to receive converted text and/or other content from the local agent. In response to receiving the converted text and/or other content, the 3P agent generates content based on the received converted text and/or other content, and transmits the generated content to the local agent for provision of output, by the local agent, that is based on the 3P agent transmitted content. A 3P agent and a local agent may be in selective network communication with one another. In some implementations, a local agent and a 3P agent may exchange data via one or more application programming interfaces (APIs).
[0008] A 3P agent may often be configured to perform one or more particularized functions such as, for example: booking a restaurant reservation; ordering food; purchasing movie tickets; purchasing services; requesting services (e.g., transportation); managing text, email, or other electronic communications of a user; providing guidance for a task of a user (e.g., mixing a drink, fixing a leaky faucet); etc. As described herein, in some implementations a local agent may initiate and facilitate a dialog between a user (via an electronic device) and a 3P agent in response to invocation of the 3P agent by the user (e.g., via voice input provided by the user via the electronic device). In some of those implementations, the invocation may be the occurrence of key word(s) for the 3P agent in voice input and/or reference to an action and/or item managed by the 3P agent. For example, a movie ticket purchase agent may be invoked by voice input of talk to movie ticket agent (where movie ticket agent is a keyword for the 3P agent), buy some movie tickets (where movie tickets are an item managed by the 3P agent), use movie ticket agent to buy tickets, etc.
[0009] In some implementations, a method performed by one or more processors is provided and includes: receiving a voice input provided by a user via a voice-enabled electronic device; performing a voice to text conversion to convert the voice input to text;
-4transmitting the text to a third-party agent via one or more network interfaces; and receiving content from the third-party agent in response to transmitting the text. The receiving is via one or more of the network interfaces and the content includes responsive content that is responsive to the text. The method further includes providing output that is based on the responsive content for presentation to the user via the voice-enabled electronic device; receiving an additional voice input provided by the user via the voiceenabled electronic device and provided by the user in response to the output; and using the content received from the third-party agent to perform an additional voice to text conversion to convert the additional voice input to additional text.
[0010] These and other implementations of technology disclosed herein may optionally include one or more of the following features.
[0011] In some implementations, the content received from the third-party agent further includes contextual parameters that are in addition to the responsive content and that indicate one or more potential features of further voice input to be provided in response to the responsive content. In some of the contextual parameters implementations, using the content to perform the additional voice to text conversion comprises using the contextual parameters to perform the additional voice to text conversion.
[0012] In some of the contextual parameters implementations, a voice to text model is used in performing the additional voice to text conversion and using the contextual parameters to perform the additional voice to text conversion includes: biasing, based on the contextual parameters, values that are generated over the voice to text model. In some versions of those implementations, the one or more potential features indicated by the contextual parameters include particular tokens and biasing the values that are generated over the voice to text model based on the contextual parameters includes: modifying scores generated for the particular tokens over the voice to text model. The contextual parameters received from the third-party agent may include the particular tokens and/or a semantic type of tokens. When the contextual parameters include the semantic type of tokens, the method may further include determining the particular tokens based on the particular tokens being stored in association with the semantic type. For example, the particular tokens may be determined based on the particular tokens being stored in association with both the user and the semantic type and/or based on the particular tokens being previously provided by the third-party agent in association with the semantic type.
-5[0013] In some of the contextual parameters implementations, the one or more potential features indicated by the contextual parameters include state path indications that indicate potential paths of the further voice input in a voice to text model.
[0014] In some of the contextual parameters implementations, using the contextual parameters to perform the additional voice to text conversion includes converting the additional voice input to the additional text using both the contextual parameters and additional user parameters that are assigned to the user or the device, and were assigned independent of the content received from the third party agent. In some of those implementations, the additional user parameters are based on at least one of: a location associated with the user and additional electronic devices associated with the user.
[0015] In some of the contextual parameters implementations, the responsive content and the contextual parameters are received as part of single transmission received from the third-party agent.
[0016] In some implementations, a voice to text model is used in performing the additional voice to text conversion and using the content to perform the additional voice to text conversion includes: generating a contextual voice to text model based on the content; and selecting the additional text based on both the voice to text model and the contextual voice to text model.
[0017] In some implementations, using the content to perform the additional voice to text conversion includes: converting a first segment of the voice input to a first textual segment of the additional text with biasing based on the content; and converting a second segment of the voice input to a second segment of the additional text without biasing based on the content. The second segment of the voice input may be subsequent to the first segment. In some of those implementations, the method further includes determining to not bias the second segment of the voice input based on contextual parameters included in the content. Determining to not bias the second segment may be based on the contextual parameters indicating that contextual biasing should not occur following a voice input segment that conforms to the first textual segment.
[0018] In some implementations, a method performed by one or more processors is provided and includes: storing an association of contextual parameters to an invocation of a third-party agent; receiving a voice input provided by a user via a voice-enabled electronic device; converting a first segment of the voice input to text using a voice to text model and
-6without biasing of the voice to text model based on the contextual parameters; and determining that the text conforms to the invocation. The method further includes, in response to determining that the text conforms to the invocation of the third party agent and in response to the contextual parameters being stored in association with the invocation: converting a second segment of the voice input to additional text using the voice to text model and using the contextual parameters to bias the voice to text model. The second segment of the voice input is subsequent to the first segment, and the method further includes transmitting at least a portion of the additional text to the third-party agent.
[0019] In some implementations, the invocation is a reference to an action and/or item managed by the third-party agent [0020] In addition, some implementations include one or more processors of one or more computing devices, where the one or more processors are operable to execute instructions stored in associated memory, and where the instructions are configured to cause performance of any of the aforementioned methods. Some implementations also include one or more non-transitory computer readable storage media storing computer instructions executable by one or more processors to perform any of the aforementioned methods.
[0021] It should be appreciated that all combinations of the foregoing concepts and additional concepts described in greater detail herein are contemplated as being part of the subject matter disclosed herein. For example, all combinations of claimed subject matter appearing at the end of this disclosure are contemplated as being part of the subject matter disclosed herein.
Brief Description of the Drawings [0022] FIG. 1 is a block diagram of an example environment in which implementations disclosed herein may be implemented.
[0023] FIG. 2 is a flowchart illustrating an example method of dynamically adapting voice to text conversion based on third-party agent provided content.
[0024] FIG. 3 is a flowchart illustrating an example method of using contextual parameters received from a third-party agent to bias voice to text conversion.
[0025] FIG. 4 is a flowchart illustrating an example method of detecting an invocation of a third-party agent based on voice to text conversion of a first portion of voice input, and
-7based on detecting the invocation: using contextual parameters stored in association with the invocation to perform voice to text conversion of a second portion of the voice input. [0026] FIG. 5 is a flowchart illustrating an example method of receiving text from a local agent and providing responsive content and optionally contextual parameters to the local agent in response to receiving the text.
[0027] FIG. 6 illustrates a user, a voice-enabled electronic device, and a dialog between the user and a third-party agent that may be facilitated by a local agent associated with the voice-enabled electronic device, according to implementations disclosed herein.
[0028] FIG. 7 illustrates an example architecture of a computing device.
Detailed Description [0029] As described above, a voice-enabled electronic device often includes, and/or is in network communication with, one or more local agents that facilitate various aspects of a user's voice-based interactions with the electronic devices. A local agent may be implemented via the electronic device itself and/or via one or more remote computing devices that are in network communication with the electronic device. A local agent is local in the sense that it directly receives voice input provided via an electronic device, at least initially process the received voice input, and provides, for presentation, output that is responsive to the received voice input. For example, the local agent may initially process a received voice input by at least performing voice to text conversion of that voice input to text. The local agent may further provide output that is based on responsive content that is responsive to that voice input.
[0030] In some situations the local agent may generate responsive content without engaging a 3P agent. For example, the local agent may itself generate responsive content in response to received voice input. For instance, the local agent may contain one or more engines that receive the text conversion of the received voice input (and optionally annotations of the text), and generate local responsive content based on the text and/or other factors (e.g., earlier dialog, user preference(s), etc.). As one example, the local agent may generate responsive content in an attempt to enable appropriate selection of a 3P agent. For instance, assume voice input of tickets to Chicago. The local agent may generate local responsive content such as do you want plane, train, or theatre tickets in response to such voice input to enable the local agent to disambiguate multiple available 3P ticket agents. The local agent may then utilize responsive voice input to select an
-8appropriate 3P agent (e.g., select an airline agent in response to responsive voice input of plane).
[0031] However, in some situations the local agent may instead engage a 3P agent for generating responsive content in response to received voice input. For example, if received voice input includes a 3P agent invocation (e.g., a keyword for the 3P agent or reference to an action and/or item managed by the 3P agent), the local agent may transmit at least a portion of the text conversion of the voice input (and optionally annotations of the text and/or other parameters) to the 3P agent. That 3P agent may then utilize the provided text and its own semantic engine(s) to generate 3P responsive content, and transmit that 3P responsive content to the local agent. The local agent may then provide output that is based on the 3P responsive content. If the output is a prompt that solicits additional 3P related voice input from the user, that additional voice input may again be converted into text by the local agent and provided to the 3P agent. This general process may continue until, for example, the 3P agent provides responsive content that terminates the 3P agent session (e.g., an answer or resolution instead of a prompt), additional voice input of the user terminates the 3P agent session (e.g., instead invokes a response from the local agent or another 3P agent), etc.
[0032] As one example, assume initial voice input of book a table at eight, which invokes a 3P restaurant reservation agent. The local agent may provide at least some of the text conversion of that voice input to the 3P agent. The 3P agent may generate responsive content and provide the responsive content to the local agent. For example, the 3P agent may provide the text any cuisine preference?. The local agent may then provide output based on that responsive content, such as a voice conversion of the text any cuisine preference?. Additional voice input corresponding to Laotian cuisine may be provided in response to the output of any cuisine preference, that additional voice input converted to additional text by the local agent, and at least some of the additional text provided to the 3P agent for generating yet additional responsive content.
[0033] Accordingly, in various situations the local agent may perform speech to text conversion of received voice input and provide at least some of the converted text to the 3P agent. Implementations disclosed herein recognize that in some situations it may be beneficial to utilize content provided by the 3P agent to increase the accuracy and/or recall of the speech to text conversion performed by the local agent. In some implementations,
-9the content may be in the form of contextual parameters that are provided by the 3P agent. In some of those implementations, the contextual parameters are provided by the 3P agent in combination with responsive content provided by the 3P agent, and the contextual parameters indicate potential features of further voice input to be provided in response to the responsive content. In some implementations, the contextual parameters may additionally or alternatively be gleaned from the 3P agent responsive content itself.
[0034] As one example, assume a 3P agent transmits, to a local agent, responsive content of what cuisine type?. The 3P agent may also transmit (in the same or a separate transmission) contextual parameters that correspond to the responsive content and that indicate potential features of responsive voice input to what cuisine type?. For example, the contextual parameters may include one or more explicit tokens (e.g., Italian, Mexican, BBQ, Laotian, Asian Fusion), semantic type(s) of tokens (e.g., cuisine types), and/or path(s) of a state decoding graph voice to text model (e.g., path(s) corresponding to food and/or cuisine). The local agent may utilize these contextual parameters to bias the voice to text conversion of the responsive voice input that is actually received in response to providing output that corresponds to what cuisine type?. For example, cuisine tokens may be more likely to be chosen over non-cuisine tokens in a voice to text conversion. For instance, without biasing based on cuisines, a voice to text conversion of voice input that is a user's attempt at saying Laotian may be the text vacation. However, with biasing based on cuisines, the voice to text conversion of that voice input may instead correctly convert the voice input to the text Laotian. As described herein, the biasing may take various forms, such as modifying a score generated for the text Laotian over a voice to text model and/or adding Laotian to the voice to text model. For instance, Laotian may be added to the voice to text model if it is an out of vocabulary token that is not included in the voice to text model. Adding Laotian to the voice to text model may include modifying the voice to text model itself or effectively appending a separate contextual parameters voice to text model.
[0035] In some implementations, provided contextual parameters and user parameters may both be utilized to bias the voice to text conversion. For example, assume contextual parameters received from a 3P agent include a semantic type of restaurants. Further assume the user parameters include tokens that are names of restaurants that are close to a location of the user, such as current location or a home location of the user. For instance,
-10names of restaurants close to the user may be pre-stored in association with the user and in association with a semantic type of restaurants. Based on the contextual parameters including the restaurants semantic type, and based on the names of close restaurants being indexed or otherwise stored in user parameters, those names of restaurants that are close to the location of the user may be used to bias the voice to text conversion. Additional and/or alternative user parameters may be provided that may be stored in association with corresponding semantic type(s) and/or one or more 3P agents. For example, names of a user's electronic devices that are controllable by a particular 3P agent may be stored in association with semantic type(s) and/or in association with the particular 3P agent. Also, for example, names of contacts of a user may be stored in association with the semantic type of contact. For instance, assume contextual parameters received from a 3P agent included a semantic type of contacts, the names of contacts of the user may then be used to bias the voice to text conversion.
[0036] In some implementations, provided contextual parameters and previously provided 3P contextual parameters may both be utilized to bias the voice to text conversion. For example, assume contextual parameters received from a 3P agent included a semantic type of pizza toppings. Further assume the 3P agent previously provided, for use by a local agent, tokens that are names of pizza toppings that are offered by the 3P agent. Based on the contextual parameters including the pizza toppings semantic type, and based on the names of pizza toppings being indexed or otherwise stored in association with that semantic type (and optionally in association with the 3P agent), those names of pizza toppings may be used to bias the voice to text conversion.
[0037] In some implementations, a provided contextual parameter may include various combinations of contextual parameter types. For example, a provided contextual parameter may include both explicit token(s) and semantic token(s). For instance, a provided contextual parameter may be yes a table at $restaurant, which indicates the explicit sequence of tokens yes a table at, followed by the semantic type of restaurant.
In such a scenario, voice to text conversion may initially be biased based on yes a table at, then biased to restaurant names (optionally selecting those restaurant names based on user parameters) in response to detection of converted text of yes a table at. In some implementations, a provided contextual parameter may additional and/or alternatively indicate that biasing should be performed on some portions of voice input, but not on
-11others. For example, a contextual parameter may be of the form message $contact $some raw text, which indicates voice input may include the token message, followed by a contact token (e.g., a name of a contact of the user stored in user parameters), followed by open text. In such a scenario, voice to text conversion may initially be biased toward the token message. In response to detection of the message token, the voice to text conversion may then biased toward tokens that are names of contacts of the user. Then, in response to detection of contact token(s), the voice to text conversion may be unbiased (e.g., based on a baseline voice to text model).
[0038] Various techniques may be utilized to bias the voice to text conversion using contextual parameters. For example, in some implementations scores may be generated for all or portions of candidate token(s) and/or sequences of token(s) over a base voice to text model, and those scores then modified based on the contextual parameters. In some of those implementations, the contextual parameters may be used to generate a contextual parameters language model, and scores generated over the contextual parameters language model utilized to modify the scores generated over the base voice to text model.
As another example, in some implementations, one or more tokens indicated by the contextual parameters may be added to the base voice to text model (e.g., added as out of vocabulary terms to the model). Additional and/or alternative techniques may be utilized such as modifying values included in a voice to text model based on contextual parameters, modifying values associated with various paths and/or semantic types in a voice to text model, etc.
[0039] Now turning to FIG. 1, an example environment in which techniques disclosed herein may be implemented is illustrated. The example environment includes a voiceenabled electronic device 106 (also referred to herein as device 106), a local agent 110, and a third-party (3P) agent 130.
[0040] Although local agent 110 is illustrated in FIG. 1 as separate from the device 106, in some implementations all or aspects of the local agent 110 may be implemented by the device 106. For example, in some implementations voice to text engine 112 may be implemented by the device 106. In implementations where one or more (e.g., all) aspects of local agent 110 are implemented by one or more computing devices remote from the device 106, the device 106 and those aspects of the local agent 110 communicate via one or more networks, such as a wide area network (WAN) (e.g., the Internet).
-12[0041] Although only one device 106 is illustrated in combination with the local agent 110, in many implementations the local agent 110 may be remote and may interface with each of a plurality of voice-enabled electronic devices of multiple users. For example, the local agent 110 may manage communications with each of the multiple devices via different sessions and may manage multiple sessions in parallel. For instance, the local agent 110 in some implementations may be implemented as a cloud-based service employing a cloud infrastructure, e.g., using a server farm or cluster of high performance computers running software suitable for handling high volumes of requests from multiple users. However, for the sake of simplicity, many examples herein are described with respect to a single device 106.
[0042] The local agent 110 is separate from the 3P agent 130 and communicates with the 3P agent 130 via one or more networks, such as a WAN. In many implementations, the 3P agent 130 is managed by a party that is separate from a party that manages the local agent 110. Although only a single 3P agent 110 is illustrated in FIG. 1, in many implementations the local agent 110 may selectively communicate with each of a plurality of 3P agents. For example, the local agent 110 may facilitate dialog between the device 106 and the 3P agent 130 during a first time period, may facilitate a dialog between the device 106 and an additional 3P agent during a second time period, etc. However, for the sake of simplicity, many examples herein are described with respect to a single 3P agent 130.
[0043] Local agent 110 may include a voice to text engine 112, a local parser engine 114, a local action engine 116, and an output engine 118. In some implementations, one or more of the engines of local agent 110 may be omitted, combined, and/or implemented in a component that is separate from local agent 110.
[0044] As illustrated in FIG. 1, the local agent 110 receives instances of voice input from the device 106. For example, the local agent may receive voice input in the form of a streaming audio recording. The streaming audio recording may be generated by the device 106 in response to signals received from a microphone of the device 106 that captures spoken input of a user of the device 106. In some implementations, the voice input may be generated by the device 106 and/or provided to the local agent 110 in response to an explicit invocation of the local agent 110 by a user of the device 106. For example, the invocation may be detection by the electronic device of certain voice input of the user (e.g., a local agent 110 keyword such as Hey Assistant), user interaction with a hardware
-13button and/or virtual button (e.g., a tap of a hardware button, a selection of a graphical interface element displayed by the device 106), and/or other particular user interface input. [0045] As also illustrated in FIG. 1, the local agent 110 provides an instance of output in response to receiving an instance of voice input from the device 106. The instance of output may be, for example, audio to be audibly presented by the device 106 (e.g., output via a speaker of the device 106), text and/or graphical content to be graphical presented by the device 106 (e.g., rendered via a display of the device 106), etc. As described herein, some instances of the output may be based on local responsive content generated by the local agent 110, while other instances of the output may be based on 3P responsive content generated by the 3P agent 130.
[0046] The voice to text engine 112 receives an instance of voice input (e.g., in the form of digital audio data), and converts the voice input into text that includes one or more text words or phrases (also referred to herein as tokens). In some implementations, the voice to text engine 112 is a streaming voice to text engine. A streaming voice to text engine converts voice input to text on a token-by-token basis and in real time or near-real time, such that tokens may be output effectively concurrently with a user's speech, and thus prior to a user enunciating a complete spoken request. The voice to text engine 112 may rely on one or more stored voice to text models 152 (also referred to as language models). Each of the voice to text models 152 may model a relationship between an audio signal and phonetic units in a language, along with word sequences in the language. In some implementations, a single voice to text model 152 may be provided, while in other implementations, multiple voice to text models 152 may be provided (e.g., to support multiple languages).
[0047] In some implementations, one or more of the voice to text models 152 may implement, for example, a finite state decoding graph defining a plurality of paths mapping digital audio data to text words or phrases. In some implementation, voice to text models 152 may include a base model that may be selectively coupled with, and/or whose output may be selectively modified by, a context-sensitive model (e.g., generated based at least in part on 3P contextual parameters). The base model may support a primary vocabulary that includes relatively common words and phrases likely to be spoken by a user. A contextsensitive model, on the other hand, may include paths for one or more words or phrases, that can be used to effectively augment the vocabulary of the base model for a particular
-14context. The manner in which base models may be integrated with, or otherwise supplemented by, a context-sensitive model may vary in different implementations, e.g., based upon the manner in which paths are encoded into a model.
[0048] Some instances of voice input are converted to text by the voice to text engine 112 based on the voice to text model(s) 152 and without performing any biasing that is based on user parameters 158 and/or content provided by the 3P agent 130 (e.g., 3P contextual parameters provided by the 3P agent 130). However, for some other instances of voice input, the voice to text engine 112 uses content provided by the 3P agent 130, and/or user parameters 158, in the conversion of voice input to text. For example, the voice to text engine 112 may bias the voice to text conversion of voice input based on 3P contextual parameters that are provided by the 3P agent 130 prior to receipt of that voice input. For instance, the voice to text engine 112 may generate, over the voice to text models 152 and based on that voice input, scores for all or portions of candidate token(s) and/or sequences of token(s), and modify those scores based on received 3P contextual parameters. Additional and/or alternative techniques may be utilized by the voice to text engine 112 to convert voice input to text based on content provided by the 3P agent. Additional description of implementations of the voice to text engine 112 are described with reference to methods 200, 300, and 400 of FIGS. 2-4.
[0049] Whereas voice to text engine 112 converts speech to text, local parser engine 114 attempts to discern the semantics or meaning of the text output by engine 112 for the purpose of determining an appropriate response to the text. For example, the local parser engine 114 may attempt to discern the semantics of text to determine if the text invokes a 3P agent, if the text is to be handled locally by the local agent 110 or remotely by a 3P agent, and/or to determine other actions and/or attributes associated with the text. The local parser engine 114 may rely on one or more stored grammar model(s) 154 to map text to particular actions and to identify attributes that constrain the performance of such actions, e.g., input variables to such actions. In some implementations, a single grammar model 154 may be provided, while in other implementations, multiple grammar models 154 may be provided (e.g., to support different actions or action domains).
[0050] As an example, a grammar model 154 may support actions for invoking various 3P agents. For example, local parser engine 114 may receive a sequence of tokens and map the sequence of tokens to the actions of establishing a communications session with 3P
-15agent 130 and facilitating a dialog between the 3P agent 110 and the device 106. As another example, grammar model 154 may optionally support local actions such as a setting a reminder action, having a reminder type parameter that specifies what type of reminder to set, an item parameter that specifies one or more items associated with the reminder, and a time parameter that specifies a time to activate the reminder and remind the user. For instance, local parser engine 114 may receive a sequence of tokens such as remind me to, pick up, bread, and after work and map the sequence of tokens to the action of setting a reminder with the reminder type parameter set to shopping reminder, the item parameter set to bread and the time parameter of 5:00pm,, such that at 5:00pm that day the user receives a reminder to buy bread.
[0051] The local action engine 116 may work in conjunction with the local parser engine 114 and perform one or more actions as dictated by parsed text (e.g., action(s) and action parameter(s)) provided by local parser engine 114. For example, if the local parser engine 114 determines that text invokes the 3P agent 130 and includes action parameters to pass to the 3P agent 130, the local action engine 116 may establish a communications session with the 3P agent and transmit the action parameters to the 3P agent 130. For local actions, the local action engine 116 may generate local responsive content and provide that local responsive content to the output engine 118 for providing corresponding output for presentation to a user via the device 106. The local action engine 116 may utilize one or more stored content models 156 for generating local content and/or performing other actions. The content models 156 may, for example, incorporate various rules for creating local responsive content.
[0052] The output engine 118 provides instances of output to the device 106. An instance of output may be based on local responsive content (from local action engine 116) and/or 3P responsive content (e.g., from 3P agent 130 or other 3P agent). In some implementations, the output engine 118 may include a text to speech engine that converts textual components of responsive content to an audio format, and the output provided by the output engine 118 is in an audio format (e.g., as streaming audio). In some implementations, the responsive content may already be in an audio format. In some implementations, the output engine 118 additionally or alternatively provides textual reply content as output (optionally for conversion by the device 106 to audio) and/or provides output for graphical display by the device 106.
-16[0053] When the local agent 110 is facilitating a dialog between the device 106 and the 3P agent 110, the voice to text engine 112 converts instances of voice input received during the dialog to text, and the local agent 110 provides at least some of that text to the 3P agent 130. Further, the 3P agent 130 provides instances of 3P responsive content to the local agent 110 and the output engine 118 generates instances of output based on corresponding instance of 3P responsive content. In some situations, output from the local parser engine 114 and/or the local action engine 116 may also be provided to the 3P agent 110 (e.g., to facilitate semantic understanding of text by the 3P agent 110). However, in other situations just converted text from the voice to text engine 112 may be provided (e.g., the 3P agent 130 performs its own semantic processing).
[0054] The 3P agent 130 may include a 3P contextual parameters engine 132 and a 3P content engine 134. In some implementations, the engines 132 and 134 may be combined. In many implementations, the 3P agent 130 may include additional engines such as its own local parser engine. Moreover, in many implementations the 3P agent 130 may access various stored models and/or other resources (e.g., its own grammar model(s) and/or content model(s)) in generating 3P contextual parameters and/or 3P responsive content. [0055] In response to text (and optionally additional content) provided by local agent 110, the 3P content engine 134 generates 3P responsive content that is responsive to the text. The 3P content engine 134 may utilize 3P grammar model(s) and/or content model(s) in generating the 3P responsive content.
[0056] For some 3P responsive content, the 3P contextual parameters engine 132 provides 3P contextual parameters that indicate one or more potential features of further voice input to be provided in response to that 3P responsive content. The 3P contextual parameters engine 132 may utilize one or more models of the 3P agent in determining contextual parameters that are appropriate for given 3P responsive content. For example, a grammar model of the 3P agent may map instances of 3P responsive content to corresponding 3P contextual parameters.
[0057] As some examples, assume 3P agent 130 provides restaurant reservation functionality. For 3P responsive content of what time, contextual parameters may be mapped thereto that indicate a semantic type of time. They may be transmitted by the 3P agent 130 to the local agent 110 for use by the voice to text engine 112 to bias voice to text conversion of at least some responsive voice input (received responsive to output based on
-17what time) toward tokens having a semantic type of time (e.g., to bias toward 8:00 vs. ate for voice input of eight). For 3P responsive content of any seating preferences, contextual parameters may be mapped thereto that indicate explicit tokens such as outdoor, patio seating, indoor, booth, table, etc. They may be transmitted by the 3P agent 130to the local agent 110 for use by the voice to text engine 112 to bias voice to speech conversion of at least some responsive voice input (received responsive to output based on any seating preferences) toward those tokens. For 3P responsive content of which restaurant, contextual parameters may be mapped thereto that indicate a semantic type of restaurant. They may be transmitted by the 3P agent 130 to the local agent 110 for use by the voice to text engine 112 to bias voice to speech conversion of at least some responsive voice input (received responsive to output based on which restaurant) toward names of restaurants. For instance, the voice to text engine 112 may optionally utilize the restaurant semantic type and user parameters 158 to identify, and bias towards, restaurant names stored in association with the user (e.g., restaurants local to the user). Also, for instance, the voice to text engine 112 may additionally or alternatively optionally utilize the restaurant semantic type and previously provided names of restaurants supported by the 3P agent 130 to identify, and bias towards, restaurant names stored in association with the 3P agent 130.
[0058] In some implementations, the voice to text engine 112 may additionally or alternatively infer 3P contextual parameters based on the 3P responsive content itself (in addition to, or in lieu of, 3P contextual parameters). For example, based on the presence of restaurant in 3P responsive content of which restaurant?, the voice to text engine 112 may utilize the user parameters 158 to identify, and bias towards, restaurant names stored in association with the user. In some implementations, where the voice to text engine 112 infers 3P contextual parameters based on the 3P responsive content itself, the 3P agent 130 may optionally omit the 3P contextual parameters engine 132 and may not transmit 3P contextual parameters that are in addition to the 3P responsive content.
[0059] In FIG. 1, the 3P responsive content is illustrated as being provided to the output engine 118 and the 3P contextual parameters are illustrated as being provided to the voice to text engine 112. However, in some implementations, both the 3P responsive content and the 3P contextual parameters are provided to the local agent 110 directly, which then provides them to one or more of its engines. For example, the local agent 110 may provide
-18both the 3P contextual parameters and the 3P responsive content to the voice to text engine 112. When both 3P responsive content and 3P contextual parameters are transmitted to the local agent 110, they may be transmitted in a single transmission or in separate transmissions.
[0060] Turning now to FIGS. 2-5, examples of methods that may be performed by components of the environment of FIG. 1 are described.
[0061] FIG. 2 is a flowchart illustrating an example method 200 of dynamically adapting voice to text conversion based on third-party agent provided content. For convenience, the operations of the flow chart are described with reference to a system that performs the operations. This system may include various components of various computer systems, such as one or more components of local agent 110. Moreover, while operations of method 200 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted or added.
[0062] At block 252, the system receives voice input. For example, the system may receive voice input in the form of streaming audio data generated by a voice enabledelectronic device based on spoken input sensed by a transducer of the device.
[0063] At block 254, the system converts the voice input to text. For example, a voice to text engine of the system may convert the voice input to text using a voice to text model, such as a finite state decoding graph.
[0064] At block 256, the system determines whether the converted text invokes a 3P agent. For example, the system may determine a particular 3P agent is invoked based on the converted text including key word(s) for the particular 3P agent and/or reference to an action and/or item managed by the particular 3P agent. In some implementations, the system may analyze the text as it is being converted (e.g., token by token) and may determine invocation of the 3P agent based on converted text from a first segment of the voice input. In some of those implementations, the system may optionally utilize one or more pre-stored contextual parameters for the 3P agent in performing voice to text conversion of the remaining segment of the voice input. One example of this is described in more detail in method 400 of FIG. 4.
[0065] If the system determines at bock 256 that a 3P agent is not invoked, the system proceeds to blocks 258, 260, and 262. At block 258 the system generates local responsive content. For example, the system may generate the local responsive content utilizing local
-19grammar models and/or local content models of the system. At block 260, the system provides output that is based on the local responsive content. For example, the output may be the local responsive content or a conversion (e.g., a text to speech conversion) of the local responsive content. The output is provided for presentation (e.g., audible or graphical) via the voice-enabled electronic device. At block 262, the system awaits additional voice input and proceeds back to block 252 upon receiving additional voice input.
[0066] If the system determines at bock 256 that a 3P agent is invoked, the system proceeds to block 270. At block 270, the system provides at least some of the converted text to the invoked 3P agent. In some implementations, the system may provide additional content in combination with the text, such as semantic labels for the text that are generated by a parser engine and/or other component of the system.
[0067] At block 272, the system receives 3P responsive content from the 3P agent in response to providing the text to the 3P agent at block 270. The 3P responsive content is responsive to the text provided at block 270 and may be generated by the 3P agent utilizing its own semantic processing engines and/or its own semantic models. In some implementations, at block 272, the system also receives contextual parameters from the 3P agent. Those contextual parameters may be provided in combination with the 3P responsive content and may indicate one or more potential features of further voice input to be provided in response to the 3P responsive content. In some iterations of block 272, contextual parameters may not be received and/or default context may be indicated. For example, if the 3P responsive content received at block 272 is a tell/resolution instead of an ask/prompt, the 3P agent may not provide contextual parameters since further voice input directed to the 3P agent is not anticipated. Also, for example, if the 3P responsive content is an ask/prompt, in some situations the 3P agent may nonetheless not provide contextual parameters and/or indicated default context should be utilized.
For instance, if the 3P responsive content asks a relatively unconstrained question (e.g., what do you want to say in your email?), then the 3P agent may indicate default context should be utilized.
[0068] At block 274, the system provides output that is based on the 3P responsive content. For example, the output may be the 3P responsive content or a conversion (e.g., a text to speech conversion) of the 3P responsive content. The output is provided for presentation (e.g., audible or graphical) via the voice-enabled electronic device.
-20[0069] At optional block 278, the system determines whether the additional voice input it is awaiting at block 276 is anticipated to be directed to the 3P agent. In some implementations, the responsive content received at block 272 may indicate whether further voice input that is directed to the 3P agent is anticipated. For example, the responsive content may indicate whether it is an ask/prompt that requests further 3P agent related voice input (in which case further input that is directed to the 3P agent is anticipated) or, alternatively, is a tell/resolution that does not anticipate further 3P agent related voice input (in which case further input that is directed to the 3P agent is not anticipated).
[0070] If, at block 278, it is determined that further voice input directed to the 3P agent is not anticipated, the system may proceed back to block 252 upon receiving additional voice input (e.g., voice input that again invokes the system).
[0071] If at block 278, it is determined that further voice input directed to the 3P agent is anticipated, the system proceeds to block 280 upon receiving additional voice input. In some of those implementations the system may also provide (e.g., with the output at block 274), a command that causes microphone(s) (or other transducer(s) and/or associated components) of the voice-enabled electronic device to be opened in anticipation of receiving further voice input. In some implementations, block 278 may be omitted (e.g., the system may proceed from block 276 to block 280).
[0072] At block 280, the system receives additional voice input.
[0073] At block 282, the system converts the voice input received at block 280 to text. In some iterations of block 282, the system converts the voice input of block 280 to text based on contextual parameters received in a most recent iteration of block 272 and/or inferred from 3P responsive content received in a most recent iteration of block 272. For example, the system may bias the voice to text conversion based on tokens, state paths, and/or other features explicitly included in received 3P contextual parameter and/or otherwise indicated by the received 3P contextual parameters. For instance, the system may generate scores for tokens and/or sequences of tokens using the same voice to text model utilized in block 254, but modify one or more of the generated scores based on the contextual parameters. Also, for instance, the system may traverse one or more decoding graphs of a voice to text model, while weighting one or more state paths indicated in the contextual parameters.
-21Also, for example, the system may effectively add one or more out of value tokens to the state model based on tokens included in, or indicated by, the contextual parameters.
[0074] As described herein, in some implementations the system may optionally utilize user parameters and/or previously provided 3P contextual parameters, in combination with content received at block 272, in performing voice to text conversion in block 282.
[0075] Also, in some iterations of block 282, the system may utilize contextual parameters received at block 272 to bias conversion of a first segment of voice input, but not utilize the received contextual parameters in biasing the second segment of voice input. For example, a contextual parameter may indicate voice input is likely to include a reply token (e.g., reply with, respond with, tell him/her), followed by open text. In such a scenario, voice to text conversion may initially be biased toward reply tokens but, once a reply token is detected in converted text, the system may switch to a non reply biased voice-to text conversion since open text is indicated as likely to follow the detected reply token. A non reply biased voice to text conversion may be, for example, one that is based on a baseline voice to text / language model. As yet a further example, a contextual parameter may be of the form message $contact $some raw text, which indicates voice input may include the token message, followed by a contact token (e.g., a name of a contact of the user stored in user parameters), followed by open text. In such a scenario, voice to text conversion may initially be biased toward the token message. In response to detection of the message token, the voice to text conversion may then biased toward tokens that are names of contacts of the user. Then, in response to detection of contact token(s), the voice to text conversion may be unbiased (e.g., based on a baseline voice to text model).
[0076] Following block 282, the system proceeds to block 270 and provides at least some of the converted text from block 282 to the 3P agent, then performs one or more iterations of subsequent blocks. As appreciated from the above description and the flow chart of FIG. 2, the voice to text conversion of block 282 may be dynamically updated at each iteration to bias towards features of voice input that are more likely to be received based on the content received from the 3P agent in the most recent iteration of block 272.
[0077] FIG. 3 is a flowchart illustrating an example method 300 of using contextual parameters received from a third-party agent to bias voice to text conversion. For convenience, the operations of the flow chart are described with reference to a system that
-22performs the operations. This system may include various components of various computer systems, such as one or more components of local agent 110 (e.g., voice to text engine 112). Moreover, while operations of method 300 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted or added.
[0078] Method 300 provides some non-limiting examples of how contextual parameters received from a 3P agent (e.g., at an iteration of block 272 of method 200 of FIG. 2) may be utilized to bias voice to text conversion (e.g., at an iteration of block 282 of method 200 of FIG. 2).
[0079] At block 352, the system receives contextual parameters from a 3P agent. For example, the system may receive the contextual parameters at block 272 of the method 200 of FIG. 2.
[0080] At block 354, the system determines whether particular tokens are included in the contextual parameters. If so, the system proceeds to block 356 and biases voice to text conversion based on the included tokens. For example, the system may effectively add some of the included tokens to a base voice to text model (e.g., if they are out of vocabulary tokens) and/or may positively bias scores of some of the included tokens during voice to text conversion.
[0081] The system also performs block 358. At block 358, the system determines whether semantic type(s) of tokens are indicated in the contextual parameters. If so, the system proceeds to block 360 and biases voice to text conversion based on the semantic type(s) of tokens. In some implementations, the system biases the voice to text conversion based on modifying scores or other values of tokens associated with the sematic type(s) during voice to text conversion. In some implementations, the system may perform block 361 as part of block 360. At block 361, the system determines tokens having a stored association with the semantic type(s) and optionally having a stored association with: the 3P agent (e.g., previously provided by the 3P agent in association with the semantic type(s)) and/or the user (e.g., previously stored in association with the user and optionally the semantic type(s) in user parameters). In some of those implementations, the determined tokens may be utilized to bias the voice to text conversion in a manner such as that described with respect to block 356.
[0082] The system also performs block 362. At block 362, the system determines whether state path(s) are indicated in the contextual parameters. If so, the system
-23proceeds to block 364 and biases voice to text conversion based on the state path(s). For example, the voice to text conversion may utilize a finite state decoding graph and/or other model having multiple state paths, and may bias, during voice to text conversion using such a model, toward one or more of those state paths that are indicated in the 3P contextual parameters.
[0083] The system also performs block 366. At block 362, the system determines whether other contextual parameter(s) are included in the contextual parameters. If so, the system proceeds to block 368 and biases voice to text conversion based on those contextual parameter(s).
[0084] In many implementations and/or iterations of method 300, multiple of blocks 356, 360, 364, and 368 may be performed during all or portions of a voice to text conversion. For example, contextual parameters received from a 3P agent may include particular tokens and semantic types of tokens, and both blocks 356 and 360 may be performed. In some implementations, one or more blocks of method 300 may be omitted. For example, in some implementations, state path(s) may not be supported and blocks 362 and 364 may be omitted.
[0085] FIG. 4 is a flowchart illustrating an example method 400 of detecting an invocation of a third-party agent based on voice to text conversion of a first portion of voice input, and based on detecting the invocation: using contextual parameters stored in association with the invocation to perform voice to text conversion of a second portion of the voice input. This system may include various components of various computer systems, such as one or more components of local agent 110 (e.g., voice to text engine 112). Moreover, while operations of method 400 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted or added.
[0086] Method 400 provides some non-limiting examples of how a 3P agent invocation in text converted from a first segment/portion of voice input may be utilized to bias voice to text conversion of a second segment/portion of the voice input. For example method 400 may be performed during blocks 252, 254, and 256 of method 200 of FIG. 2.
[0087] At block 452, the system begins receiving voice input.
[0088] At block 454, the system generates and outputs a next text token based on the so-far received voice input.
-24[0089] At block 456, the system determines whether a 3P agent invocation is present in the text token(s) generated at one or more iterations of block 454. For example, the system may determine a particular 3P agent is invoked based on the text token(s) including key word(s) for the particular 3P agent and/or reference to an action and/or item managed by the particular 3P agent.
[0090] If the system determines a 3P agent invocation is not present, the system proceeds to block 458 and determines whether the entire voice input is processed (e.g., no more voice input remains and at least a threshold time duration has passed since receiving voice input). If so, the system proceeds to block 460 and provides the generated text to local engine(s) of the system, such as a local parser engine and/or local action engine. If not, the system proceeds back to block 454 and generates and outputs the next text token. [0091] If, at an iteration of block 456, the system determines a 3P agent has been invoked, the system proceeds to block 462.
[0092] At block 462, the system identifies contextual parameters stored in association with the 3P agent invocation. For example, for a restaurant reservation 3P agent may identify semantic types of time, date, restaurant name, etc. Additional or alternative types of contextual parameters may be determined, such as explicit tokens, state path(s), etc.
[0093] At block 464, the system generates an outputs the remainder of the text tokens based on the identified contextual parameters. For example, the system biases the voice to text conversion of the remaining (or yet to be received) segment of the voice input based on the contextual parameters identified at block 462.
[0094] At block 466, the system provides at least some of the generated text to the invoked 3P agent.
[0095] FIG. 5 is a flowchart illustrating an example method 500 of receiving text from a local agent and providing responsive content an optionally parameters to the local agent in response to receiving the text. This system may include various components of various computer systems, such as one or more components of 3P agent 130. Moreover, while operations of method 500 are shown in a particular order, this is not meant to be limiting. One or more operations may be reordered, omitted or added.
[0096] At block 552, the system receives text from a local agent. For example, the system may receive text transmitted to the 3P agent at block 270 of method 200 of FIG. 2.
-25[0097] At block 554, the system generates responsive content based on the text received form the local agent at block 552. In some iterations of block 554, the system may also generate contextual parameters that indicate one or more potential features of further voice input to be provided in response to the responsive content generated at block 554. Various types of contextual parameters may be generated, such as those described herein. [0098] In some implementations, at block 554, the system determines whether to generate contextual parameters based on one or more factors. For example, if the generated responsive content does not prompt the user for additional input (i.e., is a tell/resolution), the system may not generate contextual parameters for providing with the generated responsive content. Also, for example, if the generated responsive content solicits an open reply, the system may not generate contextual parameters for providing with the generated responsive content. Alternatively, instead of not generating contextual parameters for providing with the generated responsive content, the system may instead generate default contextual parameters that indicate 3P agent based biasing should not be used. In some implementations, the system may generate one or more contextual parameters that indicate 3P agent based biasing should be initially performed in voice to text conversion of voice input and, once converted text is generated that has one or more properties (e.g., that is an indicated token), 3P agent based biasing should no longer be utilized in voice to text conversion of that voice input (e.g., open text biasing should instead be used).
[0099] At block 556, the system provides the responsive content of block 554, and optionally the contextual parameters of block 554 (if any), to the local agent. For example, such content may be transmitted to the local agent and received by the local agent in an iteration of block 272 of method 200 of FIG. 2.
[00100] FIG. 6 illustrates a user 101, a voice-enabled electronic device 606, and a dialog between the user 101 and a third-party agent that may be facilitated by a local agent associated with the voice-enabled electronic device 606, according to implementations disclosed herein. The voice-enabled electronic device 606 includes one or more microphones and one or more speakers. One or more aspects of the local agent 110 of FIG. 1 may be implemented on the computing device 606 and/or on one or more computing devices that are in network communication with the computing device 606. Accordingly, for ease in explanation the local agent 110 is referenced in description of FIG. 6.
-26[00101] In FIG. 6, the user provides spoken input 680A of Book a table at eight. Voice input corresponding to the spoken input is generated by the device 606 and provided to the local agent 110 (e.g., as streaming voice input). In some implementations, the local agent 110 may utilize the method 400 of FIG. 4 to determine an invocation of a particular 3P agent based on voice to text conversion of a first portion (Book a table) of the voice input corresponding to the spoken input. Moreover, the local agent 110 may, based on determining the invocation of the particular 3P agent, perform voice to text conversion of a second portion (at eight) of the voice input corresponding to the spoken input, based on stored contextual parameters that are stored in association with invocation of the particular 3P agent. For example, the contextual parameters may indicate semantic type(s) of time and may be utilized to bias the voice to text conversion to be more likely to convert eight to 8:00 (or 20:00) than to ate.
[00102] Responsive output 682A is provided, by the device 606, to the user in an audible form. The output 682A may be based on audio data generated by the local agent 110 based on 3P responsive content of the invoked 3P agent. For example, in response to the invocation of the 3P agent, the local agent 110 may transmit at least some of the converted text corresponding to spoken input 680A to the 3P agent, receive text of Any cuisine preference? in return, and convert that text (and the introductory text This is Widget app) to the audio data.
[00103] In response to the responsive output 682A, the user provides further spoken input 680B of Laotian. Voice input corresponding to the spoken input is generated by the device 606 and provided to the local agent 110. In some implementations, the local agent 110 may utilize the responsive content from the 3P agent used to generate the responsive output 682A, and/or 3P contextual parameters received in combination with the responsive content, to perform voice to text conversion of the voice input. For example, provided 3P contextual parameters may have included the out of vocabulary token Laotian, and the voice to text conversion may be performed after adding that out of vocabulary token to the voice to text model. Accordingly, the voice input textual conversion may be recognized as Laotian, whereas it may have otherwise been recognized as an alternative term (e.g., vacation) that would not reflect the user's spoken input.
[00104] Further responsive output 682B is provided, by the device 606, to the user in an audible form. The output 682B may be based on audio data generated by the local agent
-η 110 based on 3P responsive content of the invoked 3P agent. For example, in response to conversion of the voice input corresponding to spoken input 680B, the local agent 110 may transmit at least some of the converted text to the 3P agent, receive text of Lao Cafe has availability at eight, has Laotian cuisine, and is highly rated. Want me to book? in return, and convert that text to the audio data.
[00105] In response to the further responsive output 680C, the user provides further spoken input 680C of yup. Voice input corresponding to the spoken input is generated by the device 606 and provided to the local agent 110. In some implementations, the local agent 110 may utilize the responsive content from the 3P agent used to generate the responsive output 682B, and/or 3P contextual parameters received in combination with the responsive content, to perform voice to text conversion of the voice input. For example, provided 3P contextual parameters may have indicated tokens of the semantic type affirmative or negative reply are anticipated. Accordingly, the voice input conversion to text may be biased toward the affirmative answer yup, which may prevent otherwise inaccurate conversion (e.g., to pup).
[00106] Further responsive output 682C is provided, by the device 606, to the user in an audible form. The output 682C may be based on audio data generated by the local agent 110 based on 3P responsive content of the invoked 3P agent. For example, in response to conversion of the voice input corresponding to spoken input 680C, the local agent 110 may transmit at least some of the converted text to the 3P agent, receive text of Done. I'll text you a confirmation in return, and convert that text to the audio data. As the reply content is resolution reply output, the 3P agent may not provide any 3P contextual parameters to the local agent 110 with the reply content and/or the local agent may not perform biasing directed toward that 3P agent in conjunction with the next received voice input from the device 606.
[00107] FIG. 7 is a block diagram of an example computing device 710 that may optionally be utilized to perform one or more aspects of techniques described herein. In some implementations, one or more of device 106, local agent 110, 3P agent 130, and/or other component(s) may comprise one or more components of the example computing device 710.
[00108] Computing device 710 typically includes at least one processor 714 which communicates with a number of peripheral devices via bus subsystem 712. These
-28peripheral devices may include a storage subsystem 724, including, for example, a memory subsystem 725 and a file storage subsystem 726, user interface output devices 720, user interface input devices 722, and a network interface subsystem 716. The input and output devices allow user interaction with computing device 710. Network interface subsystem 716 provides an interface to outside networks and is coupled to corresponding interface devices in other computing devices.
[00109] User interface input devices 722 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and/or other types of input devices. In general, use of the term input device is intended to include all possible types of devices and ways to input information into computing device 710 or onto a communication network.
[00110] User interface output devices 720 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices. The display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image. The display subsystem may also provide non-visual display such as via audio output devices. In general, use of the term output device is intended to include all possible types of devices and ways to output information from computing device 710 to the user or to another machine or computing device.
[00111] Storage subsystem 724 stores programming and data constructs that provide the functionality of some or all of the modules described herein. For example, the storage subsystem 724 may include the logic to perform selected aspects of the method(s) of FIGS,
2, 3, 4, and/or 5.
[00112] These software modules are generally executed by processor 714 alone or in combination with other processors. Memory 725 used in the storage subsystem 724 can include a number of memories including a main random access memory (RAM) 530 for storage of instructions and data during program execution and a read only memory (ROM) 532 in which fixed instructions are stored. A file storage subsystem 726 can provide persistent storage for program and data files, and may include a hard disk drive, a floppy diskdrive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges. The modules implementing the functionality of certain
-29implementations may be stored by file storage subsystem 726 in the storage subsystem 724, or in other machines accessible by the processor(s) 714.
[00113] Bus subsystem 712 provides a mechanism for letting the various components and subsystems of computing device 710 communicate with each other as intended. Although bus subsystem 712 is shown schematically as a single bus, alternative implementations of the bus subsystem may use multiple busses.
[00114] Computing device 710 can be of varying types including a workstation, server, computing cluster, blade server, server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computing device 710 depicted in FIG. 5 is intended only as a specific example for purposes of illustrating some implementations. Many other configurations of computing device 710 are possible having more or fewer components than the computing device depicted in FIG. 5.
[00115] In situations in which certain implementations discussed herein may collect or use personal information about users (e.g., user data extracted from other electronic communications, information about a user's social network, a user's location, a user's time, a user's biometric information, and a user's activities and demographic information), users are provided with one or more opportunities to control whether information is collected, whether the personal information is stored, whether the personal information is used, and how the information is collected about the user, stored and used. That is, the systems and methods discussed herein collect, store and/or use user personal information only upon receiving explicit authorization from the relevant users to do so. For example, a user is provided with control over whether programs or features collect user information about that particular user or other users relevant to the program or feature. Each user for which personal information is to be collected is presented with one or more options to allow control over the information collection relevant to that user, to provide permission or authorization as to whether the information is collected and as to which portions of the information are to be collected. For example, users can be provided with one or more such control options over a communication network. In addition, certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. As one example, a user's identity may be treated so that no personally identifiable information can be determined. As another example, a user's geographic
-30location may be generalized to a larger region so that the user's particular location cannot be determined.
[00116] While several implementations have been described and illustrated herein, a variety of other means and/or structures for performing the function and/or obtaining the results and/or one or more of the advantages described herein may be utilized, and each of such variations and/or modifications is deemed to be within the scope of the implementations described herein. More generally, all parameters, dimensions, materials, and configurations described herein are meant to be exemplary and that the actual parameters, dimensions, materials, and/or configurations will depend upon the specific application or applications for which the teachings is/are used. Those skilled in the art will recognize, or be able to ascertain using no more than routine experimentation, many equivalents to the specific implementations described herein. It is, therefore, to be understood that the foregoing implementations are presented by way of example only and that, within the scope of the appended claims and equivalents thereto, implementations may be practiced otherwise than as specifically described and claimed. Implementations of the present disclosure are directed to each individual feature, system, article, material, kit, and/or method described herein. In addition, any combination of two or more such features, systems, articles, materials, kits, and/or methods, if such features, systems, articles, materials, kits, and/or methods are not mutually inconsistent, is included within the scope of the present disclosure.
Claims (17)
1. A method implemented by one or more processors, comprising:
receiving a voice input provided by a user via a voice-enabled electronic device;
performing a voice to text conversion to convert the voice input to text; transmitting the text to a third-party agent via one or more network interfaces;
receiving content from the third-party agent in response to transmitting the text, the receiving being via one or more of the network interfaces and the content including:
responsive content that is responsive to the text; providing output that is based on the responsive content for presentation to the user via the voice-enabled electronic device, the output being provided in response to the voice input;
receiving an additional voice input provided by the user via the voice-enabled electronic device and provided by the user in response to the output; and using the content received from the third-party agent to perform an additional voice to text conversion to convert the additional voice input to additional text.
2. The method of claim 1, wherein the content received from the third-party agent further includes one or more contextual parameters that are in addition to the responsive content and that indicate one or more potential features of further voice input to be provided in response to the responsive content, and wherein using the content to perform the additional voice to text conversion comprises:
using the contextual parameters to perform the additional voice to text conversion.
3. The method of claim 2, wherein a voice to text model is used in performing the additional voice to text conversion and wherein using the contextual parameters to perform the additional voice to text conversion comprises:
biasing, based on the contextual parameters, values that are generated over the voice to text model.
-324. The method of claim 3, wherein the one or more potential features indicated by the contextual parameters include particular tokens and wherein biasing the values that are generated over the voice to text model based on the contextual parameters comprises:
modifying scores generated for the particular tokens over the voice to text model.
5. The method of claim 4, wherein the contextual parameters received from the third-party agent include the particular tokens.
6. The method of claim 4, wherein the contextual parameters received from the third-party agent include a semantic type of tokens and further comprising:
determining the particular tokens based on the particular tokens being stored in association with the semantic type.
7. The method of claim 6, wherein determining the particular tokens is based on the particular tokens being stored in association with both the user and the semantic type.
8. The method of claim 6, wherein determining the particular tokens is based on the particular tokens being previously provided by the third-party agent in association with the semantic type.
9. The method of any one of claims 2 to 8, wherein the one or more potential features indicated by the contextual parameters include state path indications that indicate potential paths of the further voice input in a voice to text model.
10. The method of any one of claims 2 to 9, wherein using the contextual parameters to perform the additional voice to text conversion comprises:
converting the additional voice input to the additional text using both the contextual parameters and additional user parameters that are assigned to the user or the device, and were assigned independent of the content received from the third party agent.
11. The method of claim 10, wherein the additional user parameters are based on at least one of: a location associated with the user and additional electronic devices associated with the user.
-3312. The method of any one of claims 2 to 11, wherein the responsive content and the contextual parameters are received as part of single transmission received from the third-party agent.
13. The method of any one of the preceding claims, wherein a voice to text model is used in performing the additional voice to text conversion and wherein using the content to perform the additional voice to text conversion comprises:
generating a contextual voice to text model based on the content; and selecting the additional text based on both the voice to text model and the contextual voice to text model.
14. The method of any one of the preceding claims, wherein using the content to perform the additional voice to text conversion comprises:
converting a first segment of the voice input to a first textual segment of the additional text with biasing based on the content; and converting a second segment of the voice input to a second segment of the additional text without biasing based on the content, the second segment of the voice input being subsequent to the first segment.
15. The method of claim 14, further comprising:
determining to not bias the second segment of the voice input based on contextual parameters included in the content, wherein determining to not bias the second segment is based on the contextual parameters indicating that contextual biasing should not occur following a voice input segment that conforms to the first textual segment.
16. A method implemented by one or more processors, comprising:
storing an association of one or more contextual parameters to an invocation of a third-party agent;
receiving a voice input provided by a user via a voice-enabled electronic device;
converting a first segment of the voice input to text using a voice to text model and without biasing of the voice to text model based on the contextual parameters;
determining that the text conforms to the invocation;
-34in response to determining that the text conforms to the invocation of the third party agent and in response to the contextual parameters being stored in association with the invocation:
converting a second segment of the voice input to additional text using the voice to text model and using the contextual parameters to bias the voice to text model, the second segment of the voice input being subsequent to the first segment, and transmitting at least a portion of the additional text to the thirdparty agent.
17. The method of claim 16, wherein the invocation is a reference to an action or item managed by the third-party agent
18. A system, comprising:
one or more network interfaces in selective communication with a voiceenabled electronic device and with a third-party agent;
memory storing instructions;
one or more processors operable to execute instructions stored in the memory, comprising instructions to:
receive, via one or more of the network interfaces, a voice input from the voice-enabled electronic device;
perform a voice to text conversion to convert the voice input to text; transmit, via one or more of the network interfaces, the text to a third-party agent;
receive, via one or more of the network interfaces, content from the third-party agent in response to transmitting the text, the content including:
responsive content that is responsive to the text;
transmit, to the voice-enabled electronic device via one or more of the network interfaces, output that is based on the responsive content, the output being responsive to the voice input;
receive, via one or more of the network interfaces, an additional voice input from the voice-enabled electronic device, the additional voice input being responsive to the output; and use the content received from the third-party agent to perform an
-35additional voice to text conversion to convert the additional voice input to additional text.
19. The system of claim 18, wherein the content received from the third-party agent further includes one or more contextual parameters that are in addition to the responsive content and that indicate one or more potential features of further voice input to be provided in response to the responsive content, and wherein the instructions to use the content to perform the additional voice to text conversion include instructions to:
use the contextual parameters to perform the additional voice to text conversion.
Intellectual
Property
Office
Application No: GB1715619.1
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/372,188 US10600418B2 (en) | 2016-12-07 | 2016-12-07 | Voice to text conversion based on third-party agent content |
Publications (4)
Publication Number | Publication Date |
---|---|
GB201715619D0 GB201715619D0 (en) | 2017-11-08 |
GB2557400A true GB2557400A (en) | 2018-06-20 |
GB2557400A9 GB2557400A9 (en) | 2018-09-12 |
GB2557400B GB2557400B (en) | 2020-02-26 |
Family
ID=60009733
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
GB1715619.1A Active GB2557400B (en) | 2016-12-07 | 2017-09-27 | Voice to text conversion based on third-party agent content |
Country Status (6)
Country | Link |
---|---|
US (5) | US10600418B2 (en) |
EP (3) | EP3545520B1 (en) |
CN (2) | CN110050303B (en) |
DE (1) | DE202017105865U1 (en) |
GB (1) | GB2557400B (en) |
WO (1) | WO2018106309A1 (en) |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10049670B2 (en) * | 2016-06-06 | 2018-08-14 | Google Llc | Providing voice action discoverability example for trigger term |
US10600418B2 (en) | 2016-12-07 | 2020-03-24 | Google Llc | Voice to text conversion based on third-party agent content |
CN110390948B (en) * | 2019-07-24 | 2022-04-19 | 厦门快商通科技股份有限公司 | Method and system for rapid speech recognition |
EP3800632A1 (en) * | 2019-10-01 | 2021-04-07 | Rovi Guides, Inc. | Method and apparatus for generating hint words for automated speech recognition |
US11527234B2 (en) | 2019-10-01 | 2022-12-13 | Rovi Guides, Inc. | Method and apparatus for generating hint words for automated speech recognition |
US11574634B2 (en) | 2019-11-27 | 2023-02-07 | Google Llc | Interfacing with applications via dynamically updating natural language processing |
KR20220062360A (en) | 2019-11-27 | 2022-05-16 | 구글 엘엘씨 | Interfaces to applications with dynamically updated natural language processing |
US11682399B2 (en) * | 2020-07-14 | 2023-06-20 | Dell Products L.P. | Dynamic redfish query URI binding from context oriented interaction |
US11532313B2 (en) * | 2020-08-27 | 2022-12-20 | Google Llc | Selectively storing, with multiple user accounts and/or to a shared assistant device: speech recognition biasing, NLU biasing, and/or other data |
US11935519B2 (en) * | 2020-10-15 | 2024-03-19 | Google Llc | Preserving speech hypotheses across computing devices and/or dialog sessions |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2015179510A1 (en) * | 2014-05-20 | 2015-11-26 | Amazon Technologies, Inc. | Context interpretation in natural language processing using previous dialog acts |
US20150370787A1 (en) * | 2014-06-18 | 2015-12-24 | Microsoft Corporation | Session Context Modeling For Conversational Understanding Systems |
Family Cites Families (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6144989A (en) * | 1998-06-15 | 2000-11-07 | Dejima, Inc. | Adaptive agent-oriented software architecture |
US8239197B2 (en) * | 2002-03-28 | 2012-08-07 | Intellisist, Inc. | Efficient conversion of voice messages into text |
US7542907B2 (en) * | 2003-12-19 | 2009-06-02 | International Business Machines Corporation | Biasing a speech recognizer based on prompt context |
US20070016401A1 (en) | 2004-08-12 | 2007-01-18 | Farzad Ehsani | Speech-to-speech translation system with user-modifiable paraphrasing grammars |
US7640160B2 (en) * | 2005-08-05 | 2009-12-29 | Voicebox Technologies, Inc. | Systems and methods for responding to natural language speech utterance |
US8265933B2 (en) * | 2005-12-22 | 2012-09-11 | Nuance Communications, Inc. | Speech recognition system for providing voice recognition services using a conversational language model |
US7996228B2 (en) * | 2005-12-22 | 2011-08-09 | Microsoft Corporation | Voice initiated network operations |
US20100076843A1 (en) * | 2006-02-28 | 2010-03-25 | Speaksoft, Inc. | Live-agent-enabled teis systems |
US8204738B2 (en) * | 2006-11-03 | 2012-06-19 | Nuance Communications, Inc. | Removing bias from features containing overlapping embedded grammars in a natural language understanding system |
US8589161B2 (en) * | 2008-05-27 | 2013-11-19 | Voicebox Technologies, Inc. | System and method for an integrated, multi-modal, multi-device natural language voice services environment |
US10241752B2 (en) | 2011-09-30 | 2019-03-26 | Apple Inc. | Interface for a virtual digital assistant |
US9858925B2 (en) * | 2009-06-05 | 2018-01-02 | Apple Inc. | Using context information to facilitate processing of commands in a virtual assistant |
US9159322B2 (en) * | 2011-10-18 | 2015-10-13 | GM Global Technology Operations LLC | Services identification and initiation for a speech-based interface to a mobile device |
WO2013155619A1 (en) * | 2012-04-20 | 2013-10-24 | Sam Pasupalak | Conversational agent |
US20140035823A1 (en) * | 2012-08-01 | 2014-02-06 | Apple Inc. | Dynamic Context-Based Language Determination |
CA2823835C (en) * | 2012-08-15 | 2018-04-24 | Homer Tlc, Inc. | Voice search and response based on relevancy |
US9070366B1 (en) * | 2012-12-19 | 2015-06-30 | Amazon Technologies, Inc. | Architecture for multi-domain utterance processing |
US8977555B2 (en) * | 2012-12-20 | 2015-03-10 | Amazon Technologies, Inc. | Identification of utterance subjects |
US9558743B2 (en) * | 2013-03-15 | 2017-01-31 | Google Inc. | Integration of semantic context information |
US20150073790A1 (en) * | 2013-09-09 | 2015-03-12 | Advanced Simulation Technology, inc. ("ASTi") | Auto transcription of voice networks |
US8862467B1 (en) | 2013-12-11 | 2014-10-14 | Google Inc. | Contextual speech recognition |
US9502032B2 (en) * | 2014-10-08 | 2016-11-22 | Google Inc. | Dynamically biasing language models |
US9865280B2 (en) * | 2015-03-06 | 2018-01-09 | Apple Inc. | Structured dictation using intelligent automated assistants |
US9966073B2 (en) | 2015-05-27 | 2018-05-08 | Google Llc | Context-sensitive dynamic update of voice to text model in a voice-enabled electronic device |
US10600418B2 (en) | 2016-12-07 | 2020-03-24 | Google Llc | Voice to text conversion based on third-party agent content |
-
2016
- 2016-12-07 US US15/372,188 patent/US10600418B2/en active Active
-
2017
- 2017-09-21 WO PCT/US2017/052730 patent/WO2018106309A1/en unknown
- 2017-09-21 CN CN201780076180.3A patent/CN110050303B/en active Active
- 2017-09-21 EP EP17778419.6A patent/EP3545520B1/en active Active
- 2017-09-21 EP EP21190701.9A patent/EP3926625B1/en active Active
- 2017-09-21 CN CN202311011370.0A patent/CN117059097A/en active Pending
- 2017-09-21 EP EP24150123.8A patent/EP4332959A3/en active Pending
- 2017-09-26 DE DE202017105865.4U patent/DE202017105865U1/en active Active
- 2017-09-27 GB GB1715619.1A patent/GB2557400B/en active Active
-
2020
- 2020-02-14 US US16/791,334 patent/US11232797B2/en active Active
- 2020-10-05 US US17/063,398 patent/US10943591B2/en active Active
-
2022
- 2022-01-24 US US17/582,926 patent/US11626115B2/en active Active
-
2023
- 2023-03-23 US US18/125,606 patent/US11922945B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2015179510A1 (en) * | 2014-05-20 | 2015-11-26 | Amazon Technologies, Inc. | Context interpretation in natural language processing using previous dialog acts |
US20150370787A1 (en) * | 2014-06-18 | 2015-12-24 | Microsoft Corporation | Session Context Modeling For Conversational Understanding Systems |
Also Published As
Publication number | Publication date |
---|---|
US20230260517A1 (en) | 2023-08-17 |
US11232797B2 (en) | 2022-01-25 |
US10600418B2 (en) | 2020-03-24 |
EP3545520B1 (en) | 2021-09-08 |
DE202017105865U1 (en) | 2017-12-11 |
US10943591B2 (en) | 2021-03-09 |
EP3926625A1 (en) | 2021-12-22 |
US11626115B2 (en) | 2023-04-11 |
US20220148596A1 (en) | 2022-05-12 |
GB2557400A9 (en) | 2018-09-12 |
US20200184974A1 (en) | 2020-06-11 |
US11922945B2 (en) | 2024-03-05 |
EP3926625B1 (en) | 2024-03-06 |
GB201715619D0 (en) | 2017-11-08 |
WO2018106309A1 (en) | 2018-06-14 |
CN117059097A (en) | 2023-11-14 |
CN110050303A (en) | 2019-07-23 |
EP4332959A2 (en) | 2024-03-06 |
EP3545520A1 (en) | 2019-10-02 |
CN110050303B (en) | 2023-08-22 |
GB2557400B (en) | 2020-02-26 |
US20190122657A1 (en) | 2019-04-25 |
EP4332959A3 (en) | 2024-05-15 |
US20210020180A1 (en) | 2021-01-21 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11922945B2 (en) | Voice to text conversion based on third-party agent content | |
US11562742B2 (en) | Generating and transmitting invocation request to appropriate third-party agent | |
US9990591B2 (en) | Automated assistant invocation of appropriate agent | |
US11830491B2 (en) | Determining whether to automatically resume first automated assistant session upon cessation of interrupting second session | |
US20210043191A1 (en) | Text independent speaker recognition | |
US11817106B2 (en) | Selectively storing, with multiple user accounts and/or to a shared assistant device: speech recognition biasing, NLU biasing, and/or other data |