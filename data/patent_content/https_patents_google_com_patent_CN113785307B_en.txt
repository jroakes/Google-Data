CN113785307B - System and method for security and privacy preserving device classification - Google Patents
System and method for security and privacy preserving device classification Download PDFInfo
- Publication number
- CN113785307B CN113785307B CN202080004248.9A CN202080004248A CN113785307B CN 113785307 B CN113785307 B CN 113785307B CN 202080004248 A CN202080004248 A CN 202080004248A CN 113785307 B CN113785307 B CN 113785307B
- Authority
- CN
- China
- Prior art keywords
- classification
- model
- client device
- request
- context
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/08—Network architectures or network communication protocols for network security for authentication of entities
- H04L63/0876—Network architectures or network communication protocols for network security for authentication of entities based on the identity of the terminal or configuration, e.g. MAC address, hardware or software configuration or device fingerprint
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/23—Updating
- G06F16/2379—Updates performed during online database operations; commit processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/285—Selection of pattern recognition techniques, e.g. of classifiers in a multi-classifier system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/30—Authentication, i.e. establishing the identity or authorisation of security principals
- G06F21/44—Program or device authentication
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6281—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database at program execution time, where the protection is within the operating system
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0251—Targeted advertisements
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/04—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks
- H04L63/0407—Network architectures or network communication protocols for network security for providing a confidential data exchange among entities communicating through data packet networks wherein the identity of one or more communicating identities is hidden
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2125—Just-in-time application of countermeasures, e.g., on-the-fly decryption, just-in-time obfuscation or de-obfuscation
Abstract
At least one aspect of the present disclosure is directed to systems and methods for security and privacy preserving device classification. The server may maintain a plurality of data records, each data record including an indication of the request and a known classification value. The server may train the context fuzzy model using each of the plurality of requests and the known classification values. The server may train the classification model using resource and category information from a data structure in memory of the client device. The server may transmit the context fuzzy model to a different plurality of client devices. The server may receive a request including a classification vector and a classification of request metadata. The server may use a classification model to determine the classification of the device responsible for the request. The server may communicate the device classification to the device responsible for the request.
Description
Background
In a computer networking environment, such as the internet, third-party content providers provide third-party content items for display on end-user computing devices. These third-party content items, such as advertisements, may be displayed on web pages associated with respective publishers. These third-party content items may include content that identifies the third-party content provider that provided the content item.
Disclosure of Invention
Classifying client devices poses a risk to data security and unnecessarily utilizes network resources. To properly classify the device, the device may send the context information to a verification or classification server, which may use the context information to classify the client device into one or more categories, such as an interest category, a verification category (e.g., a category that includes permissions to access protected content), or a device characteristics category (e.g., a category or classification based on any dimension provided in the device context information, etc.), among others. Transferring device information over a network may subject the client device to a data security risk because the security of the device information is limited by the overall security of the network as soon as the device information leaves the device. Furthermore, frequent transmission of up-to-date context information to the classification servers can result in over-utilization of network and computing resources.
The systems and methods discussed herein enable a classification server to generate a fuzzy model based on known client device information. The fuzzy model may take device context information as input and generate fuzzy output that may be used as input to a device classification model. The ambiguous output can be processed such that it may be difficult or impossible to determine any client device context information (e.g., to protect the privacy and security of protected information, etc.), but can still be used to accurately classify the client device using the classification model. In conjunction with generating the fuzzy model, the classification server may generate a classification model that may use the fuzzy output along with additional unprotected metadata information as input. The classification model may produce an accurate estimate of the classification of the client device. The classification server may send the fuzzy model to the unclassified client device, which may use the fuzzy model to generate a fuzzy output representing its context. Instead of communicating the device context to the classification server, the unclassified client device may communicate the fuzzy output to the validation server for device classification. The size of the fuzzy output may be much smaller than the overall device context, and thus the network utilization of the device classification system may be improved by reducing the amount of transmissions over the network.
At least one aspect of the subject technology is directed to a method of generating an on-device classification model to improve security, privacy, and network resource utilization. The method may be performed, for example, by one or more servers and storage. The method may include maintaining a plurality of data records associated with a respective plurality of client devices in a database. Each data record may include an indication of the request and a known classification value. The request may include client device context information and client device metadata. The method may include training a context blur model using each of the plurality of requests and the known classification value. The context fuzzy model may be configured to receive client device context information as input and provide an output classification vector as output. The method may include training a classification model using each of a plurality of request and known classification values, the classification model configured to receive as inputs a classification vector and metadata inputs, and to provide as an output a device classification value. The method may include transmitting the context obfuscation model to a plurality of second client devices to obfuscate context information of each of the plurality of client devices. The method may include receiving a request for a classification that includes (1) a classification vector created as an output of a context blur model executed by a client device, and (2) request metadata. The method may include determining a device classification using a classification vector received in a request for classification and request metadata as inputs to a classification model. The method may include transmitting the device classification to a device responsible for the request for classification.
In some implementations, the method may include generating, by the one or more processors, a classification data record including an indication of the request for classification and the device classification in response to determining the classification of the client device. In some implementations, the method can include storing the classification data record in a database in association with a device associated with the request for classification. In some implementations, the method can include updating the context ambiguity model using at least the determined device classification to create an updated context ambiguity model. In some implementations, the method can include transmitting the updated context ambiguity model to each of the plurality of second client devices. In some implementations, the method can include updating the classification model using the updated device classification and the updated context fuzzy model to create an updated classification model.
In some implementations, the method can include receiving a plurality of requests and a plurality of known classification values, each of the plurality of requests and the plurality of known classifications associated with a respective plurality of client devices. In some implementations, the method may include generating a plurality of data records, each data record including an indication of a respective request of the plurality of requests and a respective known classification value of the plurality of known classification values. In some implementations, the method can include storing a plurality of data records in a database in association with a respective plurality of client devices. In some implementations, the method can include training a combined model using each of a plurality of requests and known classification values, the combined model configured to receive client device context information and metadata inputs as inputs and provide a device classification value as an output. In some implementations, the method can include extracting, by the one or more processors, the context blur model from the combined model to generate the context blur model. In some embodiments, the method may include extracting a classification model from the combined model to generate the classification model.
In some implementations, the method can include normalizing the request metadata to create a normalized metadata vector. In some implementations, the method can include determining a device classification using the classification vector and the normalized metadata vector received in the request for classification as inputs to a classification model. In some implementations, the method can include authenticating the device classification value to determine that the device responsible for the request for classification can access the protected content. In some implementations, the method can include providing access to the protected content to the device responsible for the request for classification in response to determining that the device responsible for the request for classification can access the protected content. In some implementations, the method can include determining, using a classification model, a likelihood that a device responsible for the request for classification will view the protected content. In some implementations, the categorized request indicates a start of uniform resource identifier (activation) on the client device responsible for the categorized request.
At least one other aspect of this technology is directed to a system for generating an on-device classification model to improve security, privacy, and network resource utilization. The system may include one or more processors and a memory. The system may maintain, in a database, a plurality of data records associated with a respective plurality of client devices, each data record including an indication of a request and a known classification value, wherein the request includes client device context information and client device metadata. The system may train a context ambiguity model using each of a plurality of requests and known classification values, the context ambiguity model configured to receive client device context information as input and provide an output classification vector as output. The system may train a classification model using each of the plurality of requests and known classification values, the classification model configured to receive as inputs a classification vector and metadata inputs, and to provide as outputs a device classification value. The system may transmit the context obfuscation model to the plurality of second client devices to obfuscate context information of each of the plurality of client devices. The system may receive a request for a classification that includes (1) a classification vector created as an output of a context ambiguity model executed by a client device and (2) request metadata. The system may determine a device classification using a classification vector received in the request for classification and the request metadata as inputs to the classification model. The system may communicate the device classification to the device responsible for the request for classification.
In some implementations, the system can generate a classification data record including an indication of the request for classification and the device classification in response to determining the classification of the client device. In some implementations, the system can store the classification data record in the database in association with the device associated with the classified request. In some implementations, the system can update the context ambiguity model using at least the determined device classification to create an updated context ambiguity model. In some implementations, the system can transmit the updated context ambiguity model to each of the plurality of second client devices. In some implementations, the system can update the classification model using the updated device classification and the updated context fuzzy model to create an updated classification model. In some implementations, a system can receive a plurality of requests and a plurality of known classification values, each associated with a respective plurality of client devices. In some implementations, the system can generate a plurality of data records, each data record including an indication of a respective request of the plurality of requests and a respective known classification value of the plurality of known classification values. In some implementations, the system can store a plurality of data records in a database in association with a corresponding plurality of client devices.
In some implementations, the system can train a combined model using each of the plurality of requests and the known classification value, the combined model configured to receive client device context information and metadata inputs as inputs and provide a device classification value as an output. In some implementations, the system can extract the context blur model from the combined model to generate the context blur model. In some implementations, the system can extract a classification model from the combined model to generate a classification model. In some implementations, the system can normalize the request metadata to create a normalized metadata vector. In some implementations, the system can determine the device classification using the classification vector and the normalized metadata vector received in the request to classify as inputs to the classification model. In some implementations, the system can authenticate the device classification value to determine that the device responsible for the request for classification can access the protected content. In some implementations, in response to determining that the device responsible for the request for classification can access the protected content, the system can provide access to the protected content to the device responsible for the request for classification.
In some implementations, the system can use a classification model to determine a likelihood that the device responsible for the request for classification will view the protected content. In some implementations, the categorized request indicates initiation of a uniform resource identifier on the client device responsible for the categorized request.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification. Aspects can be combined, and it will be readily appreciated that features described in the context of one aspect of the invention can be combined with other aspects. Aspects can be implemented in any convenient form. For example, by means of a suitable computer program which may be carried on a suitable carrier medium (computer readable medium), which may be a tangible carrier medium (e.g. a diskette) or an intangible carrier medium (e.g. a communications signal). Aspects may also be implemented using suitable apparatus, which may take the form of a programmable computer running a computer program arranged to implement the aspects.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. These and other aspects and features of the present teachings will become apparent to those ordinarily skilled in the art upon review of the following description in conjunction with the accompanying figures. In the drawings:
FIG. 1 illustrates a block diagram that depicts an example system for classifying unclassified client devices in a secure and privacy-preserving manner;
FIG. 2 shows a schematic diagram of training a fuzzy and classification model based on contextual information and feedback;
FIG. 3 illustrates a schematic diagram of classifying unclassified client devices using an on-device fuzzy model and a classification model;
FIG. 4 illustrates a flow diagram of a method of training a fuzzy model for distribution to unclassified client devices;
FIG. 5 illustrates a flow diagram of a method of securely maintaining device context and providing a classification request without compromising device privacy; and
FIG. 6 shows a general architecture of an illustrative computer system that may be employed to implement any of the computers discussed herein.
Detailed Description
The following is a detailed description of various concepts and embodiments thereof related to a method, apparatus and system for generating an on-device classification model for improving security, privacy and network resource utilization. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to implementation in any particular manner. Examples of specific implementations and applications are provided primarily for illustrative purposes.
The device classification platform may classify the type, aspects, behavior, and other information about the client device and its associated activities. Using context information (context information) from the client device, such as interaction information, location data, displayed information, operating system state, and executing application state information, the device classification platform may accurately classify the client device across multiple dimensions. Typically, the device classification platform trains a machine learning algorithm or model (e.g., a neural network, a deep neural network, a convolutional neural network, a linear regression model, etc.) to classify unknown devices using contextual information. The device classification platform may classify devices using the device information and context information and use the device classifications to provide additional access permissions, redirection information, customized content, device status, device grouping, computing resource allocation, network bandwidth allocation, routing information, or other information or actions.
However, accurate classification of client devices may utilize frequent transmissions of device context data and device metadata. This context data may be relatively large and frequent transmission of large-scale context information may unnecessarily tie up network and computing resources. Further, contextual information may include sensitive device information (e.g., personal information) or information that may not be shareable due to certain regulations. When client device context data is transmitted, it is susceptible to man-in-the-middle attacks, data leaks, or other network vulnerabilities, presenting security risks to the entire network system. Accordingly, a system that reduces the amount of data transfers containing sensitive device information while providing some protection against network vulnerabilities will be recognized.
To address the foregoing, the systems and methods of the present technology are broadly directed to a system for classifying devices based on a trained model output, wherein the trained model output represents fuzzy context values collected at each client device. The classification system may train the client-side model using known client device context data to provide a vector (e.g., a vector of floating points, integer values, etc.) that may represent an N-dimensional classification location in a client device classification space. The classification system may further train the second model using the N-dimensional classification vector and additional known metadata as inputs. The second model may provide a classification value of the client device as an output based on information provided to the model as an input. After training the second model using known outputs from the first model, the classification system may distribute the first model to one or more unknown client devices.
When executed on the client device, the application may collect the device context information locally and provide it as input to the first model provided by the classification system. The first model then generates an N-dimensional vector representing context signals of the device. The device context information may include device application state, interaction data, historical application metadata, web browser data, device location history, and wireless communication data, device hardware information, and other information available to an operating system or application executing on the client device. When a device requires an operation involving a classification, the device may request the classification from the classification system and include the output vector in the classification request. The request may include additional data regarding the type of classification request (e.g., access request, content request, network routing request, etc.). The classification system may use the classification vector and additional data received from the client device as input to the second model and determine a device classification. The classification system may send a response including the device classification back to the client device responsible for the request.
Thus, the solution described herein may thus provide increased computational performance and reduce overall network utilization when compared to other device classification systems. Instead of providing most of the context information to the classification system in each classification request, each client device may locally compute vectors that occupy less space, thereby reducing the amount of data transmitted to the classification server. In turn, the classification server does not need to parse, process, or otherwise manage the large amount of context information arriving from each client device, thereby reducing the amount of server-side computing resources required for device classification. Furthermore, by transmitting the ambiguous context vector, each client device can be protected from man-in-the-middle attacks that may attempt to monitor or access device context information. This improves the overall security of the device classification system while protecting the privacy of the device context information from potential attackers.
Fig. 1 depicts a system 100 for classifying unclassified client devices in a secure and privacy-preserving manner. The system 100 may include at least one data processing system 105. The data processing system 105 can include at least one classification request receiver 125, at least one context extractor 130, at least one fuzzy model trainer 135, at least one classification model trainer 140, at least one fuzzy model provider 145, and at least one device classifier 150. The system 100 may include at least one computer network 110. The system 100 may include at least one database 115. Database 115 may include at least one known context information 190A-N (sometimes referred to as known context information 190) and at least one known metadata information 195A-N (sometimes referred to as known metadata information 195). The system 100 may include at least one known client device 120A-N (sometimes referred to as a known client device 120 or a known client device 120). A known client device 120 may include at least one context information 155, at least one device information 160, and at least one classification requestor 165. The system 100 may include at least one unknown client device 170A-N (sometimes referred to as an unknown client device 170 or an unknown client device 170). The unknown client device 170 may include at least one private context information 175, at least one private device information 180, at least one fuzzy model 185, and at least one classification requester 165.
Each component of system 100 (e.g., data processing system 105, classification request receiver 125, device context extractor 130, fuzzy model trainer 135, classification model trainer 140, fuzzy model provider 145, device classifier 150, network 110, database 115, known context information 190, known metadata 195, known client devices 120, context information 155, device information 160, classification requester 165, unknown client devices 170, private context information 175, private device information 180, fuzzy models 185, classification requesters 165, etc.) may be implemented using hardware components or a combination of software and hardware components of computing system 600 described in detail herein in connection with fig. 6. For example, the data processing system 105 may include one or more computing devices. Client devices 120 may include servers or other computing devices as is known. The unknown client device 170 may comprise a server or other computing device. Each component of the data processing system 105 may perform the functionality detailed herein.
The network 110 may include computer networks such as the internet, local area networks, wide area networks, metropolitan area networks or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile telephone communication networks, and combinations thereof. The data processing system 105 of the system 100 may communicate with, for example, at least one known client device 120 or at least one unknown client device 170 via the network 110. The network 110 may be any form of computer network that relays information between known client devices 120, unknown client devices 170, the data processing system 105, and one or more content sources, such as web servers, among others. In some implementations, the network 110 can include the internet and/or other types of data networks, such as a Local Area Network (LAN), a Wide Area Network (WAN), a cellular network, a satellite network, or other types of data networks. Network 110 may also include any number of computing devices (e.g., computers, servers, routers, network switches, etc.) configured to receive and/or transmit data within network 110. Network 110 may further include any number of hardwired and/or wireless connections. The client device may communicate wirelessly (e.g., via WiFi, cellular, radio, etc.) with a transceiver that is hardwired (e.g., via optical cable, CAT5 cable, etc.) to other computing devices in the network 110. The data processing system 105 may also communicate wirelessly with computing devices of the network 110 via a proxy device (e.g., a router, network switch, or gateway). The known client device 120 or the unknown client device 170 may communicate wirelessly (e.g., via WiFi, cellular, radio, etc.) with a transceiver that is hardwired (e.g., via optical cable, CAT5 cable, etc.) to other computing devices in the network 110. The known client device 120 or the unknown client device 170 may also communicate wirelessly with computing devices of the network 110 via a proxy device (e.g., a router, network switch, or gateway).
The data processing system 105 may include at least one processor and memory, i.e., processing circuitry. The memory stores processor-executable instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. The memory may further include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a Read Only Memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may include code from any suitable computer programming language. The data processing system 105 may include one or more computing devices or servers that may perform various functions.
Database 115 may be a database configured to store and/or maintain any of the information described herein. Database 115 may maintain one or more data structures that may contain or index each of the values, complex numbers, or thresholds described herein. The database 115 may be accessed using one or more memory addresses or index values. Components of the data processing system 105, the known client device 120, or the unknown client device 170 may access the database 115 via the network 110. In some embodiments, the database 115 may be internal to the data processing system 105. In some implementations, the database 115 may reside external to the data processing system 105 and may be accessed by any component or device of the system 100 via the network 110. The database 115 may be distributed across many different computer systems or storage elements and may be accessed via the network 110 or an appropriate computer bus interface. The data processing system 105 may store the results of any or all of the calculations, determinations, selections, identifications, generations, constructions, or computations in the database 115 in one or more data structures indexed with appropriate values, each of which may be accessed by the data processing system 105, a known client device 120, or an unknown client device 170 to perform any functionality or function described herein.
The known context information 190 may include information retrieved from the known client devices 120 or information received from the known client devices 120. For example, one or more of the known client devices 120 may send, provide, or otherwise communicate one or more classification requests including device context information to the data processing system 105. The data processing system 105 or the known client device 120 may store the device context information in one or more data structures in the database 115 as known context information 190. The known contextual information 190 may include, for example, text displayed on the known client device 120, text not displayed on the known client device 120, search queries entered into the known client device 120 (e.g., including one or more keywords, terms, etc.), historical search queries (e.g., including one or more keywords, terms, etc.), known client device 120 inputs or interaction events (e.g., coordinates, associated applications, time of interaction or input, frequency of interaction, etc.), time values associated with any of the contextual information described herein, time periods used in any application executable by the known client device 120, applications executed or resident on the known client device 120, metadata associated with applications executed or stored on the known client device 120 (e.g., keywords, content items, interaction events, historical interaction events, profile information, timestamp information, etc.), web browsing history, interaction history, facial recognition information, biometric information (e.g., fingerprints, color of eyes, color of hair, etc.), general periods of device usage, known client device 120 charging information (e.g., power level, battery, general charging time or seasonality, etc.), general periods of known client device 120 non-usage, communication history (e.g., text or SMS message history, call history, video call history, call information, video call information, etc.), and other information that may be used or accessed by any application or operating system executed by a known client device 120.
Known contextual information 190 may include other information about known client devices 120, such as device information 160 of known client devices 120. The known context information 190 may be one or more data records that maintain the context information 155 of the known client device 120 over time. Thus, although the context information 155 may include only the most current or up-to-date context information of the known client device 120, the known context information 190 may be a history of all device contexts in various settings across all classification requests provided by the known client device 120. Known context information 190 may include one or more data records that include an indication (e.g., an identifier, a memory location, etc.) of a classification request stored in database 115. For example, each known context information 190 data record may include a pointer to a location in database 115 that includes a request for a classification from a known client device 120. In some implementations, the request can include context information and known metadata information 195 for known client devices 120.
Known metadata information 195 may be gathered from one or more classification requests received from, provided by, or transmitted by known client devices 120. Known metadata information 195 may describe information that is not protected or private, but may be included in the request for device classification. Known metadata information 195 may include, for example, information from the requesting application or operating system executing on a known client device 120, such as application state, time of request, information about the application, and other non-protected or non-private information. The metadata may include one or more variables, strings, terms, keywords, or other information that may result in a request for context. Known metadata information 195 may include metadata information from classification requester 165 of known client device 120.
Each known client device 120 may include a processor and a memory, i.e., processing circuitry. The memory stores machine instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. The memory may further include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a Read Only Memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may include code from any suitable computer programming language.
Each known client device 120 may be a computing device configured to communicate via network 110 to provide a classification request using classification requestor 165 and to receive an indication of device classification information or a message including the device classification information from data processing system 105. Known client devices 120 may be desktop computers, laptop computers, tablet computers, smart phones, personal digital assistants, mobile devices, consumer computing devices, servers, clients, digital video recorders, set-top boxes for televisions, video game consoles or any other computing devices configured to communicate via network 110, and so on. It is known that the client device 120 may transmit one or more requests for device classification to the data processing system 105. It is known that client device 120 may receive one or more indications of device classification information or messages including device classification information from data processing system 105.
The context information 155 included in each known client device 120 may include information regarding a current or historical (e.g., a record of past device contexts, etc.) device context of the respective known client device 120. Context information 155 may include, for example, text displayed on known client device 120, text not displayed on known client device 120, search queries input to known client device 120 (e.g., including one or more keywords, terms, etc.), historical search queries (e.g., including one or more keywords, terms, etc.), known client device 120 input or interaction events (e.g., coordinates, associated applications, time of interaction or input, frequency of interaction, etc.), time values associated with any of the context information described herein, periods of use in any application executable by known client device 120, applications executed or resident on known client device 120, metadata associated with applications executed or stored on known client device 120 (e.g., keywords, content items, interaction events, historical interaction events, profile information, timestamp information, etc.), web browsing history, interaction history, facial recognition information, biometric information (e.g., fingerprints, eye color, general color, etc.), periods of device use, known device 120 charge information (e.g., charge device 120, historical call power information, etc.), historical call history information, or other historical call history information, historical access history information, such as historical call history information, and other historical access history information, historical call history information, and other historical access history information that may be used by known client devices. It is known that client device 120 can scan for changes in device context and update context information 155 as appropriate. Context information 155 may be stored, for example, in one or more data structures in a memory of known client device 120.
Device information 160 may include device specific information such as device type, model number, serial number, operating system version, vendor identification, and other information about known client devices 120. The device information may include display information or other technical specifications about known client devices 120, such as processor information, display resolution, screen type, touch capabilities, amount of memory, amount of available memory, amount of video memory, amount of available video memory, machine learning capabilities, information about a particular chipset (e.g., graphics hardware acceleration, machine learning hardware acceleration, etc.), and other information about known client device 120 capabilities. For example, this information may be stored in one or more data structures in memory of known client devices 120. In some implementations, the known client device 120 may update the device information 160 if there is a detected change in device configuration (e.g., a change in storage from a new memory card, etc.).
The classification requestor 165 of a known client device 120 may transmit, request, or otherwise provide a request for classification from the data processing system 105. The classification requester 165 may generate a classification request that includes some or all of the context information 155 and some or all of the device information 160. Classification requestor 165 may assemble (assign) metadata for inclusion in a request, such as information about the request for classification, the application that issued the request for classification, and other information about the request for classification. In some implementations, after generating the categorized request, the categorization requester 165 may store or maintain the categorized request in one or more data structures in memory of known client devices 120. The sort requester 165 may communicate the sorted request to the data processing system 105 via the network 110. Additionally, because the classification of the known client device 120 may be known to the known client device 120, the classification request may include the classification of the known client device 120. In such a case, a classification request may be provided to the data processing system to provide training data for the provided fuzzy and classification model.
Each unknown client device 170 may include a processor and memory, i.e., processing circuitry. The memory stores machine instructions that, when executed by the processor, cause the processor to perform one or more of the operations described herein. The processor may comprise a microprocessor, an Application Specific Integrated Circuit (ASIC), a Field Programmable Gate Array (FPGA), the like, or a combination thereof. The memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing program instructions to the processor. The memory may further include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, an ASIC, an FPGA, a Read Only Memory (ROM), a Random Access Memory (RAM), an Electrically Erasable Programmable ROM (EEPROM), an Erasable Programmable ROM (EPROM), a flash memory, an optical medium, or any other suitable memory from which a processor may read instructions. The instructions may comprise code from any suitable computer-programming language.
Each unknown client device 170 may be a computing device configured to communicate via the network 110 to provide a classification request using the classification requester 165 and the fuzzy model 185 and to receive an indication of or a message including device classification information from the data processing system 105. The unknown client device 170 may be a desktop computer, laptop computer, tablet computer, smartphone, personal digital assistant, mobile device, consumer computing device, server, client, digital video recorder, set-top box for a television, video game console, or any other computing device configured to communicate via the network 110, and so forth. The unknown client device 170 may transmit one or more requests for device classifications to the data processing system 105. The unknown client device 170 may receive one or more indications of device classification information or a message including the device classification information from the data processing system 105.
The private context information 175 included in each unknown client device 170 may include information regarding the current or historical (e.g., a record of past device contexts, etc.) device context of the respective unknown client device 170. Private contextual information 175 may include, for example, text displayed on unknown client device 170, text not displayed on unknown client device 170, search queries (e.g., including one or more keywords, terms, etc.) entered into unknown client device 170, historical search queries (e.g., including one or more keywords, terms, etc.), input or interaction events of unknown client device 170 (e.g., coordinates, associated applications, time of interaction or input, frequency of interaction, etc.), time values associated with any contextual information described herein, time periods of use in any application executable by unknown client device 170, applications executed on unknown client device 170 or resident on unknown client 170, metadata associated with applications executed or stored on unknown client device 170 (e.g., keywords, content items, interaction events, historical interaction events, profile information, timestamp information, etc.), web browsing history, interaction history, facial recognition information, biometric information (e.g., fingerprints, eye color, unknown color, etc.), typical time periods of device use, charging information (e.g., battery charging information, SMS information, historical call power information, etc.), historical call history information, or other historical access history information for example, historical call history information, historical access history information for unknown client device 170, and other historical access history information for example, historical access time periods or for unknown client devices. Unknown client devices 170 may scan for changes in device context and update private context information 175 as appropriate. Private context information 175 may be stored, for example, in one or more data structures in a memory of unknown client device 170. Because private context information 175 is private and not shared with any other computing device, private context information 175 may be stored in a protected area of memory on unknown client device 170. Such memory regions may be protected such that the information contained therein may not be transmitted to other computing devices via network 110 or shared to other computing devices by other means.
The unknown client device 170 may receive at least one fuzzy model 185 from the data processing system 105. Receiving the fuzzy model 185 may be in response to a request for the fuzzy model 185 or in response to another event prompting the data processing system 105 to provide the fuzzy model 185 to the unknown client device 170. The fuzzy model 185 may be any machine learning model that the data processing system 105 trains using context information and classification information received from known client devices 120. The fuzzy model 185 may take as input an input vector containing data from the private context information 175 and the private device information 180. The fuzzy model 185 may include one or more weights, biases, or coefficients for generating an output vector from an input vector. The unknown client device 170 may apply weights, biases, and other coefficients to the input vector to generate an output vector. Applying the weights and biases can include performing one or more mathematical operations, such as multiplications, additions, and/or other operations, on the input vector across one or more layers of the fuzzy model 185. The output vectors generated by the obfuscation model 185 may fully obfuscate the information in the input vectors that may represent private context information 175 and private device information 180. The output vector may be configured such that the input vector cannot be calculated from the output vector alone. The output vector may be provided to the data processing system 105 for further device classification without revealing (compliance) or sharing the private context information 175 or the private device information 180. This provides improvements in security, privacy, and network resource utilization of the device classifying computer system.
The classification requestor 165 of the unknown client device 170 may transmit, request, or otherwise provide a request for classification from the data processing system 105. The classification requestor 165 may generate a classified request that includes the output vector generated by the fuzzy model 185 instead of the private context information 175 and the private device information 180. In some implementations, classification requestor 165 may be prevented from accessing a memory region containing private context information 175 and private device information 180. Classification requester 165 can assemble metadata for inclusion in a request, such as information about the classified request, the application making the classified request, and other information about the classified request. In some implementations, after generating the categorized request, the categorization requester 165 may store or maintain the categorized request in one or more data structures in a memory of the unknown client device 170. The sort requester 165 may communicate the sorted request to the data processing system 105 via the network 110.
In response to the classification request, the known client device 120 or the unknown client device 170 may receive the classification message. Upon receiving the classification message from the server, the known client device 120 or the unknown client device 170 may parse the classification message to retrieve device classification information requested by an application or operating system of the known client device 120 or the unknown client device 170. Parsing the classified message may include extracting one or more authentication keys, numbers, or codes from the classified message and storing them in different memory areas on the client device. In some implementations, the classification message can include content such as images, text, video, or other information associated with the device classification. In some implementations, the device classification message may include instructions to display content included in the classification message on a known client device 120 or an unknown client device 170, or to modify an information resource on the known client device 120 or the unknown client device 170 to display content in the classification message. In some implementations, based on other instructions included in the classification message, the known client device 120 or the unknown client device 170 may send additional messages including the authentication key to an external computing device for further processing. Such an implementation may be used, for example, to authenticate a device for use in an external system.
The classification request receiver 125 may receive, accept, parse, or otherwise process classification requests from known client devices 120 and unknown client devices 170. If the classification request receiver 125 receives a classification request from a known client device 120, the classification request receiver 125 may parse the device classification from the request and store it in one or more data structures in association with an identifier of the known client device 120 to facilitate training of classification models and fuzzy models. In some implementations, the categorical request receiver can receive, in a categorized request, an indication of the initiation of a uniform resource identifier on a known client device 120 responsible for the request. If the classification request receiver receives a classification request from an unknown client device 170, the classification request receiver 125 may parse the output vector from the request and store it in one or more data structures in association with an identifier of the unknown client device 170 to facilitate classifying the unknown client device 170 using a classification model. The classified request may include, for example, device context information (e.g., context information 155, device information 160, etc.). Each request, when received, may be stored in one or more data structures in a memory of the data processing system in association with an identifier of a known client device 120 responsible for the respective request. Each request may include an identifier of the respective client device responsible for the request. The classification request receiver 125 may store each request along with an identifier with an index value for iterating through each request. The classification request receiver 125 may parse, process, or otherwise extract device context information from each classification request.
Context extractor 130 may access one or more data structures of the request including the classifications from known client devices 120 to extract metadata, context information, and device classifications from the request. In some implementations, the context extractor 130 can have metadata and contextual information already stored in one or more data structures in a memory of the data processing system. If so, the context extractor 130 may use the stored information. The device context extractor 130 may parse the selected request to extract known context information 190 or context information 155, known metadata information 195, or device information 160. If a request for classification is received from an unknown client device 170, the context extractor 130 can extract an output vector generated by the fuzzy model 185 executing on the unknown client device 170. The data processing system may extract context information accessed from one or more data structures in the memory or database 115 of the data processing system 105 and context information received from the request or from known client devices 120 and associate the context information with a respective classification of the known client devices 120 (e.g., stored in a data structure, etc.). In some implementations, the data processing system can store and access known contextual information 190 and known metadata information 195 from a database (e.g., database 115).
The fuzzy model trainer 135 may train fuzzy models to facilitate classification of unknown client devices 170 without requesting or accessing private context information 175 or private device information 180 of the unknown client devices 170. To train the fuzzy model, the fuzzy model trainer 135 may use known classifications stored in association with known contextual information 190 and known metadata information 195 to train the fuzzy model to generate an output vector representing the contextual information. The fuzzy model trainer 135 may generate the fuzzy model to include one or more layers, coefficients, weight values, or bias values. The fuzzy model may be any kind of neural network or machine learning model (e.g., linear regression, cyclic neural network, convolutional neural network, fully-connected neural network, sparse vector machine, random forest, etc.). The fuzzy model trainer 135 may provide the known context information 190 as input to the fuzzy model. Providing the known context information 190 as input may include formatting or constructing the known context information 190 extracted from the request of the known client device 120 or accessed from an entry in the database 115 into a format that may be input into the fuzzy model. For example, this may include extracting individual values of known context information 190 or known metadata information 195 and reconstructing them into an input vector having one or more coordinates. Each coordinate of the input vector may correspond to an item of known context information 190 or known metadata information 195. In some implementations, the input vectors can have a predetermined order that the data processing system can populate based on content present in the entries of known context information 190 or known metadata information 195. In some implementations, the input vector can have a predetermined number of coordinates, where each coordinate corresponds to a single value of the context information. If an entry of known context information 190 or an entry of known metadata information 195 does not include information corresponding to a particular coordinate of an input vector, the data processing system can populate the coordinate with a placeholder value. The placeholder value may be a predetermined number, e.g., zero. If the known context information 190 or the known metadata information 195 does include information corresponding to a particular coordinate of an input vector, the fuzzy model trainer 135 may populate the vector with the corresponding context information or metadata.
The fuzzy model trainer 135 may use the input vectors and the fuzzy model to compute the output vectors. Computing the output vector may include multiplying the input vector by one or more coefficients, such as in a layer of a neural network (e.g., a deep neural network, a convolutional neural network, etc.). Computing the output vector may include multiplying the input vector through one or more layers of a neural network or machine learning model. The fuzzy model may produce an output vector having one or more coordinates, where the output vector is a fuzzy vector representing known context information 190 entries and known metadata information 195 used as inputs to the fuzzy model. In some implementations, the output vector may be blurred to such an extent that the values of the coordinates of the input vector cannot be determined from the output vector. Thus, the fuzzy model may produce vectors that may represent information included in the context of the device without revealing values present in the context of the device. The fuzzy model trainer 135 may store the output vectors in one or more data structures in memory of the data processing system 105 in association with known classifications corresponding to respective known client devices 120 used to create the known context information 190 and the known metadata information 195 of the input vectors.
The classification model trainer 140 may generate or train more than one classification model. For example, the classification model trainer 140 may train classification models for different types of device classifications. The types of device classifications may include, for example, a classification indicative of future actions by the client device (e.g., interactions with content, etc.), a classification indicative of authentication or permissions assigned to the client device (e.g., proper authorization to access or modify protected content), and so forth. Although the following disclosure includes an exemplary illustration of training at least one classification model, it should be understood that classification model trainer 140 may train multiple models corresponding to different classification types, each classification model having inputs and outputs corresponding to the classification type of the model. For example, a classification model corresponding to an authentication request may use the blur vector and information associated with the protected content (e.g., a request for the protected content, a request to access or modify the protected content, etc.) as inputs. The classification model trainer 140 may output a value corresponding to a likelihood that the device providing the blur vector will interact with the content provided by the data processing system 105. In another example, the classification model trainer 140 may train a classification model that may output a selection of content (e.g., based on permissions, protected content, other content, etc.) for provision to a client device associated with the blur vector. As described herein, each of the output types or classification model types may be trained by the classification model trainer 140.
After the classification model trainer 140 has passed the output vectors through the classification model to predict the classification of the known client device 120, the fuzzy model trainer may compare the predicted classification of the known client device 120 with the known classification of the known client device 120 to train the fuzzy model. The comparison may include subtracting or otherwise determining a difference across one or more dimensions between the known classification of the known client device 120 and the predicted classification of the known client device 120. The fuzzy model trainer 135 may use the compared differences to create a difference vector. The fuzzy model trainer 135 may use the disparity vectors to update weights, biases, or coefficients comprising the fuzzy model to train the fuzzy model. In some embodiments, the fuzzy model trainer 135 may store one or more discrepancy vectors in batches for use in a batch training configuration. In some implementations, the fuzzy model trainer 135 can use a gradient descent algorithm to update the weights, biases, and coefficients comprising the fuzzy model. Training the fuzzy model may improve the likelihood that the output of the fuzzy model will generate an output vector that may be used as an input to a classification model to more accurately predict a classification of a client device (e.g., unknown client device 170, known client device 120, etc.). In some implementations, the fuzzy model trainer 135 may update the fuzzy model in response to classifying at least one known client device 120, generating an updated fuzzy model. After generating the updated fuzzy model, the fuzzy model provider 145 may provide the updated fuzzy model to one or more unknown client devices 170.
The classification model trainer 140 may use the output vectors generated by the fuzzy models as inputs along with other request metadata. The request metadata may be stored as known metadata information 195, for example, in database 115. The classification request receiver 125 may parse classification requests received from known client devices 120 and send extracted metadata to the classification model trainer 140 to train classification models. The request metadata may be received from the classification request receiver 125. The classification model trainer may train a classification model using the request metadata and output vectors generated by the fuzzy model. Using those inputs, the classification model may generate a predicted device classification for the known client device 120. The classification model trainer 140 may compare the predicted output of the classification model trainer to known classifications of known client devices 120. The comparison may include subtracting or otherwise determining a difference across one or more dimensions between the known classification of the known client device 120 and the predicted classification of the known client device 120. The classification model trainer 140 may create a difference vector using the compared differences. The classification model trainer 140 may use the disparity vectors to update weights, biases, or coefficients comprising the classification model to train the classification model. In some embodiments, the classification model trainer 140 may store one or more discrepancy vectors in batches for use in a batch training configuration. In some implementations, the classification model trainer 140 may use a gradient descent algorithm to update the weights, biases, and coefficients comprising the fuzzy model. In some implementations, the request metadata can be used to generate input vectors prior to classification using the classification model. The classification model trainer 140 or the device classifier 150 may normalize the input vector prior to device classification using the classification model. In some implementations, the classification model trainer 140 may update the classification model in response to classifying at least one known client device 120, thereby generating an updated classification model.
In some embodiments, the classification model trainer 140 may train the classification model and the fuzzy model into a combined model. The combined model may receive context information from known client devices and request metadata as input from the categorized requests. The combined model may provide an output classification vector as an output. The classification model trainer 140 may extract a fuzzy model and a classification model from the combined model. Extracting the fuzzy model and the combined model may include extracting one or more weights, biases, or coefficients from the combined model and assembling the coefficients into the fuzzy model or the classification model. An illustrative representation of training the fuzzy model and the classification model is depicted in FIG. 2.
Referring now to fig. 2, a diagram 200 of training a fuzzy and classification model based on contextual information and feedback is depicted. First, the fuzzy model trainer 135 may input known context information 190 to the fuzzy model 185 to be trained. Although the fuzzy model 185 is depicted in fig. 1 as residing in the unknown client device 170, the fuzzy model 185 is first trained in memory of the data processing system 105 and then provided to the unknown client device 170. The fuzzy model 185 may output an output vector 210. The classification model trainer 140 may use the output vectors 210 and the known metadata information 195 as inputs to a classification model 205 residing in memory of the data processing system 105.
The classification model may apply one or more layers of weights, biases, or coefficients to the input vector and may output the output prediction 215 as a vector having one or more coordinates. In the first iteration of training, the output prediction 215 may be very different from the actual known classification of the known client device 120. As training continues, the weights and biases of the classification model 205 and the fuzzy model 185 are adjusted by the classification model trainer 140 and the fuzzy model trainer 135, respectively, to make the model output a more accurate prediction. The classification model trainer 140 and the fuzzy model trainer 135 may compare the output predictions 215 to known classifications of known client devices 120 to generate the feedback 220. Feedback 220 may include a vector having one or more coordinates corresponding to a magnitude of a difference between the output prediction and a known classification of a known client device 120. Fuzzy model trainer 135 and classification model trainer 140 may use feedback 220 to update fuzzy models 185 and classification models 205, as described above.
Referring again to FIG. 1, the fuzzy model provider 145 may provide the fuzzy model to the unknown client device 170 as the fuzzy model 185. Providing the fuzzy model may include copying the fuzzy model (e.g., weights, biases, configuration information, computer-executable instructions, scripts, etc.) from one region of the memory of the data processing system 105 to another region in the memory of the data processing system 105. Providing the classification model to the unknown client device 170 may include transmitting the fuzzy model to the unknown device via a network (e.g., network 110, etc.) to be stored as the fuzzy model 185 on the unknown client device 170. In some implementations, the fuzzy model provider 145 may compress the fuzzy model using one or more compression algorithms to reduce network resource utilization when transmitting the fuzzy model to many unknown client devices 170. In some implementations, the obfuscation pattern provider 145 may combine, package, or otherwise include the obfuscation models in one or more messages or packets, e.g., as part of a software distribution or another type of content packet.
The device classifier 150 may use the output of the fuzzy model 185 and the request metadata to classify one or more unknown client devices 170. Device classifier 150 may receive one or more requests for device classification from unaware client device 170. The classified request may include an output vector generated by the fuzzy model 185 on the unknown client device 170. The output vector may be generated by inputting the private context information and the private device information 180 to the obfuscation model 185. The request for classification may include additional request metadata that may be used as input to the classification model generated by classification model trainer 140. Device classifier 150 may parse the classified requests received from unknown client devices 170 to extract both output vectors and request metadata for input to the classification model. The request metadata may indicate one or more classification types corresponding to one or more classification models generated and trained by classification model trainer 140.
Device classifier 150 may input the output vectors and request metadata into one or more classification models generated and trained by classification model trainer 140. Device classifier 150 may apply one or more classification models to the input using one or more multiplication or addition operations to generate one or more prediction classifications. Each of the one or more prediction classifications may correspond to a respective classification type (e.g., access to protected content, device permissions, device authentication, device action prediction, device type, other classification types described herein, etc.). Device classifier 150 may select a classification model based on the content of the request metadata or any other data included in the classification request. The prediction classification may be a vector having one or more coordinates. In some implementations, the output of the classification model can be an authentication key, code, or token. The device classifier 150 may select content to be included in the classification message based on the predicted classification of the unknown client device 170. The device classifier may include content (e.g., images, text, video, etc.) in the classification message along with the predicted classification of the client device. The device classifier 150 may communicate or provide the classification message to the unknown client device 170 responsible for the request. In some implementations, device classifier 150 may generate the classification message to include an indication of the request for classification and the device classification. Device classifier 150 may store the classification message in a database in association with an identifier of the device responsible for the request for classification. In some implementations, the device classifier can use the authentication key, code, or token to determine whether the device responsible for the request can access the protected content. If the device classifier determines that the device responsible for the request may access the protected content, the device classifier 150 may include this information in the classification message. In some implementations, the device classifier 150 can include a link or identifier of the protected content, or the protected content itself, and an indication that the device can access the protected content. In some implementations, device classifier 150 may use a classification model to determine the likelihood that the device responsible for the request for classification will access the protected content. The classification message may include one or more device classification outputs from one or more classification models generated and trained by the classification model trainer 140. In some implementations, the data processing system 105 can select an initial set of content (e.g., protected content, gas content described herein, etc.) based on the classification request. The device classifier 150 may use information generated by the one or more classification models to select content from the collection of content to include in the classification model based on output from the one or more classification models. The process of device classification is illustrated in the exemplary diagram of fig. 3.
Referring now to FIG. 3, a block diagram 300 is illustrated that depicts classifying an unknown client device 170 using an on-device blur model 185 and a classification model 205. The block diagram 300 depicts an unclassified client device 170A in communication with the data processing system 105. Unclassified client device 170A includes a fuzzy model 185, private context information 175, and private device information 180. As illustrated by the block diagram 300, the data processing system 105 may include a classification model 205 residing in a memory of the data processing system 105.
As depicted in the figure, unclassified client device 170A (also referred to herein as unknown client device 170) can input private context information 175 and private device information into fuzzy model 185 to generate output vector 210. Output vector 210 may include one or more coordinates of any data type. As depicted in diagram 300, output vector 210 includes coordinates that each include a floating point value. Although the output vector 210 is depicted as residing outside of the unclassified client device 170A, it should be understood that the output vector resides in the memory of the unclassified client device 170A and is depicted as residing outside for illustrative purposes.
The unclassified client device 170A may create a request that includes a classification of both the classification request metadata 305 and the output vector 210. The classification request metadata 305 may include information about the classified request, or any non-private information that may be used as information to classify the unclassified client device 170A. Although depicted as separate transactions in diagram 300, it should be understood that the sorted requests may be provided by the unclassified client device 170A in a single communication and may include both the sorted request metadata 305 and the output vector 210. However, in some implementations, the classification request metadata 305 and the output vector may be provided in two or more communications from the unclassified client device 170A.
The data processing system 105 (or one or more components thereof, such as the device classifier 150, etc.) may receive the classified request and extract the classification request metadata 305 and the output vector 210. The data processing system 105 may generate an input vector to the classification model 205. The classification model 205 may use the input vector as input and may generate an unknown device classification 310. The data processing system 105 may generate a device classification message that includes the unknown device classification 310 and the content selected based on the unknown device classification 310, and may provide the classification message to the unclassified client device 170A.
Referring now to fig. 4, a flow diagram of an exemplary method 400 of generating an on-device classification model to improve security, privacy, and network resource utilization is illustrated. The method 400 may be performed by or otherwise carried out by the data processing system 105, the computer system 600, or any other computing device described herein, described in conjunction with fig. 6. A data processing system (e.g., data processing system 105, any other computing device described herein, etc.) may identify a classification request from a known (e.g., classified) client device (e.g., known client device 120) (act 402). The data processing system may select the kth request (act 404). The data processing system may extract metadata and contextual information from the selected request (act 406). The data processing system may provide the context as input to the fuzzy model (act 408). The data processing system may use the output vectors and metadata as inputs to the classification model (act 410). The data processing system may train the model based on the output of the classification model (act 412). The data processing system may determine whether the count register k is equal to the number of requests n (decision 414). The data processing system may increment the count register k (act 416). The data processing system may provide the fuzzy model to an unknown (e.g., unclassified, etc.) client device (e.g., unknown client device 170) (act 418). The data processing system may complete generating the on-device classification model (act 420).
A data processing system (e.g., data processing system 105, any other computing device described herein, etc.) may identify a classification request from a known (e.g., classified) client device (e.g., known client device 120) (act 402). The data processing system may receive one or more categorized requests from known or categorized client devices via a network (e.g., network 110). The classified request may include, for example, device context information (e.g., context information 155, device information 160, etc.). Each request, when received, may be stored in one or more data structures in a memory of the data processing system in association with an identifier of a client device responsible for the respective request. Each request may include an identifier of the respective client device responsible for the request. The data processing system may store each request along with the identifier with an index value for iterating through each request. The data processing system may parse, process, or otherwise extract the context information from each classification request.
In some implementations, the data processing system can transmit one or more requests for context information to known client devices via a network. The request for context information may include a request for a device classification. In response to the request, the known client device may provide context information, device information, and a classification of the client device. The data processing system may use this information or information received in the request for classification to train one or more fuzzy models or one or more classification models. To this end, the data processing system may store the context information, the device information, and the known classification in a data structure in association with an identifier of a client device responsible for providing the information. As described herein, the data processing system may access a data structure that includes context information and classification information for known client devices to train the model.
The data processing system may select the kth request (act 404). To train the fuzzy and classification model for each received request received from a known client device, the data processing system may iteratively cycle through each received request based on the count register k. Each request may be stored and indexed in a data structure by an index value (e.g., index 0, index 1, index 2, etc.). To process the request, the data processing system may select a request that includes an index value equal to the count register k. If it is the first iteration of the loop, the count register k may be initialized to an initialization value (e.g., k = 0) before the kth request is selected. Accessing the request may include copying data associated with the selected request to a different area of computer memory, such as a work area in memory in the data processing system.
The data processing system may extract metadata and contextual information from the selected request (act 406). The data processing system may access one or more data structures that include the selected request to extract metadata and contextual information from the request. In some implementations, the data processing system may have metadata and contextual information already stored in one or more data structures in the memory of the data processing system. If so, the data processing system may use the stored information. The data processing system may parse the selected request to extract contextual information (e.g., contextual information 155, etc.) and other metadata (e.g., device information 160, etc.). Contextual information may include, for example, text displayed on a respective client device, text not displayed on a respective client device, search queries (e.g., including one or more keywords, terms, etc.) entered into a respective client device, historical search queries (e.g., including one or more keywords, terms, etc.), client device inputs or interaction events (e.g., coordinates, associated applications, time of interaction or input, frequency of interaction, etc.), time values associated with any contextual information described herein, time periods of use of any applications executable by a client device, applications executing or resident on a client device, metadata associated with applications executing on or on a device (e.g., keywords, content items, interaction events, historical interaction events, profile information, timestamp information, etc.), web browsing history, interaction history, facial recognition information, biometric information (e.g., fingerprints, eye colors, hair colors, etc.), general periods of device use, device charging information (e.g., power levels, batteries, general charging times or general nature, etc.), periods of device non-use, periods of communication information (e.g., text or call history, historical information, seasonal history, video call history information, etc.), and access history information of any other client device-accessible applications, and access-accessible by a corresponding client device. The data processing system may extract this information from the request or from context information received from known client devices and associate the context information with the respective classification of the client device (e.g., stored in a data structure or the like). In some implementations, the data processing system may store and access known client device context information and known client device metadata information from a database (e.g., database 115).
The data processing system may provide the context as input to the fuzzy model (act 408). Providing context as an input may include formatting or constructing context information extracted from the request into a format that may be input into the fuzzy model. This may include, for example, extracting individual values of context or metadata information and reconstructing them into an input vector having one or more coordinates. Each coordinate of the input vector may correspond to an item of context information. In some implementations, the input vectors can have a predetermined order that the data processing system can populate based on content present in the extracted context or metadata information. In some implementations, the input vector can have a predetermined number of coordinates, where each coordinate corresponds to a single value of the contextual information. If the context information or metadata information does not include information corresponding to a particular coordinate of the input vector, the data processing system may populate the coordinate with a placeholder value. The placeholder value may be a predetermined number, e.g. zero. If the context or metadata information does include information corresponding to a particular coordinate of the input vector, the data processing system may populate the vector with corresponding context information or metadata.
The data processing system may calculate an output vector using the input vector and the fuzzy model. Computing the output vector may include multiplying the input vector by one or more coefficients, e.g., in a layer in a neural network (e.g., a deep neural network, a convolutional neural network, etc.). Computing the output vector may include multiplying the input vector through one or more layers of a neural network or machine learning model. The blur model may produce an output vector having one or more coordinates, where the output vector is a blur vector representing the context of the device. In some embodiments, the output vector may be blurred to such an extent that the exact values of the coordinates of the input vector cannot be determined from the output vector. Thus, the data processing system can use the fuzzy model to generate vectors that represent information included in the context without revealing values present in the context. This may allow the system to classify devices with protected or private information without transmitting the information in a computer network. This may improve the overall security, privacy, and network utilization of the device classifying computer system.
The data processing system may use the output vectors and metadata as inputs to the classification model (act 410). To determine a predictive classification for a device based on the output vectors, the data processing system may use the output vectors calculated using the fuzzy model as inputs to a classification model (e.g., a classification model maintained and trained by classification model trainer 140, etc.). The classification model may include coefficients for one or more layers and may accept a blur vector as input. Using the classification model, the output vector, and metadata extracted from the classification request, the data processing system may calculate a predicted device classification value. The predicted device classification value may be calculated, for example, by first calculating an input vector to the classification model. For example, the data processing system may concatenate (register) the output vector of the fuzzy model with a vector generated from metadata included in the selected request to create an input vector to the classification model.
The data processing system may train the model based on the output of the classification model (act 412). The model may include, for example, a fuzzy model 185 or a classification model trained by the classification model trainer 140 of the data processing system 105. Training the model may include executing a training algorithm (e.g., supervised learning, unsupervised learning, reinforcement learning, gradient descent algorithm, etc.). The data processing system may apply the output vector and the metadata as inputs to a classification model to receive a classification output. The data processing system may use the classification output as feedback to train classification models and fuzzy models. By training the model stored in memory, the data processing system can facilitate device classification of unknown (e.g., unclassified, etc.) client devices based on the classifications of the known client devices. Training the fuzzy and classification models based on known classifications may include adjusting weights, biases, or parameters of the models to facilitate relevant device classifications.
The data processing system may determine whether the count register k is equal to the number of requests n (decision 414). To determine whether the data processing system has trained the classification and fuzzy models using each received classification request, the data processing system may compare the count register used to select each request to the total number of requests n. If the count register k is not equal to (e.g., less than) the total number of requests n, then the data processing system may perform (act 416). If the count register k is equal to (e.g., equal to or greater than) the total number of requests n, then the data processing system may perform (act 418).
The data processing system may increment count register k (act 416). To use each request from a known client device as training data for the fuzzy and classification model, the data processing system may add 1 to the count register k to indicate the number of processed requests. In some embodiments, the data processing system may set the count register k to, for example, the memory address value of the next location in memory of the next outstanding request in the data structure (e.g., a location in computer memory). If this is the first iteration of the loop, the data processing system may initialize the count register k to an initial value, e.g., zero, before incrementing the count register. After incrementing the value of the count register k, the data processing system may perform method 400 (act 404)
The data processing system may provide the fuzzy model to an unknown (e.g., unclassified, etc.) client device (e.g., unknown client device 170) (act 418). Providing the fuzzy model may include copying the fuzzy model (e.g., weights, biases, configuration information, computer-executable instructions, scripts, etc.) from one region of memory to another region of memory in the data processing system. Providing the classification model to the unknown client device may include transmitting the fuzzy model to the unknown device via a network (e.g., network 110, etc.). In some implementations, the data processing system may compress the fuzzy model using one or more compression algorithms to reduce network resource utilization when transmitting the fuzzy model to many client devices. In some implementations, the data processing system may combine, package, or otherwise include the obfuscation model in one or more messages or packets, e.g., as part of a software distribution or another type of content packet.
The data processing system may complete generating the on-device classification model (act 420). After the fuzzy models and classification models have been trained and provided to unknown client devices, the data processing system may complete execution of method 400. For example, the data processing system may take steps to deallocate any memory regions supplied to the processes or method structures described herein with respect to the method, and may reinitialize each count register described herein to a predetermined initialization value. The predetermined initialization values may be retrieved, for example, from one or more data structures residing in a memory of the data processing system.
Referring now to fig. 5, a flow diagram of an exemplary method 500 of securely maintaining device context and providing classification requests without compromising device privacy is illustrated. The method may be performed or otherwise carried out by any of the computing devices described herein, including the unknown client device 170, the known client device 120, and the computer system 600, among others. A client device (e.g., unknown client device 170, known client device 120, etc.) may receive the fuzzy model (act 502). The client device may scan the device for context changes (act 504). The client device may determine whether there has been a change in the device context (decision 506). The client device may update the device context (act 508). The client device may assemble the metadata of the classification request (act 510). The client device may transmit a classification request (act 512). The client device may determine whether a classification has been received (decision 514). The client device may parse the classification message (act 516). The client device may complete providing the classification request (act 518).
A client device (e.g., unknown client device 170, known client device 120, etc.) may receive the fuzzy model (act 502). Receiving the obfuscation model may include receiving, via a computer network (e.g., network 110), one or more network packets or messages that include the obfuscation model. The client device may parse the message to extract the fuzzy model. After extracting the fuzzy model, the client device may store the model in one or more data structures in a memory of the client device. The obfuscation model may be stored in a memory such that data associated with the obfuscation model is accessible to one or more applications or operating systems executing on the client device. An application or operating system may use the fuzzy model to generate one or more classification requests.
The client device may scan the device for a context change (act 504). Scanning the client device for context changes may include determining whether there is a device context currently stored on the device. For example, the client device may maintain the device context in one or more data structures in a memory of the client device. Such data structures may be organized such that only privileged or appropriate applications or operating systems can access the data included in the context of the device. The device context may include, for example, text displayed on the client device, text not displayed on the client device, search queries entered into the client device (e.g., including one or more keywords, terms, etc.), historical search queries (e.g., including one or more keywords, terms, etc.), client device inputs or interaction events (e.g., coordinates, associated applications, time of interaction or input, frequency of interaction, etc.), time values associated with any contextual information described herein, time periods used in any applications executable by the client device, applications executing on or residing on the client device, metadata associated with applications executing on or on the device (e.g., keywords, content items, interaction events, historical interaction events, profile information, timestamp information, etc.) information, web browsing history, interaction history, facial recognition information, biometric information (e.g., fingerprints, eye color, hair color, etc.), general periods of device usage, device charging information (e.g., power levels, batteries, general charging times or seasonal, etc.), device non-usage, general text messaging information, historical information for calls, historical information for example, historical call history information, historical information for applications, and other operational information accessible by the client device. The client device can monitor execution of one or more applications or operating systems for changes in any of the information described herein as part of the device context.
The client device may store, update, or otherwise maintain any information associated with the device context in one or more data structures in the client device. In some implementations, when the device context is updated, the client device can generate a context update signal.
The client device may determine whether there has been a change in the device context (decision 506). The client device may determine whether there is a change in the device context by monitoring the context update signals generated by the client device. The context update signal may be generated by the client device when any information associated with the device context has been updated, instantiated, or otherwise changed by one or more applications or operating systems executing on the client device. If the client device detects a change in any information associated with the device context, or detects a context update signal generated by the client device, the client device may perform act 508 of method 500. If the client device does not detect a change in the device context, the client device may perform act 510 of method 500.
The client device may update the device context (act 508). Updating a device context may include storing, modifying, deleting, or otherwise maintaining any and all information associated with the device context described herein in one or more data structures in a memory of the client device. Updating the device context may include storing one or more device attributes, parameters, or metadata in a data structure that maintains the device context. In some implementations, the client device can store timestamps associated with the device context updates in association with the respective device context information that was updated. In some implementations, the client device can perform a partial update of the device context when there is only a minor change. For example, if the text displayed on the client device changes, but the remaining device context remains the same, the client device may only update the portion of the maintained device context associated with the text currently displayed on the client device.
The client device may assemble the metadata of the classification request (act 510). An application or operating system executing on the client device may assemble one or more context requests. To obfuscate the device context, applications and operating systems executing on the client device may create output vectors using the obfuscation model received at act 502. The client device may include the output vector in the request. In addition to the output vectors representing the device context, the client device may also include additional information, such as request metadata. The request metadata may include information from the requesting application or operating system, such as application state, time of request, information about the application, and other unprotected or non-private information. The metadata may include one or more variables, strings, terms, keywords, or other information that may have resulted in a request for a context. The request for the device context may be associated with an interaction event detected by the client device.
The client device may transmit a classification request (act 512). Transmitting the classification request may include copying the output vectors of the assembled metadata and fuzzy models (e.g., weights, biases, configuration information, computer-executable instructions, scripts, etc.) from one region of memory of the client device to another region of memory (e.g., a working region of memory). Communicating the sort request to the data processing system may include communicating the assembled metadata and output vector to the data processing system via a network (e.g., network 110, etc.). In some implementations, the data processing system can compress the fuzzy model using one or more compression algorithms to reduce network resource utilization when transmitting the fuzzy model to many client devices. In some implementations, the data processing system may combine, package, or otherwise include the obfuscation model in one or more messages or packets, e.g., as part of a software distribution or another type of content packet.
The client device may determine whether a classification has been received (decision 514). After transmitting the request for the device context, the client device may wait until a device classification has been received. While waiting for the device classification, the client device may continue to execute one or more applications on the client device. For example, an application may generate and transmit a classification request, but continue to execute normally on the client device while waiting for the device classification to be a background thread or process. In some implementations, execution of an application or operating system may be suspended until a classification is received. If the client device receives the categorized message from the data processing system, the client device may store the message in one or more data structures in the memory of the client device and perform act 516 of method 500. If the client device has not received a classification message from the data processing system, the client device may continue to wait for a classification message at act 514 of method 500.
The client device may parse the classification message (act 516). After receiving the classification message from the server, the client device may parse the classification message to retrieve device classification information requested by the application or operating system. Parsing the classified message may include extracting one or more authentication keys, numbers, or codes from the classified message and storing them in different areas of memory on the client device. In some implementations, the classification message can include content such as images, text, video, or other information associated with the device classification. In some implementations, the device classification message can include instructions to display content included in the classification message on the client device. In some implementations, based on other instructions included in the classification message, the client device may send an additional message including the authentication key to the external computing device for further processing. Such an embodiment may be used, for example, to authenticate a device for use in an external system.
The client device may complete providing the classification request (act 518). After the classification message has been received by the unknown client device, the client device may complete performing method 500. For example, the client device may take steps to deallocate any memory regions supplied to the processes or data structures described herein with respect to method 500, and may reinitialize each count register described herein to a predetermined initialization value. The predetermined initialization values may be retrieved, for example, from one or more data structures residing in a memory of the client device.
Fig. 6 shows the overall architecture of an illustrative computer system 600 that may be employed to implement any of the computer systems discussed herein, in accordance with some embodiments. Computer system 600 may be used to provide information for display via network 110. The computer system 600 of fig. 6 includes one or more processors 620 communicatively coupled to a memory 625, one or more communication interfaces 605, and one or more output devices 610 (e.g., one or more display units) and one or more input devices 615. The processor 620 may be included in the data processing system 105.
In computer system 600 of fig. 6, memory 625 may include any computer-readable storage medium and may store computer instructions, such as processor-executable instructions for implementing the various functionalities described herein for the respective system, as well as any data associated therewith, generated thereby, or received via a communication interface or input device (if present). Referring again to the system 600 of FIG. 6, the data processing system 105 may include a memory 625 to store information related to the set of user identifiers, the generated vectors, and the like. The processor 620 shown in fig. 6 may be used to execute instructions stored in the memory 625, and in so doing, may also read from and write to the memory various information processed and/or generated pursuant to execution of the instructions.
The processor 620 of the computer system 600 shown in fig. 6 may also be communicatively coupled to the communication interface 605 or control the communication interface 605 to transmit or receive various information in accordance with the execution of instructions. For example, communication interface 605 may be coupled to a wired or wireless network, bus, or other communication means, and thus may allow computer system 600 to transmit information to, or receive information from, other devices (e.g., other computer systems). Although not explicitly shown in the system of fig. 6, one or more communication interfaces facilitate the flow of information between components of the system 600. In some implementations, the communication interface may be configured (e.g., via various hardware or software components) to provide a website as an access portal to at least some aspects of the computing system 600. Examples of communication interface 605 include a user interface (e.g., a web page) through which a user may communicate with data processing system 600.
For example, an output device 610 of the computer system 600 shown in fig. 6 may be provided to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. An input device 615 may be provided, for example, to allow a user to manually adjust, select, enter data, or interact with the processor in any of a variety of ways during execution of instructions. Additional information regarding the general computer system architecture that can be used with the various systems discussed herein is further provided herein.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied in tangible media, firmware, or hardware, including the structures disclosed in this specification and their equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more components of computer program instructions, encoded on a computer storage medium for execution by, or to control the operation of, data processing apparatus. Program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage media may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can comprise a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage media may also be or be embodied in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.) that may include a processing module configured to integrate internet connectivity with more traditional television programming sources (e.g., via cable, satellite, wireless, or other signal reception). The smart television module may be physically incorporated into a television set or may comprise a separate device such as a set-top box, a blu-ray or other digital media player, a game console, a hotel television system, and other companion devices. The smart television module may be configured to allow viewers to search and find videos, movies, photos, and other content on the web, on local cable television channels, satellite television channels, or stored on local hard drives. A set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television and an external signal source, tune the signal to content, and then display the content on a television screen or other display device. The smart television module may be configured to provide a main screen or top-level screen that includes icons for a number of different applications such as a web browser and a number of streaming media services, connected cable or satellite media sources, other web "channels," and so forth. The smart television module may be further configured to provide an electronic program guide to the user. A companion application for the smart television module may operate on the mobile computing device to provide additional information to the user about available programs, to allow the user to control the smart television module, and the like. In alternative embodiments, the features may be implemented on a laptop or other personal computer, smartphone, other mobile phone, palmtop computer, tablet, or other computing device.
The operations described in this specification can be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms "data processing apparatus," "data processing system," "user device," "client device," or "computing device" encompass all types of apparatus, devices, and machines for processing data, including for example, a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. Elements of a computer include a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game player, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can include any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer is able to interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user client device in response to a request received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described is this specification), or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), the Internet (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
A computing system, such as data processing system 105, may include clients and servers. For example, the data processing system 105 may include one or more data centers or one or more servers in a server farm. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received from the client device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of the systems and methods described herein. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. For example, the data processing system 105 may be part of a single module, a logical device with one or more processing modules, one or more servers, or a search engine.
Having now described some illustrative embodiments and implementations, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one embodiment are not intended to be excluded from a similar role in other embodiments or implementations.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and alternative embodiments consisting only of the items listed thereafter. In one embodiment, the systems and methods described herein consist of one, each combination of more than one, or all of the described elements, acts, or components.
Any reference herein to embodiments or elements or acts of the systems and methods referred to in the singular may also encompass embodiments comprising a plurality of such elements, and any reference herein to the plural of any embodiment or element or act may also encompass embodiments comprising only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts or elements to a single or multiple configurations. A reference to any action or element based on any information, action, or element may include an implementation in which the action or element is based, at least in part, on any information, action, or element.
Any embodiment disclosed herein may be combined with any other embodiment, and references to "an embodiment," "some embodiments," "an alternative embodiment," "various embodiments," "one embodiment," or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment. Such terms as used herein do not necessarily all refer to the same embodiment. Any embodiment may be combined, inclusively or exclusively, with any other embodiment in any manner consistent with aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive, such that any term described using "or" may indicate any of a single, more than one, and all of the described terms.
Where technical features in the drawings, detailed description, or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, the reference signs or their absence have no limiting effect on the scope of any claim element.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. Although the examples provided herein relate to controlling the display of information resource content, the systems and methods described herein may include application to other environments. The foregoing embodiments are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein.
Claims (20)
1. A method for generating an on-device classification model, comprising:
maintaining, by one or more processors, a plurality of data records associated with a respective plurality of client devices in a database, each of the data records comprising an identifier and a known classification value of a request, wherein the request comprises client device context information and client device metadata;
training, by the one or more processors, a context fuzzy model using each of the plurality of requests and known classification values, the context fuzzy model configured to receive client device context information as input and provide an output classification vector as output;
training, by the one or more processors, a classification model using each of the plurality of requests and known classification values, the classification model configured to receive as inputs a classification vector and metadata inputs, and to provide as output a device classification value;
transmitting, by the one or more processors, the context obfuscation model to a plurality of second client devices to obfuscate the context information of each of the plurality of client devices;
receiving, by the one or more processors, a classified request from a second client device of the plurality of second client devices, the request comprising a classification vector and request metadata, the classification vector created as an output of the context blur model executed by the second client device;
determining, by the one or more processors, a device classification value using the classification vector and the request metadata as inputs to the classification model; and
transmitting, by the one or more processors, the device classification value to the second client device.
2. The method of claim 1, further comprising:
generating, by the one or more processors, a classification data record in response to determining the classification of the client device, the classification data record comprising the device classification value and an indication of the request for classification;
storing, by the one or more processors, the classification data record in the database in association with the second client device.
3. The method of claim 1, further comprising:
updating, by the one or more processors, the context ambiguity model using at least the determined device classification value to create an updated context ambiguity model; and
transmitting, by the one or more processors, the updated context fuzzy model to each of the plurality of second client devices.
4. The method of claim 3, further comprising:
updating, by the one or more processors, the classification model using the updated device classification value and the updated context fuzzy model to create an updated classification model.
5. The method of claim 1, further comprising:
receiving, by the one or more processors, a plurality of requests and a plurality of known classification values, the plurality of requests and the plurality of known classifications each being associated with the respective plurality of client devices;
generating, by the one or more processors, the plurality of data records, each of the data records comprising an indication of a respective request of the plurality of requests and a respective known classification value of the plurality of known classification values; and
storing, by the one or more processors, the plurality of data records in the database in association with the respective plurality of client devices.
6. The method of claim 1, wherein training the classification model and training the context blur model further comprises:
training, by the one or more processors, a combined model using each of the plurality of requests and known classification values, the combined model configured to receive as inputs the client device context information and the metadata input, and to provide as output the device classification value;
extracting, by the one or more processors, the context blur model from the combined model to generate the context blur model; and
extracting, by the one or more processors, the classification model from the combined model to generate the classification model.
7. The method of claim 1, further comprising:
normalizing, by the one or more processors, the request metadata to create a normalized metadata vector; and
determining, by the one or more processors, the device classification value using the classification vector and the normalized metadata vector received in the classified request as inputs to the classification model.
8. The method of claim 1, further comprising:
authenticating, by the one or more processors, the device classification value to determine that the second client device has access to protected content; and
providing, by the one or more processors, access to the protected content to the second client device in response to determining that the second client device can access the protected content.
9. The method of claim 8, further comprising:
determining, by the one or more processors, a likelihood that the second client device will view the protected content using the classification model.
10. The method of claim 1, wherein the categorized request indicates initiation of a uniform resource identifier on the client device responsible for the categorized request.
11. A system for generating an on-device classification model, the system comprising one or more processors and memory, the one or more processors configured to:
maintaining, in a database, a plurality of data records associated with a respective plurality of client devices, each of the data records comprising an identifier and a known classification value of a request, wherein the request comprises client device context information and client device metadata;
training a context fuzzy model using each of the plurality of requests and known classification values, the context fuzzy model configured to receive client device context information as input and provide an output classification vector as output;
training a classification model using each of the plurality of requests and known classification values, the classification model configured to receive as inputs a classification vector and metadata inputs, and to provide as output a device classification value;
transmitting the context obfuscation model to a plurality of second client devices to obfuscate the context information of each of the plurality of client devices;
receiving a classified request from a second client device of the plurality of second client devices, the request comprising a classification vector and request metadata, the classification vector created as an output of the context blur model executed by the second client device;
determining a device classification value using the classification vector and the request metadata as inputs to the classification model; and
transmitting the device classification value to the second client device.
12. The system of claim 11, wherein the one or more processors are further configured to:
in response to determining the classification of the client device, generating a classification data record comprising an indication of the request for classification and the device classification value; and
storing the classification data record in association with the second client device in the database.
13. The system of claim 11, wherein the one or more processors are further configured to:
updating the context ambiguity model using at least the determined device classification value to create an updated context ambiguity model; and
transmitting the updated context fuzzy model to each of the plurality of second client devices.
14. The system of claim 13, wherein the one or more processors are further configured to:
updating the classification model using the updated device classification value and the updated context fuzzy model to create an updated classification model.
15. The system of claim 11, wherein the one or more processors are further configured to:
receiving a plurality of requests and a plurality of known classification values, the plurality of requests and the plurality of known classifications each associated with the respective plurality of client devices;
generating the plurality of data records, each of the data records including an indication of a respective one of the plurality of requests and a respective one of the plurality of known classification values; and
storing the plurality of data records in the database in association with the respective plurality of client devices.
16. The system of claim 11, wherein in training the classification model and in training the context blur model, the one or more processors are further configured to:
training a combined model using each of the plurality of requests and known classification values, the combined model configured to receive as inputs the client device context information and the metadata input, and to provide as output the device classification value;
extracting the context blur model from the combined model to generate the context blur model; and
extracting the classification model from the combined model to generate the classification model.
17. The system of claim 11, wherein the one or more processors are further configured to:
normalizing the request metadata to create a normalized metadata vector; and
determining the device classification value using the classification vector and the normalized metadata vector received in the classified request as inputs to the classification model.
18. The system of claim 11, wherein the one or more processors are further configured to:
authenticating the device classification value to determine that the second client device can access the protected content; and
providing access to the protected content to the second client device in response to determining that the second client device can access the protected content.
19. The system of claim 18, wherein the one or more processors are further configured to determine a likelihood that the second client device will view the protected content using the classification model.
20. The system of claim 11, wherein the categorized request indicates initiation of a uniform resource identifier on the second client device.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2020/026621 WO2021201880A1 (en) | 2020-04-03 | 2020-04-03 | Systems and methods for secure and privacy preserving device classification |
Publications (2)
Publication Number | Publication Date |
---|---|
CN113785307A CN113785307A (en) | 2021-12-10 |
CN113785307B true CN113785307B (en) | 2022-11-25 |
Family
ID=70476397
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080004248.9A Active CN113785307B (en) | 2020-04-03 | 2020-04-03 | System and method for security and privacy preserving device classification |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220109672A1 (en) |
EP (1) | EP3908954B1 (en) |
CN (1) | CN113785307B (en) |
WO (1) | WO2021201880A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230128136A1 (en) * | 2021-10-25 | 2023-04-27 | Data Safeguard, Inc. | Multi-layered, Multi-pathed Apparatus, System, and Method of Using Cognoscible Computing Engine (CCE) for Automatic Decisioning on Sensitive, Confidential and Personal Data |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN108781223A (en) * | 2017-01-11 | 2018-11-09 | 谷歌有限责任公司 | The data packet transfer optimization of data for content item selection |
Family Cites Families (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060004627A1 (en) * | 2004-06-30 | 2006-01-05 | Shumeet Baluja | Advertisements for devices with call functionality, such as mobile phones |
US20190258807A1 (en) * | 2017-09-26 | 2019-08-22 | Mcs2, Llc | Automated adjusting of devices |
US11068605B2 (en) * | 2018-06-11 | 2021-07-20 | Grey Market Labs, PBC | Systems and methods for controlling data exposure using artificial-intelligence-based periodic modeling |
BR112021010468A2 (en) * | 2018-12-31 | 2021-08-24 | Intel Corporation | Security Systems That Employ Artificial Intelligence |
US11568209B2 (en) * | 2020-02-18 | 2023-01-31 | At&T Intellectual Property I, L.P. | Using deep learning models to obfuscate and optimize communications |
-
2020
- 2020-04-03 WO PCT/US2020/026621 patent/WO2021201880A1/en unknown
- 2020-04-03 US US17/261,834 patent/US20220109672A1/en active Pending
- 2020-04-03 EP EP20722784.4A patent/EP3908954B1/en active Active
- 2020-04-03 CN CN202080004248.9A patent/CN113785307B/en active Active
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN108781223A (en) * | 2017-01-11 | 2018-11-09 | 谷歌有限责任公司 | The data packet transfer optimization of data for content item selection |
Also Published As
Publication number | Publication date |
---|---|
WO2021201880A1 (en) | 2021-10-07 |
CN113785307A (en) | 2021-12-10 |
EP3908954A1 (en) | 2021-11-17 |
US20220109672A1 (en) | 2022-04-07 |
EP3908954B1 (en) | 2022-06-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN113169982B (en) | Low entropy browsing history for content quasi-personalization | |
KR102564387B1 (en) | Low entropy browsing history for semi-personalization of content | |
CN103166917A (en) | Method and system for network equipment identity recognition | |
Andriamilanto et al. | FPSelect: low-cost browser fingerprints for mitigating dictionary attacks against web authentication mechanisms | |
CN113785307B (en) | System and method for security and privacy preserving device classification | |
US20210042787A1 (en) | Low entropy browsing history for ads quasi-personalization | |
US20220167034A1 (en) | Device topological signatures for identifying and classifying mobile device users based on mobile browsing patterns | |
US11775641B2 (en) | Systems and methods for classifying malware based on feature reuse | |
CN110929129A (en) | Information detection method, equipment and machine-readable storage medium | |
KR102381330B1 (en) | Recommend content providers to improve targeting and other settings | |
CN115718927A (en) | Difference privacy mixed recommendation method based on untrusted server | |
US20220116410A1 (en) | Systems and methods for generating and selecting local content to improve security and utilization of network resources | |
EP3908953B1 (en) | Systems and methods for encryption of content request data | |
CN109902831B (en) | Service decision processing method and device | |
US20220167051A1 (en) | Automatic classification of households based on content consumption | |
CN117112937A (en) | Access request processing method, related equipment and storage medium | |
Jarrah et al. | Affirmative data analytics based data processing method for 6G wireless network applications |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
GR01 | Patent grant | ||
GR01 | Patent grant |