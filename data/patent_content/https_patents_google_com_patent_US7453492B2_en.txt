US7453492B2 - Portable hand held camera - Google Patents
Portable hand held camera Download PDFInfo
- Publication number
- US7453492B2 US7453492B2 US10/804,042 US80404204A US7453492B2 US 7453492 B2 US7453492 B2 US 7453492B2 US 80404204 A US80404204 A US 80404204A US 7453492 B2 US7453492 B2 US 7453492B2
- Authority
- US
- United States
- Prior art keywords
- data
- image
- artcard
- bit
- illustrates
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/14—Structure thereof only for on-demand ink jet heads
- B41J2/14314—Structure of ink jet print heads with electrostatically actuated membrane
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/14—Structure thereof only for on-demand ink jet heads
- B41J2/14427—Structure of ink jet print heads with thermal bend detached actuators
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17503—Ink cartridges
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17503—Ink cartridges
- B41J2/17513—Inner structure
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/78—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure storage of data
- G06F21/79—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer to assure secure storage of data in semiconductor storage media, e.g. directly-addressable memories
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/70—Protecting specific internal or peripheral components, in which the protection of a component leads to protection of the entire computer
- G06F21/86—Secure or tamper-resistant housings
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K1/00—Methods or arrangements for marking the record carrier in digital fashion
- G06K1/12—Methods or arrangements for marking the record carrier in digital fashion otherwise than by punching
- G06K1/121—Methods or arrangements for marking the record carrier in digital fashion otherwise than by punching by printing code marks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K19/00—Record carriers for use with machines and with at least a part designed to carry digital markings
- G06K19/06—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code
- G06K19/06009—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code with optically detectable marking
- G06K19/06037—Record carriers for use with machines and with at least a part designed to carry digital markings characterised by the kind of the digital marking, e.g. shape, nature, code with optically detectable marking multi-dimensional coding
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K7/00—Methods or arrangements for sensing record carriers, e.g. for reading patterns
- G06K7/10—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation
- G06K7/14—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation using light without selection of wavelength, e.g. sensing reflected white light
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06K—GRAPHICAL DATA READING; PRESENTATION OF DATA; RECORD CARRIERS; HANDLING RECORD CARRIERS
- G06K7/00—Methods or arrangements for sensing record carriers, e.g. for reading patterns
- G06K7/10—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation
- G06K7/14—Methods or arrangements for sensing record carriers, e.g. for reading patterns by electromagnetic radiation, e.g. optical sensing; by corpuscular radiation using light without selection of wavelength, e.g. sensing reflected white light
- G06K7/1404—Methods for optical code recognition
- G06K7/1408—Methods for optical code recognition the method being specifically adapted for the type of code
- G06K7/1417—2D bar codes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/0035—User-machine interface; Control console
- H04N1/00405—Output means
- H04N1/00408—Display of information to the user, e.g. menus
- H04N1/0044—Display of information to the user, e.g. menus for image preview or review, e.g. to help the user position a sheet
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/21—Intermediate information storage
- H04N1/2104—Intermediate information storage for one or a few pictures
- H04N1/2112—Intermediate information storage for one or a few pictures using still video cameras
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N1/00—Scanning, transmission or reproduction of documents or the like, e.g. facsimile transmission; Details thereof
- H04N1/21—Intermediate information storage
- H04N1/2104—Intermediate information storage for one or a few pictures
- H04N1/2112—Intermediate information storage for one or a few pictures using still video cameras
- H04N1/2154—Intermediate information storage for one or a few pictures using still video cameras the still video camera incorporating a hardcopy reproducing device, e.g. a printer
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N23/00—Cameras or camera modules comprising electronic image sensors; Control thereof
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N5/00—Details of television systems
- H04N5/222—Studio circuitry; Studio devices; Studio equipment
- H04N5/262—Studio circuits, e.g. for mixing, switching-over, change of character of image, other special effects ; Cameras specially adapted for the electronic generation of special effects
- H04N5/2628—Alteration of picture size, shape, position or orientation, e.g. zooming, rotation, rolling, perspective, translation
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/135—Nozzles
- B41J2/165—Preventing or detecting of nozzle clogging, e.g. cleaning, capping or moistening for nozzles
- B41J2/16585—Preventing or detecting of nozzle clogging, e.g. cleaning, capping or moistening for nozzles for paper-width or non-reciprocating print heads
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/17—Ink jet characterised by ink handling
- B41J2/175—Ink supply systems ; Circuit parts therefor
- B41J2/17596—Ink pumps, ink valves
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2/00—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed
- B41J2/005—Typewriters or selective printing mechanisms characterised by the printing or marking process for which they are designed characterised by bringing liquid or particles selectively into contact with a printing material
- B41J2/01—Ink jet
- B41J2/015—Ink jet characterised by the jet generation process
- B41J2/04—Ink jet characterised by the jet generation process generating single droplets or particles on demand
- B41J2002/041—Electromagnetic transducer
-
- B—PERFORMING OPERATIONS; TRANSPORTING
- B41—PRINTING; LINING MACHINES; TYPEWRITERS; STAMPS
- B41J—TYPEWRITERS; SELECTIVE PRINTING MECHANISMS, i.e. MECHANISMS PRINTING OTHERWISE THAN FROM A FORME; CORRECTION OF TYPOGRAPHICAL ERRORS
- B41J2202/00—Embodiments of or processes related to ink-jet or thermal heads
- B41J2202/01—Embodiments of or processes related to ink-jet heads
- B41J2202/21—Line printing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2129—Authenticate client device independently of the user
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N2101/00—Still video cameras
Definitions
- the present invention relates to an image processing method and apparatus and, in particular, discloses a Digital Instant Camera with Image Processing Capability.
- the present invention further relates to the field of digital camera technology and, particularly, discloses a digital camera having an integral color printer.
- Such devices are generally inconvenient in that all images must be stored by the camera and printed out at some later stage. Hence, the camera must have sufficient storage capabilities for the storing of multiple images and, additionally, the user of the camera must have access to a subsequent computer system for the downloading of the images and printing out by a computer printer or the like.
- the present invention relates to providing an alternative form of camera system which includes a digital camera with an integral color printer. Additionally, the camera provides hardware and software for the increasing of the apparent resolution of the image sensing system and the conversion of the image to a wide range of “artistic styles” and a graphic enhancement.
- a camera system comprising at least one area image sensor for imaging a scene, a camera processor means for processing said imaged scene in accordance with a predetermined scene transformation requirement, a printer for printing out said processed image scene on print media, print media and printing ink stored in a single detachable module inside said camera system, said camera system comprising a portable hand held unit for the imaging of scenes by said area image sensor and printing said scenes directly out of said camera system via said printer.
- the camera system includes a print roll for the storage of print media and printing ink for utilization by the printer, the print roll being detachable from the camera system.
- the print roll can include an authentication chip containing authentication information and the camera processing means is adapted to interrogate the authentication chip so as to determine the authenticity of said print roll when inserted within said camera system.
- the printer can include a drop on demand ink printer and guillotine means for the separation of printed photographs.
- FIG. 1 illustrates an Artcam device constructed in accordance with the preferred embodiment
- FIG. 2 is a schematic block diagram of the main Artcam electronic components
- FIG. 3 is a schematic block diagram of the Artcam Central Processor
- FIG. 3( a ) illustrates the VLIW Vector Processor in more detail
- FIG. 4 illustrates the Processing Unit in more detail
- FIG. 5 illustrates the ALU 188 in more detail
- FIG. 6 illustrates the In block in more detail
- FIG. 7 illustrates the Out block in more detail
- FIG. 8 illustrates the Registers block in more detail
- FIG. 9 illustrates the Crossbar 1 in more detail
- FIG. 10 illustrates the Crossbar 2 in more detail
- FIG. 11 illustrates the read process block in more detail
- FIG. 12 illustrates the read process block in more detail
- FIG. 13 illustrates the barrel shifter block in more detail
- FIG. 14 illustrates the adder/logic block in more detail
- FIG. 15 illustrates the multiply block in more detail
- FIG. 16 illustrates the I/O address generator block in more detail
- FIG. 17 illustrates a pixel storage format
- FIG. 18 illustrates a sequential read iterator process
- FIG. 19 illustrates a box read iterator process
- FIG. 20 illustrates a box write iterator process
- FIG. 21 illustrates the vertical strip read/write iterator process
- FIG. 22 illustrates the vertical strip read/write iterator process
- FIG. 23 illustrates the generate sequential process
- FIG. 24 illustrates the generate sequential process
- FIG. 25 illustrates the generate vertical strip process
- FIG. 26 illustrates the generate vertical strip process
- FIG. 27 illustrates a pixel data configuration
- FIG. 28 illustrates a pixel processing process
- FIG. 29 illustrates a schematic block diagram of the display controller
- FIG. 30 illustrates the CCD image organization
- FIG. 31 illustrates the storage format for a logical image
- FIG. 32 illustrates the internal image memory storage format
- FIG. 33 illustrates the image pyramid storage format
- FIG. 34 illustrates a time line of the process of sampling an Artcard
- FIG. 35 illustrates the super sampling process
- FIG. 36 illustrates the process of reading a rotated Artcard
- FIG. 37 illustrates a flow chart of the steps necessary to decode an Artcard
- FIG. 38 illustrates an enlargement of the left hand corner of a single Artcard
- FIG. 39 illustrates a single target for detection
- FIG. 40 illustrates the method utilised to detect targets
- FIG. 41 illustrates the method of calculating the distance between two targets
- FIG. 42 illustrates the process of centroid drift
- FIG. 43 shows one form of centroid lookup table
- FIG. 44 illustrates the centroid updating process
- FIG. 45 illustrates a delta processing lookup table utilised in the preferred embodiment
- FIG. 46 illustrates the process of unscrambling Artcard data
- FIG. 47 illustrates a magnified view of a series of dots
- FIG. 48 illustrates the data surface of a dot card
- FIG. 49 illustrates schematically the layout of a single datablock
- FIG. 50 illustrates a single datablock
- FIG. 51 and FIG. 52 illustrate magnified views of portions of the datablock of FIG. 50 ;
- FIG. 53 illustrates a single target structure
- FIG. 54 illustrates the target structure of a datablock
- FIG. 55 illustrates the positional relationship of targets relative to border clocking regions of a data region
- FIG. 56 illustrates the orientation columns of a datablock
- FIG. 57 illustrates the array of dots of a datablock
- FIG. 58 illustrates schematically the structure of data for Reed-Solomon encoding
- FIG. 59 illustrates an example Reed-Solomon encoding
- FIG. 60 illustrates the Reed-Solomon encoding process
- FIG. 61 illustrates the layout of encoded data within a datablock
- FIG. 62 illustrates the sampling process in sampling an alternative Artcard
- FIG. 63 illustrates, in exaggerated form, an example of sampling a rotated alternative Artcard
- FIG. 64 illustrates the scanning process
- FIG. 65 illustrates the likely scanning distribution of the scanning process
- FIG. 66 illustrates the relationship between probability of symbol errors and Reed-Solomon block errors
- FIG. 67 illustrates a flow chart of the decoding process
- FIG. 68 illustrates a process utilization diagram of the decoding process
- FIG. 69 illustrates the dataflow steps in decoding
- FIG. 70 illustrates the reading process in more detail
- FIG. 71 illustrates the process of detection of the start of an alternative Artcard in more detail
- FIG. 72 illustrates the extraction of bit data process in more detail
- FIG. 73 illustrates the segmentation process utilized in the decoding process
- FIG. 74 illustrates the decoding process of finding targets in more detail
- FIG. 75 illustrates the data structures utilized in locating targets
- FIG. 76 illustrates the Lancos 3 function structure
- FIG. 77 illustrates an enlarged portion of a datablock illustrating the clockmark and border region
- FIG. 78 illustrates the processing steps in decoding a bit image
- FIG. 79 illustrates the dataflow steps in decoding a bit image
- FIG. 80 illustrates the descrambling process of the preferred embodiment
- FIG. 81 illustrates one form of implementation of the convolver
- FIG. 82 illustrates a convolution process
- FIG. 83 illustrates the compositing process
- FIG. 84 illustrates the regular compositing process in more detail
- FIG. 85 illustrates the process of warping using a warp map
- FIG. 86 illustrates the warping bi-linear interpolation process
- FIG. 87 illustrates the process of span calculation
- FIG. 88 illustrates the basic span calculation process
- FIG. 89 illustrates one form of detail implementation of the span calculation process
- FIG. 90 illustrates the process of reading image pyramid levels
- FIG. 91 illustrates using the pyramid table for bilinear interpolation
- FIG. 92 illustrates the histogram collection process
- FIG. 93 illustrates the color transform process
- FIG. 94 illustrates the color conversion process
- FIG. 95 illustrates the color space conversion process in more detail
- FIG. 96 illustrates the process of calculating an input coordinate
- FIG. 97 illustrates the process of compositing with feedback
- FIG. 98 illustrates the generalized scaling process
- FIG. 99 illustrates the scale in X scaling process
- FIG. 100 illustrates the scale in Y scaling process
- FIG. 101 illustrates the tessellation process
- FIG. 102 illustrates the sub-pixel translation process
- FIG. 103 illustrates the compositing process
- FIG. 104 illustrates the process of compositing with feedback
- FIG. 105 illustrates the process of tiling with color from the input image
- FIG. 106 illustrates the process of tiling with feedback
- FIG. 107 illustrates the process of tiling with texture replacement
- FIG. 108 illustrates the process of tiling with color from the input image
- FIG. 109 illustrates the process of applying a texture without feedback
- FIG. 110 illustrates the process of applying a texture with feedback
- FIG. 111 illustrates the process of rotation of CCD pixels
- FIG. 112 illustrates the process of interpolation of Green subpixels
- FIG. 113 illustrates the process of interpolation of Blue subpixels
- FIG. 114 illustrates the process of interpolation of Red subpixels
- FIG. 115 illustrates the process of CCD pixel interpolation with 0 degree rotation for odd pixel lines
- FIG. 116 illustrates the process of CCD pixel interpolation with 0 degree rotation for even pixel lines
- FIG. 117 illustrates the process of color conversion to Lab color space
- FIG. 118 illustrates the process of calculation of 1/ ⁇ X
- FIG. 119 illustrates the implementation of the calculation of 1/ ⁇ X in more detail
- FIG. 120 illustrates the process of Normal calculation with a bump map
- FIG. 121 illustrates the process of illumination calculation with a bump map
- FIG. 122 illustrates the process of illumination calculation with a bump map in more detail
- FIG. 123 illustrates the process of calculation of L using a directional light
- FIG. 124 illustrates the process of calculation of L using a Omni lights and spotlights
- FIG. 125 illustrates one form of implementation of calculation of L using a Omni lights and spotlights
- FIG. 126 illustrates the process of calculating the N.L dot product
- FIG. 127 illustrates the process of calculating the N.L dot product in more detail
- FIG. 128 illustrates the process of calculating the R.V dot product
- FIG. 129 illustrates the process of calculating the R.V dot product in more detail
- FIG. 130 illustrates the attenuation calculation inputs and outputs
- FIG. 131 illustrates an actual implementation of attenuation calculation
- FIG. 132 illustrates an graph of the cone factor
- FIG. 133 illustrates the process of penumbra calculation
- FIG. 134 illustrates the angles utilised in penumbra calculation
- FIG. 135 illustrates the inputs and outputs to penumbra calculation
- FIG. 136 illustrates an actual implementation of penumbra calculation
- FIG. 137 illustrates the inputs and outputs to ambient calculation
- FIG. 138 illustrates an actual implementation of ambient calculation
- FIG. 139 illustrates an actual implementation of diffuse calculation
- FIG. 140 illustrates the inputs and outputs to a diffuse calculation
- FIG. 141 illustrates an actual implementation of a diffuse calculation
- FIG. 142 illustrates the inputs and outputs to a specular calculation
- FIG. 143 illustrates an actual implementation of a specular calculation
- FIG. 144 illustrates the inputs and outputs to a specular calculation
- FIG. 145 illustrates an actual implementation of a specular calculation
- FIG. 146 illustrates an actual implementation of a ambient only calculation
- FIG. 147 illustrates the process overview of light calculation
- FIG. 148 illustrates an example illumination calculation for a single infinite light source
- FIG. 149 illustrates an example illumination calculation for a Omni light source without a bump map
- FIG. 150 illustrates an example illumination calculation for a Omni light source with a bump map
- FIG. 151 illustrates an example illumination calculation for a Spotlight light source without a bump map
- FIG. 152 illustrates the process of applying a single Spotlight onto an image with an associated bump-map
- FIG. 153 illustrates the logical layout of a single printhead
- FIG. 154 illustrates the structure of the printhead interface
- FIG. 155 illustrates the process of rotation of a Lab image
- FIG. 156 illustrates the format of a pixel of the printed image
- FIG. 157 illustrates the dithering process
- FIG. 158 illustrates the process of generating an 8 bit dot output
- FIG. 159 illustrates a perspective view of the card reader
- FIG. 160 illustrates an exploded perspective of a card reader
- FIG. 161 illustrates a close up view of the Artcard reader
- FIG. 162 illustrates a perspective view of the print roll and print head
- FIG. 163 illustrates a first exploded perspective view of the print roll
- FIG. 164 illustrates a second exploded perspective view of the print roll
- FIG. 165 illustrates the print roll authentication chip
- FIG. 166 illustrates an enlarged view of the print roll authentication chip
- FIG. 167 illustrates a single authentication chip data protocol
- FIG. 168 illustrates a dual authentication chip data protocol
- FIG. 169 illustrates a first presence only protocol
- FIG. 170 illustrates a second presence only protocol
- FIG. 171 illustrates a third data protocol
- FIG. 172 illustrates a fourth data protocol
- FIG. 173 is a schematic block diagram of a maximal period LFSR
- FIG. 174 is a schematic block diagram of a clock limiting filter
- FIG. 175 is a schematic block diagram of the tamper detection lines
- FIG. 176 illustrates an oversized nMOS transistor
- FIG. 177 illustrates the taking of multiple XORs from the Tamper Detect Line
- FIG. 178 illustrate how the Tamper Lines cover the noise generator circuitry
- FIG. 179 illustrates the normal form of FET implementation
- FIG. 180 illustrates the modified form of FET implementation of the preferred embodiment
- FIG. 181 illustrates a schematic block diagram of the authentication chip
- FIG. 182 illustrates an example memory map
- FIG. 183 illustrates an example of the constants memory map
- FIG. 184 illustrates an example of the RAM memory map
- FIG. 185 illustrates an example of the Flash memory variables memory map
- FIG. 186 illustrates an example of the Flash memory program memory map
- FIG. 187 shows the data flow and relationship between components of the State Machine
- FIG. 188 shows the data flow and relationship between components of the I/O Unit.
- FIG. 189 illustrates a schematic block diagram of the Arithmetic Logic Unit
- FIG. 190 illustrates a schematic block diagram of the RPL unit
- FIG. 191 illustrates a schematic block diagram of the ROR block of the ALU
- FIG. 192 is a block diagram of the Program Counter Unit
- FIG. 193 is a block diagram of the Memory Unit
- FIG. 194 shows a schematic block diagram for the Address Generator Unit
- FIG. 195 shows a schematic block diagram for the JSIGEN Unit
- FIG. 196 shows a schematic block diagram for the JSRGEN Unit.
- FIG. 197 shows a schematic block diagram for the DBRGEN Unit
- FIG. 198 shows a schematic block diagram for the LDKGEN Unit
- FIG. 199 shows a schematic block diagram for the RPLGEN Unit
- FIG. 200 shows a schematic block diagram for the VARGEN Unit.
- FIG. 201 shows a schematic block diagram for the CLRGEN Unit.
- FIG. 202 shows a schematic block diagram for the BITGEN Unit.
- FIG. 203 sets out the information stored on the print roll authentication chip
- FIG. 204 illustrates the data stored within the Artcam authorization chip
- FIG. 205 illustrates the process of print head pulse characterization
- FIG. 206 is an exploded perspective, in section, of the print head ink supply mechanism
- FIG. 207 is a bottom perspective of the ink head supply unit
- FIG. 208 is a bottom side sectional view of the ink head supply unit
- FIG. 209 is a top perspective of the ink head supply unit
- FIG. 210 is a top side sectional view of the ink head supply unit
- FIG. 211 illustrates a perspective view of a small portion of the print head
- FIG. 212 illustrates is an exploded perspective of the print head unit
- FIG. 213 illustrates a top side perspective view of the internal portions of an Artcam camera, showing the parts flattened out;
- FIG. 214 illustrates a bottom side perspective view of the internal portions of an Artcam camera, showing the parts flattened out
- FIG. 215 illustrates a first top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 216 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 217 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
- FIG. 218 illustrates the backing portion of a postcard print roll
- FIG. 219 illustrates the corresponding front image on the postcard print roll after printing out images
- FIG. 220 illustrates a form of print roll ready for purchase by a consumer
- FIG. 221 illustrates a layout of the software/hardware modules of the overall Artcam application
- FIG. 222 illustrates a layout of the software/hardware modules of the Camera Manager
- FIG. 223 illustrates a layout of the software/hardware modules of the Image Processing Manager
- FIG. 224 illustrates a layout of the software/hardware modules of the Printer Manager
- FIG. 225 illustrates a layout of the software/hardware modules of the Image Processing Manager
- FIG. 226 illustrates a layout of the software/hardware modules of the File Manager
- FIG. 227 illustrates a perspective view, partly in section, of an alternative form of printroll
- FIG. 228 is a left side exploded perspective view of the print roll of FIG. 227 ;
- FIG. 229 is a right side exploded perspective view of a single printroll
- FIG. 230 is an exploded perspective view, partly in section, of the core portion of the printroll.
- FIG. 231 is a second exploded perspective view of the core portion of the printroll.
- the digital image processing camera system constructed in accordance with the preferred embodiment is as illustrated in FIG. 1 .
- the camera unit 1 includes means for the insertion of an integral print roll (not shown).
- the camera unit 1 can include an area image sensor 2 which sensors an image 3 for captured by the camera.
- the second area image sensor can be provided to also image the scene 3 and to optionally provide for the production of stereographic output effects.
- the camera 1 can include an optional color display 5 for the display of the image being sensed by the sensor 2 .
- the button 6 can be depressed resulting in the printed image 8 being output by the camera unit 1 .
- a series of cards, herein after known as “Artcards” ⁇ dot over ( 9 ) ⁇ contain, on one surface encoded information and on the other surface, contain an image distorted by the particular effect produced by the Artcard 9 .
- the Artcard 9 is inserted in an Artcard reader 10 in the side of camera 1 and, upon insertion, results in output image 8 being distorted in the same manner as the distortion appearing on the surface of Artcard 9 .
- a user wishing to produce a particular effect can insert one of many Artcards 9 into the Artcard reader 10 and utilize button 19 to take a picture of the image 3 resulting in a corresponding distorted output image 8 .
- the camera unit 1 can also include a number of other control button 13 , 14 in addition to a simple LCD output display 15 for the display of informative information including the number of printouts left on the internal print roll on the camera unit. Additionally, different output formats can be controlled by CHP switch 17 .
- FIG. 2 there is illustrated a schematic view of the internal hardware of the camera unit 1 .
- the internal hardware is based around an Artcam central processor unit (ACP) 31 .
- ACP Artcam central processor unit
- the Artcam central processor 31 provides many functions which form the ‘heart’ of the system.
- the ACP 31 is preferably implemented as a complex, high speed, CMOS system on-a-chip. Utilizing standard cell design with some full custom regions is recommended. Fabrication on a 0.25 ⁇ CMOS process will provide the density and speed required, along with a reasonably small die area.
- the functions provided by the ACP 31 include:
- a 3D stereoscopic version of the ACP requires two area image sensor interfaces with a second optional image sensor 4 being provided for stereoscopic effects.
- the encoded surface of the Artcard 9 includes information on how to process an image to produce the effects displayed on the image distorted surface of the Artcard 9 .
- This information is in the form of a script, hereinafter known as a “Vark script”.
- the Vark script is utilised by an interpreter running within the ACP 31 to produce the desired effect.
- a quartz crystal 58 is used as a frequency reference for the system clock.
- the ACP 31 includes a phase locked loop clock circuit to increase the frequency derived from the crystal 58 .
- the area image sensor 2 converts an image through its lens into an electrical signal. It can either be a charge coupled device (CCD) or an active pixel sensor (APS)CMOS image sector.
- CCD charge coupled device
- APS active pixel sensor
- CMOS imagers are eventually expected to be substantially cheaper than CCD's have smaller pixel areas, and be able to incorporate drive circuitry and signal processing. They can also be made in CMOS fabs, which are transitioning to 12′′ wafers. CCD's are usually built in 6′′ wafer fabs, and economics may not allow a conversion to 12′′ fabs. Therefore, the difference in fabrication cost between CCD's and CMOS imagers is likely to increase, progressively favoring CMOS imagers. However, at present, a CCD is probably the best option.
- the Artcam unit will produce suitable results with a 1,500 ⁇ 1,000 area image sensor. However, smaller sensors, such as 750 ⁇ 500, will be adequate for many markets.
- the Artcam is less sensitive to image sensor resolution than are conventional digital cameras. This is because many of the styles contained on Artcards 9 process the image in such a way as to obscure the lack of resolution. For example, if the image is distorted to simulate the effect of being converted to an impressionistic painting, low source image resolution can be used with minimal effect. Further examples for which low resolution input images will typically not be noticed include image warps which produce high distorted images, multiple miniature copies of the of the image (eg. passport photos), textural processing such as bump mapping for a base relief metal look, and photo-compositing into structured scenes.
- This tolerance of low resolution image sensors may be a significant factor in reducing the manufacturing cost of an Artcam unit 1 camera.
- An Artcam with a low cost 750 ⁇ 500 image sensor will often produce superior results to a conventional digital camera with a much more expensive 1,500 ⁇ 1,000 image sensor.
- the 3D versions of the Artcam unit 1 have an additional image sensor 4 , for stereoscopic operation.
- This image sensor is identical to the main image sensor.
- the circuitry to drive the optional image sensor may be included as a standard part of the ACP chip 31 to reduce incremental design cost. Alternatively, a separate 3D Artcam ACP can be designed. This option will reduce the manufacturing cost of a mainstream single sensor Artcam.
- a small chip 53 is included in each print roll 42 .
- This chip replaced the functions of the bar code, optical sensor and wheel, and ISO/ASA sensor on other forms of camera film units such as Advanced Photo Systems film cartridges.
- the authentication chip also provides other features:
- the authentication chip 53 contains 1024 bits of Flash memory, of which 128 bits is an authentication key, and 512 bits is the authentication information. Also included is an encryption circuit to ensure that the authentication key cannot be accessed directly.
- the Artcam unit 1 can utilize any color print technology which is small enough, low enough power, fast enough, high enough quality, and low enough cost, and is compatible with the print roll. Relevant printheads will be specifically discussed hereinafter.
- the specifications of the ink jet head are:
- the function of the ink pressure controller depends upon the type of ink jet print head 44 incorporated in the Artcam. For some types of ink jet, the use of an ink pressure controller can be eliminated, as the ink pressure is simply atmospheric pressure. Other types of print head require a regulated positive ink pressure. In this case, the in pressure controller consists of a pump and pressure transducer.
- print heads may require an ultrasonic transducer to cause regular oscillations in the ink pressure, typically at frequencies around 100 KHz.
- the ACP 31 controls the frequency phase and amplitude of these oscillations.
- the paper transport motor 36 moves the paper from within the print roll 42 past the print head at a relatively constant rate.
- the motor 36 is a miniature motor geared down to an appropriate speed to drive rollers which move the paper.
- a high quality motor and mechanical gears are required to achieve high image quality, as mechanical rumble or other vibrations will affect the printed dot row spacing.
- the motor driver 60 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 36 .
- a paper pull sensor 50 detects a user's attempt to pull a photo from the camera unit during the printing process.
- the APC 31 reads this sensor 50 , and activates the guillotine 41 if the condition occurs.
- the paper pull sensor 50 is incorporated to make the camera more ‘foolproof’, in operation. Were the user to pull the paper out forcefully during printing, the print mechanism 44 or print roll 42 may (in extreme cases) be damaged. Since it is acceptable to pull out the ‘pod’ from a Polaroid type camera before it is fully ejected, the public has been ‘trained’ to do this. Therefore, they are unlikely to heed printed instructions not to pull the paper.
- the Artcam preferably restarts the photo print process after the guillotine 41 has cut the paper after pull sensing.
- the pull sensor can be implemented as a strain gauge sensor, or as an optical sensor detecting a small plastic flag which is deflected by the torque that occurs on the paper drive rollers when the paper is pulled.
- the latter implementation is recommendation for low cost.
- the paper guillotine actuator 40 is a small actuator which causes the guillotine 41 to cut the paper either at the end of a photograph, or when the paper pull sensor 50 is activated.
- the guillotine actuator 40 is a small circuit which amplifies a guillotine control signal from the APC tot the level required by the actuator 41 .
- the Artcard 9 is a program storage medium for the Artcam unit. As noted previously, the programs are in the form of Vark scripts. Vark is a powerful image processing language especially developed for the Artcam unit. Each Artcard 9 contains one Vark script, and thereby defines one image processing style.
- the VARK language is highly image processing specific.
- the language includes facilities for handling many image processing functions including image warping via a warp map, convolution, color lookup tables, posterizing an image, adding noise to an image, image enhancement filters, painting algorithms, brush jittering and manipulation edge detection filters, tiling, illumination via light sources, bump maps, text, face detection and object detection attributes, fonts, including three dimensional fonts, and arbitrary complexity pre-rendered icons. Further details of the operation of the Vark language interpreter are contained hereinafter.
- VARK interpreter is incorporated in the camera device
- a device independent scenario is provided whereby the underlying technology can be completely varied over time.
- the VARK scripts can be updated as new filters are created and distributed in an inexpensive manner, such as via simple cards for card reading.
- the Artcard 9 is a piece of thin white plastic with the same format as a credit card (86 mm long by 54 mm wide).
- the Artcard is printed on both sides using a high resolution ink jet printer.
- the inkjet printer technology is assumed to be the same as that used in the Artcam, with 1600 dpi (63 dpmm) resolution.
- a major feature of the Artcard 9 is low manufacturing cost.
- Artcards can be manufactured at high speeds as a wide web of plastic film.
- the plastic web is coated on both sides with a hydrophilic dye fixing layer.
- the web is printed simultaneously on both sides using a ‘pagewidth’ color ink jet printer.
- the web is then cut and punched into individual cards.
- On one face of the card is printed a human readable representation of the effect the Artcard 9 will have on the sensed image. This can be simply a standard image which has been processed using the Vark script stored on the back face of the card.
- the print area is 80 mm ⁇ 50 mm, giving a total of 15,876,000 dots.
- This array of dots could represent at least 1.89 Mbytes of data.
- extensive error detection and correction is incorporated in the array of dots. This allows a substantial portion of the card to be defaced, worn, creased, or dirty with no effect on data integrity.
- the data coding used is Reed-Solomon coding, with half of the data devoted to error correction. This allows the storage of 967 Kbytes of error corrected data on each Artcard 9 .
- the Artcard linear sensor 34 converts the aforementioned Artcard data image to electrical signals.
- the linear image sensor can be fabricated using either CCD or APS CMOS technology.
- the active length of the image sensor 34 is 50 mm, equal to the width of the data array on the Artcard 9 .
- the resolution of the linear image sensor 34 must be at least twice the highest spatial frequency of the Artcard optical image reaching the image sensor. In practice, data detection is easier if the image sensor resolution is substantially above this.
- a resolution of 4800 dpi (189 dpmm) is chosen, giving a total of 9,450 pixels. This resolution requires a pixel sensor pitch of 5.3 ⁇ m. This can readily be achieved by using four staggered rows of 20 ⁇ m pixel sensors.
- the linear image sensor is mounted in a special package which includes a LED 65 to illuminate the Artcard 9 via a light-pipe (not shown).
- the Artcard reader light-pipe can be a molded light-pipe which has several function:
- the Artcard reader motor propels the Artcard past the linear image sensor 34 at a relatively constant rate.
- the motor 37 is a standard miniature motor geared down to an appropriate speed to drive a pair of rollers which move the Artcard 9 .
- the speed variations, rumble, and other vibrations will affect the raw image data as circuitry within the APC 31 includes extensive compensation for these effects to reliably read the Artcard data.
- the motor 37 is driven in reverse when the Artcard is to be ejected.
- the Artcard motor driver 61 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 37 .
- the card insertion sensor 49 is an optical sensor which detects the presence of a card as it is being inserted in the card reader 34 . Upon a signal from this sensor 49 , the APC 31 initiates the card reading process, including the activation of the Artcard reader motor 37 .
- a card eject button 16 ( FIG. 1 ) is used by the user to eject the current Artcard, so that another Artcard can be inserted.
- the APC 31 detects the pressing of the button, and reverses the Artcard reader motor 37 to eject the card.
- a card status indicator 66 is provided to signal the user as to the status of the Artcard reading process. This can be a standard bi-color (red/green) LED. When the card is successfully read, and data integrity has been verified, the LED lights up green continually. If the card is faulty, then the LED lights up red.
- the power supply voltage is less than the forward voltage drop of the greed LED, and the LED will not light.
- red LEDs can be used, or the LED can be powered from a voltage pump which also powers other circuits in the Artcam which require higher voltage.
- the camera utilizes 8 Mbytes of memory 33 . This can be provided by a single 64 Mbit memory chip. Of course, with changing memory technology increased Dram storage sizes may be substituted.
- High speed access to the memory chip is required. This can be achieved by using a Rambus DRAM (burst access rate of 500 Mbytes per second) or chips using the new open standards such as double data rate (DDR) SDRAM or Synclink DRAM.
- Rambus DRAM burst access rate of 500 Mbytes per second
- DDR double data rate SDRAM
- Synclink DRAM Synclink DRAM
- the camera authentication chip 54 is identical to the print roll authentication chip 53 , except that it has different information stored in it.
- the camera authentication chip 54 has three main purposes:
- the Artcam includes an optional color display 5 and small status display 15 .
- Lowest cost consumer cameras may include a color image display, such as a small TFT LCD 5 similar to those found on some digital cameras and camcorders.
- the color display 5 is a major cost element of these versions of Artcam, and the display 5 plus back light are a major power consumption drain.
- the status display 15 is a small passive segment based LCD, similar to those currently provided on silver halide and digital cameras. Its main function is to show the number of prints remaining in the print roll 42 and icons for various standard camera features, such as flash and battery status.
- the color display 5 is a full motion image display which operates as a viewfinder, as a verification of the image to be printed, and as a user interface display.
- the cost of the display 5 is approximately proportional to its area, so large displays (say 4′′ diagonal) unit will be restricted to expensive versions of the Artcam unit. Smaller displays, such as color camcorder viewfinder TFT's at around 1′′, may be effective for mid-range Artcams.
- the Artcam can include a zoom lens.
- This can be a standard electronically controlled zoom lens, identical to one which would be used on a standard electronic camera, and similar to pocket camera zoom lenses.
- a referred version of the Artcam unit may include standard interchangeable 35 mm SLR lenses.
- the autofocus motor 39 changes the focus of the zoom lens.
- the motor is a miniature motor geared down to an appropriate speed to drive the autofocus mechanism.
- the autofocus motor driver 63 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor 39 .
- the zoom motor 38 moves the zoom front lenses in and out.
- the motor is a miniature motor geared down to an appropriate speed to drive the zoom mechanism.
- the zoom motor driver 62 is a small circuit which amplifies the digital motor control signals from the APC 31 to levels suitable for driving the motor.
- the ACP 31 contains a universal serial bus (USB) interface 52 for communication with personal computers. Not all Artcam models are intended to include the USB connector. However, the silicon area required for a USB circuit 52 is small, so the interface can be included in the standard ACP.
- USB universal serial bus
- the Artcam unit may include an optional miniature keyboard 57 for customizing text specified by the Artcard. Any text appearing in an Artcard image may be editable, even if it is in a complex metallic 3D font.
- the miniature keyboard includes a single line alphanumeric LCD to display the original text and edited text.
- the keyboard may be a standard accessory.
- the ACP 31 contains a serial communications circuit for transferring data to and from the miniature keyboard.
- the Artcam unit uses a battery 48 . Depending upon the Artcam options, this is either a 3V Lithium cell, 1.5 V AA alkaline cells, or other battery arrangement.
- Power consumption is an important design constraint in the Artcam. It is desirable that either standard camera batteries (such as 3V lithium batters) or standard AA or AAA alkaline cells can be used. While the electronic complexity of the Artcam unit is dramatically higher than 35 mm photographic cameras, the power consumption need not be commensurately higher. Power in the Artcam can be carefully managed with all unit being turned off when not in use.
- the most significant current drains are the ACP 31 , the area image sensors 2 , 4 , the printer 44 various motors, the flash unit 56 , and the optional color display 5 dealing with each part separately:
- ACP If fabricated using 0.25 ⁇ m CMOS, and running on 1.5V, the ACP power consumption can be quite low. Clocks to various parts of the ACP chip can be quite low. Clocks to various parts of the ACP chip can be turned off when not in use, virtually eliminating standby current consumption. The ACP will only fully used for approximately 4 seconds for each photograph printed.
- Area image sensor power is only supplied to the area image sensor when the user has their finger on the button.
- the printer power is only supplied to the printer when actually printing. This is for around 2 seconds for each photograph. Even so, suitably lower power consumption printing should be used.
- the motors required in the Artcam are all low power miniature motors, and are typically only activated for a few seconds per photo.
- the flash unit 45 is only used for some photographs. Its power consumption can readily be provided by a 3V lithium battery for a reasonably battery life.
- the optional color display 5 is a major current drain for two reasons: it must be on for the whole time that the camera is in use, and a backlight will be required if a liquid crystal display is used. Cameras which incorporate a color display will require a larger battery to achieve acceptable batter life.
- the flash unit 56 can be a standard miniature electronic flash for consumer cameras.
- FIG. 3 illustrates the Artcam Central Processor (ACP) 31 in more detail.
- the Artcam Central Processor provides all of the processing power for Artcam. It is designed for a 0.25 micron CMOS process, with approximately 1.5 million transistors and an area of around 50 mm 2 .
- the ACP 31 is a complex design, but design effort can be reduced by the use of datapath compilation techniques, macrocells, and IP cores.
- the ACP 31 contains:
- a Direct RAMbus interface 81 A Direct RAMbus interface 81
- a numeric LCD interface 84 A numeric LCD interface 84 .
- the RISC CPU, Direct RAMbus interface 81 , CMOS sensor interface 83 and USB serial interface 52 can be vendor supplied cores.
- the ACP 31 is intended to run at a clock speed of 200 MHz on 3V externally and 1.5V internally to minimize power consumption.
- the CPU core needs only to run at 100 MHz.
- the following two block diagrams give two views of the ACP 31 :
- An example Artcam showing a high-level view of the ACP 31 connected to the rest of the Artcam hardware.
- the DRAM Interface 81 is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM.
- each module within the DRAM Interface is an address generator.
- Print Image the Output Image format printed by the Artcam
- CMOS images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera.
- a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera.
- all internal image formats are the same format in terms of color space across all cameras.
- the three image types can vary with respect to which direction is ‘up’.
- the physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.
- the ACP 31 incorporates a 32 bit RISC CPU 72 to run the Vark image processing language interpreter and to perform Artcam's general operating system duties.
- CPU cores can be any processor core with sufficient processing power to perform the required core calculations and control functions fast enough to met consumer expectations. Examples of suitable cores are: MIPS R4000 core from LSI Logic, StrongARM core.
- MIPS R4000 core from LSI Logic
- StrongARM core There is no need to maintain instruction set continuity between different Artcam models. Artcard compatibility is maintained irrespective of future processor advances and changes, because the Vark interpreter is simply re-compiled for each new instruction set.
- the ACP 31 architecture is therefore also free to evolve. Different ACP 31 chip designs may be fabricated by different manufacturers, without requiring to license or port the CPU core.
- CPU Memory Model An Artcam's CPU memory model consists of a 32 MB area. It consists of 8 MB of physical RDRAM off-chip in the base model of Artcam, with provision for up to 16 MB of off-chip memory. There is a 4 MB Flash memory 70 on the ACP 31 for program storage, and finally a 4 MB address space mapped to the various registers and controls of the ACP 31 .
- the memory map then, for an Artcam is as follows:
- Program scratch RAM 0.50 MB Artcard data 1.00 MB Photo Image, captured from CMOS Sensor 0.50 MB Print Image (compressed) 2.25 MB 1 Channel of expanded Photo Image 1.50 MB 1 Image Pyramid of single channel 1.00 MB Intermediate Image Processing 1.25 MB TOTAL 8 MB Notes: Uncompressed, the Print Image requires 4.5 MB (1.5 MB per channel). To accommodate other objects in the 8 MB model, the Print Image needs to be compressed. If the chrominance channels are compressed by 4:1 they require only 0.375 MB each). The memory model described here assumes a single 8 MB RDRAM. Other models of the Artcam may have more memory, and thus not require compression of the Print Image.
- Data Cache 76 The ACP 31 contains a dedicated CPU instruction cache 77 and a general data cache 76 .
- the Data cache 76 handles all DRAM requests (reads and writes of data) from the CPU, the VLIW Vector Processor 74 , and the Display Controller 88 . These requests may have very different profiles in terms of memory usage and algorithmic timing requirements.
- a VLIW process may be processing an image in linear memory, and lookup a value in a table for each value in the image. There is little need to cache much of the image, but it may be desirable to cache the entire lookup table so that no real memory access is required. Because of these differing requirements, the Data cache 76 allows for an intelligent definition of caching. Although the Rambus DRAM interface 81 is capable of very high-speed memory access (an average throughput of 32 bytes in 25 ns), it is not efficient dealing with single byte requests. In order to reduce effective memory latency, the ACP 31 contains 128 cache lines. Each cache line is 32 bytes wide. Thus the total amount of data cache 76 is 4096 bytes (4 KB).
- the 128 cache lines are configured into 16 programmable-sized groups. Each of the 16 groups must be a contiguous set of cache lines.
- the CPU is responsible for determining how many cache lines to allocate to each group. Within each group cache lines are filled according to a simple Least Recently Used algorithm.
- the Data cache 76 handles memory access requests that have address bit 24 clear. If bit 24 is clear, the address is in the lower 16 MB range, and hence can be satisfied from DRAM and the Data cache 76 . In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcam. If bit 24 is set, the address is ignored by the Data cache 76 . All CPU data requests are satisfied from Cache Group 0 .
- a minimum of 16 cache lines is recommended for good CPU performance, although the CPU can assign any number of cache lines (except none) to Cache Group 0 .
- the remaining Cache Groups ( 1 to 15 ) are allocated according to the current requirements. This could mean allocation to a VLIW Vector Processor 74 program or the Display Controller 88 . For example, a 256 byte lookup table required to be permanently available would require 8 cache lines. Writing out a sequential image would only require 2-4 cache lines (depending on the size of record being generated and whether write requests are being Write Delayed for a significant number of cycles).
- Associated with each cache line byte is a dirty bit, used for creating a Write Mask when writing memory to DRAM.
- a total of 8 buses 182 connect the VLIW Vector Processor 74 to the Data cache 76 . Each bus is connected to an I/O Address Generator.
- the CPU is responsible for ensuring that the Cache Groups have been allocated the correct number of cache lines, and that the various Address Generators 189 , 190 in the VLIW Vector Processor 74 reference the specific Cache Groups correctly.
- the Data cache 76 as described allows for the Display Controller 88 and VLIW Vector Processor 74 to be active simultaneously. If the operation of these two components were deemed to never occur simultaneously, a total 9 Cache Groups would suffice.
- the CPU would use Cache Group 0 , and the VLIW Vector Processor 74 and the Display Controller 88 would share the remaining 8 Cache Groups, requiring only 3 bits (rather than 4) to define which Cache Group would satisfy a particular request.
- JTAG Interface 85 A standard JTAG (Joint Test Action Group) Interface is included in the ACP 31 for testing purposes. Due to the complexity of the chip, a variety of testing techniques are required, including BIST (Built In Self Test) and functional block isolation. An overhead of 10% in chip area is assumed for overall chip testing circuitry. The test circuitry is beyond the scope of this document. Serial Interfaces USB Serial Port Interface 52 This is a standard USB serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it.
- Keyboard Interface 65 This is a standard low-speed serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it. It is designed to be optionally connected to a keyboard to allow simple data input to customize prints.
- Authentication Chip Serial Interfaces 64 These are 2 standard low-speed serial ports, which are connected to the internal chip low speed bus, thereby allowing the CPU to control them. The reason for having 2 ports is to connect to both the on-camera Authentication chip, and to the print-roll Authentication chip using separate lines. Only using I line may make it possible for a clone print-roll manufacturer to design a chip which, instead of generating an authentication code, tricks the camera into using the code generated by the authentication chip in the camera.
- Parallel Interface 67 The parallel interface connects the ACP 31 to individual static electrical signals. The CPU is able to control each of these connections as memory-mapped I/O via the low speed bus The following table is a list of connections to the parallel interface:
- VLIW Input and Output FIFOs are 8 bit wide FIFOs used for communicating between processes and the VLIW Vector Processor 74 . Both FIFOs are under the control of the VLIW Vector Processor 74 , but can be cleared and queried (e.g. for status) etc by the CPU.
- VLIW Input FIFO 78 A client writes 8-bit data to the VLIW Input FIFO 78 in order to have the data processed by the VLIW Vector Processor 74 .
- Clients include the Image Sensor Interface, Artcard Interface, and CPU. Each of these processes is able to offload processing by simply writing the data to the FIFO, and letting the VLIW Vector Processor 74 do all the hard work.
- An example of the use of a client's use of the VLIW Input FIFO 78 is the Image Sensor Interface (ISI 83 ).
- the ISI 83 takes data from the Image Sensor and writes it to the FIFO.
- a VLIW process takes it from the FIFO, transforming it into the correct image data format, and writing it out to DRAM.
- VLIW Output FIFO 79 The VLIW Vector Processor 74 writes 8-bit data to the VLIW Output FIFO 79 where clients can read it. Clients include the Print Head Interface and the CPU. Both of these clients is able to offload processing by simply reading the already processed data from the FIFO, and letting the VLIW Vector Processor 74 do all the hard work. The CPU can also be interrupted whenever data is placed into the VLIW Output FIFO 79 , allowing it to only process the data as it becomes available rather than polling the FIFO continuously.
- An example of the use of a client's use of the VLIW Output FIFO 79 is the Print Head Interface (PHI 62 ).
- VLIW Process takes an image, rotates it to the correct orientation, color converts it, and dithers the resulting image according to the print head requirements.
- the PHI 62 reads the dithered formatted 8-bit data from the VLIW Output FIFO 79 and simply passes it on to the Print Head external to the ACP 31 .
- the PHI 62 becomes much simpler as a result.
- VLIW Vector Processor 74 To achieve the high processing requirements of Artcam, the ACP 31 contains a VLIW (Very Long Instruction Word) Vector Processor.
- the VLIW processor is a set of 4 identical Processing Units (PU e.g 178 ) working in parallel, connected by a crossbar switch 183 .
- Each PU e.g 178 can perform four 8-bit multiplications, eight 8-bit additions, three 32-bit additions, I/O processing, and various logical operations in each cycle.
- the PUs e.g 178 are microcoded, and each has two Address Generators 189 , 190 to allow full use of available cycles for data processing.
- the four PUs e.g 178 are normally synchronized to provide a tightly interacting VLIW processor. Clocking at 200 MHz, the VLIW Vector Processor 74 runs at 12 Gops (12 billion operations per second). Instructions are tuned for image processing functions such as warping, artistic brushing, complex synthetic illumination, color transforms, image filtering, and compositing. These are accelerated by two orders of magnitude over desktop computers.
- the VLIW Vector Processor 74 is 4 PUs e.g 178 connected by a crossbar switch 183 such that each PU e.g 178 provides two inputs to, and takes two outputs from, the crossbar switch 183 .
- Two common registers form a control and synchronization mechanism for the PUs e.g 178 .
- 8 Cache buses 182 allow connectivity to DRAM via the Data cache 76 , with 2 buses going to each PU e.g 178 (1 bus per I/O Address Generator).
- Each PU e.g 178 consists of an ALU 188 (containing a number of registers & some arithmetic logic for processing data), some microcode RAM 196 , and connections to the outside world (including other ALUs).
- a local PU state machine runs in microcode and is the means by which the PU e.g 178 is controlled.
- Each PU e.g 178 contains two I/O Address Generators 189 , 190 controlling data flow between DRAM (via the Data cache 76 ) and the ALU 188 (via Input FIFO and Output FIFO).
- the address generator is able to read and write data (specifically images in a variety of formats) as well as tables and simulated FIFOs in DRAM.
- the formats are customizable under software control, but are not microcoded.
- Data taken from the Data cache 76 is transferred to the ALU 188 via the 16-bit wide Input FIFO.
- Output data is written to the 16-bit wide Output FIFO and from there to the Data cache 76 .
- all PUs e.g 178 share a single 8-bit wide VLIW Input FIFO 78 and a single 8-bit wide VLIW Output FIFO 79 .
- the low speed data bus connection allows the CPU to read and write registers in the PU e.g 178 , update microcode, as well as the common registers shared by all PUs e.g 178 in the VLIW Vector Processor 74 .
- Microcode Each PU e.g 178 contains a microcode RAM 196 to hold the program for that particular PU e.g 178 . Rather than have the microcode in ROM, the microcode is in RAM, with the CPU responsible for loading it up. For the same space on chip, this tradeoff reduces the maximum size of any one function to the size of the RAM, but allows an unlimited number of functions to be written in microcode. Functions implemented using microcode include Vark acceleration, Artcard reading, and Printing.
- the VLIW Vector Processor 74 scheme has several advantages for the case of the ACP 31 :
- the total microcode RAM 196 per PU e.g 178 is 12,288 bits, or 1.5 KB exactly. Since the VLIW Vector Processor 74 consists of 4 identical PUs e.g 178 this equates to 6,144 bytes, exactly 6 KB. Some of the bits in a microcode word are directly used as control bits, while others are decoded. See the various unit descriptions that detail the interpretation of each of the bits of the microcode word.
- Each PU e.g 178 contains a 4 bit Synchronization Register 197 . It is a mask used to determine which PUs e.g 178 work together, and has one bit set for each of the corresponding PUs e.g 178 that are functioning as a single process. For example, if all of the PUs e.g 178 were functioning as a single process, each of the 4 Synchronization Register 197 s would have all 4 bits set.
- Synchronization Register 197 is used in two basic ways:
- FIG. 5 illustrates the ALU 188 in more detail. Inside the ALU 188 are a number of specialized processing blocks, controlled by a microcode program.
- the specialized processing blocks include:
- Out 208 Complementing In is Out 208 .
- the Out block is illustrated in more detail in FIG. 7 .
- Out contains two registers, Out 1 and Out 2 , both of which are output to the external crossbar each cycle for use by other PUs e.g 178 .
- the Write unit is also able to write one of Out 1 or Out 2 to one of the output FIFOs attached to the ALU 188 .
- both registers are available as inputs to Crossbar 1 213 , which therefore makes the register values available as inputs to other units within the ALU 188 .
- Each cycle either of the two registers can be updated according to microcode selection.
- the data loaded into the specified register can be one of D 0 -D 3 (selected from Crossbar 1 213 ) one of M, L, S, and R (selected from Crossbar 2 214 ), one of 2 programmable constants, or the fixed values 0 or 1.
- the microcode for Out takes the following form:
- Crossbar 1 213 is illustrated in more detail in FIG. 9 .
- Crossbar 1 213 is used to select from inputs In 1 , In 2 , Out 1 , Out 2 , D 0 -D 3 .
- Crossbar 1 213 : 3 to the Multiply/Interpolate Unit, 2 to the Adder Unit, 1 to the Registers unit and 1 to the Out unit.
- the control signals for Crossbar 1 213 come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar 1 213 .
- Crossbar 2 214 Crossbar 2 214 is illustrated in more detail in FIG. 10 .
- Crossbar 2 214 is used to select from the general ALU 188 registers M, L, S and R. 6 outputs are generated from Crossbar 1 213 : 2 to the Multiply/Interpolate Unit, 2 to the Adder Unit, 1 to the Registers unit and 1 to the Out unit.
- the control signals for Crossbar 2 214 come from the various units that use the Crossbar inputs. There is no specific microcode that is separate for Crossbar 2 214 .
- Data Transfers Between PUs e.g 178 and DRAM or External Processes Returning to FIG. 4 , PUs e.g 178 share data with each other directly via the external crossbar. They also transfer data to and from external processes as well as DRAM.
- Each PU e.g 178 has 2 I/O Address Generators 189 , 190 for transferring data to and from DRAM.
- a PU e.g 178 can send data to DRAM via an I/O Address Generator's Output FIFO e.g.
- the Read process block 202 of FIG. 1 receives data from DRAM via an I/O Address Generator's Input FIFO 187 .
- These FIFOs are local to the PU e.g 178 .
- the VLIW Input and Output FIFOs are only 8 bits wide, and are used for printing, Artcard reading, transferring data to the CPU etc.
- the local Input and Output FIFOs are 16 bits wide. Read The Read process block 202 of FIG.
- the Read Unit 5 is responsible for updating the ALU 188 's R register 209 , which represents the external input data to a VLIW microcoded process.
- Each cycle the Read Unit is able to read from either the common VLIW Input FIFO 78 (8 bits) or one of two local Input FIFOs (16 bits).
- a 32-bit value is generated, and then all or part of that data is transferred to the R register 209 .
- the process can be seen in FIG. 11 .
- the microcode for Read is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- Each ALU 188 has two computational process blocks, namely an Adder/Logic process block 204 , and a Multiply/Interpolate process block 205 . In addition there is a Barrel Shifter block to provide help to these computational blocks.
- Barrel Shifter The Barrel Shifter process block 206 is shown in more detail in FIG. 13 and takes its input from the output of Adder/Logic or Multiply/Interpolate process blocks or the previous cycle's results from those blocks (ALU registers L and M). The 32 bits selected are barrel shifted an arbitrary number of bits in either direction (with sign extension as necessary), and output to the ALU 188 's S register 209 .
- the microcode for the Barrel Shift process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- a and B are selected from either of the two crossbars or from the 4 constant registers.
- One crossbar selection allows the results of the previous cycle's arithmetic operation to be used while the second provides access to operands previously calculated by this or another ALU 188 .
- the CPU is the only unit that has write access to the four constants (K 1 -K 4 ).
- the direct output from the adder can be used as input to the Barrel Shifter, and can thus be shifted left 2 places without needing to be latched into the L register 209 first.
- the output from the adder can also be made available to the multiply unit for a multiply-accumulate operation.
- the microcode for the Adder/Logic process block is described in the following table. The interpretations of some bit patterns are deliberately chosen to aid decoding. Microcode bit interpretation for Adder/Logic unit
- ALU 188 is a set of four 8 ⁇ 8 interpolator units that are capable of performing four individual 8 ⁇ 8 interpolates per cycle, or can be combined to perform a single 16 ⁇ 16 multiply. This gives the possibility to perform up to 4 linear interpolations, a single bi-linear interpolation, or half of a tri-linear interpolation in a single cycle.
- the result of the interpolations or multiplication is stored in the ALU 188 's M register 209 .
- a and B are treated as four 8 bit numbers A 0 thru A 3 (A 0 is the low order byte), and B 0 thru B 3 .
- Agen, Bgen, and Fgen are responsible for ordering the inputs to the Interpolate units so that they match the operation being performed. For example, to perform bilinear interpolation, each of the 4 values must be multiplied by a different factor & the result summed, while a 16 ⁇ 16 bit multiplication requires the factors to be 0.
- the microcode for the Adder/Logic process block is described in the following table. Note that the interpretations of some bit patterns are deliberately chosen to aid decoding.
- I/O Address GeneratorS 189 , 190 The I/O Address Generators are shown in more detail in FIG. 16 .
- a VLIW process does not access DRAM directly. Access is via 2 I/O Address Generators 189 , 190 , each with its own Input and Output FIFO.
- a PU e.g 178 reads data from one of two local Input FIFOs, and writes data to one of two local Output FIFOs.
- Each I/O Address Generator is responsible for reading data from DRAM and placing it into its Input FIFO, where it can be read by the PU e.g 178 , and is responsible for taking the data from its Output FIFO (placed there by the PU e.g 178 ) and writing it to DRAM.
- the I/O Address Generator is a state machine responsible for generating addresses and control for data retrieval and storage in DRAM via the Data cache 76 . It is customizable under CPU software control, but cannot be microcoded.
- the address generator produces addresses in two broad categories:
- CacheGroup1 4 Defines cache group to read data from CacheGroup2 4 Defines which cache group to write data to, and in the case of the ImagePyramidLookup I/O mode, defines the cache to use for reading the Level Information Table.
- Image Iterators Sequential Automatic Access to Pixels The primary image pixel access method for software and hardware algorithms is via Image Iterators. Image iterators perform all of the addressing and access to the caches of the pixels within an image channel and read, write or read & write pixels for their client. Read Iterators read pixels in a specific order for their clients, and Write Iterators write pixels in a specific order for their clients.
- Clients of Iterators read pixels from the local Input FIFO or write pixels via the local Output FIFO.
- Read Image Iterators read through an image in a specific order, placing the pixel data into the local Input FIFO. Every time a client reads a pixel from the Input FIFO, the Read Iterator places the next pixel from the image (via the Data cache 76 ) into the FIFO.
- Write Image Iterators write pixels in a specific order to write out the entire image. Clients write pixels to the Output FIFO that is in turn read by the Write Image Iterator and written to DRAM via the Data cache 76 .
- a VLIW process will have its input tied to a Read Iterator, and output tied to a corresponding Write Iterator.
- the FIFO is the effective interface to DRAM. The actual method of carrying out the storage (apart from the logical ordering of the data) is not of concern.
- the FIFO is perceived to be effectively unlimited in length, in practice the FIFO is of limited length, and there can be delays storing and retrieving data, especially if several memory accesses are competing.
- a variety of Image Iterators exist to cope with the most common addressing requirements of image processing algorithms. In most cases there is a corresponding Write Iterator for each Read Iterator. The different Iterators are listed in the following table:
- the Access Specific registers are used as follows:
- AccessSpecific 1 Flags Flags used for reading and writing AccessSpecific 2 XBoxSize Determines the size in X of Box Read. Valid values are 3, 5, and 7.
- AccessSpecific 3 YBoxSize Determines the size in Y of Box Read. Valid values are 3, 5, and 7.
- the Flags register (AccessSpecific 1 ) contains a number of flags used to determine factors affecting the reading and writing of data.
- the Flags register has the following composition:
- Table I/O addressing modes provide this functionality, requiring the client to place the index/es into the Output FIFO.
- the I/O Address Generator then processes the index/es, looks up the data appropriately, and returns the looked-up values in the Input FIFO for subsequent processing by the VLIW client.
- 1D, 2D and 3D tables are supported, with particular modes targeted at interpolation.
- the index values are treated as fixed-point numbers, with AccessSpecific registers defining the fixed point and therefore which bits should be treated as the integer portion of the index.
- Data formats are restricted forms of the general Image Characteristics in that the PixelOffset register is ignored, the data is assumed to be contiguous within a row, and can only be 8 or 16 bits (1 or 2 bytes) per data element.
- the 4 bit Address Mode Register is used to determine the I/O type:
- the access specific registers are:
- AccessSpecific 1 Flags 8 General flags for reading and writing. See below for more information.
- FractX, FractY, and FractZ are used to generate addresses based on indexes, and interpret the format of the index in terms of significant bits and integer/fractional components.
- the various parameters are only defined as required by the number of dimensions in the table being indexed.
- a 1D table only needs FractX, a 2D table requires FractX and FractY.
- Each Fract_ value consists of the number of fractional bits in the corresponding index.
- an X index may be in the format 5:3. This would indicate 5 bits of integer, and 3 bits of fraction. FractX would therefore be set to 3.
- a simple 1D lookup could have the format 8:0, i.e. no fractional component at all. FractX would therefore be 0.
- ZOffset is only required for 3D lookup and takes on two different interpretations. It is described more fully in the 3D-table lookup section.
- the Flags register (AccessSpecific 1 ) contains a number of flags used to determine factors affecting the reading (and in one case, writing) of data.
- the Flags register has the following composition:
- Adr Adr + 2 2
- Adr AdrOld + RowOffset 3
- Adr Adr + 2 4 ⁇ preparing next lookup>
- the first cycle of address generation can overlap the insertion of the X index into the FIFO, so the effective timing can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (2 or 4 cycles per set).
- 3 Dimensional Lookup Direct Lookup Since all cases of 2D lookups are expected to be accessed for tri-linear interpolation, two special tri-linear lookups have been implemented.
- the first is a straightforward lookup table, while the second is for tri-linear interpolation from an Image Pyramid.
- Tri-Linear Lookup This type of lookup is useful for 3D tables of data, such as color conversion tables.
- the standard image parameters define a single XY plane of the data—i.e. each plane consists of ImageHeight rows, each row containing RowOffset bytes. In most circumstances, assuming contiguous planes, one XY plane will be ImageHeight ⁇ RowOffset bytes after another. Rather than assume or calculate this offset, the software via the CPU must provide it in the form of a 12-bit ZOffset register. In this form of lookup, given 3 fixed-point indexes in the order Z, Y, X, 8 values are returned in order from the lookup table:
- Adr Adr + RowOffset 2
- Adr AdrOld + ZOffset 3
- Adr Adr + RowOffset 4 ⁇ preparing next lookup>
- Adr Adr + 2 2
- Adr AdrOld + RowOffset 3
- Adr Adr + 2 4
- Adr Adr + 2 6
- Adr AdrOld + RowOffset 7
- Adr Adr + 2 8 ⁇ preparing next lookup>
- the cycles of address generation can overlap the insertion of the indexes into the FIFO, so the effective timing for a single one-off lookup can be as low as 1 cycle for address generation, and 4 cycles of return data.
- Image Pyramid Lookup During brushing, tiling, and warping it is necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid.
- the description and construction of an image pyramid is detailed in the section on Internal Image Formats in the DRAM interface 81 chapter of this document. This section is concerned with a method of addressing given pixels in the pyramid in terms of 3 fixed-point indexes ordered: level (Z), Y, and X. Note that Image Pyramid lookup assumes 8 bit data entries, so the DataSize flag is completely ignored. After specification of Z, Y, and X, the following 8 pixels are returned via the Input FIFO:
- Some cycles have 2 shifts, they are either the same shift value (i.e. the output of the Barrel Shifter is used two times) or the shift is 1 bit, and can be hard wired.
- the following internal registers are required: ZAdr, Adr, ZInt, YInt, XInt, ZRowOffset, and ZImageStart.
- the _Int registers only need to be 8 bits maximum, while the others can be up to 24 bits. Since this access method only reads from, and does not write to image pyramids, the CacheGroup 2 is used to lookup the Image Pyramid Address Table (via ZAdr). CacheGroup 1 is used for lookups to the image pyramid itself (via Adr).
- the address table is around 22 entries (depending on original image size), each of 4 bytes. Therefore 3 or 4 cache lines should be allocated to CacheGroup 2 , while as many cache lines as possible should be allocated to CacheGroup 1 .
- the timing is 8 cycles for returning a set of data, assuming that Cycle 8 and Cycle 0 overlap in operation—i.e. the next request's Cycle 0 occurs during Cycle 8. This is acceptable since Cycle 0 has no memory access, and Cycle 8 has no specific operations.
- Generation of Coordinates Using VLIW Vector Processor 74 Some functions that are linked to Write Iterators require the X and/or Y coordinates of the current pixel being processed in part of the processing pipeline. Particular processing may also need to take place at the end of each row, or column being processed.
- the PassX and PassY flags should be sufficient to completely generate all coordinates.
- the following functions can be used.
- the calculation can be spread over a number of ALUs, for a single cycle generation, or be in a single ALU 188 for a multi-cycle generation.
- Generate Sequential [X, Y] When a process is processing pixels in sequential order according to the Sequential Read Iterator (or generating pixels and writing them out to a Sequential Write Iterator), the following process can be used to generate X, Y coordinates instead of PassX/PassY flags as shown in FIG. 23 .
- the coordinate generator counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate.
- the actual process is illustrated in FIG. 24 , where the following constants are set by software:
- Reg 1 StartX (starts at 0, and is incremented by 32 once per vertical strip)
- Reg 2 X
- Reg 3 EndX (starts at 32 and is incremented by 32 to a maximum of ImageWidth) once per vertical strip)
- Reg 4 Y The requirements are summarized as follows:
- the ISI 83 is a state machine that sends control information to the Image Sensor, including frame sync pulses and pixel clock pulses in order to read the image. Pixels are read from the image sensor and placed into the VLIW Input FIFO 78 . The VLIW is then able to process and/or store the pixels. This is illustrated further in FIG. 28 .
- the ISI 83 is used in conjunction with a VLIW program that stores the sensed Photo Image in DRAM. Processing occurs in 2 steps:
- the DRAM Interface 81 is responsible for interfacing between other client portions of the ACP chip and the RAMBUS DRAM.
- each module within the DRAM Interface is an address generator.
- Print Image the Output Image format printed by the Artcam
- CMOS images are typically different in color space, resolution, and the output & input color spaces which can vary from camera to camera.
- a CCD image on a low-end camera may be a different resolution, or have different color characteristics from that used in a high-end camera.
- all internal image formats are the same format in terms of color space across all cameras.
- the three image types can vary with respect to which direction is ‘up’.
- the physical orientation of the camera causes the notion of a portrait or landscape image, and this must be maintained throughout processing. For this reason, the internal image is always oriented correctly, and rotation is performed on images obtained from the CCD and during the print operation.
- a CCD Image as stored in DRAM has consecutive pixels with a given line contiguous in memory. Each line is stored one after the other.
- the image sensor Interface 83 is responsible for taking data from the CCD and storing it in the DRAM correctly oriented.
- a CCD image with rotation 0 degrees has its first line G, R, G, R, G, R . . . and its second line as B, G, B, G, B, G . . . .
- the first line will be R, G, R, G, R, G and the second line G, B, G, B, G, B . . . etc.
- Pixels are stored in an interleaved fashion since all color components are required in order to convert to the internal image format.
- the ACP 31 makes no assumptions about the CCD pixel format, since the actual CCDs for imaging may vary from Artcam to Artcam, and over time. All processing that takes place via the hardware is controlled by major microcode in an attempt to extend the usefulness of the ACP 31 .
- Vark images typically consist of a number of channels. Vark images can include, but are not limited to:
- L, a and b correspond to components of the Lab color space
- ⁇ is a matte channel (used for compositing)
- ⁇ is a bump-map channel (used during brushing, tiling and illuminating).
- the VLIW processor 74 requires images to be organized in a planar configuration. Thus a Lab image would be stored as 3 separate blocks of memory:
- pixels are stored contiguously for a given row (plus some optional padding bytes), and rows are stored one after the other.
- FIG. 31 there is illustrated an example form of storage of a logical image 100 .
- the logical image 100 is stored in a planar fashion having L 101 , a 102 and b 103 color components stored one after another.
- the logical image 100 can be stored in a compressed format having an uncompressed L component 101 and compressed A and B components 105 , 106 .
- the pixels of for line n 110 are stored together before the pixels of for line and n+1 ( 111 ). With the image being stored in contiguous memory within a single channel.
- the final Print Image after all processing is finished needs to be compressed in the chrominance channels.
- Compression of chrominance channels can be 4:1, causing an overall compression of 12:6, or 2:1.
- Clip images stored on Artcards have no explicit support by the ACP 31 .
- Software is responsible for taking any images from the current Artcard and organizing the data into a form known by the ACP. If images are stored compressed on an Artcard, software is responsible for decompressing them, as there is no specific hardware support for decompression of Artcard images.
- an image pyramid is effectively a multi-resolutionpixel-map.
- the original image 115 is a 1:1 representation.
- Low-pass filtering and sub-sampling by 2:1 in each dimension produces an image 1 ⁇ 4 the original size 116 . This process continues until the entire image is represented by a single pixel.
- An image pyramid is constructed from an original internal format image, and consumes 1 ⁇ 3 of the size taken up by the original image (1 ⁇ 4+ 1/16+ 1/64+ . . . ). For an original image of 1500 ⁇ 1000 the corresponding image pyramid is approximately 1 ⁇ 2 MB.
- An image pyramid is constructed by a specific Vark function, and is used as a parameter to other Vark functions.
- the Print Image output can comprise a CMY dithered image and is only a transient image format, used within the Print Image functionality.
- color conversion will need to take place from the internal color space to the print color space.
- color conversion can be tuned to be different for different print rolls in the camera with different ink characteristics e.g. Sepia output can be accomplished by using a specific sepia toning Artcard, or by using a sepia tone print-roll (so all Artcards will work in sepia tone).
- the ACP has no direct knowledge of specific color spaces. Instead, it relies on client color space conversion tables to convert between CCD, internal, and printer color spaces:
- Register Name Description NumPixels The number of pixels in a sensor line (approx 11,000) Status The Print Head Interface's Status Register PixelsRemaining The number of bytes remaining in the current line Actions Reset A write to this register resets the AI, stops any scanning, and loads all registers with 0. Scan A write to this register with a non-zero value sets the Scanning bit of the Status register, and causes the Artcard Interface Scan cycle to start. A write to this register with 0 stops the scanning process and clears the Scanning bit in the Status register. The Scan cycle causes the AI to transfer NumPixels bytes from the sensor to the VLIW Input FIFO 78, producing the PixelClock signals appropriately.
- the PixelsRemaining register holds the number of pixels remaining to be read on the current scanline. Note that the CPU should clear the VLIW Input FIFO 78 before initiating a Scan.
- the Status register has bit interpretations as follows:
- the Artcard Interface (AI) 87 is responsible for taking an Artcard image from the Artcard Reader 34 , and decoding it into the original data (usually a Vark script). Specifically, the AI 87 accepts signals from the Artcard scanner linear CCD 34 , detects the bit pattern printed on the card, and converts the bit pattern into the original data, correcting read errors.
- the image printed from an Artcam is simply the sensed Photo Image cleaned up by any standard image processing routines.
- the Artcard 9 is the means by which users are able to modify a photo before printing it out.
- a user is able to define complex image processing to be performed on the Photo Image.
- the Print Image is marked as invalid and a ‘Process Standard’ event is placed in the event queue.
- the event will perform the standard image processing operations on the Photo Image to produce the Print Image.
- the motor is started to eject the Artcard and a time-specific ‘Stop-Motor’ Event is added to the event queue.
- the Artcard Sensor 49 detects it notifying the ACP72. This results in the software inserting an ‘Artcard Inserted’ event into the event queue. When the event is processed several things occur:
- the current Artcard is marked as invalid (as opposed to ‘none’).
- the Print Image is marked as invalid.
- the Artcard motor 37 is started up to load the Artcard
- the Artcard Interface 87 is instructed to read the Artcard
- the Artcard Interface 87 accepts signals from the Artcard scanner linear CCD 34 , detects the bit pattern printed on the card, and corrects errors in the detected bit pattern, producing a valid Artcard data block in DRAM.
- the Data Card reading process has 4 phases operated while the pixel data is read from the card.
- the phases are as follows:
- Phase 2 Detect bit pattern from Artcard based on CCD pixels, and write as bytes.
- the Artcard 9 must be sampled at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this.
- the pixels are sampled 230 at 3 times the resolution of a printed dot in each dimension, requiring 9 pixels to define a single dot.
- the resolution of the Artcard 9 is 1600 dpi
- the resolution of the sensor 34 is 4800 dpi
- a dot is not exactly aligned with the sampling CCD the worst and most likely case is that a dot will be sensed over a 16 pixel area (4 ⁇ 4) 231.
- An Artcard 9 may be slightly warped due to heat damage, slightly rotated (up to, say 1 degree) due to differences in insertion into an Artcard reader, and can have slight differences in true data rate due to fluctuations in the speed of the reader motor 37 . These changes will cause columns of data from the card not to be read as corresponding columns of pixel data. As illustrated in FIG. 36 , a 1 degree rotation in the Artcard 9 can cause the pixels from a column on the card to be read as pixels across 166 columns:
- the Artcard 9 should be read in a reasonable amount of time with respect to the human operator.
- the data on the Artcard covers most of the Artcard surface, so timing concerns can be limited to the Artcard data itself. A reading time of 1.5 seconds is adequate for Artcard reading.
- the Artcard should be loaded in 1.5 seconds. Therefore all 16,000 columns of pixel data must be read from the CCD 34 in 1.5 second, i.e. 10,667 columns per second. Therefore the time available to read one column is 1/10667 seconds, or 93,747 ns. Pixel data can be written to the DRAM one column at a time, completely independently from any processes that are reading the pixel data.
- the time to write one column of data (9450/2 bytes since the reading can be 4 bits per pixel giving 2 ⁇ 4 bit pixels per byte) to DRAM is reduced by using 8 cache lines. If 4 lines were written out at one time, the 4 banks can be written to independently, and thus overlap latency reduced. Thus the 4725 bytes can be written in 11,840 ns (4725/128*320 ns). Thus the time taken to write a given column's data to DRAM uses just under 13% of the available bandwidth.
- the old stored Print Image and any expanded Photo Image becomes invalid.
- the new Artcard 9 can contain directions for creating a new image based on the currently captured Photo Image.
- the old Print Image is invalid, and the area holding expanded Photo Image data and image pyramid is invalid, leaving more than 5 MB that can be used as scratch memory during the read process.
- the 1 MB area where the Artcard raw data is to be written can also be used as scratch data during the Artcard read process as long as by the time the final Reed-Solomon decode is to occur, that 1 MB area is free again.
- the reading process described here does not make use of the extra 1 MB area (except as a final destination for the data).
- the unscrambling process requires two sets of 2 MB areas of memory since unscrambling cannot occur in place. Fortunately the 5 MB scratch area contains enough space for this process.
- FIG. 37 there is shown a flowchart 220 of the steps necessary to decode the Artcard data. These steps include reading in the Artcard 221 , decoding the read data to produce corresponding encoded XORed scrambled bitmap data 223 . Next a checkerboard XOR is applied to the data to produces encoded scrambled data 224 . This data is then unscrambled 227 to produce data 225 before this data is subjected to Reed-Solomon decoding to produce the original raw data 226 . Alternatively, unscrambling and XOR process can take place together, not requiring a separate pass of the data. Each of the above steps is discussed in further detail hereinafter. As noted previously with reference to FIG. 37 , the Artcard Interface, therefore, has 4 phases, the first 2 of which are time-critical, and must take place while pixel data is being read from the CCD:
- Phase 2 Detect bit pattern from Artcard based on CCD pixels, and write as bytes.
- Phase 1 As the Artcard 9 moves past the CCD 34 the AI must detect the start of the data area by robustly detecting special targets on the Artcard to the left of the data area. If these cannot be detected, the card is marked as invalid. The detection must occur in real-time, while the Artcard 9 is moving past the CCD 34 .
- rotation invariance can be provided.
- the targets are repeated on the right side of the Artcard, but relative to the bottom right corner instead of the top corner. In this way the targets end up in the correct orientation if the card is inserted the “wrong” way.
- Phase 3 below can be altered to detect the orientation of the data, and account for the potential rotation.
- the main read process begins, placing pixel data from the CCD into an “Artcard data window”, detecting bits from this window, assembling the detected bits into bytes, and constructing a byte-image in DRAM. This must all be done while the Artcard is moving past the CCD.
- Phase 3 Once all the pixels have been read from the Artcard data area, the Artcard motor 37 can be stopped, and the byte image descrambled and XORed. Although not requiring real-time performance, the process should be fast enough not to annoy the human operator. The process must take 2 MB of scrambled bit-image and write the unscrambled/XORed bit-image to a separate 2 MB image.
- Phase 4 The final phase in the Artcard read process is the Reed-Solomon decoding process, where the 2 MB bit-image is decoded into a 1 MB valid Artcard data area. Again, while not requiring real-time performance it is still necessary to decode quickly with regard to the human operator. If the decode process is valid, the card is marked as valid. If the decode failed, any duplicates of data in the bit-image are attempted to be decoded, a process that is repeated until success or until there are no more duplicate images of the data in the bit image.
- the four phase process described requires 4.5 MB of DRAM. 2 MB is reserved for Phase 2 output, and 0.5 MB is reserved for scratch data during phases 1 and 2. The remaining 2 MB of space can hold over 440 columns at 4725 byes per column. In practice, the pixel data being read is a few columns ahead of the phase 1 algorithm, and in the worst case, about 180 columns behind phase 2, comfortably inside the 440 column limit.
- This phase is concerned with robustly detecting the left-hand side of the data area on the Artcard 9 .
- Accurate detection of the data area is achieved by accurate detection of special targets printed on the left side of the card. These targets are especially designed to be easy to detect even if rotated up to 1 degree.
- FIG. 38 there is shown an enlargement of the left hand side of an Artcard 9 .
- the side of the card is divided into 16 bands, 239 with a target eg. 241 located at the center of each band.
- the bands are logical in that there is no line drawn to separate bands.
- FIG. 39 there is shown a single target 241 .
- the target 241 is a printed black square containing a single white dot. The idea is to detect firstly as many targets 241 as possible, and then to join at least 8 of the detected white-dot locations into a single logical straight line. If this can be done, the start of the data area 243 is a fixed distance from this logical line. If it cannot be done, then the card is rejected as invalid.
- the height of the card 9 is 3150 dots.
- a target (Target 0 ) 241 is placed a fixed distance of 24 dots away from the top left corner 244 of the data area so that it falls well within the first of 16 equal sized regions 239 of 192 dots (576 pixels) with no target in the final pixel region of the card.
- the target 241 must be big enough to be easy to detect, yet be small enough not to go outside the height of the region if the card is rotated 1 degree.
- a suitable size for the target is a 31 ⁇ 31 dot (93 ⁇ 93 sensed pixels) black square 241 with the white dot 242 .
- the black part of the rectangle is 57 pixels high (19 dots) we can be sure that at least 9.5 black pixels will be read in the same column by the CCD (worst case is half the pixels are in one column and half in the next).
- 31 dots is 91 pixels, which at most suffers a 3 pixel shift in column, easily within the 576 pixel band.
- each target is a block of 31 ⁇ 31 dots (93 ⁇ 93 pixels) each with the composition:
- Targets are detected by reading columns of pixels, one column at a time rather than by detecting dots. It is necessary to look within a given band for a number of columns consisting of large numbers of contiguous black pixels to build up the left side of a target. Next, it is expected to see a white region in the center of further black columns, and finally the black columns to the left of the target center.
- Each logical read fills 4 cache lines via 4 sub-reads while the other 4 cache-lines are being used. This effectively uses up 13% of the available DRAM bandwidth.
- the detection mechanism FIFO for detecting the targets uses a filter 245 , run-length encoder 246 , and a FIFO 247 that requires special wiring of the top 3 elements (S 1 , S 2 , and S 3 ) for random access.
- the columns of input pixels are processed one at a time until either all the targets are found, or until a specified number of columns have been processed.
- the pixels are read from DRAM, passed through a filter 245 to detect a 0 or 1, and then run length encoded 246 .
- the bit value and the number of contiguous bits of the same value are placed in FIFO 247 .
- Each entry of the FIFO 249 is in 8 bits, 7 bits 250 to hold the run-length, and 1 bit 249 to hold the value of the bit detected.
- the run-length encoder 246 only encodes contiguous pixels within a 576 pixel (192 dot) region.
- the top 3 elements in the FIFO 247 can be accessed 252 in any random order.
- the run lengths (in pixels) of these entries are filtered into 3 values: short, medium, and long in accordance with the following table:
- Case 1 white long
- S2 black medium columns of Case 1s
- S3 white short probably detected the white dot in Previous 8 columns this column.
- the next were Case 1 entry will be black (or it would have been included in the white S3 entry), but the number of black pixels is in question. Need to verify by checking after the next FIFO advance (see Case 3).
- Case 3 Prev Case 2
- We have detected part of the white S3 black med dot. We expect around 3 of these, and then some more columns of Case 1.
- the following information per region band is kept:
- TargetDetected 1 bit BlackDetectCount 4 bits WhiteDetectCount 3 bits
- TargetColumnStartPixel 15 bits TargetColumn ordinate 16 bits (15:1)
- TargetRow ordinate 16 bits 15:1) TOTAL 7 bytes (rounded to 8 bytes for easy addressing)
- S2StartPixel 254 When beginning to process a given pixel column, the register value S2StartPixel 254 is reset to 0. As entries in the FIFO advance from S 2 to S 1 , they are also added 255 to the existing S2StartPixel value, giving the exact pixel position of the run currently defined in S 2 . Looking at each of the 3 cases of interest in the FIFO, S2StartPixel can be used to determine the start of the black area of a target (Cases 1 and 2), and also the start of the white dot in the center of the target (Case 3).
- An algorithm for processing columns can be as follows:
- the targets After the targets have been detected, they should be processed. All the targets may be available or merely some of them. Some targets may also have been erroneously detected.
- This phase of processing is to determine a mathematical line that passes through the center of as many targets as possible. The more targets that the line passes through, the more confident the target position has been found. The limit is set to be 8 targets. If a line passes through at least 8 targets, then it is taken to be the right one.
- the resulting algorithm takes 180 divides to calculate ⁇ row and ⁇ column, 180 multiply/adds to calculate target 0 position, and then 2880 adds/comparisons.
- Step 0 Locate the Data Area
- TargetA From Target 0 ( 241 of FIG. 38 ) it is a predetermined fixed distance in rows and columns to the top left border 244 of the data area, and then a further 1 dot column to the vertical clock marks 276 . So we use TargetA, ⁇ row and ⁇ column found in the previous stage ( ⁇ row and ⁇ column refer to distances between targets) to calculate the centroid or expected location for Target 0 as described previously.
- Step 1 Write Out the Initial Centroid Deltas ( ⁇ ) and Bit History
- bit history is actually an expected bit history since it is known that to the left of the clock mark column 276 is a border column 277 , and before that, a white area.
- the bit history therefore is 011, 010, 011, 010 etc.
- Step 2 Update the Centroids Based on Actual Pixels Read.
- the bit history is set up in Step 1 according to the expected clock marks and data border.
- the actual centroids for each dot row can now be more accurately set (they were initially 0) by comparing the expected data against the actual pixel values.
- the centroid updating mechanism is achieved by simply performing step 3 of Phase 2.
- Phase 2 Detect Bit Pattern from Artcard Based on Pixels Read, and Write as Bytes.
- Step 0 Advance to the next dot column
- Step 1 Detect the top and bottom of an Artcard dot column (check clock marks)
- Step 2 Process the dot column, detecting bits and storing them appropriately
- the worst case is that we cannot process the first column until at least 165 columns have been read into DRAM. Phase 2 would therefore finish the same amount of time after the read process had terminated.
- Step 0 Advance to the Next Dot Column
- the column number is recorded in a register called CurrentColumn. Every time the sensor advances to the next dot column it is necessary to increment the CurrentColumn register. The first time it is incremented, it is incremented from ⁇ 1 to 0 (see Step 0 Phase 1).
- the CurrentColumn register determines when to terminate the read process (when reaching maxColumns), and also is used to advance the DataOut Pointer to the next column of byte information once all 8 bits have been written to the byte (once every 8 dot columns). The lower 3 bits determine what bit we're up to within the current byte. It will be the same bit being written for the whole column.
- Step 1 Detect the Top and Bottom of an Artcard Dot Column.
- dotColumnTop points to the clock mark column 276 .
- step 276 The first task will be to add the ⁇ row and ⁇ column values to dotColumnTop to arrive at the first data dot of the column.
- Step 2 Process an Artcard's Dot Column
- the pixels around the centroid need to be examined to detect the status of the dot and hence the value of the bit.
- a dot covers a 4 ⁇ 4 pixel area.
- the number of pixels required to detect the status of the dot and hence the bit value is much less than this. We only require access to 3 columns of pixel columns at any one time.
- centroids will shift 1 column every 57 pixel rows, but since a dot is 3 pixels in diameter, a given column will be valid for 171 pixel rows (3*57). As a byte contains 2 pixels, the number of bytes valid in each buffered read (4 cache lines) will be a worst case of 86 (out of 128 read).
- a dot 290 has a radius of about 1.5 pixels. Therefore the pixel 291 that holds the centroid, regardless of the actual position of the centroid within that pixel, should be 100% of the dot's value. If the centroid is exactly in the center of the pixel 291 , then the pixels above 292 & below 293 the centroid's pixel, as well as the pixels to the left 294 & right 295 of the centroid's pixel will contain a majority of the dot's value. The further a centroid is away from the exact center of the pixel 295 , the more likely that more than the center pixel will have 100% coverage by the dot.
- FIG. 42 only shows centroids differing to the left and below the center, the same relationship obviously holds for centroids above and to the right of center.
- the centroid is exactly in the center of the middle pixel 295 .
- the center pixel 295 is completely covered by the dot, and the pixels above, below, left, and right are also well covered by the dot.
- the centroid is to the left of the center of the middle pixel 291 .
- the center pixel is still completely covered by the dot, and the pixel 294 to the left of the center is now completely covered by the dot.
- the pixels above 292 and below 293 are still well covered.
- the centroid is below the center of the middle pixel 291 .
- the center pixel 291 is still completely covered by the dot 291 , and the pixel below center is now completely covered by the dot.
- the pixels left 294 and right 295 of center are still well covered.
- the centroid is left and below the center of the middle pixel.
- the center pixel 291 is still completely covered by the dot, and both the pixel to the left of center 294 and the pixel below center 293 are completely covered by the dot.
- the algorithm for updating the centroid uses the distance of the centroid from the center of the middle pixel 291 in order to select 3 representative pixels and thus decide the value of the dot:
- Pixel 1 the pixel containing the centroid
- Pixel 2 the pixel to the left of Pixel 1 if the centroid's X coordinate (column value) is ⁇ 1 ⁇ 2, otherwise the pixel to the right of Pixel 1.
- Pixel 3 the pixel above pixel 1 if the centroid's Y coordinate (row value) is ⁇ 1 ⁇ 2, otherwise the pixel below Pixel 1.
- the value of each pixel is output to a pre-calculated lookup table 301 .
- the 3 pixels are fed into a 12-bit lookup table, which outputs a single bit indicating the value of the dot—on or off.
- the lookup table 301 is constructed at chip definition time, and can be compiled into about 500 gates.
- the lookup table can be a simple threshold table, with the exception that the center pixel (Pixel 1) is weighted more heavily.
- Step 3 Update the Centroid ⁇ s for Each Row in the Column
- the idea of the ⁇ s processing is to use the previous bit history to generate a ‘perfect’ dot at the expected centroid location for each row in a current column.
- the actual pixels (from the CCD) are compared with the expected ‘perfect’ pixels. If the two match, then the actual centroid location must be exactly in the expected position, so the centroid ⁇ s must be valid and not need updating. Otherwise a process of changing the centroid ⁇ s needs to occur in order to best fit the expected centroid location to the actual data.
- the new centroid ⁇ s will be used for processing the dot in the next column.
- Step 2 of Phase 1 there is enough bandwidth remaining to allow it to allow reuse of DRAM buffers
- centroid ⁇ are processed as ⁇ column ⁇ row respectively to reduce complexity.
- centroid updating requires more than simply the information about a given single dot.
- FIG. 44 shows a single dot 310 from the previous column with a given centroid 311 .
- the 20 bit bit-pattern represents the expected ⁇ values for each of the 5 pixels across the horizontal dimension.
- the first nibble would represent the rightmost pixel of the leftmost dot.
- the next 3 nibbles represent the 3 pixels across the center of the dot 310 from the previous column, and the last nibble would be the leftmost pixel 317 of the rightmost dot (from the current column).
- the pixels to the left and right of the center dot are either 0 or D depending on whether the bit was a 0 or 1 respectively.
- the center three pixels are either 000 or DFD depending on whether the bit was a 0 or 1 respectively. These values are based on the physical area taken by a dot for a given pixel. Depending on the distance of the centroid from the exact center of the pixel, we would expect data shifted slightly, which really only affects the pixels either side of the center pixel. Since there are 16 possibilities, it is possible to divide the distance from the center by 16 and use that amount to shift the expected pixels.
- the 20 bit 5 pixel expected value can be compared against the actual pixels read. This can proceed by subtracting the expected pixels from the actual pixels read on a pixel by pixel basis, and finally adding the differences together to obtain a distance from the expected ⁇ values.
- FIG. 45 illustrates one form of implementation of the above algorithm which includes a look up table 320 which receives the bit history 322 and central fractional component 323 and outputs 324 the corresponding 20 bit number which is subtracted 321 from the central pixel input 326 to produce a pixel difference 327 .
- the 2 MB bit-image DRAM area is read from and written to during Phase 2 processing.
- the 2 MB pixel-data DRAM area is read.
- the 0.5 MB scratch DRAM area is used for storing row data, namely:
- the next step in decoding is to unscramble and XOR the raw data.
- the 2 MB byte image as taken from the Artcard, is in a scrambled XORed form. It must be unscrambled and re-XORed to retrieve the bit image necessary for the Reed Solomon decoder in phase 4.
- the unscrambling process 330 takes a 2 MB scrambled byte image 331 and writes an unscrambled 2 MB image 332 .
- the process cannot reasonably be performed in-place, so 2 sets of 2 MB areas are utilised.
- the scrambled data 331 is in symbol block order arranged in a 16 ⁇ 16 array, with symbol block 0 ( 334 ) having all the symbol 0's from all the code words in random order.
- Symbol block 1 has all the symbol 1's from all the code words in random order etc. Since there are only 255 symbols, the 256 th symbol block is currently unused.
- a linear feedback shift register is used to determine the relationship between the position within a symbol block eg. 334 and what code word eg. 355 it came from. This works as long as the same seed is used when generating the original Artcard images.
- the XOR of bytes from alternative source lines with 0xAA and 0x55 respectively is effectively free (in time) since the bottleneck of time is waiting for the DRAM to be ready to read/write to non-sequential addresses.
- This phase is a loop, iterating through copies of the data in the bit image, passing them to the Reed-Solomon decode module until either a successful decode is made or until there are no more copies to attempt decode from.
- the Reed-Solomon decoder used can be the VLIW processor, suitably programmed or, alternatively, a separate hardwired core such as LSI Logic's L64712.
- the overall time taken to read the Artcard 9 and decode it is therefore approximately 2.15 seconds.
- the apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.
- the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the ‘Print’ button 13 ( FIG. 1 ).
- the taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.
- the Alternative Artcards can be used in both embedded and PC type applications, providing a user-friendly interface to large amounts of data or configuration information.
- Alternative Artcard technology can also be independent of the printing resolution.
- the notion of storing data as dots on a card simply means that if it is possible put more dots in the same space (by increasing resolution), then those dots can represent more data.
- the preferred embodiment assumes utilisation of 1600 dpi printing on a 86 mm ⁇ 55 mm card as the sample Artcard, but it is simple to determine alternative equivalent layouts and data sizes for other card sizes and/or other print resolutions. Regardless of the print resolution, the reading technique remain the same.
- alternative Artcards are capable of storing up to 1 Megabyte of data at print resolutions up to 1600 dpi.
- Alternative Artcards can store megabytes of data at print resolutions greater than 1600 dpi.
- the following two tables summarize the effective alternative Artcard data storage capacity for certain print resolutions:
- the dots on the data side of an alternative Artcard can be monochrome. For example, black dots printed on a white background at a predetermined desired print resolution. Consequently a “black dot” is physically different from a “white dot”.
- FIG. 47 illustrates various examples of magnified views of black and white dots.
- the monochromatic scheme of black dots on a white background is preferably chosen to maximize dynamic range in blurry reading environments.
- the black dots are printed at a particular pitch (eg. 1600 dpi)
- the dots themselves are slightly larger in order to create continuous lines when dots are printed contiguously.
- the dots are not as merged as they may be in reality as a result of bleeding. There would be more smoothing out of the black indentations.
- the alternative Artcard system described in the preferred embodiment allows for flexibly different dot sizes, exact dot sizes and ink/printing behaviour for a particular printing technology should be studied in more detail in order to obtain best results.
- the term dot refers to a physical printed dot (ink, thermal, electro-photographic, silver-halide etc) on an alternative Artcard.
- the dots must be sampled at least double the printed resolution to satisfy Nyquist's Theorem.
- the term pixel refers to a sample value from an alternative Artcard reader device. For example, when 1600 dpi dots are scanned at 4800 dpi there are 3 pixels in each dimension of a dot, or 9 pixels per dot. The sampling process will be further explained hereinafter.
- each alternative Artcard consists of an “active” region 1102 surrounded by a white border region 1103 .
- the white border 1103 contains no data information, but can be used by an alternative Artcard reader to calibrate white levels.
- the active region is an array of data blocks eg. 1104 , with each data block separated from the next by a gap of 8 white dots eg. 1106 .
- the number of data blocks on an alternative Artcard will vary.
- the array can be 8 ⁇ 8.
- Each data block 1104 has dimensions of 627 ⁇ 394 dots. With an inter-block gap 1106 of 8 white dots, the active area of an alternative Artcard is therefore 5072 ⁇ 3208 dots (8.1 mm ⁇ 5.1 mm at 1600 dpi).
- FIG. 49 there is shown a single data block 1107 .
- the active region of an alternative Artcard consists of an array of identically structured data blocks 1107 .
- Each of the data blocks has the following structure: a data region 1108 surrounded by clock-marks 1109 , borders 1110 , and targets 1111 .
- the data region holds the encoded data proper, while the clock-marks, borders and targets are present specifically to help locate the data region and ensure accurate recovery of data from within the region.
- Each data block 1107 has dimensions of 627 ⁇ 394 dots. Of this, the central area of 595 ⁇ 384 dots is the data region 1108 . The surrounding dots are used to hold the clock-marks, borders, and targets.
- FIG. 50 illustrates a data block with FIG. 51 and FIG. 52 illustrating magnified edge portions thereof.
- the top 5 dot high region consists of an outer black dot border line 1112 (which stretches the length of the data block), a white dot separator line 1113 (to ensure the border line is independent), and a 3 dot high set of clock marks 1114 .
- the clock marks alternate between a white and black row, starting with a black clock mark at the 8th column from either end of the data block. There is no separation between clockmark dots and dots in the data region.
- the clock marks are symmetric in that if the alternative Artcard is inserted rotated 180 degrees, the same relative border/clockmark regions will be encountered.
- the border 1112 , 1113 is intended for use by an alternative Artcard reader to keep vertical tracking as data is read from the data region.
- the clockmarks 1114 are intended to keep horizontal tracking as data is read from the data region.
- the separation between the border and clockmarks by a white line of dots is desirable as a result of blurring occurring during reading.
- the border thus becomes a black line with white on either side, making for a good frequency response on reading.
- the clockmarks alternating between white and black have a similar result, except in the horizontal rather than the vertical dimension.
- Any alternative Artcard reader must locate the clockmarks and border if it intends to use them for tracking.
- targets which are designed to point the way to the clockmarks, border and data.
- each target region 1116 , 1117 there are two 15-dot wide target regions 1116 , 1117 in each data block: one to the left and one to the right of the data region.
- the target regions are separated from the data region by a single column of dots used for orientation.
- the purpose of the Target Regions 1116 , 1117 is to point the way to the clockmarks, border and data regions.
- Each Target Region contains 6 targets eg. 1118 that are designed to be easy to find by an alternative Artcard reader.
- FIG. 53 there is shown the structure of a single target 1120 .
- Each target 1120 is a 15 ⁇ 15 dot black square with a center structure 1121 and a run-length encoded target number 1122 .
- the center structure 1121 is a simple white cross, and the target number component 1122 is simply two columns of white dots, each being 2 dots long for each part of the target number.
- target number 1 's target id 1122 is 2 dots long
- target number 2 's target id 1122 is 4 dots wide etc.
- the targets are arranged so that they are rotation invariant with regards to card insertion. This means that the left targets and right targets are the same, except rotated 180 degrees.
- the targets are arranged such that targets 1 to 6 are located top to bottom respectively.
- the targets are arranged so that target numbers 1 to 6 are located bottom to top. The target number id is always in the half closest to the data region.
- the magnified view portions of FIG. 54 reveals clearly the how the right targets are simply the same as the left targets, except rotated 180 degrees.
- the targets 1124 , 1125 are specifically placed within the Target Region with centers 55 dots apart.
- the first black clockmark in both regions begins directly in line with the target center (the 8th dot position is the center of the 15 dot-wide target).
- FIG. 55 illustrates the distances between target centers as well as the distance from Target 1 ( 1124 ) to the first dot of the first black clockmark ( 1126 ) in the upper border/clockmark region. Since there is a distance of 55 dots to the clockmarks from both the upper and lower targets, and both sides of the alternative Artcard are symmetrical (rotated through 180 degrees), the card can be read left-to-right or right-to-left. Regardless of reading direction, the orientation does need to be determined in order to extract the data from the data region.
- Orientation Columns 1127 , 1128 there are two 1 dot wide Orientation Columns 1127 , 1128 in each data block: one directly to the left and one directly to the right of the data region.
- the Orientation Columns are present to give orientation information to an alternative Artcard reader: On the left side of the data region (to the right of the Left Targets) is a single column of white dots 1127 . On the right side of the data region (to the left of the Right Targets) is a single column of black dots 1128 . Since the targets are rotation invariant, these two columns of dots allow an alternative Artcard reader to determine the orientation of the alternative Artcard—has the card been inserted the right way, or back to front.
- the data region of a data block consists of 595 columns of 384 dots each, for a total of 228,480 dots. These dots must be interpreted and decoded to yield the original data. Each dot represents a single bit, so the 228,480 dots represent 228,480 bits, or 28,560 bytes. The interpretation of each dot can be as follows:
- Reed-Solomon encoding is preferably chosen for its ability to deal with burst errors and effectively detect and correct errors using a minimum of redundancy.
- Reed Solomon encoding is adequately discussed in the standard texts such as Wicker, S., and Bhargava, V., 1994, Reed-Solomon Codes and their Applications, IEEE Press. Rorabaugh, C, 1996, Error Coding Cookbook, McGraw-Hill. Lyppens, H., 1997, Reed-Solomon Error Correction, Dr. Dobb's Journal, January 1997 (Volume 22, Issue 1).
- Reed-Solomon encoding can be used, including different symbol sizes and different levels of redundancy.
- the following encoding parameters are used:
- n 255 bytes (2 8 ⁇ 1 symbols).
- 2t symbols in the final block size must be taken up with redundancy symbols.
- the practical result is that 127 bytes of original data are encoded to become a 255-byte block of Reed-Solomon encoded data.
- the encoded 255-byte blocks are stored on the alternative Artcard and later decoded back to the original 127 bytes again by the alternative Artcard reader.
- the 384 dots in a single column of a data block's data region can hold 48 bytes (384/8). 595 of these columns can hold 28,560 bytes. This amounts to 112 Reed-Solomon blocks (each block having 255 bytes).
- the 64 data blocks of a complete alternative Artcard can hold a total of 7168 Reed-Solomon blocks (1,827,840 bytes, at 255 bytes per Reed-Solomon block).
- FIG. 58 illustrates the overall form of encoding utilised.
- Each of the 2 Control blocks 1132 , 1133 contain the same encoded information required for decoding the remaining 7,166 Reed-Solomon blocks:
- Each control block is then Reed-Solomon encoded, turning the 127 bytes of control information into 255 bytes of Reed-Solomon encoded data.
- the Control Block is stored twice to give greater chance of it surviving.
- the repetition of the data within the Control Block has particular significance when using Reed-Solomon encoding.
- the first 127 bytes of data are exactly the original data, and can be looked at in an attempt to recover the original message if the Control Block fails decoding (more than 64 symbols are corrupted).
- the Control Block fails decoding it is possible to examine sets of 3 bytes in an effort to determine the most likely values for the 2 decoding parameters. It is not guaranteed to be recoverable, but it has a better chance through redundancy.
- the last 159 bytes of the Control Block are destroyed, and the first 96 bytes are perfectly ok. Looking at the first 96 bytes will show a repeating set of numbers. These numbers can be sensibly used to decode the remainder of the message in the remaining 7,166 Reed-Solomon blocks.
- the alternative Artcard would consist of 7,168 Reed-Solomon blocks.
- the first 2 blocks would be Control Blocks
- the next 79 would be the encoded data
- the next 79 would be a duplicate of the encoded data
- the next 79 would be another duplicate of the encoded data, and so on.
- the remaining 56 Reed-Solomon blocks would be another duplicate of the first 56 blocks from the 79 blocks of encoded data (the final 23 blocks of encoded data would not be stored again as there is not enough room on the alternative Artcard).
- a hex representation of the 127 bytes in each Control Block data before being Reed-Solomon encoded would be as illustrated in FIG. 59 .
- a maximum 1,827,840 bytes of data can be stored on the alternative Artcard (2 Control Blocks and 7,166 information blocks, totaling 7,168 Reed-Solomon encoded blocks).
- the data is not directly stored onto the alternative Artcard at this stage however, or all 255 bytes of one Reed-Solomon block will be physically together on the card. Any dirt, grime, or stain that causes physical damage to the card has the potential of damaging more than 64 bytes in a single Reed-Solomon block, which would make that block unrecoverable. If there are no duplicates of that Reed-Solomon block, then the entire alternative Artcard cannot be decoded.
- the solution is to take advantage of the fact that there are a large number of bytes on the alternative Artcard, and that the alternative Artcard has a reasonable physical size.
- the data can therefore be scrambled to ensure that symbols from a single Reed-Solomon block are not in close proximity to one another.
- pathological cases of card degradation can cause Reed-Solomon blocks to be unrecoverable, but on average, the scrambling of data makes the card much more robust.
- the scrambling scheme chosen is simple and is illustrated schematically in FIG. 14 . All the Byte 0 s from each Reed-Solomon block are placed together 1136, then all the Byte 1 s etc. There will therefore be 7,168 byte 0 's, then 7,168 Byte 1 's etc.
- Each data block on the alternative Artcard can store 28,560 bytes. Consequently there are approximately 4 bytes from each Reed-Solomon block in each of the 64 data blocks on the alternative Artcard.
- the data is simply written out to the alternative Artcard data blocks so that the first data block contains the first 28,560 bytes of the scrambled data, the second data block contains the next 28,560 bytes etc.
- the data is written out column-wise left to right.
- the left-most column within a data block contains the first 48 bytes of the 28,560 bytes of scrambled data
- the last column contains the last 48 bytes of the 28,560 bytes of scrambled data.
- bytes are written out top to bottom, one bit at a time, starting from bit 7 and finishing with bit 0 . If the bit is set ( 1 ), a black dot is placed on the alternative Artcard, if the bit is clear ( 0 ), no dot is placed, leaving it the white background color of the card.
- a set of 1,827,840 bytes of data can be created by scrambling 7,168 Reed-Solomon encoded blocks to be stored onto an alternative Artcard.
- the first 28,560 bytes of data are written to the first data block.
- the first 48 bytes of the first 28,560 bytes are written to the first column of the data block, the next 48 bytes to the next column and so on.
- the first two bytes of the 28,560 bytes are hex D3 5F. Those first two bytes will be stored in column 0 of the data block.
- Bit 7 of byte 0 will be stored first, then bit 6 and so on.
- Bit 7 of byte 1 will be stored through to bit 0 of byte 1 . Since each “1” is stored as a black dot, and each “0” as a white dot, these two bytes will be represented on the alternative Artcard as the following set of dots:
- This section deals with extracting the original data from an alternative Artcard in an accurate and robust manner. Specifically, it assumes the alternative Artcard format as described in the previous chapter, and describes a method of extracting the original pre-encoded data from the alternative Artcard.
- an alternative Artcard is to store data for use in different applications.
- a user inserts an alternative Artcard into an alternative Artcard reader, and expects the data to be loaded in a “reasonable time”.
- a motor transport moves the alternative Artcard into an alternative Artcard reader. This is not perceived as a problematic delay, since the alternative Artcard is in motion. Any time after the alternative Artcard has stopped is perceived as a delay, and should be minimized in any alternative Artcard reading scheme. Ideally, the entire alternative Artcard would be read while in motion, and thus there would be no perceived delay after the card had stopped moving.
- a reasonable time for an alternative Artcard to be physically loaded is defined to be 1.5 seconds. There should be a minimization of time for additional decoding after the alternative Artcard has stopped moving. Since the Active region of an alternative Artcard covers most of the alternative Artcard surface we can limit our timing concerns to that region.
- the dots on an alternative Artcard must be sampled by a CCD reader or the like at least at double the printed resolution to satisfy Nyquist's Theorem. In practice it is better to sample at a higher rate than this.
- dots are preferably sampled at 3 times their printed resolution in each dimension, requiring 9 pixels to define a single dot. If the resolution of the alternative Artcard dots is 1600 dpi, the alternative Artcard reader's image sensor must scan pixels at 4800 dpi. Of course if a dot is not exactly aligned with the sampling sensor, the worst and most likely case as illustrated in FIG. 62 , is that a dot will be sensed over a 4 ⁇ 4 pixel area.
- Each sampled pixel is 1 byte (8 bits). The lowest 2 bits of each pixel can contain significant noise. Decoding algorithms must therefore be noise tolerant.
- this angle of rotation is a maximum of 1 degree. There can be some slight aberrations in angle due to jitter and motor rumble during the reading process, but these are assumed to essentially stay within the 1-degree limit.
- Region Height 0° rotation 1° rotation Active region 3208 dots 3 pixel columns 168 pixel columns
- Data block 394 dots 3 pixel columns 21 pixel columns
- the length of the CCD itself must accommodate:
- the actual amount of memory required for reading and decoding an alternative Artcard is twice the amount of space required to hold the encoded data, together with a small amount of scratch space (1-2 KB). For the 1600 dpi alternative Artcard, this implies a 4 MB memory requirement.
- the actual usage of the memory is detailed in the following algorithm description.
- a standard Rambus Direct RDRAM architecture is assumed, as defined in Rambus Inc, October 1997, Direct Rambus Technology Disclosure , with a peak data transfer rate of 1.6 GB/sec. Assuming 75% efficiency (easily achieved), we have an average of 1.2 GB/sec data transfer rate. The average time to access a block of 16 bytes is therefore 12 ns.
- Alternative Artcards Physically damaged alternative Artcards can be inserted into a reader.
- Alternative Artcards may be scratched, or be stained with grime or dirt.
- a alternative Artcard reader can't assume to read everything perfectly. The effect of dirty data is made worse by blurring, as the dirty data affects the surrounding clean dots.
- FIG. 64 is a schematic illustration of the overlapping of sensed data.
- Black and white dots were chosen for alternative Artcards to give the best dynamic range in blurry reading environments. Blurring can cause problems in attempting to determine whether a given dot is black or white.
- FIG. 65 shows the distribution of resultant center dot values for black and white dots.
- the diagram is intended to be a representative blurring.
- the curve 1140 from 0 to around 180 shows the range of black dots.
- the curve 1141 from 75 to 250 shows the range of white dots.
- a pixel value at the center point of intersection is ambiguous—the dot is equally likely to be a black or a white.
- FIG. 65 is a graph of number predicted number of alternative Artcard Reed-Solomon blocks that cannot be recovered given a particular symbol error rate. Notice how the Reed-Solomon decoding scheme performs well and then substantially degrades. If there is no Reed-Solomon block duplication, then only 1 block needs to be in error for the data to be unrecoverable. Of course, with block duplication the chance of an alternative Artcard decoding increases.
- FIG. 66 only illustrates the symbol (byte) errors corresponding to the number of Reed-Solomon blocks in error.
- a motor transport ideally carries the alternative Artcard past a monochrome linear CCD image sensor.
- the card is sampled in each dimension at three times the printed resolution.
- Alternative Artcard reading hardware and software compensate for rotation up to 1 degree, jitter and vibration due to the motor transport, and blurring due to variations in alternative Artcard to CCD distance.
- a digital bit image of the data is extracted from the sampled image by a complex method described here.
- Reed-Solomon decoding corrects arbitrarily distributed data corruption of up to 25% of the raw data on the alternative Artcard. Approximately 1 MB of corrected data is extracted from a 1600 dpi card.
- the decoding process requires the following steps:
- the rotation and unscrambling of the bit image cannot occur until the whole bit image has been extracted. It is therefore necessary to assign a memory region to hold the extracted bit image.
- the bit image fits easily within 2 MB, leaving 2 MB for use in the extraction process.
- the 4 MB memory is therefore used as follows:
- the time taken for Phase 1 is 1.5 seconds, since this is the time taken for the alternative Artcard to travel past the CCD and physically load.
- Phase 2 has no real-time requirements, in that the alternative Artcard has stopped moving, and we are only concerned with the user's perception of elapsed time. Phase 2 therefore involves the remaining tasks of decoding an alternative Artcard:
- the input to Phase 2 is the 2 MB bit image buffer. Unscrambling and rotating cannot be performed in situ, so a second 2 MB buffer is required. The 2 MB buffer used to hold scanned pixels in Phase 1 is no longer required and can be used to store the rotated unscrambled data.
- the Reed-Solomon decoding task takes the unscrambled bit image and decodes it to 910,082 bytes.
- the decoding can be performed in situ, or to a specified location elsewhere. The decoding process does not require any additional memory buffers.
- the 4 MB memory is therefore used as follows:
- Phase 2 The time taken for Phase 2 is hardware dependent and is bound by the time taken for Reed-Solomon decoding. Using a dedicated core such as LSI Logic's L64712, or an equivalent CPU/DSP combination, it is estimated that Phase 2 would take 0.32 seconds.
- Phase 1 can be divided into 2 asynchronous process streams.
- the first of these streams is simply the real-time reader of alternative Artcard pixels from the CCD, writing the pixels to DRAM.
- the second stream involves looking at the pixels, and extracting the bits.
- the second process stream is itself divided into 2 processes.
- the first process is a global process, concerned with locating the start of the alternative Artcard.
- the second process is the bit image extraction proper.
- FIG. 69 illustrates the data flow from a data/process perspective.
- the CCD scans the alternative Artcard at 4800 dpi, and generates 11,000 1-byte pixel samples per column. This process simply takes the data from the CCD and writes it to DRAM, completely independently of any other process that is reading the pixel data from DRAM.
- FIG. 70 illustrates the steps involved.
- the pixels are written contiguously to a 2 MB buffer that can hold 190 full columns of pixels.
- the buffer always holds the 190 columns most recently read. Consequently, any process that wants to read the pixel data (such as Processes 2 and 3) must firstly know where to look for a given column, and secondly, be fast enough to ensure that the data required is actually in the buffer.
- Process 1 makes the current scanline number (CurrentScanLine) available to other processes so they can ensure they are not attempting to access pixels from scanlines that have not been read yet.
- Process 1 therefore uses just under 9% of the available DRAM bandwidth (8256/92296).
- This process is concerned with locating the Active Area on a scanned alternative Artcard.
- the input to this stage is the pixel data from DRAM (placed there by Process 1).
- the output is a set of bounds for the first 8 data blocks on the alternative Artcard, required as input to Process 3.
- FIG. 71 A high level overview of the process can be seen in FIG. 71 .
- An alternative Artcard can have vertical slop of 1 mm upon insertion. With a rotation of 1 degree there is further vertical slop of 1.5 mm (86 sin 1°). Consequently there is a total vertical slop of 2.5 mm. At 1600 dpi, this equates to a slop of approximately 160 dots. Since a single data block is only 394 dots high, the slop is just under half a data block. To get a better estimate of where the data blocks are located the alternative Artcard itself needs to be detected.
- Process 2 therefore consists of two parts:
- the scanned pixels outside the alternative Artcard area are black (the surface can be black plastic or some other non-reflective surface).
- the border of the alternative Artcard area is white. If we process the pixel columns one by one, and filter the pixels to either black or white, the transition point from black to white will mark the start of the alternative Artcard. The highest level process is as follows:
- the ProcessColumn function is simple. Pixels from two areas of the scanned column are passed through a threshold filter to determine if they are black or white. It is possible to then wait for a certain number of white pixels and announce the start of the alternative Artcard once the given number has been detected.
- the logic of processing a pixel column is shown in the following pseudocode. 0 is returned if the alternative Artcard has not been detected during the column. Otherwise the pixel number of the detected location is returned.
- the second step of Process 2 determines which was detected and sets the data block bounds for Phase 3 appropriately.
- each data block has a StartPixel and an EndPixel to determine where to look for targets in order to locate the data block's data region.
- the pixel value is in the upper half of the card, it is possible to simply use that as the first StartPixel bounds. If the pixel value is in the lower half of the card, it is possible to move back so that the pixel value is the last segment's EndPixel bounds. We step forwards or backwards by the alternative Artcard data size, and thus set up each segment with appropriate bounds. We are now ready to begin extracting data from the alternative Artcard.
- the MaxPixel value is defined in Process 3, and the SetBounds function simply sets StartPixel and EndPixel clipping with respect to 0 and MaxPixel.
- This process is concerned with extracting the bit data from the CCD pixel data.
- the process essentially creates a bit-image from the pixel data, based on scratch information created by Process 2, and maintained by Process 3.
- a high level overview of the process can be seen in FIG. 72 .
- Process 3 Rather than simply read an alternative Artcard's pixel column and determine what pixels belong to what data block, Process 3 works the other way around. It knows where to look for the pixels of a given data block. It does this by dividing a logical alternative Artcard into 8 segments, each containing 8 data blocks as shown in FIG. 73 .
- the segments as shown match the logical alternative Artcard. Physically, the alternative Artcard is likely to be rotated by some amount. The segments remain locked to the logical alternative Artcard structure, and hence are rotation-independent. A given segment can have one of two states:
- the process is complete when all 64 data blocks have been extracted, 8 from each region.
- Each data block consists of 595 columns of data, each with 48 bytes.
- the 2 orientation columns for the data block are each extracted at 48 bytes each, giving a total of 28,656 bytes extracted per data block.
- the nth data block for a given segment is stored at the location:
- Each of the 8 segments has an associated data structure.
- the data structure defining each segment is stored in the scratch data area.
- the structure can be as set out in the following table:
- DataName Comment CurrentState Defines the current state of the segment.
- Can be one of: LookingForTargets ExtractingBitImage Initial value is LookingForTargets Used during LookingForTargets: StartPixel Upper pixel bound of segment. Initially set by Process 2. EndPixel Lower pixel bound of segment. Initially set by Process 2 MaxPixel The maximum pixel number for any scanline. It is set to the same value for each segment: 10,866. CurrentColumn Pixel column we're up to while looking for targets. FinalColumn Defines the last pixel column to look in for targets. LocatedTargets Points to a list of located Targets.
- PossibleTargets Points to a set of pointers to Target structures that represent currently investigated pixel shapes that may be targets AvailableTargets Points to a set of pointers to Target structures that are currently unused.
- TargetsFound The number of Targets found so far in this data block.
- Process 3 simply iterates through each of the segments, performing a single line of processing depending on the segment's current state.
- the pseudocode is straightforward:
- Process 3 must be halted by an external controlling process if it has not terminated after a specified amount of time. This will only be the case if the data cannot be extracted. A simple mechanism is to start a countdown after Process 1 has finished reading the alternative Artcard. If Process 3 has not finished by that time, the data from the alternative Artcard cannot be recovered.
- Targets are detected by reading columns of pixels, one pixel-column at a time rather than by detecting dots within a given band of pixels (between StartPixel and EndPixel) certain patterns of pixels are detected.
- the pixel columns are processed one at a time until either all the targets are found, or until a specified number of columns have been processed. At that time the targets can be processed and the data area located via clockmarks.
- the state is changed to ExtractingBitImage to signify that the data is now to be extracted. If enough valid targets are not located, then the data block is ignored, skipping to a column definitely within the missed data block, and then beginning again the process of looking for the targets in the next data block. This can be seen in the following pseudocode:
- Each pixel column is processed within the specified bounds (between StartPixel and EndPixel) to search for certain patterns of pixels which will identify the targets.
- the structure of a single target (target number 2 ) is as previously shown in FIG. 54 :
- a target can be identified by:
- FIG. 74 An overview of the required process is as shown in FIG. 74 .
- the pixels 1150 from each column are passed through a filter 1151 to detect black or white, and then run length encoded 1152 .
- the run-lengths are then passed to a state machine 1153 that has access to the last 3 run lengths and the 4th last color. Based on these values, possible targets pass through each of the identification stages.
- the GatherMin&Max process 1155 simply keeps the minimum & maximum pixel values encountered during the processing of the segment. These are used once the targets have been located to set BlackMax, WhiteMin, and MidRange values.
- Each segment keeps a set of target structures in its search for targets. While the target structures themselves don't move around in memory, several segment variables point to lists of pointers to these target structures. The three pointer lists are repeated here:
- TargetsFound PossibleTargetCount
- AvailableTargetCount AvailableTargetCount
- TargetsFound and PossibleTargetCount are set to 0, and AvailableTargetCount is set to 28 (the maximum number of target structures possible to have under investigation since the minimum size of a target border is 40 pixels, and the data area is approximately 1152 pixels).
- AvailableTargetCount is set to 28 (the maximum number of target structures possible to have under investigation since the minimum size of a target border is 40 pixels, and the data area is approximately 1152 pixels).
- An example of the target pointer layout is as illustrated in FIG. 75 .
- the target data structure is updated, and the pointer to the structure is added to the PossibleTargets list 1158 .
- a target is completely verified, it is added to the LocatedTargets list 1159 . If a possible target is found not to be a target after all, it is placed back onto the AvailableTargets list 1157 . Consequently there are always 28 target pointers in circulation at any time, moving between the lists.
- the Target data structure 1160 can have the following form:
- the ProcessPixelColumn function within the find targets module 1162 goes through all the run lengths one by one, comparing the runs against existing possible targets (via StartPixel), or creating new possible targets if a potential target is found where none was previously known. In all cases, the comparison is only made if S0.color is white and S1.color is black.
- the last column to be checked for targets can be determined as being within a maximum distance from it. For 1° rotation, the maximum distance is 18 pixel columns.
- AddToTarget is a function within the find targets module that determines whether it is possible or not to add the specific run to the given target:
- the AddToTarget pseudocode is as follows:
- DetermineRunType Types of pixel runs are identified in DetermineRunType is as follows:
- the EvaluateState procedure takes action depending on the current state and the run type.
- the located targets (in the LocatedTargets list) are stored in the order they were located. Depending on alternative Artcard rotation these targets will be in ascending pixel order or descending pixel order. In addition, the target numbers recovered from the targets may be in error. We may have also have recovered a false target. Before the clockmark estimates can be obtained, the targets need to be processed to ensure that invalid targets are discarded, and valid targets have target numbers fixed if in error (e.g. a damaged target number due to dirt). Two main steps are involved:
- the first step is simple.
- the nature of the target retrieval means that the data should already be sorted in either ascending pixel or descending pixel.
- a simple swap sort ensures that if the 6 targets are already sorted correctly a maximum of 14 comparisons is made with no swaps. If the data is not sorted, 14 comparisons are made, with 3 swaps.
- the following pseudocode shows the sorting process:
- Locating and fixing erroneous target numbers is only slightly more complex.
- each of the N targets found is assumed to be correct.
- the other targets are compared to this “correct” target and the number of targets that require change should target N be correct is counted. If the number of changes is 0, then all the targets must already be correct. Otherwise the target that requires the fewest changes to the others is used as the base for change.
- a change is registered if a given target's target number and pixel position do not correlate when compared to the “correct” target's pixel position and target number.
- the change may mean updating a target's target number, or it may mean elimination of the target. It is possible to assume that ascending targets have pixels in ascending order (since they have already been sorted).
- the LocatedTargets list needs to be compacted and all NULL targets removed.
- the upper region's first clockmark dot 1126 is 55 dots away from the center of the first target 1124 (which is the same as the distance between target centers).
- the center of the clockmark dots is a further 1 dot away, and the black border line 1123 is a further 4 dots away from the first clockmark dot.
- the lower region's first clockmark dot is exactly 7 targets-distance away (7 ⁇ 55 dots) from the upper region's first clockmark dot 1126 .
- Targets 1 and 6 have been located, so it is necessary to use the upper-most and lower-most targets, and use the target numbers to determine which targets are being used. It is necessary at least 2 targets at this point.
- the target centers are only estimates of the actual target centers. It is to locate the target center more accurately. The center of a target is white, surrounded by black. We therefore want to find the local maximum in both pixel & column dimensions. This involves reconstructing the continuous image since the maximum is unlikely to be aligned exactly on an integer boundary (our estimate).
- the existing target centers actually are the top left coordinate of the bounding box of the target center. It is a simple process to go through each of the pixels for the area defining the center of the target, and find the pixel with the highest value. There may be more than one pixel with the same maximum pixel value, but the estimate of the center value only requires one pixel.
- the target center coordinates point to the whitest pixel of the target, which should be within one pixel of the actual center.
- the process of building a more accurate position for the target center involves reconstructing the continuous signal for 7 scanline slices of the target, 3 to either side of the estimated target center.
- the 7 maximum values found are then used to reconstruct a continuous signal in the column dimension and thus to locate the maximum value in that dimension.
- FindMax is a function that reconstructs the original 1 dimensional signal based sample points and returns the position of the maximum as well as the maximum value found.
- the method of signal reconstruction/resampling used is the Lanczos3 windowed sinc function as shown in FIG. 76 .
- the Lanczos3 windowed sinc function takes 7 (pixel) samples from the dimension being reconstructed, centered around the estimated position X, i.e. at X ⁇ 3, X ⁇ 2, X ⁇ 1, X, X+1, X+2, X+3.
- LowerClock.pixel UpperClock.pixel + ((TARGETS_PER_BLOCK+1) * deltaPixel)
- LowerClock.column UpperClock.column + ((TARGETS_PER_BLOCK+1) * deltaColumn)
- deltaColumn and deltaPixel are based on a 55 dot distance (the distance between targets), so these deltas must be scaled by 1/55 and 4/55 respectively before being applied to the clockmark coordinates. This is represented as:
- the pixel ranges for black and white dots needs to be ascertained.
- the minimum and maximum pixels encountered during the search for targets were stored in WhiteMin and BlackMax respectively, but these do not represent valid values for these variables with respect to data extraction. They are merely used for storage convenience.
- the following pseudocode shows the method of obtaining good values for WhiteMin and BlackMax based on the min & max pixels encountered:
- WhiteMin MaxPixel ⁇ 105
- the ExtractingBitImage state is one where the data block has already been accurately located via the targets, and bit data is currently being extracted one dot column at a time and written to the alternative Artcard bit image.
- the following of data block clockmarks/borders gives accurate dot recovery regardless of rotation, and thus the segment bounds are ignored.
- Processing a given dot column involves two tasks:
- FIG. 77 illustrates an example data block's top left which corner reveals that there are clockmarks 3 dots high 1166 extending out to the target area, a white row, and then a black border line.
- an estimation of the center of the first black clockmark position is provided (based on the target positions).
- the clockmark estimate is taken and by looking at the pixel data in its vicinity, the continuous signal is reconstructed and the exact center is determined. Since we have broken out the two dimensions into a clockmark and border, this is a simple one-dimensional process that needs to be performed twice. However, this is only done every second dot column, when there is a black clockmark to register against. For the white clockmarks we simply use the estimate and leave it at that. Alternatively, we could update the pixel coordinate based on the border each dot column (since it is always present). In practice it is sufficient to update both ordinates every other column (with the black clockmarks) since the resolution being worked at is so fine. The process therefore becomes:
- DetermineAccurateUpperDotCenter is implemented via the following pseudocode:
- GetAccuratePixel and GetAccurateColumn are functions that determine an accurate dot center given a coordinate, but only from the perspective of a single dimension. Determining accurate dot centers is a process of signal reconstruction and then finding the location where the minimum signal value is found (this is different to locating a target center, which is locating the maximum value of the signal since the target center is white, not black).
- the method chosen for signal reconstruction/resampling for this application is the Lanczos3 windowed sinc function as previously discussed with reference to FIG. 76 .
- the clockmark or border has been damaged in some way—perhaps it has been scratched. If the new center value retrieved by the resampling differs from the estimate by more than a tolerance amount, the center value is only moved by the maximum tolerance. If it is an invalid position, it should be close enough to use for data retrieval, and future clockmarks will resynchronize the position.
- the first thing to do is calculate the deltas for the dot column. This is achieved simply by subtracting the UpperClock from the LowerClock, and then dividing by the number of dots between the two points. It is possible to actually multiply by the inverse of the number of dots since it is constant for an alternative Artcard, and multiplying is faster. It is possible to use different constants for obtaining the deltas in pixel and column dimensions.
- the delta in pixels is the distance between the two borders, while the delta in columns is between the centers of the two clockmarks.
- DetermineDataInfo is two parts. The first is given by the pseudocode:
- kDeltaColumnFactor 1 / (DOTS_PER_DATA_COLUMN + 2 + 2 ⁇ 1)
- kDeltaPixelFactor 1 / (DOTS_PER_DATA_COLUMN + 5 + 5 ⁇ 1)
- delta LowerClock.column ⁇ UpperClock.column
- the variable CurrentDot points is determined to the center of the first dot of the current column.
- DataDelta 2 additions: 1 for the column ordinate, the other for the pixel ordinate.
- a sample of the dot at the given coordinate (bi-linear interpolation) is taken, and a pixel value representing the center of the dot is determined.
- the pixel value is then used to determine the bit value for that dot.
- the high level process of extracting a single line of data (48 bytes) can be seen in the following pseudocode.
- the dataBuffer pointer increments as each byte is stored, ensuring that consecutive bytes and columns of data are stored consecutively.
- the GetPixel function takes a dot coordinate (fixed point) and samples 4 CCD pixels to arrive at a center pixel value via bilinear interpolation.
- the DetermineCenterDot function takes the pixel values representing the dot centers to either side of the dot whose bit value is being determined, and attempts to intelligently guess the value of that center dot's bit value. From the generalized blurring curve of FIG. 64 there are three common cases to consider:
- the scheme used to determine a dot's value if the pixel value is between BlackMax and WhiteMin is not too complex, but gives good results. It uses the pixel values of the dot centers to the left and right of the dot in question, using their values to help determine a more likely value for the center dot:
- the logic is represented by the following:
- the clockmark values are no longer needed. They are conveniently updated in readiness for the next column after the data has been retrieved for the column. Since the clockmark direction is perpendicular to the traversal of dots down the dot column, it is possible to use the pixel delta to update the column, and subtract the column delta to update the pixel for both clocks:
- DRAM utilization is specified relative to Process 1 , which writes each pixel once in a consecutive manner, consuming 9% of the DRAM bandwidth.
- the timing as described in this section shows that the DRAM is easily able to cope with the demands of the alternative Artcard Reader algorithm.
- the timing bottleneck will therefore be the implementation of the algorithm in terms of logic speed, not DRAM access.
- the algorithms have been designed however, with simple architectures in mind, requiring a minimum number of logical operations for every memory cycle. From this point of view, as long as the implementation state machine or equivalent CPU/DSP architecture is able to perform as described in the following sub-sections, the target speed will be met.
- Targets are located by reading pixels within the bounds of a pixel column. Each pixel is read once at most. Assuming a run-length encoder that operates fast enough, the bounds on the location of targets is memory access. The accesses will therefore be no worse than the timing for Process 1, which means a 9% utilization of the DRAM bandwidth.
- the total utilization of DRAM during target location (including Process 1 ) is therefore 18%, meaning that the target locator will always be catching up to the alternative Artcard image sensor pixel reader.
- a target is positively identified on the first pixel column after the target number. Since there are 2 dot columns before the orientation column, there are 6 pixel columns.
- the Target Location process effectively uses up the first of the pixel columns, but the remaining 5 pixel columns are not processed at all. Therefore the data area can be located in 2 ⁇ 5 of the time available without impinging on any other process time.
- Extracting the dot information involves only 4 pixel reads per dot (rather than the average 9 that define the dot). Considering the data area of 1152 pixels (384 dots), at best this will save 72 cache reads by only reading 4 pixel dots instead of 9. The worst case is a rotation of 1° which is a single pixel translation every 57 pixels, which gives only slightly worse savings.
- Phase 2 is the non-real-time phase of alternative Artcard data recovery algorithm.
- a bit image has been extracted from the alternative Artcard. It represents the bits read from the data regions of the alternative Artcard. Some of the bits will be in error, and perhaps the entire data is rotated 180° because the alternative Artcard was rotated when inserted.
- Phase 2 is concerned with reliably extracting the original data from this encoded bit image. There are basically 3 steps to be carried out as illustrated in FIG. 79 :
- Each of the 3 steps is defined as a separate process, and performed consecutively, since the output of one is required as the input to the next. It is straightforward to combine the first two steps into a single process, but for the purposes of clarity, they are treated separately here.
- Phase 2 has the structure as illustrated in FIG. 80 .
- Processes 1 and 2 are likely to be negligible, consuming less than 1/1000 th of a second between them.
- Process 3 (Reed Solomon decode) consumes approximately 0.32 seconds, making this the total time required for Phase 2.
- bit map in DRAM now represents the retrieved data from the alternative Artcard. However the bit image is not contiguous. It is broken into 64 32k chunks, one chunk for each data block. Each 32k chunk contains only 28,656 useful bytes:
- the 2 MB buffer used for pixel data (stored by Process 1 of Phase 1) can be used to hold the reorganized bit image, since pixel data is not required during Phase 2. At the end of the reorganization, a correctly oriented contiguous bit image will be in the 2 MB pixel buffer, ready for Reed-Solomon decoding.
- the leftmost Orientation Column will be white and the rightmost Orientation Column will be black. If the card has been rotated 180°, then the leftmost Orientation Column will be black and the rightmost Orientation Column will be white.
- the data must now be reorganized, based on whether the card was oriented correctly or not.
- the simplest case is that the card is correctly oriented. In this case the data only needs to be moved around a little to remove the orientation columns and to make the entire data contiguous. This is achieved very simply in situ, as described by the following pseudocode:
- FIG. 80 illustrates the unscrambling process conducted memory
- the algorithm performs the decoding one Reed-Solomon block at a time, and can (if desired) be performed in situ, since the encoded block is larger than the decoded block, and the redundancy bytes are stored after the data bytes.
- the first 2 Reed-Solomon blocks are control blocks, containing information about the size of the data to be extracted from the bit image. This meta-information must be decoded first, and the resultant information used to decode the data proper.
- the decoding of the data proper is simply a case of decoding the data blocks one at a time. Duplicate data blocks can be used if a particular block fails to decode.
- ⁇ duplicate source + offsetToNextDuplicate while ((! found) && (duplicate ⁇ sourceEnd))
- the GetControlData function is straightforward as long as there are no decoding errors.
- the function simply calls DecodeBlock to decode one control block at a time until successful.
- the control parameters can then be extracted from the first 3 bytes of the decoded data (destBlocks is stored in the bytes 0 and 1 , and lastBlock is stored in byte 2 ). If there are decoding errors the function must traverse the 32 sets of 3 bytes and decide which is the most likely set value to be correct.
- One simple method is to find 2 consecutive equal copies of the 3 bytes, and to declare those values the correct ones.
- An alternative method is to count occurrences of the different sets of 3 bytes, and announce the most common occurrence to be the correct one.
- Reed-Solomon decode depends on the implementation. While it is possible to use a dedicated core to perform the Reed-Solomon decoding process (such as LSI Logic's L64712), it is preferable to select a CPU/DSP combination that can be more generally used throughout the embedded system (usually to do something with the decoded data) depending on the application. Of course decoding time must be fast enough with the CPU/DSP combination.
- the L64712 has a throughput of 50 Mbits per second (around 6.25 MB per second), so the time is bound by the speed of the Reed-Solomon decoder rather than the maximum 2 MB read and 1 MB write memory access time.
- the current reading algorithm of the preferred embodiment has the ability to use the surrounding dots in the same column in order to make a better decision about a dot's value. Since the previous column's dots have already been decoded, a previous column dot history could be useful in determining the value of those dots whose pixel values are in the not-sure range.
- a different possibility with regard to the initial stage is to remove it entirely, make the initial bounds of the data blocks larger than necessary and place greater intelligence into the ProcessingTargets functions. This may reduce overall complexity. Care must be taken to maintain data block independence.
- control block mechanism can be made more robust:
- the overall time taken to read the Artcard 9 and decode it is therefore approximately 2.15 seconds.
- the apparent delay to the user is actually only 0.65 seconds (the total of Phases 3 and 4), since the Artcard stops moving after 1.5 seconds.
- the Artvark script must be interpreted, Rather than run the script immediately, the script is only run upon the pressing of the ‘Print’ button 13 ( FIG. 1 ).
- the taken to run the script will vary depending on the complexity of the script, and must be taken into account for the perceived delay between pressing the print button and the actual print button and the actual printing.
- the VLIW processor 74 is a digital processing system that accelerates computationally expensive Vark functions. The balance of functions performed in software by the CPU core 72 , and in hardware by the VLIW processor 74 will be implementation dependent. The goal of the VLIW processor 74 is to assist all Artcard styles to execute in a time that does not seem too slow to the user. As CPUs become faster and more powerful, the number of functions requiring hardware acceleration becomes less and less.
- the VLIW processor has a microcoded ALU sub-system that allows general hardware speed up of the following time-critical functions.
- a convolve is a weighted average around a center pixel.
- the average may be a simple sum, a sum of absolute values, the absolute value of a sum, or sums truncated at 0.
- the image convolver is a general-purpose convolver, allowing a variety of functions to be implemented by varying the values within a variable-sized coefficient kernel.
- the kernel sizes supported are 3 ⁇ 3, 5 ⁇ 5 and 7 ⁇ 7 only.
- the pixel component values fed into the convolver process 341 come from a Box Read Iterator 342 .
- the Iterator 342 provides the image data row by row, and within each row, pixel by pixel.
- the output from the convolver 341 is sent to a Sequential Write Iterator 344 , which stores the resultant image in a valid image format.
- a Coefficient Kernel 346 is a lookup table in DRAM.
- the kernel is arranged with coefficients in the same order as the Box Read Iterator 342 .
- Each coefficient entry is 8 bits.
- a simple Sequential Read Iterator can be used to index into the kernel 346 and thus provide the coefficients. It simulates an image with ImageWidth equal to the kernel size, and a Loop option is set so that the kernel would continuously be provided.
- FIG. 81 One form of implementation of the convolve process on an ALU unit is as illustrated in FIG. 81 .
- the following constants are set by software:
- the control logic is used to count down the number of multiply/adds per pixel. When the count (accumulated in Latch 2 ) reaches 0, the control signal generated is used to write out the current convolve value (from Latch 1 ) and to reset the count. In this way, one control logic block can be used for a number of parallel convolve streams.
- the number of cycles taken to sum up all the values is therefore the number of entries in the kernel. Since this is compute bound, it is appropriate to divide the image into multiple sections and process them in parallel on different ALU units.
- the time taken for each pixel is 49 cycles, or 490 ns. Since each cache line holds 32 pixels, the time available for memory access is 12,740 ns. ((32 ⁇ 7+1) ⁇ 490 ns).
- the time taken to read 7 cache lines and write 1 is worse case 1,120 ns (8*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 10 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4 in parallel.
- the time taken for each pixel is 25 cycles, or 250 ns. Since each cache line holds 32 pixels, the time available for memory access is 7,000 ns. ((32 ⁇ 5+1) ⁇ 250 ns).
- the time taken to read 5 cache lines and write 1 is worse case 840 ns (6*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 7 pixels in parallel given unlimited resources. Given a limited number of ALUs it is possible to do at best 4.
- the time taken for each pixel is 9 cycles, or 90 ns. Since each cache line holds 32 pixels, the time available for memory access is 2,700 ns. ((32 ⁇ 3+1) ⁇ 90 ns).
- the time taken to read 3 cache lines and write 1 is worse case 560 ns (4*140 ns, all accesses to same DRAM bank). Consequently it is possible to process up to 4 pixels in parallel given unlimited resources. Given a limited number of ALUs and Read/Write Iterators it is possible to do at best 4.
- Time taken to Time to process Time to Process calculate 1 channel at 3 channels at Kernel size output pixel 1500 ⁇ 1000 1500 ⁇ 1000 3 ⁇ 3 (9) 3 cycles 0.045 seconds 0.135 seconds 5 ⁇ 5 (25) 8 1 ⁇ 3 cycles 0.125 seconds 0.375 seconds 7 ⁇ 7 (49) 16 1 ⁇ 3 cycles 0.245 seconds 0.735 seconds Image Compositor
- Compositing is to add a foreground image to a background image using a matte or a channel to govern the appropriate proportions of background and foreground in the final image.
- Two styles of compositing are preferably supported, regular compositing and associated compositing. The rules for the two styles are:
- the alpha channel has values from 0 to 255 corresponding to the range 0 to 1.
- a regular composite is implemented as:
Abstract
-
- at least one area image sensor for imaging a scene;
- a camera processor means for processing said image scene in accordance with a predetermined scene transformation requirement; and
- a printer for printing out said processed image scene on print media, utilizing printing ink stored in a single detachable module inside said camera system;
- said camera system comprising a portable hand held unit for the imaging of scenes by said area image sensor and printing said scenes directly out of said camera system via said printer.
Description
Image type | Bi-level, dithered | ||
Color | CMY | ||
Resolution | |||
1600 dpi | |||
Print head length | ‘Page-width’ (100 mm) | ||
| 2 seconds per photo | ||
Optional Ink Pressure Controller (not shown)
-
- CCD Image, which is the Input Image captured from the CCD.
- Internal Image format—the Image format utilised internally by the Artcam device.
Although the program code is stored in on-
A
CPU Memory Model
An Artcam's CPU memory model consists of a 32 MB area. It consists of 8 MB of physical RDRAM off-chip in the base model of Artcam, with provision for up to 16 MB of off-chip memory. There is a 4
Contents | Size | ||
| 8 MB | ||
Extended | 8 MB | ||
Program memory (on | 4 MB | ||
Reserved for extension of | 4 | ||
ACP | |||
31 registers and memory-mapped I/ | 4 | ||
Reserved | |||
4 | |||
TOTAL | |||
32 MB | |||
A straightforward way of decoding addresses is to use address bits 23-24:
-
- If
bit 24 is clear, the address is in the lower 16-MB range, and hence can be satisfied from DRAM and theData cache 76. In most cases the DRAM will only be 8 MB, but 16 MB is allocated to cater for a higher memory model Artcams. - If
bit 24 is set, and bit 23 is clear, then the address represents theFlash memory 70 4 Mbyte range and is satisfied by theProgram cache 72. - If
bit 24=1 andbit 23=1, the address is translated into an access over the low speed bus to the requested component in the AC by theCPU Memory Decoder 68.
Flash Memory 70
TheACP 31 contains a 4Mbyte Flash memory 70 for storing the Artcam program. It is envisaged thatFlash memory 70 will have denser packing coefficients than masked ROM, and allows for greater flexibility for testing camera program code. The downside of theFlash memory 70 is the access time, which is unlikely to be fast enough for the 100 MHz operating speed (10 ns cycle time) of the CPU. A fastProgram Instruction cache 77 therefore acts as the interface between the CPU and theslower Flash memory 70.
Program Cache 72
A small cache is required for good CPU performance. This requirement is due to the slowspeed Flash memory 70 which stores the Program code. 16 cache lines of 32 bytes each are sufficient, for a total of 512 bytes. TheProgram cache 72 is a read only cache. The data used by CPU programs comes through theCPU Memory Decoder 68 and if the address is in DRAM, through thegeneral Data cache 76. The separation allows the CPU to operate independently of theVLIW Vector Processor 74. If the data requirements are low for a given process, it can consequently operate completely out of cache.
Finally, theProgram cache 72 can be read as data by the CPU rather than purely as program instructions. This allows tables, microcode for the VLIW etc to be loaded from theFlash memory 70. Addresses withbit 24 set andbit 23 clear are satisfied from theProgram cache 72.
CPU Memory Decoder 68
TheCPU Memory Decoder 68 is a simple decoder for satisfying CPU data accesses. The Decoder translates data addresses into internal ACP register accesses over the internal low speed bus, and therefore allows for memory mapped I/O of ACP registers. TheCPU Memory Decoder 68 only interprets addresses that havebit 24 set andbit 23 clear. There is no caching in theCPU Memory Decoder 68.
DRAM Interface 81
The DRAM used by the Artcam is asingle channel 64 Mbit (8 MB) RAMbus RDRAM operating at 1.6 GB/sec. RDRAM accesses are by a single channel (16-bit data path) controller. The RDRAM also has several useful operating modes for low power operation. Although the Rambus specification describes a system with random 32 byte transfers as capable of achieving a greater than 95% efficiency, this is not true if only part of the 32 bytes are used. Two reads followed by two writes to the same device yields over 86% efficiency. The primary latency is required for bus turn-around going from a Write to a Read, and since there is a Delayed Write mechanism, efficiency can be further improved. With regards to writes, Write Masks allow specific subsets of bytes to be written to. These write masks would be set via internal cache “dirty bits”. The upshot of the Rambus Direct RDRAM is a throughput of >1 GB/sec is easily achievable, and with multiple reads for every write (most processes) combined with intelligent algorithms making good use of 32 byte transfer knowledge, transfer rates of >1.3 GB/sec are expected. Every 10 ns, 16 bytes can be transferred to or from the core.
DRAM Organization
The DRAM organization for a base model (8 MB RDRAM) Artcam is as follows:
- If
Contents | Size | ||
Program scratch RAM | 0.50 MB | ||
Artcard data | 1.00 MB | ||
Photo Image, captured from CMOS Sensor | 0.50 MB | ||
Print Image (compressed) | 2.25 | ||
1 Channel of expanded Photo Image | 1.50 | ||
1 Image Pyramid of single channel | 1.00 MB | ||
Intermediate Image Processing | 1.25 | ||
TOTAL | |||
8 MB | |||
Notes: | |||
Uncompressed, the Print Image requires 4.5 MB (1.5 MB per channel). To accommodate other objects in the 8 MB model, the Print Image needs to be compressed. If the chrominance channels are compressed by 4:1 they require only 0.375 MB each). | |||
The memory model described here assumes a single 8 MB RDRAM. Other models of the Artcam may have more memory, and thus not require compression of the Print Image. In addition, with more memory a larger part of the final image can be worked on at once, potentially giving a speed improvement. | |||
Note that ejecting or inserting an Artcard invalidates the 5.5 MB area holding the Print Image, 1 channel of expanded photo image, and the image pyramid. This space may be safely used by the Artcard Interface for decoding the Artcard data. |
The
Although the
All CPU data requests are satisfied from
In any given cycle, in addition to a single 32 bit (4 byte) access to the CPU's cache group (Group 0), 4 simultaneous accesses of 16 bits (2 bytes) to remaining cache groups are permitted on the 8
The
A standard JTAG (Joint Test Action Group) Interface is included in the
Serial Interfaces
USB
This is a standard USB serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it.
This is a standard low-speed serial port, which is connected to the internal chip low speed bus, thereby allowing the CPU to control it. It is designed to be optionally connected to a keyboard to allow simple data input to customize prints.
Authentication Chip Serial Interfaces 64
These are 2 standard low-speed serial ports, which are connected to the internal chip low speed bus, thereby allowing the CPU to control them. The reason for having 2 ports is to connect to both the on-camera Authentication chip, and to the print-roll Authentication chip using separate lines. Only using I line may make it possible for a clone print-roll manufacturer to design a chip which, instead of generating an authentication code, tricks the camera into using the code generated by the authentication chip in the camera.
The parallel interface connects the
Connection | Direction | Pins | ||
Paper transport stepper motor | Out | 4 | ||
Artcard stepper motor | Out | 4 | ||
Zoom stepper motor | Out | 4 | ||
Guillotine motor | Out | 1 | ||
Flash trigger | Out | 1 | ||
Status LCD segment drivers | Out | 7 | ||
Status LCD common drivers | Out | 4 | ||
Artcard illumination LED | Out | 1 | ||
Artcard status LED (red/green) | In | 2 | ||
Artcard sensor | In | 1 | ||
Paper pull sensor | In | 1 | ||
Orientation sensor | In | 2 | ||
Buttons | In | 4 | ||
| 36 | |||
VLIW Input and
The VLIW Input and Output FIFOs are 8 bit wide FIFOs used for communicating between processes and the
A client writes 8-bit data to the
The
To achieve the high processing requirements of Artcam, the
Microcode
Each PU e.g 178 contains a
-
- Hardware design complexity is reduced
- Hardware risk is reduced due to reduction in complexity
- Hardware design time does not depend on all Vark functionality being implemented in dedicated silicon
- Space on chip is reduced overall (due to large number of processes able to be implemented as microcode)
- Functionality can be added to Vark (via microcode) with no impact on hardware design time
Size and Content
The CPU loadedmicrocode RAM 196 for controlling each PU e.g 178 is 128 words, with each word being 96 bits wide. A summary of the microcode size for control of various units of the PU e.g 178 is listed in the following table:
Process Block | Size (bits) | ||
| 3 | ||
Branching (microcode control) | 11 | ||
In | 8 | ||
Out | 6 | ||
| 7 | ||
| 10 | ||
| 6 | ||
| 12 | ||
Adder/Logical | 14 | ||
Multiply/ | 19 | ||
TOTAL | 96 | ||
With 128 instruction words, the
Synchronization Between PUs e.g 178
Each PU e.g 178 contains a 4 bit Synchronization Register 197. It is a mask used to determine which PUs e.g 178 work together, and has one bit set for each of the corresponding PUs e.g 178 that are functioning as a single process. For example, if all of the PUs e.g 178 were functioning as a single process, each of the 4 Synchronization Register 197 s would have all 4 bits set. If there were two asynchronous processes of 2 PUs e.g 178 each, two of the PUs e.g 178 would have 2 bits set in their Synchronization Register 197 s (corresponding to themselves), and the other two would have the other 2 bits set in their Synchronization Register 197 s (corresponding to themselves).
The Synchronization Register 197 is used in two basic ways:
-
- Stopping and starting a given process in synchrony
- Suspending execution within a process
Stopping and Starting Processes
The CPU is responsible for loading themicrocode RAM 196 and loading the execution address for the first instruction (usually 0). When the CPU starts executing microcode, it begins at the specified address.
Execution of microcode only occurs when all the bits of the Synchronization Register 197 are also set in the Common Synchronization Register 197. The CPU therefore sets up all the PUs e.g 178 and then starts or stops processes with a single write to the Common Synchronization Register 197.
This synchronization scheme allows multiple processes to be running asynchronously on the PUs e.g 178, being stopped and started as processes rather than one PU e.g 178 at a time.
Suspending Execution within a Process
In a given cycle, a PU e.g 178 may need to read from or write to a FIFO (based on the opcode of the current microcode instruction). If the FIFO is empty on a read request, or full on a write request, the FIFO request cannot be completed. The PU e.g 178 will therefore assert itsSuspendProcess control signal 198. The SuspendProcess signals from all PUs e.g 178 are fed back to all the PUs e.g 178. The Synchronization Register 197 is ANDed with the 4 SuspendProcess bits, and if the result is non-zero, none of the PU e.g 178's register WriteEnables or FIFO strobes will be set. Consequently none of the PUs e.g 178 that form the same process group as the PU e.g 178 that was unable to complete its task will have their registers or FIFOs updated during that cycle. This simple technique keeps a given process group in synchronization. Each subsequent cycle the PU e.g 178's state machine will attempt to re-execute the microcode instruction at the same address, and will continue to do so until successful. Of course the Common Synchronization Register 197 can be written to by the CPU to stop the entire process if necessary. This synchronization scheme allows any combinations of PUs e.g 178 to work together, each group only affecting its co-workers with regards to suspension due to data not being ready for reading or writing.
Control and Branching
During each cycle, each of the four basic input and calculation units within a PU e.g 178's ALU 188 (Read, Adder/Logic, Multiply/Interpolate, and Barrel Shifter) produces two status bits: a Zero flag and a Negative flag indicating whether the result of the operation during that cycle was 0 or negative. Each cycle one of those 4 status bits is chosen by microcode instructions to be output from the PU e.g 178. The 4 status bits (1 per PU e.g 178's ALU 188) are combined into a 4 bitCommon Status Register 200. During the next cycle, each PU e.g 178's microcode program can select one of the bits from theCommon Status Register 200, and branch to another microcode address dependent on the value of the status bit.
Status Bit
Each PU e.g 178'sALU 188 contains a number of input and calculation units. Each unit produces 2 status bits—a negative flag and a zero flag. One of these status bits is output from the PU e.g 178 when a particular unit asserts the value on the 1-bit tri-state status bit bus. The single status bit is output from the PU e.g 178, and then combined with the other PU e.g 178 status bits to update theCommon Status Register 200. The microcode for determining the output status bit takes the following form:
| Description | |
2 | Select unit whose status bit is to be | |
00 = | ||
01 = Multiply/ | ||
10 = | ||
11 = | ||
1 | 0 = Zero | |
1 = | ||
3 | TOTAL | |
Within the
Branching within Microcode
Each PU e.g 178 contains a 7 bit Program Counter (PC) that holds the current microcode address being executed. Normal program execution is linear, moving from address N in one cycle to address N+1 in the next cycle. Every cycle however, a microcode program has the ability to branch to a different location, or to test a status bit from the
| Description | |
2 | 00 = NOP (PC = PC + 1) |
01 = Branch always | |
10 = Branch if status bit clear | |
11 = Branch if status bit set | |
2 | Select status bit from |
7 | Address to branch to (absolute address, 00-7F) |
11 | TOTAL |
-
-
Read Block 202, for accepting data from the input FIFOs - Write
Block 203, for sending data out via the output FIFOs - Adder/
Logical block 204, for addition & subtraction, comparisons and logical operations - Multiply/Interpolate block 205, for multiple types of interpolations and multiply/accumulates
-
Barrel Shift block 206, for shifting data as required - In block 207, for accepting data from the external crossbar switch 183
- Out
block 208, for sending data to the external crossbar switch 183 - Registers block 215, for holding data in temporary storage
Four specialized 32 bit registers hold the results of the 4 main processing blocks: - M register 209 holds the result of the Multiply/Interpolate block
- L register 209 holds the result of the Adder/Logic block
- S register 209 holds the result of the Barrel Shifter block
- R register 209 holds the result of the
Read Block 202
In addition there are two internal crossbar switches 213m 214 for data transport. The various process blocks are further expanded in the following sections, together with the microcode definitions that pertain to each block. Note that the microcode is decoded within a block to provide the control signals to the various units within.
Data Transfers Between PUs e.g 178
Each PU e.g 178 is able to exchange data via the external crossbar. A PU e.g 178 takes two inputs and outputs two values to the external crossbar. In this way two operands for processing can be obtained in a single cycle, but cannot be actually used in an operation until the following cycle.
In 207
This block is illustrated inFIG. 6 and contains two registers, In1 and In2 that accept data from the external crossbar. The registers can be loaded each cycle, or can remain unchanged. The selection bits for choosing from among the 8 inputs are output to the external crossbar switch 183. The microcode takes the following form:
-
| Description | |
1 | 0 = | |
1 = Load In1 from | ||
3 | | |
1 | 0 = | |
1 = Load In2 from | ||
3 | | |
8 | TOTAL | |
Out 208
Complementing In is
| Description | |
1 | 0 = | |
1 = | ||
1 | Select Register to load [Out1 or Out2] | |
4 | Select input [In1, In2, Out1, Out2, D0, D1, D2, D3, | |
M, L, S, R, K1, K2, 0, 1] | ||
6 | TOTAL | |
Local Registers and Data Transfers within
As noted previously, the
-
- M register 209 holds the result of the Multiply/Interpolate block
- L register 209 holds the result of the Adder/Logic block
- S register 209 holds the result of the Barrel Shifter block
- R register 209 holds the result of the
Read Block 202
The CPU has direct access to these registers, and other units can select them as inputs viaCrossbar2 214. Sometimes it is necessary to delay an operation for one or more cycles. The Registers block contains four 32-bit registers D0-D3 to hold temporary variables during processing. Each cycle one of the registers can be updated, while all the registers are output for other units to use via Crossbar1 213 (which also includes In1, In2, Out1 and Out2). The CPU has direct access to these registers. The data loaded into the specified register can be one of D0-D3 (selected from Crossbar1 213) one of M, L, S, and R (selected from Crossbar2 214), one of 2 programmable constants, or the fixedvalues FIG. 8 . The microcode for Registers takes the following form:
| Description | |
1 | 0 = | |
1 = | ||
2 | Select Register to load [D0-D3] | |
4 | Select input [In1, In2, Out1, Out2, D0, D1, D2, D3, | |
M, L, S, R, K1, K2, 0, 1] | ||
7 | TOTAL | |
Data Transfers Between PUs e.g 178 and DRAM or External Processes
Returning to
Read
The Read process block 202 of
| Description | |
2 | 00 = |
01 = Read from | |
10 = Read from | |
11 = Read from | |
1 | How many |
0 = 8 bits (pad with 0 or sign extend) | |
1 = 16 bits (only valid for Local FIFO reads) | |
1 | 0 = Treat data as unsigned (pad with 0) |
1 = Treat data as signed (sign extend when reading from FIFO) | |
2 | How much to shift data left by: |
00 = 0 bits (no change) | |
01 = 8 | |
10 = 16 | |
11 = 24 | |
4 | Which bytes of R to update (hi to lo order byte) |
Each of the 4 bits represents 1 byte WriteEnable on | |
10 | TOTAL |
Write
The Write process block is able to write to either the common
| Description | |
2 | 00 = | |
01 = Write | ||
10 = Write | ||
11 = Write | ||
1 | Select Output Value [Out1 or Out2] | |
3 | Select part of Output Value to write (32 bits = 4 bytes ABCD) | |
000 = | ||
001 = 0D | ||
010 = 0B | ||
011 = | ||
100 = | ||
101 = BC | ||
110 = | ||
111 = 0 | ||
6 | TOTAL | |
Computational Blocks
Each
Barrel Shifter
The Barrel Shifter process block 206 is shown in more detail in
| Description | |
3 | 000 = |
001 = Shift Left (unsigned) | |
010 = Reserved | |
011 = Shift Left (signed) | |
100 = Shift right (unsigned, no rounding) | |
101 = Shift right (unsigned, with rounding) | |
110 = Shift right (signed, no rounding) | |
111 = Shift right (signed, with rounding) | |
2 | Select Input to barrel shift: |
00 = Multiply/ | |
01 = | |
10 = Adder/ | |
11 = | |
5 | # bits to shift |
1 | Ceiling of 255 |
1 | Floor of 0 (signed data) |
12 | TOTAL |
Adder/
The Adder/Logic process block is shown in more detail in
# Bits | Description |
4 | 0000 = A + B (carry in = 0) |
0001 = A + B (carry in = carry out of | |
previous operation) | |
0010 = A + B + 1 (carry in = 1) | |
0011 = A + 1 (increments A) | |
0100 = A − B − 1 (carry in = 0) | |
0101 = A − B (carry in = carry out of | |
previous operation) | |
0110 = A − B (carry in = 1) | |
0111 = A − 1 (decrements A) | |
1000 = NOP | |
1001 = ABS(A − B) | |
1010 = MIN(A, B) | |
1011 = MAX(A, B) | |
1100 = A AND B (both A & B can be | |
inverted, see below) | |
1101 = A OR B (both A & B can be | |
inverted, see below) | |
1110 = A XOR B (both A & B can be | |
inverted, see below) | |
1111 = A (A can be inverted, see below) | |
1 | If logical operation: |
0 = A = A | |
1 = A = NOT(A) | |
If Adder operation: | |
0 = A is unsigned | |
1 = A is signed | |
1 | If logical operation: |
0 = B = B | |
1 = B = NOT(B) | |
If Adder operation | |
0 = B is unsigned | |
1 = B is signed | |
4 | Select A [In1, In2, Out1, Out2, D0, D1, D2, D3, |
M, L, S, R, K1, K2, K3, K4] | |
4 | Select B [In1, In2, Out1, Out2, D0, D1, D2, D3, |
M, L, S, R, K1, K2, K3, K4] | |
14 | TOTAL |
Multiply/Interpolate 205
The Multiply/Interpolate process block is shown in more detail in
# Bits | Description |
4 | 0000 = (A10 * B10) + V |
0001 = (A0 * B0) + (A1 * B1) + V | |
0010 = (A10 * B10) − V | |
0011 = V − (A10 * B10) | |
0100 = Interpolate A0, B0 by f0 | |
0101 = Interpolate A0, B0 by f0, A1, B1, by f1 | |
0110 = Interpolate A0, B0 by f0, A1, B1, by f1, A2, B2 by f2 | |
0111 = Interpolate A0, B0 by f0, A1, B1, by f1, A2, B2 by f2, A3, B3 by f3 | |
1000 = Interpolate 16 bits stage 1 [M = A10 * f10] | |
1001 = Interpolate 16 bits stage 2 [M = M + (A10 * f10)] | |
1010 = Tri-linear interpolate A by f stage 1 [M = A0f0 + A1f1 + A2f2 + A3f3] | |
1011 = Tri-linear interpolate A by f stage 2 [M = M + A0f0 + A1f1 + A2f2 + A3f3] | |
1100 = Bi-linear interpolate A by f stage 1 [M = A0f0 + A1f1] | |
1101 = Bi-linear interpolate A by f stage 2 [M = M + A0f0 + A1f1] | |
1110 = Bi-linear interpolate A by f complete [M = A0f0 + A1f1 + A2f2 + A3f3] | |
1111 = NOP | |
4 | Select A [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, K1, K2, K3, K4] |
4 | Select B [In1, In2, Out1, Out2, D0, D1, D2, D3, M, L, S, R, K1, K2, K3, K4] |
If Mult: | |
4 | Select V [In1, In2, Out1, Out2, D0, D1, D2, D3, K1, K2, K3, K4, Adder result, M, 0, 1] |
1 | Treat A as signed |
1 | Treat B as signed |
1 | Treat V as signed |
If Interp: | |
4 | Select basis for f [In1, In2, Out1, Out2, D0, D1, D2, D3, K1, K2, K3, K4, X, X, X, X] |
1 | Select interpolation f generation from P1 or P2 |
Pn is interpreted as # fractional bits in f | |
If Pn = 0, f is range 0 . . . 255 representing 0 . . . 1 | |
2 | Reserved |
19 | TOTAL |
The same 4 bits are used for the selection of V and f, although the last 4 options for V don't generally make sense as f values. Interpolating with a factor of 1 or 0 is pointless, and the previous multiplication or current result is unlikely to be a meaningful value for f.
I/
The I/O Address Generators are shown in more detail in
-
- Image Iterators, used to iterate (reading, writing or both) through pixels of an image in a variety of ways
- Table I/O, used to randomly access pixels in images, data in tables, and to simulate FIFOs in DRAM
Each of the I/O Address Generators Data cache 76, making 2 bus connections per PU e.g 178, and a total of 8 buses over the entireVLIW Vector Processor 74. TheData cache 76 is able to service 4 of the maximum 8 requests from the 4 PUs e.g 178 each cycle. The Input and Output FIFOs are 8 entry deep 16-bit wide FIFOs. The various types of address generation (Image Iterators and Table I/O) are described in the subsequent sections.
Registers
The I/O Address Generator has a set of registers for that are used to control address generation. The addressing mode also determines how the data is formatted and sent into the local Input FIFO, and how data is interpreted from the local Output FIFO. The CPU is able to access the registers of the I/O Address Generator via the low speed bus. The first set of registers define the housekeeping parameters for the I/O Generator:
# | ||
Register Name | bits | Description |
Reset | 0 | A write to this register halts any |
operations, and writes 0s to all the | ||
data registers of the I/O Generator. | ||
The input and output FIFOs are not | ||
cleared. | ||
Go | 0 | A write to this register restarts |
the counters according to the current | ||
setup. For example, if the I/O Generator | ||
is a Read Iterator, and the Iterator | ||
is currently halfway through the image, | ||
a write to Go will cause the reading | ||
to begin at the start of the image again. | ||
While the I/O Generator is performing, | ||
the Active bit of the Status register | ||
will be set. | ||
Halt | 0 | A write to this register stops any |
current activity and clears the Active | ||
bit of the Status register. If the | ||
Active bit is already cleared, writing | ||
to this register has no effect. | ||
Continue | 0 | A write to this register continues |
the I/O Generator from the current setup. | ||
Counters are not reset, and FIFOs are | ||
not cleared. A write to this register | ||
while the I/O Generator is active has | ||
no effect. | ||
| 1 | 0 = Don't clear FIFOs on a write to |
the Go bit. | ||
1 = Do clear FIFOs on a write to the | ||
Go bit. | ||
| 8 | Status flags |
The Status register has the following values
Register Name | # bits | Description | ||
Active | 1 | 0 = Currently inactive | ||
1 = Currently active | ||||
Reserved | 7 | — | ||
Caching
Several registers are used to control the caching mechanism, specifying which cache group to use for inputs, outputs etc. See the section on the
Register Name | # | Description |
CacheGroup1 | ||
4 | Defines cache group to read data from | |
| 4 | Defines which cache group to write data to, |
and in the case of the ImagePyramidLookup | ||
I/O mode, defines the cache to use for | ||
reading the Level Information Table. | ||
Image Iterators=Sequential Automatic Access to Pixels
The primary image pixel access method for software and hardware algorithms is via Image Iterators. Image iterators perform all of the addressing and access to the caches of the pixels within an image channel and read, write or read & write pixels for their client. Read Iterators read pixels in a specific order for their clients, and Write Iterators write pixels in a specific order for their clients. Clients of Iterators read pixels from the local Input FIFO or write pixels via the local Output FIFO.
Read Image Iterators read through an image in a specific order, placing the pixel data into the local Input FIFO. Every time a client reads a pixel from the Input FIFO, the Read Iterator places the next pixel from the image (via the Data cache 76) into the FIFO.
Write Image Iterators write pixels in a specific order to write out the entire image. Clients write pixels to the Output FIFO that is in turn read by the Write Image Iterator and written to DRAM via the
Read Iterators | Write Iterators | ||
Sequential Read | Sequential Write | ||
Box Read | — | ||
Vertical Strip Read | Vertical Strip Write | ||
The 4 bit Address Mode Register is used to determine the Iterator type:
Bit | Address Mode | ||
3 | 0 = This addressing mode is an | ||
2 to 0 | | ||
001 = Sequential Iterator | |||
010 = Box [read only] | |||
100 = Vertical Strip | |||
remaining bit patterns are reserved | |||
The Access Specific registers are used as follows:
Register Name | Local Name | Description |
AccessSpecific1 | Flags | Flags used for reading and |
writing | ||
AccessSpecific2 | XBoxSize | Determines the size in X of Box Read. |
Valid values are 3, 5, and 7. | ||
AccessSpecific3 | YBoxSize | Determines the size in Y of Box Read. |
Valid values are 3, 5, and 7. | ||
AccessSpecific4 | BoxOffset | Offset between one pixel center and |
the next during a Box Read only. | ||
Usual value is 1, but other useful | ||
values include 2, 4, 8 . . . | ||
See Box Read for more details. | ||
The Flags register (AccessSpecific1) contains a number of flags used to determine factors affecting the reading and writing of data. The Flags register has the following composition:
Label | # | Description | ||
ReadEnable |
1 | Read data from | ||
WriteEnable | |||
1 | Write data to DRAM [not valid for | ||
Box mode] | |||
| 1 | Pass X (pixel) ordinate back to | |
Input | |||
PassY | |||
1 | Pass Y (row) ordinate back to | ||
Input | |||
Loop | |||
1 | 0 = Do not loop through | ||
1 = Loop through data | |||
Reserved | 11 | Must be 0 | |
Notes on ReadEnable and WriteEnable:
-
- When ReadEnable is set, the I/O Address Generator acts as a Read Iterator, and therefore reads the image in a particular order, placing the pixels into the Input FIFO.
- When WriteEnable is set, the I/O Address Generator acts as a Write Iterator, and therefore writes the image in a particular order, taking the pixels from the Output FIFO.
- When both ReadEnable and WriteEnable are set, the I/O Address Generator acts as a Read Iterator and as a Write Iterator, reading pixels into the Input FIFO, and writing pixels from the Output FIFO. Pixels are only written after they have been read—i.e. the Write Iterator will never go faster than the Read Iterator. Whenever this mode is used, care should be taken to ensure balance between in and out processing by the VLIW microcode. Note that separate cache groups can be specified on reads and writes by loading different values in CacheGroup1 and CacheGroup2.
Notes on PassX and PassY: - If PassX and PassY are both set, the Y ordinate is placed into the Input FIFO before the X ordinate.
- PassX and PassY are only intended to be set when the ReadEnable bit is clear. Instead of passing the ordinates to the address generator, the ordinates are placed directly into the Input FIFO. The ordinates advance as they are removed from the FIFO.
- If WriteEnable bit is set, the VLIW program must ensure that it balances reads of ordinates from the Input FIFO with writes to the Output FIFO, as writes will only occur up to the ordinates (see note on ReadEnable and WriteEnable above).
Notes on Loop: - If the Loop bit is set, reads will recommence at [StartPixel, StartRow] once it has reached [EndPixel, EndRow]. This is ideal for processing a structure such a convolution kernel or a dither cell matrix, where the data must be read repeatedly.
- Looping with ReadEnable and WriteEnable set can be useful in an environment keeping a single line history, but only where it is useful to have reading occur before writing. For a FIFO effect (where writing occurs before reading in a length constrained fashion), use an appropriate Table I/O addressing mode instead of an Image Iterator.
- Looping with only WriteEnable set creates a written window of the last N pixels. This can be used with an asynchronous process that reads the data from the window. The Artcard Reading algorithm makes use of this mode.
Sequential Read and Write Iterators
FIG. 17 illustrates the pixel data format. The simplest Image Iterators are the Sequential Read Iterator and corresponding Sequential Write Iterator. The Sequential Read Iterator presents the pixels from a channel one line at a time from top to bottom, and within a line, pixels are presented left to right. The padding bytes are not presented to the client. It is most useful for algorithms that must perform some process on each pixel from an image but don't care about the order of the pixels being processed, or want the data specifically in this order. Complementing the Sequential Read Iterator is the Sequential Write Iterator. Clients write pixels to the Output FIFO. A Sequential Write Iterator subsequently writes out a valid image using appropriate caching and appropriate padding bytes. Each Sequential Iterator requires access to 2 cache lines. When reading, while 32 pixels are presented from one cache line, the other cache line can be loaded from memory. When writing, while 32 pixels are being filled up in one cache line, the other can be being written to memory.
A process that performs an operation on each pixel of an image independently would typically use a Sequential Read Iterator to obtain pixels, and a Sequential Write Iterator to write the new pixel values to their corresponding locations within the destination image. Such a process is shown inFIG. 18 .
In most cases, the source and destination images are different, and are represented by 2 I/O Address Generators
Box Read Iterator
The Box Read Iterator is used to present pixels in an order most useful for performing operations such as general-purpose filters and convolve. The Iterator presents pixel values in a square box around the sequentially read pixels. The box is limited to being 1, 3, 5, or 7 pixels wide in X and Y (set XBoxSize and YBoxSize—they must be the same value or 1 in one dimension and 3, 5, or 7 in the other). The process is shown inFIG. 19 : BoxOffset: This special purpose register is used to determine a sub-sampling in terms of which input pixels will be used as the center of the box. The usual value is 1, which means that each pixel is used as the center of the box. The value “2” would be useful in scaling an image down by 4:1 as in the case of building an image pyramid. Using pixel addresses from the previous diagram, the box would be centered onpixel 0, then 2, 8, and 10. The Box Read Iterator requires access to a maximum of 14 (2×7) cache lines. While pixels are presented from one set of 7 lines, the other cache lines can be loaded from memory.
Box Write Iterator
There is no corresponding Box Write Iterator, since the duplication of pixels is only required on input. A process that uses the Box Read Iterator for input would most likely use the Sequential Write Iterator for output since they are in sync. A good example is the convolver, where N input pixels are read to calculate 1 output pixel. The process flow is as illustrated inFIG. 20 . The source and destination images should not occupy the same memory when using a Box Read Iterator, as subsequent lines of an image require the original (not newly calculated) values.
Vertical-Strip Read and Write Iterators
In some instances it is necessary to write an image in output pixel order, but there is no knowledge about the direction of coherence in input pixels in relation to output pixels. An example of this is rotation. If an image is rotated 90 degrees, and we process the output pixels horizontally, there is a complete loss of cache coherence. On the other hand, if we process the output image one cache line's width of pixels at a time and then advance to the next line (rather than advance to the next cache-line's worth of pixels on the same line), we will gain cache coherence for our input image pixels. It can also be the case that there is known ‘block’ coherence in the input pixels (such as color coherence), in which case the read governs the processing order, and the write, to be synchronized, must follow the same pixel order.
The order of pixels presented as input (Vertical-Strip Read), or expected for output (Vertical-Strip Write) is the same. The order ispixels 0 to 31 fromline 0, thenpixels 0 to 31 ofline 1 etc for all lines of the image, thenpixels 32 to 63 ofline 0,pixels 32 to 63 ofline 1 etc. In the final vertical strip there may not be exactly 32 pixels wide. In this case only the actual pixels in the image are presented or expected as input. This process is illustrated inFIG. 21 .
process that requires only a Vertical-Strip Write Iterator will typically have a way of mapping input pixel coordinates given an output pixel coordinate. It would access the input image pixels according to this mapping, and coherence is determined by having sufficient cache lines on the ‘random-access’ reader for the input image. The coordinates will typically be generated by setting the PassX and PassY flags on the VerticalStripWrite Iterator, as shown in the process overview illustrated inFIG. 22 .
It is not meaningful to pair a Write Iterator with a Sequential Read Iterator or a Box read Iterator, but a Vertical-Strip Write Iterator does give significant improvements in performance when there is a non trivial mapping between input and output coordinates.
1D, 2D and 3D tables are supported, with particular modes targeted at interpolation. To reduce complexity on the VLIW client side, the index values are treated as fixed-point numbers, with AccessSpecific registers defining the fixed point and therefore which bits should be treated as the integer portion of the index. Data formats are restricted forms of the general Image Characteristics in that the PixelOffset register is ignored, the data is assumed to be contiguous within a row, and can only be 8 or 16 bits (1 or 2 bytes) per data element. The 4 bit Address Mode Register is used to determine the I/O type:
Bit | Address Mode | ||
3 | 1 = This addressing mode is Table I/ | ||
2 to 0 | 000 = | ||
001 = 1D Interpolate (linear) | |||
010 = DRAM FIFO | |||
011 = Reserved | |||
100 = 2D Interpolate (bi-linear) | |||
101 = Reserved | |||
110 = 3D Interpolate (tri-linear) | |||
111 = Image Pyramid Lookup | |||
The access specific registers are:
Local | |||
Register Name | Name | #bits | Description |
AccessSpecific1 | Flags | 8 | General flags for reading and writing. | |
See below for more information. | ||||
AccessSpecific2 | FractX | 8 | Number of fractional bits in X index | |
AccessSpecific3 | FractY | 8 | Number of fractional bits in Y index | |
AccessSpecific4 | FractZ | 8 | Number of fractional bits in Z index | |
(low 8 bits/ | ZOffset | 12 or | See below | |
12 or 24 bits)) | 24 | |||
FractX, FractY, and FractZ are used to generate addresses based on indexes, and interpret the format of the index in terms of significant bits and integer/fractional components. The various parameters are only defined as required by the number of dimensions in the table being indexed. A 1D table only needs FractX, a 2D table requires FractX and FractY. Each Fract_ value consists of the number of fractional bits in the corresponding index. For example, an X index may be in the format 5:3. This would indicate 5 bits of integer, and 3 bits of fraction. FractX would therefore be set to 3. A simple 1D lookup could have the format 8:0, i.e. no fractional component at all. FractX would therefore be 0. ZOffset is only required for 3D lookup and takes on two different interpretations. It is described more fully in the 3D-table lookup section. The Flags register (AccessSpecific1) contains a number of flags used to determine factors affecting the reading (and in one case, writing) of data. The Flags register has the following composition:
Label | # | Description | ||
ReadEnable | ||||
1 | Read data from | |||
WriteEnable | ||||
1 | Write data to DRAM [only valid for | |||
1D direct lookup] | ||||
| 1 | 0 = 8 | ||
1 = 16 bit data | ||||
Reserved | 5 | Must be 0 | ||
With the exception of the 1D Direct Lookup and DRAM FIFO, all Table I/O modes only support reading, and not writing. Therefore the ReadEnable bit will be set and the WriteEnable bit will be clear for all I/O modes other than these two modes. The 1D Direct Lookup supports 3 modes:
-
- Read only, where the ReadEnable bit is set and the WriteEnable bit is clear
- Write only, where the ReadEnable bit is clear and the WriteEnable bit is clear
- Read-Modify-Write, where both ReadEnable and the WriteEnable bits are set
The different modes are described in the 1D Direct Lookup section below.
The DRAM FIFO mode supports only 1 mode: - Write-Read mode, where both ReadEnable and the WriteEnable bits are set
This mode is described in the DRAM FIFO section below. The DataSize flag determines whether the size of each data elements of the table is 8 or 16 bits. Only the two data sizes are supported. 32 bit elements can be created in either of 2 ways depending on the requirements of the process: - Reading from 2 16-bit tables simultaneously and combining the result. This is convenient if timing is an issue, but has the disadvantage of consuming 2 I/
O Address Generators - Reading from a 16-bit table twice and combining the result. This is convenient since only 1 lookup is used, although different indexes must be generated and passed into the lookup.
1 Dimensional Structures
Direct Lookup
A direct lookup is a simple indexing into a 1 dimensional lookup table. Clients can choose between 3 access modes by setting appropriate bits in the Flags register: - Read only
- Write only
- Read-Modify-Write
Read Only
A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The fractional component of the index is completely ignored. If the index is out of bounds, the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. The address generation is straightforward: - If DataSize indicates 8 bits, X is barrel-shifted right FractX bits, and the result is added to the table's base address ImageStart.
- If DataSize indicates 16 bits, X is barrel-shifted right FractX bits, and the result shifted left 1 bit (bit0 becomes 0) is added to the table's base address ImageStart.
The 8 or 16-bit data value at the resultant address is placed into the Input FIFO. Address generation takes 1 cycle, and transferring the requested data from the cache to the Output FIFO also takes 1 cycle (assuming a cache hit). For example, assume we are looking up values in a 256-entry table, where each entry is 16 bits, and the index is a 12 bit fixed-point format of 8:4. FractX should be 4, andDataSize 1. When an index is passed to the lookup, we shift right 4 bits, then add the result shifted left 1 bit to ImageStart.
Write Only
A client passes the fixed-point index X into the Output FIFO followed by the 8 or 16-bit value that is to be written to the specified location in the table. A complete transfer takes a minimum of 2 cycles. 1 cycle for address generation, and 1 cycle to transfer the data from the FIFO to DRAM. There can be an arbitrary number of cycles between a VLIW process placing the index into the FIFO and placing the value to be written into the FIFO. Address generation occurs in the same way as Read Only mode, but instead of the data being read from the address, the data from the Output FIFO is written to the address. If the address is outside the table range, the data is removed from the FIFO but not written to DRAM.
Read-Modify-Write
A client passes the fixed-point index X into the Output FIFO, and the 8 or 16-bit value at Table[Int(X)] is returned in the Input FIFO. The next value placed into the Output FIFO is then written to Table[Int(X)], replacing the value that had been returned earlier. The general processing loop then, is that a process reads from a location, modifies the value, and writes it back. The overall time is 4 cycles: - Generate address from index
- Return value from table
- Modify value in some way
- Write it back to the table
There is no specific read/write mode where a client passes in a flag saying “read from X” or “write to X”. Clients can simulate a “read from X” by writing the original value, and a “write to X” by simply ignoring the returned value. However such use of the mode is not encouraged since each action consumes a minimum of 3 cycles (the modify is not required) and 2 data accesses instead of 1 access as provided by the specific Read and Write modes.
Interpolate Table
This is the same as a Direct Lookup in Read mode except that two values are returned for a given fixed-point index X instead of one. The values returned are Table[Int(X)], and Table[Int(X)+1]. If either index is out of bounds the DuplicateEdge flag determines whether the edge pixel or ConstantPixel is returned. Address generation is the same as Direct Lookup, with the exception that the second address is simply Address1+ 1 or 2 depending on 8 or 16 bit data. Transferring the requested data to the Output FIFO takes 2 cycles (assuming a cache hit), although two 8-bit values may actually be returned from the cache to the Address Generator in a single 16-bit fetch.
DRAM FIFO
A special case of a read/write 1D table is a DRAM FIFO. It is often necessary to have a simulated FIFO of a given length using DRAM and associated caches. With a DRAM FIFO, clients do not index explicitly into the table, but write to the Output FIFO as if it was one end of a FIFO and read from the Input FIFO as if it was the other end of the same logical FIFO. 2 counters keep track of input and output positions in the simulated FIFO, and cache to DRAM as needed. Clients need to set both ReadEnable and WriteEnable bits in the Flags register.
An example use of a DRAM FIFO is keeping a single line history of some value. The initial history is written before processing begins. As the general process goes through a line, the previous line's value is retrieved from the FIFO, and this line's value is placed into the FIFO (this line will be the previous line when we process the next line). So long as input and outputs match each other on average, the Output FIFO should always be full. Consequently there is effectively no access delay for this kind of FIFO (unless the total FIFO length is very small—say 3 or 4 bytes, but that would defeat the purpose of the FIFO).
2 Dimensional Tables
Direct Lookup
A 2 dimensional direct lookup is not supported. Since all cases of 2D lookups are expected to be accessed for bi-linear interpolation, a special bi-linear lookup has been implemented.
Bi-Linear Lookup
This kind of lookup is necessary for bi-linear interpolation of data from a 2D table. Given fixed-point X and Y coordinates (placed into the Output FIFO in the order Y, X), 4 values are returned after lookup. The values (in order) are: - Table[Int(X), Int(Y)]
- Table[Int(X)+1, Int(Y)]
- Table[Int(X), Int(Y)+1]
- Table[Int(X)+1, Int(Y)+1]
The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 2 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 4 cycles, 1 entry per cycle. Address generation takes 2 cycles. The first cycle has the index (Y) barrel-shifted right FractY bits being multiplied by RowOffset, with the result added to ImageStart. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the first cycle. This gives us address Adr=address of Table[Int(X), Int(Y)]:
Adr=ImageStart
+ShiftRight(Y, FractY)*RowOffset)+
ShiftRight(X, FractX)
We keep a copy of Adr in AdrOld for use fetching subsequent entries. - If the data is 8 bits, the timing is 2 cycles of address generation, followed by 2 cycles of data being returned (2 table entries per cycle).
- If the data is 16 bits, the timing is 2 cycles of address generation, followed by 4 cycles of data being returned (1 entry per cycle)
The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:
Cycle | Calculation while fetching 2 × 8-bit data entries from |
1 | Adr = Adr + |
2 | <preparing next lookup> |
Cycle | Calculation while fetching 1 × 16-bit data entry from |
1 | Adr = Adr + 2 |
2 | Adr = AdrOld + |
3 | Adr = Adr + 2 |
4 | <preparing next lookup> |
In both cases, the first cycle of address generation can overlap the insertion of the X index into the FIFO, so the effective timing can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (2 or 4 cycles per set).
3 Dimensional Lookup
Direct Lookup
Since all cases of 2D lookups are expected to be accessed for tri-linear interpolation, two special tri-linear lookups have been implemented. The first is a straightforward lookup table, while the second is for tri-linear interpolation from an Image Pyramid.
Tri-Linear Lookup
This type of lookup is useful for 3D tables of data, such as color conversion tables. The standard image parameters define a single XY plane of the data—i.e. each plane consists of ImageHeight rows, each row containing RowOffset bytes. In most circumstances, assuming contiguous planes, one XY plane will be ImageHeight×RowOffset bytes after another. Rather than assume or calculate this offset, the software via the CPU must provide it in the form of a 12-bit ZOffset register. In this form of lookup, given 3 fixed-point indexes in the order Z, Y, X, 8 values are returned in order from the lookup table:
-
- Table[Int(X), Int(Y), Int(Z)]
- Table[Int(X)+1, Int(Y), Int(Z)]
- Table[Int(X), Int(Y)+1, Int(Z)]
- Table[Int(X)+1, Int(Y)+1, Int(Z)]
- Table[Int(X), Int(Y), Int(Z)+1]
- Table[Int(X)+1, Int(Y), Int(Z)+1]
- Table[Int(X), Int(Y)+1, Int(Z)+1]
- Table[Int(X)+1, Int(Y)+1, Int(Z)+1]
The order of values returned gives the best cache coherence. If the data is 8-bit, 2 values are returned each cycle over 4 cycles with the low order byte being the first data element. If the data is 16-bit, the 4 values are returned in 8 cycles, 1 entry per cycle. Address generation takes 3 cycles. The first cycle has the index (Z) barrel-shifted right FractZ bits being multiplied by the 12-bit ZOffset and added to ImageStart. The second cycle has the index (Y) barrel-shifted right FractY bits being multiplied by Rowoffset, with the result added to the result of the previous cycle. The second cycle shifts the X index right by FractX bits, and then either the result (in the case of 8 bit data) or the result shifted left 1 bit (in the case of 16 bit data) is added to the result from the second cycle. This gives us address Adr=address of Table[Int(X), Int(Y), Int(Z)]:
Adr=ImageStart
+(ShiftRight(Z, FractZ)*ZOffset)
+(ShiftRight(Y, FractY)*RowOffset)
+ShiftRight(X, FractX)
We keep a copy of Adr in AdrOld for use fetching subsequent entries. - If the data is 8 bits, the timing is 2 cycles of address generation, followed by 2 cycles of data being returned (2 table entries per cycle).
- If the data is 16 bits, the timing is 2 cycles of address generation, followed by 4 cycles of data being returned (1 entry per cycle)
The following 2 tables show the method of address calculation for 8 and 16 bit data sizes:
Cycle | Calculation while fetching 2 × 8-bit data entries from |
1 | Adr = Adr + |
2 | Adr = AdrOld + |
3 | Adr = Adr + |
4 | <preparing next lookup> |
Cycle | Calculation while fetching 1 × 16-bit data entries from |
1 | Adr = Adr + 2 |
2 | Adr = AdrOld + |
3 | Adr = Adr + 2 |
4 | Adr, AdrOld = AdrOld + |
5 | Adr = Adr + 2 |
6 | Adr = AdrOld + |
7 | Adr = Adr + 2 |
8 | <preparing next lookup> |
In both cases, the cycles of address generation can overlap the insertion of the indexes into the FIFO, so the effective timing for a single one-off lookup can be as low as 1 cycle for address generation, and 4 cycles of return data. If the generation of indexes is 2 steps ahead of the results, then there is no effective address generation time, and the data is simply produced at the appropriate rate (4 or 8 cycles per set).
Image Pyramid Lookup
During brushing, tiling, and warping it is necessary to compute the average color of a particular area in an image. Rather than calculate the value for each area given, these functions make use of an image pyramid. The description and construction of an image pyramid is detailed in the section on Internal Image Formats in the
-
- The pixel at [Int(X), Int(Y)], level Int(Z)
- The pixel at [Int(X)+1, Int(Y)], level Int(Z)
- The pixel at [Int(X), Int(Y)+1], level Int(Z)
- The pixel at [Int(X)+1, Int(Y)+1], level Int(Z)
- The pixel at [Int(X), Int(Y)], level Int(Z)+1
- The pixel at [Int(X)+1, Int(Y)], level Int(Z)+1
- The pixel at [Int(X), Int(Y)+1], level Int(Z)+1
- The pixel at [Int(X)+1, Int(Y)+1], level Int(Z)+1
The 8 pixels are returned as 4×16 bit entries, with X and X+1 entries combined hi/lo. For example, if the scaled (X, Y) coordinate was (10.4, 12.7) the first 4 pixels returned would be: (10, 12), (11, 12), (10, 13) and (11, 13). When a coordinate is outside the valid range, clients have the choice of edge pixel duplication or returning of a constant color value via the DuplicateEdgePixels and ConstantPixel registers (only the low 8 bits are used). When the Image Pyramid has been constructed, there is a simple mapping fromlevel 0 coordinates to level Z coordinates. The method is simply to shift the X or Y coordinate right by z bits. This must be done in addition to the number of bits already shifted to retrieve the integer portion of the coordinate (i.e. shifting right FractX and FractY bits for X and Y ordinates respectively). To find the ImageStart and RowOffset value for a given level of the image pyramid, the 24-bit ZOffset register is used as a pointer to a Level Information Table. The table is an array of records, each representing a given level of the pyramid, ordered by level number. Each record consists of a 16-bit offset ZOffset from ImageStart to that level of the pyramid (64-byte aligned address as lower 6 bits of the offset are not present), and a 12 bit ZRowOffset for that level.Element 0 of the table would contain a ZOffset of 0, and a ZRowOffset equal to the general register RowOffset, as it simply points to the full sized image. The ZOffset value at element N of the table should be added to ImageStart to yield the effective ImageStart of level N of the image pyramid. The RowOffset value in element N of the table contains the RowOffset value for level N. The software running on the CPU must set up the table appropriately before using this addressing mode. The actual address generation is outlined here in a cycle by cycle description:
Load | From | |||
Cycle | Register | | Other Operations | |
0 | — | — | ZAdr = ShiftRight(Z, FractZ) + ZOffset |
ZInt = ShiftRight(Z, FractZ) | |||
1 | ZOffset | Zadr | ZAdr += 2 |
YInt = ShiftRight(Y, FractY) | |||
2 | ZRowOffset | ZAdr | ZAdr += 2 |
YInt = ShiftRight(YInt, ZInt) | |||
Adr = ZOffset + | |||
3 | ZOffset | ZAdr | ZAdr += 2 |
Adr += ZrowOffset * YInt | |||
XInt = ShiftRight(X, FractX) | |||
4 | ZAdr | ZAdr | Adr += ShiftRight(XInt, ZInt) |
ZOffset += ShiftRight(XInt, 1) | |||
5 | FIFO | Adr | Adr += ZrowOffset |
ZOffset += | |||
6 | FIFO | Adr | Adr = (ZAdr * ShiftRight(Yint, 1)) + |
| |||
7 | FIFO | Adr | Adr += |
8 | FIFO | Adr | < |
The address generation as described can be achieved using a single Barrel Shifter, 2 adders, and a single 16×16 multiply/add unit yielding 24 bits. Although some cycles have 2 shifts, they are either the same shift value (i.e. the output of the Barrel Shifter is used two times) or the shift is 1 bit, and can be hard wired. The following internal registers are required: ZAdr, Adr, ZInt, YInt, XInt, ZRowOffset, and ZImageStart. The _Int registers only need to be 8 bits maximum, while the others can be up to 24 bits. Since this access method only reads from, and does not write to image pyramids, the CacheGroup2 is used to lookup the Image Pyramid Address Table (via ZAdr). CacheGroup1 is used for lookups to the image pyramid itself (via Adr). The address table is around 22 entries (depending on original image size), each of 4 bytes. Therefore 3 or 4 cache lines should be allocated to CacheGroup2, while as many cache lines as possible should be allocated to CacheGroup1. The timing is 8 cycles for returning a set of data, assuming that
Generation of Coordinates Using
Some functions that are linked to Write Iterators require the X and/or Y coordinates of the current pixel being processed in part of the processing pipeline. Particular processing may also need to take place at the end of each row, or column being processed. In most cases, the PassX and PassY flags should be sufficient to completely generate all coordinates. However, if there are special requirements, the following functions can be used. The calculation can be spread over a number of ALUs, for a single cycle generation, or be in a
Generate Sequential [X, Y]
When a process is processing pixels in sequential order according to the Sequential Read Iterator (or generating pixels and writing them out to a Sequential Write Iterator), the following process can be used to generate X, Y coordinates instead of PassX/PassY flags as shown in
The coordinate generator counts up to ImageWidth in the X ordinate, and once per ImageWidth pixels increments the Y ordinate. The actual process is illustrated in
Constant | Value | ||
K1 | ImageWidth | ||
K2 | ImageHeight (optional) | ||
The following registers are used to hold temporary variables:
Variable | Value | ||
Reg1 | X (starts at 0 each line) | ||
Reg2 | Y (starts at 0) | ||
The requirements are summarized as follows:
Requirements | *+ | + | R | K | | Iterators | ||
General | ||||||||
0 | 3/4 | 2 | 1/2 | 0 | 0 | |||
| 0 | 3/4 | 2 | 1/2 | 0 | 0 | ||
Generate Vertical Strip [X, Y]
When a process is processing pixels in order to write them to a Vertical Strip Write Iterator, and for some reason cannot use the PassX/PassY flags, the process as illustrated in
Constant | Value | ||
K1 | 32 | ||
K2 | ImageWidth | ||
K3 | ImageHeight | ||
The following registers are used to hold temporary variables:
Variable | Value | ||
Reg1 | StartX (starts at 0, and is incremented by 32 | ||
once per vertical strip) | |||
Reg2 | X | ||
Reg3 | EndX (starts at 32 and is incremented by 32 to | ||
a maximum of ImageWidth) once | |||
per vertical strip) | |||
Reg4 | Y | ||
The requirements are summarized as follows:
Requirements | *+ | + | R | K | | Iterators | ||
General | ||||||||
0 | 4 | 4 | 3 | 0 | 0 | |||
| 0 | 4 | 4 | 3 | 0 | 0 | ||
The calculations that occur once per vertical strip (2 additions, one of which has an associated MIN) are not included in the general timing statistics because they are not really part of the per pixel timing. However they do need to be taken into account for the programming of the microcode for the particular function.
Image Sensor Interface (ISI 83)
The Image Sensor Interface (ISI 83) takes data from the CMOS Image Sensor and makes it available for storage in DRAM. The image sensor has an aspect ratio of 3:2, with a typical resolution of 750×500 samples, yielding 375K (8 bits per pixel). Each 2×2 pixel block has the configuration as shown in
-
- A small VLIW program reads the pixels from the FIFO and writes them to DRAM via a Sequential Write Iterator.
- The Photo Image in DRAM is rotated 90, 180 or 270 degrees according to the orientation of the camera when the photo was taken.
If the rotation is 0 degrees, then step 1 merely writes the Photo Image out to the final Photo Image location andstep 2 is not performed. If the rotation is other than 0 degrees, the image is written out to a temporary area (for example into the Print Image memory area), and then rotated duringstep 2 into the final Photo Image location.Step 1 is very simple microcode, taking data from theVLIW Input FIFO 78 and writing it to a Sequential Write Iterator.Step 2's rotation is accomplished by using the accelerated Vark Affine Transform function. The processing is performed in 2 steps in order to reduce design complexity and to re-use the Vark affine transform rotate logic already required for images. This is acceptable since both steps are completed in approximately 0.03 seconds, a time imperceptible to the operator of the Artcam. Even so, the read process is sensor speed bound, taking 0.02 seconds to read the full frame, and approximately 0.01 seconds to rotate the image.
The orientation is important for converting between the sensed Photo Image and the internal format image, since the relative positioning of R, G, and B pixels changes with orientation. The processed image may also have to be rotated during the Print process in order to be in the correct orientation for printing. The 3D model of the Artcam has 2 image sensors, with their inputs multiplexed to a single ISI 83 (different microcode, but same ACP 31). Since each sensor is a frame store, both images can be taken simultaneously, and then transferred to memory one at a time.
Display Controller 88
When the “Take” button on an Artcam is half depressed, the TFT will display the current image from the image sensor (converted via a simple VLIW process). Once the Take button is fully depressed, the Taken Image is displayed. When the user presses the Print button and image processing begins, the TFT is turned off. Once the image has been printed the TFT is turned on again. TheDisplay Controller 88 is used in those Artcam models that incorporate a flat panel display. An example display is a TFT LCD ofresolution 240×160 pixels. The structure of theDisplay Controller 88 is illustrated inFIG. 29 . TheDisplay Controller 88 State Machine contains registers that control the timing of the Sync Generation, where the display image is to be taken from (in DRAM via theData cache 76 via a specific Cache Group), and whether the TFT should be active or not (via TFT Enable) at the moment. The CPU can write to these registers via the low speed bus. Displaying a 240×160 pixel image on an RGB TFT requires 3 components per pixel. The image taken from DRAM is displayed via 3 DACs, one for each of the R, G, and B output signals. At an image refresh rate of 30 frames per second (60 fields per second) theDisplay Controller 88 requires data transfer rates of:
240×160×3×30=3.5 MB per second
This data rate is low compared to the rest of the system. However it is high enough to cause VLIW programs to slow down during the intensive image processing. The general principles of TFT operation should reflect this.
Image Data Formats
-
- CCD Image, which is the Input Image captured from the CCD.
- Internal Image format—the Image format utilised internally by the Artcam device.
-
- Different CCDs to be used in different cameras
- Different inks (in different print rolls over time) to be used in the same camera
- Separation of CCD selection from ACP design path
- A well defined internal color space for accurate color processing
Artcard Interface 87
The Artcard Interface (AI) takes data from the linear image Sensor while an Artcard is passing under it, and makes that data available for storage in DRAM. The image sensor produces 11,000 8-bit samples per scanline, sampling the Artcard at 4800 dpi. The AI is a state machine that sends control information to the linear sensor, including LineSync pulses and PixelClock pulses in order to read the image. Pixels are read from the linear sensor and placed into theVLIW Input FIFO 78. The VLIW is then able to process and/or store the pixels. The AI has only a few registers:
Register Name | Description | ||
NumPixels | The number of pixels in a sensor | ||
line (approx 11,000) | |||
Status | The Print Head Interface's Status Register | ||
PixelsRemaining | The number of bytes remaining in the | ||
current line | |||
Actions | |||
Reset | A write to this register resets the AI, | ||
stops any scanning, and loads all | |||
registers with 0. | |||
Scan | A write to this register with a non-zero | ||
value sets the Scanning bit of the | |||
Status register, and causes the Artcard | |||
Interface Scan cycle to start. | |||
A write to this register with 0 stops the | |||
scanning process and clears the | |||
Scanning bit in the Status register. | |||
The Scan cycle causes the AI to transfer | |||
NumPixels bytes from the sensor | |||
to the | |||
PixelClock signals appropriately. Upon | |||
completion of NumPixels bytes, a LineSync | |||
pulse is given and the Scan cycle restarts. | |||
The PixelsRemaining register holds the | |||
number of pixels remaining to be | |||
read on the current scanline. | |||
Note that the CPU should clear the
Bit Name | | Description |
Scanning | ||
1 | If set, the AI is currently scanning, | |
with the number of pixels remaining to be | ||
transferred from the current line recorded in | ||
PixelsRemaining. | ||
If clear, the AI is not currently scanning, | ||
so is not transferring pixels to the | ||
Input FIFO | ||
78. | ||
Artcard Interface (AI) 87
Short | Used to detect white dot. | RunLength < 16 |
Medium | Used to detect runs of black | 16 <= RunLength < 48 |
above or below the white dot | ||
in the center of the target. | ||
Long | Used to detect run lengths of | RunLength >= 48 |
black to the left and right | ||
of the center dot in the | ||
target. | ||
Looking at the top three entries in the
| S1 = white long | We have detected a black column of |
S2 = black long | the target to the left of or to the | |
S3 = white | right of the white center dot. | |
medium/ | ||
Case | ||
2 | S1 = white long | If we've been processing a series of |
S2 = black medium | columns of Case 1s, then we have | |
S3 = white short | probably detected the white dot in | |
Previous 8 columns | this column. We know that the next | |
were | entry will be black (or it would have | |
been included in the white S3 entry), | ||
but the number of black pixels is in | ||
question. Need to verify by checking | ||
after the next FIFO advance (see Case | ||
3). | ||
| Prev = | We have detected part of the white |
S3 = black med | dot. We expect around 3 of these, | |
and then some more columns of | ||
Preferably, the following information per region band is kept:
|
1 |
BlackDetectCount | |
4 | |
WhiteDetectCount | |
3 | |
PrevColumnStartPixel | |
15 | |
TargetColumn ordinate | |
16 bits (15:1) | |
|
16 bits (15:1) |
|
7 bytes (rounded to 8 bytes for easy addressing) |
1 | TargetDetected[0-15] := 0 | ||
BlackDetectCount[0-15] := 0 | |||
WhiteDetectCount[0-15] := 0 | |||
TargetRow[0-15] := 0 | |||
TargetColumn[0-15] := 0 | |||
PrevColStartPixel[0-15] := 0 | |||
CurrentColumn := 0 | |||
2 | | ||
3 | | ||
4 | If (CurrentColumn <= LastValidColumn) | ||
| |||
The steps involved in the processing a column (Process Column) are as follows:
1 | S2StartPixel := 0 |
FIFO := 0 | |
BlackDetectCount := 0 | |
WhiteDetectCount := 0 | |
ThisColumnDetected := FALSE | |
PrevCaseWasCase2 := FALSE | |
2 | If (! TargetDetected[Target]) & (! ColumnDetected[Target]) |
|
EndIf |
3 | PrevCaseWasCase2 := Case=2 |
4 | Advance FIFO |
BlackDetectCount[target] < 8 | Δ := ABS(S2StartPixel − |
OR | PrevColStartPixel[Target]) |
WhiteDetectCount[Target] = 0 | If (0<=Δ< 2) |
BlackDetectCount[Target]++ | |
(max value =8) |
Else |
BlackDetectCount[Target] := 1 | |
WhiteDetectCount[Target] := 0 |
EndIf | |
PrevColStartPixel[Target] := | |
S2StartPixel | |
ColumnDetected[Target] := | |
TRUE | |
BitDetected = 1 |
BlackDetectCount[target] >= 8 | PrevColStartPixel[Target] := |
WhiteDetectCount[Target] != 0 | S2StartPixel |
ColumnDetected[Target] := | |
TRUE | |
BitDetected = 1 | |
TargetDetected[Target] := | |
TRUE | |
TargetColumn[Target] := | |
CurrentColumn − 8 − |
(WhiteDetectCount[Target]/2) | ||
Case 2:
PrevCaseWasCase2 = TRUE | If (WhiteDetectCount[Target] < 2) |
BlackDetectCount[Target] >= 8 | TargetRow[Target] = |
WhiteDetectCount=1 | S2StartPixel + (S2RunLength/2) |
EndIf | |
Δ := ABS(S2StartPixel − | |
PrevColStartPixel[Target]) | |
If (0<=Δ< 2) |
WhiteDetectCount[Target]++ |
Else |
WhiteDetectCount[Target] := 1 |
EndIf | ||
PrevColStartPixel[Target] := | ||
S2StartPixel | ||
ThisColumnDetected := TRUE | ||
BitDetected = 0 | ||
TargetA := 0 | ||
MaxFound := 0 | ||
BestLine := 0 | ||
While (TargetA < 15) |
If (TargetA is Valid) | |
TargetB:= TargetA + 1 | |
While (TargetB<= 15) | |
If (TargetB is valid) | |
CurrentLine := line between TargetA and TargetB | |
TargetC := 0; | |
While (TargetC <= 15) |
If (TargetC valid AND TargetC on line AB) |
TargetsHit++ |
EndIf | |
If (TargetsHit > MaxFound) |
MaxFound := TargetsHit | |
BestLine := CurrentLine |
EndIf | |
TargetC++ |
EndWhile |
EndIf |
TargetB ++ |
EndWhile |
EndIf | |
TargetA++ |
EndWhile | |
If (MaxFound < 8) |
Card is Invalid |
Else |
Store expected centroids for rows based on BestLine |
EndIf | ||
Δrow=(rowTargetA−rowTargetB)/(B−A)
Δcolumn=(columnTargetA−columnTargetB)/(B−A)
Then we calculate the position of Target0:
row=rowTargetA−(A*Δrow)
column=columnTargetA−(A*Δcolumn)
(columnDotColumnTop=columnTarget0+(Δrow/8)
(rowDotColumnTop=
Δrow=Δrow/192
Δcolumn=Δcolumn/192
rownext=row+Δrow
columnnext=column+Δcolumn
-
- Δrow and Δcolumn (2@4 bits each=1 byte)
- row history (3 bits per row, 2 rows are stored per byte)
76*(3150/32)+2*3150=13,824 ns=5% of bandwidth
Read | 5 | ||
Read | |||
3 columns of | 19% | ||
Read/Write detected bits into | 10% | ||
Read/ | 5 | ||
TOTAL | |||
39% | |||
Detecting a Dot
Bit history | Expected pixels |
000 | 00000 |
001 | 0000D |
010 | |
011 | 0DFDD |
100 | |
101 | |
110 | |
111 | DDFDD |
2*(76(3150/32)+2*3150)=27,648 ns=10% of bandwidth
76((3150/2)/32)+2*(3150/2)=4,085 ns=2.5% of bandwidth
5*(((9450/(128*2))*320)*128/86)=88, 112 ns=31% of bandwidth.
Read/Write centroid Δ | 10% | ||
Read bit history | 2.5 | ||
Read | |||
5 columns of | 31% | ||
TOTAL | 43.5% | ||
Memory Usage for Phase 2:
| 24 bits (16:8) * 2 * 3150 = 18,900 byes |
| 3 bits * 3150 entries (2 per byte) = 1575 bytes |
Phase 3-Unscramble and XOR the Raw Data
Alternative Artcard Overview
-
- If the column of dots to the left of the data region is white, and the column to the right of the data region is black, then the reader will know that the card has been inserted the same way as it was written.
- If the column of dots to the left of the data region is black, and the column to the right of the data region is white, then the reader will know that the card has been inserted backwards, and the data region is appropriately rotated. The reader must take appropriate action to correctly recover the information from the alternative Artcard.
Data Region
Black | 1 | ||
|
0 | ||
-
- Redundancy encode the original data
- Shuffle the encoded data in a deterministic way to reduce the effect of localized alternative Artcard damage
- Write out the shuffled, encoded data as dots to the data blocks on the alternative Artcard
-
- m=8
- t=64
-
- n=255
- k=127
-
- D3 (1101 0011) becomes: black, black, white, black, white, white, black, black
- 5F (0101 1111) becomes: white, black, white, black, black, black, black, black
Decoding an Alternative Artcard
| Height | 0° |
1° rotation | |
|
3208 |
3 pixel columns | 168 pixel columns | |
Data block | 394 |
3 pixel columns | 21 pixel columns | |
-
- the physical height of the alternative Artcard (55 mm),
- vertical slop on physical alternative Artcard insertion (1 mm)
- insertion rotation of up to 1 degree (86
sin 10=1.5 mm)
-
- Natural blurring due to nature of the CCD's distance from the alternative Artcard.
- Warping of alternative Artcard
-
- Scan 1144 the alternative Artcard at three times printed resolution (eg scan 1600 dpi alternative Artcard at 4800 dpi)
- Extract 1145 the data bitmap from the scanned dots on the card.
- Reverse 1146 the bitmap if the alternative Artcard was inserted backwards.
- Unscramble 1147 the encoded data
- Reed-Solomon 1148 decode the data from the bitmap
Algorithmic Overview
Phase 1—Real Time Bit Image Extraction
-
- Scan the alternative Artcard at 4800 dpi
- Extract the data bitmap from the scanned dots on the card
-
- 2 MB for the extracted bit image
- ˜2 MB for the scanned pixels
- 1.5 KB for
Phase 1 scratch data (as required by algorithm)
-
- Re-organize the bit image, reversing it if the alternative Artcard was inserted backwards
- Unscramble the encoded data
- Reed-Solomon decode the data from the bit image
-
- 2 MB for the extracted bit image (from Phase 1)
- ˜2 MB for the unscrambled, potentially rotated bit image
- <1 KB for
Phase 2 scratch data (as required by algorithm)
11,000/16*12=8,256 ns
-
- Locate the start of the alternative Artcard, and if found,
- Calculate the bounds of the first 8 data blocks based on the start of the alternative Artcard.
Locate the Start of the Alternative Artcard
for (Column=0; Column < MAX_COLUMN; Column++) |
{ |
Pixel = ProcessColumn(Column) | |
if (Pixel) |
return (Pixel, Column) | // success! |
} |
return failure | // no alternative Artcard found |
// Try upper region first |
count = 0 |
for (i=0; i<UPPER_REGION_BOUND; i++) |
{ |
if (GetPixel(column, i) < THRESHOLD) |
{ |
count = 0 | // pixel is black |
} | |
else | |
{ |
count++ | // pixel is white |
if (count > WHITE_ALTERNATIVE ARTCARD) |
return i |
} |
} |
// Try lower region next. Process pixels in reverse |
count = 0 |
for (i=MAX_PIXEL_BOUND; i>LOWER_REGION_BOUND; i−−) |
{ |
if (GetPixel(column, i) < THRESHOLD) |
{ |
count = 0 | // pixel is black |
} |
else |
{ |
count++ | // pixel is white |
if (count > WHITE_ALTERNATIVE ARTCARD) |
return i |
} |
} |
//Not in upper bound or in lower bound. |
return |
0 |
Calculate Data Block Bounds
// Adjust to become first pixel if is lower pixel | ||
if (pixel > LOWER_REGION_BOUND) | ||
{ | ||
pixel −= 6 * 1152 | ||
if (pixel < 0) |
pixel = 0 |
} | ||
for (i=0; i<6; i++) | ||
{ | ||
endPixel = pixel + 1152 | ||
segment[i].MaxPixel = MAX_PIXEL_BOUND | ||
segment[i].SetBounds(pixel, endPixel) | ||
pixel = endPixel | ||
} | ||
-
- LookingForTargets: where the exact data block position for this segment has not yet been determined. Targets are being located by scanning pixel column data in the bounds indicated by the segment bounds. Once the data block has been located via the targets, and bounds set for black & white, the state changes to ExtractingBitImage.
- ExtractingBitImage: where the data block has been accurately located, and bit data is being extracted one dot column at a time and written to the alternative Artcard bit image. The following of data block clockmarks gives accurate dot recovery regardless of rotation, and thus the segment bounds are ignored. Once the entire data block has been extracted, new segment bounds are calculated for the next data block based on the current position. The state changes to LookingForTargets.
DataName | Comment |
CurrentState | Defines the current state of the segment. |
Can be one of: | |
LookingForTargets | |
ExtractingBitImage | |
Initial value is LookingForTargets | |
Used during LookingForTargets: | |
StartPixel | Upper pixel bound of segment. Initially set |
by | |
EndPixel | Lower pixel bound of segment. Initially set |
by | |
MaxPixel | The maximum pixel number for any scanline. |
It is set to the same value for each segment: | |
10,866. | |
CurrentColumn | Pixel column we're up to while looking for |
targets. | |
FinalColumn | Defines the last pixel column to look in for |
targets. | |
LocatedTargets | Points to a list of located Targets. |
PossibleTargets | Points to a set of pointers to Target |
structures that represent currently | |
investigated pixel shapes that may be | |
targets | |
AvailableTargets | Points to a set of pointers to Target |
structures that are currently unused. | |
TargetsFound | The number of Targets found so far in this |
data block. | |
PossibleTargetCount | The number of elements in the |
PossibleTargets list | |
AvailabletargetCount | The number of elements in the |
AvailableTargets list | |
Used during ExtractingBitImage: | |
BitImage | The start of the Bit Image data area in DRAM |
where to store the next data block: | |
| |
Advances by 256k each time the state | |
changes from ExtractingBitImageData to | |
Looking ForTargets | |
CurrentByte | Offset within BitImage where to store next |
extracted byte | |
CurrentDotColumn | Holds current clockmark/dot column number. |
Set to −8 when transitioning from state | |
LookingForTarget to ExtractingBitImage. | |
UpperClock | Coordinate (column/pixel) of current upper |
clockmark/border | |
LowerClock | Coordinate (column/pixel) of current lower |
clockmark/border | |
CurrentDot | The center of the current data dot for the |
current dot column. Initially set to the | |
center of the first (topmost) dot of the | |
data column. | |
DataDelta | What to add (column/pixel) to CurrentDot to |
advance to the center of the next dot. | |
BlackMax | Pixel value above which a dot is definitely |
white | |
WhiteMin | Pixel value below which a dot is definitely |
black | |
MidRange | The pixel value that has equal likelihood of |
coming from black or white. When all smarts | |
have not determined the dot, this value is | |
used to determine it. Pixels below this value | |
are black, and above it are white. | |
High Level of
blockCount = 0 | ||
while (blockCount < 64) |
for (i=0; i<8; i++) | |
{ | |
finishedBlock = segment[i].ProcessState( ) | |
if (finishedBlock) |
blockCount++ |
} | ||
finishedBlock = FALSE | ||
if(CurrentColumn < Process1.CurrentScanLine) | ||
{ | ||
ProcessPixelColumn( ) | ||
CurrentColumn++ | ||
} | ||
if ((TargetsFound = = 6) || (CurrentColumn > LastColumn)) | ||
{ | ||
if (TargetsFound >= 2) |
ProcessTargets( ) |
if (TargetsFound >= 2) | |
{ |
BuildClockmarkEstimates( ) | |
SetBlackAndWhiteBounds( ) | |
CurrentState = ExtractingBitImage | |
CurrentDotColumn = −8 |
} | |
else | |
{ |
// data block cannot be recovered. Look for | |
// next instead. Must adjust pixel bounds to | |
// take account of possible 1 degree rotation. | |
finishedBlock = TRUE | |
SetBounds(StartPixel−12, EndPixel+12) | |
BitImage += 256KB | |
CurrentByte = 0 | |
LastColumn += 1024 | |
TargetsFound = 0 |
} |
} | ||
return finishedBlock | ||
ProcessPixelColumn
-
- Left black region, which is a number of pixel columns consisting of large numbers of contiguous black pixels to build up the first part of the target.
- Target center, which is a white region in the center of further black columns
- Second black region, which is the 2 black dot columns after the target center
- Target number, which is a black-surrounded white region that defines the target number by its length
- Third black region, which is the 2 black columns after the target number
LocatedTargets | Points to a set of Target structures that represent |
located targets. | |
PossibleTargets | Points to a set of pointers to Target structures that |
represent currently investigated pixel shapes that | |
may be targets. | |
AvailableTargets | Points to a set of pointers to Target structures that |
are currently unused. | |
DataName | Comment |
CurrentState | The current state of the target search |
DetectCount | Counts how long a target has been in a given state |
StartPixel | Where does the target start? All the lines of pixels |
in this target should start within a tolerance of this | |
pixel value. | |
TargetNumber | Which target number is this (according to what |
was read) | |
Column | Best estimate of the target's center column ordinate |
Pixel | Best estimate of the target's center pixel ordinate |
pixel = StartPixel |
t = 0 |
target=PossibleTarget[t] |
while ((pixel < EndPixel) && (TargetsFound < 6)) |
{ |
if ((S0.Color = = white) && (S1.Color = = black)) | |
{ |
do | |
{ |
keepTrying = FALSE | |
if | |
( |
(target != NULL) | |
&& | |
(target−>AddToTarget(Column, pixel, S1, S2, S3)) |
) | |
{ |
if (target−>CurrentState = = IsATarget) | |
{ |
Remove target from PossibleTargets List | |
Add target to LocatedTargets List | |
TargetsFound++ | |
if (TargetsFound = = 1) |
FinalColumn = Column + MAX_TARGET_DELTA} |
} | |
else if (target−>CurrentState = = NotATarget) | |
{ |
Remove target from PossibleTargets List | |
Add target to AvailableTargets List | |
keepTrying = TRUE |
} | |
else | |
{ |
t++ | // advance to next target |
} | |
target = PossibleTarget[t] |
} | |
else | |
{ |
tmp = AvailableTargets{0} | |
if (tmp−>AddToTarget(Column,pixel,S1,S2,S3) | |
{ |
Remove tmp from AvailableTargets list | |
Add tmp to PossibleTargets list |
t++ | // target t has been shifted right |
} |
} |
} while (keepTrying) |
} |
pixel += S1.RunLength | |
Advance S0/S1/S2/S3 |
} |
-
- If the run is within the tolerance of target's starting position, the run is directly related to the current target, and can therefore be applied to it.
- If the run starts before the target, we assume that the existing target is still ok, but not relevant to the run. The target is therefore left unchanged, and a return value of FALSE tells the caller that the run was not applied. The caller can subsequently check the run to see if it starts a whole new target of its own.
- If the run starts after the target, we assume the target is no longer a possible target. The state is changed to be NotATarget, and a return value of TRUE is returned.
MAX_TARGET_DELTA = 1 | ||
if (CurrentState != NothingKnown) | ||
{ |
if (pixel > StartPixel) | // run starts after target | |
{ |
diff = pixel − StartPixel | |
if (diff > MAX_TARGET_DELTA) | |
{ |
CurrentState = NotATarget | |
return TRUE |
} |
} | |
else | |
{ |
diff = StartPixel − pixel | |
if (diff > MAX_TARGET_DELTA) |
return FALSE |
} |
} | ||
runType = DetermineRunType(S1, S2, S3) | ||
EvaluateState(runType) | ||
StartPixel = currentPixel | ||
return TRUE | ||
Types of Pixel Runs |
Type | How identified (S1 is always black) | ||
TargetBorder | S1 = 40 < RunLength < 50 | ||
S2 = white run | |||
TargetCenter | S1 = 15 < RunLength < 26 | ||
S2 = white run with [RunLength < 12] | |||
S3 = black run with [15 < RunLength < 26] | |||
TargetNumber | S2 = white run with [RunLength <= 40] | ||
CurrentState | Type of Pixel Run | Action |
NothingKnown | TargetBorder | DetectCount = 1 |
CurrentState = LeftOfCenter |
LeftOfCenter | TargetBorder | DetectCount++ |
if (DetectCount > 24) |
CurrentState = NotATarget |
TargetCenter | DetectCount = 1 |
CurrentState = InCenter | |
Column = currentColumn | |
Pixel = currentPixel + | |
S1.RunLength | |
CurrentState = NotATarget |
InCenter | TargetCenter | DetectCount++ |
tmp = currentPixel + | |
S1.RunLength | |
if (tmp < Pixel) |
Pixel = tmp |
if (DetectCount > 13) |
CurrentState = NotATarget |
TargetBorder | DetectCount = 1 |
CurrentState = RightOfCenter | |
CurrentState = NotATarget |
RightOfCenter | TargetBorder | DetectCount++ |
if (DetectCount >= 12) |
CurrentState = NotATarget |
TargetNumber | DetectCount = 1 |
CurrentState = InTargetNumber | |
TargetNumber = | |
(S2.RunLength+ 2)/6 | |
CurrentState = NotATarget |
InTargetNumber | TargetNumber | tmp = (S2.RunLength+ 2)/6 |
if (tmp > TargetNumber) |
TargetNumber = tmp |
DetectCount++ | |
if (DetectCount >= 12) |
CurrentState = NotATarget |
TargetBorder | if (DetectCount >= 3) |
CurrentState = IsATarget |
else |
CurrentState = NotATarget |
CurrentState = NotATarget |
IsATarget or | — | — |
NotATarget | ||
Processing Targets
-
- Sort targets into ascending pixel order
- Locate and fix erroneous target numbers
for (i = 0; i < TargetsFound−1; i++) | ||
{ |
oldTarget = LocatedTargets[i] | |
bestPixel = oldTarget−>Pixel | |
best = i | |
j = i+1 | |
while (j<TargetsFound) | |
{ |
if (LocatedTargets[j]−> Pixel < bestPixel) |
best = j |
j++ |
} | |
if (best != i) // move only if necessary |
LocatedTargets[i] = LocatedTargets[best] | |
LocatedTargets[best] = oldTarget |
} |
} | ||
kPixelFactor= 1/(55 * 3) | ||
bestTarget = 0 | ||
bestChanges = TargetsFound + 1 | ||
for (i=0; i< TotalTargetsFound; i++) | ||
{ |
numberOfChanges = 0; |
fromPixel = (LocatedTargets[i])−>Pixel | |
fromTargetNumber = LocatedTargets[i].TargetNumber | |
for (j=1; j< TotalTargetsFound; j++) | |
{ | |
toPixel = LocatedTargets[j]−>Pixel | |
deltaPixel = toPixel − fromPixel | |
if (deltaPixel >= 0) |
deltaPixel += | |
PIXELS_BETWEEN_TARGET_CENTRES/2 |
else |
deltaPixel −= | |
PIXELS_BETWEEN_TARGET_CENTRES/2 |
targetNumber =deltaPixel * kPixelFactor | |
targetNumber += fromTargetNumber | |
if |
( |
(targetNumber < 1)∥(targetNumber > 6) | |
∥ | |
(targetNumber != | |
LocatedTargets[j]−> TargetNumber) |
) |
numberOfChanges++ |
} |
if (numberOfChanges < bestChanges) | |
{ |
bestTarget = i | |
bestChanges = numberOfChanges |
} | |
if (bestChanges < 2) |
break; |
} | ||
if ((targetNumber < 1)∥(targetNumber > TARGETS_PER_BLOCK)) |
{ |
LocatedTargets[j] = NULL | |
TargetsFound− − |
} |
else |
{ |
LocatedTargets[j]−> TargetNumber = targetNumber |
} |
CENTER_WIDTH = CENTER_HEIGHT = 12 | ||
maxPixel = 0x00 | ||
for (i=0; i<CENTER_WIDTH; i++) |
for (j=0; j<CENTER_HEIGHT; j++) | |
{ |
p = GetPixel(column+i, pixel+j) | |
if (p > maxPixel) | |
{ | |
maxPixel = p | |
centerColumn = column + i | |
centerPixel = pixel + j |
} |
} |
Target.Column = centerColumn | ||
Target.Pixel = centerPixel | ||
// Given estimates column and pixel, determine a | ||
// betterColumn and betterPixel as the center of | ||
// the target | ||
for (y=0; y<7; y++) | ||
{ |
for (x=0; x<7; x++) |
samples[x] = GetPixel(column−3+y, pixel−3+x) |
FindMax(samples, pos, maxVal) | |
reSamples[y] = maxVal | |
if (y = = 3) |
betterPixel = pos + pixel |
} | ||
FindMax(reSamples, pos, maxVal) | ||
betterColumn = pos + column | ||
TARGETS_PER_BLOCK = 6 |
numTargetsDiff = to.TargetNum − from.TargetNum |
deltaPixel = (to.Pixel − from.Pixel) / numTargetsDiff |
deltaColumn = (to.Column − from.Column) / numTargetsDiff |
UpperClock.pixel = from.Pixel − (from.TargetNum*deltaPixel) |
UpperClock.column = from.Column−(from.TargetNum*deltaColumn) |
// Given the first dot of the upper clockmark, the |
// first dot of the lower clockmark is straightforward. |
LowerClock.pixel | = | UpperClock.pixel | + |
((TARGETS_PER_BLOCK+1) * deltaPixel) |
LowerClock.column | = | UpperClock.column | + |
((TARGETS_PER_BLOCK+1) * deltaColumn) | ||
kDeltaDotFactor = 1/DOTS_BETWEEN_TARGET_CENTRES | ||
deltaColumn *= kDeltaDotFactor | ||
deltaPixel *= 4 * kDeltaDotFactor | ||
UpperClock.pixel −= deltaPixel | ||
UpperClock.column −= deltaColumn | ||
LowerClock.pixel += deltaPixel | ||
LowerClock.column += deltaColumn | ||
MinPixel = WhiteMin | ||
MaxPixel = BlackMax | ||
MidRange = (MinPixel + MaxPixel) / 2 | ||
WhiteMin = MaxPixel − 105 | ||
BlackMax = MinPixel + 84 | ||
CurrentState=ExtractingBitImage
-
- The first task is to locate the specific dot column of data via the clockmarks.
- The second task is to run down the dot column gathering the bit values, one bit per dot.
finishedBlock = FALSE | ||
if((UpperClock.column < Process1.CurrentScanLine) |
&& | |
(LowerClock.column < Process1.CurrentScanLine)) |
{ |
DetermineAccurateClockMarks( ) | |
DetermineDataInfo( ) | |
if (CurrentDotColumn >= 0) |
ExtractDataFromColumn( ) |
AdvanceClockMarks( ) | |
if (CurrentDotColumn = = FINAL_COLUMN) | |
{ |
finishedBlock = TRUE | |
currentState = LookingForTargets | |
SetBounds(UpperClock.pixel, LowerClock.pixel) | |
BitImage += 256KB | |
CurrentByte = 0 | |
TargetsFound = 0 |
} |
} | ||
return finishedBlock | ||
Locating the Dot Column
// Turn the estimates of the clockmarks into accurate | ||
// positions only when there is a black clockmark | ||
// (ie every 2nd dot column, starting from −8) |
if (Bit0(CurrentDotColumn) = = 0) | // even column | |
{ |
DetermineAccurateUpperDotCenter( ) | |
DetermineAccurateLowerDotCenter( ) |
} | ||
// Use the estimated pixel position of |
// the border to determine where to look for |
// a more accurate clockmark center. The clockmark |
// is 3 dots high so even if the estimated position |
// of the border is wrong, it won't affect the |
// fixing of the clockmark position. |
MAX_CLOCKMARK_DEVIATION = 0.5 |
diff | = | GetAccurateColumn(UpperClock.column, |
UpperClock.pixel+(3*PIXELS_PER_DOT)) |
diff −= UpperClock.column |
if (diff > MAX_CLOCKMARK_DEVIATION) |
diff = MAX_CLOCKMARK_DEVIATION |
else |
if (diff < −MAX_CLOCKMARK_DEVIATION) |
diff = −MAX_CLOCKMARK_DEVIATION |
UpperClock.column += diff |
// Use the newly obtained clockmark center to |
// determine a more accurate border position. |
diff = GetAccuratePixel(UpperClock.column, UpperClock.pixel) |
diff −= UpperClock.pixel |
if (diff > MAX_CLOCKMARK_DEVIATION) |
diff = MAX_CLOCKMARK_DEVIATION |
else |
if (diff < −MAX_CLOCKMARK_DEVIATION) |
diff = −MAX_CLOCKMARK_DEVIATION |
UpperClock.pixel += diff |
kDeltaColumnFactor = 1 / (DOTS_PER_DATA_COLUMN + 2 + 2 − 1) | ||
kDeltaPixelFactor = 1 / (DOTS_PER_DATA_COLUMN + 5 + 5 − 1) | ||
delta = LowerClock.column − UpperClock.column | ||
DataDelta.column = delta * kDeltaColumnFactor | ||
delta = LowerClock.pixel − UpperClock.pixel | ||
DataDelta.pixel = delta * kDeltaPixelFactor | ||
CurrentDot.column = UpperClock.column + (2*DataDelta.column) | ||
CurrentDot.pixel = UpperClock.pixel + (5*DataDelta.pixel) | ||
Running Down a Dot Column
bitCount = 8 |
curr = 0x00 | // definitely black | |
next = GetPixel(CurrentDot) |
for (i=0; i < DOTS_PER_DATA_COLUMN; i++) | |
{ |
CurrentDot += DataDelta | |
prev = curr | |
curr = next | |
next = GetPixel(CurrentDot) | |
bit = DetermineCenterDot(prev, curr, next) | |
byte = (byte << 1) | bit | |
bitCount−− | |
if(bitCount = = 0) | |
{ |
*(BitImage | CurrentByte) = byte | |
CurrentByte++ | |
bitCount = 8 |
} |
} | ||
-
- The dot's center pixel value is lower than WhiteMin, and is therefore definitely a black dot. The bit value is therefore definitely 1.
- The dot's center pixel value is higher than BlackMax, and is therefore definitely a white dot. The bit value is therefore definitely 0.
- The dot's center pixel value is somewhere between BlackMax and WhiteMin. The dot may be black, and it may be white. The value for the bit is therefore in question. A number of schemes can be devised to make a reasonable guess as to the value of the bit. These schemes must balance complexity against accuracy, and also take into account the fact that in some cases, there is no guaranteed solution. In those cases where we make a wrong bit decision, the bit's Reed-Solomon symbol will be in error, and must be corrected by the Reed-Solomon decoding stage in
Phase 2.
-
- If the two dots to either side are on the white side of MidRange (an average dot value), then we can guess that if the center dot were white, it would likely be a “definite” white. The fact that it is in the not-sure region would indicate that the dot was black, and had been affected by the surrounding white dots to make the value less sure. The dot value is therefore assumed to be black, and hence the bit value is 1.
- If the two dots to either side are on the black side of MidRange, then we can guess that if the center dot were black, it would likely be a “definite” black. The fact that it is in the not-sure region would indicate that the dot was white, and had been affected by the surrounding black dots to make the value less sure. The dot value is therefore assumed to be white, and hence the bit value is 0.
- If one dot is on the black side of MidRange, and the other dot is on the white side of MidRange, we simply use the center dot value to decide. If the center dot is on the black side of MidRange, we choose black (bit value 1). Otherwise we choose white (bit value 0).
if (pixel < WhiteMin) | //definitely black |
bit = 0x01 |
else |
if (pixel > BlackMax) | //definitely white |
bit = 0x00 |
else | |
if ((prev > MidRange) && (next> MidRange)) //prob black |
bit = 0x01 |
else | |
if ((prev < MidRange) && (next < MidRange)) //prob white |
bit = 0x00 |
else | |
if (pixel < MidRange) |
bit = 0x01 |
else |
bit = 0x00 | ||
UpperClock.column += DataDelta.pixel | ||
LowerClock.column += DataDelta.pixel | ||
UpperClock.pixel −= DataDelta.column | ||
LowerClock.pixel −= DataDelta.column | ||
-
- Getting accurate clockmarks and border values
- Extracting dot values
-
- Reorganize the bit image, reversing it if the alternative Artcard was inserted backwards
- Unscramble the encoded data
- Reed-Solomon decode the data from the bit image
totalCountL = 0 | ||
totalCountR = 0 | ||
for (i=0; i<64; i++) | ||
{ | ||
blackCountL = 0 | ||
blackCountR = 0 | ||
currBuff = dataBuffer | ||
for (j=0; j<48; j++) | ||
{ | ||
blackCountL += CountBits(*currBuff) | ||
currBuff++ |
} |
currBuff += 28560 | |
for (j=0; j<48; j++) | |
{ | |
blackCountR += CountBits(*currBuff) | |
currBuff++ |
} |
dataBuffer += 32k | |
if (blackCountR > (blackCountL * 4)) |
return TRUE |
if (blackCountL > (blackCountR * 4)) |
return FALSE |
totalCountL += blackCountL | |
totalCountR += blackCountR |
} | ||
return (totalCountR > totalCountL) | ||
DATA_BYTES_PER_DATA_BLOCK = 28560 | ||
to = dataBuffer |
from = dataBuffer + 48) | //left orientation column | |
for (i=0; i<64; i++) | ||
{ |
BlockMove(from, to, DATA_BYTES_PER_DATA_BLOCK) | ||
from += 32k | ||
to += DATA_BYTES_PER_DATA_BLOCK | ||
} | ||
DATA_BYTES_PER_DATA_BLOCK = 28560 |
to = outBuffer |
for (i=0; i<64; i++) |
{ |
from = dataBuffer + (i * 32k) |
from += 48 | // skip orientation column |
from += DATA_BYTES_PER_DATA_BLOCK − 1 | // end of block |
for (j=0; j < DATA_BYTES_PER_DATA_BLOCK; j++) |
{ |
*to++ = Reverse[*from] |
from−− |
} |
} |
-
- 2 MB contiguous reads (2048/16×12 ns=1,536 ns)
- 2 MB effectively contiguous byte writes (2048/16×12 ns=1,536 ns)
Unscramble the Encoded Image
groupSize = 255 | ||
numBytes= 1827840; | ||
inBuffer = scrambledBuffer; | ||
outBuffer = unscrambledBuffer; | ||
for (i=0; i<groupSize; i++) |
for (j=i; j<numBytes; j+=groupSize) |
outBuffer[j] = *inBuffer++ | ||
-
- 2 MB contiguous reads (2048/16×12 ns=1,536 ns)
- 2 MB non-contiguous byte writes (2048×12 ns=24,576 ns)
// Constants for Reed Solomon decode | ||
sourceBlockLength = 255; | ||
destBlockLength = 127; | ||
numControlBlocks = 2; | ||
// Decode the control information | ||
if (! GetControlData(source, destBlocks, lastBlock)) |
return error |
destBytes = ((destBlocks−1) * destBlockLength) + lastBlock | |
offsetToNextDuplicate = destBlocks * sourceBlockLength | |
// Skip the control blocks and position at data | |
source += numControlBlocks * sourceBlockLength | |
// Decode each of the data blocks, trying | |
// duplicates as necessary | |
blocksInError = 0; | |
for (i=0; i<destBlocks; i++) | |
{ |
found = DecodeBlock(source, dest); |
if (! found) |
{ |
duplicate = source + offsetToNextDuplicate | |
while ((! found) && (duplicate<sourceEnd)) |
{ |
found = DecodeBlock(duplicate, dest) | |
duplicate += offsetToNextDuplicate |
} |
} | |
if (! found) |
blocksInError++ |
source += sourceBlockLength | |
dest += destBlockLength |
} | |
return destBytes and blocksInError |
DecodeBlock is a standard Reed Solomon block decoder | |
using m = 8 and |
t = 64. | ||
-
- The control block could be the first and last blocks rather than make them contiguous (as is the case now). This may give greater protection against certain pathological damage scenarios.
- The second refinement is to place an additional level of redundancy/error detection into the control block structure to be used if the Reed-Solomon decode step fails. Something as simple as parity might improve the likelihood of control information if the Reed-Solomon stage fails.
Phase 5 Running the Vark Script
1500 * 1000 image |
Operation | Speed of Operation | 1 channel | 3 channels |
Image composite | 1 cycle per output pixel | 0.015 | s | 0.045 | s |
Image convolve | k/3 cycles per output | ||||
pixel | |||||
(k = kernel size) | |||||
3 × 3 convolve | 0.045 | s | 0.135 | s | |
5 × 5 convolve | 0.125 | s | 0.375 | s | |
7 × 7 convolve | 0.245 | s | 0.735 | s | |
Image warp | 8 cycles per pixel | 0.120 | s | 0.360 | s |
Histogram collect | 2 cycles per pixel | 0.030 | s | 0.090 | s |
Image Tessellate | ⅓ cycle per pixel | 0.005 | s | 0.015 | s |
Image sub-pixel | 1 cycle per output pixel | — | — |
Translate |
Color lookup | ½ cycle per pixel | 0.008 | s | 0.023 | |
replace | |||||
Color space | 8 cycles per pixel | 0.120 | s | 0.360 | s |
transform | |||||
Convert CCD image | 4 cycles per output pixel | 0.06 | s | 0.18 | s |
to internal image | |||||
(including color | |||||
convert & scale) | |||||
Construct image | 1 cycle per input pixel | 0.015 | s | 0.045 | s |
pyramid | |||||
Scale | Maximum of: | 0.015 | s | 0.045 | s |
2 cycles per input pixel | (minimum) | (minimum) | |
2 cycles per output pixel | |||
2 cycles per output pixel | |||
(scaled in X only) |
Affine transform | 2 cycles per output pixel | 0.03 | s | 0.09 | s |
Brush rotate/ | ? | ||||
translate and | |||||
composite | |||||
Tile Image | 4-8 cycles per output | 0.015 | s to | 0.060 | s to |
pixel | 0.030 | s | 0.120 | s to for 4 |
channels (Lab, | ||||
texture |
Illuminate image | Cycles per pixel | ||||
Ambient only | ½ | 0.008 | s | 0.023 | s |
Directional light | 1 | 0.015 | s | 0.045 | s |
Directional (bm) | 6 | 0.09 | s | 0.27 | s |
Omni light | 6 | 0.09 | s | 0.27 | s |
Omni (bm) | 9 | 0.137 | s | 0.41 | s |
Spotlight | 9 | 0.137 | s | 0.41 | s |
Spotlight (bm) | 12 | 0.18 | s | 0.54 | s |
(bm) = bumpmap | |||||
Constant | Value | ||
K1 | Kernel size (9, 25, or 49) | ||
Time taken to | Time to process | Time to Process | |
calculate | 1 channel at | 3 channels at | |
Kernel size | output pixel | 1500 × 1000 | 1500 × 1000 |
3 × 3 (9) | 3 | cycles | 0.045 seconds | 0.135 |
5 × 5 (25) | 8 ⅓ | cycles | 0.125 seconds | 0.375 |
7 × 7 (49) | 16 ⅓ | cycles | 0.245 seconds | 0.735 seconds |
Image Compositor
Constant | Value | ||
K1 | 257 | ||
1500/32*1000*320 ns=15,040,000 ns=0.015 seconds.
-
- Scale the warp map to match the output image size.
- Determine the span of the region of input image pixels represented in each output pixel.
- Calculate the final output pixel value via tri-linear interpolation from the input image pyramid
Scale Warp Map
Constant | Value |
K1 | Xscale (scales 0-Image Width to 0-WarpmapWidth) |
K2 | Yscale (scales 0-ImageHeight to 0-WarpmapHeight) |
K3 | XrangeScale (scales warpmap range (eg 0-255) |
to 0-ImageWidth) | |
K4 | YrangeScale (scales warpmap range (eg 0-255) |
to 0-ImageHeight) | |
The following lookup table is used:
Lookup | Size | Details |
LU1 and | WarpmapWidth × | Warpmap lookup. |
LU2 | WarpmapHeight | Given [X, Y] the 4 entries |
required for bi-linear interpolation | ||
are returned. Even if entries are | ||
only 8 bit, they are returned as | ||
16 bit (high 8 bits 0). | ||
Transfer time is 4 entries at | ||
2 bytes per entry. | ||
Total time is 8 cycles as | ||
2 lookups are used. | ||
Span Calculation
Lookup | | Details |
FIFO | ||
1 | 8 Image Width bytes. | P2 history/lookup (both X & Y in |
[ImageWidth × | same FIFO) | |
2 entries at 32 bits | P1 is put into the FIFO and | |
per entry] | taken out again at the same | |
pixel on the following row as P2. | ||
Transfer time is 4 cycles | ||
(2 × 32 bits, with 1 cycle per | ||
16 bits) | ||
Cycle | Action | ||
1 | A = ABS(P1x − P2x) | ||
Store P1x in P2x history | |||
2 | B = ABS(P1x − P0x) | ||
Store P1x in P0x history | |||
3 | A = MAX(A, B) | ||
4 | B = ABS(P1y − P2y) | ||
Store P1y in P2y history | |||
5 | A = MAX(A, B) | ||
6 | B = ABS(P1y − P0y) | ||
Store P1y in P0y history | |||
7 | A = MAX(A, B) | ||
Address Unit | |||
Relative Microcode | A = Base address | ||
Address | of | Adder Unit | 1 |
0 | |
Out1 = A | |
A + (Adder1.Out1 << 2) | A = A − 1 | ||
|
|||
1 | Rest of processing | Rest of processing | |
|
|
|
|
Address Unit | ||
1 | A = 0 | A = −1 | |||
2 | Out1 = A | A = Adder1.Out1 | A = | A = A + 1 | Out1 = |
BZ | A = pixel | Z = pixel − | Adr.Out1 | from: (A + | |
2 | Adder1.Out1 | (Adder1.Out1 << 2)) | |||
3 | Out1 = A | Out1 = A | Out1 = A | Write Adder4.Out1 to: | |
A = | (A + (Adder2.Out << 2) | ||||
|
|||||
4 | Write Adder4.Out1 to: | ||||
(A + (Adder 2.Out << 2) | |||||
Flush caches | |||||
Lookup | Size | Details | ||
LU1 | 256 entries | Replacement[X] | ||
8 bits per entry | Table indexed by the 8 highest | |||
significant bits of X. | ||||
Resultant 8 bits treated as | ||||
fixed point 0:8 | ||||
Lookup | | Details | ||
LU | ||||
1 | 8 × 8 × 8 entries | Convert[X, Y, Z] | ||
512 entries | Table indexed by the 3 highest | |||
8 bits per entry | bits of X, Y, and Z. | |||
8 entries returned from Tri-linear | ||||
index | ||||
Resultant | ||||
8 bits treated as | ||||
fixed point 8:0 | ||||
Transfer time is 8 entries at | ||||
1 byte per entry | ||||
Lookup | Size | Details | ||
LU1 | Image | Bilinear Image lookup [X, Y] | ||
width by | Table indexed by the integer | |||
Image | part of X and | |||
height | ||||
4 entries returned from |
||||
8 bits per | index address unit, 2 per cycle. | |||
entry | Each 8 bit entry treated as | |||
fixed point 8:0 | ||||
Transfer time is 2 cycles (2 16 bit | ||||
entries in FIFO hold the 4 8 bit entries) | ||||
Constant | Value | ||
K1 | Number of input pixels that contribute | ||
to an output pixel in | |||
K | |||
2 | 1/K1 | ||
The following registers are used to hold temporary variables:
Variable | Value | ||
Latch1 | Amount of input pixel remaining unused | ||
(starts at 1 and decrements) | |||
Latch2 | Amount of input pixels remaining to | ||
contribute to current output pixel (starts at K1 | |||
and decrements) | |||
Latch3 | Next pixel (in X) | ||
Latch4 | Current pixel | ||
Latch5 | Accumulator for output pixel (unscaled) | ||
Latch6 | Pixel Scaled in X (output) | ||
The Scale in Y process is illustrated in
Where the following constants are set by software:
Constant | Value | ||
K1 | Number of input pixels that contribute | ||
to an output pixel in | |||
K | |||
2 | 1/K1 | ||
The following registers are used to hold temporary variables:
Variable | Value | ||
Latch1 | Amount of input pixel remaining unused | ||
(starts at 1 and decrements) | |||
Latch2 | Amount of input pixels remaining to | ||
contribute to current output pixel (starts at K1 | |||
and decrements) | |||
Latch3 | Next pixel (in Y) | ||
Latch4 | Current pixel | ||
Latch5 | Pixel Scaled in Y (output) | ||
The following DRAM FIFOs are used:
Lookup | Size | Details |
FIFO1 | ImageWidthOUT | 1 row of image pixels already scaled in |
entries | ||
1 | ||
8 bits per entry | ||
FIFO2 | ImageWidthOUT | 1 row of image pixels already scaled in |
entries | ||
2 cycles transfer time (1 byte per cycle) | ||
16 bits per entry | ||
Tessellate Image
Constant | Pixel | ||
color | color | ||
Replace | 4 | 4.75 | ||
25% background + | 4 | 4.75 | ||
| 5 | 5.75 | ||
Average height algorithm with feedback | 5.75 | 6.5 | ||
Tile Coloring and Compositing
-
- Sub-pixel translate the tile's opacity values,
- Optionally scale the tile's opacity (if feedback from texture application is enabled).
- Determine the color of the pixel (constant or from an image map).
- Composite the pixel onto the background image.
No feedback from | Feedback from | |
texture (cycles | texture (cycles | |
Tiling color style | per pixel) | per pixel) |
Tile has constant color per | 1 | 2 |
Tile has per pixel color from | 1.25 | 2 |
input image | ||
Constant Color
-
- Replace texture
- 25% background+tile's texture
- Average height algorithm
Cycles per pixel | Cycles per pixel | |
(no feedback from | (feedback from | |
Tiling color style | texture) | texture) |
Replace | 1 | — |
25% background + | 1 | — |
value | ||
| 2 | 2 |
Replace Texture
Lookup | Size | Details |
LU1 | 256 |
1/ |
16 bits per entry | Table indexed by N ( |
|
Resultant 16 bits treated as fixed point 0:16 | ||
-
- Up-interpolation of low-sample rate color components in CCD image (interpreting correct orientation of pixels)
Color conversion from RGB to the internal color space - Scaling of the internal space image from 750×500 to 1500×1000.
- Writing out the image in a planar format
- Up-interpolation of low-sample rate color components in CCD image (interpreting correct orientation of pixels)
fattIp([kdOd(N·L)+ksos(R·V)n]
-
- Ambient Contribution
- Diffuse contribution
- Specular contribution
dL | Distance from light source | ||
fatt | Attenuation with distance [fatt = 1/dL 2] | ||
R | Normalised reflection vector [R = 2N(N · L) − L] | ||
Ia | Ambient light intensity | ||
Ip | Diffuse light coefficient | ||
ka | Ambient reflection coefficient | ||
kd | Diffuse reflection coefficient | ||
ks | Specular reflection coefficient | ||
ksc | Specular color coefficient | ||
L | Normalised light source vector | ||
N | Normalised surface normal vector | ||
n | Specular exponent | ||
Od | Object's diffuse color (i.e. image pixel color) | ||
Os | Object's specular color (kscOd + (1 − ksc)Ip) | ||
V | Normalised viewing vector [V = [0, 0, 1]] | ||
The same reflection coefficients (ka, ks, kd) are used for each color component.
V n+1=½=V n(3−XV n 2)
| Value | ||
K | |||
1 | 3 | ||
The following lookup table is used:
Lookup | Size | Details | ||
LU1 | 256 | 1/SquareRoot[X] | ||
8 bits per entry | Table indexed by the 8 highest | |||
significant bits of X. | ||||
Resultant 8 bits treated as fixed | ||||
point 0:8 | ||||
Calculation of N
N=[XN, YN, ZN]=[0, 0, 1]
∥N∥=1
1/∥N∥=1
normalized N=N
Constant | Value | ||
K1 | ScaleFactor (to make N resolution independent) | ||
Calculation of L
Directional Lights
L=[XL, YL, ZL]
∥L∥=1
1/∥L∥=1
L=[XL, YL, ZL]
X L =X P −X PL
Y L =−Y PL
Z L =−Z PL
We normalize XL, YL and ZL by multiplying each by 1/∥L∥. The calculation of 1/∥L∥ (for later use in normalizing) is accomplished by calculating
V=X L 2 +Y L 2 +Z L 2
and then calculating V−1/2
Constant | Value | ||
K1 | XPL | ||
K2 | YPL | ||
K3 | ZPL 2 (as ZP is 0) | ||
K4 | −ZPL | ||
Calculation of N.L
XNXL+YNYL+ZNZL
No Bump-Map
R·V=2Z N(N.L)−Z L
R·V=2Z N(N.L)−Z L
The inputs and outputs are as shown in
Calculation of Attenuation Factor
Directional Lights
f att =f 0 +f 1 /d+f 2 /d 2
Constant | Value | ||
K1 | F2 | ||
K2 | f1 | ||
K3 | F0 | ||
Calculation of Cone and Penumbra Factor
Directional Lights and Omni Lights
(B−A)/(C−A)
Constant | Value | ||
K1 | XLT | ||
K2 | YLT | ||
K3 | ZLT | ||
K4 | A | ||
K5 | 1/(C − A). [MAXNUM if no penumbra] | ||
The following lookup tables are used:
Lookup | | Details |
LU | ||
1 | 64 entries | Arcos(X) |
16 bits per entry | Units are same as for constants | |
K5 and K6 | ||
Table indexed by highest 6 bits | ||
Result by linear interpolation | ||
of 2 entries | ||
Timing is 2 * 8 bits * 2 entries = | ||
4 | ||
LU | ||
2 | 64 entries | Light |
16 bits per entry | F(1) = 0, F(0) = 1, others are | |
according to cubic | ||
Table indexed by 6 bits (1:5) | ||
Result by linear interpolation of 2 entries | ||
Timing is 2 * 8 bits = 4 cycles | ||
Calculation of Ambient Contribution
Constant | Value | ||
K1 | Iaka | ||
Calculation of Diffuse Contribution
diffuse=k d O d(N.L)
There are 2 different implementations to consider:
diffuse=kdOdZL
Constant | Value | ||
K1 | kd(N · L) = kdZL | ||
diffuse=k d O d(N.L)
Constant | Value | ||
K1 | kd | ||
Calculation of Specular Contribution
specular=k s O s(R·V)n
where Os=kscOd+(1−ksc)Ip
Constant | Value | ||
K1 | kskscZL n | ||
K2 | (1-ksc)IpksZL n | ||
Constant | Value | ||
K1 | ks | ||
K2 | ksc | ||
K3 | (1 − ksc)Ip | ||
The following lookup table is used:
Lookup | | Details |
LU | ||
1 | 32 entries | Xn |
16 bits per | Table indexed by 5 highest bits of | |
entry | integer R · V | |
Result by linear interpolation of 2 entries | ||
using fraction of R · V. | ||
Interpolation by 2 Multiplies. | ||
The time taken to retrieve the data from the | ||
lookup is 2 * 8 bits * 2 entries = 4 cycles. | ||
When Ambient Light is the Only Illumination
Constant | Value |
K1 | Ip |
Constant | Value |
K1 | Kd(NsL) = KdLZ |
K2 | Ksc |
K3 | Ks(NsH)n = KsHZ 2 |
K4 | Ip |
Constant | Value |
K1 | kd(LsN) = kdLZ |
K4 | Ip |
K5 | (1 − ks(NsH)n)Ip = (1 − ksHZ n)Ip |
K6 | kscks(NsH)nIp = kscksHZ nIp |
K7 | Iaka |
Constant | Value | ||
K1 | XL | ||
K2 | YL | ||
K3 | ZL | ||
K4 | IP | ||
Constant | Value | ||
K1 | XP | ||
K2 | YP | ||
K3 | IP | ||
Constant | Value |
K1 | Xp |
K2 | Yp |
K3 | Ip |
Constant | Value |
K1 | Xp |
K2 | Yp |
K3 | Ip |
Segment | First | Last dot | ||
0 | 0 | 749 | ||
1 | 750 | 1499 | ||
2 | 1500 | 2249 | ||
3 | 2250 | 2999 | ||
4 | 3000 | 3749 | ||
5 | 3750 | 4499 | ||
6 | 4500 | 5249 | ||
7 | 5250 | 5999 | ||
Constant | Value | ||
K1 | 375 | ||
Symbolic | |||
Nomenclature | Description | ||
F[X] | Function F, taking a single | ||
parameter X | |||
F[X, Y] | Function F, taking two | ||
parameters, X and Y | |||
X | Y | X concatenated with Y | ||
X | Bitwise X AND Y | ||
X | Bitwise X OR Y | ||
(inclusive-OR) | |||
X ⊕ Y | Bitwise X XOR Y | ||
(exclusive-OR) | |||
~X | Bitwise NOT X (complement) | ||
X ← Y | X is assigned the value Y | ||
X ← {Y, Z} | The domain of assignment | ||
inputs to X is Y and Z. | |||
X = Y | X is equal to Y | ||
X ≠ Y | X is not equal to Y | ||
Decrement X by 1 (floor 0) | |||
Increment X by 1 (with | |||
wrapping based on | |||
register length) | |||
Erase X | Erase Flash memory register X | ||
SetBits[X, Y] | Set the bits of the Flash | ||
memory register X based on Y | |||
Z ← ShiftRight[X, Y] | Shift register X right one | ||
bit position, taking input | |||
bit from Y and placing the | |||
output bit in Z | |||
Basic Terms
A message, denoted by M, is plaintext. The process of transforming M into cyphertext C, where the substance of M is hidden, is called encryption. The process of transforming C back into M is called decryption. Referring to the encryption function as E, and the decryption function as D, we have the following identities:
E[M]=C
D[C]=M
Therefore the following identity is true:
D[E[M]]=M
Symmetric Cryptography
A symmetric encryption algorithm is one where:
-
- the encryption function E relies on key K1,
- the decryption function D relies on key K2,
- K2 can be derived from K1, and
- K1 can be derived from K2.
In most symmetric algorithms, K1 usually equals K2. However, even if K1 does not equal K2, given that one key can be derived from the other, a single key K can suffice for the mathematical definition. Thus:
EK[M]=C
Dk[C]=M
An enormous variety of symmetric algorithms exist, from the textbooks of ancient history through to sophisticated modern algorithms. Many of these are insecure, in that modern cryptanalysis techniques can successfully attack the algorithm to the extent that K can be derived. The security of the particular symmetric algorithm is normally a function of two things: the strength of the algorithm and the length of the key. The following algorithms include suitable aspects for utilization in the authentication chip.
EK3[DK2[EK1[M]]]=C
DK3[EK2[DK1[C]]]=M
The main advantage of triple-DES is that existing DES implementations can be used to give more security than single key DES. Specifically, triple-DES gives protection of equivalent key length of 112 bits. Triple-DES does not give the equivalent protection of a 168-bit key (3×56) as one might naively expect. Equipment that performs triple-DES decoding and/or encoding cannot be exported from the United States.
Blowfish
Blowfish, is a symmetric block cipher first presented by Schneier in 1994. It takes a variable length key, from 32 bits to 448 bits. In addition, it is much faster than DES. The Blowfish algorithm consists of two parts: a key-expansion part and a data-encryption part. Key expansion converts a key of at most 448 bits into several subkey arrays totaling 4168 bytes. Data encryption occurs via a 16-round Feistel network. All operations are XORs and additions on 32-bit words, with four index array lookups per round. It should be noted that decryption is the same as encryption except that the subkey arrays are used in the reverse order. Complexity of implementation is therefore reduced compared to other algorithms that do not have such symmetry.
RC5
Designed by Ron Rivest in 1995, RC5 has a variable block size, key size, and number of rounds. Typically, however, it uses a 64-bit block size and a 128-bit key. The RC5 algorithm consists of two parts: a key-expansion part and a data-encryption part. Key expansion converts a key into 2r+2 subkeys (where r=the number of rounds), each subkey being w bits. For a 64-bit blocksize with 16 rounds (w=32, r=16), the subkey arrays total 136 bytes. Data encryption uses
IDEA
Developed in 1990 by Lai and Massey, the first incarnation of the IDEA cipher was called PES. After differential cryptanalysis was discovered by Biham and Shamir in 1991, the algorithm was strengthened, with the result being published in 1992 as IDEA. IDEA uses 128 bit-keys to operate on 64-bit plaintext blocks. The same algorithm is used for encryption and decryption. It is generally regarded to be the most secure block algorithm available today. It is described in U.S. Pat. No. 5,214,703, issued in 1993.
Asymmetric Cryptography
As alternative an asymmetric algorithm could be used. An asymmetric encryption algorithm is one where:
-
- the encryption function E relies on key K1,
- the decryption function D relies on key K2,
- K2 cannot be derived from K1 in a reasonable amount of time, and
- K1 cannot be derived from K2 in a reasonable amount of time.
Thus:
EK1[M]=C
DK2[C]=M
These algorithms are also called public-key because one key K1 can be made public. Thus anyone can encrypt a message (using K1), but only the person with the corresponding decryption key (K2) can decrypt and thus read the message. In most cases, the following identity also holds:
EK2[M]=C
DK1[C]=M
This identity is very important because it implies that anyone with the public key K1 can see. M and know that it came from the owner of K2. No-one else could have generated C because to do so would imply knowledge of K2. The property of not being able to derive K1 from K2 and vice versa in a reasonable time is of course clouded by the concept of reasonable time. What has been demonstrated time after time, is that a calculation that was thought to require a long time has been made possible by the introduction of faster computers, new algorithms etc. The security of asymmetric algorithms is based on the difficulty of one of two problems: factoring large numbers (more specifically large numbers that are the product of two large primes), and the difficulty of calculating discrete logarithms in a finite field. Factoring large numbers is conjectured to be a hard problem given today's understanding of mathematics. The problem however, is that factoring is getting easier much faster than anticipated. Ron Rivest in 1977 said that factoring a 125-digit number would take 40 quadrillion years. In 1994 a 129-digit number was factored. According to Schneier, you need a 1024-bit number to get the level of security today that you got from a 512-bit number in the 1980's. If the key is to last for some years then 1024 bits may not even be enough. Rivest revised his key length estimates in 1990: he suggests 1628 bits for high security lasting until 2005, and 1884 bits for high security lasting until 2015. By contrast, Schneier suggests 2048 bits are required in order to protect against corporations and governments until 2015.
A number of public key cryptographic algorithms exist. Most are impractical to implement, and many generate a very large C for a given M or require enormous keys. Still others, while secure, are far too slow to be practical for several years. Because of this, many public-key systems are hybrid—a public key mechanism is used to transmit a symmetric session key, and then the session key is used for the actual messages. All of the algorithms have a problem in terms of key selection. A random number is simply not secure enough. The two large primes p and q must be chosen carefully—there are certain weak combinations that can be factored more easily (some of the weak keys can be tested for). But nonetheless, key selection is not a simple matter of randomly selecting 1024 bits for example. Consequently the key selection process must also be secure.
Of the practical algorithms in use under public scrutiny, the following may be suitable for utilization:
DSA
DSA (Digital Signature Standard) is an algorithm designed as part of the Digital Signature Standard (DSS). As defined, it cannot be used for generalized encryption. In addition, compared to RSA, DSA is 10 to 40 times slower for signature verification. DSA explicitly uses the SHA-1 hashing algorithm (see definition in
One-way Functions below). DSA key generation relies on finding two primes p and q such that q divides p−1. According to Schneier, a 1024-bit p value is required for long term DSA security. However the DSA standard does not permit values of p larger than 1024 bits (p must also be a multiple of 64 bits). The US Government owns the DSA algorithm and has at least one relevant patent (U.S. Pat. No. 5,231,688 granted in 1993).
ElGamal
The ElGamal scheme is used for both encryption and digital signatures. The security is based on the difficulty of calculating discrete logarithms in a finite field. Key selection involves the selection of a prime p, and two random numbers g and x such that both g and x are less than p. Then calculate y=gx mod p. The public key is y, g, and p. The private key is x.
Cryptographic Challenge-Response Protocols and Zero Knowledge Proofs
The general principle of a challenge-response protocol is to provide identity authentication adapted to a camera system. The simplest form of challenge-response takes the form of a secret password. A asks B for the secret password, and if B responds with the correct password, A declares B authentic. There are three main problems with this kind of simplistic protocol. Firstly, once B has given out the password, any observer C will know what the password is. Secondly, A must know the password in order to verify it. Thirdly, if C impersonates A, then B will give the password to C (thinking C was A), thus compromising B. Using a copyright text (such as a haiku) is a weaker alternative as we are assuming that anyone is able to copy the password (for example in a country where intellectual property is not respected). The idea of cryptographic challenge-response protocols is that one entity (the claimant) proves its identity to another (the verifier) by demonstrating knowledge of a secret known to be associated with that entity, without revealing the secret itself to the verifier during the protocol. In the generalized case of cryptographic challenge-response protocols, with some schemes the verifier knows the secret, while in others the secret is not even known by the verifier. Since the discussion of this embodiment specifically concerns Authentication, the actual cryptographic challenge-response protocols used for authentication are detailed in the appropriate sections. However the concept of Zero Knowledge Proofs will be discussed here. The Zero Knowledge Proof protocol, first described by Feige, Fiat and Shamir is extensively used in Smart Cards for the purpose of authentication. The protocol's effectiveness is based on the assumption that it is computationally infeasible to compute square roots modulo a large composite integer with unknown factorization. This is provably equivalent to the assumption that factoring large integers is difficult. It should be noted that there is no need for the claimant to have significant computing power. Smart cards implement this kind of authentication using only a few modular multiplications. The Zero Knowledge Proof protocol is described in U.S. Pat. No. 4,748,668.
One-Way Functions
-
- The key for a given strength encryption algorithm is shorter for a symmetric algorithm than an asymmetric algorithm
- Symmetric algorithms are faster to compute and require less software/silicon
The selection of a good key depends on the encryption algorithm chosen. Certain keys are not strong for particular encryption algorithms, so any key needs to be tested for strength. The more tests that need to be performed for key selection, the less likely the key will remain hidden.
Random Number Sequences
Consider a random number sequence R0, R1, . . . , RI, Ri+1. We define the one-way function F such that F[X] returns the Xth random number in the random sequence. However we must ensure that F[X] is repeatable for a given X on different implementations. The random number sequence therefore cannot be truly random. Instead, it must be pseudo-random, with the generator making use of a specific seed.
There are a large number of issues concerned with defining good random number generators. Knuth, describes what makes a generator “good” (including statistical tests), and the general problems associated with constructing them. The majority of random number generators produce the ith random number from the i−1th state—the only way to determine the ith number is to iterate from the 0th number to the ith. If i is large, it may not be practical to wait for i iterations. However there is a type of random number generator that does allow random access. Blum, Blum and Shub define the ideal generator as follows: “ . . . we would like a pseudo-random sequence generator to quickly produce, from short seeds, long sequences (of bits) that appear in every way to be generated by successive flips of a fair coin”. They defined the x2 mod n generator, more commonly referred to as the BBS generator. They showed that given certain assumptions upon which modern cryptography relies, a BBS generator passes extremely stringent statistical tests.
The BBS generator relies on selecting n which is a Blum integer (n=pq where p and q are large prime numbers, p≠q,p mod 4=3, andq mod 4=3). The initial state of the generator is given by x0 where x0=x2 mod n, and x is a random integer relatively prime to n. The ith pseudo-random bit is the least significant bit of xi where xi=xi−1 2 mod n. As an extra property, knowledge of p and q allows a direct calculation of the ith number in the sequence as follows: xi=x0 y mod n, where y=2i mod ((p−1)(q−1))
Without knowledge of p and q, the generator must iterate (the security of calculation relies on the difficulty of factoring large numbers). When first defined, the primary problem with the BBS generator was the amount of work required for a single output bit. The algorithm was considered too slow for most applications. However the advent of Montgomery reduction arithmetic has given rise to more practical implementations. In addition, Vazirani and Vazirani have shown that depending on the size of n, more bits can safely be taken from xi without compromising the security of the generator. Assuming we only take 1 bit per xi, N bits (and hence N iterations of the bit generator function) are needed in order to generate an N-bit random number. To the outside observer, given a particular set of bits, there is no way to determine the next bit other than a 50/50 probability. If the x, p and q are hidden, they act as a key, and it is computationally unfeasible to take an output bit stream and compute x, p, and q. It is also computationally unfeasible to determine the value of i used to generate a given set of pseudo-random bits. This last feature makes the generator one-way. Different values of i can produce identical bit sequences of a given length (e.g. 32 bits of random bits). Even if x, p and q are known, for a given F[i], i can only be derived as a set of possibilities, not as a certain value (of course if the domain of i is known, then the set of possibilities is reduced further). However, there are problems in selecting a good p and q, and a good seed x. In particular, Ritter describes a problem in selecting x. The nature of the problem is that a BBS generator does not create a single cycle of known length. Instead, it creates cycles of various lengths, including degenerate (zero-length) cycles. Thus a BBS generator cannot be initialized with a random state—it might be on a short cycle.
Hash Functions
Special one-way functions, known as Hash functions map arbitrary length messages to fixed-length hash values. Hash functions are referred to as H[M]. Since the input is arbitrary length, a hash function has a compression component in order to produce a fixed length output. Hash functions also have an obfuscation component in order to make it difficult to find collisions and to determine information about M from H[M]. Because collisions do exist, most applications require that the hash algorithm is preimage resistant, in that for a given X1 it is difficult to find X2 such that H[X1]=H[X2]. In addition, most applications also require the hash algorithm to be collision resistant (i.e. it should be hard to find two messages X1 and X2 such that H[X1]=H[X2]). It is an open problem whether a collision-resistant hash function, in the idealist sense, can exist at all. The primary application for hash functions is in the reduction of an input message into a digital “fingerprint” before the application of a digital signature algorithm. One problem of collisions with digital signatures can be seen in the following example. - A has a long message M1 that says “I owe B $10”. A signs H[M1] using his private key. B, being greedy, then searches for a collision message M2 where H[M2]=H[M1] but where M2 is favorable to B, for example “I owe B $1 million”. Clearly it is in A's interest to ensure that it is difficult to find such an M2.
Examples of collision resistant one-way hash functions are SHA-1, MD5 and RIPEMD-160, all derived from MD4.
MD4
Ron Rivest introduced MD4 in 1990. It is mentioned here because all other one-way hash functions are derived in some way from MD4. MD4 is now considered completely broken in that collisions can be calculated instead of searched for. In the example above, B could trivially generate a substitute message M2 with the same hash value as the original message M1.
MD5
Ron Rivest introduced MD5 in 1991 as a more secure MD4. Like MD4, MD5 produces a 128-bit hash value. Dobbertin describes the status of MD5 after recent attacks. He describes how pseudo-collisions have been found in MD5, indicating a weakness in the compression function, and more recently, collisions have been found. This means that MD5 should not be used for compression in digital signature schemes where the existence of collisions may have dire consequences. However MD5 can still be used as a one-way function. In addition, the HMAC-MD5 construct is not affected by these recent attacks.
SHA-1
SHA-1 is very similar to MD5, but has a 160-bit hash value (MD5 only has 128 bits of hash value). SHA-1 was designed and introduced by the NIST and NSA for use in the Digital Signature Standard (DSS). The original published description was called SHA, but very soon afterwards, was revised to become SHA-1, supposedly to correct a security flaw in SHA (although the NSA has not released the mathematical reasoning behind the change). There are no known cryptographic attacks against SHA-1. It is also more resistant to brute-force attacks than MD4 or MD5 simply because of the longer hash result. The US Government owns the SHA-1 and DSA algorithms (a digital signature authentication algorithm defined as part of DSS) and has at least one relevant patent (U.S. Pat. No. 5,231,688 granted in 1993).
RIPEMD-160
RIPEMD-160 is a hash function derived from its predecessor RIPEMD (developed for the European Community's RIPE project in 1992). As its name suggests, RIPEMD-160 produces a 160-bit hash result. Tuned for software implementations on 32-bit architectures, RIPEMD-160 is intended to provide a high level of security for 10 years or more. Although there have been no successful attacks on RIPEMD-160, it is comparatively new and has not been extensively cryptanalyzed. The original RIPEMD algorithm was specifically designed to resist known cryptographic attacks on MD4. The recent attacks on MD5 showed similar weaknesses in the RIPEMD 128-bit hash function. Although the attacks showed only theoretical weaknesses, Dobbertin, Preneel and Bosselaers further strengthened RIPEMD into a new algorithm RIPEMD-160.
Message Authentication Codes
The problem of message authentication can be summed up as follows:
-
- Speed, because one-way hash functions in general work much faster than encryption;
- Message size, because EK[H[M]] is at least the same size as M, while H[M] is a fixed size (usually considerably smaller than M);
- Hardware/software requirements—keyed one-way hash functions are typically far less complexity than their encryption-based counterparts; and
- One-way hash function implementations are not considered to be encryption or decryption devices and therefore are not subject to US export controls.
It should be noted that hash functions were never originally designed to contain a key or to support message authentication. As a result, some ad hoc methods of using hash functions to perform message authentication, including various functions that concatenate messages with secret prefixes, suffixes, or both have been proposed. Most of these ad hoc methods have been successfully attacked by sophisticated means. Additional MACs have been suggested based on XOR schemes and Toeplitz matricies (including the special case of LFSR-based constructions).
HMAC
The HMAC construction in particular is gaining acceptance as a solution for Internet message authentication security protocols. The HMAC construction acts as a wrapper, using the underlying hash function in a black-box way. Replacement of the hash function is straightforward if desired due to security or performance reasons. However, the major advantage of the HMAC construct is that it can be proven secure provided the underlying hash function has some reasonable cryptographic strengths—that is, HMAC's strengths are directly connected to the strength of the hash function. Since the HMAC construct is a wrapper, any iterative hash function can be used in an HMAC. Examples include HMAC-MD5, HMAC-SHA1, HMAC-RIPEMD160 etc. Given the following definitions: - H=the hash function (e.g. MD5 or SHA-1)
- n=number of bits output from H (e.g. 160 for SHA-1, 128 bits for MD5)
- M=the data to which the MAC function is to be applied
- K=the secret key shared by the two parties
- ipad=0x36 repeated 64 times
- opad=0x5C repeated 64 times
The HMAC algorithm is as follows:
Extend K to 64 bytes by appending 0x00 bytes to the end of K
XOR the 64 byte string created in (1) with ipad
Append data stream M to the 64 byte string created in (2)
Apply H to the stream generated in (3)
XOR the 64 byte string created in (1) With opad
Append the H result from (4) to the 64 byte string resulting from (5)
Apply H to the output of (6) and output the result
Thus:
HMAC[M]=H[(K⊕opad)|H[(K⊕ipad)|M]]
The recommended key length is at least n bits, although it should not be longer than 64 bytes (the length of the hashing block). A key longer than n bits does not add to the security of the function. HMAC optionally allows truncation of the final output e.g. truncation to 128 bits from 160 bits. The HMAC designers' Request for Comments was issued in 1997, one year after the algorithm was first introduced. The designers claimed that the strongest known attack against HMAC is based on the frequency of collisions for the hash function H and is totally impractical for minimally reasonable hash functions. More recently, HMAC protocols with replay prevention components have been defined in order to prevent the capture and replay of any M, HMAC[M] combination within a given time period.
Random Numbers and Time Varying Messages
The use of a random number generator as a one-way function has already been examined. However, random number generator theory is very much intertwined with cryptography, security, and authentication. There are a large number of issues concerned with defining good random number generators. Knuth, describes what makes a generator good (including statistical tests), and the general problems associated with constructing them. One of the uses for random numbers is to ensure that messages vary over time. Consider a system where A encrypts commands and sends them to B. If the encryption algorithm produces the same output for a given input, an attacker could simply record the messages and play them back to fool B. There is no need for the attacker to crack the encryption mechanism other than to know which message to play to B (while pretending to be A). Consequently messages often include a random number and a time stamp to ensure that the message (and hence its encrypted counterpart) varies each time. Random number generators are also often used to generate keys. It is therefore best to say at the moment, that all generators are insecure for this purpose. For example, the Berlekamp-Massey algorithm, is a classic attack on an LFSR random number generator. If the LFSR is of length n, then only 2n bits of the sequence suffice to determine the LFSR, compromising the key generator. If, however, the only role of the random number generator is to make sure that messages vary over time, the security of the generator and seed is not as important as it is for session key generation. If however, the random number seed generator is compromised, and an attacker is able to calculate future “random” numbers, it can leave some protocols open to attack. Any new protocol should be examined with respect to this situation. The actual type of random number generator required will depend upon the implementation and the purposes for which the generator is used. Generators include Blum, Blum, and Shub, stream ciphers such as RC4 by Ron Rivest, hash functions such as SHA-1 and RIPEMD-160, and traditional generators such LFSRs (Linear Feedback Shift Registers) and their more recent counterpart FCSRs (Feedback with Carry Shift Registers).
Attacks
This section describes the various types of attacks that can be undertaken to break an authentication cryptosystem such as the authentication chip. The attacks are grouped into physical and logical attacks. Physical attacks describe methods for breaking a physical implementation of a cryptosystem (for example, breaking open a chip to retrieve the key), while logical attacks involve attacks on the cryptosystem that are implementation independent. Logical types of attack work on the protocols or algorithms, and attempt to do one of three things: - Bypass the authentication process altogether
- Obtain the secret key by force or deduction, so that any question can be answered
- Find enough about the nature of the authenticating questions and answers in order to, without the key, give the right answer to each question.
The attack styles and the forms they take are detailed below. Regardless of the algorithms and protocol used by a security chip, the circuitry of the authentication part of the chip can come under physical attack. Physical attack comes in four main ways, although the form of the attack can vary: - Bypassing the Authentication Chip altogether
- Physical examination of chip while in operation (destructive and non-destructive)
- Physical decomposition of chip
- Physical alteration of chip
The attack styles and the forms they take are detailed below. This section does not suggest solutions to these attacks. It merely describes each attack type. The examination is restricted to the context of an Authentication chip 53 (as opposed to some other kind of system, such as Internet authentication) attached to some System.
Logical Attacks
These attacks are those which do not depend on the physical implementation of the cryptosystem. They work against the protocols and the security of the algorithms and random number generators.
Ciphertext Only Attack
This is where an attacker has one or more encrypted messages, all encrypted using the same algorithm. The aim of the attacker is to obtain the plaintext messages from the encrypted messages. Ideally, the key can be recovered so that all messages in the future can also be recovered.
Known Plaintext Attack
This is where an attacker has both the plaintext and the encrypted form of the plaintext. In the case of an Authentication Chip, a known-plaintext attack is one where the attacker can see the data flow between the System and the Authentication Chip. The inputs and outputs are observed (not chosen by the attacker), and can be analyzed for weaknesses (such as birthday attacks or by a search for differentially interesting input/output pairs). A known plaintext attack is a weaker type of attack than the chosen plaintext attack, since the attacker can only observe the data flow. A known plaintext attack can be carried out by connecting a logic analyzer to the connection between the System and the Authentication Chip.
Chosen Plaintext Attacks
A chosen plaintext attack describes one where a cryptanalyst has the ability to send any chosen message to the cryptosystem, and observe the response. If the cryptanalyst knows the algorithm, there may be a relationship between inputs and outputs that can be exploited by feeding a specific output to the input of another function. On a system using an embedded Authentication Chip, it is generally very difficult to prevent chosen plaintext attacks since the cryptanalyst can logically pretend he/she is the System, and thus send any chosen bit-pattern streams to the Authentication Chip.
Adaptive Chosen Plaintext Attacks
This type of attack is similar to the chosen plaintext attacks except that the attacker has the added ability to modify subsequent chosen plaintexts based upon the results of previous experiments. This is certainly the case with any System/Authentication Chip scenario described when utilized for consumables such as photocopiers and toner cartridges, especially since both Systems and Consumables are made available to the public.
Brute Force Attack
A guaranteed way to break any key-based cryptosystem algorithm is simply to try every key. Eventually the right one will be found. This is known as a Brute Force Attack. However, the more key possibilities there are, the more keys must be tried, and hence the longer it takes (on average) to find the right one. If there are N keys, it will take a maximum of N tries. If the key is N bits long, it will take a maximum of 2N tries, with a 50% chance of finding the key after only half the attempts (2N−1). The longer N becomes, the longer it will take to find the key, and hence the more secure the key is. Of course, an attack may guess the key on the first try, but this is more unlikely the longer the key is. Consider a key length of 56 bits. In the worst case, all 256 tests (7.2×1016 tests) must be made to find the key. In 1977, Diffie and Hellman described a specialized machine for cracking DES, consisting of one million processors, each capable of running one million tests per second. Such a machine would take 20 hours to break any DES code. Consider a key length of 128 bits. In the worst case, all 2128 tests (3.4×1038 tests) must be made to find the key. This would take ten billion years on an array of a trillion processors each running 1 billion tests per second. With a long enough key length, a Brute Force Attack takes too long to be worth the attacker's efforts.
Guessing Attack
This type of attack is where an attacker attempts to simply “guess” the key. As an attack it is identical to the Brute force attack, where the odds of success depend on the length of the key.
Quantum Computer Attack
To break an n-bit key, a quantum computer (NMR, Optical, or Caged Atom) containing
n qubits embedded in an appropriate algorithm must be built. The quantum computer effectively exists in 2n simultaneous coherent states. The trick is to extract the right coherent state without causing any decoherence. To date this has been achieved with a 2 qubit system (which exists in 4 coherent states). It is thought possible to extend this to 6 qubits (with 64 simultaneous coherent states) within a few years.
Unfortunately, every additional qubit halves the relative strength of the signal representing the key. This rapidly becomes a serious impediment to key retrieval, especially with the long keys used in cryptographically secure systems. As a result, attacks on a cryptographically secure key (e.g. 160 bits) using a Quantum Computer are likely not to be feasible and it is extremely unlikely that quantum computers will have achieved more than 50 or so qubits within the commercial lifetime of the Authentication Chips. Even using a 50 qubit quantum computer, 2110 tests are required to crack a 160 bit key.
Purposeful Error Attack
With certain algorithms, attackers can gather valuable information from the results of a bad input. This can range from the error message text to the time taken for the error to be generated. A simple example is that of a userid/password scheme. If the error message usually says ‘Bad userid’, then when an attacker gets a message saying “Bad password” instead, then they know that the userid is correct. If the message always says “Bad userid/password” then much less information is given to the attacker. A more complex example is that of the recent published method of cracking encryption codes from secure web sites. The attack involves sending particular messages to a server and observing the error message responses. The responses give enough information to learn the keys—even the lack of a response gives some information. An example of algorithmic time can be seen with an algorithm that returns an error as soon as an erroneous bit is detected in the input message. Depending on hardware implementation, it may be a simple method for the attacker to time the response and alter each bit one by one depending on the time taken for the error response, and thus obtain the key. Certainly in a chip implementation the time taken can be observed with far greater accuracy than over the Internet.
Birthday Attack
This attack is named after the famous “birthday paradox” (which is not actually a paradox at all). The odds of one person sharing a birthday with another, is 1 in 365 (not counting leap years). Therefore there must be 183 people in a room for the odds to be more than 50% that one of them shares your birthday. However, there only needs to be 23 people in a room for there to be more than a 50% chance that any two share a birthday. This is because 23 people yields 253 different pairs. Birthday attacks are common attacks against hashing algorithms, especially those algorithms that combine hashing with digital signatures. If a message has been generated and already signed, an attacker must search for a collision message that hashes to the same value (analogous to finding one person who shares your birthday). However, if the attacker can generate the message, the Birthday Attack comes into play. The attacker searches for two messages that share the same hash value (analogous to any two people sharing a birthday), only one message is acceptable to the person signing it, and the other is beneficial for the attacker. Once the person has signed the original message the attacker simply claims now that the person signed the alternative message—mathematically there is no way to tell which message was the original, since they both hash to the same value. Assuming a Brute Force Attack is the only way to determine a match, the weakening of an n-bit key by the birthday attack is 2n/2. A key length of 128 bits that is susceptible to the birthday attack has an effective length of only 64 bits.
Chaining Attack
These are attacks made against the chaining nature of hash functions. They focus on the compression function of a hash function. The idea is based on the fact that a hash function generally takes arbitrary length input and produces a constant length output by processing the input n bits at a time. The output from one block is used as the chaining variable set into the next block. Rather than finding a collision against an entire input, the idea is that given an input chaining variable set, to find a substitute block that will result in the same output chaining variables as the proper message. The number of choices for a particular block is based on the length of the block. If the chaining variable is c bits, the hashing function behaves like a random mapping, and the block length is b bits, the number of such b-bit blocks is approximately 2b/2c. The challenge for finding a substitution block is that such blocks are a sparse subset of all possible blocks. For SHA-1, the number of 512 bit blocks is approximately 2512/2160, or 2352. The chance of finding a block by brute force search is about 1 in 2160.
Substitution with a Complete Lookup Table
If the number of potential messages sent to the chip is small, then there is no need for a clone manufacturer to crack the key. Instead, the clone manufacturer could incorporate a ROM in their chip that had a record of all of the responses from a genuine chip to the codes sent by the system. The larger the key, and the larger the response, the more space is required for such a lookup table.
Substitution with a Sparse Lookup Table
If the messages sent to the chip are somehow predictable, rather than effectively random, then the clone manufacturer need not provide a complete lookup table. For example: - If the message is simply a serial number, the clone manufacturer need simply provide a lookup table that contains values for past and predicted future serial numbers. There are unlikely to be more than 109 of these.
- If the test code is simply the date, then the clone manufacturer can produce a lookup table using the date as the address.
- If the test code is a pseudo-random number using either the serial number or the date as a seed, then the clone manufacturer just needs to crack the pseudo-random number generator in the System. This is probably not difficult, as they have access to the object code of the System. The clone manufacturer would then produce a content addressable memory (or other sparse array lookup) using these codes to access stored authentication codes.
Differential Cryptanalysis
Differential cryptanalysis describes an attack where pairs of input streams are generated with known differences, and the differences in the encoded streams are analyzed. Existing differential attacks are heavily dependent on the structure of S boxes, as used in DES and other similar algorithms. Although other algorithms such as HMAC-SHA1 have no S boxes, an attacker can undertake a differential-like attack by undertaking statistical analysis of:
Message Substitution Attacks
In certain protocols, a man-in-the-middle can substitute part or all of a message. This is where a real Authentication Chip is plugged into a reusable clone chip within the consumable. The clone chip intercepts all messages between the System and the Authentication Chip, and can perform a number of substitution attacks. Consider a message containing a header followed by content. An attacker may not be able to generate a valid header, but may be able to substitute their own content, especially if the valid response is something along the lines of “Yes, I received your message”. Even if the return message is “Yes, I received the following message” . . . , the attacker may be able to substitute the original message before sending the acknowledgement back to the original sender. Message Authentication Codes were developed to combat most message substitution attacks.
Reverse Engineering the Key Generator
If a pseudo-random number generator is used to generate keys, there is the potential for a clone manufacture to obtain the generator program or to deduce the random seed used. This was the way in which the Netscape security program was initially broken.
Bypassing Authentication Altogether
It may be that there are problems in the authentication protocols that can allow a bypass of the authentication process altogether. With these kinds of attacks the key is completely irrelevant, and the attacker has no need to recover it or deduce it. Consider an example of a system that Authenticates at power-up, but does not authenticate at any other time. A reusable consumable with a clone Authentication Chip may make use of a real Authentication Chip. The
Garrote/Bribe Attack
If people know the key, there is the possibility that they could tell someone else. The telling may be due to coercion (bribe, garrote etc), revenge (e.g. a disgruntled employee), or simply for principle. These attacks are usually cheaper and easier than other efforts at deducing the key. As an example, a number of people claiming to be involved with the development of the Divx standard have recently (May/June 1998) been making noises on a variety of DVD newsgroups to the effect they would like to help develop Divx specific cracking devices—out of principle.
Physical Attacks
The following attacks assume implementation of an authentication mechanism in a silicon chip that the attacker has physical access to. The first attack, Reading ROM, describes an attack when keys are stored in ROM, while the remaining attacks assume that a secret key is stored in Flash memory.
Reading ROM
If a key is stored in ROM it can be read directly. A ROM can thus be safely used to hold a public key (for use in asymmetric cryptography), but not to hold a private key. In symmetric cryptography, a ROM is completely insecure. Using a copyright text (such as a haiku) as the key is not sufficient, because we are assuming that the cloning of the chip is occurring in a country where intellectual property is not respected.
Reverse Engineering of Chip
Reverse engineering of the chip is where an attacker opens the chip and analyzes the circuitry. Once the circuitry has been analyzed the inner workings of the chip's algorithm can be recovered. Lucent Technologies have developed an active method known as TOBIC (Two photon OBIC, where OBIC stands for Optical Beam Induced Current), to image circuits. Developed primarily for static RAM analysis, the process involves removing any back materials, polishing the back surface to a mirror finish, and then focusing light on the surface. The excitation wavelength is specifically chosen not to induce a current in the IC. A Kerckhoffs in the nineteenth century made a fundamental assumption about cryptanalysis: if the algorithm's inner workings are the sole secret of the scheme, the scheme is as good as broken. He stipulated that the secrecy must reside entirely in the key. As a result, the best way to protect against reverse engineering of the chip is to make the inner workings irrelevant.
Usurping the Authentication Process
It must be assumed that any clone manufacturer has access to both the System and consumable designs. If the same channel is used for communication between the System and a trusted System Authentication Chip, and a non-trusted consumable Authentication Chip, it may be possible for the non-trusted chip to interrogate a trusted Authentication Chip in order to obtain the “correct answers”. If this is so, a clone manufacturer would not have to determine the key. They would only have to trick the System into using the responses from the System Authentication Chip. The alternative method of usurping the authentication process follows the same method as the logical attack “Bypassing the Authentication Process”, involving simulated loss of contact with the System whenever authentication processes take place, simulating power-down etc.
Modification of System
This kind of attack is where the System itself is modified to accept clone consumables. The attack may be a change of System ROM, a rewiring of the consumable, or, taken to the extreme case, a completely clone System. This kind of attack requires each individual System to be modified, and would most likely require the owner's consent. There would usually have to be a clear advantage for the consumer to undertake such a modification, since it would typically void warranty and would most likely be costly. An example of such a modification with a clear advantage to the consumer is a software patch to change fixed-region DVD players into region-free DVD players.
Direct Viewing of Chip Operation by Conventional Probing
If chip operation could be directly viewed using an STM or an electron beam, the keys could be recorded as they are read from the internal non-volatile memory and loaded into work registers. These forms of conventional probing require direct access to the top or front sides of the IC while it is powered.
Direct Viewing of the Non-Volatile Memory
If the chip were sliced so that the floating gates of the Flash memory were exposed, without discharging them, then the key could probably be viewed directly using an STM or SKM (Scanning Kelvin Microscope). However, slicing the chip to this level without discharging the gates is probably impossible. Using wet etching, plasma etching, ion milling (focused ion beam etching), or chemical mechanical polishing will almost certainly discharge the small charges present on the floating gates.
Viewing the Light Bursts Caused by State Changes
Whenever a gate changes state, a small amount of infrared energy is emitted. Since silicon is transparent to infrared, these changes can be observed by looking at the circuitry from the underside of a chip. While the emission process is weak, it is bright enough to be detected by highly sensitive equipment developed for use in astronomy. The technique, developed by IBM, is called PICA (Picosecond Imaging Circuit Analyzer). If the state of a register is known at time t, then watching that register change over time will reveal the exact value at time t+n, and if the data is part of the key, then that part is compromised.
Monitoring EMI
Whenever electronic circuitry operates, faint electromagnetic signals are given off. Relatively inexpensive equipment (a few thousand dollars) can monitor these signals. This could give enough information to allow an attacker to deduce the keys.
Viewing Idd Fluctuations
Even if keys cannot be viewed, there is a fluctuation in current whenever registers change state. If there is a high enough signal to noise ratio, an attacker can monitor the difference in Idd that may occur when programming over either a high or a low bit. The change in Idd can reveal information about the key. Attacks such as these have already been used to break smart cards.
Differential Fault Analysis
This attack assumes introduction of a bit error by ionization, microwave radiation, or environmental stress. In most cases such an error is more likely to adversely affect the Chip (eg cause the program code to crash) rather than cause beneficial changes which would reveal the key. Targeted faults such as ROM overwrite, gate destruction etc are far more likely to produce useful results.
Clock Glitch Attacks
Chips are typically designed to properly operate within a certain clock speed range. Some attackers attempt to introduce faults in logic by running the chip at extremely high clock speeds or introduce a clock glitch at a particular time for a particular duration. The idea is to create race conditions where the circuitry does not function properly. An example could be an AND gate that (because of race conditions) gates through Input1 all the time instead of the AND of Input1 and Input2. If an attacker knows the internal structure of the chip, they can attempt to introduce race conditions at the correct moment in the algorithm execution, thereby revealing information about the key (or in the worst case, the key itself).
Power Supply Attacks
Instead of creating a glitch in the clock signal, attackers can also produce glitches in the power supply where the power is increased or decreased to be outside the working operating voltage range. The net effect is the same as a clock glitch—introduction of error in the execution of a particular instruction. The idea is to stop the CPU from XORing the key, or from shifting the data one bit-position etc. Specific instructions are targeted so that information about the key is revealed.
Overwriting ROM
Single bits in a ROM can be overwritten using a laser cutter microscope, to either 1 or 0 depending on the sense of the logic. With a given opcode/operand set, it may be a simple matter for an attacker to change a conditional jump to a non-conditional jump, or perhaps change the destination of a register transfer. If the target instruction is chosen carefully, it may result in the key being revealed.
Modifying EEPROM/Flash
EEPROM/Flash attacks are similar to ROM attacks except that the laser cutter microscope technique can be used to both set and reset individual bits. This gives much greater scope in terms of modification of algorithms.
Gate Destruction
Anderson and Kuhn described the rump session of the 1997 workshop on Fast Software Encryption, where Biham and Shamir presented an attack on DES. The attack was to use a laser cutter to destroy an individual gate in the hardware implementation of a known block cipher (DES). The net effect of the attack was to force a particular bit of a register to be “stuck”. Biham and Shamir described the effect of forcing a particular register to be affected in this way—the least significant bit of the output from the round function is set to 0. Comparing the 6 least significant bits of the left half and the right half can recover several bits of the key. Damaging a number of chips in this way can reveal enough information about the key to make complete key recovery easy. An encryption chip modified in this way will have the property that encryption and decryption will no longer be inverses.
Overwrite Attacks
Instead of trying to read the Flash memory, an attacker may simply set a single bit by use of a laser cutter microscope. Although the attacker doesn't know the previous value, they know the new value. If the chip still works, the bit's original state must be the same as the new state. If the chip doesn't work any longer, the bit's original state must be the logical NOT of the current state. An attacker can perform this attack on each bit of the key and obtain the n-bit key using at most n chips (if the new bit matched the old bit, a new chip is not required for determining the next bit).
Test Circuitry Attack
Most chips contain test circuitry specifically designed to check for manufacturing defects. This includes BIST (Built In Self Test) and scan paths. Quite often the scan paths and test circuitry includes access and readout mechanisms for all the embedded latches. In some cases the test circuitry could potentially be used to give information about the contents of particular registers. Test circuitry is often disabled once the chip has passed all manufacturing tests, in some cases by blowing a specific connection within the chip. A determined attacker, however, can reconnect the test circuitry and hence enable it.
Memory Remanence
Values remain in RAM long after the power has been removed, although they do not remain long enough to be considered non-volatile. An attacker can remove power once sensitive information has been moved into RAM (for example working registers), and then attempt to read the value from RAM. This attack is most useful against security systems that have regular RAM chips. A classic example is where a security system was designed with an automatic power-shut-off that is triggered when the computer case is opened. The attacker was able to simply open the case, remove the RAM chips, and retrieve the key because of memory remanence.
Chip Theft Attack
If there are a number of stages in the lifetime of an Authentication Chip, each of these stages must be examined in terms of ramifications for security should chips be stolen. For example, if information is programmed into the chip in stages, theft of a chip between stages may allow an attacker to have access to key information or reduced efforts for attack. Similarly, if a chip is stolen directly after manufacture but before programming, does it give an attacker any logical or physical advantage?
Requirements
Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. The authentication mechanism is therefore built into an
Authentication
The authentication requirements for both Presence Only Authentication and Consumable Lifetime Authentication are restricted to case of a system authenticating a consumable. For Presence Only Authentication, we must be assured that an Authentication Chip is physically present. For Consumable Lifetime Authentication we also need to be assured that state data actually came from the Authentication Chip, and that it has not been altered en route. These issues cannot be separated—data that has been altered has a new source, and if the source cannot be determined, the question of alteration cannot be settled. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. The primary requirement therefore is to provide authentication by means that have withstood the scrutiny of experts. The authentication scheme used by the
-
- Bypass the authentication process altogether
- Obtain the secret key by force or deduction, so that any question can be answered
- Find enough about the nature of the authenticating questions and answers in order to, without the key, give the right answer to each question.
Data Storage Integrity
Although Authentication protocols take care of ensuring data integrity in communicated messages, data storage integrity is also required. Two kinds of data must be stored within the Authentication Chip:
Consumable State Data
Each
Decrement Only data is used to count down the availability of consumable resources. A photocopier's toner cartridge, for example, may store the amount of toner remaining as a Decrement Only data item. An ink cartridge for a color printer may store the amount of each ink color as a Decrement Only data item, requiring 3 (one for each of Cyan, Magenta, and Yellow), or even as many as 5 or 6 Decrement Only data items. The requirement for this kind of data item is that once programmed with an initial value at the manufacturing/programming stage, it can only reduce in value. Once it reaches the minimum value, it cannot decrement any further. The Decrement Only data item is only required by Consumable Lifetime Authentication.
Manufacture
The
-
- Bypassing the Authentication Chip altogether
- Physical examination of chip while in operation (destructive and non-destructive)
- Physical decomposition of chip
- Physical alteration of chip
Ideally, the chip should be exportable from the U.S., so it should not be possible to use anAuthentication chip 53 as a secure encryption device. This is low priority requirement since there are many companies in other countries able to manufacture the Authentication chips. In any case, the export restrictions from the U.S. may change.
Authentication
Existing solutions to the problem of authenticating consumables have typically relied on physical patents on packaging. However this does not stop home refill operations or clone manufacture in countries with weak industrial property protection. Consequently a much higher level of protection is required. It is not enough to provide an authentication method that is secret, relying on a home-brew security method that has not been scrutinized by security experts. Security systems such as Netscape's original proprietary system and the GSM Fraud Prevention Network used by cellular phones are examples where design secrecy caused the vulnerability of the security. Both security systems were broken by conventional means that would have been detected if the companies had followed an open design process. The solution is to provide authentication by means that have withstood the scrutiny of experts. A number of protocols that can be used for consumables authentication. We only use security methods that are publicly described, using known behaviors in this new way. For all protocols, the security of the scheme relies on a secret key, not a secret algorithm. All the protocols rely on a time-variant challenge (i.e. the challenge is different each time), where the response depends on the challenge and the secret. The challenge involves a random number so that any observer will not be able to gather useful information about a subsequent identification. Two protocols are presented for each of Presence Only Authentication and Consumable Lifetime Authentication. Although the protocols differ in the number of Authentication Chips required for the authentication process, in all cases the System authenticates the consumable. Certain protocols will work with either one or two chips, while other protocols only work with two chips. Whether one chip or two Authentication Chips are used the System is still responsible for making the authentication decision.
Single Chip Authentication
When only oneAuthentication chip 53 is used for the authentication protocol, a single chip (referred to as ChipA) is responsible for proving to a system (referred to as System) that it is authentic. At the start of the protocol, System is unsure of ChipA's authenticity. System undertakes a challenge-response protocol with ChipA, and thus determines ChipA's authenticity. In all protocols the authenticity of the consumable is directly based on the authenticity of the chip, i.e. if ChipA is considered authentic, then the consumable is considered authentic. The data flow can be seen inFIG. 167 . In single chip authentication protocols, System can be software, hardware or a combination of both. It is important to note that System is considered insecure—it can be easily reverse engineered by an attacker, either by examining the ROM or by examining circuitry. System is not specially engineered to be secure in itself.
Double Chip Authentication
In other protocols, two Authentication Chips are required as shown inFIG. 168 . A single chip (referred to as ChipA) is responsible for proving to a system (referred to as System) that it is authentic. As part of the authentication process, System makes use of a trusted Authentication Chip (referred to as ChipT). In double chip authentication protocols, System can be software, hardware or a combination of both. However ChipT must be a physical Authentication Chip. In some protocols ChipT and ChipA have the same internal structure, while in others ChipT and ChipA have different internal structures.
Presence Only Authentication (Insecure State Data)
For this level of consumable authentication we are only concerned about validating the presence of theAuthentication chip 53. Although the Authentication Chip can contain state information, the transmission of that state information would not be considered secure. Two protocols are presented.Protocol 1 requires 2 Authentication Chips, whileProtocol 2 can be implemented using either 1 or 2 Authentication Chips.
Protocol 1
Protocol 1 is a double chip protocol (two Authentication Chips are required). Each Authentication Chip contains the following values:
K | Key for FK[X]. Must be secret. | ||
R | Current random number. Does not have to be secret, but | ||
must be seeded with a different initial value for each | |||
chip instance. Changes with each invocation of the | |||
Random function. | |||
Each Authentication Chip contains the following logical functions:
Random [ ] | Returns R, and advances R to next in sequence. | ||
F[X] | Returns FK[X], the result of applying a one-way | ||
function F to X based upon the secret key K. | |||
The protocol is as follows:
-
- System requests Random[ ] from ChipT;
- ChipT returns R to System;
- System requests F[R] from both ChipT and ChipA;
- ChipT returns FKT[R] to System;
- ChipA returns FKA[R] to System;
- System compares FKT[R] with FKA[R]. If they are equal, then ChipA is considered valid. If not, then ChipA is considered invalid.
The data flow can be seen inFIG. 169 . The System does not have to comprehend FK[R] messages. It must merely check that the responses from ChipA and ChipT are the same. The System therefore does not require the key. The security ofProtocol 1 lies in two places: - The security of F[X]. Only Authentication chips contain the secret key, so anything that can produce an F[X] from an X that matches the F[X] generated by a trusted Authentication chip 53 (ChipT) must be authentic.
- The domain of R generated by all Authentication chips must be large and non-deterministic. If the domain of R generated by all Authentication chips is small, then there is no need for a clone manufacturer to crack the key. Instead, the clone manufacturer could incorporate a ROM in their chip that had a record of all of the responses from a genuine chip to the codes sent by the system. The Random function does not strictly have to be in the Authentication Chip, since System can potentially generate the same random number sequence. However it simplifies the design of System and ensures the security of the random number generator will be the same for all implementations that use the Authentication Chip, reducing possible error in system implementation.
Protocol 1 has Several Advantages: - K is not revealed during the authentication process
- Given X, a clone chip cannot generate FK[X] without K or access to a real Authentication Chip.
- System is easy to design, especially in low cost systems such as ink-jet printers, as no encryption or decryption is required by System itself.
- A wide range of keyed one-way functions exists, including symmetric cryptography, random number sequences, and message authentication codes.
- One-way functions require fewer gates and are easier to verify than asymmetric algorithms).
- Secure key size for a keyed one-way function does not have to be as large as for an asymmetric (public key) algorithm. A minimum of 128 bits can provide appropriate security if F[X] is a symmetric cryptographic function.
However there are Problems with this Protocol: - It is susceptible to chosen text attack. An attacker can plug the chip into their own system, generate chosen Rs, and observe the output. In order to find the key, an attacker can also search for an R that will generate a specific F[M] since multiple Authentication chips can be tested in parallel.
- Depending on the one-way function chosen, key generation can be complicated. The method of selecting a good key depends on the algorithm being used. Certain keys are weak for a given algorithm.
- The choice of the keyed one-way functions itself is non-trivial. Some require licensing due to patent protection.
A man-in-the middle could take action on a plaintext message M before passing it on to ChipA—it would be preferable if the man-in-the-middle did not see M until after ChipA had seen it. It would be even more preferable if a man-in-the-middle didn't see M at all.
If F is symmetric encryption, because of the key size needed for adequate security, the chips could not be exported from the USA since they could be used as strong encryption devices.
IfProtocol 1 is implemented with F as an asymmetric encryption algorithm, there is no advantage over the symmetric case—the keys needs to be longer and the encryption algorithm is more expensive in silicon.Protocol 1 must be implemented with 2 Authentication Chips in order to keep the key secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip.
Protocol 2
In some cases, System may contain a large amount of processing power. Alternatively, for instances of systems that are manufactured in large quantities, integration of ChipT into System may be desirable. Use of an asymmetrical encryption algorithm allows the ChipT portion of System to be insecure.Protocol 2 therefore, uses asymmetric cryptography. For this protocol, each chip contains the following values:
K | Key for EK[X] and DK[X]. Must be secret in ChipA. Does | ||
not have to be secret in ChipT. | |||
R | Current random number. Does not have to be secret, but | ||
must be seeded with a different initial value for each | |||
chip instance. Changes with each invocation of the | |||
Random function. | |||
The following functions are defined:
E[X] | ChipT only. Returns EK[X] where E is asymmetric encrypt |
function E. | |
D[X] | ChipA only. Returns DK[X] where D is asymmetric decrypt |
function D. | |
Random[ ] | ChipT only. Returns R | EK[R], where R is random number |
based on seed S. Advances R to next in random number | |
sequence. | |
The public key KT is in ChipT, while the secret key KA is in ChipA. Having KT in ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that the seed for R is different for each chip or system).
-
- System calls ChipT's Random function;
- ChipT returns R|EKT[R] to System;
- System calls ChipA's D function, passing in EKT[R];
- ChipA returns R, obtained by DKA[EKT[R]];
- System compares R from ChipA to the original R generated by ChipT. If they are equal, then ChipA is considered valid. If not, ChipA is invalid.
The data flow can be seen inFIG. 170 .Protocol 2 has the following advantages: - KA (the secret key) is not revealed during the authentication process
- Given EKT[X], a clone chip cannot generate X without KA or access to a real ChipA.
- Since KT≠KA, ChipT can be implemented completely in software or in insecure hardware or as part of System. Only ChipA (in the consumable) is required to be a secure Authentication Chip.
- If ChipT is a physical chip, System is easy to design.
- There are a number of well-documented and cryptanalyzed asymmetric algorithms to chose from for implementation, including patent-free and license-free solutions.
However,Protocol 2 has a Number of its Own Problems: - For satisfactory security, each key needs to be 2048 bits (compared to
minimum 128 bits for symmetric cryptography in Protocol 1). The associated intermediate memory used by the encryption and decryption algorithms is correspondingly larger. - Key generation is non-trivial. Random numbers are not good keys.
- If ChipT is implemented as a core, there may be difficulties in linking it into a given System ASIC.
- If ChipT is implemented as software, not only is the implementation of System open to programming error and non-rigorous testing, but the integrity of the compiler and mathematics primitives must be rigorously checked for each implementation of System. This is more complicated and costly than simply using a well-tested chip.
- Although many symmetric algorithms are specifically strengthened to be resistant to differential cryptanalysis (which is based on chosen text attacks), the private key KA is susceptible to a chosen text attack
- If ChipA and ChipT are instances of the same Authentication Chip, each chip must contain both asymmetric encrypt and decrypt functionality. Consequently each chip is larger, more complex, and more expensive than the chip required for
Protocol 1. - If the Authentication Chip is broken into 2 chips to save cost and reduce complexity of design/test, two chips still need to be manufactured, reducing the economies of scale. This is offset by the relative numbers of systems to consumables, but must still be taken into account.
-
Protocol 2 Authentication Chips could not be exported from the USA, since they would be considered strong encryption devices.
Even if the process of choosing a key forProtocol 2 was straightforward,Protocol 2 is impractical at the present time due to the high cost of silicon implementation (both key size and functional implementation). ThereforeProtocol 1 is the protocol of choice for Presence Only Authentication.
Clone Consumable Using Real Authentication Chip
Protocols - In cases where state data is not written to the Authentication Chip, the chip is completely reusable. Clone manufacturers could therefore recycle a valid consumable into a clone consumable. This may be made more difficult by melding the Authentication Chip into the consumable's physical packaging, but it would not stop refill operators.
- In cases where state data is written to the Authentication Chip, the chip may be new, partially used up, or completely used up. However this does not stop a clone manufacturer from using the Piggyback attack, where the clone manufacturer builds a chip that has a real Authentication Chip as a piggyback. The Attacker's chip (ChipE) is therefore a man-in-the-middle. At power up, ChipE reads all the memory state values from the
real Authentication chip 53 into its own memory. ChipE then examines requests from System, and takes different actions depending on the request. Authentication requests can be passed directly to thereal Authentication chip 53, while read/write requests can be simulated by a memory that resembles real Authentication Chip behavior. In this way theAuthentication chip 53 will always appear fresh at power-up. ChipE can do this because the data access is not authenticated.
In order to fool System into thinking its data accesses were successful, ChipE still requires a real Authentication Chip, and in the second case, a clone chip is required in addition to a real Authentication Chip. ConsequentlyProtocols real Authentication chip 53 into the consumable. If the consumable cannot be recycled or refilled easily, it may be protection enough to useProtocols Protocols 3 and 4) may not be useful.
Longevity of Key
A general problem of these two protocols is that once the authentication key is chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous. For example, in a car/car-key System/Consumable scenario, the customer has only one set of car/car-keys. Each car has a different authentication key. Consequently the loss of a car-key only compromises the individual car. If the owner considers this a problem, they must get a new lock on the car by replacing the System chip inside the car's electronics. The owner's keys must be reprogrammed/replaced to work with the new car System Authentication Chip. By contrast, a compromise of a key for a high volume consumable market (for example ink cartridges in printers) would allow a clone ink cartridge manufacturer to make their own Authentication Chips. The only solution for existing systems is to update the System Authentication Chips, which is a costly and logistically difficult exercise. In any case, consumers' Systems already work—they have no incentive to hobble their existing equipment.
Consumable Lifetime Authentication
In this level of consumable authentication we are concerned with validating the existence of the Authentication Chip, as well as ensuring that the Authentication Chip lasts only as long as the consumable. In addition to validating that an Authentication Chip is present, writes and reads of the Authentication Chip's memory space must be authenticated as well. In this section we assume that the Authentication Chip's data storage integrity is secure—certain parts of memory are Read Only, others are Read/Write, while others are Decrement Only (see the chapter entitled Data Storage Integrity for more information). Two protocols are presented.Protocol 3 requires 2 Authentication Chips, whileProtocol 4 can be implemented using either 1 or 2 Authentication Chips.
Protocol 3
This protocol is a double chip protocol (two Authentication Chips are required). For this protocol, each Authentication Chip contains the following values:
K1 | Key for calculating FK1[X]. Must be secret. | ||
K2 | Key for calculating FK2[X]. Must be secret. | ||
R | Current random number. Does not have to be secret, but | ||
must be seeded with a different initial value for each | |||
chip instance. Changes with each successful | |||
authentication as defined by the Test function. | |||
M | Memory vector of | ||
space should be different for each chip (does not have | |||
to be a random number). | |||
Each Authentication Chip contains the following logical functions:
F[X] | Internal function only. Returns FK[X], the result of |
applying a one-way function F to X based upon either | |
key K1 or key K2 | |
Random[ ] | Returns R | FK1 [R]. |
Test[X, Y] | Returns land advances R if FK2 [R | X] = Y. Otherwise |
returns 0. The time taken to return 0 must be | |
identical for all bad inputs. | |
Read[X, Y] | Returns M | FK2 [X | M] if FK1[X] = Y. Otherwise |
returns 0. The time taken to return 0 must be identical | |
for all bad inputs. | |
Write[X] | Writes X over those parts of M that can legitimately |
be written over. | |
To authenticate ChipA and read ChipA's memory M:
-
- System calls ChipT's Random function;
- ChipT produces R|FK[R] and returns these to System;
- System calls ChipA's Read function, passing in R, FK[R];
- ChipA returns M and FK[R|M];
- System calls ChipT's Test function, passing in M and FK[R|M];
- System checks response from ChipT. If the response is 1, then ChipA is considered authentic. If 0, ChipA is considered invalid.
To authenticate a write of Mnew to ChipA's memory M: - System calls ChipA's Write function, passing in M:
- The authentication procedure for a Read is carried out;
- If ChipA is authentic and Mnew=M, the write succeeded. Otherwise it failed.
The data flow for read authentication is shown inFIG. 171 . The first thing to note aboutProtocol 3 is that FK[X] cannot be called directly. Instead FK[X] is called indirectly by Random, Test and Read: - Random[ ] calls FK1[X] X is not chosen by the caller. It is chosen by the Random function. An attacker must perform a brute force search using multiple calls to Random, Read, and Test to obtain a desired X, FK1[X] pair.
- Test[X,Y] calls FK2[R|X] Does not return result directly, but compares the result to Y and then returns 1 or 0. Any attempt to deduce K2 by calling Test multiple times trying different values of FK2[R|X] for a given X is reduced to a brute force search where R cannot even be chosen by the attacker.
- Read[X, Y] calls FK1[X] X and FK1[X] must be supplied by caller, so the caller must already know the X, FK1[X] pair. Since the call returns 0 if
- Y≠FK1[X], a caller can use the Read function for a brute force attack on K1.
- Read[X, Y] calls FK2[X|M], X is supplied by caller, however X can only be those values already given out by the Random function (since X and Y are validated via K1). Thus a chosen text attack must first collect pairs from Random (effectively a brute force attack). In addition, only part of M can be used in a chosen text attack since some of M is constant (read-only) and the decrement-only part of M can only be used once per consumable. In the next consumable the read-only part of M will be different.
Having FK[X] being called indirectly prevents chosen text attacks on the Authentication Chip. Since an attacker can only obtain a chosen R, FK1[R] pair by calling Random, Read, and Test multiple times until the desired R appears, a brute force attack on K1 is required in order to perform a limited chosen text attack on K2. Any attempt at a chosen text attack on K2 would be limited since the text cannot be completely chosen: parts of M are read-only, yet different for each Authentication Chip. The second thing to note is that two keys are used. Given the small size of M, two different keys K1 and K2 are used in order to ensure there is no correlation between F[R] and F[R|M]. K1 is therefore used to help protect K2 against differential attacks. It is not enough to use a single longer key since M is only 256 bits, and only part of M changes during the lifetime of the consumable. Otherwise it is potentially possible that an attacker via some as-yet undiscovered technique, could determine the effect of the limited changes in M to particular bit combinations in R and thus calculate FK2[X|M] based on FK1[X]. As an added precaution, the Random and Test functions in ChipA should be disabled so that in order to generate R, FK[R] pairs, an attacker must use instances of ChipT, each of which is more expensive than ChipA (since a system must be obtained for each ChipT). Similarly, there should be a minimum delay between calls to Random, Read and Test so that an attacker cannot call these functions at high speed. Thus each chip can only give a specific number of X, FK[X] pairs away in a certain time period. The only specific timing requirement ofProtocol 3 is that the return value of 0 (indicating a bad input) must be produced in the same amount of time regardless of where the error is in the input. Attackers can therefore not learn anything about what was bad about the input value. This is true for both RD and TST functions.
Another thing to note aboutProtocol 3 is that Reading data from ChipA also requires authentication of ChipA. The System can be sure that the contents of memory (M) is what ChipA claims it to be if FK2[R|M] is returned correctly. A clone chip may pretend that M is a certain value (for example it may pretend that the consumable is full), but it cannot return FK2[R|M] for any R passed in by System. Thus the effective signature FK2[R|M] assures System that not only did an authentic ChipA send M, but also that M was not altered in between ChipA and System. Finally, the Write function as defined does not authenticate the Write. To authenticate a write, the System must perform a Read after each Write. There are some basic advantages with Protocol 3: - K1 and K2 are not revealed during the authentication process
- Given X, a clone chip cannot generate FK2[X|M] without the key or access to a real Authentication Chip.
- System is easy to design, especially in low cost systems such as ink-jet printers, as no encryption or decryption is required by System itself.
- A wide range of key based one-way functions exists, including symmetric cryptography, random number sequences, and message authentication codes.
- Keyed one-way functions require fewer gates and are easier to verify than asymmetric algorithms).
- Secure key size for a keyed one-way function does not have to be as large as for an asymmetric (public key) algorithm. A minimum of 128 bits can provide appropriate security if F[X] is a symmetric cryptographic function.
Consequently, withProtocol 3, the only way to authenticate ChipA is to read the contents of ChipA's memory. The security of this protocol depends on the underlying FK[X] scheme and the domain of R over the set of all Systems. Although FK[X] can be any keyed one-way function, there is no advantage to implement it as asymmetric encryption. The keys need to be longer and the encryption algorithm is more expensive in silicon. This leads to a second protocol for use with asymmetric algorithms—Protocol 4.Protocol 3 must be implemented with 2 Authentication Chips in order to keep the keys secure. This means that each System requires an Authentication Chip and each consumable requires an Authentication Chip
Protocol 4
In some cases, System may contain a large amount of processing power. Alternatively, for instances of systems that are manufactured in large quantities, integration of ChipT into System may be desirable. Use of an asymmetrical encryption algorithm can allow the ChipT portion of System to be insecure.Protocol 4 therefore, uses asymmetric cryptography. For this protocol, each chip contains the following values:
K | Key for EK[X] and DK[X]. Must be secret in ChipA. Does | ||
not have to be secret in ChipT. | |||
R | Current random number. Does not have to be secret, but | ||
must be seeded with a different initial value for each | |||
chip instance. Changes with each successful | |||
authentication as defined by the Test function. | |||
M | Memory vector of | ||
space should be different for each chip, (does not | |||
have to be a random number). | |||
There is no point in verifying anything in the Read function, since anyone can encrypt using a public key. Consequently the following functions are defined:
E[X] | Internal function only. Returns EK[X] where E is | ||
asymmetric encrypt function E. | |||
D[X] | Internal function only. Returns DK[X] where D is | ||
asymmetric decrypt function D. | |||
Random[ ] | ChipT only. Returns EK[R]. | ||
Test[X, Y] | Returns 1 and advances R if DK[R | X] = Y. | ||
Otherwise returns 0. The time taken to return 0 must | |||
be identical for all bad inputs. | |||
Read[X] | Returns M | EK[R | M] where R = DK[X] (does | ||
not test input). | |||
Write[X] | Writes X over those parts of M that can legitimately | ||
be written over. | |||
The public key KT is in ChipT, while the secret key KA is in ChipA. Having KT in ChipT has the advantage that ChipT can be implemented in software or hardware (with the proviso that R is seeded with a different random number for each system). To authenticate ChipA and read ChipA's memory M:
-
- System calls ChipT's Random function;
- ChipT produces ad returns EKT[R] to System;
- System calls ChipA's Read function, passing in ERT[R];
- ChipA returns M|EKA[R|M], first obtaining R by DKA[EKT[R]];
- System calls ChipT's Test function, passing in M and EKA[R|M];
- ChipT calculates DKT[EKA[R|M]] and compares it to R|M.
- System checks response from ChipT. If the response is 1, then ChipA is considered authentic. If 0, ChipA is considered invalid.
To authenticate a write of Mnew to ChipA's memory M: - System calls ChipA's Write function, passing in Mnew;
- The authentication procedure for a Read is carried out;
- If ChipA is authentic and Mnew=M, the write succeeded. Otherwise it failed.
The data flow for read authentication is shown inFIG. 172 . Only a valid ChipA would know the value of R, since R is not passed into the Authenticate function (it is passed in as an encrypted value). R must be obtained by decrypting E[R], which can only be done using the secret key KA. Once obtained, R must be appended to M and then the result re-encoded. ChipT can then verify that the decoded form of EKA[R|M]=R|M and hence ChipA is valid. Since KT≠KA, EKT[R]≠EKA[R].Protocol 4 has the following advantages: - KA (the secret key) is not revealed during the authentication process
- Given EKT[X], a clone chip cannot generate X without KA or access to a real ChipA.
- Since KT≠KA, ChipT can be implemented completely in software or in insecure hardware or as part of System. Only ChipA is required to be a secure Authentication Chip.
- Since ChipT and ChipA contain different keys, intense testing of ChipT will reveal nothing about KA.
- If ChipT is a physical chip, System is easy to design.
- There are a number of well-documented and cryptanalyzed asymmetric algorithms to chose from for implementation, including patent-free and license-free solutions.
- Even if System could be rewired so that ChipA requests were directed to ChipT, ChipT could never answer for ChipA since KT≠KA. The attack would have to be directed at the System ROM itself to bypass the Authentication protocol.
However,Protocol 4 has a number of disadvantages: - All Authentication Chips need to contain both asymmetric encrypt and decrypt functionality. Consequently each chip is larger, more complex, and more expensive than the chip required for
Protocol 3. - For satisfactory security, each key needs to be 2048 bits (compared to a minimum of 128 bits for symmetric cryptography in Protocol 1). The associated intermediate memory used by the encryption and decryption algorithms is correspondingly larger.
- Key generation is non-trivial. Random numbers are not good keys.
- If ChipT is implemented as a core, there may be difficulties in linking it into a given System ASIC.
- If ChipT is implemented as software, not only is the implementation of System open to programming error and non-rigorous testing, but the integrity of the compiler and mathematics primitives must be rigorously checked for each implementation of System. This is more complicated and costly than simply using a well-tested chip.
- Although many symmetric algorithms are specifically strengthened to be resistant to differential cryptanalysis (which is based on chosen text attacks), the private key KA is susceptible to a chosen text attack
Protocol 4 Authentication Chips could not be exported from the USA, since they would be considered strong encryption devices.
As withProtocol 3, the only specific timing requirement ofProtocol 4 is that the return value of 0 (indicating a bad input) must be produced in the same amount of time regardless of where the error is in the input. Attackers can therefore not learn anything about what was bad about the input value. This is true for both RD and TST functions.
Variation on Call to TST
If there are two Authentication Chips used, it is theoretically possible for a clone manufacturer to replace the System Authentication Chip with one that returns 1 (success) for each call to TST. The System can test for this by calling TST a number of times—N times with a wrong hash value, and expect the result to be 0. The final time that TST is called, the true returned value from ChipA is passed, and the return value is trusted. The question then arises of how many times to call TST. The number of calls must be random, so that a clone chip manufacturer cannot know the number ahead of time. If System has a clock, bits from the clock can be used to determine how many false calls to TST should be made. Otherwise the returned value from ChipA can be used. In the latter case, an attacker could still rewire the System to permit a clone ChipT to view the returned value from ChipA, and thus know which hash value is the correct one. The worst case of course, is that the System can be completely replaced by a clone System that does not require authenticated consumables—this is the limit case of rewiring and changing the System. For this reason, the variation on calls to TST is optional, depending on the System, the Consumable, and how likely modifications are to be made. Adding such logic to System (for example in the case of a small desktop printer) may be considered not worthwhile, as the System is made more complicated. By contrast, adding such logic to a camera may be considered worthwhile.
Clone Consumable Using Real Authentication Chip
It is important to decrement the amount of consumable remaining before use that consumable portion. If the consumable is used first, a clone consumable could fake a loss of contact during a write to the special known address and then appear as a fresh new consumable. It is important to note that this attack still requires a real Authentication Chip in each consumable.
Longevity of Key
A general problem of these two protocols is that once the authentication keys are chosen, it cannot easily be changed. In some instances a key-compromise is not a problem, while for others a key compromise is disastrous.
Choosing a Protocol
Even if the choice of keys forProtocols Protocols Protocols
Triple | Blow- | Random | HMAC- | HMAC- | HMAC- | ||||
DES | fish | RC5 | IDEA | Sequences | MD5 | SHA1 | RIPEMD160 | ||
Free of patents | • | • | • | • | • | • | ||
Random key generation | • | • | • | |||||
Can be exported from the USA | • | • | • | • | ||||
Fast | • | • | • | • | ||||
Preferred Key Size (bits) for use in | 168 | 128 | 128 | 128 | 512 | 128 | 160 | 160 |
this application | ||||||||
Block size (bits) | 64 | 64 | 64 | 64 | 256 | 512 | 512 | 512 |
Cryptanalysis Attack-Free | • | • | • | • | • | |||
(apart from weak keys) | ||||||||
Output size given input size N | ≧N | ≧N | ≧N | ≧N | 128 | 128 | 160 | 160 |
Low storage requirements | • | • | • | • | ||||
Low silicon complexity | • | • | • | • | ||||
NSA designed | • | • | ||||||
An examination of the table shows that the choice is effectively between the 3 HMAC constructs and the Random Sequence. The problem of key size and key generation eliminates the Random Sequence. Given that a number of attacks have already been carried out on MD5 and since the hash result is only 128 bits, HMAC-MD5 is also eliminated. The choice is therefore between HMAC-SHA1 and HMAC-RIPEMD160. RIPEMD-160 is relatively new, and has not been as extensively cryptanalyzed as SHA1. However, SHA-1 was designed by the NSA, so this may be seen by some as a negative attribute.
Given that there is not much between the two, SHA-1 will be used for the HMAC construct.
Choosing a Random Number Generator
Each of the protocols described (1-4) requires a random number generator. The generator must be “good” in the sense that the random numbers generated over the life of all Systems cannot be predicted. If the random numbers were the same for each System, an attacker could easily record the correct responses from a real Authentication Chip, and place the responses into a ROM lookup for a clone chip. With such an attack there is no need to obtain K1 or K2. Therefore the random numbers from each System must be different enough to be unpredictable, or non-deterministic. As such, the initial value for R (the random seed) should be programmed with a physically generated random number gathered from a physically random phenomenon, one where there is no information about whether a particular bit will be 1 or 0. The seed for R must NOT be generated with a computer-run random number generator. Otherwise the generator algorithm and seed may be compromised enabling an attacker to generate and therefore know the set of all R values in all Systems.
Having a different R seed in each Authentication Chip means that the first R will be both random and unpredictable across all chips. The question therefore arises of how to generate subsequent R values in each chip.
The base case is not to change R at all. Consequently R and FK1[R] will be the same for each call to Random[ ]. If they are the same, then FK1[R] can be a constant rather than calculated. An attacker could then use a single valid Authentication Chip to generate a valid lookup table, and then use that lookup table in a clone chip programmed especially for that System. A constant R is not secure.
The simplest conceptual method of changing R is to increment it by 1. Since R is random to begin with, the values across differing systems are still likely to be random. However given an initial R, all subsequent R values can be determined directly (there is no need to iterate 10,000 times−R will take on values from R0 to R0+ 10000). An incrementing R is immune to the earlier attack on a constant R. Since R is always different, there is no way to construct a lookup table for the particular System without wasting as many real Authentication Chips as the clone chip will replace.
Rather than increment using an adder, another way of changing R is to implement it as an LFSR (Linear Feedback Shift Register). This has the advantage of less silicon than an adder, but the advantage of an attacker not being able to directly determine the range of R for a particular System, since an LFSR value-domain is determined by sequential access. To determine which values an given initial R will generate, an attacker must iterate through the possibilities and enumerate them. The advantages of a changing R are also evident in the LFSR solution. Since R is always different, there is no way to construct a lookup table for the particular System without using-up as many real Authentication Chips as the clone chip will replace (and only for that System). There is therefore no advantage in having a more complex function to change R. Regardless of the function, it will always be possible for an attacker to iterate through the lifetime set of values in a simulation. The primary security lies in the initial randomness of R. Using an LFSR to change R (apart from using less silicon than an adder) simply has the advantage of not being restricted to a consecutive numeric range (i.e. knowing R, RN cannot be directly calculated; an attacker must iterate through the LFSR N times).
The Random number generator within the Authentication Chip is therefore an LFSR with 160 bits. Tap selection of the 160 bits for a maximal-period LFSR (i.e. the LFSR will cycle through all 2160-1 states, 0 is not a valid state) yields
Holding out Against Logical Attacks
Brute Force Attack
A Brute Force attack is guaranteed to break
Guessing the Key Attack
It is theoretically possible that an attacker can simply “guess the key”. In fact, given enough time, and trying every possible number, an attacker will obtain the key. This is identical to the Brute Force attack described above, where 2159 attempts must be made before a 50% chance of success is obtained. The chances of someone simply guessing the key on the first try is 2160. For comparison, the chance of someone winning the top prize in a U.S. state lottery and being killed by lightning in the same day is only 1 in 261. The chance of someone guessing the Authentication Chip key on the first go is 1 in 2160, which is comparative to two people choosing exactly the same atoms from a choice of all the atoms in the Earth i.e. extremely unlikely.
Quantum Computer Attack
To break K2, a quantum computer containing 160 qubits embedded in an appropriate algorithm must be built. An attack against a 160-bit key is not feasible. An outside estimate of the possibility of quantum computers is that 50 qubits may be achievable within 50 years. Even using a 50 qubit quantum computer, 2110 tests are required to crack a 160 bit key. Assuming an array of 1 billion 50 qubit quantum computers, each able to try 250 keys in 1 microsecond (beyond the current wildest estimates) finding the key would take an average of 18 billion years.
Cyphertext Only Attack
An attacker can launch a Cyphertext Only attack on K1 by calling monitoring calls to RND and RD, and on K2 by monitoring calls to RD and TST. However, given that all these calls also reveal the plaintext as well as the hashed form of the plaintext, the attack would be transformed into a stronger form of attack—a Known Plaintext attack.
Known Plaintext Attack
It is easy to connect a logic analyzer to the connection between the System and the Authentication Chip, and thereby monitor the flow of data. This flow of data results in known plaintext and the hashed form of the plaintext, which can therefore be used to launch a Known Plaintext attack against both K1 and K2. To launch an attack against K1, multiple calls to RND and TST must be made (with the call to TST being successful, and therefore requiring a call to RD on a valid chip). This is straightforward, requiring the attacker to have both a System Authentication Chip and a Consumable Authentication Chip. For each K1 X, HK1[X] pair revealed, a K2 Y, HK2[Y] pair is also revealed. The attacker must collect these pairs for further analysis. The question arises of how many pairs must be collected for a meaningful attack to be launched with this data. An example of an attack that requires collection of data for statistical analysis is Differential Cryptanalysis. However, there are no known attacks against SHA-1 or HMAC-SHA1, so there is no use for the collected data at this time.
Chosen Plaintext Attacks
Given that the cryptanalyst has the ability to modify subsequent chosen plaintexts based upon the results of previous experiments, K2 is open to a partial form of the Adaptive Chosen Plaintext attack, which is certainly a stronger form of attack than a simple Chosen Plaintext attack. A chosen plaintext attack is not possible against K1, since there is no way for a caller to modify R, which used as input to the RND function (the only function to provide the result of hashing with K1). Clearing R also has the effect of clearing the keys, so is not useful, and the SSI command calls CLR before storing the new R-value.
Adaptive Chosen Plaintext Attacks
This kind of attack is not possible against K1, since K1 is not susceptible to chosen plaintext attacks. However, a partial form of this attack is possible against K2, especially since both System and consumables are typically available to the attacker (the System may not be available to the attacker in some instances, such as a specific car). The HMAC construct provides security against all forms of chosen plaintext attacks. This is primarily because the HMAC construct has 2 secret input variables (the result of the original hash, and the secret key). Thus finding collisions in the hash function itself when the input variable is secret is even harder than finding collisions in the plain hash function. This is because the former requires direct access to SHA-1 (not permitted in Protocol 3) in order to generate pairs of input/output from SHA-1. The only values that can be collected by an attacker are HMAC[R] and HMAC[R|M]. These are not attacks against the SHA-1 hash function itself, and reduce the attack to a Differential Cryptanalysis attack, examining statistical differences between collected data. Given that there is no Differential Cryptanalysis attack known against SHA-1 or HMAC,
Purposeful Error Attack
Birthday Attack
The strongest attack known against HMAC is the birthday attack, based on the frequency of collisions for the hash function. However this is totally impractical for minimally reasonable hash functions such as SHA-1. And the birthday attack is only possible when the attacker has control over the message that is signed.
Substitution with a Complete Lookup Table
The random number seed in each System is 160 bits. The worst case situation for an Authentication Chip is that no state data is changed. Consequently there is a constant value returned as M. However a clone chip must still return FK2[R|M], which is a 160 bit value. Assuming a 160-bit lookup of a 160-bit result, this requires 7.3×1048 bytes, or 6.6×1036 terabytes, certainly more space than is feasible for the near future. This of course does not even take into account the method of collecting the values for the ROM. A complete lookup table is therefore completely impossible.
Substitution with a Sparse Lookup Table
A sparse lookup table is only feasible if the messages sent to the Authentication Chip are somehow predictable, rather than effectively random. The random number R is seeded with an unknown random number, gathered from a naturally random event. There is no possibility for a clone manufacturer to know what the possible range of R is for all Systems, since each bit has a 50% chance of being a 1 or a 0. Since the range of R in all systems is unknown, it is not possible to build a sparse lookup table that can be used in all systems. The general sparse lookup table is therefore not a possible attack. However, it is possible for a clone manufacturer to know what the range of R is for a given System. This can be accomplished by loading a LFSR with the current result from a call to a specific System Authentication Chip's RND function, and iterating some number of times into the future. If this is done, a special ROM can be built which will only contain the responses for that particular range of R, i.e. a ROM specifically for the consumables of that particular System. But the attacker still needs to place correct information in the ROM. The attacker will therefore need to find a valid Authentication Chip and call it for each of the values in R.
Suppose the clone Authentication Chip reports a full consumable, and then allows a single use before simulating loss of connection and insertion of a new full consumable. The clone consumable would therefore need to contain responses for authentication of a full consumable and authentication of a partially used consumable. The worst case ROM contains entries for full and partially used consumables for R over the lifetime of System. However, a valid Authentication Chip must be used to generate the information, and be partially used in the process. If a given System only produces about n R-values, the sparse lookup-ROM required is 10n bytes multiplied by the number of different values for M. The time taken to build the ROM depends on the amount of time enforced between calls to RD.
After all this, the clone manufacturer must rely on the consumer returning for a refill, since the cost of building the ROM in the first place consumes a single consumable. The clone manufacturer's business in such a situation is consequently in the refills. The time and cost then, depends on the size of R and the number of different values for M that must be incorporated in the lookup. In addition, a custom clone consumable ROM must be built to match each and every System, and a different valid Authentication Chip must be used for each System (in order to provide the full and partially used data). The use of an Authentication Chip in a System must therefore be examined to determine whether or not this kind of attack is worthwhile for a clone manufacturer. As an example, of a camera system that has about 10,000 prints in its lifetime. Assume it has a single Decrement Only value (number of prints remaining), and a delay of 1 second between calls to RD. In such a system, the sparse table will take about 3 hours to build, and consumes 100K. Remember that the construction of the ROM requires the consumption of a valid Authentication Chip, so any money charged must be worth more than a single consumable and the clone consumable combined. Thus it is not cost effective to perform this function for a single consumable (unless the clone consumable somehow contained the equivalent of multiple authentic consumables). If a clone manufacturer is going to go to the trouble of building a custom ROM for each owner of a System, an easier approach would be to update System to completely ignore the Authentication Chip. Consequently, this attack is possible as a per-System attack, and a decision must be made about the chance of this occurring for a given System/Consumable combination. The chance will depend on the cost of the consumable and Authentication Chips, the longevity of the consumable, the profit margin on the consumable, the time taken to generate the ROM, the size of the resultant ROM, and whether customers will come back to the clone manufacturer for refills that use the same clone chip etc.
Differential Cryptanalysis
Existing differential attacks are heavily dependent on the structure of S boxes, as used in DES and other similar algorithms. Although other algorithms such as HMAC-SHA1 used in
Minimal Difference Inputs
This is where an attacker takes a set of X, FK[X] values where the X values are minimally different, and examines the statistical differences between the outputs FK[X]. The attack relies on X values that only differ by a minimal number of bits. The question then arises as to how to obtain minimally different X values in order to compare the FK[X] values.
K1:With K1, the attacker needs to statistically examine minimally different X, FK1[X] pairs. However the attacker cannot choose any X value and obtain a related FK1[X] value. Since X, FK1[X] pairs can only be generated by calling the RND function on a System Authentication Chip, the attacker must call RND multiple times, recording each observed pair in a table. A search must then be made through the observed values for enough minimally different X values to undertake a statistical analysis of the FK1[X] values.
K2:With K2, the attacker needs to statistically examine minimally different X, FK2[X] pairs. The only way of generating X, FK2[X] pairs is via the RD function, which produces FK2[X] for a given Y, FK1[Y] pair, where X=Y|M. This means that Y and the changeable part of M can be chosen to a limited extent by an attacker. The amount of choice must therefore be limited as much as possible.
The first way of limiting an attacker's choice is to limit Y, since RD requires an input of the format Y, FK1[Y]. Although a valid pair can be readily obtained from the RND function, it is a pair of RND's choosing. An attacker can only provide their own Y if they have obtained the appropriate pair from RND, or if they know K1. Obtaining the appropriate pair from RND requires a Brute Force search. Knowing K1 is only logically possible by performing cryptanalysis on pairs obtained from the RND function—effectively a known text attack. Although RND can only be called so many times per second, K1 is common across System chips. Therefore known pairs can be generated in parallel.
The second way to limit an attacker's choice is to limit M, or at least the attacker's ability to choose M. The limiting of M is done by making some parts of M Read Only, yet different for each Authentication Chip, and other parts of M Decrement Only. The Read Only parts of M should ideally be different for each Authentication Chip, so could be information such as serial numbers, batch numbers, or random numbers. The Decrement Only parts of M mean that for an attacker to try a different M, they can only decrement those parts of M so many times—after the Decrement Only parts of M have been reduced to 0 those parts cannot be changed again. Obtaining a
Minimal Difference Outputs
This is where an attacker takes a set of X, FK[X] values where the FK[X] values are minimally different, and examines the statistical differences between the X values. The attack relies on FK[X] values that only differ by a minimal number of bits. For both K1 and K2, there is no way for an attacker to generate an X value for a given FK1[X]. To do so would violate the fact that F is a one-way function. Consequently the only way for an attacker to mount an attack of this nature is to record all observed X, FK[X] pairs in a table. A search must then be made through the observed values for enough minimally different FK[X] values to undertake a statistical analysis of the X values. Given that this requires more work than a minimally different input attack (which is extremely limited due to the restriction on M and the choice of R), this attack is not fruitful.
Message Substitution Attacks
In order for this kind of attack to be carried out, a clone consumable must contain a
Reverse Engineering the Key Generator
If a pseudo-random number generator is used to generate keys, there is the potential for a clone manufacture to obtain the generator program or to deduce the random seed used. This was the way in which the Netscape security program was initially broken.
Bypassing Authentication Altogether
Reuse of Authentication Chips
As described above,
Management Decision to Omit Authentication to Save Costs
Although not strictly an external attack, a decision to omit authentication in future Systems in order to save costs will have widely varying effects on different markets. In the case of high volume consumables, it is essential to remember that it is very difficult to introduce authentication after the market has started, as systems requiring authenticated consumables will not work with older consumables still in circulation. Likewise, it is impractical to discontinue authentication at any stage, as older Systems will not work with the new, unauthenticated, consumables. In the second case, older Systems can be individually altered by replacing the System Authentication Chip by a simple chip that has the same programming interface, but whose TST function always succeeds. Of course the System may be programmed to test for an always-succeeding TST function, and shut down. In the case of a specialized pairing, such as a car/car-keys, or door/door-key, or some other similar situation, the omission of authentication in future systems is trivial and non-repercussive. This is because the consumer is sold the entire set of System and Consumable Authentication Chips at the one time.
Garrote/Bribe Attack
This form of attack is only successful in one of two circumstances:
HMAC-SHA1
The mechanism for authentication is the HMAC-SHA1 algorithm, acting on one of:
HMAC[M]=H[(K⊕opad)|H[(K⊕ipad)|M]]
HMAC-SHA1 algorithm is simply HMAC with H=SHA-1.
SHA-1
The SHA1 hashing algorithm is defined in the algorithm as summarized here.
Nine 32-bit constants are defined. There are 5 constants used to initialize the chaining variables, and there are 4 additive constants.
Initial | Additive | ||
Chaining Values | Constants | ||
h1 | 0x67452301 | y1 | 0x5A827999 | ||
h2 | 0xEFCDAB89 | y2 | 0x6ED9EBA1 | ||
h3 | 0x98BADCFE | y3 | 0x8F1BBCDC | ||
h4 | 0x10325476 | y4 | 0xCA62C1D6 | ||
h5 | 0xC3D2E1F0 | ||||
Non-optimized SHA-1 requires a total of 2912 bits of data storage:
Symbolic | |||
Nomenclature | Description | ||
+ | Addition modulo 232 | ||
X | Result of rotating X left through Y bit positions | ||
f(X, Y, Z) | (X | ||
g(X, Y, Z) | (X | ||
h(X, Y, Z) | X ⊕ Y ⊕ Z | ||
The hashing algorithm consists of firstly padding the input message to be a multiple of 512 bits and initializing the chaining variables H1-5 with h1-5. The padded message is then processed in 512-bit chunks, with the output hash value being the final 160-bit value given by the concatenation of the chaining variables: H1|H2|H3|H4|H5. The steps of the SHA-1 algorithm are now examined in greater detail.
The first step of SHA-1 is to pad the input message to be a multiple of 512 bits as follows and to initialize the chaining variables.
Steps to follow to preprocess the input message |
Pad the input message | Append a 1 bit to the |
Append | |
0 bits such that the length of the | |
padded message is 64-bits short of a multiple | |
of 512 bits. | |
Append a 64-bit value containing the length in | |
bits of the original input message. Store the | |
length as most significant bit through to least | |
significant bit. | |
Initialize the chaining | H1 ← h1, H2 ← h2, H3 ← h3, H4 ← h4, |
variables | H5 ← h5 |
The padded input message can now be processed. We process the message in 512-bit blocks. Each 512-bit block is in the form of 16×32-bit words, referred to as InputWord0-15.
Steps to follow for each 512 bit block (InputWord0-15) |
Copy the 512 | For j = 0 to 15 | ||
input bits | Xj = InputWordj | ||
into X0-15 | |||
Expand X0-15 | For j = 16 to 79 | ||
into X16-79 | Xj ← ((Xj−3 ⊕ Xj−8 ⊕ Xj−-⊕ Xj−16) | ||
Initialize | A ← H1, B ← H2, C ← H3, D ← H4, | ||
working | E ← H5 | ||
variables | |||
Round 1 | For j = 0 to 19 | ||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
2 | For j = 20 to 39 | ||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
3 | For j = 40 to 59 | ||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
4 | For j = 60 to 79 | ||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← t | |||
Update chaining | H1 ← H1 + A, H2 ← H2 + B, | ||
variables | H3 ← H3 + C, H4 ← H4 + D, | ||
H5 ← H5 + E | |||
After all the 512-bit blocks of the padded input message have been processed, the output hash value is the final 160-bit value given by: H1|H2|H3|H4|H5.
Optimization for Hardware Implementation
The SHA-1
Steps to follow for each 512 bit block (InputWord0-15) |
Initialize | A ← H1, B ← H2, C ← H3, D ← H4, | ||
working | E ← H5 | ||
variables | N1 ← 13, N2 ← 8, N3 ← 2, N4 ← 0 | ||
| | ||
Copy the 512 | XN4 = InputWordN4 | ||
input bits | [ | ||
into X0-15 | |||
| Do | 16 times: | |
t ← ((A | |||
[ | |||
E ← D, D ← C, C ← (B | |||
A ← t | |||
| Do | 4 times: | |
XN4 ← ((XN1 ⊕ XN2 ⊕ XN3 ⊕ XN4) | |||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
2 | | ||
XN4 ← ((XN1 ⊕ XN2 ⊕ XN3 ⊕ XN4) | |||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
3 | | ||
XN4 ← ((XN1 ⊕ XN2 ⊕ XN3 ⊕ XN4) | |||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← | |||
Round | |||
4 | | ||
XN4 ← ((XN1 ⊕ XN2 ⊕ XN3 ⊕ XN4) | |||
t ← ((A | |||
E ← D, D ← C, C ← (B | |||
A ← t | |||
Update | H1 ← H1 + A, H2 ← H2 + B, | ||
chaining | H3 ← H3 + C, H4 ← H4 + D, | ||
variables | H5 ← H5 + E | ||
The incrementing of N1, N2, and N3 during
HMAC-SHA1
In the Authentication Chip implementation, the HMAC-SHA1 unit only ever performs hashing on two types of inputs: on R using K and on R|M using K2. Since the inputs are two constant lengths, rather than have HMAC and SHA-1 as separate entities on chip, they can be combined and the hardware optimized. The padding of messages in SHA-1 Step 1 (a 1 bit, a string of 0 bits, and the length of the message) is necessary to ensure that different messages will not look the same after padding. Since we only deal with 2 types of messages, our padding can be constant 0s. In addition, the optimized version of the SHA-1 algorithm is used, where only 16 32-bit words are used for temporary storage. These 16 registers are loaded directly by the optimized HMAC-SHA1 hardware. The Nine 32-bit constants h1-5 and y1-4 are still required, although the fact that they are constants is an advantage for hardware implementation. Hardware optimized HMAC-SHA-1 requires a total of 1024 bits of data storage:
| Description | Action | |
1 | Process K ⊕ ipad | X0-4 ← K1 ⊕ 0x363636 . . . |
2 | X5-15 ← 0x363636 . . . | |
3 | H1-5 ← | |
4 | | |
5 | Process R | X0-4 ← R |
6 | X5-15 ← 0 | |
7 | | |
8 | Buff1601-5 ← H1-5 | |
9 | Process K ⊕ opad | X0-4 ← K1 ⊕ 0x5C5C5C . . . |
10 | X5-15 ← 0x5C5C5C . . . | |
11 | H1-5 ← | |
12 | | |
13 | Process previous H[x] | X0-4 ← Result |
14 | X5-15 ← 0 | |
15 | | |
16 | Get results | Buff1601-5 ← H1-5 |
H[R|M, K2]
In the case of producing the keyed hash of R|M using K2, the original input message is a constant length of 416 (256+160) bits. We can therefore take advantage of this fact during processing. Rather than load X0-15 during the first part of the SHA-1 algorithm, we load X0-15 directly, and thereby omit
| Description | Action | |
1 | Process K ⊕ ipad | X0-4 ← K2 ⊕ 0x363636 . . . |
2 | X5-15 ← 0x363636 . . . | |
3 | H1-5 ← | |
4 | | |
5 | Process R | M | X0-4 ← R |
6 | X5-12 ← M | |
7 | X13-15 | |
8 | | |
9 | Temp ← | |
10 | Process K ⊕ opad | X0-4← K2 ⊕ 0x5C5C5C . . . |
11 | X5-15 ← 0x5C5C5C . . . | |
12 | H1-5 ← | |
13 | | |
14 | Process previous H[x] | X0-4 |
15 | X5-15 ← 0 | |
16 | | |
17 | Get results | Result ← H1-5 |
Data Storage Integrity
Each Authentication Chip contains some non-volatile memory in order to hold the variables required by
Size | ||
Variable Name | (in bits) | Description |
M[0 . . . 15] | 256 | 16 words (each 16 bits) containing |
state data such as serial numbers, | ||
media remaining etc. | ||
| 160 | Key used to transform R during |
authentication. | ||
| 160 | Key used to transform M during |
authentication. | ||
| 160 | Current random number |
AccessMode[0 . . . 15] | 32 | The 16 sets of 2-bit AccessMode |
values for M[n]. | ||
| 32 | The minimum number of clock ticks |
between calls to key-based | ||
| ||
SIWritten | ||
1 | If set, the secret key | |
information (K1, K2, and R) has | ||
been written to the chip. If | ||
clear, the secret information has | ||
not been written yet. | ||
| 1 | If set, the RND and TST functions |
can be called, but RD and WR | ||
functions cannot be called. | ||
If clear, the RND and TST | ||
functions cannot be called, but RD | ||
and WR functions can be called. | ||
Total bits | 802 | |
Note that if these variables are in Flash memory, it is not a simple matter to write a new value to replace the old. The memory must be erased first, and then the appropriate bits set. This has an effect on the algorithms used to change Flash memory based variables. For example, Flash memory cannot easily be used as shift registers. To update a Flash memory variable by a general operation, it is necessary to follow these steps:
Read the entire N bit value into a general purpose register;
Perform the operation on the general purpose register;
Erase the Flash memory corresponding to the variable; and
- Set the bits of the Flash memory location based on the bits set in the general-purpose register.
A RESET of the Authentication Chip has no effect on these non-volatile variables.
M and AccessMode
Variables M[0] through M[15] are used to hold consumable state data, such as serial numbers, batch numbers, and amount of consumable remaining. Each M[n] register is 16 bits, making the entire M vector 256 bits (32 bytes). Clients cannot read from or written to individual M[n] variables. Instead, the entire vector, referred to as M, is read or written in a single logical access. M can be read using the RD (read) command, and written to via the WR (write) command. The commands only succeed if K1 and K2 are both defined (SIWritten=1) and the Authentication Chip is a consumable non-trusted chip (IsTrusted=0). Although M may contain a number of different data types, they differ only in their write permissions. Each data type can always be read. Once in client memory, the 256 bits can be interpreted in any way chosen by the client. The entire 256 bits of M are read at one time instead of in smaller amounts for reasons of security, as described in the chapter entitled Authentication. The different write permissions are outlined in the following table:
Data Type | Access Note |
Read Only | Can never be written to |
ReadWrite | Can always be written to |
Decrement Only | Can only be written to if the new value is less |
than the old value. Decrement Only values are | |
typically 16-bit or 32-bit values, but can be | |
any multiple of 16 bits. | |
To accomplish the protection required for writing, a 2-bit access mode value is defined for each M[n]. The following table defines the interpretation of the 2-bit access mode bit-pattern:
Bits | Op | Interpretation | Action taken during |
00 | RW | ReadWrite | The new 16-bit value is always |
written to M[n]. | |||
01 | MSR | Decrement Only | The new 16-bit value is only |
(Most | written to M[n] if it is | ||
Significant | less than the value currently in | ||
Region) | M[n]. This is used for | ||
access to the | |||
16 bits of a Decrement | |||
Only number. | |||
10 | NMSR | Decrement Only | The new 16-bit value is only |
(Not the Most | written to M[n] if | ||
Significant | M[n + 1] can also | ||
Region) | be written. The NMSR access | ||
mode allows multiple precision | |||
values of 32 bits and more | |||
(multiples of 16 bits) | |||
to decrement. | |||
11 | RO | Read Only | The new 16-bit value is ignored. |
M[n] is left unchanged. | |||
The 16 sets of access mode bits for the 16 M[n] registers are gathered together in a single 32-bit AccessMode register. The 32 bits of the AccessMode register correspond to M[n] with n as follows:
| LSB | ||
15 | 14 | 13 | 12 | 11 | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
Each 2-bit value is stored in hi/lo format. Consequently, if M[0-5] were access mode MSR, with M[6-15] access mode RO, the 32-bit AccessMode register would be:
K1
K1 is the 160-bit secret key used to transform R during the authentication protocol. K1 is programmed along with K2 and R with the SSI (Set Secret Information) command. Since K1 must be kept secret, clients cannot directly read K1. The commands that make use of K1 are RND and RD. RND returns a pair R, FK1[R] where R is a random number, while RD requires an X, FK1[X] pair as input. K1 is used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated random number, gathered from a physically random phenomenon. K1 must NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K1, K2 and R being generated in a way that is not deterministic. For example, to set K1, a person can toss a
K2
K2 is the 160-bit secret key used to transform M|R during the authentication protocol. K2 is programmed along with a and R with the SSI (Set Secret Information) command. Since K2 must be kept secret, clients cannot directly read K2. The commands that make use of K2 are RD and TST. RD returns a pair M, FK2[M|X] where X was passed in as one of the parameters to the RD function. TST requires an M, FK2[M|R] pair as input, where R was obtained from the Authentication Chip's RND function. K2 is used in the keyed one-way hash function HMAC-SHA1. As such it should be programmed with a physically generated random number, gathered from a physically random phenomenon. K2 must NOT be generated with a computer-run random number generator. The security of the Authentication chips depends on K1, K2 and R being generated in a way that is not deterministic. For example, to set K2, a person can toss a
R and IsTrusted
R is a 160-bit random number seed that is programmed along with K1 and K2 with the SSI (Set Secret Information) command. R does not have to be kept secret, since it is given freely to callers via the RND command. However R must be changed only by the Authentication Chip, and not set to any chosen value by a caller. R is used during the TST command to ensure that the R from the previous call to RND was used to generate the FK2[M|R] value in the non-trusted Authentication Chip (ChipA). Both RND and TST are only used in trusted Authentication Chips (ChipT).
IsTrusted is a 1-bit flag register that determines whether or not the Authentication Chip is a trusted chip (ChipT):
-
- If the IsTrusted bit is set, the chip is considered to be a trusted chip, and hence clients can call RND and TST functions (but not RD or WR).
- If the IsTrusted bit is clear, the chip is not considered to be trusted. Therefore RND and TST functions cannot be called (but RD and WR functions can be called instead). System never needs to call RND or TST on the consumable (since a clone chip would simply return 1 to a function such as TST, and a constant value for RND).
The IsTrusted bit has the added advantage of reducing the number of available R, FK1[R] pairs obtainable by an attacker, yet still maintain the integrity of the Authentication protocol. To obtain valid R, FK1[R] pairs, an attacker requires a System Authentication Chip, which is more expensive and less readily available than the consumables. Both R and the IsTrusted bit are cleared to 0 by the CLR command. They are both written to by the issuing of the SSI command. The IsTrusted bit can only set by storing a non-zero seed value in R via the SSI command (R must be non-zero to be a valid LFSR state, so this is quite reasonable). R is changed via a 160-bit maximal period LFSR with taps onbits
Authentication Chips destined to be trusted Chips used in Systems (ChipT) should have their IsTrusted bit set during programming, and Authentication Chips used in Consumables (ChipA) should have their IsTrusted bit kept clear (by storing 0 in R via the SSI command during programming). There is no command to read or write the IsTrusted bit directly. The security of the Authentication Chip does not only rely upon the randomness of K1 and K2 and the strength of the HMAC-SHA1 algorithm. To prevent an attacker from building a sparse lookup table, the security of the Authentication Chip also depends on the range of R over the lifetime of all Systems. What this means is that an attacker must not be able to deduce what values of R there are in produced and future Systems. As such R should be programmed with a physically generated random number, gathered from a physically random phenomenon. R must NOT be generated with a computer-run random number generator. The generation of R must not be deterministic. For example, to generate an R for use in a trusted System chip, a person can toss afair coin 160 times, recording heads as 1, and tails as 0. 0 is the only non-valid initial value for a trusted R is 0 (or the IsTrusted bit will not be set).
SIWritten
The SIWritten (Secret Information Written) 1-bit register holds the status of the secret information stored within the Authentication Chip. The secret information is K1, K2 and R. A client cannot directly access the SIWritten bit. Instead, it is cleared via the CLR command (which also clears K1, K2 (and R). When the Authentication Chip is programmed with secret keys and random number seed using the SSI command (regardless of the value written), the SIWritten bit is set automatically. Although R is strictly not secret, it must be written together with K1 and K2 to ensure that an attacker cannot generate their own random number seed in order to obtain chosen R, FK1[R] pairs. The SIWritten status bit is used by all functions that access K1, K2, or R. If the SIWritten bit is clear, then calls to RD, WR, RND, and TST are interpreted as calls to CLR.
MinTicks
There are two mechanisms for preventing an attacker from generating multiple calls to TST and RD functions in a short period of time. The first is a clock limiting hardware component that prevents the internal clock from operating at a speed more than a particular maximum (e.g. 10 MHz). The second mechanism is the 32-bit MinTicks register, which is used to specify the minimum number of clock ticks that must elapse between calls to key-based functions. The MinTicks variable is cleared to 0 via the CLR command. Bits can then be set via the SMT (Set MinTicks) command. The input parameter to SMT contains the bit pattern that represents which bits of MinTicks are to be set. The practical effect is that an attacker can only increase the value in MinTicks (since the SMT function only sets bits). In addition, there is no function provided to allow a caller to read the current value of this register. The value of MinTicks depends on the operating clock speed and the notion of what constitutes a reasonable time between key-based function calls (application specific). The duration of a single tick depends on the operating clock speed. This is the maximum of the input clock speed and the Authentication Chip's clock-limiting hardware. For example, the Authentication Chip's clock-limiting hardware may be set at 10 MHz (it is not changeable), but the input clock is 1 MHz. In this case, the value of 1 tick is based on 1 MHz, not 10 MHz. If the input clock was 20 MHz instead of 1 MHz, the value of 1 tick is based on 10 MHz (since the clock speed is limited to 10 MHz).
Once the duration of a tick is known, the MinTicks value can to be set. The value for MinTicks is the minimum number of ticks required to pass between calls to the key-based RD and TST functions. The value is a real-time number, and divided by the length of an operating tick. Suppose the input clock speed matches the maximum clock speed of 10 MHz. If we want a minimum of 1 second between calls to key based functions, the value for MinTicks is set to 10,000,000. Consider an attacker attempting to collect X, FK1[X] pairs by calling RND, RD and TST multiple times. If the MinTicks value is set such that the amount of time between calls to TST is 1 second, then each pair requires 1 second to generate. To generate 225 pairs (only requiring 1.25 GB of storage), an attacker requires more than 1 year. An attack requiring 264 pairs would require 5.84×1011 years using a single chip, or 584 years if 1 billion chips were used, making such an attack completely impractical in terms of time (not to mention the storage requirements!).
With regards to K1, it should be noted that the MinTicks variable only slows down an attacker and causes the attack to cost more since it does not stop an attacker using multiple System chips in parallel. However MinTicks does make an attack on K2 more difficult, since each consumable has a different M (part of M is random read-only data). In order to launch a differential attack, minimally different inputs are required, and this can only be achieved with a single consumable (containing an effectively constant part of M). Minimally different inputs require the attacker to use a single chip, and MinTicks causes the use of a single chip to be slowed down. If it takes a year just to get the data to start searching for values to begin a differential attack this increases the cost of attack and reduces the effective market time of a clone consumable.
Authentication Chip Commands
The System communicates with the Authentication Chips via a simple operation command set. This section details the actual commands and parameters necessary for implementation ofProtocol 3. The Authentication Chip is defined here as communicating to System via a serial interface as a minimum implementation. It is a trivial matter to define an equivalent chip that operates over a wider interface (such as 8, 16 or 32 bits). Each command is defined by 3-bit opcode. The interpretation of the opcode can depend on the current value of the IsTrusted bit and the current value of the IsWritten bit. The following operations are defined:
Op | T | W | Mn | Input | Output | Description |
000 | — | — | CLR | — | — | |
001 | 0 | 0 | SSI | [160, 160, 160] | — | Set Secret |
Information | ||||||
010 | 0 | 1 | RD | [160, 160] | [256, 160] | Read M securely |
010 | 1 | 1 | RND | — | [160, 160] | Random |
011 | 0 | 1 | WR | [256] | — | Write M |
011 | 1 | 1 | TST | [256, 160] | [1] | |
100 | 0 | 1 | SAM | [32] | [32] | |
101 | — | 1 | GIT | — | [1] | Get Is Trusted |
110 | — | 1 | SMT | [32] | — | Set MinTicks |
Op = Opcode, | ||||||
T = IsTrusted value, | ||||||
W = IsWritten value, | ||||||
Mn = Mnemonic, | ||||||
[n] = number of bits required for parameter |
Any command not defined in this table is interpreted as NOP (No Operation). Examples include
CLR | Clear | ||
Input | None | ||
Output | None | ||
Changes | All | ||
The CLR (Clear) Command is designed to completely erase the contents of all Authentication Chip memory. This includes all keys and secret information, access mode bits, and state data. After the execution of the CLR command, an Authentication Chip will be in a programmable state, just as if it had been freshly manufactured. It can be reprogrammed with a new key and reused. A CLR command consists of simply the CLR command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A CLR command is therefore sent as bits 0-2 of the CLR opcode. A total of 3 bits are transferred. The CLR command can be called directly at any time. The order of erasure is important. SIWritten must be cleared first, to disable further calls to key access functions (such as RND, TST, RD and WR). If the AccessMode bits are cleared before SIWritten, an attacker could remove power at some point after they have been cleared, and manipulate M, thereby have a better chance of retrieving the secret information with a partial chosen text attack. The CLR command is implemented with the following steps:
| Action | |
1 | Erase SIWritten |
Erase IsTrusted | |
Erase K1 | |
Erase K2 | |
Erase R | |
Erase | |
2 | Erase AccessMode |
Erase MinTicks | |
Once the chip has been cleared it is ready for reprogramming and reuse. A blank chip is of no use to an attacker, since although they can create any value for M (M can be read from and written to), key-based functions will not provide any information as K1 and K2 will be incorrect. It is not necessary to consume any input parameter bits if CLR is called for any opcode other than CLR. An attacker will simply have to RESET the chip. The reason for calling CLR is to ensure that all secret information has been destroyed, making the chip useless to an attacker.
SSI—Set Secret Information
Input: K1, K2, R=[160 bits, 160 bits, 160 bits]
Output: None
Changes: K1, K2, R, SIWritten, IsTrusted
The SSI (Set Secret Information) command is used to load the K1, K2 and R variables, and to set SIWritten and IsTrusted flags for later calls to RND, TST, RD and WR commands. An SSI command consists of the SSI command opcode followed by the secret information to be stored in the K1, K2 and R registers. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SSI command is therefore sent as: bits 0-2 of the SSI opcode, followed by bits 0-159 of the new value for K1, bits 0-159 of the new value for K2, and finally bits 0-159 of the seed value for R. A total of 483 bits are transferred. The K1, K2, R, SIWritten, and IsTrusted registers are all cleared to 0 with a CLR command. They can only be set using the SSI command.
The SSI command uses the flag SIWritten to store the fact that data has been loaded into K1, K2, and R. If the SIWritten and IsTrusted flags are clear (this is the case after a CLR instruction), then K1, K2 and R are loaded with the new values. If either flag is set, an attempted call to SSI results in a CLR command being executed, since only an attacker or an erroneous client would attempt to change keys or the random seed without calling CLR first. The SSI command also sets the IsTrusted flag depending on the value for R. If R=0, then the chip is considered untrustworthy, and therefore IsTrusted remains at 0. If R≠0, then the chip is considered trustworthy, and therefore IsTrusted is set to 1. Note that the setting of the IsTrusted bit only occurs during the SSI command. If an Authentication Chip is to be reused, the CLR command must be called first. The keys can then be safely reprogrammed with an SSI command, and fresh state information loaded into M using the SAM and WR commands. The SSI command is implemented with the following steps:
| Action | |
1 | CLR |
2 | K1 ← |
3 | K2 ← |
4 | R ← Read 160 bits from |
5 | IF (R ≠ 0) |
IsTrusted ← 1 | |
6 | SIWritten ← 1 |
RD—Read
Input: X, FK1[X]=[160 bits, 160 bits]
Output: M, FK2[X|M]=[256 bits, 160 bits]
Changes: R
The RD (Read) command is used to securely read the entire 256 bits of state data (M) from a non-trusted Authentication Chip. Only a valid Authentication Chip will respond correctly to the RD request. The output bits from the RD command can be fed as the input bits to the TST command on a trusted Authentication Chip for verification, with the first 256 bits (M) stored for later use if (as we hope) TST returns 1. Since the Authentication Chip is serial, the command and input parameters must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A RD command is therefore: bits 0-2 of the RD opcode, followed by bits 0-159 of X, and bits 0-159 of FK1[X]. 323 bits are transferred in total. X and FK1[X] are obtained by calling the trusted Authentication Chip's RND command. The 320 bits output by the trusted chip's RND command can therefore be fed directly into the non-trusted chip's RD command, with no need for these bits to be stored by System. The RD command can only be used when the following conditions have been met:
SIWritten = 1 | indicating that K1, K2 and R have been set up via the |
SSI command; and | |
IsTrusted = 0 | indicating the chip is not trusted since it is not |
permitted to generate random number sequences; | |
In addition, calls to RD must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MinTicks to ensure that a minimum time will elapse between calls to RD. Once MinTicksRemaining has been reloaded with MinTicks, the RD command verifies that the input parameters are valid. This is accomplished by internally generating FK1[X] for the input X, and then comparing the result against the input FK1[X]. This generation and comparison must take the same amount of time regardless of whether the input parameters are correct or not. If the times are not the same, an attacker can gain information about which bits of FK1[X] are incorrect. The only way for the input parameters to be invalid is an erroneous System (passing the wrong bits), a case of the wrong consumable in the wrong System, a bad trusted chip (generating bad pairs), or an attack on the Authentication Chip. A constant value of 0 is returned when the input parameters are wrong. The time taken for 0 to be returned must be the same for all bad inputs so that attackers can learn nothing about what was invalid. Once the input parameters have been verified the output values are calculated. The 256 bit content of M are transferred in the following order: bits 0-15 of M[0], bits 0-15 of M[1], through to bits 0-15 of M[15]. FK2[X|M] is calculated and output as bits 0-159. The R register is used to store the X value during the validation of the X, FK1[X] pair. This is because RND and RD are mutually exclusive. The RD command is implemented with the following steps:
| Action | ||
1 | IF (MinTicksRemaining ≠ 0 |
|
2 | MinTicksRemaining ← MinTicks | |
3 | R ← Read 160 bits from | |
4 | Hash ← Calculate FK1[R] | |
5 | OK ← (Hash = next 160 bits from client) |
Note that this operation must take constant | |
time so an attacker cannot determine | |
how much of their guess is correct. |
6 | IF (OK) |
Output 256 bits of M to client |
ELSE |
Output 256 bits of 0 to |
7 | Hash ← Calculate FK2[R | M] | |
8 | IF (OK) |
|
ELSE |
Output |
160 bits of 0 to client | |
RND—Random
Input: None
Output: R, FK1[R]=[160 bits, 160 bits]
Changes: None
The RND (Random) command is used by a client to obtain a valid R, FK1[R] pair for use in a subsequent authentication via the RD and TST commands. Since there are no input parameters, an RND command is therefore simply bits 0-2 of the RND opcode. The RND command can only be used when the following conditions have been met:
SIWritten = 1 | indicating K1 and R have been set up via the | ||
SSI command; | |||
IsTrusted = 1 | indicating the chip is permitted to generate | ||
random number sequences; | |||
RND returns both R and FK1[R] to the caller. The 288-bit output of the RND command can be fed straight into the non-trusted chip's RD command as the input parameters. There is no need for the client to store them at all, since they are not required again. However the TST command will only succeed if the random number passed into the RD command was obtained first from the RND command. If a caller only calls RND multiple times, the same R, FK1[R] pair will be returned each time. R will only advance to the next random number in the sequence after a successful call to TST. See TST for more information. The RND command is implemented with the following steps:
| Action | ||
1 | | ||
2 | Hash ← Calculate FK1[R] | ||
3 | | ||
TST—Test
Input: X, FK2[R|X]=[256 bits, 160 bits]
Output: 1 or 0=[1 bit]
Changes: M, R and MinTicksRemaining (or all registers if attack detected)
The TST (Test) command is used to authenticate a read of M from a non-trusted Authentication Chip. The TST (Test) command consists of the TST command opcode followed by input parameters: X and FK2[R|X]. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A TST command is therefore: bits 0-2 of the TST opcode, followed by bits 0-255 of M, bits 0-159 of FK2[R|M]. 419 bits are transferred in total. Since the last 416 input bits are obtained as the output bits from a RD command to a non-trusted Authentication Chip, the entire data does not even have to be stored by the client. Instead, the bits can be passed directly to the trusted Authentication Chip's TST command. Only the 256 bits of M should be kept from a RD command. The TST command can only be used when the following conditions have been met:
SIWritten = 1 | indicating K2 and R have been set up via the | ||
SSI command; | |||
IsTrusted = 1 | indicating the chip is permitted to generate | ||
random number sequences; | |||
In addition, calls to TST must wait for the MinTicksRemaining register to reach 0. Once it has done so, the register is reloaded with MinTicks to ensure that a minimum time will elapse between calls to TST. TST causes the internal M value to be replaced by the input M value. FK2[M|R] is then calculated, and compared against the 160 bit input hash value. A single output bit is produced: 1 if they are the same, and 0 if they are different. The use of the internal M value is to save space on chip, and is the reason why RD and TST are mutually exclusive commands. If the output bit is 1, R is updated to be the next random number in the sequence. This forces the caller to use a new random number each time RD and TST are called. The resultant output bit is not output until the entire input string has been compared, so that the time to evaluate the comparison in the TST function is always the same. Thus no attacker can compare execution times or number of bits processed before an output is given.
The next random number is generated from R using a 160-bit maximal period LFSR (tap selections on
The TST command is implemented with the following steps:
| Action | ||
1 | IF (MinTicksRemaining ≠ 0 |
|
2 | MinTicksRemaining ← MinTicks | |
3 | M ← Read 256 bits from | |
4 | IF (R = 0) |
|
5 | Hash ← Calculate FK2[R | M] | |
6 | OK ← (Hash = next 160 bits from client) |
Note that this operation must take constant | |
time so an attacker cannot determine how | |
much of their guess is correct. |
7 | IF (OK) |
Temp ← R | |
Erase R | |
Advance TEMP via LFSR | |
|
8 | | ||
Note that we can't simply advance R directly in
WR—Write
Input: Mnew=[256 bits]
Output: None
Changes: M
A WR (Write) command is used to update the writeable parts of M containing Authentication Chip state data. The WR command by itself is not secure. It must be followed by an authenticated read of M (via a RD command) to ensure that the change was made as specified. The WR command is called by passing the WR command opcode followed by the new 256 bits of data to be written to M. Since the Authentication Chip is serial, the new value for M must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A WR command is therefore: bits 0-2 of the WR opcode, followed by bits 0-15 of M[0], bits 0-15 of M[1], through to bits 0-15 of M[15]. 259 bits are transferred in total. The WR command can only be used when SIWritten=1, indicating that K1, K2 and R have been set up via the SSI command (if SIWritten is 0, then K1, K2 and R have not been setup yet, and the CLR command is called instead). The ability to write to a specific M[n] is governed by the corresponding Access Mode bits as stored in the AccessMode register. The AccessMode bits can be set using the SAM command. When writing the new value to M[n] the fact that M[n] is Flash memory must be taken into account. All the bits of M[n] must be erased, and then the appropriate bits set. Since these two steps occur on different cycles, it leaves the possibility of attack open. An attacker can remove power after erasure, but before programming with the new value. However, there is no advantage to an attacker in doing this:
-
- A Read/Write M[n] changed to 0 by this means is of no advantage since the attacker could have written any value using the WR command anyway.
- A Read Only M[n] changed to 0 by this means allows an additional known text pair (where the M[n] is 0 instead of the original value). For future use M[n] values, they are already 0, so no information is given.
- A Decrement Only M[n] changed to 0 simply speeds up the time in which the consumable is used up. It does not give any new information to an attacker that using the consumable would give.
The WR command is implemented with the following steps:
| Action | |
1 | DecEncountered ← 0 |
EqEncountered ← 0 | |
n ← 15 |
2 | Temp ← |
3 | AM = AccessMode[~n] |
Compare to the | |
| |
5 | LT ← (Temp < M[~n]) |
[comparison is unsigned] | |
EQ ← (Temp = M[~n]) |
6 | WE ← (AM = RW) |
((AM = MSR) | |
((AM = NMSR) |
7 | DecEncountered ← ((AM = MSR) |
((AM = NMSR) | |
((AM = NMSR) | |
EqEncountered ← ((AM = MSR) | |
((AM = NMSR) |
Advance to the next |
Access Mode set and |
write the new M[~n] |
if applicable |
8 | IF (WE) |
Erase M[~n] | |
M[~n] ← |
10 | |
11 | IF (n ≠ 0) |
| ||
SAN—Set AccessMode
Xnput: AccessMode=[32 bits]
Output: AccessMode=[32 bits]
Changes: AccessMode
The SAM (Set Access Mode) command is used to set the 32 bits of the AccessMode register, and is only available for use in consumable Authentication Chips (where the IsTrusted flag=0). The SAM command is called by passing the SAM command opcode followed by a 32-bit value that is used to set bits in the AccessMode register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A SAM command is therefore: bits 0-2 of the SAM opcode, followed by bits 0-31 of bits to be set in AccessMode. 35 bits are transferred in total. The AccessMode register is only cleared to 0 upon execution of a CLR command. Since an access mode of 00 indicates an access mode of RW (read/write), not setting any AccessMode bits after a CLR means that all of M can be read from and written to. The SAM command only sets bits in the AccessMode register. Consequently a client can change the access mode bits for M[n] from RW to RO (read only) by setting the appropriate bits in a 32-bit word, and calling SAM with that 32-bit value as the input parameter. This allows the programming of the access mode bits at different times, perhaps at different stages of the manufacturing process. For example, the read only random data can be written to during the initial key programming stage, while allowing a second programming stage for items such as consumable serial numbers.
Since the SAM command only sets bits, the effect is to allow the access mode bits corresponding to M[n] to progress from RW to either MSR, NMSR, or RO. It should be noted that an access mode of MSR can be changed to RO, but this would not help an attacker, since the authentication of M after a write to a doctored Authentication Chip would detect that the write was not successful and hence abort the operation. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the AccessMode register, for example to change a Decrement Only M[n] to be Read/Write, is to use the CLR command. The CLR command not only erases (clears) the AccessMode register, but also clears the keys and all of M. Thus the AccessMode[n] bits corresponding to M[n] can only usefully be changed once between CLR commands. The SAM command returns the new value of the AccessMode register (after the appropriate bits have been set due to the input parameter). By calling SAM with an input parameter of 0, AccessMode will not be changed, and therefore the current value of AccessMode will be returned to the caller.
The SAM command is implemented with the following steps:
| Action | ||
1 | Temp ← | ||
2 | SetBits(AccessMode, Temp) | ||
3 | | ||
GIT—Get Is Trusted
Input: None
Output: IsTrusted=[1 bit]
Changes: None
The GIT (Get Is Trusted) command is used to read the current value of the IsTrusted bit on the Authentication Chip. If the bit returned is 1, the Authentication Chip is a trusted System Authentication Chip. If the bit returned is 0, the Authentication Chip is a consumable Authentication Chip. A GIT command consists of simply the GIT command opcode. Since the Authentication Chip is serial, this must be transferred one bit at a time. The bit order is LSB to MSB for each command component. A GIT command is therefore sent as bits 0-2 of the GIT opcode. A total of 3 bits are transferred. The GIT command is implemented with the following steps:
| Action | |
1 | Output IsTrusted bit to client | |
SMT—Set MinTicks
Input: MinTicksnew=[32 bits]
Output: None
Changes: MinTicks
The SMT (Set MinTicks) command is used to set bits in the MinTicks register and hence define the minimum number of ticks that must pass in between calls to TST and RD. The SMT command is called by passing the SMT command opcode followed by a 32-bit value that is used to set bits in the MinTicks register. Since the Authentication Chip is serial, the data must be transferred one bit at a time. The bit order is LSB to MSB for each command component. An SMT command is therefore: bits 0-2 of the SMT opcode, followed by bits 0-31 of bits to be set in MinTicks. 35 bits are transferred in total. The MinTicks register is only cleared to 0 upon execution of a CLR command. A value of 0 indicates that no ticks need to pass between calls to key-based functions. The functions may therefore be called as frequently as the clock speed limiting hardware allows the chip to run.
Since the SMT command only sets bits, the effect is to allow a client to set a value, and only increase the time delay if further calls are made. Setting a bit that is already set has no effect, and setting a bit that is clear only serves to slow the chip down further. The setting of bits corresponds to the way that Flash memory works best. The only way to clear bits in the MinTicks register, for example to change a value of 10 ticks to a value of 4 ticks, is to use the CLR command. However the CLR command clears the MinTicks register to 0 as well as clearing all keys and M. It is therefore useless for an attacker. Thus the MinTicks register can only usefully be changed once between CLR commands.
The SMT command is implemented with the following steps:
| Action | |
1 | Temp ← | |
2 | SetBits(MinTicks, Temp) | |
Programming Authentication Chips
Authentication Chips must be programmed with logically secure information in a physically secure environment. Consequently the programming procedures cover both logical and physical security. Logical security is the process of ensuring that K1, K2, R, and the random M[n] values are generated by a physically random process, and not by a computer. It is also the process of ensuring that the order in which parts of the chip are programmed is the most logically secure. Physical security is the process of ensuring that the programming station is physically secure, so that K1 and K2 remain secret, both during the key generation stage and during the lifetime of the storage of the keys. In addition, the programming station must be resistant to physical attempts to obtain or destroy the keys. The Authentication Chip has its own security mechanisms for ensuring that K1 and K2 are kept secret, but the Programming Station must also keep K1 and K2 safe.
Overview
After manufacture, an Authentication Chip must be programmed before it can be used. In all chips values for K1 and K2 must be established. If the chip is destined to be a System Authentication Chip, the initial value for R must be determined. If the chip is destined to be a consumable Authentication Chip, R must be set to 0, and initial values for M and AccessMode must be set up. The following stages are therefore identified:
Stage 1: Determine Interaction Between Systems and Consumables
The decision of what is a System and what is a Consumable needs to be determined before any Authentication Chips can be programmed. A decision needs to be made about which Consumables can be used in which Systems, since all connected Systems and Consumables must share the same key information. They also need to share state-data usage mechanisms even if some of the interpretations of that data have not yet been determined. A simple example is that of a car and car-keys. The car itself is the System, and the car-keys are the consumables. There are several car-keys for each car, each containing the same key information as the specific car. However each car (System) would contain a different key (shared by its car-keys), since we don't want car-keys from one car working in another. Another example is that of a photocopier that requires a particular toner cartridge. In simple terms the photocopier is the System, and the toner cartridge is the consumable. However the decision must be made as to what compatibility there is to be between cartridges and photocopiers. The decision has historically been made in terms of the physical packaging of the toner cartridge: certain cartridges will or won't fit in a new model photocopier based on the design decisions for that copier. When Authentication Chips are used, the components that must work together must share the same key information.
In addition, each type of consumable requires a different way of dividing M (the state data). Although the way in which M is used will vary from application to application, the method of allocating M[n] and AccessMode[n] will be the same:
-
- Define the consumable state data for specific use
- Set some M[n] registers aside for future use (if required). Set these to be 0 and Read Only. The value can be tested for in Systems to maintain compatibility.
- Set the remaining M[n] registers (at least one, but it does not have to be M[15]) to be Read Only, with the contents of each M[n] completely random. This is to make it more difficult for a clone manufacturer to attack the authentication keys.
The following examples show ways in which the state data may be organized.
M[n] | | Description | ||
0 | RO | Key number (16 bits) | ||
1-4 | RO | Car engine number (64 bits) | ||
5-8 | RO | For future expansion = 0 (64 bits) | ||
8-15 | RO | Random bit data (128 bits) | ||
If the car manufacturer keeps all logical keys for all cars, it is a trivial matter to manufacture a new physical car-key for a given car should one be lost. The new car-key would contain a new Key Number in M[0], but have the same K1 and K2 as the car's Authentication Chip. Car Systems could allow specific key numbers to be invalidated (for example if a key is lost). Such a system might require Key 0 (the master key) to be inserted first, then all valid keys, then Key 0 again. Only those valid keys would now work with the car. In the worst case, for example if all car-keys are lost, then a new set of logical keys could be generated for the car and its associated physical car-keys if desired. The Car engine number would be used to tie the key to the particular car. Future use data may include such things as rental information, such as driver/renter details.
M[n] | | Description | |
0 | RO | Serial number (16 bits) | |
1 | RO | Batch number (16 bits) | |
2 | MSR | Page Count Remaining (32 bits, hi/lo) | |
3 | NMSR | ||
4-7 | RO | For future expansion = 0 (64 bits) | |
8-15 | RO | Random bit data (128 bits) | |
If a lower quality image unit is made that must be replaced after only 10,000 copies, the 32-bit page count can still be used for compatibility with existing photocopiers. This allows several consumable types to be used with the same system.
M[n] | | Description | |
0 | RO | Serial number (16 bits) | |
1 | RO | Batch number (16 bits) | |
2 | MSR | Photos Remaining (16 bits) | |
3-6 | RO | For future expansion = 0 (64 bits) | |
7-15 | RO | Random bit data (144 bits) | |
The Photos Remaining value at M[2] allows a number of consumable types to be built for use with the same camera System. For example, a new consumable with 36 photos is trivial to program. Suppose 2 years after the introduction of the camera, a new type of camera was introduced. It is able to use the old consumable, but also can process a new film type. M[3] can be used to define Film Type. Old film types would be 0, and the new film types would be some new value. New Systems can take advantage of this. Original systems would detect a non-zero value at M[3] and realize incompatibility with new film types. New Systems would understand the value of M[3] and so react appropriately. To maintain compatibility with the old consumable, the new consumable and System needs to have the same key information as the old one. To make a clean break with a new System and its own special consumables, a new key set would be required.
M[n] | | Description | |
0 | RO | Serial number (16 bits) | |
1 | RO | Batch number (16 bits) | |
2 | MSR | Cyan Remaining (32 bits, hi/lo) | |
3 | | ||
4 | MSR | Magenta Remaining (32 bits, hi/lo) | |
5 | | ||
6 | MSR | Yellow Remaining (32 bits, hi/lo) | |
7 | NMSR | ||
8-11 | RO | For future expansion = 0 (64 bits) | |
12-15 | RO | Random bit data (64 bits) | |
Stage 2: Determine Keys for Systems and Consumables
Once the decision has been made as to which Systems and consumables are to share the same keys, those keys must be defined. The values for K1 and K2 must therefore be determined. In most cases, K1 and K2 will be generated once for all time. All Systems and consumables that have to work together (both now and in the future) need to have the same K1 and K2 values. K1 and K2 must therefore be kept secret since the entire security mechanism for the System/Consumable combination is made void if the keys are compromised. If the keys are compromised, the damage depends on the number of systems and consumables, and the ease to which they can be reprogrammed with new non-compromised keys: In the case of a photocopier with toner cartridges, the worst case is that a clone manufacturer could then manufacture their own Authentication Chips (or worse, buy them), program the chips with the known keys, and then insert them into their own consumables. In the case of a car with car-keys, each car has a different set of keys. This leads to two possible general scenarios. The first is that after the car and car-keys are programmed with the keys, K1 and K2 are deleted so no record of their values are kept, meaning that there is no way to compromise K1 and K2. However no more car-keys can be made for that car without reprogramming the car's Authentication Chip. The second scenario is that the car manufacturer keeps K1 and K2, and new keys can be made for the car. A compromise of K1 and K2 means that someone could make a car-key specifically for a particular car.
The keys and random data used in the Authentication Chips must therefore be generated by a means that is non-deterministic (a completely computer generated pseudo-random number cannot be used because it is deterministic—knowledge of the generator's seed gives all future numbers). K1 and K2 should be generated by a physically random process, and not by a computer. However, random bit generators based on natural sources of randomness are subject to influence by external factors and also to malfunction. It is imperative that such devices be tested periodically for statistical randomness.
Stage 4: Program Keys, Random Seed, MinTicks and Unused N
Authentication Chips are in an unknown state after manufacture. Alternatively, they have already been used in one consumable, and must be reprogrammed for use in another. Each Authentication Chip must be cleared and programmed with new keys and new state data. Clearing and subsequent programming of Authentication Chips must take place in a secure Programming Station environment.
Programming a Trusted System Authentication Chip
If the chip is to be a trusted System chip, a seed value for R must be generated. It must be a random number derived from a physically random process, and must not be 0. The following tasks must be undertaken, in the following order, and in a secure programming environment:
Programming a Non-Trusted Consumable Authentication Chip
If the chip is to be a non-trusted Consumable Authentication Chip, the programming is slightly different to that of the trusted System Authentication Chip. Firstly, the seed value for R must be 0. It must have additional programming for M and the AccessMode values. The future use M[n] must be programmed with 0, and the random M[n] must be programmed with random data. The following tasks must be undertaken, in the following order, and in a secure programming environment:
RESET the chip |
CLR[ ] |
Load R (160 bit register) with 0 |
SSI[K1, K2, R] |
Load X (256 bit register) with 0 |
Set bits in X corresponding to appropriate M[n] with physically random |
data |
WR[X] |
Load Y (32 bit register) with 0 |
Set bits in Y corresponding to appropriate M[n] with Read Only Access |
Modes |
SAM[Y] |
SMT[MinTicksConsumable] |
The non-trusted consumable chip is now ready to be programmed with the general state data. If the Authentication Chips are stolen at this point, an attacker could perform a limited chosen text attack. In the best situation, parts of M are Read Only (0 and random data), with the remainder of M completely chosen by an attacker (via the WR command). A number of RD calls by an attacker obtains FK2[MIR] for a limited M. In the worst situation, M can be completely chosen by an attacker (since all 256 bits are used for state data). In both cases however, the attacker cannot choose any value for R since it is supplied by calls to RND from a System Authentication Chip. The only way to obtain a chosen R is by a Brute Force attack. It should be noted that if
Stage 5: Program State Data and Access Nodes
This stage is only required for consumable Authentication Chips, since M and AccessMode registers cannot be altered on System Authentication Chips. The future use and random values of M[n] have already been programmed in
The
Manufacture
The circuitry of the Authentication Chip must be resistant to physical attack. A summary of manufacturing implementation guidelines is presented, followed by specification of the chip's physical defenses (ordered by attack).
Guidelines for Manufacturing
The following are general guidelines for implementation of an Authentication
Chip in terms of manufacture:
Clock Filter
The Authentication Chip circuitry is designed to operate within a specific clock speed range. Since the user directly supplies the clock signal, it is possible for an attacker to attempt to introduce race-conditions in the circuitry at specific times during processing. An example of this is where a high clock speed (higher than the circuitry is designed for) may prevent an XOR from working properly, and of the two inputs, the first may always be returned. These styles of transient fault attacks can be very efficient at recovering secret key information. The lesson to be learned from this is that the input clock signal cannot be trusted. Since the input clock signal cannot be trusted, it must be limited to operate up to a maximum frequency. This can be achieved a number of ways. One way to filter the clock signal is to use an edge detect unit passing the edge on to a delay, which in turn enables the input clock signal to pass through.
Noise Generator
Each Authentication Chip should contain a noise generator that generates continuous circuit noise. The noise will interfere with other electromagnetic emissions from the chip's regular activities and add noise to the Idd signal. Placement of the noise generator is not an issue on an Authentication Chip due to the length of the emission wavelengths. The noise generator is used to generate electronic noise, multiple state changes each clock cycle, and as a source of pseudo-random bits for the Tamper Prevention and Detection circuitry. A simple implementation of a noise generator is a 64-bit LFSR seeded with a non-zero number. The clock used for the noise generator should be running at the maximum clock rate for the chip in order to generate as much noise as possible.
Tamper Prevention and Detection Circuitry
A set of circuits is required to test for and prevent physical attacks on the Authentication Chip. However what is actually detected as an attack may not be an intentional physical attack. It is therefore important to distinguish between these two types of attacks in an Authentication Chip:
A good example of an event that circuitry cannot have knowledge about, is a power glitch. The glitch may be an intentional attack, attempting to reveal information about the key. It may, however, be the result of a faulty connection, or simply the start of a power-down sequence. It is therefore best to only RESET the chip, and not erase the key. If the chip was powering down, nothing is lost. If the System is faulty, repeated RESETs will cause the consumer to get the System repaired. In both cases the consumable is still intact. A good example of an event that circuitry can have knowledge about, is the cutting of a data line within the chip. If this attack is somehow detected, it could only be a result of a faulty chip (manufacturing defect) or an attack. In either case, the erasure of the secret information is a sensible step to take.
Consequently each Authentication Chip should have 2 Tamper Detection Lines as illustrated in Fig.—one for definite attacks, and one for possible attacks. Connected to these Tamper Detection Lines would be a number of Tamper Detection test units, each testing for different forms of tampering. In addition, we want to ensure that the Tamper Detection Lines and Circuits themselves cannot also be tampered with.
At one end of the Tamper Detection Line is a source of pseudo-random bits (clocking at high speed compared to the general operating circuitry). The Noise Generator circuit described above is an adequate source. The generated bits pass through two different paths—one carries the original data, and the other carries the inverse of the data. The wires carrying these bits are in the layer above the general chip circuitry (for example, the memory, the key manipulation circuitry etc). The wires must also cover the random bit generator. The bits are recombined at a number of places via an XOR gate. If the bits are different (they should be), a 1 is output, and used by the particular unit (for example, each output bit from a memory read should be ANDed with this bit value). The lines finally come together at the Flash memory Erase circuit, where a complete erasure is triggered by a 0 from the XOR. Attached to the line is a number of triggers, each detecting a physical attack on the chip. Each trigger has an oversize nMOS transistor attached to GND. The Tamper Detection Line physically goes through this nMOS transistor. If the test fails, the trigger causes the Tamper Detect Line to become 0. The XOR test will therefore fail on either this clock cycle or the next one (on average), thus RESETing or erasing the chip.
Protected Memory with Tamper Detection
It is not enough to simply store secret information or program code in Flash memory. The Flash memory and RAM must be protected from an attacker who would attempt to modify (or set) a particular bit of program code or key information. The mechanism used must conform to being used in the Tamper Detection Circuitry (described above). The first part of the solution is to ensure that the Tamper Detection Line passes directly above each Flash or RAM bit. This ensures that an attacker cannot probe the contents of Flash or RAM. A breach of the covering wire is a break in the Tamper Detection Line. The breach causes the Erase signal to be set, thus deleting any contents of the memory. The high frequency noise on the Tamper Detection Line also obscures passive observation.
The second part of the solution for Flash is to use multi-level data storage, but only to use a subset of those multiple levels for valid bit representations. Normally, when multi-level Flash storage is used, a single floating gate holds more than one bit. For example, a 4-voltage-state transistor can represent two bits. Assuming a minimum and maximum voltage representing 00 and 11 respectively, the two middle voltages represent 01 and 10. In the Authentication Chip, we can use the two middle voltages to represent a single bit, and consider the two extremes to be invalid states. If an attacker attempts to force the state of a bit one way or the other by closing or cutting the gate's circuit, an invalid voltage (and hence invalid state) results.
The second part of the solution for RAM is to use a parity bit. The data part of the register can be checked against the parity bit (which will not match after an attack). The bits coming from Flash and RAM can therefore be validated by a number of test units (one per bit) connected to the common Tamper Detection Line. The Tamper Detection circuitry would be the first circuitry the data passes through (thus stopping an attacker from cutting the data lines).
Boot Circuitry for Loading Program Code
Program code should be kept in multi-level Flash instead of ROM, since ROM is subject to being altered in a non-testable way. A boot mechanism is therefore required to load the program code into Flash memory (Flash memory is in an indeterminate state after manufacture). The boot circuitry must not be in ROM—a small state-machine would suffice. Otherwise the boot code could be modified in an undetectable way. The boot circuitry must erase all Flash memory, check to ensure the erasure worked, and then load the program code. Flash memory must be erased before loading the program code. Otherwise an attacker could put the chip into the boot state, and then load program code that simply extracted the existing keys. The state machine must also check to ensure that all Flash memory has been cleared (to ensure that an attacker has not cut the Erase line) before loading the new program code. The loading of program code must be undertaken by the secure Programming Station before secret information (such as keys) can be loaded.
Special Implementation of FETs for Key Data Paths
The normal situation for FET implementation for the case of a CMOS Inverter (which involves a pMOS transistor combined with an nMOS transistor) is shown in
For circuitry that manipulates secret key information, such information must be kept hidden. An alternative non-flashing CMOS implementation should therefore be used for all data paths that manipulate the key or a partially calculated value that is based on the key. The use of two non-overlapping clocks φ1 and φ2 can provide a non-flashing mechanism. φ1 is connected to a second gate of all nMOS transistors, and φ2 is connected to a second gate of all PMOS transistors. The transition can only take place in combination with the clock. Since φ1 and φ2 are non-overlapping, the pMOS and nMOS transistors will not have a simultaneous intermediate resistance. The setup is shown in
Finally, regular CMOS inverters can be positioned near critical non-Flashing CMOS components. These inverters should take their input signal from the Tamper Detection Line above. Since the Tamper Detection Line operates multiple times faster than the regular operating circuitry, the net effect will be a high rate of light-bursts next to each non-Flashing CMOS component. Since a bright light overwhelms observation of a nearby faint light, an observer will not be able to detect what switching operations are occurring in the chip proper. These regular CMOS inverters will also effectively increase the amount of circuit noise, reducing the SNR and obscuring useful EMI.
There are a number of side effects due to the use of non-Flashing CMOS:
-
- The effective speed of the chip is reduced by twice the rise time of the clock per clock cycle. This is not a problem for an Authentication Chip.
- The amount of current drawn by the non-Flashing CMOS is reduced (since the short circuits do not occur). However, this is offset by the use of regular CMOS inverters.
- Routing of the clocks increases chip area, especially since multiple versions of φ1 and φ2 are required to cater for different levels of propagation. The estimation of chip area is double that of a regular implementation.
- Design of the non-Flashing areas of the Authentication Chip are slightly more complex than to do the same with a with a regular CMOS design. In particular, standard cell components cannot be used, making these areas full custom. This is not a problem for something as small as an Authentication Chip, particularly when the entire chip does not have to be protected in this manner.
Connections in polysilicon layers where possible
Wherever possible, the connections along which the key or secret data flows, should be made in the polysilicon layers. Where necessary, they can be inmetal 1, but must never be in the top metal layer (containing the Tamper Detection Lines).
OverUnderPower Detection Unit
Each Authentication Chip requires an OverUnderPower Detection Unit to prevent Power Supply Attacks. An OverUnderPower Detection Unit detects power glitches and tests the power level against a Voltage Reference to ensure it is within a certain tolerance. The Unit contains a single Voltage Reference and two comparators. The OverUnderPower Detection Unit would be connected into the RESET Tamper Detection Line, thus causing a RESET when triggered. A side effect of the OverUnderPower Detection Unit is that as the voltage drops during a power-down, a RESET is triggered, thus erasing any work registers.
No Test Circuitry
Test hardware on an Authentication Chip could very easily introduce vulnerabilities. As a result, the Authentication Chip should not contain any BIST or scan paths. The Authentication Chip must therefore be testable with external test vectors. This should be possible since the Authentication Chip is not complex.
Reading ROM
This attack depends on the key being stored in an addressable ROM. Since each Authentication Chip stores its authentication keys in internal Flash memory and not in an addressable ROM, this attack is irrelevant.
Reverse Engineering the Chip
Reverse engineering a chip is only useful when the security of authentication lies in the algorithm alone. However our Authentication Chips rely on a secret key, and not in the secrecy of the algorithm. Our authentication algorithm is, by contrast, public, and in any case, an attacker of a high volume consumable is assumed to have been able to obtain detailed plans of the internals of the chip. In light of these factors, reverse engineering the chip itself, as opposed to the stored data, poses no threat.
Usurping the Authentication Process
There are several forms this attack can take, each with varying degrees of success. In all cases, it is assumed that a clone manufacturer will have access to both the System and the consumable designs. An attacker may attempt to build a chip that tricks the System into returning a valid code instead of generating an authentication code. This attack is not possible for two reasons. The first reason is that System Authentication chips and Consumable Authentication Chips, although physically identical, are programmed differently. In particular, the RD opcode and the RND opcode are the same, as are the WR and TST opcodes. A System authentication Chip cannot perform a RD command since every call is interpreted as a call to RND instead. The second reason this attack would fail is that separate serial data lines are provided from the System to the System and Consumable Authentication Chips. Consequently neither chip can see what is being transmitted to or received from the other. If the attacker builds a clone chip that ignores WR commands (which decrement the consumable remaining),Protocol 3 ensures that the subsequent RD will detect that the WR did not occur. The System will therefore not go ahead with the use of the consumable, thus thwarting the attacker. The same is true if an attacker simulates loss of contact before authentication—since the authentication does not take place, the use of the consumable doesn't occur. An attacker is therefore limited to modifying each System in order for clone consumables to be accepted
Modification of System
The simplest method of modification is to replace the System's Authentication Chip with one that simply reports success for each call to TST. This can be thwarted by System calling TST several times for each authentication, with the first few times providing false values, and expecting a fail from TST. The final call to TST would be expected to succeed. The number of false calls to TST could be determined by some part of the returned result from RD or from the system clock. Unfortunately an attacker could simply rewire System so that the new Systemclone authentication chip 53 can monitor the returned result from the consumable chip or clock. The clone System Authentication Chip would only return success when that monitored value is presented to its TST function. Clone consumables could then return any value as the hash result for RD, as the clone System chip would declare that value valid. There is therefore no point for the System to call the System Authentication Chip multiple times, since a rewiring attack will only work for the System that has been rewired, and not for all Systems. A similar form of attack on a System is a replacement of the System ROM. The ROM program code can be altered so that the Authentication never occurs. There is nothing that can be done about this, since the System remains in the hands of a consumer. Of course this would void any warranty, but the consumer may consider the alteration worthwhile if the clone consumable were extremely cheap and more readily available than the original item.
The System/consumable manufacturer must therefore determine how likely an attack of this nature is. Such a study must include given the pricing structure of Systems and Consumables, frequency of System service, advantage to the consumer of having a physical modification performed, and where consumers would go to get the modification performed. The limit case of modifying a system is for a clone manufacturer to provide a completely clone System which takes clone consumables. This may be simple competition or violation of patents. Either way, it is beyond the scope of the Authentication Chip and depends on the technology or service being cloned.
Direct Viewing of Chip Operation by Conventional Probing
In order to view the chip operation, the chip must be operating. However, the Tamper Prevention and Detection circuitry covers those sections of the chip that process or hold the key. It is not possible to view those sections through the Tamper Prevention lines. An attacker cannot simply slice the chip past the Tamper Prevention layer, for this will break the Tamper Detection Lines and cause an erasure of all keys at power-up. Simply destroying the erasure circuitry is not sufficient, since the multiple ChipOK bits (now all 0) feeding into multiple units within the Authentication Chip will cause the chip's regular operating circuitry to stop functioning. To set up the chip for an attack, then, requires the attacker to delete the Tamper Detection lines, stop the Erasure of Flash memory, and somehow rewire the components that relied on the ChipOK lines. Even if all this could be done, the act of slicing the chip to this level will most likely destroy the charge patterns in the non-volatile memory that holds the keys, making the process fruitless.
Direct Viewing of the Non-Volatile Memory
If the Authentication Chip were sliced so that the floating gates of the Flash memory were exposed, without discharging them, then the keys could probably be viewed directly using an STM or SKM. However, slicing the chip to this level without discharging the gates is probably impossible. Using wet etching, plasma etching, ion milling, or chemical mechanical polishing will almost certainly discharge the small charges present on the floating gates. This is true of regular Flash memory, but even more so of multi-level Flash memory.
Viewing the Light Bursts Caused by State Changes
All sections of circuitry that manipulate secret key information are implemented in the non-Flashing CMOS described above. This prevents the emission of the majority of light bursts. Regular CMOS inverters placed in close proximity to the non-Flashing CMOS will hide any faint emissions caused by capacitor charge and discharge. The inverters are connected to the Tamper Detection circuitry, so they change state many times (at the high clock rate) for each non-Flashing CMOS state change.
Monitoring EMI
The Noise Generator described above will cause circuit noise. The noise will interfere with other electromagnetic emissions from the chip's regular activities and thus obscure any meaningful reading of internal data transfers.
Viewing Idd Fluctuations
The solution against this kind of attack is to decrease the SNR in the Idd signal. This is accomplished by increasing the amount of circuit noise and decreasing the amount of signal. The Noise Generator circuit (which also acts as a defense against EMI attacks) will also cause enough state changes each cycle to obscure any meaningful information in the Idd signal. In addition, the special Non-Flashing CMOS implementation of the key-carrying data paths of the chip prevents current from flowing when state changes occur. This has the benefit of reducing the amount of signal.
Differential Fault Analysis
Differential fault bit errors are introduced in a non-targeted fashion by ionization, microwave radiation, and environmental stress. The most likely effect of an attack of this nature is a change in Flash memory (causing an invalid state) or RAM (bad parity). Invalid states and bad parity are detected by the Tamper Detection Circuitry, and cause an erasure of the key. Since the Tamper Detection Lines cover the key manipulation circuitry, any error introduced in the key manipulation circuitry will be mirrored by an error in a Tamper Detection Line. If the Tamper Detection Line is affected, the chip will either continually RESET or simply erase the key upon a power-up, rendering the attack fruitless. Rather than relying on a non-targeted attack and hoping that “just the right part of the chip is affected in just the right way”, an attacker is better off trying to introduce a targeted fault (such as overwrite attacks, gate destruction etc). For information on these targeted fault attacks, see the relevant sections below.
Clock Glitch Attacks
The Clock Filter (described above) eliminates the possibility of clock glitch attacks.
Power Supply Attacks
The OverUnderPower Detection Unit (described above) eliminates the possibility of power supply attacks.
Overwriting ROM
Authentication Chips store Program code, keys and secret information in Flash memory, and not in ROM. This attack is therefore not possible.
Modifying EEPROM/Flash
Authentication Chips store Program code, keys and secret information in Flash memory. However, Flash memory is covered by two Tamper Prevention and Detection Lines. If either of these lines is broken (in the process of destroying a gate) the attack will be detected on power-up, and the chip will either RESET (continually) or erase the keys from Flash memory. However, even if the attacker is able to somehow access the bits of Flash and destroy or short out the gate holding a particular bit, this will force the bit to have no charge or a full charge. These are both invalid states for the Authentication Chip's usage of the multi-level Flash memory (only the two middle states are valid). When that data value is transferred from Flash, detection circuitry will cause the Erasure Tamper Detection Line to be triggered—thereby erasing the remainder of Flash memory and RESETing the chip. A Modify EEPROM/Flash Attack is therefore fruitless.
Gate Destruction Attacks
Gate Destruction Attacks rely on the ability of an attacker to modify a single gate to cause the chip to reveal information during operation. However any circuitry that manipulates secret information is covered by one of the two Tamper Prevention and Detection lines. If either of these lines is broken (in the process of destroying a gate) the attack will be detected on power-up, and the chip will either RESET (continually) or erase the keys from Flash memory. To launch this kind of attack, an attacker must first reverse-engineer the chip to determine which gate(s) should be targeted. Once the location of the target gates has been determined, the attacker must break the covering Tamper Detection line, stop the Erasure of Flash memory, and somehow rewire the components that rely on the ChipOK lines. Rewiring the circuitry cannot be done without slicing the chip, and even if it could be done, the act of slicing the chip to this level will most likely destroy the charge patterns in the non-volatile memory that holds the keys, making the process fruitless.
Overwrite Attacks
An Overwrite Attack relies on being able to set individual bits of the key without knowing the previous value. It relies on probing the chip, as in the Conventional Probing Attack and destroying gates as in the Gate Destruction Attack. Both of these attacks (as explained in their respective sections), will not succeed due to the use of the Tamper Prevention and Detection Circuitry and ChipOK lines. However, even if the attacker is able to somehow access the bits of Flash and destroy or short out the gate holding a particular bit, this will force the bit to have no charge or a full charge. These are both invalid states for the Authentication Chip's usage of the multi-level Flash memory (only the two middle states are valid). When that data value is transferred from Flash detection circuitry will cause the Erasure Tamper Detection Line to be triggered—thereby erasing the remainder of Flash memory and RESETing the chip. In the same way, a parity check on tampered values read from RAM will cause the Erasure Tamper Detection Line to be triggered. An Overwrite Attack is therefore fruitless.
Memory Remanence Attack
Any working registers or RAM within the Authentication Chip may be holding part of the authentication keys when power is removed. The working registers and RAM would continue to hold the information for some time after the removal of power. If the chip were sliced so that the gates of the registers/RAM were exposed, without discharging them, then the data could probably be viewed directly using an STM. The first defense can be found above, in the description of defense against Power Glitch Attacks. When power is removed, all registers and RAM are cleared, just as the RESET condition causes a clearing of memory. The chances then, are less for this attack to succeed than for a reading of the Flash memory. RAM charges (by nature) are more easily lost than Flash memory. The slicing of the chip to reveal the RAM will certainly cause the charges to be lost (if they haven't been lost simply due to the memory not being refreshed and the time taken to perform the slicing). This attack is therefore fruitless.
Chip Theft Attack
There are distinct phases in the lifetime of an Authentication Chip. Chips can be stolen when at any of these stages: - After manufacture, but before programming of key
- After programming of key, but before programming of state data
- After programming of state data, but before insertion into the consumable or system
- After insertion into the system or consumable
A theft in between the chip manufacturer and programming station would only provide the clone manufacturer with blank chips. This merely compromises the sale of Authentication chips, not anything authenticated by the Authentication chips. Since the programming station is the only mechanism with consumable and system product keys, a clone manufacturer would not be able to program the chips with the correct key. Clone manufacturers would be able to program the blank chips for their own Systems and Consumables, but it would be difficult to place these items on the market without detection. The second form of theft can only happen in a situation where an Authentication Chip passes through two or more distinct programming phases. This is possible, but unlikely. In any case, the worst situation is where no state data has been programmed, so all of M is read/write. If this were the case, an attacker could attempt to launch an Adaptive Chosen Text Attack on the chip. The HMAC-SHA1 algorithm is resistant to such attacks. The third form of theft would have to take place in between the programming station and the installation factory. The Authentication chips would already be programmed for use in a particular system or for use in a particular consumable. The only use these chips have to a thief is to place them into a clone System or clone Consumable. Clone systems are irrelevant—a cloned System would not even require anauthentication chip 53. For clone Consumables, such a theft would limit the number of cloned products to the number of chips stolen. A single theft should not create a supply constant enough to provide clone manufacturers with a cost-effective business. The final form of theft is where the System or Consumable itself is stolen. When the theft occurs at the manufacturer, physical security protocols must be enhanced. If the theft occurs anywhere else, it is a matter of concern only for the owner of the item and the police or insurance company. The security mechanisms that the Authentication Chip uses assume that the consumables and systems are in the hands of the public. Consequently, having them stolen makes no difference to the security of the keys.
Authentication Chip Design
The Authentication Chip has a physical and a logical external interface. The physical interface defines how the Authentication Chip can be connected to a physical System, and the logical interface determines how that System can communicate with the Authentication Chip.
Physical Interface
The Authentication Chip is a small 4-pin CMOS package (actual internal size is approximately 0.30 mm2 using 0.25 μm Flash process). The 4 pins are GND, CLK, Power, and Data. Power is a nominal voltage. If the voltage deviates from this by more than a fixed amount, the chip will RESET. The recommended clock speed is 4-10 MHz. Internal circuitry filters the clock signal to ensure that a safe maximum clock speed is not exceeded. Data is transmitted and received one bit at a time along the serial data line. The chip performs a RESET upon power-up, power-down. In addition, tamper detection and prevention circuitry in the chip will cause the chip to either RESET or erase Flash memory (depending on the attack detected) if an attack is detected. A special Programming Mode is enabled by holding the CLK voltage at a particular level. This is defined further in the next section.
Logical Interface
The Authentication Chip has two operating modes—a Normal Mode and a Programming Mode. The two modes are required because the operating program code is stored in Flash memory instead of ROM (for security reasons). The Programming mode is used for testing purposes after manufacture and to load up the operating program code, while the normal mode is used for all subsequent usage of the chip.
Programming Mode
The Programming Mode is enabled by holding a specific voltage on the CLK line for a given amount of time. When the chip enters Programming Mode, all Flash memory is erased (including all secret key information and any program code). The Authentication Chip then validates the erasure. If the erasure was successful, the Authentication Chip receives 384 bytes of data corresponding to the new program code. The bytes are transferred in order byte0 to byte383. The bits are transferred from bit0 to bit7. Once all 384 bytes of program code have been loaded, the Authentication Chip hangs. If the erasure was not successful, the Authentication Chip will hang without loading any data into the Flash memory. After the chip has been programmed, it can be restarted. When the chip is RESET with a normal voltage on the CLK line, Normal Mode is entered.
Normal Node
Whenever the Authentication Chip is not in Programming Mode, it is in Normal Mode. When the Authentication Chip starts up in Normal Mode (for example a power-up RESET), it executes the program currently stored in the program code region of Flash memory. The program code implements a communication mechanism between the System and Authentication Chip, accepting commands and data from the System and producing output values. Since the Authentication Chip communicates serially, bits are transferred one at a time. The System communicates with the Authentication Chips via a simple operation command set. Each command is defined by 3-bit opcode. The interpretation of the opcode depends on the current value of the IsTrusted bit and the IsWritten bit. The following operations are defined:
Op | T | W | Mn | Input | Output | Description |
000 | — | — | CLR | — | — | |
001 | 0 | 0 | SSI | [160, 160, 160] | — | Set Secret |
Information | ||||||
010 | 0 | 1 | RD | [160, 160] | [256, 160] | Read M securely |
010 | 1 | 1 | RND | — | [160, 160] | Random |
011 | 0 | 1 | WR | [256] | — | Write M |
011 | 1 | 1 | TST | [256, 160] | [1] | |
100 | 0 | 1 | SAM | [32] | [32] | |
101 | — | 1 | GIT | — | [1] | Get Is Trusted |
110 | — | 1 | SMT | [32] | — | Set MinTicks |
Op = Opcode, | ||||||
T = IsTrusted value, | ||||||
W = IsWritten value, | ||||||
Mn = Mnemonic, | ||||||
[n] = number of bits required for parameter |
Any command not defined in this table is interpreted as NOP (No operation). Examples include
In some cases, the output bits from one chip's command can be fed directly as the input bits to another chip's command. An example of this is the RND and RD commands. The output bits from a call to RND on a trusted Authentication Chip do not have to be kept by System. Instead, System can transfer the output bits directly to the input of the non-trusted Authentication Chip's RD command. The description of each command points out where this is so. Each of the commands is examined in detail in the subsequent sections. Note that some algorithms are specifically designed because the permanent registers are kept in Flash memory.
Registers
The memory within the Authentication Chip contains some non-volatile memory to store the variables required by the Authentication Protocol. The following non-volatile (Flash) variables are defined:
Size | ||
Variable Name | (in bits) | Description |
M[0 . . . 15] | 256 | 16 words (each 16 bits) containing |
state data such as serial numbers, | ||
media remaining etc. | ||
| 160 | Key used to transform R during |
authentication. | ||
| 160 | Key used to transform M during |
authentication. | ||
| 160 | Current random number |
AccessMode[0 . . . 15] | 32 | The 16 sets of 2-bit AccessMode |
values for M[n]. | ||
| 32 | The minimum number of clock ticks |
between calls to key-based | ||
SIWritten | ||
1 | If set, the secret key information | |
(K1, K2, and R) has been written | ||
to the chip. If clear, the secret | ||
information has not | ||
been written yet. | ||
| 1 | If set, the RND and TST functions |
can be called, but RD and WR | ||
functions cannot be called. If | ||
clear, the RND and TST functions | ||
cannot be called, but RD and WR | ||
functions can be called. | ||
Total bits | 802 | |
Architecture Overview
This section chapter provides the high-level definition of a purpose-built CPU capable of implementing the functionality required of an Authentication Chip. Note that this CPU is not a general purpose CPU. It is tailor-made for implementing the Authentication logic. The authentication commands that a user of an Authentication Chip sees, such as WRITE, TST, RND etc are all implemented as small programs written in the CPU instruction set. The CPU contains a 32-bit Accumulator (which is used in most operations), and a number of registers. The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. Each 8-bit instruction typically consists of a 4-bit opcode, and a 4-bit operand.
Operating Speed
An internal Clock Frequency Limiter Unit prevents the chip from operating at speeds any faster than a predetermined frequency. The frequency is built into the chip during manufacture, and cannot be changed. The frequency is recommended to be about 4-10 MHz.
Composition and Block Diagram
The Authentication Chip contains the following components:
Unit Name | CMOS Type | Description |
Clock | Normal | Ensures the operating frequency |
Frequency | of the Authentication Chip does | |
Limiter | not exceed a specific maximum | |
frequency. | ||
OverUnderPower | Normal | Ensures that the power supply |
Detection Unit | remains in a valid operating | |
range. | ||
Programming | Normal | Allows users to enter Program- |
Mode | ming Mode. | |
Detection Unit | ||
Noise Generator | Normal | For generating Idd, noise and |
for use in the Tamper Preven- | ||
tion and Detection circuitry. | ||
State Machine | Normal | for controlling the two oper- |
ating modes of the chip (Program- | ||
ming Mode and Normal Mode). This | ||
includes generating the two oper- | ||
ating cycles of the CPU, stalling | ||
during long command operations, | ||
and storing the op-code and oper- | ||
and during operating cycles. | ||
I/O Unit | Normal | Responsible for communicating |
serially with the outside world. | ||
ALU | Non-flashing | Contains the 32-bit accumulator |
as well as the general mathe- | ||
matical and logical operators. | ||
MinTicks Unit | Normal (99%), | Responsible for a programmable |
Non-flashing | minimum delay (via a countdown) | |
(1%) | between certain key-based oper- | |
ations. | ||
Address | Normal (99%), | Generates direct, indirect, and |
Generator | Non-flashing | indexed addresses as required |
Unit | (1%) | by specific operands. |
Program | Normal | Includes the 9 bit PC (program |
Counter Unit | counter), as well as logic for | |
branching and subroutine control | ||
Memory Unit | Non-flashing | Addressed by 9 bits of address. |
It contains an 8-bit wide program | ||
Flash memory, and 32-bit wide | ||
Flash memory, RAM, and look-up | ||
tables. Also contains Programming | ||
Mode circuitry to enable loading | ||
of program code. | ||
Memory Map
Constants
RAM
Flash Memory—Variables
Flash Memory—Program
Registers
A number of registers are defined in the Authentication Chip. They are used for temporary storage during function execution. Some are used for arithmetic functions, others are used for counting and indexing, and others are used for serial I/O. These registers do not need to be kept in non-volatile (Flash) memory. They can be read or written without the need for an erase cycle (unlike Flash memory). Temporary storage registers that contain secret information still need to be protected from physical attack by Tamper Prevention and Detection circuitry and parity checks.
All registers are cleared to 0 on a RESET. However, program code should not assume any particular state, and set up register values appropriately. Note that these registers do not include the various OK bits defined for the Tamper Prevention and Detection circuitry. The OK bits are scattered throughout the various units and are set to 1 upon a RESET.
Cycle
The 1-bit Cycle value determines whether the CPU is in a Fetch cycle (0) or an Execute cycle (1). Cycle is actually derived from a 1-bit register that holds the previous Cycle value. Cycle is not directly accessible from the instruction set. It is an internal register only.
Program Counter
A 6-level deep 9-bit Program Counter Array (PCA) is defined. It is indexed by a 3-bit Stack Pointer (SP). The current Program Counter (PC), containing the address of the currently executing instruction, is effectively PCA[SP]. In addition, a 9-bit Adr register is defined, containing the resolved address of the current memory reference (for indexed or indirect memory accesses). The PCA, SP, and Adr registers are not directly accessible from the instruction set. They are internal registers only
CMD
The 8-bit CMD register is used to hold the currently executing command. While the CMD register is not directly accessible from the instruction set, and is an internal register only.
Accumulator and Z flag
The Accumulator is a 32-bit general-purpose register. It is used as one of the inputs to all arithmetic operations, and is the register used for transferring information between memory registers. The Z register is a 1-bit flag, and is updated each time the Accumulator is written to. The Z register contains the zero-ness of the Accumulator. Z=1 if the last value written to the Accumulator was 0, and 0 if the last value written was non-0. Both the Accumulator and Z registers are directly accessible from the instruction set.
Counters
A number of special purpose counters/index registers are defined:
Register | |||||
Name | Size | | Description | ||
C1 |
1 × 3 | 3 | Counter used to index arrays: | ||
AE, B160, M, H, y, and h. | ||||
| 1 × 5 | 5 | General | |
N | ||||
1-4 | 4 × 4 | 16 | Used to index array X | |
All these counter registers are directly accessible from the instruction set. Special instructions exist to load them with specific values, and other instructions exist to decrement or increment them, or to branch depending on the whether or not the specific counter is zero. There are also 2 special flags (not registers) associated with C1 and C2, and these flags hold the zero-ness of C1 or C2. The flags are used for loop control, and are listed here, for although they are not registers, they can be tested like registers.
| Description | ||
C1Z | |||
1 = C1 is current zero, 0 = C1 is currently non-zero. | |||
| 1 = C2 is current zero, 0 = C2 is currently non-zero. | ||
Flags
A number of 1-bit flags, corresponding to CPU operating modes, are defined:
Name | | Description |
WE |
1 | WriteEnable for X register array: | ||
0 = Writes to X registers become no- | |||
1 = Writes to X registers are carried out | |||
| 1 | 0 = K1 is accessed during K references. | |
Reads from M are interpreted as reads of 0 | |||
1 = K2 is accessed during K references. | |||
Reads from M succeed. | |||
All these 1-bit flags are directly accessible from the instruction set. Special instructions exist to set and clear these flags. Registers used for Write Integrity
Name | | Description |
EE | ||
1 | Corresponds to the EqEncountered variable in the | |
WR command pseudocode. Used during the writing of | ||
multi-precision data values to determine whether | ||
all more significant components have been equal | ||
to their previous values. | ||
| 1 | Corresponds to the DecEncountered variable in the |
WR command pseudocode. Used during the writing of | ||
multi-precision data values to determine whether a | ||
more significant components has been decremented | ||
already. | ||
Registers Used for I/O
Four 1-bit registers are defined for communication between the client (System) and the Authentication Chip. These registers are InBit, InBitValid, OutBit, and OutBitValid. InBit and InBitValid provide the means for clients to pass commands and data to the Authentication Chip. OutBit and OutBitValid provide the means for clients to get information from the Authentication Chip. A client sends commands and parameter bits to the Authentication Chip one bit at a time. Since the Authentication Chip is a slave device, from the Authentication Chip's point of view:
-
- Reads from InBit will hang while InBitValid is clear. InBitValid will remain clear until the client has written the next input bit to InBit. Reading InBit clears the InBitValid bit to allow the next InBit to be read from the client. A client cannot write a bit to the Authentication Chip unless the InBitValid bit is clear.
- Writes to OutBit will hang while OutBitValid is set. OutBitValid will remain set until the client has read the bit from OutBit. Writing OutBit sets the OutBitValid bit to allow the next OutBit to be read by the client. A client cannot read a bit from the Authentication Chip unless the OutBitValid bit is set.
Registers Used for Timing Access
A single 32-bit register is defined for use as a timer. The MTR (MinTicksRemaining) register decrements every time an instruction is executed. Once the MTR register gets to 0, it stays at zero. Associated with MTR is a 1-bit flag MTRZ, which contains the zero-ness of the MTR register. If MTRZ is 1, then the MTR register is zero. If MTRZ is 0, then the MTR register is not zero yet. MTR always starts off at the MinTicks value (after a RESET or a specific key-accessing function), and eventually decrements to 0. While MTR can be set and MTRZ tested by specific instructions, the value of MTR cannot be directly read by any instruction.
Register Summary
The following table summarizes all temporary registers (ordered by register name). It lists register names, size (in bits), as well as where the specified register can be found.
Register Name | Bits | Parity | Where | ||
Acc |
32 | 1 | Arithmetic | ||
Adr | ||||
9 | 1 | Address | ||
AMT | ||||
32 | Arithmetic | |||
C1 | ||||
3 | 1 | Address | ||
C2 | ||||
5 | 1 | Address | ||
CMD | ||||
8 | 1 | | ||
Cycle | ||||
1 | State Machine | |||
(Old = | ||||
prev Cycle) | ||||
| 1 | Arithmetic | ||
EE | ||||
1 | Arithmetic | |||
InBit | ||||
1 | Input | |||
InBitValid | ||||
1 | Input | |||
K2MX | ||||
1 | Address | |||
MTR | ||||
32 | 1 | | ||
MTRZ | ||||
1 | MinTicks Unit | |||
N[1–4] | 16 | 4 | Address | |
OutBit | ||||
1 | Input | |||
OutBitValid | ||||
1 | Input | |||
PCA | ||||
54 | 6 | Program | ||
RTMP | ||||
1 | Arithmetic | |||
SP | ||||
3 | 1 | Program | ||
WE | ||||
1 | | |||
Z | ||||
1 | Arithmetic Logic | |||
Total bits | ||||
206 | 17 | |||
Instruction Set
The CPU operates on 8-bit instructions specifically tailored to implementing authentication logic. The majority of 8-bit instruction consists of a 4-bit opcode, and a 4-bit operand. The high-
Opcodes and Operands (Summary)
The opcodes are summarized in the following table:
Opcode | | Simple Description | |
0000 | TBR | Test and branch. | |
0001 | DBR | Decrement and | |
001 | JSR | Jump subroutine via table | |
01000 | RTS | Return from subroutine | |
01001 | JSI | Jump subroutine indirect | |
0101 | | Set counter | |
0110 | CLR | Clear | |
0111 | SET | Set bits in | |
1000 | ADD | Add a 32 bit value to the | |
| |||
1001 | LOG | Logical operation (AND, and OR ) | |
1010 | XOR | Exclusive-OR Accumulator with | |
some | |||
1011 | LD | Load Accumulator from specified | |
| |||
1100 | ROR | Rotate Accumulator right | |
1101 | RPL | Replace | |
1110 | LDK | Load Accumulator with a constant | |
1111 | ST | Store Accumulator in specified | |
location | |||
The following table is a summary of which operands can be used with which opcodes. The table is ordered alphabetically by opcode mnemonic. The binary value for each operand can be found in the subsequent tables.
Opcode | Valid Operand | ||
ADD | {A, B, C, D, E, T, MT, AM, | ||
AE[C1], B160[C1], H[C1], M[C1], | |||
K[C1], R[C1], X[N4]} | |||
CLR | {WE, K2MX, M[C1], Group1, Group2} | ||
DBR | {C1, C2}, Offset into DBR Table | ||
JSI | { } | ||
JSR | Offset into Table 1 | ||
LD | {A, B, C, D, E, T, MT, AM, | ||
AE[C1], B160[C1], H[C1], M[C1], | |||
K[C1], R[C1], X[N4]} | |||
LDK | {0x0000 . . . , 0x3636 . . . , 0x5C5C . . . , | ||
0xFFFF, h[C1], y[C1]} | |||
LOG | {AND, OR}, {A, B, C, D, E, T, MT, AM} | ||
ROR | {InBit, OutBit, LFSR, RLFSR, IST, | ||
ISW, MTRZ, 1, 2, 27, 31} | |||
RPL | {Init, MHI, MLO} | ||
RTS | { } | ||
SC | {C1, C2}, Offset into counter list | ||
SET | {WE, K2MX, Nx, MTR, IST, ISW} | ||
ST | {A, B, C, D, E, T, MT, AM, | ||
AE[C1], B160[C1], H[C1], M[C1], | |||
K[C1], R[C1], X[N4]} | |||
TBR | {0, 1}, Offset into Table 1 | ||
XOR | {A, B, C, D, E, T, MT, AM, X[N1], X[N2], | ||
X[N3], X[N4]} | |||
The following operand table shows the interpretation of the 4-bit operands where all 4 bits are used for direct interpretation.
Oper- | ADD, | |||||||
and | LD, ST | XOR | ROR | LDK | RPL | SET | CLR | |
0000 | E | E | InBit | 0x00 . . . | Init | WE | WE | |
0001 | D | D | OutBit | 0x36 . . . | — | K2MX | K2MX | |
0010 | C | C | RB | 0x5C . . . | — | Nx | — | |
0011 | B | B | XRB | 0xFF . . . | — | — | — | |
0100 | A | A | IST | y[C1] | — | IST | — | |
0101 | T | T | ISW | — | — | ISW | — | |
0110 | MT | MT | MTRZ | — | — | MTR | — | |
0111 | | AM | 1 | — | — | — | — | |
1000 | AE[C1] | — | — | h[C1] | — | — | — | |
1001 | B160[C1] | — | 2 | — | — | — | — | |
1010 | H[C1] | — | 27 | — | — | — | — | |
1011 | — | — | — | — | — | — | — | |
1100 | R[C1] | X[N1] | 31 | — | — | — | R | |
1101 | K[C1] | X[N2] | — | — | — | — | Group1 | |
1110 | M[C1] | X[N3] | — | — | MLO | — | M[C1] | |
1111 | X[N4] | X[N4] | — | — | MHI | — | Group2 | |
The following instructions make a selection based upon the highest bit of the operand:
Which Counter? | Which operation? | Which Value? | |
Operand3 | (DBR, SC) | (LOG) | (TBR) |
0 | C1 | AND | |
1 | C2 | OR | Non-zero |
The lowest 3 bits of the operand are either offsets (DBR, TBR), values from a special table (SC) or as in the case of LOG, they select the second input for the logical operation. The interpretation matches the interpretation for the ADD, LD, and ST opcodes:
Operand2−0 | LOG Input2 | SC Value | ||
000 | | 2 | ||
001 | | 3 | ||
010 | | 4 | ||
011 | | 7 | ||
100 | A | 10 | ||
101 | | 15 | ||
110 | | 19 | ||
111 | | 31 | ||
ADD—Add To Accumulator
Mnemonic: ADD
Opcode: 1000
Usage: ADD Value
DBR—Decrement and Branch
Mnemonic: DBR
Opcode: 0001
Usage: DBR Counter, Offset
This instruction provides the mechanism for building simple loops. The high-hit of the operand selects between testing C1 or C2 (the two counters). If the specified counter is non-zero, then the counter is decremented and the value at the given offset (sign extended) is added to the PC. If the specified counter is zero, it is decremented and processing continues at
JSI—Jump Subroutine Indirect
Mnemonic: JSI
Opaode: 01001
Usage: JSI (Acc)
The JSI instruction allows the jumping to a subroutine dependant on the value currently in the Accumulator. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC are loaded from Jump Table 2 (offset given by the lower 5 bits of the Accumulator), and the lowest bit of the PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).
JSR—Jump Subroutine
Mnemonic: JSR
Opcode: 001
Usage: JSR Offset
The JSR instruction provides for the most common usage of the subroutine construct. The instruction pushes the current PC onto the stack, and loads the PC with a new value. The upper 8 bits of the new PC value comes from Address Table 1, with the offset into the table provided by the 5-bit operand (32 possible addresses). The lowest bit of the new PC is cleared to 0. Thus all subroutines must start at even addresses. The stack provides for 6 levels of execution (5 subroutines deep). It is the responsibility of the programmer to ensure that this depth is not exceeded or the return value will be overwritten (since the stack wraps).
LD—Load Accumulator
Mnemonic: LD
Opcode: 1011
Usage: LD Value
The LD instruction loads the Accumulator from the specified operand. The operand is one of A, B, C, D, E, T, AM, MT, AE[C1], H[C1], B160[C1], R[C1], K[C1], M[C1], or X[N4]. The Z flag is also set during this operation, depending on whether the value loaded is zero or not.
LDK—Load Constant
Mnemonic: LDK
Opcode: 1110
Usage: LDK Constant
The LDK instruction loads the Accumulator with the specified constant. The constants are those 32-bit values required for HMAC-SHA1 and all 0s and all 1s as most useful for general purpose processing. Consequently they are a choice of:
ROR—Rotate Right
Mnemonic: ROR
Opcode: 1100
Usage: ROR Value
The ROR instruction provides a way of rotating the Accumulator right a set number of bits. The bit coming in at the top of the Accumulator (to become bit 31) can either come from the
With operand OutBit, the Accumulator is shifted right one bit position. The bit shifted out from
RPL—Replace Bits
Mnemonic: RPL
Opcode: 1101
Usage: ROR Value
The RPL instruction is designed for implementing the high level WRITE command in the Authentication Chip. The instruction is designed to replace the upper 16 bits of the Accumulator by the value that will eventually be written to the M array (dependant on the Access Mode value). The instruction takes 3 operands: Init, MHI, and MLO. The Init operand sets all internal flags and prepares the RPL unit within the ALU for subsequent processing. The Accumulator is transferred to an internal AccessMode register. The Accumulator should have been loaded from the AM Flash memory location before the call to RPL Init in the case of implementing the WRITE command, or with 0 in the case of implementing the TST command. The Accumulator is left unchanged. The MHI and MLO operands refer to whether the upper or lower 16 bits of M[C1] will be used in the comparison against the (always) upper 16 bits of the Accumulator. Each MHI and MLO instruction executed uses the subsequent 2 bits from the initialized AccessMode value. The first execution of MHI or MLO uses the lowest 2 bits, the next uses the second two bits etc.
RTS—Return From Subroutine
Maemonic: RTS
Opcode: 01000
Usage: RTS
The RTS instruction causes execution to resume at the instruction after the most recently executed JSR or JSI instruction. Hence the term: returning from the subroutine. In actuality, the instruction pulls the saved PC from the stack, adds 1, and resumes execution at the resultant address. Although 6 levels of execution are provided for (5 subroutines), it is the responsibility of the programmer to balance each JSR and JSI instruction with an RTS. An RTS executed with no previous JSR will cause execution to begin at whatever address happens to be pulled from the stack.
SC—Set Counter
Mnemonic: SC
Opcode: 0101
Usage: SC Counter Value
The SC instruction is used to load a counter with a particular value. The operand determines which of counters C1 and C2 is to be loaded. The Value to be loaded is one of 2, 3, 4, 7, 10, 15, 19, and 31. The counter values are used for looping and indexing. Both C1 and C2 can be used for looping constructs (when combined with the DBR instruction), while only C1 can be used for indexing 32-bit parts of multi-precision variables.
SET—Set Bits
Mnemonic: SET
Opcode: 0111
Usage: SET Flag/Register
The SET instruction allows the setting of particular flags or flash memory. There is also a corresponding CLR instruction. The WE and K2MX operands each set the specified flag for later processing. The IST and ISW operands each set the appropriate bit in Flash memory, while the MTR operand transfers the current value in the Accumulator into the MTR register. The SET Nx command loads N1-N4 with the following constants:
Constant | Initial X[N] | |||
Index | Loaded | referred to | ||
N1 | 2 | X[13] | ||
N2 | 7 | X[8] | ||
N3 | 13 | X[2] | ||
N4 | 15 | X[0] | ||
Note that each initial X[Nn] referred to matches the optimized SHA-1 algorithm initial states for indexes N1-N4. When each index value Nn decrements, the effective X[N] increments. This is because the X words are stored in memory with most significant word first.
ST—Store Accumulator
mnemonic: ST
Opcode: 1111
Usage: ST Location
The ST instruction is stores the current value of the Accumulator in the specified location. The location is one of A, B, C, D, E, T, AM, MT, AE[C1], H[C1], B160[C1], R[C1], K[C1], M[C1], or X[N4]. The X[N4] operand has the side effect of advancing the N4 index. After the store has taken place, N4 will be pointing to the next element in the X array. N4 decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array. If the destination is in Flash memory, the effect of the ST instruction is to set the bits in the Flash memory corresponding to the bits in the Accumulator. To ensure a store of the exact value from the Accumulator, be sure to use the CLR instruction to erase the appropriate memory location first.
TBR—Test and Branch
Mnemonic: TBR
Opcode: 0000
Usage: TBR Value Index
The Test and Branch instruction tests whether the Accumulator is zero or non-zero, and then branches to the given address if the Accumulator's current state matches that being tested for. If the Z flag matches the TRB test, replace the PC by 9 bit value where bit0=0 and upper 8 bits come from MU. Otherwise increment current PC by 1. The Value operand is either 0 or 1. A 0 indicates the test is for the Accumulator to be zero. A 1 indicates the test is for the Accumulator to be non-zero. The Index operand indicates where execution is to jump to should the test succeed. The remaining 3 bits of operand index into the lowest 8 entries of Jump Table 1. The upper 8 bits are taken from the table, and the lowest bit (bit 0) is cleared to 0. CMD is cleared to 0 upon a RESET. 0 is translated as
XOR—Exclusive OR
Mnemonic: XOR
Opcode: 1010
Usage: XOR Value
The XOR instruction performs a 32-bit bitwise XOR with the Accumulator, and stores the result in the Accumulator. The operand is one of A, B, C, D, E, T, AM, MT, X[N1], X[N2], X[N3], or X[N4]. The Z flag is also set during this operation, depending on the result (i.e. what value is loaded into the Accumulator). A bitwise NOT operation can be performed by XORing the Accumulator with 0xFFFFFFFF (via the LDK instruction). The X[N] operands have a side effect of advancing the appropriate index to the next value (after the operation). After the XOR has taken place, the index will be pointing to the next element in the X array. N4 is also advanced by the ST X[N4] instruction. The index decrements by 1, but since the X array is ordered from high to low, to decrement the index advances to the next element in the array.
ProgrammingMode Detection Unit
The ProgrammingMode Detection Unit monitors the input clock voltage. If the clock voltage is a particular value the Erase Tamper Detection Line is triggered to erase all keys, program code, secret information etc and enter Program Mode. The ProgrammingMode Detection Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. There is no particular need to cover the ProgrammingMode Detection Unit by the Tamper Detection Lines, since an attacker can always place the chip in ProgrammingMode via the CLK input. The use of the Erase Tamper Detection Line as the signal for entering Programming Mode means that if an attacker wants to use Programming Mode as part of an attack, the Erase Tamper Detection Lines must be active and functional. This makes an attack on the Authentication Chip far more difficult.
Noise Generator
The Noise Generator can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. However, the Noise Generator must be protected by both Tamper Detection and Prevention lines so that if an attacker attempts to tamper with the unit, the chip will either RESET or erase all secret information. In addition, the bits in the LFSR must be validated to ensure they have not been tampered with (i.e. a parity check). If the parity check fails, the Erase Tamper Detection Line is triggered. Finally, all 64 bits of the Noise Generator are ORed into a single bit. If this bit is 0, the Erase Tamper Detection Line is triggered. This is because 0 is an invalid state for an LFSR. There is no point in using an OK bit setup since the Noise Generator bits are only used by the Tamper Detection and Prevention circuitry.
State Machine
The State Machine is responsible for generating the two operating cycles of the CPU, stalling during long command operations, and storing the op-code and operand during operating cycles. The State Machine can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. However, the opcode/operand latch needs to be parity-checked. The logic and registers contained in the State Machine must be covered by both Tamper Detection Lines. This is to ensure that the instructions to be executed are not changed by an attacker.
The Authentication Chip does not require the high speeds and throughput of a general purpose CPU. It must operate fast enough to perform the authentication protocols, but not faster. Rather than have specialized circuitry for optimizing branch control or executing opcodes while fetching the next one (and all the complexity associated with that), the state machine adopts a simplistic view of the world. This helps to minimize design time as well as reducing the possibility of error in implementation.
The general operation of the state machine is to generate sets of cycles:
-
- Cycle 0: Fetch cycle. This is where the opcode is fetched from the program memory, and the effective address from the fetched opcode is generated.
- Cycle 1: Execute cycle. This is where the operand is (potentially) looked up via the generated effective address (from Cycle 0) and the operation itself is executed.
Under normal conditions, the state machine generates cycles: 0, 1, 0, 1, 0, 1, 0, 1 . . . . However, in some cases, the state machine stalls, generatingCycle 0 each clock tick until the stall condition finishes. Stall conditions include waiting for erase cycles of Flash memory, waiting for clients to read or write serial information, or an invalid opcode (due to tampering). If the Flash memory is currently being erased, the next instruction cannot execute until the Flash memory has finished being erased. This is determined by the Wait signal coming from the Memory Unit. If Wait=1, the State Machine must only generate Cycle 0s. There are also two cases for stalling due to serial I/O operations: - The opcode is ROR OuBit, and OuBitValid already=1. This means that the current operation requires outputting a bit to the client, but the client hasn't read the last bit yet.
- The operation is RORInBit, and InBitValid=0. This means that the current operation requires reading a bit from the client, but the client hasn't supplied the bit yet.
In both these cases, the state machine must stall until the stalling condition has finished. The next “cycle” therefore depends on the old or previous cycle, and the current values of CMD, Wait, OutBitValid, and InBitValid. Wait comes from the MU, and OutBitValid and InBitValid come from the I/O Unit. When Cycle is 0, the 8-bit op-code is fetched from the memory unit and placed in the 8-bit CMD register. The write enable for the CMD register is therefore ˜Cycle. There are two outputs from this unit: Cycle and CMD. Both of these values are passed into all the other processing units within the Authentication Chip. The 1-bit Cycle value lets each unit know whether a fetch or execute cycle is taking place, while the 8-bit CMD value allows each unit to take appropriate action for commands related to the specific unit.
FIG. 187 shows the data flow and relationship between components of the State Machine where:
Logic1: | Wait OR | ||
~(Old OR ((CMD=ROR) & ((CMD=InBit | |||
AND ~InBitValid) OR | |||
(CMD=OutBit AND OutBitValid)))) | |||
Old and CMD are both cleared to 0 upon a RESET. This results in the first cycle being 1, which causes the 0 CMD to be executed. 0 is translated as
I/O Unit
The I/O Unit is responsible for communicating serially with the outside world. The Authentication Chip acts as a slave serial device, accepting serial data from a client, processing the command, and sending the resultant data to the client serially. The I/O Unit can be implemented with regular CMOS, since the key does not pass through this unit. It does not have to be implemented with non-flashing CMOS. In addition, none of the latches need to be parity checked since there is no advantage for an attacker to destroy or modify them. The I/O Unit outputs 0s and inputs 0s if either of the Tamper Detection Lines is broken. This will only come into effect if an attacker has disabled the RESET and/or erase circuitry, since breaking either Tamper Detection Lines should result in a RESET or the erasure of all Flash memory
The InBit, InBitValid, OutBit, and
-
- Reads from InBit will hang while InBitValid is clear. InBitValid will remain clear until the client has written the next input bit to InBit. Reading InBit clears the InBitValid bit to allow the next InBit to be read from the client. A client cannot write a bit to the Authentication Chip unless the InBitValid bit is clear.
- Writes to OutBit will hang while OutBitValid is set. OutBitValid will remain set until the client has read the bit from OutBit. Writing OutBit sets the OutBitValid bit to allow the next OutBit to be read by the client. A client cannot read a bit from the Authentication Chip unless the OutBitValid bit is set.
The actual stalling of commands is taken care of by the State Machine, but the various communication registers and the communication circuitry is found in the I/O Unit.
FIG. 188 shows the data flow and relationship between components of the I/O Unit where:
Logic1: | Cycle AND (CMD = ROR OutBit) | ||
The Serial I/O unit contains the circuitry for communicating externally with the external world via the Data pin. The InBitUsed control signal must be set by whichever unit consumes the InBit during a given clock cycle (which can be any state of Cycle). The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit.
In the case of VAL1, the effective bit output from the chip will always be 0 if the chip has been tampered with. Thus no useful output can be generated by an attacker. In the case of VAL2, the effective bit input to the chip will always be 0 if the chip has been tampered with. Thus no useful input can be chosen by an attacker. There is no need to verify the registers in the I/O Unit since an attacker does not gain anything by destroying or modifying them.
ALU
Logic1: | Cycle AND CMD7 AND (CMD6–4 ≠ ST) | ||
Since the WriteEnables of Acc and Z takes CMD7 and Cycle into account (due to Logic1), these two bits are not required by the multiplexer MX1 in order to select the output. The output selection for MX1 only requires bits 6-3 of CMD and is therefore simpler as a result.
Output | CMD6−3 | ||
MX1 | ADD | ADD | ||
AND | LOG AND | |||
OR | LOG OR | |||
XOR | XOR | |||
RPL | RPL | |||
ROR | ROR | |||
From MU | LD or LDK | |||
The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL1, the effective bit output from the Accumulator will always be 0 if the chip has been tampered with. This prevents an attacker from processing anything involving the Accumulator. VAL1 also performs a parity check on the Accumulator, setting the Erase Tamper Detection Line if the check fails. In the case of VAL2, the effective Z status of the Accumulator will always be true if the chip has been tampered with. Thus no looping constructs can be created by an attacker. The remaining function blocks in the ALU are described as follows. All must be implemented in non-flashing CMOS.
Block | Description | ||
OR | Takes the 32-bit output from the multiplexor MX1, | ||
ORs all 32 bits together to get 1 bit. | |||
ADD | Outputs the result of the addition of its two | ||
inputs, modulo 232. | |||
AND | Outputs the 32-bit result of a parallel bitwise | ||
AND of its two 32-bit inputs. | |||
OR | Outputs the 32-bit result of a parallel bitwise | ||
OR of its two 32-bit inputs. | |||
XOR | Outputs the 32-bit result of a parallel bitwise | ||
XOR of its two 32-bit inputs. | |||
RPL | Examined in further detail below. | ||
ROR | Examined in further detail below. | ||
RPL
Operand | CMD3−0 | ||
Init | 0000 | ||
| 1110 | ||
| 1111 | ||
The MHI and MLO have the hi bit set to easily differentiate them from the Init bit pattern, and the lowest bit can be used to differentiate between MHI and MLO. The EE and DE flags must be updated each time the RPL command is issued. For the Init stage, we need to setup the two values with 0, and for MHI and MLO, we need to update the values of EE and DE appropriately. The WriteEnable for EE and DE is therefore:
Logic1: | Cycle AND (CMD7−4 = RPL) | ||
With the 32 bit AMT register, we want to load the register with the contents of AM (read from the MU) upon an RPL Init command, and to shift the AMT register right two bit positions for the RPL MLO and RPL MHI commands. This can be simply tested for with the highest bit of the RPL operand (CMDa). The WriteEnable and ShiftEnable for the AMT register is therefore:
Logic2 | Logic1 AND CMD3 | ||
Logic3 | Logic1 AND ~CMD3 | ||
The output from Logic3 is also useful as input to multiplexer MX1, since it can be used to gate through either the current 2 access mode bits or 00 (which results in a reset of the DE and EE registers since it represents the access mode RW). Consequently MX1 is:
Output | Logic3 | ||
MX1 | AMT output | 0 | ||
00 | 1 | |||
The RPL logic only replaces the upper 16 bits of the Accumulator. The lower 16 bits pass through untouched. However, of the 32 bits from the MU (corresponding to one of M[0-15]), only the upper or lower 16 bits are used. Thus MX2 tests CMD0 to distinguish between MHI and MLO.
Output | CMD0 | ||
MX2 | Lower 16 | 0 | ||
| 1 | |||
The logic for updating the DE and EE registers matches the pseudocode of the WR command. Note that an input of an AccessMode value of 00 (=RW which occurs during an RPL INIT) causes both DE and EE to be loaded with 0 (the correct initialization value). EE is loaded with the result from Logic4, and DE is loaded with the result from Logic5.
Logic4 | (((AccessMode = MSR) AND EQ) OR | ||
((AccessMode = NMSR) AND EE AND EQ)) | |||
Logic5 | (((AccessMode = MSR) AND LT) OR | ||
((AccessMode = NMSR) AND DE) OR | |||
((AccessMode = NMSR) AND EQ AND LT)) | |||
The upper 16 bits of the Accumulator must be replaced with the value that is to be written to M. Consequently Logic6 matches the WE flag from the WR command pseudocode.
Logic6 | ((AccessMode = RW) OR | ||
((AccessMode = MSR) AND LT) OR | |||
((AccessMode = NMSR) AND (DE OR LT))) | |||
The output from Logic6 is used directly to drive the selection between the original 16 bits from the Accumulator and the value from M[0-15] via multiplexer MX3. If the 16 bits from the Accumulator are selected (leaving the Accumulator unchanged), this signifies that the Accumulator value can be written to M[n]. If the 16-bit value from M is selected (changing the upper 16 bits of the Accumulator), this signifies that the 16-bit value in M will be unchanged. MX3 therefore takes the following form:
Output | Logic6 | ||
MX3 | 16 bits from | 0 | ||
16 bits from | 1 | |||
There is no point parity checking AMT as an attacker is better off forcing the input to MX3 to be 0 (thereby enabling an attacker to write any value to M). However, if an attacker is going to go to the trouble of laser-cutting the chip (including all Tamper Detection tests and circuitry), there are better targets than allowing the possibility of a limited chosen-text attack by fixing the input of MX3.
ROR
Operand | CMD3−0 | ||
InBit | 0000 | ||
| 0001 | ||
| 0010 | ||
XRB | 0011 | ||
| 0100 | ||
| 0101 | ||
| 0110 | ||
1 | 0111 | ||
2 | 1001 | ||
27 | 1010 | ||
31 | 1100 | ||
Logic1 is used to provide the WriteEnable signal to RTMP. The RTMP register should only be written to during ROR RB and ROR XRB commands. Logic2 is used to provide the control signal whenever the InBit is consumed. The two combinatorial logic blocks are:
Logic1: | Cycle AND (CMD7−4 = ROR) AND (CMD3−1 = 001) | ||
Logic2: | Cycle AND (CMD7−0 = ROR InBit) | ||
With multiplexer MX1, we are selecting the bit to be stored in RTMP. Logic1 already narrows down the CMD inputs to one of RB and XRB. We can therefore simply test CMD0 to differentiate between the two. The following table expresses the relationship between CMD0 and the value output from MX1.
Output | CMD0 | ||
MX1 | Acc0 | 0 | ||
| 1 | |||
With multiplexer MX2, we are selecting which input bit is going to replace
Output | CMD3−0 | Comment | ||
MX2 | Acc0 | 1xxx OR 111 | 1, 2, 27, 31 | ||
RTMP | 001x | RB, XRB | |||
InBit | 000x | InBit, OutBit | |||
MU0 | 010x | IST, | |||
MTRZ | |||||
110 | MTRZ | ||||
The final multiplexer, MX3, does the final rotating of the 32-bit value. Again, the bit patterns of the CMD operand are taken advantage of:
Output | CMD3−0 | Comment | ||
MX3 | ROR 1 | 0xxx | All except 2, 27, and 31 | ||
| | 2 | |||
| | 27 | |||
| | 31 | |||
MinTicks Unit
The MinTicks Unit contains a 32-bit register named MTR (MinTicksRemaining). The MTR register contains the number of clock ticks remaining before the next key-based function can be called. Each cycle, the value in MTR is decremented by 1 until the value is 0. Once MTR hits 0, it does not decrement any further. An additional one-bit register named MTRZ (MinTicksRegisterZero) reflects the current zero-ness of the MTR register. MTRZ is 1 if the MTRZ register is 0, and MTRZ is 0 if the MTRZ register is not 0. The MTR register is cleared by a RESET, and set to a new count via the SET MTR command, which transfers the current value in the Accumulator into the MTR register. Where:
Logic1 | CMD = SET MTR | ||||
And:
Output | Logic1 | MTRZ | ||
MX1 | Acc | 1 | — | ||
MTR-1 | 0 | 0 | |||
0 | 0 | 1 | |||
Since Cycle is connected to the WriteEnables of MTR and MTRZ, these registers only update during the Execute cycle, i.e. when Cycle=1. The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. In the case of VAL1, the effective output from MTR is 0, which means that the output from the decrementor unit is all is, thereby causing MTRZ to remain 0, thereby preventing an attacker from using the key-based functions. VAL1 also validates the parity of the MTR register. If the parity check fails, the Erase Tamper Detection Line is triggered. In the case of VAL2, if the chip has been tampered with, the effective output from MTRZ will be 0, indicating that the MinTicksRemaining register has not yet reached 0, thereby preventing an attacker from using the key-based functions.
Program Counter Unit
Command | Action |
JSR, | Save old value of PC onto stack for later. |
JSI (ACC) | New PC is 9 bit value where bit0 = 0 (subroutines |
must therefore start at an even address), and upper 8 | |
bits of address come from MU (MU 8-bit value is Jump | |
Table 1 for JSR, and Jump Table 2 for JSI) | |
JSI RTS | Pop old value of PC from stack and increment by 1 |
to get new PC. | |
TBR | If the Z flag matches the TRB test, replace PC by 9 |
bit value where bit0 = 0 and upper 8 bits come | |
from MU. Otherwise increment current PC by 1. | |
DBR C1, | |
DBR C2 | bit = 1) to current PC only if the C1Z or C2Z is |
set (C1Z for DBR C1, C2Z for DBR C2). Otherwise | |
increment current PC by 1. | |
All others | Increment current PC by 1. |
Since the same action takes place for JSR, and JSI (ACC), we specifically detect that case in Logic1. By the same concept, we can specifically test for the JSI RTS case in Logic2.
Logic1 | (CMD7−5 = 001) OR (CMD7−3 = 01001) | ||
Logic2 | CMD7−3 = 01000 | ||
When updating the PC, we must decide if the PC is to be replaced by a completely new item, or by the result of the adder. This is the case for JSR and JSI (ACC), as well as TBR as long as the test bit matches the state of the Accumulator. All but TBR is tested for by Logic1, so Logic3 also includes the output of Logic1 as its input. The output from Logic, is then used by multiplexers MX2 to obtain the new PC value.
Logic3 | Logic1 OR | ||
((CMD7−4 = TBR) AND (CMD3 XOR Z)) | |||
Output | Logic3 | ||
MX2 | Output from | 0 | ||
| 1 | |||
The input to the 9-bit adder depends on whether we are incrementing by 1 (the usual case), or adding the offset as read from the MU (the DBR command). Logic4 generates the test. The output from Logic4 is then directly used by multiplexer MX3 accordingly.
Logic4 | ((CMD7−3 = DBR C1) AND C1Z) OR | ||
(CMD7−3 = DBR C2) AND C2Z)) | |||
Output | Logic4 | ||
MX3 | Output from | 0 | ||
| 1 | |||
Finally, the selection of which PC entry to use depends on the current value for SP. As we enter a subroutine, the SP index value must increment, and as we return from a subroutine, the SP index value must decrement. In all other cases, and when we want to fetch a command (Cycle 0), the current value for the SP must be used. Logic1 tells us when a subroutine is being entered, and Logic2 tells us when the subroutine is being returned from. The multiplexer selection is therefore defined as follows:
Output | Cycle/Logic1/Logic2 | ||
MX1 | SP − 1 | 1x1 | ||
SP + 1 | 11x | |||
SP | 0xx OR 00 | |||
The two VAL units are validation units connected to the Tamper Prevention and Detection circuitry), each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. Both VAL units also parity-check the data bits to ensure that they are valid. If the parity-check fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the SP register will always be 0. If the chip has been tampered with. This prevents an attacker from executing any subroutines. In the case of VAL2, the effective PC output will always be 0 if the chip has been tampered with. This prevents an attacker from executing any program code.
Memory Unit
The Memory Unit (MU) contains the internal memory of the Authentication Chip. The internal memory is addressed by 9 bits of address, which is passed in from the Address Generator Unit. The Memory Unit outputs the appropriate 32-bit and 8-bit values according to the address. The Memory Unit is also responsible for the special Programming Mode, which allows input of the program Flash memory. The contents of the entire Memory Unit must be protected from tampering. Therefore the logic and registers contained in the Memory Unit must be covered by both Tamper Detection Lines. This is to ensure that program code, keys, and intermediate data values cannot be changed by an attacker. All Flash memory needs to be multi-state, and must be checked upon being read for invalid voltages. The 32-bit RAM also needs to be parity-checked. The 32-bit data paths through the Memory Unit must be implemented with non-flashing CMOS since the key passes along them. The 8-bit data paths can be implemented in regular CMOS since the key does not pass along them.
Constants
The Constants memory region has address range: 000000000-000001111. It is therefore the range 00000xxxx. However, given that the next 48 addresses are reserved, this can be taken advantage of during decoding. The Constants memory region can therefore be selected by the upper 3 bits of the address (Adr8-6=000), with the lower 4 bits fed into combinatorial logic, with the 4 bits mapping to 32-bit output values as follows:
Adr3−0 | Output Value | ||
0000 | 0x00000000 | ||
0001 | 0x36363636 | ||
0010 | 0x5C5C5C5C | ||
0011 | | ||
0100 | | ||
0101 | | ||
0110 | | ||
0111 | | ||
1000 | 0x67452301 | ||
1001 | | ||
1010 | | ||
1011 | 0x10325476 | ||
11xx | 0xC3D2E1F0 | ||
RAM
The address space for the 32 entry 32-bit RAM is 001000000-001011111. It is therefore the range 0010xxxxx. The RAM memory region can therefore be selected by the upper 4 bits of the address (Adr8-5=0010), with the lower 5 bits selecting which of the 32 values to address. Given the contiguous 32-entry address space, the RAM can easily be implemented as a simple 32×32-bit RAM. Although the CPU treats each address from the range 00000-11111 in special ways, the RAM address decoder itself treats no address specially. All RAM values are cleared to 0 upon a RESET, although any program code should not take this for granted.
Flash Memory—Variables
The address space for the 32-bit wide Flash memory is 001100000-001111111. It is therefore the range 0011xxxxx. The Flash memory region can therefore be selected by the upper 4 bits of the address (Adr8-5=0111), with the lower 5 bits selecting which value to address. The Flash memory has special requirements for erasure. It takes quite some time for the erasure of Flash memory to complete. The Wait signal is therefore set inside the Flash controller upon receipt of a CLR command, and is only cleared once the requested memory has been erased. Internally, the erase lines of particular memory ranges are tied together, so that only 2 bits are required as indicated by the following table:
Adr4−3 | Erases range | ||
00 | | ||
01 | MT, AM, K10-4, | ||
10 | Individual M address (Adr) | ||
11 | IST, ISW | ||
Flash values are unchanged by a RESET, although program code should not take the initial values for Flash (after manufacture) other than garbage. Operations that make use of Flash addresses are LD, ST, ADD, RPL, ROR, CLR, and SET. In all cases, the operands and the memory placement are closely linked, in order to minimize the address generation and decoding. The entire variable section of Flash memory is also erased upon entering Programming Mode, and upon detection of a definite physical Attack.
Flash Memory—Program
The address range for the 384 entry 8-bit wide program Flash memory is 010000000-111111111. It is therefore the range 01xxxxxxx-11xxxxxxx. Decoding is straightforward given the ROM start address and address range. Although the CPU treats parts of the address range in special ways, the address decoder itself treats no address specially. Flash values are unchanged by a RESET, and are cleared only by entering Programming Mode. After manufacture, the Flash contents must be considered to be garbage. The 384 bytes can only be loaded by the State machine when in Programming Mode.
Block Diagram of MU
Output | Adr6−5 | ||
MX2 | Output from 32-bit Truth Table | 00 | ||
Output from 32- | 10 | |||
Output from 32- | 11 | |||
The logic for erasing a particular part of the 32-bit Flash memory is satisfied by Logic1. The Erase Part control signal should only be set during a CLR command to the correct part of memory while Cycle=1. Note that a single CLR command may clear a range of Flash memory. Adr6 is sufficient as an address range for CLR since the range will always be within Flash for valid operands, and 0 for non-valid operands. The entire range of 32-bit wide Flash memory is erased when the Erase Detection Lines is triggered (either by an attacker, or by deliberately entering Programming Mode).
Logic1 | Cycle AND (CMD7−4 = CLR) AND Adr6 | ||
The logic for writing to a particular part of Flash memory is satisfied by Logic2. The WriteEnable control signal should only be set during an appropriate ST command to a Flash memory range while Cycle=1. Testing only Adr6-5 is acceptable since the ST command only validly writes to Flash or RAM (if Adr6-5 is 00, K2MX must be 0).
Logic2 | Cycle AND (CMD7−4 = ST) AND (Adr6−5 = 10) | ||
The WE (WriteEnable) flag is set during execution of the SET WE and CLR WE commands. Logic3 tests for these two cases. The actual bit written to WE is CMD4.
Logic3 | Cycle AND (CMD7−5 = 011) AND (CMD3−0 = 0000) | ||
The logic for writing to the RAM region of memory is satisfied by Logic4. The WriteEnable control signal should only be set during an appropriate ST command to a RAM memory range while Cycle=1. However this is tempered by the WE flag, which governs whether writes to X[N] are permitted. The X[N] range is the upper half of the RAM, so this can be tested for using Adr4. Testing only Adr6-5 as the full address range of RAM is acceptable since the ST command only writes to Flash or RAM.
Logic4 | Cycle AND (CMD7−4 = ST) AND (Adr6−5 = 11) AND | ||
((Adr4AND WE) OR (~Adr4)) | |||
The three VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. The VAL units also check the data bits to ensure that they are valid. VAL1 and VAL2 validate by checking the state of each data bit, and VAL3 performs a parity check. If any validity test fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the program Flash will always be 0 (interpreted as TBR 0) if the chip has been tampered with. This prevents an attacker from executing any useful instructions. In the case of VAL2, the effective 32-bit output will always be 0 if the chip has been tampered with. Thus no key or intermediate storage value is available to an attacker. The 8-bit Flash memory is used to hold the program code, jump tables and other program information. The 384 bytes of Program Flash memory are selected by the full 9 bits of address (using address range 01xxxxxxx-11xxxxxxx). The Program Flash memory is erased only when the Erase Detection Lines is triggered (either by an attacker, or by entering Programming Mode due to the Programming Mode Detection Unit). When the Erase Detection Line is triggered, a small state machine in the Program Flash Memory Unit erases the 8-bit Flash memory, validates the erasure, and loads in the new contents (384 bytes) from the serial input. The following pseudocode illustrates the state machine logic that is executed when the Erase Detection line is triggered:
Set WAIT output bit to prevent the remainder of the chip from functioning |
Fix 8-bit output to be 0 |
Erase all 8-bit Flash memory |
Temp ← 0 |
ForAdr = 0 to 383 |
Temp ← Temp OR FlashAdr |
IF (Temp ≠ 0) |
Hang |
ForAdr = 0 to 383 |
|
Wait for InBitValid to be set | |
ShiftRight[Temp, InBit] |
Set InBitUsed control signal | |
FlashAdr ← Temp |
Hang |
During the Programming Mode state machine execution, 0 must be placed onto the 8-bit output. A 0 command causes the remainder of the Authentication chip to interpret the command as a
Address Generator Unit
The Address Generator Unit generates effective addresses for accessing the Memory Unit (MU). In
Background to Address-Generation
The logic for address generation requires an examination of the various opcodes and operand combinations. The relationship between opcode/operand and address is examined in this section, and is used as the basis for the Address Generator Unit.
Constants
The lower 4 entries are the simple constants for general-purpose use as well as the HMAC algorithm. The lower 4 bits of the LDK operand directly correspond to the lower 3 bits of the address in memory for these 4 values, i.e. 0000, 0001, 0010, and 0011 respectively. The y constants and the h constants are also addressed by the LDK command. However the address is generated by ORing the lower 3 bits of the operand with the inverse of the C1 counter value, and keeping the 4th bit of the operand intact. Thus for LDK y, the y operand is 0100, and with LDK h, the h operand is 1000. Since the inverted C1 value takes on the range 000-011 for y, and 000-100 for h, the ORed result gives the exact address. For all constants, the upper 5 bits of the final address are always 00000.
RAM
Variables A-T have addresses directly related to the lower 3 bits of their operand values. That is, for operand values 0000-0101 of the LD, ST, ADD, LOG, and XOR commands, as well as operand vales 1000-1101 of the LOG command, the lower 3 operand address bits can be used together with a constant high 6-bit address of 001000 to generate the final address. The remaining register values can only be accessed via an indexed mechanism. Variables A-E, B160, and H are only accessible as indexed by the C1 counter value, while X is indexed by N1, N2, N3, and N4. With the LD, ST and ADD commands, the address for AE as indexed by C1 can be generated by taking the lower 3 bits of the operand (000) and ORing them with the C1 counter value. However, H and B160 addresses cannot be generated in this way, (otherwise the RAM address space would be non-contiguous). Therefore simple combinatorial logic must convert AE into 0000, H into 0110, and B160 into 1011. The final address can be obtained by adding C1 to the 4-bit value (yielding a 4-bit result), and prepending the constant high 5-bit address of 00100. Finally, the X range of registers is only accessed as indexed by N1, N2, N3; and N4. With the XOR command, any of N1-4 can be used to index, while with LD, ST, and ADD, only N4 can be used. Since the operand of X in LD, ST, and ADD is the same as the XN4 operand, the lower 2 bits of the operand selects which N to use. The address can thus be generated as a constant high 5-bit value of 00101, with the lower 4 bits coming from by the selected N counter.
Flash Memory—Variables
The addresses for variables MT and AM can be generated from the operands of associated commands. The 4 bits of operand can be used directly (0110 and 0111), and prepending the constant high 5-bit address of 00110. Variables R1-5, K1 1-5, K2 1-5, and M0-7 are only accessible as indexed by the inverse of the C1 counter value (and additionally in the case of R, by the actual C1 value). Simple combinatorial logic must convert R and RF into 00000, K into 01000 or 11000 depending on whether K1 or K2 is being addressed, and M (including MHI and MLO) into 10000. The final address can be obtained by ORing (or adding) C1 (or in the case of RF, using C1 directly) with the 5-bit value, and prepending the constant high 4-bit address of 0011. Variables IST and ISW are each only 1 bit of value, but can be implemented by any number of bits. Data is read and written as either 0x00000000 or 0xFFFFFFFF. They are addressed only by ROR, CLR and SET commands. In the case of ROR, the low bit of the operand is combined with a constant upper 8-bits value of 00111111, yielding 001111110 and 001111111 for IST and ISW respectively. This is because none of the other ROR operands make use of memory, so in cases other than IST and ISW, the value returned can be ignored. With SET and CLR, IST and ISW are addressed by combining a constant upper 4-bits of 0011 with a mapping from IST (0100) to 11110 and from ISW (0101) to 11111. Since IST and ISW share the same operand values with E and T from RAM, the same decoding logic can be used for the lower 5 bits. The final address requires
Flash Memory—Program
The address to lookup in program Flash memory comes directly from the 9-bit PC (in Cycle 0) or the 9-bit Adr register (in Cycle 1). Commands such as TBR, DBR, JSR and JSI modify the PC according to data stored in tables at specific addresses in the program memory. As a result, address generation makes use of some constant address components, with the command operand (or the Accumulator) forming the lower bits of the effective address:
Constant (upper) | |||
part of | Variable (lower) part of | ||
Command | Address Range | address | address |
TBR | 010000xxx | 010000 | CMD2–0 | |
JSR | 0100xxxxx | 0100 | CMD4–0 | |
| 0101xxxxx | 0101 | Acc4–0 | |
DBR | 011000xxx | 011000 | CMD2–0 | |
Block Diagram of Address Generator Unit
Output | Cycle | |||
MX1 | PC | 0 | ||
| 1 | |||
It is important to distinguish between the CMD data and the 8-bit data from the MU:
-
- In
Cycle 0, the 8-bit data line holds the next instruction to be executed in the followingCycle 1. This 8-bit command value is used to decode the effective address. By contrast, the CMD 8-bit data holds the previous instruction, so should be ignored. - In
Cycle 1, the CMD line holds the currently executing instruction (which was in the 8-bit data line during Cycle 0), while the 8-bit data line holds the data at the effective address from the instruction. The CMD data must be executed duringCycle 1.
Consequently, the choice of 9-bit data from the MU or the CMD value is made by multiplexer MX3, as shown in the following table:
- In
Output | Cycle | |||
MX3 | 8-bit data from | 0 | ||
| 1 | |||
Since the 9-bit Adr register is updated every
Block | Commands for which address is generated | ||
JSIGEN | JSI ACC | ||
JSRGEN | JSR, TBR | ||
DBRGEN | DBR | ||
LDKGEN | LDK | ||
RPLGEN | RPL | ||
VARGEN | LD, ST, ADD, LOG, XOR | ||
BITGEN | ROR, SET | ||
CLRGEN | CLR | ||
Multiplexor MX2 has the following selection criteria:
Output | 8-bit data value from MU | |||
MX2 | 9-bit value from JSIGEN | 01001xxx | ||
9-bit value from JSRGEN | 001xxxxx OR 0000xxxx | |||
9-bit value from DBRGEN | 0001xxxx | |||
9-bit value from | 1110xxxx | |||
9 bit value from RPLGEN | 1101xxxx | |||
9-bit value from VARGEN | 10xxxxxx OR 1x11xxxx | |||
9-bit value from BITGEN | 0111xxxx OR | |||
9 bit value from CLRGEN | 0110xxxx | |||
The VAL1 unit is a validation unit connected to the Tamper Prevention and Detection circuitry. It contains an OK bit that is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with the 9 bits of Effective Address before they can be used. If the chip has been tampered with, the address output will be always 0, thereby preventing an attacker from accessing other parts of memory. The VAL1 unit also performs a parity check on the EffectiveAddress bits to ensure it has not been tampered with. If the parity-check fails, the Erase Tamper Detection Line is triggered.
JSIGEN
Output | CMD7–0 | |||
MX1 | Accumulator4–0 | JSI ACC | ||
00000 | ~(JSI ACC) | |||
JSRGEN
-
- the 4-bit high part of the address for the JSR table (0100),
- the offset within the table from the operand (5 bits for JSR commands, and 3 bits plus a constant 0 bit for TBR).
where Logic1 producesbit 3 of the effective address. This bit should bebit 3 in the case of JSR, and 0 in the case of TBR:
Logic1 | bit5 AND bit3 | ||
Since the JSR instruction has a 1 in
DBRGEN
-
- the 6-bit high part of the address for the DBR table (011000), and
- the lower 3 bits of the operand
LDKGEN
FIG. 198 shows a schematic block diagram for the LDKGEN Unit. The LDKGEN Unit generates addresses for the LDK instructions. The effective address comes from the concatenation of: - the 5-bit high part of the address for the LDK table (00000),
- the high bit of the operand, and
- the lower 3 bits of the operand (in the case of the lower constants), or the lower 3 bits of the operand ORed with C1 (in the case of indexed constants).
The OR2 block simply ORs the 3 bits of C1 with the 3 lowest bits from the 8-bit data output from the MU. The multiplexer MX, simply chooses between the actual data bits and the data bits ORed with C1, based upon whether the upper bits of the operand are set or not. The selector input to the multiplexer is a simple OR gate, ORing bit2 with bit3. Multiplexor MX1 has the following selection criteria:
Output | bit3 OR bit2 | |||
MX1 | bit2–0 | 0 | ||
Output from OR | 1 | |||
RPLGEN
-
- the 6-bit high part of the address for M (001110), and
- the 3 bits of the current value for C1
The multiplexer MX1 chooses between the two addresses, depending on the current value of K2MX. Multiplexor MX1 therefore has the following selection criteria:
| K2MX | |||
MX | ||||
1 | 000000000 | 0 | ||
001110| | 1 | |||
VARGEN
Logic1 | Cycle AND bit7–0 = 011x0001 | ||
The bit written to the K2MX variable is 1 during a SET instruction, and 0 during a CLR instruction. It is convenient to use the low order bit of the opcode (bit4) as the source for the input bit. During address generation, a Truth Table implemented as combinatorial logic determines part of the base address as follows:
bit7−4 | bit3−0 | Description | Output Value |
LOG | x | A, B, C, D, E, T, MT, | 00000 |
≠ LOG | 0xxx OR 1x00 | A, B, C, D, E, T, MT, AM, | 00000 |
AE[C1], R[C1] | |||
≠ | 1001 | | 01011 |
≠ LOG | 1010 | | 00110 |
≠ LOG | 111x | X, M | 10000 |
≠ LOG | 1101 | K | K2MX | 1000 |
Although the Truth Table produces 5 bits of output, the lower 4 bits are passed to the 4-bit Adder, where they are added to the index value (C1, N or the lower 3 bits of the operand itself). The highest bit passes the adder, and is prepended to the 4-bit result from the adder result in order to produce a 5-bit result. The second input to the adder comes from multiplexer MX1, which chooses the index value from C1, N, and the lower 3 bits of the operand itself). Although C1 is only 3 bits, the fourth bit is a constant 0. Multiplexor MX1 has the following selection criteria:
Output | bit7−0 | ||
MX1 | Data2−0 | (bit3 = 0) OR (bit7−4 = LOG) | ||
C1 | (bit3 = 1) AND (bit2−0 ≠ 111) AND | |||
((bit7−4 = 1x11) OR (bit7−4 = ADD)) | ||||
N | ((bit3 = 1) AND (bit7−4 = XOR)) OR | |||
(((bit7−4 = 1x11) OR (bit7−4 = ADD)) AND | ||||
(bit3−0 = 1111)) | ||||
The 6th bit (bit5) of the effective address is 0 for RAM addresses, and 1 for Flash memory addresses. The Flash memory addresses are MT, AM, R, K, and M. The computation for bit5 is provided by Logic2:
Logic2 | ((bit3−0 = 110) OR (bit3−0 = 011x) OR (bit3−0= 110x)) AND |
((bit7−4 = 1x11) OR (bit7−4 = ADD)) | |
A constant 1 bit is prepended, making a total of 7 bits of effective address. These bits will form the effective address unless K2MX is 0 and the instruction is LD, ADD or ST M[C1]. In the latter case, the effective address is the constant address of 0000000. In both cases, two 0 bits are prepended to form the final 9-bit address. The computation is shown here, provided by Logic3 and multiplexer MX2.
Logic3 | ~K2MX AND (bit3−0 = 1110) AND | ||
((bit7−4 = 1x11) OR (bit7−4 = ADD)) | |||
Output | Logic3 | ||
MX2 | | 0 | ||
0000000 | 1 | |||
CLRGEN
Input Value (bit3−0) | | ||
1100 | 00 1100 000 | ||
1101 | 00 1101 000 | ||
1110 | 00 1110 | | ||
1111 | 00 1111 110 | ||
~(11xx) | 000000000 | ||
It is a simple matter to reduce the logic required for the Truth Table since in all 4 main cases, the first 6 bits of the effective address are 00 followed by the operand (bits3-0).
BITGEN
Input Value (bit3−0) | Output Value | ||
010x | 00111111 | bit0 | ||
~(010x) | 000000000 | ||
Counter Unit
FIG. Y37 shows a schematic block diagram for the Counter Unit. The Counter Unit generates counters C1, C2 (used internally) and the selected N index. In addition, the Counter Unit outputs flags C1Z and C2Z for use externally. Registers C1 and C2 are updated when they are the targets of a DBR or SC instruction. The high bit of the operand (bit3 of the effective command) gives the selection between C1 and C2. Logic1 and Logic2 determine the WriteEnables for C1 and C2 respectively.
Logic1 | Cycle AND (bit7−3 = 0x010) | ||
Logic2 | Cycle AND (bit7−3 = 0x011) | ||
The single bit flags C1Z and C2Z are produced by the NOR of their multibit C1 and C2 counterparts. Thus C1Z is 1 if C1=0, and C2Z is 1 if C2=0. During a DBR instruction, the value of either C1 or C2 is decremented by 1 (with wrap). The input to the Decrementor unit is selected by multiplexer MX2 as follows:
Output | bit3 | ||
MX2 | C1 | 0 | ||
| 1 | |||
The actual value written to C1 or C2 depends on whether the DBR or SC instruction is being executed. Multiplexor Mt selects between the output from the Decrementor (for a DBR instruction), and the output from the Truth Table (for a SC instruction). Note that only the lowest 3 bits of the 5-bit output are written to C1. Multiplexor MX1 therefore has the following selection criteria:
Output | bit6 | ||
MX1 | Output from | 0 | ||
Table | ||||
Output from | 1 | |||
Decrementor | ||||
The Truth Table holds the values to be loaded by C1 and C2 via the SC instruction. The Truth Table is simple combinatorial logic that implements the following relationship:
Input Value | Output | ||
(bit2−0) | Value | ||
000 | 00010 | ||
001 | 00011 | ||
010 | 00100 | ||
011 | 00111 | ||
100 | 01010 | ||
101 | 01111 | ||
110 | 10011 | ||
111 | 11111 | ||
Registers N1, N2, N3, and N4 are updated by their next value—1 (with wrap) when they are referred to by the XOR instruction. Register N4 is also updated when a ST X[N4] instruction is executed. LD and ADD instructions do not update N4. In addition, all 4 registers are updated during a SET Nx command. Logic4-7 generate the WriteEnables for registers N1-N4. All use Logic3, which produces a 1 if the command is SET Nx, or 0 otherwise.
Logic3 | bit7−0 = 01110010 | ||
Logic4 | Cycle AND ((bit7−0 = 10101000) OR Logic3) | ||
Logic5 | Cycle AND ((bit7−0 = 10101001) OR Logic3) | ||
Logic6 | Cycle AND ((bit7−0 = 10101010) OR Logic3) | ||
Logic7 | Cycle AND ((bit7−0 = 11111011) OR | ||
(bit7−0 = 10101011) OR Logic3) | |||
The actual N index value passed out, or used as the input to the Decrementor, is simply selected by multiplexer MX4 using the lower 2 bits of the operand:
Output | bit1−0 | ||
MX4 | N1 | 00 | ||
| 01 | |||
| 10 | |||
| 11 | |||
The Incrementor takes 4 bits of input value (selected by multiplexer MX4) and adds 1, producing a 4-bit result (due to addition modulo 24). Finally, four instances of multiplexer MX3 select between a constant value (different for each N, and to be loaded during the SET Nx command), and the result of the Decrementor (during XOR or ST instructions). The value will only be written if the appropriate WriteEnable flag is set (see Logic4-Logic7) so Logic3 can safely be used for the multiplexer.
Output | Logic3 | ||
MX3 | Output from | 0 | ||
Decrementor | ||||
| 1 | |||
The SET Nx command loads N1-N4 with the following constants:
Constant | Initial X[N] | |||
Index | Loaded | referred to | ||
N1 | 2 | X[13] | ||
N2 | 7 | X[8] | ||
N3 | 13 | X[2] | ||
N4 | 15 | X[0] | ||
Note that each initial x[Nn] referred to matches the optimized SHA-1 algorithm initial states for indexes N1-N4. When each index value Nn decrements, the effective X[N] increments. This is because the X words are stored in memory with most significant word first. The three VAL units are validation units connected to the Tamper Prevention and Detection circuitry, each with an OK bit. The OK bit is set to 1 on RESET, and ORed with the ChipOK values from both Tamper Detection Lines each cycle. The OK bit is ANDed with each data bit that passes through the unit. All VAL units also parity check the data to ensure the counters have not been tampered with. If a parity check fails, the Erase Tamper Detection Line is triggered. In the case of VAL1, the effective output from the counter C1 will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs that index through the keys. In the case of VAL2, the effective output from the counter C2 will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs. In the case of VAL3, the effective output from any N counter (N1-N4) will always be 0 if the chip has been tampered with. This prevents an attacker from executing any looping constructs that index through X.
Table of Ink Channel Dimensions and Pressure Drops |
Max. ink | ||||||||
# of | Nozzles | flow at | Pressure | |||||
Items | Length | Width | Depth | supplied | 5 KHz(U) | drop Δρ | ||
Central Moulding | 1 | 106 | mm | 6.4 | mm | 1.4 | mm | 18,750 | 0.23 | ml/s | NA |
Cyan main channel | 1 | 100 | mm | 1 | mm | 1 | mm | 6,250 | 0.16 | μl/μs | 111 Pa |
(830) | |||||||||||
Magenta main | 2 | 100 | mm | 700 | μm | 700 | μm | 3,125 | 0.16 | μl/μs | 231 Pa |
channel (826) | |||||||||||
Yellow main | 1 | 100 | mm | 1 | mm | 1 | mm | 6,250 | 0.16 | μl/μs | 111 Pa |
channel (831) | |||||||||||
Cyan sub-channel | 250 | 1.5 | mm | 200 | μm | 100 | μm | 25 | 0.16 | μl/μs | 41.7 Pa |
(833) | |||||||||||
Magenta sub- | 500 | 200 | μm | 50 | μm | 100 | μm | 12.5 | 0.031 | μl/μs | 44.5 Pa |
channel (834)(a) | |||||||||||
Magenta sub- | 500 | 400 | μm | 100 | μm | 200 | μm | 12.5 | 0.031 | μl/μs | 5.6 Pa |
channel (838)(b) | |||||||||||
Yellow sub- | 250 | 1.5 | mm | 200 | μm | 100 | μm | 25 | 0.016 | μl/μs | 41.7 Pa |
channel (834) | |||||||||||
Cyan pit (842) | 250 | 200 | μm | 100 | μm | 300 | μm | 25 | 0.010 | μl/μs | 3.2 Pa |
Magenta through | 500 | 200 | μm | 50 | μm | 200 | μm | 12.5 | 0.016 | μl/μs | 18.0 Pa |
(840) | |||||||||||
Yellow pit (846) | 250 | 200 | μm | 100 | μm | 300 | μm | 25 | 0.010 | μl/μs | 3.2 Pa |
Cyan via (843) | 500 | 100 | μm | 50 | μm | 100 | μm | 12.5 | 0.031 | μl/μs | 22.3 Pa |
Magenta via (842) | 500 | 100 | μm | 50 | μm | 100 | μm | 12.5 | 0.031 | μl/μs | 22.3 Pa |
Yellow via | 500 | 100 | μm | 50 | μm | 100 | μm | 12.5 | 0.031 | μl/μs | 22.3 Pa |
Magenta through | 500 | 200 | μm | 500 | μm | 100 | μm | 12.5 | 0.003 | μl/μs | 0.87 Pa |
hole (837) |
Chip slot | 1 | 100 | mm | 730 | μm | 625 | 18,750 | NA | NA |
Print head | 1500 | 600μ | 100 | μm | 50 | μm | 12.5 | 0.052 | μl/μs | 133 Pa |
through holes | ||||||||||
(881)(in the chip | ||||||||||
substrate) |
Print head | 1,000/ | 50 | μm | 60 | μm | 20 | μm | 3.125 | 0.049 | μl/μs | 62.8 Pa |
channel segments | color | ||||||||||
(on chip front) | |||||||||||
Filter Slits (on | 8 per | 2 | μm | 2 | μm | 20 | μm | 0.125 | 0.039 | μl/μs | 251 Pa |
entrance to | nozzle | ||||||||||
nozzle chamber | |||||||||||
(882) | |||||||||||
Nozzle chamber (on | 1 per | 70 | μm | 30 | μm | 20 | μm | 1 | 0.021 | μl/μs | 75.4 Pa |
chip front)(883) | nozzle | ||||||||||
-
-
FIG. 213 illustrates a top side perspective view of the internal portions of an Artcam camera, showing the parts flattened out; -
FIG. 214 illustrates a bottom side perspective view of the internal portions of an Artcam camera, showing the parts flattened out;FIG. 215 illustrates a first - top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
FIG. 216 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam; -
FIG. 217 illustrates a second top side perspective view of the internal portions of an Artcam camera, showing the parts as encased in an Artcam;
Postcard Print Rolls
-
User | |||
interface | |||
event | Action | ||
Lock Focus | Perform any automatic pre-capture setup via the | ||
Camera Manager. This includes auto-focussing, | |||
auto-adjusting exposure, and charging the flash. | |||
This is normally initiated by the user pressing | |||
the Take button halfway. | |||
Take | Capture an image via the Camera Manager. | ||
Self-Timer | Capture an image in self-timed mode via the | ||
Camera Manager. | |||
Flash Mode | Update the Camera Manager to use the next flash | ||
mode. Update the Status Display to show the new | |||
flash mode. | |||
Print the current image via the Printer Manager. | |||
Apply an artistic effect to the image via the | |||
Image Processing Manager if there is a current | |||
script. Update the remaining prints count on the | |||
Status Display (see Print Roll Inserted below). | |||
Hold | Apply an artistic effect to the current image | ||
via the Image Processing Manager if there is a | |||
current script, but don't print the image. | |||
Eject | Eject the currently inserted ArtCards via the | ||
ArtCards | File Manager. | ||
Print Roll | Calculate the number of prints remaining based | ||
Inserted | on the Print Manager's remaining media length | ||
and the Camera Manager's aspect ratio. Update | |||
the remaining prints count on the Status | |||
display. | |||
Print Roll | Update the Status Display to indicate there is | ||
Removed | no print roll present. | ||
output parameters | domains | ||
focus range | real, real | ||
zoom range | real, real | ||
aperture range | real, real | ||
shutter speed range | real, real | ||
input parameters | domains | ||
focus | real | ||
zoom | real | ||
aperture | real | ||
shutter speed | real | ||
aspect ratio | classic, HDTV, panoramic | ||
focus control mode | multi-point auto, single-point auto, | ||
manual | |||
exposure control mode | auto, aperture priority, shutter priority, | ||
manual | |||
flash mode | auto, auto with red-eye removal, fill, off | ||
view scene mode | on, off | ||
commands | return value domains | ||
Lock Focus | none | ||
Self-Timed Capture | Raw Image | ||
Capture Image | Raw Image | ||
output parameters | domains | ||
media is present | bool | |||
media has fixed page | bool | |||
size | ||||
media width | real | |||
remaining media length | real | |||
fixed page size | real, real | |||
input parameters | domains | |||
page size | real, real | |||
commands | return value | |||
domains | ||||
Print Image | none | |||
output events | ||||
invalid media | ||||
media exhausted | ||||
media inserted | ||||
media removed | ||||
Further, many times a PC is used as the basis for a closed system, yet a number of configuration options may exist. Rather than rely on a complex operating system interface for users, the simple insertion of a ArtCards into the ArtCards reader can provide all the configuration requirements. While the back side of a ArtCards has the same visual appearance regardless of the application (since it stores the data), the front of a ArtCards is application dependent. It must make sense to the user in the context of the application.
The information could be company information, specific product sheets, web-site pointers, e-mail addresses, a resume . . . in short, whatever the bizCard holder wants it to. BizCards can be read by any ArtCards reader such as an attached PC card reader, which can be connected to a standard PC by a USB port. BizCards can also be displayed as documents on specific embedded devices. In the case of a PC, a user simply inserts the bizcard into their reader. The bizCard is then preferably navigated just like a web-site using a regular web browser.
Simply by containing the owner's photograph and digital signature as well as a pointer to the company's public key, each bizCard can be used to electronically verify that the person is in fact who they claim to be and does actually work for the specified company. In addition by pointing to the company's public key, a bizCard permits simple initiation of secure communications.
A further application, hereinafter known as “TourCard” is an application of the ArtCards which contains information for tourists and visitors to a city. When a tourCard is inserted into the ArtCards book reader, information can be in the form of:
It is interactivity of the bookreader that makes the tourCard so versatile. For example, Hypertext links contained on the map can be selected to show historical narratives of the feature buildings. In this way the tourist can embark on a guided tour of the city, with relevant transportation routes and timetables available at any time. The tourCard eliminates the need for separate maps, guide books, timetables and restaurant guides and creates a simple solution for the independent traveler.
Of course, many other utilizations of the data cards are possible. For example, newspapers, study guides, pop group cards, baseball cards, timetables, music data files, product parts, advertising, TV guides, movie guides, trade show information, tear off cards in magazines, recipes, classified ads, medical information, programmes and software, horse racing form guides, electronic forms, annual reports, restaurant, hotel and vacation guides, translation programmes, golf course information, news broadcast, comics, weather details etc.
Docket | ||
No. | Reference | Title |
IJ01US | IJ01 | Radiant Plunger Ink Jet Printer |
IJ02US | IJ02 | Electrostatic Ink Jet Printer |
IJ03US | IJ03 | Planar Thermoelastic Bend Actuator Ink Jet |
IJ04US | IJ04 | Stacked Electrostatic Ink Jet Printer |
IJ05US | IJ05 | Reverse Spring Lever Ink Jet Printer |
IJ06US | IJ06 | Paddle Type Ink Jet Printer |
IJ07US | IJ07 | Permanent Magnet Electromagnetic Ink |
Jet Printer | ||
IJ08US | IJ08 | Planar Swing Grill Electromagnetic Ink |
Jet Printer | ||
IJ09US | IJ09 | Pump Action Refill Ink Jet Printer |
IJ10US | IJ10 | Pulsed Magnetic Field Ink Jet Printer |
IJ11US | IJ11 | Two Plate Reverse Firing Electromagnetic |
Ink Jet Printer | ||
IJ12US | IJ12 | Linear Stepper Actuator Ink Jet Printer |
IJ13US | IJ13 | Gear Driven Shutter Ink Jet Printer |
IJ14US | IJ14 | Tapered Magnetic Pole Electromagnetic Ink |
Jet Printer | ||
IJ15US | IJ15 | Linear Spring Electromagnetic Grill Ink |
Jet Printer | ||
IJ16US | IJ16 | Lorenz Diaphragm Electromagnetic Ink |
Jet Printer | ||
IJ17US | IJ17 | PTFE Surface Shooting Shuttered Oscillating |
Pressure Ink Jet Printer | ||
IJ18US | IJ18 | Buckle Grip Oscillating Pressure Ink |
Jet Printer | ||
IJ19US | IJ19 | Shutter Based Ink Jet Printer |
IJ20US | IJ20 | Curling Calyx Thermoelastic Ink Jet Printer |
IJ21US | IJ21 | Thermal Actuated Ink Jet Printer |
IJ22US | IJ22 | Iris Motion Ink Jet Printer |
IJ23US | IJ23 | Direct Firing Thermal Bend Actuator Ink |
Jet Printer | ||
IJ24US | IJ24 | Conductive PTFE Ben Activator Vented Ink |
Jet Printer | ||
IJ25US | IJ25 | Magnetostrictive Ink Jet Printer |
IJ26US | IJ26 | Shape Memory Alloy Ink Jet Printer |
IJ27US | IJ27 | Buckle Plate Ink Jet Printer |
IJ28US | IJ28 | Thermal Elastic Rotary Impeller Ink Jet Printer |
IJ29US | IJ29 | Thermoelastic Bend Actuator Ink Jet Printer |
IJ30US | IJ30 | Thermoelastic Bend Actuator Using PTFE |
and Corrugated Copper Ink Jet Printer | ||
IJ31US | IJ31 | Bend Actuator Direct Ink Supply Ink |
Jet Printer | ||
IJ32US | IJ32 | A High Young's Modulus Thermoelastic Ink |
Jet Printer | ||
IJ33US | IJ33 | Thermally actuated slotted chamber wall ink |
jet printer | ||
IJ34US | IJ34 | Ink Jet Printer having a thermal actuator |
comprising an external coiled spring | ||
IJ35US | IJ35 | Trough Container Ink Jet Printer |
IJ36US | IJ36 | Dual Chamber Single Vertical Actuator Ink Jet |
IJ37US | IJ37 | Dual Nozzle Single Horizontal Fulcrum |
Actuator Ink Jet | ||
IJ38US | IJ38 | Dual Nozzle Single Horizontal Actuator Ink Jet |
IJ39US | IJ39 | A single bend actuator cupped paddle ink |
jet printing device | ||
IJ40US | IJ40 | A thermally actuated ink jet printer having |
a series of thermal actuator units | ||
IJ41US | IJ41 | A thermally actuated ink jet printer |
including a tapered heater element | ||
IJ42US | IJ42 | Radial Back-Curling Thermoelastic Ink Jet |
IJ43US | IJ43 | Inverted Radial Back-Curling Thermoelastic |
Ink Jet | ||
IJ44US | IJ44 | Surface bend actuator vented ink supply ink |
jet printer | ||
IJ45US | IJ45 | Coil Acutuated Magnetic Plate Ink Jet Printer |
Tables of Drop-on-Demand Inkjets
Actuator mechanism (applied only to selected ink drops) |
Actuator | ||||
Mechanism | Description | Advantages | Disadvantages | Examples |
Thermal bubble | An electrothermal heater | Large force generated | High power | Canon Bubblejet 1979 |
heats the ink to | Simple construction | Ink carrier limited | Endo et al GB patent | |
above boiling point, | No moving parts | to water | 2,007,162 | |
transferring significant | Fast operation | Low efficiency | Xerox heater-in-pit 1990 | |
heat to the aqueous ink. | Small chip area required for | High temperatures | Hawkins et al U.S. Pat. No. | |
A bubble nucleates and | actuator | required | 4,899,181 | |
quickly forms, expelling | High mechanical | Hewlett-Packard TIJ | ||
the ink. The efficiency | stress | 1982 Vaught et al | ||
of the process is low, | Unusual materials | U.S. Pat. No. 4,490,728 | ||
with typically less than | required | |||
0.05% of the electrical | Large drive | |||
energy being transformed | transistors | |||
into kinetic energy of | Cavitation causes | |||
the drop. | actuator failure | |||
Kogation reduces | ||||
bubble formation | ||||
Large print heads | ||||
are difficult to | ||||
fabricate | ||||
Piezoelectric | A piezoelectric | Low power consumption | Very large area | Kyser et al U.S. Pat. No. |
crystal such as lead | Many ink types can be used | required for | 3,946,398 | |
lanthanum zirconate | Fast operation | actuator | Zoltan U.S. Pat. No. 3,683,212 | |
(PZT) is electrically | High efficiency | Difficult to | 1973 Stemme U.S. Pat. No. | |
activated, and either | integrate with | 3,747,120 | ||
expands, shears, or | electronics | Epson Stylus | ||
bends to apply pressure | High voltage drive | Tektronix | ||
to the ink, ejecting | transistors required | IJ04 | ||
drops. | Full pagewidth print | |||
heads impractical due | ||||
to actuator size | ||||
Requires electrical | ||||
poling in high field | ||||
strengths during | ||||
manufacture | ||||
Electro-strictive | An electric field is | Low power consumption | Low maximum strain | Seiko Epson, Usui et all |
used to activate | Many ink types can be used | (approx. 0.01%) | JP 253401/96 | |
electrostriction in | Low thermal expansion | Large area required | IJ04 | |
relaxor materials such | Electric field strength required | for actuator due to | ||
as lead lanthanum | (approx. 3.5 V/μm) can be | low strain | ||
zirconate titanate | generated without difficulty | Response speed is | ||
(PLZT) or lead | Does not require electrical | marginal (~10 μs) | ||
magnesium niobate | poling | High voltage drive | ||
(PMN). | transistors required | |||
Full pagewidth print | ||||
heads impractical due | ||||
to actuator size | ||||
Ferroelectric | An electric field is | Low power consumption | Difficult to | IJ04 |
used to induce a | Many ink types can be used | integrate with | ||
phase transition | Fast operation (<1 μs) | electronics | ||
between the | Relatively high longitudinal | Unusual materials | ||
antiferroelectric | strain | such as PLZSnT are | ||
(AFE) and ferroelectric | High efficiency | required | ||
(FE) phase. Perovskite | Electric field strength of around | Actuators require | ||
materials such as | 3 V/μm can be readily | a large area | ||
tin modified lead | provided | |||
lanthanum zirconate | ||||
titanate (PLZSnT) | ||||
exhibit large strains | ||||
of up to 1% associated | ||||
with the AFE to FE | ||||
phase transition. | ||||
Electrostatic | Conductive plates are | Low power consumption | Difficult to operate | IJ02, IJ04 |
plates | separated by a | Many ink types can be used | electrostatic devices | |
compressible or fluid | Fast operation | in an aqueous | ||
dielectric (usually | environment | |||
air). Upon application | The electrostatic | |||
of a voltage, the | actuator will normally | |||
plates attract each | need to be separated | |||
other and displace ink, | from the ink | |||
causing drop ejection. | Very large area | |||
The conductive plates | required to achieve | |||
may be in a comb or | high forces | |||
honeycomb structure, or | High voltage drive | |||
stacked to increase the | transistors may be | |||
surface area and | required | |||
therefore the force. | Full pagewidth print | |||
heads are not | ||||
competitive due to | ||||
actuator size | ||||
Electrostatic pull | A strong electric field | Low current consumption | High voltage required | 1989 Saito et al, U.S. Pat. No. |
on ink | is applied to the | Low temperature | May be damaged by | 4,799,068 |
ink, whereupon | sparks due to air | 1989 Miura et al, U.S. Pat. No. | ||
electrostatic attraction | breakdown | 4,810,954 | ||
accelerates the ink | Required field | Tone-jet | ||
towards the print | strength increases | |||
medium. | as the drop | |||
size decreases | ||||
High voltage drive | ||||
transistors required | ||||
Electrostatic field | ||||
attracts dust | ||||
Permanent | An electromagnet | Low power consumption | Complex fabrication | IJ07, IJ10 |
magnet electro- | directly attracts a | Many ink types can be used | Permanent magnetic | |
magnetic | permanent magnet, | Fast operation | material such as | |
displacing ink and | High efficiency | Neodymium Iron Boron | ||
causing drop ejection. | Easy extension from single | (NdFeB) required. | ||
Rare earth magnets | nozzles to pagewidth print | High local currents | ||
with a field strength | heads | required | ||
around 1 Tesla can be | Copper metalization | |||
used. Examples are: | should be used for | |||
Samarium Cobalt | long electromigration | |||
(SaCo) and magnetic | lifetime and low | |||
materials in the | resistivity | |||
neodymium iron boron | Pigmented inks are | |||
family (NdFeB, | usually infeasible | |||
NdDyFeBNb, NdDyFeB, etc) | Operating temperature | |||
limited to the Curie | ||||
temperature (around | ||||
540 K) | ||||
Soft magnetic core | A solenoid induced a | Low power consumption | Complex fabrication | IJ01, IJ05, IJ08, IJ10 |
electro-magnetic | magnetic field in a | Many ink types can be used | Materials not usually | IJ12, IJ14, IJ15, IJ17 |
soft magnetic core or | Fast operation | present in a CMOS fab | ||
yoke fabricated from a | High efficiency | such as NiFe, CoNiFe, | ||
ferrous material such as | Easy extension from single | or CoFe are | ||
electroplated iron | nozzles to pagewidth print | required | ||
alloys such as CoNiFe | heads | High local currents | ||
[1], CoFe, or NiFe | required | |||
alloys. Typically, the | Copper metalization | |||
soft magnetic material | should be used for | |||
is in two parts, | long electromigration | |||
which are normally held | lifetime and low | |||
apart by a spring. When | resistivity | |||
the solenoid is actuated, | Electroplating is | |||
the two parts attract, | required | |||
displacing the ink. | High saturation flux | |||
density is required | ||||
(2.0-2.1 T is | ||||
achievable with | ||||
CoNiFe [1]) | ||||
Magnetic | The Lorenz force acting | Low power consumption | Force acts as a | IJ06, IJ11, IJ13, IJ16 |
Lorenz force | on a current carrying | Many ink types can be used | twisting motion | |
wire in a magnetic field | Fast operation | Typically, only a | ||
is utilized. | High efficiency | quarter of the sole- | ||
This allows the | Easy extension from single | noid length provides | ||
magnetic field to be | nozzles to pagewidth print | force in a useful | ||
supplied externally to | heads | direction | ||
the print head, for | High local currents | |||
example with rare earth | required | |||
permanent magnets. | Copper metalization | |||
Only the current | should be used for | |||
carrying wire need be | long electromigration | |||
fabricated on the print- | lifetime and low | |||
head, simplifying | resistivity | |||
materials requirements. | Pigmented inks are | |||
usually infeasible | ||||
Magneto-striction | The actuator uses the | Many ink types can be used | Force acts as a | Fischenbeck, U.S. Pat. No. |
giant magnetostrictive | Fast operation | twisting motion | 4,032,929 | |
effect of materials such | Easy extension from single | Unusual materials | IJ25 | |
as Terfenol-D (an | nozzles to pagewidth print | such as Terfenol-D | ||
alloy of terbium, | heads | are required | ||
dysprosium and iron | High force is available | High local currents | ||
developed at the | required | |||
Naval Ordnance | Copper metalization | |||
Laboratory, hence Ter- | should be used for | |||
Fe-NOL). For best | long electromigration | |||
efficiency, the | lifetime and low | |||
actuator should be | resistivity | |||
pre-stressed to | Pre-stressing may | |||
approx. 8 MPa. | be required | |||
Surface tension | Ink under positive | Low power consumption | Requires supplementary | Silverbrook, EP 0771 |
reduction | pressure is held in | Simple construction | force to effect drop | 658 A2 and related |
a nozzle by surface | No unusual materials required | separation | patent applications | |
tension. The surface | in fabrication | Requires special ink | ||
tension of the ink is | High efficiency | surfactants | ||
reduced below the | Easy extension from single | Speed may be limited | ||
bubble threshold, | nozzles to pagewidth print | by surfactant | ||
causing the ink to | heads | properties | ||
egress from the nozzle. | ||||
Viscosity | The ink viscosity is | Simple construction | Requires supplementary | Silverbrook, EP 0771 |
reduction | locally reduced to | No unusual materials required | force to effect drop | 658 A2 and related |
select which drops | in fabrication | separation | patent applications | |
are to be ejected. A | Easy extension from single | Requires special ink | ||
viscosity reduction | nozzles to pagewidth print | viscosity properties | ||
can be achieved | heads | High speed is | ||
electrothermally with | difficult to achieve | |||
most inks, but | Requires oscillating | |||
special inks can be | ink pressure | |||
engineered for a 100:1 | A high temperature | |||
viscosity reduction. | difference (typically | |||
80 degrees) is required | ||||
Acoustic | An acoustic wave is | Can operate without a nozzle | Complex drive circuitry | 1993 Hadimioglu et al, |
generated and | plate | Complex fabrication | EUP 550,192 | |
focussed upon the | Low efficiency | 1993 Elrod et al, EUP | ||
drop ejection region. | Poor control of drop | 572,220 | ||
position | ||||
Poor control of drop | ||||
volume | ||||
Thermoelastic | An actuator which | Low power consumption | Efficient aqueous | IJ03, IJ09, IJ17, IJ18 |
bend actuator | relies upon | Many ink types can be used | operation requires | IJ19, IJ20, IJ21, IJ22 |
differential thermal | Simple planar fabrication | a thermal insulator | IJ23, IJ24, IJ27, IJ28 | |
expansion upon | Small chip area required for | on the hot side | IJ29, IJ30, IJ31, IJ32 | |
Joule heating is used. | each actuator | Corrosion prevention | IJ33, IJ34, IJ35, IJ36 | |
Fast operation | can be difficult | IJ37, IJ38, IJ39, IJ40 | ||
High efficiency | Pigmented inks may | IJ41 | ||
CMOS compatible voltages and | be infeasible, as | |||
currents | pigment particles | |||
Standard MEMS processes can | may jam the bend | |||
be used | actuator | |||
Easy extension from single | ||||
nozzles to pagewidth print | ||||
heads | ||||
High CTE | A material with a very | High force can be generated | Requires special | IJ09, IJ17, IJ18, IJ20 |
thermoelastic | high coefficient of | PTFE is a candidate for low | material (e.g. PTFE) | IJ21, IJ22, IJ23, IJ24 |
actuator | thermal expansion (CTE) | dielectric constant insulation | Requires a PTFE | IJ27, IJ28, IJ29, IJ30 |
such as | in ULSI | deposition process, | IJ31, IJ42, IJ43, IJ44 | |
polytetrafluoroethylene | Very low power consumption | which is not yet | ||
(PTFE) is used. | Many ink types can be used | standard in ULSI fabs | ||
As high CTE materials | Simple planar fabrication | PTFE deposition | ||
are usually non- | Small chip area required for | cannot be followed | ||
conductive, a heater | each actuator | with high temperature | ||
fabricated from a | Fast operation | (above 350 °C.) | ||
conductive material | High efficiency | processing | ||
is incorporated. A 50 | CMOS compatible voltages and | Pigmented inks may | ||
μm long PTFE bend | currents | be infeasible, as | ||
actuator with | Easy extension from single | pigment particles | ||
polysilicon heater | nozzles to pagewidth print | may jam the bend | ||
and 15 mW power | heads | actuator | ||
input can provide 180 | ||||
μN force and 10 | ||||
μm deflection. | ||||
Actuator motions include: | ||||
Bend | ||||
Push | ||||
Buckle | ||||
Rotate | ||||
Conductive | A polymer with a | High force can be generated | Requires special | IJ24 |
polymer | high coefficient of | Very low power consumption | materials development | |
thermoelastic | thermal expansion | Many ink types can be used | (High CTE conductive | |
actuator | (such as PTFE) is | Simple planar fabrication | polymer) | |
doped with conducting | Small chip area required for | Requires a PTFE | ||
substances to | each actuator | deposition process, | ||
increase its | Fast operation | which is not yet | ||
conductivity to about | High efficiency | standard in |
||
3 orders of magnitude | CMOS compatible voltages and | PTFE deposition cannot | ||
below that of | currents | be followed with high | ||
copper. The conducting | Easy extension from single | temperature (above | ||
polymer expands | nozzles to |
350 °C.) processing | ||
when resistively heated. | heads | Evaporation and CVD | ||
Examples of conducting | deposition techniques | |||
dopants include: | cannot be used | |||
Carbon nanotubes | Pigmented inks may | |||
Metal fibers | be infeasible, as | |||
Conductive polymers | pigment particles | |||
such as doped | may jam the bend | |||
polythiophene | actuator | |||
Carbon granules | ||||
Shape memory | A shape memory alloy | High force is available (stresses | Fatigue limits | IJ26 |
alloy | such as TiNi (also | of hundreds of MPa) | maximum number of | |
known as Nitinol - | Large strain is available (more | cycles | ||
Nickel Titanium alloy | than 3%) | Low strain (1%) is | ||
developed at the | High corrosion resistance | required to extend | ||
Naval Ordnance | Simple construction | fatigue resistance | ||
Laboratory) is | Easy extension from single | Cycle rate limited | ||
thermally switched | nozzles to pagewidth print | by heat removal | ||
between its weak | heads | Requires unusual | ||
martensitic state and | Low voltage operation | materials (TiNi) | ||
its high stiffness | The latent heat of | |||
austenic state. The | transformation must | |||
shape of the actuator | be provided | |||
in its martensitic | High current operation | |||
state is deformed | Requires pre-stressing | |||
relative to the | to distort the | |||
austenic shape. | martensitic state | |||
The shape change | ||||
causes ejection | ||||
of a drop. | ||||
Linear Magnetic | Linear magnetic | Linear Magnetic actuators can | Requires unusual semi- | IJ12 |
Actuator | actuators include the | be constructed with high | conductor materials | |
Linear Induction | thrust, long travel, and high | such as soft magnetic | ||
Actuator (LIA), Linear | efficiency using planar | alloys (e.g. CoNiFe | ||
Permanent Magnet | semiconductor fabrication | [1]) | ||
Synchronous Actuator | techniques | Some varieties also | ||
(LPMSA), Linear | Long actuator travel is available | require permanent | ||
Reluctance Synchronous | Medium force is available | magnetic materials | ||
Actuator (LRSA), Linear | Low voltage operation | such as Neodymium | ||
Switched Reluctance | iron boron (NdFeB) | |||
Actuator (LSRA), | Requires complex | |||
and the Linear Stepper | multi-phase drive | |||
Actuator (LSA). | circuitry | |||
High current operation | ||||
Basic operation mode |
Operational mode | Description | Advantages | Disadvantages | Examples |
Actuator directly | This is the simplest | Simple operation | Drop repetition rate is usually limited to less | Thermal inkjet |
pushes ink | mode of operation: | No external fields required | than 10 KHz. However, this is not | Piezoelectric inkjet |
the actuator directly | Satellite drops can be avoided if | fundamental to the method, but is related | IJ01, IJ02, IJ03, IJ04 | |
supplies sufficient | drop velocity is less than 4 | to the refill method normally used | IJ05, IJ06, IJ07, IJ09 | |
kinetic energy to | m/s | All of the drop kinetic energy must be | IJ11, IJ12, IJ14, IJ16 | |
expel the drop. The | Can be efficient, depending | provided by the actuator | IJ20, IJ22, IJ23, IJ24 | |
drop must have a | upon the actuator used | Satellite drops usually form if drop velocity | IJ25, IJ26, IJ27, IJ28 | |
sufficient velocity | is greater than 4.5 m/s | IJ29, IJ30, IJ31, IJ32 | ||
to overcome the | IJ33, IJ34, IJ35, IJ36 | |||
surface tension. | IJ37, IJ38, IJ39, IJ40 | |||
IJ41, IJ42, IJ43, IJ44 | ||||
Proximity | The drops to be | Very simple print head | Requires close proximity between the print | Silverbrook, EP 0771 |
printed are selected | fabrication can be used | head and the print media or transfer roller | 658 A2 and related | |
by some manner (e.g. | The drop selection means does | May require two print heads printing | patent applications | |
thermally induced | not need to provide the | alternate rows of the image | ||
surface tension | energy required to separate | Monolithic color print heads are difficult | ||
reduction of pressur- | the drop from the nozzle | |||
ized ink). Selected | ||||
drops are separated | ||||
from the ink in the | ||||
nozzle by contact with | ||||
the print medium or | ||||
a transfer roller. | ||||
Electrostatic pull | The drops to be printed | Very simple print head | Requires very high electrostatic field | Silverbrook, EP 0771 |
on ink | are selected by | fabrication can be used | Electrostatic field for small nozzle sizes is | 658 A2 and related |
some manner (e.g. | The drop selection means does | above air breakdown | patent applications | |
thermally induced | not need to provide the | Electrostatic field may attract dust | Tone-Jet | |
surface tension | energy required to separate | |||
reduction of pressur- | the drop from the nozzle | |||
ized ink). Selected | ||||
drops are separated | ||||
from the ink in the | ||||
nozzle by a strong | ||||
electric field. | ||||
Magnetic pull on | The drops to be | Very simple print head | Requires magnetic ink | Silverbrook, EP 0771 |
ink | printed are selected | fabrication can be used | Ink colors other than black are difficult | 658 A2 and related |
by some manner (e.g. | The drop selection means does | Requires very high magnetic fields | patent applications | |
thermally induced | not need to provide the | |||
surface tension | energy required to separate | |||
reduction of pressur- | the drop from the nozzle | |||
ized ink). Selected | ||||
drops are separated | ||||
from the ink in the | ||||
nozzle by a strong | ||||
magnetic field acting | ||||
on the magnetic ink. | ||||
Shutter | The actuator moves a | High speed (>50 KHz) | Moving parts are required | IJ13, IJ17, IJ21 |
shutter to block ink | operation can be achieved | Requires ink pressure modulator | ||
flow to the nozzle. | due to reduced refill time | Friction and wear must be considered | ||
The ink pressure is | Drop timing can be very | Stiction is possible | ||
pulsed at a multiple | accurate | |||
of the drop ejection | The actuator energy can be | |||
frequency. | very low | |||
Shuttered grill | The actuator moves a | Actuators with small travel can | Moving parts are required | IJ08, IJ15, IJ18, IJ19 |
shutter to block ink | be used | Requires ink pressure modulator | ||
flow through a grill | Actuators with small force can | Friction and wear must be considered | ||
to the nozzle. The | be used | Stiction is possible | ||
shutter movement need | High speed (>50 KHz) | |||
only be equal to | operation can be achieved | |||
the width of the | ||||
grill holes. | ||||
Pulsed magnetic | A pulsed magnetic | Extremely low energy operation | Requires an external pulsed magnetic field | IJ10 |
pull on ink pusher | field attracts an ‘ink | is possible | Requires special materials for both the | |
pusher’ at the drop | No heat dissipation problems | actuator and the ink pusher | ||
ejection frequency. | Complex construction | |||
An actuator controls | ||||
a catch, which | ||||
prevents the ink | ||||
pusher from moving | ||||
when a drop is not | ||||
to be ejected. | ||||
Auxiliary mechanism (applied to all nozzles) |
Auxiliary | ||||
Mechanism | Description | Advantages | Disadvantages | Examples |
None | The actuator directly | Simplicity of construction | Drop ejection energy must be supplied | Most inkjets, including |
fires the ink drop, | Simplicity of operation | by individual nozzle actuator | piezoelectric and | |
and there is no | Small physical size | thermal bubble. | ||
external field or other | IJ01-IJ07, IJ09, IJ11 | |||
mechanism required. | IJ12, IJ14, IJ20, IJ22 | |||
IJ23-IJ45 | ||||
Oscillating ink | The ink pressure | Oscillating ink pressure can | Requires external ink pressure oscillator | Silverbrook, EP 0771 |
pressure | oscillates, providing | provide a refill pulse, | Ink pressure phase and amplitude must | 658 A2 and related |
(including | much of the drop | allowing higher operating | be carefully controlled | patent applications |
acoustic | ejection energy. The | speed | Acoustic reflections in the ink chamber | IJ08, IJ13, IJ15, IJ17 |
stimulation) | actuator selects | The actuators may operate with | must be designed for | IJ18, IJ19, IJ21 |
which drops are to be | much lower energy | |||
fired by selectively | Acoustic lenses can be used to | |||
blocking or enabling | focus the sound on the | |||
nozzles. The ink | nozzles | |||
pressure oscillation | ||||
may be achieved by | ||||
vibrating the print | ||||
head, or preferably | ||||
by an actuator in | ||||
the ink supply. | ||||
Media proximity | The print head is | Low power | Precision assembly required | Silverbrook, EP 0771 |
placed in close | High accuracy | Paper fibers may cause problems | 658 A2 and related | |
proximity to the | Simple print head construction | Cannot print on rough substrates | patent applications | |
print medium. Selected | ||||
drops protrude from | ||||
the print head further | ||||
than unselected drops, | ||||
and contact the print | ||||
medium. The drop soaks | ||||
into the medium fast | ||||
enough to cause | ||||
drop separation. | ||||
Transfer roller | Drops are printed to | High accuracy | Bulky | Silverbrook, EP 0771 |
a transfer roller | Wide range of print substrates | Expensive | 658 A2 and related | |
instead of straight | can be used | Complex construction | patent applications | |
to the print medium. | Ink can be dried on the transfer | Tektronix hot melt | ||
A transfer roller | roller | piezoelectric inkjet | ||
can also be used for | Any of the IJ series | |||
proximity drop | ||||
separation. | ||||
Electrostatic | An electric field is | Low power | Field strength required for separation | Silverbrook, EP 0771 |
used to accelerate | Simple print head construction | of small drops is near or above air | 658 A2 and related | |
selected drops towards | breakdown | patent applications | ||
the print medium. | Tone-Jet | |||
Direct magnetic | A magnetic field is | Low power | Requires magnetic ink | Silverbrook, EP 0771 |
field | used to accelerate | Simple print head construction | Requires strong magnetic field | 658 A2 and related |
selected drops of | patent applications | |||
magnetic ink towards | ||||
the print medium. | ||||
Cross magnetic | The print head is | Does not require magnetic | Requires external magnet | IJ06, IJ16 |
field | placed in a constant | materials to be integrated in | Current densities may be high, resulting | |
magnetic field. The | the print head manufacturing | in electromigration problems | ||
Lorenz force in a | process | |||
current carrying wire | ||||
is used to move the | ||||
actuator. | ||||
Pulsed magnetic | A pulsed magnetic | Very low power operation is | Complex print head construction | IJ10 |
field | field is used to | possible | Magnetic materials required in print head | |
cyclically attract a | Small print head size | |||
paddle, which pushes | ||||
on the ink. A small | ||||
actuator moves a | ||||
catch, which | ||||
selectively prevents | ||||
the paddle from moving. | ||||
Actuator amplification or modification method |
Actuator | ||||
amplification | Description | Advantages | Disadvantages | Examples |
None | No actuator mechanical | Operational simplicity | Many actuator mechanisms have insuf- | Thermal Bubble InkJet |
amplification is | ficient travel, or insufficient force, | IJ01, IJ02, IJ06, IJ07 | ||
used. The actuator | to efficiently drive the drop ejection | IJ16, IJ25, IJ26 | ||
directly drives the | process | |||
drop ejection process. | ||||
Differential | An actuator material | Provides greater travel in a | High stresses are involved | Piezoelectric |
expansion bend | expands more on | reduced print head area | Care must be taken that the materials | IJ03, IJ09, IJ17-IJ24 |
actuator | one side than on | The bend actuator converts a | do not delaminate | IJ27 IJ29-IJ39, IJ42, |
the other. The | high force low travel actuator | Residual bend resulting from high | IJ43, IJ44 | |
expansion may be | mechanism to high travel, | temperature or high stress during | ||
thermal, piezoelectric, | lower force mechanism. | formation | ||
magnetostrictive, or | ||||
other mechanism. | ||||
Transient bend | A trilayer bend | Very good temperature stability | High stresses are involved | IJ40, IJ41 |
actuator | actuator where the two | High speed, as a new drop can | Care must be taken that the materials | |
outside layers are | be fired before heat dissipates | do not delaminate | ||
identical. This cancels | Cancels residual stress of | |||
bend due to ambient | formation | |||
temperature and | ||||
residual stress. | ||||
The actuator only | ||||
responds to transient | ||||
heating of one side | ||||
or the other. | ||||
Actuator stack | A series of thin | Increased travel | Increased fabrication complexity | Some piezoelectric ink |
actuators are stacked. | Reduced drive voltage | Increased possibility of short circuits | jets | |
This can be | due to pinholes | IJ04 | ||
appropriate where | ||||
actuators require high | ||||
electric field | ||||
strength, such as | ||||
electrostatic and | ||||
piezoelectric | ||||
actuators. | ||||
Multiple actuators | Multiple smaller | Increases the force available | Actuator forces may not add linearly, | IJ12, IJ13, IJ18, IJ20 |
actuators are used | from an actuator | reducing efficiency | IJ22, IJ28, IJ42, IJ43 | |
simultaneously to | Multiple actuators can be | |||
move the ink. Each | positioned to control ink flow | |||
actuator need | accurately | |||
provide only a portion | ||||
of the force required. | ||||
Linear Spring | A linear spring is | Matches low travel actuator | Requires print head area for the spring | IJ15 |
used to transform a | with higher travel | |||
motion with small | requirements | |||
travel and high force | Non-contact method of motion | |||
into a longer travel, | transformation | |||
lower force motion. | ||||
Reverse spring | The actuator loads a | Better coupling to the ink | Fabrication complexity | IJ05, IJ11 |
spring. When the | High stress in the spring | |||
actuator is turned off, | ||||
the spring releases. | ||||
This can reverse the | ||||
force/distance curve | ||||
of the actuator to | ||||
make it compatible | ||||
with the force/time | ||||
requirements of the | ||||
drop ejection. | ||||
Coiled actuator | A bend actuator is | Increases travel | Generally restricted to planar | IJ17, IJ21, IJ34, IJ35 |
coiled to provide | Reduces chip area | implementations due to extreme | ||
greater travel in a | Planar implementations are | fabrication difficulty in other | ||
reduced chip area. | relatively easy to fabricate. | orientations. | ||
Flexure bend | A bend actuator has | Simple means of increasing | Care must be taken not to exceed the | IJ10, IJ19, IJ33 |
actuator | a small region near | travel of a bend actuator | elastic limit in the flexure area | |
the fixture point, | Stress distribution is very uneven | |||
which flexes much | Difficult to accurately model with finite | |||
more readily than | element analysis | |||
the remainder of the | ||||
actuator. The | ||||
actuator flexing is | ||||
effectively converted | ||||
from an even | ||||
coiling to an angular | ||||
bend, resulting in | ||||
greater travel of | ||||
the actuator tip. | ||||
Gears | Gears can be used to | Low force, low travel actuators | Moving parts are required | IJ13 |
increase travel at | can be used | Several actuator cycles are required | ||
the expense of | Can be fabricated using | More complex drive electronics | ||
duration. Circular | standard surface MEMS | Complex construction | ||
gears, rack and pinion, | processes | Friction, friction, and wear are possible | ||
ratchets, and other | ||||
gearing methods can | ||||
be used. | ||||
Catch | The actuator controls | Very low actuator energy | Complex construction | IJ10 |
a small catch. The | Very small actuator size | Requires external force | ||
catch either enables | Unsuitable for pigmented inks | |||
or disables movement of | ||||
an ink pusher that is | ||||
controlled in a bulk | ||||
manner. | ||||
Buckle plate | A buckle plate can be | Very fast movement achievable | Must stay within elastic limits of the | S. Hirata et al, “An Ink- |
used to change a | materials for long device life | jet Head . . . ”, Proc. | ||
slow actuator into a | High stresses involved | IEEE MEMS, February | ||
fast motion. It can | Generally high power requirement | 1996, pp 418-423. | ||
also convert a high | IJ18, IJ27 | |||
force, low travel | ||||
actuator into a high | ||||
travel, medium force | ||||
motion. | ||||
Tapered magnetic | A tapered magnetic | Linearizes the magnetic | Complex construction | IJ14 |
pole | pole can increase | force/distance curve | ||
travel at the expense | ||||
of force. | ||||
Lever | A lever and fulcrum | Matches low travel actuator | High stress around the fulcrum | IJ32, IJ36, IJ37 |
is used to transform | with higher travel | |||
a motion with small | requirements | |||
travel and high force | Fulcrum area has no linear | |||
into a motion with | movement, and can be used | |||
longer travel and | for a fluid seal | |||
lower force. The | ||||
lever can also | ||||
reverse the direction | ||||
of travel. | ||||
Rotary impeller | The actuator is | High mechanical advantage | Complex construction | IJ28 |
connected to a rotary | The ratio of force to travel of | Unsuitable for pigmented inks | ||
impeller. A small | the actuator can be matched | |||
angular deflection of | to the nozzle requirements by | |||
the actuator results | varying the number of | |||
in a rotation of the | impeller vanes | |||
impeller vanes, which | ||||
push the ink against | ||||
stationary vanes and | ||||
out of the nozzle. | ||||
Acoustic lens | A refractive or | No moving parts | Large area required | 1993 Hadimioglu et al, |
diffractive (e.g. zone | Only relevant for acoustic ink jets | EUP 550,192 | ||
plate) acoustic lens | 1993 Elrod et al, EUP | |||
is used to concentrate | 572,220 | |||
sound waves. | ||||
Sharp conductive | A sharp point is used | Simple construction | Difficult to fabricate using standard | Tone-jet |
point | to concentrate an | VLSI processes for a surface ejecting | ||
electrostatic field. | ink-jet Only relevant for electrostatic | |||
ink jets | ||||
Actuator motion |
Actuator | ||||
motion | Description | Advantages | Disadvantages | Examples |
Volume | The volume of the | Simple construction | High energy is typically required to | Hewlett-Packard |
expansion | actuator changes, | in the case | achieve volume expansion. This leads to | Thermal InkJet |
pushing the ink in | of thermal ink jet | thermal stress, cavitation, and kogation | Canon Bubblejet | |
all directions. | in thermal ink jet implementations | |||
Linear, | The actuator moves in | Efficient coupling | High fabrication complexity may be | IJ01, IJ02, IJ04, IJ07 |
normal to | a direction normal | to ink drops | required to achieve perpendicular motion | IJ11, IJ14 |
chip surface | to the print head | ejected normal to | ||
surface. The nozzle | the surface | |||
is typically in the | ||||
line of movement. | ||||
Linear, | The actuator moves | Suitable for planar | Fabrication complexity | IJ12, IJ13, IJ15, IJ33, |
parallel to | parallel to the print | fabrication | Friction | IJ34, IJ35, IJ36 |
chip surface | head surface. Drop | Stiction | ||
ejection may still be | ||||
normal to the surface. | ||||
Membrane push | An actuator with a | The effective | Fabrication complexity | 1982 Howkins U.S. Pat. No. |
high force but small | area of the | Actuator size | 4,459,601 | |
area is used to push | actuator becomes | Difficulty of integration in a VLSI | ||
a stiff membrane that | the membrane area | process | ||
is in contact with | ||||
the ink. | ||||
Rotary | The actuator causes | Rotary levers may | Device complexity | IJ05, IJ08, IJ13, IJ28 |
the rotation of some | be used to | May have friction at a pivot point | ||
element, such a grill | increase travel | |||
or impeller | Small chip area | |||
requirements | ||||
Bend | The actuator bends | A very small | Requires the actuator to be made from | 1970 Kyser et al U.S. Pat. No. |
when energized. This | change in | at least two distinct layers, or to | 3,946,398 | |
may be due to | dimensions can | have a thermal difference across the | 1973 Stemme U.S. Pat. No. | |
differential thermal | be converted | actuator | 3,747,120 | |
expansion, piezo- | to a large | IJ03, IJ09, IJ10, IJ19 | ||
electric expansion, | motion. | IJ23, IJ24, IJ25, IJ29 | ||
magnetostriction, | IJ30, IJ31, IJ33, IJ34 | |||
or other form of | IJ35 | |||
relative dimensional | ||||
change. | ||||
Swivel | The actuator swivels | Allows operation | Inefficient coupling to the ink motion | IJ06 |
around a central | where the net | |||
pivot. This motion is | linear force on | |||
suitable where there | the paddle is | |||
are opposite forces | zero | |||
applied to opposite | Small chip area | |||
sides of the paddle, | requirements | |||
e.g. Lorenz force. | ||||
Straighten | The actuator is | Can be used | Requires careful balance of stresses to | IJ26, IJ32 |
normally bent, and | with shape | ensure that the quiescent bend is | ||
straightens when | memory alloys | accurate | ||
energized. | where the | |||
austenic phase | ||||
is planar | ||||
Double bend | The actuator bends in | One actuator can | Difficult to make the drops ejected by | IJ36, IJ37, IJ38 |
one direction when one | be used to power | both bend directions identical. | ||
element is energized, | two nozzles. | A small efficiency loss compared to | ||
and bends the other way | Reduced chip size. | equivalent single bend actuators. | ||
when another element is | Not sensitive to | |||
energized. | ambient temperature | |||
Shear | Energizing the actuator | Can increase the | Not readily applicable to other actuator | 1985 Fishbeck U.S. Pat. No. |
causes a shear motion in | effective travel | mechanisms | 4,584,590 | |
the actuator material. | of piezoelectric | |||
actuators | ||||
Radial | The actuator squeezes | Relatively easy | High force required | 1970 Zoltan U.S. Pat. No. |
constriction | an ink reservoir, | to fabricate | Inefficient | 3,683,212 |
forcing ink from a | single nozzles | Difficult to integrate with VLSI | ||
constricted nozzle. | from glass | processes | ||
tubing as | ||||
macroscopic | ||||
structures | ||||
Coil/uncoil | A coiled actuator | Easy to fabricate | Difficult to fabricate for non-planar | IJ17, IJ21, IJ34, IJ35 |
uncoils or coils more | as a planar | devices | ||
tightly. The motion of | VLSI process | Poor out-of-plane stiffness | ||
the free end of the | Small area | |||
actuator ejects the ink. | required, therefore | |||
low cost | ||||
Bow | The actuator bows (or | Can increase the | Maximum travel is constrained | IJ16, IJ18, IJ27 |
buckles) in the | speed of travel | High force required | ||
middle when energized. | Mechanically rigid | |||
Push-Pull | Two actuators control | The structure is | Not readily suitable for inkjets which | IJ18 |
a shutter. One | pinned at both | directly push the ink | ||
actuator pulls the | ends, so has a | |||
shutter, and the other | high out-of- | |||
pushes it. | plane rigidity | |||
Curl inwards | A set of actuators curl | Good fluid flow | Design complexity | IJ20, IJ42 |
inwards to reduce | to the region | |||
the volume of ink that | behind the | |||
they enclose. | actuator increases | |||
efficiency | ||||
Curl outwards | A set of actuators | Relatively simple | Relatively large chip area | IJ43 |
curl outwards, | construction | |||
pressurizing ink in | ||||
a chamber surrounding | ||||
the actuators, and | ||||
expelling ink from a | ||||
nozzle in the chamber. | ||||
Iris | Multiple vanes enclose | High efficiency | High fabrication complexity | IJ22 |
a volume of ink. These | Small chip area | Not suitable for pigmented inks | ||
simultaneously rotate, | ||||
reducing the volume | ||||
between the vanes. | ||||
Acoustic vibration | The actuator vibrates | The actuator can | Large area required for efficient | 1993 Hadimioglu et al, |
at a high frequency. | be physically | operation at useful frequencies | EUP 550,192 | |
distant from the | Acoustic coupling and crosstalk | 1993 Elrod et al, EUP | ||
ink | Complex drive circuitry | 572,220 | ||
Poor control of drop volume and | ||||
position | ||||
None | In various ink jet | No moving parts | Various other tradeoffs are required | Silverbrook, EP 0771 |
designs the actuator | to eliminate moving parts | 658 A2 and related | ||
does not move. | patent applications | |||
Tone-jet | ||||
Nozzle refill method |
Nozzle refill | ||||
method | Description | Advantages | Disadvantages | Examples |
Surface tension | After the actuator | Fabrication simplicity | Low speed | Thermal inkjet |
is energized, it | Operational simplicity | Surface tension force relatively small | Piezoelectric inkjet | |
typically returns | compared to actuator force | IJ01-IJ07, IJ10-IJ14 | ||
rapidly to its normal | Long refill time usually dominates the | IJ16, IJ20, IJ22-IJ45 | ||
position. This rapid | total repetition rate | |||
return sucks in air | ||||
through the nozzle | ||||
opening. The ink | ||||
surface tension at | ||||
the nozzle then | ||||
exerts a small force | ||||
restoring the meniscus | ||||
to a minimum area. | ||||
Shuttered | Ink to the nozzle | High speed | Requires common ink pressure oscillator | IJ08, IJ13, IJ15, IJ17 |
oscillating ink | chamber is provided | Low actuator energy, as the | May not be suitable for pigmented inks | IJ18, IJ19, IJ21 |
pressure | at a pressure that | actuator need only open or | ||
oscillates at twice | close the shutter, instead of | |||
the drop ejection | ejecting the ink drop | |||
frequency. When a drop | ||||
is to be ejected, the | ||||
shutter is opened for | ||||
3 half cycles: drop | ||||
ejection, actuator | ||||
return, and refill. | ||||
Refill actuator | After the main actuator | High speed, as the nozzle is | Requires two independent actuators per | IJ09 |
has ejected a drop a | actively refilled | nozzle | ||
second (refill) actuator | ||||
is energized. The refill | ||||
actuator pushes ink | ||||
into the nozzle chamber. | ||||
The refill actuator | ||||
returns slowly, to | ||||
prevent its return from | ||||
emptying the chamber | ||||
again. | ||||
Positive ink | The ink is held a slight | High refill rate, therefore a | Surface spill must be prevented | Silverbrook, EP 0771 |
pressure | positive pressure. After | high drop repetition rate is | Highly hydrophobic print head surfaces | 658 A2 and related |
the ink drop is ejected, | possible | are required | patent applications | |
the nozzle chamber fills | Alternative for: | |||
quickly as surface | IJ01-IJ07, IJ10-IJ14 | |||
tension and ink pressure | IJ16, IJ20, IJ22-IJ45 | |||
both operate to refill | ||||
the nozzle. | ||||
Method of restricting back-flow through inlet |
Inlet | ||||
back-flow | ||||
restriction | ||||
method | Description | Advantages | Disadvantages | Examples |
Long inlet | The ink inlet channel | Design simplicity | Restricts refill rate | Thermal inkjet |
channel | to the nozzle chamber | Operational simplicity | May result in a relatively large chip | Piezoelectric inkjet |
is made long and | Reduces crosstalk | area Only partially effective | IJ42, IJ43 | |
relatively narrow, | ||||
relying on viscous | ||||
drag to reduce | ||||
inlet back-flow. | ||||
Positive ink | The ink is under a | Drop selection and separation | Requires a method (such as a nozzle rim | Silverbrook, EP 0771 |
pressure | positive pressure, | forces can be reduced | or effective hydrophobizing, or both) to | 658 A2 and related |
so that in the | Fast refill time | prevent flooding of the ejection surface | patent applications | |
quiescent state some | of the print head. | Possible operation of the | ||
of the ink drop already | following: | |||
protrudes from the | IJ01-IJ07, IJ09-IJ12 | |||
nozzle. This reduces | IJ14, IJ16, IJ20, IJ22, | |||
the pressure in the | IJ23-IJ34, IJ36-IJ41 | |||
nozzle chamber which | IJ44 | |||
is required to eject | ||||
a certain volume of | ||||
ink. The reduction in | ||||
chamber pressure | ||||
results in a | ||||
reduction in ink | ||||
pushed out through | ||||
the inlet. | ||||
Baffle | One or more baffles | The refill rate is not as | Design complexity | HP Thermal Ink Jet |
are placed in the | restricted as the long | May increase fabrication complexity | Tektronix piezoelectric | |
inlet ink flow. When | inlet method. | (e.g. Tektronix hot melt Piezoelectric | inkjet | |
the actuator is | Reduces crosstalk | print heads). | ||
energized, the rapid | ||||
ink movement | ||||
creates eddies which | ||||
restrict the flow | ||||
through the inlet. | ||||
The slower refill | ||||
process is unre- | ||||
stricted, and does | ||||
not result in eddies. | ||||
Flexible flap | In this method | Significantly reduces back-flow | Not applicable to most inkjet config- | Canon |
restricts inlet | recently disclosed by | for edge-shooter thermal ink | urations | |
Canon, the expanding | jet devices | Increased fabrication complexity | ||
actuator (bubble) | Inelastic deformation of polymer flap | |||
pushes on a flexible | results in creep over extended use | |||
flap that restricts | ||||
the inlet. | ||||
Inlet filter | A filter is located | Additional advantage of ink | Restricts refill rate | IJ04, IJ12, IJ24, IJ27 |
between the ink inlet | filtration | May result in complex construction | IJ29, IJ30 | |
and the nozzle chamber. | Ink filter may be fabricated | |||
The filter has a | with no additional process | |||
multitude of small | steps | |||
holes or slots, | ||||
restricting ink flow. | ||||
The filter also | ||||
removes particles | ||||
which may block the | ||||
nozzle. | ||||
Small inlet | The ink inlet channel | Design simplicity | Restricts refill rate | IJ02, IJ37, IJ44 |
compared to | to the nozzle chamber | May result in a relatively large chip | ||
nozzle | has a substantially | area | ||
smaller cross section | Only partially effective | |||
than that of the nozzle, | ||||
resulting in easier ink | ||||
egress out of the nozzle | ||||
than out of the inlet. | ||||
Inlet shutter | A secondary actuator | Increases speed of the ink- | Requires separate refill actuator and | IJ09 |
controls the position | jet print head operation | drive circuit | ||
of a shutter, closing | ||||
off the ink inlet when | ||||
the main actuator is | ||||
energized. | ||||
The inlet is | The method avoids | Back-flow problem is | Requires careful design to minimize the | IJ01, IJ03, IJ05, IJ06 |
located behind | the problem of inlet | eliminated | negative pressure behind the paddle | IJ07, IJ10, IJ11, IJ14 |
the ink-pushing | back-flow by arrang- | IJ16, IJ22, IJ23, IJ25 | ||
surface | ing the ink-pushing | IJ28, IJ31, IJ32, IJ33 | ||
surface of the | IJ34, IJ35, IJ36, IJ39 | |||
actuator between the | IJ40, IJ41 | |||
inlet and the nozzle. | ||||
Part of the | The actuator and a | Significant reductions in back- | Small increase in fabrication complexity | IJ07, IJ20, IJ26, IJ38 |
actuator moves | wall of the ink | flow can be achieved | ||
to shut off | chamber are arranged | Compact designs possible | ||
the inlet | so that the motion | |||
of the actuator | ||||
closes off the inlet. | ||||
Nozzle actuator | In some configura- | Ink back-flow problem is | None related to ink back-flow on | Silverbrook, EP 0771 |
does not result | tions of ink jet, | eliminated | actuation | 658 A2 and related |
in ink back-flow | there is no expan- | patent applications | ||
sion or movement of | Valve-jet | |||
an actuator which may | Tone-jet | |||
cause ink back-flow | IJ08, IJ13, IJ15, IJ17 | |||
through the inlet. | IJ18, IJ19, IJ21 | |||
Nozzle Clearing Method |
Nozzle Clearing | ||||
method | Description | Advantages | Disadvantages | Examples |
Normal nozzle | All of the nozzles are | No added complexity on the | May not be sufficient to displace dried | Most ink jet systems |
firing | fired periodically, | print head | ink | IJ01-IJ07, IJ09-IJ12 |
before the ink has a | IJ14, IJ16, IJ20, IJ22 | |||
chance to dry. When | IJ23-IJ34, IJ36-IJ45 | |||
not in use the nozzles | ||||
are sealed (capped) | ||||
against air. | ||||
The nozzle firing is | ||||
usually performed | ||||
during a special clear- | ||||
ing cycle, after first | ||||
moving the print head | ||||
to a cleaning station. | ||||
Extra power to | In systems which heat | Can be highly effective if the | Requires higher drive voltage for | Silverbrook, EP 0771 |
ink heater | the ink, but do not | heater is adjacent to the | clearing | 658 A2 and related |
boil it under normal | nozzle | May require larger drive transistors | patent applications | |
situations, nozzle | ||||
clearing can be | ||||
achieved by over- | ||||
powering the heater | ||||
and boiling ink at | ||||
the nozzle. | ||||
Rapid succession | The actuator is fired | Does not require extra drive | Effectiveness depends substantially | May be used with: |
of actuator pulses | in rapid succession. | circuits on the print head | upon the configuration of the inkjet | IJ01-IJ07, IJ09-IJ11 |
In some configurations, | Can be readily controlled and | nozzle | IJ14, IJ16, IJ20, IJ22 | |
this may cause heat | initiated by digital logic | IJ23-IJ25, IJ27-IJ34 | ||
build-up at the nozzle | IJ36-IJ45 | |||
which boils the ink, | ||||
clearing the nozzle. | ||||
In other situations, | ||||
it may cause sufficient | ||||
vibrations to dislodge | ||||
clogged nozzles. | ||||
Extra power to | Where an actuator is | A simple solution where | Not suitable where there is a hard limit | May be used with: |
ink pushing | not normally driven | applicable | to actuator movement | IJ03, IJ09, IJ16, IJ20 |
actuator | to the limit of its | IJ23, IJ24, IJ25, IJ27 | ||
motion, nozzle clearing | IJ29, IJ30, IJ31, IJ32 | |||
may be assisted by | IJ39, IJ40, IJ41, IJ42 | |||
providing an enhanced | IJ43, IJ44, IJ45 | |||
drive signal to the | ||||
actuator. | ||||
Acoustic | An ultrasonic wave is | A high nozzle clearing | High implementation cost if system does | IJ08, IJ13, IJ15, IJ17 |
resonance | applied to the ink | capability can be achieved | not already include an acoustic actuator | IJ18, IJ19, IJ21 |
chamber. This wave is | May be implemented at very | |||
of an appropriate | low cost in systems which | |||
amplitude and fre- | already include acoustic | |||
quency to cause | actuators | |||
sufficient force at | ||||
the nozzle to clear | ||||
blockages. This is | ||||
easiest to achieve if | ||||
the ultrasonic wave | ||||
is at a resonant | ||||
frequency of the ink | ||||
cavity. | ||||
Nozzle clearing | A microfabricated plate | Can clear severely clogged | Accurate mechanical alignment is re- | Silverbrook, EP 0771 |
plate | is pushed against the | nozzles | quired | 658 A2 and related |
nozzles. The plate has | Moving parts are required | patent applications | ||
a post for every nozzle. | There is risk of damage to the nozzles | |||
The array of posts | Accurate fabrication is required | |||
Ink pressure pulse | The pressure of the | May be effective where other | Requires pressure pump or other | May be used with all IJ |
ink is temporarily | methods cannot be used | pressure actuator | series ink jets | |
increased so that ink | Expensive | |||
streams from all of | Wasteful of ink | |||
the nozzles. This may | ||||
be used in con- | ||||
junction with actuator | ||||
energizing. | ||||
Print head wiper | A flexible ‘blade’ | Effective for planar print head | Difficult to use if print head surface is | Many ink jet systems |
is wiped across the | surfaces | non-planar or very fragile | ||
print head surface. | Low cost | Requires mechanical parts | ||
The blade is usually | Blade can wear out in high volume print | |||
fabricated from a | systems | |||
flexible polymer, e.g. | ||||
rubber or synthetic | ||||
elastomer. | ||||
Separate ink | A separate heater is | Can be effective where other | Fabrication complexity | Can be used with many |
boiling heater | provided at the | nozzle clearing methods | IJ series ink jets | |
nozzle although the | cannot be used | |||
normal drop e-ection | Can be implemented at no | |||
mechanism does not | additional cost in some inkjet | |||
require it. The | configurations | |||
heaters do not require | ||||
individual drive | ||||
circuits, as many | ||||
nozzles can be cleared | ||||
simultaneously, and | ||||
no imaging is required. | ||||
Nozzle plate construction |
Nozzle plate | ||||
construction | Description | Advantages | Disadvantages | Examples |
Electroformed | A nozzle plate is | Fabrication simplicity | High temperatures and pressures are | Hewlett Packard |
nickel | separately fabricated | required to bond nozzle plate | Thermal Inkjet | |
from electroformed | Minimum thickness constraints | |||
nickel, and bonded | Differential thermal expansion | |||
to the print head chip. | ||||
Laser ablated or | Individual nozzle holes | No masks required | Each hole must be individually formed | Canon Bubblejet |
drilled polymer | are ablated by an | Can be quite fast | Special equipment required | 1988 Sercel et al., |
intense UV laser in a | Some control over nozzle | Slow where there are many thousands | SPIE, Vol. 998 Excimer | |
nozzle plate, which | profile is possible | of nozzles per print head | Beam Applications, | |
is typically a polymer | Equipment required is | May produce thin burrs at exit holes | pp. 76-83 | |
such as polyimide or | relatively low cost | 1993 Watanabe et al., | ||
polysulphone | U.S. Pat. No. | |||
5,208,604 | ||||
Silicon micro- | A separate nozzle | High accuracy is attainable | Two part construction | K. Bean, IEEE |
machined | plate is micromachined | High cost | Transactions on | |
from single crystal | Requires precision alignment | Electron Devices, Vol. | ||
silicon, and bonded | Nozzles may be clogged by adhesive | ED-25, No. 10, 1978, | ||
to the print head | pp 1185-1195 | |||
wafer. | Xerox 1990 Hawkins et | |||
al., U.S. Pat. No. | ||||
4,899,181 | ||||
Glass | Fine glass capillaries | No expensive equipment | Very small nozzle sizes are difficult to | 1970 Zoltan U.S. |
capillaries | are drawn from glass | required | form | Pat. No. 3,683,212 |
tubing. This method | Simple to make single nozzles | Not suited for mass production | ||
has been used for | ||||
making individual | ||||
nozzles, but is | ||||
difficult to use for | ||||
bulk manufacturing of | ||||
print heads with | ||||
thousands of nozzles. | ||||
Monolithic, | The nozzle plate is | High accuracy (<1 μm) | Requires sacrificial layer under the | Silverbrook, EP 0771 |
surface micro- | deposited as a layer | Monolithic | nozzle plate to form the nozzle chamber | 658 A2 and related |
machined using | using standard VLSI | Low cost | Surface may be fragile to the touch | patent applications |
VLSI litho- | deposition techniques. | Existing processes can be | IJ01, IJ02, IJ04, IJ11 | |
graphic | Nozzles are etched in | used | IJ12, IJ17, IJ18, IJ20 | |
processes | the nozzle plate using | IJ22, IJ24, IJ27, IJ28 | ||
VLSI lithography and | IJ29, IJ30, IJ31, IJ32 | |||
etching. | IJ33, IJ34, IJ36, IJ37 | |||
IJ38, IJ39, IJ40, IJ41 | ||||
IJ42, IJ43, IJ44 | ||||
Monolithic, | The nozzle plate is a | High accuracy (<1 μm) | Requires long etch times | IJ03, IJ05, IJ06, IJ07 |
etched through | buried etch stop in | Monolithic | Requires a support wafer | IJ08, IJ09, IJ10, IJ13 |
substrate | the wafer. Nozzle | Low cost | IJ14, IJ15, IJ16, IJ19 | |
chambers are etched in | No differential expansion | IJ21, IJ23, IJ25, IJ26 | ||
the front of the | ||||
wafer, and the wafer | ||||
is thinned from the | ||||
back side. Nozzles are | ||||
then etched in the | ||||
etch stop layer. | ||||
No nozzle plate | Various methods have | No nozzles to become clogged | Difficult to control drop position accu- | Ricoh 1995 Sekiya et al |
been tried to eliminate | rately | U.S. Pat. No. 5,412,413 | ||
the nozzles entirely, | Crosstalk problems | 1993 Hadimioglu et al | ||
to prevent nozzle | EUP 550,192 | |||
clogging. These include | 1993 Elrod et al EUP | |||
thermal bubble mecha- | 572,220 | |||
nisms and acoustic lens | ||||
mechanisms | ||||
Trough | Each drop ejector has | Reduced manufacturing | Drop firing direction is sensitive to | IJ35 |
a trough through | complexity | wicking. | ||
which a paddle moves. | Monolithic | |||
There is no nozzle | ||||
plate. | ||||
Nozzle slit | The elimination of | No nozzles to become clogged | Difficult to control drop position accu- | 1989 Saito et al |
instead of | nozzle holes and | rately | U.S. Pat. No. | |
individual | replacement by a | Crosstalk problems | 4,799,068 | |
nozzles | slit encompassing | |||
many actuator posi- | ||||
tions reduces nozzle | ||||
clogging, but in- | ||||
creases crosstalk due | ||||
to ink surface waves | ||||
Drop ejection direction |
Ejection | ||||
direction | Description | Advantages | Disadvantages | Examples |
Edge | Ink flow is along the | Simple construction | Nozzles limited to edge | Canon Bubblejet 1979 |
(‘edge shooter’) | surface of the chip, | No silicon etching required | High resolution is difficult | Endo et al GB patent |
and ink drops are | Good heat sinking via sub- | Fast color printing requires one print | 2,007,162 | |
ejected from the chip | strate | head per color | Xerox heater-in-pit 1990 | |
edge. | Mechanically strong | Hawkins et al U.S. | ||
Ease of chip handing | Pat. No. 4,899,181 | |||
Tone-jet | ||||
Surface | Ink flow is along the | No bulk silicon etching | Maximum ink flow is severely restricted | Hewlett-Packard TIJ |
(‘roof shooter’) | surface of the chip, | required | 1982 Vaught et al | |
and ink drops are | Silicon can make an effective | U.S. Pat. No. | ||
ejected from the chip | heat sink | 4,490,728 | ||
surface, normal to | Mechanical strength | IJ02, IJ11, IJ12, IJ20 | ||
the plane of the chip. | IJ22 | |||
Through chip, | Ink flow is through | High ink flow | Requires bulk silicon etching | Silverbrook, EP 0771 |
forward | the chip, and ink | Suitable for pagewidth print | 658 A2 and related | |
(‘up shooter’) | drops are ejected | High nozzle packing density | patent applications | |
from the front sur- | therefore low manufacturing | IJ04, IJ17, IJ18, IJ24 | ||
face of the chip. | cost | IJ27-IJ45 | ||
Through chip, | Ink flow is through | High ink flow | Requires wafer thinning | IJ01, IJ03, IJ05, IJ06 |
reverse | the chip, and ink | Suitable for pagewidth print | Requires special handling during | IJ07, IJ08, IJ09, IJ10 |
(‘down shooter’) | drops are ejected | High nozzle packing density | manufacture | IJ13, IJ14, IJ15, IJ16 |
from the rear surface | therefore low manufacturing | IJ19, IJ21, IJ23, IJ25 | ||
of the chip. | cost | IJ26 | ||
Through actuator | Ink flow is through | Suitable for piezoelectric | Pagewidth print heads require several | Epson Stylus |
the actuator, which | print heads | thousand connections to drive circuits | Tektronix hot melt | |
is not fabricated as | Cannot be manufactured in standard | piezoelectric ink jets | ||
part of the same | CMOS fabs | |||
substrate as the | Complex assembly required | |||
drive transistors. | ||||
Ink type |
Ink type | Description | Advantages | Disadvantages | Examples |
Aqueous, dye | Water based ink | Environmentally friendly | Slow drying | Most existing inkjets |
which typically | No odor | Corrosive | All IJ series ink jets | |
contains: water, | Bleeds on paper | Silverbrook, EP 0771 | ||
dye, surfactant, | May strikethrough | 658 A2 and related | ||
humectant, and | Cockles paper | patent applications | ||
biocide. | ||||
Modern ink dyes | ||||
have high water- | ||||
fastness, light | ||||
fastness | ||||
Aqueous, pigment | Water based ink | Environmentally friendly | Slow drying | IJ02, IJ04, IJ21, IJ26 |
which typically | No odor | Corrosive | IJ27, IJ30 | |
contains: water, | Reduced bleed | Pigment may clog nozzles | Silverbrook, EP 0771 | |
pigment, surfactant, | Reduced wicking | Pigment may clog actuator mechanisms | 658 A2 and related | |
humectant, and | Reduced strikethrough | Cockles paper | patent applications | |
biocide. | Piezoelectric ink-jets | |||
Pigments have an | Thermal ink jets (with | |||
advantage in reduced | significant | |||
bleed, wicking | restrictions) | |||
and strikethrough. | ||||
Methyl Ethyl | MEK is a highly vola- | Very fast drying | Odorous | All IJ series ink jets |
Ketone (MEK) | tile solvent used for | Prints on various substrates | Flammable | |
industrial printing | such as metals and plastics | |||
on difficult surfaces | ||||
such as aluminum cans. | ||||
Alcohol | Alcohol based inks | Fast drying | Slight odor | All IJ series ink jets |
(ethanol, 2- | can be used where | Operates at sub-freezing | Flammable | |
butanol, and | the printer must | temperatures | ||
others) | operate at tempera- | Reduced paper cockle | ||
tures below the | Low cost | |||
freezing point of | ||||
water. An example of | ||||
this is in-camera | ||||
consumer photographic | ||||
printing. | ||||
Phase change | The ink is solid at | No drying time - ink instantly | High viscosity | Tektronix hot melt |
(hot melt) | room temperature, and | freezes on the print medium | Printed ink typically has a ‘waxy’ feel | piezoelectric ink jets |
is melted in the | Almost any print medium can | Printed pages may ‘block’ | 1989 Nowak U.S. Pat. | |
print head before jet- | be used | Ink temperature may be above the curie | No. 4,820,346 | |
ting. Hot melt inks | No paper cockle occurs | point of permanent magnets | All IJ series ink jets | |
are usually wax based, | No wicking occurs | Ink heaters consume power | ||
with a melting point | No bleed occurs | Long warm-up time | ||
around 80° C. After | No strikethrough occurs | |||
jetting the ink freezes | ||||
almost instantly upon | ||||
contacting the print | ||||
medium or a transfer | ||||
roller. | ||||
Oil | Oil based inks are | High solubility medium for | High viscosity: this is a significant | All IJ series ink jets |
extensively used in | some dyes | limitation for use in inkjets, which | ||
offset printing. They | Does not cockle paper | usually require a low viscosity. Some | ||
have advantages in | Does not wick through paper | short chain and multi-branched oils | ||
improved characteris- | have a sufficiently low viscosity. | |||
tics on paper (especi- | Slow drying | |||
ally no wicking or | ||||
cockle). Oil soluble | ||||
dies and pigments are | ||||
required. | ||||
Microemulsion | A microemulsion is a | Stops ink bleed | Viscosity higher than water | All IJ series ink jets |
stable, self forming | High dye solubility | Cost is slightly higher than water based | ||
emulsion of oil, water, | Water, oil, and amphiphilic | ink | ||
and surfactant. The | soluble dies can be used | High surfactant concentration required | ||
characteristic drop | Can stabilize pigment | (around 5%) | ||
size is less than | | |||
100 nm, and is deter- | ||||
mined by the preferred | ||||
curvature of the | ||||
surfactant. | ||||
Ink Jet Printing
Austra- | |||
lian | |||
Provi- | US Patent/Patent | ||
sional | Application | ||
Number | Filing Date | Title | and Filing Date |
PO8066 | 15 Jul. 1997 | Image Creation Method | 6,227,652 |
and Apparatus (IJ01) | (Jul. 10, 1998) | ||
PO8072 | 15 Jul. 1997 | Image Creation Method | 6,213,588 |
and Apparatus (IJ02) | (Jul. 10, 1998) | ||
PO8040 | 15 Jul. 1997 | Image Creation Method | 6,213,589 |
and Apparatus (IJ03) | (Jul. 10, 1998) | ||
PO8071 | 15 Jul. 1997 | Image Creation Method | 6,231,163 |
and Apparatus (IJ04) | (Jul. 10, 1998) | ||
PO8047 | 15 Jul. 1997 | Image Creation Method | 6,247,795 |
and Apparatus (IJ05) | (Jul. 10, 1998) | ||
PO8035 | 15 Jul. 1997 | Image Creation Method | 6,394,581 |
and Apparatus (IJ06) | (Jul. 10, 1998) | ||
PO8044 | 15 Jul. 1997 | Image Creation Method | 6,244,691 |
and Apparatus (IJ07) | (Jul. 10, 1998) | ||
PO8063 | 15 Jul. 1997 | Image Creation Method | 6,257,704 |
and Apparatus (IJ08) | (Jul. 10, 1998) | ||
PO8057 | 15 Jul. 1997 | Image Creation Method | 6,416,168 |
and Apparatus (IJ09) | (Jul. 10, 1998) | ||
PO8056 | 15 Jul. 1997 | Image Creation Method | 6,220,694 |
and Apparatus (IJ10) | (Jul. 10, 1998) | ||
PO8069 | 15 Jul. 1997 | Image Creation Method | 6,257,705 |
and Apparatus (IJ11) | (Jul. 10, 1998) | ||
PO8049 | 15 Jul. 1997 | Image Creation Method | 6,247,794 |
and Apparatus (U12) | (Jul. 10, 1998) | ||
PO8036 | 15 Jul. 1997 | Image Creation Method | 6,234,610 |
and Apparatus (IJ13) | (Jul. 10, 1998) | ||
PO8048 | 15 Jul. 1997 | Image Creation Method | 6,247,793 |
and Apparatus (IJ14) | (Jul. 10, 1998) | ||
PO8070 | 15 Jul. 1997 | Image Creation Method | 6,264,306 |
and Apparatus (IJ15) | (Jul. 10, 1998) | ||
PO8067 | 15 Jul. 1997 | Image Creation Method | 6,241,342 |
and Apparatus (IJ16) | (Jul. 10, 1998) | ||
PO8001 | 15 Jul. 1997 | Image Creation Method | 6,247,792 |
and Apparatus (IJ17) | (Jul. 10, 1998) | ||
PO8038 | 15 Jul. 1997 | Image Creation Method | 6,264,307 |
and Apparatus (IJ18) | (Jul. 10, 1998) | ||
PO8033 | 15 Jul. 1997 | Image Creation Method | 6,254,220 |
and Apparatus (IJ19) | (Jul. 10, 1998) | ||
PO8002 | 15 Jul. 1997 | Image Creation Method | 6,234,611 |
and Apparatus (IJ20) | (Jul. 10, 1998) | ||
PO8068 | 15 Jul. 1997 | Image Creation Method | 6,302,528 |
and Apparatus (IJ21) | (Jul. 10, 1998) | ||
PO8062 | 15 Jul. 1997 | Image Creation Method | 6,283,582 |
and Apparatus (IJ22) | (Jul. 10, 1998) | ||
PO8034 | 15 Jul. 1997 | Image Creation Method | 6,239,821 |
and Apparatus (IJ23) | (Jul. 10, 1998) | ||
PO8039 | 15 Jul. 1997 | Image Creation Method | 6,338,547 |
and Apparatus (IJ24) | (Jul. 10, 1998) | ||
PO8041 | 15 Jul. 1997 | Image Creation Method | 6,247,796 |
and Apparatus (IJ25) | (Jul. 10, 1998) | ||
PO8004 | 15 Jul. 1997 | Image Creation Method | 09/113,122 |
and Apparatus (IJ26) | (Jul. 10, 1998) | ||
PO8037 | 15 Jul. 1997 | Image Creation Method | 6,390,603 |
and Apparatus (IJ27) | (Jul. 10, 1998) | ||
PO8043 | 15 Jul. 1997 | Image Creation Method | 6,362,843 |
and Apparatus (IJ28) | (Jul. 10, 1998) | ||
PO8042 | 15 Jul. 1997 | Image Creation Method | 6,293,653 |
and Apparatus (IJ29) | (Jul. 10, 1998) | ||
PO8064 | 15 Jul. 1997 | Image Creation Method | 6,312,107 |
and Apparatus (IJ30) | (Jul. 10, 1998) | ||
PO9389 | 23 Sep. 1997 | Image Creation Method | 6,227,653 |
and Apparatus (IJ31) | (Jul. 10, 1998) | ||
PO9391 | 23 Sep. 1997 | Image Creation Method | 6,234,609 |
and Apparatus (IJ32) | (Jul. 10, 1998) | ||
PP0888 | 12 Dec. 1997 | Image Creation Method | 6,238,040 |
and Apparatus (IJ33) | (Jul. 10, 1998) | ||
PP0891 | 12 Dec. 1997 | Image Creation Method | 6,188,415 |
and Apparatus (IJ34) | (Jul. 10, 1998) | ||
PP0890 | 12 Dec. 1997 | Image Creation Method | 6,227,654 |
and Apparatus (IJ35) | (Jul. 10, 1998) | ||
PP0873 | 12 Dec. 1997 | Image Creation Method | 6,209,989 |
and Apparatus (IJ36) | (Jul. 10, 1998) | ||
PP0993 | 12 Dec. 1997 | Image Creation Method | 6,247,791 |
and Apparatus (IJ37) | (Jul. 10, 1998) | ||
PP0890 | 12 Dec. 1997 | Image Creation Method | 6,336,710 |
and Apparatus (IJ38) | (Jul. 10, 1998) | ||
PP1398 | 19 Jan. 1998 | An Image Creation | 6,217,153 |
Method and Apparatus | (Jul. 10, 1998) | ||
(IJ39) | |||
PP2592 | 25 Mar. 1998 | An Image Creation | 6,416,167 |
Method and Apparatus | (Jul. 10, 1998) | ||
(IJ40) | |||
PP2593 | 25 Mar. 1998 | Image Creation Method | 6,243,113 |
and Apparatus (IJ41) | (Jul. 10, 1998) | ||
PP3991 | 9 Jun. 1998 | Image Creation Method | 6,283,581 |
and Apparatus (IJ42) | (Jul. 10, 1998) | ||
PP3987 | 9 Jun. 1998 | Image Creation Method | 6,247,790 |
and Apparatus (IJ43) | (Jul. 10, 1998) | ||
PP3985 | 9 Jun. 1998 | Image Creation Method | 6,260,953 |
and Apparatus (IJ44) | (Jul. 10, 1998) | ||
PP3983 | 9 Jun. 1998 | Image Creation Method | 6,267,469 |
and Apparatus (IJ45) | (Jul. 10, 1998) | ||
Ink Jet Manufacturing
Austral- | US Patent/ | ||
ian | Patent | ||
Provi- | Application | ||
sional | and Filing | ||
Number | Filing Date | Title | Date |
PO7935 | 15 Jul. 1997 | A Method of Manufacture | 6,224,780 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM01) | |||
PO7936 | 15 Jul. 1997 | A Method of Manufacture | 6,235,212 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM02) | |||
PO7937 | 15 Jul. 1997 | A Method of Manufacture | 6,280,643 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM03) | |||
PO8061 | 15 Jul. 1997 | A Method of Manufacture | 6,284,147 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM04) | |||
PO8054 | 15 Jul. 1997 | A Method of Manufacture | 6,214,244 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM05) | |||
PO8065 | 15 Jul. 1997 | A Method of Manufacture | 6,071,750 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM06) | |||
PO8055 | 15 Jul. 1997 | A Method of Manufacture | 6,267,905 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM07) | |||
PO8053 | 15 Jul. 1997 | A Method of Manufacture | 6,251,298 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM08) | |||
PO8078 | 15 Jul. 1997 | A Method of Manufacture | 6,258,285 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM09) | |||
PO7933 | 15 Jul. 1997 | A Method of Manufacture | 6,225,138 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM10) | |||
PO7950 | 15 Jul. 1997 | A Method of Manufacture | 6,241,904 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM11) | |||
PO7949 | 15 Jul. 1997 | A Method of Manufacture | 6,299,786 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM12) | |||
PO8060 | 15 Jul. 1997 | A Method of Manufacture | 09/113,124 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM13) | |||
PO8059 | 15 Jul. 1997 | A Method of Manufacture | 6,231,773 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM14) | |||
PO8073 | 15 Jul. 1997 | A Method of Manufacture | 6,190,931 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM15) | |||
PO8076 | 15 Jul. 1997 | A Method of Manufacture | 6,248,249 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM16) | |||
PO8075 | 15 Jul. 1997 | A Method of Manufacture | 6,290,862 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM17) | |||
PO8079 | 15 Jul. 1997 | A Method of Manufacture | 6,241,906 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM18) | |||
PO8050 | 15 Jul. 1997 | A Method of Manufacture | 6,565,762 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM19) | |||
PO8052 | 15 Jul. 1997 | A Method of Manufacture | 6,241,905 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM20) | |||
PO7948 | 15 Jul. 1997 | A Method of Manufacture | 6,451,216 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM21) | |||
PO7951 | 15 Jul. 1997 | A Method of Manufacture | 6,231,772 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM22) | |||
PO8074 | 15 Jul. 1997 | A Method of Manufacture | 6,274,056 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM23) | |||
PO7941 | 15 Jul. 1997 | A Method of Manufacture | 6,290,861 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM24) | |||
PO8077 | 15 Jul. 1997 | A Method of Manufacture | 6,248,248 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM25) | |||
PO8058 | 15 Jul. 1997 | A Method of Manufacture | 6,306,671 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM26) | |||
PO8051 | 15 Jul. 1997 | A Method of Manufacture | 6,331,258 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM27) | |||
PO8045 | 15 Jul. 1997 | A Method of Manufacture | 6,110,754 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM28) | |||
PO7952 | 15 Jul. 1997 | A Method of Manufacture | 6,294,101 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM29) | |||
PO8046 | 15 Jul. 1997 | A Method of Manufacture | 6,416,679 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM30) | |||
PO8503 | 11 Aug. 1997 | A Method of Manufacture | 6,264,849 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM30a) | |||
PO9390 | 23 Sep. 1997 | A Method of Manufacture | 6,254,793 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM31) | |||
PO9392 | 23 Sep. 1997 | A Method of Manufacture | 6,235,211 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM32) | |||
PP0889 | 12 Dec. 1997 | A Method of Manufacture | 6,235,211 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM35) | |||
PP0887 | 12 Dec. 1997 | A Method of Manufacture | 6,264,850 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM36) | |||
PP0882 | 12 Dec. 1997 | A Method of Manufacture | 6,258,284 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM37) | |||
PP0874 | 12 Dec. 1997 | A Method of Manufacture | 6,258,284 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM38) | |||
PP1396 | 19 Jan. 1998 | A Method of Manufacture | 6,228,668 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM39) | |||
PP2591 | 25 Mar. 1998 | A Method of Manufacture | 6,180,427 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM41) | |||
PP3989 | 9 Jun. 1998 | A Method of Manufacture | 6,171,875 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM40) | |||
PP3990 | 9 Jun. 1998 | A Method of Manufacture | 6,267,904 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM42) | |||
PP3986 | 9 Jun. 1998 | A Method of Manufacture | 6,245,247 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM43) | |||
PP3984 | 9 Jun. 1998 | A Method of Manufacture | 6,245,247 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM44) | |||
PP3982 | 9 Jun. 1998 | A Method of Manufacture | 6,231,148 |
of an Image Creation | (Jul. 10, 1998) | ||
Apparatus (IJM45) | |||
Fluid Supply
Australian | US Patent/Patent | ||
Provisional | Application and | ||
Number | Filing Date | Title | |
PO8003 | |||
15 Jul. 1997 | Supply Method and | 6,350,023 | |
Apparatus (F1) | (Jul. 10, 1998) | ||
PO8005 | 15 Jul. 1997 | Supply Method and | 6,318,849 |
Apparatus (F2) | (Jul. 10, 1998) | ||
PO9404 | 23 Sep. 1997 | A Device and | 09/113,101 |
Method (F3) | (Jul. 10, 1998) | ||
MEMS Technology
Australian | US Patent/Patent | ||
Provisional | Application and | ||
Number | Filing Date | Title | |
PO7943 | |||
15 Jul. 1997 | A device (MEMS01) | ||
| 15 Jul. 1997 | A device (MEMS02) | 6,087,638 |
(Jul. 10, 1998) | |||
PO8007 | 15 Jul. 1997 | A device (MEMS03) | 09/113,093 |
(Jul. 10, 1998) | |||
PO8008 | 15 Jul. 1997 | A device (MEMS04) | 6,340,222 |
(Jul. 10, 1998) | |||
PO8010 | 15 Jul. 1997 | A device (MEMS05) | 6,041,600 |
(Jul. 10, 1998) | |||
| 15 Jul. 1997 | A device (MEMS06) | 6,299,300 |
(Jul. 10, 1998) | |||
| 15 Jul. 1997 | A device (MEMS07) | 6,067,797 |
(Jul. 10, 1998) | |||
PO7945 | 15 Jul. 1997 | A device (MEMS08) | Not filed |
| 15 Jul. 1997 | A device (MEMS09) | 6,286,935 |
(Jul. 10, 1998) | |||
PO7946 | 15 Jul. 1997 | A device (MEMS10) | 6,044,646 |
(Jul. 10, 1998) | |||
PO9393 | 23 Sep. 1997 | A Device and | 09/113,065 |
Method (MEMS11) | (Jul. 10, 1998) | ||
| 12 Dec. 1997 | A device (MEMS12) | 09/113,078 |
(Jul. 10, 1998) | |||
| 12 Dec. 1997 | A Device and | 09/113,075 |
Method (MEMS13) | (Jul. 10, 1998) | ||
IR Technologies
Austral- | US Patent/ | ||
ian | Patent | ||
Provis- | Application | ||
ional | and Filing | ||
Number | Filing Date | Title | Date |
PP0895 | 12 Dec. 1997 | An Image Creation | 6,231,148 |
Method and | (Jul. 10, 1998) | ||
Apparatus (IR01) | |||
PP0870 | 12 Dec. 1997 | A Device and | 09/113,106 |
Method (IR02) | (Jul. 10, 1998) | ||
PP0869 | 12 Dec. 1997 | A Device and | 6,293,658 |
Method (IR04) | (Jul. 10, 1998) | ||
PP0887 | 12 Dec. 1997 | Image Creation | 09/113,104 |
Method and | (Jul. 10, 1998) | ||
Apparatus (IR05) | |||
PP0885 | 12 Dec. 1997 | An Image | 6,238,033 |
Production | (Jul. 10, 1998) | ||
System (IR06) | |||
PP0884 | 12 Dec. 1997 | Image Creation | 6,312,070 |
Method and | (Jul. 10, 1998) | ||
Apparatus (IR10) | |||
PP0886 | 12 Dec. 1997 | Image Creation | 6,238,111 |
Method and | (Jul. 10, 1998) | ||
Apparatus (IR12) | |||
PP0871 | 12 Dec. 1997 | A Device and | 09/113,086 |
Method (IR13) | (Jul. 10, 1998) | ||
PP0876 | 12 Dec. 1997 | An Image | 09/113,094 |
Processing | (Jul. 10, 1998) | ||
Method and | |||
Apparatus (IR14) | |||
PP0877 | 12 Dec. 1997 | A Device and | 6,378,970 |
Method (IR16) | (Jul. 10, 1998) | ||
PP0878 | 12 Dec. 1997 | A Device and | 6,196,739 |
Method (IR17) | (Jul. 10, 1998) | ||
PP0879 | 12 Dec. 1997 | A Device and | 09/112,774 |
Method (IR18) | (Jul. 10, 1998) | ||
PP0883 | 12 Dec. 1997 | A Device and | 6,270,182 |
Method (IR19) | (Jul. 10, 1998) | ||
PP0880 | 12 Dec. 1997 | A Device and | 6,152,619 |
Method (IR20) | (Jul. 10, 1998) | ||
PP0881 | 12 Dec. 1997 | A Device and | 09/113,092 |
Method (IR21) | (Jul. 10, 1998) | ||
DotCard Technologies
Austra- | US Patent/ | ||
lian | Patent | ||
Provis- | Application | ||
ional | and Filing | ||
Number | Filing Date | | Date |
PP2370 | |||
16 Mar. 1998 | Data Processing | 09/112,781 | |
Method and | (Jul. 10, 1998) | ||
Apparatus (Dot01) | |||
| 16 Mar. 1998 | Data Processing | 09/113,052 |
Method and | (Jul. 10, 1998) | ||
Apparatus | |||
(Dot02) | |||
Artcam Technologies
Australian | US Patent/Patent | ||
Provisional | Application and | ||
Number | Filing Date | Title | Filing Date |
PO7991 | 15 Jul. 1997 | Image Processing Method | 09/113,060 |
and Apparatus (ART01) | (Jul. 10, 1998) | ||
PO7988 | 15 Jul. 1997 | Image Processing Method | 6,476,863 |
and Apparatus (ART02) | (Jul. 10, 1998) | ||
PO7993 | 15 Jul. 1997 | Image Processing Method | 09/113,073 |
and Apparatus (ART03) | (Jul. 10, 1998) | ||
PO9395 | 23 Sep. 1997 | Data Processing Method | 6,322,181 |
and Apparatus (ART04) | (Jul. 10, 1998) | ||
PO8017 | 15 Jul. 1997 | Image Processing Method | 6,597,817 |
and Apparatus (ART06) | (Jul. 10, 1998) | ||
PO8014 | 15 Jul. 1997 | Media Device (ART07) | 6,227,648 |
(Jul. 10, 1998) | |||
PO8025 | 15 Jul. 1997 | Image Processing Method | 09/112,750 |
and Apparatus (ART08) | (Jul. 10, 1998) | ||
PO8032 | 15 Jul. 1997 | Image Processing Method | 6,690,419 |
and Apparatus (ART09) | (Jul. 10, 1998) | ||
PO7999 | 15 Jul. 1997 | Image Processing Method | 09/112,743 |
and Apparatus (ART10) | (Jul. 10, 1998) | ||
PO7998 | 15 Jul. 1997 | Image Processing Method | 09/112,742 |
and Apparatus (ART11) | (Jul. 10, 1998) | ||
PO8031 | 15 Jul. 1997 | Image Processing Method | 09/112,741 |
and Apparatus (ART12) | (Jul. 10, 1998) | ||
PO8030 | 15 Jul. 1997 | Media Device (ART13) | 6,196,541 |
(Jul. 10, 1998) | |||
PO7997 | 15 Jul. 1997 | Media Device (ART15) | 6,195,150 |
(Jul. 10, 1998) | |||
PO7979 | 15 Jul. 1997 | Media Device (ART16) | 6,362,868 |
(Jul. 10, 1998) | |||
PO8015 | 15 Jul. 1997 | Media Device (ART17) | 09/112,738 |
(Jul. 10, 1998) | |||
PO7978 | 15 Jul. 1997 | Media Device (ART18) | 09/113,067 |
(Jul. 10, 1998) | |||
PO7982 | 15 Jul 1997 | Data Processing Method | 6,431,669 |
and Apparatus (ART 19) | (Jul. 10, 1998) | ||
PO7989 | 15 Jul. 1997 | Data Processing Method | 6,362,869 |
and Apparatus (ART20) | (Jul. 10, 1998) | ||
PO8019 | 15 Jul. 1997 | Media Processing Method | 6,472,052 |
and Apparatus (ART21) | (Jul. 10, 1998) | ||
PO7980 | 15 Jul. 1997 | Image Processing Method | 6,356,715 |
and Apparatus (ART22) | (Jul. 10, 1998) | ||
PO8018 | 15 Jul. 1997 | Image Processing Method | 09/112,777 |
and Apparatus (ART24) | (Jul. 10, 1998) | ||
PO7938 | 15 Jul. 1997 | Image Processing Method | 6,636,216 |
and Apparatus (ART25) | (Jul. 10, 1998) | ||
PO8016 | 15 Jul. 1997 | Image Processing Method | 6,366,693 |
and Apparatus (ART26) | (Jul. 10, 1998) | ||
PO8024 | 15 Jul. 1997 | Image Processing Method | 6,329,990 |
and Apparatus (ART27) | (Jul. 10, 1998) | ||
PO7940 | 15 Jul. 1997 | Data Processing Method | 09/113,072 |
and Apparatus (ART28) | (Jul. 10, 1998) | ||
PO7939 | 15 Jul. 1997 | Data Processing Method | 6,459,495 |
and Apparatus (ART29) | (Jul. 10, 1998) | ||
PO8501 | 11 Aug. 1997 | Image Processing Method | 6,137,500 |
and Apparatus (ART30) | (Jul. 10, 1998) | ||
PO8500 | 11 Aug. 1997 | Image Processing Method | 6,690,416 |
and Apparatus (ART31) | (Jul. 10, 1998) | ||
PO7987 | 15 Jul. 1997 | Data Processing Method | 09/113,071 |
and Apparatus (ART32) | (Jul. 10, 1998) | ||
PO8022 | 15 Jul. 1997 | Image Processing Method | 6,398,328 |
and Apparatus (ART33) | (Jul. 10, 1998) | ||
PO8497 | 11 Aug. 1997 | Image Processing Method | 09/113,090 |
and Apparatus (ART34) | (Jul. 10, 1998) | ||
PO8020 | 15 Jul. 1997 | Data Processing Method | 6,431,704 |
and Apparatus (ART38) | (Jul. 10, 1998) | ||
PO8023 | 15 Jul. 1997 | Data Processing Method | 09/113,222 |
and Apparatus (ART39) | (Jul. 10, 1998) | ||
PO8504 | 11 Aug. 1997 | Image Processing Method | 09/112,786 |
and Apparatus (ART42) | (Jul. 10, 1998) | ||
PO8000 | 15 Jul. 1997 | Data Processing Method | 6,415,054 |
and Apparatus (ART43) | (Jul. 10, 1998) | ||
PO7977 | 15 Jul. 1997 | Data Processing Method | 09/112,782 |
and Apparatus (ART44) | (Jul. 10, 1998) | ||
PO7934 | 15 Jul. 1997 | Data Processing Method | 6,665,454 |
and Apparatus (ART45) | (Jul. 10, 1998) | ||
PO7990 | 15 Jul. 1997 | Data Processing Method | 09/113,059 |
and Apparatus (ART46) | (Jul. 10, 1998) | ||
PO8499 | 11 Aug. 1997 | Image Processing Method | 6,486,886 |
and Apparatus (ART47) | (Jul. 10, 1998) | ||
PO8502 | 11 Aug. 1997 | Image Processing Method | 6,381,361 |
and Apparatus (ART48) | (Jul. 10, 1998) | ||
PO7981 | 15 Jul. 1997 | Data Processing Method | 6,317,192 |
and Apparatus (ART50) | (Jul. 10, 1998) | ||
PO7986 | 15 Jul. 1997 | Data Processing Method | 09/113,057 |
and Apparatus (ART51) | (Jul. 10, 1998) | ||
PO7983 | 15 Jul. 1997 | Data Processing Method | 09/113,054 |
and Apparatus (ART52) | (Jul. 10, 1998) | ||
PO8026 | 15 Jul. 1997 | Image Processing Method | 6,646,757 |
and Apparatus (ART53) | (Jul. 10, 1998) | ||
PO8027 | 15 Jul. 1997 | Image Processing Method | 09/112,759 |
and Apparatus (ART54) | (Jul. 10, 1998) | ||
PO8028 | 15 Jul. 1997 | Image Processing Method | 6,624,848 |
and Apparatus (ART56) | (Jul. 10, 1998) | ||
PO9394 | 23 Sep. 1997 | Image Processing Method | 6,357,135 |
and Apparatus (ART57) | (Jul. 10, 1998) | ||
PO9396 | 23 Sep. 1997 | Data Processing Method | 09/113,107 |
and Apparatus (ART58) | (Jul. 10, 1998) | ||
PO9397 | 23 Sep. 1997 | Data Processing Method | 6,271,931 |
and Apparatus (ART59) | (Jul. 10, 1998) | ||
PO9398 | 23 Sep. 1997 | Data Processing Method | 6,353,772 |
and Apparatus (ART60) | (Jul. 10, 1998) | ||
PO9399 | 23 Sep. 1997 | Data Processing Method | 6,106,147 |
and Apparatus (ART61) | (Jul. 10, 1998) | ||
PO9400 | 23 Sep. 1997 | Data Processing Method | 6,665,008 |
and Apparatus (ART62) | (Jul. 10, 1998) | ||
PO9401 | 23 Sep. 1997 | Data Processing Method | 6,304,291 |
and Apparatus (ART63) | (Jul. 10, 1998) | ||
PO9402 | 23 Sep. 1997 | Data Processing Method | 09/112,788 |
and Apparatus (ART64) | (Jul. 10, 1998) | ||
PO9403 | 23 Sep. 1997 | Data Processing Method | 6,305,770 |
and Apparatus (ART65) | (Jul. 10, 1998) | ||
PO9405 | 23 Sep. 1997 | Data Processing Method | 6,289,262 |
and Apparatus (ART66) | (Jul. 10, 1998) | ||
PP0959 | 16 Dec. 1997 | A Data Processing Method | 6,315,200 |
and Apparatus (ART68) | (Jul. 10, 1998) | ||
PP1397 | 19 Jan. 1998 | A Media Device (ART69) | 6,217,165 |
(Jul. 10, 1998) | |||
Claims (6)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/804,042 US7453492B2 (en) | 1997-07-15 | 2004-03-19 | Portable hand held camera |
Applications Claiming Priority (6)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
AUPO7991A AUPO799197A0 (en) | 1997-07-15 | 1997-07-15 | Image processing method and apparatus (ART01) |
AUPO7991 | 1997-07-15 | ||
AUPO8505 | 1997-08-11 | ||
AUPO8505A AUPO850597A0 (en) | 1997-08-11 | 1997-08-11 | Image processing method and apparatus (art01a) |
US09/113,060 US6750901B1 (en) | 1997-08-11 | 1998-07-10 | Digital instant printing camera with image processing capability |
US10/804,042 US7453492B2 (en) | 1997-07-15 | 2004-03-19 | Portable hand held camera |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/113,060 Continuation US6750901B1 (en) | 1997-07-15 | 1998-07-10 | Digital instant printing camera with image processing capability |
Publications (2)
Publication Number | Publication Date |
---|---|
US20040183914A1 US20040183914A1 (en) | 2004-09-23 |
US7453492B2 true US7453492B2 (en) | 2008-11-18 |
Family
ID=32327191
Family Applications (7)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/113,060 Expired - Fee Related US6750901B1 (en) | 1997-07-15 | 1998-07-10 | Digital instant printing camera with image processing capability |
US10/683,041 Expired - Fee Related US7360865B2 (en) | 1997-08-11 | 2003-10-14 | Inkjet printhead with short nozzle |
US10/683,064 Expired - Fee Related US7488051B2 (en) | 1997-08-11 | 2003-10-14 | Monolithic inkjet printhead with high nozzle count |
US10/804,042 Expired - Fee Related US7453492B2 (en) | 1997-07-15 | 2004-03-19 | Portable hand held camera |
US12/324,817 Expired - Fee Related US7891775B2 (en) | 1997-08-11 | 2008-11-26 | Inkjet drop ejection apparatus with radially extending thermal actuators |
US12/980,204 Expired - Fee Related US8096642B2 (en) | 1997-08-11 | 2010-12-28 | Inkjet nozzle with paddle layer arranged between first and second wafers |
US13/350,791 Abandoned US20120113191A1 (en) | 1997-08-11 | 2012-01-15 | Printhead integrated circuit with a solenoid piston |
Family Applications Before (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/113,060 Expired - Fee Related US6750901B1 (en) | 1997-07-15 | 1998-07-10 | Digital instant printing camera with image processing capability |
US10/683,041 Expired - Fee Related US7360865B2 (en) | 1997-08-11 | 2003-10-14 | Inkjet printhead with short nozzle |
US10/683,064 Expired - Fee Related US7488051B2 (en) | 1997-08-11 | 2003-10-14 | Monolithic inkjet printhead with high nozzle count |
Family Applications After (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/324,817 Expired - Fee Related US7891775B2 (en) | 1997-08-11 | 2008-11-26 | Inkjet drop ejection apparatus with radially extending thermal actuators |
US12/980,204 Expired - Fee Related US8096642B2 (en) | 1997-08-11 | 2010-12-28 | Inkjet nozzle with paddle layer arranged between first and second wafers |
US13/350,791 Abandoned US20120113191A1 (en) | 1997-08-11 | 2012-01-15 | Printhead integrated circuit with a solenoid piston |
Country Status (2)
Country | Link |
---|---|
US (7) | US6750901B1 (en) |
AU (1) | AUPO850597A0 (en) |
Cited By (40)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060005160A1 (en) * | 1997-08-18 | 2006-01-05 | National Instruments Corporation | Image acquisition device |
US20060033841A1 (en) * | 2004-08-06 | 2006-02-16 | Park Dong-Sik | Display apparatus and control method thereof |
US20060072168A1 (en) * | 2004-09-02 | 2006-04-06 | Masafumi Okano | Method of controlling read address, physical information acquisition apparatus, and semiconductor device |
US20070011023A1 (en) * | 1997-07-15 | 2007-01-11 | Silverbrook Research Pty Ltd | Apparatus for authenticating the validity of a device |
US20080222430A1 (en) * | 2007-03-06 | 2008-09-11 | International Business Machines Corporation | Protection of Secure Electronic Modules Against Attacks |
US20090154765A1 (en) * | 2007-08-07 | 2009-06-18 | Takashi Watanabe | Information Display Device And Information Display Method |
US20090201379A1 (en) * | 2002-04-10 | 2009-08-13 | Schultz Kevin L | Smart Camera with Modular Expansion Capability Including a Function Module that Performs Image Processing |
US20090262149A1 (en) * | 1997-07-15 | 2009-10-22 | Silverbrook Research Pty Ltd | Print Media Cartridge For A Camera |
US20090313269A1 (en) * | 2008-06-16 | 2009-12-17 | Bachmann Todd Adam | Method and apparatus for generating hash mnemonics |
US20100004429A1 (en) * | 2006-03-23 | 2010-01-07 | Kirin Pharma Kabushiki Kaisha | Agonist antibody to human thrombopoietin receptor |
US20100201846A1 (en) * | 1997-07-15 | 2010-08-12 | Silverbrook Research Pty Ltd | Method of processing digital images in camera |
US20100207917A1 (en) * | 2007-09-26 | 2010-08-19 | Panasonic Corporation | Driving device, driving method and plasma display apparatus |
US7934494B1 (en) * | 2003-10-10 | 2011-05-03 | Donna Gail Schneider | Collapsible heating apparatus |
US20110103380A1 (en) * | 1999-03-31 | 2011-05-05 | Comcast Ip Holdings I, Llc | Method and Apparatus for Injecting Information Assets Into a Content Stream |
US20110122263A1 (en) * | 1997-07-15 | 2011-05-26 | Silverbrook Research Pty Ltd | Camera system for with velocity sensor and de-blurring processor |
US7984965B2 (en) | 1997-07-15 | 2011-07-26 | Silverbrook Research Pty Ltd | Print head unit with printhead and transport rollers |
US8016400B2 (en) | 1997-07-15 | 2011-09-13 | Silverbrook Research Pty Ltd | Ink reservoir |
US8020979B2 (en) | 2001-08-06 | 2011-09-20 | Silverbrook Research Pty Ltd | Cartridge with optically readalble print media and ink information |
US8068151B2 (en) * | 1997-07-15 | 2011-11-29 | Silverbrook Research Pty Ltd | Digital camera with card reader for reading program script |
US8077207B2 (en) | 1997-07-15 | 2011-12-13 | Silverbrook Research Pty Ltd | Camera unit incorporating a printer configured to print distorted images |
US8098285B2 (en) | 1997-07-15 | 2012-01-17 | Silverbrook Research Pty Ltd | Processor for image capture and printing |
US8096642B2 (en) | 1997-08-11 | 2012-01-17 | Silverbrook Research Pty Ltd | Inkjet nozzle with paddle layer arranged between first and second wafers |
US8102568B2 (en) | 1997-07-15 | 2012-01-24 | Silverbrook Research Pty Ltd | System for creating garments using camera and encoded card |
US20120197961A1 (en) * | 2007-04-13 | 2012-08-02 | Platform Computing Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US8274665B2 (en) | 1997-07-15 | 2012-09-25 | Silverbrook Research Pty Ltd | Image sensing and printing device |
US8285137B2 (en) | 1997-07-15 | 2012-10-09 | Silverbrook Research Pty Ltd | Digital camera system for simultaneous printing and magnetic recording |
US20140123208A1 (en) * | 2012-10-31 | 2014-05-01 | Google Inc. | Privacy aware camera and device status indicator system |
US8789939B2 (en) | 1998-11-09 | 2014-07-29 | Google Inc. | Print media cartridge with ink supply manifold |
US8866923B2 (en) | 1999-05-25 | 2014-10-21 | Google Inc. | Modular camera and printer |
US8896724B2 (en) | 1997-07-15 | 2014-11-25 | Google Inc. | Camera system to facilitate a cascade of imaging effects |
US8902333B2 (en) | 1997-07-15 | 2014-12-02 | Google Inc. | Image processing method using sensed eye position |
US8908075B2 (en) | 1997-07-15 | 2014-12-09 | Google Inc. | Image capture and processing integrated circuit for a camera |
US8936196B2 (en) | 1997-07-15 | 2015-01-20 | Google Inc. | Camera unit incorporating program script scanner |
US20160098359A1 (en) * | 2011-09-08 | 2016-04-07 | Lexmark International, Inc. | System and Method for Secured Host-slave Communication |
US20160229179A1 (en) * | 2013-10-15 | 2016-08-11 | Hewlett-Packard Development Company, L.P. | Authentication value for print head die based on analog device electrical characteristics |
US9484901B1 (en) * | 2014-10-27 | 2016-11-01 | Altera Corporation | Interpolation circuitry and methods |
US9767284B2 (en) | 2012-09-14 | 2017-09-19 | The Research Foundation For The State University Of New York | Continuous run-time validation of program execution: a practical approach |
US9767271B2 (en) | 2010-07-15 | 2017-09-19 | The Research Foundation For The State University Of New York | System and method for validating program execution at run-time |
US20170336826A1 (en) * | 1997-09-19 | 2017-11-23 | Glenn Rolus Borgward | Digital book |
US11036472B2 (en) * | 2017-11-08 | 2021-06-15 | Samsung Electronics Co., Ltd. | Random number generator generating random number by using at least two algorithms, and security device comprising the random number generator |
Families Citing this family (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP1119193A3 (en) | 2000-01-19 | 2010-11-24 | Sony Corporation | Data processing device for a video camera-recorder with integrated printer, and method for operating the printer |
US20020180997A1 (en) * | 2001-05-29 | 2002-12-05 | Imation Corp. | Embedding color profiles in raster image data using data hiding techniques |
WO2003028428A2 (en) * | 2001-09-10 | 2003-04-10 | University Of Virginia Patent Foundation | Method and apparatus application of metallic alloy coatings |
JP3876985B2 (en) * | 2002-09-18 | 2007-02-07 | オムロンエンタテインメント株式会社 | Photo sticker vending machine and image printing method |
KR100645640B1 (en) * | 2003-11-03 | 2006-11-15 | 삼성전기주식회사 | Diffractive thin-film piezoelectric micro-mirror and the manufacturing method |
US20050093979A1 (en) * | 2004-01-14 | 2005-05-05 | Tsai John C. | System for creating and storing digital images |
EP1706278A4 (en) | 2004-01-21 | 2011-03-09 | Silverbrook Res Pty Ltd | Self contained wallpaper printer |
US20050207660A1 (en) * | 2004-03-16 | 2005-09-22 | Sozotek, Inc. | System and method for reduction of compressed image artifacts |
US7105456B2 (en) * | 2004-10-29 | 2006-09-12 | Hewlett-Packard Development Company, Lp. | Methods for controlling feature dimensions in crystalline substrates |
US20060104507A1 (en) * | 2004-11-15 | 2006-05-18 | Sozotek, Inc. | Correction of image color levels |
US20060114479A1 (en) * | 2004-11-26 | 2006-06-01 | Sozotek, Inc. | Accelerated image enhancement |
US7796827B2 (en) * | 2004-11-30 | 2010-09-14 | Hewlett-Packard Development Company, L.P. | Face enhancement in a digital video |
US7769108B1 (en) | 2004-12-17 | 2010-08-03 | The United States Of America As Represented By The Secretary Of The Air Force | Digital receiver instantaneous dynamic range enhancement |
US20060238603A1 (en) * | 2005-04-26 | 2006-10-26 | Hewlett-Packard Development Company, L.P. | System and method for printing on light-sensitive media |
US7517046B2 (en) | 2005-05-09 | 2009-04-14 | Silverbrook Research Pty Ltd | Mobile telecommunications device with printhead capper that is held in uncapped position by media |
WO2007033397A1 (en) | 2005-09-19 | 2007-03-29 | Silverbrook Research Pty Ltd | Print remotely to a mobile device |
CA2632678A1 (en) * | 2005-12-16 | 2007-06-21 | Joshua Pines | Method, apparatus and system for providing reproducible digital imagery products |
DE102006022882B4 (en) * | 2006-05-15 | 2016-04-14 | Immobiliengesellschaft Helmut Fischer Gmbh & Co. Kg | Device for measuring the thickness of thin layers with a measuring probe |
US20080226281A1 (en) * | 2007-03-13 | 2008-09-18 | Real D | Business system for three-dimensional snapshots |
US8617960B2 (en) * | 2009-12-31 | 2013-12-31 | Texas Instruments Incorporated | Silicon microphone transducer |
CN103402907B (en) * | 2011-01-17 | 2016-03-23 | 新加坡科技研究局 | Microfluidic droplet generator |
US8633634B2 (en) * | 2011-11-18 | 2014-01-21 | The Board Of Regents Of The University Of Texas System | MEMs-based cantilever energy harvester |
US9181086B1 (en) | 2012-10-01 | 2015-11-10 | The Research Foundation For The State University Of New York | Hinged MEMS diaphragm and method of manufacture therof |
US9852941B2 (en) * | 2014-10-03 | 2017-12-26 | Analog Devices, Inc. | Stacked conductor structure and methods for manufacture of same |
CN113506731A (en) * | 2016-10-08 | 2021-10-15 | 北京北方华创微电子装备有限公司 | Manufacturing process of integrated circuit |
US10651112B2 (en) * | 2016-11-01 | 2020-05-12 | Massachusetts Institute Of Technology | Thermal management of RF devices using embedded microjet arrays |
JP2018079589A (en) * | 2016-11-14 | 2018-05-24 | セイコーエプソン株式会社 | Liquid detector and liquid container |
CN106712577B (en) * | 2017-03-31 | 2018-08-07 | 金陵科技学院 | A kind of multi-direction piezoelectric vibration power generation machine |
DE112018003730T5 (en) | 2017-07-21 | 2020-04-16 | Massachusetts Institute Of Technology | Modular microjet cooling of packed electronic components |
CN108680643A (en) * | 2018-03-29 | 2018-10-19 | 东莞理工学院 | A kind of new-type ultrasonic guided wave detecting method |
CN110771816A (en) * | 2019-11-13 | 2020-02-11 | 黄佑财 | Crock fish and making method thereof |
CN113098144B (en) * | 2021-04-02 | 2022-09-06 | 中车青岛四方机车车辆股份有限公司 | Distributed non-contact grounding backflow system and method and rail transit vehicle |
CN113522639B (en) * | 2021-08-03 | 2022-05-13 | 邵东市钧洪幕墙门窗有限公司 | Aluminum alloy frame glue injection device and working method thereof |
CN114146739A (en) * | 2021-12-17 | 2022-03-08 | 北京理工大学 | DMF dielectric layer film laminating method and system and digital microfluidic chip |
US20230339226A1 (en) * | 2022-04-22 | 2023-10-26 | Bwxt Nog Technologies, Inc. | Drop-on-demand electroprinter with a plunging wire-in-a-nozzle |
CN115504586A (en) * | 2022-08-10 | 2022-12-23 | 周太龙 | Movable environment-friendly equipment capable of carrying out agricultural water pollution treatment |
Citations (43)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4641980A (en) | 1984-10-02 | 1987-02-10 | Fujitsu Limited | Printer with pivotable print head attached to medium carrier moveable through a casing opening |
US4762986A (en) | 1986-03-10 | 1988-08-09 | Canon Kabushiki Kaisha | Automatic focussing system including in-focus position prediction means |
US4868676A (en) | 1986-03-19 | 1989-09-19 | Shapr Kabushiki Kaisha | Manual copying apparatus |
US4937676A (en) | 1989-02-10 | 1990-06-26 | Polariod Corporation | Electronic camera system with detachable printer |
EP0398295A2 (en) | 1989-05-17 | 1990-11-22 | Minolta Co., Ltd. | A camera capable of recording and reproducing a photographed image |
US5031049A (en) | 1984-05-25 | 1991-07-09 | Canon Kabushiki Kaisha | Automatic object image follow-up device |
US5235428A (en) | 1990-02-21 | 1993-08-10 | Sony Corporation | Auto-focus system for video camera |
JPH06149051A (en) | 1992-11-08 | 1994-05-27 | Ricoh Co Ltd | Developer container, processing cartridge, judgement device for recycling of such container or cartridge and image forming device |
US5398131A (en) | 1992-08-13 | 1995-03-14 | Hall; Dennis R. | Stereoscopic hardcopy methods |
US5418565A (en) | 1994-02-15 | 1995-05-23 | Eastman Kodak Company | CFA compatible resolution reduction in a single sensor electronic camera |
WO1995016323A1 (en) | 1993-12-07 | 1995-06-15 | Fisher-Price, Inc. | Instant special effects electronic camera |
US5434621A (en) | 1992-10-09 | 1995-07-18 | Samsung Electronics Co., Ltd. | Object tracking method for automatic zooming and the apparatus therefor |
US5463470A (en) | 1991-10-09 | 1995-10-31 | Fuji Photo Film Co., Ltd. | Methods of collecting photometric image data and determining light exposure by extracting feature image data from an original image |
US5512951A (en) | 1992-06-02 | 1996-04-30 | Sony Corporation | Auto-focusing apparatus |
US5528339A (en) | 1994-08-26 | 1996-06-18 | Eastman Kodak Company | Color image reproduction of scenes with color enhancement and preferential tone mapping |
WO1996032265A1 (en) | 1995-04-12 | 1996-10-17 | Eastman Kodak Company | A color video printer and a photocd system with integrated printer |
US5572596A (en) | 1994-09-02 | 1996-11-05 | David Sarnoff Research Center, Inc. | Automated, non-invasive iris recognition system and method |
WO1997006958A1 (en) | 1995-08-18 | 1997-02-27 | Fisher-Price, Inc. | Improved printer assembly with easily loaded paper cartridge |
JPH0971015A (en) | 1995-09-05 | 1997-03-18 | Ricoh Co Ltd | Recording device and image communication device |
EP0763930A1 (en) | 1995-09-15 | 1997-03-19 | Agfa-Gevaert N.V. | Method and apparatus for calculating color gamuts |
JPH09116843A (en) | 1995-10-20 | 1997-05-02 | Canon Inc | Image pickup device with printer |
JPH09187040A (en) | 1995-12-28 | 1997-07-15 | Fuji Photo Optical Co Ltd | Driver for zoom lens |
US5745175A (en) | 1995-10-02 | 1998-04-28 | Flashpoint Technologies, Inc. | Method and system for providing automatic focus control for a still digital camera |
US5748764A (en) | 1993-07-19 | 1998-05-05 | Eastman Kodak Company | Automated detection and correction of eye color defects due to flash illumination |
US5757388A (en) | 1996-12-16 | 1998-05-26 | Eastman Kodak Company | Electronic camera and integral ink jet printer |
US5835136A (en) | 1990-03-12 | 1998-11-10 | King Jim Co., Ltd. | Electronic printer camera |
US5845166A (en) | 1997-02-20 | 1998-12-01 | Eastman Kodak Company | Hybrid camera with identification matching of film and electronic images |
US5847836A (en) | 1995-08-29 | 1998-12-08 | Canon Kabushiki Kaisha | Printer-built-in image-sensing apparatus and using strobe-light means electric-consumption control method thereof |
US5860036A (en) | 1997-06-10 | 1999-01-12 | Eastman Kodak Company | Controlling display useable in printers |
WO1999004368A1 (en) | 1997-07-15 | 1999-01-28 | Silverbrook Research Pty. Limited | A camera with internal printing system |
US5883830A (en) | 1995-12-29 | 1999-03-16 | Intel Corporation | CMOS imaging device with integrated flash memory image correction circuitry |
US5990973A (en) | 1996-05-29 | 1999-11-23 | Nec Corporation | Red-eye detection/retouch apparatus |
US6134339A (en) | 1998-09-17 | 2000-10-17 | Eastman Kodak Company | Method and apparatus for determining the position of eyes and for correcting eye-defects in a captured frame |
US6141036A (en) | 1994-04-28 | 2000-10-31 | Canon Kabushiki Kaisha | Image recording and reproducing apparatus |
US6147704A (en) | 1990-11-08 | 2000-11-14 | Canon Kabushiki Kaisha | Image processing system having a selector for selecting a picked-up image or a stored image for display |
US6157394A (en) | 1996-08-29 | 2000-12-05 | Apple Computer, Inc. | Flexible digital image processing via an image processing chain with modular image processors |
US6163338A (en) | 1997-12-11 | 2000-12-19 | Johnson; Dan | Apparatus and method for recapture of realtime events |
US6217165B1 (en) | 1997-07-15 | 2001-04-17 | Silverbrook Research Pty. Ltd. | Ink and media cartridge with axial ink chambers |
US6252976B1 (en) | 1997-08-29 | 2001-06-26 | Eastman Kodak Company | Computer program product for redeye detection |
US6273535B1 (en) | 1997-02-14 | 2001-08-14 | Canon Kabushiki Kaisha | Image forming system and images forming apparatus |
US6278491B1 (en) | 1998-01-29 | 2001-08-21 | Hewlett-Packard Company | Apparatus and a method for automatically detecting and reducing red-eye in a digital image |
US6285410B1 (en) | 1998-09-11 | 2001-09-04 | Mgi Software Corporation | Method and system for removal of flash artifacts from digital images |
US6292574B1 (en) | 1997-08-29 | 2001-09-18 | Eastman Kodak Company | Computer program product for redeye detection |
Family Cites Families (664)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US52033A (en) * | 1866-01-16 | Improvement in coal-stoves | ||
US574826A (en) * | 1897-01-05 | Secondary-battery support or grid | ||
US3943563A (en) | 1969-03-17 | 1976-03-09 | Lemelson Jerome H | System and method for recording and reproducing video information on a card |
US4991205A (en) | 1962-08-27 | 1991-02-05 | Lemelson Jerome H | Personal identification system and method |
US3735350A (en) | 1966-02-10 | 1973-05-22 | J Lemelson | Code scanning system |
US3573437A (en) | 1968-06-04 | 1971-04-06 | Wyle Laboratories | Bi-directional card reading system |
CH495017A (en) | 1968-07-16 | 1970-08-15 | Ciba Geigy | Method for scanning color codes and converting them into binary codes, as well as means for carrying out this method |
US3760162A (en) | 1969-11-13 | 1973-09-18 | Smiths Industries Ltd | Photoelectric readers |
US3731062A (en) | 1971-05-21 | 1973-05-01 | Binary Systems Inc | Optical card reader drive |
US3737629A (en) | 1971-06-09 | 1973-06-05 | Addressograph Multigraph | Optical code reader |
US3701098A (en) | 1971-06-15 | 1972-10-24 | Scanner | Device for machine reading of information without manipulation of the information carrier |
US3748939A (en) | 1971-08-11 | 1973-07-31 | Borden Inc | Traversing film cutter |
US3778541A (en) | 1971-09-03 | 1973-12-11 | Itek Corp | System for analyzing multicolored scenes |
US4000239A (en) | 1971-12-13 | 1976-12-28 | Teijin Limited | Process for spinning naphthalate polyester fibers |
CH556068A (en) | 1972-01-03 | 1974-11-15 | Sodeco Compteurs De Geneve | IDENTIFICATION CARD READER. |
OA04528A (en) | 1972-04-27 | 1980-03-30 | Granger Maurice | Device for the simultaneous distribution and cutting of coiled material bands. |
US3866217A (en) | 1972-12-26 | 1975-02-11 | Currier Smith Corp | Monitoring transmission link by comparing pseudorandom signals |
US3970803A (en) | 1973-01-11 | 1976-07-20 | Cbs Inc. | Printed sound track system |
US3857019A (en) | 1973-03-05 | 1974-12-24 | Honeywell Inf Systems | Card reader data logic with position indication and error detection |
US3947817A (en) | 1974-01-07 | 1976-03-30 | Recognition Equipment Incorporated | Hand operated optical character recognition wand |
US3893173A (en) | 1974-01-11 | 1975-07-01 | Hewlett Packard Co | Miniaturized magnetic card reader/recorder for use in hand-held calculator |
JPS595273B2 (en) | 1974-03-08 | 1984-02-03 | サトウ シゲオ | An inexpensive mouthpiece that completely precipitates and cools smoke impurities in the holes and spaces, making the cigarette sweet and enjoyable. |
US3916420A (en) | 1974-05-06 | 1975-10-28 | Ncr Co | Printer and display system |
US4034211A (en) | 1975-06-20 | 1977-07-05 | Ncr Corporation | System and method for providing a security check on a credit card |
US4123782A (en) | 1975-07-18 | 1978-10-31 | Canon Kabushiki Kaisha | Control device for television camera |
US4088981A (en) | 1975-11-12 | 1978-05-09 | Citibank N.A. | Automated data entry and display system |
US4092654A (en) | 1976-09-13 | 1978-05-30 | Alasia Alfred Victor | Encoding system |
US4213694A (en) | 1977-05-31 | 1980-07-22 | International Business Machines Corporation | Copy production machines |
GB1580553A (en) | 1977-08-22 | 1980-12-03 | Bank Of England | Document carrying a legible code and method and apparatus for producing same |
US4494864A (en) | 1977-12-27 | 1985-01-22 | The Three Dimensional Photography Corp. | Apparatus for stereoscopic photography |
US4161749A (en) | 1978-03-30 | 1979-07-17 | Polaroid Corporation | Printer for producing print of an electronically recorded image |
US4200867A (en) | 1978-04-03 | 1980-04-29 | Hill Elmer D | System and method for painting images by synthetic color signal generation and control |
GB1595797A (en) | 1978-04-21 | 1981-08-19 | Pushman Hugh John | Security systems |
US4173401A (en) | 1978-05-15 | 1979-11-06 | Eastman Kodak Company | Apparatus for displaying alphanumeric information coded on a film cartridge |
US4262284A (en) | 1978-06-26 | 1981-04-14 | Stieff Lorin R | Self-monitoring seal |
US4270853A (en) | 1979-03-21 | 1981-06-02 | West Electric Company, Ltd. | Sound-recording instant-printing film and camera therefor |
US4463359A (en) | 1979-04-02 | 1984-07-31 | Canon Kabushiki Kaisha | Droplet generating method and apparatus thereof |
US4429320A (en) | 1979-09-21 | 1984-01-31 | Canon Kabushiki Kaisha | Ink jet recording apparatus |
US4546434C1 (en) | 1979-10-03 | 2002-09-17 | Debbie A Gioello | Method for designing apparel |
JPS56154720A (en) | 1980-05-02 | 1981-11-30 | Olympus Optical Co Ltd | Film cassette |
DE3024672A1 (en) | 1980-06-30 | 1982-01-28 | Jens Ing.(grad.) 6458 Rodenbach Drefahl | ROOF COVER |
US4414316A (en) | 1980-09-05 | 1983-11-08 | Rexham Corporation | Composite lenticular screen sheet |
JPS5752967A (en) | 1980-09-17 | 1982-03-29 | Nec Corp | Device for immediately calculating and displaying dose distribution |
US4494862A (en) | 1980-09-30 | 1985-01-22 | Minolta Camera Kabushiki Kaisha | Computerized information processing system equipped with copying apparatus |
US4580721A (en) | 1981-02-12 | 1986-04-08 | Imperial Chemical Industries Plc | Fluid container |
US4503135A (en) | 1981-02-27 | 1985-03-05 | Drexler Technology Corporation | Medium for recording visual images and laser written data |
US5241165A (en) | 1981-02-27 | 1993-08-31 | Drexler Technology Corporation | Erasable optical wallet-size data card |
US4402150A (en) | 1981-05-11 | 1983-09-06 | Polaroid Corporation | Verification device |
JPS57210878A (en) | 1981-05-29 | 1982-12-24 | Toshiba Corp | Transfer printer |
DE3238509A1 (en) | 1981-10-19 | 1983-05-05 | Canon K.K., Tokyo | IMAGE RECORDING DEVICE |
US4488563A (en) | 1982-04-29 | 1984-12-18 | Mitsubishi Acetate Co., Ltd. | Filter plug |
US4500919A (en) | 1982-05-04 | 1985-02-19 | Massachusetts Institute Of Technology | Color reproduction system |
DE3272696D1 (en) | 1982-05-24 | 1986-09-25 | Ibm Deutschland | Process for preparing dot screen data for character and/or picture representations |
US4558326A (en) | 1982-09-07 | 1985-12-10 | Konishiroku Photo Industry Co., Ltd. | Purging system for ink jet recording apparatus |
JPS5971865A (en) | 1982-10-19 | 1984-04-23 | Nec Corp | Color ink jet printer |
JPH0778825B2 (en) | 1983-02-09 | 1995-08-23 | 株式会社日立製作所 | Image processing processor |
JPS60136480A (en) | 1983-12-24 | 1985-07-19 | Sony Corp | Controller for image pickup light quantity |
US4596039A (en) | 1983-12-30 | 1986-06-17 | International Business Machines Corporation | Method for converting an image from a run end or run length representation to a bit map |
JPS60192668A (en) | 1984-03-14 | 1985-10-01 | Toshiba Corp | Image former |
JPS60204366A (en) | 1984-03-30 | 1985-10-15 | Canon Inc | Ink jet recording head and preservation thereof |
US4853967A (en) | 1984-06-29 | 1989-08-01 | International Business Machines Corporation | Method for automatic optical inspection analysis of integrated circuits |
JPS625779A (en) | 1985-03-04 | 1987-01-12 | Kokusai Denshin Denwa Co Ltd <Kdd> | Encoding system for gradation facsimile picture signal |
EP0215847B1 (en) | 1985-03-11 | 1990-04-18 | EASTMAN KODAK COMPANY (a New Jersey corporation) | Apparatus and method for forming digital images |
US4592938A (en) | 1985-03-25 | 1986-06-03 | Mobil Oil Corporation | Method of producing an internally reinforced thermoplastic film and film and articles produced therefrom |
US4639738A (en) | 1985-04-12 | 1987-01-27 | Eastman Kodak Company | Ink level detection system for ink jet printing apparatus |
US4771342A (en) | 1985-05-01 | 1988-09-13 | Emf Partners, Ltd. | Method and apparatus for enhancing video-recorded images to film grade quality |
US4688105A (en) | 1985-05-10 | 1987-08-18 | Bloch Arthur R | Video recording system |
US4796038A (en) | 1985-07-24 | 1989-01-03 | Ateq Corporation | Laser pattern generation apparatus |
US4783823A (en) | 1985-09-16 | 1988-11-08 | Omron Tateisi Electronics, Co. | Card identifying method and apparatus |
US4640529A (en) | 1985-09-16 | 1987-02-03 | Katz Marcella M | Flexible non-distortable handcraft sheet material and method of applying printed designs thereto |
AT386159B (en) | 1985-10-11 | 1988-07-11 | Oesterr Nationalbank | METHOD AND DEVICE FOR PRODUCING REALITY (CODING) CHARACTERISTICS ON SECURITIES |
IT1182682B (en) | 1985-11-14 | 1987-10-05 | Olivetti & Co Spa | ELECTRICALLY CONDUCTIVE INK JET PRINT AND RELATED PRINTING DEVICE |
EP0227207B1 (en) | 1985-12-26 | 1992-12-23 | SHIMIZU CONSTRUCTION Co. LTD. | Concrete reinforcing unit |
US4728978A (en) | 1986-03-07 | 1988-03-01 | Minolta Camera Kabushiki Kaisha | Photographic camera |
US4860375A (en) | 1986-03-10 | 1989-08-22 | Environmental Research Inst. Of Michigan | High speed cellular processing system |
US4689683B1 (en) | 1986-03-18 | 1996-02-27 | Edward Efron | Computerized studio for motion picture film and television production |
EP0244636A1 (en) | 1986-04-04 | 1987-11-11 | Marcella M. Katz | Personalized dolls and toy animals and method of manufacturing them |
US4724307A (en) | 1986-04-29 | 1988-02-09 | Gtech Corporation | Marked card reader |
US4788563A (en) | 1986-05-19 | 1988-11-29 | Canon Kabushiki Kaisha | Recording apparatus |
US4754487A (en) | 1986-05-27 | 1988-06-28 | Image Recall Systems, Inc. | Picture storage and retrieval system for various limited storage mediums |
US4783700A (en) | 1986-06-10 | 1988-11-08 | Canon Kabushiki Kaisha | Image sensor unit and image reading apparatus having the unit |
GB8614212D0 (en) | 1986-06-11 | 1986-07-16 | Kodak Ltd | Image processing method |
US4837628A (en) | 1986-07-14 | 1989-06-06 | Kabushiki Kaisha Toshiba | Electronic still camera for recording still picture on memory card with mode selecting shutter release |
US4683477A (en) | 1986-08-29 | 1987-07-28 | Eastman Kodak Company | Ink jet print head |
JP2733220B2 (en) | 1986-09-30 | 1998-03-30 | シャープ株式会社 | Composite image processing device |
US5148534A (en) | 1986-11-05 | 1992-09-15 | International Business Machines Corp. | Hardware cartridge representing verifiable, use-once authorization |
US5260735A (en) | 1986-11-19 | 1993-11-09 | Minolta Camera Kabushiki Kaisha | Camera system |
US4845770A (en) | 1986-11-20 | 1989-07-04 | Oki Electric Industry Co., Ltd. | Method and apparatus for processing embossed card |
US5053814A (en) | 1986-12-24 | 1991-10-01 | Minolta Camera Kabushiki Kaisha | Image forming apparatus |
US5280160A (en) | 1987-02-27 | 1994-01-18 | Canon Kabushiki Kaisha | Recording and reproducing method and apparatus compensating for predicted deviation based on detected relative skewing of recording medium |
US4897719A (en) | 1987-03-19 | 1990-01-30 | Hugh Griffin | Image pre-processing sub-system |
US4835388A (en) | 1987-04-07 | 1989-05-30 | The Harshaw Chemical Company | Thermoluminescence dosimetry card reader heating assembly |
US4833599A (en) | 1987-04-20 | 1989-05-23 | Multiflow Computer, Inc. | Hierarchical priority branch handling for parallel execution in a parallel processor |
US4914452A (en) * | 1987-05-08 | 1990-04-03 | Ricoh Company, Ltd. | Ink sheet/recording paper cassette |
US5151726A (en) | 1987-05-09 | 1992-09-29 | Canon Kabushiki Kaisha | Camera or printer capable of automatically changing print size |
US4791443A (en) | 1987-06-12 | 1988-12-13 | Eastman Kodak Company | Photographic processor with auxiliary power supply |
JPH07118755B2 (en) | 1987-08-19 | 1995-12-18 | 株式会社日立製作所 | Mail system |
US4861031A (en) | 1987-09-28 | 1989-08-29 | Simms Cosmian E | Card wrestling game |
JPH0193254A (en) | 1987-10-02 | 1989-04-12 | Canon Inc | Recorder |
US4987030A (en) | 1987-10-07 | 1991-01-22 | Toray Industries, Inc. | High-tenacity conjugated fiber and process for preparation thereof |
US4975969A (en) | 1987-10-22 | 1990-12-04 | Peter Tal | Method and apparatus for uniquely identifying individuals by particular physical characteristics and security system utilizing the same |
DE315488T1 (en) | 1987-11-06 | 1989-12-07 | Victor Company Of Japan, Ltd., Yokohama, Kanagawa, Jp | ARRANGEMENT FOR THERMAL RECORDING. |
JPH01128859A (en) | 1987-11-16 | 1989-05-22 | Canon Inc | Recorder |
US5066984A (en) | 1987-11-17 | 1991-11-19 | Gradco Systems, Inc. | Decurler |
US4924078A (en) | 1987-11-25 | 1990-05-08 | Sant Anselmo Carl | Identification symbol, system and method |
NL8800053A (en) | 1988-01-11 | 1989-08-01 | Philips Nv | VIDEO PROCESSOR SYSTEM, IMAGE SYSTEM AND IMAGE STORAGE SYSTEM, PROVIDED WITH SUCH A VIDEO PROCESSOR SYSTEM. |
US5216490A (en) | 1988-01-13 | 1993-06-01 | Charles Stark Draper Laboratory, Inc. | Bridge electrodes for microelectromechanical devices |
US4965596A (en) | 1988-02-09 | 1990-10-23 | Canon Kabushiki Kaisha | Ink jet recording apparatus with waste ink distribution paths to plural cartridges |
US5161233A (en) | 1988-05-17 | 1992-11-03 | Dai Nippon Printing Co., Ltd. | Method for recording and reproducing information, apparatus therefor and recording medium |
US5111288A (en) | 1988-03-02 | 1992-05-05 | Diamond Electronics, Inc. | Surveillance camera system |
EP0332787A1 (en) | 1988-03-15 | 1989-09-20 | Françis Milliasseau Flaunet | Device for printing and computer-controlled cutting for the production of wall-paper |
JP2973420B2 (en) | 1988-03-30 | 1999-11-08 | キヤノン株式会社 | Video camera |
JP2669532B2 (en) | 1988-05-20 | 1997-10-29 | 株式会社日立製作所 | Optical disk drive |
NL8801440A (en) | 1988-06-06 | 1990-01-02 | Philips Nv | DEVICE FOR REPRODUCING DIGITALIZED VIDEO IMAGES WITH SLOPE FLAT ERROR. |
JP2728436B2 (en) | 1988-06-23 | 1998-03-18 | キヤノン株式会社 | Ink jet recording device |
JP2752402B2 (en) | 1988-07-25 | 1998-05-18 | イーストマン コダック カンパニー | Print media container monitoring system for printers |
US5042079A (en) | 1988-08-12 | 1991-08-20 | Casio Computer Co., Ltd. | Method of recording/reproducing data of mesh pattern, and apparatus therefor |
JP2653118B2 (en) | 1988-08-23 | 1997-09-10 | ソニー株式会社 | Camera-integrated video recorder |
US5243370A (en) | 1988-08-30 | 1993-09-07 | Dan Slater | Camera stabilizer |
JPH0236825U (en) | 1988-09-02 | 1990-03-09 | ||
US4902880A (en) | 1988-09-30 | 1990-02-20 | Peripheral Dynamics, Inc. | Card reader system and method with printing and verification capability |
US5239292A (en) | 1988-10-04 | 1993-08-24 | Crosfield Electronics Ltd. | Computer graphics system electronically simulating painting on canvas |
JPH02105333A (en) | 1988-10-14 | 1990-04-17 | Hitachi Ltd | Optical recording sheet, method and device for reproducing such recording sheet |
US4904100A (en) | 1988-12-05 | 1990-02-27 | Eastman Kodak Company | Cartridge and printer system for using roll print media |
DE68927820T2 (en) | 1988-12-06 | 1997-07-10 | Canon Kk | Imaging system |
US5561604A (en) | 1988-12-08 | 1996-10-01 | Hallmark Cards, Incorporated | Computer controlled system for vending personalized products |
US5036472A (en) | 1988-12-08 | 1991-07-30 | Hallmark Cards, Inc. | Computer controlled machine for vending personalized products or the like |
US5224179A (en) | 1988-12-20 | 1993-06-29 | At&T Bell Laboratories | Image skeletonization method |
JP2675851B2 (en) | 1989-01-28 | 1997-11-12 | キヤノン株式会社 | INKJET RECORDING METHOD AND DEVICE USED FOR THE METHOD |
GB2228579A (en) | 1989-02-23 | 1990-08-29 | Marnic Uk Limited | A method and apparatus for producing instant photographs |
US5049898A (en) | 1989-03-20 | 1991-09-17 | Hewlett-Packard Company | Printhead having memory element |
US5515101A (en) | 1989-04-28 | 1996-05-07 | Minolta Co., Ltd. | Title generator for a video camera |
JPH02291764A (en) | 1989-05-02 | 1990-12-03 | Eastman Kodatsuku Japan Kk | Both sides scanner |
US4993405A (en) | 1989-05-15 | 1991-02-19 | Olympus Optical Co., Ltd. | Imaging apparatus |
US5153532A (en) | 1989-05-24 | 1992-10-06 | Honeywell Inc. | Noise generator using combined outputs of two pseudo-random sequence generators |
US5107290A (en) | 1989-06-06 | 1992-04-21 | Canon Kabushiki Kaisha | Camera |
US5035929A (en) | 1989-06-13 | 1991-07-30 | Dimensional Images, Inc. | Three dimensional picture |
IT1232551B (en) | 1989-07-13 | 1992-02-19 | Olivetti & Co Spa | PRINT HEAD FOR A INK-JET THERMAL PRINTER |
US5035325A (en) | 1989-07-18 | 1991-07-30 | Dai Nippon Insatsu Kabushiki Kaisha | Cassette for thermal transfer printing film |
US5204944A (en) | 1989-07-28 | 1993-04-20 | The Trustees Of Columbia University In The City Of New York | Separable image warping methods and systems using spatial lookup tables |
JPH07101840B2 (en) | 1989-08-01 | 1995-11-01 | 三菱電機株式会社 | Digital noise signal generator |
ES2252908T3 (en) | 1989-08-05 | 2006-05-16 | Canon Kabushiki Kaisha | PRINTING DEVICE FOR INK JETS AND INK CARTRIDGE FOR THE APPLIANCE. |
WO1991001879A1 (en) | 1989-08-10 | 1991-02-21 | University Of Akron | Self reinforced thermoplastic composite laminate |
GB2235347B (en) | 1989-08-21 | 1994-06-08 | Barber Pamela L | Apparatus for making electronically-produced postcards and method of operating same |
US5412402A (en) | 1989-09-01 | 1995-05-02 | Quantel Limited | Electronic graphic systems |
US5175808A (en) | 1989-09-12 | 1992-12-29 | Pixar | Method and apparatus for non-affine image warping |
US5247611A (en) | 1989-09-15 | 1993-09-21 | Emtek Health Care Systems, Inc. | Spreadsheet cell having multiple data fields |
DE69025692T2 (en) | 1989-10-11 | 1996-07-18 | Fuji Photo Film Co Ltd | Image reader |
DE69018003T2 (en) | 1989-10-20 | 1995-08-24 | Canon Kk | Cartridge with ink reservoir can be set up on a color jet device. |
US6070003A (en) | 1989-11-17 | 2000-05-30 | Texas Instruments Incorporated | System and method of memory access in apparatus having plural processors and plural memories |
US4985710A (en) | 1989-11-29 | 1991-01-15 | Xerox Corporation | Buttable subunits for pagewidth "Roofshooter" printheads |
US5402504A (en) | 1989-12-08 | 1995-03-28 | Xerox Corporation | Segmentation of text styles |
US4999647A (en) | 1989-12-28 | 1991-03-12 | Eastman Kodak Company | Synchronous stimulation for long array continuous ink jet printer |
US5182548A (en) | 1990-01-10 | 1993-01-26 | Silicon Graphics, Inc. | Method and apparatus for painting on a computer |
US5154956A (en) | 1990-01-11 | 1992-10-13 | Lamco Ltd., Inc. | Non-curling pressure-sensitive adhesive labels with release liners |
US5245365A (en) | 1990-02-28 | 1993-09-14 | Compaq Computer Corporation | Ink-jet printer with user replaceable printing system cartridge |
EP0667609B1 (en) | 1990-03-09 | 2000-05-24 | Canon Kabushiki Kaisha | Signal recording system |
US5124692A (en) | 1990-04-13 | 1992-06-23 | Eastman Kodak Company | Method and apparatus for providing rotation of digital image data |
JP2567492B2 (en) | 1990-04-19 | 1996-12-25 | 富士写真フイルム株式会社 | Shooting mode input device |
US5644431A (en) | 1990-05-18 | 1997-07-01 | University Of Arkansas, N.A. | Directional image transmission sheet and method of making same |
GB2244622B (en) | 1990-05-30 | 1994-06-15 | Sony Corp | Image signal processing |
US5220400A (en) | 1990-06-01 | 1993-06-15 | Texas Instruments Incorporated | Container inspection system |
US5537144A (en) | 1990-06-11 | 1996-07-16 | Revfo, Inc. | Electro-optical display system for visually displaying polarized spatially multiplexed images of 3-D objects for use in stereoscopically viewing the same with high image quality and resolution |
US5495568A (en) | 1990-07-09 | 1996-02-27 | Beavin; William C. | Computerized clothing designer |
US5091966A (en) | 1990-07-31 | 1992-02-25 | Xerox Corporation | Adaptive scaling for decoding spatially periodic self-clocking glyph shape codes |
JPH0490354A (en) | 1990-08-02 | 1992-03-24 | Canon Inc | Ink jet recorder |
US6736321B2 (en) | 1995-12-18 | 2004-05-18 | Metrologic Instruments, Inc. | Planar laser illumination and imaging (PLIIM) system employing wavefront control methods for reducing the power of speckle-pattern noise digital images acquired by said system |
GB9020082D0 (en) | 1990-09-14 | 1990-10-24 | Crosfield Electronics Ltd | Methods and apparatus for defining contours in coloured images |
DE477080T1 (en) | 1990-09-17 | 1993-06-09 | Canon K.K., Tokio/Tokyo, Jp | DATA TRANSFER DEVICE. |
US6278486B1 (en) | 1990-09-18 | 2001-08-21 | Canon Kabushiki Kaisha | Information signal controlling system |
JPH0771203B2 (en) | 1990-09-18 | 1995-07-31 | キヤノン株式会社 | Signal recording device and signal processing device |
US5534900A (en) | 1990-09-21 | 1996-07-09 | Seiko Epson Corporation | Ink-jet recording apparatus |
JP2803072B2 (en) | 1990-10-18 | 1998-09-24 | 富士写真フイルム株式会社 | Image stabilization device |
US5559714A (en) | 1990-10-22 | 1996-09-24 | Hallmark Cards, Incorporated | Method and apparatus for display sequencing personalized social occasion products |
JP3038880B2 (en) | 1990-10-29 | 2000-05-08 | ミノルタ株式会社 | Thermal transfer recording device |
US5134495A (en) | 1990-11-07 | 1992-07-28 | Dp-Tek, Inc. | Resolution transforming raster-based imaging system |
JP3093781B2 (en) | 1990-11-09 | 2000-10-03 | オリンパス光学工業株式会社 | Focus position detection device |
DE69131272T2 (en) | 1990-11-13 | 1999-12-09 | Ibm | Parallel associative processor system |
US5809292A (en) | 1990-11-13 | 1998-09-15 | International Business Machines Corporation | Floating point for simid array machine |
US5138459A (en) | 1990-11-20 | 1992-08-11 | Personal Computer Cameras, Inc. | Electronic still video camera with direct personal computer (pc) compatible digital format output |
US5493409A (en) | 1990-11-29 | 1996-02-20 | Minolta Camera Kabushiki Kaisha | Still video camera having a printer capable of printing a photographed image in a plurality of printing modes |
JP2956213B2 (en) | 1990-11-30 | 1999-10-04 | ソニー株式会社 | Image processing device |
US5191640A (en) | 1990-12-26 | 1993-03-02 | Xerox Corporation | Method for optimal discrete rendering of images |
US5293236A (en) | 1991-01-11 | 1994-03-08 | Fuji Photo Film Co., Ltd. | Electronic still camera including an EEPROM memory card and having a continuous shoot mode |
US5432896A (en) | 1991-01-31 | 1995-07-11 | Axa Corporation | Watercolor simulation in computer graphics |
US5115888A (en) | 1991-02-04 | 1992-05-26 | Howard Schneider | Self-serve checkout system |
US5204900A (en) | 1991-03-04 | 1993-04-20 | Pires H George | Coding system for descrambling video |
US5243174A (en) | 1991-03-05 | 1993-09-07 | The Gift Certificate Center, Inc. | Method and apparatus for generating gift certificates |
US5615123A (en) | 1991-04-02 | 1997-03-25 | Creatacard, Inc. | System for creating and producing custom card products |
US5384899A (en) | 1991-04-16 | 1995-01-24 | Scitex Corporation Ltd. | Apparatus and method for emulating a substrate |
JPH04321183A (en) | 1991-04-20 | 1992-11-11 | Ricoh Co Ltd | Document register method for filing device |
US5121139A (en) | 1991-04-29 | 1992-06-09 | Tektronix, Inc. | Compact ink jet printer having a drum drive mechanism |
US5058856A (en) | 1991-05-08 | 1991-10-22 | Hewlett-Packard Company | Thermally-actuated microminiature valve |
US5160945A (en) | 1991-05-10 | 1992-11-03 | Xerox Corporation | Pagewidth thermal ink jet printhead |
JP2990306B2 (en) | 1991-05-14 | 1999-12-13 | 富士ゼロックス株式会社 | Marker dot detection method for color image recording device |
SE468414B (en) | 1991-05-14 | 1993-01-11 | Sune Svanberg | FILTER PICTURE REGISTRATION IN POOR LIGHT |
JP3256982B2 (en) | 1991-05-14 | 2002-02-18 | 富士ゼロックス株式会社 | Image processing device |
JPH04358291A (en) | 1991-06-04 | 1992-12-11 | Hitachi Ltd | Color image changing method |
JPH06500445A (en) | 1991-06-12 | 1994-01-13 | リー、スン | Recording and playback of 3D images |
JP3181073B2 (en) | 1991-07-01 | 2001-07-03 | キヤノン株式会社 | Ink jet recording device |
US5282051A (en) | 1991-07-29 | 1994-01-25 | Xerox Corporation | Apparatus and method for performing resolution conversion on image data with auto correlation |
US5160577A (en) | 1991-07-30 | 1992-11-03 | Deshpande Narayan V | Method of fabricating an aperture plate for a roof-shooter type printhead |
US5208610A (en) | 1991-07-31 | 1993-05-04 | Hewlett-Packard Company | Pen carriage for an ink-jet printer |
CA2075097C (en) | 1991-08-02 | 2000-03-28 | Hiroyuki Ishinaga | Recording apparatus, recording head and substrate therefor |
WO1993004425A1 (en) | 1991-08-13 | 1993-03-04 | Universal Photonix, Inc. | System for remotely validating the identity of indivuals and determining their locations |
US5266781A (en) | 1991-08-15 | 1993-11-30 | Datacard Corporation | Modular card processing system |
US5164827A (en) | 1991-08-22 | 1992-11-17 | Sensormatic Electronics Corporation | Surveillance system with master camera control of slave cameras |
US5410225A (en) | 1991-08-30 | 1995-04-25 | Aiwa Co., Ltd. | Video camera and camera system employing aperture control |
US5420635A (en) | 1991-08-30 | 1995-05-30 | Fuji Photo Film Co., Ltd. | Video camera, imaging method using video camera, method of operating video camera, image processing apparatus and method, and solid-state electronic imaging device |
JPH05181209A (en) | 1991-09-20 | 1993-07-23 | Fuji Photo Film Co Ltd | Information recording and reading method and device therefor |
FR2681967B1 (en) | 1991-10-01 | 1994-11-25 | Electronics For Imaging Inc | METHOD AND APPARATUS FOR CHANGING THE COLORS OF AN IMAGE USING A COMPUTER. |
US5356971A (en) | 1991-10-11 | 1994-10-18 | Nof Corporation | Thermosetting powder coating material |
US5594500A (en) | 1991-10-17 | 1997-01-14 | Canon Kabushiki Kaisha | Image pickup apparatus |
US5315316A (en) | 1991-10-29 | 1994-05-24 | Hewlett-Packard Company | Method and apparatus for summing temperature changes to detect ink flow |
JP2696025B2 (en) | 1991-11-18 | 1998-01-14 | 沖電気工業株式会社 | Read head |
US5276472A (en) | 1991-11-19 | 1994-01-04 | Eastman Kodak Company | Photographic film still camera system with audio recording |
US5428423A (en) | 1991-11-26 | 1995-06-27 | Clark; John R. | Photographic printed cards and apparatus and method of making same |
JP3375158B2 (en) | 1991-11-28 | 2003-02-10 | 株式会社リコー | Image data processing method and apparatus |
EP0547899A1 (en) | 1991-12-18 | 1993-06-23 | Sony Corporation | Indication of abnormal states of a video camera or a video tape recorder |
US5392365A (en) | 1991-12-23 | 1995-02-21 | Eastman Kodak Company | Apparatus for detecting text edges in digital image processing |
US5221833A (en) | 1991-12-27 | 1993-06-22 | Xerox Corporation | Methods and means for reducing bit error rates in reading self-clocking glyph codes |
JP2746790B2 (en) | 1992-03-02 | 1998-05-06 | 富士写真フイルム株式会社 | Stereoscopic image recording method and stereoscopic image recording apparatus |
US5369261A (en) | 1992-02-12 | 1994-11-29 | Shamir; Harry | Multi-color information encoding system |
US5563722A (en) | 1992-02-26 | 1996-10-08 | Norris; Christopher | Method and apparatus for assembling a photographic album |
US5752114A (en) | 1992-03-17 | 1998-05-12 | Sony Corporation | Photographic and video image system |
US5467118A (en) | 1993-12-21 | 1995-11-14 | Hewlett-Packard Company | Ink cartridge for a hard copy printing or plotting apparatus |
US5771245A (en) | 1992-03-20 | 1998-06-23 | Xerox Corporation | Process for independently protecting two dimensional codes from one or more burst errors patterns |
US5442188A (en) | 1992-04-22 | 1995-08-15 | Gould Instruments Systems, Inc. | Strip chart recorder paper attribute detector and monitor |
EP0568357B1 (en) | 1992-04-29 | 2002-03-06 | Canon Kabushiki Kaisha | Graphics system and method |
US5581773A (en) | 1992-05-12 | 1996-12-03 | Glover; Michael A. | Massively parallel SIMD processor which selectively transfers individual contiguously disposed serial memory elements |
US5278608A (en) | 1992-05-19 | 1994-01-11 | Eastman Kodak Company | Electronically printed depth photography system with improved viewing range |
US6118484A (en) | 1992-05-22 | 2000-09-12 | Canon Kabushiki Kaisha | Imaging apparatus |
JPH05328094A (en) | 1992-05-27 | 1993-12-10 | Ricoh Co Ltd | Method and device for picture processing |
US5710948A (en) | 1992-06-09 | 1998-01-20 | Nikon Corporation | Camera system with color temperature meter |
KR950008698B1 (en) | 1992-06-09 | 1995-08-04 | 현대전자산업 주식회사 | Manufacturing method of field oxide of semiconductor device |
CA2098043C (en) | 1992-06-11 | 1999-09-14 | Toshimitsu Iso | Gapless support system for contact type image sensor |
JP3110872B2 (en) | 1992-06-24 | 2000-11-20 | キヤノン株式会社 | Ink jet recording device |
US5288980A (en) | 1992-06-25 | 1994-02-22 | Kingsley Library Equipment Company | Library check out/check in system |
US5359387A (en) | 1992-07-06 | 1994-10-25 | Ray Hicks | Photographic process utilizing combined print and order form |
JPH07325934A (en) | 1992-07-10 | 1995-12-12 | Walt Disney Co:The | Method and equipment for provision of graphics enhanced to virtual world |
US6020898A (en) | 1992-07-27 | 2000-02-01 | Olympus Optical Co., Ltd. | Information display system for displaying time-series numerical values and graph simultaneously |
US5559930A (en) | 1992-08-03 | 1996-09-24 | Hewlett-Packard Company | Method for reducing pixel density along a plurality of axes of a multiple dimension image representation |
JPH0662309A (en) | 1992-08-10 | 1994-03-04 | Olympus Optical Co Ltd | Film picture reproducing device |
US5420607A (en) | 1992-09-02 | 1995-05-30 | Miller; Robert F. | Electronic paintbrush and color palette |
US5489935A (en) | 1992-09-04 | 1996-02-06 | Consilium Overseas Limited | Laser printer power saver |
US5604537A (en) | 1992-09-10 | 1997-02-18 | Canon Kabushiki Kaisha | Imaging apparatus having an automatic focusing means |
US5330799A (en) | 1992-09-15 | 1994-07-19 | The Phscologram Venture, Inc. | Press polymerization of lenticular images |
JP3249200B2 (en) | 1992-09-16 | 2002-01-21 | 株式会社リコー | Curl straightener |
JPH06105271A (en) | 1992-09-16 | 1994-04-15 | Asahi Optical Co Ltd | Ic memory card camera system |
US5600563A (en) | 1992-09-23 | 1997-02-04 | Onkor Ltd. | System for printing social expression cards |
US5438430A (en) | 1992-09-25 | 1995-08-01 | Xerox Corporation | Paper user interface for image manipulations such as cut and paste |
DK0670555T3 (en) | 1992-09-28 | 2000-09-18 | Olympus Optical Co | Registration medium with bar code and information registration system |
US5835641A (en) | 1992-10-14 | 1998-11-10 | Mitsubishi Denki Kabushiki Kaisha | Image pick-up apparatus for detecting and enlarging registered objects |
US5318370A (en) | 1992-11-17 | 1994-06-07 | Varitronic Systems, Inc. | Cartridge with data memory system and method regarding same |
FR2698195B1 (en) | 1992-11-19 | 1994-12-16 | Gemplus Card Int | Encryption and authentication method and circuit for synchronous memory card. |
GB2273377A (en) | 1992-12-11 | 1994-06-15 | Hughes Aircraft Co | Multiple masks for array processors |
US5933179A (en) | 1992-12-21 | 1999-08-03 | Pitney Bowes Inc. | Method of insuring print quality of a thermal printer |
US5625411A (en) | 1992-12-22 | 1997-04-29 | Fuji Photo Film, Ltd. | Video camera printer apparatus and method of controlling same and apparatus and method for detecting print inhibit signal |
US6000791A (en) | 1992-12-23 | 1999-12-14 | Hewlett-Packard Company | Printer having a removable print cartridge with handle incorporating an ink inlet value |
JP3314195B2 (en) | 1992-12-28 | 2002-08-12 | ミノルタ株式会社 | Image processing device |
US5398315A (en) | 1992-12-30 | 1995-03-14 | North American Philips Corporation | Multi-processor video display apparatus |
US5243381A (en) | 1993-01-04 | 1993-09-07 | Xerox Corporation | Method for compiling multiple jobs with job reference sheets |
DE679276T1 (en) | 1993-01-06 | 1996-10-10 | Image Technology Int | FILMLESS METHOD AND DEVICE FOR PRODUCING THREE-DIMENSIONAL PHOTOGRAPHIES. |
DE69435168D1 (en) | 1993-01-19 | 2009-01-02 | Canon Kk | An elongated lighting device and information reading device comprising such a lighting device |
JPH06222414A (en) | 1993-01-22 | 1994-08-12 | Canon Inc | Vibrationproofing system |
US5412197A (en) | 1993-01-29 | 1995-05-02 | United Parcel Service Of America, Inc. | Method and apparatus for decoding bar code symbols using gradient signals |
US5461440A (en) | 1993-02-10 | 1995-10-24 | Olympus Optical Co., Ltd. | Photographing image correction system |
DE4309255A1 (en) | 1993-03-16 | 1994-09-22 | Francotyp Postalia Gmbh | Modular inkjet print head |
JP3227875B2 (en) | 1993-03-24 | 2001-11-12 | 井関農機株式会社 | Row mower |
US5402527A (en) | 1993-04-23 | 1995-03-28 | Xerox Corporation | Apparatus and method for determining the page description language in which a print job is written |
US5457554A (en) | 1993-04-26 | 1995-10-10 | Faris; Sadeg M. | 3-D printing technology based on selective reflecting polarizing media |
US5513117A (en) | 1993-04-30 | 1996-04-30 | Small; Maynard E. | Apparatus and method for electronically dispensing personalized greeting cards and gifts |
US5442567A (en) | 1993-04-30 | 1995-08-15 | Small; Maynard E. | Apparatus and method for electronically dispensing personalized greeting cards and gifts |
JPH06332085A (en) | 1993-05-10 | 1994-12-02 | Quad Tech Inc | Formation method of wound belt body of graphic image |
JPH06320832A (en) | 1993-05-17 | 1994-11-22 | Oki Electric Ind Co Ltd | Printer |
JP3686684B2 (en) | 1993-05-19 | 2005-08-24 | 富士通株式会社 | Airbrush method |
JP3085824B2 (en) | 1993-05-20 | 2000-09-11 | 富士写真フイルム株式会社 | Memory controller |
US5438739A (en) | 1993-05-25 | 1995-08-08 | Compaq Computer Corporation | Method of making an elongated ink jet printhead |
GB2278480A (en) | 1993-05-25 | 1994-11-30 | Sharp Kk | Optical apparatus |
US6199874B1 (en) | 1993-05-26 | 2001-03-13 | Cornell Research Foundation Inc. | Microelectromechanical accelerometer for automotive applications |
US6236431B1 (en) | 1993-05-27 | 2001-05-22 | Canon Kabushiki Kaisha | Video camera apparatus with distance measurement area adjusted based on electronic magnification |
JPH06350907A (en) | 1993-06-07 | 1994-12-22 | Fuji Photo Film Co Ltd | Electronic still camera |
FR2706655B1 (en) | 1993-06-17 | 1995-08-25 | Gemplus Card Int | Method of controlling a printer to obtain postage. |
US5708900A (en) | 1993-06-18 | 1998-01-13 | Olympus Optical Co., Ltd. | Camera |
US5502485A (en) | 1993-06-23 | 1996-03-26 | Nikon Corporation | Camera which compresses digital image data in correspondence with the focus control or the stop value of the camera |
CA2127198A1 (en) | 1993-07-01 | 1995-01-02 | Darald R. Schultz | Portable compact multi-function printer with cartridge paper supply |
JP3097014B2 (en) | 1993-07-08 | 2000-10-10 | 株式会社リコー | Electronic still camera |
US5644341A (en) * | 1993-07-14 | 1997-07-01 | Seiko Epson Corporation | Ink jet head drive apparatus and drive method, and a printer using these |
EP1219446B1 (en) | 1993-07-20 | 2005-03-09 | Canon Kabushiki Kaisha | Ink jet recording apparatus using recording unit with ink cartridge having ink including element |
KR950003362A (en) | 1993-07-21 | 1995-02-16 | 마에다 가츠노스케 | Fiber Reinforced Thermoplastic Structures, Manufacturing Method and Extruder |
JPH0738830A (en) | 1993-07-22 | 1995-02-07 | Fuji Photo Film Co Ltd | Video printer |
US5986706A (en) | 1993-07-22 | 1999-11-16 | Canon Kabushiki Kaisha | Electronic apparatus |
JPH0776080A (en) | 1993-09-08 | 1995-03-20 | Canon Inc | Substrate for recording head, recording head, recording head cartridge, recording apparatus and production of substrate for recording head |
US5530793A (en) | 1993-09-24 | 1996-06-25 | Eastman Kodak Company | System for custom imprinting a variety of articles with images obtained from a variety of different sources |
JP2610386B2 (en) | 1993-09-28 | 1997-05-14 | 株式会社ハドソン | Camera with monitor |
JPH07123317A (en) | 1993-10-21 | 1995-05-12 | Canon Inc | Photographing device with vibration proofing function |
US5475318A (en) | 1993-10-29 | 1995-12-12 | Robert B. Marcus | Microprobe |
US5466918A (en) | 1993-10-29 | 1995-11-14 | Eastman Kodak Company | Method and apparatus for image compression, storage, and retrieval on magnetic transaction cards |
US5956058A (en) | 1993-11-05 | 1999-09-21 | Seiko Epson Corporation | Ink jet print head with improved spacer made from silicon single-crystal substrate |
US6122403A (en) | 1995-07-27 | 2000-09-19 | Digimarc Corporation | Computer system linked by using information in data objects |
US6116768A (en) | 1993-11-30 | 2000-09-12 | Texas Instruments Incorporated | Three input arithmetic logic unit with barrel rotator |
US5444230A (en) | 1993-11-30 | 1995-08-22 | Minnesota Mining And Manufacturing Company | Solid state optical reader with bi-directional protocol |
US5748326A (en) | 1993-12-07 | 1998-05-05 | Fisher-Price Inc. | Instant special effects electronic camera |
US5621545A (en) | 1993-12-08 | 1997-04-15 | Motta; Ricardo J. | Image production using color error diffusion |
US5533172A (en) | 1993-12-16 | 1996-07-02 | Xerox Corporation | Method of printing a print job with a print file |
US5579445A (en) | 1993-12-17 | 1996-11-26 | Xerox Corporation | Image resolution conversion method that employs statistically generated multiple morphological filters |
JP3244371B2 (en) | 1993-12-22 | 2002-01-07 | オリンパス光学工業株式会社 | Audio information processing system and audio information processing method |
US5560799A (en) | 1993-12-22 | 1996-10-01 | Jacobsen; Gary A. | In-line printing production of three dimensional image products incorporating lenticular transparent material |
JPH07220035A (en) | 1993-12-22 | 1995-08-18 | Xerox Corp | Optically readable record |
US6182901B1 (en) | 1993-12-22 | 2001-02-06 | Xerox Corporation | Orientational disambiguation for self-clocking glyph codes |
JPH07199030A (en) | 1993-12-28 | 1995-08-04 | Minolta Co Ltd | Telescope |
US5563643A (en) | 1994-01-03 | 1996-10-08 | Xerox Corporation | Ink jet printhead and ink supply manifold assembly having ink passageway sealed therebetween |
US5666411A (en) | 1994-01-13 | 1997-09-09 | Mccarty; Johnnie C. | System for computer software protection |
US5682191A (en) | 1994-01-24 | 1997-10-28 | Iris Graphics Inc. | Ink jet printing apparatus having modular components |
JPH07219689A (en) | 1994-01-31 | 1995-08-18 | Hitachi Ltd | Printer and system used therefor |
JP3127341B2 (en) | 1994-02-03 | 2001-01-22 | キヤノン株式会社 | Electrode substrate, method of manufacturing the same, recording medium, and information processing device |
US5565900A (en) | 1994-02-04 | 1996-10-15 | Hewlett-Packard Company | Unit print head assembly for ink-jet printing |
US5592597A (en) | 1994-02-14 | 1997-01-07 | Parametric Technology Corporation | Real-time image generation system for simulating physical paint, drawing media, and feature modeling with 3-D graphics |
JPH07226911A (en) | 1994-02-15 | 1995-08-22 | Eastman Kodak Japan Kk | Electronic still camera |
US5835616A (en) | 1994-02-18 | 1998-11-10 | University Of Central Florida | Face detection using templates |
US5726435A (en) | 1994-03-14 | 1998-03-10 | Nippondenso Co., Ltd. | Optically readable two-dimensional code and method and apparatus using the same |
US5477264A (en) | 1994-03-29 | 1995-12-19 | Eastman Kodak Company | Electronic imaging system using a removable software-enhanced storage device |
US5854882A (en) | 1994-04-08 | 1998-12-29 | The University Of Rochester | Halftone correction systems |
US5521710A (en) | 1994-04-12 | 1996-05-28 | Xerox Corporation | Method of applying electronically stored labels from a source job to a destination job in a printing system |
US5621868A (en) | 1994-04-15 | 1997-04-15 | Sony Corporation | Generating imitation custom artwork by simulating brush strokes and enhancing edges |
US5555496A (en) | 1994-05-06 | 1996-09-10 | Mary T. Tackbary | Method and apparatus for communicating with a card distribution center for management, selection, and delivery of social expression cards |
US6133951A (en) | 1994-05-10 | 2000-10-17 | Asahi Kogaku Kogyo Kabushiki Kaisha | Still-video camera with function setting operation |
JPH07322012A (en) | 1994-05-27 | 1995-12-08 | Fuji Xerox Co Ltd | Picture input/output device |
US5537294A (en) | 1994-06-01 | 1996-07-16 | The Whitaker Corporation | Printed circuit card having a contact clip for grounding a printed circuit board found therein |
US5452033A (en) | 1994-06-06 | 1995-09-19 | Eastman Kodak Company | Single use photographic film package and camera |
US6046768A (en) | 1994-06-15 | 2000-04-04 | Canon Kabushiki Kaisha | Apparatus used for image blur prevention |
WO1995035549A1 (en) | 1994-06-21 | 1995-12-28 | Soltesz John A | Modular optical memory card image display point of sale terminal |
US5719970A (en) | 1994-07-08 | 1998-02-17 | Seiko Epson Corporation | Image processing method and device |
US5549740A (en) | 1994-07-11 | 1996-08-27 | Canon Kabushiki Kaisha | Liquid composition, ink set and image forming method and apparatus using the composition and ink set |
US5621524A (en) * | 1994-07-14 | 1997-04-15 | Hitachi Koki Co., Ltd. | Method for testing ink-jet recording heads |
JPH0846846A (en) | 1994-07-29 | 1996-02-16 | Canon Inc | Image pickup device |
JPH0845246A (en) | 1994-07-29 | 1996-02-16 | Sony Corp | Recording medium, reproducing method, recording device and reproducing device |
AU3241795A (en) | 1994-08-09 | 1996-03-07 | Encad, Inc. | Printer ink cartridge |
US5602412A (en) | 1994-08-15 | 1997-02-11 | Nikon Corporation | Imaging device which adjusts the ratio of color excitation values produced by an image pickup element in accordance with an exit pupil position and the size of an aperture |
US5479015A (en) | 1994-08-18 | 1995-12-26 | Grumman Aerospace Corporation | Multi-image detector assembly |
US5529279A (en) | 1994-08-24 | 1996-06-25 | Hewlett-Packard Company | Thermal isolation structures for microactuators |
US5692225A (en) | 1994-08-30 | 1997-11-25 | Eastman Kodak Company | Voice recognition of recorded messages for photographic printers |
JP3823328B2 (en) | 1994-09-05 | 2006-09-20 | 株式会社ニコン | Focus detection device |
JP3368066B2 (en) | 1994-09-06 | 2003-01-20 | キヤノン株式会社 | Image recording apparatus and image recording method |
JP3504738B2 (en) | 1994-09-09 | 2004-03-08 | オリンパス株式会社 | Electronic imaging apparatus and electronic imaging system |
US5488223A (en) | 1994-09-13 | 1996-01-30 | Intermec Corporation | System and method for automatic selection of printer control parameters |
US5781708A (en) | 1994-09-13 | 1998-07-14 | Intermec Technology, Inc. | Integral bar code printer and reader system and method of operation |
US5872594A (en) | 1994-09-20 | 1999-02-16 | Thompson; Paul A. | Method for open loop camera control using a motion model to control camera movement |
JP3525353B2 (en) | 1994-09-28 | 2004-05-10 | 株式会社リコー | Digital electronic still camera |
US6670985B2 (en) | 1994-09-28 | 2003-12-30 | Canon Kabushiki Kaisha | Image sensing apparatus including a card device connectable to an information processing device |
JP3893480B2 (en) | 1994-09-28 | 2007-03-14 | 株式会社リコー | Digital electronic camera |
JP3009539U (en) | 1994-09-28 | 1995-04-04 | 明和グラビア株式会社 | Printed sheet with glitter |
US5678081A (en) | 1994-10-05 | 1997-10-14 | Fuji Photo Optical Co., Ltd. | Photographic camera having a picture size switching device |
JPH08116490A (en) | 1994-10-14 | 1996-05-07 | Olympus Optical Co Ltd | Image processing unit |
JPH08118727A (en) | 1994-10-28 | 1996-05-14 | Canon Inc | Method and apparatus for correcting recorder head, recording head corrected by the same apparatus and recorder using the same head |
US5826333A (en) | 1994-10-31 | 1998-10-27 | Canon Kabushiki Kaisha | Method of manufacturing an ink jet head |
US5592237A (en) | 1994-11-04 | 1997-01-07 | Infimed, Inc. | High resolution image processor with multiple bus architecture |
US5751303A (en) | 1994-11-10 | 1998-05-12 | Lasermaster Corporation | Printing medium management apparatus |
US5482389A (en) | 1994-11-25 | 1996-01-09 | Westerex International, Division Of Capitol Circuits | Paper feed driven cutter mechanism of an electronic printer |
US5619622A (en) | 1994-12-16 | 1997-04-08 | Xerox Corporation | Raster output interface for a printbar |
JPH08169110A (en) | 1994-12-20 | 1996-07-02 | Sharp Corp | Ink jet head |
US6203147B1 (en) | 1994-12-22 | 2001-03-20 | Hewlett-Packard Company | Electrical and fluidic interface for an ink supply |
US5812156A (en) | 1997-01-21 | 1998-09-22 | Hewlett-Packard Company | Apparatus controlled by data from consumable parts with incorporated memory devices |
CA2158384C (en) | 1994-12-27 | 1999-09-28 | Alexander Gibson Fraser | Multimedia program editing system and method |
JPH08186757A (en) | 1994-12-28 | 1996-07-16 | Canon Inc | Electronic camera |
US5703961A (en) | 1994-12-29 | 1997-12-30 | Worldscape L.L.C. | Image transformation and synthesis methods |
US5534962A (en) | 1995-01-09 | 1996-07-09 | Eastman Kodak Company | Method and apparatus for preventing unauthorized recycling of single-use camera and permitting authorized reuse of the camera |
US5642226A (en) | 1995-01-18 | 1997-06-24 | Rosenthal; Bruce A. | Lenticular optical system |
US5742305A (en) * | 1995-01-20 | 1998-04-21 | Hewlett-Packard | PWA inkjet printer element with resident memory |
US5792249A (en) | 1995-01-25 | 1998-08-11 | Canon Kabushiki Kaisha | Liquid composition, ink set, image-forming method and apparatus using the same |
EP0725364B1 (en) | 1995-02-02 | 2006-11-15 | Matsushita Electric Industrial Co., Ltd. | Image processing apparatus |
US5978609A (en) | 1995-02-13 | 1999-11-02 | Asahi Kogaku Kogyo Kabushiki Kaisha | Electronic still video camera having electro-developing recording medium |
AUPN113395A0 (en) | 1995-02-14 | 1995-03-09 | Canon Information Systems Research Australia Pty Ltd | Colour conversion method |
US5502529A (en) | 1995-02-14 | 1996-03-26 | Eastman Kodak Company | Method of recycling single-use camera |
US5602377A (en) | 1995-03-01 | 1997-02-11 | Metanetics Corporation | Bar code dataform scanning and labeling apparatus and method |
US5552837A (en) | 1995-03-01 | 1996-09-03 | Gemstar Development Corporation | Remote controller for scanning data and controlling a video system |
DE69632578T2 (en) | 1995-03-02 | 2005-06-09 | Parametric Technology Corp., Waltham | COMPUTER GRAPHICS SYSTEM FOR CREATING AND IMPROVING TEXTURE-TRAINING SYSTEMS |
DE19549376A1 (en) | 1995-03-07 | 1996-09-26 | Francotyp Postalia Gmbh | System for thermotransfer printing procedure |
US5598202A (en) | 1995-03-13 | 1997-01-28 | Gerber Scientific Products, Inc. | Method and apparatus for printing a graphic on fabric |
JP3542397B2 (en) | 1995-03-20 | 2004-07-14 | キヤノン株式会社 | Imaging device |
US6163340A (en) | 1995-03-27 | 2000-12-19 | Canon Kabushiki Kaisha | Automatic focus adjusting device |
TW360853B (en) | 1995-03-29 | 1999-06-11 | Seiko Epson Corp | A paper guiding device for a printer |
US5729471A (en) | 1995-03-31 | 1998-03-17 | The Regents Of The University Of California | Machine dynamic selection of one video camera/image of a scene from multiple video cameras/images of the scene in accordance with a particular perspective on the scene, an object in the scene, or an event in the scene |
US6493031B1 (en) | 1995-03-31 | 2002-12-10 | Canon Kabushiki Kaisha | Visual information processing method and apparatus for extracting feature quantities from a two-dimensional image signal |
AUPN230795A0 (en) | 1995-04-12 | 1995-05-04 | Eastman Kodak Company | Nozzle placement in monolithic drop-on-demand print heads |
WO1996032808A1 (en) | 1995-04-12 | 1996-10-17 | Eastman Kodak Company | Fax machine with concurrent drop selection and drop separation ink jet printing |
US5909227A (en) | 1995-04-12 | 1999-06-01 | Eastman Kodak Company | Photograph processing and copying system using coincident force drop-on-demand ink jet printing |
JPH08336069A (en) | 1995-04-13 | 1996-12-17 | Eastman Kodak Co | Electronic still camera |
US6053598A (en) | 1995-04-13 | 2000-04-25 | Pitney Bowes Inc. | Multiple print head packaging for ink jet printer |
US5750974A (en) | 1995-04-13 | 1998-05-12 | Keyence Corporation | Lighting apparatus having light emitting diodes arranged in a plurality of planes on a printed circuit board |
US6172706B1 (en) | 1995-04-19 | 2001-01-09 | Canon Kabushiki Kaisha | Video camera with automatic zoom adjustment based on distance between user's eyes |
US6047130A (en) | 1995-04-24 | 2000-04-04 | Environmental Protection Systems, Inc. | Apparatus and method for portrait photography |
US5600402A (en) | 1995-05-04 | 1997-02-04 | Kainen; Daniel B. | Method and apparatus for producing three-dimensional graphic images using a lenticular sheet |
JP3452685B2 (en) | 1995-05-10 | 2003-09-29 | 三菱電機株式会社 | Face image processing device |
JPH08317293A (en) | 1995-05-17 | 1996-11-29 | Minolta Co Ltd | Image pickup device |
US5754700A (en) | 1995-06-09 | 1998-05-19 | Intel Corporation | Method and apparatus for improving the quality of images for non-real time sensitive applications |
US5768482A (en) | 1995-06-14 | 1998-06-16 | Hewlett-Packard Company | Resolution-triggered sharpening for scaling of a digital-matrix image |
US20040201764A1 (en) | 1995-06-21 | 2004-10-14 | Tsutomu Honda | Dual mode image shooting apparatus with still image and motion video image recording and reproduction |
KR200154398Y1 (en) | 1995-07-13 | 1999-08-02 | 윤종용 | Paper unrolling apparatus |
US5999697A (en) | 1995-07-21 | 1999-12-07 | Sony Corporation | Apparatus for recording and/or reproducing still images |
AU6547596A (en) | 1995-07-27 | 1997-02-26 | Forever Yours, Inc. | Digital camera system for photographing infants |
US6640004B2 (en) | 1995-07-28 | 2003-10-28 | Canon Kabushiki Kaisha | Image sensing and image processing apparatuses |
US6008820A (en) | 1995-08-04 | 1999-12-28 | Microsoft Corporation | Processor for controlling the display of rendered image layers and method for controlling same |
JP3567540B2 (en) | 1995-08-11 | 2004-09-22 | ブラザー工業株式会社 | Scanning optical device |
US5587740A (en) | 1995-08-17 | 1996-12-24 | Brennan; James M. | Digital photo kiosk |
US5923882A (en) | 1995-08-29 | 1999-07-13 | Silicon Graphics, Inc. | Cross-module optimization for dynamically-shared programs and libraries |
US5715325A (en) | 1995-08-30 | 1998-02-03 | Siemens Corporate Research, Inc. | Apparatus and method for detecting a face in a video image |
US5613175A (en) | 1995-08-31 | 1997-03-18 | Xerox Corporation | Anisotropic imaging member |
JP3676443B2 (en) | 1995-09-01 | 2005-07-27 | オリンパス株式会社 | Information reproducing apparatus and information reproducing method |
AUPN522295A0 (en) | 1995-09-06 | 1995-09-28 | Eastman Kodak Company | Cmos process compatible fabrication of lift print heads |
JP3313952B2 (en) | 1995-09-14 | 2002-08-12 | キヤノン株式会社 | Ink jet recording device |
JP3286804B2 (en) | 1995-09-14 | 2002-05-27 | キヤノン株式会社 | Imaging device |
US5917963A (en) | 1995-09-21 | 1999-06-29 | Canon Kabushiki Kaisha | Image processing apparatus and image processing method |
US5940095A (en) | 1995-09-27 | 1999-08-17 | Lexmark International, Inc. | Ink jet print head identification circuit with serial out, dynamic shift registers |
US5819240A (en) | 1995-10-11 | 1998-10-06 | E-Stamp Corporation | System and method for generating personalized postage indica |
US5754690A (en) | 1995-10-27 | 1998-05-19 | Xerox Corporation | Position sensitive detector based image conversion system capable of preserving subpixel information |
US5790699A (en) | 1995-10-27 | 1998-08-04 | Xerox Corporation | Macrodetector based image conversion system |
US5896176A (en) | 1995-10-27 | 1999-04-20 | Texas Instruments Incorporated | Content-based video compression |
US6034740A (en) | 1995-10-30 | 2000-03-07 | Kabushiki Kaisha Photron | Keying system and composite image producing method |
US6135586A (en) * | 1995-10-31 | 2000-10-24 | Hewlett-Packard Company | Large area inkjet printhead |
US5740343A (en) | 1995-11-03 | 1998-04-14 | 3Dfx Interactive, Incorporated | Texture compositing apparatus and method |
US6111605A (en) | 1995-11-06 | 2000-08-29 | Ricoh Company Limited | Digital still video camera, image data output system for digital still video camera, frame for data relay for digital still video camera, data transfer system for digital still video camera, and image regenerating apparatus |
US5634730A (en) | 1995-11-06 | 1997-06-03 | Bobry; Howard H. | Hand-held electronic printer |
US5884013A (en) | 1995-11-17 | 1999-03-16 | Agfa-Gevaert | Autotypical screening with optimised dotshape |
US5790193A (en) | 1995-11-22 | 1998-08-04 | Eastman Kodak Company | Accessory module for an electronic camera |
US5715228A (en) | 1995-11-24 | 1998-02-03 | Sony Corporation | Optical recording apparatus |
US6489990B1 (en) | 1995-11-30 | 2002-12-03 | Koninklijke Philips Electronics N.V. | Highlight compensation apparatus for monochrome cameras |
US5706049A (en) | 1995-11-30 | 1998-01-06 | Eastman Kodak Company | Camera that records an active image area identifier with an image |
US6870566B1 (en) | 1995-12-07 | 2005-03-22 | Canon Kabushiki Kaisha | Image sensing system for sensing an image and converting the image into image signals with a controlled operating rate |
US5710582A (en) | 1995-12-07 | 1998-01-20 | Xerox Corporation | Hybrid ink jet printer |
US5805213A (en) | 1995-12-08 | 1998-09-08 | Eastman Kodak Company | Method and apparatus for color-correcting multi-channel signals of a digital camera |
JP3436851B2 (en) | 1995-12-11 | 2003-08-18 | 大日本スクリーン製造株式会社 | How to change the data conversion table |
JP3376194B2 (en) | 1995-12-15 | 2003-02-10 | キヤノン株式会社 | Image processing apparatus and method |
US5633678A (en) | 1995-12-20 | 1997-05-27 | Eastman Kodak Company | Electronic still camera for capturing and categorizing images |
US5717197A (en) | 1995-12-21 | 1998-02-10 | Xerox Corporation | Tiled embedded data block-types for generic embedded data block systems |
US5731062A (en) | 1995-12-22 | 1998-03-24 | Hoechst Celanese Corp | Thermoplastic three-dimensional fiber network |
US6166832A (en) | 1995-12-26 | 2000-12-26 | Rohm Co., Ltd. | Contact-type image sensor |
JP3459714B2 (en) | 1996-01-05 | 2003-10-27 | キヤノン株式会社 | Image reading device |
US5822606A (en) | 1996-01-11 | 1998-10-13 | Morton; Steven G. | DSP having a plurality of like processors controlled in parallel by an instruction word, and a control processor also controlled by the instruction word |
US6011585A (en) | 1996-01-19 | 2000-01-04 | Apple Computer, Inc. | Apparatus and method for rotating the display orientation of a captured image |
US5841441A (en) | 1996-01-19 | 1998-11-24 | Virtus Corporation | High-speed three-dimensional texture mapping systems and methods |
US6061179A (en) | 1996-01-23 | 2000-05-09 | Canon Kabushiki Kaisha | Stereoscopic image display apparatus with two-/three-dimensional image display switching function |
US5572310A (en) | 1996-01-24 | 1996-11-05 | Hewlett-Packard Company | Universal media size dial |
US5992994A (en) | 1996-01-31 | 1999-11-30 | Hewlett-Packard Company | Large inkjet print swath media support system |
JP3623840B2 (en) | 1996-01-31 | 2005-02-23 | 株式会社ルネサステクノロジ | Data processing apparatus and microprocessor |
US5619737A (en) | 1996-02-07 | 1997-04-08 | Eastman Kodak Company | Encodement-on-film recording apparatus utilizes flash components in a camera |
WO1997030375A1 (en) | 1996-02-13 | 1997-08-21 | Obsidian Imaging, Inc. | Method and apparatus for configuring a camera through external means |
US5995772A (en) | 1996-02-16 | 1999-11-30 | Lexmark International Inc. | Imaging apparatus cartridge including an encoded device |
US6009188A (en) | 1996-02-16 | 1999-12-28 | Microsoft Corporation | Method and system for digital plenoptic imaging |
US6188431B1 (en) | 1996-02-17 | 2001-02-13 | Casio Computers Co., Ltd. | Electronic still camera and method for communication between electronic still cameras |
JP3745067B2 (en) | 1996-02-20 | 2006-02-15 | キヤノン株式会社 | Imaging apparatus and control method thereof |
JPH09232435A (en) | 1996-02-22 | 1997-09-05 | Oki Electric Ind Co Ltd | Semiconductor integrated circuit |
US5767945A (en) | 1996-02-28 | 1998-06-16 | Eastman Kodak Company | Methods of changing the visibility of some characteristic or information to be included in a hard copy of a recorded image |
US5867394A (en) | 1996-03-01 | 1999-02-02 | The Standard Register Company | Document dispenser operational program downloading |
US5818023A (en) | 1996-03-05 | 1998-10-06 | Metanetics Corporation | Portable ID card verification apparatus |
JPH09252429A (en) | 1996-03-18 | 1997-09-22 | Nippon Television Network Corp | Picture replacement system and picture replacement method |
US5680036A (en) * | 1996-03-19 | 1997-10-21 | Compaq Computer Corporation | Logarithmic power compensation for a switching power supply |
US5852673A (en) | 1996-03-27 | 1998-12-22 | Chroma Graphics, Inc. | Method for general image manipulation and composition |
US6052648A (en) | 1996-04-12 | 2000-04-18 | Earthwatch Communications, Inc. | Method and system for display of weather-related information |
US5963104A (en) | 1996-04-15 | 1999-10-05 | Vlsi Technology, Inc. | Standard cell ring oscillator of a non-deterministic randomizer circuit |
US6020931A (en) | 1996-04-25 | 2000-02-01 | George S. Sheng | Video composition and position system and media signal communication system |
US5815186A (en) | 1996-04-29 | 1998-09-29 | Hewlett-Packard Company | Removable roll-feed apparatus and method |
US5907354A (en) | 1996-05-23 | 1999-05-25 | Eastman Kodak Company | Memory card housing with a center-actuated ejector |
JP3423532B2 (en) | 1996-05-24 | 2003-07-07 | キヤノン株式会社 | Image reading device |
US5852502A (en) | 1996-05-31 | 1998-12-22 | American Digital Imaging, Inc. | Apparatus and method for digital camera and recorder having a high resolution color composite image output |
FR2749948B1 (en) | 1996-06-13 | 1998-08-14 | Sagem | PRINTER ASSEMBLY AND CONSUMPTION TANK FOR OFFICE MACHINE |
JP3037140B2 (en) | 1996-06-13 | 2000-04-24 | 日本電気オフィスシステム株式会社 | Digital camera |
JPH103509A (en) | 1996-06-17 | 1998-01-06 | Olympus Optical Co Ltd | Device for recording information and method therefor |
JPH1011289A (en) | 1996-06-19 | 1998-01-16 | Mitsubishi Electric Corp | Instruction number expansion method in parallel processor, and parallel processors |
US5989678A (en) | 1996-06-25 | 1999-11-23 | Jacobson; Laurence | Method of simultaneously printing a portion of a hook and loop fabric and attaching the fabric to another fabric and the fabric or garment resulting therefrom |
US5966134A (en) | 1996-06-28 | 1999-10-12 | Softimage | Simulating cel animation and shading |
JP3308815B2 (en) | 1996-06-28 | 2002-07-29 | キヤノン株式会社 | Ink jet recording method and apparatus |
US5977982A (en) | 1996-06-28 | 1999-11-02 | Avid Technology Inc. | System and method for modification of the visual characteristics of digital 3D objects |
US6074042A (en) | 1997-06-04 | 2000-06-13 | Hewlett-Packard Company | Ink container having a guide feature for insuring reliable fluid, air and electrical connections to a printing system |
US5726693A (en) | 1996-07-22 | 1998-03-10 | Eastman Kodak Company | Ink printing apparatus using ink surfactants |
US5969322A (en) | 1996-07-29 | 1999-10-19 | Minolta Co., Ltd. | Apparatus having a film condition judging device |
US6257703B1 (en) | 1996-07-31 | 2001-07-10 | Canon Kabushiki Kaisha | Ink jet recording head |
US5982378A (en) | 1996-08-02 | 1999-11-09 | Spatial Technology Inc. | System and method for modeling a three dimensional object |
US5974238A (en) | 1996-08-07 | 1999-10-26 | Compaq Computer Corporation | Automatic data synchronization between a handheld and a host computer using pseudo cache including tags and logical data elements |
JPH1056604A (en) | 1996-08-07 | 1998-02-24 | Olympus Optical Co Ltd | Electronic camera with built-in printer and medium to be recorded |
US6136212A (en) | 1996-08-12 | 2000-10-24 | The Regents Of The University Of Michigan | Polymer-based micromachining for microfluidic devices |
US5812071A (en) | 1996-08-13 | 1998-09-22 | Northern Telecom Limited | Apparatus and method for lossy compression using dynamic domain quantization |
US5866253A (en) | 1996-08-19 | 1999-02-02 | Isorca, Inc. | Synthetic reinforcing strands with spaced filaments |
KR100196333B1 (en) | 1996-08-20 | 1999-06-15 | 윤종용 | Dma data transferring method using free loading of dma instruction |
US5894326A (en) | 1996-08-26 | 1999-04-13 | Eastman Kodak Company | Electronic camera having a printer |
US5878292A (en) | 1996-08-29 | 1999-03-02 | Eastman Kodak Company | Image-audio print, method of making and player for using |
US6028611A (en) | 1996-08-29 | 2000-02-22 | Apple Computer, Inc. | Modular digital image processing via an image processing chain |
US5914748A (en) | 1996-08-30 | 1999-06-22 | Eastman Kodak Company | Method and apparatus for generating a composite image using the difference of two images |
US5734154A (en) | 1996-09-03 | 1998-03-31 | Motorola, Inc. | Smart card with Iintegrated reader and visual image display |
US6097431A (en) | 1996-09-04 | 2000-08-01 | Flashpoint Technology, Inc. | Method and system for reviewing and navigating among images on an image capture unit |
US5874836A (en) | 1996-09-06 | 1999-02-23 | International Business Machines Corporation | High reliability I/O stacked fets |
GB9708020D0 (en) | 1996-09-07 | 1997-06-11 | Philips Electronics Nv | Image sensor |
EP1332876B1 (en) | 1996-09-09 | 2006-03-22 | Seiko Epson Corporation | Ink jet printer and ink printing method |
US5986718A (en) | 1996-09-19 | 1999-11-16 | Video Magic, Inc. | Photographic method using chroma-key and a photobooth employing the same |
US5914801A (en) | 1996-09-27 | 1999-06-22 | Mcnc | Microelectromechanical devices including rotating plates and related methods |
US5787193A (en) | 1996-09-27 | 1998-07-28 | Xerox Corporation | System for converting color image signals from RGB to CMY color spaces through look-up tables |
US5781924A (en) | 1996-09-30 | 1998-07-14 | Sun Microsystems, Inc. | Computer caching methods and apparatus |
US20020024603A1 (en) | 1996-10-02 | 2002-02-28 | Nikon Corporation | Image processing apparatus, method and recording medium for controlling same |
US6278481B1 (en) | 1996-10-03 | 2001-08-21 | Airify Communications, Inc. | Photocard that is inserted into a non-digital camera to enable the non-digital camera to take digital photographic images |
JPH10178557A (en) | 1996-10-14 | 1998-06-30 | Oki Data:Kk | Color image processing method |
DE69724906T2 (en) | 1996-10-16 | 2004-07-22 | Koninklijke Philips Electronics N.V. | Numerical image processing method for the automatic extraction of band-shaped objects |
JP3031613B2 (en) | 1996-11-12 | 2000-04-10 | 株式会社つくばソフト研究所 | Color / shade image input / output device and input / output method |
JPH10150514A (en) | 1996-11-18 | 1998-06-02 | Brother Ind Ltd | Image reader and adjustment device for photoelectric conversion section provided for the image reader |
US5864630A (en) | 1996-11-20 | 1999-01-26 | At&T Corp | Multi-modal method for locating objects in images |
US5884118A (en) | 1996-11-26 | 1999-03-16 | Xerox Corporation | Printer having print output linked to scanner input for automated image quality adjustment |
US5755519A (en) | 1996-12-04 | 1998-05-26 | Fargo Electronics, Inc. | Printer ribbon identification sensor |
US5991429A (en) | 1996-12-06 | 1999-11-23 | Coffin; Jeffrey S. | Facial recognition system for security access and identification |
US5924737A (en) | 1996-12-12 | 1999-07-20 | Young America Corporation | Postcard check |
US6222452B1 (en) | 1996-12-16 | 2001-04-24 | Confidence International Ab | Electronic identification tag |
US5994816A (en) | 1996-12-16 | 1999-11-30 | Mcnc | Thermal arched beam microelectromechanical devices and associated fabrication methods |
DE19653814A1 (en) | 1996-12-21 | 1998-06-25 | Koenig & Bauer Albert Ag | Supply roll |
TW352415B (en) | 1996-12-26 | 1999-02-11 | Fuji Photo Film Co Ltd | Still camera |
US5916358A (en) | 1996-12-30 | 1999-06-29 | Eastman Kodak Company | Ink compositions containing surfactant sols comprising mixtures of solid surfactants |
US5991865A (en) | 1996-12-31 | 1999-11-23 | Compaq Computer Corporation | MPEG motion compensation using operand routing and performing add and divide in a single instruction |
US6094221A (en) | 1997-01-02 | 2000-07-25 | Andersion; Eric C. | System and method for using a scripting language to set digital camera device features |
US5818032A (en) | 1997-01-03 | 1998-10-06 | Sun; Tsu-Hung Tom | Encoded color halftone micro-dots for high density digital information storage |
US5921686A (en) | 1997-01-16 | 1999-07-13 | Telpar, Inc. | Kiosk printer |
US5850234A (en) | 1997-01-21 | 1998-12-15 | Xerox Corporation | Ink jet printhead with improved operation |
US6022099A (en) | 1997-01-21 | 2000-02-08 | Eastman Kodak Company | Ink printing with drop separation |
US6375301B1 (en) | 1997-01-21 | 2002-04-23 | Hewlett-Packard Company | Replaceable cartridge, kit and method for flushing ink from an inkjet printer |
US5860363A (en) | 1997-01-21 | 1999-01-19 | Hewlett-Packard Company | Ink jet cartridge with separately replaceable ink reservoir |
US5788388A (en) | 1997-01-21 | 1998-08-04 | Hewlett-Packard Company | Ink jet cartridge with ink level detection |
US5949426A (en) | 1997-01-28 | 1999-09-07 | Integrated Device Technology, Inc. | Non-linear texture map blending |
US5909248A (en) | 1997-01-31 | 1999-06-01 | Eastman Kodak Company | Exposure control of camera attached to printer electronic camera |
US6014165A (en) | 1997-02-07 | 2000-01-11 | Eastman Kodak Company | Apparatus and method of producing digital image with improved performance characteristic |
US5917542A (en) | 1997-02-18 | 1999-06-29 | Eastman Kodak Company | System and method for digital image capture and transmission |
US6573927B2 (en) | 1997-02-20 | 2003-06-03 | Eastman Kodak Company | Electronic still camera for capturing digital image and creating a print order |
US6441854B2 (en) | 1997-02-20 | 2002-08-27 | Eastman Kodak Company | Electronic camera with quick review of last captured image |
US6198489B1 (en) | 1997-02-21 | 2001-03-06 | University Of Washington | Computer generated watercolor |
JP3101580B2 (en) | 1997-02-26 | 2000-10-23 | 三洋電機株式会社 | Image recording and playback device |
US5894309A (en) | 1997-02-27 | 1999-04-13 | Mitsubishi Electric Information Technology Center America, Inc. | System for modifying lighting in photographs |
US6421050B1 (en) | 1997-02-27 | 2002-07-16 | Mitsubishi Electric Research Laboratories, Inc. | User interface for creation of image generation and transformation functions |
US5896155A (en) | 1997-02-28 | 1999-04-20 | Eastman Kodak Company | Ink transfer printing apparatus with drop volume adjustment |
US5997124A (en) | 1997-03-12 | 1999-12-07 | Raster Graphics Inc. | Method and apparatus for drop volume normalization in an ink jet printing operation |
US6786420B1 (en) | 1997-07-15 | 2004-09-07 | Silverbrook Research Pty. Ltd. | Data distribution mechanism in the form of ink dots on cards |
AUPO799197A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART01) |
US5938766A (en) | 1997-03-21 | 1999-08-17 | Apple Computer, Inc. | System for extending functionality of a digital ROM using RAM/ROM jump tables and patch manager for updating the tables |
US5999190A (en) | 1997-04-04 | 1999-12-07 | Avid Technology, Inc. | Computer imaging using graphics components |
US5986671A (en) | 1997-04-10 | 1999-11-16 | Eastman Kodak Company | Method of combining two digitally generated images |
US5917937A (en) | 1997-04-15 | 1999-06-29 | Microsoft Corporation | Method for performing stereo matching to recover depths, colors and opacities of surface elements |
US5974234A (en) | 1997-04-15 | 1999-10-26 | Xerox Corporation | Centralized print server for interfacing one or more network clients with a plurality of printing devices |
JPH10294918A (en) | 1997-04-18 | 1998-11-04 | Canon Inc | Digital camera and ink jet recorder |
US5982424A (en) | 1997-04-23 | 1999-11-09 | Scientific-Atlanta, Inc. | CCD camera with adaptive compression control mechanism |
US5911056A (en) | 1997-05-01 | 1999-06-08 | Hewlett-Packard Co. | High speed interconnect bus |
US5909562A (en) | 1997-05-01 | 1999-06-01 | Hewlett-Packard Co. | Backup FIFO in-line storage |
US6227643B1 (en) | 1997-05-20 | 2001-05-08 | Encad, Inc. | Intelligent printer components and printing system |
US5949459A (en) | 1997-06-04 | 1999-09-07 | Hewlett-Packard Company | Method and apparatus for securing an ink container |
US5964156A (en) | 1997-06-04 | 1999-10-12 | Agfa Corporation | Optimizing workflow in a prepress printing system |
US6234608B1 (en) | 1997-06-05 | 2001-05-22 | Xerox Corporation | Magnetically actuated ink jet printing device |
US5933137A (en) | 1997-06-10 | 1999-08-03 | Flashpoint Technology, Inc. | Method and system for acclerating a user interface of an image capture unit during play mode |
US6014170A (en) | 1997-06-20 | 2000-01-11 | Nikon Corporation | Information processing apparatus and method |
US5923406A (en) | 1997-06-27 | 1999-07-13 | Pitney Bowes Inc. | Personal postage stamp vending machine |
US5980010A (en) | 1997-06-30 | 1999-11-09 | Eastman Kodak Company | Scanning ink jet printer for electronic displays |
US6043821A (en) | 1997-06-30 | 2000-03-28 | Ati Technologies, Inc. | Method and apparatus for rendering pixel information from blended texture maps |
US6416154B1 (en) | 1997-07-12 | 2002-07-09 | Silverbrook Research Pty Ltd | Printing cartridge with two dimensional code identification |
US6547364B2 (en) | 1997-07-12 | 2003-04-15 | Silverbrook Research Pty Ltd | Printing cartridge with an integrated circuit device |
US6362868B1 (en) | 1997-07-15 | 2002-03-26 | Silverbrook Research Pty Ltd. | Print media roll and ink replaceable cartridge |
US6565181B2 (en) | 1997-07-12 | 2003-05-20 | Silverbrook Research Pty Ltd | Printing cartridge with switch array identification |
US6803989B2 (en) | 1997-07-15 | 2004-10-12 | Silverbrook Research Pty Ltd | Image printing apparatus including a microcontroller |
US6702417B2 (en) | 1997-07-12 | 2004-03-09 | Silverbrook Research Pty Ltd | Printing cartridge with capacitive sensor identification |
US6618117B2 (en) | 1997-07-12 | 2003-09-09 | Silverbrook Research Pty Ltd | Image sensing apparatus including a microcontroller |
US7110024B1 (en) | 1997-07-15 | 2006-09-19 | Silverbrook Research Pty Ltd | Digital camera system having motion deblurring means |
AUPP398798A0 (en) * | 1998-06-09 | 1998-07-02 | Silverbrook Research Pty Ltd | Image creation method and apparatus (ij43) |
US6557977B1 (en) * | 1997-07-15 | 2003-05-06 | Silverbrook Research Pty Ltd | Shape memory alloy ink jet printing mechanism |
US7593058B2 (en) | 1997-07-15 | 2009-09-22 | Silverbrook Research Pty Ltd | Digital camera with integrated inkjet printer having removable cartridge containing ink and media substrate |
US6857719B2 (en) | 1997-07-15 | 2005-02-22 | Silverbrook Research Pty Ltd | Printing cartridge with pressure sensor array identification |
AUPO939997A0 (en) | 1997-09-23 | 1997-10-16 | Silverbrook Research Pty Ltd | Data processing method and apparatus (ART61) |
US6727948B1 (en) | 1997-07-15 | 2004-04-27 | Silverbrook Research Pty Ltd | Utilizing autofocus information for image processing in a digital camera |
US6431669B1 (en) | 1997-07-15 | 2002-08-13 | Silverbrook Research Pty Ltd | Method and apparatus for information storage in a portable print roll |
US6985207B2 (en) | 1997-07-15 | 2006-01-10 | Silverbrook Research Pty Ltd | Photographic prints having magnetically recordable media |
US6294101B1 (en) | 1997-07-15 | 2001-09-25 | Silverbrook Research Pty Ltd | Method of manufacture of a thermoelastic bend actuator ink jet printer |
US6918654B2 (en) | 1997-07-15 | 2005-07-19 | Silverbrook Research Pty Ltd | Ink distribution assembly for an ink jet printhead |
US6304291B1 (en) | 1997-07-15 | 2001-10-16 | Silverbrook Research Pty Ltd | Artcard for the administration of the operation of a camera device |
US7578582B2 (en) * | 1997-07-15 | 2009-08-25 | Silverbrook Research Pty Ltd | Inkjet nozzle chamber holding two fluids |
US6820968B2 (en) | 1997-07-15 | 2004-11-23 | Silverbrook Research Pty Ltd | Fluid-dispensing chip |
AUPO802797A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART54) |
US7410243B2 (en) * | 1997-07-15 | 2008-08-12 | Silverbrook Research Pty Ltd | Inkjet nozzle with resiliently biased ejection actuator |
US6738096B1 (en) | 1998-07-10 | 2004-05-18 | Silverbrook Research Pty Ltd | Low-cost disposable camera including print media carrying indication of postage paid |
AUPO850597A0 (en) | 1997-08-11 | 1997-09-04 | Silverbrook Research Pty Ltd | Image processing method and apparatus (art01a) |
AUPO797897A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Media device (ART18) |
US7284843B2 (en) | 1997-07-15 | 2007-10-23 | Silverbrook Research Pty Ltd | Ink distribution assembly for an ink jet printhead |
AUPO798697A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Data processing method and apparatus (ART51) |
US7044589B2 (en) | 1997-07-15 | 2006-05-16 | Silverbrook Res Pty Ltd | Printing cartridge with barcode identification |
US6665454B1 (en) | 1997-07-15 | 2003-12-16 | Silverbrook Research Pty Ltd | Dot adjacency compensation in optical storage systems using ink dots |
US6196541B1 (en) | 1997-07-15 | 2001-03-06 | Silverbrook Research Pty Ltd | De-curling print media in a digital instant printing camera |
AUPO799997A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART10) |
US6879341B1 (en) | 1997-07-15 | 2005-04-12 | Silverbrook Research Pty Ltd | Digital camera system containing a VLIW vector processor |
US6057850A (en) | 1997-07-15 | 2000-05-02 | Silicon Graphics, Inc. | Blended texture illumination mapping |
US7246897B2 (en) | 1997-07-15 | 2007-07-24 | Silverbrook Research Pty Ltd | Media cartridge for inkjet printhead |
AUPO850097A0 (en) | 1997-08-11 | 1997-09-04 | Silverbrook Research Pty Ltd | Image processing method and apparatus (art31) |
AUPO802597A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Image processing method and apparatus (ART08) |
US6317192B1 (en) | 1997-07-15 | 2001-11-13 | Silverbrook Research Pty Ltd | Utilization of image tiling effects in photographs |
AUPO801997A0 (en) | 1997-07-15 | 1997-08-07 | Silverbrook Research Pty Ltd | Media processing method and apparatus (ART21) |
US7050143B1 (en) | 1998-07-10 | 2006-05-23 | Silverbrook Research Pty Ltd | Camera system with computer language interpreter |
US7077515B2 (en) | 1997-07-15 | 2006-07-18 | Silverbrook Research Pty Ltd | Media cartridge for inkjet printhead |
US6213588B1 (en) | 1997-07-15 | 2001-04-10 | Silverbrook Research Pty Ltd | Electrostatic ink jet printing mechanism |
US6262769B1 (en) | 1997-07-31 | 2001-07-17 | Flashpoint Technology, Inc. | Method and system for auto rotating a graphical user interface for managing portrait and landscape images in an image capture unit |
US6199969B1 (en) | 1997-08-01 | 2001-03-13 | Encad, Inc. | Method and system for detecting nonfunctional elements in an ink jet printer |
US6229565B1 (en) | 1997-08-15 | 2001-05-08 | Howard H. Bobry | Hand-held electronic camera with integral printer |
US6260137B1 (en) | 1997-09-12 | 2001-07-10 | Siemens Aktiengesellschaft | Data processing unit with digital signal processing capabilities |
US5896169A (en) | 1997-09-16 | 1999-04-20 | Philips Electronics North America Corporation | Video level measuring apparatus for X-ray imaging systems |
JP4093618B2 (en) | 1997-10-08 | 2008-06-04 | 富士通株式会社 | Issuing / reading device for record carrier recording digital code signal and record carrier |
US6606171B1 (en) | 1997-10-09 | 2003-08-12 | Howtek, Inc. | Digitizing scanner |
US6407777B1 (en) | 1997-10-09 | 2002-06-18 | Deluca Michael Joseph | Red-eye filter method and apparatus |
US5996893A (en) | 1997-10-28 | 1999-12-07 | Eastman Kodak Company | Method and apparatus for visually identifying an area on a photograph or image where digital data is stored |
US6628333B1 (en) | 1997-11-12 | 2003-09-30 | International Business Machines Corporation | Digital instant camera having a printer |
JP3924878B2 (en) | 1997-11-14 | 2007-06-06 | ブラザー工業株式会社 | Automatic paper feeder |
US6597394B1 (en) | 1997-11-16 | 2003-07-22 | Pictos Technologies, Inc. | Programmable image transform processor for digital image processing |
US6323912B1 (en) | 1997-11-20 | 2001-11-27 | Eastman Kodak Company | Electronic camera with microfluidic printer that prints scented images |
JP2997924B2 (en) | 1997-11-26 | 2000-01-11 | 株式会社東京機械製作所 | Tower type multi-color printing device |
US6038491A (en) | 1997-11-26 | 2000-03-14 | Mars, Incorporated | Monitoring and reporting system using cellular carriers |
US5949967A (en) | 1997-12-12 | 1999-09-07 | Eastman Kodak Company | Transforming input color values to device control signals |
US6102505A (en) | 1997-12-18 | 2000-08-15 | Eastman Kodak Company | Recording audio and electronic images |
JP4412749B2 (en) | 1997-12-26 | 2010-02-10 | 富士フイルム株式会社 | Digital camera and image processing method in digital camera |
JPH11196359A (en) | 1997-12-27 | 1999-07-21 | Konica Corp | Image forming device |
US6441820B2 (en) | 1998-01-23 | 2002-08-27 | Pixar Animation Studios | Pseudo area lights |
US6226015B1 (en) | 1998-02-25 | 2001-05-01 | Intel Corporation | Method of automatically producing sketches and cartoon images from movies |
US6078758A (en) | 1998-02-26 | 2000-06-20 | Eastman Kodak Company | Printing and decoding 3-D sound data that has been optically recorded onto the film at the time the image is captured |
JPH11254700A (en) | 1998-03-10 | 1999-09-21 | Canon Inc | Ink jet recorder and media cartridge |
FR2775930B1 (en) | 1998-03-11 | 2000-06-02 | Heidelberger Druckmasch Ag | DEVICE FOR CONTROLLING THE PRINTING OF MATERIAL TAPE IN A ROTARY PRINTING MACHINE |
US7083108B2 (en) | 1998-07-10 | 2006-08-01 | Silverbrook Research Pty Ltd | Redundantly encoded data structure for encoding a surface |
US5974168A (en) | 1998-04-16 | 1999-10-26 | International Business Machines Corporation | Acquiring bump maps from curved objects |
US6011536A (en) | 1998-04-17 | 2000-01-04 | New York University | Method and system for generating an image having a hand-painted appearance |
EP0963847B1 (en) | 1998-05-13 | 2005-08-17 | Seiko Epson Corporation | Ink cartridge for ink-jet printing apparatus |
US6161915A (en) | 1998-06-19 | 2000-12-19 | Lexmark International, Inc | Identification of thermal inkjet printer cartridges |
US6816968B1 (en) | 1998-07-10 | 2004-11-09 | Silverbrook Research Pty Ltd | Consumable authentication protocol and system |
CA2277194A1 (en) | 1998-08-12 | 2000-02-12 | Robert W. Spurr | A printer media supply spool adapted to allow the printer to sense type of media, and method of assembling same |
US6494562B1 (en) | 1998-09-03 | 2002-12-17 | Hewlett-Packard Company | Method and apparatus for identifying a sales channel |
JP3776243B2 (en) | 1998-10-06 | 2006-05-17 | 株式会社沖データ | Ink ribbon, printing paper cassette and printer using the same |
US6357865B1 (en) | 1998-10-15 | 2002-03-19 | Xerox Corporation | Micro-electro-mechanical fluid ejector and method of operating same |
JP3586119B2 (en) | 1998-10-27 | 2004-11-10 | キヤノン株式会社 | Head substrate, inkjet head, inkjet printer |
AUPP702698A0 (en) | 1998-11-09 | 1998-12-03 | Silverbrook Research Pty Ltd | Image creation method and apparatus(ART78) |
US6149256A (en) | 1998-11-24 | 2000-11-21 | Eastman Kodak Company | Insertable cartridge for digital camera with ink jet printer |
US6304825B1 (en) | 1999-01-19 | 2001-10-16 | Xerox Corporation | Rotary encoder error compensation system and method for photoreceptor surface motion sensing and control |
US6386772B1 (en) | 1999-01-25 | 2002-05-14 | Fargo Electronics, Inc. | Method and apparatus for communicating between printer or laminator and supplies |
ES2239416T3 (en) | 1999-02-19 | 2005-09-16 | Hewlett-Packard Company, A Delaware Corporation | APPARATUS FOR THE SUPPLY OF PRINT SUPPORT. |
EP1034938A1 (en) | 1999-03-08 | 2000-09-13 | Hewlett-Packard Company | Inkjet apparatus and method for controlling undulating on media |
US6163361A (en) | 1999-04-23 | 2000-12-19 | Eastman Kodak Company | Digital camera including a printer for receiving a cartridge having security control circuitry |
US6791605B1 (en) | 1999-05-07 | 2004-09-14 | Eastman Kodak Company | Image capture and printing device |
US6633332B1 (en) | 1999-05-13 | 2003-10-14 | Hewlett-Packard Development Company, L.P. | Digital camera system and method capable of performing document scans |
DE29908918U1 (en) | 1999-05-20 | 1999-07-29 | Burgmann Dichtungswerk Feodor | Mechanical seal arrangement |
AUPQ056099A0 (en) | 1999-05-25 | 1999-06-17 | Silverbrook Research Pty Ltd | A method and apparatus (pprint01) |
AUPQ289099A0 (en) | 1999-09-16 | 1999-10-07 | Silverbrook Research Pty Ltd | Method and apparatus for manipulating a bayer image |
JP4106156B2 (en) | 1999-07-07 | 2008-06-25 | 理想科学工業株式会社 | Stencil printing machine |
JP3802997B2 (en) | 1999-07-14 | 2006-08-02 | 富士写真フイルム株式会社 | Electronic still camera |
US6304684B1 (en) | 2000-02-15 | 2001-10-16 | Cyberecord, Inc. | Information processing system and method of using same |
ATE404372T1 (en) | 2000-06-30 | 2008-08-15 | Silverbrook Res Pty Ltd | PRESSURE CARTRIDGE WITH AIR FILTER MEDIA |
US6425661B1 (en) | 2000-06-30 | 2002-07-30 | Silverbrook Research Pty Ltd | Ink cartridge |
AU2002222920A1 (en) | 2000-07-13 | 2002-01-30 | Seagate Technology Llc | Method for topographical patterning of a device |
US6375314B1 (en) | 2000-08-04 | 2002-04-23 | Lexmark International Inc. | Removable cassette having integrated supply of consumables |
US6543880B1 (en) | 2000-08-25 | 2003-04-08 | Hewlett-Packard Company | Inkjet printhead assembly having planarized mounting layer for printhead dies |
US6924835B1 (en) | 2000-10-20 | 2005-08-02 | Silverbrook Research Pty Ltd | Method and apparatus for fault tolerant data storage on photographs |
US20020063760A1 (en) | 2000-11-29 | 2002-05-30 | Dietl Steven J. | Remotely-powered ink cartridge identification system for an inkjet printer |
US6744526B2 (en) | 2001-02-09 | 2004-06-01 | Eastman Kodak Company | Image sensor having black pixels disposed in a spaced-apart relationship from the active pixels |
US20020141750A1 (en) | 2001-03-30 | 2002-10-03 | Ludtke Harold A. | Photographic prints carrying meta data and methods therefor |
US6655776B2 (en) | 2001-05-15 | 2003-12-02 | Eastman Kodak Company | Media pack for combination image acquisition and printing device |
JP3582649B2 (en) * | 2001-08-03 | 2004-10-27 | セイコーエプソン株式会社 | PRINTING APPARATUS, PRINTING METHOD, PRINTING APPARATUS CONTROL PROGRAM, AND MEDIUM RECORDING PRINTING APPARATUS CONTROL PROGRAM |
AUPS048802A0 (en) | 2002-02-13 | 2002-03-07 | Silverbrook Research Pty. Ltd. | Methods and systems (ap48) |
HRPK20020407B3 (en) | 2002-05-10 | 2005-04-30 | Gideon D.O.O. | Interactive cd rom post card |
WO2004012075A1 (en) | 2002-07-26 | 2004-02-05 | Seiko Epson Corporation | Print system |
US6958207B1 (en) | 2002-12-07 | 2005-10-25 | Niyaz Khusnatdinov | Method for producing large area antireflective microtextured surfaces |
US7127164B1 (en) | 2003-08-06 | 2006-10-24 | Eastman Kodak Company | Method for rating images to facilitate image retrieval |
JP2005193384A (en) | 2003-12-26 | 2005-07-21 | Ricoh Co Ltd | Image processing method, apparatus, and image forming apparatus |
US7999969B2 (en) | 2005-04-08 | 2011-08-16 | Panasonic Corporation | Imaging device, printing system, printing device, image printing method, and storage medium having stored thereon program controlling the image printing method |
-
1997
- 1997-08-11 AU AUPO8505A patent/AUPO850597A0/en not_active Abandoned
-
1998
- 1998-07-10 US US09/113,060 patent/US6750901B1/en not_active Expired - Fee Related
-
2003
- 2003-10-14 US US10/683,041 patent/US7360865B2/en not_active Expired - Fee Related
- 2003-10-14 US US10/683,064 patent/US7488051B2/en not_active Expired - Fee Related
-
2004
- 2004-03-19 US US10/804,042 patent/US7453492B2/en not_active Expired - Fee Related
-
2008
- 2008-11-26 US US12/324,817 patent/US7891775B2/en not_active Expired - Fee Related
-
2010
- 2010-12-28 US US12/980,204 patent/US8096642B2/en not_active Expired - Fee Related
-
2012
- 2012-01-15 US US13/350,791 patent/US20120113191A1/en not_active Abandoned
Patent Citations (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5031049A (en) | 1984-05-25 | 1991-07-09 | Canon Kabushiki Kaisha | Automatic object image follow-up device |
US4641980A (en) | 1984-10-02 | 1987-02-10 | Fujitsu Limited | Printer with pivotable print head attached to medium carrier moveable through a casing opening |
US4762986A (en) | 1986-03-10 | 1988-08-09 | Canon Kabushiki Kaisha | Automatic focussing system including in-focus position prediction means |
US4868676A (en) | 1986-03-19 | 1989-09-19 | Shapr Kabushiki Kaisha | Manual copying apparatus |
US4937676A (en) | 1989-02-10 | 1990-06-26 | Polariod Corporation | Electronic camera system with detachable printer |
EP0382044A2 (en) | 1989-02-10 | 1990-08-16 | Polaroid Corporation | Electronic camera system with detachable printer |
EP0398295A2 (en) | 1989-05-17 | 1990-11-22 | Minolta Co., Ltd. | A camera capable of recording and reproducing a photographed image |
US5235428A (en) | 1990-02-21 | 1993-08-10 | Sony Corporation | Auto-focus system for video camera |
US5835136A (en) | 1990-03-12 | 1998-11-10 | King Jim Co., Ltd. | Electronic printer camera |
US6147704A (en) | 1990-11-08 | 2000-11-14 | Canon Kabushiki Kaisha | Image processing system having a selector for selecting a picked-up image or a stored image for display |
US5463470A (en) | 1991-10-09 | 1995-10-31 | Fuji Photo Film Co., Ltd. | Methods of collecting photometric image data and determining light exposure by extracting feature image data from an original image |
US5512951A (en) | 1992-06-02 | 1996-04-30 | Sony Corporation | Auto-focusing apparatus |
US5398131A (en) | 1992-08-13 | 1995-03-14 | Hall; Dennis R. | Stereoscopic hardcopy methods |
US5434621A (en) | 1992-10-09 | 1995-07-18 | Samsung Electronics Co., Ltd. | Object tracking method for automatic zooming and the apparatus therefor |
JPH06149051A (en) | 1992-11-08 | 1994-05-27 | Ricoh Co Ltd | Developer container, processing cartridge, judgement device for recycling of such container or cartridge and image forming device |
US5748764A (en) | 1993-07-19 | 1998-05-05 | Eastman Kodak Company | Automated detection and correction of eye color defects due to flash illumination |
WO1995016323A1 (en) | 1993-12-07 | 1995-06-15 | Fisher-Price, Inc. | Instant special effects electronic camera |
US5418565A (en) | 1994-02-15 | 1995-05-23 | Eastman Kodak Company | CFA compatible resolution reduction in a single sensor electronic camera |
US6141036A (en) | 1994-04-28 | 2000-10-31 | Canon Kabushiki Kaisha | Image recording and reproducing apparatus |
US5528339A (en) | 1994-08-26 | 1996-06-18 | Eastman Kodak Company | Color image reproduction of scenes with color enhancement and preferential tone mapping |
US5572596A (en) | 1994-09-02 | 1996-11-05 | David Sarnoff Research Center, Inc. | Automated, non-invasive iris recognition system and method |
WO1996032265A1 (en) | 1995-04-12 | 1996-10-17 | Eastman Kodak Company | A color video printer and a photocd system with integrated printer |
WO1997006958A1 (en) | 1995-08-18 | 1997-02-27 | Fisher-Price, Inc. | Improved printer assembly with easily loaded paper cartridge |
US5847836A (en) | 1995-08-29 | 1998-12-08 | Canon Kabushiki Kaisha | Printer-built-in image-sensing apparatus and using strobe-light means electric-consumption control method thereof |
JPH0971015A (en) | 1995-09-05 | 1997-03-18 | Ricoh Co Ltd | Recording device and image communication device |
EP0763930A1 (en) | 1995-09-15 | 1997-03-19 | Agfa-Gevaert N.V. | Method and apparatus for calculating color gamuts |
US5745175A (en) | 1995-10-02 | 1998-04-28 | Flashpoint Technologies, Inc. | Method and system for providing automatic focus control for a still digital camera |
JPH09116843A (en) | 1995-10-20 | 1997-05-02 | Canon Inc | Image pickup device with printer |
JPH09187040A (en) | 1995-12-28 | 1997-07-15 | Fuji Photo Optical Co Ltd | Driver for zoom lens |
US5883830A (en) | 1995-12-29 | 1999-03-16 | Intel Corporation | CMOS imaging device with integrated flash memory image correction circuitry |
US5990973A (en) | 1996-05-29 | 1999-11-23 | Nec Corporation | Red-eye detection/retouch apparatus |
US6157394A (en) | 1996-08-29 | 2000-12-05 | Apple Computer, Inc. | Flexible digital image processing via an image processing chain with modular image processors |
US5757388A (en) | 1996-12-16 | 1998-05-26 | Eastman Kodak Company | Electronic camera and integral ink jet printer |
US6273535B1 (en) | 1997-02-14 | 2001-08-14 | Canon Kabushiki Kaisha | Image forming system and images forming apparatus |
US5845166A (en) | 1997-02-20 | 1998-12-01 | Eastman Kodak Company | Hybrid camera with identification matching of film and electronic images |
US5860036A (en) | 1997-06-10 | 1999-01-12 | Eastman Kodak Company | Controlling display useable in printers |
WO1999004368A1 (en) | 1997-07-15 | 1999-01-28 | Silverbrook Research Pty. Limited | A camera with internal printing system |
US6217165B1 (en) | 1997-07-15 | 2001-04-17 | Silverbrook Research Pty. Ltd. | Ink and media cartridge with axial ink chambers |
US6252976B1 (en) | 1997-08-29 | 2001-06-26 | Eastman Kodak Company | Computer program product for redeye detection |
US6292574B1 (en) | 1997-08-29 | 2001-09-18 | Eastman Kodak Company | Computer program product for redeye detection |
US6163338A (en) | 1997-12-11 | 2000-12-19 | Johnson; Dan | Apparatus and method for recapture of realtime events |
US6278491B1 (en) | 1998-01-29 | 2001-08-21 | Hewlett-Packard Company | Apparatus and a method for automatically detecting and reducing red-eye in a digital image |
US6285410B1 (en) | 1998-09-11 | 2001-09-04 | Mgi Software Corporation | Method and system for removal of flash artifacts from digital images |
US6134339A (en) | 1998-09-17 | 2000-10-17 | Eastman Kodak Company | Method and apparatus for determining the position of eyes and for correcting eye-defects in a captured frame |
Cited By (112)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8902340B2 (en) | 1997-07-12 | 2014-12-02 | Google Inc. | Multi-core image processor for portable device |
US9544451B2 (en) | 1997-07-12 | 2017-01-10 | Google Inc. | Multi-core image processor for portable device |
US9338312B2 (en) | 1997-07-12 | 2016-05-10 | Google Inc. | Portable handheld device with multi-core image processor |
US8947592B2 (en) | 1997-07-12 | 2015-02-03 | Google Inc. | Handheld imaging device with image processor provided with multiple parallel processing units |
US9185246B2 (en) | 1997-07-15 | 2015-11-10 | Google Inc. | Camera system comprising color display and processor for decoding data blocks in printed coding pattern |
US8077207B2 (en) | 1997-07-15 | 2011-12-13 | Silverbrook Research Pty Ltd | Camera unit incorporating a printer configured to print distorted images |
US8913151B2 (en) | 1997-07-15 | 2014-12-16 | Google Inc. | Digital camera with quad core processor |
US9584681B2 (en) | 1997-07-15 | 2017-02-28 | Google Inc. | Handheld imaging device incorporating multi-core image processor |
US20090262149A1 (en) * | 1997-07-15 | 2009-10-22 | Silverbrook Research Pty Ltd | Print Media Cartridge For A Camera |
US9560221B2 (en) | 1997-07-15 | 2017-01-31 | Google Inc. | Handheld imaging device with VLIW image processor |
US9432529B2 (en) | 1997-07-15 | 2016-08-30 | Google Inc. | Portable handheld device with multi-core microcoded image processor |
US20100201846A1 (en) * | 1997-07-15 | 2010-08-12 | Silverbrook Research Pty Ltd | Method of processing digital images in camera |
US9237244B2 (en) | 1997-07-15 | 2016-01-12 | Google Inc. | Handheld digital camera device with orientation sensing and decoding capabilities |
US9219832B2 (en) | 1997-07-15 | 2015-12-22 | Google Inc. | Portable handheld device with multi-core image processor |
US9197767B2 (en) | 1997-07-15 | 2015-11-24 | Google Inc. | Digital camera having image processor and printer |
US9191530B2 (en) | 1997-07-15 | 2015-11-17 | Google Inc. | Portable hand-held device having quad core image processor |
US20110122263A1 (en) * | 1997-07-15 | 2011-05-26 | Silverbrook Research Pty Ltd | Camera system for with velocity sensor and de-blurring processor |
US9191529B2 (en) | 1997-07-15 | 2015-11-17 | Google Inc | Quad-core camera processor |
US7984965B2 (en) | 1997-07-15 | 2011-07-26 | Silverbrook Research Pty Ltd | Print head unit with printhead and transport rollers |
US8013905B2 (en) | 1997-07-15 | 2011-09-06 | Silverbrook Research Pty Ltd | Method of processing images captured by digital camera to reduce distortion |
US8016400B2 (en) | 1997-07-15 | 2011-09-13 | Silverbrook Research Pty Ltd | Ink reservoir |
US9185247B2 (en) | 1997-07-15 | 2015-11-10 | Google Inc. | Central processor with multiple programmable processor units |
US8061828B2 (en) | 1997-07-15 | 2011-11-22 | Silverbrook Research Pty Ltd | Print media cartridge for a camera |
US8068151B2 (en) * | 1997-07-15 | 2011-11-29 | Silverbrook Research Pty Ltd | Digital camera with card reader for reading program script |
US8913137B2 (en) | 1997-07-15 | 2014-12-16 | Google Inc. | Handheld imaging device with multi-core image processor integrating image sensor interface |
US8098285B2 (en) | 1997-07-15 | 2012-01-17 | Silverbrook Research Pty Ltd | Processor for image capture and printing |
US9179020B2 (en) | 1997-07-15 | 2015-11-03 | Google Inc. | Handheld imaging device with integrated chip incorporating on shared wafer image processor and central processor |
US8102568B2 (en) | 1997-07-15 | 2012-01-24 | Silverbrook Research Pty Ltd | System for creating garments using camera and encoded card |
US8908075B2 (en) | 1997-07-15 | 2014-12-09 | Google Inc. | Image capture and processing integrated circuit for a camera |
US9148530B2 (en) | 1997-07-15 | 2015-09-29 | Google Inc. | Handheld imaging device with multi-core image processor integrating common bus interface and dedicated image sensor interface |
US8274665B2 (en) | 1997-07-15 | 2012-09-25 | Silverbrook Research Pty Ltd | Image sensing and printing device |
US8285137B2 (en) | 1997-07-15 | 2012-10-09 | Silverbrook Research Pty Ltd | Digital camera system for simultaneous printing and magnetic recording |
US20130010076A1 (en) * | 1997-07-15 | 2013-01-10 | Kia Silverbrook | Multi-core processor for portable device with dual image sensors |
US20130010082A1 (en) * | 1997-07-15 | 2013-01-10 | Kia Silverbrook | Portable hand-held device having stereoscopic image camera |
US20130010083A1 (en) * | 1997-07-15 | 2013-01-10 | Kia Silverbrook | Portable device with dual image sensors and quad-core processor |
US20130016247A1 (en) * | 1997-07-15 | 2013-01-17 | Kia Silverbrook | Camera device with color display and processor for decoding data blocks containing predetermined amount of data |
US20130021443A1 (en) * | 1997-07-15 | 2013-01-24 | Kia Silverbrook | Camera system with color display and processor for reed-solomon decoding |
US9143635B2 (en) | 1997-07-15 | 2015-09-22 | Google Inc. | Camera with linked parallel processor cores |
US9143636B2 (en) * | 1997-07-15 | 2015-09-22 | Google Inc. | Portable device with dual image sensors and quad-core processor |
US8421869B2 (en) | 1997-07-15 | 2013-04-16 | Google Inc. | Camera system for with velocity sensor and de-blurring processor |
US9137398B2 (en) * | 1997-07-15 | 2015-09-15 | Google Inc. | Multi-core processor for portable device with dual image sensors |
US9137397B2 (en) | 1997-07-15 | 2015-09-15 | Google Inc. | Image sensing and printing device |
US9131083B2 (en) | 1997-07-15 | 2015-09-08 | Google Inc. | Portable imaging device with multi-core processor |
US9124736B2 (en) | 1997-07-15 | 2015-09-01 | Google Inc. | Portable hand-held device for displaying oriented images |
US8823823B2 (en) | 1997-07-15 | 2014-09-02 | Google Inc. | Portable imaging device with multi-core processor and orientation sensor |
US8836809B2 (en) | 1997-07-15 | 2014-09-16 | Google Inc. | Quad-core image processor for facial detection |
US9124737B2 (en) | 1997-07-15 | 2015-09-01 | Google Inc. | Portable device with image sensor and quad-core processor for multi-point focus image capture |
US8866926B2 (en) | 1997-07-15 | 2014-10-21 | Google Inc. | Multi-core processor for hand-held, image capture device |
US8896720B2 (en) | 1997-07-15 | 2014-11-25 | Google Inc. | Hand held image capture device with multi-core processor for facial detection |
US8896724B2 (en) | 1997-07-15 | 2014-11-25 | Google Inc. | Camera system to facilitate a cascade of imaging effects |
US8902357B2 (en) | 1997-07-15 | 2014-12-02 | Google Inc. | Quad-core image processor |
US9060128B2 (en) | 1997-07-15 | 2015-06-16 | Google Inc. | Portable hand-held device for manipulating images |
US8902333B2 (en) | 1997-07-15 | 2014-12-02 | Google Inc. | Image processing method using sensed eye position |
US8902324B2 (en) | 1997-07-15 | 2014-12-02 | Google Inc. | Quad-core image processor for device with image display |
US8908051B2 (en) | 1997-07-15 | 2014-12-09 | Google Inc. | Handheld imaging device with system-on-chip microcontroller incorporating on shared wafer image processor and image sensor |
US8908069B2 (en) | 1997-07-15 | 2014-12-09 | Google Inc. | Handheld imaging device with quad-core image processor integrating image sensor interface |
US9168761B2 (en) | 1997-07-15 | 2015-10-27 | Google Inc. | Disposable digital camera with printing assembly |
US9055221B2 (en) | 1997-07-15 | 2015-06-09 | Google Inc. | Portable hand-held device for deblurring sensed images |
US8953061B2 (en) | 1997-07-15 | 2015-02-10 | Google Inc. | Image capture device with linked multi-core processor and orientation sensor |
US8913182B2 (en) | 1997-07-15 | 2014-12-16 | Google Inc. | Portable hand-held device having networked quad core processor |
US8922670B2 (en) * | 1997-07-15 | 2014-12-30 | Google Inc. | Portable hand-held device having stereoscopic image camera |
US8922791B2 (en) * | 1997-07-15 | 2014-12-30 | Google Inc. | Camera system with color display and processor for Reed-Solomon decoding |
US8928897B2 (en) | 1997-07-15 | 2015-01-06 | Google Inc. | Portable handheld device with multi-core image processor |
US8934053B2 (en) | 1997-07-15 | 2015-01-13 | Google Inc. | Hand-held quad core processing apparatus |
US8934027B2 (en) | 1997-07-15 | 2015-01-13 | Google Inc. | Portable device with image sensors and multi-core processor |
US8937727B2 (en) | 1997-07-15 | 2015-01-20 | Google Inc. | Portable handheld device with multi-core image processor |
US8936196B2 (en) | 1997-07-15 | 2015-01-20 | Google Inc. | Camera unit incorporating program script scanner |
US20070011023A1 (en) * | 1997-07-15 | 2007-01-11 | Silverbrook Research Pty Ltd | Apparatus for authenticating the validity of a device |
US8947679B2 (en) | 1997-07-15 | 2015-02-03 | Google Inc. | Portable handheld device with multi-core microcoded image processor |
US8953178B2 (en) | 1997-07-15 | 2015-02-10 | Google Inc. | Camera system with color display and processor for reed-solomon decoding |
US8953060B2 (en) | 1997-07-15 | 2015-02-10 | Google Inc. | Hand held image capture device with multi-core processor and wireless interface to input device |
US8096642B2 (en) | 1997-08-11 | 2012-01-17 | Silverbrook Research Pty Ltd | Inkjet nozzle with paddle layer arranged between first and second wafers |
US20060005160A1 (en) * | 1997-08-18 | 2006-01-05 | National Instruments Corporation | Image acquisition device |
US20170336826A1 (en) * | 1997-09-19 | 2017-11-23 | Glenn Rolus Borgward | Digital book |
US10101768B2 (en) * | 1997-09-19 | 2018-10-16 | Glenn Rolus Borgward | Digital book |
US8789939B2 (en) | 1998-11-09 | 2014-07-29 | Google Inc. | Print media cartridge with ink supply manifold |
US20110103380A1 (en) * | 1999-03-31 | 2011-05-05 | Comcast Ip Holdings I, Llc | Method and Apparatus for Injecting Information Assets Into a Content Stream |
US8553687B2 (en) * | 1999-03-31 | 2013-10-08 | Comcast Ip Holdings I, Llc | Method and apparatus for injecting information assets into a content stream |
US8866923B2 (en) | 1999-05-25 | 2014-10-21 | Google Inc. | Modular camera and printer |
US8020979B2 (en) | 2001-08-06 | 2011-09-20 | Silverbrook Research Pty Ltd | Cartridge with optically readalble print media and ink information |
US20090201379A1 (en) * | 2002-04-10 | 2009-08-13 | Schultz Kevin L | Smart Camera with Modular Expansion Capability Including a Function Module that Performs Image Processing |
US7791671B2 (en) | 2002-04-10 | 2010-09-07 | National Instruments Corporation | Smart camera with modular expansion capability including a function module that performs image processing |
US7934494B1 (en) * | 2003-10-10 | 2011-05-03 | Donna Gail Schneider | Collapsible heating apparatus |
US20060033841A1 (en) * | 2004-08-06 | 2006-02-16 | Park Dong-Sik | Display apparatus and control method thereof |
US7583256B2 (en) * | 2004-08-06 | 2009-09-01 | Samsung Electronics Co., Ltd. | Display apparatus and control method thereof |
US8743253B2 (en) * | 2004-09-02 | 2014-06-03 | Sony Corporation | Method of controlling read address, physical information acquisition apparatus, and semiconductor device |
US20060072168A1 (en) * | 2004-09-02 | 2006-04-06 | Masafumi Okano | Method of controlling read address, physical information acquisition apparatus, and semiconductor device |
US20100004429A1 (en) * | 2006-03-23 | 2010-01-07 | Kirin Pharma Kabushiki Kaisha | Agonist antibody to human thrombopoietin receptor |
US20080222430A1 (en) * | 2007-03-06 | 2008-09-11 | International Business Machines Corporation | Protection of Secure Electronic Modules Against Attacks |
US7953987B2 (en) * | 2007-03-06 | 2011-05-31 | International Business Machines Corporation | Protection of secure electronic modules against attacks |
US20120197961A1 (en) * | 2007-04-13 | 2012-08-02 | Platform Computing Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US9967360B2 (en) | 2007-04-13 | 2018-05-08 | International Business Machines Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US9407715B2 (en) * | 2007-04-13 | 2016-08-02 | International Business Machines Corporation | Method and system for information exchange utilizing an asynchronous persistent store protocol |
US20090154765A1 (en) * | 2007-08-07 | 2009-06-18 | Takashi Watanabe | Information Display Device And Information Display Method |
US8116597B2 (en) * | 2007-08-07 | 2012-02-14 | Hitachi-Omron Terminal Solutions, Corporation | Information display device and information display method |
US8416228B2 (en) * | 2007-09-26 | 2013-04-09 | Panasonic Corporation | Driving device, driving method and plasma display apparatus |
US20100207917A1 (en) * | 2007-09-26 | 2010-08-19 | Panasonic Corporation | Driving device, driving method and plasma display apparatus |
US8386461B2 (en) * | 2008-06-16 | 2013-02-26 | Qualcomm Incorporated | Method and apparatus for generating hash mnemonics |
US20090313269A1 (en) * | 2008-06-16 | 2009-12-17 | Bachmann Todd Adam | Method and apparatus for generating hash mnemonics |
US9767271B2 (en) | 2010-07-15 | 2017-09-19 | The Research Foundation For The State University Of New York | System and method for validating program execution at run-time |
US20160098359A1 (en) * | 2011-09-08 | 2016-04-07 | Lexmark International, Inc. | System and Method for Secured Host-slave Communication |
US9535852B2 (en) * | 2011-09-08 | 2017-01-03 | Lexmark International, Inc. | System and method for secured host-slave communication |
US9767284B2 (en) | 2012-09-14 | 2017-09-19 | The Research Foundation For The State University Of New York | Continuous run-time validation of program execution: a practical approach |
US20140123208A1 (en) * | 2012-10-31 | 2014-05-01 | Google Inc. | Privacy aware camera and device status indicator system |
US9699217B2 (en) | 2012-10-31 | 2017-07-04 | Google Inc. | Privacy aware camera and device status indicator system |
US9317721B2 (en) * | 2012-10-31 | 2016-04-19 | Google Inc. | Privacy aware camera and device status indicator system |
US20160229179A1 (en) * | 2013-10-15 | 2016-08-11 | Hewlett-Packard Development Company, L.P. | Authentication value for print head die based on analog device electrical characteristics |
US9855777B2 (en) | 2013-10-15 | 2018-01-02 | Hewlett-Packard Development Company, L.P. | Authentication value for fluid ejection device |
US9630400B2 (en) * | 2013-10-15 | 2017-04-25 | Hewlett-Packard Development Company, L.P. | Authentication value for print head die based on analog device electrical characteristics |
US10112425B2 (en) | 2013-10-15 | 2018-10-30 | Hewlett-Packard Development Company, L.P. | Authentication value for a fluid ejection device |
US9484901B1 (en) * | 2014-10-27 | 2016-11-01 | Altera Corporation | Interpolation circuitry and methods |
US11036472B2 (en) * | 2017-11-08 | 2021-06-15 | Samsung Electronics Co., Ltd. | Random number generator generating random number by using at least two algorithms, and security device comprising the random number generator |
Also Published As
Publication number | Publication date |
---|---|
US20120113191A1 (en) | 2012-05-10 |
US7488051B2 (en) | 2009-02-10 |
US7891775B2 (en) | 2011-02-22 |
US20040100518A1 (en) | 2004-05-27 |
US7360865B2 (en) | 2008-04-22 |
US20090128601A1 (en) | 2009-05-21 |
US20110096122A1 (en) | 2011-04-28 |
US20040183914A1 (en) | 2004-09-23 |
AUPO850597A0 (en) | 1997-09-04 |
US6750901B1 (en) | 2004-06-15 |
US20040218194A1 (en) | 2004-11-04 |
US8096642B2 (en) | 2012-01-17 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7453492B2 (en) | Portable hand held camera | |
US7289156B2 (en) | Optical data card reader | |
US7391435B2 (en) | Monolithic integrated circuit with a printhead interface | |
US6459495B1 (en) | Dot center tracking in optical storage systems using ink dots | |
US7631966B2 (en) | Print roll for a camera having an internal printer | |
US6831681B1 (en) | Preprinted print rolls for use in an image processing device | |
US6948661B2 (en) | Data structure encoded on a surface of an object | |
US6636216B1 (en) | Digital image warping system | |
US6665454B1 (en) | Dot adjacency compensation in optical storage systems using ink dots | |
US20050185461A1 (en) | Redundantly encoded data structure for encoding a surface | |
US6788336B1 (en) | Digital camera with integral color printer and modular replaceable print roll | |
US6415054B1 (en) | Target detection for dot region alignment in optical storage systems using ink dots |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: SILVERBROOK RESEARCH PTY. LTD., AUSTRALIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK, KIA;REEL/FRAME:015122/0682Effective date: 20040308Owner name: SILVERBROOK RESEARCH PTY. LTD., AUSTRALIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK, KIA;REEL/FRAME:015122/0699Effective date: 20040308 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029668/0094Effective date: 20120831 |
|
XAS | Not any more in us assignment database |
Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029668/0094 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SILVERBROOK RESEARCH PTY LTD;REEL/FRAME:029823/0001Effective date: 20120831 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20161118 |