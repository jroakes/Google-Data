US10050849B1 - Methods and systems for identifying styles of properties of document object model elements of an information resource - Google Patents
Methods and systems for identifying styles of properties of document object model elements of an information resource Download PDFInfo
- Publication number
- US10050849B1 US10050849B1 US14/480,089 US201414480089A US10050849B1 US 10050849 B1 US10050849 B1 US 10050849B1 US 201414480089 A US201414480089 A US 201414480089A US 10050849 B1 US10050849 B1 US 10050849B1
- Authority
- US
- United States
- Prior art keywords
- dom
- styles
- information resource
- properties
- container
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/151—Transformation
- G06F40/154—Tree transformation for tree-structured or markup documents, e.g. XSLT, XSL-FO or stylesheets
-
- G06F17/2247—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/103—Formatting, i.e. changing of presentation of documents
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/10—Text processing
- G06F40/12—Use of codes for handling textual entities
- G06F40/14—Tree-structured documents
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L43/00—Arrangements for monitoring or testing data switching networks
- H04L43/04—Processing captured monitoring data, e.g. for logfile generation
Definitions
- Information resources can include primary content and content slots that serve as placeholders for third-party content items, such as creatives.
- third-party content items are inserted in the content slots and provided for display alongside the primary content.
- the content slots in which third-party content items are inserted are typically defined manually in the web page code.
- At least one aspect is directed to a method of generating a stable identifier for nodes likely to include primary content of an information resource.
- a processor identifies, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules.
- the processor determines one or more container nodes containing one or more of the identified content-related DOM nodes.
- the processor generates, for each of the container nodes, one or more identifiers corresponding to the container node.
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds.
- DOM Document Object Model
- the processor identifies, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node. In some implementations, the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name. In some implementations, the stable class name includes any class name that does not end in a number.
- selecting one of the identifiers of the subset as the stable identifier includes identifying an identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
- the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- a system for generating a stable identifier for nodes likely to include primary content of an information resource includes a data processing system configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
- DOM Document Object Model
- the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node. In some implementations, the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name. In some implementations, the stable class name includes any class name that does not end in a number.
- selecting one of the identifiers of the subset as a stable identifier includes identifying an identifier of the identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource.
- determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
- the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
- a computer-readable storage medium has computer-executable instructions, which when executed by a computer, cause the computer to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
- DOM Document Object Model
- a method of automatically detecting styles of properties of document object model (DOM) elements of an information resource is described.
- One or more processors identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource.
- the processors identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content.
- the processors determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element.
- the processors store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container.
- the processors then use the stored styles of properties to modify third-party content to be inserted within the information resource.
- identifying the information resource for which to automatically detect styles of properties includes identifying, from a log, a plurality of information resources on which third-party content was served and selecting, from the identified information resources, the information resource for which to automatically detect the style.
- the processors can identify the one or more DOM elements included in the DOM container.
- the one or more DOM elements can include a header element, a paragraph element, and a link element.
- the processors can determine, from the DOM element corresponding to a header element of the primary content, whether the header element includes a link.
- the processors can insert, responsive to determining that the header element does not include a link, a link in the header element.
- the processors can determine styles of properties associated with the header element in which the link is inserted and store the determined style property associated with the header element in which the link is inserted in the memory.
- the processors can identify the one or more DOM elements included in the DOM container.
- the processors can determine, for each of the one or more identified DOM elements, a type of DOM element.
- the processors can then determine, based on the type of DOM element, styles of properties of the DOM element.
- the styles of properties include at least one of a font-family, font-size, font-weight, color, text-align, text-decoration, or line-height.
- the processors can determine, from a DOM element corresponding to the DOM container, that the DOM element does not define one or more styles of properties of a border.
- the processors can identify, from a descendant of the DOM element, that the descendants of the DOM element define the styles of properties of the border and set the styles of properties of the border of the descendant of the DOM element as the styles of properties of the border for the DOM element corresponding to the DOM container.
- using the stored styles of properties to modify third-party content to be inserted within the information resource includes identifying, by the processors, a third-party content item to serve at the information resource, identifying, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource, generating, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item, the DOM elements including styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource, inserting the DOM node in a DOM tree of the information resource and providing, to a computing device on which to render the information resource including the generated third-party content item, the DOM tree of the information resource including the DOM node corresponding to the third-party content item.
- a system for automatically detecting styles of properties of document object model (DOM) elements of an information resource includes a data processing system having one or more processors.
- the processors identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource.
- the processors identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content.
- the processors determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element.
- the processors store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container.
- the processors then use the stored styles of properties to modify third-party content to be inserted within the information resource.
- a computer-readable storage medium has computer-executable instructions, which when executed by a computer, cause the computer to identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and then use the stored styles of properties to modify third-party content to be inserted within the information resource.
- DOM Document Object Model
- FIG. 1 is a block diagram depicting one implementation of an environment for automatically generating a stable identifier for primary content detected within an information resource and automatically identifying styles of properties of Document Object Model (DOM) elements of the information resource, according to an illustrative implementation;
- DOM Document Object Model
- FIG. 2A is a screenshot of a display of an information resource including a plurality of posts.
- FIG. 2B is a screenshot of a display of the information resource shown in FIG. 2A but including a plurality of creatives inserted between the plurality of posts.
- FIG. 3A is a screenshot of a display of an information resource including an article including a plurality of paragraphs.
- FIG. 3B is a screenshot of a display of the information resource shown in FIG. 3A but including a creative inserted between the plurality of paragraphs.
- FIG. 4 is a flow diagram depicting one implementation of the steps taken to generate a stable identifier for primary content detected within an information resource
- FIG. 5 is a flow diagram depicting one implementation of the steps taken to automatically identify styles of properties of DOM elements of the information resource.
- FIG. 6 is a block diagram illustrating an implementation of a general architecture for a computer system that may be employed to implement various elements of the systems and methods described and illustrated herein.
- One aspect of the present disclosure relates to generate a stable identifier for primary content detected within an information resource.
- a data processing system can generate a stable identifier for the detected primary content.
- the stable identifier can be used to reference primary content on future renderings of the information resource. For example, once the data processing system generates a stable identifier for the primary content included in the information resource, the data processing system can dynamically insert creatives in the information resource when the information resource is rendered at a computing device. Details relating to generating a stable identifier for primary content detected within an information resource are provided below with respect to Section A.
- a data processing system including one or more processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and use the stored styles of properties to modify third-party content to be inserted within the information resource. Details relating to automatically detecting styles of properties of DOM elements of an information resource are provided below with respect to Section B.
- Information resources are often very complicated. For example, many information resources include numerous images and distinct sections of text.
- the information resources can include menus, headers, sidebars, footers, ads, widgets as well as what might be considered the actual primary content.
- a user viewing the information resource can easily differentiate these different parts of the information resource and focus on the primary content, the process of automatically detecting primary content included in an information resource is much more challenging.
- Primary content on information resources can often be presented in one of two forms.
- the primary content can be presented as a list of posts. Each post is its own distinct piece of content about a certain subject, but together the posts make up the primary content of the web page.
- the primary content can be presented as a single long form post or article.
- the primary content on an information resource may generally be contained in a container associated with a stable identifier.
- the present disclosure provides methods and systems for automatically generating stable identifiers for the detected primary content of an information resource.
- the generated stable identifiers can be used to insert content slots for serving creatives or third-party content items on the information resource.
- the present disclosure provides methods and systems for automatically detecting these pieces of primary content.
- each of the posts may be identified as a distinct piece of content.
- the whole of the primary content should be detected as a single piece of content.
- identifiers allow the posts or articles on a web page to be very quickly and efficiently accessed by JavaScript once the page has been rendered in a browser. This allows for creatives to be inserted within the primary content of a page dynamically.
- a creative can be inserted after the first paragraph of each post when the web page is presenting the primary content as a list of posts.
- a creative can be inserted after the first three paragraphs of an article when the web page is presenting the primary content as a single piece of content.
- a processor can be configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content based on an identifier associated with the nodes, determine one or more container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier.
- DOM Document Object Model
- FIG. 1 illustrates an system 100 for generating a stable identifier for primary content detected within an information resource via at least one computer network, such as the network 105 .
- the network 105 can include computer networks such as the internet, local, wide, metro or other area networks, intranets, satellite networks, other computer networks such as voice or data mobile phone communication networks, and combinations thereof.
- the system 100 can also include at least one data processing system 110 , e.g., at least one logic device such as a computing device or server having a processor to communicate via the network 105 , for instance with at least one content provider computing device 115 , at least one content publisher computing device 120 , or at least one end user computing device 125 .
- the data processing system 110 can include at least one server.
- the data processing system 110 can include a plurality of servers located in at least one data center or server farm.
- the data processing system 110 includes a content placement system, e.g., an ad server or ad placement system.
- the data processing system 110 can include at least one primary content detection module 130 , at least one stable identifier generation module 132 , at least one content insertion module 134 , at least one style property detection module 136 , at least one third-party content modification module 138 and at least one database 140 .
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can each include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with the database 140 and with other computing devices (e.g., the content provider computing device 115 , the content publisher computing device 120 , or the end user computing device 125 ) via the network 105 .
- other computing devices e.g., the content provider computing device 115 , the content publisher computing device 120 , or the end user computing device 125 .
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can include or execute at least one computer program or at least one script.
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can be separate components, a single component, or part of the data processing system 110 .
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier, for instance.
- DOM Document Object Model
- the content provider computing devices 115 can include servers or other computing devices operated by a content provider entity to provide content items such as advertisements for display on information resources at the end user computing device 125 .
- the content provided by the content provider computing device 115 can include third party content items or creatives (e.g., ads) for display on information resources such as a website or web page that includes primary content, e.g. content provided by the content publisher computing device 120 .
- the content items can also be displayed on a search results web page.
- the content provider computing device 115 can provide or be the source of ads or other content items for display in content slots of content web pages such as a web page of a company where the primary content of the web page is provided by the company, or for display on a search results landing page provided by a search engine.
- the content items associated with the content provider computing device 115 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other end user computing device 125 .
- the content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the network 105 .
- the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page.
- the primary content can include content other than that provided by the content publisher computing device 120
- the web page can include content slots configured for the display of third party content items (e.g., ads) from the content provider computing devices 115 .
- the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website.
- the web pages can include content slots configured for the display of third party content items such as ads of the content provider computing device 115 .
- the content publisher computing device 120 includes a search engine computing device (e.g. server) of a search engine operator that operates a search engine website.
- the primary content of search engine web pages e.g., a results or landing web page
- results of a search can include results of a search as well as third party content items displayed in content slots such as content items from the content provider computing device 115 .
- the end user computing devices 125 can include computing devices configured to communicate via the network 105 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 115 (e.g., third party content items such as ads configured for display in a content slot of a web page).
- the end user computing device 125 , the content provider computing device 115 , and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, end user computing devices, consumer computing devices, servers, clients, and other computing devices.
- the end user computing device 125 , the content provider computing device 115 , and the content publisher computing device 120 can include user interfaces such as microphones, speakers, touchscreens, keyboards, pointing devices, a computer mouse, touchpad, or other input or output interfaces.
- the content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 may be any number of different user electronic devices, for example, a laptop computer, a desktop computer, a tablet computer, a smartphone, a digital video recorder, a set-top box for a television, a video game console, or any other computing device configured to communicate via the network 105 .
- the content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 can include a processor and a memory, i.e., a processing circuit.
- the memory stores machine instructions that, when executed by processor, cause processor to perform one or more of the operations described herein.
- the processor may include a microprocessor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), etc., or combinations thereof.
- the memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing the processor with program instructions.
- the memory may further include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random-access memory (RAM), electrically-erasable ROM (EEPROM), erasable-programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions.
- the instructions may include code from any suitable computer-programming language such as, but not limited to, C, C++, C#, Java, JavaScript, Perl, Python and Visual Basic.
- the content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 may also include one or more user interface devices.
- a user interface device refers to any electronic device that conveys data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, etc.) and/or converts received sensory information from a user into electronic signals (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.).
- the one or more user interface devices may be internal to a housing of the content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 (e.g., a built-in display, microphone, etc.) or external to the housing of content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 (e.g., a monitor connected to the user computing device 115 , a speaker connected to the user computing device 115 , etc.), according to various implementations.
- the content provider computing devices 115 , the content publisher computing device 120 and the end user computing devices 125 may include an electronic display, which visually displays web pages using webpage data received from one or more content sources and/or from the data processing system 110 via the network 105 .
- a content placement campaign manager or advertiser can communicate with the data processing system 110 via the content provider computing device 115 .
- the advertiser can communicate with the data processing system 110 via a user interface displayed on the user interface devices of the content provider computing device 115 .
- the primary content detection module 130 can be part of, or can include scripts executed by, one or more servers in the data processing system 110 .
- the primary content detection module 130 can be designed, constructed or configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content. Examples of primary content can include posts, articles, or other content items that the web publisher has provided. Examples of content that may not be considered primary content can include advertisements, widgets, or links not related to the primary content.
- the primary content detection module 130 can be configured to identify all of the content-related Document Object Model (DOM) nodes included in the information resource.
- DOM Document Object Model
- the primary content detection module 130 can identify content-related DOM nodes by inspecting the DOM tree of the information resource. The primary content detection module 130 can identify each node included within the information resource and determine whether the identified node is a content-related DOM node.
- the primary content detection module 130 can determine that a DOM node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the primary content detection module 130 can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title.
- the primary content detection module 130 can determine that a node is a content-related DOM node if the node contains content corresponding to a post or article, or any other content that the publisher of the information resource considers to be primary content.
- a node can be defined as an effective text node if the node is a text node containing visible text.
- a node can be defined as an effective text node if all of the children of the node are inline nodes and at least one of the node's children is an effective text node.
- a node can be defined as an effective link node if the node is an effective text node that is the descendent of an anchor tag, such as an A tag.
- the node can be defined as an effective link node if the node has at least one child and all of the node's children are effective links.
- a node can be defined as a title if the node is an effective text node and the node, or a descendent of the node is a header tag, such as an H 1 , H 2 , H 3 , H 4 , H 5 , or H 6 tag.
- a node may be deemed to start with a title if the node is a title.
- the node may be deemed to start with a title if the node is not a paragraph and a title is encountered before a paragraph is encountered when traversing the node's subtree.
- the primary content detection module 130 can be configured to determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes.
- a node of the DOM tree may be identified as a container node if the node meets two criteria.
- the first criteria is that either the node has a tag type of ARTICLE or the node has a tag type of DIV, INS or TD and the node has at least one stable class name.
- a class name may be considered stable if the class name does not end in a number.
- a class name is considered to be stable if it does not match the following regular expression: / ⁇ .*[09]+$/.
- the second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node is a post.
- CSS Cascading Style Sheet
- Examples of CSS class types that indicate that the node is a post can include ‘post’ or ‘typepost.’
- the primary content detection module 130 can determine, for each of the identified content-related DOM nodes, the container node nearest to the content-related DOM node.
- the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node.
- the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes.
- the primary content detection module 130 can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node.
- the primary content detection module 130 can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes.
- a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
- the primary content detection module 130 can maintain a list of container nodes.
- the primary content detection module 130 can include each of the container nodes determined for each of the content-related DOM nodes in the list.
- the primary content detection module 130 can also include each of the equivalent container ancestor nodes determined for each container node.
- the primary content detection module 130 can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
- the stable identifier generation module 132 can be part of, or can include scripts executed by, one or more servers in the data processing system 110 .
- the stable identifier generation module 132 can be designed, constructed or configured to generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node.
- the stable identifier generation module 132 can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
- the stable identifier generation module 132 can generate an identifier based on the type of tag associated with the container node for which the stable identifier generation module 132 is generating the identifier. In some implementations, the stable identifier generation module 132 can generate an identifier based on the class name associated with the container node. In some implementations, the stable identifier generation module 132 can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node, the stable identifier generation module 132 identifies the type of tag associated with the container node and a class name associated with the tag.
- the stable identifier generation module 132 can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type.
- the tag name of the identifier can be ARTICLE.
- the stable identifier generation module 132 can generate an identifier having a tag name and an ID if the ID is stable.
- a stable ID can be any ID that does not end in a number
- the stable identifier generation module 132 can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE.
- the identifier can include the tag type and a single stable class name.
- the stable class name can correspond to a class name that does not end with a number.
- the stable identifier generation module 132 can be configured to maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the stable identifier generation module 132 may remove any duplicates in the list of identifiers generated for the container nodes.
- the stable identifier generation module 132 can be configured to sort the identifiers generated for the container nodes based on a preference policy.
- the preference policy can include one or more rules for sorting the potential identifiers.
- a good identifier generated by the stable identifier generation module 132 should be stable, should reliably identify all container nodes on the information resource that contain the nodes likely to include primary content and should not identify any other nodes included in the information resource.
- the stable identifier generation module 132 can be configured to compare the identifiers included in the list to sort the identifiers in order of preference.
- the stable identifier generation module 132 can compare two or more first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name. As such, if one of the identifiers has only a tag name, that identifier will be ranked higher than the identifier not having only a tag name. If the stable identifier generation module 132 identifies that none of the identifiers includes only a tag name, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and an ID.
- Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID. If the stable identifier generation module 132 identifies that none of the identifiers includes a tag name and an ID, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name.
- the stable identifier generation module 132 determines which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name. As such, if one of the identifiers has a tag name and a more preferred class name, that identifier will be ranked higher than the identifier not having the more preferred class name.
- the class name ‘post-container’ is more preferred than the class names ‘post’ and ‘type-post’ and the class name ‘post’ is more preferred than the class name ‘type-post.’ If the stable identifier generation module 132 identifies that none of the identifiers includes a tag name with a preferred class name, the stable identifier generation module 132 determines that the identifier with the longer class name is preferred over an identifier with a shorter class name. As such, the identifier having a longer class name will be ranked higher than the identifier having a shorter class name.
- an identifier having a tag name DIV and class name ‘post’ is preferred over an identifier having a tag type DIV and a class name ‘another-class-name’ since the class name ‘post’ is a preferred class name.
- an identifier having a tag name DIV and class name ‘another-class-name’ is preferred over an identifier having a tag type DIV and a class name ‘class-name’ since the class name ‘another-class-name’ is longer than the class name ‘class-name.’
- the stable identifier generation module 132 can be configured to associate each of the identifiers generated by the stable identifier generation module 132 to the container nodes determined by the primary content detection module 130 .
- the stable identifier generation module 132 can construct a map that maps each generated identifier to all of the container nodes from which the stable identifier generation module 132 was able to generate the identifier.
- the identifiers can serve as keys in the constructed map.
- the stable identifier generation module 132 can be configured to determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds. In some implementations, the stable identifier generation module 132 can be configured to perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that are referenced by the identifier. For each of the identified nodes corresponding to the identifier, the stable identifier generation module 132 can determine that the identified node is either in the list of container nodes maintained by the primary content detection module 130 or that the node meets the criteria for being identified as a container node.
- the stable identifier generation module 132 can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the stable identifier generation module 132 can determine a content identification content identification score for the identifier.
- the content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource. In some implementations, the content identification score can indicate an ability of the identifier to identify primary content.
- the stable identifier generation module 132 can be configured to determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource.
- the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
- the stable identifier generation module 132 can be configured to determine the content identification score based on the following formula:
- the stable identifier generation module 132 can be configured to identify the identifier having the largest content identification score. The stable identifier generation module 132 can then select the identifier from the plurality of generated identifiers as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content.
- the stable identifier generation module 132 can be configured to store the identified potential identifier with the information resource.
- the identified potential identifier can be associated with each of the container nodes including primary content. In this way, when the information resource is accessed for rendering at a later time, the identifiers identifying the container nodes including the primary content can be used to easily identify the container nodes including the primary content.
- creatives can be inserted near the nodes likely to include primary content, thereby improving conversion rates of the creatives.
- the content insertion module 134 can be part of, or can include scripts executed by, one or more servers in the data processing system 110 .
- the content insertion module 134 can be designed, constructed or configured to insert a creative between adjacent container nodes that contain nodes likely to include primary content.
- the content insertion module 134 can identify the container nodes using the stable identifier selected by the stable identifier generation module 132 .
- the content insertion module 134 can request access to the information resource, identify the generated stable identifier and identify the container nodes associated with the generated stable identifier.
- the content insertion module 134 can then insert creatives adjacent to or near these container nodes. As creatives displayed near primary content tend to have a higher conversion rate, the content insertion module 134 can increase the conversion rates of the creatives inserted the content insertion module 134 on the information resource.
- FIG. 2A shows a screenshot 200 of an information resource 202 displayed within a browser window.
- the information resource 202 includes primary content and third-party content 220 a - n .
- the primary content comprises a plurality of posts 210 a - n , each having an associated image, a headline, and corresponding text.
- the stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 202 and identify container nodes containing each of the plurality of posts 210 a - n .
- the content insertion module 134 can be configured to use the stable identifier associated with the information resource 202 to insert creatives in between the plurality of posts 210 a - n .
- FIG. 2B shows a screenshot of the information resource shown in FIG. 2A that includes creatives 230 a - n between the plurality of posts 210 a - n.
- the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent posts of the information resource.
- the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots.
- the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent posts or near one or more posts.
- FIG. 3A shows a screenshot 300 of an information resource 302 displayed within a browser window.
- the information resource 302 includes primary content and third-party content 320 a - n .
- the primary content comprises an article 310 having an associated image, a headline, and corresponding text in multiple paragraphs 312 a - 312 n .
- the stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 302 and identify container nodes containing each of the plurality of paragraphs 312 a - n .
- the content insertion module 134 can be configured to use the stable identifier associated with the information resource 302 to insert creatives in between or adjacent to the plurality of paragraphs 312 a - n .
- FIG. 3B shows a screenshot of the information resource shown in FIG. 3A that includes a creative 330 between two of the paragraphs 312 a - n.
- the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent paragraphs of an article of the information resource.
- the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots.
- the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent paragraphs or near one or more paragraphs.
- the data processing system 110 can also include one or more data stores, such as the database 140 .
- the database can be included in the data processing system 110 .
- the database may be located remote to the data processing system but accessible by the data processing system.
- the database can store a wide variety of content.
- the database can store the DOM trees of one or more information resources, lists of container nodes, lists of identifiers associated with the container nodes, maps associating the identifiers with the container nodes, content identification scores of the potential identifiers, as well as the identity of the stable identifier selected to identify the container nodes of the information resource, amongst others.
- the data processing system 110 can include one or more additional modules to provide some or all of the features described herein as well as other additional features.
- FIG. 4 is a flow diagram depicting one implementation of the steps taken to generate a stable identifier for nodes likely to include primary content of an information resource.
- FIG. 4 illustrates a flow diagram depicting a method 400 for generating a stable identifier for nodes likely to include primary content of an information resource is disclosed.
- a processor identifies, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content (BLOCK 405 ).
- the processor determines one or more container nodes containing one or more of the identified content-related DOM nodes (BLOCK 410 ).
- the processor generates, for each of the container nodes, one or more identifiers corresponding to the container node (BLOCK 415 ).
- DOM Document Object Model
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds (BLOCK 420 ). The processor then determines, from the generated identifiers, a subset of the identifiers that correspond only to container nodes that contain the content-related DOM nodes (BLOCK 425 ). The processor then selects one of the identifiers of the subset as a stable identifier (BLOCK 430 ).
- the processor can identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content (BLOCK 405 ). Examples of primary content can include posts, articles, or other content items that the web publisher has provided.
- the processor can inspect the DOM tree of an information resource and identify all of the content-related Document Object Model (DOM) nodes included in the information resource.
- the processor can identify each node included within the information resource and determine whether the identified node is a content-related DOM node.
- the processor can identify a node by inspecting the DOM tree for tags. A tag associated with a node can indicate the type of node.
- the processor can determine that a node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the processor can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title.
- the processor can determine one or more container nodes containing one or more of the identified content-related DOM nodes (BLOCK 410 ). In some implementations, the processor can determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes. In some implementations, a node of the DOM tree may be identified as a container node if the node meets two criteria. The first criteria is that either the node corresponds to an ARTICLE or the node corresponds to one of a DIV, INS or TD and the node has at least one stable class name. In some implementations, a class name may be considered stable if the class name does not end in a number.
- a class name is considered to be stable if it does not match the following regular expression: / ⁇ .*[09]+$/.
- the second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node includes primary content, such as a post.
- CSS Cascading Style Sheet
- Examples of CSS class types that indicate that the node is a post can include ‘post’ or ‘typepost.’
- the processor can determine, for each of the identified content-related DOM nodes, the container node nearest to the content-related DOM node.
- the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node.
- the processor can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node.
- the processor can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes.
- a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
- the processor can maintain a list of container nodes.
- the primary content detection module can include each of the container nodes determined for each of the content-related DOM nodes in the list.
- the processor can also include each of the equivalent container ancestor nodes determined for each container node.
- the processor can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
- the processor can generate, for each of the container nodes, one or more identifiers corresponding to the container node (BLOCK 415 ). In some implementations, the processor can generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node. In some implementations, the stable identifier generation module can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
- the processor can generate an identifier based on the tag associated with the container node for which the processor is generating the identifier. In some implementations, the processor can generate an identifier based on the class name associated with the container node. In some implementations, the processor can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node according to the identifier generation policy, the processor identifies the type of tag associated with the container node and a class name associated with the tag. In some implementations, the processor can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type.
- the tag name of the identifier can be ARTICLE.
- the processor can generate an identifier having a tag name and an ID if the ID is stable.
- a stable ID can be any ID that does not end in a number
- the processor can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE.
- the identifier can include the tag type and a single stable class name.
- the stable class name can correspond to a class name that does not end with a number.
- the processor can maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the processor may remove any duplicates in the list of identifiers generated for the container nodes. In some implementations, the processor can sort the identifiers generated for the container nodes based on a preference policy. In some implementations, the preference policy can include one or more rules for sorting the potential identifiers.
- the processor can arrange a plurality of the generated identifiers of the list of identifiers in order of highest preference to lowest preference.
- the processor can compare two or more identifiers at a time and determine which of the identifiers has a higher preference.
- the processor can first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name. As such, if one of the identifiers has only a tag name, that identifier will be ranked higher than the identifier not having only a tag name.
- the processor can determine whether any of the two identifiers includes a tag name and an ID. Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID. If the processor determines that none of the identifiers includes a tag name and an ID, the processor determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name.
- the processor will rank that identifier higher than the identifier not having a class name. If the processor identifies that both of the identifiers includes a tag name and a class name, the processor can determine which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name. As such, if one of the identifiers has a tag name and a more preferred class name, the processor will rank that identifier higher than the identifier not having the more preferred class name.
- the class name ‘post-container’ is more preferred than the class names ‘post’ and ‘type-post’ and the class name ‘post’ is more preferred than the class name ‘type-post.’ If the processor identifies that none of the identifiers includes a tag name with a preferred class name, the processor can determine that the identifier with the longer class name is preferred over an identifier with a shorter class name. As such, the identifier having a longer class name will be ranked higher than the identifier having a shorter class name.
- the processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds (BLOCK 420 ).
- the processor can associate each of the identifiers generated by the processor to the container nodes to determine a subset of identifiers that correspond only to container nodes that contain the content-related DOM nodes.
- the processor can map each generated identifier to all of the container nodes from which the processor could have possibly generated the identifier. This is because multiple container nodes may have the same tag types or ids or class names, which result in container nodes having the same tag types or ids or class names generating identical identifiers.
- the identifiers can serve as keys in a map constructed to map the identifiers to each of the container nodes.
- the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier.
- the processor can determine, from the generated identifiers, a subset of the identifiers that correspond only to container nodes that contain the content-related DOM nodes (BLOCK 425 ). In some implementations, the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier. In some implementations, nodes that can be referenced by the identifier include nodes that have characteristics (for example, tag type, id, class name) that would cause the processor to generate the identifier based on the characteristics of the node.
- characteristics for example, tag type, id, class name
- the processor can determine that the identified node is either in a list of container nodes maintained by the processor or that the node meets the criteria for being identified as a container node. In response to determining that the identified node is not on the list of container nodes or does not meet the criteria for being identified as a container node, the processor can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the processor can include the identifier as a potential stable identifier and as such, determine a content identification score for the identifier. The content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource.
- the processor can select one of the identifiers of the subset as a stable identifier (BLOCK 430 ). In some implementations, the processor can determine a content identification score for each of the potential identifiers. In some implementations, the processor can determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content (for example, paragraph nodes) that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier.
- the processor can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource. In some implementations, the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
- the processor can identify the identifier having the largest content identification score. The processor can then select the identifier having the highest content identification score as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content.
- the processor can store the identity of the stable identifier with the information resource. In this way, the processor can identify posts or articles or nodes likely to include primary content using the stable identifier, which can identify the container nodes corresponding to the posts or articles or nodes likely to include primary content.
- the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
- the processor can generate the following identifiers based on the container nodes.
- the processor can generate the following identifier for the container nodes.
- the processor can expand the list of identifiers to the following four identifiers:
- the processor would then discard the ⁇ tagName: ‘DIV’, className: ‘left-align’ ⁇ identifier since it is a container node that does not contain a node likely to contain primary content.
- the ⁇ tagName: ‘DIV’, className: ‘left-align’ ⁇ identifier references the following container:
- the processor would then arrange the remaining three identifiers according to a preference order and select the ⁇ tagName: ‘DIV’, className: ‘content-entry’ ⁇ identifier as the stable identifier as this identifier would have the highest score.
- Native ads refer to a class of online ads that match the look and feel of primary content on a content publisher's website.
- a few content publishers manually generate native ads for their websites. However, doing so is a tedious process that requires both time and technical expertise.
- aspects of the present disclosure relate to methods and systems for automatically detecting styles of properties of DOM elements of a website and modifying ads selected for insertion to match the styles of properties of the DOM elements of the website such that the modified ads appear as native ads.
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can include or execute at least one computer program or at least one script.
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can be separate components, a single component, or part of the data processing system 110 .
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and use the stored styles of properties to modify third-party content to be inserted within the information resource, for instance.
- one or more processors configured to execute one or more scripts to identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of
- the style property detection module 136 can be designed, constructed or configured to identify an information resource for which to detect styles of properties of DOM elements included in the information resource. In some implementations, the style property detection module 136 can identify the information resource responsive to receiving a request from a content publisher requesting to serve native third-party content items on an information resource of the content publisher. In some implementations, the style property detection module 136 can identify a plurality of information resources on which a third-party content item has previously been served. In some implementations, the style property detection module 136 can identify the plurality of information resources from an advertising auction log that includes a list of webpages on which a third-party content item was previously served. In some implementations, the log can be maintained by an advertising management entity that stores a record of each third-party content item served on a webpage. In some implementations, the advertising management entity can be a part of the data processing system 110 .
- the style property detection module 136 can identify a plurality of URLs corresponding to information resources on which ads were previously served.
- the style property detection module 136 may group URLs corresponding to a single information resource together using an identifier unique to the information resource.
- the style property detection module 136 can be configured to render the information resource for which to detect styles of properties of DOM elements on a browser, such as a headless browser. In some implementations, the style property detection module 136 can determine, using the techniques described above with respect to Section A, one or more DOM nodes that correspond to primary content. In some implementations, the style property detection module 136 can identify DOM nodes that correspond to primary content, such as a post, article or any other DOM structure that includes primary content. In some implementations, the primary content detection module 130 or other module of the data processing system 110 can identify DOM nodes or elements that correspond to a post, article or any other DOM structure that includes primary content. In some implementations, the primary content detection module 130 can determine one or more container nodes that contain the DOM nodes that correspond to primary content.
- the style property detection module 136 can then determine, for the container nodes that contain the DOM nodes corresponding to primary content, a plurality of DOM elements included in the container node.
- Each of the DOM elements can include one or more properties that have associated styles that define the look and feel of the content included in the DOM elements.
- the styles of properties of a DOM element can be defined within the DOM element.
- the styles of properties of a DOM element can be defined by a style property sheet, such as a cascading style sheet (CSS) of the information resource.
- the content publisher can define the styles of properties of each of the DOM elements included in the information resource.
- the style property detection module 136 can identify or determine styles of properties associated with certain types of DOM elements. In particular, the style property detection module 136 can determine styles of properties of DOM elements that can be used to generate native third-party content items to serve on the information resource.
- third-party content items may be served along with primary content of an information resource. However, when selecting a third-party content item to serve, the third-party content item may be in a format or have styles of properties that do not match the look and feel, or in other words, the styles of properties of the primary content included in the information resource. As such, a text ad selected to be served on the information resource may be modified to match the look and feel of the primary content of the information resource prior to being served.
- the text ad selected to be served may be generated by an advertising entity that manages ad selection.
- many text ads may have a style that is generic to all text ads generated by the advertising entity.
- the text ad may include a title, which may also be a clickable link to a landing page, one or more lines of text, and a website address.
- the title element of the text ad can have a first set of styles of properties
- the one or more lines of text may have a second set of styles of properties
- the website address may have a third set of styles of properties.
- the data processing system 110 may generate a native content item based on the selected text ad that matches the styles of properties of certain DOM elements of the primary content of the information resource.
- the style property detection module 136 may identify one or more DOM elements of the primary content whose styles of properties may be used to generate the modified third-party content item.
- the title element of the text ad which can include a link, can be modified with styles of properties corresponding to a link of a title of a post or article included in the information resource on which the modified third-party content item is to be served.
- the style property detection module 136 can determine, from a DOM element corresponding to a header element of the primary content, whether the header element includes a link.
- the header element can correspond to a title of a post or an article.
- the style property detection module 136 can insert, responsive to determining that the DOM element corresponding to the header element does not include a link, a link in the header element.
- the style property detection module 136 can then determine styles of properties associated with the header element in which the link is inserted, which can then be stored in the memory.
- the text elements of the text ad can be modified with styles of properties corresponding to text portions of the post or article of the information resource.
- the website address element of the text address can be modified with styles of properties corresponding to a link included within the text portion of the post or article of the information resource. If the DOM element corresponding to the text portion of the post does not include a link, the style property detection module 136 can insert, responsive to determining that the DOM element corresponding to the text portion does not include a link, a link in the text portion. The style property detection module 136 can then determine styles of properties associated with the text portion in which the link is inserted and store the styles of properties in the memory.
- the modified third-party content item when served on the information resource, the modified third-party content item appears to be a native ad as opposed to a text ad generated by an entity different from the content publisher. Details regarding generating a native ad from a text ad received from a third-party content provider or other entity are provided below.
- the style property detection module 136 can determine the styles of one or more properties of a particular DOM element using a function call.
- the function call can employ a script to determine styles of properties or characteristics of DOM elements.
- One particular function is window.getComputedStyle, which can determine the effective styles on DOM elements after CSS and styling rules have been considered.
- the window.getComputedStyle( ) function can return the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.
- the style property detection module 136 can determine, for each of the DOM elements that may be used to generate native ads, styles of properties of the DOM element.
- the style property detection module 136 can determine the styles of properties of such DOM elements by applying the window.getComputedStyle( ) function to such DOM elements.
- the style property detection module 136 can determine the styles of different properties corresponding to different DOM nodes or elements. For instance, the style property detection module 136 can determine styles of properties of a node container including primary content of an information resource. The properties for which styles can be determined include but are not limited to, “background-color,” “border,” “border-bottom,” “border-top,” “margin,” “padding” and “float,” among others.
- the style property detection module 136 can also determine styles corresponding to a title element within the post. In some implementations, the title element can include a link.
- the style property detection module 136 can determine styles of properties, including but not limited to, “font-family,” “font-size,” “font-weight,” “color,” “text-align,” “text-decoration,” “line-height” and hover effects, if the title element includes a link, among others.
- the style property detection module 136 can also determine styles of properties of a DOM element corresponding to a paragraph, text or body portion within the post.
- the DOM element corresponding to the paragraph, text or body portion within the post can include a link.
- the properties for which the style property detection module 136 can determine styles include but are not limited to, “font-family,” “font-size,” “font-weight,” “color,” “text-align,” “text-decoration,” “line-height” and hover effects if the text portion includes a link.
- the style property detection module 136 can also determine styles of properties of a DOM element corresponding to an image included within a post or article or other primary content of the information resource.
- a post may include a title, a body and a corresponding image.
- the style property detection module 136 can determine styles of properties of the image.
- examples of properties for which the style property detection module 136 can determine styles include but are not limited to “width,” “height,” “display,” “margin,” “padding,” “border,” “float,” and effects, such as circle, crop, black and white, among others.
- the primary content included in an information resource may be surrounded by borders or other visual artifacts or features.
- a web page that includes a series of posts or articles may each include borders that can improve the user experience.
- the DOM elements corresponding to the post, article, or other primary content may not include properties that define the borders around the post or article. Rather, another DOM element that may contain the DOM elements corresponding to the post or article may define the borders.
- the style property detection module 136 may be configured to determine styles of properties of such DOM elements that do not necessarily correspond to primary content but may have an effect on the presentation of the primary content.
- a portion of a DOM tree of an information resource that includes a post or article may have the following structure:
- the style property detection module 136 can determine the styles of properties related to a border of the primary content. In some implementations, the style property detection module 136 can determine one or more border properties for which to determine styles. In some implementations, examples of border properties can include “border,” “borderbottom,” “bordertop,” “margin,” “padding” and “float,” among others. In some implementations, the style property detection module 136 can determine whether the DOM element corresponding to the container node defines styles of the one or more border properties.
- the style property detection module 136 can determine whether a child or descendent of the DOM element corresponding to the container node defines the styles of the border properties not defined by the DOM element corresponding to the container node. In this way, the style property detection module 136 can determine the styles of border properties even though the container node corresponding to the primary content does not define the styles of the border properties.
- the following algorithm can be used to determine a border property, for instance, the effective top border, of an element:
- the style property detection module 136 can similarly determine other border properties. In some implementations, if the style property detection module 136 desires to determine the style of a bottom border property, the style property detection module 136 may work backwards through the descendants of the container node starting with the last child of the post container, as it may be likely that the bottom border may be defined by a DOM element towards the end of the container node.
- the style property detection module 136 can store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container. In some implementations, the style property detection module 136 can store the styles of properties of the DOM elements corresponding to primary content in a data structure. In some implementations, the style property detection module 136 can associate the styles of properties of the DOM elements corresponding to primary content with an identifier identifying the information resource that includes the primary content. In some implementations, multiple information resources can be associated with the determined styles of properties responsive to determining that the styles of properties of the DOM elements of the primary content in each of the multiple information resources match one another. In some implementations, multiple web pages of the same web site may be grouped together if they contain primary content that is presented in a similar manner.
- the style property detection module 136 can generate an identifier corresponding to the styles of properties of the various DOM elements of the primary content of an information resource.
- This identifier can include tagNames and ClassNames that may be used to modify content that is to be inserted in the information resource at a later time. In this way, native ads can be served on a content publisher's web page without requiring the content publisher to manually update the styles of properties of DOM elements corresponding to the native ad.
- the content insertion module 134 can identify locations in the DOM tree in which to insert DOM elements corresponding to native ads. In some implementations, the content insertion module 134 can insert the DOM elements corresponding to native ads adjacent to DOM elements corresponding to posts or articles, such that the native ads have the same look and feel as posts or articles that form the primary content of the information resource. In some implementations, the content insertion module 134 can generate markers identifying locations in which to insert native ads. The style property detection module 136 can then store these markers along with the determined styles of properties determined by the style property detection module 136 .
- the content insertion module 134 can generate a DOM node corresponding to a native content item that can be updated and inserted into an appropriate location within the DOM tree of the information resource such that when the information resource is rendered, the content item is displayed as a native content item along with primary content of the information resource.
- the style property detection module 136 can store these generated DOM nodes that include properties having styles that match the styles of properties of certain DOM elements of the primary content determined by the style property detection module 136 .
- one or more modules of the data processing system 110 can retrieve the generated DOM node, extract information from the third-party content item and insert the extracted information in the generated DOM node.
- the data processing system 110 can then insert the generated DOM node including the extracted information in the DOM tree of the information resource such that when the information resource is rendered for display, the third-party content item is rendered for display as a native ad that matches the look and feel of primary content of the information resource.
- the style property detection module 136 can create or generate a CSS styling profile for the information resource that includes the DOM elements corresponding to the primary content and styles of properties associated with the DOM elements.
- the style property detection module 136 can store the generated CSS styling profile in the memory such that when a request to convert a third-party content item to a native ad or native content item, the conversion can occur without requiring any input from the content publisher of the information resource.
- the third-party content modification module 138 can be designed, constructed or configured to modify third-party content items into native content items that match the look and feel of an information resource for which the style property detection module 136 has determined the styles of properties of DOM elements corresponding to primary content.
- the third-party content modification module 138 can be configured to identify a third-party content item to serve on the information resource.
- the third-party content modification module 138 can identify the third-party content item by receiving the third-party content item from an advertising auction system.
- the third-party content modification module 138 can identify the third-party content item responsive to receiving a request to include the third-party content item on the information resource.
- the request can be a request to include an article or post previously displayed on another information resource on the information resource.
- the article or post may be modified into a native content item before being included in the information resource.
- the third-party content modification module 138 can identify the information resource on which to include the identified third-party content item.
- the third-party content modification module 138 can use an identifier of the information resource to perform a lookup in the memory to retrieve the styles of properties of DOM elements of the primary content of the information resource previously determined by the style property detection module 136 .
- the third-party content modification module 138 can retrieve the CSS styling profile of the information resource or some other information that the third-party content modification module 138 can use to modify the identified third-party content item into a native content item for the information resource on which to serve the third-party content item.
- the third-party content modification module 138 can identify the DOM elements of the primary content that may be used to modify the corresponding elements of the third-party content item.
- the CSS styling profile can identify the DOM elements of the primary content to use for modifying third-party content item.
- the CSS styling profile can include a DOM element corresponding to a link within a header of an article or post, a DOM element corresponding to text within a body portion of the article or post, and a DOM element corresponding to a link within the body portion of the article or post.
- the third-party content modification module 138 can be configured to modify a text ad to a native ad.
- the third-party content modification module 138 can identify the header of the text ad and extract the text and link of the header of the text ad to generate a DOM element corresponding to a header portion of the native ad. In this way, when the native ad is rendered on the information resource, the header of the native ad includes the text of the header of the text ad and a link of the header of the native ad is directed to the same landing page as the link of the header of the text ad.
- the third-party content modification module 138 can identify the text portion of the text ad and extract the text portion to insert in a corresponding text portion of the native ad.
- the DOM element of the text portion of the native ad will have the styles of properties of the DOM element of the text portion of the primary content of the information resource.
- the third-party content modification module 138 can identify the website address portion of the text ad and extract the website address to insert in text portion of the native ad.
- the DOM element of the portion of the native ad containing the website address will have the styles of properties of the DOM element of a link that may appear in the text portion of the primary content of the information resource.
- the third-party content modification module 138 can pass the generated native content item to the content insertion module 134 , which can then handle the insertion of the content item prior to rendering the information resource to an end user computing device.
- the content insertion module 134 may be configured to modify the DOM tree of the information resource to include a DOM node including a plurality of DOM elements that form the native content item. As described herein, the content insertion module 134 can determine a location in the DOM tree to insert the DOM node corresponding to the native content item. In some implementations, the DOM node can be inserted in the DOM tree such that the native content item is rendered below the first post or article is rendered on the information resource.
- the content insertion module can be configured to inject a DOM node or element corresponding to the native content item onto the information resource.
- the native content item can be served using a DOM element styling function. For instance, the format of the native content item that may be inserted in the DOM tree of the information resource may look like the following:
- FIG. 5 is a flow diagram depicting one implementation of the steps taken to detect styles of properties Of DOM Elements Of An Information Resource.
- One or more processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource (BLOCK 505 ).
- the processors can identify at least one DOM container that contains at least a portion of the primary content (BLOCK 510 ).
- the processors can determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element (BLOCK 515 ).
- the processors can store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container (BLOCK 520 ).
- the processors can use the stored styles of properties to modify third-party content to be inserted within the information resource (BLOCK 525 ).
- the processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource (BLOCK 505 ). In some implementations, the processors can identify the information resource responsive to receiving a request from a content publisher requesting to serve native third-party content items on an information resource of the content publisher. In some implementations, the processors can identify a plurality of information resources on which a third-party content item has previously been served. In some implementations, the processors can identify the plurality of information resources from an advertising auction log that includes a list of webpages on which a third-party content item was previously served. In some implementations, the log can be maintained by an advertising management entity that stores a record of each third-party content item served on a webpage.
- the advertising management entity can be a part of the data processing system.
- the processors can identify a plurality of URLs corresponding to information resources on which ads were previously served. The processors may group URLs corresponding to a single information resource together using an identifier unique to the information resource.
- the processors can identify at least one DOM container that contains at least a portion of the primary content (BLOCK 510 ).
- the processors can identify at least one DOM container that contains at least a portion of the primary content by inspecting a DOM tree of the information resource.
- the processors can render the information resource for which to detect styles of properties of DOM elements on a browser, such as a headless browser.
- the processors can determine, using the techniques described above with respect to Section A, one or more DOM nodes that correspond to primary content.
- the processors can identify DOM nodes that correspond to primary content, such as a post, article or any other DOM structure that includes primary content.
- the processors can determine one or more container nodes that contain the DOM nodes that correspond to primary content. In some implementations, the processors can identify one or more DOM elements included in the DOM container. The processors can then determine, for each of the one or more identified DOM elements, the type of DOM element. The processors can then determine, based on the type of DOM element, styles of properties of the DOM element that may be relevant for generating native content items for the information resource.
- the processors can determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element (BLOCK 515 ).
- the processors can determine, for the container nodes that contain the DOM nodes corresponding to primary content, a plurality of DOM elements included in the container node.
- Each of the DOM elements can include one or more properties that have associated styles that define the look and feel of the content included in the DOM elements.
- the styles of properties of a DOM element can be defined within the DOM element.
- the styles of properties of a DOM element can be defined by a style property sheet, such as a cascading style sheet (CSS) of the information resource.
- the content publisher can define the styles of properties of each of the DOM elements included in the information resource.
- the processors can identify, determine or detect styles of properties associated with certain types of DOM elements.
- the processors can determine styles of properties of DOM elements that can be used to generate native content items from third-party items for serving on the information resource.
- third-party content items may be served along with the primary content.
- the third-party content item may be in a format or have styles of properties that do not match the look and feel, or in other words, the styles of properties of the primary content included in the information resource.
- a text ad selected to be served on the information resource may be modified to match the look and feel of the primary content of the information resource prior to being served.
- processors may identify one or more DOM elements of the primary content whose styles of properties may be used to generate a native content item from a third-party content item selected to be served on the information resource.
- the title or header element of a text ad which can include a link, can be modified with styles of properties corresponding to a link of a title of a post or article included in the information resource on which the modified third-party content item is to be served.
- the text elements of the text ad can be modified with styles of properties corresponding to text portions of the post or article of the information resource.
- the website address element of the text address can be modified with styles of properties corresponding to a link included within the text portion of the post or article of the information resource.
- the modified third-party content item when served on the information resource, the modified third-party content item appears to be a native ad as opposed to a text ad generated by an entity different from the content publisher. Details regarding generating a native ad from a text ad received from a third-party content provider or other entity are provided below.
- the processors can determine the styles of one or more properties of a particular DOM element using a function call.
- the function call can employ a script to determine styles of properties or characteristics of DOM elements.
- One particular function is window.getComputedStyle, which can determine the effective styles on DOM elements after CSS and styling rules have been considered.
- the window.getComputedStyle( ) function can return the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.
- the processors can determine, for each of the DOM elements that may be used to generate native ads, styles of properties of the DOM element.
- the processors can determine the styles of properties of such DOM elements by applying the window.getComputedStyle( ) function to such DOM elements.
- the processors can determine the styles of different properties corresponding to different DOM nodes or elements. For instance, the processors can determine styles of properties of a node container including primary content of an information resource. The processors can also determine styles corresponding to a title or header element within the post. In some implementations, the title or header element can include a link. In some implementations, the title or header element of the primary content may not include a link. However, the processors may desire to include a link to a landing page for a native content item to be inserted in the information resource. In some implementations, the processors can determine, from a DOM element corresponding to a header element of the primary content, whether the header element includes a link.
- the header element can correspond to a title of a post or an article.
- the processors can insert, responsive to determining that the DOM element corresponding to the header element does not include a link, a link in the header element.
- the processors can then determine styles of properties associated with the header element in which the link is inserted, which can then be stored in the memory.
- the processors can also determine styles of properties of a DOM element corresponding to a paragraph, text or body portion within the post.
- the DOM element corresponding to the text or body portion within the post can include a link.
- the processors can also determine styles of properties of a DOM element corresponding to an image included within a post or article or other primary content of the information resource.
- the primary content included in an information resource may be surrounded by borders or other visual artifacts or features.
- the DOM elements corresponding to the post, article, or other primary content may not include properties that define the borders around the post or article. Rather, another DOM element that may contain the DOM elements corresponding to the post or article may define the borders.
- the processors may determine styles of properties of such DOM elements that do not necessarily correspond to primary content but may have an effect on the presentation of the primary content.
- determining styles of properties of a border of the post may not be determined by determining the styles of properties of the DOM element corresponding to the post container.
- the processors can determine the styles of properties related to a border of the primary content.
- the processors can determine whether the DOM element corresponding to the container node defines styles of the one or more border properties. If the DOM element corresponding to the container node does not defines styles of any of the one or more border properties, the processors can determine whether a child or descendent of the DOM element corresponding to the container node defines the styles of the border properties not defined by the DOM element corresponding to the container node.
- the processors can determine the styles of border properties even though the container node corresponding to the primary content does not define the styles of the border properties. In some implementations, the processors can similarly determine other border properties. In some implementations, if the processors desire to determine the style of a bottom border property, the processors may work backwards through the descendants of the container node starting with the last child of the post container, as it may be likely that the bottom border may be defined by a DOM element towards the end of the container node.
- the processors can determine, from a DOM element corresponding to the DOM container, that the DOM element does not include a style property of a border. The processors can then identify, from a descendant of the DOM element, that the descendant of the DOM element contains the style property of the border.
- the DOM element can be a DOM container node that contains one of a post or an article corresponding to primary content of the information resource. The processors can then set the styles of the properties corresponding to the border of the descendant of the DOM element as the styles of properties of the border for the DOM element corresponding to the DOM container.
- the processors can store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container (BLOCK 520 ). In some implementations, the processors can store the styles of properties of the DOM elements corresponding to primary content in a data structure. In some implementations, the processors can associate the styles of properties of the DOM elements corresponding to primary content with an identifier identifying the information resource that includes the primary content. In some implementations, multiple information resources can be associated with the determined styles of properties responsive to determining that the styles of properties of the DOM elements of the primary content in each of the multiple information resources match one another. In some implementations, multiple web pages of the same web site may be grouped together if they contain primary content that is presented in a similar manner.
- the processors can generate an identifier corresponding to the styles of properties of the various DOM elements of the primary content of an information resource.
- This identifier can include tagNames and ClassNames that may be used to modify content that is to be inserted in the information resource at a later time.
- the processors can identify locations in the DOM tree in which to insert DOM elements corresponding to native ads. In some implementations, the processors can insert the DOM elements corresponding to native ads adjacent to DOM elements corresponding to posts or articles, such that the native ads have the same look and feel as posts or articles that form the primary content of the information resource. In some implementations, the processors can generate markers identifying locations in which to insert native ads. The processors can then store these markers along with the styles of properties determined by the processors.
- the processors can generate a DOM node corresponding to a native content item that can be updated and inserted into an appropriate location within the DOM tree of the information resource such that when the information resource is rendered, the content item is displayed as a native content item along with primary content of the information resource.
- the processors can store these generated DOM nodes that include properties having styles that match the styles of properties of certain DOM elements of the primary content determined by the processors.
- the processors can create or generate a CSS styling profile for the information resource that includes the DOM elements corresponding to the primary content and styles of properties associated with the DOM elements.
- the processors can store the generated CSS styling profile in the memory such that when a request to convert a third-party content item to a native ad or native content item, the conversion can occur without requiring any input from the content publisher of the information resource.
- the processors can use the stored styles of properties to modify third-party content to be inserted within the information resource (BLOCK 525 ).
- the processors can identify a third-party content item to serve at the information resource.
- the third-party content item is selected from a plurality of third-party content items.
- the third-party content item is selected responsive to an auction for selecting content to display on the information resource.
- the processors can identify, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource corresponding to primary content.
- the processors can generate, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item.
- the DOM elements may define styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource.
- the processors may then insert the DOM node in a DOM tree of the information resource and provide the DOM tree of the information resource including the DOM node corresponding to the third-party content item to a computing device on which to render the information resource including the generated third-party content item.
- the processors can modify third-party content items into native content items that match the look and feel of an information resource for which the processors previously determined the styles of properties of DOM elements corresponding to primary content.
- the processors can identify a third-party content item to serve on the information resource.
- the processors can identify the third-party content item by receiving the third-party content item from an advertising auction system.
- the processors can identify the third-party content item responsive to receiving a request to include the third-party content item on the information resource.
- the request can be a request to include an article or post previously displayed on another information resource on the information resource.
- the article or post may be modified into a native content item before being included in the information resource.
- the processors can identify the information resource on which to include the identified third-party content item.
- the processors can use an identifier of the information resource to perform a lookup in the memory to retrieve the styles of properties of DOM elements of the primary content of the information resource previously determined by the processors.
- the processors can retrieve the CSS styling profile of the information resource or some other information that the processors can use to modify the identified third-party content item into a native content item for the information resource on which to serve the third-party content item.
- the processors can identify the DOM elements of the primary content that may be used to modify the corresponding elements of the third-party content item.
- the CSS styling profile can identify the DOM elements of the primary content to use for modifying third-party content item.
- the CSS styling profile can include a DOM element corresponding to a link within a header of an article or post, a DOM element corresponding to text within a body portion of the article or post, and a DOM element corresponding to a link within the body portion of the article or post.
- the processors can generate a native ad from a text ad corresponding to a third-party content publisher. In some implementations, the processors can identify the header of the text ad and extract the text and link of the header of the text ad to generate a DOM element corresponding to a header portion of the native ad. In this way, when the native ad is rendered on the information resource, the header of the native ad includes the text of the header of the text ad and a link of the header of the native ad is directed to the same landing page as the link of the header of the text ad.
- the processors can identify the text portion of the text ad and extract the text portion to insert in a corresponding text portion of the native ad.
- the DOM element of the text portion of the native ad will have the styles of properties of the DOM element of the text portion of the primary content of the information resource.
- the processors can identify the website address portion of the text ad and extract the website address to insert in text portion of the native ad.
- the DOM element of the portion of the native ad containing the website address will have the styles of properties of the DOM element of a link that may appear in the text portion of the primary content of the information resource.
- the processors can insert the native content item in the information resource prior to rendering the information resource to an end user computing device.
- the processors can modify the DOM tree of the information resource to include a DOM node including a plurality of DOM elements that form the native content item.
- the processors can determine a location in the DOM tree to insert the DOM node corresponding to the native content item.
- the DOM node can be inserted in the DOM tree such that the native content item is rendered below the first post or article is rendered on the information resource.
- the processors can inject a DOM node or element corresponding to the native content item onto the information resource.
- the native content item can be served using a DOM element styling function.
- FIG. 6 shows the general architecture of an illustrative computer system 600 that may be employed to implement any of the computer systems discussed herein (including the system 100 and its components such as the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 ) in accordance with some implementations.
- the computer system 600 can be used to provide information via the network 105 for display.
- the computer system 600 of FIG. 6 comprises one or more processors 620 communicatively coupled to memory 625 , one or more communications interfaces 605 , and one or more output devices 610 (e.g., one or more display units) and one or more input devices 615 .
- the processors 620 can be included in the data processing system 110 or the other components of the system 100 such as the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 .
- the memory 625 may comprise any computer-readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present).
- the data processing system 110 can include the memory 625 to store information related to identifying primary content on an information resource, one or more stable identifiers, one or more styles of properties of DOM elements of primary content of an information resource and one or more native content items served for display.
- the memory 625 can include the database 140 .
- the processor(s) 620 shown in FIG. 6 may be used to execute instructions stored in the memory 625 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions.
- the processor 620 of the computer system 600 shown in FIG. 6 also may be communicatively coupled to or control the communications interface(s) 605 to transmit or receive various information pursuant to execution of instructions.
- the communications interface(s) 605 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow the computer system 600 to transmit information to or receive information from other devices (e.g., other computer systems).
- one or more communications interfaces facilitate information flow between the components of the system 100 .
- the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of the computer system 600 .
- Examples of communications interfaces 605 include user interfaces (e.g., web pages), through which the user can communicate with the data processing system 110 .
- the output devices 610 of the computer system 600 shown in FIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions.
- the input device(s) 615 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
- a smart television module (or connected television module, hybrid television module, etc.), which may include a processing module configured to integrate internet connectivity with more traditional television programming sources (e.g., received via cable, satellite, over-the-air, or other signals).
- the smart television module may be physically incorporated into a television set or may include a separate device such as a set-top box, Blu-ray or other digital media player, game console, hotel television system, and other companion device.
- a smart television module may be configured to allow viewers to search and find videos, movies, photos and other content on the web, on a local cable TV channel, on a satellite TV channel, or stored on a local hard drive.
- a set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television set and an external source of signal, turning the signal into content which is then displayed on the television screen or other display device.
- a smart television module may be configured to provide a home screen or top level screen including icons for a plurality of different applications, such as a web browser and a plurality of streaming media services, a connected cable or satellite media source, other web “channels”, etc.
- the smart television module may further be configured to provide an electronic programming guide to the user.
- a companion application to the smart television module may be operable on a mobile computing device to provide additional information about available programs to a user, to allow the user to control the smart television module, etc.
- the features may be implemented on a laptop computer or other personal computer, a smartphone, other mobile phone, handheld computer, a tablet PC, or other computing device.
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing apparatus encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can include or share one or more data processing apparatus, computing devices, or processors.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), for example.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system such as system 600 or system 100 can include clients and servers.
- the data processing system 110 can include one or more servers in one or more data centers or server farms.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device e.g., a result of the user interaction
- the primary content detection module 130 , the stable identifier generation module 132 , the content insertion module 134 , the style property detection module 136 and the third-party content modification module 138 can be part of the data processing system 110 , a single module, a logic device having one or more processing modules, one or more servers, or part of a search engine.
- references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element.
- References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations.
- References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
- any implementation disclosed herein may be combined with any other implementation, and references to “an implementation,” “some implementations,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
- references to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
Abstract
Systems and methods of automatically detecting styles of properties of DOM elements of an information resource are disclosed. A data processing system including one or more processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and use the stored styles of properties to modify third-party content to be inserted within the information resource.
Description
The present application claims the benefit of U.S. Provisional Patent Application No. 62/034,364, titled “Methods and Systems for Identifying Styles of Properties of Document Object Model Elements of An Information Resource,” filed on Aug. 7, 2014 the entirety of which is incorporated herein by reference.
Information resources, such as web pages, can include primary content and content slots that serve as placeholders for third-party content items, such as creatives. When the web page is rendered on a user computing device, third-party content items are inserted in the content slots and provided for display alongside the primary content. The content slots in which third-party content items are inserted are typically defined manually in the web page code.
At least one aspect is directed to a method of generating a stable identifier for nodes likely to include primary content of an information resource. A processor identifies, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules. The processor determines one or more container nodes containing one or more of the identified content-related DOM nodes. The processor generates, for each of the container nodes, one or more identifiers corresponding to the container node. The processor then determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds. The processor identifies, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
In some implementations, the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node. In some implementations, the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name. In some implementations, the stable class name includes any class name that does not end in a number.
In some implementations, selecting one of the identifiers of the subset as the stable identifier includes identifying an identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
In some implementations, the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
In some implementations, the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
According to another aspect, a system for generating a stable identifier for nodes likely to include primary content of an information resource includes a data processing system configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
In some implementations, the processor determines, for a content-related DOM node of the plurality of content-related DOM nodes, a container node of the container nodes that is nearest to the content-related DOM node contained by the container node. In some implementations, the processor determines the container node nearest to the content-related DOM node by identifying one or more container nodes that either i) start with a title, or ii) the node is a member of a cascading style sheet (CSS) class that indicates that the node is a post; and the node either i) has a tag name that includes ARTICLE, or ii) the node has a tag name that includes DIV, INS or TD and the node has at least one stable class name. In some implementations, the stable class name includes any class name that does not end in a number.
In some implementations, selecting one of the identifiers of the subset as a stable identifier includes identifying an identifier of the identifier of the subset including only a tag name. In some implementations, selecting one of the identifiers of the subset as the stable identifier includes determining, for each identifier of the subset, a content identification score indicating an ability of the identifier to identify primary content on the information resource based on a number of contents of the container nodes to which the identifier of the subset is associated and selecting, based on the content identification scores of the identifiers of the subset, one of the identifiers of the subset as the stable identifier.
In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within the container nodes associated with the identifier of the subset. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of paragraphs included within the container nodes associated with the identifier of the subset and a second number of paragraphs included within the information resource. In some implementations, determining the content identification score of each identifier of the subset includes determining a first number of characters in paragraphs included within the container nodes associated with the identifier of the subset and a second number of characters included within all paragraphs included within the information resource.
In some implementations, the processor stores the identity of the stable identifier with the information resource. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
In some implementations, the processor can determine, from the generated identifiers, a subset of the generated identifiers corresponding only to container nodes that contain the content-related DOM nodes and selects one of the identifiers of the subset as a stable identifier.
According to another aspect, a computer-readable storage medium has computer-executable instructions, which when executed by a computer, cause the computer to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes based on a primary content detection policy including one or more rules, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds, identify, from the generated identifiers, a subset of the generated identifiers that correspond only to container nodes that contain the content-related DOM nodes and select one of the identifiers of the subset as a stable identifier.
According to another aspect, a method of automatically detecting styles of properties of document object model (DOM) elements of an information resource is described. One or more processors identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource. The processors identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content. The processors determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element. The processors store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container. The processors then use the stored styles of properties to modify third-party content to be inserted within the information resource.
In some implementations, identifying the information resource for which to automatically detect styles of properties includes identifying, from a log, a plurality of information resources on which third-party content was served and selecting, from the identified information resources, the information resource for which to automatically detect the style. In some implementations, the processors can identify the one or more DOM elements included in the DOM container. The one or more DOM elements can include a header element, a paragraph element, and a link element.
In some implementations, the processors can determine, from the DOM element corresponding to a header element of the primary content, whether the header element includes a link. The processors can insert, responsive to determining that the header element does not include a link, a link in the header element. The processors can determine styles of properties associated with the header element in which the link is inserted and store the determined style property associated with the header element in which the link is inserted in the memory.
In some implementations, the processors can identify the one or more DOM elements included in the DOM container. The processors can determine, for each of the one or more identified DOM elements, a type of DOM element. The processors can then determine, based on the type of DOM element, styles of properties of the DOM element. In some implementations, the styles of properties include at least one of a font-family, font-size, font-weight, color, text-align, text-decoration, or line-height.
In some implementations, the processors can determine, from a DOM element corresponding to the DOM container, that the DOM element does not define one or more styles of properties of a border. The processors can identify, from a descendant of the DOM element, that the descendants of the DOM element define the styles of properties of the border and set the styles of properties of the border of the descendant of the DOM element as the styles of properties of the border for the DOM element corresponding to the DOM container.
In some implementations, using the stored styles of properties to modify third-party content to be inserted within the information resource includes identifying, by the processors, a third-party content item to serve at the information resource, identifying, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource, generating, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item, the DOM elements including styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource, inserting the DOM node in a DOM tree of the information resource and providing, to a computing device on which to render the information resource including the generated third-party content item, the DOM tree of the information resource including the DOM node corresponding to the third-party content item.
According to another aspect, a system for automatically detecting styles of properties of document object model (DOM) elements of an information resource includes a data processing system having one or more processors. The processors identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource. The processors identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content. The processors determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element. The processors store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container. The processors then use the stored styles of properties to modify third-party content to be inserted within the information resource.
According to another aspect, a computer-readable storage medium has computer-executable instructions, which when executed by a computer, cause the computer to identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and then use the stored styles of properties to modify third-party content to be inserted within the information resource.
foregoing information and the following detailed description include illustrative examples of various aspects and implementations, and provide an overview or framework for understanding the nature and character of the claimed aspects and implementations. The drawings provide illustration and a further understanding of the various aspects and implementations, and are incorporated in and constitute a part of this specification.
The accompanying drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
Following below are more detailed descriptions of various concepts related to, and implementations of, methods, apparatus, and systems for automatically generating a stable identifier for primary content detected within an information resource and automatically identifying styles of properties of Document Object Model (DOM) elements of the information resource. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular manner of implementation. Examples of specific implementations and applications are provided primarily for illustrative purposes.
One aspect of the present disclosure relates to generate a stable identifier for primary content detected within an information resource. By detecting primary content, such as posts or articles, within an information resource, a data processing system can generate a stable identifier for the detected primary content. The stable identifier can be used to reference primary content on future renderings of the information resource. For example, once the data processing system generates a stable identifier for the primary content included in the information resource, the data processing system can dynamically insert creatives in the information resource when the information resource is rendered at a computing device. Details relating to generating a stable identifier for primary content detected within an information resource are provided below with respect to Section A.
Another aspect of the present disclosure relates to automatically detecting styles of properties of DOM elements of an information resource. A data processing system including one or more processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and use the stored styles of properties to modify third-party content to be inserted within the information resource. Details relating to automatically detecting styles of properties of DOM elements of an information resource are provided below with respect to Section B.
A. Generating a Stable Identifier for Primary Content Detected within an Information Resource
Information resources are often very complicated. For example, many information resources include numerous images and distinct sections of text. The information resources can include menus, headers, sidebars, footers, ads, widgets as well as what might be considered the actual primary content. Although a user viewing the information resource can easily differentiate these different parts of the information resource and focus on the primary content, the process of automatically detecting primary content included in an information resource is much more challenging.
Primary content on information resources, such as web pages, can often be presented in one of two forms. In one form, the primary content can be presented as a list of posts. Each post is its own distinct piece of content about a certain subject, but together the posts make up the primary content of the web page. Conversely, in another form, the primary content can be presented as a single long form post or article.
Once the primary content on an information resource is identified, the primary content may generally be contained in a container associated with a stable identifier. The present disclosure provides methods and systems for automatically generating stable identifiers for the detected primary content of an information resource. The generated stable identifiers can be used to insert content slots for serving creatives or third-party content items on the information resource.
The present disclosure provides methods and systems for automatically detecting these pieces of primary content. With respect to the first form in which the content is presented as a list of posts, each of the posts may be identified as a distinct piece of content. Conversely, with respect to the second form in which the content is presented as a single post or article, the whole of the primary content should be detected as a single piece of content.
In addition to detecting the primary content, the present disclosure provides methods and systems for generating a stable identifier for the detected primary content. For example, each of the posts that together form the primary content, can be wrapped in an <ARTICLE class=‘post’> tag in the HTML source, so a stable identifier might be {tagName: ‘ARTICLE’, className: ‘post’}. Using the second form in which the content is presented as a single post or article as another example, the post or article can be wrapped in a <DIV class=‘story-body’> tag in the HTML source, so a stable identifier might be {tagName: ‘DIV’, className: ‘story-body’}.
These identifiers allow the posts or articles on a web page to be very quickly and efficiently accessed by JavaScript once the page has been rendered in a browser. This allows for creatives to be inserted within the primary content of a page dynamically. In one example, a creative can be inserted after the first paragraph of each post when the web page is presenting the primary content as a list of posts. In another example, a creative can be inserted after the first three paragraphs of an article when the web page is presenting the primary content as a single piece of content.
The present disclosure relates to methods and systems for generating stable identifiers for content sections of an information resource. A processor can be configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content based on an identifier associated with the nodes, determine one or more container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier.
The data processing system 110 can include at least one server. For instance, the data processing system 110 can include a plurality of servers located in at least one data center or server farm. In some implementations, the data processing system 110 includes a content placement system, e.g., an ad server or ad placement system. The data processing system 110 can include at least one primary content detection module 130, at least one stable identifier generation module 132, at least one content insertion module 134, at least one style property detection module 136, at least one third-party content modification module 138 and at least one database 140. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can each include at least one processing unit, server, virtual server, circuit, engine, agent, appliance, or other logic device such as programmable logic arrays configured to communicate with the database 140 and with other computing devices (e.g., the content provider computing device 115, the content publisher computing device 120, or the end user computing device 125) via the network 105.
The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can include or execute at least one computer program or at least one script. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can be separate components, a single component, or part of the data processing system 110. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content, determine one or more container nodes container nodes containing one or more of the identified content-related DOM nodes, generate, for each of the container nodes, one or more identifiers corresponding to the container node, determine, from the generated identifiers, one or more potential identifiers corresponding only to container nodes that contain the content-related DOM nodes and select one of the potential identifiers as a stable identifier, for instance.
The content provider computing devices 115 can include servers or other computing devices operated by a content provider entity to provide content items such as advertisements for display on information resources at the end user computing device 125. The content provided by the content provider computing device 115 can include third party content items or creatives (e.g., ads) for display on information resources such as a website or web page that includes primary content, e.g. content provided by the content publisher computing device 120. The content items can also be displayed on a search results web page. For instance, the content provider computing device 115 can provide or be the source of ads or other content items for display in content slots of content web pages such as a web page of a company where the primary content of the web page is provided by the company, or for display on a search results landing page provided by a search engine. The content items associated with the content provider computing device 115 can be displayed on information resources other than web pages, such as content displayed as part of the execution of an application on a smartphone or other end user computing device 125.
The content publisher computing devices 120 can include servers or other computing devices operated by a content publishing entity to provide primary content for display via the network 105. For instance, the content publisher computing device 120 can include a web page operator who provides primary content for display on the web page. The primary content can include content other than that provided by the content publisher computing device 120, and the web page can include content slots configured for the display of third party content items (e.g., ads) from the content provider computing devices 115. For instance, the content publisher computing device 120 can operate the website of a company and can provide content about that company for display on web pages of the website. The web pages can include content slots configured for the display of third party content items such as ads of the content provider computing device 115. In some implementations, the content publisher computing device 120 includes a search engine computing device (e.g. server) of a search engine operator that operates a search engine website. The primary content of search engine web pages (e.g., a results or landing web page) can include results of a search as well as third party content items displayed in content slots such as content items from the content provider computing device 115.
The end user computing devices 125 can include computing devices configured to communicate via the network 105 to display data such as the content provided by the content publisher computing device 120 (e.g., primary web page content or other information resources) and the content provided by the content provider computing device 115 (e.g., third party content items such as ads configured for display in a content slot of a web page). The end user computing device 125, the content provider computing device 115, and the content publisher computing device 120 can include desktop computers, laptop computers, tablet computers, smartphones, personal digital assistants, mobile devices, end user computing devices, consumer computing devices, servers, clients, and other computing devices. The end user computing device 125, the content provider computing device 115, and the content publisher computing device 120 can include user interfaces such as microphones, speakers, touchscreens, keyboards, pointing devices, a computer mouse, touchpad, or other input or output interfaces.
The content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 may be any number of different user electronic devices, for example, a laptop computer, a desktop computer, a tablet computer, a smartphone, a digital video recorder, a set-top box for a television, a video game console, or any other computing device configured to communicate via the network 105. The content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 can include a processor and a memory, i.e., a processing circuit. The memory stores machine instructions that, when executed by processor, cause processor to perform one or more of the operations described herein. The processor may include a microprocessor, application-specific integrated circuit (ASIC), field-programmable gate array (FPGA), etc., or combinations thereof. The memory may include, but is not limited to, electronic, optical, magnetic, or any other storage or transmission device capable of providing the processor with program instructions. The memory may further include a floppy disk, CD-ROM, DVD, magnetic disk, memory chip, ASIC, FPGA, read-only memory (ROM), random-access memory (RAM), electrically-erasable ROM (EEPROM), erasable-programmable ROM (EPROM), flash memory, optical media, or any other suitable memory from which the processor can read instructions. The instructions may include code from any suitable computer-programming language such as, but not limited to, C, C++, C#, Java, JavaScript, Perl, Python and Visual Basic.
The content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 may also include one or more user interface devices. In general, a user interface device refers to any electronic device that conveys data to a user by generating sensory information (e.g., a visualization on a display, one or more sounds, etc.) and/or converts received sensory information from a user into electronic signals (e.g., a keyboard, a mouse, a pointing device, a touch screen display, a microphone, etc.). The one or more user interface devices may be internal to a housing of the content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 (e.g., a built-in display, microphone, etc.) or external to the housing of content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 (e.g., a monitor connected to the user computing device 115, a speaker connected to the user computing device 115, etc.), according to various implementations. For example, the content provider computing devices 115, the content publisher computing device 120 and the end user computing devices 125 may include an electronic display, which visually displays web pages using webpage data received from one or more content sources and/or from the data processing system 110 via the network 105. In some implementations, a content placement campaign manager or advertiser can communicate with the data processing system 110 via the content provider computing device 115. In some implementations, the advertiser can communicate with the data processing system 110 via a user interface displayed on the user interface devices of the content provider computing device 115.
The primary content detection module 130 can be part of, or can include scripts executed by, one or more servers in the data processing system 110. In some implementations, the primary content detection module 130 can be designed, constructed or configured to identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content. Examples of primary content can include posts, articles, or other content items that the web publisher has provided. Examples of content that may not be considered primary content can include advertisements, widgets, or links not related to the primary content. In some implementations, the primary content detection module 130 can be configured to identify all of the content-related Document Object Model (DOM) nodes included in the information resource. In some implementations, the primary content detection module 130 can identify content-related DOM nodes by inspecting the DOM tree of the information resource. The primary content detection module 130 can identify each node included within the information resource and determine whether the identified node is a content-related DOM node.
In some implementations, the primary content detection module 130 can determine that a DOM node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the primary content detection module 130 can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title. In some implementations, the primary content detection module 130 can determine that a node is a content-related DOM node if the node contains content corresponding to a post or article, or any other content that the publisher of the information resource considers to be primary content. In some implementations, a node can be defined as an effective text node if the node is a text node containing visible text. In some implementations, a node can be defined as an effective text node if all of the children of the node are inline nodes and at least one of the node's children is an effective text node. In some implementations, a node can be defined as an effective link node if the node is an effective text node that is the descendent of an anchor tag, such as an A tag. In some implementations, the node can be defined as an effective link node if the node has at least one child and all of the node's children are effective links. In some implementations, a node can be defined as a title if the node is an effective text node and the node, or a descendent of the node is a header tag, such as an H1, H2, H3, H4, H5, or H6 tag. In some implementations, a node may be deemed to start with a title if the node is a title. In some implementations, the node may be deemed to start with a title if the node is not a paragraph and a title is encountered before a paragraph is encountered when traversing the node's subtree.
The primary content detection module 130 can be configured to determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes. In some implementations, a node of the DOM tree may be identified as a container node if the node meets two criteria. The first criteria is that either the node has a tag type of ARTICLE or the node has a tag type of DIV, INS or TD and the node has at least one stable class name. In some implementations, a class name may be considered stable if the class name does not end in a number. In some implementations, a class name is considered to be stable if it does not match the following regular expression: /^.*[09]+$/. The second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node is a post. Examples of CSS class types that indicate that the node is a post can include ‘post’ or ‘typepost.’
In some implementations, the primary content detection module 130 can determine, for each of the identified content-related DOM nodes, the container node nearest to the content-related DOM node. In some implementations, the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node. In some implementations, the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes. In some implementations, the primary content detection module 130 can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node.
In some implementations, the primary content detection module 130 can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes. In some implementations, a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
In some implementations, the primary content detection module 130 can maintain a list of container nodes. The primary content detection module 130 can include each of the container nodes determined for each of the content-related DOM nodes in the list. In some implementations, the primary content detection module 130 can also include each of the equivalent container ancestor nodes determined for each container node. In some implementations, the primary content detection module 130 can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
The stable identifier generation module 132 can be part of, or can include scripts executed by, one or more servers in the data processing system 110. In some implementations, the stable identifier generation module 132 can be designed, constructed or configured to generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node. In some implementations, the stable identifier generation module 132 can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
In some implementations, the stable identifier generation module 132 can generate an identifier based on the type of tag associated with the container node for which the stable identifier generation module 132 is generating the identifier. In some implementations, the stable identifier generation module 132 can generate an identifier based on the class name associated with the container node. In some implementations, the stable identifier generation module 132 can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node, the stable identifier generation module 132 identifies the type of tag associated with the container node and a class name associated with the tag. In some implementations, the stable identifier generation module 132 can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type. In some implementations, the tag name of the identifier can be ARTICLE. In some implementations, the stable identifier generation module 132 can generate an identifier having a tag name and an ID if the ID is stable. A stable ID can be any ID that does not end in a number In some implementations, the stable identifier generation module 132 can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE. In some implementations, the identifier can include the tag type and a single stable class name. In some implementations, the stable class name can correspond to a class name that does not end with a number.
In some implementations, the stable identifier generation module 132 can be configured to maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the stable identifier generation module 132 may remove any duplicates in the list of identifiers generated for the container nodes.
In some implementations, the stable identifier generation module 132 can be configured to sort the identifiers generated for the container nodes based on a preference policy. In some implementations, the preference policy can include one or more rules for sorting the potential identifiers. Generally, a good identifier generated by the stable identifier generation module 132 should be stable, should reliably identify all container nodes on the information resource that contain the nodes likely to include primary content and should not identify any other nodes included in the information resource. In some implementations, the stable identifier generation module 132 can be configured to compare the identifiers included in the list to sort the identifiers in order of preference.
In some implementations, to execute or implement the preference policy, the stable identifier generation module 132 can compare two or more first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name. As such, if one of the identifiers has only a tag name, that identifier will be ranked higher than the identifier not having only a tag name. If the stable identifier generation module 132 identifies that none of the identifiers includes only a tag name, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and an ID. Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID. If the stable identifier generation module 132 identifies that none of the identifiers includes a tag name and an ID, the stable identifier generation module 132 determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name. As such, if one of the identifiers has a tag name and a class name, that identifier will be ranked higher than the identifier not having a class name. If the stable identifier generation module 132 identifies that both of the identifiers includes a tag name and a class name, the stable identifier generation module 132 determines which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name. As such, if one of the identifiers has a tag name and a more preferred class name, that identifier will be ranked higher than the identifier not having the more preferred class name. In some implementations, the class name ‘post-container’ is more preferred than the class names ‘post’ and ‘type-post’ and the class name ‘post’ is more preferred than the class name ‘type-post.’ If the stable identifier generation module 132 identifies that none of the identifiers includes a tag name with a preferred class name, the stable identifier generation module 132 determines that the identifier with the longer class name is preferred over an identifier with a shorter class name. As such, the identifier having a longer class name will be ranked higher than the identifier having a shorter class name. For example, an identifier having a tag name DIV and class name ‘post’ is preferred over an identifier having a tag type DIV and a class name ‘another-class-name’ since the class name ‘post’ is a preferred class name. In another example, an identifier having a tag name DIV and class name ‘another-class-name’ is preferred over an identifier having a tag type DIV and a class name ‘class-name’ since the class name ‘another-class-name’ is longer than the class name ‘class-name.’
The stable identifier generation module 132 can be configured to associate each of the identifiers generated by the stable identifier generation module 132 to the container nodes determined by the primary content detection module 130. In some implementations, the stable identifier generation module 132 can construct a map that maps each generated identifier to all of the container nodes from which the stable identifier generation module 132 was able to generate the identifier. In some implementations, the identifiers can serve as keys in the constructed map.
In some implementations, the stable identifier generation module 132 can be configured to determine, for each of the generated identifiers, one or more container nodes to which the identifier corresponds. In some implementations, the stable identifier generation module 132 can be configured to perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that are referenced by the identifier. For each of the identified nodes corresponding to the identifier, the stable identifier generation module 132 can determine that the identified node is either in the list of container nodes maintained by the primary content detection module 130 or that the node meets the criteria for being identified as a container node. In response to determining that the identified node is not on the list of container nodes or does not meet the criteria for being identified as a container node, the stable identifier generation module 132 can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the stable identifier generation module 132 can determine a content identification content identification score for the identifier. The content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource. In some implementations, the content identification score can indicate an ability of the identifier to identify primary content.
In some implementations, the stable identifier generation module 132 can be configured to determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource. In some implementations, the stable identifier generation module 132 can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
In some implementations, the stable identifier generation module 132 can be configured to determine the content identification score based on the following formula:
where:
-
- CPARA is the number of characters in nodes likely to include primary content that are contained in container nodes associated with the potential identifier;
- CTOTAL is the total number of characters in container nodes associated with the potential identifier;
- PCONTAINED is the number of nodes likely to include primary content that are contained in container nodes associated with the potential identifier;
- PTOTAL is the total number of nodes likely to include primary content on the information resource;
- DCONTAINED is the number of characters contained in nodes likely to include primary content that are contained in container nodes associated with the potential identifier;
- DTOTAL is the number of characters contained in all nodes likely to include primary content on the information resource;
- K1 is a tunable parameter (for example, 0.5); and
- K2 is a tunable parameter (for example, 1).
The stable identifier generation module 132 can be configured to identify the identifier having the largest content identification score. The stable identifier generation module 132 can then select the identifier from the plurality of generated identifiers as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content.
In some implementations, the stable identifier generation module 132 can be configured to store the identified potential identifier with the information resource. In some implementations, the identified potential identifier can be associated with each of the container nodes including primary content. In this way, when the information resource is accessed for rendering at a later time, the identifiers identifying the container nodes including the primary content can be used to easily identify the container nodes including the primary content. In some implementations, creatives can be inserted near the nodes likely to include primary content, thereby improving conversion rates of the creatives.
The content insertion module 134 can be part of, or can include scripts executed by, one or more servers in the data processing system 110. In some implementations, the content insertion module 134 can be designed, constructed or configured to insert a creative between adjacent container nodes that contain nodes likely to include primary content. In some implementations, the content insertion module 134 can identify the container nodes using the stable identifier selected by the stable identifier generation module 132. In some implementations, the content insertion module 134 can request access to the information resource, identify the generated stable identifier and identify the container nodes associated with the generated stable identifier. The content insertion module 134 can then insert creatives adjacent to or near these container nodes. As creatives displayed near primary content tend to have a higher conversion rate, the content insertion module 134 can increase the conversion rates of the creatives inserted the content insertion module 134 on the information resource.
Referring now briefly to FIGS. 2A and 2B , FIG. 2A shows a screenshot 200 of an information resource 202 displayed within a browser window. The information resource 202 includes primary content and third-party content 220 a-n. The primary content comprises a plurality of posts 210 a-n, each having an associated image, a headline, and corresponding text. The stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 202 and identify container nodes containing each of the plurality of posts 210 a-n. The content insertion module 134 can be configured to use the stable identifier associated with the information resource 202 to insert creatives in between the plurality of posts 210 a-n. FIG. 2B shows a screenshot of the information resource shown in FIG. 2A that includes creatives 230 a-n between the plurality of posts 210 a-n.
In some implementations, the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent posts of the information resource. In some implementations, the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots. In some implementations, the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent posts or near one or more posts.
Referring now briefly to FIGS. 3A and 3B , FIG. 3A shows a screenshot 300 of an information resource 302 displayed within a browser window. The information resource 302 includes primary content and third-party content 320 a-n. The primary content comprises an article 310 having an associated image, a headline, and corresponding text in multiple paragraphs 312 a-312 n. The stable identifier generation module 132 described in FIG. 1 can be configured to associate a stable identifier with the DOM tree of the information resource 302 and identify container nodes containing each of the plurality of paragraphs 312 a-n. The content insertion module 134 can be configured to use the stable identifier associated with the information resource 302 to insert creatives in between or adjacent to the plurality of paragraphs 312 a-n. FIG. 3B shows a screenshot of the information resource shown in FIG. 3A that includes a creative 330 between two of the paragraphs 312 a-n.
In some implementations, the content insertion module 134 can be configured to include a script or other software construct in the DOM tree of the information resource such that when the information resource is rendered on a browser executing on a computing device, the information resource is rendered with creatives inserted in between adjacent paragraphs of an article of the information resource. In some implementations, the browser can execute the script or software construct to identify the container nodes corresponding to the stable identifier, insert creative slots and cause creatives to be retrieved for insertion in the creative slots. In some implementations, the content insertion module 134 can be configured to cause the information resource to render on the browser such that creatives are displayed in slots positioned between adjacent paragraphs or near one or more paragraphs.
The data processing system 110 can also include one or more data stores, such as the database 140. The database can be included in the data processing system 110. In some implementations, the database may be located remote to the data processing system but accessible by the data processing system. The database can store a wide variety of content. For example, the database can store the DOM trees of one or more information resources, lists of container nodes, lists of identifiers associated with the container nodes, maps associating the identifiers with the container nodes, content identification scores of the potential identifiers, as well as the identity of the stable identifier selected to identify the container nodes of the information resource, amongst others. It should be appreciated that the data processing system 110 can include one or more additional modules to provide some or all of the features described herein as well as other additional features.
In further detail, the processor can identify, on an information resource, a plurality of content-related Document Object Model (DOM) nodes likely to include primary content (BLOCK 405). Examples of primary content can include posts, articles, or other content items that the web publisher has provided. In some implementations, the processor can inspect the DOM tree of an information resource and identify all of the content-related Document Object Model (DOM) nodes included in the information resource. In some implementations, the processor can identify each node included within the information resource and determine whether the identified node is a content-related DOM node. In some implementations, the processor can identify a node by inspecting the DOM tree for tags. A tag associated with a node can indicate the type of node.
In some implementations, the processor can determine that a node is a content-related DOM node based on a primary content detection policy including one or more rules. In some implementations, the processor can determine that a node is a content-related DOM node if the node is one or more of an effective text node, not an effective link node, contains more than a predetermined number of characters, no ancestor of the node is a paragraph, and either the node's rendered height is greater than or equal to twice the height of a line of text of the paragraph or the previous effective text node in the DOM tree is a title.
The processor can determine one or more container nodes containing one or more of the identified content-related DOM nodes (BLOCK 410). In some implementations, the processor can determine, for each content-related DOM node, one or more container nodes containing one or more of the identified content-related DOM nodes. In some implementations, a node of the DOM tree may be identified as a container node if the node meets two criteria. The first criteria is that either the node corresponds to an ARTICLE or the node corresponds to one of a DIV, INS or TD and the node has at least one stable class name. In some implementations, a class name may be considered stable if the class name does not end in a number. In some implementations, a class name is considered to be stable if it does not match the following regular expression: /^.*[09]+$/. The second criteria is that the node either starts with a title or the node is a member of a Cascading Style Sheet (CSS) class that indicates that that the node includes primary content, such as a post. Examples of CSS class types that indicate that the node is a post can include ‘post’ or ‘typepost.’
In some implementations, the processor can determine, for each of the identified content-related DOM nodes, the container node nearest to the content-related DOM node. In some implementations, the container node nearest to a given content-related DOM node can be the container node that contains the content-related DOM node and no other container nodes that also contain the content-related DOM node. In some implementations, the processor can store a record of each identified content-related DOM node and the identity of the nearest container node that contained the identified content-related DOM node.
In some implementations, the processor can determine any equivalent container node for each container node determined to contain one or more of the identified content-related DOM nodes. In some implementations, a node can be considered to be an equivalent container ancestor node if exactly one of the node's descendants is a container node, the DOM node contains exactly the same set of effective text nodes as the descendent container node and the node meets the two criteria for determining that a node is a container node.
In some implementations, the processor can maintain a list of container nodes. The primary content detection module can include each of the container nodes determined for each of the content-related DOM nodes in the list. In some implementations, the processor can also include each of the equivalent container ancestor nodes determined for each container node. In some implementations, the processor can remove any duplicate nodes from the list such that the list of container nodes includes each of the determined container nodes and any equivalent container ancestor nodes corresponding to the determined container nodes.
The processor can generate, for each of the container nodes, one or more identifiers corresponding to the container node (BLOCK 415). In some implementations, the processor can generate, for each of the container nodes included in the list of container nodes, one or more identifiers corresponding to the container node. In some implementations, the stable identifier generation module can be configured to generate, for each of the container nodes included in the list, every identifier corresponding to the container node.
In some implementations, the processor can generate an identifier based on the tag associated with the container node for which the processor is generating the identifier. In some implementations, the processor can generate an identifier based on the class name associated with the container node. In some implementations, the processor can generate the identifier according to an identifier generation policy that includes one or more rules. In some implementations, to generate an identifier for a given container node according to the identifier generation policy, the processor identifies the type of tag associated with the container node and a class name associated with the tag. In some implementations, the processor can generate an identifier having only a tag name if the container node corresponds to an ARTICLE tag type. In some implementations, the tag name of the identifier can be ARTICLE. In some implementations, the processor can generate an identifier having a tag name and an ID if the ID is stable. A stable ID can be any ID that does not end in a number In some implementations, the processor can generate an identifier having a tag name and a class name if the container node corresponds to any tag type other than ARTICLE. In some implementations, the identifier can include the tag type and a single stable class name. In some implementations, the stable class name can correspond to a class name that does not end with a number.
In some implementations, the processor can maintain a list of identifiers generated for the container nodes included in the list of container nodes. In some implementations, the processor may remove any duplicates in the list of identifiers generated for the container nodes. In some implementations, the processor can sort the identifiers generated for the container nodes based on a preference policy. In some implementations, the preference policy can include one or more rules for sorting the potential identifiers.
In some implementations, the processor can arrange a plurality of the generated identifiers of the list of identifiers in order of highest preference to lowest preference. The processor can compare two or more identifiers at a time and determine which of the identifiers has a higher preference. In some implementations, the processor can first determine whether any of the two identifiers includes only a tag name. Identifiers with only a tag name are preferred over identifiers having a tag name and an ID or identifiers having a tag name and a class name. As such, if one of the identifiers has only a tag name, that identifier will be ranked higher than the identifier not having only a tag name. If the processor determines that none of the identifiers being compared includes only a tag name, the processor can determine whether any of the two identifiers includes a tag name and an ID. Identifiers having a tag name and an ID are preferred over identifiers having a tag name without an ID. As such, if one of the identifiers has a tag name and an ID, that identifier will be ranked higher than the identifier not having an ID. If the processor determines that none of the identifiers includes a tag name and an ID, the processor determines whether any of the two identifiers includes a tag name and a class name. Identifiers having a tag name and a class name are preferred over identifiers having a tag name without a class name. As such, if one of the identifiers has a tag name and a class name, the processor will rank that identifier higher than the identifier not having a class name. If the processor identifies that both of the identifiers includes a tag name and a class name, the processor can determine which of the identifiers has a more preferred class name. Identifiers having a more preferred class name are preferred over identifiers having a less preferred class name. As such, if one of the identifiers has a tag name and a more preferred class name, the processor will rank that identifier higher than the identifier not having the more preferred class name. In some implementations, the class name ‘post-container’ is more preferred than the class names ‘post’ and ‘type-post’ and the class name ‘post’ is more preferred than the class name ‘type-post.’ If the processor identifies that none of the identifiers includes a tag name with a preferred class name, the processor can determine that the identifier with the longer class name is preferred over an identifier with a shorter class name. As such, the identifier having a longer class name will be ranked higher than the identifier having a shorter class name.
The processor determines, for each of the generated identifiers, one or more container nodes to which the identifier corresponds (BLOCK 420). In some implementations, the processor can associate each of the identifiers generated by the processor to the container nodes to determine a subset of identifiers that correspond only to container nodes that contain the content-related DOM nodes. In some implementations, the processor can map each generated identifier to all of the container nodes from which the processor could have possibly generated the identifier. This is because multiple container nodes may have the same tag types or ids or class names, which result in container nodes having the same tag types or ids or class names generating identical identifiers. In some implementations, the identifiers can serve as keys in a map constructed to map the identifiers to each of the container nodes. In some implementations, the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier.
The processor can determine, from the generated identifiers, a subset of the identifiers that correspond only to container nodes that contain the content-related DOM nodes (BLOCK 425). In some implementations, the processor can perform, for each identifier, a lookup in the DOM tree of the information resource to identify all nodes that can be referenced by the identifier. In some implementations, nodes that can be referenced by the identifier include nodes that have characteristics (for example, tag type, id, class name) that would cause the processor to generate the identifier based on the characteristics of the node. For each of the identified nodes corresponding to the identifier, the processor can determine that the identified node is either in a list of container nodes maintained by the processor or that the node meets the criteria for being identified as a container node. In response to determining that the identified node is not on the list of container nodes or does not meet the criteria for being identified as a container node, the processor can disregard the identifier as a stable identifier and remove the identifier from the list of identifiers. Conversely, in response to determining that the identified node is either on the list of container nodes or meets the criteria for being identified as a container node, the processor can include the identifier as a potential stable identifier and as such, determine a content identification score for the identifier. The content identification score can indicate how well the identifier identifies posts, articles or other primary content on the information resource.
The processor can select one of the identifiers of the subset as a stable identifier (BLOCK 430). In some implementations, the processor can determine a content identification score for each of the potential identifiers. In some implementations, the processor can determine the content identification score based on a number of contents of the container nodes to which the identifier is associated. In some implementations, the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content (for example, paragraph nodes) that are contained the container nodes associated with the identifier and a second number of characters included within the container nodes associated with the identifier. In some implementations, the processor can determine the content identification score of each identifier based on a first number of nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of paragraphs included within the information resource. In some implementations, the processor can determine the content identification score of each identifier based on a first number of characters in nodes likely to include primary content that are contained in the container nodes associated with the identifier and a second number of characters included within all nodes likely to include primary content that are included within the information resource.
The processor can identify the identifier having the largest content identification score. The processor can then select the identifier having the highest content identification score as the stable identifier for identifying container nodes that contain nodes that are likely to include primary content. In some implementations, the processor can store the identity of the stable identifier with the information resource. In this way, the processor can identify posts or articles or nodes likely to include primary content using the stable identifier, which can identify the container nodes corresponding to the posts or articles or nodes likely to include primary content. In some implementations, the processor inserts a creative in between adjacent container nodes corresponding to the stable identifier responsive to receiving a request to serve the information resource.
The following is an implementation of a portion of a DOM tree of an information resource. As shown below, some of the nodes are followed by annotations indicating the type of node. For ease of reference, the annotations begin with //.
<div id=‘postOne’ class=‘content-entry’>//Ancestor Container Node
<div class=‘left-align’>// Container Node
-
- <h2>
Post 1 Title</h2> - <p>
Paragraph 1 . . . blaa blaa blaa . . . end.</p>//DOM node likely to contain primary content
<p>Paragraph 2 . . . blaa blaa blaa . . . end.</p>// DOM node likely to contain primary content
- <h2>
</div>
</div>
<div id=‘postTwo’ class=‘content-entry’>// Ancestor Container Node
<div class=‘left-align’>// Container Node
-
- <h2>
Post 2 Title</h2> - <p>
Paragraph 1 . . . blaa blaa blaa . . . end.</p>// DOM node likely to contain primary content - <p>
Paragraph 2 . . . blaa blaa blaa . . . end.</p>// DOM node likely to contain primary content
- <h2>
</div>
</div>
<div id=‘link-box’ class=‘left-align’>//Other HTML node on information resource (Not a post)
<a href=‘#’>Link 1</a>
<a href=‘#’>Link 2</a>
</div>
Using the DOM tree above, the processor can generate the following identifiers based on the container nodes. The processor can generate the following identifier for the container nodes.
{
tagName: ‘DIV’,
className: ‘left-align’
}
By considering ancestor container nodes, the processor can expand the list of identifiers to the following four identifiers:
{
tagName: ‘DIV’,
className: ‘left-align’
}
{
tagName: ‘DIV’,
id: ‘postOne’
}
{
tagName: ‘DIV’,
id: ‘postTwo’
}
{
tagName: ‘DIV’,
className: ‘content-entry’
}
The processor would then discard the {tagName: ‘DIV’, className: ‘left-align’} identifier since it is a container node that does not contain a node likely to contain primary content. In particular, the {tagName: ‘DIV’, className: ‘left-align’} identifier references the following container:
<div id=‘link-box’ class=‘left-align’>
<a href=‘#’>Link 1</a>
<a href=‘#’>Link 2</a>
</div>.
The processor would then arrange the remaining three identifiers according to a preference order and select the {tagName: ‘DIV’, className: ‘content-entry’} identifier as the stable identifier as this identifier would have the highest score.
B. Detecting Styles of Properties of DOM Elements of an Information Resource
Native ads refer to a class of online ads that match the look and feel of primary content on a content publisher's website. At present, a few content publishers manually generate native ads for their websites. However, doing so is a tedious process that requires both time and technical expertise. Moreover, it is impossible for content publishers that serve ads selected via real-time auctions to manually modify ads to match the styles of properties of other content on the website. Aspects of the present disclosure relate to methods and systems for automatically detecting styles of properties of DOM elements of a website and modifying ads selected for insertion to match the styles of properties of the DOM elements of the website such that the modified ads appear as native ads.
Referring again to FIG. 1 , as described above with respect to Section A, the primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can include or execute at least one computer program or at least one script. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can be separate components, a single component, or part of the data processing system 110. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can include combinations of software and hardware, such as one or more processors configured to execute one or more scripts to identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource, identify at least one DOM container that contains at least a portion of the primary content, determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element, store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container and use the stored styles of properties to modify third-party content to be inserted within the information resource, for instance.
The style property detection module 136 can be designed, constructed or configured to identify an information resource for which to detect styles of properties of DOM elements included in the information resource. In some implementations, the style property detection module 136 can identify the information resource responsive to receiving a request from a content publisher requesting to serve native third-party content items on an information resource of the content publisher. In some implementations, the style property detection module 136 can identify a plurality of information resources on which a third-party content item has previously been served. In some implementations, the style property detection module 136 can identify the plurality of information resources from an advertising auction log that includes a list of webpages on which a third-party content item was previously served. In some implementations, the log can be maintained by an advertising management entity that stores a record of each third-party content item served on a webpage. In some implementations, the advertising management entity can be a part of the data processing system 110.
In some implementations, the style property detection module 136 can identify a plurality of URLs corresponding to information resources on which ads were previously served. The style property detection module 136 may group URLs corresponding to a single information resource together using an identifier unique to the information resource.
In some implementations, the style property detection module 136 can be configured to render the information resource for which to detect styles of properties of DOM elements on a browser, such as a headless browser. In some implementations, the style property detection module 136 can determine, using the techniques described above with respect to Section A, one or more DOM nodes that correspond to primary content. In some implementations, the style property detection module 136 can identify DOM nodes that correspond to primary content, such as a post, article or any other DOM structure that includes primary content. In some implementations, the primary content detection module 130 or other module of the data processing system 110 can identify DOM nodes or elements that correspond to a post, article or any other DOM structure that includes primary content. In some implementations, the primary content detection module 130 can determine one or more container nodes that contain the DOM nodes that correspond to primary content.
The style property detection module 136 can then determine, for the container nodes that contain the DOM nodes corresponding to primary content, a plurality of DOM elements included in the container node. Each of the DOM elements can include one or more properties that have associated styles that define the look and feel of the content included in the DOM elements. In some implementations, the styles of properties of a DOM element can be defined within the DOM element. In some implementations, the styles of properties of a DOM element can be defined by a style property sheet, such as a cascading style sheet (CSS) of the information resource. In some implementations, the content publisher can define the styles of properties of each of the DOM elements included in the information resource.
In some implementations, the style property detection module 136 can identify or determine styles of properties associated with certain types of DOM elements. In particular, the style property detection module 136 can determine styles of properties of DOM elements that can be used to generate native third-party content items to serve on the information resource. In some implementations, third-party content items may be served along with primary content of an information resource. However, when selecting a third-party content item to serve, the third-party content item may be in a format or have styles of properties that do not match the look and feel, or in other words, the styles of properties of the primary content included in the information resource. As such, a text ad selected to be served on the information resource may be modified to match the look and feel of the primary content of the information resource prior to being served.
In some implementations, the text ad selected to be served may be generated by an advertising entity that manages ad selection. As such, many text ads may have a style that is generic to all text ads generated by the advertising entity. In some implementations, the text ad may include a title, which may also be a clickable link to a landing page, one or more lines of text, and a website address. In some such implementations, the title element of the text ad can have a first set of styles of properties, the one or more lines of text may have a second set of styles of properties and the website address may have a third set of styles of properties.
In some implementations, the data processing system 110 may generate a native content item based on the selected text ad that matches the styles of properties of certain DOM elements of the primary content of the information resource. In some implementations, to do so, the style property detection module 136 may identify one or more DOM elements of the primary content whose styles of properties may be used to generate the modified third-party content item. For example, the title element of the text ad, which can include a link, can be modified with styles of properties corresponding to a link of a title of a post or article included in the information resource on which the modified third-party content item is to be served. In some implementations, the style property detection module 136 can determine, from a DOM element corresponding to a header element of the primary content, whether the header element includes a link. The header element can correspond to a title of a post or an article. The style property detection module 136 can insert, responsive to determining that the DOM element corresponding to the header element does not include a link, a link in the header element. The style property detection module 136 can then determine styles of properties associated with the header element in which the link is inserted, which can then be stored in the memory.
Similarly, the text elements of the text ad can be modified with styles of properties corresponding to text portions of the post or article of the information resource. Moreover, the website address element of the text address can be modified with styles of properties corresponding to a link included within the text portion of the post or article of the information resource. If the DOM element corresponding to the text portion of the post does not include a link, the style property detection module 136 can insert, responsive to determining that the DOM element corresponding to the text portion does not include a link, a link in the text portion. The style property detection module 136 can then determine styles of properties associated with the text portion in which the link is inserted and store the styles of properties in the memory. In this way, when the modified third-party content item is served on the information resource, the modified third-party content item appears to be a native ad as opposed to a text ad generated by an entity different from the content publisher. Details regarding generating a native ad from a text ad received from a third-party content provider or other entity are provided below.
In some implementations, the style property detection module 136 can determine the styles of one or more properties of a particular DOM element using a function call. In some implementations, the function call can employ a script to determine styles of properties or characteristics of DOM elements. One particular function is window.getComputedStyle, which can determine the effective styles on DOM elements after CSS and styling rules have been considered. In some implementations, the window.getComputedStyle( ) function can return the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain. The style property detection module 136 can determine, for each of the DOM elements that may be used to generate native ads, styles of properties of the DOM element. In some implementations, the style property detection module 136 can determine the styles of properties of such DOM elements by applying the window.getComputedStyle( ) function to such DOM elements.
In some implementations, the style property detection module 136 can determine the styles of different properties corresponding to different DOM nodes or elements. For instance, the style property detection module 136 can determine styles of properties of a node container including primary content of an information resource. The properties for which styles can be determined include but are not limited to, “background-color,” “border,” “border-bottom,” “border-top,” “margin,” “padding” and “float,” among others. The style property detection module 136 can also determine styles corresponding to a title element within the post. In some implementations, the title element can include a link. For the title element, the style property detection module 136 can determine styles of properties, including but not limited to, “font-family,” “font-size,” “font-weight,” “color,” “text-align,” “text-decoration,” “line-height” and hover effects, if the title element includes a link, among others.
In some implementations, the style property detection module 136 can also determine styles of properties of a DOM element corresponding to a paragraph, text or body portion within the post. In some implementations, the DOM element corresponding to the paragraph, text or body portion within the post can include a link. The properties for which the style property detection module 136 can determine styles include but are not limited to, “font-family,” “font-size,” “font-weight,” “color,” “text-align,” “text-decoration,” “line-height” and hover effects if the text portion includes a link.
In some implementations, the style property detection module 136 can also determine styles of properties of a DOM element corresponding to an image included within a post or article or other primary content of the information resource. For example, a post may include a title, a body and a corresponding image. In some implementations, the style property detection module 136 can determine styles of properties of the image. In some implementations, examples of properties for which the style property detection module 136 can determine styles include but are not limited to “width,” “height,” “display,” “margin,” “padding,” “border,” “float,” and effects, such as circle, crop, black and white, among others.
In some implementations, the primary content included in an information resource may be surrounded by borders or other visual artifacts or features. For example, a web page that includes a series of posts or articles may each include borders that can improve the user experience. In some implementations, the DOM elements corresponding to the post, article, or other primary content may not include properties that define the borders around the post or article. Rather, another DOM element that may contain the DOM elements corresponding to the post or article may define the borders. As such, the style property detection module 136 may be configured to determine styles of properties of such DOM elements that do not necessarily correspond to primary content but may have an effect on the presentation of the primary content.
In some implementations, a portion of a DOM tree of an information resource that includes a post or article may have the following structure:
<div class=‘post’ style=‘margintop: 10px;’>
<div style=‘bordertop: 1px solid black;’>
-
- <h1>The Post Title</h1>
- <p>The post text.</p>
</div>
</div>
Accordingly, in some implementations, determining styles of properties of a border of the post may not be determined by determining the styles of properties of the DOM element corresponding to the post container (class=‘post’) since the property ‘bordertop’ is defined in a DOM element that is a descendent of the DOM element corresponding to the post container.
In some implementations, the style property detection module 136 can determine the styles of properties related to a border of the primary content. In some implementations, the style property detection module 136 can determine one or more border properties for which to determine styles. In some implementations, examples of border properties can include “border,” “borderbottom,” “bordertop,” “margin,” “padding” and “float,” among others. In some implementations, the style property detection module 136 can determine whether the DOM element corresponding to the container node defines styles of the one or more border properties. If the DOM element corresponding to the container node does not defines styles of any of the one or more border properties, the style property detection module 136 can determine whether a child or descendent of the DOM element corresponding to the container node defines the styles of the border properties not defined by the DOM element corresponding to the container node. In this way, the style property detection module 136 can determine the styles of border properties even though the container node corresponding to the primary content does not define the styles of the border properties. In some implementations, the following algorithm can be used to determine a border property, for instance, the effective top border, of an element:
function getEffectiveTopBorder(element) {
-
- var border=element.getComputedStyleValue(‘bordertop’);
- if (border !=null && !border.contains(‘Opx’) &&
!border.contains(‘none’)) {
-
- return border;
- }
- if (element.childNodes.length>0) {
- return getEffectiveTopBorder(element.childNodes[0]);
- }
- return null;
}
In some implementations, the style property detection module 136 can similarly determine other border properties. In some implementations, if the style property detection module 136 desires to determine the style of a bottom border property, the style property detection module 136 may work backwards through the descendants of the container node starting with the last child of the post container, as it may be likely that the bottom border may be defined by a DOM element towards the end of the container node.
In some implementations, the style property detection module 136 can store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container. In some implementations, the style property detection module 136 can store the styles of properties of the DOM elements corresponding to primary content in a data structure. In some implementations, the style property detection module 136 can associate the styles of properties of the DOM elements corresponding to primary content with an identifier identifying the information resource that includes the primary content. In some implementations, multiple information resources can be associated with the determined styles of properties responsive to determining that the styles of properties of the DOM elements of the primary content in each of the multiple information resources match one another. In some implementations, multiple web pages of the same web site may be grouped together if they contain primary content that is presented in a similar manner.
In some implementations, the style property detection module 136 can generate an identifier corresponding to the styles of properties of the various DOM elements of the primary content of an information resource. This identifier can include tagNames and ClassNames that may be used to modify content that is to be inserted in the information resource at a later time. In this way, native ads can be served on a content publisher's web page without requiring the content publisher to manually update the styles of properties of DOM elements corresponding to the native ad.
In some implementations, the content insertion module 134 can identify locations in the DOM tree in which to insert DOM elements corresponding to native ads. In some implementations, the content insertion module 134 can insert the DOM elements corresponding to native ads adjacent to DOM elements corresponding to posts or articles, such that the native ads have the same look and feel as posts or articles that form the primary content of the information resource. In some implementations, the content insertion module 134 can generate markers identifying locations in which to insert native ads. The style property detection module 136 can then store these markers along with the determined styles of properties determined by the style property detection module 136. In some implementations, the content insertion module 134 can generate a DOM node corresponding to a native content item that can be updated and inserted into an appropriate location within the DOM tree of the information resource such that when the information resource is rendered, the content item is displayed as a native content item along with primary content of the information resource. In some implementations, the style property detection module 136 can store these generated DOM nodes that include properties having styles that match the styles of properties of certain DOM elements of the primary content determined by the style property detection module 136. In some implementations, when a third-party content item to be inserted in the information resource is received, one or more modules of the data processing system 110 can retrieve the generated DOM node, extract information from the third-party content item and insert the extracted information in the generated DOM node. The data processing system 110 can then insert the generated DOM node including the extracted information in the DOM tree of the information resource such that when the information resource is rendered for display, the third-party content item is rendered for display as a native ad that matches the look and feel of primary content of the information resource.
In some implementations, the style property detection module 136 can create or generate a CSS styling profile for the information resource that includes the DOM elements corresponding to the primary content and styles of properties associated with the DOM elements. The style property detection module 136 can store the generated CSS styling profile in the memory such that when a request to convert a third-party content item to a native ad or native content item, the conversion can occur without requiring any input from the content publisher of the information resource.
The third-party content modification module 138 can be designed, constructed or configured to modify third-party content items into native content items that match the look and feel of an information resource for which the style property detection module 136 has determined the styles of properties of DOM elements corresponding to primary content. The third-party content modification module 138 can be configured to identify a third-party content item to serve on the information resource. In some implementations, the third-party content modification module 138 can identify the third-party content item by receiving the third-party content item from an advertising auction system. In some implementations, the third-party content modification module 138 can identify the third-party content item responsive to receiving a request to include the third-party content item on the information resource. For instance, the request can be a request to include an article or post previously displayed on another information resource on the information resource. To maintain the look and feel of the information resource, the article or post may be modified into a native content item before being included in the information resource.
The third-party content modification module 138 can identify the information resource on which to include the identified third-party content item. The third-party content modification module 138 can use an identifier of the information resource to perform a lookup in the memory to retrieve the styles of properties of DOM elements of the primary content of the information resource previously determined by the style property detection module 136.
In some implementations, the third-party content modification module 138 can retrieve the CSS styling profile of the information resource or some other information that the third-party content modification module 138 can use to modify the identified third-party content item into a native content item for the information resource on which to serve the third-party content item. In some implementations, the third-party content modification module 138 can identify the DOM elements of the primary content that may be used to modify the corresponding elements of the third-party content item. In some implementations, the CSS styling profile can identify the DOM elements of the primary content to use for modifying third-party content item. In some implementations, the CSS styling profile can include a DOM element corresponding to a link within a header of an article or post, a DOM element corresponding to text within a body portion of the article or post, and a DOM element corresponding to a link within the body portion of the article or post.
In some implementations, the third-party content modification module 138 can be configured to modify a text ad to a native ad. In some implementations, the third-party content modification module 138 can identify the header of the text ad and extract the text and link of the header of the text ad to generate a DOM element corresponding to a header portion of the native ad. In this way, when the native ad is rendered on the information resource, the header of the native ad includes the text of the header of the text ad and a link of the header of the native ad is directed to the same landing page as the link of the header of the text ad. Similarly, the third-party content modification module 138 can identify the text portion of the text ad and extract the text portion to insert in a corresponding text portion of the native ad. The DOM element of the text portion of the native ad, however, will have the styles of properties of the DOM element of the text portion of the primary content of the information resource. Moreover, the third-party content modification module 138 can identify the website address portion of the text ad and extract the website address to insert in text portion of the native ad. The DOM element of the portion of the native ad containing the website address, however, will have the styles of properties of the DOM element of a link that may appear in the text portion of the primary content of the information resource.
Once the third-party content modification module 138 generates the native content item from the identified third-party content item, the third-party content modification module 138 can pass the generated native content item to the content insertion module 134, which can then handle the insertion of the content item prior to rendering the information resource to an end user computing device. In some implementations, the content insertion module 134 may be configured to modify the DOM tree of the information resource to include a DOM node including a plurality of DOM elements that form the native content item. As described herein, the content insertion module 134 can determine a location in the DOM tree to insert the DOM node corresponding to the native content item. In some implementations, the DOM node can be inserted in the DOM tree such that the native content item is rendered below the first post or article is rendered on the information resource.
In some implementations, the content insertion module can be configured to inject a DOM node or element corresponding to the native content item onto the information resource. In some implementations, the native content item can be served using a DOM element styling function. For instance, the format of the native content item that may be inserted in the DOM tree of the information resource may look like the following:
<DIV> | ||
<IFRAME src=″{ad style frame url}″> | ||
<DIV class=″ad″> | ||
<DIV class=″title″> | ||
<A href=″{{ url }}″>{{ title }}</A> | ||
</DIV> | ||
<DIV class=″url″> | ||
<A href=″{{ url }}″>{{ visible_url }}</A> | ||
</DIV> | ||
<DIV class=″text″>{{ text }} | ||
</DIV> | ||
</DIV> | ||
</IFRAME> | ||
</DIV> | ||
The processors can identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource (BLOCK 505). In some implementations, the processors can identify the information resource responsive to receiving a request from a content publisher requesting to serve native third-party content items on an information resource of the content publisher. In some implementations, the processors can identify a plurality of information resources on which a third-party content item has previously been served. In some implementations, the processors can identify the plurality of information resources from an advertising auction log that includes a list of webpages on which a third-party content item was previously served. In some implementations, the log can be maintained by an advertising management entity that stores a record of each third-party content item served on a webpage. In some implementations, the advertising management entity can be a part of the data processing system. In some implementations, the processors can identify a plurality of URLs corresponding to information resources on which ads were previously served. The processors may group URLs corresponding to a single information resource together using an identifier unique to the information resource.
The processors can identify at least one DOM container that contains at least a portion of the primary content (BLOCK 510). The processors can identify at least one DOM container that contains at least a portion of the primary content by inspecting a DOM tree of the information resource. In some implementations, the processors can render the information resource for which to detect styles of properties of DOM elements on a browser, such as a headless browser. In some implementations, the processors can determine, using the techniques described above with respect to Section A, one or more DOM nodes that correspond to primary content. In some implementations, the processors can identify DOM nodes that correspond to primary content, such as a post, article or any other DOM structure that includes primary content. In some implementations, the processors can determine one or more container nodes that contain the DOM nodes that correspond to primary content. In some implementations, the processors can identify one or more DOM elements included in the DOM container. The processors can then determine, for each of the one or more identified DOM elements, the type of DOM element. The processors can then determine, based on the type of DOM element, styles of properties of the DOM element that may be relevant for generating native content items for the information resource.
The processors can determine, for each of one or more DOM elements included in the DOM container, styles of properties corresponding to a respective DOM element (BLOCK 515). The processors can determine, for the container nodes that contain the DOM nodes corresponding to primary content, a plurality of DOM elements included in the container node. Each of the DOM elements can include one or more properties that have associated styles that define the look and feel of the content included in the DOM elements. In some implementations, the styles of properties of a DOM element can be defined within the DOM element. In some implementations, the styles of properties of a DOM element can be defined by a style property sheet, such as a cascading style sheet (CSS) of the information resource. In some implementations, the content publisher can define the styles of properties of each of the DOM elements included in the information resource.
In some implementations, the processors can identify, determine or detect styles of properties associated with certain types of DOM elements. In particular, the processors can determine styles of properties of DOM elements that can be used to generate native content items from third-party items for serving on the information resource. In some implementations, third-party content items may be served along with the primary content. However, when selecting a third-party content item to serve, the third-party content item may be in a format or have styles of properties that do not match the look and feel, or in other words, the styles of properties of the primary content included in the information resource. As such, a text ad selected to be served on the information resource may be modified to match the look and feel of the primary content of the information resource prior to being served.
In some implementations, processors may identify one or more DOM elements of the primary content whose styles of properties may be used to generate a native content item from a third-party content item selected to be served on the information resource. For example, the title or header element of a text ad, which can include a link, can be modified with styles of properties corresponding to a link of a title of a post or article included in the information resource on which the modified third-party content item is to be served. Similarly, the text elements of the text ad can be modified with styles of properties corresponding to text portions of the post or article of the information resource. Moreover, the website address element of the text address can be modified with styles of properties corresponding to a link included within the text portion of the post or article of the information resource. In this way, when the modified third-party content item is served on the information resource, the modified third-party content item appears to be a native ad as opposed to a text ad generated by an entity different from the content publisher. Details regarding generating a native ad from a text ad received from a third-party content provider or other entity are provided below.
In some implementations, the processors can determine the styles of one or more properties of a particular DOM element using a function call. In some implementations, the function call can employ a script to determine styles of properties or characteristics of DOM elements. One particular function is window.getComputedStyle, which can determine the effective styles on DOM elements after CSS and styling rules have been considered. In some implementations, the window.getComputedStyle( ) function can return the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain. The processors can determine, for each of the DOM elements that may be used to generate native ads, styles of properties of the DOM element. In some implementations, the processors can determine the styles of properties of such DOM elements by applying the window.getComputedStyle( ) function to such DOM elements.
In some implementations, the processors can determine the styles of different properties corresponding to different DOM nodes or elements. For instance, the processors can determine styles of properties of a node container including primary content of an information resource. The processors can also determine styles corresponding to a title or header element within the post. In some implementations, the title or header element can include a link. In some implementations, the title or header element of the primary content may not include a link. However, the processors may desire to include a link to a landing page for a native content item to be inserted in the information resource. In some implementations, the processors can determine, from a DOM element corresponding to a header element of the primary content, whether the header element includes a link. The header element can correspond to a title of a post or an article. The processors can insert, responsive to determining that the DOM element corresponding to the header element does not include a link, a link in the header element. The processors can then determine styles of properties associated with the header element in which the link is inserted, which can then be stored in the memory.
In some implementations, the processors can also determine styles of properties of a DOM element corresponding to a paragraph, text or body portion within the post. In some implementations, the DOM element corresponding to the text or body portion within the post can include a link. In some implementations, the processors can also determine styles of properties of a DOM element corresponding to an image included within a post or article or other primary content of the information resource.
In some implementations, the primary content included in an information resource may be surrounded by borders or other visual artifacts or features. In some implementations, the DOM elements corresponding to the post, article, or other primary content may not include properties that define the borders around the post or article. Rather, another DOM element that may contain the DOM elements corresponding to the post or article may define the borders. As such, the processors may determine styles of properties of such DOM elements that do not necessarily correspond to primary content but may have an effect on the presentation of the primary content.
Accordingly, in some implementations, determining styles of properties of a border of the post may not be determined by determining the styles of properties of the DOM element corresponding to the post container. In some implementations, the processors can determine the styles of properties related to a border of the primary content. In some implementations, the processors can determine whether the DOM element corresponding to the container node defines styles of the one or more border properties. If the DOM element corresponding to the container node does not defines styles of any of the one or more border properties, the processors can determine whether a child or descendent of the DOM element corresponding to the container node defines the styles of the border properties not defined by the DOM element corresponding to the container node. In this way, the processors can determine the styles of border properties even though the container node corresponding to the primary content does not define the styles of the border properties. In some implementations, the processors can similarly determine other border properties. In some implementations, if the processors desire to determine the style of a bottom border property, the processors may work backwards through the descendants of the container node starting with the last child of the post container, as it may be likely that the bottom border may be defined by a DOM element towards the end of the container node.
In some implementations, the processors can determine, from a DOM element corresponding to the DOM container, that the DOM element does not include a style property of a border. The processors can then identify, from a descendant of the DOM element, that the descendant of the DOM element contains the style property of the border. In some implementations, the DOM element can be a DOM container node that contains one of a post or an article corresponding to primary content of the information resource. The processors can then set the styles of the properties corresponding to the border of the descendant of the DOM element as the styles of properties of the border for the DOM element corresponding to the DOM container.
The processors can store, in a memory, the determined styles of properties corresponding to the respective DOM elements included in the DOM container (BLOCK 520). In some implementations, the processors can store the styles of properties of the DOM elements corresponding to primary content in a data structure. In some implementations, the processors can associate the styles of properties of the DOM elements corresponding to primary content with an identifier identifying the information resource that includes the primary content. In some implementations, multiple information resources can be associated with the determined styles of properties responsive to determining that the styles of properties of the DOM elements of the primary content in each of the multiple information resources match one another. In some implementations, multiple web pages of the same web site may be grouped together if they contain primary content that is presented in a similar manner.
In some implementations, the processors can generate an identifier corresponding to the styles of properties of the various DOM elements of the primary content of an information resource. This identifier can include tagNames and ClassNames that may be used to modify content that is to be inserted in the information resource at a later time.
In some implementations, the processors can identify locations in the DOM tree in which to insert DOM elements corresponding to native ads. In some implementations, the processors can insert the DOM elements corresponding to native ads adjacent to DOM elements corresponding to posts or articles, such that the native ads have the same look and feel as posts or articles that form the primary content of the information resource. In some implementations, the processors can generate markers identifying locations in which to insert native ads. The processors can then store these markers along with the styles of properties determined by the processors. In some implementations, the processors can generate a DOM node corresponding to a native content item that can be updated and inserted into an appropriate location within the DOM tree of the information resource such that when the information resource is rendered, the content item is displayed as a native content item along with primary content of the information resource. In some implementations, the processors can store these generated DOM nodes that include properties having styles that match the styles of properties of certain DOM elements of the primary content determined by the processors.
In some implementations, the processors can create or generate a CSS styling profile for the information resource that includes the DOM elements corresponding to the primary content and styles of properties associated with the DOM elements. The processors can store the generated CSS styling profile in the memory such that when a request to convert a third-party content item to a native ad or native content item, the conversion can occur without requiring any input from the content publisher of the information resource.
The processors can use the stored styles of properties to modify third-party content to be inserted within the information resource (BLOCK 525). In some implementations, the processors can identify a third-party content item to serve at the information resource. In some implementations, the third-party content item is selected from a plurality of third-party content items. In some implementations, the third-party content item is selected responsive to an auction for selecting content to display on the information resource. The processors can identify, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource corresponding to primary content. The processors can generate, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item. The DOM elements may define styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource. The processors may then insert the DOM node in a DOM tree of the information resource and provide the DOM tree of the information resource including the DOM node corresponding to the third-party content item to a computing device on which to render the information resource including the generated third-party content item.
In some implementations, the processors can modify third-party content items into native content items that match the look and feel of an information resource for which the processors previously determined the styles of properties of DOM elements corresponding to primary content. The processors can identify a third-party content item to serve on the information resource. In some implementations, the processors can identify the third-party content item by receiving the third-party content item from an advertising auction system. In some implementations, the processors can identify the third-party content item responsive to receiving a request to include the third-party content item on the information resource. For instance, the request can be a request to include an article or post previously displayed on another information resource on the information resource. To maintain the look and feel of the information resource, the article or post may be modified into a native content item before being included in the information resource.
The processors can identify the information resource on which to include the identified third-party content item. The processors can use an identifier of the information resource to perform a lookup in the memory to retrieve the styles of properties of DOM elements of the primary content of the information resource previously determined by the processors.
In some implementations, the processors can retrieve the CSS styling profile of the information resource or some other information that the processors can use to modify the identified third-party content item into a native content item for the information resource on which to serve the third-party content item. In some implementations, the processors can identify the DOM elements of the primary content that may be used to modify the corresponding elements of the third-party content item. In some implementations, the CSS styling profile can identify the DOM elements of the primary content to use for modifying third-party content item. In some implementations, the CSS styling profile can include a DOM element corresponding to a link within a header of an article or post, a DOM element corresponding to text within a body portion of the article or post, and a DOM element corresponding to a link within the body portion of the article or post.
In some implementations, the processors can generate a native ad from a text ad corresponding to a third-party content publisher. In some implementations, the processors can identify the header of the text ad and extract the text and link of the header of the text ad to generate a DOM element corresponding to a header portion of the native ad. In this way, when the native ad is rendered on the information resource, the header of the native ad includes the text of the header of the text ad and a link of the header of the native ad is directed to the same landing page as the link of the header of the text ad. Similarly, the processors can identify the text portion of the text ad and extract the text portion to insert in a corresponding text portion of the native ad. The DOM element of the text portion of the native ad, however, will have the styles of properties of the DOM element of the text portion of the primary content of the information resource. Moreover, the processors can identify the website address portion of the text ad and extract the website address to insert in text portion of the native ad. The DOM element of the portion of the native ad containing the website address, however, will have the styles of properties of the DOM element of a link that may appear in the text portion of the primary content of the information resource.
Once the processors generate the native content item from the identified third-party content item, the processors can insert the native content item in the information resource prior to rendering the information resource to an end user computing device. In some implementations, the processors can modify the DOM tree of the information resource to include a DOM node including a plurality of DOM elements that form the native content item. As described herein, the processors can determine a location in the DOM tree to insert the DOM node corresponding to the native content item. In some implementations, the DOM node can be inserted in the DOM tree such that the native content item is rendered below the first post or article is rendered on the information resource.
In some implementations, the processors can inject a DOM node or element corresponding to the native content item onto the information resource. In some implementations, the native content item can be served using a DOM element styling function.
In the computer system 600 of FIG. 6 , the memory 625 may comprise any computer-readable storage media, and may store computer instructions such as processor-executable instructions for implementing the various functionalities described herein for respective systems, as well as any data relating thereto, generated thereby, or received via the communications interface(s) or input device(s) (if present). Referring again to the system 100 of FIG. 1 , the data processing system 110 can include the memory 625 to store information related to identifying primary content on an information resource, one or more stable identifiers, one or more styles of properties of DOM elements of primary content of an information resource and one or more native content items served for display. The memory 625 can include the database 140. The processor(s) 620 shown in FIG. 6 may be used to execute instructions stored in the memory 625 and, in so doing, also may read from or write to the memory various information processed and or generated pursuant to execution of the instructions.
The processor 620 of the computer system 600 shown in FIG. 6 also may be communicatively coupled to or control the communications interface(s) 605 to transmit or receive various information pursuant to execution of instructions. For example, the communications interface(s) 605 may be coupled to a wired or wireless network, bus, or other communication means and may therefore allow the computer system 600 to transmit information to or receive information from other devices (e.g., other computer systems). While not shown explicitly in the system of FIG. 1 , one or more communications interfaces facilitate information flow between the components of the system 100. In some implementations, the communications interface(s) may be configured (e.g., via various hardware components or software components) to provide a website as an access portal to at least some aspects of the computer system 600. Examples of communications interfaces 605 include user interfaces (e.g., web pages), through which the user can communicate with the data processing system 110.
The output devices 610 of the computer system 600 shown in FIG. 6 may be provided, for example, to allow various information to be viewed or otherwise perceived in connection with execution of the instructions. The input device(s) 615 may be provided, for example, to allow a user to make manual adjustments, make selections, enter data, or interact in any of a variety of manners with the processor during execution of the instructions. Additional information relating to a general computer system architecture that may be employed for various systems discussed herein is provided further herein.
Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software embodied on a tangible medium, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on computer storage medium for execution by, or to control the operation of, data processing apparatus. The program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Moreover, while a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal. The computer storage medium can also be, or be included in, one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The features disclosed herein may be implemented on a smart television module (or connected television module, hybrid television module, etc.), which may include a processing module configured to integrate internet connectivity with more traditional television programming sources (e.g., received via cable, satellite, over-the-air, or other signals). The smart television module may be physically incorporated into a television set or may include a separate device such as a set-top box, Blu-ray or other digital media player, game console, hotel television system, and other companion device. A smart television module may be configured to allow viewers to search and find videos, movies, photos and other content on the web, on a local cable TV channel, on a satellite TV channel, or stored on a local hard drive. A set-top box (STB) or set-top unit (STU) may include an information appliance device that may contain a tuner and connect to a television set and an external source of signal, turning the signal into content which is then displayed on the television screen or other display device. A smart television module may be configured to provide a home screen or top level screen including icons for a plurality of different applications, such as a web browser and a plurality of streaming media services, a connected cable or satellite media source, other web “channels”, etc. The smart television module may further be configured to provide an electronic programming guide to the user. A companion application to the smart television module may be operable on a mobile computing device to provide additional information about available programs to a user, to allow the user to control the smart television module, etc. In alternate implementations, the features may be implemented on a laptop computer or other personal computer, a smartphone, other mobile phone, handheld computer, a tablet PC, or other computing device.
The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The terms “data processing apparatus”, “data processing system”, “user device” or “computing device” encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures. The primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can include or share one or more data processing apparatus, computing devices, or processors.
A computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), for example. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), plasma, or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system such as system 600 or system 100 can include clients and servers. For example, the data processing system 110 can include one or more servers in one or more data centers or server farms. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, a server transmits data (e.g., an HTML page) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any inventions or of what may be claimed, but rather as descriptions of features specific to particular implementations of the systems and methods described herein. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results.
In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products. For example, the primary content detection module 130, the stable identifier generation module 132, the content insertion module 134, the style property detection module 136 and the third-party content modification module 138 can be part of the data processing system 110, a single module, a logic device having one or more processing modules, one or more servers, or part of a search engine.
Having now described some illustrative implementations and implementations, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed only in connection with one implementation are not intended to be excluded from a similar role in other implementations or implementations.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of “including” “comprising” “having” “containing” “involving” “characterized by” “characterized in that” and variations thereof herein, is meant to encompass the items listed thereafter, equivalents thereof, and additional items, as well as alternate implementations consisting of the items listed thereafter exclusively. In one implementation, the systems and methods described herein consist of one, each combination of more than one, or all of the described elements, acts, or components.
Any references to implementations or elements or acts of the systems and methods herein referred to in the singular may also embrace implementations including a plurality of these elements, and any references in plural to any implementation or element or act herein may also embrace implementations including only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, their components, acts, or elements to single or plural configurations. References to any act or element being based on any information, act or element may include implementations where the act or element is based at least in part on any information, act, or element.
Any implementation disclosed herein may be combined with any other implementation, and references to “an implementation,” “some implementations,” “an alternate implementation,” “various implementation,” “one implementation” or the like are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the implementation may be included in at least one implementation. Such terms as used herein are not necessarily all referring to the same implementation. Any implementation may be combined with any other implementation, inclusively or exclusively, in any manner consistent with the aspects and implementations disclosed herein.
References to “or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms.
Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included for the sole purpose of increasing the intelligibility of the drawings, detailed description, and claims. Accordingly, neither the reference signs nor their absence have any limiting effect on the scope of any claim elements.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. Although the examples provided herein relate to an advertising program, the systems and methods described herein can be applied to any information resource. The foregoing implementations are illustrative rather than limiting of the described systems and methods. Scope of the systems and methods described herein is thus indicated by the appended claims, rather than the foregoing description, and changes that come within the meaning and range of equivalency of the claims are embraced therein.
Claims (20)
1. A method of automatically detecting styles of properties of document object model (DOM) elements of an information resource, comprising:
identifying, by one or more processors, an information resource for which to automatically detect styles of properties used to style primary content of the information resource;
identifying, by the one or more processors, at least one Document Object Model (DOM) container that contains at least a portion of the primary content;
for each of one or more DOM elements included in the DOM container, having at least one descendant and having at least one undefined style of property:
identifying, by the one or more processors, a descendant of said DOM element having a defined style of property for an undefined style of property of said DOM element, and
setting, by the one or more processors, the undefined style of property of said DOM element to the defined style of property of the descendant;
storing, in a memory, the styles of properties of the modified one or more DOM elements included in the DOM container; and
using the stored styles of properties to modify third-party content to be inserted within the information resource.
2. The method of claim 1 , wherein identifying the information resource for which to automatically detect styles of properties includes:
identifying, from a log, a plurality of information resources on which third-party content was served; and
selecting, from the identified information resources, the information resource for which to automatically detect the style.
3. The method of claim 1 , further comprises identifying the one or more DOM elements included in the DOM container, the one or more DOM elements including a header element, a paragraph element, and a link element.
4. The method of claim 1 , further comprises:
determining, from the DOM element corresponding to a header element of the primary content, whether the header element includes a link;
responsive to determining that the header element does not include a link, inserting a link in the header element;
determining styles of properties associated with the header element in which the link is inserted; and
storing the determined style property associated with the header element in which the link is inserted in the memory.
5. The method of claim 1 , further comprising:
identifying the one or more DOM elements included in the DOM container;
determining, for each of the one or more identified DOM elements, a type of DOM element;
determining, based on the type of DOM element, styles of properties of the DOM element.
6. The method of claim 5 , wherein the styles of properties include at least one of a font-family, font-size, font-weight, color, text-align, text-decoration, or line-height.
7. The method of claim 1 , wherein identifying the descendant of the respective DOM element further comprise identifying the descendant of the respective DOM element defining the styles of properties of the border not defined by the respective DOM element; and
wherein setting the styles of properties of the identified descendant further comprises setting the styles of properties of the border of the descendant of the DOM element as the styles of properties of the border for the DOM element corresponding to the DOM container.
8. The method of claim 1 , wherein using the stored styles of properties to modify third-party content to be inserted within the information resource includes:
identifying, by the one or more processors, a third-party content item to serve at the information resource;
identifying, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource;
generating, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item, the DOM elements including styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource;
inserting the DOM node in a DOM tree of the information resource; and
providing, to a computing device on which to render the information resource including the generated third-party content item, the DOM tree of the information resource including the DOM node corresponding to the third-party content item.
9. A system for automatically detecting styles of properties of document object model (DOM) elements of an information resource, comprising a data processing system including one or more processors configured to:
identify an information resource for which to automatically detect styles of properties used to style primary content of the information resource;
identify at least one Document Object Model (DOM) container that contains at least a portion of the primary content;
for each of one or more DOM elements included in the DOM container having at least one descendant and having at least one undefined style of property:
identify a descendant of said DOM element having a defined style of property for the undefined style of property of said DOM element, and
set the undefined style of property of said DOM element to the defined style of property of the descendant;
store, in a memory, the styles of properties of the modified one or more DOM elements included in the DOM container; and
use the stored styles of properties to modify third-party content to be inserted within the information resource.
10. The system of claim 9 , wherein to identify the information resource for which to automatically detect styles of properties, the processors are further configured to:
identify, from a log, a plurality of information resources on which third-party content was served; and
select, from the identified information resources, the information resource for which to automatically detect the style.
11. The method of claim 1 , wherein the processors are further configured to identify the one or more DOM elements included in the DOM container, the one or more DOM elements including a header element, a paragraph element, and a link element.
12. The system of claim 9 , wherein the processors are further configured to:
determine, from the DOM element corresponding to a header element of the primary content, whether the header element includes a link;
responsive to determining that the header element does not include a link, insert a link in the header element;
determine styles of properties associated with the header element in which the link is inserted; and
store the determined style property associated with the header element in which the link is inserted in the memory.
13. The system of claim 9 , wherein the processors are further configured to:
identify the one or more DOM elements included in the DOM container;
determine, for each of the one or more identified DOM elements, a type of DOM element;
determine, based on the type of DOM element, styles of properties of the DOM element.
14. The system of claim 13 , wherein the styles of properties include at least one of a font-family, font-size, font-weight, color, text-align, text-decoration, or line-height.
15. The system of claim 9 , wherein the styles of properties of the identified descendant of the respective DOM element comprise the styles of properties of a boarder.
16. The system of claim 9 , wherein to use the stored styles of properties to modify third-party content to be inserted within the information resource, the processors are further configured to:
identify a third-party content item to serve at the information resource;
identify, from an identifier of the information resource, the stored styles of properties of the DOM elements included in the DOM container of the information resource;
generate, from the third-party content item, a DOM node including a plurality of DOM elements that represent the content of the third-party content item, the DOM elements including styles of properties that match the identified styles of properties of corresponding DOM elements included in the DOM container of the information resource;
insert the DOM node in a DOM tree of the information resource; and
provide, to a computing device on which to render the information resource including the generated third-party content item, the DOM tree of the information resource including the DOM node corresponding to the third-party content item.
17. A non-transitory computer-readable storage medium having computer-executable instructions stored thereon, which when executed by one or more processors, cause the one or more processors to perform operations comprising:
identifying an information resource for which to automatically detect styles of properties used to style primary content of the information resource;
identifying at least one Document Object Model (DOM) container that contains at least a portion of the primary content;
for each of one or more DOM elements included in the DOM container having at least one descendant and having at least one undefined style of property:
identifying a descendant of said DOM element having a defined style of property for an undefined style of property of said DOM element, and
setting the undefined style of property of said DOM element to the defined style of property of the descendant;
storing, in a memory, the styles of properties of the modified one or more elements included in the DOM container; and
using the stored styles of properties to modify third-party content to be inserted within the information resource.
18. The non-transitory computer-readable storage medium of claim 17 , wherein identifying the information resource for which to automatically detect styles of properties includes:
identifying, from a log, a plurality of information resources on which third-party content was served; and
selecting, from the identified information resources, the information resource for which to automatically detect the style.
19. The non-transitory computer-readable storage medium of claim 17 , further comprises identifying the one or more DOM elements included in the DOM container, the one or more DOM elements including a header element, a paragraph element, and a link element.
20. The non-transitory computer-readable storage medium of claim 17 , further comprises:
determining, from the DOM container, a header element that includes a link;
responsive to determining that the DOM container does not include a header element that includes a link, identifying, from the DOM container, a header element;
inserting a link in the header element;
determining styles of properties associated with the header element in which the link is inserted; and
storing the determined style property associated with the header element in which the link is inserted in the memory.
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/480,089 US10050849B1 (en) | 2014-08-07 | 2014-09-08 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
US16/101,079 US10536354B1 (en) | 2014-08-07 | 2018-08-10 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
US16/736,562 US11017154B2 (en) | 2014-08-07 | 2020-01-07 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201462034364P | 2014-08-07 | 2014-08-07 | |
US14/480,089 US10050849B1 (en) | 2014-08-07 | 2014-09-08 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/101,079 Continuation US10536354B1 (en) | 2014-08-07 | 2018-08-10 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
Publications (1)
Publication Number | Publication Date |
---|---|
US10050849B1 true US10050849B1 (en) | 2018-08-14 |
Family
ID=63079161
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/480,089 Active 2036-09-16 US10050849B1 (en) | 2014-08-07 | 2014-09-08 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
US16/101,079 Active US10536354B1 (en) | 2014-08-07 | 2018-08-10 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
US16/736,562 Active US11017154B2 (en) | 2014-08-07 | 2020-01-07 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/101,079 Active US10536354B1 (en) | 2014-08-07 | 2018-08-10 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
US16/736,562 Active US11017154B2 (en) | 2014-08-07 | 2020-01-07 | Methods and systems for identifying styles of properties of document object model elements of an information resource |
Country Status (1)
Country | Link |
---|---|
US (3) | US10050849B1 (en) |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10685178B2 (en) * | 2018-03-26 | 2020-06-16 | Adobe Inc. | Defining and delivering personalized entity recommendations |
US20220050880A1 (en) * | 2017-09-22 | 2022-02-17 | State Farm Mutual Automobile Insurance Company | Systems and methods for visualizing posting data and facilitating posting communications |
US11361048B2 (en) * | 2019-05-17 | 2022-06-14 | Google Llc | Conditional interpretation of a single style definition identifier on a resource |
US20230045426A1 (en) * | 2021-08-05 | 2023-02-09 | Yaar Inc. | Instruction interpretation for web task automation |
US11822872B2 (en) * | 2015-05-08 | 2023-11-21 | Citrix Systems, Inc. | Rendering based on a document object model |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080140626A1 (en) * | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US8165915B1 (en) * | 2008-07-23 | 2012-04-24 | Google Inc. | Advertisement customization |
US20140101539A1 (en) * | 2011-08-26 | 2014-04-10 | Tencent Technology (Shenzhen) Company Limited | Website presenting method and browser |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20120110437A1 (en) * | 2010-10-28 | 2012-05-03 | Microsoft Corporation | Style and layout caching of web content |
US9026904B2 (en) * | 2012-03-14 | 2015-05-05 | International Business Machines Corporation | Automatic modification of cascading style sheets for isolation and coexistence |
US9244900B2 (en) * | 2012-08-08 | 2016-01-26 | AutoVitals, Inc. | Template based website development and management |
US20140229296A1 (en) * | 2013-02-12 | 2014-08-14 | Google Inc. | System and method for extracting style information from web pages and generating advertisements |
-
2014
- 2014-09-08 US US14/480,089 patent/US10050849B1/en active Active
-
2018
- 2018-08-10 US US16/101,079 patent/US10536354B1/en active Active
-
2020
- 2020-01-07 US US16/736,562 patent/US11017154B2/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080140626A1 (en) * | 2004-04-15 | 2008-06-12 | Jeffery Wilson | Method for enabling dynamic websites to be indexed within search engines |
US8165915B1 (en) * | 2008-07-23 | 2012-04-24 | Google Inc. | Advertisement customization |
US8374935B1 (en) | 2008-07-23 | 2013-02-12 | Google Inc. | Advertisement customization |
US8650107B1 (en) | 2008-07-23 | 2014-02-11 | Google Inc. | Advertisement customization |
US20140101539A1 (en) * | 2011-08-26 | 2014-04-10 | Tencent Technology (Shenzhen) Company Limited | Website presenting method and browser |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11822872B2 (en) * | 2015-05-08 | 2023-11-21 | Citrix Systems, Inc. | Rendering based on a document object model |
US20220050880A1 (en) * | 2017-09-22 | 2022-02-17 | State Farm Mutual Automobile Insurance Company | Systems and methods for visualizing posting data and facilitating posting communications |
US10685178B2 (en) * | 2018-03-26 | 2020-06-16 | Adobe Inc. | Defining and delivering personalized entity recommendations |
US11361048B2 (en) * | 2019-05-17 | 2022-06-14 | Google Llc | Conditional interpretation of a single style definition identifier on a resource |
US20230045426A1 (en) * | 2021-08-05 | 2023-02-09 | Yaar Inc. | Instruction interpretation for web task automation |
Also Published As
Publication number | Publication date |
---|---|
US20200143106A1 (en) | 2020-05-07 |
US11017154B2 (en) | 2021-05-25 |
US10536354B1 (en) | 2020-01-14 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10235349B2 (en) | Systems and methods for automated content generation | |
US11017154B2 (en) | Methods and systems for identifying styles of properties of document object model elements of an information resource | |
US10354294B2 (en) | Methods and systems for providing third-party content on a web page | |
US10838609B2 (en) | Systems and methods for dynamically appending supplemental content to an information resource responsive to scroll activity | |
US9767169B1 (en) | Enhancing search results for improved readability | |
US9535887B2 (en) | Creation of a content display area on a web page | |
US20210133823A1 (en) | Systems and methods for automatically managing placement of content slots in an information resource | |
US10585576B2 (en) | Systems and methods for attributing a scroll event in an infinite scroll graphical user interface | |
US10430840B2 (en) | Systems and methods for creating an interstitial ad experience within a scrolling content frame | |
US20140033228A1 (en) | Configuring content display dimensions | |
US11947377B2 (en) | Systems and methods for dynamically restricting the rendering of unauthorized content included in information resources | |
US9665617B1 (en) | Methods and systems for generating a stable identifier for nodes likely including primary content within an information resource | |
US10049170B1 (en) | Methods and systems for selectively preventing third-party content from being displayed using undefined publisher identifier |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |