WO2018212822A1 - Suggested actions for images - Google Patents
Suggested actions for images Download PDFInfo
- Publication number
- WO2018212822A1 WO2018212822A1 PCT/US2018/021028 US2018021028W WO2018212822A1 WO 2018212822 A1 WO2018212822 A1 WO 2018212822A1 US 2018021028 W US2018021028 W US 2018021028W WO 2018212822 A1 WO2018212822 A1 WO 2018212822A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- image
- images
- implementations
- user
- user interface
- Prior art date
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/01—Input arrangements or combined input and output arrangements for interaction between user and computer
- G06F3/048—Interaction techniques based on graphical user interfaces [GUI]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/51—Indexing; Data structures therefor; Storage structures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
- G06F16/5838—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content using colour
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
- G06F16/5846—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content using extracted text
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/044—Recurrent networks, e.g. Hopfield networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/20—Scenes; Scene-specific elements in augmented reality scenes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/30—Scenes; Scene-specific elements in albums, collections or shared content, e.g. social network photos or video
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/35—Categorising the entire scene, e.g. birthday party or wedding scene
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/70—Labelling scene content, e.g. deriving syntactic or semantic representations
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/40—Document-oriented image-based pattern recognition
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/40—Document-oriented image-based pattern recognition
- G06V30/41—Analysis of document content
- G06V30/413—Classification of content, e.g. text, photographs or tables
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/54—Browsing; Visualisation therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/50—Information retrieval; Database structures therefor; File system structures therefor of still image data
- G06F16/58—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually
- G06F16/583—Retrieval characterised by using metadata, e.g. metadata not derived from the content or metadata generated manually using metadata automatically derived from the content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
- G06N20/10—Machine learning using kernel methods, e.g. support vector machines [SVM]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N7/00—Computing arrangements based on specific mathematical models
- G06N7/01—Probabilistic graphical models, e.g. probabilistic networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/10—Image acquisition
Definitions
- Implementations of the present application relate to techniques to analyze an image provide suggested actions, and execute a command based on user input indicative of selection of a particular action.
- a computer-implemented method includes obtaining an image, programmatically analyzing the image to determine one or more suggested actions for the image, and causing a user interface to be displayed.
- the user interface includes the image, a plurality of first user interface elements each corresponding to a respective default action of one or more default actions, and one or more second user interface elements each corresponding to a respective suggested action of the one or more suggested actions.
- the method includes receiving user input indicative of selection of a particular action from one of: the one or more default actions or the one or more suggested actions. In response to receiving the user input, the method causes a command for the particular action to be executed.
- programmatically analyzing the image includes applying a classifier to the image to determine one or more categories for the image. The one or more categories may be associated with at least one of the one or more suggested actions.
- programmatically analyzing the image includes sending a representation of the image to a server; and receiving a response from the server that includes at least one of the one or more suggested actions.
- sending the representation to the server includes sending an image thumbnail that has a smaller data size than the image.
- programmatically analyzing the image comprises determining a parameter for the command based on mage data that includes values of a plurality of pixels of the image and/ or image metadata.
- the command is associated with a software application.
- causing the command to be executed includes invoking the software application with the parameter.
- obtaining the image comprises detecting that the image has been captured based on detecting activation of a camera and/or receiving a notification from an operating system that the image has been written to a local memory.
- the method further includes generating the user interface within a threshold time after detecting that the image has been captured.
- the user interface is generated by an application different from a camera application that captured the image.
- the user interface is displayed over a camera user interface of a camera application.
- the one or more default actions include sharing the image, archiving the image, and performing a visual search based on the image.
- programmatically analyzing the image includes identifying at least two distinct portions of the image.
- the suggested actions include at least two actions that are each associated with a respective portion of the at least two distinct portions.
- a computer-implemented method includes obtaining an image and programmatically analyzing the image to determine a plurality of image features. The method further includes determining a category for the image based on the plurality of image features. In some implementations, the category is associated with an action. In some implementations, the method includes causing the action to be performed. The method further includes causing a user interface to be displayed. The user interface includes the image and an indication that the action was performed.
- the method includes to cause the user interface to be displayed includes highlighting a portion of the image. The highlighted portion of the image corresponds to the category.
- the method includes storing the image and the category such that the image is included in an image group for the category.
- the method determines the category by applying an image classifier trained to identify the category for the image from a plurality of categories.
- applying the image classifier includes generating a confidence score for the image for each of the plurality of categories and identifying the category based on determination that the confidence score for the category meets a confidence threshold.
- determining the category comprises determining that the image includes contact information. In these implementations, the method further includes extracting one or more of an e-mail address, a phone number, a physical address, and/or a social media address from the image, wherein the action is to add a contact in an address book based on the extracting. In some implementations, determining the category comprises determining that the image includes a media item. In these implementations, the action includes adding the media item to a wishlist, adding the media item to a playlist, or purchasing the media item. [0011] In some implementations, a computer-implemented method includes obtaining a plurality of images and programmatically analyzing the plurality of images to determine a plurality of image features.
- the method includes determining one or more image categories for the plurality of images based on the plurality of image features.
- the method includes identifying a subset of the plurality of images based on the one or more image categories. Each image in the subset of the plurality of images is associated with an image category for archival.
- the method further includes causing a user interface to be displayed that includes one or more images of the subset, receiving first user input to archive at least one of the one or more images of the subset; and in response to the first user input, removing the at least one of the one or more images of the subset from a view of the plurality of images.
- the method includes updating metadata of each image in the subset with respective one or more image categories for the image.
- the method includes storing image identifiers and the one or more image categories for the plurality of images in a database, receiving second user input indicative of selection of a particular category of the one or more image categories and in response to receiving the second user input, performing a database lookup to identify one or more images for the particular category based on the image identifiers and the one or more image categories, and causing the one or more images for the particular category to be displayed.
- the image category for archival includes one or more of document, meme, and/or screenshot.
- determining the one or more image categories includes applying an image classifier trained to classify input images as a document, meme, and/or screenshot.
- the input images are classified based on metadata of the input images and/or pixel values of the input images.
- a system comprises one more hardware processors and a storage device, configured to perform operations comprising a method according to any implementation or aspect described herein.
- a computer-readable storage medium (which may be non- transitory computer-readable storage medium) stores instructions that, when executed by a processor, cause the processor to perform operations comprising a method according to any implementation or aspect described herein.
- FIG. 1 is a block diagram of an example network environment which may be used for one or more implementations described herein;
- FIG. 2 is a flow diagram illustrating an example method to analyze an image, according to some implementations
- Fig. 3 is a flow diagram illustrating an example method to display suggested actions and execute commands, according to some implementations
- FIG. 4 is a flow diagram illustrating an example method to select and execute an application based on an image, according to some implementations
- Fig. 5A is a diagrammatic illustration of an example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
- Fig. 5B is a diagrammatic illustration of another example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
- Fig. 5C is a diagrammatic illustration of another example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
- Fig. 6 is a diagrammatic illustration of an example user interface that includes an image and an indication that than an action was performed, according to some implementations;
- Fig. 7 is a flow diagram illustrating an example method to archive images, according to some implementations.
- FIG. 8A is a diagrammatic illustration of an example user interface, according to some implementations.
- Fig. 8B is a diagrammatic illustration of another example user interface, according to some implementations;
- Fig. 8C is a diagrammatic illustration of another example user interface, according to some implementations.
- Fig. 9 is a block diagram of an example device which may be used for one or more implementations described herein.
- a technical problem in image management is to recognize image content and determine user intent to capture or store an image. For example, if a user takes images of documents, a user intent may be to store the image in an archive, e.g., that is accessible even when the user no longer possesses an original document. In another example, if a user takes images of media items, e.g., books or media covers, a user intent may be for the image to serve as a reminder to read the book, or view the media, etc. In another example, if a user takes a picture of a handwritten note, or a whiteboard, a user intent may be to add text content from the picture to a to-do list or a notes application.
- an archive e.g., that is accessible even when the user no longer possesses an original document.
- media items e.g., books or media covers
- a user intent may be for the image to serve as a reminder to read the book, or view the media, etc.
- a user intent may be to add
- a user may no longer want to access the image once it has been viewed.
- users capture or otherwise obtain images as an alternative to manual input, e.g., manually typing a title of a book into a wishlist, adding a reminder, etc.
- One or more implementations described herein include applying an image classifier to determine image features, image categories, and suggested actions for an image.
- the image classifier may be implemented such that it can recognize image categories for any input image.
- the image classifier may be a machine-learning application that implements a trained model and an inference engine. The trained model enables the inference engine to recognize features from any input image and determine one or more image categories.
- a suggestion application may be implemented that determines one or more actions based on analysis of the image, e.g., by the image classifier.
- the suggestion application may be configured to store a mapping between image categories and one or more applications for an action determined based on the image categories.
- the suggestion application is configured to determine an available software application (e.g., locally on a user device, a server application, etc.) that can execute a command corresponding to the determined intent.
- image analysis may also include determining one or more parameters (e.g., text extracted from the image, an identifier of an object or landmark depicted in the image, etc.) that may be used to invoke the software applications. In that manner, the task of determining the applications and the one or more parameters is automated such that the user is freed from this task and so that user interaction and invocation of an application with respective parameters can occur more quickly.
- One or more implementations aid users to manage image collections, e.g., collections of photos, videos, etc.
- Implementations provided herein assist users to manage image collections, enable use of images as input, e.g., as actionable objects, and automate tasks.
- the implementations provide benefits by automatically recognizing image content, facilitating input of data to a computing device by reducing requirements of manual data entry, and reducing cognitive burden in managing large image collections.
- one or more images are obtained by a computing device e.g., photos or videos captured using a smartphone camera application, received via a messaging application, etc.
- Obtained images are programmatically analyzed to determine image features and to determine one or more image categories for the image, e.g., document, receipt, business card, book cover, etc.
- programmatically analyzing the image may include applying an image classifier (e.g., a machine-learning classifier) that is configured to determine such categories.
- a confidence score is generated for the determined image categories, e.g., by the image classifier.
- optical character recognition including machine-learning based OCR techniques (e.g., using LSTM nodes) are applied to recognize portions of the image, e.g., as text, barcode, quick response (QR) code, etc.
- images may be recognized as including actionable objects.
- one or more suggested actions e.g., call a phone number extracted from the image, buy a product depicted in the image using a shopping application, open a website with information about a landmark recognized in the image, etc. are provided in a user interface.
- parameters for the suggested action are determined based on the image, e.g., a book title, an object or a landmark in the image, etc.
- User interfaces are provided which enable users to select one or more of the suggested actions.
- an application e.g., a software application on a client device
- a command is executed with the one or more determined parameters.
- a dialer application is invoked to place a call to the phone number.
- one or more actions may be determined based on image categories for an image. Based on user preferences, the one or more actions may be performed automatically and an indication that the action was performed may be provided in a user interface.
- the actions may include archiving the image such that the image is not included in a view (e.g., a chronological view) of images, storing data recognized from the image, e.g., adding a contact to an address book based on information from an image of a business card, invoking an application to perform a task based on the image, e.g., to add a book to a wishlist, etc.
- archiving the image may remove it from a chronological view of images.
- archiving the image can remove that image from a set of images that are displayed and/or displayable (and/or eligible to be displayed) in a view of a graphical user interface.
- These implementations may provide a user benefit of reducing clutter by removing images that are associated with image categories, e.g., duplicate images, images of documents, memes, etc. and enable the user to focus on images that are likely of interest.
- These implementations may provide technical advantages of reducing the consumption of device resources (e.g., display memory or other memory/storage, processor operations, power consumption, etc.) utilized to display images that would be removed from display when using one or more disclosed techniques.
- Additional features include providing a user interface within a threshold time upon capture of an image.
- the user interface enables a user to select from one or more default actions and/or one or more suggested actions, or provides indications of actions performed based on the captured image.
- the user interface may be generated by an application separate from a camera application that was used to capture the image.
- the user interface may be provided at a time after the image capture, e.g., when a user reviews images using an image management application such as an image gallery.
- implementations may provide technical advantages of reducing the consumption of device resources (e.g., memory or other storage, processor operations, power consumption, etc.) utilized for management of images and determination/reception of user input on a device, e.g., by offering relevant and useful actions and suggestions for selection, without the user having to browse images, call up interface menus and provide input to such menus, and/or initiate other involved device operations that consume device resources.
- device resources e.g., memory or other storage, processor operations, power consumption, etc.
- Fig. 1 illustrates a block diagram of an example network environment 100, which may be used in some implementations described herein.
- network environment 100 includes one or more server systems, e.g., server system 102 and second server system 140 in the example of Fig. 1.
- Server systems 102 and 140 can communicate with a network 130, for example.
- Server system 102 can include a server device 104 and a database 106 or other storage device.
- server device 104 may provide an image classifier 156b and/or a suggestion application 158b.
- Second server system 140 can include a second server device 142, configured to provide one or more applications, e.g., application A 144, application B 146, and application C 148.
- Network environment 100 also can include one or more client devices, e.g., client devices 120, 122, 124, and 126, which may communicate with each other and/or with server system 102 and/or second server system 140 via network 130.
- Network 130 can be any type of communication network, including one or more of the Internet, local area networks (LAN), wireless networks, switch or hub connections, etc.
- network 130 can include peer-to-peer communication between devices, e.g., using peer-to-peer wireless protocols (e.g., Bluetooth®, Wi-Fi Direct, etc.), etc.
- peer-to-peer communications between two client devices 120 and 122 is shown by arrow 132.
- Fig. 1 shows one block for server system 102, server device 104, database 106, second server system 140, and second server device 142, and shows four blocks for client devices 120, 122, 124, and 126.
- Server blocks 102, 104, 106, 140, and 142 may represent multiple systems, server devices, and network databases, and the blocks can be provided in different configurations than shown.
- server system 102 and/or second server system 140 can represent multiple server systems that can communicate with other server systems via the network 130.
- server system 102 and/or second server system 140 can include cloud hosting servers, for example.
- database 106 and/or other storage devices can be provided in server system block(s) that are separate from server device 104 and can communicate with server device 104 and other server systems via network 130.
- client devices there may be any number of client devices.
- Each client device can be any type of electronic device, e.g., desktop computer, laptop computer, portable or mobile device, cell phone, smart phone, tablet computer, television, TV set top box or entertainment device, wearable devices (e.g., display glasses or goggles, wristwatch, headset, armband, jewelry, etc.), personal digital assistant (PDA), media player, game device, etc.
- Some client devices may also have a local database similar to database 106 or other storage.
- network environment 100 may not have all of the components shown and/or may have other elements including other types of elements instead of, or in addition to, those described herein.
- end-users Ul, U2, U3, and U4 may communicate with server system 102 and/or each other using respective client devices 120, 122, 124, and 126.
- users Ul, U2, U3, and U4 may interact with each other via applications running on respective client devices and/or server system 102 or second server system 140, and/or via a network service, e.g., a social network service or other type of network service, implemented on server system 102 or second server system 140.
- a network service e.g., a social network service or other type of network service, implemented on server system 102 or second server system 140.
- respective client devices 120, 122, 124, and 126 may communicate data to and from one or more server systems (e.g., system 102, second server system 140).
- the server system 102 and/or second server system 140 may provide appropriate data to the client devices such that each client device can receive communicated content or shared content uploaded to the server system 102 or second server system 140 and/or network service.
- users U1-U4 can interact via audio or video conferencing, audio, video, or text chat, or other communication modes or applications.
- a network service implemented by server system 102 or second server system 140 can include a system allowing users to perform a variety of communications, form links and associations, upload and post shared content such as images, text, video, audio, and other types of content, and/or perform other functions.
- a client device can display received data such as content posts sent or streamed to the client device and originating from a different client device via a server and/or network service (or from the different client device directly), or originating from a server system and/or network service.
- client devices can communicate directly with each other, e.g., using peer-to-peer communications between client devices as described above.
- a "user" can include one or more programs or virtual entities, as well as persons that interface with the system or network.
- any of client devices 120, 122, 124, and/or 126 can provide one or more applications.
- client device 120 may provide camera application 152, image classifier 156a, suggestion application 158a, and one or more other applications 154.
- Client devices 122-126 may also provide similar applications.
- camera application 152 may provide a user of a respective client device (e.g., users U1-U4 with the ability to activate and utilize a camera (not shown) of client device 122 to capture an image and/or video.
- camera application 152 may be a software application that executes on client device 120.
- camera application 152 may provide a camera user interface.
- the camera user interface of camera application 152 may provide user Ul with an option to choose a particular camera on client device 120, e.g., if client device 120 has a plurality of cameras, e.g., a front camera and a back camera. Further, the camera user interface of camera application 152 may provide user Ul with the ability to control one or more settings of the chosen camera, e.g., an aperture, a shutter speed, a zoom level, etc. The camera user interface of camera application 152 may also provide user Ul with the ability to control an operational mode, e.g., a slow-motion mode, a single-image capture mode, a video capture mode, etc.
- an operational mode e.g., a slow-motion mode, a single-image capture mode, a video capture mode, etc.
- camera application 152 may provide users with options related to image settings (e.g., image resolution, image size, image orientation, image format such as raw, JPEG, etc.) and/or image effects (e.g., a lens blur effect, a panorama effect, etc.).
- image settings e.g., image resolution, image size, image orientation, image format such as raw, JPEG, etc.
- image effects e.g., a lens blur effect, a panorama effect, etc.
- camera application 152 may provide access to settings, operational modes, image processing effects, etc. via a user interface, e.g., displayed on client device 120.
- Images and/or video captured by a camera of client device 120 may be stored, e.g., in local storage of client device 120, and/or storage provided by server system 102 or second server system 140.
- client device 120 may include image classifier 156a.
- Image classifier 156a may be implemented using hardware and/or software of client device 120, as described with reference to Fig. 9.
- image classifier 156a may be a standalone image classifier, e.g., executed on any of client devices 120-124, or may work in conjunction with image classifier 156b provided on server system 102.
- Image classifier 156a and image classifier 156b may provide image analysis functions.
- client device 120 may also include suggestion application 158a.
- Suggestion application 158b may be implemented using hardware and/or software of client device 120.
- suggestion application 158a may be a standalone application, e.g., executed on any of client devices 120-124, or may work in conjunction with suggestion application 158b provided on server system 102.
- Suggestion application 158a and suggestion application 158b may provide one or more suggestions with reference to an image, e.g., an image captured by client device 120, an image stored on client device 120, an image accessed by client 120, e.g., over network 130, etc.
- client device 120 may include one or more other applications 154.
- other applications 154 may be applications that provide various types of functionality, e.g., calendar, address book, e-mail, web browser, shopping, transportation (e.g., taxi, train, airline reservations, etc.), entertainment (e.g., a music player, a video player, a gaming application, etc.), social networking (e.g., messaging or chat, audio/video calling, sharing images/ video, etc.) and so on.
- one or more of other applications 154 may be standalone applications that execute on client device 120.
- one or more of other applications 154 may access a server system, e.g., second server system 140, that provides data and/or functionality of applications 154.
- a server system e.g., second server system 140
- any of applications 144, 146, and 148, shown as being provided by second server system 140 may provide data and/or commands to one or more of other applications 154.
- server applications 144-148 may be standalone applications that are accessed by a client device, e.g., via a web-browser, or other client- side program.
- a user interface on a client device 120, 122, 124, and/or 126 can enable display of user content and other content, including images, video, data, and other content as well as communications, privacy settings, notifications, and other data.
- Such a user interface can be displayed using software on the client device, software on the server device, and/or a combination of client software and server software executing on server device 104 and/or second server device 142, e.g., application software or client software in communication with server system 102 and/or second server device 142.
- the user interface can be displayed by a display device of a client device or server device, e.g., a touchscreen or other display screen, projector, etc.
- application programs running on a server system can communicate with a client device to receive user input at the client device and to output data such as visual data, audio data, etc. at the client device.
- any of server system 102, second server system 140, and/or one or more client devices 120-126 can provide a communication application program.
- the communication program may allow a system (e.g., client device or server system) to provide options for communicating with other devices.
- the communication program can provide one or more associated user interfaces that are displayed on a display device associated with the server system or client device.
- the user interface may provide various options to a user to select communication modes, users or devices with which to communicate, etc.
- the communication program can provide an option to broadcast a content post to a broadcast area, and/or can output a notification indicating that a content post has been received by the device and the device is in the defined broadcast area for the post.
- the communication program can display or otherwise output transmitted content posts and received content posts, e.g., in any of a variety of formats.
- Other implementations of features described herein can use any type of system and/or service. For example, other networked services (e.g., connected to the Internet) can be used instead of or in addition to a social networking service. Any type of electronic device can make use of features described herein. Some implementations can provide one or more features described herein on one or more client or server devices disconnected from or intermittently connected to computer networks. In some examples, a client device including or connected to a display device can display content posts stored on storage devices local to the client device, e.g., received previously over communication networks.
- Fig. 2 is a flow diagram illustrating one example of a method 200 to analyze an image, according to some implementations.
- method 200 can be implemented, for example, on a server system 102 as shown in Fig. 1.
- some or all of the method 200 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s).
- the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage).
- processors digital processors or processing circuitry
- storage devices e.g., a database 106 or other storage.
- different components of one or more servers and/or clients can perform different blocks or other parts of the method 200.
- a first device is described as performing blocks of method 200.
- Some implementations can have one or more blocks of method 200 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
- the method 200 can be initiated automatically by a system.
- the implementing system is a first device.
- the method (or portions thereof) can be periodically performed, or performed based on one or more particular events or conditions, e.g., an application being initiated by a user, receiving one or more images that have been newly uploaded to or accessible by the system, a predetermined time period having expired since the last performance of method 200, and/or one or more other conditions occurring which can be specified in settings read by the method.
- such conditions can be specified by a user in stored custom preferences of the user.
- the first device can be a camera, cell phone, smartphone, tablet computer, wearable device, or other client device that can receive content input (e.g., image capture) by a user to the client device, and can perform the method 200.
- a client device or server device can receive one or more images uploaded from one or more users or received over a network connection, and can perform the method 200 for the one or more images.
- a client device can send an image to a server over a network, and the server can process the content using method 200. Some implementations can initiate method 200 based on user input.
- a user may, for example, have selected the initiation of the method 200 from a displayed user interface, e.g., application user interface or other user interface.
- method 200 may be implemented by a client device, e.g., in an image classifier 156a (local classifier) and a suggestion application 158a.
- method 200 may be implemented by a server device, e.g., in an image classifier 156b (local classifier) and a suggestion application 158b.
- An image as referred to herein can include a digital image having pixels with one or more pixel values (e.g., color values, brightness values, etc.).
- An image can be a still image (e.g., still photos, images with a single frame, etc.), a dynamic image (e.g., animations, animated GIFs, cinemagraphs where a portion of the image includes motion while other portions are static, etc.) and a video (e.g., a sequence of images or image frames that may include audio). While the remainder of this document refers to an image as a static image, it may be understood that the techniques described herein are applicable for dynamic images, video, etc.
- implementations described herein can be used with still images (e.g., a photograph, an emoji, or other image), videos, or dynamic images Text, as referred to herein, can include alphanumeric characters, emojis, symbols, or other characters.
- a coarse-grained classifier is applied to an image.
- coarse-grained classifier may be a component of image classifier 156a on a client device.
- Coarse-grained may refer to a relative level of classification in a semantic hierarchy that is organized into classes and subclasses.
- a semantic hierarchy may be animals- >mammals->bears->polar bear, where "animals" is a coarse-grained classification and "polar bear" is a fine-grained classification.
- the coarse-grained classifier may be implemented in a manner that it can perform image analysis to determine whether the image is suitable for a suggested action or automatic execution of a command.
- the coarsegrained classifier provides a binary determination, e.g., that an image is suitable for a suggested action or automatic execution of a command ("suitable"), or that the image is not suitable for either suggested action or automatic execution of a command ("not suitable").
- the coarse-grained classifier may be implemented using any suitable image analysis technique, e.g., machine- learning.
- an image analyzed by the coarse-grained classifier may be a photo of a scene, e.g., a crowd at a public place.
- the coarse-grained classifier may determine that the image is not suitable for a suggested action or automatic execution of an application.
- the coarse-grained classifier may be trained, e.g., using a training set of images that include both suitable and unsuitable images to classify an image as suitable or unsuitable.
- images suitable for a suggested action or automatic execution of an application may include images that include one or more of a human face, a media item (e.g., a book, a media cover such as vinyl/CD/DVD cover), a building, one more natural features (e.g., a tree, a mountain, etc.), a business card, a document (e.g., a recipe, a driver's license, passport, student id, etc.), text in one or more languages, etc.
- unsuitable images may include, for example, a synthetic or computer-generated image, an image that has no features detectable by the coarse-grained classifier, a blank image, an out-of-focus image, etc. For example, if the user takes a photo of a sunset, the coarse-grained classifier may not detect an object in the image, and therefore the image may be determined as unsuitable.
- method 200 may provide an indication, e.g., to a calling application that invokes method 200, that the image is not suitable for categorization, suggested actions, or for automatic execution of an application.
- the indication may be stored, e.g., as metadata for the image. For example, storing the indication as metadata may be beneficial such that processing is not unnecessarily repeated because the coarse-grained classifier is not applied to an image, where the metadata indicates the image has been previously classified as suitable or unsuitable.
- OCR optical character recognition
- applying OCR techniques may include performing image segmentation, e.g., to identify portions of the image that include text in one or more languages.
- OCR techniques may detect barcodes/ Quick Response (QR) codes, printed text (e.g., from an image of a printed document, from an image of a media cover, etc.), handwritten text (e.g., from a handwritten note), etc.
- QR Quick Response
- applying OCR techniques may include comparing one or more portions of the image with images of characters from a known alphabet, e.g., in various fonts. Based on a match of a portion of the image with a character, it may be determined that the portion of the image corresponds to that character.
- applying OCR techniques may include performing OCR using a machine-learning application that includes an inference engine that is trained to perform character, word, or sentence recognition.
- machine-learning application may include a trained model (e.g., as a data file) that includes a model structure and weights (e.g., for a neural network) as inputs to an inference engine that can be executed using a processor of a device that implements block 204.
- there may be more than one trained models, e.g., a model for English language, a model for Russian language, etc.; a model for printed text, a model for handwritten text, a model for unclear text, etc.
- a single trained model that can handle multiple languages, text typed or written in different fonts, etc. may be provided.
- applying OCR techniques may include use of a dictionary.
- the coarse-grained classifier of block 202 may provide one or more inputs (e.g., portions of images detected by the coarse-grained classifier as possibly including text) that are utilized when applying OCR. For example, if the coarse-grained classifier indicates portions of the image as not including text, OCR techniques may not be applied to such portions, saving computational cost. In some implementations, e.g., when the coarse-grained classifier determines that the image does not include text, block 206 is not performed.
- block 206 may be combined with other blocks, e.g., OCR techniques may be applied as part of the coarse-grained classifier of block 202, or OCR techniques may be included in the local classifier as described with reference to block 208.
- OCR techniques may be applied to generate one or more parameters based on the image.
- OCR techniques may generate as parameters one or more text extracts from the image.
- OCR techniques may recognize a name, a phone number, an email address, an address, a social network identifier, etc. from the image and provide those as parameters.
- the image includes a bar code or a QR (Quick Response) code
- the value of the bar code or the QR code may be provided as a parameter. The method proceeds to block 208.
- a local classifier is applied to the image.
- the local classifier may be applied to the image by a client device that obtained the image, e.g., captured the image with a camera of the client device, received the image over a network, etc.
- the local classifier may implement one or more techniques to classify an image.
- such techniques may include image segmentation, object detection and recognition, etc.
- the local classifier may be a machine-learning application.
- a trained model is provided, e.g., as a data file.
- a trained model for a classifier may be trained, e.g., using training data such that the model can be applied to any image to detect one or more image features, and determine one or more categories for the image.
- training data may include any data such as images and corresponding categories that is permitted for use for training, e.g., synthetic or computer-generated data; data licensed for use for training; etc.
- a trained model may be trained using a large dataset, e.g., of millions of images, of different types such that a machine-learning application that utilizes an inference engine with the trained model, can detect and categorize an image.
- trained model may be obtained based on supervised learning, e.g., based on training data include images and its corresponding categories.
- a trained model may include model form or structure (e.g., descriptive of a number and organization of a plurality of nodes into layers of a neural network, with associated weights).
- trained model may be trained such that an inference engine that applies the trained model can recognize specific categories of images.
- such categories may include documents, receipts, bills, media covers (e.g., book, CD/DVD, vinyl, etc.), posters (e.g., movie posters), advertisements, product labels (e.g., food labels, wine labels, etc.), business cards, identity documents (e.g., driver's license, passport, etc.), products and brands (e.g., shoes, clothes, etc.), recipes, articles (e.g., in a magazine), whiteboards, offers or coupons, screenshots (e.g., images of a user interface displayed on a device screen) etc.
- documents receipts, bills, media covers (e.g., book, CD/DVD, vinyl, etc.), posters (e.g., movie posters), advertisements, product labels (e.g., food labels, wine labels, etc.), business cards, identity documents (e.g., driver's license, passport, etc.), products and brands (e.g., shoes, clothes, etc.), recipes, articles (e.g., in a magazine), whiteboards,
- image categories may also include memes (e.g., images received via a messaging application or a social network) such as greeting images ("good morning,” “hello,” etc.), humorous images (e.g., cartoons, jokes, animated GIFs, etc.), motivational quotes, and other images that are commonly shared, e.g., by several people on a social media platform.
- image categories may further include bad photographs. For example, a photograph that is taken inadvertently, e.g., when a camera is activated due to inadvertent input, such as when the camera is in a user' s pocket, may not depict any subject matter of interest to users. In another example, a photograph that is blurry, underexposed, or out-of-focus may be categorized as a bad photograph.
- image categories may also include duplicates. For example, if the local classifier determines that the image is similar to one or more other images, e.g., that were previously analyzed by the local classifier, the local classifier may determine the category duplicates for all such images. For example, determination that images are duplicates may be based on the local classifier determining that image features are similar, e.g., have similar feature vectors. Such determination may be based on image metadata, if permitted by the user, (e.g., time of capture, location at which the image was captured) and/or pixel values of the image. In some implementations, similarity of image features can be determined based on whether one or more similarity thresholds are met, e.g., a threshold of similarity of image feature vectors, image pixel values, etc.
- trained models may be updated, e.g., based on use of additional training data that enables the model to be trained to recognize additional categories of images, or to improve accuracy and/or speed of applying the model.
- a trained model may be updated locally, e.g., on a particular client device, based on user activity or response. In these implementations, user data is not transmitted or shared. Further, if the user provides consent, updates to trained models may be provided over network 130, e.g., to server device 104 or one or more other client devices.
- a trained model may be customized based on a device (e.g., client device 120-124) that the local classifier is executed on.
- client devices may have different processing capabilities based on available hardware, e.g., a single-core processor, a multi-core processor, one or more parallel processors, a graphics processor with a number of graphics processing units (GPUs), a reconfigurable processor (e.g., FPGA), a neural network processor, etc.
- different client devices may have different availability levels of other resources such as memory, battery capacity, network bandwidth, etc.
- a trained model with relatively higher complexity may be provided in a device (e.g., any of client device 120-124, or server device 104) that has a neural network processor or a GPU that is optimized for parallel processing, e.g., that the inference engine utilizes.
- a simplified trained model e.g., with fewer neural network nodes or layers
- a client device that has greater resource constraints, e.g., a single-core processor with limited capabilities.
- multiple trained models may be provided on a client device.
- an appropriate trained model may be utilized, e.g., based on contextual factors such as network connectivity, battery capacity available, memory available, etc.
- the local classifier analyzes the image to produce local classification results.
- the local classifier may perform the analysis based on image data, e.g., pixel values of the image.
- image metadata such as a capture time, a type of camera used (e.g., a front camera, a back camera, etc.), an orientation of the image, etc.
- local classification results may include one or more categories that are determined for the image.
- the local classifier may also generate a confidence score for each category for the image.
- the local classification results may indicate that the image category is "document” with a confidence score of 95%, "receipt” with a confidence score of 90%, and so on.
- local classification results may be a single category for the image, e.g., book cover, poster, etc. In these implementations, a category with a highest confidence score may be determined as the single category.
- local classification results may also include one or more parameters determined based on the image.
- such parameters may be based on the local classifier recognizing one or more objects in the image. For example, if the image includes an image of Bryce Canyon as determined by the local classifier, the parameter may include "Bryce Canyon.”
- the local classifier detects a particular brand or product name, e.g., based on a brand logo being detected in the image, the brand name or product name may be a parameter. For example, if the image is of a t-shirt of a particular brand, parameters may include the brand name, and a color of the t-shirt, as determined by the local classifier.
- the parameters may include a title of the media item (e.g., book title, a movie title, an album title, etc.), a type of the media item (e.g., book, CD, DVD, video, etc.), an author of the media item (e.g., an author of a book, an artist or band that produced a music album, actor, director, etc.), and so on.
- the local classifier may also utilize results from OCR, e.g., parameters provided by applying OCR techniques as described with reference to block 306, in determining one or more parameters. The method proceeds to block 210.
- server classification refers to applying a server-based classifier to the image.
- server classification is not utilized.
- server classification may be utilized, if permitted by the user of the client device.
- server classification may be utilized, e.g., if a network bandwidth available at a client device is sufficient to upload an image representation to a server, and may not be utilized otherwise (e.g., if the client device has limited or no network connectivity).
- server classification may be selectively utilized, e.g., when local classification results do not include a category for an image, or when local classification results include multiple categories, e.g., with confidence scores that do not meet a confidence score threshold.
- server classification is utilized irrespective of local classification results.
- server classification is used in combination with local classification.
- a client device determines that the local classification results are reliable (e.g., have confidence scores that meet a threshold)
- it can display a user interface that includes the image with one or more suggested actions as described with reference to Fig. 3, or a user interface with an indication of a performed action as described with reference to Fig. 4, or a suggestion to archive an image as described with reference to Fig. 7, immediately upon image capture.
- Such display of the user interface may be displayed with lower latency than a user interface displayed where server classification is always utilized, e.g., by elimination of wait time to receive classification results from a server, e.g., over a network.
- a further technical advantage is that network cost of uploading image representations to a server and downloading server classification results, and processing costs for the server to perform image classification, are saved.
- a further technical advantage is that only such image representations are sent to the server for which the local classification results are not sufficient, e.g., to display one or more suggested actions, or to perform an action based on the image. Therefore, network bandwidth is saved, by avoiding transmission of the image representation.
- Server classification may provide certain technical advantages. For example, an image classifier on a server may be more accurate than a client classifier, e.g., due to server resources. If it is determined that server classification is to be utilized, the method proceeds to block 220. If it is determined that server classification is not to be utilized, the method proceeds to block 212.
- an image representation is generated.
- generating an image representation may include cropping the image, changing an orientation of the image, compressing the image (e.g., so that a data size, in bytes, of a resultant compressed image has a smaller data size than the original image, and is suitable for transmission over a low bandwidth network), changing a color space of the image (e.g., from RGV to YUV), etc.
- the image representation may be the resultant image after applying one or more of the described operations e.g., cropping changing orientation, compressing, changing color space, etc.
- the resultant image may be an image thumbnail that is smaller in data size than the image itself.
- An image thumbnail may include one or more portions of the image, e.g., include a plurality of pixels that have values determined based on applying one or more of the described operations to the image.
- generating an image representation may include generating a knowledge representation of the image using a neural network.
- a machine-learning application may be utilized to generate the knowledge representation.
- the machine-learning techniques used to generate the knowledge representation may include applying an inference engine that provides as inference the knowledge representation.
- the knowledge representation may be a feature vector that represents the image as a set of vector values associated with various features.
- the knowledge representation may be usable, e.g., by the server to determine an image category.
- the image representation may not correspond to pixels of the image.
- the knowledge representation may be in the form a data file generated based on the image.
- the knowledge representation may be a feature vector generated by a local classifier, e.g., for an image of a ID barcode, the representation could be a decoded numerical string.
- block 220 is not performed, and instead, local classification results or data from the coarse-grained classifier are provided as the image representation.
- a server classifier may be configured to determine image categories based on the received image representation, e.g., image thumbnail, knowledge representation, local classification results, etc.
- an appropriate image representation may be chosen, e.g., based on available client resources such as processing capability, network bandwidth, storage capacity, etc. and based on the image. For example, a lower-resolution image representation may be chosen if the available client resources are small, while a higher-resolution image representation can be chosen if the available client resources are large (e.g., based on one or more resource thresholds.
- server classification may be savings in network costs, e.g., by transmitting a thumbnail image or knowledge representation that has a smaller data size than the original captured image.
- different types of image representations may have different computational costs to generate and the client device may select the image representation based on available resources. This provides a technical advantage that client resources used to generate the image representation are reduced. The method proceeds to block 222.
- the image representation is sent to the server, e.g., to server device 104 over network 130.
- the server e.g., to server device 104 over network 130.
- one or more of an image thumbnail, a knowledge representation, and local classification results may be sent to the server.
- transmitting the image representation to the server also includes sending information to the server that indicates that the image is to be processed by the server only to generate classification results.
- User consent is obtained prior to generating or transmitting the image representation to the server. In implementations where users do not provide such consent, server classification is not performed.
- a server may determine categories for the image based on the received image representation.
- server device 104 may utilize image classifier 156b to determine the server classification results.
- image classifier 156b may be implemented using machine-learning techniques, e.g., similar to image classifier 156a (local classifier).
- image classifier 156b may utilize a machine-learning application that includes a trained model and an inference engine.
- the trained model on the server may be different, e.g., more complex, version of the trained model of image classifier 156a.
- image classifier 156b may utilize a machine-learning application that is configured to utilize received image representations.
- image classifier 156b may implement super-resolution techniques, e.g., to obtain a higher resolution image based on a received image thumbnail.
- image classifier 156b may be trained to determine image categories based on received knowledge representation of the image or based on received local classification results.
- server device 104 may also apply OCR techniques to the received image thumbnail to determine server classification results.
- sending the image representation to the server may include sending a response time threshold for the server to provide server classification results.
- the response time threshold may be specified in a unit of time, e.g., 0.5 ms, 1 ms, etc.
- the response time threshold may indicate an amount of time, e.g., from a start time of transmission of the image representation or a time of capture of the image, within which the server classification results are to be received by a client device that sends the image representation.
- the server may apply image classifier 156b such that one or more server classification results are provided, e.g., generated by the server and transmitted to the requesting client device, within the response time threshold.
- the server may allocate server resources and/or chose a particular type of image classifier 156b, based on the received image representation and/or the response time threshold. This provides a technical benefit of appropriate allocation of server resources to generate the server classification results. Further, a server may not process the image or abort processing the image to determine server classification results, e.g., if it determines that server classification results cannot be provided within the response time threshold.
- the response time threshold provides several technical benefits.
- the client device can provide a suggested action, or perform an automatic action in a timely manner such that users are provided with the suggested action quickly upon capturing the image or opening the image in an image viewing application, or that the automatic action is performed immediately upon image capture.
- a technical benefit is that the user interface that is displayed upon image capture can be rendered in such a manner that the user does not perceive lag between image capture and display, and additionally, receives UI elements such as suggested actions.
- server device 104 may determine one or more suggested actions (e.g., archival), or actions to be performed by the client device, based on the received image representation. The method proceeds to block 224.
- suggested actions e.g., archival
- block 224 it is determined whether server classification results are received, e.g., within the response time threshold. If it is determined that the server classification results are not received within the response time threshold, the method proceeds to block 212. If it is determined that the server classification results are received within the response time threshold, the method proceeds to block 226.
- image categories and/or suggested actions are determined based on local classification results, e.g., results from the local classifier applied in block 208.
- the image categories may be determined based on whether a confidence score associated with an image category meets a confidence threshold. For example, if the local classification results may indicate that the image category is "document" with a confidence score of 95% and the confidence threshold for the category document is "90%," it is determined that the image belongs to the category document. In some implementations, a particular category that is associated a highest confidence score may be determined as the category for the image. In some implementations, e.g., when multiple local classifiers are used, local classification results from each local classifier may be combined to determine the image category.
- combining the classification results may include assigning weights to respective classification results from each local classifier based on respective confidence score, and selecting one or image categories for the image based on the weighted classification results.
- local classification results associated with low confidence scores may be discarded prior to determining the image categories.
- determination of image categories may be based on a size and/or prominence of an image feature determined by the image classifier. For example, if a detected receipt object occupies a large portion (e.g., over a threshold size, such as 40%, etc.) of the entire area of an image, the image may be classified as a receipt, even in the presence of other features (e.g., books) that occupy a smaller portion (e.g., 15%) of the image area.
- prominence of an image feature can be determined based on size of the image feature with respect to image area, and/or location of the image feature within an image, e.g., with respect to borders of the image.
- a foreground and background of an image can be determined (e.g., based on relative sizes of depicted objects, types of depicted objects, depth information for the pixels, etc.), and an image feature located in the foreground can be detected as prominent.
- an image feature located in the foreground can be detected as prominent.
- a book cover object is prominent in the image, e.g., within a threshold distance of a center of the image, in a foreground portion of the image, etc., the image may be classified as a book cover.
- image categories and/or suggested actions are determined based on one or more of local classification results and server classification results. For example, if server classification results have higher confidence scores associated, the image categories may be determined solely based on server classification results. When the server utilizes a server classifier that is more accurate than the local classifier, e.g., due to use of a more accurate trained model, etc., server classification results may include greater confidence scores. In another example, e.g., when the received server classification results are not associated with higher confidence scores, or when the server classification results are different from the local classification results, both may be used to determine image categories.
- server classification results may not be utilized to determine image categories. For example, non-overlapping results may occur, e.g., due to the image representation that is sent to the server, etc.
- method 200 has been described with reference to various blocks in Fig. 2, it may be understood that techniques described in this disclosure to determine image categories may be performed without performing some of the blocks of Fig. 2.
- some implementations e.g., that do not include a coarse-grained classifier, blocks 202 and 204 are not performed.
- some implementations e.g., on a client device with limited processing capability, or a client device that is incapable of executing a local classifier, block 208 may not be performed, and if the user consents to use of server classification, image categories are determined based on performing blocks 220-226.
- one or more of the blocks illustrated in Fig. 2 may be combined.
- blocks 206 and 208 may be combined, e.g., if the local classifier includes OCR techniques.
- block 210 may be performed prior to blocks 206 and/or 208 such that generating the image representation, sending the image representation to the server, and receiving server classification results is performed at the same time as applying the local classifier.
- a client device 120 of a user Ul may send an image representation to another client device of the user, e.g., over a local network, to obtain server classification results.
- a client device 120 of a user Ul may send an image representation to another client device of the user, e.g., over a local network, to obtain server classification results.
- client device 120 has limited capability to determine image categories, when the other client device is suitable (e.g., has parallel processing hardware) to determine classification results, etc.
- Fig. 3 is a flow diagram illustrating one example of a method 300 to display suggested actions and execute commands, according to some implementations.
- method 300 can be implemented, for example, on a server system 102 as shown in Fig.
- some or all of the method 300 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s).
- the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage).
- processors digital processors or processing circuitry
- storage devices e.g., a database 106 or other storage
- different components of one or more servers and/or clients can perform different blocks or other parts of the method 300.
- a first device is described as performing blocks of method 300.
- Some implementations can have one or more blocks of method 300 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
- user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location, historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc.
- One or more blocks of the methods described herein may use such user data in some implementations.
- block 304 it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 312. If user consent has not been obtained, it is determined in block 306 that blocks are to be implemented without use of user data, and the method continues to block 312. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 300 is not performed. [0089] In block 312, an image is obtained.
- the image may be captured by a user, e.g., user Ul of client device 120, using a camera of client device 120.
- obtaining the image may include detecting that the image has been captured based on detecting activation of a camera of a client device, e.g., activation of an image sensor of the client device.
- obtaining the image may include receiving a notification from an operating system of the client device that the image has been written to a local memory of the client device.
- the image may be obtained upon detection that an image has been captured.
- the image may be obtained from a sensor (e.g., an image sensor) that captures the image or a storage device (e.g., a local memory used to write image data).
- the image e.g., pixel values
- the image may be obtained from the image sensor, e.g., prior to a user triggering capture of the image, e.g., by activating an image capture button.
- obtaining the image may be triggered based on a notification or indication from an operating system or other application (e.g., an assistant application, an in-memory service that detects that image capture has been activated, etc.).
- an operating system or other application e.g., an assistant application, an in-memory service that detects that image capture has been activated, etc.
- the image may be obtained, e.g., received over a network with a messaging application (e.g., chat), by e-mail, downloaded from a website, via an image gallery application, via an image management application, etc.
- a messaging application e.g., chat
- the image is analyzed, e.g., using one or more image classifiers.
- the image may be analyzed using method 200 described with reference to Fig. 2.
- image analysis may include determining one or more categories for the image.
- analyzing the image may also include determining one or parameters, e.g., based on extracting text from the image. In some implementations, different parameters may be determined based distinct portions of the image.
- block 314 may be implemented using method 200.
- the method proceeds to block 316.
- one or more suggested actions are determined for the image.
- the one or more suggested actions for the image are determined, e.g., by a client device that implements suggestion application 158a and/or a server device that implements suggestion application 158b.
- the one or more suggested actions may be based on the determined categories for the image, image metadata, user context, etc. when permitted by the user.
- the suggested actions may be associated with a command (e.g., for an application that implements method 300, or other applications on a device that implements method 300.
- a suggested action may be to store the image in an image group (e.g., in an image album) for documents in an image gallery application.
- a suggested action may be to pay the bill with the payment application using the payment information.
- extracted text from OCR techniques as described with reference to block 206 and one or more image features may be utilized to determine the merchant name, the amount due, the payment application to be used to pay the bill, etc.
- image classifiers may detect the presence of a logo associated with the merchant, or other image features that are utilized to identify the merchant.
- the suggested action may be to extracted information, e.g., merchant name, a location, a price (e.g., amount spent), a timestamp (e.g., date and time of the receipt, etc.), one or more item names of purchased items, etc. in the expense tracking application.
- the image includes a link to an online article (e.g., a URL, a barcode, etc.)
- the suggested action may be to display the article using a browser application.
- a media item corresponding to the media cover may be determined.
- the suggested actions may include adding the media item to a wishlist (e.g., "books to buy,” “Summer reading list,” “movies to watch,” etc.) for a media rental or purchase application, adding the media item to a stored playlist, e.g., a list of media items such as songs, movies, audiobooks, etc. for a media playback application, purchasing the media item, e.g. in physical form from an e-commerce provider, or in digital form from on online media store using the payment information, etc.
- a wishlist e.g., "books to buy,” “Summer reading list,” “movies to watch,” etc.
- a stored playlist e.g., a list of media items such as songs, movies, audiobooks, etc. for a media playback application
- purchasing the media item e.g. in physical form from an e-commerce provider, or in digital form from on online media store using the payment information, etc.
- a suggested action may be to "archive" the image, e.g., such that the image is removed from a view (e.g., a chronological view) that includes images for a user.
- the suggested action to archive may be shown for an image that is determined to be a duplicate, e.g., identical or very similar, of another image in the view.
- the suggested action to archive an image may be displayed based on other suggested actions for the image, e.g., suggested actions that were displayed a previous time the image was displayed for viewing. For example, if the image is a coupon and a suggestion to use the coupon (e.g., in a shopping application) was previously shown, it may be determined based on user data that the user has not used the coupon (e.g., not selected the suggested action). At a subsequent time that the user views the image, a suggested action may be to archive the image. In some implementations, the suggested action may be different at different times of viewing the image, e.g., based on a time-sensitive parameter (e.g., expiry date of a coupon, due date of a bill, etc.) determined from the image.
- a time-sensitive parameter e.g., expiry date of a coupon, due date of a bill, etc.
- interaction data regarding use of suggested actions may be utilized to trigger suggested actions. For example, if interaction data indicates that a user typically (or frequently, e.g., meeting a threshold frequency) selects "add to contacts" or "call phone number” suggested actions for images of business cards, and does not select (or selects infrequently) "send e-mail" suggested action, the "send e-mail" may not be displayed to such a user.
- the application for a suggested action may be a preconfigured application determined based on different image categories, or may be a user-specified destination for certain image categories.
- a client device may include features (e.g., provided by an operating system of the client device) to indicate default applications that handle various types of data.
- such features may be part of a registry of applications, e.g., maintained by an operating system of the client device, or by a suggestion application.
- applications may declare (e.g., at a time of installation on a client device) various operations that can the application can perform, various types of data or parameters that the application can handle, etc.
- a server may provide information (e.g., application information) that indicates various applications that can be utilized for suggested actions corresponding to specific image categories, determined parameters, and image features.
- a contacts application e.g., on a mobile device, may indicate that it can store phone numbers, e-mail address, physical addresses, social media addresses, etc.
- the suggested action may be to invoke the contacts application.
- a dialer application e.g., on a mobile phone, may indicate that it can call a phone number (e.g., via a telephony network) or a social media address (e.g., via a call placed through a messaging application).
- the suggested action may be to place a call to the number or the social media address via the dialer application.
- an application that implements method 300 may also be the application for which the action is suggested. For example, if the user permits use of facial recognition techniques (e.g., as part of analyzing the image), it may be detected that the image includes one or more recognized faces. In this example, the suggested action may be to associate one or more tags that identify a person whose face was recognized in the image. Further, another suggested action may be to share the image with the persons whose faces were recognized (e.g., over a communication network).
- sharing may be direct sharing (e.g., through the application that implements method 300, such as an image gallery application) or sharing through another application (e.g., a messaging application, an e-mail application, photos application, a file transfer application, etc.) that supports sharing.
- a suggested action may be to share the image with another user that has previously shared images with the user, e.g., based on a determination that the one or more of the previously shared images were taken at a same time/location as the image.
- the suggested action may include, e.g., performing automatic enhancements (e.g., color correction, adjusting one or more image properties such as brightness, contrast, etc.) on the image where the enhancements are determined based on analyzing the image, applying one or more image effects based on analyzing the image (e.g., based on detecting that the image has a human face, performing red-eye correction), etc.
- automatic enhancements e.g., color correction, adjusting one or more image properties such as brightness, contrast, etc.
- the suggested action may be associated with one or parameters determined based on the image, e.g., e-mail addresses, recognized faces, recognized objects or landmarks, etc.
- the suggested action may correspond to executing a browser application on the device with the one or more parameters. For example, in response to recognizing that the image includes a landmark (e.g., Bryce Canyon, Eiffel Tower, etc.), a suggested action may be to execute the browser application to access an information resource that provides information about the landmark. In another example, in response to recognizing that the image includes an item for purchase (e.g., shoes of a particular brand), the suggested action may be to execute the browser application to access an online shopping portal or marketplace for that item.
- a landmark e.g., Bryce Canyon, Eiffel Tower, etc.
- the suggested action may be to execute the browser application to access an information resource that provides information about the landmark.
- the suggested action may be to execute the browser application to access an online shopping portal or marketplace for that item.
- the online shopping portal may be selected based on one or more criteria. For example, it may be determined that a particular shopping portal offers the item at a lowest price. In response to this determination, the particular shopping portal may be included in the suggested action. In some implementations, other factors related to shopping such as shipping costs, warranty, seller ratings, etc. may also be used to determine the particular shopping portal to include in the suggested action. In some implementations, the online shopping portal may be selected because it provides the best deal for particular items and thereby facilitates efficient user shopping. In various implementations, the best deal may be based on factors such as price, shipping costs, availability, warranty, reviews, item type, etc.
- the particular shopping portal may be determined based on recent shopping activity, membership in a shopper's club, etc. In some implementations, where users permit access to user data related to shopping, the particular shopping portal may be determined based on frequency of shopping activity at a particular shopping portal (e.g., number of purchases made over a period of time).
- users may be provided with options to indicate one or more applications for suggested actions. For example, users may indicate specific media playback application, shopping application, payment application, etc. These applications may be prioritized for suggestions actions, e.g., over other applications that also correspond to the image category, determined parameters, and image features.
- suggested actions may include different actions, each determined based on a particular portion of the two or more distinct portions. The method proceeds to block 318.
- a user interface is caused to be displayed.
- the user interface may be displayed by any of client devices 120-124.
- the user interface includes a plurality of first user interface elements (e.g., on-screen buttons, voice prompts, etc.) that are displayed.
- Each of the plurality of first user interface elements corresponds to a respective default action of one or more default actions.
- the default actions may be displayed independent of results of the image analysis performed in block 314 and suggested actions determined in block 316.
- the one or more default actions may include sharing the image (e.g., via a messaging application, an e-mail application, a social network, etc.), archiving the image (e.g., storing the image in an image library), and performing a visual search (e.g., an image-based search using a search engine) based on the image.
- the plurality of first user interface elements are displayed irrespective of whether the image analysis was performed, or whether one or more suggested actions are determined. For example, if the image analysis does not result in identifying a category for the image, or if no suggested actions are determined, the plurality of first user interface elements are displayed.
- one or more second user interface elements may be included in the user interface.
- each of the one or more second user interface elements may correspond to a respective suggested action, e.g., when one or more suggested actions are determined.
- the user interface is configured to permit selection of a particular action from the one or more default actions and the one or more suggested actions.
- the method proceeds to block 320.
- user input indicative of selection of a particular action from the one or more default actions and the one or more suggested actions is received.
- user input may be received based on detecting a gesture, e.g., tapping, swiping, etc. with a touchscreen display of a client device that corresponds to activation of one or more of the first user interface elements and the second user interface elements. While the foregoing example refers to a visual display of user interface elements and selection through a touchscreen, it may be understood that user interface elements may be provided as voice prompts, or using other techniques. Further, user input may be received, e.g. as voice input, touch input, user gesture input, device movement input, device orientation input, etc. based on the particular implementation. The method proceeds to block 322.
- a gesture e.g., tapping, swiping, etc. with a touchscreen display of a client device that corresponds to activation of one or more of the first user interface elements and the second user interface elements. While the foregoing example refers to a visual display of user interface elements and selection through a touchscreen, it may be understood that user interface elements may be provided as voice prompts, or using other techniques
- a particular command corresponding the particular action is executed in response to receiving the user selection.
- a default action may be executed without a parameter. For example, if the user selects the default action of "sharing the image," a menu of sharing options (e.g., share via e-mail, share via messaging application, share via social network, etc.) may be displayed.
- a suggested action may be performed by a command to invoke an application corresponding to a suggested action, where the application is invoked with one or more parameters determined based on the image.
- invoking the application may include making an application programming interface (API) call to the application, using a deep link for the application (e.g., to specific functionality of the application), invoking a web browser to access a particular resource at a website, etc.
- API application programming interface
- a command may be sent to a dialer application to place the phone call, including a parameter (e.g., a phone number) determined based on the image.
- a command may be executed, e.g., by the contacts application with parameters such as name, physical address, phone number, e-mail address, social media address, etc.
- the parameters may be based on the image, e.g., when the image includes a business card.
- the image may include handwritten text that specifies a name of a wireless network, along with credentials (e.g., a wireless network key) to connect to the wireless network.
- executing the command may include connecting to the wireless network of the name determined from the handwritten text using the credentials.
- users may select multiple actions, e.g., sequentially. For example, a user may select a suggested action to add a contact, followed by a different suggested action to place a phone call to a phone number that is determined based on the image.
- the user interface may be updated, e.g., to remove a particular suggested action, if the action has already been completed.
- a subset of suggested actions determined in block 316 may be displayed. For example, the subset may be selected based on a confidence score associated with the suggested action.
- a suggested action may be associated with a higher confidence score, e.g., when the image category is determined with high confidence.
- a suggested action may be associated with a higher confidence based on such user data.
- the suggested action to add the contact to the address book may be assigned a higher confidence score.
- suggested actions may be ranked based on confidence scores, and the subset of suggested actions may be selected based on the ranks. For example, in some implementations, only those suggested actions are displayed that meet a threshold confidence score, or are of a particular rank (e.g., in the top 3 ranks).
- users permit use of user data regarding recent use of a particular type of suggested action such data may be used to rank the suggested actions.
- users permit use of user data regarding a frequency with which a particular type of suggested action such data may be used to rank the suggested actions.
- a threshold may be set for a period of time between obtaining the image in block 312 and displaying the user interface in block 318.
- the time period may correspond to time elapsed between capture of the image, e.g., by a camera application, and display of the UI.
- the time period may correspond to one or more other events, e.g., writing the image to a memory, an OS notification of image capture, etc.
- method 300 may be implemented such that the UI is displayed within the threshold, e.g., within 0.5 milliseconds of image capture by the camera application, within 1 milliseconds of image capture by the camera application, etc. such that a user does not perceive a time lag between the image being displayed (e.g., by the camera application) and the UI being displayed (e.g., by a different application that implements method 300).
- the camera application may display a camera application user interface immediately upon capture of the image.
- the UI with the default actions and/or suggested actions displayed by the different application may be rendered atop the camera application user interface, e.g., by utilizing draw-on-top functionality provided by an operating system of the device that implements the camera application and the distinct application.
- draw-on-top functionality provided by an operating system of the device that implements the camera application and the distinct application.
- such an approach may be advantageous, e.g., when the device is configured with a camera application as a default, and where a separate application, e.g., an image gallery application, displays the user interface that includes the default actions (which may correspond to a command for the image gallery application) and suggested actions (which may correspond to one or more other applications).
- the user interface may be displayed with default actions and no suggested actions, e.g., when a suggested action is not determined within the threshold. Further, suggested actions that are determined within the threshold may be displayed along with the default actions, e.g., at an initial display of the user interface, and additional suggested actions may be added, e.g., inserted into the user interface, at a subsequent time as such suggested actions are determined.
- the user interface displayed in block 318 may be a transient user interface, e.g., displayed temporarily (e.g., for 1 second, for 3 seconds, etc.) and may be removed after a limited period of time.
- a transient user interface e.g., displayed temporarily (e.g., for 1 second, for 3 seconds, etc.) and may be removed after a limited period of time.
- Such implementation may be beneficial in providing the user with options to select a particular action from the default actions and the suggested actions, and if the user does not provide selection within the limited period of time, removal of the suggested actions user interface enables the user to continue interacting with the camera application.
- results from the image analysis performed in block 314, e.g., an image feature vector, or knowledge representation of the image, may be provided to different suggestion applications on different server devices to determine suggested actions.
- suggestion applications may be implemented by different providers (e.g., grocery stores, online video providers, etc.).
- each provider may determine a suggested action, and provide the determined suggested action for display.
- a provider may indicate image features or image categories for which the provider can supply suggested actions.
- image data (e.g., pixel values) may be provided to different server devices (e.g., operated by different parties), such that each server device can apply an image classifier to the image and determine suggestions.
- server devices e.g., operated by different parties
- each server device can apply an image classifier to the image and determine suggestions.
- image data may be provided to different server devices (e.g., operated by different parties), such that each server device can apply an image classifier to the image and determine suggestions.
- server devices e.g., operated by different parties
- each server device can apply an image classifier to the image and determine suggestions.
- image data e.g., pixel values
- provider of a shopping website may offer shopping-related suggestions based on an image classifier that is configured to recognize product images, e.g., to identify products that are available from the shopping website.
- Suggested actions generated by different server devices may be aggregated and a subset of the determined suggested actions may be included in the user interface.
- the determined suggested actions may be determined based in part on user preferences. For example, in these implementations, if a user had previously indicated a preference for a particular contacts application a particular dialer application, etc., the determined suggested actions may be to launch the particular contacts application for images that are detected as business cards. For example, the user preference may be indicated by the user choosing an application as a default application, e.g., in a setting stored by an operating system. In some implementations, the suggested actions are determined automatically, without user input.
- the particular dialer application may be chosen for the determined suggested action, e.g., for an image of a business card.
- Fig. 4 is a flow diagram illustrating one example of a method 400 to select and execute an application based on an image, according to some implementations.
- method 400 can be implemented, for example, on a server system 102 as shown in Fig. 1.
- some or all of the method 400 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s).
- the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage).
- processors digital processors or processing circuitry
- storage devices e.g., a database 106 or other storage.
- different components of one or more servers and/or clients can perform different blocks or other parts of the method 400.
- a first device is described as performing blocks of method 400.
- Some implementations can have one or more blocks of method 400 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
- user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location, historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc.
- One or more blocks of the methods described herein may use such user data in some implementations.
- block 404 it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 412. If user consent has not been obtained, it is determined in block 406 that blocks are to be implemented without use of user data, and the method continues to block 412. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 400 is not performed.
- Block 412 an image is obtained.
- Block 412 is similar to block 312 of method 300. The method proceeds to block 414.
- the obtained image is analyzed, similar to block 314. For example, one or more image categories may be determined using method 200. The method proceeds to block 416.
- one or more applications and corresponding parameters are determined, based on the one or more image categories determined in block 414.
- the applications and parameters may be determined similar to determining one or more suggested actions as described with reference to block 316.
- one or more applications e.g., available on a device that implements method 400, may be determined based on image categories, image features, and if permitted by the user, user data.
- parameters for the applications may be determined based on analyzing the image.
- parameters may include text or other information extracted from the image. As described with reference to Fig. 3, each of the determined applications may have an associated confidence score.
- the method proceeds to block 418.
- a particular application from the applications determined in block 416 is selected.
- the determined applications may include a contacts application and the parameters determined for the contacts application may include contact information to be added to contacts maintained in the contacts application.
- the determined applications may further include a dialer application and the parameters may include a phone number extracted from the image.
- the determined applications may further include an e- mail application and/ or a social network application, and the parameters may include an e-mail address or a social media address extracted from the image.
- the parameter may include a title of the corresponding media item (e.g., as indicated on the media cover), e.g., a book title
- the determined applications may include a shopping application, an e-reader application, and a book reviews application.
- a user may indicate a particular application, and in some examples, a particular command for that application, as a user preference. For example, a user may indicate a preference to automatically place a call using a dialer application if a phone number is detected within an image, and if no other contact information is detected. In another example, a user may indicate a preference to automatically add contact information using a contacts application, e.g., upon detecting that the image category is business card. In another example, a user may indicate a preference to add media items to a media library of a media playback application, e.g., in a playlist.
- a user may indicate a preference for multiple actions, e.g., adding the media item to the library and initiating playback of the media item using a media playback application.
- the particular application may be selected from the determined applications based on the user preference.
- user preference may be determined based on user data. For example, it may be determined that a user stores particular categories of images (e.g., identification documents, tickets, receipts, etc.) to particular folders on a device, or in particular image groups within an image library. In response to such determination, the corresponding application may be selected from the determined applications based on the user preference.
- images e.g., identification documents, tickets, receipts, etc.
- applications may be selected based on a confidence score associated with the image, e.g., based on the image analysis to determine image categories and/or parameters. For example, if a relatively higher confidence score is associated with a determination that the image includes a book cover than a confidence score associated with a determination that the image includes a CD cover, an application corresponding to the image category "book cover" may be selected based on the confidence scores.
- the image no application is to be executed.
- one or more suggested actions may be displayed in a UI as described above with reference to Fig. 3.
- application execution is performed upon specifically receiving a user selection of a suggested action.
- blocks 420 and 422 may not be performed. If a particular application is selected in block 418, the method proceeds to blocks 420.
- the particular application is executed, e.g., invoked with one or more parameters determined based on the image.
- the application may be invoked by executing a command, e.g., making an application programming interface (API) call to the selected application, with the determined parameters.
- API application programming interface
- the application may automatically perform one or more actions, e.g., as specified in the API call, without user input. The method proceeds to block 422.
- a user interface may be displayed with the image and an indication of the action performed. For example, if the image is a receipt and the application is an expense tracking application, an indication that details from the receipt, such as merchant name, item name(s), timestamp, price, etc. that were added to the expense tracking application may be included in the user interface. In another example, if the user provides consent for such determination, it may be determined that the image is an identification document, and the particular application may be an application that stores important documents, e.g., a document vault.
- the indication may include a type of the document (e.g., driver's license, university ID, etc.), parameters extracted from the document (e.g., a name, an identification number, etc.) that were added to the document vault.
- the user interface may include one or more elements that indicate that the indicated operation was performed successfully.
- Fig. 5A is a diagrammatic illustration of an example user interface 500 that includes an image with a plurality of default actions and suggested actions, according to some implementations.
- user interface 500 can be displayed by a display device, e.g., by a display screen of a client device 120, 122, 124, and/or 126 of Fig. 1, or a server system 102 in some implementations.
- user interface 500 can be displayed by an image gallery application or a camera application (or other application program) running on a device that can obtain images (e.g., via a camera, over a network, etc.).
- User interface 500 includes an image 502, e.g., a photo captured using a camera.
- the image includes a business card.
- OCR techniques and/or an image classifier upon application of OCR techniques and/or an image classifier, different portions of the image may be recognized.
- a company logo 504 For example, a company logo 504, a company name 506 ("Acme Corp.”), a person's name and designation 508 ("John Doe, Software Engineer"), an e-mail address (“jdoe@acme.corp”) 510, a phone number 512 ("734-XXX-XXX”), a social media address 514 (“@jdoesacme”), and a physical address 516 (“334 XYZ Avenue Acme City California”) may be recognized from the image. Depending on the individual image, one or more additional features or fewer features may be recognized.
- User interface 500 may include a plurality of user interface elements that each correspond to a respective default action.
- user interface elements 520 (“Share"), 522 (“Search”), and 524 (“Archive") are included that each correspond to a default action.
- any number of default actions may be included.
- additional default actions e.g., performing a visual search based on the image, performing an automatic enhancement operation on the image, etc. may be included.
- Each of user interface elements 520-524 may be selectable by the user, e.g., by tapping.
- a command for the corresponding action may be executed.
- a command may be executed to perform a search based on the image, e.g., a local search on the device that captured image 502, an Internet search, etc.
- user interface 500 may also include one or more user interface elements that each correspond to a respective suggested action.
- the suggested action(s) may be based on the analysis of the image, e.g., image categories, text extracted from the image, an object or landmark recognized in the image, etc.
- user interface elements 526 and 528 are shown.
- User interface element 526 includes text extracted from the image, e.g., the phone number 734-XXX-XXXX and may correspond to a suggested action to place a call to the phone number using a dialer application.
- the dialer application may be launched with the phone number as the parameter, e.g., to place a phone call.
- User interface element 528 incudes text extracted from the image, e.g., the address 334 XYZ Avenue.
- user interface elements 526 and 528 are displayed based on analyzing the image to identify two distinct portions (e.g., phone number 512 and physical address 516) of the image.
- the user interface elements 526 and 528 correspond to respective actions two suggested actions. Each suggested action is associated with a respective portion of the image.
- a map application may be executed with the address as the parameter, such that the map application launches and provides a search for and display of the location of the address.
- selection of user interface element 528 may result in a web browser application being launched, with a map website URL and the address as parameters.
- Fig. 5A illustrates suggested actions with reference to a phone number and an address
- suggested actions may be based on other information from the image, e.g., e-mail address, social media address, etc.
- a suggested action may be based on multiple portions of the image, e.g., a suggested action for image 502 may be to add a contact in a contacts application based on the recognized information, e.g., 506-516.
- Fig. 5A illustrates two suggested actions, it may be understood that any number of suggested actions may be shown.
- display of user interface elements for suggested actions may be customized based on such data. For example, if user behavior data indicates that upon capturing an image of a business card, the user selects an "add to contacts" suggested action more frequently for recent images of business cards, e.g., more frequently than "place a phone call," the suggested action to add to contacts may be displayed.
- suggested actions may be based on image category, e.g., different suggested actions may be shown for "business cards,” “receipts,” “book covers,” etc.
- a command for the particular action may be to invoke a user-preferred application. For example, if a device that displays user interface 500 has three different contact management applications available, the command may be executed such that a particular contacts application selected based on user preference data is launched. In some examples, commands may be executed based on default applications for certain types of actions, e.g., a default dialer application for phone calls, a default messaging application for messages, a default e-mail application for e-mail addresses, etc.
- Fig. 5B is a diagrammatic illustration of another example user interface 530 that includes an image with a plurality of default actions and suggested actions, according to some implementations.
- User interface 530 includes an image 531, e.g., a photo captured using a camera.
- the image shows a book against a background.
- OCR techniques and/or an image classifier upon application of OCR techniques and/or an image classifier, different portions of the image may be recognized.
- a book title 532 ("Giant Trees of the Earth"
- a portion of image 531 may be highlighted in user interface 530, e.g., by circle 534.
- the portion highlighted may be based on analyzing the image. For example, in Fig. 5B, it may be determined that the portion inside circle 534 is a salient portion of the image, e.g., from which information is extracted based on image analysis. Further, highlighting may be based on determining a category for the image, e.g., book cover. While Fig. 5B shows a single highlighted portion, some images may be displayed with multiple highlighted portions, e.g., an image that includes three books may include three highlighted portions.
- Fig. 5B also includes user interface elements 536 ("Buy with XYZ") and 538 ("Reviews for Giant Trees of the Earth").
- User interface elements 536 and 538 each correspond to a suggested action, e.g., to purchase the book with an application XYZ (e.g., a shopping application, an e-book application, etc.), to access reviews for the book (e.g., via an application or website that provides book reviews), etc.
- an application XYZ e.g., a shopping application, an e-book application, etc.
- reviews for the book e.g., via an application or website that provides book reviews
- Fig. 5C is a diagrammatic illustration of another example user interface 540 that includes an image with a plurality of default actions and suggested actions, according to some implementations.
- User interface 540 includes an image 541, e.g., a photo captured using a camera.
- the image is a photo of a temple.
- the image upon application of OCR techniques and/or an image classifier, the image may be recognized.
- the temple 542 in image 541 is recognized as "Angkor Wat.”
- Image 541 does not include any text.
- determination that the image depicts Angkor Wat may be based on the image classifier recognizing the landmark.
- Fig. 5C also shows user interface elements 544 ("Info about Angkor Wat") and 546 ("Share with Jane”).
- User interface elements 544 and 546 each correspond to a suggested action, e.g., to obtain information about content of the image, e.g., the Angkor Wat temple from an encyclopedia application, a search engine, etc., to share the image with a friend (Jane) using an image sharing application, a messaging application, etc.
- Fig. 5C includes a default action "Share”
- the user interface element 546 suggested action "Share with Jane” may be included.
- the user interface element 546 is included in the user interface 540.
- other information permitted for use by the user e.g., social graph information that indicates a relationship between the user and one or more connected users in the social graph, user profile information, etc. may be used to determine one or more suggested actions.
- Fig. 6 is a diagrammatic illustration of an example user interface 600 that includes an image and an indication that than an action was performed, according to some implementations.
- User interface 600 includes an image 601, e.g., a photo captured using a camera.
- the image is a photo of a receipt.
- upon application of OCR techniques and/or an image classifier one or more portions in the image may be recognized. For example, a restaurant name 602 ("XYZ Restaurant") and an amount 604 ("$10.07") is recognized in image 601. Based on analyzing image 601, the image category may be determined to be receipt.
- a portion 606 of the image is highlighted to indicate that the image includes a receipt and that the portion 606 includes the receipt.
- Fig. 6 also includes an indication 608 that indicates an action was performed for the image.
- indication 608 includes an image category ("receipt"), one or more parameters determined based on the image and used to perform the action (e.g., "$10.07,” "XYZ Restaurant, New York”).
- indication 608 also includes an application ("expense tracking app") that was used to perform the action.
- the indication may include additional information (e.g., a date/time of the receipt, a payment method such as cash or credit card, etc.), or may include less information.
- Indication 608 may notify the user that image 601 was recognized as a receipt and that without further user input, information extracted from image 601 was automatically added to the expense tracking application.
- the action may be performed for certain categories, e.g., user-specified categories, and not performed for other categories. In some implementations, the action may be performed only if certain parameters for the action are recognized. In some implementations, actions may be performed automatically, e.g., based on a user indicating "always perform this action," e.g., after selecting a suggested action.
- Fig. 7 is a flow diagram illustrating one example of a method 700 to archive images, according to some implementations.
- method 700 can be implemented, for example, on a server system 102 as shown in Fig. 1.
- some or all of the method 700 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s).
- the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage).
- processors digital processors or processing circuitry
- storage devices e.g., a database 106 or other storage.
- different components of one or more servers and/or clients can perform different blocks or other parts of the method 700.
- a first device is described as performing blocks of method 700.
- Some implementations can have one or more blocks of method 700 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
- user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location, historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc.
- One or more blocks of the methods described herein may use such user data in some implementations.
- block 704 it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 712. If user consent has not been obtained, it is determined in block 706 that blocks are to be implemented without use of user data, and the method continues to block 712. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 400 is not performed.
- Block 712 an image is obtained.
- Block 712 is similar to block 312 of method 300. The method proceeds to block 714.
- the obtained images are analyzed, similar to block 314.
- one or more image categories may be determined for the images, using method 200.
- the method proceeds to block 716.
- image analysis may include determining one or more categories for the obtained images.
- metadata of the selected images may be updated, e.g., to indicate the image categories for the image.
- metadata of the selected images may indicate whether the image has been archived.
- image identifiers corresponding to the images and the one or more categories determined for the images are stored in a database.
- a subset of images from the obtained images is identified for archival.
- the subset of images may include images that are categorized as documents (e.g., receipts, bills, coupons, menus, business cards, whiteboards, newspapers, etc.), memes (e.g., images received via a messaging application that depict a commonly shared image, e.g., a humorous image, an image with a greeting (e.g., "Good morning") etc., and screenshots.
- the subset of images may include images that are categorized as bad photographs, e.g., photographs that are determined to be blurry or out of focus, underexposed, or taken inadvertently.
- such data may also be used to identify the subset of images. For example, if user data indicates that a user takes multiple photographs of a scene, and subsequently, performs image editing operations on only one of the multiple photographs, other photographs that were not edited may be included in the subset of images identified for archival. In some implementations, if user provides consent to access sharing data, images that are shared may be excluded from the subset of images, even when such images are in categories identified for archival. The method proceeds to block 718.
- a user interface is caused to be displayed.
- the user interface may be displayed by any of client device 120-124.
- the user interface includes one or more images from the subset of images.
- the user interface may be displayed as a card, e.g., a suggestion card, with a suggestion to archive images from the subset of images.
- a suggestion card may be based on a user interface that specifies the presentation various types of information and/ or provides user-selectable options in a concise manner.
- a suggestion card can be dismissed by a user, and may remain available in an archive of suggestion cards (e.g., in a portion of the user interface) for the user to access at a later time.
- a suggestion card template may specify triggering events (e.g., dates, times, context, etc.). If user permits access to context data (e.g., user activity data), the suggestion card may be triggered according to the template based on the context data.
- triggering events e.g., dates, times, context, etc.
- context data e.g., user activity data
- the user interface may be displayed based on the subset of images. For example, the user interface may not be displayed, e.g., if the subset of images has few images, e.g., less than 5 images, less than 7 images, etc. In another example, the user interface may not be displayed if the subset of images includes only recent images, e.g., images captured within the past week, images captured within the previous month, etc. In some implementations, the user interface may be displayed more frequently, e.g., when it is determined that the subset of images includes a large number of images, e.g., 50 images, such as when a large number of duplicate images are captured or when the user receives a large number images that are memes, etc.
- a large number of images e.g. 50 images
- the user interface may be displayed periodically, e.g., once a week, once a month, etc.
- the method proceeds to block 720.
- first user input is received.
- the first user input indicates that selected images (e.g., one or more images of the subset of images) are to be archived.
- the user interface may permit the user to deselect one or more images, and/or select additional images from the obtained images, e.g., prior to archival.
- the method proceeds to block 722.
- the selected images are removed from a displayed view that includes the obtained images.
- the displayed view is a portion or entirety of a display screen or other display area, which displays the obtained images or a subset thereof.
- the displayed view includes all the obtained images, even though a subset of the obtained images may be actually displayed on a display device at one time.
- a subset of the obtained images included in the view is displayed at one time, and images of the obtained images outside the subset may be displayed by the view, e.g., by causing one or more of the previously-displayed images to be positioned out of a boundary of the view (e.g., via scrolling or page-flipping directed by user input, etc.).
- the displayed view can be a chronological view of the images, e.g., based on time of capture of the images (or other time associated with the images).
- the selected images can be removed from the set of obtained images that are included in the displayed view, e.g., the selected images are not available for display in the displayed view and, e.g., are not displayed within the borders of the displayed view by a display device.
- metadata for the selected images may be updated to indicate that the selected images are archived.
- the metadata can be stored in conjunction with the selected image data, and/or can be stored separately in associated with the respective selected images.
- a database may be identified to store an "archived" in one or more database records corresponding to the selected images. The method proceeds to block 724.
- second user input may be received.
- the user interface may enable a user to provide second input that is indicative of selection of a particular image category.
- a database lookup is performed to identify one or more images for the particular category.
- image metadata may be looked up to identify the one or more images for the particular category. The method proceeds to block 726.
- one or more images of the particular category as identified in block 724 may be displayed. For example, if the second user input indicates selection of image category "receipts," one or more images that are categorized are receipts (e.g., in block 714) may be displayed.
- Fig. 8A is a diagrammatic illustration of an example user interface 800 that includes a plurality of images.
- user interface 800 may be displayed by an application on a client device (e.g., any of client devices 120-124) or provided by a server application for display on a client device.
- the application that displays user interface 800 may be an image management application, an image gallery application, a photos application, etc.
- User interface 800 includes images 802-820.
- images 802- 820 may be ordered chronologically, e.g., in a descending order of a time of creation (e.g., time of capture by a camera, time the image was received, etc.).
- Images 802-820 may be any type of image, e.g., a photograph, an animated GIF file, a video, etc.
- any of images 802-820 may be captured by a user using a camera of a client device.
- any of images 802-820 may be received over a network, e.g., via e-mail, via a messaging application, etc.
- images 802-820 may be stored in a client device, a server device, or both a client device and a server device.
- categories may include documents (e.g., receipts, bills, coupons, menus, business cards, whiteboards, newspapers, etc.), memes (e.g., images received via a messaging application that depict a commonly shared image, e.g., a humorous image, an image with a greeting (e.g., "Good morning") etc., and screenshots.
- documents e.g., receipts, bills, coupons, menus, business cards, whiteboards, newspapers, etc.
- memes e.g., images received via a messaging application that depict a commonly shared image, e.g., a humorous image, an image with a greeting (e.g., "Good morning") etc.
- such categories may also include bad photographs, e.g., photographs that are determined to be blurry or out of focus, underexposed, or taken inadvertently.
- image 802-812 as shown in Fig. 8A may be associated with categories that are suitable for archival, e.g., receipts, documents, bad photographs, etc.
- image 802 may be categorized as "ticket”
- images 804, 806, 808, and 810 may be categorized as "receipt”
- image 812 may be categorized as "bad photo.”
- Images 814-820 may be categorized as "photos" and as not suitable for archival.
- Images 802-812 may be in a subset of images to archive.
- Fig. 8B is a diagrammatic illustration of an example user interface 830 that includes a suggestion card to archive a subset of images from the plurality of images shown in Fig. 8A, e.g., images 802-812.
- images e.g., images 802-812 as shown in Fig. 8A, numerals omitted from Fig. 8B
- some images may be shown in a modified form, e.g., tinted.
- images categorized as screenshots may be shown with a tint, e.g., to distinguish from user interface of the application that displays the images.
- images categorized as screen shots may be shown with dotted lines around them, shown in a different size, shown with an animation (e.g., oscillating), etc. to provide such distinction.
- User interface 830 further includes text 850 ("6 photos selected. Move to archive?”) that provides a suggestion to a user to archive the selected images.
- User interface element 830 further includes a button 852 ("ARCHIVE") that is configured to receive user input.
- user interface elements 832-842 may be selectable such that a user can omit one or more images from the images selected for archival.
- the selected images may be archived. Archived images may be stored such that the images do not appear in a chronological or other view of images.
- archived images may be retained, e.g., by a server device, and removed from a client device.
- Archived images may remain accessible by the user, e.g., via search, via an "archived images" folder, or in image groups that correspond to various image categories, e.g., "receipts," "tickets,” etc.
- archived images may be deleted from storage and may not be accessible to the user after deletion.
- one or more selected images (e.g., images categorized as bad photos) may be deleted after archiving.
- Fig. 8C is a diagrammatic illustration of an example user interface 860 that may be displayed after a user has archived the subset of images as shown in Fig. 8B. Images 802-812 of Fig. 8A that were archived (e.g., based on user input indicative of selection of "ARCHIVE") are no longer included in the user interface, as shown in FIG. 8C, and an image 822 is included (e.g., that was previously not shown, e.g., due to constraints of available screen space).
- Fig. 9 is a block diagram of an example device 900 which may be used to implement one or more features described herein.
- device 900 may be used to implement a client device, e.g., any of client devices 115 shown in Fig. 1.
- device 900 can implement a server device, e.g., server 101.
- device 900 may be used to implement a client device, a server device, or both client and server devices.
- Device 900 can be any suitable computer system, server, or other electronic or hardware device as described above.
- One or more methods described herein can be run in a standalone program that can be executed on any type of computing device, a program run on a web browser, a mobile application ("app") run on a mobile computing device (e.g., cell phone, smart phone, tablet computer, wearable device (wristwatch, armband, jewellery, headwear, virtual reality goggles or glasses, augmented reality goggles or glasses, head mounted display, etc.), laptop computer, etc.).
- a client/server architecture can be used, e.g., a mobile computing device (as a client device) sends user input data to a server device and receives from the server the final output data for output (e.g., for display).
- all computations can be performed within the mobile app (and/or other apps) on the mobile computing device.
- computations can be split between the mobile computing device and one or more server devices.
- device 900 includes a processor 902, a memory 904, and input/output (I/O) interface 906.
- Processor 902 can be one or more processors and/or processing circuits to execute program code and control basic operations of the device 900.
- a "processor” includes any suitable hardware system, mechanism or component that processes data, signals or other information.
- a processor may include a system with a general-purpose central processing unit (CPU) with one or more cores (e.g., in a single-core, dual-core, or multi-core configuration), multiple processing units (e.g., in a multiprocessor configuration), a graphics processing unit (GPU), a field-programmable gate array (FPGA), an application-specific integrated circuit (ASIC), a complex programmable logic device (CPLD), dedicated circuitry for achieving functionality, a special-purpose processor to implement neural network model-based processing, neural circuits, processors optimized for matrix computations (e.g., matrix multiplication), or other systems.
- processor 902 may include one or more co-processors that implement neural -network processing.
- processor 902 may be a processor that processes data to produce probabilistic output, e.g., the output produced by processor 902 may be imprecise or may be accurate within a range from an expected output. Processing need not be limited to a particular geographic location, or have temporal limitations. For example, a processor may perform its functions in "real-time,” “offline,” in a “batch mode,” etc. Portions of processing may be performed at different times and at different locations, by different (or the same) processing systems.
- a computer may be any processor in communication with a memory.
- Memory 904 is typically provided in device 900 for access by the processor 902, and may be any suitable processor-readable storage medium, such as random access memory (RAM), read-only memory (ROM), Electrical Erasable Read-only Memory (EEPROM), Flash memory, etc., suitable for storing instructions for execution by the processor, and located separate from processor 902 and/or integrated therewith.
- Memory 904 can store software operating on the server device 900 by the processor 902, including an operating system 908, machine-learning application 930, other applications 912, and application data 914.
- Other applications 912 may include applications such as a data display engine, web hosting engine, image display engine, notification engine, social networking engine, etc.
- the machine-learning application 930 and other applications 912 can each include instructions that enable processor 902 to perform functions described herein, e.g., some or all of the methods of Figs. 2, 3, 4, and 7.
- Other applications 912 can include, e.g., image editing applications, media display applications, communication applications, web hosting engines or applications, mapping applications, media sharing applications, etc.
- One or more methods disclosed herein can operate in several environments and platforms, e.g., as a stand-alone computer program that can run on any type of computing device, as a web application having web pages, as a mobile application ("app") run on a mobile computing device, etc.
- machine-learning application may utilize Bayesian classifiers, support vector machines, neural networks, or other learning techniques.
- machine-learning application 930 may include a trained model 934, an inference engine 936, and data 932.
- data 932 may include training data, e.g., data used to generate trained model 934.
- training data may include any type of data such as text, images, audio, video, etc.
- Training data may be obtained from any source, e.g., a data repository specifically marked for training, data for which permission is provided for use as training data for machine-learning, etc.
- training data may include such user data.
- data 932 may include permitted data such as images (e.g., photos or other user-generated images), communications (e.g., e-mail; chat data such as text messages, voice, video, etc.), documents (e.g., spreadsheets, text documents, presentations, etc.)
- images e.g., photos or other user-generated images
- communications e.g., e-mail; chat data such as text messages, voice, video, etc.
- documents e.g., spreadsheets, text documents, presentations, etc.
- data 932 may include collected data such as map data, image data (e.g., satellite imagery, overhead imagery, etc.), game data, etc.
- training data may include synthetic data generated for the purpose of training, such as data that is not based on user input or activity in the context that is being trained, e.g., data generated from simulated conversations, computer-generated images, etc.
- machine- learning application 930 excludes data 932.
- the trained model 934 may be generated, e.g., on a different device, and be provided as part of machine- learning application 930.
- the trained model 934 may be provided as a data file that includes a model structure or form, and associated weights.
- Inference engine 936 may read the data file for trained model 934 and implement a neural network with node connectivity, layers, and weights based on the model structure or form specified in trained model 934.
- Machine-learning application 930 also includes a trained model 934.
- the trained model may include one or more model forms or structures.
- model forms or structures can include any type of neural -network, such as a linear network, a deep neural network that implements a plurality of layers (e.g., "hidden layers" between an input layer and an output layer, with each layer being a linear network), a convolutional neural network (e.g., a network that splits or partitions input data into multiple parts or tiles, processes each tile separately using one or more neural-network layers, and aggregates the results from the processing of each tile), a sequence-to-sequence neural network (e.g., a network that takes as input sequential data, such as words in a sentence, frames in a video, etc.
- a convolutional neural network e.g., a network that splits or partitions input data into multiple parts or tiles, processes each tile separately using one or more neural-network layers, and aggregates the results from the processing of each tile
- the model form or structure may specify connectivity between various nodes and organization of nodes into layers.
- nodes of a first layer e.g., input layer
- Such data can include, for example, one or more pixels per node, e.g., when the trained model is used for image analysis.
- Subsequent intermediate layers may receive as input output of nodes of a previous layer per the connectivity specified in the model form or structure. These layers may also be referred to as hidden layers.
- a final layer (e.g., output layer) produces an output of the machine-learning application.
- the output may be a set of labels for an image, a representation of the image that permits comparison of the image to other images (e.g., a feature vector for the image), an output sentence in response to an input sentence, one or more categories for the input data, etc. depending on the specific trained model.
- model form or structure also specifies a number and/ or type of nodes in each layer.
- trained model 934 can include a plurality of nodes, arranged into layers per the model structure or form.
- the nodes may be computational nodes with no memory, e.g., configured to process one unit of input to produce one unit of output.
- Computation performed by a node may include, for example, multiplying each of a plurality of node inputs by a weight, obtaining a weighted sum, and adjusting the weighted sum with a bias or intercept value to produce the node output.
- the computation performed by a node may also include applying a step/activation function to the adjusted weighted sum.
- the step/activation function may be a non-linear function.
- such computation may include operations such as matrix multiplication.
- computations by the plurality of nodes may be performed in parallel, e.g., using multiple processors cores of a multicore processor, using individual processing units of a GPU, or special-purpose neural circuitry.
- nodes may include memory, e.g., may be able to store and use one or more earlier inputs in processing a subsequent input.
- nodes with memory may include long short- term memory (LSTM) nodes. LSTM nodes may use the memory to maintain "state" that permits the node to act like a finite state machine (FSM). Models with such nodes may be useful in processing sequential data, e.g., words in a sentence or a paragraph, frames in a video, speech or other audio, etc.
- FSM finite state machine
- trained model 934 may include embeddings or weights for individual nodes.
- a model may be initiated as a plurality of nodes organized into layers as specified by the model form or structure.
- a respective weight may be applied to a connection between each pair of nodes that are connected per the model form, e.g., nodes in successive layers of the neural network.
- the respective weights may be randomly assigned, or initialized to default values.
- the model may then be trained, e.g., using data 932, to produce a result.
- training may include applying supervised learning techniques.
- the training data can include a plurality of inputs (e.g., a set of images) and a corresponding expected output for each input (e.g., one or more labels for each image).
- values of the weights are automatically adjusted, e.g., in a manner that increases a probability that the model produces the expected output when provided similar input.
- training may include applying unsupervised learning techniques.
- unsupervised learning only input data may be provided and the model may be trained to differentiate data, e.g., to cluster input data into a plurality of groups, where each group includes input data that are similar in some manner.
- the model may be trained to differentiate images such that the model distinguishes abstract images (e.g., synthetic images, human-drawn images, etc.) from natural images (e.g., photos).
- a model trained using unsupervised learning may cluster words based on the use of the words in input sentences.
- unsupervised learning may be used to produce knowledge representations, e.g., that may be used by machine-learning application 930.
- a trained model includes a set of weights, or embeddings, corresponding to the model structure.
- machine-learning application 930 may include trained model 934 that is based on prior training, e.g., by a developer of the machine-learning application 930, by a third-party, etc.
- trained model 934 may include a set of weights that are fixed, e.g., downloaded from a server that provides the weights.
- Machine-learning application 930 also includes an inference engine 936.
- Inference engine 936 is configured to apply the trained model 934 to data, such as application data 914, to provide an inference.
- inference engine 936 may include software code to be executed by processor 902.
- inference engine 936 may specify circuit configuration (e.g., for a programmable processor, for a field programmable gate array (FPGA), etc.) enabling processor 902 to apply the trained model.
- inference engine 936 may include software instructions, hardware instructions, or a combination.
- inference engine 936 may offer an application programming interface (API) that can be used by operating system 908 and/or other applications 912 to invoke inference engine 936, e.g., to apply trained model 934 to application data 914 to generate an inference.
- API application programming interface
- Machine-learning application 930 may provide several technical advantages. For example, when trained model 934 is generated based on unsupervised learning, trained model 934 can be applied by inference engine 936 to produce knowledge representations (e.g., numeric representations) from input data, e.g., application data 914. For example, a model trained for image analysis may produce representations of images that have a smaller data size (e.g., 1 KB) than input images (e.g., 10 MB). In some implementations, such representations may be helpful to reduce processing cost (e.g., computational cost, memory usage, etc.) to generate an output (e.g., a label, a classification, a sentence descriptive of the image, etc.).
- processing cost e.g., computational cost, memory usage, etc.
- such representations may be provided as input to a different machine-learning application that produces output from the output of inference engine 936.
- knowledge representations generated by machine-learning application 930 may be provided to a different device that conducts further processing, e.g., over a network.
- providing the knowledge representations rather than the images may provide a technical benefit, e.g., enable faster data transmission with reduced cost.
- a model trained for clustering documents may produce document clusters from input documents. The document clusters may be suitable for further processing (e.g., determining whether a document is related to a topic, determining a classification category for the document, etc.) without the need to access the original document, and therefore, save computational cost.
- machine-learning application 930 may be implemented in an offline manner.
- trained model 934 may be generated in a first stage, and provided as part of machine-learning application 930.
- machine- learning application 930 may be implemented in an online manner.
- an application that invokes machine-learning application 930 e.g., operating system 908, one or more of other applications 912
- System logs may be produced periodically, e.g., hourly, monthly, quarterly, etc. and may be used, with user permission, to update trained model 934, e.g., to update embeddings for trained model 934.
- machine-learning application 930 may be implemented in a manner that can adapt to particular configuration of device 900 on which the machine-learning application 930 is executed. For example, machine-learning application 930 may determine a computational graph that utilizes available computational resources, e.g., processor 902. For example, if machine-learning application 930 is implemented as a distributed application on multiple devices, machine-learning application 930 may determine computations to be carried out on individual devices in a manner that optimizes computation. In another example, machine- learning application 930 may determine that processor 902 includes a GPU with a particular number of GPU cores (e.g., 1000) and implement the inference engine accordingly (e.g., as 1000 individual processes or threads).
- processor 902 includes a GPU with a particular number of GPU cores (e.g., 1000) and implement the inference engine accordingly (e.g., as 1000 individual processes or threads).
- machine-learning application 930 may implement an ensemble of trained models.
- trained model 934 may include a plurality of trained models that are each applicable to same input data.
- machine-learning application 930 may choose a particular trained model, e.g., based on available computational resources, success rate with prior inferences, etc.
- machine-learning application 930 may execute inference engine 936 such that a plurality of trained models is applied.
- machine-learning application 930 may combine outputs from applying individual models, e.g., using a voting-technique that scores individual outputs from applying each trained model, or by choosing one or more particular outputs.
- machine-learning application may apply a time threshold for applying individual trained models (e.g., 0.5 ms) and utilize only those individual outputs that are available within the time threshold. Outputs that are not received within the time threshold may not be utilized, e.g., discarded.
- time threshold for applying individual trained models (e.g., 0.5 ms) and utilize only those individual outputs that are available within the time threshold. Outputs that are not received within the time threshold may not be utilized, e.g., discarded.
- such approaches may be suitable when there is a time limit specified while invoking the machine-learning application, e.g., by operating system 908 or one or more applications 912.
- machine-learning application 930 can produce different types of outputs.
- machine-learning application 930 can provide representations or clusters (e.g., numeric representations of input data), labels (e.g., for input data that includes images, documents, etc.), phrases or sentences (e.g., descriptive of an image or video, suitable for use as a response to an input sentence, etc.), images (e.g., generated by the machine-learning application in response to input), audio or video (e.g., in response an input video, machine-learning application 930 may produce an output video with a particular effect applied, e.g., rendered in a comic-book or particular artist's style, when trained model 934 is trained using training data from the comic book or particular artist, etc.
- representations or clusters e.g., numeric representations of input data
- labels e.g., for input data that includes images, documents, etc.
- phrases or sentences e.g., descriptive of an image or video, suitable for use as a response to an input sentence
- machine-learning application 930 may produce an output based on a format specified by an invoking application, e.g. operating system 908 or one or more applications 912.
- an invoking application may be another machine-learning application.
- such configurations may be used in generative adversarial networks, where an invoking machine-learning application is trained using output from machine-learning application 930 and vice-versa.
- memory 904 can alternatively be stored on any other suitable storage location or computer-readable medium.
- memory 904 (and/or other connected storage device(s)) can store one or more messages, one or more taxonomies, electronic encyclopaedia, dictionaries, thesauruses, knowledge bases, message data, grammars, user preferences, and/or other instructions and data used in the features described herein.
- Memory 904 and any other type of storage can be considered “storage” or “storage devices.
- I/O interface 906 can provide functions to enable interfacing the server device 900 with other systems and devices.
- Interfaced devices can be included as part of the device 900 or can be separate and communicate with the device 900.
- network communication devices e.g., network communication devices, storage devices (e.g., memory and/or database 106), and input/output devices can communicate via I/O interface 906.
- the I/O interface can connect to interface devices such as input devices (keyboard, pointing device, touchscreen, microphone, camera, scanner, sensors, etc.) and/or output devices (display devices, speaker devices, printers, motors, etc.).
- Some examples of interfaced devices that can connect to I/O interface 906 can include one or more display devices 920 that can be used to display content, e.g., images, video, and/or a user interface of an output application as described herein.
- Display device 920 can be connected to device 900 via local connections (e.g., display bus) and/or via networked connections and can be any suitable display device.
- Display device 920 can include any suitable display device such as an LCD, LED, or plasma display screen, CRT, television, monitor, touchscreen, 3-D display screen, or other visual display device.
- display device 920 can be a flat display screen provided on a mobile device, multiple display screens provided in a goggles or headset device, or a monitor screen for a computer device.
- the I/O interface 906 can interface to other input and output devices. Some examples include one or more cameras which can capture images. Some implementations can provide a microphone for capturing sound (e.g., as a part of captured images, voice commands, etc.), audio speaker devices for outputting sound, or other input and output devices.
- Fig. 9 shows one block for each of processor 902, memory 904, I/O interface 906, and software blocks 908, 912, and 930. These blocks may represent one or more processors or processing circuitries, operating systems, memories, I/O interfaces, applications, and/or software modules.
- device 900 may not have all of the components shown and/or may have other elements including other types of elements instead of, or in addition to, those shown herein. While some components are described as performing blocks and operations as described in some implementations herein, any suitable component or combination of components of environment 100, device 900, similar systems, or any suitable processor or processors associated with such a system, may perform the blocks and operations described.
- Methods described herein can be implemented by computer program instructions or code, which can be executed on a computer.
- the code can be implemented by one or more digital processors (e.g., microprocessors or other processing circuitry) and can be stored on a computer program product including a non-transitory computer readable medium (e.g., storage medium), such as a magnetic, optical, electromagnetic, or semiconductor storage medium, including semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), flash memory, a rigid magnetic disk, an optical disk, a solid-state memory drive, etc.
- a non-transitory computer readable medium e.g., storage medium
- a magnetic, optical, electromagnetic, or semiconductor storage medium including semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), flash memory, a rigid magnetic disk, an optical disk, a solid-state memory drive, etc.
- the program instructions can also be contained in, and provided as, an electronic signal, for example in the form of software as a service (SaaS) delivered from a server (e.g., a distributed system and/or a cloud computing system).
- SaaS software as a service
- a server e.g., a distributed system and/or a cloud computing system
- one or more methods can be implemented in hardware (logic gates, etc.), or in a combination of hardware and software.
- Example hardware can be programmable processors (e.g. Field-Programmable Gate Array (FPGA), Complex Programmable Logic Device), general purpose processors, graphics processors, Application Specific Integrated Circuits (ASICs), and the like.
- FPGA Field-Programmable Gate Array
- ASICs Application Specific Integrated Circuits
- One or more methods can be performed as part of or component of an application running on the system, or as an application or software running in conjunction with other applications and operating system.
- users are provided with one or more opportunities to control whether information is collected, whether the personal information is stored, whether the personal information is used, and how the information is collected about the user, stored and used. That is, the systems and methods discussed herein collect, store and/or use user personal information specifically upon receiving explicit authorization from the relevant users to do so. For example, a user is provided with control over whether programs or features collect user information about that particular user or other users relevant to the program or feature.
- Each user for which personal information is to be collected is presented with one or more options to allow control over the information collection relevant to that user, to provide permission or authorization as to whether the information is collected and as to which portions of the information are to be collected.
- users can be provided with one or more such control options over a communication network.
- certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed.
- a user's identity may be treated so that no personally identifiable information can be determined.
- a user device's geographic location may be generalized to a larger region so that the user's particular location cannot be determined.
- routines may be integrated or divided into different combinations of systems, devices, and functional blocks as would be known to those skilled in the art.
- Any suitable programming language and programming techniques may be used to implement the routines of particular implementations. Different programming techniques may be employed, e.g., procedural or object-oriented.
- the routines may execute on a single processing device or multiple processors.
- steps, operations, or computations may be presented in a specific order, the order may be changed in different particular implementations. In some implementations, multiple steps or operations shown as sequential in this specification may be performed at the same time.
Abstract
Implementations relate to causing a command to be executed based on an image. In some implementations, a computer-implemented method includes obtaining and programmatically analyzing an image to determine suggested actions. The method causes a user interface to be displayed that includes user interface elements corresponding to default actions, and to suggested actions that are determined based on analyzing the image. The method receives user input indicative of selection of a particular action from the default actions and the suggested actions. The method causes a command to be executed by a computing device for the particular action that was selected.
Description
SUGGESTED ACTIONS FOR IMAGES
RELATED APPLICATIONS
[001] This application claims the benefit of U.S. Application No. 62/507,048, entitled "SUGGESTED ACTIONS FOR IMAGES", and filed on May 16, 2017, which is incorporated herein by reference in its entirety.
BACKGROUND
[002] The widespread availability of digital image capture devices, e.g., digital cameras, smartphones, wearable cameras, computers with built-in cameras, etc. has led to the capture of an order of magnitude greater number of images than with film cameras. Capture of images and storage of captured images is inexpensive owing to the relatively low cost of such devices and storage. While film cameras were typically restricted to certain uses, e.g., professional photography, family or business events, travel photography, etc., modern digital cameras are used for many other purposes. For example, sharing captured images via social networks, image sharing applications, or messaging applications is a popular activity. Further, images are also captured for recordkeeping, reminders, and reference purposes (e.g., a receipt, a note, a picture of a product, etc.).
[003] The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.
SUMMARY
[004] Implementations of the present application relate to techniques to analyze an image provide suggested actions, and execute a command based on user input indicative of selection of
a particular action. In some implementations, a computer-implemented method includes obtaining an image, programmatically analyzing the image to determine one or more suggested actions for the image, and causing a user interface to be displayed. The user interface includes the image, a plurality of first user interface elements each corresponding to a respective default action of one or more default actions, and one or more second user interface elements each corresponding to a respective suggested action of the one or more suggested actions. The method includes receiving user input indicative of selection of a particular action from one of: the one or more default actions or the one or more suggested actions. In response to receiving the user input, the method causes a command for the particular action to be executed.
[005] Various implementations and examples of the method are described. In some implementations, programmatically analyzing the image includes applying a classifier to the image to determine one or more categories for the image. The one or more categories may be associated with at least one of the one or more suggested actions. In some implementations, programmatically analyzing the image includes sending a representation of the image to a server; and receiving a response from the server that includes at least one of the one or more suggested actions. In some implementations, sending the representation to the server includes sending an image thumbnail that has a smaller data size than the image. In some implementations, programmatically analyzing the image comprises determining a parameter for the command based on mage data that includes values of a plurality of pixels of the image and/ or image metadata. In some implementations, the command is associated with a software application. In these implementations, causing the command to be executed includes invoking the software application with the parameter.
[006] In some implementations, obtaining the image comprises detecting that the image has been captured based on detecting activation of a camera and/or receiving a notification from an operating system that the image has been written to a local memory. In some implementations, the method further includes generating the user interface within a threshold time after detecting that the image has been captured. In some implementations, the user interface is generated by an application different from a camera application that captured the image. In some implementations, the user interface is displayed over a camera user interface of a camera application.
[007] In some implementations, the one or more default actions include sharing the image, archiving the image, and performing a visual search based on the image. In some implementations, programmatically analyzing the image includes identifying at least two distinct portions of the image. In these implementations, the suggested actions include at least two actions that are each associated with a respective portion of the at least two distinct portions.
[008] In some implementations, a computer-implemented method includes obtaining an image and programmatically analyzing the image to determine a plurality of image features. The method further includes determining a category for the image based on the plurality of image features. In some implementations, the category is associated with an action. In some implementations, the method includes causing the action to be performed. The method further includes causing a user interface to be displayed. The user interface includes the image and an indication that the action was performed.
[009] In various implementations, the method includes to cause the user interface to be displayed includes highlighting a portion of the image. The highlighted portion of the image corresponds to the category. In some implementations, the method includes storing the image and the category such that the image is included in an image group for the category. In some implementations, the method determines the category by applying an image classifier trained to identify the category for the image from a plurality of categories. In some implementations, applying the image classifier includes generating a confidence score for the image for each of the plurality of categories and identifying the category based on determination that the confidence score for the category meets a confidence threshold.
[0010] In some implementations, determining the category comprises determining that the image includes contact information. In these implementations, the method further includes extracting one or more of an e-mail address, a phone number, a physical address, and/or a social media address from the image, wherein the action is to add a contact in an address book based on the extracting. In some implementations, determining the category comprises determining that the image includes a media item. In these implementations, the action includes adding the media item to a wishlist, adding the media item to a playlist, or purchasing the media item.
[0011] In some implementations, a computer-implemented method includes obtaining a plurality of images and programmatically analyzing the plurality of images to determine a plurality of image features. The method includes determining one or more image categories for the plurality of images based on the plurality of image features. The method includes identifying a subset of the plurality of images based on the one or more image categories. Each image in the subset of the plurality of images is associated with an image category for archival. The method further includes causing a user interface to be displayed that includes one or more images of the subset, receiving first user input to archive at least one of the one or more images of the subset; and in response to the first user input, removing the at least one of the one or more images of the subset from a view of the plurality of images.
[0012] In some implementations, the method includes updating metadata of each image in the subset with respective one or more image categories for the image. In some implementations, the method includes storing image identifiers and the one or more image categories for the plurality of images in a database, receiving second user input indicative of selection of a particular category of the one or more image categories and in response to receiving the second user input, performing a database lookup to identify one or more images for the particular category based on the image identifiers and the one or more image categories, and causing the one or more images for the particular category to be displayed. In some implementations, the image category for archival includes one or more of document, meme, and/or screenshot. In some implementations, determining the one or more image categories includes applying an image classifier trained to classify input images as a document, meme, and/or screenshot. In some implementations, the input images are classified based on metadata of the input images and/or pixel values of the input images.
[0013] In some implementations, a system comprises one more hardware processors and a storage device, configured to perform operations comprising a method according to any implementation or aspect described herein.
[0014] In some implementations, a computer-readable storage medium (which may be non- transitory computer-readable storage medium) stores instructions that, when executed by a processor, cause the processor to perform operations comprising a method according to any implementation or aspect described herein.
BRIEF DESCRIPTION OF THE DRAWINGS
[0015] Fig. 1 is a block diagram of an example network environment which may be used for one or more implementations described herein;
[0016] Fig. 2 is a flow diagram illustrating an example method to analyze an image, according to some implementations;
[0017] Fig. 3 is a flow diagram illustrating an example method to display suggested actions and execute commands, according to some implementations;
[0018] Fig. 4 is a flow diagram illustrating an example method to select and execute an application based on an image, according to some implementations;
[0019] Fig. 5A is a diagrammatic illustration of an example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
[0020] Fig. 5B is a diagrammatic illustration of another example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
[0021] Fig. 5C is a diagrammatic illustration of another example user interface that includes an image with a plurality of default actions and suggested actions, according to some implementations;
[0022] Fig. 6 is a diagrammatic illustration of an example user interface that includes an image and an indication that than an action was performed, according to some implementations;
[0023] Fig. 7 is a flow diagram illustrating an example method to archive images, according to some implementations;
[0024] Fig. 8A is a diagrammatic illustration of an example user interface, according to some implementations;
[0025] Fig. 8B is a diagrammatic illustration of another example user interface, according to some implementations;
[0026] Fig. 8C is a diagrammatic illustration of another example user interface, according to some implementations; and
[0027] Fig. 9 is a block diagram of an example device which may be used for one or more implementations described herein.
DETAILED DESCRIPTION
[0028] With the easy availability and low cost of cameras (e.g., in smartphones, tablets, laptop computers, and other devices), and use of applications such as messaging applications, e-mail applications, social media applications, etc., users may acquire image collections that include thousands of images. For example, users may utilize images as to-do lists, as reminders, etc. Techniques used for image management, e.g., image gallery or image management software, do not take into account such user behavior. For example, while such techniques enable users to enhance images, organize images into image albums, etc., the techniques do not provide assistance to the user. Further, such techniques do not recognize different categories of images or user intent for use of images, e.g., as input to a computing device.
[0029] A technical problem in image management is to recognize image content and determine user intent to capture or store an image. For example, if a user takes images of documents, a user intent may be to store the image in an archive, e.g., that is accessible even when the user no longer possesses an original document. In another example, if a user takes images of media items, e.g., books or media covers, a user intent may be for the image to serve as a reminder to read the book, or view the media, etc. In another example, if a user takes a picture of a handwritten note, or a whiteboard, a user intent may be to add text content from the picture to a to-do list or a notes application. In another example, if a user receives an image via a messaging application, e.g., a humorous image, a greeting, etc., a user may no longer want to access the image once it has been viewed. In these examples, users capture or otherwise obtain images as an alternative to manual input, e.g., manually typing a title of a book into a wishlist, adding a reminder, etc.
[0030] One or more implementations described herein include applying an image classifier to determine image features, image categories, and suggested actions for an image. In various implementations, the image classifier may be implemented such that it can recognize image categories for any input image. For example, the image classifier may be a machine-learning application that implements a trained model and an inference engine. The trained model enables the inference engine to recognize features from any input image and determine one or more image categories.
[0031] In some implementations, a suggestion application may be implemented that determines one or more actions based on analysis of the image, e.g., by the image classifier. In some implementations, the suggestion application may be configured to store a mapping between image categories and one or more applications for an action determined based on the image categories. In some implementations, the suggestion application is configured to determine an available software application (e.g., locally on a user device, a server application, etc.) that can execute a command corresponding to the determined intent. In some implementations, image analysis may also include determining one or more parameters (e.g., text extracted from the image, an identifier of an object or landmark depicted in the image, etc.) that may be used to invoke the software applications. In that manner, the task of determining the applications and the one or more parameters is automated such that the user is freed from this task and so that user interaction and invocation of an application with respective parameters can occur more quickly.
[0032] One or more implementations aid users to manage image collections, e.g., collections of photos, videos, etc. Implementations provided herein assist users to manage image collections, enable use of images as input, e.g., as actionable objects, and automate tasks. The implementations provide benefits by automatically recognizing image content, facilitating input of data to a computing device by reducing requirements of manual data entry, and reducing cognitive burden in managing large image collections.
[0033] In some implementations, one or more images are obtained by a computing device e.g., photos or videos captured using a smartphone camera application, received via a messaging application, etc. Obtained images are programmatically analyzed to determine image features and to determine one or more image categories for the image, e.g., document, receipt, business card,
book cover, etc. In some implementations, programmatically analyzing the image may include applying an image classifier (e.g., a machine-learning classifier) that is configured to determine such categories. In some implementations, a confidence score is generated for the determined image categories, e.g., by the image classifier. In some implementations, optical character recognition (OCR), including machine-learning based OCR techniques (e.g., using LSTM nodes) are applied to recognize portions of the image, e.g., as text, barcode, quick response (QR) code, etc.
[0034] In some implementations, images may be recognized as including actionable objects. In response to such recognition, one or more suggested actions, e.g., call a phone number extracted from the image, buy a product depicted in the image using a shopping application, open a website with information about a landmark recognized in the image, etc. are provided in a user interface. In some implementations, parameters for the suggested action are determined based on the image, e.g., a book title, an object or a landmark in the image, etc. User interfaces are provided which enable users to select one or more of the suggested actions. In response to user selection of a suggested action, an application (e.g., a software application on a client device) is invoked, e.g., a command is executed with the one or more determined parameters. For example, if the user provides input indicative of selection of a suggestion to call a phone number, a dialer application is invoked to place a call to the phone number. In this manner, techniques disclosed herein enable images to act as input to a device and enable the user to perform actions (and/or enables actions to be performed by a user device) based on images without having to enter data (e.g., phone number) manually using an input device such as a touchscreen, a keyboard/mouse, or by voice input.
[0035] In some implementations, one or more actions may be determined based on image categories for an image. Based on user preferences, the one or more actions may be performed automatically and an indication that the action was performed may be provided in a user interface. In some implementations, the actions may include archiving the image such that the image is not included in a view (e.g., a chronological view) of images, storing data recognized from the image, e.g., adding a contact to an address book based on information from an image of a business card, invoking an application to perform a task based on the image, e.g., to add a book to a wishlist, etc. In some implementations, archiving the image may remove it from a chronological view of images. In some implementations, archiving the image can remove that image from a set of images that
are displayed and/or displayable (and/or eligible to be displayed) in a view of a graphical user interface. These implementations may provide a user benefit of reducing clutter by removing images that are associated with image categories, e.g., duplicate images, images of documents, memes, etc. and enable the user to focus on images that are likely of interest. These implementations may provide technical advantages of reducing the consumption of device resources (e.g., display memory or other memory/storage, processor operations, power consumption, etc.) utilized to display images that would be removed from display when using one or more disclosed techniques.
[0036] Additional features include providing a user interface within a threshold time upon capture of an image. The user interface enables a user to select from one or more default actions and/or one or more suggested actions, or provides indications of actions performed based on the captured image. In some implementations, the user interface may be generated by an application separate from a camera application that was used to capture the image. In some implementations, the user interface may be provided at a time after the image capture, e.g., when a user reviews images using an image management application such as an image gallery. These implementations may provide technical advantages of reducing the consumption of device resources (e.g., memory or other storage, processor operations, power consumption, etc.) utilized for management of images and determination/reception of user input on a device, e.g., by offering relevant and useful actions and suggestions for selection, without the user having to browse images, call up interface menus and provide input to such menus, and/or initiate other involved device operations that consume device resources.
[0037] Fig. 1 illustrates a block diagram of an example network environment 100, which may be used in some implementations described herein. In some implementations, network environment 100 includes one or more server systems, e.g., server system 102 and second server system 140 in the example of Fig. 1. Server systems 102 and 140 can communicate with a network 130, for example. Server system 102 can include a server device 104 and a database 106 or other storage device. In some implementations, server device 104 may provide an image classifier 156b and/or a suggestion application 158b. Second server system 140 can include a second server device 142, configured to provide one or more applications, e.g., application A 144, application B 146, and application C 148. Network environment 100 also can include one or more client devices,
e.g., client devices 120, 122, 124, and 126, which may communicate with each other and/or with server system 102 and/or second server system 140 via network 130. Network 130 can be any type of communication network, including one or more of the Internet, local area networks (LAN), wireless networks, switch or hub connections, etc. In some implementations, network 130 can include peer-to-peer communication between devices, e.g., using peer-to-peer wireless protocols (e.g., Bluetooth®, Wi-Fi Direct, etc.), etc. One example of peer-to-peer communications between two client devices 120 and 122 is shown by arrow 132.
[0038] For ease of illustration, Fig. 1 shows one block for server system 102, server device 104, database 106, second server system 140, and second server device 142, and shows four blocks for client devices 120, 122, 124, and 126. Server blocks 102, 104, 106, 140, and 142 may represent multiple systems, server devices, and network databases, and the blocks can be provided in different configurations than shown. For example, server system 102 and/or second server system 140 can represent multiple server systems that can communicate with other server systems via the network 130. In some implementations, server system 102 and/or second server system 140 can include cloud hosting servers, for example. In some examples, database 106 and/or other storage devices can be provided in server system block(s) that are separate from server device 104 and can communicate with server device 104 and other server systems via network 130. Also, there may be any number of client devices. Each client device can be any type of electronic device, e.g., desktop computer, laptop computer, portable or mobile device, cell phone, smart phone, tablet computer, television, TV set top box or entertainment device, wearable devices (e.g., display glasses or goggles, wristwatch, headset, armband, jewelry, etc.), personal digital assistant (PDA), media player, game device, etc. Some client devices may also have a local database similar to database 106 or other storage. In some implementations, network environment 100 may not have all of the components shown and/or may have other elements including other types of elements instead of, or in addition to, those described herein.
[0039] In various implementations, end-users Ul, U2, U3, and U4 may communicate with server system 102 and/or each other using respective client devices 120, 122, 124, and 126. In some examples, users Ul, U2, U3, and U4 may interact with each other via applications running on respective client devices and/or server system 102 or second server system 140, and/or via a network service, e.g., a social network service or other type of network service, implemented on
server system 102 or second server system 140. For example, respective client devices 120, 122, 124, and 126 may communicate data to and from one or more server systems (e.g., system 102, second server system 140). In some implementations, the server system 102 and/or second server system 140 may provide appropriate data to the client devices such that each client device can receive communicated content or shared content uploaded to the server system 102 or second server system 140 and/or network service. In some examples, users U1-U4 can interact via audio or video conferencing, audio, video, or text chat, or other communication modes or applications. A network service implemented by server system 102 or second server system 140 can include a system allowing users to perform a variety of communications, form links and associations, upload and post shared content such as images, text, video, audio, and other types of content, and/or perform other functions. For example, a client device can display received data such as content posts sent or streamed to the client device and originating from a different client device via a server and/or network service (or from the different client device directly), or originating from a server system and/or network service. In some implementations, client devices can communicate directly with each other, e.g., using peer-to-peer communications between client devices as described above. In some implementations, a "user" can include one or more programs or virtual entities, as well as persons that interface with the system or network.
[0040] In some implementations, any of client devices 120, 122, 124, and/or 126 can provide one or more applications. For example, as shown in Fig. 1, client device 120 may provide camera application 152, image classifier 156a, suggestion application 158a, and one or more other applications 154. Client devices 122-126 may also provide similar applications. For example, camera application 152 may provide a user of a respective client device (e.g., users U1-U4 with the ability to activate and utilize a camera (not shown) of client device 122 to capture an image and/or video. For example, camera application 152 may be a software application that executes on client device 120. In some implementations, camera application 152 may provide a camera user interface. In some implementations, the camera user interface of camera application 152 may provide user Ul with an option to choose a particular camera on client device 120, e.g., if client device 120 has a plurality of cameras, e.g., a front camera and a back camera. Further, the camera user interface of camera application 152 may provide user Ul with the ability to control one or more settings of the chosen camera, e.g., an aperture, a shutter speed, a zoom level, etc. The camera user interface of camera application 152 may also provide user Ul with the ability to
control an operational mode, e.g., a slow-motion mode, a single-image capture mode, a video capture mode, etc. In some implementations, camera application 152 may provide users with options related to image settings (e.g., image resolution, image size, image orientation, image format such as raw, JPEG, etc.) and/or image effects (e.g., a lens blur effect, a panorama effect, etc.). In some implementations, camera application 152 may provide access to settings, operational modes, image processing effects, etc. via a user interface, e.g., displayed on client device 120. Images and/or video captured by a camera of client device 120 may be stored, e.g., in local storage of client device 120, and/or storage provided by server system 102 or second server system 140.
[0041] In some implementations, client device 120 may include image classifier 156a. Image classifier 156a may be implemented using hardware and/or software of client device 120, as described with reference to Fig. 9. In different implementations, image classifier 156a may be a standalone image classifier, e.g., executed on any of client devices 120-124, or may work in conjunction with image classifier 156b provided on server system 102. Image classifier 156a and image classifier 156b may provide image analysis functions.
[0042] In some implementations, client device 120 may also include suggestion application 158a. Suggestion application 158b may be implemented using hardware and/or software of client device 120. In different implementations, suggestion application 158a may be a standalone application, e.g., executed on any of client devices 120-124, or may work in conjunction with suggestion application 158b provided on server system 102. Suggestion application 158a and suggestion application 158b may provide one or more suggestions with reference to an image, e.g., an image captured by client device 120, an image stored on client device 120, an image accessed by client 120, e.g., over network 130, etc.
[0043] In some implementations, client device 120 may include one or more other applications 154. For example, other applications 154 may be applications that provide various types of functionality, e.g., calendar, address book, e-mail, web browser, shopping, transportation (e.g., taxi, train, airline reservations, etc.), entertainment (e.g., a music player, a video player, a gaming application, etc.), social networking (e.g., messaging or chat, audio/video calling, sharing images/ video, etc.) and so on. In some implementations, one or more of other applications 154 may be
standalone applications that execute on client device 120. In some implementations, one or more of other applications 154 may access a server system, e.g., second server system 140, that provides data and/or functionality of applications 154. For example, any of applications 144, 146, and 148, shown as being provided by second server system 140 may provide data and/or commands to one or more of other applications 154. In some implementations, server applications 144-148 may be standalone applications that are accessed by a client device, e.g., via a web-browser, or other client- side program.
[0044] A user interface on a client device 120, 122, 124, and/or 126 can enable display of user content and other content, including images, video, data, and other content as well as communications, privacy settings, notifications, and other data. Such a user interface can be displayed using software on the client device, software on the server device, and/or a combination of client software and server software executing on server device 104 and/or second server device 142, e.g., application software or client software in communication with server system 102 and/or second server device 142. The user interface can be displayed by a display device of a client device or server device, e.g., a touchscreen or other display screen, projector, etc. In some implementations, application programs running on a server system can communicate with a client device to receive user input at the client device and to output data such as visual data, audio data, etc. at the client device.
[0045] In some implementations, any of server system 102, second server system 140, and/or one or more client devices 120-126 can provide a communication application program. The communication program may allow a system (e.g., client device or server system) to provide options for communicating with other devices. The communication program can provide one or more associated user interfaces that are displayed on a display device associated with the server system or client device. The user interface may provide various options to a user to select communication modes, users or devices with which to communicate, etc. In some examples, the communication program can provide an option to broadcast a content post to a broadcast area, and/or can output a notification indicating that a content post has been received by the device and the device is in the defined broadcast area for the post. The communication program can display or otherwise output transmitted content posts and received content posts, e.g., in any of a variety of formats.
[0046] Other implementations of features described herein can use any type of system and/or service. For example, other networked services (e.g., connected to the Internet) can be used instead of or in addition to a social networking service. Any type of electronic device can make use of features described herein. Some implementations can provide one or more features described herein on one or more client or server devices disconnected from or intermittently connected to computer networks. In some examples, a client device including or connected to a display device can display content posts stored on storage devices local to the client device, e.g., received previously over communication networks.
[0047] Fig. 2 is a flow diagram illustrating one example of a method 200 to analyze an image, according to some implementations. In some implementations, method 200 can be implemented, for example, on a server system 102 as shown in Fig. 1. In some implementations, some or all of the method 200 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s). In described examples, the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage). In some implementations, different components of one or more servers and/or clients can perform different blocks or other parts of the method 200. In some examples, a first device is described as performing blocks of method 200. Some implementations can have one or more blocks of method 200 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
[0048] In some implementations, the method 200, or portions of the method, can be initiated automatically by a system. In some implementations, the implementing system is a first device. For example, the method (or portions thereof) can be periodically performed, or performed based on one or more particular events or conditions, e.g., an application being initiated by a user, receiving one or more images that have been newly uploaded to or accessible by the system, a predetermined time period having expired since the last performance of method 200, and/or one or more other conditions occurring which can be specified in settings read by the method. In some implementations, such conditions can be specified by a user in stored custom preferences of the user.
[0049] In one example, the first device can be a camera, cell phone, smartphone, tablet computer, wearable device, or other client device that can receive content input (e.g., image capture) by a user to the client device, and can perform the method 200. In another example, a client device or server device can receive one or more images uploaded from one or more users or received over a network connection, and can perform the method 200 for the one or more images. In another example, a client device can send an image to a server over a network, and the server can process the content using method 200. Some implementations can initiate method 200 based on user input. A user (e.g., operator or end-user) may, for example, have selected the initiation of the method 200 from a displayed user interface, e.g., application user interface or other user interface. In some implementations, method 200 may be implemented by a client device, e.g., in an image classifier 156a (local classifier) and a suggestion application 158a. In some implementations, method 200 may be implemented by a server device, e.g., in an image classifier 156b (local classifier) and a suggestion application 158b.
[0050] An image as referred to herein can include a digital image having pixels with one or more pixel values (e.g., color values, brightness values, etc.). An image can be a still image (e.g., still photos, images with a single frame, etc.), a dynamic image (e.g., animations, animated GIFs, cinemagraphs where a portion of the image includes motion while other portions are static, etc.) and a video (e.g., a sequence of images or image frames that may include audio). While the remainder of this document refers to an image as a static image, it may be understood that the techniques described herein are applicable for dynamic images, video, etc. For example, implementations described herein can be used with still images (e.g., a photograph, an emoji, or other image), videos, or dynamic images Text, as referred to herein, can include alphanumeric characters, emojis, symbols, or other characters.
[0051] In block 202 of method 200, a coarse-grained classifier is applied to an image. In some implementations, coarse-grained classifier may be a component of image classifier 156a on a client device. Coarse-grained may refer to a relative level of classification in a semantic hierarchy that is organized into classes and subclasses. For example, a semantic hierarchy may be animals- >mammals->bears->polar bear, where "animals" is a coarse-grained classification and "polar bear" is a fine-grained classification. The coarse-grained classifier may be implemented in a manner that it can perform image analysis to determine whether the image is suitable for a
suggested action or automatic execution of a command. In an example implementation, the coarsegrained classifier provides a binary determination, e.g., that an image is suitable for a suggested action or automatic execution of a command ("suitable"), or that the image is not suitable for either suggested action or automatic execution of a command ("not suitable"). The coarse-grained classifier may be implemented using any suitable image analysis technique, e.g., machine- learning.
[0052] In an example scenario, an image analyzed by the coarse-grained classifier may be a photo of a scene, e.g., a crowd at a public place. In this example, the coarse-grained classifier may determine that the image is not suitable for a suggested action or automatic execution of an application. For example, the coarse-grained classifier may be trained, e.g., using a training set of images that include both suitable and unsuitable images to classify an image as suitable or unsuitable. In various examples, images suitable for a suggested action or automatic execution of an application may include images that include one or more of a human face, a media item (e.g., a book, a media cover such as vinyl/CD/DVD cover), a building, one more natural features (e.g., a tree, a mountain, etc.), a business card, a document (e.g., a recipe, a driver's license, passport, student id, etc.), text in one or more languages, etc. In various examples, unsuitable images may include, for example, a synthetic or computer-generated image, an image that has no features detectable by the coarse-grained classifier, a blank image, an out-of-focus image, etc. For example, if the user takes a photo of a sunset, the coarse-grained classifier may not detect an object in the image, and therefore the image may be determined as unsuitable.
[0053] In block 204, it is determined if the image is detected by the coarse-grained classifier as suitable or unsuitable. If the image is unsuitable, the method proceeds to block 230. At block 230, method 200 may provide an indication, e.g., to a calling application that invokes method 200, that the image is not suitable for categorization, suggested actions, or for automatic execution of an application. In some implementations, the indication may be stored, e.g., as metadata for the image. For example, storing the indication as metadata may be beneficial such that processing is not unnecessarily repeated because the coarse-grained classifier is not applied to an image, where the metadata indicates the image has been previously classified as suitable or unsuitable.
[0054] If it is determined in block 204 that the image is suitable, the method proceeds to block 206. In block 206, one or more optical character recognition (OCR) techniques are applied to detect and/or recognize text in the image. For example, applying OCR techniques may include performing image segmentation, e.g., to identify portions of the image that include text in one or more languages. OCR techniques may detect barcodes/ Quick Response (QR) codes, printed text (e.g., from an image of a printed document, from an image of a media cover, etc.), handwritten text (e.g., from a handwritten note), etc. In some implementations, applying OCR techniques may include comparing one or more portions of the image with images of characters from a known alphabet, e.g., in various fonts. Based on a match of a portion of the image with a character, it may be determined that the portion of the image corresponds to that character.
[0055] In some implementations, applying OCR techniques may include performing OCR using a machine-learning application that includes an inference engine that is trained to perform character, word, or sentence recognition. For example, such machine-learning application may include a trained model (e.g., as a data file) that includes a model structure and weights (e.g., for a neural network) as inputs to an inference engine that can be executed using a processor of a device that implements block 204. In some implementations, there may be more than one trained models, e.g., a model for English language, a model for Russian language, etc.; a model for printed text, a model for handwritten text, a model for unclear text, etc. In some implementations, a single trained model that can handle multiple languages, text typed or written in different fonts, etc. may be provided. In some implementations, applying OCR techniques may include use of a dictionary.
[0056] In some implementations, the coarse-grained classifier of block 202 may provide one or more inputs (e.g., portions of images detected by the coarse-grained classifier as possibly including text) that are utilized when applying OCR. For example, if the coarse-grained classifier indicates portions of the image as not including text, OCR techniques may not be applied to such portions, saving computational cost. In some implementations, e.g., when the coarse-grained classifier determines that the image does not include text, block 206 is not performed. In some implementations, block 206 may be combined with other blocks, e.g., OCR techniques may be applied as part of the coarse-grained classifier of block 202, or OCR techniques may be included in the local classifier as described with reference to block 208.
[0057] In some implementations, OCR techniques may be applied to generate one or more parameters based on the image. For example, OCR techniques may generate as parameters one or more text extracts from the image. For example, when the image includes a business card, OCR techniques may recognize a name, a phone number, an email address, an address, a social network identifier, etc. from the image and provide those as parameters. In another example, when the image includes a bar code or a QR (Quick Response) code, the value of the bar code or the QR code may be provided as a parameter. The method proceeds to block 208.
[0058] In block 208, a local classifier is applied to the image. For example, the local classifier may be applied to the image by a client device that obtained the image, e.g., captured the image with a camera of the client device, received the image over a network, etc. In various implementations, the local classifier may implement one or more techniques to classify an image. For example, such techniques may include image segmentation, object detection and recognition, etc. In some implementations, the local classifier may be a machine-learning application. In these implementations, a trained model is provided, e.g., as a data file. A trained model for a classifier may be trained, e.g., using training data such that the model can be applied to any image to detect one or more image features, and determine one or more categories for the image. For example, training data may include any data such as images and corresponding categories that is permitted for use for training, e.g., synthetic or computer-generated data; data licensed for use for training; etc. A trained model may be trained using a large dataset, e.g., of millions of images, of different types such that a machine-learning application that utilizes an inference engine with the trained model, can detect and categorize an image.
[0059] In some implementations, trained model may be obtained based on supervised learning, e.g., based on training data include images and its corresponding categories. For example, a trained model may include model form or structure (e.g., descriptive of a number and organization of a plurality of nodes into layers of a neural network, with associated weights). In some implementations, trained model may be trained such that an inference engine that applies the trained model can recognize specific categories of images.
[0060] For example, such categories may include documents, receipts, bills, media covers (e.g., book, CD/DVD, vinyl, etc.), posters (e.g., movie posters), advertisements, product labels
(e.g., food labels, wine labels, etc.), business cards, identity documents (e.g., driver's license, passport, etc.), products and brands (e.g., shoes, clothes, etc.), recipes, articles (e.g., in a magazine), whiteboards, offers or coupons, screenshots (e.g., images of a user interface displayed on a device screen) etc.
[0061] In some implementations, image categories may also include memes (e.g., images received via a messaging application or a social network) such as greeting images ("good morning," "hello," etc.), humorous images (e.g., cartoons, jokes, animated GIFs, etc.), motivational quotes, and other images that are commonly shared, e.g., by several people on a social media platform. In some implementations, image categories may further include bad photographs. For example, a photograph that is taken inadvertently, e.g., when a camera is activated due to inadvertent input, such as when the camera is in a user' s pocket, may not depict any subject matter of interest to users. In another example, a photograph that is blurry, underexposed, or out-of-focus may be categorized as a bad photograph.
[0062] In some implementations, image categories may also include duplicates. For example, if the local classifier determines that the image is similar to one or more other images, e.g., that were previously analyzed by the local classifier, the local classifier may determine the category duplicates for all such images. For example, determination that images are duplicates may be based on the local classifier determining that image features are similar, e.g., have similar feature vectors. Such determination may be based on image metadata, if permitted by the user, (e.g., time of capture, location at which the image was captured) and/or pixel values of the image. In some implementations, similarity of image features can be determined based on whether one or more similarity thresholds are met, e.g., a threshold of similarity of image feature vectors, image pixel values, etc.
[0063] In some implementations, trained models may be updated, e.g., based on use of additional training data that enables the model to be trained to recognize additional categories of images, or to improve accuracy and/or speed of applying the model. In some implementations, e.g., when users provide consent to use of user data to update trained models, a trained model may be updated locally, e.g., on a particular client device, based on user activity or response. In these implementations, user data is not transmitted or shared. Further, if the user provides consent,
updates to trained models may be provided over network 130, e.g., to server device 104 or one or more other client devices.
[0064] In some implementations, a trained model may be customized based on a device (e.g., client device 120-124) that the local classifier is executed on. For example, different client devices may have different processing capabilities based on available hardware, e.g., a single-core processor, a multi-core processor, one or more parallel processors, a graphics processor with a number of graphics processing units (GPUs), a reconfigurable processor (e.g., FPGA), a neural network processor, etc. Further, different client devices may have different availability levels of other resources such as memory, battery capacity, network bandwidth, etc. For example, a trained model with relatively higher complexity may be provided in a device (e.g., any of client device 120-124, or server device 104) that has a neural network processor or a GPU that is optimized for parallel processing, e.g., that the inference engine utilizes. In this example, greater processing capabilities of a client device are utilized to implement a trained model. In another example, a simplified trained model (e.g., with fewer neural network nodes or layers) may be provided in a client device that has greater resource constraints, e.g., a single-core processor with limited capabilities. In some implementations, multiple trained models may be provided on a client device. At the time of applying the local classifier, an appropriate trained model may be utilized, e.g., based on contextual factors such as network connectivity, battery capacity available, memory available, etc.
[0065] The local classifier analyzes the image to produce local classification results. In some implementations, the local classifier may perform the analysis based on image data, e.g., pixel values of the image. In some implementations, when users permit use of image metadata for such analysis, the local classifier may perform the analysis based on image metadata, such as a capture time, a type of camera used (e.g., a front camera, a back camera, etc.), an orientation of the image, etc. For example, local classification results may include one or more categories that are determined for the image. In some implementations, the local classifier may also generate a confidence score for each category for the image. For example, the local classification results may indicate that the image category is "document" with a confidence score of 95%, "receipt" with a confidence score of 90%, and so on. In some implementations, local classification results may be
a single category for the image, e.g., book cover, poster, etc. In these implementations, a category with a highest confidence score may be determined as the single category.
[0066] In some implementations, local classification results may also include one or more parameters determined based on the image. For example, such parameters may be based on the local classifier recognizing one or more objects in the image. For example, if the image includes an image of Bryce Canyon as determined by the local classifier, the parameter may include "Bryce Canyon." In another example, if the local classifier detects a particular brand or product name, e.g., based on a brand logo being detected in the image, the brand name or product name may be a parameter. For example, if the image is of a t-shirt of a particular brand, parameters may include the brand name, and a color of the t-shirt, as determined by the local classifier. In another example, e.g., when the image includes a media cover, the parameters may include a title of the media item (e.g., book title, a movie title, an album title, etc.), a type of the media item (e.g., book, CD, DVD, video, etc.), an author of the media item (e.g., an author of a book, an artist or band that produced a music album, actor, director, etc.), and so on. The local classifier may also utilize results from OCR, e.g., parameters provided by applying OCR techniques as described with reference to block 306, in determining one or more parameters. The method proceeds to block 210.
[0067] In block 210, it is determined whether server classification is to be utilized. Server classification refers to applying a server-based classifier to the image. In some implementations, e.g., when a user of a client device denies permission to transmit user data (e.g., an image representation) to a server (or other client device), server classification is not utilized. In some implementations, e.g., when method 200 is implemented on a client device with limited local processing capability, server classification may be utilized, if permitted by the user of the client device. In some implementations, server classification may be utilized, e.g., if a network bandwidth available at a client device is sufficient to upload an image representation to a server, and may not be utilized otherwise (e.g., if the client device has limited or no network connectivity). In some implementations, server classification may be selectively utilized, e.g., when local classification results do not include a category for an image, or when local classification results include multiple categories, e.g., with confidence scores that do not meet a confidence score threshold. In some implementations, when users provide consent, server classification is utilized
irrespective of local classification results. In some implementations server classification is used in combination with local classification.
[0068] Selectively utilizing server classification provides several technical advantages. For example, if a client device determines that the local classification results are reliable (e.g., have confidence scores that meet a threshold), it can display a user interface that includes the image with one or more suggested actions as described with reference to Fig. 3, or a user interface with an indication of a performed action as described with reference to Fig. 4, or a suggestion to archive an image as described with reference to Fig. 7, immediately upon image capture. Such display of the user interface may be displayed with lower latency than a user interface displayed where server classification is always utilized, e.g., by elimination of wait time to receive classification results from a server, e.g., over a network.
[0069] A further technical advantage is that network cost of uploading image representations to a server and downloading server classification results, and processing costs for the server to perform image classification, are saved. A further technical advantage is that only such image representations are sent to the server for which the local classification results are not sufficient, e.g., to display one or more suggested actions, or to perform an action based on the image. Therefore, network bandwidth is saved, by avoiding transmission of the image representation.
[0070] Server classification may provide certain technical advantages. For example, an image classifier on a server may be more accurate than a client classifier, e.g., due to server resources. If it is determined that server classification is to be utilized, the method proceeds to block 220. If it is determined that server classification is not to be utilized, the method proceeds to block 212.
[0071] In block 220, an image representation is generated. In some implementations, generating an image representation may include cropping the image, changing an orientation of the image, compressing the image (e.g., so that a data size, in bytes, of a resultant compressed image has a smaller data size than the original image, and is suitable for transmission over a low bandwidth network), changing a color space of the image (e.g., from RGV to YUV), etc. In some implementations, the image representation may be the resultant image after applying one or more of the described operations e.g., cropping changing orientation, compressing, changing color space, etc. For example, the resultant image may be an image thumbnail that is smaller in data
size than the image itself. In some implementations, one or more of the described operations may be performed using machine-learning techniques. An image thumbnail may include one or more portions of the image, e.g., include a plurality of pixels that have values determined based on applying one or more of the described operations to the image.
[0072] In some examples, generating an image representation may include generating a knowledge representation of the image using a neural network. For example, a machine-learning application may be utilized to generate the knowledge representation. In some implementations, the machine-learning techniques used to generate the knowledge representation may include applying an inference engine that provides as inference the knowledge representation. For example, the knowledge representation may be a feature vector that represents the image as a set of vector values associated with various features. In some implementations, the knowledge representation may be usable, e.g., by the server to determine an image category. In some implementations where the image representation is a knowledge representation, the image representation may not correspond to pixels of the image. The knowledge representation may be in the form a data file generated based on the image. For example, the knowledge representation may be a feature vector generated by a local classifier, e.g., for an image of a ID barcode, the representation could be a decoded numerical string.
[0073] In some implementations, block 220 is not performed, and instead, local classification results or data from the coarse-grained classifier are provided as the image representation. In various implementations, a server classifier may be configured to determine image categories based on the received image representation, e.g., image thumbnail, knowledge representation, local classification results, etc. In different implementations, an appropriate image representation may be chosen, e.g., based on available client resources such as processing capability, network bandwidth, storage capacity, etc. and based on the image. For example, a lower-resolution image representation may be chosen if the available client resources are small, while a higher-resolution image representation can be chosen if the available client resources are large (e.g., based on one or more resource thresholds. A technical advantage of using different types of image representations is that server classification may be savings in network costs, e.g., by transmitting a thumbnail image or knowledge representation that has a smaller data size than the original captured image. Further, different types of image representations may have different
computational costs to generate and the client device may select the image representation based on available resources. This provides a technical advantage that client resources used to generate the image representation are reduced. The method proceeds to block 222.
[0074] In block 222, the image representation is sent to the server, e.g., to server device 104 over network 130. For example, one or more of an image thumbnail, a knowledge representation, and local classification results may be sent to the server. In some implementations, transmitting the image representation to the server also includes sending information to the server that indicates that the image is to be processed by the server only to generate classification results. User consent is obtained prior to generating or transmitting the image representation to the server. In implementations where users do not provide such consent, server classification is not performed.
[0075] In various implementations, a server, e.g., server device 104, may determine categories for the image based on the received image representation. In some implementations, server device 104 may utilize image classifier 156b to determine the server classification results. In some implementations, image classifier 156b may be implemented using machine-learning techniques, e.g., similar to image classifier 156a (local classifier). In some implementations, image classifier 156b may utilize a machine-learning application that includes a trained model and an inference engine. In some implementations, the trained model on the server may be different, e.g., more complex, version of the trained model of image classifier 156a. In some implementations, image classifier 156b may utilize a machine-learning application that is configured to utilize received image representations. For example, image classifier 156b may implement super-resolution techniques, e.g., to obtain a higher resolution image based on a received image thumbnail. In some implementations, image classifier 156b may be trained to determine image categories based on received knowledge representation of the image or based on received local classification results. In some implementations, server device 104 may also apply OCR techniques to the received image thumbnail to determine server classification results.
[0076] In some implementations, sending the image representation to the server may include sending a response time threshold for the server to provide server classification results. For example, the response time threshold may be specified in a unit of time, e.g., 0.5 ms, 1 ms, etc. The response time threshold may indicate an amount of time, e.g., from a start time of transmission
of the image representation or a time of capture of the image, within which the server classification results are to be received by a client device that sends the image representation. In these implementations, the server may apply image classifier 156b such that one or more server classification results are provided, e.g., generated by the server and transmitted to the requesting client device, within the response time threshold. For example, the server may allocate server resources and/or chose a particular type of image classifier 156b, based on the received image representation and/or the response time threshold. This provides a technical benefit of appropriate allocation of server resources to generate the server classification results. Further, a server may not process the image or abort processing the image to determine server classification results, e.g., if it determines that server classification results cannot be provided within the response time threshold.
[0077] The response time threshold provides several technical benefits. For example, the client device can provide a suggested action, or perform an automatic action in a timely manner such that users are provided with the suggested action quickly upon capturing the image or opening the image in an image viewing application, or that the automatic action is performed immediately upon image capture. A technical benefit is that the user interface that is displayed upon image capture can be rendered in such a manner that the user does not perceive lag between image capture and display, and additionally, receives UI elements such as suggested actions.
[0078] In some implementations, e.g., when the server device 104 includes a suggestion application 158b, server device 104 may determine one or more suggested actions (e.g., archival), or actions to be performed by the client device, based on the received image representation. The method proceeds to block 224.
[0079] In block 224, it is determined whether server classification results are received, e.g., within the response time threshold. If it is determined that the server classification results are not received within the response time threshold, the method proceeds to block 212. If it is determined that the server classification results are received within the response time threshold, the method proceeds to block 226.
[0080] In block 212, image categories and/or suggested actions are determined based on local classification results, e.g., results from the local classifier applied in block 208. For example, in
some implementations, the image categories may be determined based on whether a confidence score associated with an image category meets a confidence threshold. For example, if the local classification results may indicate that the image category is "document" with a confidence score of 95% and the confidence threshold for the category document is "90%," it is determined that the image belongs to the category document. In some implementations, a particular category that is associated a highest confidence score may be determined as the category for the image. In some implementations, e.g., when multiple local classifiers are used, local classification results from each local classifier may be combined to determine the image category. For example, combining the classification results may include assigning weights to respective classification results from each local classifier based on respective confidence score, and selecting one or image categories for the image based on the weighted classification results. In some implementations, local classification results associated with low confidence scores may be discarded prior to determining the image categories.
[0081] In some implementations, determination of image categories may be based on a size and/or prominence of an image feature determined by the image classifier. For example, if a detected receipt object occupies a large portion (e.g., over a threshold size, such as 40%, etc.) of the entire area of an image, the image may be classified as a receipt, even in the presence of other features (e.g., books) that occupy a smaller portion (e.g., 15%) of the image area. In some implementations, prominence of an image feature can be determined based on size of the image feature with respect to image area, and/or location of the image feature within an image, e.g., with respect to borders of the image. In some implementations, a foreground and background of an image can be determined (e.g., based on relative sizes of depicted objects, types of depicted objects, depth information for the pixels, etc.), and an image feature located in the foreground can be detected as prominent. In an example, if a book cover object is prominent in the image, e.g., within a threshold distance of a center of the image, in a foreground portion of the image, etc., the image may be classified as a book cover.
[0082] In block 226, image categories and/or suggested actions are determined based on one or more of local classification results and server classification results. For example, if server classification results have higher confidence scores associated, the image categories may be determined solely based on server classification results. When the server utilizes a server classifier
that is more accurate than the local classifier, e.g., due to use of a more accurate trained model, etc., server classification results may include greater confidence scores. In another example, e.g., when the received server classification results are not associated with higher confidence scores, or when the server classification results are different from the local classification results, both may be used to determine image categories. In some examples, e.g., when the server classification results and the local classification results do not overlap, server classification results may not be utilized to determine image categories. For example, non-overlapping results may occur, e.g., due to the image representation that is sent to the server, etc.
[0083] While method 200 has been described with reference to various blocks in Fig. 2, it may be understood that techniques described in this disclosure to determine image categories may be performed without performing some of the blocks of Fig. 2. For example, some implementations, e.g., that do not include a coarse-grained classifier, blocks 202 and 204 are not performed. In another example, some implementations, e.g., on a client device with limited processing capability, or a client device that is incapable of executing a local classifier, block 208 may not be performed, and if the user consents to use of server classification, image categories are determined based on performing blocks 220-226. In some implementations, one or more of the blocks illustrated in Fig. 2 may be combined. For example, blocks 206 and 208 may be combined, e.g., if the local classifier includes OCR techniques.
[0084] In various implementations, some of the blocks of method 200 may be performed in parallel or in an order different from that illustrated in Fig. 2. For example, in some implementations, block 210 may be performed prior to blocks 206 and/or 208 such that generating the image representation, sending the image representation to the server, and receiving server classification results is performed at the same time as applying the local classifier.
[0085] While the foregoing discussion refers to the server device 104, in some implementations, one or more of client devices 120-124 may provide server classification results. For example, a client device 120 of a user Ul may send an image representation to another client device of the user, e.g., over a local network, to obtain server classification results. For example, such approach may be useful when the client device 120 has limited capability to determine image categories, when the other client device is suitable (e.g., has parallel processing hardware) to determine classification results, etc.
[0086] Fig. 3 is a flow diagram illustrating one example of a method 300 to display suggested actions and execute commands, according to some implementations. In some implementations, method 300 can be implemented, for example, on a server system 102 as shown in Fig. 1. In some implementations, some or all of the method 300 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s). In described examples, the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage). In some implementations, different components of one or more servers and/or clients can perform different blocks or other parts of the method 300. In some examples, a first device is described as performing blocks of method 300. Some implementations can have one or more blocks of method 300 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
[0087] In block 302, it is checked whether user consent (e.g., user permission) has been obtained to use user data in the implementation of method 300. For example, user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location, historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc. One or more blocks of the methods described herein may use such user data in some implementations.
[0088] If user consent has been obtained from the relevant users for which user data may be used in the method 300, then in block 304, it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 312. If user consent has not been obtained, it is determined in block 306 that blocks are to be implemented without use of user data, and the method continues to block 312. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 300 is not performed.
[0089] In block 312, an image is obtained. For example, the image may be captured by a user, e.g., user Ul of client device 120, using a camera of client device 120. In some implementations obtaining the image may include detecting that the image has been captured based on detecting activation of a camera of a client device, e.g., activation of an image sensor of the client device. In some implementations, obtaining the image may include receiving a notification from an operating system of the client device that the image has been written to a local memory of the client device. In some implementations, the image may be obtained upon detection that an image has been captured. For example, the image may be obtained from a sensor (e.g., an image sensor) that captures the image or a storage device (e.g., a local memory used to write image data). In some implementations, the image (e.g., pixel values) may be obtained from the image sensor, e.g., prior to a user triggering capture of the image, e.g., by activating an image capture button. These implementations may provide a technical benefit that the image can be analyzed prior to user- triggered capture. In these implementations, one or more suggested actions can be determined in parallel with the image capture, therefore enabling suggested actions to be provided to the user with no or low latency. In some implementations, obtaining the image may be triggered based on a notification or indication from an operating system or other application (e.g., an assistant application, an in-memory service that detects that image capture has been activated, etc.). In another example, the image may be obtained, e.g., received over a network with a messaging application (e.g., chat), by e-mail, downloaded from a website, via an image gallery application, via an image management application, etc. The method proceeds to block 314.
[0090] In block 314, the image is analyzed, e.g., using one or more image classifiers. For example, the image may be analyzed using method 200 described with reference to Fig. 2. In some implementations, image analysis may include determining one or more categories for the image. In some implementations, analyzing the image may also include determining one or parameters, e.g., based on extracting text from the image. In some implementations, different parameters may be determined based distinct portions of the image. For example, if the image analysis identifies a first portion of the image that includes a first media item (e.g., a compact disc cover) and a second portion of the image that includes a different media item (e.g., a book, a different CD cover, etc.), parameters may be provided based on one or more of the different portions.
[0091] In some implementations, block 314 may be implemented using method 200. The method proceeds to block 316. In block 316, one or more suggested actions are determined for the image. In some implementations, the one or more suggested actions for the image are determined, e.g., by a client device that implements suggestion application 158a and/or a server device that implements suggestion application 158b. In some implementations, the one or more suggested actions may be based on the determined categories for the image, image metadata, user context, etc. when permitted by the user. In various implementations, the suggested actions may be associated with a command (e.g., for an application that implements method 300, or other applications on a device that implements method 300.
[0092] For example, if it is determined that the image is a document, a suggested action may be to store the image in an image group (e.g., in an image album) for documents in an image gallery application. In another example, if it is determined that the image includes a bill and if the user consents to access of payment information (e.g., bank information, credit card information, etc.) and a payment application, a suggested action may be to pay the bill with the payment application using the payment information. In this example, extracted text from OCR techniques as described with reference to block 206 and one or more image features (e.g., determined using a local classifier or a server classifier), may be utilized to determine the merchant name, the amount due, the payment application to be used to pay the bill, etc. For example, image classifiers may detect the presence of a logo associated with the merchant, or other image features that are utilized to identify the merchant.
[0093] In another example, if the image includes a receipt, and if the client device is configured with an expense tracking application, the suggested action may be to extracted information, e.g., merchant name, a location, a price (e.g., amount spent), a timestamp (e.g., date and time of the receipt, etc.), one or more item names of purchased items, etc. in the expense tracking application. In yet another example, if the image includes a link to an online article (e.g., a URL, a barcode, etc.), the suggested action may be to display the article using a browser application.
[0094] In another example, if it is determined that the image includes a media cover, a media item corresponding to the media cover (e.g., a music album, a book, a movie, etc.) may be determined. In this example, the suggested actions may include adding the media item to a wishlist
(e.g., "books to buy," "Summer reading list," "movies to watch," etc.) for a media rental or purchase application, adding the media item to a stored playlist, e.g., a list of media items such as songs, movies, audiobooks, etc. for a media playback application, purchasing the media item, e.g. in physical form from an e-commerce provider, or in digital form from on online media store using the payment information, etc.
[0095] In another example, a suggested action may be to "archive" the image, e.g., such that the image is removed from a view (e.g., a chronological view) that includes images for a user. For example, the suggested action to archive may be shown for an image that is determined to be a duplicate, e.g., identical or very similar, of another image in the view.
[0096] In another example, when users permit use of user data, the suggested action to archive an image may be displayed based on other suggested actions for the image, e.g., suggested actions that were displayed a previous time the image was displayed for viewing. For example, if the image is a coupon and a suggestion to use the coupon (e.g., in a shopping application) was previously shown, it may be determined based on user data that the user has not used the coupon (e.g., not selected the suggested action). At a subsequent time that the user views the image, a suggested action may be to archive the image. In some implementations, the suggested action may be different at different times of viewing the image, e.g., based on a time-sensitive parameter (e.g., expiry date of a coupon, due date of a bill, etc.) determined from the image.
[0097] In some implementations, if the users consent to use of interaction data regarding use of suggested actions (e.g., the types of suggested actions are selected often, or recently, the types of suggested actions that are not selected, etc.), such data may be utilized to trigger suggested actions. For example, if interaction data indicates that a user typically (or frequently, e.g., meeting a threshold frequency) selects "add to contacts" or "call phone number" suggested actions for images of business cards, and does not select (or selects infrequently) "send e-mail" suggested action, the "send e-mail" may not be displayed to such a user.
[0098] In some implementations, the application for a suggested action may be a preconfigured application determined based on different image categories, or may be a user-specified destination for certain image categories. For example, a client device may include features (e.g., provided by an operating system of the client device) to indicate default applications that handle various types
of data. For example, such features may be part of a registry of applications, e.g., maintained by an operating system of the client device, or by a suggestion application. In another example, applications may declare (e.g., at a time of installation on a client device) various operations that can the application can perform, various types of data or parameters that the application can handle, etc. In yet another example, a server may provide information (e.g., application information) that indicates various applications that can be utilized for suggested actions corresponding to specific image categories, determined parameters, and image features.
[0099] For example, a contacts application, e.g., on a mobile device, may indicate that it can store phone numbers, e-mail address, physical addresses, social media addresses, etc. In this example, if it is determined that the image category is contact (e.g., when the image includes a business card, the image is of a document that includes contact information, etc.), the suggested action may be to invoke the contacts application. Continuing with the example where the image category is contact, a dialer application, e.g., on a mobile phone, may indicate that it can call a phone number (e.g., via a telephony network) or a social media address (e.g., via a call placed through a messaging application). In this example, if it is determined that the image category is contact and the extracted text includes a phone number or a social media address, the suggested action may be to place a call to the number or the social media address via the dialer application.
[00100] In some implementations, an application that implements method 300 may also be the application for which the action is suggested. For example, if the user permits use of facial recognition techniques (e.g., as part of analyzing the image), it may be detected that the image includes one or more recognized faces. In this example, the suggested action may be to associate one or more tags that identify a person whose face was recognized in the image. Further, another suggested action may be to share the image with the persons whose faces were recognized (e.g., over a communication network). In various implementations, sharing may be direct sharing (e.g., through the application that implements method 300, such as an image gallery application) or sharing through another application (e.g., a messaging application, an e-mail application, photos application, a file transfer application, etc.) that supports sharing. In some implementations, where data regarding images shared between multiple users is permitted for use in determination of shared actions, a suggested action may be to share the image with another user that has previously
shared images with the user, e.g., based on a determination that the one or more of the previously shared images were taken at a same time/location as the image.
[00101] In another example, e.g., when method 300 is implemented as part of a camera application, the suggested action may include, e.g., performing automatic enhancements (e.g., color correction, adjusting one or more image properties such as brightness, contrast, etc.) on the image where the enhancements are determined based on analyzing the image, applying one or more image effects based on analyzing the image (e.g., based on detecting that the image has a human face, performing red-eye correction), etc.
[00102] In various implementations, the suggested action may be associated with one or parameters determined based on the image, e.g., e-mail addresses, recognized faces, recognized objects or landmarks, etc. In some implementations, the suggested action may correspond to executing a browser application on the device with the one or more parameters. For example, in response to recognizing that the image includes a landmark (e.g., Bryce Canyon, Eiffel Tower, etc.), a suggested action may be to execute the browser application to access an information resource that provides information about the landmark. In another example, in response to recognizing that the image includes an item for purchase (e.g., shoes of a particular brand), the suggested action may be to execute the browser application to access an online shopping portal or marketplace for that item. In some implementations, the online shopping portal may be selected based on one or more criteria. For example, it may be determined that a particular shopping portal offers the item at a lowest price. In response to this determination, the particular shopping portal may be included in the suggested action. In some implementations, other factors related to shopping such as shipping costs, warranty, seller ratings, etc. may also be used to determine the particular shopping portal to include in the suggested action. In some implementations, the online shopping portal may be selected because it provides the best deal for particular items and thereby facilitates efficient user shopping. In various implementations, the best deal may be based on factors such as price, shipping costs, availability, warranty, reviews, item type, etc. In some implementations, where users permit access to user data related to shopping, the particular shopping portal may be determined based on recent shopping activity, membership in a shopper's club, etc. In some implementations, where users permit access to user data related to shopping,
the particular shopping portal may be determined based on frequency of shopping activity at a particular shopping portal (e.g., number of purchases made over a period of time).
[00103] In some implementations, users may be provided with options to indicate one or more applications for suggested actions. For example, users may indicate specific media playback application, shopping application, payment application, etc. These applications may be prioritized for suggestions actions, e.g., over other applications that also correspond to the image category, determined parameters, and image features. When two or more distinct portions of the image are detected in image analysis, suggested actions may include different actions, each determined based on a particular portion of the two or more distinct portions. The method proceeds to block 318.
[00104] In block 318, a user interface is caused to be displayed. For example, the user interface may be displayed by any of client devices 120-124. In some implementations, the user interface includes a plurality of first user interface elements (e.g., on-screen buttons, voice prompts, etc.) that are displayed. Each of the plurality of first user interface elements corresponds to a respective default action of one or more default actions. For example, the default actions may be displayed independent of results of the image analysis performed in block 314 and suggested actions determined in block 316. For example, the one or more default actions may include sharing the image (e.g., via a messaging application, an e-mail application, a social network, etc.), archiving the image (e.g., storing the image in an image library), and performing a visual search (e.g., an image-based search using a search engine) based on the image. The plurality of first user interface elements are displayed irrespective of whether the image analysis was performed, or whether one or more suggested actions are determined. For example, if the image analysis does not result in identifying a category for the image, or if no suggested actions are determined, the plurality of first user interface elements are displayed.
[00105] In some implementations, when one or more suggested actions are determined, one or more second user interface elements (e.g., on-screen buttons, voice prompts, etc.) may be included in the user interface. For example, each of the one or more second user interface elements may correspond to a respective suggested action, e.g., when one or more suggested actions are determined. The user interface is configured to permit selection of a particular action from the one or more default actions and the one or more suggested actions. The method proceeds to block 320.
[00106] In block 320, user input indicative of selection of a particular action from the one or more default actions and the one or more suggested actions is received. For example, user input may be received based on detecting a gesture, e.g., tapping, swiping, etc. with a touchscreen display of a client device that corresponds to activation of one or more of the first user interface elements and the second user interface elements. While the foregoing example refers to a visual display of user interface elements and selection through a touchscreen, it may be understood that user interface elements may be provided as voice prompts, or using other techniques. Further, user input may be received, e.g. as voice input, touch input, user gesture input, device movement input, device orientation input, etc. based on the particular implementation. The method proceeds to block 322.
[00107] In block 322, a particular command corresponding the particular action (from the default actions or the suggested actions) is executed in response to receiving the user selection. In various implementations, a default action may be executed without a parameter. For example, if the user selects the default action of "sharing the image," a menu of sharing options (e.g., share via e-mail, share via messaging application, share via social network, etc.) may be displayed.
[00108] In some implementations, a suggested action may be performed by a command to invoke an application corresponding to a suggested action, where the application is invoked with one or more parameters determined based on the image. In various implementations, invoking the application may include making an application programming interface (API) call to the application, using a deep link for the application (e.g., to specific functionality of the application), invoking a web browser to access a particular resource at a website, etc. For example, if the suggested action that the user selected is to place a phone call, a command may be sent to a dialer application to place the phone call, including a parameter (e.g., a phone number) determined based on the image. In another example, if the suggested action that the user selected is to add a contact to a contacts application (e.g., an address book), a command may be executed, e.g., by the contacts application with parameters such as name, physical address, phone number, e-mail address, social media address, etc. The parameters may be based on the image, e.g., when the image includes a business card. In another example, the image may include handwritten text that specifies a name of a wireless network, along with credentials (e.g., a wireless network key) to connect to the
wireless network. In this example, executing the command may include connecting to the wireless network of the name determined from the handwritten text using the credentials.
[00109] In some implementations, users may select multiple actions, e.g., sequentially. For example, a user may select a suggested action to add a contact, followed by a different suggested action to place a phone call to a phone number that is determined based on the image. In some implementations, the user interface may be updated, e.g., to remove a particular suggested action, if the action has already been completed.
[00110] In some implementations, e.g., where the available resources (e.g., screen space - in a wearable device or head mounted display, or other small screen device) for displaying actions are limited, a subset of suggested actions determined in block 316 may be displayed. For example, the subset may be selected based on a confidence score associated with the suggested action. A suggested action may be associated with a higher confidence score, e.g., when the image category is determined with high confidence. Further, when user permits access to user data, such as data about prior actions selected by the user, or use of one or more applications by the user, a suggested action may be associated with a higher confidence based on such user data.
[00111] For example, if the user data indicates that the user frequently (e.g., over a threshold number of times) adds a contact to an address book upon obtaining an image of a business card, the suggested action to add the contact to the address book may be assigned a higher confidence score. In some implementations, suggested actions may be ranked based on confidence scores, and the subset of suggested actions may be selected based on the ranks. For example, in some implementations, only those suggested actions are displayed that meet a threshold confidence score, or are of a particular rank (e.g., in the top 3 ranks). In some implementations, when users permit use of user data regarding recent use of a particular type of suggested action, such data may be used to rank the suggested actions. In some implementations, when users permit use of user data regarding a frequency with which a particular type of suggested action, such data may be used to rank the suggested actions.
[00112] In some implementations, a threshold may be set for a period of time between obtaining the image in block 312 and displaying the user interface in block 318. For example, the time period may correspond to time elapsed between capture of the image, e.g., by a camera application,
and display of the UI. In some implementations, the time period may correspond to one or more other events, e.g., writing the image to a memory, an OS notification of image capture, etc.
[00113] In some implementations, e.g., when method 300 is implemented in an application distinct from the camera application, method 300 may be implemented such that the UI is displayed within the threshold, e.g., within 0.5 milliseconds of image capture by the camera application, within 1 milliseconds of image capture by the camera application, etc. such that a user does not perceive a time lag between the image being displayed (e.g., by the camera application) and the UI being displayed (e.g., by a different application that implements method 300). In some implementations, the camera application may display a camera application user interface immediately upon capture of the image. In these implementations, the UI with the default actions and/or suggested actions displayed by the different application may be rendered atop the camera application user interface, e.g., by utilizing draw-on-top functionality provided by an operating system of the device that implements the camera application and the distinct application. For example, such an approach may be advantageous, e.g., when the device is configured with a camera application as a default, and where a separate application, e.g., an image gallery application, displays the user interface that includes the default actions (which may correspond to a command for the image gallery application) and suggested actions (which may correspond to one or more other applications).
[00114] In the implementations where a threshold is set, the user interface may be displayed with default actions and no suggested actions, e.g., when a suggested action is not determined within the threshold. Further, suggested actions that are determined within the threshold may be displayed along with the default actions, e.g., at an initial display of the user interface, and additional suggested actions may be added, e.g., inserted into the user interface, at a subsequent time as such suggested actions are determined.
[00115] In some implementations, the user interface displayed in block 318 may be a transient user interface, e.g., displayed temporarily (e.g., for 1 second, for 3 seconds, etc.) and may be removed after a limited period of time. Such implementation may be beneficial in providing the user with options to select a particular action from the default actions and the suggested actions, and if the user does not provide selection within the limited period of time, removal of the
suggested actions user interface enables the user to continue interacting with the camera application.
[00116] In some implementations, different parts of method 300 may be performed on different devices. For example, in some implementations, results from the image analysis performed in block 314, e.g., an image feature vector, or knowledge representation of the image, may be provided to different suggestion applications on different server devices to determine suggested actions. For example, in some implementations, suggestion applications may be implemented by different providers (e.g., grocery stores, online video providers, etc.). In these implementations, each provider may determine a suggested action, and provide the determined suggested action for display. In some implementations, a provider may indicate image features or image categories for which the provider can supply suggested actions.
[00117] In another example, in some implementations where a user provides permission to share image data, image data (e.g., pixel values) may be provided to different server devices (e.g., operated by different parties), such that each server device can apply an image classifier to the image and determine suggestions. For example, such an implementation may be advantageous if certain server devices are configured with domain-specific classifiers to recognize specific image features. For example, provider of a shopping website may offer shopping-related suggestions based on an image classifier that is configured to recognize product images, e.g., to identify products that are available from the shopping website. Suggested actions generated by different server devices may be aggregated and a subset of the determined suggested actions may be included in the user interface.
[00118] In some implementations, the determined suggested actions may be determined based in part on user preferences. For example, in these implementations, if a user had previously indicated a preference for a particular contacts application a particular dialer application, etc., the determined suggested actions may be to launch the particular contacts application for images that are detected as business cards. For example, the user preference may be indicated by the user choosing an application as a default application, e.g., in a setting stored by an operating system. In some implementations, the suggested actions are determined automatically, without user input. For example, in implementations where users permit analysis of user data, it may be determined
that the user normally utilizes a particular dialer application to place phone calls, and in response, the particular dialer application may be chosen for the determined suggested action, e.g., for an image of a business card.
[00119] Fig. 4 is a flow diagram illustrating one example of a method 400 to select and execute an application based on an image, according to some implementations. In some implementations, method 400 can be implemented, for example, on a server system 102 as shown in Fig. 1. In some implementations, some or all of the method 400 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s). In described examples, the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage). In some implementations, different components of one or more servers and/or clients can perform different blocks or other parts of the method 400. In some examples, a first device is described as performing blocks of method 400. Some implementations can have one or more blocks of method 400 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
[00120] In block 402, it is checked whether user consent (e.g., user permission) has been obtained to use user data in the implementation of method 400. For example, user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location, historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc. One or more blocks of the methods described herein may use such user data in some implementations.
[00121] If user consent has been obtained from the relevant users for which user data may be used in the method 400, then in block 404, it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 412. If user consent has not been obtained, it is determined in block 406 that
blocks are to be implemented without use of user data, and the method continues to block 412. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 400 is not performed.
[00122] In block 412, an image is obtained. Block 412 is similar to block 312 of method 300. The method proceeds to block 414.
[00123] In block 414, the obtained image is analyzed, similar to block 314. For example, one or more image categories may be determined using method 200. The method proceeds to block 416.
[00124] In block 416, one or more applications and corresponding parameters are determined, based on the one or more image categories determined in block 414. The applications and parameters may be determined similar to determining one or more suggested actions as described with reference to block 316. For example, one or more applications, e.g., available on a device that implements method 400, may be determined based on image categories, image features, and if permitted by the user, user data. Further, parameters for the applications may be determined based on analyzing the image. In some implementations, parameters may include text or other information extracted from the image. As described with reference to Fig. 3, each of the determined applications may have an associated confidence score. The method proceeds to block 418.
[00125] In block 418, a particular application from the applications determined in block 416 is selected. For example, if the image includes a business card, the determined applications may include a contacts application and the parameters determined for the contacts application may include contact information to be added to contacts maintained in the contacts application. The determined applications may further include a dialer application and the parameters may include a phone number extracted from the image. The determined applications may further include an e- mail application and/ or a social network application, and the parameters may include an e-mail address or a social media address extracted from the image. In another example, if the image includes a media cover, the parameter may include a title of the corresponding media item (e.g.,
as indicated on the media cover), e.g., a book title, and the determined applications may include a shopping application, an e-reader application, and a book reviews application.
[00126] In some implementations, a user may indicate a particular application, and in some examples, a particular command for that application, as a user preference. For example, a user may indicate a preference to automatically place a call using a dialer application if a phone number is detected within an image, and if no other contact information is detected. In another example, a user may indicate a preference to automatically add contact information using a contacts application, e.g., upon detecting that the image category is business card. In another example, a user may indicate a preference to add media items to a media library of a media playback application, e.g., in a playlist. In some implementations, a user may indicate a preference for multiple actions, e.g., adding the media item to the library and initiating playback of the media item using a media playback application. In these implementations, the particular application may be selected from the determined applications based on the user preference.
[00127] In some implementations, when users consent to use of user data (e.g., prior user behavior, usage data of various applications, etc.) user preference may be determined based on user data. For example, it may be determined that a user stores particular categories of images (e.g., identification documents, tickets, receipts, etc.) to particular folders on a device, or in particular image groups within an image library. In response to such determination, the corresponding application may be selected from the determined applications based on the user preference.
[00128] In some implementations, applications may be selected based on a confidence score associated with the image, e.g., based on the image analysis to determine image categories and/or parameters. For example, if a relatively higher confidence score is associated with a determination that the image includes a book cover than a confidence score associated with a determination that the image includes a CD cover, an application corresponding to the image category "book cover" may be selected based on the confidence scores.
[00129] In some implementations, e.g., when a user preference is not known, cannot be determined, or when the confidence score for the image does not meet an application execution threshold, it may be determined in block 418 that the image no application is to be executed. In
some of these implementations, one or more suggested actions may be displayed in a UI as described above with reference to Fig. 3. In some of these implementations, application execution is performed upon specifically receiving a user selection of a suggested action. In these implementations, blocks 420 and 422 may not be performed. If a particular application is selected in block 418, the method proceeds to blocks 420.
[00130] In block 420, the particular application is executed, e.g., invoked with one or more parameters determined based on the image. For example, the application may be invoked by executing a command, e.g., making an application programming interface (API) call to the selected application, with the determined parameters. Upon invoking the application, the application may automatically perform one or more actions, e.g., as specified in the API call, without user input. The method proceeds to block 422.
[00131] In block 422, upon completion of execution of the application, a user interface may be displayed with the image and an indication of the action performed. For example, if the image is a receipt and the application is an expense tracking application, an indication that details from the receipt, such as merchant name, item name(s), timestamp, price, etc. that were added to the expense tracking application may be included in the user interface. In another example, if the user provides consent for such determination, it may be determined that the image is an identification document, and the particular application may be an application that stores important documents, e.g., a document vault. In this example, the indication may include a type of the document (e.g., driver's license, university ID, etc.), parameters extracted from the document (e.g., a name, an identification number, etc.) that were added to the document vault. In some implementations, the user interface may include one or more elements that indicate that the indicated operation was performed successfully.
[00132] Fig. 5A is a diagrammatic illustration of an example user interface 500 that includes an image with a plurality of default actions and suggested actions, according to some implementations. In various implementations, user interface 500 can be displayed by a display device, e.g., by a display screen of a client device 120, 122, 124, and/or 126 of Fig. 1, or a server system 102 in some implementations. In this example, user interface 500 can be displayed by an
image gallery application or a camera application (or other application program) running on a device that can obtain images (e.g., via a camera, over a network, etc.).
[00133] User interface 500 includes an image 502, e.g., a photo captured using a camera. In the example shown in Fig. 5A, the image includes a business card. As shown in Fig. 5A, upon application of OCR techniques and/or an image classifier, different portions of the image may be recognized. For example, a company logo 504, a company name 506 ("Acme Corp."), a person's name and designation 508 ("John Doe, Software Engineer"), an e-mail address ("jdoe@acme.corp") 510, a phone number 512 ("734-XXX-XXXX"), a social media address 514 ("@jdoesacme"), and a physical address 516 ("334 XYZ Avenue Acme City California") may be recognized from the image. Depending on the individual image, one or more additional features or fewer features may be recognized.
[00134] User interface 500 may include a plurality of user interface elements that each correspond to a respective default action. In the example illustrated in Fig. 5A, user interface elements 520 ("Share"), 522 ("Search"), and 524 ("Archive") are included that each correspond to a default action. In various implementations, any number of default actions may be included. In different implementations, additional default actions, e.g., performing a visual search based on the image, performing an automatic enhancement operation on the image, etc. may be included. Each of user interface elements 520-524 may be selectable by the user, e.g., by tapping. Upon receiving user input indicative of selection of a particular default action by the user (e.g., "Search"), a command for the corresponding action may be executed. For example, in response to user selection of user interface element 522, a command may be executed to perform a search based on the image, e.g., a local search on the device that captured image 502, an Internet search, etc.
[00135] In some implementations, user interface 500 may also include one or more user interface elements that each correspond to a respective suggested action. In various implementations, the suggested action(s) may be based on the analysis of the image, e.g., image categories, text extracted from the image, an object or landmark recognized in the image, etc. In the example illustrated in Fig. 5A, user interface elements 526 and 528 are shown. User interface element 526 includes text extracted from the image, e.g., the phone number 734-XXX-XXXX and may correspond to a suggested action to place a call to the phone number using a dialer application.
If the user indicates selection of user interface element 526, the dialer application may be launched with the phone number as the parameter, e.g., to place a phone call. User interface element 528 incudes text extracted from the image, e.g., the address 334 XYZ Avenue.
[00136] In Fig. 5A, user interface elements 526 and 528 are displayed based on analyzing the image to identify two distinct portions (e.g., phone number 512 and physical address 516) of the image. The user interface elements 526 and 528 correspond to respective actions two suggested actions. Each suggested action is associated with a respective portion of the image. Upon user input indicative of selection of user interface element 528, a map application may be executed with the address as the parameter, such that the map application launches and provides a search for and display of the location of the address. In some implementations, e.g., if user interface 500 is displayed on a client device that does not include a map application, selection of user interface element 528 may result in a web browser application being launched, with a map website URL and the address as parameters.
[00137] While Fig. 5A illustrates suggested actions with reference to a phone number and an address, suggested actions may be based on other information from the image, e.g., e-mail address, social media address, etc. In some implementations, a suggested action may be based on multiple portions of the image, e.g., a suggested action for image 502 may be to add a contact in a contacts application based on the recognized information, e.g., 506-516. While Fig. 5A illustrates two suggested actions, it may be understood that any number of suggested actions may be shown.
[00138] In implementations where users permit access to user data, such as user preferences for applications, data regarding prior behavior of users with respect to suggested actions, display of user interface elements for suggested actions may be customized based on such data. For example, if user behavior data indicates that upon capturing an image of a business card, the user selects an "add to contacts" suggested action more frequently for recent images of business cards, e.g., more frequently than "place a phone call," the suggested action to add to contacts may be displayed. In some implementations, suggested actions may be based on image category, e.g., different suggested actions may be shown for "business cards," "receipts," "book covers," etc.
[00139] In implementations where users permit use of user preference data for applications, a command for the particular action may be to invoke a user-preferred application. For example, if
a device that displays user interface 500 has three different contact management applications available, the command may be executed such that a particular contacts application selected based on user preference data is launched. In some examples, commands may be executed based on default applications for certain types of actions, e.g., a default dialer application for phone calls, a default messaging application for messages, a default e-mail application for e-mail addresses, etc.
[00140] Fig. 5B is a diagrammatic illustration of another example user interface 530 that includes an image with a plurality of default actions and suggested actions, according to some implementations. User interface 530 includes an image 531, e.g., a photo captured using a camera. In the example shown in Fig. 5B, the image shows a book against a background. As shown in Fig. 5B, upon application of OCR techniques and/or an image classifier, different portions of the image may be recognized. For example, a book title 532 ("Giant Trees of the Earth") is recognized in image 531. As shown in Fig. 5B, a portion of image 531 may be highlighted in user interface 530, e.g., by circle 534. For example, the portion highlighted may be based on analyzing the image. For example, in Fig. 5B, it may be determined that the portion inside circle 534 is a salient portion of the image, e.g., from which information is extracted based on image analysis. Further, highlighting may be based on determining a category for the image, e.g., book cover. While Fig. 5B shows a single highlighted portion, some images may be displayed with multiple highlighted portions, e.g., an image that includes three books may include three highlighted portions.
[00141] Fig. 5B also includes user interface elements 536 ("Buy with XYZ") and 538 ("Reviews for Giant Trees of the Earth"). User interface elements 536 and 538 each correspond to a suggested action, e.g., to purchase the book with an application XYZ (e.g., a shopping application, an e-book application, etc.), to access reviews for the book (e.g., via an application or website that provides book reviews), etc. Upon receiving user input indicative of selection of a particular user interface element, a command to invoke the particular application may be executed.
[00142] Fig. 5C is a diagrammatic illustration of another example user interface 540 that includes an image with a plurality of default actions and suggested actions, according to some implementations. User interface 540 includes an image 541, e.g., a photo captured using a camera. In the example shown in Fig. 5C, the image is a photo of a temple. As shown in Fig. 5C, upon application of OCR techniques and/or an image classifier, the image may be recognized. For
example, the temple 542 in image 541 is recognized as "Angkor Wat." Image 541 does not include any text. In this example, determination that the image depicts Angkor Wat may be based on the image classifier recognizing the landmark.
[00143] Fig. 5C also shows user interface elements 544 ("Info about Angkor Wat") and 546 ("Share with Jane"). User interface elements 544 and 546 each correspond to a suggested action, e.g., to obtain information about content of the image, e.g., the Angkor Wat temple from an encyclopedia application, a search engine, etc., to share the image with a friend (Jane) using an image sharing application, a messaging application, etc. While Fig. 5C includes a default action "Share," the user interface element 546 suggested action "Share with Jane" may be included. For example, if the user permits access to prior sharing data, it may be determined that one or more other pictures from the trip to Angkor Wat were previously shared with Jane, that the user frequently shares pictures with Jane, that Jane has recently shared pictures with the user, etc. Based on such determination, the user interface element 546 is included in the user interface 540. In some implementations, other information permitted for use by the user, e.g., social graph information that indicates a relationship between the user and one or more connected users in the social graph, user profile information, etc. may be used to determine one or more suggested actions.
[00144] Fig. 6 is a diagrammatic illustration of an example user interface 600 that includes an image and an indication that than an action was performed, according to some implementations. User interface 600 includes an image 601, e.g., a photo captured using a camera. In the example shown in Fig. 6, the image is a photo of a receipt. As shown in Fig. 6, upon application of OCR techniques and/or an image classifier, one or more portions in the image may be recognized. For example, a restaurant name 602 ("XYZ Restaurant") and an amount 604 ("$10.07") is recognized in image 601. Based on analyzing image 601, the image category may be determined to be receipt. In the implementation shown in Fig. 6, a portion 606 of the image is highlighted to indicate that the image includes a receipt and that the portion 606 includes the receipt.
[00145] Fig. 6 also includes an indication 608 that indicates an action was performed for the image. For example, indication 608 includes an image category ("receipt"), one or more parameters determined based on the image and used to perform the action (e.g., "$10.07," "XYZ
Restaurant, New York"). Further, indication 608 also includes an application ("expense tracking app") that was used to perform the action. In different implementations, the indication may include additional information (e.g., a date/time of the receipt, a payment method such as cash or credit card, etc.), or may include less information. Indication 608 may notify the user that image 601 was recognized as a receipt and that without further user input, information extracted from image 601 was automatically added to the expense tracking application. In some implementations, the action may be performed for certain categories, e.g., user-specified categories, and not performed for other categories. In some implementations, the action may be performed only if certain parameters for the action are recognized. In some implementations, actions may be performed automatically, e.g., based on a user indicating "always perform this action," e.g., after selecting a suggested action.
[00146] Fig. 7 is a flow diagram illustrating one example of a method 700 to archive images, according to some implementations. In some implementations, method 700 can be implemented, for example, on a server system 102 as shown in Fig. 1. In some implementations, some or all of the method 700 can be implemented on one or more client devices 120, 122, 124, or 126 as shown in Fig. 1, one or more server devices, and/or on both server device(s) and client device(s). In described examples, the implementing system includes one or more digital processors or processing circuitry ("processors"), and one or more storage devices (e.g., a database 106 or other storage). In some implementations, different components of one or more servers and/or clients can perform different blocks or other parts of the method 700. In some examples, a first device is described as performing blocks of method 700. Some implementations can have one or more blocks of method 700 performed by one or more other devices (e.g., other client devices or server devices) that can send results or data to the first device.
[00147] In block 702, it is checked whether user consent (e.g., user permission) has been obtained to use user data in the implementation of method 700. For example, user data can include images captured by a user using a client devices, images stored or accessed by a user, e.g., using a client device, image metadata, user data related to use of a messaging application, user preferences, user biometric information, user characteristics (identity, name, age, gender, profession, etc.), information about a user's social network and contacts, social and other types of actions and activities, content, ratings, and opinions created or submitted by a user, a user's current location,
historical user data, images generated, received, and/or accessed by a user, images viewed or shared by a user, etc. One or more blocks of the methods described herein may use such user data in some implementations.
[00148] If user consent has been obtained from the relevant users for which user data may be used in the method 700, then in block 704, it is determined that the blocks of the methods herein can be implemented with possible use of user data as described for those blocks, and the method continues to block 712. If user consent has not been obtained, it is determined in block 706 that blocks are to be implemented without use of user data, and the method continues to block 712. In some implementations, if user consent has not been obtained, blocks are implemented without use of user data and with synthetic data and/or generic or publicly-accessible and publicly-usable data. In some implementations, if user consent has not been obtained, method 400 is not performed.
[00149] In block 712, an image is obtained. Block 712 is similar to block 312 of method 300. The method proceeds to block 714.
[00150] In block 714, the obtained images are analyzed, similar to block 314. In some implementations, one or more image categories may be determined for the images, using method 200. The method proceeds to block 716. For example, image analysis may include determining one or more categories for the obtained images. In some implementations, metadata of the selected images may be updated, e.g., to indicate the image categories for the image. In some implementations, metadata of the selected images may indicate whether the image has been archived. In some implementations, image identifiers corresponding to the images and the one or more categories determined for the images are stored in a database.
[00151] In block 716, a subset of images from the obtained images is identified for archival. In some implementations, the subset of images may include images that are categorized as documents (e.g., receipts, bills, coupons, menus, business cards, whiteboards, newspapers, etc.), memes (e.g., images received via a messaging application that depict a commonly shared image, e.g., a humorous image, an image with a greeting (e.g., "Good morning") etc., and screenshots. In some examples, the subset of images may include images that are categorized as bad photographs, e.g., photographs that are determined to be blurry or out of focus, underexposed, or taken inadvertently.
[00152] In some implementations, if the user permits use of user data such as contextual data, such data may also be used to identify the subset of images. For example, if user data indicates that a user takes multiple photographs of a scene, and subsequently, performs image editing operations on only one of the multiple photographs, other photographs that were not edited may be included in the subset of images identified for archival. In some implementations, if user provides consent to access sharing data, images that are shared may be excluded from the subset of images, even when such images are in categories identified for archival. The method proceeds to block 718.
[00153] In block 718, a user interface is caused to be displayed. For example, the user interface may be displayed by any of client device 120-124. In some implementations, the user interface includes one or more images from the subset of images. In some implementations, the user interface may be displayed as a card, e.g., a suggestion card, with a suggestion to archive images from the subset of images. For example, a suggestion card may be based on a user interface that specifies the presentation various types of information and/ or provides user-selectable options in a concise manner. For example, a suggestion card can be dismissed by a user, and may remain available in an archive of suggestion cards (e.g., in a portion of the user interface) for the user to access at a later time. In some implementations, a suggestion card template may specify triggering events (e.g., dates, times, context, etc.). If user permits access to context data (e.g., user activity data), the suggestion card may be triggered according to the template based on the context data.
[00154] In some implementations, the user interface may be displayed based on the subset of images. For example, the user interface may not be displayed, e.g., if the subset of images has few images, e.g., less than 5 images, less than 7 images, etc. In another example, the user interface may not be displayed if the subset of images includes only recent images, e.g., images captured within the past week, images captured within the previous month, etc. In some implementations, the user interface may be displayed more frequently, e.g., when it is determined that the subset of images includes a large number of images, e.g., 50 images, such as when a large number of duplicate images are captured or when the user receives a large number images that are memes, etc. In some implementations, the user interface may be displayed periodically, e.g., once a week, once a month, etc. The method proceeds to block 720.
[00155] In block 720, first user input is received. The first user input indicates that selected images (e.g., one or more images of the subset of images) are to be archived. In some implementations, the user interface may permit the user to deselect one or more images, and/or select additional images from the obtained images, e.g., prior to archival. The method proceeds to block 722.
[00156] In block 722, the selected images are removed from a displayed view that includes the obtained images. In some implementations, the displayed view is a portion or entirety of a display screen or other display area, which displays the obtained images or a subset thereof. In some implementations, the displayed view includes all the obtained images, even though a subset of the obtained images may be actually displayed on a display device at one time. For example, in some implementations, a subset of the obtained images included in the view is displayed at one time, and images of the obtained images outside the subset may be displayed by the view, e.g., by causing one or more of the previously-displayed images to be positioned out of a boundary of the view (e.g., via scrolling or page-flipping directed by user input, etc.). In some examples, the displayed view can be a chronological view of the images, e.g., based on time of capture of the images (or other time associated with the images).
[00157] In an example, the selected images can be removed from the set of obtained images that are included in the displayed view, e.g., the selected images are not available for display in the displayed view and, e.g., are not displayed within the borders of the displayed view by a display device. In some implementations, metadata for the selected images may be updated to indicate that the selected images are archived. In some implementations, the metadata can be stored in conjunction with the selected image data, and/or can be stored separately in associated with the respective selected images. In some implementations, a database may be identified to store an "archived" in one or more database records corresponding to the selected images. The method proceeds to block 724.
[00158] In block 724, second user input may be received. For example, the user interface may enable a user to provide second input that is indicative of selection of a particular image category. Upon receiving the second user input, a database lookup is performed to identify one or more
images for the particular category. In some implementations, image metadata may be looked up to identify the one or more images for the particular category. The method proceeds to block 726.
[00159] In block 726, one or more images of the particular category as identified in block 724 may be displayed. For example, if the second user input indicates selection of image category "receipts," one or more images that are categorized are receipts (e.g., in block 714) may be displayed.
[00160] Fig. 8A is a diagrammatic illustration of an example user interface 800 that includes a plurality of images. For example, user interface 800 may be displayed by an application on a client device (e.g., any of client devices 120-124) or provided by a server application for display on a client device. For example, the application that displays user interface 800 may be an image management application, an image gallery application, a photos application, etc.
[00161] User interface 800 includes images 802-820. In some implementations, images 802- 820 may be ordered chronologically, e.g., in a descending order of a time of creation (e.g., time of capture by a camera, time the image was received, etc.). Images 802-820 may be any type of image, e.g., a photograph, an animated GIF file, a video, etc. For example, any of images 802-820 may be captured by a user using a camera of a client device. In another example, any of images 802-820 may be received over a network, e.g., via e-mail, via a messaging application, etc. In some implementations, images 802-820 may be stored in a client device, a server device, or both a client device and a server device.
[00162] In some implementations, it may be determined, e.g., using method 700, that one or more images are associated with categories that are suitable for archival. For example, such categories may include documents (e.g., receipts, bills, coupons, menus, business cards, whiteboards, newspapers, etc.), memes (e.g., images received via a messaging application that depict a commonly shared image, e.g., a humorous image, an image with a greeting (e.g., "Good morning") etc., and screenshots. In some examples, such categories may also include bad photographs, e.g., photographs that are determined to be blurry or out of focus, underexposed, or taken inadvertently.
[00163] Other categories of images, e.g., photographs, videos, etc. may not be suitable for archival. For examples, image 802-812 as shown in Fig. 8A may be associated with categories that are suitable for archival, e.g., receipts, documents, bad photographs, etc. For example, image 802 may be categorized as "ticket," images 804, 806, 808, and 810 may be categorized as "receipt," and image 812 may be categorized as "bad photo." Images 814-820 may be categorized as "photos" and as not suitable for archival. Images 802-812 may be in a subset of images to archive.
[00164] Fig. 8B is a diagrammatic illustration of an example user interface 830 that includes a suggestion card to archive a subset of images from the plurality of images shown in Fig. 8A, e.g., images 802-812. As shown in Fig. 8B, images (e.g., images 802-812 as shown in Fig. 8A, numerals omitted from Fig. 8B) may be selected based on the respective associated categories, as indicated by user interface elements 832-842. In some implementations, some images may be shown in a modified form, e.g., tinted. For example, images categorized as screenshots may be shown with a tint, e.g., to distinguish from user interface of the application that displays the images. In some implementations, images categorized as screen shots may be shown with dotted lines around them, shown in a different size, shown with an animation (e.g., oscillating), etc. to provide such distinction.
[00165] User interface 830 further includes text 850 ("6 photos selected. Move to archive?") that provides a suggestion to a user to archive the selected images. User interface element 830 further includes a button 852 ("ARCHIVE") that is configured to receive user input. In some implementations, user interface elements 832-842 may be selectable such that a user can omit one or more images from the images selected for archival. Upon receiving user selection of button 852, the selected images may be archived. Archived images may be stored such that the images do not appear in a chronological or other view of images.
[00166] In some implementations, archived images may be retained, e.g., by a server device, and removed from a client device. Archived images may remain accessible by the user, e.g., via search, via an "archived images" folder, or in image groups that correspond to various image categories, e.g., "receipts," "tickets," etc. In some implementations, e.g., if a user indicates a preference, archived images may be deleted from storage and may not be accessible to the user
after deletion. In some implementations, one or more selected images (e.g., images categorized as bad photos) may be deleted after archiving.
[00167] Fig. 8C is a diagrammatic illustration of an example user interface 860 that may be displayed after a user has archived the subset of images as shown in Fig. 8B. Images 802-812 of Fig. 8A that were archived (e.g., based on user input indicative of selection of "ARCHIVE") are no longer included in the user interface, as shown in FIG. 8C, and an image 822 is included (e.g., that was previously not shown, e.g., due to constraints of available screen space).
[00168] Fig. 9 is a block diagram of an example device 900 which may be used to implement one or more features described herein. In one example, device 900 may be used to implement a client device, e.g., any of client devices 115 shown in Fig. 1. Alternatively, device 900 can implement a server device, e.g., server 101. In some implementations, device 900 may be used to implement a client device, a server device, or both client and server devices. Device 900 can be any suitable computer system, server, or other electronic or hardware device as described above.
[00169] One or more methods described herein can be run in a standalone program that can be executed on any type of computing device, a program run on a web browser, a mobile application ("app") run on a mobile computing device (e.g., cell phone, smart phone, tablet computer, wearable device (wristwatch, armband, jewellery, headwear, virtual reality goggles or glasses, augmented reality goggles or glasses, head mounted display, etc.), laptop computer, etc.). In one example, a client/server architecture can be used, e.g., a mobile computing device (as a client device) sends user input data to a server device and receives from the server the final output data for output (e.g., for display). In another example, all computations can be performed within the mobile app (and/or other apps) on the mobile computing device. In another example, computations can be split between the mobile computing device and one or more server devices.
[00170] In some implementations, device 900 includes a processor 902, a memory 904, and input/output (I/O) interface 906. Processor 902 can be one or more processors and/or processing circuits to execute program code and control basic operations of the device 900. A "processor" includes any suitable hardware system, mechanism or component that processes data, signals or other information. A processor may include a system with a general-purpose central processing unit (CPU) with one or more cores (e.g., in a single-core, dual-core, or multi-core configuration),
multiple processing units (e.g., in a multiprocessor configuration), a graphics processing unit (GPU), a field-programmable gate array (FPGA), an application-specific integrated circuit (ASIC), a complex programmable logic device (CPLD), dedicated circuitry for achieving functionality, a special-purpose processor to implement neural network model-based processing, neural circuits, processors optimized for matrix computations (e.g., matrix multiplication), or other systems. In some implementations, processor 902 may include one or more co-processors that implement neural -network processing. In some implementations, processor 902 may be a processor that processes data to produce probabilistic output, e.g., the output produced by processor 902 may be imprecise or may be accurate within a range from an expected output. Processing need not be limited to a particular geographic location, or have temporal limitations. For example, a processor may perform its functions in "real-time," "offline," in a "batch mode," etc. Portions of processing may be performed at different times and at different locations, by different (or the same) processing systems. A computer may be any processor in communication with a memory.
[00171] Memory 904 is typically provided in device 900 for access by the processor 902, and may be any suitable processor-readable storage medium, such as random access memory (RAM), read-only memory (ROM), Electrical Erasable Read-only Memory (EEPROM), Flash memory, etc., suitable for storing instructions for execution by the processor, and located separate from processor 902 and/or integrated therewith. Memory 904 can store software operating on the server device 900 by the processor 902, including an operating system 908, machine-learning application 930, other applications 912, and application data 914. Other applications 912 may include applications such as a data display engine, web hosting engine, image display engine, notification engine, social networking engine, etc. In some implementations, the machine-learning application 930 and other applications 912 can each include instructions that enable processor 902 to perform functions described herein, e.g., some or all of the methods of Figs. 2, 3, 4, and 7.
[00172] Other applications 912 can include, e.g., image editing applications, media display applications, communication applications, web hosting engines or applications, mapping applications, media sharing applications, etc. One or more methods disclosed herein can operate in several environments and platforms, e.g., as a stand-alone computer program that can run on any type of computing device, as a web application having web pages, as a mobile application ("app") run on a mobile computing device, etc.
[00173] In various implementations, machine-learning application may utilize Bayesian classifiers, support vector machines, neural networks, or other learning techniques. In some implementations, machine-learning application 930 may include a trained model 934, an inference engine 936, and data 932. In some implementations, data 932 may include training data, e.g., data used to generate trained model 934. For example, training data may include any type of data such as text, images, audio, video, etc. Training data may be obtained from any source, e.g., a data repository specifically marked for training, data for which permission is provided for use as training data for machine-learning, etc. In implementations where one or more users permit use of their respective user data to train a machine-learning model, e.g., trained model 934, training data may include such user data. In implementations where users permit use of their respective user data, data 932 may include permitted data such as images (e.g., photos or other user-generated images), communications (e.g., e-mail; chat data such as text messages, voice, video, etc.), documents (e.g., spreadsheets, text documents, presentations, etc.)
[00174] In some implementations, data 932 may include collected data such as map data, image data (e.g., satellite imagery, overhead imagery, etc.), game data, etc. In some implementations, training data may include synthetic data generated for the purpose of training, such as data that is not based on user input or activity in the context that is being trained, e.g., data generated from simulated conversations, computer-generated images, etc. In some implementations, machine- learning application 930 excludes data 932. For example, in these implementations, the trained model 934 may be generated, e.g., on a different device, and be provided as part of machine- learning application 930. In various implementations, the trained model 934 may be provided as a data file that includes a model structure or form, and associated weights. Inference engine 936 may read the data file for trained model 934 and implement a neural network with node connectivity, layers, and weights based on the model structure or form specified in trained model 934.
[00175] Machine-learning application 930 also includes a trained model 934. In some implementations, the trained model may include one or more model forms or structures. For example, model forms or structures can include any type of neural -network, such as a linear network, a deep neural network that implements a plurality of layers (e.g., "hidden layers" between an input layer and an output layer, with each layer being a linear network), a convolutional neural
network (e.g., a network that splits or partitions input data into multiple parts or tiles, processes each tile separately using one or more neural-network layers, and aggregates the results from the processing of each tile), a sequence-to-sequence neural network (e.g., a network that takes as input sequential data, such as words in a sentence, frames in a video, etc. and produces as output a result sequence), etc. The model form or structure may specify connectivity between various nodes and organization of nodes into layers. For example, nodes of a first layer (e.g., input layer) may receive data as input data 932 or application data 914. Such data can include, for example, one or more pixels per node, e.g., when the trained model is used for image analysis. Subsequent intermediate layers may receive as input output of nodes of a previous layer per the connectivity specified in the model form or structure. These layers may also be referred to as hidden layers. A final layer (e.g., output layer) produces an output of the machine-learning application. For example, the output may be a set of labels for an image, a representation of the image that permits comparison of the image to other images (e.g., a feature vector for the image), an output sentence in response to an input sentence, one or more categories for the input data, etc. depending on the specific trained model. In some implementations, model form or structure also specifies a number and/ or type of nodes in each layer.
[00176] In different implementations, trained model 934 can include a plurality of nodes, arranged into layers per the model structure or form. In some implementations, the nodes may be computational nodes with no memory, e.g., configured to process one unit of input to produce one unit of output. Computation performed by a node may include, for example, multiplying each of a plurality of node inputs by a weight, obtaining a weighted sum, and adjusting the weighted sum with a bias or intercept value to produce the node output. In some implementations, the computation performed by a node may also include applying a step/activation function to the adjusted weighted sum. In some implementations, the step/activation function may be a non-linear function. In various implementations, such computation may include operations such as matrix multiplication. In some implementations, computations by the plurality of nodes may be performed in parallel, e.g., using multiple processors cores of a multicore processor, using individual processing units of a GPU, or special-purpose neural circuitry. In some implementations, nodes may include memory, e.g., may be able to store and use one or more earlier inputs in processing a subsequent input. For example, nodes with memory may include long short- term memory (LSTM) nodes. LSTM nodes may use the memory to maintain "state" that permits
the node to act like a finite state machine (FSM). Models with such nodes may be useful in processing sequential data, e.g., words in a sentence or a paragraph, frames in a video, speech or other audio, etc.
[00177] In some implementations, trained model 934 may include embeddings or weights for individual nodes. For example, a model may be initiated as a plurality of nodes organized into layers as specified by the model form or structure. At initialization, a respective weight may be applied to a connection between each pair of nodes that are connected per the model form, e.g., nodes in successive layers of the neural network. For example, the respective weights may be randomly assigned, or initialized to default values. The model may then be trained, e.g., using data 932, to produce a result.
[00178] For example, training may include applying supervised learning techniques. In supervised learning, the training data can include a plurality of inputs (e.g., a set of images) and a corresponding expected output for each input (e.g., one or more labels for each image). Based on a comparison of the output of the model with the expected output, values of the weights are automatically adjusted, e.g., in a manner that increases a probability that the model produces the expected output when provided similar input.
[00179] In some implementations, training may include applying unsupervised learning techniques. In unsupervised learning, only input data may be provided and the model may be trained to differentiate data, e.g., to cluster input data into a plurality of groups, where each group includes input data that are similar in some manner. For example, the model may be trained to differentiate images such that the model distinguishes abstract images (e.g., synthetic images, human-drawn images, etc.) from natural images (e.g., photos).
[00180] In another example, a model trained using unsupervised learning may cluster words based on the use of the words in input sentences. In some implementations, unsupervised learning may be used to produce knowledge representations, e.g., that may be used by machine-learning application 930. In various implementations, a trained model includes a set of weights, or embeddings, corresponding to the model structure. In implementations where data 932 is omitted, machine-learning application 930 may include trained model 934 that is based on prior training, e.g., by a developer of the machine-learning application 930, by a third-party, etc. In some
implementations, trained model 934 may include a set of weights that are fixed, e.g., downloaded from a server that provides the weights.
[00181] Machine-learning application 930 also includes an inference engine 936. Inference engine 936 is configured to apply the trained model 934 to data, such as application data 914, to provide an inference. In some implementations, inference engine 936 may include software code to be executed by processor 902. In some implementations, inference engine 936 may specify circuit configuration (e.g., for a programmable processor, for a field programmable gate array (FPGA), etc.) enabling processor 902 to apply the trained model. In some implementations, inference engine 936 may include software instructions, hardware instructions, or a combination. In some implementations, inference engine 936 may offer an application programming interface (API) that can be used by operating system 908 and/or other applications 912 to invoke inference engine 936, e.g., to apply trained model 934 to application data 914 to generate an inference.
[00182] Machine-learning application 930 may provide several technical advantages. For example, when trained model 934 is generated based on unsupervised learning, trained model 934 can be applied by inference engine 936 to produce knowledge representations (e.g., numeric representations) from input data, e.g., application data 914. For example, a model trained for image analysis may produce representations of images that have a smaller data size (e.g., 1 KB) than input images (e.g., 10 MB). In some implementations, such representations may be helpful to reduce processing cost (e.g., computational cost, memory usage, etc.) to generate an output (e.g., a label, a classification, a sentence descriptive of the image, etc.). In some implementations, such representations may be provided as input to a different machine-learning application that produces output from the output of inference engine 936. In some implementations, knowledge representations generated by machine-learning application 930 may be provided to a different device that conducts further processing, e.g., over a network. In such implementations, providing the knowledge representations rather than the images may provide a technical benefit, e.g., enable faster data transmission with reduced cost. In another example, a model trained for clustering documents may produce document clusters from input documents. The document clusters may be suitable for further processing (e.g., determining whether a document is related to a topic,
determining a classification category for the document, etc.) without the need to access the original document, and therefore, save computational cost.
[00183] In some implementations, machine-learning application 930 may be implemented in an offline manner. In these implementations, trained model 934 may be generated in a first stage, and provided as part of machine-learning application 930. In some implementations, machine- learning application 930 may be implemented in an online manner. For example, in such implementations, an application that invokes machine-learning application 930 (e.g., operating system 908, one or more of other applications 912) may utilize an inference produced by machine- learning application 930, e.g., provide the inference to a user, and may generate system logs (e.g., if permitted by the user, an action taken by the user based on the inference; or if utilized as input for further processing, a result of the further processing). System logs may be produced periodically, e.g., hourly, monthly, quarterly, etc. and may be used, with user permission, to update trained model 934, e.g., to update embeddings for trained model 934.
[00184] In some implementations, machine-learning application 930 may be implemented in a manner that can adapt to particular configuration of device 900 on which the machine-learning application 930 is executed. For example, machine-learning application 930 may determine a computational graph that utilizes available computational resources, e.g., processor 902. For example, if machine-learning application 930 is implemented as a distributed application on multiple devices, machine-learning application 930 may determine computations to be carried out on individual devices in a manner that optimizes computation. In another example, machine- learning application 930 may determine that processor 902 includes a GPU with a particular number of GPU cores (e.g., 1000) and implement the inference engine accordingly (e.g., as 1000 individual processes or threads).
[00185] In some implementations, machine-learning application 930 may implement an ensemble of trained models. For example, trained model 934 may include a plurality of trained models that are each applicable to same input data. In these implementations, machine-learning application 930 may choose a particular trained model, e.g., based on available computational resources, success rate with prior inferences, etc. In some implementations, machine-learning application 930 may execute inference engine 936 such that a plurality of trained models is
applied. In these implementations, machine-learning application 930 may combine outputs from applying individual models, e.g., using a voting-technique that scores individual outputs from applying each trained model, or by choosing one or more particular outputs. Further, in these implementations, machine-learning application may apply a time threshold for applying individual trained models (e.g., 0.5 ms) and utilize only those individual outputs that are available within the time threshold. Outputs that are not received within the time threshold may not be utilized, e.g., discarded. For example, such approaches may be suitable when there is a time limit specified while invoking the machine-learning application, e.g., by operating system 908 or one or more applications 912.
[00186] In different implementations, machine-learning application 930 can produce different types of outputs. For example, machine-learning application 930 can provide representations or clusters (e.g., numeric representations of input data), labels (e.g., for input data that includes images, documents, etc.), phrases or sentences (e.g., descriptive of an image or video, suitable for use as a response to an input sentence, etc.), images (e.g., generated by the machine-learning application in response to input), audio or video (e.g., in response an input video, machine-learning application 930 may produce an output video with a particular effect applied, e.g., rendered in a comic-book or particular artist's style, when trained model 934 is trained using training data from the comic book or particular artist, etc. In some implementations, machine-learning application 930 may produce an output based on a format specified by an invoking application, e.g. operating system 908 or one or more applications 912. In some implementations, an invoking application may be another machine-learning application. For example, such configurations may be used in generative adversarial networks, where an invoking machine-learning application is trained using output from machine-learning application 930 and vice-versa.
[00187] Any of software in memory 904 can alternatively be stored on any other suitable storage location or computer-readable medium. In addition, memory 904 (and/or other connected storage device(s)) can store one or more messages, one or more taxonomies, electronic encyclopaedia, dictionaries, thesauruses, knowledge bases, message data, grammars, user preferences, and/or other instructions and data used in the features described herein. Memory 904 and any other type of storage (magnetic disk, optical disk, magnetic tape, or other tangible media) can be considered "storage" or "storage devices. "
[00188] I/O interface 906 can provide functions to enable interfacing the server device 900 with other systems and devices. Interfaced devices can be included as part of the device 900 or can be separate and communicate with the device 900. For example, network communication devices, storage devices (e.g., memory and/or database 106), and input/output devices can communicate via I/O interface 906. In some implementations, the I/O interface can connect to interface devices such as input devices (keyboard, pointing device, touchscreen, microphone, camera, scanner, sensors, etc.) and/or output devices (display devices, speaker devices, printers, motors, etc.).
[00189] Some examples of interfaced devices that can connect to I/O interface 906 can include one or more display devices 920 that can be used to display content, e.g., images, video, and/or a user interface of an output application as described herein. Display device 920 can be connected to device 900 via local connections (e.g., display bus) and/or via networked connections and can be any suitable display device. Display device 920 can include any suitable display device such as an LCD, LED, or plasma display screen, CRT, television, monitor, touchscreen, 3-D display screen, or other visual display device. For example, display device 920 can be a flat display screen provided on a mobile device, multiple display screens provided in a goggles or headset device, or a monitor screen for a computer device.
[00190] The I/O interface 906 can interface to other input and output devices. Some examples include one or more cameras which can capture images. Some implementations can provide a microphone for capturing sound (e.g., as a part of captured images, voice commands, etc.), audio speaker devices for outputting sound, or other input and output devices.
[00191] For ease of illustration, Fig. 9 shows one block for each of processor 902, memory 904, I/O interface 906, and software blocks 908, 912, and 930. These blocks may represent one or more processors or processing circuitries, operating systems, memories, I/O interfaces, applications, and/or software modules. In other implementations, device 900 may not have all of the components shown and/or may have other elements including other types of elements instead of, or in addition to, those shown herein. While some components are described as performing blocks and operations as described in some implementations herein, any suitable component or combination of components of environment 100, device 900, similar systems, or any suitable
processor or processors associated with such a system, may perform the blocks and operations described.
[00192] Methods described herein can be implemented by computer program instructions or code, which can be executed on a computer. For example, the code can be implemented by one or more digital processors (e.g., microprocessors or other processing circuitry) and can be stored on a computer program product including a non-transitory computer readable medium (e.g., storage medium), such as a magnetic, optical, electromagnetic, or semiconductor storage medium, including semiconductor or solid state memory, magnetic tape, a removable computer diskette, a random access memory (RAM), a read-only memory (ROM), flash memory, a rigid magnetic disk, an optical disk, a solid-state memory drive, etc. The program instructions can also be contained in, and provided as, an electronic signal, for example in the form of software as a service (SaaS) delivered from a server (e.g., a distributed system and/or a cloud computing system). Alternatively, one or more methods can be implemented in hardware (logic gates, etc.), or in a combination of hardware and software. Example hardware can be programmable processors (e.g. Field-Programmable Gate Array (FPGA), Complex Programmable Logic Device), general purpose processors, graphics processors, Application Specific Integrated Circuits (ASICs), and the like. One or more methods can be performed as part of or component of an application running on the system, or as an application or software running in conjunction with other applications and operating system.
[00193] Although the description has been described with respect to particular implementations thereof, these particular implementations are merely illustrative, and not restrictive. Concepts illustrated in the examples may be applied to other examples and implementations.
[00194] In situations in which certain implementations discussed herein may collect or use personal information about users (e.g., user data, information about a user's social network, user's location and time at the location, user's biometric information, user's activities and demographic information), users are provided with one or more opportunities to control whether information is collected, whether the personal information is stored, whether the personal information is used, and how the information is collected about the user, stored and used. That is, the systems and methods discussed herein collect, store and/or use user personal information specifically upon
receiving explicit authorization from the relevant users to do so. For example, a user is provided with control over whether programs or features collect user information about that particular user or other users relevant to the program or feature. Each user for which personal information is to be collected is presented with one or more options to allow control over the information collection relevant to that user, to provide permission or authorization as to whether the information is collected and as to which portions of the information are to be collected. For example, users can be provided with one or more such control options over a communication network. In addition, certain data may be treated in one or more ways before it is stored or used so that personally identifiable information is removed. As one example, a user's identity may be treated so that no personally identifiable information can be determined. As another example, a user device's geographic location may be generalized to a larger region so that the user's particular location cannot be determined.
[00195] Note that the functional blocks, operations, features, methods, devices, and systems described in the present disclosure may be integrated or divided into different combinations of systems, devices, and functional blocks as would be known to those skilled in the art. Any suitable programming language and programming techniques may be used to implement the routines of particular implementations. Different programming techniques may be employed, e.g., procedural or object-oriented. The routines may execute on a single processing device or multiple processors. Although the steps, operations, or computations may be presented in a specific order, the order may be changed in different particular implementations. In some implementations, multiple steps or operations shown as sequential in this specification may be performed at the same time.
Claims
1. A method comprising:
obtaining an image;
programmatically analyzing the image to determine one or more suggested actions for the image;
causing a user interface to be displayed that includes the image, a plurality of first user interface elements each corresponding to a respective default action of one or more default actions, and one or more second user interface elements each corresponding to a respective suggested action of the one or more suggested actions;
receiving user input indicative of selection of a particular action from one of: the one or more default actions or the one or more suggested actions; and
in response to the user input, causing a command for the particular action to be executed.
2. The method of claim 1 , wherein programmatically analyzing the image comprises applying a classifier to the image to determine one or more categories for the image, each of the one or more categories associated with at least one of the one or more suggested actions.
3. The method of claim 1, wherein programmatically analyzing the image comprises:
sending a representation of the image to a server; and
receiving a response from the server, wherein the response includes at least one of the one or more suggested actions.
4. The method of claim 3, wherein sending the representation comprises sending an image thumbnail that has a smaller data size than the image.
5. The method of claim 1, wherein programmatically analyzing the image comprises determining a parameter for the command based on at least one of: image data that includes values of a plurality of pixels of the image, or image metadata.
6. The method of claim 5, wherein the command is associated with a software application and wherein the causing the command to be executed includes invoking the software application with the parameter.
7. The method of claim 1, wherein obtaining the image comprises detecting that the image has been captured based on at least one of: detecting activation of a camera or receiving a notification from an operating system that the image has been written to a local memory.
8. The method of claim 1, wherein the user interface is displayed over a camera user interface of a camera application, and wherein the method is performed by an application different from the camera application.
9. The method of claim 1, wherein the one or more default actions include sharing the image, archiving the image, and performing a visual search based on the image.
10. The method of claim 1, wherein programmatically analyzing the image comprises identifying at least two distinct portions of the image, and wherein the one or more suggested actions include at least two actions that are each associated with a respective portion of the at least two distinct portions.
11. A method comprising:
obtaining an image;
programmatically analyzing the image to determine a plurality of image features; determining a category for the image based on the plurality of image features, wherein the category is associated with an action;
in response to determining the category, causing the action to be performed; and causing a user interface to be displayed, wherein the user interface includes the image and an indication that the action was performed.
12. The method of claim 11, wherein causing the user interface to be displayed includes highlighting a portion of the image, wherein the portion of the image corresponds to the category.
13. The method of claim 11, further comprising storing the image and the category, such that the image is included in an image group for the category.
14. The method of claim 11, wherein the determining the category comprises applying an image classifier trained to identify the category for the image from a plurality of categories.
15. The method of claim 11, wherein determining the category comprises determining that the image includes contact information, and the method further comprises extracting one or more of an e-mail address, a phone number, a physical address, or a social media address from the image, wherein the action is to add a contact in an address book based on the extracting.
16. The method of claim 11, wherein determining the category comprises determining that the image includes a media item, and wherein the action is one or more of: adding the media item to a wishlist, adding the media item to a playlist, or purchasing the media item.
17. A method comprising:
obtaining a plurality of images;
programmatically analyzing the plurality of images to determine a plurality of image features;
determining one or more image categories for the plurality of images based on the plurality of image features;
identifying a subset of the plurality of images based on the one or more image categories, wherein each image in the subset of the plurality of images is associated with an image category for archival;
causing a user interface to be displayed that includes one or more images of the subset;
receiving first user input to archive at least one of the one or more images of the subset; and
in response to the first user input, removing the at least one of the one or more images of the subset from a view of the plurality of images.
18. The method of claim 17, further comprising updating metadata of each image in the subset with respective one or more image categories for the image.
19. The method of claim 17, further comprising:
storing image identifiers and the one or more image categories for the plurality of images in a database;
receiving second user input indicative of selection of a particular category of the one or more image categories; and
in response to receiving the second user input,
performing a database lookup to identify one or more images for the particular category based on the image identifiers and the one or more image categories; and
causing the one or more images for the particular category to be displayed.
20. The method of claim 17, wherein the image category for archival includes one or more of document, meme, or screenshot.
21. A system comprising:
one or more hardware processors; and
a storage device with instructions stored thereon that, when executed by the one or more hardware processors, cause the one or more hardware processors to perform operations comprising:
obtaining an image;
programmatically analyzing the image to determine one or more suggested actions for the image;
causing a user interface to be displayed that includes the image, a plurality of first user interface elements each corresponding to a respective default action of one or more
default actions, and one or more second user interface elements each corresponding to a respective suggested action of the one or more suggested actions;
receiving user input indicative of selection of a particular action from one of: the one or more default actions or the one or more suggested actions; and
in response to the user input, causing a command for the particular action to be executed.
22. A system comprising:
one or more hardware processors; and
a storage device with instructions stored thereon that, when executed by the one or more hardware processors, cause the one or more hardware processors to perform operations comprising:
obtaining an image;
programmatically analyzing the image to determine a plurality of image features; determining a category for the image based on the plurality of image features, wherein the category is associated with an action;
in response to determining the category, causing the action to be performed; and causing a user interface to be displayed, wherein the user interface includes the image and an indication that the action was performed.
23. A system comprising:
one or more hardware processors; and
a storage device with instructions stored thereon that, when executed by the one or more hardware processors, cause the one or more hardware processors to perform operations comprising:
obtaining a plurality of images;
programmatically analyzing the plurality of images to determine a plurality of image features;
determining one or more image categories for the plurality of images based on the plurality of image features;
identifying a subset of the plurality of images based on the one or more image categories, wherein each image in the subset of the plurality of images is associated with an image category for archival;
causing a user interface to be displayed that includes one or more images of the subset;
receiving first user input to archive at least one of the one or more images of the subset; and
in response to the first user input, removing the at least one of the one or more images of the subset from a view of the plurality of images.
24. A non-transitory computer readable medium with instructions stored thereon that, when executed by a processor, cause the processor to perform operations comprising:
obtaining an image;
programmatically analyzing the image to determine one or more suggested actions for the image;
causing a user interface to be displayed that includes the image, a plurality of first user interface elements each corresponding to a respective default action of one or more default actions, and one or more second user interface elements each corresponding to a respective suggested action of the one or more suggested actions;
receiving user input indicative of selection of a particular action from one of: the one or more default actions or the one or more suggested actions; and
in response to the user input, causing a command for the particular action to be executed.
25. A non-transitory computer readable medium with instructions stored thereon that, when executed by a processor, cause the processor to perform operations comprising:
obtaining an image;
programmatically analyzing the image to determine a plurality of image features; determining a category for the image based on the plurality of image features, wherein the category is associated with an action;
in response to determining the category, causing the action to be performed; and
causing a user interface to be displayed, wherein the user interface includes the image and an indication that the action was performed.
26. A non-transitory computer readable medium with instructions stored thereon that, when executed by a processor, cause the processor to perform operations comprising:
obtaining a plurality of images;
programmatically analyzing the plurality of images to determine a plurality of image features;
determining one or more image categories for the plurality of images based on the plurality of image features;
identifying a subset of the plurality of images based on the one or more image categories, wherein each image in the subset of the plurality of images is associated with an image category for archival;
causing a user interface to be displayed that includes one or more images of the subset;
receiving first user input to archive at least one of the one or more images of the subset; and
in response to the first user input, removing the at least one of the one or more images of the subset from a view of the plurality of images.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762507048P | 2017-05-16 | 2017-05-16 | |
US62/507,048 | 2017-05-16 |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2018212822A1 true WO2018212822A1 (en) | 2018-11-22 |
Family
ID=61911663
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2018/021028 WO2018212822A1 (en) | 2017-05-16 | 2018-03-06 | Suggested actions for images |
Country Status (2)
Country | Link |
---|---|
US (3) | US10860854B2 (en) |
WO (1) | WO2018212822A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023239468A1 (en) * | 2022-06-09 | 2023-12-14 | Microsoft Technology Licensing, Llc | Cross-application componentized document generation |
Families Citing this family (79)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP6209952B2 (en) * | 2013-11-19 | 2017-10-11 | ソニー株式会社 | Information processing apparatus, imaging apparatus, imaging system, information processing method, and program |
EP3395019B1 (en) | 2015-12-21 | 2022-03-30 | Google LLC | Automatic suggestions and other content for messaging applications |
CN108781175B (en) | 2015-12-21 | 2021-09-21 | 谷歌有限责任公司 | Method, medium, and system for automatic suggestion of message exchange contexts |
US10387461B2 (en) | 2016-08-16 | 2019-08-20 | Google Llc | Techniques for suggesting electronic messages based on user activity and other context |
CN117634495A (en) | 2016-09-20 | 2024-03-01 | 谷歌有限责任公司 | Suggested response based on message decal |
US10511450B2 (en) | 2016-09-20 | 2019-12-17 | Google Llc | Bot permissions |
US10015124B2 (en) | 2016-09-20 | 2018-07-03 | Google Llc | Automatic response suggestions based on images received in messaging applications |
US10416846B2 (en) | 2016-11-12 | 2019-09-17 | Google Llc | Determining graphical element(s) for inclusion in an electronic communication |
US10860854B2 (en) | 2017-05-16 | 2020-12-08 | Google Llc | Suggested actions for images |
JP7212266B2 (en) * | 2017-06-05 | 2023-01-25 | バランスド メディア テクノロジー エルエルシー | A platform for co-processing tasks |
US10348658B2 (en) | 2017-06-15 | 2019-07-09 | Google Llc | Suggested items for use with embedded applications in chat conversations |
US10404636B2 (en) | 2017-06-15 | 2019-09-03 | Google Llc | Embedded programs and interfaces for chat conversations |
US10474890B2 (en) * | 2017-07-13 | 2019-11-12 | Intuit, Inc. | Simulating image capture |
US11176485B2 (en) * | 2017-09-06 | 2021-11-16 | Facebook Inc. | Dynamic integration of machine-learning modules |
KR102035531B1 (en) * | 2017-09-26 | 2019-10-24 | 네이버웹툰 주식회사 | Creating representative image |
US10679101B2 (en) * | 2017-10-25 | 2020-06-09 | Hand Held Products, Inc. | Optical character recognition systems and methods |
KR20190053675A (en) * | 2017-11-10 | 2019-05-20 | 삼성전자주식회사 | Electronic apparatus and operating method thereof |
US10812463B2 (en) * | 2017-12-08 | 2020-10-20 | International Business Machines Corporation | Secure access to an enterprise computing environment |
EP4239498A3 (en) | 2017-12-22 | 2023-10-04 | Google LLC | Image selection suggestions |
US11209442B2 (en) | 2017-12-22 | 2021-12-28 | Google Llc | Image selection suggestions |
US10891526B2 (en) * | 2017-12-22 | 2021-01-12 | Google Llc | Functional image archiving |
US11410075B2 (en) * | 2018-01-15 | 2022-08-09 | Microsoft Technology Licensing, Llc | Contextually-aware recommendations for assisting users with task completion |
US10884769B2 (en) * | 2018-02-17 | 2021-01-05 | Adobe Inc. | Photo-editing application recommendations |
US11270215B2 (en) * | 2018-02-20 | 2022-03-08 | Microstrategy Incorporated | Intelligent recommendations |
US10217029B1 (en) * | 2018-02-26 | 2019-02-26 | Ringcentral, Inc. | Systems and methods for automatically generating headshots from a plurality of still images |
US11036811B2 (en) | 2018-03-16 | 2021-06-15 | Adobe Inc. | Categorical data transformation and clustering for machine learning using data repository systems |
CA183999S (en) | 2018-04-23 | 2019-07-17 | Beijing Kuaimajiabian Technology Co Ltd | Display screen with graphical user interface |
CA184001S (en) * | 2018-04-27 | 2019-07-17 | Beijing Kuaimajiabian Technology Co Ltd | Display screen with graphical user interface |
US11698927B2 (en) * | 2018-05-16 | 2023-07-11 | Sony Interactive Entertainment LLC | Contextual digital media processing systems and methods |
US10877927B2 (en) * | 2018-05-31 | 2020-12-29 | Microsofttechnology Licensing, Llc | Distributed computing system with a synthetic data as a service asset assembly engine |
US11281996B2 (en) * | 2018-05-31 | 2022-03-22 | Microsoft Technology Licensing, Llc | Distributed computing system with a synthetic data as a service feedback loop engine |
KR102125402B1 (en) * | 2018-06-20 | 2020-06-23 | 라인플러스 주식회사 | Method, system, and non-transitory computer readable record medium for filtering image using keyword extracted form image |
US11100160B2 (en) * | 2018-07-31 | 2021-08-24 | International Business Machines Corporation | Intelligent image note processing |
USD915451S1 (en) | 2018-08-24 | 2021-04-06 | Microsoft Corporation | Display screen with animated graphical user interface |
USD895664S1 (en) * | 2018-08-24 | 2020-09-08 | Microsoft Corporation | Display screen with animated graphical user interface |
USD933079S1 (en) | 2018-08-24 | 2021-10-12 | Microsoft Corporation | Display screen with animated graphical user interface |
US11341725B2 (en) * | 2018-09-27 | 2022-05-24 | Apple Inc. | Intermediary emergent content |
USD928174S1 (en) | 2018-11-06 | 2021-08-17 | Honeywell International Inc. | Display screen with graphical user interface |
USD916781S1 (en) * | 2018-11-06 | 2021-04-20 | Honeywell International Inc. | Display screen with graphical user interface |
US20200151453A1 (en) * | 2018-11-08 | 2020-05-14 | International Business Machines Corporation | Reducing overlap among a collection of photographs |
USD897366S1 (en) * | 2018-12-11 | 2020-09-29 | Beijing Microlive Vision Technology Co., Ltd. | Display screen or portion thereof with a graphical user interface |
USD896263S1 (en) * | 2018-12-11 | 2020-09-15 | Beijing Microlive Vision Technology Co., Ltd. | Display screen or portion thereof with a graphical user interface |
KR102189307B1 (en) * | 2018-12-31 | 2020-12-09 | 오지큐 주식회사 | Method for Improving Reliability of Artificial Intelligence based Object Recognition by using Collective Intelligence based Mutual Verification |
KR20200100918A (en) | 2019-02-19 | 2020-08-27 | 삼성전자주식회사 | Electronic device for providing various functions through application using a camera and operating method thereof |
CN110097086B (en) * | 2019-04-03 | 2023-07-18 | 平安科技（深圳）有限公司 | Image generation model training method, image generation method, device, equipment and storage medium |
US11302080B1 (en) * | 2019-05-06 | 2022-04-12 | Apple Inc. | Planner for an objective-effectuator |
US10825254B1 (en) * | 2019-05-30 | 2020-11-03 | International Business Machines Corporation | Augmented reality book selection-assist |
US11423877B2 (en) * | 2019-07-05 | 2022-08-23 | Lg Electronics Inc. | Robot for providing guidance service using artificial intelligence and method of operating the same |
CN110543579A (en) * | 2019-07-26 | 2019-12-06 | 华为技术有限公司 | Image display method and electronic equipment |
US11403285B2 (en) * | 2019-09-04 | 2022-08-02 | Ebay Inc. | Item-specific search controls in a search system |
US11036724B2 (en) * | 2019-09-04 | 2021-06-15 | Microsoft Technology Licensing, Llc | Interactive visual search engine |
KR20210031269A (en) * | 2019-09-11 | 2021-03-19 | 삼성전자주식회사 | Electronic device and operating method for training an image recognition model |
US11556736B2 (en) * | 2019-09-12 | 2023-01-17 | Sap Se | Optimizing inference time of entity matching models |
US11403849B2 (en) * | 2019-09-25 | 2022-08-02 | Charter Communications Operating, Llc | Methods and apparatus for characterization of digital content |
CN110826120B (en) * | 2019-09-29 | 2023-07-28 | 深圳市万翼数字技术有限公司 | House structure image processing method and related device |
WO2021100502A1 (en) * | 2019-11-18 | 2021-05-27 | ポジティブワン株式会社 | Allocation control device, allocation control system, and allocation control method |
KR20210062477A (en) * | 2019-11-21 | 2021-05-31 | 삼성전자주식회사 | Electronic apparatus and control method thereof |
US20210158147A1 (en) * | 2019-11-26 | 2021-05-27 | International Business Machines Corporation | Training approach determination for large deep learning models |
US11321737B2 (en) * | 2019-12-13 | 2022-05-03 | Ebay Inc. | Techniques of prefetching operation cost based digital content and digital content with emphasis |
KR20210087788A (en) * | 2020-01-03 | 2021-07-13 | 엘지전자 주식회사 | Image context processing |
US11687778B2 (en) | 2020-01-06 | 2023-06-27 | The Research Foundation For The State University Of New York | Fakecatcher: detection of synthetic portrait videos using biological signals |
CN113254680B (en) * | 2020-02-10 | 2023-07-25 | 北京百度网讯科技有限公司 | Cover map processing method of multimedia information, client and electronic equipment |
US11023814B1 (en) * | 2020-02-18 | 2021-06-01 | Coupang Corp. | Computerized systems and methods for product categorization using artificial intelligence |
US10938979B1 (en) * | 2020-03-11 | 2021-03-02 | Fmr Llc | Generating and displaying custom-selected content in a mobile device application |
US11140434B1 (en) * | 2020-04-29 | 2021-10-05 | Rovi Guides, Inc. | Systems and methods for providing personalized actionable items for content items |
US11431895B2 (en) | 2020-06-24 | 2022-08-30 | International Business Machines Corporation | Photography guidance based on crowdsourced photographs |
WO2022023988A1 (en) * | 2020-07-28 | 2022-02-03 | Way2Vat Ltd. | Systems and methods for document image analysis by alignment of document image sets to spreadsheets |
CN111985467B (en) * | 2020-08-20 | 2024-03-29 | 厦门美图之家科技有限公司 | Chat record screenshot processing method and device, computer equipment and storage medium |
CN112004033B (en) * | 2020-09-27 | 2023-05-26 | 北京小米松果电子有限公司 | Video cover determining method and device and storage medium |
US11112945B1 (en) * | 2020-09-30 | 2021-09-07 | Snap Inc. | Content detection and transmission in response to receiving user interactions |
US20220188676A1 (en) * | 2020-12-15 | 2022-06-16 | International Business Machines Corporation | Inference model optimization |
CN113052090B (en) * | 2021-03-30 | 2024-03-05 | 京东科技控股股份有限公司 | Method and apparatus for generating caption generator and outputting caption |
EP4272091A1 (en) * | 2021-04-28 | 2023-11-08 | Google LLC | Systems and methods for efficient multimodal input collection with mobile devices |
US11810343B2 (en) * | 2021-05-11 | 2023-11-07 | Asio Advanced Control Solutions Ltd | Artificial intuition based visual data extraction for distributed systems |
US11709691B2 (en) * | 2021-09-01 | 2023-07-25 | Sap Se | Software user assistance through image processing |
US20230074640A1 (en) * | 2021-09-07 | 2023-03-09 | International Business Machines Corporation | Duplicate scene detection and processing for artificial intelligence workloads |
US20230122874A1 (en) * | 2021-10-20 | 2023-04-20 | Microsoft Technology Licensing, Llc | Techniques for identifying quotations in images posted to a feed |
US11755859B2 (en) | 2021-12-22 | 2023-09-12 | Datalogic Ip Tech S.R.L. | Apparatus and method for enabling decoding of remotely sourced and visually presented encoded data markers |
US20230215198A1 (en) * | 2021-12-31 | 2023-07-06 | Microsoft Technology Licensing, Llc | Image based command classification and task engine for a computing system |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070030364A1 (en) * | 2005-05-11 | 2007-02-08 | Pere Obrador | Image management |
US20150227797A1 (en) * | 2014-02-10 | 2015-08-13 | Google Inc. | Smart camera user interface |
Family Cites Families (294)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5963649A (en) | 1995-12-19 | 1999-10-05 | Nec Corporation | Message authorization system for authorizing message for electronic document |
US6092102A (en) | 1997-10-24 | 2000-07-18 | University Of Pittsburgh Of The Commonwealth System Of Higher Education | System and method for notifying users about information or events of an enterprise |
US7904187B2 (en) | 1999-02-01 | 2011-03-08 | Hoffberg Steven M | Internet appliance system and method |
JP2000298676A (en) | 1999-04-14 | 2000-10-24 | Bandai Co Ltd | Information supply device |
US6883140B1 (en) | 2000-02-24 | 2005-04-19 | Microsoft Corporation | System and method for editing digitally represented still images |
US7216080B2 (en) | 2000-09-29 | 2007-05-08 | Mindfabric Holdings Llc | Natural-language voice-activated personal assistant |
JP2002132804A (en) | 2000-10-24 | 2002-05-10 | Sanyo Electric Co Ltd | User support system |
US20020103837A1 (en) | 2001-01-31 | 2002-08-01 | International Business Machines Corporation | Method for handling requests for information in a natural language understanding system |
WO2003024094A1 (en) | 2001-09-10 | 2003-03-20 | Nikon Corporation | Digital camera system, image storage apparatus, and digital camera |
US7636750B2 (en) | 2001-10-24 | 2009-12-22 | Sprint Spectrum L.P. | Method and system for controlling scope of user participation in a communication session |
US7283992B2 (en) | 2001-11-30 | 2007-10-16 | Microsoft Corporation | Media agent to suggest contextually related media content |
US20040001099A1 (en) | 2002-06-27 | 2004-01-01 | Microsoft Corporation | Method and system for associating actions with semantic labels in electronic documents |
US7234117B2 (en) | 2002-08-28 | 2007-06-19 | Microsoft Corporation | System and method for shared integrated online social interaction |
US20110107223A1 (en) | 2003-01-06 | 2011-05-05 | Eric Tilton | User Interface For Presenting Presentations |
JP3669702B2 (en) | 2003-02-25 | 2005-07-13 | 松下電器産業株式会社 | Application program prediction method and mobile terminal |
BRPI0410362B1 (en) | 2003-05-16 | 2017-06-20 | Google Inc. | SYSTEMS AND METHODS OF SHARING NETWORK AND NETWORK MEDIA |
US8645697B1 (en) | 2003-08-08 | 2014-02-04 | Radix Holdings, Llc | Message authorization |
US7363029B2 (en) | 2003-09-12 | 2008-04-22 | Core Mobility, Inc. | Unified interface for voice, text or picture message authoring |
US20120322428A1 (en) | 2004-09-30 | 2012-12-20 | Motedata Inc. | Network of tags |
US10635723B2 (en) | 2004-02-15 | 2020-04-28 | Google Llc | Search engines and systems with handheld document data capture devices |
US7363295B2 (en) | 2004-04-19 | 2008-04-22 | Yahoo! Inc. | Techniques for inline searching in an instant messenger environment |
US20060029106A1 (en) | 2004-06-14 | 2006-02-09 | Semandex Networks, Inc. | System and method for providing content-based instant messaging |
US7464110B2 (en) * | 2004-06-30 | 2008-12-09 | Nokia Corporation | Automated grouping of image and other user data |
US7734927B2 (en) | 2004-07-21 | 2010-06-08 | International Business Machines Corporation | Real-time voting based authorization in an autonomic workflow process using an electronic messaging system |
US7917582B2 (en) | 2004-07-27 | 2011-03-29 | Siemens Enterprise Communications, Inc. | Method and apparatus for autocorrelation of instant messages |
US7720436B2 (en) | 2006-01-09 | 2010-05-18 | Nokia Corporation | Displaying network objects in mobile devices based on geolocation |
US20060150119A1 (en) | 2004-12-31 | 2006-07-06 | France Telecom | Method for interacting with automated information agents using conversational queries |
US7197324B2 (en) | 2005-01-31 | 2007-03-27 | Sweeney Robert J | Permission based text messaging |
US7603413B1 (en) | 2005-04-07 | 2009-10-13 | Aol Llc | Using automated agents to facilitate chat communications |
US7512580B2 (en) | 2005-08-04 | 2009-03-31 | Sap Ag | Confidence indicators for automated suggestions |
CN1988461A (en) | 2005-12-23 | 2007-06-27 | 腾讯科技（深圳）有限公司 | Chat scence music playing method and system for instant communication tool |
US7747785B2 (en) | 2006-04-14 | 2010-06-29 | Microsoft Corporation | Instant messaging plug-ins |
US9318108B2 (en) | 2010-01-18 | 2016-04-19 | Apple Inc. | Intelligent automated assistant |
US20090187831A1 (en) | 2006-10-10 | 2009-07-23 | Shahzad Tiwana | Integrated Electronic Mail and Instant Messaging System |
US20080120371A1 (en) | 2006-11-16 | 2008-05-22 | Rajat Gopal | Relational framework for non-real-time audio/video collaboration |
WO2008072093A2 (en) * | 2006-12-13 | 2008-06-19 | Quickplay Media Inc. | Mobile media platform |
JP2008191748A (en) | 2007-02-01 | 2008-08-21 | Oki Electric Ind Co Ltd | Inter-user communication method, inter-user communication program and inter-user communication device |
WO2008153098A1 (en) | 2007-06-14 | 2008-12-18 | Sharp Kabushiki Kaisha | Image data reception device, operation device, operation system, image data structure, control method, operation method, program, and recording medium |
JP2009009334A (en) * | 2007-06-27 | 2009-01-15 | Ricoh Co Ltd | Image processor, image processing method, and image processing program |
CN101159576B (en) | 2007-08-30 | 2013-07-17 | 腾讯科技（深圳）有限公司 | Chatting method, chatting room client terminal, system management background and server |
US20110145068A1 (en) | 2007-09-17 | 2011-06-16 | King Martin T | Associating rendered advertisements with digital content |
US8638363B2 (en) * | 2009-02-18 | 2014-01-28 | Google Inc. | Automatically capturing information, such as capturing information using a document-aware device |
US8082151B2 (en) | 2007-09-18 | 2011-12-20 | At&T Intellectual Property I, Lp | System and method of generating responses to text-based messages |
US20090119584A1 (en) | 2007-11-02 | 2009-05-07 | Steve Herbst | Software Tool for Creating Outlines and Mind Maps that Generates Subtopics Automatically |
CA2708757A1 (en) | 2007-12-17 | 2009-06-25 | Play Megaphone | System and method for managing interaction between a user and an interactive system |
US8379914B2 (en) | 2008-01-18 | 2013-02-19 | Mitek Systems, Inc. | Systems and methods for mobile image capture and remittance processing |
US8577118B2 (en) | 2008-01-18 | 2013-11-05 | Mitek Systems | Systems for mobile image capture and remittance processing |
US20110022992A1 (en) | 2008-03-31 | 2011-01-27 | Koninklijke Philips Electronics N.V. | Method for modifying a representation based upon a user instruction |
US20090282114A1 (en) | 2008-05-08 | 2009-11-12 | Junlan Feng | System and method for generating suggested responses to an email |
US8671112B2 (en) | 2008-06-12 | 2014-03-11 | Athenahealth, Inc. | Methods and apparatus for automated image classification |
US20090327436A1 (en) | 2008-06-30 | 2009-12-31 | Chen Shihn-Cheng | Instant messaging network control module |
US8166019B1 (en) | 2008-07-21 | 2012-04-24 | Sprint Communications Company L.P. | Providing suggested actions in response to textual communications |
JP5273712B2 (en) | 2008-08-11 | 2013-08-28 | シャープ株式会社 | Information processing apparatus, information processing method, and information processing program |
US8805110B2 (en) | 2008-08-19 | 2014-08-12 | Digimarc Corporation | Methods and systems for content processing |
EP2321948B1 (en) * | 2008-08-25 | 2017-11-15 | Orange | Method to identify and transfer to a wireless device actionable items based on user selected content |
US8391618B1 (en) | 2008-09-19 | 2013-03-05 | Adobe Systems Incorporated | Semantic image classification and search |
US8055710B2 (en) | 2008-09-24 | 2011-11-08 | International Business Machines Corporation | System, method and computer program product for intelligent multi-person chat history injection |
US20130036162A1 (en) | 2009-02-10 | 2013-02-07 | Mikekoenigs.Com, Inc. | Automated Communication Techniques |
US20100228590A1 (en) | 2009-03-03 | 2010-09-09 | International Business Machines Corporation | Context-aware electronic social networking |
JP4739438B2 (en) | 2009-03-26 | 2011-08-03 | 株式会社エヌ・ティ・ティ・ドコモ | Communication terminal and mail reply method |
US8938677B2 (en) | 2009-03-30 | 2015-01-20 | Avaya Inc. | System and method for mode-neutral communications with a widget-based communications metaphor |
US9195898B2 (en) | 2009-04-14 | 2015-11-24 | Qualcomm Incorporated | Systems and methods for image recognition using mobile devices |
US20120131520A1 (en) | 2009-05-14 | 2012-05-24 | Tang ding-yuan | Gesture-based Text Identification and Selection in Images |
US9782527B2 (en) | 2009-05-27 | 2017-10-10 | Tc1 Llc | Monitoring of redundant conductors |
US9043407B1 (en) | 2009-06-12 | 2015-05-26 | Avaya Inc. | Interactive user interface to communication-enabled business process platforms method and apparatus |
CA2767033A1 (en) | 2009-07-02 | 2011-01-06 | Livechime, Inc. | System and method for enhancing digital content |
US8572084B2 (en) | 2009-07-28 | 2013-10-29 | Fti Consulting, Inc. | System and method for displaying relationships between electronically stored information to provide classification suggestions via nearest neighbor |
US9128610B2 (en) | 2009-09-30 | 2015-09-08 | At&T Mobility Ii Llc | Virtual predictive keypad |
US8831279B2 (en) | 2011-03-04 | 2014-09-09 | Digimarc Corporation | Smartphone-based methods and systems |
US8121618B2 (en) * | 2009-10-28 | 2012-02-21 | Digimarc Corporation | Intuitive computing methods and systems |
US8400548B2 (en) | 2010-01-05 | 2013-03-19 | Apple Inc. | Synchronized, interactive augmented reality displays for multifunction devices |
US8650210B1 (en) | 2010-02-09 | 2014-02-11 | Google Inc. | Identifying non-search actions based on a search query |
US8782556B2 (en) | 2010-02-12 | 2014-07-15 | Microsoft Corporation | User-centric soft keyboard predictive technologies |
US8655965B2 (en) | 2010-03-05 | 2014-02-18 | Qualcomm Incorporated | Automated messaging response in wireless communication systems |
US8266109B1 (en) | 2010-03-09 | 2012-09-11 | Symantec Corporation | Performance of scanning containers for archiving |
JP2011211696A (en) | 2010-03-10 | 2011-10-20 | Nikon Corp | Image data processing system, image data processing program, and image data processing apparatus |
JP5733907B2 (en) | 2010-04-07 | 2015-06-10 | キヤノン株式会社 | Image processing apparatus, image processing method, and computer program |
US9929982B2 (en) | 2010-04-08 | 2018-03-27 | Microsoft Technology Licensing, Llc | Designating automated agents as friends in a social network service |
US20110252207A1 (en) | 2010-04-08 | 2011-10-13 | Oracle International Corporation | Dynamic content archiving |
US20170098122A1 (en) | 2010-06-07 | 2017-04-06 | Affectiva, Inc. | Analysis of image content with associated manipulation of expression presentation |
US20120030289A1 (en) | 2010-07-30 | 2012-02-02 | Avaya Inc. | System and method for multi-model, context-sensitive, real-time collaboration |
US8781152B2 (en) | 2010-08-05 | 2014-07-15 | Brian Momeyer | Identifying visual media content captured by camera-enabled mobile device |
US9936333B2 (en) | 2010-08-10 | 2018-04-03 | Microsoft Technology Licensing, Llc | Location and contextual-based mobile application promotion and delivery |
KR101722687B1 (en) | 2010-08-10 | 2017-04-04 | 삼성전자주식회사 | Method for providing information between objects or object and user, user device, and storage medium thereof |
US8966590B2 (en) | 2010-08-17 | 2015-02-24 | Facebook, Inc. | Managing social network accessibility based on age |
US9262517B2 (en) | 2010-08-18 | 2016-02-16 | At&T Intellectual Property I, L.P. | Systems and methods for social media data mining |
US8566911B2 (en) | 2010-10-06 | 2013-10-22 | Blackberry Limited | Method of obtaining authorization for accessing a service |
KR101753031B1 (en) | 2010-11-15 | 2017-06-30 | 엘지전자 주식회사 | Mobile terminal and Method for setting metadata thereof |
US9066126B2 (en) | 2010-12-06 | 2015-06-23 | Google Technology Holdings LLC | Remote control apparatus, method and user interface system |
KR101060753B1 (en) | 2011-01-04 | 2011-08-31 | (주)올라웍스 | Method, terminal, and computer-readable recording medium for supporting collection of object included in inputted image |
US20120179717A1 (en) | 2011-01-11 | 2012-07-12 | Sony Corporation | System and method for effectively providing entertainment recommendations to device users |
US8688698B1 (en) | 2011-02-11 | 2014-04-01 | Google Inc. | Automatic text suggestion |
GB2502736A (en) | 2011-02-23 | 2013-12-04 | Bottlenose Inc | System and method for analyzing messages in a network or across networks |
US8938669B1 (en) | 2011-03-15 | 2015-01-20 | Google Inc. | Inline user addressing in chat and document editing sessions |
US20130262574A1 (en) | 2011-03-15 | 2013-10-03 | Gabriel Cohen | Inline User Addressing in Chat Sessions |
US8849931B2 (en) | 2011-03-15 | 2014-09-30 | Idt Messaging, Llc | Linking context-based information to text messages |
US8554701B1 (en) | 2011-03-18 | 2013-10-08 | Amazon Technologies, Inc. | Determining sentiment of sentences from customer reviews |
JP2012221480A (en) | 2011-04-06 | 2012-11-12 | L Is B Corp | Message processing system |
WO2012150602A1 (en) | 2011-05-03 | 2012-11-08 | Yogesh Chunilal Rathod | A system and method for dynamically monitoring, recording, processing, attaching dynamic, contextual & accessible active links & presenting of physical or digital activities, actions, locations, logs, life stream, behavior & status |
EP2523436A1 (en) | 2011-05-11 | 2012-11-14 | Alcatel Lucent | Mobile device and method of managing applications for a mobile device |
US8832284B1 (en) | 2011-06-16 | 2014-09-09 | Google Inc. | Virtual socializing |
US8589407B2 (en) | 2011-06-17 | 2013-11-19 | Google Inc. | Automated generation of suggestions for personalized reactions in a social network |
US8881250B2 (en) | 2011-06-17 | 2014-11-04 | Ebay Inc. | Passporting credentials between a mobile app and a web browser |
US8700480B1 (en) | 2011-06-20 | 2014-04-15 | Amazon Technologies, Inc. | Extracting quotes from customer reviews regarding collections of items |
US9588668B2 (en) | 2011-07-21 | 2017-03-07 | Imerj, Llc | Methods of displaying a second view |
US9245253B2 (en) | 2011-08-19 | 2016-01-26 | Disney Enterprises, Inc. | Soft-sending chat messages |
US8659667B2 (en) | 2011-08-29 | 2014-02-25 | Panasonic Corporation | Recipe based real-time assistance for digital image capture and other consumer electronics devices |
US9179278B2 (en) | 2011-09-01 | 2015-11-03 | Qualcomm Incorporated | Systems and methods involving augmented menu using mobile device |
US10102546B2 (en) | 2011-09-15 | 2018-10-16 | Stephan HEATH | System and method for tracking, utilizing predicting, and implementing online consumer browsing behavior, buying patterns, social networking communications, advertisements and communications, for online coupons, products, goods and services, auctions, and service providers using geospatial mapping technology, and social networking |
GB2495222B (en) | 2011-09-30 | 2016-10-26 | Apple Inc | Using context information to facilitate processing of commands in a virtual assistant |
US20180032997A1 (en) | 2012-10-09 | 2018-02-01 | George A. Gordon | System, method, and computer program product for determining whether to prompt an action by a platform in connection with a mobile device |
KR101521332B1 (en) | 2011-11-08 | 2015-05-20 | 주식회사 다음카카오 | Method of provicing a lot of services extended from a instant messaging service and the instant messaging service |
KR101402506B1 (en) | 2011-12-01 | 2014-06-03 | 라인 가부시키가이샤 | System and method for providing information interactively by instant messaging application |
USD701228S1 (en) | 2012-01-06 | 2014-03-18 | Samsung Electronics Co., Ltd. | Display screen or portion thereof with transitional graphical user interface |
AU344579S (en) | 2012-01-09 | 2012-09-27 | Samsung Electronics Co Ltd | Display screen for an electronic device |
GB2499395A (en) | 2012-02-14 | 2013-08-21 | British Sky Broadcasting Ltd | Search method |
US9306878B2 (en) | 2012-02-14 | 2016-04-05 | Salesforce.Com, Inc. | Intelligent automated messaging for computer-implemented devices |
US20130218885A1 (en) | 2012-02-22 | 2013-08-22 | Salesforce.Com, Inc. | Systems and methods for context-aware message tagging |
US8620021B2 (en) | 2012-03-29 | 2013-12-31 | Digimarc Corporation | Image-related methods and arrangements |
US8855430B1 (en) | 2012-05-30 | 2014-10-07 | Google Inc. | Refining image annotations |
US20130346235A1 (en) | 2012-06-20 | 2013-12-26 | Ebay, Inc. | Systems, Methods, and Computer Program Products for Caching of Shopping Items |
US9191786B2 (en) | 2012-06-27 | 2015-11-17 | At&T Intellectual Property I, L.P. | Method and apparatus for generating a suggested message to be sent over a network |
US9412136B2 (en) | 2012-07-09 | 2016-08-09 | Facebook, Inc. | Creation of real-time conversations based on social location information |
KR20140011073A (en) | 2012-07-17 | 2014-01-28 | 삼성전자주식회사 | Method and apparatus for recommending text |
US9019415B2 (en) | 2012-07-26 | 2015-04-28 | Qualcomm Incorporated | Method and apparatus for dual camera shutter |
US9195645B2 (en) | 2012-07-30 | 2015-11-24 | Microsoft Technology Licensing, Llc | Generating string predictions using contexts |
KR101899817B1 (en) | 2012-08-01 | 2018-09-19 | 엘지전자 주식회사 | Mobile terminal and controlling method thereof |
USD695755S1 (en) | 2012-08-06 | 2013-12-17 | Samsung Electronics Co., Ltd. | TV monitor with graphical user interface |
US20140047413A1 (en) | 2012-08-09 | 2014-02-13 | Modit, Inc. | Developing, Modifying, and Using Applications |
US20140052540A1 (en) | 2012-08-20 | 2014-02-20 | Giridhar Rajaram | Providing content using inferred topics extracted from communications in a social networking system |
KR102068604B1 (en) | 2012-08-28 | 2020-01-22 | 삼성전자 주식회사 | Apparatus and method for recognizing a character in terminal equipment |
US9218333B2 (en) | 2012-08-31 | 2015-12-22 | Microsoft Technology Licensing, Llc | Context sensitive auto-correction |
JP6160996B2 (en) | 2012-09-12 | 2017-07-12 | パナソニックＩｐマネジメント株式会社 | Imaging device |
US20140088954A1 (en) | 2012-09-27 | 2014-03-27 | Research In Motion Limited | Apparatus and method pertaining to automatically-suggested emoticons |
US10691743B2 (en) | 2014-08-05 | 2020-06-23 | Sri International | Multi-dimensional realization of visual content of an image collection |
US9299060B2 (en) | 2012-10-12 | 2016-03-29 | Google Inc. | Automatically suggesting groups based on past user interaction |
KR20140052155A (en) | 2012-10-19 | 2014-05-07 | 삼성전자주식회사 | Display apparatus, method for controlling the display apparatus and processor for controlling the display apparatus |
US20150286371A1 (en) | 2012-10-31 | 2015-10-08 | Aniways Advertising Solutions Ltd. | Custom emoticon generation |
US20140156801A1 (en) | 2012-12-04 | 2014-06-05 | Mobitv, Inc. | Cowatching and connected platforms using a push architecture |
US9244905B2 (en) | 2012-12-06 | 2016-01-26 | Microsoft Technology Licensing, Llc | Communication context based predictive-text suggestion |
US9778819B2 (en) * | 2012-12-07 | 2017-10-03 | Google Inc. | Displaying a stream of content |
US20140164506A1 (en) | 2012-12-10 | 2014-06-12 | Rawllin International Inc. | Multimedia message having portions of networked media content |
US20140171133A1 (en) | 2012-12-18 | 2014-06-19 | Google Inc. | Query response |
CN103067490B (en) | 2012-12-26 | 2015-11-25 | 腾讯科技（深圳）有限公司 | The Notification Method of mobile terminal communication session, terminal, server and system |
GB201322037D0 (en) | 2013-12-12 | 2014-01-29 | Touchtype Ltd | System and method for inputting images/labels into electronic devices |
US8930481B2 (en) | 2012-12-31 | 2015-01-06 | Huawei Technologies Co., Ltd. | Message processing method, terminal and system |
US9020956B1 (en) | 2012-12-31 | 2015-04-28 | Google Inc. | Sentiment and topic based content determination methods and systems |
US20140189538A1 (en) | 2012-12-31 | 2014-07-03 | Motorola Mobility Llc | Recommendations for Applications Based on Device Context |
US9374327B2 (en) | 2013-01-08 | 2016-06-21 | Vmware, Inc. | Intelligent chat system |
KR20140091633A (en) | 2013-01-11 | 2014-07-22 | 삼성전자주식회사 | Method for providing recommended items based on conext awareness and the mobile terminal therefor |
KR20140093494A (en) | 2013-01-18 | 2014-07-28 | 김동욱 | Wi-Fi-based screenings of the videos and how to acquire a sword shrine |
KR101821358B1 (en) | 2013-01-22 | 2018-01-25 | 네이버 주식회사 | Method and system for providing multi-user messenger service |
US20140237057A1 (en) | 2013-02-21 | 2014-08-21 | Genesys Telecommunications Laboratories, Inc. | System and method for processing private messages in a contact center |
JP6255646B2 (en) | 2013-03-04 | 2018-01-10 | 株式会社Ｌ ｉｓ Ｂ | Message system |
US20140344058A1 (en) | 2013-03-15 | 2014-11-20 | Fision Holdings, Inc | Systems and methods for distributed marketing automation |
US20140298364A1 (en) | 2013-03-26 | 2014-10-02 | Rawllin International Inc. | Recommendations for media content based on emotion |
US8825474B1 (en) | 2013-04-16 | 2014-09-02 | Google Inc. | Text suggestion output using past interaction data |
US9177318B2 (en) | 2013-04-22 | 2015-11-03 | Palo Alto Research Center Incorporated | Method and apparatus for customizing conversation agents based on user characteristics using a relevance score for automatic statements, and a response prediction function |
US9923849B2 (en) | 2013-05-09 | 2018-03-20 | Ebay Inc. | System and method for suggesting a phrase based on a context |
US9760803B2 (en) | 2013-05-15 | 2017-09-12 | Google Inc. | Associating classifications with images |
US10523454B2 (en) | 2013-06-13 | 2019-12-31 | Evernote Corporation | Initializing chat sessions by pointing to content |
US10599765B2 (en) | 2013-06-27 | 2020-03-24 | Avaya Inc. | Semantic translation model training |
CA2918459C (en) | 2013-07-16 | 2019-06-04 | Pinterest, Inc. | Object based contextual menu controls |
US9330110B2 (en) | 2013-07-17 | 2016-05-03 | Xerox Corporation | Image search system and method for personalized photo applications using semantic networks |
US9794198B2 (en) | 2013-07-19 | 2017-10-17 | Tencent Technology (Shenzhen) Company Limited | Methods and systems for creating auto-reply messages |
US10162884B2 (en) | 2013-07-23 | 2018-12-25 | Conduent Business Services, Llc | System and method for auto-suggesting responses based on social conversational contents in customer care services |
US9161188B2 (en) | 2013-08-22 | 2015-10-13 | Yahoo! Inc. | System and method for automatically suggesting diverse and personalized message completions |
CN104035947B (en) | 2013-09-16 | 2016-04-13 | 腾讯科技（深圳）有限公司 | Point of interest recommend method and device, acquisition recommend method and the device of point of interest |
EP2852105A1 (en) | 2013-09-20 | 2015-03-25 | Ignazio Di Tocco | Computer system and related process supporting the communication of users located in the same geographical area, in order to establish a starting contact leading to a personal communication |
US9401881B2 (en) | 2013-09-26 | 2016-07-26 | International Business Machines Corporation | Automatic question generation and answering based on monitored messaging sessions |
US9329692B2 (en) | 2013-09-27 | 2016-05-03 | Microsoft Technology Licensing, Llc | Actionable content displayed on a touch screen |
US20150100537A1 (en) | 2013-10-03 | 2015-04-09 | Microsoft Corporation | Emoji for Text Predictions |
US8996639B1 (en) | 2013-10-15 | 2015-03-31 | Google Inc. | Predictive responses to incoming communications |
US20150127753A1 (en) | 2013-11-04 | 2015-05-07 | Meemo, Llc | Word Recognition and Ideograph or In-App Advertising System |
WO2015089483A1 (en) | 2013-12-12 | 2015-06-18 | Mobile Iron, Inc. | Application synchornization |
KR20150071768A (en) | 2013-12-18 | 2015-06-29 | 에스케이하이닉스 주식회사 | Image sensor and method for fabricating the same |
US10565268B2 (en) | 2013-12-19 | 2020-02-18 | Adobe Inc. | Interactive communication augmented with contextual information |
WO2015100362A1 (en) | 2013-12-23 | 2015-07-02 | 24/7 Customer, Inc. | Systems and methods for facilitating dialogue mining |
US9519408B2 (en) * | 2013-12-31 | 2016-12-13 | Google Inc. | Systems and methods for guided user actions |
US9817813B2 (en) | 2014-01-08 | 2017-11-14 | Genesys Telecommunications Laboratories, Inc. | Generalized phrases in automatic speech recognition systems |
US20150207765A1 (en) | 2014-01-17 | 2015-07-23 | Nathaniel Brantingham | Messaging Service with Conversation Suggestions |
US9721183B2 (en) * | 2014-01-31 | 2017-08-01 | Hulu, LLC | Intelligent determination of aesthetic preferences based on user history and properties |
US9515968B2 (en) | 2014-02-05 | 2016-12-06 | Facebook, Inc. | Controlling access to ideograms |
CN104836720B (en) | 2014-02-12 | 2022-02-25 | 北京三星通信技术研究有限公司 | Method and device for information recommendation in interactive communication |
US10095748B2 (en) | 2014-03-03 | 2018-10-09 | Microsoft Technology Licensing, Llc | Personalized information query suggestions |
CN103841007B (en) | 2014-03-04 | 2017-05-10 | 腾讯科技（深圳）有限公司 | Data processing method, device and system in online game system |
KR102106787B1 (en) | 2014-03-17 | 2020-05-06 | 에스케이텔레콤 주식회사 | Method for coupling application with instant messenger, apparatus and system for the same |
CN104951428B (en) | 2014-03-26 | 2019-04-16 | 阿里巴巴集团控股有限公司 | User's intension recognizing method and device |
US9544257B2 (en) | 2014-04-04 | 2017-01-10 | Blackberry Limited | System and method for conducting private messaging |
US9213941B2 (en) | 2014-04-22 | 2015-12-15 | Google Inc. | Automatic actions based on contextual replies |
US10482163B2 (en) | 2014-04-23 | 2019-11-19 | Klickafy, Llc | Clickable emoji |
CN103995872B (en) | 2014-05-21 | 2017-04-05 | 王青 | It is a kind of in the application based on developing scenes discussion with chat method and system |
US10255449B2 (en) | 2014-05-30 | 2019-04-09 | Apple Inc. | Permission request |
US10445396B2 (en) | 2014-05-31 | 2019-10-15 | Apple Inc. | Device, method, and graphical user interface for extending functionality of a host application to another application |
US9380010B2 (en) | 2014-06-03 | 2016-06-28 | International Business Machines Corporation | Conversation branching for more efficient resolution |
WO2015200350A1 (en) * | 2014-06-24 | 2015-12-30 | Google Inc. | Ranking and selecting images for display from a set of images |
US10785173B2 (en) | 2014-07-03 | 2020-09-22 | Nuance Communications, Inc. | System and method for suggesting actions based upon incoming messages |
US9420331B2 (en) | 2014-07-07 | 2016-08-16 | Google Inc. | Method and system for categorizing detected motion events |
US9043196B1 (en) | 2014-07-07 | 2015-05-26 | Machine Zone, Inc. | Systems and methods for identifying and suggesting emoticons |
US9990105B2 (en) | 2014-07-08 | 2018-06-05 | Verizon Patent And Licensing Inc. | Accessible contextual controls within a graphical user interface |
US20160043817A1 (en) | 2014-07-18 | 2016-02-11 | RSS Technologies, LLC | Methods and apparatus for locality based broadcasting |
WO2016018111A1 (en) | 2014-07-31 | 2016-02-04 | Samsung Electronics Co., Ltd. | Message service providing device and method of providing content via the same |
CN104202718A (en) | 2014-08-05 | 2014-12-10 | 百度在线网络技术（北京）有限公司 | Method and device for providing information for user |
US10218652B2 (en) | 2014-08-08 | 2019-02-26 | Mastercard International Incorporated | Systems and methods for integrating a chat function into an e-reader application |
US9965559B2 (en) * | 2014-08-21 | 2018-05-08 | Google Llc | Providing automatic actions for mobile onscreen content |
US9705832B2 (en) | 2014-08-27 | 2017-07-11 | Lenovo (Singapore) Pte. Ltd. | Context-aware aggregation of text-based messages |
US10447621B2 (en) | 2014-09-04 | 2019-10-15 | Microsoft Technology Licensing, Llc | App powered extensibility of messages on an existing messaging service |
US10146748B1 (en) | 2014-09-10 | 2018-12-04 | Google Llc | Embedding location information in a media collaboration using natural language processing |
US11010726B2 (en) | 2014-11-07 | 2021-05-18 | Sony Corporation | Information processing apparatus, control method, and storage medium |
US20160140477A1 (en) | 2014-11-13 | 2016-05-19 | Xerox Corporation | Methods and systems for assigning tasks to workers |
US9569728B2 (en) | 2014-11-14 | 2017-02-14 | Bublup Technologies, Inc. | Deriving semantic relationships based on empirical organization of content by users |
CN105786455B (en) | 2014-12-17 | 2020-02-18 | 深圳市腾讯计算机系统有限公司 | Data processing method and device and terminal |
US20160179816A1 (en) | 2014-12-22 | 2016-06-23 | Quixey, Inc. | Near Real Time Auto-Suggest Search Results |
US9727218B2 (en) * | 2015-01-02 | 2017-08-08 | Microsoft Technology Licensing, Llc | Contextual browser frame and entry box placement |
KR20160089152A (en) | 2015-01-19 | 2016-07-27 | 주식회사 엔씨소프트 | Method and computer system of analyzing communication situation based on dialogue act information |
KR101634086B1 (en) | 2015-01-19 | 2016-07-08 | 주식회사 엔씨소프트 | Method and computer system of analyzing communication situation based on emotion information |
US20160226804A1 (en) | 2015-02-03 | 2016-08-04 | Google Inc. | Methods, systems, and media for suggesting a link to media content |
US20160224524A1 (en) | 2015-02-03 | 2016-08-04 | Nuance Communications, Inc. | User generated short phrases for auto-filling, automatically collected during normal text use |
US9661386B2 (en) | 2015-02-11 | 2017-05-23 | Google Inc. | Methods, systems, and media for presenting a suggestion to watch videos |
US10079785B2 (en) | 2015-02-12 | 2018-09-18 | Google Llc | Determining reply content for a reply to an electronic communication |
US20160284011A1 (en) | 2015-03-25 | 2016-09-29 | Facebook, Inc. | Techniques for social messaging authorization and customization |
US10353542B2 (en) | 2015-04-02 | 2019-07-16 | Facebook, Inc. | Techniques for context sensitive illustrated graphical user interface elements |
US10965622B2 (en) | 2015-04-16 | 2021-03-30 | Samsung Electronics Co., Ltd. | Method and apparatus for recommending reply message |
US9703541B2 (en) * | 2015-04-28 | 2017-07-11 | Google Inc. | Entity action suggestion on a mobile device |
US9883358B2 (en) | 2015-05-08 | 2018-01-30 | Blackberry Limited | Electronic device and method of determining suggested responses to text-based communications |
US10909329B2 (en) | 2015-05-21 | 2021-02-02 | Baidu Usa Llc | Multilingual image question answering |
US10504509B2 (en) | 2015-05-27 | 2019-12-10 | Google Llc | Providing suggested voice-based action queries |
US10091140B2 (en) | 2015-05-31 | 2018-10-02 | Microsoft Technology Licensing, Llc | Context-sensitive generation of conversational responses |
KR20160148260A (en) | 2015-06-16 | 2016-12-26 | 삼성전자주식회사 | Electronic device and Method for controlling the electronic device thereof |
US10274911B2 (en) | 2015-06-25 | 2019-04-30 | Intel Corporation | Conversational interface for matching text of spoken input based on context model |
US10042866B2 (en) | 2015-06-30 | 2018-08-07 | Adobe Systems Incorporated | Searching untagged images with text-based queries |
US9712466B2 (en) | 2015-11-10 | 2017-07-18 | Wrinkl, Inc. | Integrating actionable objects into an on-line chat communications platform |
CN108604234A (en) * | 2015-07-15 | 2018-09-28 | 查比公司 | System and method for screenshot capture link |
US20170031575A1 (en) | 2015-07-28 | 2017-02-02 | Microsoft Technology Licensing, Llc | Tailored computing experience based on contextual signals |
CN105183276A (en) | 2015-08-19 | 2015-12-23 | 小米科技有限责任公司 | Method and apparatus for realizing game in chat interface, and and terminal device |
US9467435B1 (en) | 2015-09-15 | 2016-10-11 | Mimecast North America, Inc. | Electronic message threat protection system for authorized users |
US10445425B2 (en) | 2015-09-15 | 2019-10-15 | Apple Inc. | Emoji and canned responses |
US11025569B2 (en) | 2015-09-30 | 2021-06-01 | Apple Inc. | Shared content presentation with integrated messaging |
US10789525B2 (en) | 2015-10-02 | 2020-09-29 | Adobe Inc. | Modifying at least one attribute of an image with at least one attribute extracted from another image |
KR20170048964A (en) | 2015-10-27 | 2017-05-10 | 라인 가부시키가이샤 | Method and apparatus of providing message, Method and apparatus of controlling display and computer program for executing one of the method |
CN105262675A (en) | 2015-10-29 | 2016-01-20 | 北京奇虎科技有限公司 | Method and apparatus for controlling chat based on electronic book |
KR102393928B1 (en) | 2015-11-10 | 2022-05-04 | 삼성전자주식회사 | User terminal apparatus for recommanding a reply message and method thereof |
US9633048B1 (en) | 2015-11-16 | 2017-04-25 | Adobe Systems Incorporated | Converting a text sentence to a series of images |
US10129193B2 (en) | 2015-11-17 | 2018-11-13 | International Business Machines Corporation | Identifying relevant content contained in message streams that appear to be irrelevant |
US20170147202A1 (en) | 2015-11-24 | 2017-05-25 | Facebook, Inc. | Augmenting text messages with emotion information |
KR102427833B1 (en) | 2015-11-30 | 2022-08-02 | 삼성전자주식회사 | User terminal device and method for display thereof |
US20170171117A1 (en) | 2015-12-10 | 2017-06-15 | International Business Machines Corporation | Message Suggestion Using Dynamic Information |
CN108781175B (en) | 2015-12-21 | 2021-09-21 | 谷歌有限责任公司 | Method, medium, and system for automatic suggestion of message exchange contexts |
EP3395019B1 (en) | 2015-12-21 | 2022-03-30 | Google LLC | Automatic suggestions and other content for messaging applications |
US10732783B2 (en) | 2015-12-28 | 2020-08-04 | Microsoft Technology Licensing, Llc | Identifying image comments from similar images |
KR101712180B1 (en) | 2015-12-29 | 2017-03-06 | 라인 가부시키가이샤 | Computer Readable Recording Medium with Program, method and apparatus for Transmitting/Receiving Message |
US9560152B1 (en) | 2016-01-27 | 2017-01-31 | International Business Machines Corporation | Personalized summary of online communications |
US11477139B2 (en) | 2016-02-25 | 2022-10-18 | Meta Platforms, Inc. | Techniques for messaging bot rich communication |
US20170250935A1 (en) | 2016-02-25 | 2017-08-31 | Facebook, Inc. | Techniques for messaging bot app interactions |
US20170250930A1 (en) | 2016-02-29 | 2017-08-31 | Outbrain Inc. | Interactive content recommendation personalization assistant |
US20170288942A1 (en) | 2016-03-30 | 2017-10-05 | Microsoft Technology Licensing, Llc | Portal for Provisioning Autonomous Software Agents |
US10831802B2 (en) | 2016-04-11 | 2020-11-10 | Facebook, Inc. | Techniques to respond to user requests using natural-language machine learning based on example conversations |
US10452671B2 (en) | 2016-04-26 | 2019-10-22 | Facebook, Inc. | Recommendations from comments on online social networks |
US9866693B2 (en) | 2016-05-06 | 2018-01-09 | Genesys Telecommunications Laboratories, Inc. | System and method for monitoring progress of automated chat conversations |
US20170344224A1 (en) | 2016-05-27 | 2017-11-30 | Nuance Communications, Inc. | Suggesting emojis to users for insertion into text-based messages |
CN105898627B (en) | 2016-05-31 | 2019-04-12 | 北京奇艺世纪科技有限公司 | A kind of video broadcasting method and device |
US10505872B2 (en) | 2016-06-12 | 2019-12-10 | Apple Inc. | Messaging application interacting with one or more extension applications |
US20170359283A1 (en) | 2016-06-12 | 2017-12-14 | Apple Inc. | Music creation app in messaging app |
US10368208B2 (en) | 2016-06-12 | 2019-07-30 | Apple Inc. | Layers in messaging applications |
US10595169B2 (en) | 2016-06-12 | 2020-03-17 | Apple Inc. | Message extension app store |
US10785175B2 (en) | 2016-06-12 | 2020-09-22 | Apple Inc. | Polling extension application for interacting with a messaging application |
US10194288B2 (en) | 2016-06-12 | 2019-01-29 | Apple Inc. | Sticker distribution system for messaging apps |
US10852912B2 (en) | 2016-06-12 | 2020-12-01 | Apple Inc. | Image creation app in messaging app |
US9990128B2 (en) | 2016-06-12 | 2018-06-05 | Apple Inc. | Messaging application interacting with one or more extension applications |
US10554599B2 (en) | 2016-06-12 | 2020-02-04 | Apple Inc. | Conversion of detected URL in text message |
US11088973B2 (en) | 2016-06-12 | 2021-08-10 | Apple Inc. | Conversion of text relating to media content and media extension apps |
US20170366479A1 (en) | 2016-06-20 | 2017-12-21 | Microsoft Technology Licensing, Llc | Communication System |
US10254935B2 (en) | 2016-06-29 | 2019-04-09 | Google Llc | Systems and methods of providing content selection |
US10515393B2 (en) | 2016-06-30 | 2019-12-24 | Paypal, Inc. | Image data detection for micro-expression analysis and targeted data services |
US10387888B2 (en) | 2016-07-08 | 2019-08-20 | Asapp, Inc. | Assisting entities in responding to a request of a user |
US20180032499A1 (en) | 2016-07-28 | 2018-02-01 | Google Inc. | Automatically Generating Spelling Suggestions and Corrections Based on User Context |
US10049310B2 (en) | 2016-08-30 | 2018-08-14 | International Business Machines Corporation | Image text analysis for identifying hidden text |
KR20180026983A (en) | 2016-09-05 | 2018-03-14 | 삼성전자주식회사 | Electronic device and control method thereof |
WO2018057537A1 (en) | 2016-09-20 | 2018-03-29 | Google Llc | Bot interaction |
US10015124B2 (en) | 2016-09-20 | 2018-07-03 | Google Llc | Automatic response suggestions based on images received in messaging applications |
US10511450B2 (en) | 2016-09-20 | 2019-12-17 | Google Llc | Bot permissions |
CN117634495A (en) | 2016-09-20 | 2024-03-01 | 谷歌有限责任公司 | Suggested response based on message decal |
US11176931B2 (en) | 2016-09-23 | 2021-11-16 | Microsoft Technology Licensing, Llc | Conversational bookmarks |
CN106484831A (en) | 2016-09-29 | 2017-03-08 | 百度在线网络技术（北京）有限公司 | Search system, method and apparatus |
US10416846B2 (en) | 2016-11-12 | 2019-09-17 | Google Llc | Determining graphical element(s) for inclusion in an electronic communication |
US20180196854A1 (en) | 2017-01-11 | 2018-07-12 | Google Inc. | Application extension for generating automatic search queries |
US10146768B2 (en) * | 2017-01-25 | 2018-12-04 | Google Llc | Automatic suggested responses to images received in messages using language model |
US10229427B2 (en) | 2017-04-10 | 2019-03-12 | Wildfire Systems, Inc. | Virtual keyboard trackable referral system |
US20180316637A1 (en) | 2017-05-01 | 2018-11-01 | Microsoft Technology Licensing, Llc | Conversation lens for context |
AU2018261870B2 (en) | 2017-05-05 | 2020-11-05 | Seetvun AMIR | Dynamic response prediction for improved bot task processing |
US10860854B2 (en) | 2017-05-16 | 2020-12-08 | Google Llc | Suggested actions for images |
US10827319B2 (en) | 2017-06-02 | 2020-11-03 | Apple Inc. | Messaging system interacting with dynamic extension app |
US10404636B2 (en) | 2017-06-15 | 2019-09-03 | Google Llc | Embedded programs and interfaces for chat conversations |
US10348658B2 (en) | 2017-06-15 | 2019-07-09 | Google Llc | Suggested items for use with embedded applications in chat conversations |
-
2018
- 2018-03-06 US US15/912,796 patent/US10860854B2/en active Active
- 2018-03-06 WO PCT/US2018/021028 patent/WO2018212822A1/en active Application Filing
- 2018-03-06 US US15/912,809 patent/US10891485B2/en active Active
-
2020
- 2020-12-02 US US17/110,166 patent/US11574470B2/en active Active
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070030364A1 (en) * | 2005-05-11 | 2007-02-08 | Pere Obrador | Image management |
US20150227797A1 (en) * | 2014-02-10 | 2015-08-13 | Google Inc. | Smart camera user interface |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2023239468A1 (en) * | 2022-06-09 | 2023-12-14 | Microsoft Technology Licensing, Llc | Cross-application componentized document generation |
Also Published As
Publication number | Publication date |
---|---|
US10860854B2 (en) | 2020-12-08 |
US20180336226A1 (en) | 2018-11-22 |
US20180336415A1 (en) | 2018-11-22 |
US11574470B2 (en) | 2023-02-07 |
US10891485B2 (en) | 2021-01-12 |
US20210089775A1 (en) | 2021-03-25 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11574470B2 (en) | Suggested actions for images | |
US11303590B2 (en) | Suggested responses based on message stickers | |
US11829404B2 (en) | Functional image archiving | |
US11209442B2 (en) | Image selection suggestions | |
US10862836B2 (en) | Automatic response suggestions based on images received in messaging applications | |
US11328008B2 (en) | Query matching to media collections in a messaging system | |
US10540055B2 (en) | Generating interactive content items based on content displayed on a computing device | |
CN110678861B (en) | Image selection suggestion | |
CN113348650B (en) | Display method, system and machine-readable storage medium of interactive information interface | |
US20160306505A1 (en) | Computer-implemented methods and systems for automatically creating and displaying instant presentations from selected visual content items | |
US10169342B1 (en) | Filtering document search results using contextual metadata | |
KR20230021144A (en) | Machine learning-based image compression settings reflecting user preferences | |
US11100160B2 (en) | Intelligent image note processing | |
US20220394320A1 (en) | Systems and Methods for Improved Searching and Categorizing of Media Content Items Based on a Destination for the Media ContentMachine Learning |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 18716388Country of ref document: EPKind code of ref document: A1 |
|
DPE1 | Request for preliminary examination filed after expiration of 19th month from priority date (pct application filed from 20040101) | ||
NENP | Non-entry into the national phase |
Ref country code: DE |
|
122 | Ep: pct application non-entry in european phase |
Ref document number: 18716388Country of ref document: EPKind code of ref document: A1 |