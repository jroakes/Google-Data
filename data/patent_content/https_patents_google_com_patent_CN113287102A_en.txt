CN113287102A - Providing resilient application programming interfaces for geographic services - Google Patents
Providing resilient application programming interfaces for geographic services Download PDFInfo
- Publication number
- CN113287102A CN113287102A CN201980044642.2A CN201980044642A CN113287102A CN 113287102 A CN113287102 A CN 113287102A CN 201980044642 A CN201980044642 A CN 201980044642A CN 113287102 A CN113287102 A CN 113287102A
- Authority
- CN
- China
- Prior art keywords
- geographic
- service
- enterprise
- api
- query
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/29—Geographical information databases
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
- G06F16/24534—Query rewriting; Transformation
- G06F16/24539—Query rewriting; Transformation using cached or materialised query results
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2455—Query execution
- G06F16/24553—Query execution of query operations
- G06F16/24561—Intermediate data storage techniques for performance improvement
Abstract
A method for providing availability of geographic data to enterprise clients. The method is implemented by processing hardware and includes generating a store that invokes geographic information available to an enterprise client via an API, wherein the enterprise client is configured to (i) receive a service request from a user device, and (ii) invoke the API to provide geographic-related information in response to the service request. When an enterprise client invokes the API to submit a query (304), the method includes: in a first instance, a query is sent to a geographic service via a communication network (306), and a network-based response to the query is generated using geographic information received from the geographic service in response to the query (312); and in a second instance, using the geographic information stored in the store to generate a store-based response to the query (322).
Description
Technical Field
The present disclosure relates to geographic services, and more particularly, to providing an elastic Application Programming Interface (API) to enterprise clients.
Background
The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors, to the extent it is described in this background section, as well as aspects of the description that may not otherwise qualify as prior art at the time of filing, are neither expressly nor impliedly admitted as prior art against the present disclosure.
Today, many electronic devices, such as personal computers, tablets, mobile phones, dedicated navigators, and the like, provide digital maps of geographic areas and step-by-step directions for navigating between geographic locations. The digital map and/or navigation directions may be provided via dedicated software applications, such as mapping and navigation applications, as well as via general purpose software applications, such as a web browser.
For example, in addition to dedicated geographic applications, some geographic service providers disclose Application Programming Interfaces (APIs) for accessing geographic services from various software applications or web pages. In addition, some providers disclose "regular" APIs for access by personal applications or devices and enterprise geographic APIs for access by other services. For example, an enterprise client may be a provider of a certain service to multiple users. An enterprise client may receive requests for services and, as part of servicing these requests, require certain geographic information. The enterprise client may thus invoke the enterprise geographic API to obtain geographic information. The enterprise geographic API typically communicates requests for geographic information over a communications network.
Disclosure of Invention
An example embodiment of the technology of the present disclosure is a method for providing availability of geographic data to enterprise clients. The method is implemented by processing hardware and includes generating a store storing geographic information available to an enterprise client via an API call (call), wherein the enterprise client is configured to (i) receive a service request from a user device, and (ii) call (invoke) the API to provide geographic-related information in response to the service request. When an enterprise client invokes an API to submit a query, the method includes: in a first instance, a query is sent to a geographic service via a communication network, and a network-based response to the query is generated using geographic information received from the geographic service in response to the query; and in a second instance, using the geographic information stored in the store to generate a store-based response to the query.
In various embodiments, the above-described methods include one or more of the following features. The geographic service is determined to be available in the first instance and the geographic service is determined to be unavailable in the second instance. In a second example: the query is transmitted to the geographic service, and a store-based response is generated upon determining that no response to the query is received within a predetermined time period from when the query was transmitted to the geographic service. In a second example: the method further includes generating a storage-based response to the query using the geographic information stored in the cache, and updating latency statistics periodically reported to the geographic service in response to determining that the network-based response and the storage-based response differ by more than a threshold amount. An alert is provided to the enterprise client. The network-based response and the stored-based response include respective estimates of the time of travel between the source and the destination. In a second example, an indication to use storage to service a query and a storage-based response to the query are provided. Generating the storage includes generating the storage on one or more network servers associated with the enterprise client. Generating the storage includes generating the storage on one or more network servers associated with the enterprise client. A set of instructions is provided in the storage configured to implement functionality for generating navigation directions using geographic information stored in the storage. The function for generating navigation directions generates a navigation route using pre-computed route segments. A set of instructions is provided in storage configured to implement functions for performing a local search of a specified geographic area. The geographic information is added to the store based on previous invocations of the enterprise client to the API. The previous invocation of the API corresponds to a query and a network-based response related to a point associated with the set of geographic coordinates, and adding the geographic information includes associating the network-based response with a larger geographic area that includes the point. The larger geographic area is cell S2.
Another example of these techniques is a computing device that includes processing hardware and is configured to implement the above-described method.
Yet another example embodiment of the techniques is a non-transitory computer-readable medium having instructions stored thereon that implement an API for use by an enterprise client configured to receive service requests from user devices. When invoked by an enterprise client and executed by processing hardware, the API is configured to: in a first instance, a query is sent to a geographic service via a communication network, and a network-based response to the query is generated using geographic information received from the geographic service in response to the query; and in a second instance, generating a storage-based response to the query using geographic information available in storage implemented in memory controlled by the enterprise client. The API is further configured to provide the respective generated responses to the enterprise client in the first instance and the second instance.
Drawings
FIG. 1 is a block diagram of an example communication system in which enterprise clients may invoke enterprise geographic APIs of the present disclosure;
FIG. 2A is a messaging diagram of an example scenario in which an enterprise geographic API of the present disclosure receives geographic information from a geographic service via a communication network in response to a query;
FIG. 2B is a messaging diagram of an example scenario in which an enterprise geographic API of the present disclosure obtains geographic information from a store implementing a cache in response to a query;
FIG. 3 is a flow diagram of an example method that the enterprise geographic API of the present disclosure may implement to service invocations from enterprise clients in two separate instances; and is
FIG. 4 is a flow diagram of an example method for quality monitoring that may be implemented in the enterprise geographic API of the present disclosure.
Detailed Description
In general, techniques of this disclosure provide high reliability to enterprise geographic APIs configured to service requests for geographic information from enterprise clients that in turn use the obtained geographic information to service requests from user devices. An enterprise client may provide such services (e.g., location-based games) to its users, and may use an enterprise geographic API to obtain navigation routes, maps, business data for points of interest, and other types of geographic information related to the services of the enterprise client. The instructions to implement the enterprise geographic API may reside in memory of a web server controlled by an enterprise client.
When invoked by an enterprise client, the enterprise geographic API sends a request for geographic information to a geographic service via a communication network. An enterprise geographic API (or another suitable software component) creates and manages storage residing within the memory of the network server and containing geographic information. When the enterprise geographic API fails to receive a response to the transmitted request within some predetermined amount of time, the enterprise geographic API generates an at least approximate response based on the geographic information stored in the cache. However, if the response arrives from the geographic service within the predetermined amount of time, the enterprise geographic API uses the geographic information received from the geographic service to generate a response to the query.
Further, in some embodiments, the enterprise geographic API implements local navigation, local search, and/or other functionality that operates on geographic information in storage. These functions may correspond to a subset of the functions supported by the geographic service. Further, the enterprise geographic API in some embodiments determines when the response received from the geographic service differs by more than a certain amount from the response generated using the geographic information in the cache, and generates an appropriate notification in order to provide quality monitoring.
These techniques are discussed in more detail below with reference to fig. 1-4.
The example communication system 100 includes an enterprise client 102 that provides enterprise services such as location-based gaming, taxi or carpool services, delivery services, courier services, and the like. The enterprise client 102 may receive requests for an enterprise from a user (or "client") device, such as the client device 106. Fig. 1 shows only one such device to reduce clutter, but in general communication system 100 may include any suitable number of client devices. The client device 106 may be, for example, a personal computer, a portable device such as a tablet computer or smart phone, a wearable computing device, a dedicated car navigator, a device embedded in a vehicle head unit, or the like. The enterprise client 102 and client device 106 may access one or more network servers operating in the domain of the geographic service 104 via a communication network 108, where the communication network 108 may be a wide area network such as the internet.
The domain of geographic service 104 may include any suitable number of front-end servers, back-end servers, storage devices, and the like. The front end server 110 is coupled to, for example, a map database 120, a point of interest (POI) database 122, and a traffic database 124, among others. In operation, the front end server 110 processes queries from the enterprise clients 102 and client devices 106 to generate responses by, for example, performing various routing functions, search functions, and the like using data in the databases 120, 122, and 124. The generated response may include map data for displaying a digital map of the geographic area, POI data for various locations, navigation data for navigating between geographic locations, and the like.
The map database 120 may store map data that specifies the shape and various attributes of geographic features such as roads, buildings, lakes, rivers, parks, and the like. The map data may conform to any suitable format, such as vector graphics, rasterized images, tagged text, etc., organized according to any suitable principle (e.g., square map tiles covering the same amount of area at a certain zoom level). The map data may also include images at the street level and photographs collected from various vantage points. For example, the POI database 122 may store information for a particular location identified by spatial coordinates and/or a street address. As a more specific example, the POI database 122 may store information about entity businesses located at respective locations within a geographic area: business hours, product and service descriptions, user reviews, etc. The traffic database 124 may store current traffic conditions, accident reports, road closure data, etc. for various roads described by the maps in the database 120.
In various embodiments, the domain of geographic service 104 may include fewer databases or, conversely, may include additional databases that store other types of geographic information. One or more network servers operating in the domain of geographic service 104 may also communicate with other services, such as providers of real-time weather information, providers of transportation-related information (e.g., scheduling and routing information for trains, buses, ferries).
To service requests from enterprise clients 102, front-end server 110 may implement enterprise API services 130. When an enterprise application 140 running on one or more servers associated with the enterprise client 102 invokes the enterprise geographic API 150 to request certain geographic information, a set of instructions implementing the enterprise geographic API 150 may generate and send a query to the domain of geographic service 104 that the enterprise API service 130 may process. Additionally, to service requests from client devices 106, front-end server 110 may implement user API services 132. When a client device 106 invokes a user geographic API 160 to request certain geographic information, a set of instructions that implements the user geographic API 160 can generate and send a query to the domain of geographic service 104 that the user API service 132 can process.
Depending on the implementation, the services 130 and 132 may not share, share some, or share all of the geographic functionality. For example, each of the services 130 and 132 may generate a navigation route in a similar manner in response to a query specifying a source location and a destination. On the other hand, the service 130 may support certain functions not available to the client device via the user geographic API 160, such as determining an average travel time between two communities.
The front-end server 110, the client devices 106, and one or more network servers associated with the enterprise client 102 may include processing hardware (such as one or more processors) and non-transitory memory (e.g., hard disk, flash drive to implement persistent and/or non-persistent storage components) that store data and/or instructions executable on the processing hardware (not shown to avoid confusion). The client device 106 may also include a user interface having any suitable combination of input devices such as a touch screen, keyboard, microphone, etc., and output devices such as a screen, speakers, etc.
With continued reference to FIG. 1, the enterprise geographic API 150 may implement storage 152, storage and service logic 154, a connection monitor 156, and a quality monitor 158.
The store 152 may be placed in memory of one or more web servers associated with the enterprise client 102. Thus, the enterprise client 102, in some cases, controls the memory in which the storage 152 is implemented. Further, the enterprise client 102 may access the store 152 in these cases in an efficient and reliable manner via a local network or via a local bus where the store 152 is implemented in the same device as the instructions of the enterprise geographic API 150. In other cases, storage 152 may be implemented in a network server controlled by a third party (such as a cloud-based storage service). The third party operates separately and independently from the enterprise client 102 and the geographic service 104. In accordance with this approach, the enterprise geographic API 150 still needs to access the store 152 via the communication network 108 or another network. However, because store 152 operates independently of geographic service 104, the probability that geographic service 104 and a third party supporting store 152 become unavailable at the same time is relatively low. In this way, geographic data may be provided to the enterprise client 102 in a reliable manner.
Further, storage 152 may also be distributed in a domain controlled by the provider of geographic service 104, but preferably on one or more network servers operating substantially independently of front-end server 110. In this manner, the temporary unavailability of the front-end server 110 does not necessarily prevent the enterprise geographic API 150 from accessing the store 152 unless the unavailability is due to the unavailability of the entire domain of the provider of the geographic service 104. Also, due to this, the geographic data may be provided to the enterprise client 102 in a reliable manner.
In any case, the store 152 may store certain geographic information, which in some cases is a subset of the information available in the databases 120, 122, 124, etc. For example, the storage 152 may store map data corresponding to only those geographic features that may be important to the enterprise client 102, and omit the remaining features. As a more specific example, the store 152 may store road information for a certain geographic area to support navigation functions and not store information about museums, parks, and other POIs in some or all categories.
In some implementations, the store 152 stores some of the responses to previous queries submitted via the enterprise geographic API 150. The storage and service logic 154 may summarize these responses such that, for example, when the enterprise client 102 invokes the enterprise geographic API 150 to submit multiple requests for navigation directions from a certain community to a certain destination or area (e.g., from a convention area in san francisco, california to an airport), the storage and service logic 154 may add to the storage a navigation route from the approximate center of the convention area to the airport, and/or an average travel time between the convention area and the airport. As a more specific example, the storage and service logic 154 may store updated information for travel between the source and destination after every X minutes (e.g., 10,20,30, 60). In this manner, when the enterprise geographic API 152 cannot retrieve a navigation route for traveling from a particular location within the convention area to the airport due to a network failure or some other reason, the storage and service logic 154 may query the storage 152 and use the results of similar queries generated only within the past X minutes to determine an expected travel time. As a result, because the enterprise geographic API 152 maintains up-to-date data, the accuracy of the retrieved navigation route, and thus the accuracy of other information that may be based thereon (e.g., expected travel time, travel cost, etc.), is improved.
As another example, the storage and service logic 154 may translate the response to the previous query from a particular geographic coordinate (e.g., latitude and longitude) to a unit of S2 or some fixed size square area. Thus, for example, the storage and service logic 154 may associate coordinates (Lat) with1，Long1) Relevant geographic queries (e.g., "find nearby coffee shops") translate to unit S1Will be associated with the coordinate (Lat)2，Long2) Related similar geographic queries are translated into the same unit S1And will be associated with the coordinate (Lat)3，Long3) Another similar geographic query of relevance is translated into Unit S2。
As yet another example, the storage and service logic 154 may storeStore 152 is added for use in unit S1And S2Unit S1And S3Unit S2And S3Etc. of the centroid of the moving object. The storage and service logic 154 may periodically calculate these segments by querying the geo-service 104, which geo-service 104 determines route segments between centroids of cells S2 in view of current traffic conditions, weather conditions, and the like. When the enterprise geographic API 150 cannot reach the geographic service 104 to be a slave unit SxTo the unit SyIn providing service for requests for navigational directions to a location, storage and service logic 154 may access storage 152, retrieve the associated pre-computed route segment, and use element SxAnd Sx+1Unit Sx+1And Sx+2、…Sx+NAnd SyThe segments between the respective centroids of the navigation route.
The storage and service logic 154 may also support other geographic functions of the geographic service 104 in a complete or simplified ("lightweight") form. For example, the storage and service logic 154 may index certain geographic data (e.g., responses to frequent past geographic queries, such as office hours at the academy of Chicago Art, Illinois) to provide partial local search functionality.
Still referring to FIG. 1, the connection monitor 156 may determine whether the store and service logic 154 should rely on the store 152 when servicing a call to the enterprise geographic API 150. To this end, the connection monitor 156 may activate a timer after the storage and service logic 154 sends a query to the geographic service 104 via the network 108 and determine whether a response arrives before the timer expires. Additionally or alternatively, the connection monitor 156 may determine an average response time to the query to identify trends associated with delays or interruptions in service.
In some implementations, the quality monitor 158 can determine whether the results received from the geographic service 104 for the geographic query are different than the results generated by the enterprise geographic API 150 using the store 152 in response to the same or similar geographic query. For example, the enterprise client 102 may invoke the enterprise geographic API 150 to obtain an estimate of the time to drive from a location in san Francisco, Calif. to a mountain View, Calif. A front-end server 110 operating in the domain of the geo-service 104 may process the query and respond to the enterprise client 102 with a 55 minute estimate. The enterprise geographic API 150 may also use geographic information available in the store 152 to generate a time estimate for the trip. Depending on the implementation, this estimation may be based on a certain number of similar queries processed by the enterprise geographic API 150 over the past X minutes, or based on similar queries to similar weather conditions, etc., that the enterprise geographic API 150 typically processes at the same time. In response to obtaining a 75 minute estimate, the enterprise geographic API 150 may determine that the network-based response and the stored-based response differ by more than some threshold amount (e.g., 15%), and update the latency statistics accordingly. The enterprise geographic API 150, in some embodiments, provides such statistics to the geographic service 104 at certain intervals (e.g., once an hour, once a day). The enterprise geographic API 150 may also provide appropriate alert messages to the geographic service 104, the enterprise client 102, or both.
In an example embodiment, the enterprise client 102 provides taxi services to users operating client devices similar to the client device 106. These devices may execute an enterprise application 162 via which a user may submit service requests to the enterprise client 102. The request may specify, for example, the user's current location, the user's destination, and queries for available nearby cars and cost estimates for traveling from the current location to the destination. As part of processing the request, the enterprise client 102 may invoke the enterprise geographic API 150 to obtain an estimate of time to travel from the current location of the client 106 to the destination (such that the enterprise client 102 may determine a cost estimate based on the time estimate). In some cases, the enterprise geographic API 150 successfully queries the geographic service 104. In other cases, the enterprise geographic API 150 may not receive a response to the query within some predetermined period of time and uses the geographic information in the store 152 to generate the estimate. In either case, the enterprise geographic API 150 provides the cost estimate to the client device 106 for an amount of time such that the client device 106 does not experience service outages regardless of whether the enterprise geographic API 150 is able to reach the geographic service 104. Further, for example, the client device 106 may access the geographic service 104 via the user geographic API 160 to display a digital map of the current location or destination. Client device 106 may utilize user geographic API 160 independent of enterprise application 162.
Consider an example scenario in which the enterprise geographic API 150 may service requests for geographic information with reference to FIGS. 2A and 2B.
At the start of the scenario 200, the client device 106 submits 202 a request for a service provided by the enterprise client 102. The enterprise client 102 determines that certain geographic information is needed to service the request from the client device 106 and, thus, requests 210 geographic information via a call to the enterprise geographic API 150.
The API logic 154 then requests 220A geographic information from the geographic service 104. The API logic 154 starts 228 a timer to limit the period of time for which the enterprise geographic API 150 waits for a response from the geographic service 104 to some predetermined amount. Further, in this example embodiment, the API logic 154 requests 222 the cached information from the store 152. In another embodiment, after the enterprise geographic API 150 receives a response to the query from the geographic service 104, the API logic 154 requests 222 the cached information. In yet another embodiment, the API logic 154 requests 222 cached information only when the enterprise geographic API 150 does not receive a response to the query from the geographic service 104 within a certain period of time limited by a timer. In either case, the store 152 provides 224 the cached information to the API logic 154.
In scenario 200, before the timer expires, the geographic service 104 responds 226 to the query from the enterprise geographic API 150. The geographic service 104 provides the requested geographic information and the API logic 154 stops the timer. The API logic 154 then formats and provides 230 the response to the enterprise client 102. In some cases, the enterprise client 102 provides 240 the geographic information, or a message generated based on the geographic information, to the client device 106.
In some cases, the API logic 154 causes the quality monitor 158 (omitted from fig. 2A for simplicity) to compare 250 the results received during events 224 and 226. When the results differ by more than a threshold amount, the API logic 154 may update the latency statistics for subsequent reporting 252 to the geographic service 104. In some implementations, the API logic 154 also provides alert messages to the enterprise client 102.
The scenario 270 of FIG. 2B similarly begins with events 202 and 204. Also similar to the scenario of fig. 2A, API logic 154 requests 222 cached information from store 152, and store 152 provides 224 cached information to API logic 154. In addition, the API logic 154 starts 228 a timer to limit the amount of time the enterprise geographic API 150 waits for a response from the geographic service 104.
However, in this scenario, the API logic 154 does not successfully request 220B geographic information from the geographic service 104. For example, the request sent 220B by the API logic 154 may not reach the front-end server 110 due to a network connection problem, or the front-end server 110 may be undergoing a reboot process. In either case, the enterprise geographic API 150 does not receive a response from the geographic service 104 during a timer-controlled time period that is initiated 228 by the API logic 154 in response to sending 220B the request. Upon expiration of the timer, the API logic 154 determines that it should return 232 the geographic information retrieved from the store 152 to the enterprise client 102. Similar to the scenario of fig. 2A, the enterprise client 102 may in some cases provide 240 the geographic information, or a message generated based on the geographic information, to the client device 106.
Referring to fig. 2A and 2B, the enterprise geographic API 150 may provide an indication to the enterprise client 102 whether the response corresponds to a network-based response from the geographic service 104 or a storage-based response generated using geographic information in the store 152. In some implementations, the indication can be explicit, such as a flag returned in response to invocation of the enterprise geographic API 150 along with a corresponding geographic indication, one value of which indicates a network-based response and another value of which indicates a stored-based response. In other embodiments, the indication of the more typical and expected network-based response is implicit, while the indication that the response is based on storage is explicit.
For greater clarity, fig. 3 and 4 illustrate example methods 300 and 400 that the enterprise geographic API 150 may implement. Each of the methods 300 and 400 may be implemented as a set of instructions stored on a non-transitory computer readable medium and executed by processing hardware, such as one or more processors.
Referring first to FIG. 3, a method 300 begins at block 302, where the enterprise geographic API 150 generates a store for geographic data in a domain accessible to the enterprise client 102 via a call to the enterprise geographic API 150 (e.g., the store 152 of FIGS. 1-2B). In some embodiments, a software entity other than enterprise geographic API 150 allocates storage. For example, the enterprise client 102 may invoke a separate cache creation API specifically configured to create storage for the enterprise client. The cache creation API may, in some embodiments, allow the enterprise client 102 to control the size of storage, the type of content to be cached, the type of functionality available, and the like.
At block 304, the enterprise geographic API 150 is invoked with a request for geographic information (see event 210 of FIGS. 2A and 2B). In various scenarios, the request may specify geographic coordinates of an area for which the enterprise client 102 requests the digital map; the enterprise client 102 requests a start location and destination for travel of time estimates, distance estimates, or a complete set of directions between them; geographic coordinates or another reference of a point or area and a query to be performed in connection with the point or area (e.g., "gas station," "food"); and so on.
Next, at block 306, the enterprise geographic API 150 formats and sends the query to the geographic service 104 based on the information received at block 304 (see events 220A and 220B of FIGS. 2A and 2B, respectively). As discussed above, the enterprise geographic API 150 may also start a timer at about the same time as the query is sent to limit the period of time that the enterprise geographic API 150 waits for a response (see event 228 in fig. 2A and 2B). Because the instructions implementing the enterprise geographic API 150 are executed on the processing hardware of the enterprise client 102, the enterprise geographic API 150 sends the query via the communication network 108 or another suitable communication network.
Alternatively, the enterprise geographic API 150 may query the store 152 at about the same time as the query is sent to the geographic service at block 306 to request cached geographic information (see event 222 of FIGS. 2A and 2B). However, in the example embodiment of FIG. 3, at block 322, the enterprise geographic API 150 requests cached geographic information only after no response is received from the geographic service.
With continued reference to FIG. 3, the enterprise geographic API 150 receives a response from the geographic service at block 310 (see event 226 in FIG. 2A) before the timer expires in the first instance. The enterprise geographic API 150 then generates a response to the API call at block 312. To this end, the enterprise geographic API 150 uses geographic information received from geographic services.
However, in a second example, the enterprise geographic API 150 does not receive a response from the geographic service for an allocation period controlled by a timer. In particular, the enterprise geographic API 150 may detect expiration of a timer at block 320 (see event 228 in fig. 2B). Flow then proceeds to block 322 where the enterprise geographic API 150 uses the geographic information retrieved from storage to generate a response to the API call (see event 232 in FIG. 2B).
Referring now to FIG. 4, a method 400 for quality monitoring begins at block 402, where the enterprise geographic API 150 receives geographic information from the geographic service 104 (see event 226 in FIG. 2A). At block 404, the enterprise geographic API 150 also uses the store to generate "baseline" geographic information (see event 224 in FIG. 2A). The enterprise geographic API 150 may generate the baseline geographic information prior to receiving the response from the geographic service, or at about the same time as the response from the geographic service.
Next, at block 406, the enterprise geographic API 150 determines whether the difference between the geographic information obtained at blocks 402 and 404 exceeds a certain threshold amount (see event 250 of FIG. 2A). To this end, the enterprise geographic API 150 may, for example, measure the degree to which estimates of travel time or travel distance differ (e.g., 22 minutes versus 30 minutes). In response to determining that the difference exceeds the threshold amount, the enterprise geographic API 150 updates the latency statistics and/or generates an alert for the enterprise client 102 at block 408 (see event 252 of fig. 2A). Otherwise, the method 400 completes after block 406.
Additional considerations
The following additional considerations apply to the foregoing discussion. Throughout this specification, multiple instances may implement a component, an operation, or a structure described as a single instance. Although the respective operations of one or more methods are illustrated and described as separate operations, one or more of the respective operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as discrete components in the example configurations may be implemented as a combined structure or component. Similarly, structures and functionality presented as a single component may be implemented as separate components. These and other variations, modifications, additions, and improvements fall within the scope of the subject matter of the present disclosure.
In addition, certain embodiments are described herein as comprising logic or multiple components, modules, or mechanisms. The modules may constitute software modules (e.g., code stored on a machine-readable medium) or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in some manner. In an example embodiment, one or more computer systems (e.g., a stand-alone, client, or server computer system) or one or more hardware modules (e.g., a processor or a set of processors) of a computer system may be configured by software (e.g., an application or application portion) as a hardware module that operates to perform certain operations described herein.
In various embodiments, the hardware modules may be implemented mechanically or electronically. For example, a hardware module may comprise permanently configured special-purpose circuitry or logic (e.g., as a special-purpose processor, such as a Field Programmable Gate Array (FPGA) or an Application Specific Integrated Circuit (ASIC)) to perform certain operations. A hardware module may also include programmable logic or circuitry (e.g., as embodied in a general-purpose processor or other programmable processor) that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically, in a dedicated and permanently configured circuit, or in a temporarily configured circuit (e.g., configured by software), may be driven by cost and time considerations.
The term hardware should therefore be understood to encompass a tangible entity, i.e., an entity that is physically constructed, permanently configured (e.g., hardwired), or temporarily configured (e.g., programmed) to operate in a certain manner or to perform certain operations described herein. As used herein, "hardware-implemented module" refers to a hardware module. In view of embodiments in which the hardware modules are temporarily configured (e.g., programmed), each of the hardware modules need not be configured or instantiated at any one time. For example, where the hardware modules include a general-purpose processor configured using software, the general-purpose processor may be configured at different times as respective different hardware modules. The software may thus configure the processor, e.g., to constitute a particular hardware module at one time and to constitute a different hardware module at a different time.
A hardware module may provide information to and receive information from other hardware. Thus, the described hardware modules may be considered to be communicatively coupled. In the case where a plurality of such hardware modules coexist, the communication may be realized by signal transmission (for example, by an appropriate circuit and bus) connecting the hardware modules. In embodiments where multiple hardware modules are configured or instantiated at different times, communication between such hardware modules may be accomplished, for example, by storing and retrieving information in a memory structure accessible to the multiple hardware modules. For example, one hardware module may perform an operation and store the output of the operation in a memory device communicatively coupled thereto. Another hardware module may then access the storage device at a later time to retrieve and process the stored output. The hardware modules may also initiate communication with input or output devices and may operate on resources (e.g., collections of information).
Various operations of the example methods described herein may be performed, at least in part, by one or more processors that are temporarily configured (e.g., by software) or permanently configured to perform the relevant operations. Whether temporarily configured or permanently configured, such processors may constitute processor-implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor-implemented modules.
Similarly, the methods or routines described herein may be implemented at least in part by a processor. For example, at least some of the operations of a method may be performed by one or more processors or processor-implemented hardware modules. Execution of certain operations may be distributed among one or more processors that reside not only within a single machine, but also deployed across multiple machines. In some example embodiments, one or more processors may be located at a single location (e.g., within a home environment, an office environment, or as a server farm), while in other embodiments, processors may be distributed across multiple locations or devices.
The one or more processors may also operate to support performance of related operations in a "cloud computing" environment or as SaaS. For example, as indicated above, at least some of the operations may be performed by a set of computers (as an example of machines including processors) that are accessible via a network (e.g., the internet) and via one or more appropriate interfaces (e.g., APIs).
Claims (16)
1. A method for providing availability of geographic data to enterprise clients, the method comprising:
generating, by processing hardware, a store that invokes, via an Application Programming Interface (API), geographic information available to an enterprise client configured to (i) receive service requests from a plurality of user devices, and (ii) invoke the API to provide geographic-related information in response to the service requests; and
when the enterprise client invokes the API to submit a query:
in a first instance, the query is sent to a geographic service via a communication network, and a network-based response to the query is generated using geographic information received from the geographic service in response to the query, an
In a second example, geographic information stored in the store is used to generate a store-based response to the query.
2. The method of claim 1, wherein:
the geographic service is determined to be available in the first instance, and
the geographic service is determined to be unavailable in the second instance.
3. The method of claim 1 or 2, further comprising, in the second instance:
sending, by the processing hardware, the query to the geographic service; and
upon determining that no response to the query is received within a predetermined time period from when the query was sent to the geographic service, generating the storage-based response.
4. The method of any preceding claim, further comprising, in the second instance:
generating a store-based response to the query using geographic information stored in the store; and
updating latency statistics periodically reported to the geographic service in response to determining, by the processing hardware, that the network-based response and the stored-based response differ by more than a threshold amount.
5. The method of claim 4, further comprising providing an alert to the enterprise client.
6. A method according to any preceding claim, wherein the network-based response and the stored-based response comprise respective estimates of the time of travel between a source and a destination.
7. The method of any preceding claim, further comprising, in the second instance:
providing, by the processing hardware, an indication to use the store to service the query and a store-based response to the query.
8. The method of any of the preceding claims, wherein generating the storage comprises generating the storage on one or more network servers associated with the enterprise client.
9. The method of any of the preceding claims, wherein generating the storage comprises generating the storage on one or more network servers operating independently of the enterprise client and the geo-service.
10. The method of any preceding claim, further comprising:
providing in the storage a set of instructions configured to implement functionality for generating navigation directions using geographic information stored in the storage.
11. The method of claim 10, wherein the function for generating the navigation directions generates a navigation route using pre-computed route segments.
12. The method of any preceding claim, further comprising:
providing in the storage a set of instructions configured to implement functions for performing a local search of a specified geographic area.
13. The method of any preceding claim, further comprising:
adding geographic information to the store based on a previous invocation of the API by the enterprise client.
14. The method of claim 13, wherein:
the previous invocation of the API corresponds to a query and a network-based response related to the point associated with the set of geographic coordinates,
adding the geographic information includes associating the network-based response with a larger geographic area that includes the point.
15. The method of claim 14, wherein the larger geographic area is cell S2.
16. A computing device comprising processing hardware and configured to implement the method of any of claims 1-15.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/067924 WO2021126251A1 (en) | 2019-12-20 | 2019-12-20 | Providing a resilient application programming interface for geographic services |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113287102A true CN113287102A (en) | 2021-08-20 |
Family
ID=69411506
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980044642.2A Pending CN113287102A (en) | 2019-12-20 | 2019-12-20 | Providing resilient application programming interfaces for geographic services |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220318279A1 (en) |
EP (1) | EP3861461A1 (en) |
CN (1) | CN113287102A (en) |
WO (1) | WO2021126251A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11915064B2 (en) * | 2022-01-19 | 2024-02-27 | Vmware, Inc. | Highly concurrent and responsive application programming interface (API) in eventual consistency environment |
Family Cites Families (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060190285A1 (en) * | 2004-11-04 | 2006-08-24 | Harris Trevor M | Method and apparatus for storage and distribution of real estate related data |
US10002156B2 (en) * | 2015-03-16 | 2018-06-19 | Here Global B.V. | Version management for incrementally compiled map data |
US10659403B2 (en) * | 2015-03-25 | 2020-05-19 | Pypestream, Inc. | Systems and methods for navigating nodes in channel based chatbots using natural language understanding |
US10523524B2 (en) * | 2016-09-13 | 2019-12-31 | Gogo Llc | Usage-based bandwidth optimization |
CA3040923A1 (en) * | 2016-11-04 | 2018-05-11 | Intergraph Corporation | Feature management for web map tile services |
US20190005055A1 (en) * | 2017-06-30 | 2019-01-03 | Microsoft Technology Licensing, Llc | Offline geographic searches |
US11734618B2 (en) * | 2017-12-15 | 2023-08-22 | Google Llc | Multi-modal directions with a ride service segment in a navigation application |
US11321579B2 (en) * | 2018-07-30 | 2022-05-03 | Uber Technologies, Inc. | Multiple source place matching system |
-
2019
- 2019-12-20 US US17/256,621 patent/US20220318279A1/en active Pending
- 2019-12-20 EP EP19845852.3A patent/EP3861461A1/en active Pending
- 2019-12-20 WO PCT/US2019/067924 patent/WO2021126251A1/en unknown
- 2019-12-20 CN CN201980044642.2A patent/CN113287102A/en active Pending
Also Published As
Publication number | Publication date |
---|---|
US20220318279A1 (en) | 2022-10-06 |
WO2021126251A1 (en) | 2021-06-24 |
EP3861461A1 (en) | 2021-08-11 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6756561B2 (en) | Prefetching map tile data based on mobile device generation event analysis | |
AU2012348295B2 (en) | Method and apparatus for pre-fetching place page data for subsequent display on a mobile computing device | |
US20150370828A1 (en) | Tile-Based Distribution of Searchable Geospatial Data to Client Devices | |
US10630628B2 (en) | Systems and methods for managing vehicles | |
US9171293B2 (en) | Location based system with location-enabled messaging and method of operation thereof | |
US8943126B1 (en) | Rate limiter for push notifications in a location-aware service | |
US20190147381A1 (en) | Methods for dynamically identifying loads for a trucker | |
US20150161149A1 (en) | Integration of device location into search | |
US20150186958A1 (en) | System and method for rating points of interest based on a location history | |
US10983987B2 (en) | Navigation system with update mechanism and method of operation thereof | |
US20210231456A1 (en) | Objective generation of a point of interest score based on quantities of user stops | |
US20210334294A1 (en) | Improving offline map data availability | |
WO2014210248A2 (en) | Secure private data models for customized map content | |
US8983998B1 (en) | Prioritizing points of interest in unfamiliar regions | |
CN113287102A (en) | Providing resilient application programming interfaces for geographic services | |
CN112097785B (en) | Vehicle-mounted intelligent device data processing method and device and electronic device | |
US10902655B1 (en) | Editing cached map titles | |
US11663914B2 (en) | Geohash-based traffic management | |
JP2018036957A (en) | On-vehicle communication device, vehicle allocation system and on-vehicle communication method | |
TWI471830B (en) | System and method for providing traffic information | |
US10129702B1 (en) | Methods and systems for determining semantic location information | |
JP2024061495A (en) | Method and information processing device | |
JP2023073848A (en) | System and method for supporting management of product after shipment | |
JP6508881B2 (en) | Behavior determination apparatus, behavior determination method and program | |
CN113010622A (en) | Real-time traffic data processing method and device and electronic equipment |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |