US20110252335A1 - Zooming in a Web Browser - Google Patents
Zooming in a Web Browser Download PDFInfo
- Publication number
- US20110252335A1 US20110252335A1 US13/085,282 US201113085282A US2011252335A1 US 20110252335 A1 US20110252335 A1 US 20110252335A1 US 201113085282 A US201113085282 A US 201113085282A US 2011252335 A1 US2011252335 A1 US 2011252335A1
- Authority
- US
- United States
- Prior art keywords
- browser
- web browser
- computer
- size
- document
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9577—Optimising the visualization of content, e.g. distillation of HTML documents
Definitions
- This document relates to systems and techniques for managing the display of objects in a web browser at different zoom levels.
- This document describes systems and techniques that may be used to manage the display of visual elements via a web browser, where the particular browser may include zooming functionality that is independent of the particular applications that execute in the browser.
- the WebKit for building browsers performs certain nonstandard techniques on displayed elements when a user zooms.
- the logical pixel height is what applications, such as those written in JavaScript, define to the browser.
- the zoom level is zero, the logical pixel height and the device pixel height are the same.
- the device pixel height gets greater and becomes a multiple of the logical pixel height.
- each increase zoom level is 1.2 over the prior level.
- the browser will compute the request as 13.2 pixels but round it down to 13 pixels because partial pixels cannot be displayed. If many such elements are stacked, the rounded error for the entire height of the stack can quickly become relevant, particularly when a distance is made up of a large number of smaller distances, and particularly at higher zoom levels.
- the particular math used in such a system may be reverse engineered in effect by the features here, so that the inputs provided to a device may be adjusted so that the WebKit renders, even at a zoomed in level, in an appropriate manner.
- a computer-implemented method for managing the display of information in a web browser comprises identifying a web browser type of a web browser on a computing device, identifying a zoom level of the web browser, obtaining size-related information about one or more graphical elements displayed by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
- a computer-implemented system for managing the electronic display of information comprises a web browser; an electronic document that is accessible for display on the web browser; and an application configured for execution on the web browser, the application programmed to identify a type of the web browser, identify a zoom level of the web browser, obtaining size-related information about one or more graphical elements for display by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
- the application can be further programmed to request the browser to generate the element to be provided on the browser at the adjusted matching size.
- the application can be programmed to obtain size-related information about one or more graphical elements for display by the web browser by accessing a model of the electronic document.
- identifying a zoom level of the web browser can comprise submitting a query to the browser form an application that is running on the browser.
- FIG. 1 shows zoomed examples of tables from a web browser
- FIGS. 2A and 2B are block diagrams showing components of a model-view-controller implementation of a spreadsheet application.
- FIG. 2C is a block diagram of a system for permitting collaborative editing of a documented by multiple users through a hosted server system.
- FIG. 3 is a flow chart for providing adjustments to graphical items in a web browser display so as to permit proper alignment of such items with other items.
- FIG. 4 shows an example of a computer device and a mobile computer device that can be used to implement the techniques described here.
- This document describes systems and techniques for managing idiosyncrasies with respect to distance measure and layout in a web browser during native zooming I the browser.
- FIG. 1 shows zoomed examples of tables from a web browser.
- a table which shows numbers next to names of deserts
- the elements may be formed visually by the generation of two adjacent elements that look like joined columns.
- the elements align very well, as shown at the top of the figure.
- the elements may become unaligned, as shown in the left branch. This may happen, for example, because an application that is responsible for generating the right column to match the left column may request information from the browser regarding the particular rows in the left column. Because of the problems with zooming in certain browsers, the information returned by the particular browser may not be wholly accurate.
- the application has received added logic so as to transform the input it receives regarding the sizes of the rows in the left column (from the browser), and adjusts its own rendering of rows to make up for such problems.
- FIGS. 2A and 2B are block diagrams showing components of a model-view-controller (MVC) implementation of a spreadsheet application.
- the spreadsheet application may be executed by a web browser, such as the web browser 102 shown in FIG. 1 .
- the MVC implementation provides for the download of a model from a remote server to a client, and the rendering of the client into a DOM to form a view of the model that may be managed directly by the web browser.
- the controller may intercept actions, such as clicks on icons and keystrokes on a keyboard, and may cause such actions to be implemented, such as by adding typed characters both to the model on the client and on the remote server.
- a computer application 200 may be configured to display a spreadsheet document 202 .
- the application 200 includes a model 204 , a view 206 , and a controller 208 .
- the model 204 can contain a representation of the state of the spreadsheet document 202 , including such elements as values, formats, formulas, frozen columns, hidden columns, frozen rows, hidden rows, and the like.
- the view 206 can represent a rendering of the current state of the model 204 .
- the view 206 can be used for presenting to the user visual information that is associated with the spreadsheet document 202 , such as user controls and spreadsheet data.
- the controller 208 can respond to changes in the model 204 or the view 206 , and can update the state of the model 204 and the view 206 .
- solid lines between the model 204 , the view 206 , and the controller 208 represent direct references between components, and dashed lines represent listeners.
- the controller 208 can modify the model 204 , and can in turn modify the view 206 .
- the view 206 can request re-rendering of an updated model or portion of the model.
- characters and other edits by the other users may be passed to the client device from the server system, and the client code may add characters to the model in near real-time, and those changes can be passed into the DOM—so that each user can see the edits made by the other users very quickly.
- a computer application 200 A includes a model 204 A (corresponding with the model 204 ), a view 206 A (corresponding with the view 206 A), and a controller 208 A (corresponding with the controller 208 A).
- the model 204 A can include one or more sheet models 210 .
- Each of the sheet models 210 can represent a separate spreadsheet in a collection of spreadsheet documents, for example, and can include a set of row models 212 and column models 214 .
- the row models 212 and the column models 214 can be represented as arrays.
- Each of the sheet models 210 can further include a set of cell models 216 .
- the cell models 216 can be represented as a sparsely populated two-dimensional array indexed by row and column ids.
- each of the sheet models 210 can include additional metadata, such as information related to frozen rows and columns, hidden rows and columns, merges, conditional formats, embedded object managers, maps of ids to positions, and the like.
- Each of the cell models 216 can include a set of cell components 218 .
- each of the cell components 218 can include information such as cell types, raw values, display values, format models, formula models, hyperlinks, data validation, conditional formatting, mutation methods, and view annotations (e.g., properties that may be cached on cell objects for lookup).
- each cell type e.g., text, hyperlink, comment, and the like
- each cell type may include an associated renderer that may convert the cell to an HTML/DOM (HyperText Markup Language/Document Object Model) representation via rendering.
- Format models may include such properties as number formats, cell styling including colors and fonts, and the like.
- Formula models may also include formulas using R1C1 notation, and may include methods for formula conversion.
- Format models can be implemented using Cascading Style Sheet (CSS) classes, CSS class maps, and inline style objects, for example.
- Formula models can be stored in a map on a client device, for example, so that cells may share references to the formulas.
- format models may also be stored in a map on a client device.
- cell models and format models may follow the NULL object pattern. For example, shared singleton objects may exist for a default blank cell and for a default blank format.
- Model data and components may be provided by a mega-model 238 (whose name indicates that the model is a super-set of the other models or views) stored on a remote server system via a connection to a network 236 (e.g., the internet).
- the view 206 A can include one or more view items 220 that may enable the user to interact with the application 200 , such as menu bars, tool bars, context menus, chat panes, dialogs, and the like.
- the view 206 A can also include a sheet menu 222 that presents information and control options related to one or more of the sheet models 210 , and one or more of a set of per views 224 .
- one of the per views 224 may be associated with a corresponding one of the sheet models 210 .
- Each of the per views 224 may include components or controls such as freezebars, resizers, selectors, active cell indicators, and navigation tools (e.g., scrollbars and the like).
- the controller 208 A can include one or more controllers 230 that may listen for and handle user interactions with one or more of the view items 220 .
- each of the controllers 230 may be associated with a corresponding one of the view items 220 .
- menu bar controllers may listen for and handle user interactions with menu bar view items (e.g., relating to various actions that a user would typically take fro ma row of menu selections)
- tool bar controllers may listen for and handle user interactions with tool bar view items
- context menu controllers may listen for and handle user interactions with context menu view items, and so forth.
- the controller 208 A can also include a sheet controller 232 that may listen for and handle user interactions with the sheet menu 222 .
- the controller 208 A can include a set of per view controllers 234 , where each of the controllers 234 is configured to listen for and handle user interactions with a corresponding view in the set of per views 224 .
- Each of the per view controllers 234 may include various controller types, such as key controllers for intercepting and interpreting keyboard input, mouse controllers for intercepting and interpreting mouse input, and model change controllers for intercepting and interpreting model change events.
- the controllers included in the controller 208 A can transform user-generated events into model and view mutations. For example, based on a user action, a relevant controller (e.g., a controller configured for handling the action) may receive one or more events associated with the action and make transient changes to the view 206 A before the user action is committed. Then, based on the event properties, the relevant controller can construct a command to mutate the model 204 A, execute it, and send it to the remote server system that hosts the mega-model 238 via the network 236 .
- a relevant controller e.g., a controller configured for handling the action
- the relevant controller can construct a command to mutate the model 204 A, execute it, and send it to the remote server system that hosts the mega-model 238 via the network 236 .
- a mouse controller included in the per view controllers 234 can listen for an event associated with the mouse positioning input and the mouse click input, and upon intercepting it, can modify the view 206 A (e.g., a per view associated with the active sheet) to provide the user with a visual indicator for the selection.
- the selected spreadsheet cell 260 may be highlighted, assigned a different border, assigned a different color, or another such modification.
- a keyboard controller included in the per view controllers 234 can listen for events associated with the keyboard input, and upon intercepting them, can modify the view 206 A to provide the user with a visual indicator for the input. For example, as the user types data into the spreadsheet cell 260 , the cell may be visually updated to present the data to the user. Additionally, the keyboard controller can modify the model 204 A to include entered data by writing the user input to the model. For example, one of the cell models 216 (e.g., a cell model associated with the spreadsheet cell 260 ) can be updated to include the entered data as the raw value.
- the mega-model 238 may be updated to include the entered data, thus coordinating the model 204 A with the mega-model 238 .
- changes to the model 204 A may be transmitted to the mega-model 238 via a connection to the network 236 .
- changes may be sent periodically (e.g., once every second, once every 10 seconds, once every minute, or another appropriate time interval).
- changes may be sent based on user activity (e.g., removing focus from a spreadsheet cell, clicking a save button, or some other action).
- the user may modify the formatting of data presented in the spreadsheet cell 260 .
- the user can indicate a desired formatting change (e.g., a change such as changing regular numbers to currency, changing a font to bold, changing a color to blue, and the like).
- One of the controllers 230 or the sheet controller 232 can listen for user interaction with the view 206 A, and upon detecting the interaction, can modify the model 204 A to include the formatting change.
- one of the cell models 216 e.g., the cell model associated with the spreadsheet cell 260
- a model change controller included in the per view controllers 234 can listen for events associated with the model 204 A and can send a request to the view 206 A to update accordingly (e.g., by rendering a display value included in the cell model associated with the spreadsheet cell 260 ).
- the model change controller may also handle model change events that result from collaborative model changes.
- Model-view-controller interactions within the application 200 A for entering the formula and associating the formula with the spreadsheet cell 260 may be generally similar as when modifying formatting.
- a model change controller included in the per view controllers 234 can detect the model change associated with the entered formula, and can send a request to the view 206 A to perform a display update.
- the view 206 A may convert the entered formula to a literal value, and may render the spreadsheet cell 260 to include the literal value.
- Particular steps may be taken to permit a user to interact with a formula for a cell when the view might only include a literal value for the cell.
- a text entry area or box may be display adjacent to a viewport on a browser, and when a user places a cursor over a particular cell, the model data for the cell may be obtained and provided in the text entry area, while the literal value is shown in the cell in the viewport.
- the formula As the user changes the formula, that change may be propagate to the model on the client (with changes to downstream cells) and may be rendered back into the DOM.
- the user may also elect to view a different portion of the spreadsheet document 202 than they are currently viewing in the viewport. For example, by interacting with a scrollbar 206 that is associated with the spreadsheet document, the user may indicate a desire to view spreadsheet data beyond the current view.
- One of the per view controllers 234 e.g., the per view controller associated with the active sheet
- can listen for user interaction with the view 206 A or other appropriate component e.g., the visual portion of the scrollbar 262 ), and upon detecting the interaction (e.g., via a computer mouse), can request for the view 206 A to redraw itself. If the user specifies a small amount of scrolling, the view 206 A may cause itself to be displayed by the browser.
- a buffer area of cells may be maintained in the model 204 A around the cells displayed in the visible area of the spreadsheet document 202 . If the amount of scrolling specified by the user is determined by the view 206 A to be within the bounds of the buffer area of cells, the spreadsheet cells may be rendered using the cached data. If the user specifies a larger amount of scrolling, such that the scrolling specified by the user is determined by the view 206 A to be outside of the bounds of the buffer area of cells, for example, additional spreadsheet data from the mega-model 238 may be downloaded via the network 236 . Thus, the model 204 A may be updated with information related to additional spreadsheet cells, and the spreadsheet cells may be rendered using the downloaded data.
- FIG. 2C is a block diagram of a system 240 for permitting collaborative editing of a document by multiple users through a hosted server system.
- the system 240 includes a hosted document system 242 executed by one or more computer servers (e.g. a server farm).
- the hosted document system 242 can provide document hosting services to any number of client users via connections to a network 244 (e.g., the internet).
- client users may create new documents, modify existing documents, share documents, and collaboratively work on documents with other users.
- document hosting services may be provided to browser applications 246 , 248 , and 250 .
- Each of the applications may be executed by a web browser (e.g., by the browser 104 , as shown in FIG. 1 ), and may include model, view, and controller components (e.g., similar to the application 200 , shown in FIGS. 2A and 2B ).
- the applications 246 , 248 , and 250 may be configured to execute computer code (e.g., JavaScript and other code running in a web browser) to display a word processing interface and to perform word processing functions associated with one or more documents served by the hosted document system 242 .
- computer code e.g., JavaScript and other code running in a web browser
- Chris can interact with a web browser 252
- Tina can interact with a web browser 254
- Spike can interact with a web browser 256 .
- Each of the browsers 252 , 254 , and 256 may access any appropriate number of browser applications (e.g., embedded applications, widgets, web services, and the like).
- browser 252 can access application 246
- browser 254 can access application 248
- browser 256 can access application 250 .
- users of the system 240 can work with one or more documents that are managed and provided by the hosted document system 242 .
- the users may access existing documents provided by the system 242 or may create new documents.
- Each of the browser applications 246 , 248 , and 250 can communicate with an interface 260 of the document system 242 via the network 244 .
- communication between the browser applications 246 , 248 , and 250 and the interface 260 may include HTTP (HyperText Transfer Protocol) requests, SOAP (Simple Object Access Protocol) messages, or some other appropriate such protocol.
- client browsers may maintain browser channel connections to the interface 260 for communicating session data between clients and the document system 242 .
- the hosted document system 242 can include sub-components for storing and managing information related to system users, documents, and browser applications.
- the various sub-components may be executed by the same computer server, or may be distributed among multiple computer servers.
- the sub-components may communicate with each other directly (e.g., via messages, transferred files, shared data, remote procedure calls, or some other protocol) or indirectly (e.g., by communicating with an intermediary application).
- sub-components included in the document system 242 can communicate with client applications (e.g., the browser applications 246 , 248 , and 250 ) via the interface 260 .
- the system 242 can also include one or more data stores for storing user information 270 .
- the user information 270 can include information associated with system users (e.g., Chris, Tina, and Spike). Such information may include general user information and login information (e.g., user names, passwords, e-mail addresses, and the like), information related to one or more devices employed by the users to access the system (e.g., IP addresses, browser versions, connection speeds, and the like), and system usage information (e.g., access times, amount of data accessed, and the like), to name a few possibilities.
- system users e.g., Chris, Tina, and Spike
- login information e.g., user names, passwords, e-mail addresses, and the like
- information related to one or more devices employed by the users to access the system e.g., IP addresses, browser versions, connection speeds, and the like
- system usage information e.g., access times, amount of data accessed, and the like
- the system 242 can include one or more data stores for storing documents 272 in the form, e.g., of document models like those discussed above and below.
- the documents 272 can include word processing documents created, maintained, and accessed by system users.
- the documents 272 may be generated by an automated process, such as a news feed or another reporting process that is based on gathered data.
- Information associated with the documents 272 can include document data models, document text, document formatting information, entities (e.g., tables, images, videos, sound clips, or other such objects), and the like.
- the system 242 can also include one or more data stores for storing access information 274 .
- the access information 274 can include information that can be used for controlling access of system users (e.g., users included in the user information 270 ) to system documents (e.g., documents included in the documents 272 ).
- system users may set access privileges for documents that they create or manage.
- Chris may create a personal letter document and specify the document as being private.
- other users of the system e.g., Tina and Spike
- Tina may upload a schedule document and specify the document as being shared and as being viewable by Chris.
- Spike may be unable to locate or access the document, but Chris may be able to access the document in view-only mode.
- Tina as the document creator, may retain full access to the document, having privileges such as the ability to add, edit, and delete content, having the ability to change privileges, and having the ability to remove the document from the system 242 .
- Spike may create a document related to a group project and specify Chris and Tina (and himself) as having full access privileges.
- user groups may be included in the access information 274 . For example, a user may create a group and may add one or more users to the group. Rather than select individual users when assigning document permissions, in some instances, users may select a group including the users.
- the access information 274 may also include such information as the user ids of document users, document access times, and the like.
- the system 242 can include one or more data stores for storing HTML/JavaScript 276 .
- the HTML/JavaScript 276 can include application code for executing the browser applications 246 , 248 , and 250 .
- the application code may be provided to any of the browsers 252 , 254 , and 256 , for example, when browser users access a web site associated with the hosted document system 242 .
- the system 242 may provide the HTML/JavaScript 276 in addition to one or more of the documents 272 .
- the browser applications 246 , 248 , and 250 may render the document data and may provide an interface that enables browser users to interact with the documents.
- technologies other than HTML and JavaScript may be used for providing application code.
- web browsers including an appropriate plugin another type of compiled or interpreted code may be provided.
- Many possible user interactions with the system 240 are possible, including interactions in single user sessions and in multiple user sessions.
- multiple users may simultaneously interact with a document.
- the applications used for editing the document may each behave independently, the applications may follow the same editing rules for updating and rendering the document model.
- multiple users may have similar experiences with the document, and may work together to produce a similar document model.
- Chris accesses the hosted document system 242 by directing the web browser 252 to a web site (e.g., a domain) that is associated with the system 242 .
- a web site e.g., a domain
- the system 242 can verify Chris's information against the user information 270 .
- the system 242 can provide HTML/JavaScript 276 to the browser 252 for executing an online word processor (though certain of the code may be passed before verification occurs).
- the browser can include a portion of the HTML/JavaScript 276 as the browser application 246 , render chrome associated with the application, and display the application to Chris.
- Chris may interact with the browser application 246 via a set of controls displayed in an application view within the browser 252 .
- Chris may indicate an intent to create a new document by clicking a button or selecting a menu option displayed in the application view.
- the application controller can intercept the command and pass the command to the interface 260 via the network 244 .
- the system 242 can add a new document to the documents 272 , and add information associated with the new document to the set of active models 262 .
- the active models 262 may include model information associated with documents currently being edited by other users of the system 242 .
- a corresponding version of a model in the set of active models 262 may be present at the browser application 246 .
- Chris may add content and make changes to the word processing document provided by the view of the browser application 246 , and the corresponding content and changes can be applied to a model that is accessed by the browser application 246 (and associated HTML and JavaScript code running in the browser), and may be propagated to the active models 262 .
- Chris may also share the document with one or more users. For example, using controls associated with the application 246 , Chris may select Tina and Spike as users who may share the document, and he may assign both Tina and Spike full document privileges. For example, Tina and Spike may be included in a presented list of users commonly sharing documents with Chris, and Chris may select Tina and Spike from the list. As another example, Chris may provide the e-mail addresses of Tina and Spike.
- the system 242 can store the sharing information (e.g., user ids of other users having access to the document, permissions levels for the users, and the like) in the access information 274 .
- the system 242 may send messages (e.g., e-mail, text messages, instant messages, and the like) to users who have received document privileges.
- messages e.g., e-mail, text messages, instant messages, and the like
- users who have received document privileges may receive a link (e.g., a hyperlink or URL) to the shared document.
- Tina and Spike may access the document using their web browsers 254 , 256 .
- the system 242 can provide HTML/JavaScript 276 to the browser 254 , 256 for executing an online word processor.
- the browsers can include a portion of the HTML/JavaScript 276 as the browser applications 248 , 250 , can render chrome associated with the application, and can display the applications.
- an active model manager 264 included the hosted document system 242 can identify which documents are currently open by users of the system, and users who are active in the document (i.e., Chris), and can set up a collaborative session. For example, the active model manager 264 can determine that the document requested by Tina and by Spike is associated with one or more of the active models 262 . The system 242 can then forward the document request to a computer hosting the document, and the computer can associate Tina and Spike with the current session. Additionally, the browser applications 248 , 250 can download model data associated with the active model(s) 262 , and render and display the downloaded model data. In some implementations, the system 242 can create model instances for Tina and for Spike and can add the instances to the active models 262 .
- users may be able to view their own cursors as well as the cursors of other users in a collaborative session.
- each user's cursor appears to himself/herself as a square.
- Chris may view his own cursor as a square, and the other users' cursors as a circle or as a triangle.
- Tina and Spike may also view their own cursor as a square, and the other users' cursors as circles or triangles.
- the cursors may appear as a different color (which could not be shown here).
- cursors may generally appear as underlines or vertical bars, where the cursors are different colors for each user.
- changes made by each of the users can be sent by the browser applications 246 , 248 , and 250 to the hosted document system 242 , coordinated, and sent back to the other users.
- the changes can be sent at time intervals (e.g., once every 100 milliseconds, once every 200 milliseconds, once every 500 milliseconds, once every second, once every 2 seconds, or another appropriate time interval).
- sending can be based at least in part on user activity or inactivity. For example, during periods of user inactivity, changes may be sent or received less frequently than during periods of user activity.
- a pop-up label that identifies the other user may be displayed, so that the local user can identify who is making changes—though the label may then disappear so that it does not continue to block the document.
- the hosted document system 242 can include collaboration logic 266 .
- the collaboration logic 266 can be executed by one or more code modules executed by one or more computer servers associated with the system 242 .
- portions of the collaboration logic can be executed by the browser applications 246 , 248 , and 250 .
- the logic 266 can resolve data collisions (e.g., instances where multiple users edit the same document portion or apply conflicting document formats) by applying a consistent set of rules to all user changes. Although, in some instances, one or more users may be prompted to disambiguate a change.
- Spike may be presented with a message from the browser application 250 including possible conflict resolution scenarios.
- one user may be identified as trumping other users in collision situations.
- Chris as the document creator, for example, may be able to apply his changes over changes made by either Tina or Spike in cases of conflict. For example, if Spike edits a passage at the same time as Chris deletes it, the passage (including Spike's edits) may be deleted.
- the system shown in FIG. 2C may handle collaborative editing of a hosted document by multiple users at one time.
- the management of such editing can involve a low amount of data passing between the various sub-systems in the system
- FIG. 3 is a flow chart for providing adjustments to graphical items in a web browser display so as to permit proper alignment of such items with other items.
- the disclose process may be implemented, for example, using the systems and techniques described above with respect to FIGS. 2A-2C .
- the process begins at box 302 , where a browser type is identified.
- the browser type may be used by the program to determine whether any size adjustments will need to be made in its output so as to align properly with whatever else the browser may be displaying.
- a current browser zoom level is determined, where 0 is no zoom at all, and high zoom levels correspond to higher degrees of zooming in and enlarging displayed items.
- the process obtains size information from the browser. For example, the application may want to determine where to place a digital image in a document relative to a number of rows of text. The application may thus make typical requests to get information about the heights of each row of text, and then may aggregate to determine composite distances.
- the application determines a size of an element it would have to generate in order to match with the existing elements, as those elements were repeated by the browser.
- the process adjusts the determined matching size by essentially backing out whatever special mathematics the browser performed in making its calculations.
- the process just described may enable a developer of a complex application to define much better how the application will look, and will interact with a user. Also, seamless graphical user interfaces may be more easily generated with the techniques discussed here, as visual disconnects and misalignments can be avoided on a browser display.
- FIG. 4 shows an example of a generic computer device 400 and a generic mobile computer device 450 , which may be used with the techniques described here.
- Computing device 400 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 450 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- Computing device 400 includes a processor 402 , memory 404 , a storage device 406 , a high-speed interface 408 connecting to memory 404 and high-speed expansion ports 410 , and a low speed interface 412 connecting to low speed bus 414 and storage device 406 .
- Each of the components 402 , 404 , 406 , 408 , 410 , and 412 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 402 can process instructions for execution within the computing device 400 , including instructions stored in the memory 404 or on the storage device 406 to display graphical information for a GUI on an external input/output device, such as display 416 coupled to high speed interface 408 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 400 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 404 stores information within the computing device 400 .
- the memory 404 is a volatile memory unit or units.
- the memory 404 is a non-volatile memory unit or units.
- the memory 404 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 406 is capable of providing mass storage for the computing device 400 .
- the storage device 406 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 404 , the storage device 406 , memory on processor 402 , or a propagated signal.
- the high speed controller 408 manages bandwidth-intensive operations for the computing device 400 , while the low speed controller 412 manages lower bandwidth-intensive operations.
- the high-speed controller 408 is coupled to memory 404 , display 416 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 410 , which may accept various expansion cards (not shown).
- low-speed controller 412 is coupled to storage device 406 and low-speed expansion port 414 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 400 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 420 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 424 . In addition, it may be implemented in a personal computer such as a laptop computer 422 . Alternatively, components from computing device 400 may be combined with other components in a mobile device (not shown), such as device 450 . Each of such devices may contain one or more of computing device 400 , 450 , and an entire system may be made up of multiple computing devices 400 , 450 communicating with each other.
- Computing device 450 includes a processor 452 , memory 464 , an input/output device such as a display 454 , a communication interface 466 , and a transceiver 468 , among other components.
- the device 450 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 450 , 452 , 464 , 454 , 466 , and 468 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 452 can execute instructions within the computing device 450 , including instructions stored in the memory 464 .
- the processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 450 , such as control of user interfaces, applications run by device 450 , and wireless communication by device 450 .
- Processor 452 may communicate with a user through control interface 458 and display interface 456 coupled to a display 454 .
- the display 454 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 456 may comprise appropriate circuitry for driving the display 454 to present graphical and other information to a user.
- the control interface 458 may receive commands from a user and convert them for submission to the processor 452 .
- an external interface 462 may be provide in communication with processor 452 , so as to enable near area communication of device 450 with other devices. External interface 462 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 464 stores information within the computing device 450 .
- the memory 464 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- Expansion memory 474 may also be provided and connected to device 450 through expansion interface 472 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- expansion memory 474 may provide extra storage space for device 450 , or may also store applications or other information for device 450 .
- expansion memory 474 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 474 may be provide as a security module for device 450 , and may be programmed with instructions that permit secure use of device 450 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 464 , expansion memory 474 , memory on processor 452 , or a propagated signal that may be received, for example, over transceiver 468 or external interface 462 .
- Device 450 may communicate wirelessly through communication interface 466 , which may include digital signal processing circuitry where necessary. Communication interface 466 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 468 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System) receiver module 470 may provide additional navigation- and location-related wireless data to device 450 , which may be used as appropriate by applications running on device 450 .
- GPS Global Positioning System
- Device 450 may also communicate audibly using audio codec 460 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 450 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 450 .
- Audio codec 460 may receive spoken information from a user and convert it to usable digital information. Audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 450 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 450 .
- the computing device 450 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 480 . It may also be implemented as part of a smartphone 482 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
A computer-implemented method for managing the display of information in a web browser involves identifying a web browser type of a web browser on a computing device, identifying a zoom level of the web browser, obtaining size-related information about one or more graphical elements displayed by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
Description
- This application claims priority to U.S. Provisional Application Ser. No. 61/323,355, filed on Apr. 12, 2010, entitled “Zooming in a Web Browser,” the entire contents of which are hereby incorporated by reference.
- This document relates to systems and techniques for managing the display of objects in a web browser at different zoom levels.
- With the development of cloud computing, more and more complex applications are being written, such as using HTML and JavaScript, to execute in web browsers, using code and data provided by central hosted services companies. Modern productivity applications, such as word processors and spreadsheets, have even been implemented with very rich user interfaces in web browsers.
- Different web browser users may want to review a document like a spreadsheet at different zoom levels on their web browser. In particular, most web browsers support the ability to zoom in or out generally on the content that is displayed by the browser, such as by executing a particular key shortcut.
- This document describes systems and techniques that may be used to manage the display of visual elements via a web browser, where the particular browser may include zooming functionality that is independent of the particular applications that execute in the browser. For example, the WebKit for building browsers performs certain nonstandard techniques on displayed elements when a user zooms. In zooming, the concepts of a logical pixel height and a device pixel height are relevant. The logical pixel height is what applications, such as those written in JavaScript, define to the browser. Where the zoom level is zero, the logical pixel height and the device pixel height are the same. However, as zoom increases, the device pixel height gets greater and becomes a multiple of the logical pixel height. In WebKit, each increase zoom level is 1.2 over the prior level.
- Thus, for example, if JavaScript asks for an element 11 pixels high and the browser is at
zoom level 1, the browser will compute the request as 13.2 pixels but round it down to 13 pixels because partial pixels cannot be displayed. If many such elements are stacked, the rounded error for the entire height of the stack can quickly become relevant, particularly when a distance is made up of a large number of smaller distances, and particularly at higher zoom levels. - Thus, as described here, when a browser is determined to use a system like WebKit, the particular math used in such a system may be reverse engineered in effect by the features here, so that the inputs provided to a device may be adjusted so that the WebKit renders, even at a zoomed in level, in an appropriate manner.
- In one implementation, a computer-implemented method for managing the display of information in a web browser is disclosed. The method comprises identifying a web browser type of a web browser on a computing device, identifying a zoom level of the web browser, obtaining size-related information about one or more graphical elements displayed by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
- In another implementation, a computer-implemented system for managing the electronic display of information is disclosed. The system comprises a web browser; an electronic document that is accessible for display on the web browser; and an application configured for execution on the web browser, the application programmed to identify a type of the web browser, identify a zoom level of the web browser, obtaining size-related information about one or more graphical elements for display by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level. The application can be further programmed to request the browser to generate the element to be provided on the browser at the adjusted matching size. Also, the application can be programmed to obtain size-related information about one or more graphical elements for display by the web browser by accessing a model of the electronic document. Moreover, identifying a zoom level of the web browser can comprise submitting a query to the browser form an application that is running on the browser.
- The details of one or more embodiments are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings, and from the claims.
-
FIG. 1 shows zoomed examples of tables from a web browser, -
FIGS. 2A and 2B are block diagrams showing components of a model-view-controller implementation of a spreadsheet application. -
FIG. 2C is a block diagram of a system for permitting collaborative editing of a documented by multiple users through a hosted server system. -
FIG. 3 is a flow chart for providing adjustments to graphical items in a web browser display so as to permit proper alignment of such items with other items. -
FIG. 4 shows an example of a computer device and a mobile computer device that can be used to implement the techniques described here. - Like reference symbols in the various drawings indicate like elements.
- This document describes systems and techniques for managing idiosyncrasies with respect to distance measure and layout in a web browser during native zooming I the browser.
-
FIG. 1 shows zoomed examples of tables from a web browser. In this example, a table (which shows numbers next to names of deserts) may be formed visually by the generation of two adjacent elements that look like joined columns. At a zero zoom level, the elements align very well, as shown at the top of the figure. However, when the browser is zoomed in, the elements may become unaligned, as shown in the left branch. This may happen, for example, because an application that is responsible for generating the right column to match the left column may request information from the browser regarding the particular rows in the left column. Because of the problems with zooming in certain browsers, the information returned by the particular browser may not be wholly accurate. Thus, on the right branch, the application has received added logic so as to transform the input it receives regarding the sizes of the rows in the left column (from the browser), and adjusts its own rendering of rows to make up for such problems. - The following figures describe browser modeling structure and a collaborative system in which the techniques described here may be particularly useful. For example, where multiple users are editing a document at the same time, it can be important for them to be synchronized with each other, and lack of alignment in data in such a situation may create real problems.
-
FIGS. 2A and 2B are block diagrams showing components of a model-view-controller (MVC) implementation of a spreadsheet application. For example, the spreadsheet application may be executed by a web browser, such as the web browser 102 shown inFIG. 1 . In general, the MVC implementation provides for the download of a model from a remote server to a client, and the rendering of the client into a DOM to form a view of the model that may be managed directly by the web browser. The controller may intercept actions, such as clicks on icons and keystrokes on a keyboard, and may cause such actions to be implemented, such as by adding typed characters both to the model on the client and on the remote server. - Referring to
FIG. 2A , acomputer application 200 may be configured to display aspreadsheet document 202. Theapplication 200 includes amodel 204, aview 206, and acontroller 208. For example, themodel 204 can contain a representation of the state of thespreadsheet document 202, including such elements as values, formats, formulas, frozen columns, hidden columns, frozen rows, hidden rows, and the like. Theview 206 can represent a rendering of the current state of themodel 204. For example, theview 206 can be used for presenting to the user visual information that is associated with thespreadsheet document 202, such as user controls and spreadsheet data. Thecontroller 208 can respond to changes in themodel 204 or theview 206, and can update the state of themodel 204 and theview 206. As shown inFIG. 2A , solid lines between themodel 204, theview 206, and thecontroller 208 represent direct references between components, and dashed lines represent listeners. For example, listening for user interaction (e.g., provided by user controls) with the presentation of theview 206, thecontroller 208 can modify themodel 204, and can in turn modify theview 206. As another example, listening for changes in themodel 204 made by another user in a collaborative environment or changes made through an automated data update or another such process, theview 206 can request re-rendering of an updated model or portion of the model. For example, if a user of a client device is only one of multiple users concurrently editing a document, characters and other edits by the other users may be passed to the client device from the server system, and the client code may add characters to the model in near real-time, and those changes can be passed into the DOM—so that each user can see the edits made by the other users very quickly. - Referring to
FIG. 2B , the model-view-controller implementation as presented inFIG. 2A is shown with additional detail. As shown, acomputer application 200A includes amodel 204A (corresponding with the model 204), aview 206A (corresponding with theview 206A), and acontroller 208A (corresponding with thecontroller 208A). - The
model 204A can include one ormore sheet models 210. Each of thesheet models 210 can represent a separate spreadsheet in a collection of spreadsheet documents, for example, and can include a set ofrow models 212 andcolumn models 214. For example, therow models 212 and thecolumn models 214 can be represented as arrays. Each of thesheet models 210 can further include a set ofcell models 216. For example, thecell models 216 can be represented as a sparsely populated two-dimensional array indexed by row and column ids. In some implementations, each of thesheet models 210 can include additional metadata, such as information related to frozen rows and columns, hidden rows and columns, merges, conditional formats, embedded object managers, maps of ids to positions, and the like. - Each of the
cell models 216 can include a set ofcell components 218. For example, each of thecell components 218 can include information such as cell types, raw values, display values, format models, formula models, hyperlinks, data validation, conditional formatting, mutation methods, and view annotations (e.g., properties that may be cached on cell objects for lookup). In some implementations, each cell type (e.g., text, hyperlink, comment, and the like) may include an associated renderer that may convert the cell to an HTML/DOM (HyperText Markup Language/Document Object Model) representation via rendering. Format models may include such properties as number formats, cell styling including colors and fonts, and the like. Formula models may also include formulas using R1C1 notation, and may include methods for formula conversion. Format models can be implemented using Cascading Style Sheet (CSS) classes, CSS class maps, and inline style objects, for example. Formula models can be stored in a map on a client device, for example, so that cells may share references to the formulas. In some implementations, format models may also be stored in a map on a client device. In some implementations, cell models and format models may follow the NULL object pattern. For example, shared singleton objects may exist for a default blank cell and for a default blank format. Model data and components may be provided by a mega-model 238 (whose name indicates that the model is a super-set of the other models or views) stored on a remote server system via a connection to a network 236 (e.g., the internet). - The
view 206A can include one ormore view items 220 that may enable the user to interact with theapplication 200, such as menu bars, tool bars, context menus, chat panes, dialogs, and the like. Theview 206A can also include asheet menu 222 that presents information and control options related to one or more of thesheet models 210, and one or more of a set of perviews 224. For example, one of the per views 224 may be associated with a corresponding one of thesheet models 210. Each of the per views 224 may include components or controls such as freezebars, resizers, selectors, active cell indicators, and navigation tools (e.g., scrollbars and the like). - The
controller 208A can include one ormore controllers 230 that may listen for and handle user interactions with one or more of theview items 220. In some implementations, each of thecontrollers 230 may be associated with a corresponding one of theview items 220. For example, menu bar controllers may listen for and handle user interactions with menu bar view items (e.g., relating to various actions that a user would typically take fro ma row of menu selections), tool bar controllers may listen for and handle user interactions with tool bar view items, context menu controllers may listen for and handle user interactions with context menu view items, and so forth. - The
controller 208A can also include asheet controller 232 that may listen for and handle user interactions with thesheet menu 222. In addition, thecontroller 208A can include a set of perview controllers 234, where each of thecontrollers 234 is configured to listen for and handle user interactions with a corresponding view in the set of perviews 224. Each of theper view controllers 234 may include various controller types, such as key controllers for intercepting and interpreting keyboard input, mouse controllers for intercepting and interpreting mouse input, and model change controllers for intercepting and interpreting model change events. - Generally, the controllers included in the
controller 208A can transform user-generated events into model and view mutations. For example, based on a user action, a relevant controller (e.g., a controller configured for handling the action) may receive one or more events associated with the action and make transient changes to theview 206A before the user action is committed. Then, based on the event properties, the relevant controller can construct a command to mutate themodel 204A, execute it, and send it to the remote server system that hosts the mega-model 238 via thenetwork 236. - Many possible user interactions with the
application 200A are possible, including interactions included in single-user sessions and in multiple-user sessions. For purposes of illustration, a series of example user interactions with theapplication 200A are described here. For example, to enter data into thespreadsheet document 202, the user may proceed by using a computer mouse to select a desiredspreadsheet cell 260 by clicking on the cell. A mouse controller included in the per view controllers 234 (e.g., a per view controller associated with the active sheet of the document 202) can listen for an event associated with the mouse positioning input and the mouse click input, and upon intercepting it, can modify theview 206A (e.g., a per view associated with the active sheet) to provide the user with a visual indicator for the selection. For example, the selectedspreadsheet cell 260 may be highlighted, assigned a different border, assigned a different color, or another such modification. - Using a keyboard, the user may enter a desired value into the
spreadsheet cell 260. A keyboard controller included in theper view controllers 234 can listen for events associated with the keyboard input, and upon intercepting them, can modify theview 206A to provide the user with a visual indicator for the input. For example, as the user types data into thespreadsheet cell 260, the cell may be visually updated to present the data to the user. Additionally, the keyboard controller can modify themodel 204A to include entered data by writing the user input to the model. For example, one of the cell models 216 (e.g., a cell model associated with the spreadsheet cell 260) can be updated to include the entered data as the raw value. Additionally, the mega-model 238 may be updated to include the entered data, thus coordinating themodel 204A with the mega-model 238. For example, changes to themodel 204A may be transmitted to the mega-model 238 via a connection to thenetwork 236. In some implementations, changes may be sent periodically (e.g., once every second, once every 10 seconds, once every minute, or another appropriate time interval). In some implementations, changes may be sent based on user activity (e.g., removing focus from a spreadsheet cell, clicking a save button, or some other action). - Next, for example, the user may modify the formatting of data presented in the
spreadsheet cell 260. By interacting with one of theview items 220 or with thesheet menu 222, the user can indicate a desired formatting change (e.g., a change such as changing regular numbers to currency, changing a font to bold, changing a color to blue, and the like). One of thecontrollers 230 or thesheet controller 232 can listen for user interaction with theview 206A, and upon detecting the interaction, can modify themodel 204A to include the formatting change. For example, one of the cell models 216 (e.g., the cell model associated with the spreadsheet cell 260) can be updated to include the change. A model change controller included in theper view controllers 234 can listen for events associated with themodel 204A and can send a request to theview 206A to update accordingly (e.g., by rendering a display value included in the cell model associated with the spreadsheet cell 260). In some implementations, the model change controller may also handle model change events that result from collaborative model changes. - Additionally, for example, the user may associate the
spreadsheet cell 260 with a formula. Model-view-controller interactions within theapplication 200A for entering the formula and associating the formula with thespreadsheet cell 260 may be generally similar as when modifying formatting. For example, a model change controller included in theper view controllers 234 can detect the model change associated with the entered formula, and can send a request to theview 206A to perform a display update. As part of the display update, for example, theview 206A may convert the entered formula to a literal value, and may render thespreadsheet cell 260 to include the literal value. - Particular steps may be taken to permit a user to interact with a formula for a cell when the view might only include a literal value for the cell. In such a situation, a text entry area or box may be display adjacent to a viewport on a browser, and when a user places a cursor over a particular cell, the model data for the cell may be obtained and provided in the text entry area, while the literal value is shown in the cell in the viewport. As the user changes the formula, that change may be propagate to the model on the client (with changes to downstream cells) and may be rendered back into the DOM.
- The user may also elect to view a different portion of the
spreadsheet document 202 than they are currently viewing in the viewport. For example, by interacting with ascrollbar 206 that is associated with the spreadsheet document, the user may indicate a desire to view spreadsheet data beyond the current view. One of the per view controllers 234 (e.g., the per view controller associated with the active sheet) can listen for user interaction with theview 206A or other appropriate component (e.g., the visual portion of the scrollbar 262), and upon detecting the interaction (e.g., via a computer mouse), can request for theview 206A to redraw itself. If the user specifies a small amount of scrolling, theview 206A may cause itself to be displayed by the browser. For example, a buffer area of cells may be maintained in themodel 204A around the cells displayed in the visible area of thespreadsheet document 202. If the amount of scrolling specified by the user is determined by theview 206A to be within the bounds of the buffer area of cells, the spreadsheet cells may be rendered using the cached data. If the user specifies a larger amount of scrolling, such that the scrolling specified by the user is determined by theview 206A to be outside of the bounds of the buffer area of cells, for example, additional spreadsheet data from the mega-model 238 may be downloaded via thenetwork 236. Thus, themodel 204A may be updated with information related to additional spreadsheet cells, and the spreadsheet cells may be rendered using the downloaded data. -
FIG. 2C is a block diagram of asystem 240 for permitting collaborative editing of a document by multiple users through a hosted server system. In general, thesystem 240 includes a hosteddocument system 242 executed by one or more computer servers (e.g. a server farm). The hosteddocument system 242 can provide document hosting services to any number of client users via connections to a network 244 (e.g., the internet). Using thedocument system 242, client users may create new documents, modify existing documents, share documents, and collaboratively work on documents with other users. - For purposes of illustration, document hosting services may be provided to
browser applications FIG. 1 ), and may include model, view, and controller components (e.g., similar to theapplication 200, shown inFIGS. 2A and 2B ). Theapplications document system 242. - As shown in the present illustration, Chris can interact with a
web browser 252, Tina can interact with aweb browser 254, and Spike can interact with aweb browser 256. Each of thebrowsers browser 252 can accessapplication 246,browser 254 can accessapplication 248, andbrowser 256 can accessapplication 250. - By interacting with controls presented by the web browsers, for example, users of the system 240 (e.g., Chris, Spike, and Tina), can work with one or more documents that are managed and provided by the hosted
document system 242. For example, the users may access existing documents provided by thesystem 242 or may create new documents. Each of thebrowser applications interface 260 of thedocument system 242 via thenetwork 244. For example, communication between thebrowser applications interface 260 may include HTTP (HyperText Transfer Protocol) requests, SOAP (Simple Object Access Protocol) messages, or some other appropriate such protocol. In some implementations, client browsers may maintain browser channel connections to theinterface 260 for communicating session data between clients and thedocument system 242. - The hosted
document system 242 can include sub-components for storing and managing information related to system users, documents, and browser applications. The various sub-components may be executed by the same computer server, or may be distributed among multiple computer servers. The sub-components may communicate with each other directly (e.g., via messages, transferred files, shared data, remote procedure calls, or some other protocol) or indirectly (e.g., by communicating with an intermediary application). Generally, sub-components included in thedocument system 242 can communicate with client applications (e.g., thebrowser applications interface 260. - The
system 242 can also include one or more data stores for storinguser information 270. For example, theuser information 270 can include information associated with system users (e.g., Chris, Tina, and Spike). Such information may include general user information and login information (e.g., user names, passwords, e-mail addresses, and the like), information related to one or more devices employed by the users to access the system (e.g., IP addresses, browser versions, connection speeds, and the like), and system usage information (e.g., access times, amount of data accessed, and the like), to name a few possibilities. - In some implementations, the
system 242 can include one or more data stores for storingdocuments 272 in the form, e.g., of document models like those discussed above and below. For example, thedocuments 272 can include word processing documents created, maintained, and accessed by system users. As another example, thedocuments 272 may be generated by an automated process, such as a news feed or another reporting process that is based on gathered data. Information associated with thedocuments 272 can include document data models, document text, document formatting information, entities (e.g., tables, images, videos, sound clips, or other such objects), and the like. - The
system 242 can also include one or more data stores for storingaccess information 274. For example, theaccess information 274 can include information that can be used for controlling access of system users (e.g., users included in the user information 270) to system documents (e.g., documents included in the documents 272). Generally, system users may set access privileges for documents that they create or manage. For example, Chris may create a personal letter document and specify the document as being private. Thus, other users of the system (e.g., Tina and Spike) may be unable to locate or access the document, which may have access control limitations applied to it in various familiar manners. As another example, Tina may upload a schedule document and specify the document as being shared and as being viewable by Chris. Thus, Spike may be unable to locate or access the document, but Chris may be able to access the document in view-only mode. In some implementations, Tina, as the document creator, may retain full access to the document, having privileges such as the ability to add, edit, and delete content, having the ability to change privileges, and having the ability to remove the document from thesystem 242. As another example, Spike may create a document related to a group project and specify Chris and Tina (and himself) as having full access privileges. In some implementations, user groups may be included in theaccess information 274. For example, a user may create a group and may add one or more users to the group. Rather than select individual users when assigning document permissions, in some instances, users may select a group including the users. Theaccess information 274 may also include such information as the user ids of document users, document access times, and the like. - In some implementations, the
system 242 can include one or more data stores for storing HTML/JavaScript 276. For example, the HTML/JavaScript 276 can include application code for executing thebrowser applications browsers document system 242. Upon receiving a request for any of thedocuments 272, for example, thesystem 242 may provide the HTML/JavaScript 276 in addition to one or more of thedocuments 272. Using the HTML/JavaScript 276, thebrowser applications - Many possible user interactions with the
system 240 are possible, including interactions in single user sessions and in multiple user sessions. For example, in a collaborative editing session, multiple users may simultaneously interact with a document. Although the applications used for editing the document may each behave independently, the applications may follow the same editing rules for updating and rendering the document model. Thus, multiple users may have similar experiences with the document, and may work together to produce a similar document model. - In an example session, to initiate collaborative word processing document editing, Chris accesses the hosted
document system 242 by directing theweb browser 252 to a web site (e.g., a domain) that is associated with thesystem 242. Receiving login information from thebrowser 252, thesystem 242 can verify Chris's information against theuser information 270. Upon verification, thesystem 242 can provide HTML/JavaScript 276 to thebrowser 252 for executing an online word processor (though certain of the code may be passed before verification occurs). The browser can include a portion of the HTML/JavaScript 276 as thebrowser application 246, render chrome associated with the application, and display the application to Chris. - Chris may interact with the
browser application 246 via a set of controls displayed in an application view within thebrowser 252. For example, Chris may indicate an intent to create a new document by clicking a button or selecting a menu option displayed in the application view. The application controller can intercept the command and pass the command to theinterface 260 via thenetwork 244. Receiving the command, thesystem 242 can add a new document to thedocuments 272, and add information associated with the new document to the set ofactive models 262. For example, theactive models 262 may include model information associated with documents currently being edited by other users of thesystem 242. - A corresponding version of a model in the set of
active models 262 may be present at thebrowser application 246. For example, Chris may add content and make changes to the word processing document provided by the view of thebrowser application 246, and the corresponding content and changes can be applied to a model that is accessed by the browser application 246 (and associated HTML and JavaScript code running in the browser), and may be propagated to theactive models 262. - Chris may also share the document with one or more users. For example, using controls associated with the
application 246, Chris may select Tina and Spike as users who may share the document, and he may assign both Tina and Spike full document privileges. For example, Tina and Spike may be included in a presented list of users commonly sharing documents with Chris, and Chris may select Tina and Spike from the list. As another example, Chris may provide the e-mail addresses of Tina and Spike. Thesystem 242 can store the sharing information (e.g., user ids of other users having access to the document, permissions levels for the users, and the like) in theaccess information 274. In some implementations, thesystem 242 may send messages (e.g., e-mail, text messages, instant messages, and the like) to users who have received document privileges. In some implementations, users who have received document privileges may receive a link (e.g., a hyperlink or URL) to the shared document. - Upon receiving notification of the shared document, Tina and Spike may access the document using their
web browsers system 242 can provide HTML/JavaScript 276 to thebrowser JavaScript 276 as thebrowser applications - Additionally, an
active model manager 264 included the hosteddocument system 242 can identify which documents are currently open by users of the system, and users who are active in the document (i.e., Chris), and can set up a collaborative session. For example, theactive model manager 264 can determine that the document requested by Tina and by Spike is associated with one or more of theactive models 262. Thesystem 242 can then forward the document request to a computer hosting the document, and the computer can associate Tina and Spike with the current session. Additionally, thebrowser applications system 242 can create model instances for Tina and for Spike and can add the instances to theactive models 262. - In the present example, users may be able to view their own cursors as well as the cursors of other users in a collaborative session. For purposes of illustration, each user's cursor appears to himself/herself as a square. For example, Chris may view his own cursor as a square, and the other users' cursors as a circle or as a triangle. Correspondingly, Tina and Spike may also view their own cursor as a square, and the other users' cursors as circles or triangles. In some implementations, the cursors may appear as a different color (which could not be shown here). For example, cursors may generally appear as underlines or vertical bars, where the cursors are different colors for each user.
- In the present example, changes made by each of the users can be sent by the
browser applications document system 242, coordinated, and sent back to the other users. In some implementations, the changes can be sent at time intervals (e.g., once every 100 milliseconds, once every 200 milliseconds, once every 500 milliseconds, once every second, once every 2 seconds, or another appropriate time interval). In some implementations, sending can be based at least in part on user activity or inactivity. For example, during periods of user inactivity, changes may be sent or received less frequently than during periods of user activity. When a user is entering data or when a local user hovers over a cursor for another user, a pop-up label that identifies the other user may be displayed, so that the local user can identify who is making changes—though the label may then disappear so that it does not continue to block the document. - To coordinate multiple document changes made by multiple users, for example, the hosted
document system 242 can includecollaboration logic 266. For example, thecollaboration logic 266 can be executed by one or more code modules executed by one or more computer servers associated with thesystem 242. In some implementations, portions of the collaboration logic can be executed by thebrowser applications logic 266 can resolve data collisions (e.g., instances where multiple users edit the same document portion or apply conflicting document formats) by applying a consistent set of rules to all user changes. Although, in some instances, one or more users may be prompted to disambiguate a change. For example, if Tina makes a document change and Spike makes a conflicting document change before receiving Tina's change, Spike may be presented with a message from thebrowser application 250 including possible conflict resolution scenarios. In some implementations, one user may be identified as trumping other users in collision situations. Chris, as the document creator, for example, may be able to apply his changes over changes made by either Tina or Spike in cases of conflict. For example, if Spike edits a passage at the same time as Chris deletes it, the passage (including Spike's edits) may be deleted. - Thus, the system shown in
FIG. 2C may handle collaborative editing of a hosted document by multiple users at one time. The management of such editing can involve a low amount of data passing between the various sub-systems in the system -
FIG. 3 is a flow chart for providing adjustments to graphical items in a web browser display so as to permit proper alignment of such items with other items. The disclose process may be implemented, for example, using the systems and techniques described above with respect toFIGS. 2A-2C . - The process begins at
box 302, where a browser type is identified. The browser type may be used by the program to determine whether any size adjustments will need to be made in its output so as to align properly with whatever else the browser may be displaying. Atbox 304, a current browser zoom level is determined, where 0 is no zoom at all, and high zoom levels correspond to higher degrees of zooming in and enlarging displayed items. - At
box 306, the process obtains size information from the browser. For example, the application may want to determine where to place a digital image in a document relative to a number of rows of text. The application may thus make typical requests to get information about the heights of each row of text, and then may aggregate to determine composite distances. Atbox 308, the application determines a size of an element it would have to generate in order to match with the existing elements, as those elements were repeated by the browser. Finally, atbox 310, the process adjusts the determined matching size by essentially backing out whatever special mathematics the browser performed in making its calculations. - Thus, the process just described may enable a developer of a complex application to define much better how the application will look, and will interact with a user. Also, seamless graphical user interfaces may be more easily generated with the techniques discussed here, as visual disconnects and misalignments can be avoided on a browser display.
-
FIG. 4 shows an example of ageneric computer device 400 and a genericmobile computer device 450, which may be used with the techniques described here.Computing device 400 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 450 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. -
Computing device 400 includes a processor 402,memory 404, astorage device 406, a high-speed interface 408 connecting tomemory 404 and high-speed expansion ports 410, and alow speed interface 412 connecting tolow speed bus 414 andstorage device 406. Each of thecomponents computing device 400, including instructions stored in thememory 404 or on thestorage device 406 to display graphical information for a GUI on an external input/output device, such asdisplay 416 coupled tohigh speed interface 408. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 400 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 404 stores information within thecomputing device 400. In one implementation, thememory 404 is a volatile memory unit or units. In another implementation, thememory 404 is a non-volatile memory unit or units. Thememory 404 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 406 is capable of providing mass storage for thecomputing device 400. In one implementation, thestorage device 406 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 404, thestorage device 406, memory on processor 402, or a propagated signal. - The
high speed controller 408 manages bandwidth-intensive operations for thecomputing device 400, while thelow speed controller 412 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In one implementation, the high-speed controller 408 is coupled tomemory 404, display 416 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 410, which may accept various expansion cards (not shown). In the implementation, low-speed controller 412 is coupled tostorage device 406 and low-speed expansion port 414. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 400 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 420, or multiple times in a group of such servers. It may also be implemented as part of arack server system 424. In addition, it may be implemented in a personal computer such as alaptop computer 422. Alternatively, components fromcomputing device 400 may be combined with other components in a mobile device (not shown), such asdevice 450. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 450 includes aprocessor 452,memory 464, an input/output device such as adisplay 454, acommunication interface 466, and atransceiver 468, among other components. Thedevice 450 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 452 can execute instructions within thecomputing device 450, including instructions stored in thememory 464. The processor may be implemented as a chipset of chips that include separate and multiple analog and digital processors. The processor may provide, for example, for coordination of the other components of thedevice 450, such as control of user interfaces, applications run bydevice 450, and wireless communication bydevice 450. -
Processor 452 may communicate with a user throughcontrol interface 458 anddisplay interface 456 coupled to adisplay 454. Thedisplay 454 may be, for example, a TFT LCD (Thin-Film-Transistor Liquid Crystal Display) or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 456 may comprise appropriate circuitry for driving thedisplay 454 to present graphical and other information to a user. Thecontrol interface 458 may receive commands from a user and convert them for submission to theprocessor 452. In addition, anexternal interface 462 may be provide in communication withprocessor 452, so as to enable near area communication ofdevice 450 with other devices.External interface 462 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The
memory 464 stores information within thecomputing device 450. Thememory 464 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.Expansion memory 474 may also be provided and connected todevice 450 throughexpansion interface 472, which may include, for example, a SIMM (Single In Line Memory Module) card interface.Such expansion memory 474 may provide extra storage space fordevice 450, or may also store applications or other information fordevice 450. Specifically,expansion memory 474 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 474 may be provide as a security module fordevice 450, and may be programmed with instructions that permit secure use ofdevice 450. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the
memory 464,expansion memory 474, memory onprocessor 452, or a propagated signal that may be received, for example, overtransceiver 468 orexternal interface 462. -
Device 450 may communicate wirelessly throughcommunication interface 466, which may include digital signal processing circuitry where necessary.Communication interface 466 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 468. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS (Global Positioning System)receiver module 470 may provide additional navigation- and location-related wireless data todevice 450, which may be used as appropriate by applications running ondevice 450. -
Device 450 may also communicate audibly usingaudio codec 460, which may receive spoken information from a user and convert it to usable digital information.Audio codec 460 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 450. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating ondevice 450. - The
computing device 450 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 480. It may also be implemented as part of asmartphone 482, personal digital assistant, or other similar mobile device. - Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
1. A computer-implemented method for managing the display of information in a web browser, the method comprising:
identifying a web browser type of a web browser on a computing device;
identifying a zoom level of the web browser;
obtaining size-related information about one or more graphical elements displayed by the web browser;
determining a matching size for an element to be provided on the browser; and
adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
2. The computer-implemented method of claim 1 , wherein the size-related information and the adjusted size are expressed in units of pixels.
3. The computer-implemented method of claim 1 , further comprising requesting, with an application running in the browser, the browser to generate the element to be provided on the browser at the adjusted matching size.
4. The computer-implemented method of claim 1 , wherein determining a matching size for an element to be provided on the browser comprises aggregating sizes of multiple adjacent elements to be displayed by the web browser.
5. The computer-implemented method of claim 1 , wherein obtaining size-related information about one or more graphical elements displayed by the web browser comprises accessing an unrendered model of an electronic document.
6. The computer-implemented method of claim 1 , wherein obtaining size-related information about one or more graphical elements displayed by the web browser comprises accessing a document object model (DOM) of an electronic document.
7. The computer-implemented method of claim 1 , wherein identifying a zoom level of the web browser comprises submitting a query to the browser form an application that is running on the browser.
8. The computer-implemented method of claim 1 , wherein adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level comprises mapping a logical pixel height to a device pixel height.
9. One or more tangible computer-readable storage media storing instructions that, when executed on one or more computers, perform operations comprising:
identifying a web browser type of a web browser on a computing device;
identifying a zoom level of the web browser;
obtaining size-related information about one or more graphical elements displayed by the web browser;
determining a matching size for an element to be provided on the browser; and
adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
10. The tangible computer-readable storage media of claim 9 , wherein the size-related information and the adjusted size are expressed in units of pixels.
11. The tangible computer-readable storage media of claim 9 , wherein the operations further comprise requesting, with an application running in the browser, the browser to generate the element to be provided on the browser at the adjusted matching size.
12. The tangible computer-readable storage media of claim 9 , wherein determining a matching size for an element to be provided on the browser comprises aggregating sizes of multiple adjacent elements to be displayed by the web browser.
13. The tangible computer-readable storage media of claim 9 , wherein obtaining size-related information about one or more graphical elements displayed by the web browser comprises accessing an unrendered model of an electronic document.
14. The tangible computer-readable storage media of claim 9 , wherein obtaining size-related information about one or more graphical elements displayed by the web browser comprises accessing a document object model (DOM) of an electronic document.
15. The tangible computer-readable storage media of claim 9 , wherein identifying a zoom level of the web browser comprises submitting a query to the browser form an application that is running on the browser.
16. The tangible computer-readable storage media of claim 9 , wherein adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level comprises mapping a logical pixel height to a device pixel height.
17. A computer-implemented system for managing the electronic display of information, the system comprising:
a web browser;
an electronic document that is accessible for display on the web browser; and
an application configured for execution on the web browser, the application programmed to identify a type of the web browser, identify a zoom level of the web browser, obtaining size-related information about one or more graphical elements for display by the web browser, determining a matching size for an element to be provided on the browser, and adjusting the matching size to account for zooming-related measurement errors for the identified browser type and the identified zoom level.
18. The computer-implemented system of claim 17 , wherein the application is further programmed to request the browser to generate the element to be provided on the browser at the adjusted matching size.
19. The computer-implemented system of claim 17 , wherein the application is programmed to obtain size-related information about one or more graphical elements for display by the web browser by accessing a model of the electronic document.
20. The computer-implemented method of claim 1 , wherein identifying a zoom level of the web browser comprises submitting a query to the browser form an application that is running on the browser.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/085,282 US20110252335A1 (en) | 2010-04-12 | 2011-04-12 | Zooming in a Web Browser |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US32335510P | 2010-04-12 | 2010-04-12 | |
US13/085,282 US20110252335A1 (en) | 2010-04-12 | 2011-04-12 | Zooming in a Web Browser |
Publications (1)
Publication Number | Publication Date |
---|---|
US20110252335A1 true US20110252335A1 (en) | 2011-10-13 |
Family
ID=44080296
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/085,282 Abandoned US20110252335A1 (en) | 2010-04-12 | 2011-04-12 | Zooming in a Web Browser |
Country Status (2)
Country | Link |
---|---|
US (1) | US20110252335A1 (en) |
WO (1) | WO2011130281A1 (en) |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110252299A1 (en) * | 2010-04-12 | 2011-10-13 | Zachary Lloyd | Synthetic Navigation Elements for Electronic Documents |
US20110252300A1 (en) * | 2010-04-12 | 2011-10-13 | Google Inc. | Row Heights in Electronic Documents |
US20110307772A1 (en) * | 2010-04-12 | 2011-12-15 | Google Inc. | Scrolling in Large Hosted Data Set |
US20110320962A1 (en) * | 2010-06-28 | 2011-12-29 | Canon Kabushiki Kaisha | Information processing apparatus, control method therefor, and program |
US8434002B1 (en) | 2011-10-17 | 2013-04-30 | Google Inc. | Systems and methods for collaborative editing of elements in a presentation document |
US20130311941A1 (en) * | 2012-05-18 | 2013-11-21 | Research In Motion Limited | Systems and Methods to Manage Zooming |
US8769045B1 (en) | 2011-10-17 | 2014-07-01 | Google Inc. | Systems and methods for incremental loading of collaboratively generated presentations |
CN104090926A (en) * | 2014-06-20 | 2014-10-08 | 北京奇虎科技有限公司 | Browser zoom state detecting method and device |
US9332088B2 (en) | 2012-07-19 | 2016-05-03 | Samsung Electronics Co., Ltd. | Systems and methods for updating computing programs |
US9348803B2 (en) | 2013-10-22 | 2016-05-24 | Google Inc. | Systems and methods for providing just-in-time preview of suggestion resolutions |
US9367522B2 (en) | 2012-04-13 | 2016-06-14 | Google Inc. | Time-based presentation editing |
US9529785B2 (en) | 2012-11-27 | 2016-12-27 | Google Inc. | Detecting relationships between edits and acting on a subset of edits |
US9971752B2 (en) | 2013-08-19 | 2018-05-15 | Google Llc | Systems and methods for resolving privileged edits within suggested edits |
US10204086B1 (en) | 2011-03-16 | 2019-02-12 | Google Llc | Document processing service for displaying comments included in messages |
US10430388B1 (en) | 2011-10-17 | 2019-10-01 | Google Llc | Systems and methods for incremental loading of collaboratively generated presentations |
Citations (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6414698B1 (en) * | 1999-04-13 | 2002-07-02 | International Business Machines Corporation | Method for enabling adaptive sizing of display elements |
US20020091738A1 (en) * | 2000-06-12 | 2002-07-11 | Rohrabaugh Gary B. | Resolution independent vector display of internet content |
US6603493B1 (en) * | 1999-04-13 | 2003-08-05 | International Business Machines Corporation | Method for arranging display elements |
US20050071364A1 (en) * | 2003-09-30 | 2005-03-31 | Xing Xie | Document representation for scalable structure |
US20060227153A1 (en) * | 2005-04-08 | 2006-10-12 | Picsel Research Limited | System and method for dynamically zooming and rearranging display items |
US20070300151A1 (en) * | 2006-06-07 | 2007-12-27 | Tadashi Araki | Content converting device, content display device, content browsing device, content converting method, content browsing method, and computer program product |
US7487447B1 (en) * | 2005-05-25 | 2009-02-03 | Google Inc. | Web page zoom feature |
US20090089704A1 (en) * | 2003-09-24 | 2009-04-02 | Mikko Kalervo Makela | Presentation of large objects on small displays |
US20090109243A1 (en) * | 2007-10-25 | 2009-04-30 | Nokia Corporation | Apparatus and method for zooming objects on a display |
US20100275152A1 (en) * | 2009-04-23 | 2010-10-28 | Atkins C Brian | Arranging graphic objects on a page with text |
US20110035701A1 (en) * | 2009-08-10 | 2011-02-10 | Williams Harel M | Focal point zoom |
US20120210206A1 (en) * | 2009-06-19 | 2012-08-16 | Microsoft Corporation | Resizing an editable area in a web page |
US8307279B1 (en) * | 2011-09-26 | 2012-11-06 | Google Inc. | Smooth zooming in web applications |
-
2011
- 2011-04-12 US US13/085,282 patent/US20110252335A1/en not_active Abandoned
- 2011-04-12 WO PCT/US2011/032133 patent/WO2011130281A1/en active Application Filing
Patent Citations (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6603493B1 (en) * | 1999-04-13 | 2003-08-05 | International Business Machines Corporation | Method for arranging display elements |
US6414698B1 (en) * | 1999-04-13 | 2002-07-02 | International Business Machines Corporation | Method for enabling adaptive sizing of display elements |
US20020091738A1 (en) * | 2000-06-12 | 2002-07-11 | Rohrabaugh Gary B. | Resolution independent vector display of internet content |
US8145995B2 (en) * | 2000-06-12 | 2012-03-27 | Softview L.L.C. | Scalable display of internet content on mobile devices |
US20090119580A1 (en) * | 2000-06-12 | 2009-05-07 | Gary B. Rohrabaugh | Scalable Display of Internet Content on Mobile Devices |
US20090089704A1 (en) * | 2003-09-24 | 2009-04-02 | Mikko Kalervo Makela | Presentation of large objects on small displays |
US20050071364A1 (en) * | 2003-09-30 | 2005-03-31 | Xing Xie | Document representation for scalable structure |
US20060227153A1 (en) * | 2005-04-08 | 2006-10-12 | Picsel Research Limited | System and method for dynamically zooming and rearranging display items |
US7487447B1 (en) * | 2005-05-25 | 2009-02-03 | Google Inc. | Web page zoom feature |
US20070300151A1 (en) * | 2006-06-07 | 2007-12-27 | Tadashi Araki | Content converting device, content display device, content browsing device, content converting method, content browsing method, and computer program product |
US20090109243A1 (en) * | 2007-10-25 | 2009-04-30 | Nokia Corporation | Apparatus and method for zooming objects on a display |
US20100275152A1 (en) * | 2009-04-23 | 2010-10-28 | Atkins C Brian | Arranging graphic objects on a page with text |
US20120210206A1 (en) * | 2009-06-19 | 2012-08-16 | Microsoft Corporation | Resizing an editable area in a web page |
US20110035701A1 (en) * | 2009-08-10 | 2011-02-10 | Williams Harel M | Focal point zoom |
US8307279B1 (en) * | 2011-09-26 | 2012-11-06 | Google Inc. | Smooth zooming in web applications |
Non-Patent Citations (1)
Title |
---|
Richard Fink: Why IE8's Zoom Version 2 requires a window.screenRight Property or An Equivalent, published September 19th, 2008. Internet WayBackMachine archive, 5 pages. * |
Cited By (28)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110252300A1 (en) * | 2010-04-12 | 2011-10-13 | Google Inc. | Row Heights in Electronic Documents |
US20110307772A1 (en) * | 2010-04-12 | 2011-12-15 | Google Inc. | Scrolling in Large Hosted Data Set |
US8429521B2 (en) * | 2010-04-12 | 2013-04-23 | Google Inc. | Scrolling in large hosted data set |
US10460014B2 (en) | 2010-04-12 | 2019-10-29 | Google Llc | Scrolling in large hosted data set |
US8539339B2 (en) * | 2010-04-12 | 2013-09-17 | Google Inc. | Synthetic navigation elements for electronic documents |
US8572478B2 (en) * | 2010-04-12 | 2013-10-29 | Google Inc. | Row heights in electronic documents |
US20110252299A1 (en) * | 2010-04-12 | 2011-10-13 | Zachary Lloyd | Synthetic Navigation Elements for Electronic Documents |
US9720898B2 (en) | 2010-04-12 | 2017-08-01 | Google Inc. | Row heights in electronic documents |
US9037981B2 (en) * | 2010-06-28 | 2015-05-19 | Canon Kabushiki Kaisha | Information processing apparatus, control method therefor, and storage medium for displaying cursors from other sites in dedicated windows |
US20110320962A1 (en) * | 2010-06-28 | 2011-12-29 | Canon Kabushiki Kaisha | Information processing apparatus, control method therefor, and program |
US10204086B1 (en) | 2011-03-16 | 2019-02-12 | Google Llc | Document processing service for displaying comments included in messages |
US11669674B1 (en) | 2011-03-16 | 2023-06-06 | Google Llc | Document processing service for displaying comments included in messages |
US10430388B1 (en) | 2011-10-17 | 2019-10-01 | Google Llc | Systems and methods for incremental loading of collaboratively generated presentations |
US8434002B1 (en) | 2011-10-17 | 2013-04-30 | Google Inc. | Systems and methods for collaborative editing of elements in a presentation document |
US9946725B1 (en) | 2011-10-17 | 2018-04-17 | Google Llc | Systems and methods for incremental loading of collaboratively generated presentations |
US9621541B1 (en) | 2011-10-17 | 2017-04-11 | Google Inc. | Systems and methods for incremental loading of collaboratively generated presentations |
US8769045B1 (en) | 2011-10-17 | 2014-07-01 | Google Inc. | Systems and methods for incremental loading of collaboratively generated presentations |
US9367522B2 (en) | 2012-04-13 | 2016-06-14 | Google Inc. | Time-based presentation editing |
US9435801B2 (en) * | 2012-05-18 | 2016-09-06 | Blackberry Limited | Systems and methods to manage zooming |
US20130311941A1 (en) * | 2012-05-18 | 2013-11-21 | Research In Motion Limited | Systems and Methods to Manage Zooming |
US9332088B2 (en) | 2012-07-19 | 2016-05-03 | Samsung Electronics Co., Ltd. | Systems and methods for updating computing programs |
US9529785B2 (en) | 2012-11-27 | 2016-12-27 | Google Inc. | Detecting relationships between edits and acting on a subset of edits |
US9971752B2 (en) | 2013-08-19 | 2018-05-15 | Google Llc | Systems and methods for resolving privileged edits within suggested edits |
US10380232B2 (en) | 2013-08-19 | 2019-08-13 | Google Llc | Systems and methods for resolving privileged edits within suggested edits |
US11087075B2 (en) | 2013-08-19 | 2021-08-10 | Google Llc | Systems and methods for resolving privileged edits within suggested edits |
US11663396B2 (en) | 2013-08-19 | 2023-05-30 | Google Llc | Systems and methods for resolving privileged edits within suggested edits |
US9348803B2 (en) | 2013-10-22 | 2016-05-24 | Google Inc. | Systems and methods for providing just-in-time preview of suggestion resolutions |
CN104090926A (en) * | 2014-06-20 | 2014-10-08 | 北京奇虎科技有限公司 | Browser zoom state detecting method and device |
Also Published As
Publication number | Publication date |
---|---|
WO2011130281A1 (en) | 2011-10-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US20110252335A1 (en) | Zooming in a Web Browser | |
US10082927B2 (en) | Collaborative cursors in a hosted word processor | |
US8539339B2 (en) | Synthetic navigation elements for electronic documents | |
US10678999B2 (en) | Real-time collaboration in a hosted word processor | |
US9720898B2 (en) | Row heights in electronic documents | |
US8479090B2 (en) | Rich content in a browser-based work processor | |
US8429521B2 (en) | Scrolling in large hosted data set | |
AU2011240674A1 (en) | Collaborative cursors in a hosted word processor | |
US8839457B2 (en) | Image storage in electronic documents |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |