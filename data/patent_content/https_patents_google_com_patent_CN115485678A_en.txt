CN115485678A - Encrypted searches on encrypted data with reduced total leakage - Google Patents
Encrypted searches on encrypted data with reduced total leakage Download PDFInfo
- Publication number
- CN115485678A CN115485678A CN202080100482.1A CN202080100482A CN115485678A CN 115485678 A CN115485678 A CN 115485678A CN 202080100482 A CN202080100482 A CN 202080100482A CN 115485678 A CN115485678 A CN 115485678A
- Authority
- CN
- China
- Prior art keywords
- keyword
- list
- encrypted
- document
- document identifiers
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/31—Indexing; Data structures therefor; Storage structures
- G06F16/316—Indexing structures
- G06F16/319—Inverted lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/14—Details of searching files based on file metadata
- G06F16/144—Query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/14—Details of searching files based on file metadata
- G06F16/156—Query results presentation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/18—File system types
- G06F16/182—Distributed file systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/602—Providing cryptographic facilities or services
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/06—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols the encryption apparatus using shift registers or memories for block-wise or stream coding, e.g. DES systems or RC4; Hash functions; Pseudorandom sequence generators
- H04L9/065—Encryption by serially and continuously modifying data stream elements, e.g. stream cipher systems, RC4, SEAL or A5/3
- H04L9/0656—Pseudorandom key sequence combined element-for-element with data sequence, e.g. one-time-pad [OTP] or Vernam's cipher
- H04L9/0662—Pseudorandom key sequence combined element-for-element with data sequence, e.g. one-time-pad [OTP] or Vernam's cipher with particular pseudorandom sequence generator
Abstract
A method (900) comprising: a search query (20) is received from a user device (10) for a plurality of keywords (32), the plurality of keywords (32) appearing in one or more encrypted documents (152) stored on an untrusted storage device (150). The method further comprises the following steps: an encrypted search index (160) is accessed to obtain a first list of document identifiers (154) that each represent a document that includes a first keyword and a second keyword of the plurality of keywords. The method further comprises the following steps: for each remaining keyword, a corresponding list of document identifiers is determined, each representing a document comprising the first keyword, the second keyword, and the respective remaining keyword. The method comprises the following steps: determining a second list of document identifiers that each represent a document that includes each of the plurality of keywords based on the first list of document identifiers and the corresponding list of each document identifier.
Description
Technical Field
The present disclosure relates to performing an encryption search on encrypted data to reduce gross leakage.
Background
As it becomes more common to store large amounts of data in the cloud, searchable encryption (i.e., encrypted searching) is becoming increasingly popular. More and more users or clients have a large corpus of encrypted documents that are stored at a server that is not controlled by the client (i.e., the server is not trusted). With searchable encryption, the client is able to store its encrypted documents on an untrusted server, but still maintain the ability to search for documents, and for example, retrieve identifiers for all documents containing a particular keyword. However, such searchable encryption often suffers from security and privacy drawbacks.
Disclosure of Invention
One aspect of the present disclosure provides a method of performing an encryption search on encrypted data to reduce gross leakage. The method comprises the following steps: at data processing hardware, a search query for a plurality of keywords is received from a user device associated with a user. The plurality of keywords appear in one or more encrypted documents stored in an encrypted document corpus on an untrusted storage device. The method further comprises the following steps: an encrypted search index is accessed by data processing hardware to obtain a first list of document identifiers. Each document identifier in the first list of document identifiers represents a document that includes a first keyword of the plurality of keywords and a second keyword of the plurality of keywords. For each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword, the method comprises: a corresponding list of document identifiers is determined by the data processing hardware. Each document identifier in the corresponding list of document identifiers represents a document that includes the first keyword, the second keyword, and the respective remaining keywords. The method further comprises the following steps: determining, by the data processing hardware, a second list of document identifiers based on the first list of document identifiers and the corresponding list of each document identifier. Each document identifier in the second list of document identifiers represents a document that includes each of a plurality of keywords. The method further comprises the following steps: returning, by the data processing hardware, the second list of document identifiers obtained from the encrypted search index to the user device.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the encrypted search index includes, for each respective keyword pair that appears in one or more encrypted documents: an encrypted value representing a list of keyword pairs for a document identifier, the list of keyword pairs for the document identifier representing a document that includes two keywords of the keywords in the respective keyword pairs; and an encrypted tag representing the encrypted value and one of the keys in the corresponding key pair. Each cryptographic value may be encrypted with a pseudorandom function key based on the key pair and the secret master key.
In some examples, the pseudorandom function key is based on a concatenation of key pairs. Optionally, each cryptographic label is encrypted with a pseudorandom function key based on one of the keys and a secret master key. The encrypted search index may also include a list of ditags for each respective keyword pair that appears in one or more encrypted documents. Each ditag in the ditag list may include a cryptographic hash of the corresponding cryptographic label for the respective key pair.
In some implementations, determining the second list of document identifiers can include: for each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword, determining whether a ditag corresponding to the respective remaining keyword exists within a ditag list; and removing each ditag from the list of ditags that does not correspond to the respective remaining keyword. In some examples, accessing the encrypted search index to obtain the first list of document identifiers includes retrieving a list of keyword pairs of document identifiers corresponding to the first keyword and the second keyword.
The search query may include tokens representing the first keyword and the second keyword, and tokens representing the first keyword and the respective remaining keywords for each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword. In some implementations, returning the second list of document identifiers obtained from the encrypted search index to the user device causes the user device to decrypt the second list of document identifiers using the secret master key.
Another aspect of the present disclosure provides a system that performs an encryption search on encrypted data to reduce gross leakage. The system comprises: data processing hardware and memory hardware in communication with the data processing hardware. The memory hardware stores instructions that, when executed on the data processing hardware, cause the data processing hardware to perform operations. The operations include receiving a search query for a plurality of keywords from a user device associated with a user. The plurality of keywords appear in one or more encrypted documents stored in an encrypted document corpus on an untrusted storage device. The operations also include accessing an encrypted search index to obtain a first list of document identifiers. Each document identifier in the first list of document identifiers represents a document that includes a first keyword of the plurality of keywords and a second keyword of the plurality of keywords. For each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword, the operations include determining a corresponding list of document identifiers. Each document identifier in the corresponding list of document identifiers represents a document that includes the first keyword, the second keyword, and the respective remaining keywords. The operations also include determining a second list of document identifiers based on the first list of document identifiers and the corresponding list of each document identifier. Each document identifier in the second list of document identifiers represents a document that includes each of a plurality of keywords. The operations also include returning the second list of document identifiers obtained from the encrypted search index to the user device.
This aspect may include one or more of the following optional features. In some implementations, for each respective keyword pair that appears in one or more encrypted documents, the encrypted search index includes: an encrypted value representing a list of keyword pairs for a document identifier, the list of keyword pairs for the document identifier representing a document that includes two keywords of the keywords in the respective keyword pairs; and an encrypted tag representing the encrypted value and one of the keys in the corresponding key pair. Each cryptographic value may be encrypted with a pseudorandom function key based on the key pair and the secret master key.
In some examples, the pseudorandom function key is based on a concatenation of key pairs. Optionally, each cryptographic label is encrypted with a pseudorandom function key based on one of the keys and a secret master key. The encrypted search index may also include a list of ditags for each respective keyword pair that appears in one or more encrypted documents. Each ditag in the ditag list may include a cryptographic hash of the corresponding cryptographic label for the respective key pair.
In some implementations, determining the second list of document identifiers can include, for each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword, determining whether a ditag corresponding to the respective remaining keyword is present within the ditag list, and removing each ditag that does not correspond to the respective remaining keyword from the ditag list. In some examples, accessing the encrypted search index to obtain the first list of document identifiers includes retrieving a list of keyword pairs of document identifiers corresponding to the first keyword and the second keyword.
The search query may include tokens representing the first keyword and the second keyword; and for each remaining keyword that appears in the one or more encrypted documents after the first keyword and the second keyword, tokens representing the first keyword and the respective remaining keyword. In some implementations, returning the second list of document identifiers obtained from the encrypted search index to the user device causes the user device to decrypt the second list of document identifiers using the secret master key.
The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example system that provides encrypted searches on encrypted data to reduce gross leakage.
FIG. 2 is a diagram of exemplary components of an encrypted search index.
Figure 3 is a schematic diagram of an encrypted search manager that filters a list of document identifiers,
FIG. 4 is a schematic diagram of an encrypted search manager that determines a second list of document identifiers based on the filtering of FIG. 3.
Fig. 5 is a schematic diagram of an encrypted search index with encrypted tags and values.
Fig. 6A and 6B are schematic diagrams of a client-side encrypted search system.
Fig. 7A to 7D are schematic diagrams of formal descriptions of systems that perform conjunction queries.
Fig. 8A to 8D are schematic diagrams of formal descriptions of a system that performs a Conjunctive Normal Form (CNF) query.
FIG. 9 is a flow diagram of an example arrangement of operations of a method of providing an encrypted search on encrypted data to reduce gross leakage.
FIG. 10 is a schematic diagram of an example computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
Searchable encryption, which may also be referred to as encrypted searching or structured encryption, is becoming increasingly popular. The goal of searchable encryption is to enable a client to outsource storage of an encrypted document corpus to an untrusted server. For example, a client may wish to securely store a large number of documents (or any other items uploaded to a server, such as pictures, emails, etc.) in a cloud-based storage solution. The term "document" is used generically and may refer to any kind of digital file (e.g., a picture, a song, a database entry, etc.). In general, clients desire to maintain the ability to efficiently search for documents (i.e., search for one or more specific keywords) while maintaining the privacy and security of encrypted documents. To maintain this privacy, information related to document content or queries from clients must remain hidden from untrusted servers. A common way to address this problem is to create a separate encrypted search index (i.e., an encrypted multimap) that indexes the keywords and associated document identifiers of all documents stored on the untrusted server. To achieve efficient construction, encrypted search indexes are typically allowed to leak a well-defined and "reasonable" amount of information.
The search index is encrypted using a key that is inaccessible to the untrusted server and then stored with the document. The client may then generate a search query that the server evaluates the encrypted search index. The evaluation results in an encrypted document identifier associated with the keyword of the search query, which the untrusted server returns to the client. In this way, the client receives a list of document identifiers for documents that include keywords while minimizing information leakage (e.g., to untrusted servers).
A conjunction query is a query that contains one or more keywords, and a response should consist of a set of documents that each include each of the keywords of the query. For example, consider that a client will join a query k 1 ∧k 2 ∧…∧k q Submitted to a remote storage system that implements an encrypted search index. Naive method performs q searches on an encrypted search index to obtain a singleA set of document identifiers including each respective keyword. Each document identifier in the q sets of document identifiers may be returned to the client, and the client may perform a conjunction of all sets locally. In this case, the amount of information delivered to the client may actually be greater than the optimal value. That is, this method passes each value in the conjunct set q times. This is exacerbated by the fact that many, if not most, of the document identifiers returned do not include every one of the keywords and thus unnecessarily reveal information. In an ideal scenario, the remote storage system only returns document identifiers that include each of the queried keywords to minimize leakage.
Embodiments herein relate to a system that includes an encrypted search index that supports expressed boolean queries (e.g., conjunctive queries and/or Conjunctive Normal Form (CNF) queries) that suppress gross leakage without compromising efficiency or utility. The system includes an encrypted search index that contains a cryptographic hash for each key pair that occurs in an encrypted corpus of documents stored on an untrusted storage device. Each cryptographic hash represents a list of document identifiers that includes a key pair. The list of document identifiers, including key word pairs, is used to filter results from the remaining key words in the query, thereby greatly minimizing the amount of information passed to the client and leaked to untrusted storage.
Referring now to fig. 1, in some implementations, an example system 100 includes user devices 10 associated with respective users or clients 12 and in communication with an untrusted remote system 111 via a network 112. The user device 10 may correspond to any computing device, such as a desktop computer workstation, a laptop computer workstation, or a mobile device (i.e., a smartphone). The user equipment 10 includes computing resources 18 (e.g., data processing hardware) and/or storage resources 16 (e.g., memory hardware).
The remote system 111 may be a single computer, a plurality of computers, or a distributed system (e.g., a cloud environment) having scalable/flexible computing resources 118 (e.g., data processing hardware) and/or storage resources 116 (e.g., memory hardware). An untrusted document data store 150 (i.e., remote storage device 150) is overlaid on storage resources 116 to allow one or more clients or computing resources 118 to scalably use storage resources 116. Document data store 150 is configured to store a corpus of documents 152, 152 a-n. Each document 152 includes a document identifier 154 (e.g., a document name) that uniquely identifies the associated document 152. Each document 152 also includes a set of keywords 32. The keyword set 32 includes all keywords present in the associated encrypted documents 152 that the user 12 may search for. As used herein, a document 152 may refer to any item uploaded to the remote system 111 for storage within the document data store 150, such as, but not limited to, an email, a calendar event, an annotation, a database entry, a picture, an audio file, and the like. In some embodiments, user device 10 executes a Searchable Encryption (SE) manager 120 for managing access to encrypted documents 152 within data store 150.
The SE manager 120 receives a search query 20 from the user device 10 for a plurality of keywords 32, the plurality of keywords 32 appearing in one or more encrypted documents 152 stored on the untrusted storage device 150. The SE manager 120 accesses the encrypted search index 160 to obtain a first list of document identifiers 154. Each document identifier 154 in the first list of document identifiers 154 is encrypted and represents a document 152 that includes a first keyword 32 of the plurality of keywords 32 and a second keyword 32 of the plurality of keywords 32. That is, the SE manager 120 obtains a list of document identifiers 154 from the search index 160 that represent documents 152 that each include two of the plurality of keywords 32. As discussed in more detail below, the search index 160 includes a corresponding list of document identifiers 154 for each keyword 32 pair that appears in the documents 152. For example, when SE manager 120 receives a query 20 that includes a search for the keywords 32 "cat," "dog," "elephant," and "fox," SE manager 20 will access the encrypted search index 160 to obtain a list of document identifiers 154 corresponding to documents 152 that include any two of "cat," "dog," "elephant," and "fox" (e.g., both "cat" and "dog," or both "cat" and "fox").
As discussed in more detail below, in some examples, the search query 20 includes tokens 24 representing first keywords 32 and second keywords 32. The search query 20 may also include tokens 24 representing the first keyword 31 and the remaining keywords 32 for each remaining keyword 32 in the query 20 that follows the first keyword 32 and the second keyword 32.
For each remaining keyword 32 that appears in the one or more encrypted documents after the first keyword and the second keyword, the SE manager 120 determines a corresponding list of document identifiers 154 that represent the document 152 that includes the first keyword, the second keyword, and the respective remaining keyword. The keywords 32 may be processed in any order regardless of any order of the keywords 32 in the search query 20 or the document 152. Returning to the previous example of query 20 including the keywords 32 "cat," dog, "" elephant, "and" fox, "SE manager 120 may first obtain a list of document identifiers 154 including the keywords 32" cat "and" dog. Then, for each remaining keyword 32 (i.e., "elephant" and "fox"), the SE manager 120 may determine a corresponding list of document identifiers 154 that includes "cat," "dog," and the remaining keywords. In this example, SE manager 120 determines two corresponding lists of document identifiers: a first list of document identifiers representing documents 152 that each include the keywords 32 "cat," "dog," and "elephant"; and a second list of document identifiers 154 representing documents 152 that each include the keywords 32 "cat," dog, "and" fox.
Based on the first list of document identifiers 154 (i.e., the list of document identifiers 154 representing documents 152 that each include a first keyword 32 and a second keyword 32) and the corresponding list of each document identifier 154 (i.e., the list of document identifiers 154 representing documents 152 that each include a first keyword 32, a second keyword, and remaining keywords 32), the SE manager 120 determines a second list of document identifiers 154 having each document identifier 154, each document identifier 154 representing a document 152 that includes each keyword 32 of the plurality of keywords 32 of the query 20. Returning again to the previous example, the second list of document identifiers 154 represents each document 152, each document 152 including each of a "dog," cat, "" elephant, "and a" fox. The SE manager 120 returns the second list of document identifiers 154 obtained from the encrypted search index 160 to the user device 10. The user device may decrypt the second list of document identifiers 154 using, for example, the secret master key 14.
Referring now to FIG. 2, in some embodiments, the encrypted search index 160 includes a first portion 162a, the first portion 162a associating each keyword 32k 1 、k 2 、k 3 、…、k n Associated with a corresponding list of document identifiers 154, 154 a-n. Each document identifier 154 in each list represents a document 152 that includes a corresponding keyword 32. In the illustrated example, the keywords 32k 1 Associated with the list of document identifiers 154 a. Each document identifier 154a representation includes a keyword 32k 1 Or associated with, document 152. Each keyword 32 that a user 12 may include in a query 20 includes a corresponding list of document identifiers 154. When the SE manager 120 receives a query 20 from the user device 10 for only a single keyword 32, the SE manager 120 may simply return a corresponding list of document identifiers 154 associated with the single queried keyword 32.
In some examples of the method of the present invention,the encrypted search index 160 also includes a second portion 162b that associates each keyword 32 pair with a corresponding list of document identifiers 154, 154 e-n. That is, each combination of keyword 32 pairs is associated with a corresponding list of document identifiers 154 that each represent a document 152 that includes two of each keyword 32 pair. In the example shown, the keyword k 1 And k 2 Associated with the list of document identifiers 154 e. Here, each document identifier 154e includes k 1 And k 2 . Similarly, the keywords 32 are pairs k 1 And k 3 Associated with the list of document identifiers 154f, and the keyword 32k 1 And k n Associated with a list of document identifiers 154 g.
Referring now to FIG. 3, in some examples, upon receiving the query 20, the SE manager 120 first obtains a list of document identifiers 154 that include the first keyword 32 and the second keyword 32. The SE manager 120 may obtain the list based on the tokens 24 (fig. 1) corresponding to the first keyword 32 and the second keyword 32 of the query. In this example, SE manager 120 has received an include key 32k 1 、k 2 、k 3 、k 4 And k 5 Query 20. That is, the user device 10 has sent a query 20 requesting that the document identifier 154 be returned, the document identifier 154 representing a query including the keyword 32k 1 To k is 5 Of the document 152 for each keyword. As discussed in more detail below, a corresponding list of document identifiers 154 is used to filter the results (in any order) for each of the remaining keywords 32 in the query 20. Here, SE manager 120 retrieves and keys k 1 And k 2 A list of associated document identifiers 154e, however, the SE manager 120 may retrieve any key 32 pairs (e.g., k) included with the query 20 2 And k 5 、k 3 And k 4 、k 1 And k 5 Etc.) of the document identifier 154. In some implementations, the user device 10 specifies which keyword 32 pair to select (e.g., via the token 24), while in other implementations, the SE manager 120 determines which keyword 32 pair to select. In some instances, it is advantageous to useThe user equipment 10 or SE manager 120 selects key word 32 pairs that most likely correspond to a small number of document identifiers 154, as reducing the number of document identifiers 154 in the list may correspondingly reduce the amount of leaked information. For example, the user device 10 selects the two least common keywords 32 included in the query 20, as the least common keywords 32 are likely to correspond to a small number of document identifiers 154. The user device 10 and/or the SE manager 120 may reference a database or other data structure to determine the most common or least common keywords 32 in the query 20.
After obtaining the lists of document identifiers 154 corresponding to the first keywords 32 and the second keywords 32 of the query 20, the SE manager 120 may determine (e.g., based on the remaining tokens 24 in the query 20) for each remaining keyword 32 in the query 20 a corresponding list of document identifiers 154, the corresponding list of document identifiers 154 including the remaining keywords 32 from the list of document identifiers 154, the list of document identifiers 154 including the first keywords 32 and the second keywords 32. In the example shown in FIG. 3, SE manager 120 may determine which document identifiers 154 (i.e., including k) of the list of document identifiers 154e 1 And k 2 A list of document identifiers for both) includes a keyword k 3 To obtain a list of document identifiers 154 ea. Similarly, SE manager 120 also includes key k 4 Determines a list of document identifiers 154eb from the list of document identifiers 154e, and includes the keyword k 5 Determines a list of document identifiers 154ec from the list of document identifiers 154 e. This results in including the key 32k 1 、k 2 And k 3 Including the keyword 32k, of the corresponding document identifier 154ea 1 、k 2 And k 4 And includes the keyword 32k 1 、k 2 And k 5 Of the corresponding document identifier 154 ec.
Referring now to FIG. 4, in some embodiments, SE manager 120 determines which document identifiers 154 are included in each of the corresponding lists of document identifiers 154 to obtain representations of documents 15 that each includes all of the keywords 32 in the query 202, document identifiers 154. Continuing with the example from FIG. 3, FIG. 4 shows SE manager 120 responding to a query for keyword 32k 1 、k 2 、k 3 、k 4 And k 5 To obtain a corresponding list of document identifiers 154ea, 154eb, 154 ec. Based on the corresponding list of these document identifiers 154ea, 154eb, 154ec, the SE manager 120 determines a list of document identifiers 154 ed. For example, SE manager 120 determines which document identifiers 154 are common in (i.e., appear in) the corresponding lists of document identifiers 154ea, 154eb, 154 ec. Each document identifier 154ed indicates that the keyword 32k is included 1 、k 2 、k 3 、k 4 And k 5 The documents 152 for each keyword in (a). In response to the query 20, a second list of document identifiers 154ed is returned to the user device 10.
Referring now to FIG. 5, in some embodiments, a diagram 500 illustrates an encrypted search index 160, the encrypted search index 160 including, for each respective key 32 pair present in an encrypted document 152 stored on an untrusted storage device 150, an encrypted value 510 and an encrypted tag 512, the encrypted value 510 representing a list of key 32 pairs for a document identifier 154, the list of key 32 pairs for a document identifier 154 representing a document 152 that includes two keys 32 in the respective key 32 pair, the encrypted tag 512 representing the encrypted value 510 and one key 32 in the respective key 32 pair. In the illustrated example, the keywords 32 are pairs k 1 And k 2 Having a representation including a keyword 32k 1 And k 2 A corresponding list e of document identifiers 154 for the documents 152 of both. The keywords 32 to k 1 And k 2 Associated with an encrypted value 510a and an encrypted tag 512 a.
The encrypted value 510 may be a representation of a list of document identifiers 154 corresponding to the associated key 32 pair. That is, after decrypting the encrypted value 510, the user device 10 may recover the list of associated document identifiers 154 from the decrypted value. The cryptographic label 512 may represent the associated key 32 pair corresponding to the associated cryptographic value 510. Thus, when SE manager 120 accesses encrypted search index 160 toUpon obtaining the list of document identifiers 154 corresponding to the key 32 pair, the SE manager 120 can access the encrypted value 510 associated with the encrypted tag 512 corresponding to the key 32 pair. In some embodiments, the encrypted value 510 is encrypted via a value key 520, while the encrypted ticket 512 is encrypted using a ticket key 522. Each value key 520 and each tag key 522 are unique, as both the value key 520 and the tag key 522 may depend on one or both keys 32 associated with the corresponding encrypted value 510/encrypted tag 512. In the illustrated example, the keywords 32 are pairs k 1 And k 2 Associated with an encrypted value 510a and an encrypted tag 512 a. When the SE manager 120 accesses the encrypted search index 160 to obtain a first list of document identifiers 154 representing documents 152 that include the first keyword 32 and the second keyword 32, the SE manager 120 may retrieve a list of keyword 32 pairs (e.g., encrypted values 510) of document identifiers 154 corresponding to the first keyword 32 and the second keyword 32 (e.g., encrypted tags 512).
In some implementations, for each respective keyword 32 pair that occurs in the document 152, the encrypted search index 160 further includes a list of double tags 514, each double tag 514 in the list of double tags 514 including the encrypted hash 515 for the corresponding encrypted tag 512 of the respective keyword 32 pair. That is, the dual tag 514 may be a hash of the encryption tag 512 (e.g., using the tag key 522). Here, an encrypted dual tag 514a is generated from the encrypted tag 512a by encrypting the tag 512a using the corresponding tag key 522 a. As discussed below, adding the ditag 514 improves the efficiency of encrypting the search index 160.
In some examples, when the SE manager 120 determines the second list of document identifiers 154 (i.e., the list of document identifiers 154 representing documents 152 that each include each of the keywords 32 of the query 20), for each remaining keyword 32 that appears in the one or more encrypted documents 152 after the first keyword 32 and the second keyword 32, the SE manager 120 determines whether a double-label 514 corresponding to the respective remaining keyword 32 exists within the double-label list 514. The SE manager may remove each double-tag 514 that does not correspond to a respective remaining key 32 from the double-tag list 514. Thus, for each remaining keyword 32 of the query 20, the se manager 120 removes the ditag 514 that does not include at least one keyword 32 in the query 20. After the SE manager 120 evaluates each remaining keyword 32, the unique remaining double-label 514 represents a second list of document identifiers 154. This allows the SE manager 120 to quickly and efficiently filter the first list of document identifiers 154 that each represent a document 152 that includes a first keyword 32 and a second keyword 32.
Referring now to fig. 6A, in some examples, the client-side cryptographic search system 600 generates each cryptographic value 510 by encrypting the cryptographic value 510 using a value key 520 (e.g., a pseudorandom function key) based on the associated key 32 pair and the secret master key 14. The key 32 pairs may be concatenated together. Optionally, secret master key 14 is stored on user device 10 and/or is only accessible by user 12. The pseudorandom function 15 receives the corresponding concatenated key 32 pair and the secret master key 14 and generates a corresponding value key 520, which value key 520 encrypts the corresponding encrypted value 510. That is, each value key 520 is based on two keys 32 in a key pair. As shown in fig. 6B, the client encrypted search system 600 may also generate each encrypted ticket 512 by encrypting each encrypted ticket 512 using a ticket key 522 (i.e., a pseudorandom function key) based on one of the keys 32 of the pair of keys 32 and the secret master key 14. That is, while the encrypted value 510 may be based on the value key 520 (which is generated based on both keys 32 in the key 32 pair), the encrypted tag may be based on the tag key 522 (which is generated based on one key 32 in the key 32 pair). In FIG. 6B, the client-side encrypted search system 600 uses the keyword 32k i And the master key 14 for the key 32k i And k j A tag key 522 is generated. However, the client-side encrypted search system 600 may also be based on the keyword 32k j A tag key 522 is generated.
Referring now to fig. 7A-7D, schematics 700a-D provide a formal description of the construction of the client-side encrypted search system 600 and SE manager 120 to create and respond to a conjunction query 20 that includes two or more keywords 32. The diagram 700a provides a formal description of the encrypted search index 160 (i.e., encrypted multiple mappings or EMMs). At steps 1 and 2, the user device 10 randomly selects a key for the pseudo-random function 15 and the secret master key 14. At step 3, the multiple mapping is initialized, and at step 4, the user device 10 generates a corresponding encrypted value 510 and encrypted label 512 for each key 32 pair. At step 5, the multiple mappings are encrypted and form an encrypted search index 160. At step 6, the set of ditags 514 is initialized, and at step 7, the user device 10 generates each ditag 514 for each keyword 32 pair. At step 8, the user device randomly arranges the dual tag set 514 and sends the encrypted search index 160 to the storage device 150 at step 9.
The diagram 700B of fig. 7B provides a formal description of techniques for generating a search query 20 for a user device 10. At step 1, the user device 10 generates a first token 24 based on the first keyword 32 pair. At step 2, the user device 10 encrypts the first token 24 based on a concatenation of the first keyword 32 and the second keyword 32. At step 3, the user device 10 generates a remaining token 24 for each remaining keyword 32. At step 4, the user device 10 transmits a search query 20 including each generated token 24.
Diagram 700C of FIG. 7C provides a formal description of techniques for SE manager 120 to determine a list of appropriate document identifiers 154 to respond to a search query 20. At step 1, the SE manager 12 retrieves the encrypted value 510 and the encrypted tag 512 associated with the token 24 of the search query 20. At step 2, the SE manager 120 retrieves all encrypted tags 512 associated with the first key 32 and the second key 32. At step 2, the SE manager 120 decrypts the retrieved encrypted ticket 512 using the encryption key (e.g., token 24) sent by the user device 10 within the search query 20. At step 3, the response set is initialized to a null value, and at step 4, for each remaining keyword 32 after the first keyword 32 and the second keyword 32, the SE manager 120 computes a corresponding double label 514, and filters the response set to include only the document identifiers 154, which document identifiers 154 include each keyword 32 in the keywords 32 in the query 20. In step 5, SE manager 120 returns a set of responses for document identifier 154 to user device 10.
FIG. 7D is a diagram 700D providing a formal description of techniques for user equipment 10 to retrieve document identifiers 154 from responses sent by SE manager 120. At step 1, the user device 10 may simply decrypt the encrypted value 510 using the corresponding key 520.
Thus, to minimize leakage while maintaining efficiency, the user device 10 constructs an additional set X of ditags 514 that is stored at the untrusted storage device along with the encrypted search index 160. For each key pair (a, b), for each value v ∈ MM [ a ^ b ]]A double tag 514 is added to X. User device 10 pseudo-randomly generates a pseudo-random function (PRF) key from secret master key 14encrypted tag 512, which is also stored within the encrypted search index 160. The SE manager 120 may then filter the list of document identifiers 154 corresponding to the first keyword 32 and the second keyword 32 by utilizing the set X. For example, SE manager 120 filters the list of document identifiers 154 (i.e., set T) to retain only the inclusion of keywords 32k 3 Value of (i.e., the computation set T # MM [ k ] 3 ]) The client exposes the PRF key 120 usageSE manager 120 successfully computes the q-conjunctions. This technique only leaks 2 conjunctive queries k 1 ∧k 2 The total amount of (a).
Although the examples herein relate to responding to conjunctive queries 20, the techniques herein may also be applied to more complex queries 20, such as Conjunctive Normal Form (CNF) queries 20. Fig. 8A through 8D include schematics 800a-D that provide a formal description of the creation and response of a CNF query 20 that includes three or more keywords 32 to the construction of the client encrypted search system 600 and SE manager 120.
Fig. 8A provides a formal description of a schematic 800a for an encrypted search index 160 (i.e., encrypted multiple mapping or EMM). The settings of the encrypted search index 160 for the CNF query 20 are the same for the encrypted search index of the conjunction query (fig. 7A). The diagram 800B of fig. 8B provides a formal description of the techniques for generating the CNF search query 20 for the user device 10, while the diagram 800C of fig. 8C provides a formal description of searching for the encrypted search index 160 of the CNF query 20. Finally, diagram 800D of fig. 8D provides a formal description of the decryption of the response from SE manager 120 for user device 10.
To explain the formal description of the schematics 800a-D, the example is drawn from the CNF formula φ = D with only two clauses 1 ∧D 2 Starting with the simple case of (1, 2), each clause is represented as d e for all d e {1,2}
the system 100 takes advantage of the fact that: any pair set S as long as i ≠ j i And S j Are all disjoint. Furthermore, all q 1 The union of sets equals MM [ D ] 1 ^D 2 ]. SE manager 120 may compute set S 1 、…、S q1 And returns their union as the answer.
Phi = D for query 1 ^D 2 The client encrypted search system 600 may compute an individual token tok 1 、…、tok q1 . Phi token is simply the calculated token tok 1 、…、tok q1 A concatenation of each token in (a). Each token tok i Containing the decryption keys of all the encrypted tags 512 in each tuple. Thus, SE manager 120 may calculate MM [ k ] 1，i ^k 2，1 ]，...，MM[k 1，i ^k 2，q2 ]The hash set of (2). Using the encrypted tag 512, the SE manager 120 may also calculate all q' s 2 Union of sets, represented as superset S of final response i . In this example, S i Currently equal to the set MM k 1，i ]∩MM[D 2 ]。
However, to ensure that all sections are disjoint, SE manager 120 filters each S i And from S i Removing collectionsconjunctive query 20, for all j ∈ { i + 1., q 1 }, SE manager 120 pairs set MM [ k ] 1，i ∧D 2 ∧k 1，i ]Each set of (a) is iteratively filtered. To achieve this for any j, the user equipment 10 keys the PRFmanager 120.SE manager 12 may use the received PRF key pair S i Each cryptographic label 512 in (a) is hashed and the resulting output can be checked for the presence in X. Each pair of hash tags 512 appearing in X may be from S i Since it must appear in the set MM k 1，i ∧k 1，j ∧D 2 ]In (1). In general, the user device 10 may target all j e { i + 1.,. Q 1 Sending PRF keySE manager 120 to work on all sets MM K 1，i ∧D 2 ∧k 1，j ]The filtration was repeated. Thus, SE manager 120 computes all disjoint sets S 1 、…、S q1 The union of which is exactly MM [ D ] 1 ∧D 2 ]The set of responses of (1). The technique may be extended to CNF queries 20 having any number of clauses.
For example, given a new clause D 3 ＝(k 3，1 ∨...∨k 3，q3 ) SE manager 120 may compute a filter set S 1 ∩MM[D 3 ]、…、S q1 ∩MM[D 3 ]The union of which corresponds to the query 20D 1 ∧D 2 ∧D 3 In response to (2). Since each set S i Is hashed under a PRF key 522 that depends only on one key 32 of the keys 32 of the pair, so only S needs to be removed i Is not present in any set MM k 1，i ∧k 3，1 ]、…、MM[k 1，i ∧k 3，q3 ]All items in (1) are sufficient. To accomplish this, user equipment 10 transmits the PRF key to SE manager 120
FIG. 9 is a flow diagram of an exemplary arrangement of operations of a method 900 of providing encrypted searches on encrypted data to reduce gross leakage. At operation 902, the method 900 includes receiving, at the data processing hardware 118, a search query 20 for a plurality of keywords 32 from a user device 10 associated with the user 12. A plurality of keywords 31 appear in one or more encrypted documents 152 within an encrypted document corpus 152 stored on an untrusted storage device 150. At operation 904, the method 900 includes accessing, by the data processing hardware 118, the encrypted search index 160 to obtain a first list of document identifiers 154. Each document identifier 154 in the first list of document identifiers 154 represents a document 152, the document 152 including a first keyword 32 of the plurality of keywords 32 and a second keyword 32 of the plurality of keywords 32.
At operation 906, the method 900 further includes determining, by the data processing hardware 118, for each remaining keyword 32 that appears in the one or more encrypted documents 152 after the first keyword 32 and the second keyword 32, a corresponding list of document identifiers 154. Each document identifier 154 in the corresponding list of document identifiers 154 represents a document 152 that includes the first keyword 32, the second keyword 32, and the respective remaining keywords 32. At operation 908, the method 900 includes determining, by the data processing hardware 118, a second list of document identifiers 154 based on the first list of document identifiers 154 and the corresponding list of each document identifier 154. Each document identifier 154 in the second list of document identifiers 154 represents a document 152 that includes each keyword 32 in the plurality of keywords 32. At operation 910, the method 900 includes returning, by the data processing hardware 118, the second list of document identifiers 154 obtained from the encrypted search index 160 to the user device 10.
FIG. 10 is a schematic diagram of an example computing device 1000 that may be used to implement the systems and methods described in this document. Computing device 1000 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
The storage 1030 is capable of providing mass storage for the computing device 1000. In some implementations, the storage device 1030 is a computer-readable medium. In various different implementations, the storage device 1030 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional embodiments, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-readable medium or a machine-readable medium, such as the memory 1020, the storage device 1030, or memory on processor 1010.
The high speed controller 1040 manages bandwidth-intensive operations for the computing device 1000, while the low speed controller 1060 manages lower bandwidth-intensive operations. Such allocation of responsibility is merely exemplary. In some embodiments, high-speed controller 1040 is coupled to memory 1020, display 1080 (e.g., through a graphics processor or accelerator), and high-speed expansion ports 1050, which high-speed expansion ports 1050 may accept various expansion cards (not shown). In some implementations, low-speed controller 1060 is coupled to storage device 1030 and low-speed expansion port 1090. The low-speed expansion port 1090, which may include various communication ports (e.g., USB, bluetooth, wireless ethernet), may be coupled through a network adapter to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device (such as a switch or router).
As shown in the figures, computing device 1000 may be implemented in a number of different forms. For example, it may be implemented as a standard server 1000a, or multiple times in a group of such servers 1000a, or as a laptop computer 1000b, or as part of a rack server system 1000 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications, or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors (also known as data processing hardware) executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and in particular by, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Computer-readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices (e.g., EPROM, EEPROM, and flash memory devices); magnetic disks (e.g., internal hard disks or removable disks); a magneto-optical disk; as well as CD ROM discs and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the disclosure may be implemented on a computer having: a display device for displaying information to a user, such as a CRT (cathode ray tube), LCD (liquid crystal display) monitor or touch screen; and optionally a keyboard and a pointing device (e.g., a mouse or a trackball) by which a user can provide input to the computer. Other kinds of devices can also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, the computer can transmit documents to and receive documents from a device used by the user; the user is interacted with, for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Several embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A method (900) comprising:
receiving, at data processing hardware (118), a search query (20) from a user device (10) associated with a user for a plurality of keywords (32), the plurality of keywords (32) appearing in one or more encrypted documents (152) within a corpus (152) of encrypted documents stored on an untrusted storage device (150);
accessing, by the data processing hardware (118), an encrypted search index (160) to obtain a first list of document identifiers (154), each document identifier (154) in the first list of document identifiers (154) representing a document (152) that includes a first keyword (32) of the plurality of keywords (32) and a second keyword (32) of the plurality of keywords (32);
determining, by the data processing hardware (118), for each remaining keyword (32) that occurs in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32), a corresponding list of document identifiers (154), each document identifier (154) in the corresponding list of document identifiers (154) representing a document (152) that includes the first keyword (32), the second keyword (32), and the respective remaining keyword (32);
determining, by the data processing hardware (118), a second list of document identifiers (154) based on the first list of document identifiers (154) and each corresponding list of document identifiers (154), each document identifier (154) in the second list of document identifiers (154) representing a document (152) that includes each keyword in the plurality of keywords (32); and
returning, by the data processing hardware (118), the second list of document identifiers (154) obtained from the encrypted search index (160) to the user device (10).
2. The method (900) of claim 1, wherein, for each respective keyword (32) pair appearing in the one or more encrypted documents (152), the encrypted search index (160) comprises:
an encrypted value (510), the encrypted value (510) representing a list of keyword pairs of document identifiers (154), the document identifiers (154) representing documents (152) comprising two of the keywords (32) in respective pairs of keywords (32); and
an encryption tag (512), the encryption tag (512) representing one of the key (32) of the pair of the encrypted value (510) and the corresponding key (32).
3. The method (900) according to claim 2, wherein each encrypted value (510) is encrypted with a pseudorandom function key (15), the pseudorandom function key (15) being based on the key (32) pair and a secret master key (14).
4. The method (900) of claim 3, wherein the pseudorandom function key (15) is based on a concatenation of the key (32) pairs.
5. The method (900) according to any of claims 2-4, wherein each cryptographic label (512) is encrypted with a pseudo-random function key (15), the pseudo-random function key (15) being based on the one of the keys (32) and a secret master key (14).
6. The method (900) of any of claims 2 to 5, wherein, for each respective key (32) pair appearing in the one or more encrypted documents (152), the encrypted search index (160) further comprises a list of double-labels, each double-label in the list of double-labels comprising a cryptographic hash (515) for the corresponding encrypted label (512) of the respective key (32) pair.
7. The method (900) of claim 6, wherein determining the second list of document identifiers (154) includes: for each remaining keyword (32) that appears in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32):
determining whether a ditag corresponding to a respective remaining keyword (32) is present within the list of ditags; and
removing each ditag from the list of ditags that does not correspond to the respective remaining keyword (32).
8. The method (900) of any of claims 2 to 7, wherein accessing the encrypted search index (160) to obtain the first list of document identifiers (154) comprises: a list of keyword pairs of the document identifiers (154) corresponding to the first keywords (32) and the second keywords (32) is retrieved.
9. The method (900) of any of claims 1-8, wherein the search query (20) includes:
a token (24) representing the first keyword (32) and the second keyword (32); and
for each remaining keyword (32) that appears in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32), tokens (24) representing the first keyword (32) and the respective remaining keyword (32).
10. The method (900) of any of claims 1-9, wherein returning the second list of document identifiers (154) obtained from the encrypted search index (160) to the user device (10) causes the user device (10) to decrypt the second list of document identifiers (154) using a secret master key (14).
11. A system (100) comprising:
data processing hardware (118); and
memory hardware (116) in communication with the data processing hardware (118), the memory hardware (116) storing instructions that, when executed on the data processing hardware (118), cause the data processing hardware (118) to perform operations comprising:
receiving a search query (20) from a user device (10) associated with a user for a plurality of keywords (32), the plurality of keywords (32) appearing in one or more encrypted documents (152) within a corpus (152) of encrypted documents stored on an untrusted storage device (150);
accessing an encrypted search index (160) to obtain a first list of document identifiers (154), each document identifier (154) in the first list of document identifiers (154) representing a document (152) that includes a first keyword (32) of the plurality of keywords (32) and a second keyword (32) of the plurality of keywords (32);
determining, for each remaining keyword (32) that appears in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32), a corresponding list of document identifiers (154), each document identifier (154) in the corresponding list of document identifiers (154) representing a document (152) that includes the first keyword (32), the second keyword (32), and the respective remaining keyword (32);
determining a second list of document identifiers (154) based on the first list of document identifiers (154) and each corresponding list of document identifiers (154), each document identifier (154) in the second list of document identifiers (154) representing a document (152) that includes each keyword in the plurality of keywords (32); and
returning the second list of document identifiers (154) obtained from the encrypted search index (160) to the user device (10).
12. The system (100) of claim 11, wherein the encrypted search index (160) comprises, for each respective pair of keywords (32) that appears in the one or more encrypted documents (152):
an encrypted value (510), the encrypted value (510) representing a list of keyword pairs of document identifiers (154), the document identifiers (154) representing documents (152) comprising two of the keywords (32) in respective pairs of keywords (32); and
an encryption tag (512), the encryption tag (512) representing one of the key (32) of the pair of the encrypted value (510) and the corresponding key (32).
13. The system (100) according to claim 12, wherein each encrypted value (510) is encrypted with a pseudo-random function key (15), the pseudo-random function key (15) being based on the key (32) pair and a secret master key (14).
14. The system (100) according to claim 13, wherein the pseudo-random function key (15) is based on a concatenation of the key (32) pairs.
15. The system (100) according to any one of claims 12 to 14, wherein each cryptographic label (512) is encrypted with a pseudo-random function key (15), the pseudo-random function key (15) being based on the one of the keys (32) and a secret master key (14).
16. The system (100) according to any one of claims 12 to 15, wherein, for each respective key (32) pair appearing in the one or more encrypted documents (152), the encrypted search index (160) further comprises a list of double-labels, each double-label in the list of double-labels comprising a cryptographic hash (515) for a corresponding encrypted label (512) of the respective key (32) pair.
17. The system (100) of claim 16, wherein determining the second list of document identifiers (154) comprises: for each remaining keyword (32) that appears in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32):
determining whether a ditag corresponding to a respective remaining keyword (32) is present within the ditag list; and
removing each ditag from the list of ditags that does not correspond to the respective remaining keyword (32).
18. The system (100) according to any one of claims 12 to 17, wherein accessing the encrypted search index (160) to obtain the first list of document identifiers (154) comprises: a list of keyword pairs of the document identifiers (154) corresponding to the first keywords (32) and the second keywords (32) is retrieved.
19. The system (100) according to any one of claims 11-18, wherein the search query (20) includes:
a token (24) representing the first key (32) and the second key (32); and
for each remaining keyword (32) that appears in the one or more encrypted documents (152) after the first keyword (32) and the second keyword (32), tokens (24) representing the first keyword (32) and the respective remaining keyword (32).
20. The system (100) according to any one of claims 11 to 19, wherein returning the second list of document identifiers (154) obtained from the encrypted search index (160) to the user device (10) causes the user device (10) to decrypt the second list of document identifiers (154) using a secret master key (14).
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US16/867,342 US11250151B2 (en) | 2020-05-05 | 2020-05-05 | Encrypted search over encrypted data with reduced volume leakage |
US16/867,342 | 2020-05-05 | ||
PCT/US2020/065174 WO2021225630A1 (en) | 2020-05-05 | 2020-12-16 | Encrypted search over encrypted data with reduced volume leakage |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115485678A true CN115485678A (en) | 2022-12-16 |
Family
ID=74175964
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080100482.1A Pending CN115485678A (en) | 2020-05-05 | 2020-12-16 | Encrypted searches on encrypted data with reduced total leakage |
Country Status (6)
Country | Link |
---|---|
US (1) | US11250151B2 (en) |
EP (1) | EP4118537A1 (en) |
JP (1) | JP7271800B2 (en) |
KR (1) | KR20230003238A (en) |
CN (1) | CN115485678A (en) |
WO (1) | WO2021225630A1 (en) |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN114090638B (en) * | 2022-01-20 | 2022-04-22 | 支付宝(杭州)信息技术有限公司 | Combined data query method and device based on privacy protection |
CN117240620B (en) * | 2023-11-13 | 2024-02-06 | 杭州金智塔科技有限公司 | Privacy set union system and method |
Family Cites Families (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8510846B1 (en) * | 2006-06-29 | 2013-08-13 | Google Inc. | Data encryption and isolation |
KR101190061B1 (en) | 2008-12-01 | 2012-10-11 | 한국전자통신연구원 | Method for data encryption and method for data search using conjunctive keyword |
US9111106B2 (en) * | 2011-01-13 | 2015-08-18 | Mitsubishi Electric Corporation | Data processing apparatus and data storage apparatus |
US9298808B2 (en) * | 2013-05-24 | 2016-03-29 | Symantec Corporation | Encrypted search acceleration |
US9342705B1 (en) * | 2014-01-13 | 2016-05-17 | Symantec Corporation | Systems and methods for searching shared encrypted files on third-party storage systems |
US9501661B2 (en) * | 2014-06-10 | 2016-11-22 | Salesforce.Com, Inc. | Systems and methods for implementing an encrypted search index |
US9894042B2 (en) * | 2015-07-24 | 2018-02-13 | Skyhigh Networks, Inc. | Searchable encryption enabling encrypted search based on document type |
US9633219B2 (en) * | 2015-08-26 | 2017-04-25 | International Business Machines Corporation | Providing secure indexes for searching encrypted data |
US10402109B2 (en) * | 2015-09-08 | 2019-09-03 | OverNest, Inc. | Systems and methods for storing data blocks using a set of generated logical memory identifiers |
US9977918B2 (en) * | 2015-09-30 | 2018-05-22 | Robert Bosch Gmbh | Method and system for verifiable searchable symmetric encryption |
US9971904B2 (en) * | 2015-09-30 | 2018-05-15 | Robert Bosch Gmbh | Method and system for range search on encrypted data |
US11341128B2 (en) * | 2015-11-12 | 2022-05-24 | Sap Se | Poly-logarithmic range queries on encrypted data |
US10127391B1 (en) * | 2015-12-28 | 2018-11-13 | EMC IP Holding Company LLC | Encrypted search indexes |
US9715546B1 (en) * | 2016-02-18 | 2017-07-25 | Yahoo! Inc. | Method and system for searching encrypted data |
DE112017006021T5 (en) * | 2016-12-30 | 2019-08-22 | Robert Bosch Gmbh | Method and system for fuzzy keyword search in encrypted data |
GB2571049B (en) * | 2016-12-30 | 2022-05-11 | Bosch Gmbh Robert | Method and system for search pattern oblivious dynamic symmetric searchable encryption |
US11216433B2 (en) * | 2019-12-12 | 2022-01-04 | Google Llc | Encrypted search with no zero-day leakage |
US11902425B2 (en) * | 2019-12-12 | 2024-02-13 | Google Llc | Encrypted search with a public key |
US11308224B2 (en) * | 2019-12-13 | 2022-04-19 | Google Llc | Encrypted search system design for email client-side encryption |
-
2020
- 2020-05-05 US US16/867,342 patent/US11250151B2/en active Active
- 2020-12-16 EP EP20839199.5A patent/EP4118537A1/en active Pending
- 2020-12-16 WO PCT/US2020/065174 patent/WO2021225630A1/en unknown
- 2020-12-16 KR KR1020227042292A patent/KR20230003238A/en unknown
- 2020-12-16 CN CN202080100482.1A patent/CN115485678A/en active Pending
- 2020-12-16 JP JP2022567370A patent/JP7271800B2/en active Active
Also Published As
Publication number | Publication date |
---|---|
WO2021225630A1 (en) | 2021-11-11 |
JP7271800B2 (en) | 2023-05-11 |
JP2023518111A (en) | 2023-04-27 |
US20210350014A1 (en) | 2021-11-11 |
KR20230003238A (en) | 2023-01-05 |
US11250151B2 (en) | 2022-02-15 |
EP4118537A1 (en) | 2023-01-18 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10985902B2 (en) | Dynamic symmetric searchable encryption | |
US10013574B2 (en) | Method and apparatus for secure storage and retrieval of encrypted files in public cloud-computing platforms | |
US9172532B1 (en) | Multi-tiered encryption system for efficiently regulating use of encryption keys | |
US8549653B2 (en) | Secure wildcard searchable database | |
US11902425B2 (en) | Encrypted search with a public key | |
Liu et al. | Towards differential query services in cost-efficient clouds | |
US11849026B2 (en) | Database integration with an external key management system | |
US10284535B2 (en) | Secure database | |
CN115485678A (en) | Encrypted searches on encrypted data with reduced total leakage | |
US20230274007A1 (en) | Response-Hiding Searchable Encryption | |
Sangeetha et al. | Multi keyword searchable attribute based encryption for efficient retrieval of health Records in Cloud | |
US11909861B2 (en) | Privately querying a database with private set membership using succinct filters | |
US11216433B2 (en) | Encrypted search with no zero-day leakage | |
JP2006189925A (en) | Private information management system, private information management program, and private information protection method | |
Jang et al. | A Comparison of the Query Execution Algorithms in Secure Database System. | |
Gorlatykh et al. | Challenges of privacy-preserving OLAP techniques | |
Siegenthaler et al. | Sharing private information across distributed databases | |
Kim et al. | A performance test of query operation on encrypted database | |
Hue et al. | An experimental evaluation for a new column–level access control mechanism for electronic health record systems | |
Premnath et al. | Energy Efficient Search Scheme Over Encrypted Data On Mobile Users On Cloud | |
Jang et al. | An effective queries execution algorithm on the encrypted database | |
Vincent et al. | Security and Privacy Ensured Data Search Model for Encrypted Storage in Cloud Environment. | |
Kim et al. | A Study on the Secure Database Controlled Under Cloud Environment | |
Varghese | DYNAMIC QUERY FORM BUCKETIZATION:-ORDERED/UNORDERED | |
Tejaswini et al. | Survey on Retrieval of Encrypted Data in Cloud Computing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |