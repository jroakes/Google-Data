US20130173223A1 - Automated And Intelligent Structure Design Generation And Exploration - Google Patents
Automated And Intelligent Structure Design Generation And Exploration Download PDFInfo
- Publication number
- US20130173223A1 US20130173223A1 US13/342,162 US201213342162A US2013173223A1 US 20130173223 A1 US20130173223 A1 US 20130173223A1 US 201213342162 A US201213342162 A US 201213342162A US 2013173223 A1 US2013173223 A1 US 2013173223A1
- Authority
- US
- United States
- Prior art keywords
- design state
- design
- engine
- state
- structure design
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/10—Geometric CAD
- G06F30/13—Architectural design, e.g. computer-aided architectural design [CAAD] related to design of buildings, bridges, landscapes, production plants or roads
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
Definitions
- the present disclosure is related to structure design and exploration, revision, optimization, and similar actions with regard to such designs, and more specifically to systems and methods for understanding structure design (e.g., program details) and its context (e.g., location details), extracting from actions and environments user intentions and preferences, predicting future actions and preferences, comparing structure designs, and otherwise assisting in the structure design process.
- structure design e.g., program details
- context e.g., location details
- a developer interested in having a commercial structure built may retain an architect, who takes the developer's requirements and preferences, details about the site, building codes and the like, and first generates a conceptual design, then a more detailed schematic design. At this stage, the architect's role is to synthesize, problem solve, and design.
- the resulting forms, as drawn and/or modeled, are typically a blending of art and engineering. Reviews and reworking for multiple different audiences typically occur next in what is often referred to as design development.
- an architectural engineer or similar professional may review the design and plans for the proposed structure's integrity and safety, the developer may have input for modifications to the design to meet a desired design goal, the builder may introduce limitations based on cost, time-to-completion, feasibility, and so on.
- Portions of the design may also be sent to sources for cost estimates and to determine availability of elements of the structure, estimates for labor cost and time-to-delivery of components, etc. Estimates, as well as potential design modifications, from these many other sources may then also be factored into the structure design, cost, calculated time-to-completion, and so on. Bidding and negotiation may take place, such as with a builder or construction manager, parts and services providers, etc. Further design development then typically takes place to bring the design in-line with budgets, evolving design requirements, etc.
- a computer-implemented system for designing a structure and coordinating its implementation includes a design workspace, a design engine which receives various inputs and produces a structure design for display in the design workspace, a set of design requirement rules for producing the structure design, and a cell source providing a definition of a cell that forms a unit of the structure design.
- the cell definition may be instantiated as a plurality of cells that are assembled together with other cells to form the structure design.
- An attributes engine quantifies measures of various attributes of a structure based on the structure design during the process of designing the structure, and displays the quantified measures in a dashboard user interface.
- An optimization engine analyzes the structure design, and proposes alternative designs in an effort to improve the design from the perspective of one or more attributes, including the attributes quantified by the attributes engine.
- patent application Ser. No. 13/112,727 can provide optimization options, and evaluate those options for different criteria, there remains a need for techniques for learning from past optimizations in order to provide more rapid convergence on an optimized design, avoid local maxima and other hurdles to optimization, avoid undesired optimizations, and so on. Still further, there is an unfilled need for convenient, consistent, and accurate methods for comparing multiple designs in order to extract similarities and other data therefrom, extract optimal design choices, and make that data available for meaningful use.
- the present disclosure provides computer-implemented systems and methods which address the above needs. More specifically, computational systems and methods are disclosed that learn about and assist with appropriate structure-based design choices. The systems and methods assist groups of users with coordinating their efforts in producing a cohesive design. Systems and methods are disclosed for learning from past optimizations in order to provide more rapid convergence on an optimized design, avoid local maxima and other hurdles to optimization, avoid undesired optimizations, and so on. Convenient, consistent, and accurate methods for comparing multiple designs are also provided for extracting similarities and other data therefrom, and making that data available for meaningful uses.
- the disclosed systems and methods employ machine learning techniques in an effort to explore a variety of different structure designs.
- Different design states are proposed that are likely to lead to a realizable structure (“valid design state”), and conversely rules are established that discourage (or preclude) pursuing “invalid” states (e.g., those that may lead to unrealizable structures).
- systems and methods are disclosed that seek to more quickly arrive at convergence of design on an optimal design state given weighted preferences, site specifics, and other boundary conditions.
- Targeted computer-implemented change-and-test methods are used to generate and evaluate modified structure designs, and a fitness function may be used to quantify designs, both machine- and human-generated. A user may select between a system-generated design or the user's own design (or some other design) for further exploration and optimization.
- improved design choice assistance is provided.
- a user is provided with a view of the cost of certain design choices.
- the user is also provided with a view of design states that are optimized for one or more selected (and weighted) aspects, from which a user may choose.
- the system and methods disclosed herein “learn” from user interaction, past design choices, additional designs, etc., improving the quality of suggested design states.
- the user is also prevented from making (or encouraged not to make) design choices that may lead to an invalid design.
- certain design choice data is retained, such as from one design to another, to further assist with providing relevant and optimal design assistance. Interactions between users, and between users and the system are evaluated for further design choice data.
- coordination of a plurality of users is facilitated by applying a uniform set of design constraints, such as when cooperatively working on a design.
- the constraints direct design choices such that the cooperating users' design choices converge on a coherent design.
- design state suggestion and evaluation constraints include rules to avoid or overcome optimization limitations, improving convergence on optimized designs. Either change operations, which take an initial design state and transform it into a new design state, or fitness functions, which evaluate design states based on weighted attributes may, or both, may include such constraints.
- FIG. 1 is a high-level representation of a distributed network environment, comprising hardware and software, within which various embodiments of a system for structure design, analysis, and implementation according to the present disclosure may be employed.
- FIG. 2 is a schematic diagram of a portion of a first embodiment of a computer-implemented system for structure design, analysis, and implementation including a learning engine according to the present disclosure.
- FIG. 3 is an illustration of one embodiment of an external data database configured to receive data from a number of sources external to the system for structure design and analysis according to the present disclosure.
- FIG. 4 is an illustration of one exemplary structure design environment including a number of the relevant participants in the design evolution, analysis, and implementation process.
- FIG. 5 is a flow diagram illustrating a number of aspects of a change-and-learn process in the context of a structure design process according to an embodiment of the present disclosure.
- FIGS. 6A through 6C illustrate an initial structure state, a new structure state obtained from application of a compound change operation to the initial state, and a flow representation of that exemplary compound change operation, respectively, according to an embodiment of the present disclosure.
- FIG. 7 is an illustration of multiple change operations applied to multiple initial structure design states to produce multiple new structure design states that may be evaluated in parallel, according to an embodiment of the present disclosure.
- FIG. 8 is an illustration of a training mode for a computer-implemented system for developing a structure design, according to an embodiment of the present disclosure.
- FIG. 9 is another illustration of a training mode for a computer-implemented system for developing a structure design, according to an embodiment of the present disclosure.
- FIG. 10 is still another illustration of a training mode for a computer-implemented system for developing a structure design, in this case for training from group responses to a design survey, according to an embodiment of the present disclosure.
- FIG. 11 is an illustration of a user interface permitting a user to view a user-generated structure design and a machine-generated structure design, as associated attribute quantifications, including a mechanism permitting a user to instruct the system to optimize the user-generated structure design, according to an embodiment of the present disclosure.
- distributed network environment 10 comprising hardware and software, within which various embodiments of the present disclosure may be employed. More specifically, distributed network environment 10 comprises multiple interconnected elements of hardware, each running software, allowing those elements of hardware to communicate with one another, whether by wired or wireless connection. Such elements of hardware include, but are not limited to, a first client workstation 12 , a second client workstation 14 , a mail server computer 16 , a file server computer 18 , and network appliances 20 such as remote storage, each communicating via the public Internet 22 .
- the client workstations and servers generally may be referred to as computer devices.
- Other computer devices such as mobile computationally-enabled telephone handsets (so called “smart phones”) 24 , tablet-style computer devices 26 , and so on may also form a part of network environment 10 .
- LANs local area networks
- WANs wide area networks
- client workstations or additional computer mechanisms include personal computers, servers that are personal computers, minicomputers, personal digital assistants (PDAs), mainframes, etc.
- PDAs personal digital assistants
- the network within which the various embodiments of the present disclosure operates may also comprise additional or fewer devices without affecting the scope of the present disclosure.
- First and second client workstations 12 , 14 may communicate via the public Internet 22 using known Web browser software or dedicated, specific-purpose application software.
- software components supporting client workstations 12 , 14 , servers 16 , 18 , network appliances 20 , and smart phones 24 , tablet computers 26 , and so on include or reference logic and/or data that may form a part of the software component or be embodied in or retrievable from some other hardware of software device or signal, either local or remote and coupled via a network or other data communications device.
- embodiments of the invention may be implemented as methods, apparatus, or articles of manufacture as or in software, firmware, hardware, or any combination thereof.
- article of manufacture or alternatively, computer program product
- a “structure” may be, but is not limited to, habitable buildings, functional structures, artistic structures, and so on, and the nature of the structure does not form a limitation on the scope of the present disclosure.
- “designing” is intended to mean all aspects of preparing plans for implementing a structure, including but not limited to developing a set of documents that describe a structure and aspects of its construction, as well as estimates relating to the design and construction of the structure. Designing a structure may optionally include the materials for and processes of obtaining prerequisite certifications and approvals for constructing the designed structure. In many cases, designing a structure is a collaborative endeavor between individuals and organizations.
- implementation is intended to mean verifying aspects of a design, arranging accessibility to required parts, services, and personnel, maintaining a project timeline, maintaining a project budget, managing changes during the build phase, financing and insurance, and constructing the structure.
- implementation may also include coordinating and obtaining approvals, permits, and the like.
- “manipulation” of (or to “manipulate”) a design includes but is not limited to adding elements to a design, subtracting elements from a design, reconfiguring portions of a design, moving portions of a design, partially or fully relocating a design on a site, requesting and viewing attributes about a design, implementing automated optimization of a design, checking aspects of a design for structural soundness or against codes or regulations for such a design, comparing alternative designs, developing cost estimates, construction time, and other attributes of a structure built according to a design, and so on.
- interface is intended to include data structures, virtual and physical connections between devices, computer-human user interface, and other mechanisms that facilitate the exchange of data between computer systems and/or control of one or more such systems.
- an interface requires a minimum or no user data entry or manual delivery of data from one system to another.
- data that needs to be entered manually may be retained and reused within the system, reducing future data entry requirements.
- a user interacts with a computer system and controls provided thereby to design a structure.
- the system may communicate with other systems to obtain data, verify data, deliver data, store or retrieve data, etc.
- Those other systems may be interfaces to other computer-user interactions or be autonomous or some combination of the two.
- the systems and methods thereby facilitate collaboration between multiple individuals and/or organizations in the design, analysis, and implementation of a structure.
- a method of designing a structure employing a system of the type disclosed herein begins with a user specifying a “program” and “location”, which may be translated into requirements of the design.
- a program specification typically includes general aspects of the structure and its intended uses.
- a location specification typically includes certain starting conditions, such as a description of the site on which the structure is to be built, codes and zoning requirements, and so forth. From the program and location data, the system may provide a proposed initial design, and iterate toward meeting the design requirements. Alternatively, the user may select “cells” and/or other elements from a standard or custom palette and manipulate those elements in a design workspace to populate a structure design.
- a cell is a fundamental element employed by the system and user to design a structure.
- Cells are abstractions of portions of a structure (although in certain cases a structure may in fact be comprised of a single cell) upon which other systems in the design depend.
- Cells are instantiated as part of the design process. Cells include rules governing aspects of the instantiations, such as how an instance of one cell connects to another instance, size ranges of instances, systems or components included in or required by an instance, and so on.
- System 50 comprises a design engine 52 that manages aspects of the structure design process.
- Design engine 52 may be realized in software, firmware, hardware, etc.
- Design engine 52 receives various inputs including data from cell and structure data database 54 , program and location data from design requirements database 56 , and optionally additional data from external data database 58 and elements database 64 interconnected thereto. While these data inputs are shown and discussed in terms of databases, it will be appreciated that other forms of data input, such as streaming data, real-time measurement data, calculated data, etc. may also be employed.
- Design engine 52 provides an output in the form of data representing a structure that is rendered in a design workspace user interface (UI) 60 .
- Design engine 52 may include rendering capabilities, or may rely on additional tools, such as Google SketchUp to perform rendering tasks.
- Design workspace UI 60 provides a user with a visual representation of the structure being designed, as well as a design-editing interface 62 at which a user may edit the design.
- Design requirements database 56 may also provide design engine 52 with rules driven by certain external data provided by external data database 58 .
- FIG. 3 illustrates a number of representative sources of this external data.
- data from a topographic study may be utilized by design requirements database 56 to provide rules for design engine 52 .
- geologic data 92 , climate data 94 , design and building code data 96 , and generally accepted design and building practice data 98 may suggest or require design rules be implemented by design engine 52 .
- Other external data include zoning data, historical real estate data, neighborhood information (key services, pedestrian and vehicular traffic flow), physical form of neighboring buildings, etc., not shown) may also be provided to external data database 58 for use by design engine 52 .
- design engine 52 improves in an effort to meet the various requirements of the interested parties.
- design evolution is by way of the interaction of various parties and organizations through direct manipulation of elements of the design provided by way of an interface such as user design editing interface 62 and inputs from various secondary data sources and analysis systems.
- FIG. 4 is an illustration of one exemplary structure design environment 300 including a number of the relevant participants in the design evolution, analysis, and implementation process, operating around system 50 .
- Traditional design participants 302 include one or more architects 304 , architectural engineers 306 , developers 308 , construction managers 310 , and so on.
- Other parties that may be directly or indirectly involved in the design process include property broker 312 , project underwriter 314 , property tenant 316 , and so on. Any two or more of such parties, and two or more individuals within organizations serving these roles, may wish to collaborate on a structure design.
- an architectural firm may wish that a senior architect work with a junior architect to develop a design for a client.
- An architect may wish to deliver a design to an architectural engineer so that structural details can be resolved.
- a developer may wish to involve a tenant in design details, and so on.
- system 50 is therefore provided with a learning engine 66 , explained in further detail below, which process interactions such as between users via the system, between a user and the system, and between one system and another similar system, and/or analyzes structure designs with an aim to “learn” from those interactions, abstract that learning, and synthesize rules and processes to assist with the design process.
- a learning engine 66 explained in further detail below, which process interactions such as between users via the system, between a user and the system, and between one system and another similar system, and/or analyzes structure designs with an aim to “learn” from those interactions, abstract that learning, and synthesize rules and processes to assist with the design process.
- Learning engine 66 may support one or more of a number of different types of learning strategies and goals.
- Learning strategies include (but are not limited to) unsupervised or supervised learning, reinforcement learning (learning from responses to state changes), pattern recognition, and so forth.
- the learning that the system does i.e., some attempt to take the system from a current state to an improved state as measured by the fitness function) could be accomplished either by a search process or a derivation process.
- a search process for example stochastic beam search
- the search employs a form of “gradient ascent” to ensure that steps to nearby states head in the direction (in fitness space) tending towards an improved design.
- search processes may have mechanisms to overcome local maxima.
- a constructive process for learning utilizes rules (that can improve over time) applied in a systematic way to derive an improvement in structure design, with search through many intermediate structure designs in the process.
- Goals include (but are not limited to) improved design choice assistance, retention of relevant design choice data (such as from one design to another), coordination of a plurality of users, improved convergence on optimized designs (and avoiding or overcoming optimization limitations), comparing designs to extract similarities and optimal design choices, and so on.
- the goal is to provide an improvement in the response of design engine 52 so that it may provide a more desired design or design choices as an output.
- “desired” is measured by calculation of a fitness function.
- w n are each weighting values corresponding to each attribute quantification, respectively.
- an embodiment 200 of the present disclosure is illustrated.
- an initial structure design or state S x ( 202 ) is stored, such as in memory associated with the design engine ( 52 ).
- Design state S x may be a user-entered design, a manually or automatically selected seed design, a machine-generated design, or may be established by some other mechanism.
- initial design state S x is changed in some way, by application of one or more modifications, to a new design state S x ′ ( 206 ).
- a layer of abstraction referred to as a cell, is provided as an element of the structure design.
- the system includes processes, based on the cell abstraction, that manage details required to connect or disconnect a cell from a structure design (i.e., other cells). HVAC routing and interconnection, structural integrity, egress requirements, etc. are examples of details managed by the system in response to the addition or removal of a cell.
- the cell abstraction, and the system's rules for structure design using cells is such that the addition or removal of cells, and hence basic design modification always result in an acceptable (e.g., buildable) state.
- the cell approach dramatically improves the chances of obtaining an acceptable structure from a system's own (i.e., autonomous) structure design modifications when compared to results of autonomously added and removed beams, columns, floors, and walls when done one element at a time.
- the one or more modifications may be either user-entered or machine-generated.
- an operator referred to as a change operation is applied to transform an initial design state S to a new design state S′.
- change operation A ( 204 ) is applied to S x ( 202 ) to arrive at new design state S x ′ ( 206 ).
- Change operation(s) may be selected by the system from a specified population of such change operation(s) retained in an appropriate storage mechanism (not shown).
- the population of change operations is fixed, and a user is provided with the ability to select from among the fixed population.
- an interface may be provided to permit a user to order operations to be explored, such as by applying a weighting to certain types of operations. In such a case, the user may guide the system in preferentially exploring certain design states, even to the extent of the system mimicking the actual preferences of the user (such that the system develops structure designs more similar to what the user might actually have produced themselves).
- an interface is provide permitting the user to edit the population of change operations, including creating new operations, deleting, and modifying existing operations, creating composite change operations from multiple change operations, etc.
- Change operations act on one or more cells of a structure design.
- the fundamental unit from which structures are built is referred to as a cell.
- a cell may be thought of as a building block for a structure.
- Change operations may therefore represent manipulations of portions of a design on a cell-by-cell basis.
- a partial list of primitive change operations includes: “add” a cell, “delete” a cell, and “rotate” a cell.
- Many compound change operations can be obtained from combinations of these primitives. For example, a change operation to “move” a cell may be obtained from “delete” a cell then “add” that same cell at a different location.
- a “curve” change operation may “delete” a cubic cell and in its place “add” a cell having one or more curved sides (e.g., to replace a sharp corner with a rounded one). Partial- or whole-structure change operations are also contemplated, such as “flatten” a structure, in which cells from higher elevation points of a structure are moved to lower elevation points of the structure. A “heighten” a structure change operation may result in cells being added to the top of a structure design, in some cases with a commensurate removal of cells from elsewhere in the structure.
- a “copy floor” change operation is a series of “add” cell change operations, where the cells of the reference (copied) floor are used to select cells for the target (added) floor. Many of the change operations also have inverse operations, such as “delete floor”, which as the name suggests, removes all cells on a designated floor of the structure design.
- FIG. 6A shows an initial design state S comprised of 27 cells (arranged in a cubic form).
- a compound change operation (which we will call a “stack two” change operation) produces a new design state S′, shown in FIG. 6B .
- New design state S′ is obtained by a “delete” of 6 cells from the front, top layer of structure S, then an “add” of two cells (the stack two) to the top of back row, top layer.
- the “stack two” change operation is comprised of six “delete” operations, and two “add” operations. This is represented in notation form in FIG. 6C .
- S x ′ is a “valid” design ( 208 ).
- certain designs restrictions are imposed so that the design can reasonably be implemented (e.g., the structure is buildable, reasonable estimates can be provided, materials can actually be obtained, and so on).
- a number of cell-based rules may be applied to test S′ for validity, such as that no cell is to be unsupported at its base (i.e., no overhangs), no structure may have two unconnected cells as its top layer, each cell of a structure must be contiguous with at least one other cell of the structure, and so on.
- the list of possible cell-based rules is arbitrary, may be quite large, and may depend upon the specific project for which a design is being developed.
- a user may manually override system decisions with respect to validity, thereby obtaining a structure design that might otherwise be invalid but which permits the user to explore aspects of the design regardless.
- a new structure S x ′ is deemed to violate one or more rules it may be abandoned (or at least retained only for the purpose of avoiding that state in the future), and a new change operation B ( 212 ) is applied to design S x , producing a different new design state S x+1 ′. If, however, S x ′ is deemed valid, then a fitness function F x ( 210 ) is computed for that structure design state.
- the fitness function may, for example, determine how closely the square footage of the structure design matches the target square footage set by the user, may determine whether the estimated build cost exceeds the set build cost target, may determine whether the calculated return-on-investment (ROI) meets or exceed the target ROI, may determine if the design state exhibits the desired level of symmetry, weighted as appropriate, and so on.
- FIG. 5 is a snapshot at a point after initiation of the change-and-test process, and before the final state is determined. Entering and ending the process of FIG. 5 will be well understood by one of skill in the art from the description hereof.
- the process of modifying an initial design state S x may be repeated for a variety of different change operations, and the fitness function for each valid new design compared in order to arrive at a relative “optimum” design, from a fitness function perspective. That is, a large number of design variations may be explored and the design state presenting the greatest fitness function selected as “optimum”. This may take place in a serial fashion, in which the fitness function value F x for design state S x is compared with the fitness function value F x+1 for design state S x+1 ( 220 ), retaining only (or keeping track of) the design with highest value ( 222 , 224 ), and at some point in the process the collection of fitness function values compared to rank them.
- the current highest fitness function value is compared with a current state's fitness function value, and the state with the higher fitness function value retained.
- This process of starting from some point in the space of possible models, trying out a range of slightly modified models, examining each new model variation for its fitness, picking the most fit model (possibly the original model), and repeating this process many times is called, in machine learning, “hill climbing.” (It is also referred to as gradient ascent, such as used above).
- a new initial state may then be selected ( 226 ), such as the last new design state, for application of change operations and further exploration of alternative designs.
- each new design with an improved fitness function value may form a starting point for the change-and-test process described above.
- a design may be arrived at that has a highest fitness function value. That design may be presented to a user for consideration as a possible solution to the design issues for a structure. This process may be adequate and sufficient to obtain an optimized design for many structure programs. However, for other structure programs several issues may arise.
- the “cost” compute time, memory requirements, etc.
- the process may lead to local optimization, and may require additional techniques to push continued change-and-test toward an optimal design (e.g., a global maximum).
- the user may wish to make one or more changes to the structure design from which the change-and-test process is required to proceed. Fourth, two users working in parallel on a design may unknowingly constrain the system to pursue different or divergent designs.
- learning engine 66 tracks change operations ( 228 ) leading to design states (as determined at 208 ). This information is then used when selecting change operations ( 230 ) that are applied to an initial design state ( 204 ). Preference is given to change operations that have produced valid design states over those that have produced invalid design states. Weighting (or conversely negative weighting) is one method for applying such a preference (negative preference). In this way, change operations are selected that have a higher likelihood of resulting in a valid design state.
- learning engine 66 tracks change operations associated with comparison of fitness function values (as determined at 220 ). This information is further used when selecting change operations ( 230 ) that are applied to an initial design state ( 204 ). Preference is given to change operations that have produced a higher fitness function value over those that have produced a lower fitness function value. Weighting is one method for applying such a preference. In this way, change operations are selected that have a higher rate of convergence on an optimized design state. Given a weighted set of change operations, a best-first search may be used to add a level of selectivity to which state changes to pursue—only those states that are predicted to have a high likelihood of producing improved fitness function values are retained and further explored. Beam search is an example of such a best-first analysis.
- a reduction in the number of iterations required to obtain an optimized design by the process described above may be obtained by structuring the change operations themselves such that the current initial design state S is not changed if the change to new design state S′ would be invalid, i.e., obviating the separate validity check step.
- the following is provided as an example of pseudocode for such a conditional change:
- Eliminating pursuit of invalid states and increasing the rate of convergence on optimized designs relates to the “cost” of generating a complete structure design.
- the process of compiling a structure can be computationally costly. For example, all cell-to-cell interconnections (mechanical, electrical, plumbing—MEP) must be worked out and verified, total cost and build times must be calculated, secondary systems run (e.g., structural engineering analysis packages), and so on. It is therefore desired to minimize recompiling. It is possible to alter a “compiled” structure design, but doing so will require recompilation.
- Invalid design states are those that cannot be built, that undermine fundamental assumptions of the design process, that are directly in conflict with required design attributes, and so on. Essentially, there is a very high certainty that such designs will be rejected.
- the system disclosed herein can guide a user toward promising designs, reduce time and effort spent on what ultimately would be invalid designs, and reduce the number of structure compilations and associated cost.
- the user may explore design choices without concern that the result will be invalid—what the system lets the user try will at least be buildable (if not the design the user ultimately desires).
- a method of selecting design states for change operations is illustrated. Such methods may also impact the cost of convergence on an optimized design state.
- a number n of selected initial states S 1 , S 2 , . . . S n , (from a population of N initial states, where n ⁇ N, for example from prior change-and-test iterations) are each subjected to a different change operation to produce a unique new design state S′ 1 , S′ 2 , . . . S′ n , respectively.
- a fitness function value F 1 , F 2 , . . . F n is determined for each new design state S′ 1 , S′ 2 , . . . S′ n , respectively.
- the new design state may replace the corresponding initial design state (referred to as replacement).
- Methods such as tournament selection (with replacement) may be employed to select sets of n initial states S 1 , S 2 , . . . S n , for each round such that a relatively more efficient and lower cost process for evaluating a potentially large data set is provided as compared to sequentially evaluating each possible new design state.
- attributes e.g., square footage, build cost, time to completion, etc.
- attributes may be explicitly selected (and weighted) by a user.
- attributes may be virtually any user-specifiable aspect directly related to a structure design, the design process, and the structure building process (subcontractor availability, code compliance, cost of operation, environmental footprint, etc.)
- Attributes may also be indirectly related to the structure design, such as proximity of the structure being designed to similar-sized structures, return-on-investment (ROI) of similar-sized structures in proximity to the structure being designed, cost of insurance per square foot in the neighborhood of the proposed structure site, and so forth.
- ROI return-on-investment
- the user may be provided with an interface for selecting attributes, and specifying the relative importance (weight) to be given to each selected attribute as compared to other attributes (e.g., square footage is twice as important as maximal light plane).
- implicit attributes may also be considered.
- a fitness function may comprise both explicit and implicit attributes (meaning they are part of the fitness function but possibly may not be specified by a user). For example, it may be assumed that a user would be interested in the symmetry of a design, even if that attribute is not explicitly selected. Therefore, unless removed by the user from the attributes list, the symmetry of a design state may be quantified, and that value considered as part of the fitness function. Symmetry is one example of a large possible list of implicit attributes considered when evaluating structure fitness. Therefore, the above should not be interpreted as limiting the present disclosure to any set or type of such attributes.
- a system is initially (or otherwise from time to time) trained, in the sense of supervised machine learning. For example, with reference to FIG. 8 , a user access a first structure design state S ( 250 ), applies one or more change operations ( 252 ), and obtains a new design state S′ ( 254 ). The system may derive from this that there is a probability that when the user wishes to change a design state from S to S′ in the future, the user will prefer to do so by way of either the specific change operation or similar change operations used in the training example ( 252 ). If this pattern is observed in different contexts, the system may derive that there is a probability that the new design state S′ is a generally desired state.
- the system may determine that there is a probability that the user wishes all similarly positioned corner cells to be curved (e.g., to change from a rectangular footprint to a curved footprint).
- This learning may be implemented by the system weighting such user-preferred change operations (as associated fitness functions) when exploring its own design states (e.g., when noting that the user appears to prefer rounded corners, the system may weight its change operations and/or fitness functions to also prefer rounded corners).
- a user access a first structure design state S ( 256 ), and a selection mechanism (not shown) forming a part of learning engine 66 selects then applies one or more change operations ( 258 ), and obtains a new design state S′ ( 260 ).
- the new design state S′ is tested ( 262 ) for acceptability to the user (e.g., is it an acceptable new state to the user).
- the system may then learn from the user's response regarding acceptability whether the proposed change operation is generally acceptable or unacceptable to the user. This may be recorded ( 264 ) and a new proposed change operation applied and tested ( 266 ).
- learning may be of user preferences (also applies to groups of users). In other cases, learning may be with regard to valid and invalid design states. For example, if the system proposes a structure that is outside of the designated footprint for the structure (e.g., encroaches within setbacks), the user may mark the design state as illegal. Learning engine 66 may “learn” from a number of such instances that any design state that is outside of the footprint is invalid. This may be implemented, for example, by way of a contingent value for the fitness function F x for a design state S x , such as:
- the change-and-test operation may be applied against a number of existing structure designs so that user involvement in the training phase is minimized. This may generate a very large training set reasonably quickly (as may many of the other processes discussed or suggested herein).
- Known techniques such as gradient descent) may be employed to determine parameters for modeling (e.g., logistic regression analysis) of the training set and building a learning model for structure design. The learning in this context may be verified with the user (such as periodic confirmation of design choices) in what is referred to as semi-supervised learning.
- All learning discussed herein may be intra-structural (i.e., applied on or to the structure within which the training takes place). For example, it may be that a user prefers that all corners on a specific design be rounded, but apply that rule only to the specific design. Likewise, some or all learning discussed herein may be inter-structural (i.e., applies to structures other than just the structure in which the training takes place). For example, the system may learn that preferred structures have a reception lobby on the ground floor, and select change operations to provide same in all designs.
- the learning may be specific to an individual user (i.e., learning rules applied on a user-by-user basis).
- the system may learn through training (or otherwise as disclosed herein) that User One prefers glass exteriors, while User Two prefers steel paneling with inset windows.
- the learning may be general to some or all users of the system. For example, a system may “learn” that designers from a design firm have a preference for pyramid-topped designs. (Of course, if the firm is known for such designs, the system may be configured, through change operations and fitness function definitions, to produce designs that have pyramid tops for all users at that firm.).
- Learning as described above may result in limiting (or adding to) the population of change operators.
- the learning may result in changes to the fitness function, such as adding additional attributes (e.g., pyramid top), changing weights of attributes, and so on. It follows that in certain embodiments learning may result in changes to both change operations and fitness function.
- Unsupervised learning may result from examination of user interactions with the system during the design process, interactions between users within the system (for collaborative aspects of a system of the type disclosed herein, see the aforementioned U.S. patent application Ser. No. 13/163,307), results from actions that are internal to the system, and so on. For example, suppose that after a number of design cycles, each producing a final design (i.e., different projects), each final design was symmetrical about normal central vertical planes. This may, for example, be determined by a routine running within the system that looks for similarities between final designs.
- the system may learn from this that there is a preference that all designs should be symmetrical about normal central vertical planes.
- the system may thus increase a weight of a fitness function attribute corresponding to symmetry about normal central vertical planes.
- Work in the field of computer science in this area is often referred to as “clustering”, which is related to the field of unsupervised learning.
- the history of change operations resulting in new fitness function values may be evaluated (mined) for patterns. Change operations that statistically lead to improved and/or optimized design states may be given a higher relative preference (or weight) when selecting change operations for future design explorations. Likewise, change operations that statistically lead to poor fitness function values may be given a lower relative preference for future design explorations.
- This learning may be relatively basic, such as starting a design exploration with a design for which the user has previously indicated a preference, or more complex, such as the system attempting to extract what it is the user prefers from selected structure designs.
- This process may also be applied in a crowd-source environment, simply by considering the input of a population of people.
- the individuals or groups whose opinions are considered may be representative of a target audience, such as building developers, tenants, city planners, and so on, or broad-based, such as a random sample of individuals and/or groups.
- One or more of many methodologies for obtaining feedback in a crowd-source embodiment are possible.
- a survey may be provided to a target group.
- a user interface 270 in this example for recording preferences of the participants is shown in FIG. 10 .
- Several different designs 272 , 274 , 276 are presented to a participant.
- the participant is provided with check boxes for indicating a positive, neutral or negative impression regarding each design (other interfaces, such as alpha-numeric ratings, sliders, dials, and so forth are contemplated herein).
- other interfaces such as alpha-numeric ratings, sliders, dials, and so forth are contemplated herein.
- a system might conclude that the participant completing this survey prefers a lower, spread out structure design as compared to a taller, thinner structure.
- the system might also (or alternatively) conclude that the participant prefers a structure divided into different sections or elevations, as compared to a monolithic structure.
- results are consistent with those from a survey of a number of participants, these results might be generalized as a preference for the relevant group(s) of participants (e.g., by location, organization, role in a project, etc.) or all users (if appropriate).
- Results from such a survey may “teach” the system that one user or group of users may have a different set of preferences than another user or group of users. For example, for one group, this may result in initial states for structures being low, spread out, with multiple sections, and differing elevations. Change operations may be limited so as not to significantly change a design state with these attributes, when appropriate. Likewise (or alternatively), fitness functions may be defined so as to prefer such designs in appropriate cases. For another user or group, with different established preferences, different initial states for structures, with appropriate change operations and fitness functions may drive toward a different optimized design state.
- design iteration may begin with a “head start”, having a higher initial fitness function value than a random-start design state.
- the new design state(s) will have an increased probability of improving the fitness function value as compared to random change operations.
- aspects of a new design state may be at least similar to aspects of a preferred design state, and the user may choose to accept those aspects at the cost of a reduced fitness function (i.e., the building may look more as the user intended, and she may prefer to accept that state at the cost of say overage on square footage, decrease in building ROI, or other attribute compromise).
- the system disclosed herein may develop and present to a user an optimized design state, the user may choose for one reason or another to override that system-optimized design state in favor of some other design state the user prefers.
- the preferred design state may be optimized on other attributes (or differently weighted) than those considered by the system, or the design may simply be less optimized than that developed by the system, but preferred by the user for one or more reasons (e.g., better looking to the user).
- the system can take up the optimization process from that new state, and attempt to further optimize from the user's preferred state, or the final design state may remain as specified by the user, different from the system's optimized design state.
- the user may also specify that certain aspects of the user's design state (e.g., structure footprint) not be changed while attempting to developed a further optimized design state.
- the user and the system may work essentially in parallel, the user pursuing one or more design directions while the system autonomously explores its own different design states for an optimized design.
- An exemplary user interface 400 for such an embodiment is shown in FIG. 11 , in which panel 402 represents the current state of the user's design, while panel 404 represents the current state of the system's design.
- panel 402 represents the current state of the user's design
- panel 404 represents the current state of the system's design.
- certain quantified values relating to the design are calculated and displayed in the dashboard area 406 .
- some or all of those quantified values (and potentially others) relating to the design are calculated and displayed in the dashboard area 408 .
- a fitness function value (F 1 , F 2 , respectively) is calculated for each of the user's and system's design states, based at least in part on weighted attributes such as those displayed in the dashboard regions 406 , 408 (these fitness function values may also be displayed, for example in the dashboard, for user reference).
- the user or system can stop their line of design, and adopt that of the other. For example, if the user wishes to have the system explore variations of the design he is currently developing, he can actuate a decision in a “switch to” control 410 , such as by selecting a “user” button 412 . This will result in archiving (or abandoning) the current machine design state(s) and the machine copying the user's design state and using that as an initial state in the change-and-test methodology described above. Similarly, if the user wishes to adopt the machine's current state and work from that he may select a “system” button 414 . (One instance where this may be useful is where the system has optimized for fitness function value, and the user wishes to alter some aspect of the design, at the possible cost of lowering the overall fitness function value.)
- the fitness function values of the user's design and the system's design are periodically compared, and the user provided with an indication of the relative values of each.
- the overall fitness function value (F 1 ) of the user's current design state is indicated as 79
- the system's function value (F 2 ) is indicated as 80.
- attributes other than fitness function such as square footage, cost, time-to-completion, and so on, may be compared, and form the basis for choosing a user's design state over a system's, or vice versa.
- the user may be alerted to this by an indicator 420 , which is illuminated when the system's fitness function value exceeds the user's.
- the above permits a user to explore the effect of design choices on those attributes or vice versa.
- the user may focus the design process on an aesthetic target, while the system focuses on a cost target design. In a very simple example, this allows the user to view the “cost” of her design choices.
- This process may also highlight to a user tradeoffs in a design that may not otherwise have been apparent. For example, the user may identify a change that has little impact on overall cost but improves sunlight or shortens build time.
- this process may provide the user with a visual cue for manually adjusting attribute weights, ultimately to arrive at a design optimized for a preferred attribute set.
Abstract
Description
- A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records, but otherwise reserves all copyright rights whatsoever.
- The present disclosure is related to structure design and exploration, revision, optimization, and similar actions with regard to such designs, and more specifically to systems and methods for understanding structure design (e.g., program details) and its context (e.g., location details), extracting from actions and environments user intentions and preferences, predicting future actions and preferences, comparing structure designs, and otherwise assisting in the structure design process.
- Traditionally, the process of designing and building a structure involves many professionals with many different skill sets. As an example, a developer interested in having a commercial structure built may retain an architect, who takes the developer's requirements and preferences, details about the site, building codes and the like, and first generates a conceptual design, then a more detailed schematic design. At this stage, the architect's role is to synthesize, problem solve, and design. The resulting forms, as drawn and/or modeled, are typically a blending of art and engineering. Reviews and reworking for multiple different audiences typically occur next in what is often referred to as design development. For example, an architectural engineer or similar professional may review the design and plans for the proposed structure's integrity and safety, the developer may have input for modifications to the design to meet a desired design goal, the builder may introduce limitations based on cost, time-to-completion, feasibility, and so on.
- Portions of the design may also be sent to sources for cost estimates and to determine availability of elements of the structure, estimates for labor cost and time-to-delivery of components, etc. Estimates, as well as potential design modifications, from these many other sources may then also be factored into the structure design, cost, calculated time-to-completion, and so on. Bidding and negotiation may take place, such as with a builder or construction manager, parts and services providers, etc. Further design development then typically takes place to bring the design in-line with budgets, evolving design requirements, etc.
- Once the final design and plans converge for the main parties of interest (developer, architect, engineer, and builder, who form the core of the ecosystem for the project), required permits and other approvals may then be sought. An additional one or more round(s) of design development take place including negotiations with certifying and permitting agencies in order to converge on a mutually acceptable design. Ultimately, construction begins and in spite of inevitable design change orders (and associated cost and time overruns) a structure is built.
- While there are many other steps and parties involved, and the actual order of things may vary from structure to structure, the process is long, convoluted, circular, often unnecessarily complex, with many parties involved, and there are many opportunities for inefficiencies and delays in the various design, interaction, revision, and iteration of the design and build process. Furthermore, for each new structure, the process essentially reinvents itself from scratch, but never the same from one structure to the next. There is little re-use of designs, processes, and data in the design and construction of new structures. And, there are few resources available to improve efficiency and effectiveness in the communication and work processes taking place in the community of people and agencies involved in the design and construction process.
- To this end, a number of systems have been proposed that, very broadly, modularize structure design. See, for example, the aforementioned U.S. patent application titled “System and Methods for Structure Design, Analysis, and Implementation”, Ser. No. 13/112,727. According to that disclosure, a computer-implemented system for designing a structure and coordinating its implementation includes a design workspace, a design engine which receives various inputs and produces a structure design for display in the design workspace, a set of design requirement rules for producing the structure design, and a cell source providing a definition of a cell that forms a unit of the structure design. The cell definition may be instantiated as a plurality of cells that are assembled together with other cells to form the structure design. An attributes engine quantifies measures of various attributes of a structure based on the structure design during the process of designing the structure, and displays the quantified measures in a dashboard user interface. An optimization engine analyzes the structure design, and proposes alternative designs in an effort to improve the design from the perspective of one or more attributes, including the attributes quantified by the attributes engine.
- While an automated system has been disclosed that simplifies the structure design process in many regards, the disclosed methods still leave it largely to the user to explore design options and make appropriate design choices, and to do so often from first principles for each structure being designed. There remains a need to provide improved design choice assistance to a user in the context of creating a structure design. There also remains a need for systems and methods that assist a user in the design process, particularly retaining knowledge about design choices from one design to the next. Existing design strategies also leaves it to groups of designers (and other interested parties) to coordinate their efforts in producing a cohesive design that seeks to meet the requirements of a potentially large number of individuals and groups. Accordingly there remains a need for assisting groups in coordinating their design choices. Furthermore, while the system disclosed in the aforementioned U.S. patent application Ser. No. 13/112,727 can provide optimization options, and evaluate those options for different criteria, there remains a need for techniques for learning from past optimizations in order to provide more rapid convergence on an optimized design, avoid local maxima and other hurdles to optimization, avoid undesired optimizations, and so on. Still further, there is an unfilled need for convenient, consistent, and accurate methods for comparing multiple designs in order to extract similarities and other data therefrom, extract optimal design choices, and make that data available for meaningful use.
- Accordingly, the present disclosure provides computer-implemented systems and methods which address the above needs. More specifically, computational systems and methods are disclosed that learn about and assist with appropriate structure-based design choices. The systems and methods assist groups of users with coordinating their efforts in producing a cohesive design. Systems and methods are disclosed for learning from past optimizations in order to provide more rapid convergence on an optimized design, avoid local maxima and other hurdles to optimization, avoid undesired optimizations, and so on. Convenient, consistent, and accurate methods for comparing multiple designs are also provided for extracting similarities and other data therefrom, and making that data available for meaningful uses.
- The disclosed systems and methods employ machine learning techniques in an effort to explore a variety of different structure designs. Different design states are proposed that are likely to lead to a realizable structure (“valid design state”), and conversely rules are established that discourage (or preclude) pursuing “invalid” states (e.g., those that may lead to unrealizable structures). Furthermore, systems and methods are disclosed that seek to more quickly arrive at convergence of design on an optimal design state given weighted preferences, site specifics, and other boundary conditions. Targeted computer-implemented change-and-test methods are used to generate and evaluate modified structure designs, and a fitness function may be used to quantify designs, both machine- and human-generated. A user may select between a system-generated design or the user's own design (or some other design) for further exploration and optimization.
- According to aspects of the disclosure, improved design choice assistance is provided. For example, a user is provided with a view of the cost of certain design choices. The user is also provided with a view of design states that are optimized for one or more selected (and weighted) aspects, from which a user may choose. The system and methods disclosed herein “learn” from user interaction, past design choices, additional designs, etc., improving the quality of suggested design states. The user is also prevented from making (or encouraged not to make) design choices that may lead to an invalid design.
- According to additional aspects of the disclosure, certain design choice data is retained, such as from one design to another, to further assist with providing relevant and optimal design assistance. Interactions between users, and between users and the system are evaluated for further design choice data.
- According to still further aspects of the disclosure, coordination of a plurality of users is facilitated by applying a uniform set of design constraints, such as when cooperatively working on a design. The constraints direct design choices such that the cooperating users' design choices converge on a coherent design.
- According to yet further aspects of the disclosure, design state suggestion and evaluation constraints include rules to avoid or overcome optimization limitations, improving convergence on optimized designs. Either change operations, which take an initial design state and transform it into a new design state, or fitness functions, which evaluate design states based on weighted attributes may, or both, may include such constraints.
- Still further, other aspects of the present disclosure compare different designs to extracted similarities and optimal design choices. Systems and methods disclosed herein permit “learning” what attributes make a design state successful (or not successful), so that future design choices lead more likely to future successful designs.
- The above is a summary of a number of the unique aspects, features, and advantages of the present disclosure. However, this summary is not exhaustive. Thus, these and other aspects, features, and advantages of the present disclosure will become more apparent from the following detailed description and the appended drawings, when considered in light of the claims provided herein.
- In the drawings appended hereto like reference numerals denote like elements between the various drawings. While illustrative, the drawings are not drawn to scale. In the drawings:
-
FIG. 1 is a high-level representation of a distributed network environment, comprising hardware and software, within which various embodiments of a system for structure design, analysis, and implementation according to the present disclosure may be employed. -
FIG. 2 is a schematic diagram of a portion of a first embodiment of a computer-implemented system for structure design, analysis, and implementation including a learning engine according to the present disclosure. -
FIG. 3 is an illustration of one embodiment of an external data database configured to receive data from a number of sources external to the system for structure design and analysis according to the present disclosure. -
FIG. 4 is an illustration of one exemplary structure design environment including a number of the relevant participants in the design evolution, analysis, and implementation process. -
FIG. 5 is a flow diagram illustrating a number of aspects of a change-and-learn process in the context of a structure design process according to an embodiment of the present disclosure. -
FIGS. 6A through 6C illustrate an initial structure state, a new structure state obtained from application of a compound change operation to the initial state, and a flow representation of that exemplary compound change operation, respectively, according to an embodiment of the present disclosure. -
FIG. 7 is an illustration of multiple change operations applied to multiple initial structure design states to produce multiple new structure design states that may be evaluated in parallel, according to an embodiment of the present disclosure. -
FIG. 8 is an illustration of a training mode for a computer-implemented system for developing a structure design, according to an embodiment of the present disclosure. -
FIG. 9 is another illustration of a training mode for a computer-implemented system for developing a structure design, according to an embodiment of the present disclosure. -
FIG. 10 is still another illustration of a training mode for a computer-implemented system for developing a structure design, in this case for training from group responses to a design survey, according to an embodiment of the present disclosure. -
FIG. 11 is an illustration of a user interface permitting a user to view a user-generated structure design and a machine-generated structure design, as associated attribute quantifications, including a mechanism permitting a user to instruct the system to optimize the user-generated structure design, according to an embodiment of the present disclosure. - We initially point out that description of well-known processes, components, equipment, and other well-known details are merely summarized or are omitted so as not to unnecessarily obscure the details of the present invention. Thus, where details are otherwise well known, we leave it to the application of the present disclosure and the knowledge and ability of one skilled in the art to suggest or dictate choices relating to those details.
- With reference initially to
FIG. 1 , a distributed network environment 10 is shown, comprising hardware and software, within which various embodiments of the present disclosure may be employed. More specifically, distributed network environment 10 comprises multiple interconnected elements of hardware, each running software, allowing those elements of hardware to communicate with one another, whether by wired or wireless connection. Such elements of hardware include, but are not limited to, afirst client workstation 12, a second client workstation 14, amail server computer 16, afile server computer 18, andnetwork appliances 20 such as remote storage, each communicating via thepublic Internet 22. The client workstations and servers generally may be referred to as computer devices. Other computer devices, such as mobile computationally-enabled telephone handsets (so called “smart phones”) 24, tablet-style computer devices 26, and so on may also form a part of network environment 10. - Alternatives to using the public Internet, or additional interconnection mechanisms include local area networks (LANs), wide area networks (WANs), etc. Alternatives to client workstations, or additional computer mechanisms include personal computers, servers that are personal computers, minicomputers, personal digital assistants (PDAs), mainframes, etc. The network within which the various embodiments of the present disclosure operates may also comprise additional or fewer devices without affecting the scope of the present disclosure.
- First and
second client workstations 12, 14 may communicate via thepublic Internet 22 using known Web browser software or dedicated, specific-purpose application software. As is well known, software components supportingclient workstations 12, 14,servers network appliances 20, andsmart phones 24,tablet computers 26, and so on include or reference logic and/or data that may form a part of the software component or be embodied in or retrievable from some other hardware of software device or signal, either local or remote and coupled via a network or other data communications device. - Thus, embodiments of the invention may be implemented as methods, apparatus, or articles of manufacture as or in software, firmware, hardware, or any combination thereof. As used herein, article of manufacture (or alternatively, computer program product) is intended to encompass logic and/or data accessible from any computer-readable device, carrier, or media.
- Those skilled in the art will recognize many modifications may be made to this exemplary environment without departing from the scope of the present disclosure. For example, it will be appreciated that aspects of the present disclosure are not dependent upon data structure formats, communications protocols, file types, operating systems, database management system, or peripheral device specifics. Accordingly, the following description is provided without reference to specific operating systems, protocols, or formats, with the understanding that one skilled in the art will readily be able to apply this disclosure to a system and format of choice.
- As used herein, a “structure” may be, but is not limited to, habitable buildings, functional structures, artistic structures, and so on, and the nature of the structure does not form a limitation on the scope of the present disclosure. In addition, as used herein, “designing” is intended to mean all aspects of preparing plans for implementing a structure, including but not limited to developing a set of documents that describe a structure and aspects of its construction, as well as estimates relating to the design and construction of the structure. Designing a structure may optionally include the materials for and processes of obtaining prerequisite certifications and approvals for constructing the designed structure. In many cases, designing a structure is a collaborative endeavor between individuals and organizations. As well, as used herein, “implementation” is intended to mean verifying aspects of a design, arranging accessibility to required parts, services, and personnel, maintaining a project timeline, maintaining a project budget, managing changes during the build phase, financing and insurance, and constructing the structure. Optionally, implementation may also include coordinating and obtaining approvals, permits, and the like.
- Furthermore, as used herein, “manipulation” of (or to “manipulate”) a design includes but is not limited to adding elements to a design, subtracting elements from a design, reconfiguring portions of a design, moving portions of a design, partially or fully relocating a design on a site, requesting and viewing attributes about a design, implementing automated optimization of a design, checking aspects of a design for structural soundness or against codes or regulations for such a design, comparing alternative designs, developing cost estimates, construction time, and other attributes of a structure built according to a design, and so on.
- Still further, as used herein, “interface” is intended to include data structures, virtual and physical connections between devices, computer-human user interface, and other mechanisms that facilitate the exchange of data between computer systems and/or control of one or more such systems. In one embodiment, an interface requires a minimum or no user data entry or manual delivery of data from one system to another. In another embodiment, data that needs to be entered manually may be retained and reused within the system, reducing future data entry requirements.
- According to the present disclosure, a user interacts with a computer system and controls provided thereby to design a structure. In the process, the system may communicate with other systems to obtain data, verify data, deliver data, store or retrieve data, etc. Those other systems may be interfaces to other computer-user interactions or be autonomous or some combination of the two. By way of a network, the systems and methods thereby facilitate collaboration between multiple individuals and/or organizations in the design, analysis, and implementation of a structure.
- In general, a method of designing a structure employing a system of the type disclosed herein begins with a user specifying a “program” and “location”, which may be translated into requirements of the design. A program specification typically includes general aspects of the structure and its intended uses. A location specification typically includes certain starting conditions, such as a description of the site on which the structure is to be built, codes and zoning requirements, and so forth. From the program and location data, the system may provide a proposed initial design, and iterate toward meeting the design requirements. Alternatively, the user may select “cells” and/or other elements from a standard or custom palette and manipulate those elements in a design workspace to populate a structure design.
- According to the present disclosure, a cell is a fundamental element employed by the system and user to design a structure. Cells are abstractions of portions of a structure (although in certain cases a structure may in fact be comprised of a single cell) upon which other systems in the design depend. Cells are instantiated as part of the design process. Cells include rules governing aspects of the instantiations, such as how an instance of one cell connects to another instance, size ranges of instances, systems or components included in or required by an instance, and so on.
- Referring to
FIG. 2 , there is shown therein a schematic diagram of a portion of a first embodiment of a computer-implementedsystem 50 for designing a structure and coordinating its implementation according to the present disclosure.System 50 comprises adesign engine 52 that manages aspects of the structure design process.Design engine 52 may be realized in software, firmware, hardware, etc. -
Design engine 52 receives various inputs including data from cell andstructure data database 54, program and location data from design requirements database 56, and optionally additional data fromexternal data database 58 andelements database 64 interconnected thereto. While these data inputs are shown and discussed in terms of databases, it will be appreciated that other forms of data input, such as streaming data, real-time measurement data, calculated data, etc. may also be employed. -
Design engine 52 provides an output in the form of data representing a structure that is rendered in a design workspace user interface (UI) 60.Design engine 52 may include rendering capabilities, or may rely on additional tools, such as Google SketchUp to perform rendering tasks.Design workspace UI 60 provides a user with a visual representation of the structure being designed, as well as a design-editinginterface 62 at which a user may edit the design. - Design requirements database 56 may also provide
design engine 52 with rules driven by certain external data provided byexternal data database 58.FIG. 3 illustrates a number of representative sources of this external data. For example, data from a topographic study may be utilized by design requirements database 56 to provide rules fordesign engine 52. Similarly,geologic data 92,climate data 94, design andbuilding code data 96, and generally accepted design andbuilding practice data 98 may suggest or require design rules be implemented bydesign engine 52. Other external data include zoning data, historical real estate data, neighborhood information (key services, pedestrian and vehicular traffic flow), physical form of neighboring buildings, etc., not shown) may also be provided toexternal data database 58 for use bydesign engine 52. - Returning to
FIG. 2 , during the design phase of a project, the structure produced bydesign engine 52 improves in an effort to meet the various requirements of the interested parties. In certain stages of the design process, design evolution is by way of the interaction of various parties and organizations through direct manipulation of elements of the design provided by way of an interface such as userdesign editing interface 62 and inputs from various secondary data sources and analysis systems. -
FIG. 4 is an illustration of one exemplarystructure design environment 300 including a number of the relevant participants in the design evolution, analysis, and implementation process, operating aroundsystem 50.Traditional design participants 302 include one ormore architects 304,architectural engineers 306,developers 308,construction managers 310, and so on. Other parties that may be directly or indirectly involved in the design process includeproperty broker 312,project underwriter 314,property tenant 316, and so on. Any two or more of such parties, and two or more individuals within organizations serving these roles, may wish to collaborate on a structure design. For example, an architectural firm may wish that a senior architect work with a junior architect to develop a design for a client. An architect may wish to deliver a design to an architectural engineer so that structural details can be resolved. A developer may wish to involve a tenant in design details, and so on. - Many of the various interactions that the participants identified in
FIG. 4 (and possibly additional participants) have with a design (such as one in progress), with each other, with past designs, with systems related to the design process (e.g.,secondary analysis system 170 ofFIG. 2 ), etc. by way ofsystem 50 may form a source of knowledge about the design process, about the preferences and choices of the participants, about optimization of a design, about similarities to other designs, about cohesiveness of a design involving multiple participants, and so on. Viewing the data represented by these interactions over time, an opportunity is presented for “learning” from that data. Returning again toFIG. 2 ,system 50 is therefore provided with alearning engine 66, explained in further detail below, which process interactions such as between users via the system, between a user and the system, and between one system and another similar system, and/or analyzes structure designs with an aim to “learn” from those interactions, abstract that learning, and synthesize rules and processes to assist with the design process. -
Learning engine 66 may support one or more of a number of different types of learning strategies and goals. Learning strategies include (but are not limited to) unsupervised or supervised learning, reinforcement learning (learning from responses to state changes), pattern recognition, and so forth. The learning that the system does (i.e., some attempt to take the system from a current state to an improved state as measured by the fitness function) could be accomplished either by a search process or a derivation process. A search process (for example stochastic beam search) starts from one or more “states” and explores nearby states (e.g., modifies the current state in some way to produce a new state, and evaluates that new state). Typically, the search employs a form of “gradient ascent” to ensure that steps to nearby states head in the direction (in fitness space) tending towards an improved design. Furthermore, it is known that search processes may have mechanisms to overcome local maxima. Alternatively, a constructive process for learning utilizes rules (that can improve over time) applied in a systematic way to derive an improvement in structure design, with search through many intermediate structure designs in the process. Goals include (but are not limited to) improved design choice assistance, retention of relevant design choice data (such as from one design to another), coordination of a plurality of users, improved convergence on optimized designs (and avoiding or overcoming optimization limitations), comparing designs to extract similarities and optimal design choices, and so on. In general, the goal is to provide an improvement in the response ofdesign engine 52 so that it may provide a more desired design or design choices as an output. - In the present case, “desired” is measured by calculation of a fitness function. In its most broad sense, fitness function (F) as used here refers to a value that is a function of one or more weighted attributes, F=f({right arrow over (w)}1{right arrow over (a)}1,{right arrow over (w)}2{right arrow over (a)}2 . . . {right arrow over (w)}n{right arrow over (a)}n), where a1, a2, . . . an are each quantifications of an attribute of a structure based on the structure design, and w1, w2, . . . wn are each weighting values corresponding to each attribute quantification, respectively. For a more detailed discussion regarding fitness function in the context of a structure design system, see application Ser. No. 13/163,424, titled “Quantification of Structure Fitness Enabling Evaluation and Comparison of Structure Designs”, which is incorporated herein by reference. Calculation of fitness function may be managed, for example, by
optimization engine 140 ofFIG. 2 . - With reference to
FIG. 5 , anembodiment 200 of the present disclosure is illustrated. According toembodiment 200, an initial structure design or state Sx (202) is stored, such as in memory associated with the design engine (52). Design state Sx may be a user-entered design, a manually or automatically selected seed design, a machine-generated design, or may be established by some other mechanism. In the design process, initial design state Sx is changed in some way, by application of one or more modifications, to a new design state Sx′ (206). A layer of abstraction, referred to as a cell, is provided as an element of the structure design. The system includes processes, based on the cell abstraction, that manage details required to connect or disconnect a cell from a structure design (i.e., other cells). HVAC routing and interconnection, structural integrity, egress requirements, etc. are examples of details managed by the system in response to the addition or removal of a cell. Thus, the cell abstraction, and the system's rules for structure design using cells, is such that the addition or removal of cells, and hence basic design modification always result in an acceptable (e.g., buildable) state. Thus, the cell approach dramatically improves the chances of obtaining an acceptable structure from a system's own (i.e., autonomous) structure design modifications when compared to results of autonomously added and removed beams, columns, floors, and walls when done one element at a time. - In a design process supported by automated design exploration, such as disclosed in the aforementioned U.S. patent application Ser. No. 13/112,727, the one or more modifications may be either user-entered or machine-generated. In the case of machine generation, an operator referred to as a change operation is applied to transform an initial design state S to a new design state S′. In the example of
FIG. 5 , change operation A (204) is applied to Sx (202) to arrive at new design state Sx′ (206). - Change operation(s) may be selected by the system from a specified population of such change operation(s) retained in an appropriate storage mechanism (not shown). In certain embodiments, the population of change operations is fixed, and a user is provided with the ability to select from among the fixed population. In other embodiments, an interface may be provided to permit a user to order operations to be explored, such as by applying a weighting to certain types of operations. In such a case, the user may guide the system in preferentially exploring certain design states, even to the extent of the system mimicking the actual preferences of the user (such that the system develops structure designs more similar to what the user might actually have produced themselves). In still other embodiments, an interface is provide permitting the user to edit the population of change operations, including creating new operations, deleting, and modifying existing operations, creating composite change operations from multiple change operations, etc.
- Change operations act on one or more cells of a structure design. According to an embodiment of the present disclosure, the fundamental unit from which structures are built is referred to as a cell. In one limited sense, a cell may be thought of as a building block for a structure. Change operations may therefore represent manipulations of portions of a design on a cell-by-cell basis. For example, a partial list of primitive change operations includes: “add” a cell, “delete” a cell, and “rotate” a cell. Many compound change operations can be obtained from combinations of these primitives. For example, a change operation to “move” a cell may be obtained from “delete” a cell then “add” that same cell at a different location. A “curve” change operation may “delete” a cubic cell and in its place “add” a cell having one or more curved sides (e.g., to replace a sharp corner with a rounded one). Partial- or whole-structure change operations are also contemplated, such as “flatten” a structure, in which cells from higher elevation points of a structure are moved to lower elevation points of the structure. A “heighten” a structure change operation may result in cells being added to the top of a structure design, in some cases with a commensurate removal of cells from elsewhere in the structure. A “copy floor” change operation is a series of “add” cell change operations, where the cells of the reference (copied) floor are used to select cells for the target (added) floor. Many of the change operations also have inverse operations, such as “delete floor”, which as the name suggests, removes all cells on a designated floor of the structure design.
- An example of a compound change operation is illustrated with reference to
FIGS. 6A through 6C .FIG. 6A shows an initial design state S comprised of 27 cells (arranged in a cubic form). A compound change operation (which we will call a “stack two” change operation) produces a new design state S′, shown inFIG. 6B . New design state S′ is obtained by a “delete” of 6 cells from the front, top layer of structure S, then an “add” of two cells (the stack two) to the top of back row, top layer. Thus, the “stack two” change operation is comprised of six “delete” operations, and two “add” operations. This is represented in notation form inFIG. 6C . - Returning to
FIG. 5 , once a new structure Sx′ is obtained, a check is performed to ensure that Sx′ is a “valid” design (208). In various embodiments of the present disclosure, certain designs restrictions are imposed so that the design can reasonably be implemented (e.g., the structure is buildable, reasonable estimates can be provided, materials can actually be obtained, and so on). A number of cell-based rules may be applied to test S′ for validity, such as that no cell is to be unsupported at its base (i.e., no overhangs), no structure may have two unconnected cells as its top layer, each cell of a structure must be contiguous with at least one other cell of the structure, and so on. The list of possible cell-based rules is arbitrary, may be quite large, and may depend upon the specific project for which a design is being developed. In certain embodiments, a user may manually override system decisions with respect to validity, thereby obtaining a structure design that might otherwise be invalid but which permits the user to explore aspects of the design regardless. - If a new structure Sx′ is deemed to violate one or more rules it may be abandoned (or at least retained only for the purpose of avoiding that state in the future), and a new change operation B (212) is applied to design Sx, producing a different new design state Sx+1′. If, however, Sx′ is deemed valid, then a fitness function Fx (210) is computed for that structure design state. The fitness function may, for example, determine how closely the square footage of the structure design matches the target square footage set by the user, may determine whether the estimated build cost exceeds the set build cost target, may determine whether the calculated return-on-investment (ROI) meets or exceed the target ROI, may determine if the design state exhibits the desired level of symmetry, weighted as appropriate, and so on. There are many attributes of a design that may be measured and weighted from which the fitness function value Fx may be determined. This value Fx is associated with design state Sx′ in memory.
- It will be appreciated that the process illustrated in
FIG. 5 is a snapshot at a point after initiation of the change-and-test process, and before the final state is determined. Entering and ending the process ofFIG. 5 will be well understood by one of skill in the art from the description hereof. - As further illustrated in
FIG. 5 , the process of modifying an initial design state Sx may be repeated for a variety of different change operations, and the fitness function for each valid new design compared in order to arrive at a relative “optimum” design, from a fitness function perspective. That is, a large number of design variations may be explored and the design state presenting the greatest fitness function selected as “optimum”. This may take place in a serial fashion, in which the fitness function value Fx for design state Sx is compared with the fitness function value Fx+1 for design state Sx+1 (220), retaining only (or keeping track of) the design with highest value (222, 224), and at some point in the process the collection of fitness function values compared to rank them. In an alternative serial embodiment (not shown), the current highest fitness function value is compared with a current state's fitness function value, and the state with the higher fitness function value retained. This process, of starting from some point in the space of possible models, trying out a range of slightly modified models, examining each new model variation for its fitness, picking the most fit model (possibly the original model), and repeating this process many times is called, in machine learning, “hill climbing.” (It is also referred to as gradient ascent, such as used above). A new initial state may then be selected (226), such as the last new design state, for application of change operations and further exploration of alternative designs. - It will be appreciated that each new design with an improved fitness function value may form a starting point for the change-and-test process described above. After a number of (possibly many) iterations, a design may be arrived at that has a highest fitness function value. That design may be presented to a user for consideration as a possible solution to the design issues for a structure. This process may be adequate and sufficient to obtain an optimized design for many structure programs. However, for other structure programs several issues may arise. First, the “cost” (compute time, memory requirements, etc.) of calculating and comparing a large number of iterations may be excessive or even prohibitive. Second, the process may lead to local optimization, and may require additional techniques to push continued change-and-test toward an optimal design (e.g., a global maximum). Third, during the process of iterating, the user may wish to make one or more changes to the structure design from which the change-and-test process is required to proceed. Fourth, two users working in parallel on a design may unknowingly constrain the system to pursue different or divergent designs.
- Accordingly, in an embodiment of the present disclosure learning engine 66 (
FIG. 2 ) tracks change operations (228) leading to design states (as determined at 208). This information is then used when selecting change operations (230) that are applied to an initial design state (204). Preference is given to change operations that have produced valid design states over those that have produced invalid design states. Weighting (or conversely negative weighting) is one method for applying such a preference (negative preference). In this way, change operations are selected that have a higher likelihood of resulting in a valid design state. - Furthermore, learning engine 66 (
FIG. 2 ) tracks change operations associated with comparison of fitness function values (as determined at 220). This information is further used when selecting change operations (230) that are applied to an initial design state (204). Preference is given to change operations that have produced a higher fitness function value over those that have produced a lower fitness function value. Weighting is one method for applying such a preference. In this way, change operations are selected that have a higher rate of convergence on an optimized design state. Given a weighted set of change operations, a best-first search may be used to add a level of selectivity to which state changes to pursue—only those states that are predicted to have a high likelihood of producing improved fitness function values are retained and further explored. Beam search is an example of such a best-first analysis. - A reduction in the number of iterations required to obtain an optimized design by the process described above may be obtained by structuring the change operations themselves such that the current initial design state S is not changed if the change to new design state S′ would be invalid, i.e., obviating the separate validity check step. The following is provided as an example of pseudocode for such a conditional change:
- Identify a target cell for change operation
-
- Choose one of K change operations (e.g., delete cell)
- if change operation to cell does not
- orphan a cell adjacent target cell or
- remove support for a cell located above target cell or
- remove a fundamental structure system
- then perform change operation on target cell
- else select new change operation
Of course, any one or more cell-based rule governing validity, such as those discussed above with regard to separate generation then testing of a new design state S′, may also be used within the model of integrated change operation and validity assurance.
- if change operation to cell does not
- Choose one of K change operations (e.g., delete cell)
- Eliminating pursuit of invalid states and increasing the rate of convergence on optimized designs relates to the “cost” of generating a complete structure design. Once cells are assembled into a design state, to produce a complete structure design the design state must be essentially “compiled” to integrate the cells and the functions they carry into a cohesive structure design. The process of compiling a structure can be computationally costly. For example, all cell-to-cell interconnections (mechanical, electrical, plumbing—MEP) must be worked out and verified, total cost and build times must be calculated, secondary systems run (e.g., structural engineering analysis packages), and so on. It is therefore desired to minimize recompiling. It is possible to alter a “compiled” structure design, but doing so will require recompilation. Even small modifications to a compiled design can result in many changes to the overall design (e.g., removing a cell may mandate moving a core, removing an elevator, rerouting MEP, changing beam specifications, etc.) Thus, there is strong motivation to avoid recompiling after each change to a design state.
- Invalid design states are those that cannot be built, that undermine fundamental assumptions of the design process, that are directly in conflict with required design attributes, and so on. Essentially, there is a very high certainty that such designs will be rejected. By anticipating that a design state will be “invalid”, the system disclosed herein can guide a user toward promising designs, reduce time and effort spent on what ultimately would be invalid designs, and reduce the number of structure compilations and associated cost. In general, by knowledgably selecting change operations as disclosed above to those likely to result in “valid” designs, the user may explore design choices without concern that the result will be invalid—what the system lets the user try will at least be buildable (if not the design the user ultimately desires).
- With reference to
FIG. 7 , a method of selecting design states for change operations is illustrated. Such methods may also impact the cost of convergence on an optimized design state. A number n of selected initial states S1, S2, . . . Sn, (from a population of N initial states, where n<N, for example from prior change-and-test iterations) are each subjected to a different change operation to produce a unique new design state S′1, S′2, . . . S′n, respectively. A fitness function value F1, F2, . . . Fn is determined for each new design state S′1, S′2, . . . S′n, respectively. If the fitness function value for the new design state is an improvement over that of the corresponding initial design state, the new design state may replace the corresponding initial design state (referred to as replacement). Methods such as tournament selection (with replacement) may be employed to select sets of n initial states S1, S2, . . . Sn, for each round such that a relatively more efficient and lower cost process for evaluating a potentially large data set is provided as compared to sequentially evaluating each possible new design state. - It will be appreciated that the methods disclosed above provide compact, discrete, and “valid” steps towards an optimized structure design state. Each structure design iteration has a high likelihood of a non-zero fitness function value, meaning that a number of potentially worthwhile design alternatives can explored. Various “good” designs may then be explored, and/or a “best” design option offered to the user.
- It will also be appreciated that while several attributes (e.g., square footage, build cost, time to completion, etc.) that may be explicitly selected (and weighted) by a user have been discussed above, many different attributes may be evaluated when calculating a fitness function value. For example, attributes may be virtually any user-specifiable aspect directly related to a structure design, the design process, and the structure building process (subcontractor availability, code compliance, cost of operation, environmental footprint, etc.) Attributes may also be indirectly related to the structure design, such as proximity of the structure being designed to similar-sized structures, return-on-investment (ROI) of similar-sized structures in proximity to the structure being designed, cost of insurance per square foot in the neighborhood of the proposed structure site, and so forth. The user may be provided with an interface for selecting attributes, and specifying the relative importance (weight) to be given to each selected attribute as compared to other attributes (e.g., square footage is twice as important as maximal light plane). In addition to explicit attributes, implicit attributes may also be considered. For example, a fitness function may comprise both explicit and implicit attributes (meaning they are part of the fitness function but possibly may not be specified by a user). For example, it may be assumed that a user would be interested in the symmetry of a design, even if that attribute is not explicitly selected. Therefore, unless removed by the user from the attributes list, the symmetry of a design state may be quantified, and that value considered as part of the fitness function. Symmetry is one example of a large possible list of implicit attributes considered when evaluating structure fitness. Therefore, the above should not be interpreted as limiting the present disclosure to any set or type of such attributes.
- Furthermore, it will be appreciated that while change operations and design states have been described above in terms of the overall form of a structure (i.e., what the entire structure looks like, particularly when viewed from the outside), the above process may operate equally on portions of the structure either by specifying those portions to be explored, specifying those portions to be excluded from exploration or both (as may, for example, be specified by a user). For example, a user may specify that the footprint of the structure cannot be changed, but that within that footprint, alternate design states may be generated and explored. These limitations may form added cell-change rules as discussed above, may disable certain change operations, or be implemented by other controls within the system. Likewise, the above process may operate equally on internal elements and systems of a structure design (again as may be specified by a user), leaving the form of a structure unchanged (or changed only in response to optimization of internal elements and systems).
- The embodiments described above operate on a prescribed set of change operations, and proceed somewhat autonomously and arbitrarily through the population of such change operations in producing and exploring new design states. However, it is within the scope of the present disclosure that the system “learn” from user interaction with the system (and with other users via the system), and from any and all other available sources making design choices in the context of the system disclosed herein.
- According to another embodiment disclosed herein, a system is initially (or otherwise from time to time) trained, in the sense of supervised machine learning. For example, with reference to
FIG. 8 , a user access a first structure design state S (250), applies one or more change operations (252), and obtains a new design state S′ (254). The system may derive from this that there is a probability that when the user wishes to change a design state from S to S′ in the future, the user will prefer to do so by way of either the specific change operation or similar change operations used in the training example (252). If this pattern is observed in different contexts, the system may derive that there is a probability that the new design state S′ is a generally desired state. For example, if the user applies the “curve” cell change operation to multiple corner cells, the system may determine that there is a probability that the user wishes all similarly positioned corner cells to be curved (e.g., to change from a rectangular footprint to a curved footprint). This learning may be implemented by the system weighting such user-preferred change operations (as associated fitness functions) when exploring its own design states (e.g., when noting that the user appears to prefer rounded corners, the system may weight its change operations and/or fitness functions to also prefer rounded corners). - According to another example of a process for training a
learning engine 66, shown inFIG. 9 , a user access a first structure design state S (256), and a selection mechanism (not shown) forming a part of learningengine 66 selects then applies one or more change operations (258), and obtains a new design state S′ (260). The new design state S′ is tested (262) for acceptability to the user (e.g., is it an acceptable new state to the user). The system may then learn from the user's response regarding acceptability whether the proposed change operation is generally acceptable or unacceptable to the user. This may be recorded (264) and a new proposed change operation applied and tested (266). - In certain cases, learning may be of user preferences (also applies to groups of users). In other cases, learning may be with regard to valid and invalid design states. For example, if the system proposes a structure that is outside of the designated footprint for the structure (e.g., encroaches within setbacks), the user may mark the design state as illegal.
Learning engine 66 may “learn” from a number of such instances that any design state that is outside of the footprint is invalid. This may be implemented, for example, by way of a contingent value for the fitness function Fx for a design state Sx, such as: - If any portion of structure for design state Sx is outside of permissible footprint
-
- then set Fx to 0 (or −∞)
- else calculate Fx
Alternatively, you can put a sizable but non-infinite penalty on the fitness of an unacceptable (invalid) design. This may allow the system to continue on from that state and back into a better and now valid state that would have been hard to arrive at without going through a series of design steps that are invalid. And, of course, the system may be explicitly programmed to include such rules in addition to learning from the user(s). This may be by way of programming a system for building codes, zoning ordinances, and so on.
- In a variation on the above training operation, the change-and-test operation may be applied against a number of existing structure designs so that user involvement in the training phase is minimized. This may generate a very large training set reasonably quickly (as may many of the other processes discussed or suggested herein). Known techniques such (e.g., gradient descent) may be employed to determine parameters for modeling (e.g., logistic regression analysis) of the training set and building a learning model for structure design. The learning in this context may be verified with the user (such as periodic confirmation of design choices) in what is referred to as semi-supervised learning.
- All learning discussed herein may be intra-structural (i.e., applied on or to the structure within which the training takes place). For example, it may be that a user prefers that all corners on a specific design be rounded, but apply that rule only to the specific design. Likewise, some or all learning discussed herein may be inter-structural (i.e., applies to structures other than just the structure in which the training takes place). For example, the system may learn that preferred structures have a reception lobby on the ground floor, and select change operations to provide same in all designs.
- In addition, the learning may be specific to an individual user (i.e., learning rules applied on a user-by-user basis). For example, the system may learn through training (or otherwise as disclosed herein) that User One prefers glass exteriors, while User Two prefers steel paneling with inset windows. Alternatively, the learning may be general to some or all users of the system. For example, a system may “learn” that designers from a design firm have a preference for pyramid-topped designs. (Of course, if the firm is known for such designs, the system may be configured, through change operations and fitness function definitions, to produce designs that have pyramid tops for all users at that firm.).
- Learning as described above may result in limiting (or adding to) the population of change operators. Likewise, the learning may result in changes to the fitness function, such as adding additional attributes (e.g., pyramid top), changing weights of attributes, and so on. It follows that in certain embodiments learning may result in changes to both change operations and fitness function.
- Learning may also proceed unsupervised (again, inter- or intra-design, and for a specific user or group of users). Unsupervised learning may result from examination of user interactions with the system during the design process, interactions between users within the system (for collaborative aspects of a system of the type disclosed herein, see the aforementioned U.S. patent application Ser. No. 13/163,307), results from actions that are internal to the system, and so on. For example, suppose that after a number of design cycles, each producing a final design (i.e., different projects), each final design was symmetrical about normal central vertical planes. This may, for example, be determined by a routine running within the system that looks for similarities between final designs. The system may learn from this that there is a preference that all designs should be symmetrical about normal central vertical planes. The system may thus increase a weight of a fitness function attribute corresponding to symmetry about normal central vertical planes. Work in the field of computer science in this area is often referred to as “clustering”, which is related to the field of unsupervised learning.
- As another example, the history of change operations resulting in new fitness function values may be evaluated (mined) for patterns. Change operations that statistically lead to improved and/or optimized design states may be given a higher relative preference (or weight) when selecting change operations for future design explorations. Likewise, change operations that statistically lead to poor fitness function values may be given a lower relative preference for future design explorations.
- While, as described to this point, a structure design's “goodness” has been assumed to be purely a matter of its fitness function value, there are many complex and difficult-to-quantify attributes that may weigh in favor of (or against) a particular structure design. The newness (or it's opposite, familiarity), emotional appeal, complexity (for example in a ‘how did they do that?’ way) are a few examples of such difficult-to-quantify attributes. To factor such attributes into a fitness function it is possible for a user to rank a number of different structure designs and task the system with “learning” what the user likes. This learning may be relatively basic, such as starting a design exploration with a design for which the user has previously indicated a preference, or more complex, such as the system attempting to extract what it is the user prefers from selected structure designs. This process may also be applied in a crowd-source environment, simply by considering the input of a population of people. The individuals or groups whose opinions are considered may be representative of a target audience, such as building developers, tenants, city planners, and so on, or broad-based, such as a random sample of individuals and/or groups. One or more of many methodologies for obtaining feedback in a crowd-source embodiment are possible.
- An example of one methodology, a survey may be provided to a target group. A
user interface 270 in this example for recording preferences of the participants is shown inFIG. 10 . Severaldifferent designs - Results from such a survey may “teach” the system that one user or group of users may have a different set of preferences than another user or group of users. For example, for one group, this may result in initial states for structures being low, spread out, with multiple sections, and differing elevations. Change operations may be limited so as not to significantly change a design state with these attributes, when appropriate. Likewise (or alternatively), fitness functions may be defined so as to prefer such designs in appropriate cases. For another user or group, with different established preferences, different initial states for structures, with appropriate change operations and fitness functions may drive toward a different optimized design state.
- In this way, design iteration may begin with a “head start”, having a higher initial fitness function value than a random-start design state. Furthermore, as change operations are performed on the initial design state, the new design state(s) will have an increased probability of improving the fitness function value as compared to random change operations. Even if the fitness function value is not improved, aspects of a new design state may be at least similar to aspects of a preferred design state, and the user may choose to accept those aspects at the cost of a reduced fitness function (i.e., the building may look more as the user intended, and she may prefer to accept that state at the cost of say overage on square footage, decrease in building ROI, or other attribute compromise).
- It will be appreciated that while the system disclosed herein may develop and present to a user an optimized design state, the user may choose for one reason or another to override that system-optimized design state in favor of some other design state the user prefers. The preferred design state may be optimized on other attributes (or differently weighted) than those considered by the system, or the design may simply be less optimized than that developed by the system, but preferred by the user for one or more reasons (e.g., better looking to the user). The system can take up the optimization process from that new state, and attempt to further optimize from the user's preferred state, or the final design state may remain as specified by the user, different from the system's optimized design state. The user may also specify that certain aspects of the user's design state (e.g., structure footprint) not be changed while attempting to developed a further optimized design state.
- According to some embodiments of the system and methods disclosed herein, the user and the system may work essentially in parallel, the user pursuing one or more design directions while the system autonomously explores its own different design states for an optimized design. An
exemplary user interface 400 for such an embodiment is shown inFIG. 11 , in whichpanel 402 represents the current state of the user's design, whilepanel 404 represents the current state of the system's design. As the user manipulates her design, certain quantified values relating to the design are calculated and displayed in thedashboard area 406. Similarly, as the system explores different design states, some or all of those quantified values (and potentially others) relating to the design are calculated and displayed in thedashboard area 408. In one embodiment, a fitness function value (F1, F2, respectively) is calculated for each of the user's and system's design states, based at least in part on weighted attributes such as those displayed in thedashboard regions 406, 408 (these fitness function values may also be displayed, for example in the dashboard, for user reference). - In addition to working in parallel, it is possible for the user or system to stop their line of design, and adopt that of the other. For example, if the user wishes to have the system explore variations of the design he is currently developing, he can actuate a decision in a “switch to” control 410, such as by selecting a “user” button 412. This will result in archiving (or abandoning) the current machine design state(s) and the machine copying the user's design state and using that as an initial state in the change-and-test methodology described above. Similarly, if the user wishes to adopt the machine's current state and work from that he may select a “system”
button 414. (One instance where this may be useful is where the system has optimized for fitness function value, and the user wishes to alter some aspect of the design, at the possible cost of lowering the overall fitness function value.) - In certain embodiments the fitness function values of the user's design and the system's design are periodically compared, and the user provided with an indication of the relative values of each. In the example of
FIG. 11 , the overall fitness function value (F1) of the user's current design state is indicated as 79, while the system's function value (F2) is indicated as 80. Similarly, attributes other than fitness function, such as square footage, cost, time-to-completion, and so on, may be compared, and form the basis for choosing a user's design state over a system's, or vice versa. The user may be alerted to this by anindicator 420, which is illuminated when the system's fitness function value exceeds the user's. Many different indication mechanisms are possible, and indeed the indication and the selection of one design state or the other (user's or system's) may be combined into a single control. Accordingly, the above is merely an illustration of comparing fitness function values (and individual attributes) disclosed herein. - In addition to improving the convergence of design to a state optimized for many parameters, the above permits a user to explore the effect of design choices on those attributes or vice versa. For example, the user may focus the design process on an aesthetic target, while the system focuses on a cost target design. In a very simple example, this allows the user to view the “cost” of her design choices. This process may also highlight to a user tradeoffs in a design that may not otherwise have been apparent. For example, the user may identify a change that has little impact on overall cost but improves sunlight or shortens build time. Furthermore, this process may provide the user with a visual cue for manually adjusting attribute weights, ultimately to arrive at a design optimized for a preferred attribute set.
- While a plurality of preferred exemplary embodiments have been presented in the foregoing detailed description, it should be understood that a vast number of variations exist, and these preferred exemplary embodiments are merely representative examples, and are not intended to limit the scope, applicability or configuration of the disclosure in any way. Various of the above-disclosed and other features and functions, or alternative thereof, may be desirably combined into many other different systems or applications. Various presently unforeseen or unanticipated alternatives, modifications variations, or improvements therein or thereon may be subsequently made by those skilled in the art which are also intended to be encompassed by the claims, below.
- Therefore, the foregoing description provides those of ordinary skill in the art with a convenient guide for implementation of the disclosure, and contemplates that various changes in the functions and arrangements of the described embodiments may be made without departing from the spirit and scope of the disclosure defined by the claims thereto.
Claims (33)
F=f({right arrow over (w)} 1 {right arrow over (a)} 1 ,{right arrow over (w)} 2 {right arrow over (a)} 2 , . . . {right arrow over (w)} n {right arrow over (a)} n)
F=f({right arrow over (w)} 1 {right arrow over (a)} 1 ,{right arrow over (w)} 2 {right arrow over (a)} 2 , . . . {right arrow over (w)} n {right arrow over (a)} n)
F=f({right arrow over (w)} 1 {right arrow over (a)} 1 ,{right arrow over (w)} 2 {right arrow over (a)} 2 , . . . {right arrow over (w)} n {right arrow over (a)} n)
F=f({right arrow over (w)} 1 {right arrow over (a)} 1 ,{right arrow over (w)} 2 {right arrow over (a)} 2 , . . . {right arrow over (w)} n {right arrow over (a)} n)
F=f({right arrow over (w)} 1 {right arrow over (a)} 1 ,{right arrow over (w)} 2 {right arrow over (a)} 2 , . . . {right arrow over (w)} n {right arrow over (a)} n)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/342,162 US8954297B2 (en) | 2012-01-02 | 2012-01-02 | Automated and intelligent structure design generation and exploration |
PCT/US2012/038455 WO2012162110A1 (en) | 2011-05-20 | 2012-05-17 | Automated and intelligent structure design generation and exploration |
US14/617,828 US20150234946A1 (en) | 2012-01-02 | 2015-02-09 | Automated and Intelligent Structure Design Generation and Exploration |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/342,162 US8954297B2 (en) | 2012-01-02 | 2012-01-02 | Automated and intelligent structure design generation and exploration |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/617,828 Continuation US20150234946A1 (en) | 2012-01-02 | 2015-02-09 | Automated and Intelligent Structure Design Generation and Exploration |
Publications (2)
Publication Number | Publication Date |
---|---|
US20130173223A1 true US20130173223A1 (en) | 2013-07-04 |
US8954297B2 US8954297B2 (en) | 2015-02-10 |
Family
ID=48695590
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/342,162 Active 2033-04-21 US8954297B2 (en) | 2011-05-20 | 2012-01-02 | Automated and intelligent structure design generation and exploration |
US14/617,828 Abandoned US20150234946A1 (en) | 2012-01-02 | 2015-02-09 | Automated and Intelligent Structure Design Generation and Exploration |
Family Applications After (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/617,828 Abandoned US20150234946A1 (en) | 2012-01-02 | 2015-02-09 | Automated and Intelligent Structure Design Generation and Exploration |
Country Status (1)
Country | Link |
---|---|
US (2) | US8954297B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150161306A1 (en) * | 2013-12-06 | 2015-06-11 | Synopsys, Inc. | Fault insertion for system verification |
US20160001508A1 (en) * | 2014-02-02 | 2016-01-07 | Worcester Polytechnic Institute | Method and system for fabricating thermal insulation for retrofit applications |
CN105550393A (en) * | 2015-11-30 | 2016-05-04 | 北京理工大学 | Firearm variant design method supporting rapid generation of schemes |
WO2018120842A1 (en) | 2016-12-30 | 2018-07-05 | 上海欣百诺生物科技有限公司 | Bifunctional molecule and use thereof |
EP3432172A1 (en) * | 2017-07-20 | 2019-01-23 | Bricsys NV | Predicting user desirability of a constructional connection in a building information model |
US20200360089A1 (en) * | 2017-12-28 | 2020-11-19 | Hutom Co., Ltd. | Method for generating surgical simulation information and program |
US11010500B2 (en) * | 2018-09-17 | 2021-05-18 | Bricsy Nv | Direct room modeling in computer-aided design |
US11501042B2 (en) * | 2014-03-24 | 2022-11-15 | Imagars Llc | Decisions with big data |
US11669220B2 (en) * | 2017-03-20 | 2023-06-06 | Autodesk, Inc. | Example-based ranking techniques for exploring design spaces |
US11899017B2 (en) | 2017-07-28 | 2024-02-13 | Bristol-Myers Squibb Company | Predictive peripheral blood biomarker for checkpoint inhibitors |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8954297B2 (en) * | 2012-01-02 | 2015-02-10 | Flux Factory, Inc. | Automated and intelligent structure design generation and exploration |
US11048829B2 (en) * | 2013-03-15 | 2021-06-29 | Kemeera Llc | 3D printing systems and methods for fabricating injection molds |
US11436386B2 (en) | 2016-10-24 | 2022-09-06 | Joulea, LLC | System for improving the design, construction and operation of a structure |
US11875904B2 (en) * | 2017-04-27 | 2024-01-16 | Koninklijke Philips N.V. | Identification of epidemiology transmission hot spots in a medical facility |
US11798110B2 (en) * | 2019-02-13 | 2023-10-24 | Gridics Llc | Systems and methods for determining land use development potential |
US10951713B2 (en) | 2019-06-28 | 2021-03-16 | CohesionIB | IoT analytics edge application on IoT gateway |
US10798175B1 (en) | 2019-06-28 | 2020-10-06 | CohesionIB | IoT contextually-aware digital twin with enhanced discovery |
KR102157613B1 (en) * | 2020-06-05 | 2020-09-18 | 현대엔지니어링(주) | System and method for automated designing steel structure using machine learning |
Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100198563A1 (en) * | 2009-02-03 | 2010-08-05 | Thomas Plewe | Systems and methods for component-based architecture design |
US20100211512A1 (en) * | 2006-01-30 | 2010-08-19 | Detwiler Michael W | Computer-Implemented Land Planning System and Method |
Family Cites Families (27)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB9313761D0 (en) | 1993-07-02 | 1993-08-18 | Gay Clive H | Method of generating a visual design |
US6643784B1 (en) | 1998-12-14 | 2003-11-04 | Entrust Technologies Limited | Password generation method and system |
JP2003521061A (en) | 2000-01-25 | 2003-07-08 | オートデスク，インコーポレイテッド | Method and apparatus for providing and processing access to architectural drawings on the internet |
JP3685249B2 (en) | 2000-02-21 | 2005-08-17 | オリジナル設計株式会社 | Three-dimensional structure design system, three-dimensional structure design method, and computer-readable recording medium storing a program for causing a computer to execute the method |
US6859768B1 (en) | 2000-03-03 | 2005-02-22 | The Beck Technology | Computer-implemented automated building design and modeling and project cost estimation and scheduling system |
JP4727068B2 (en) | 2001-05-29 | 2011-07-20 | 株式会社トプコン | Construction monitoring system, construction management method |
TW550521B (en) | 2002-02-07 | 2003-09-01 | Univ Nat Central | Method for re-building 3D model of house in a semi-automatic manner using edge segments of buildings |
US6763338B2 (en) | 2002-04-05 | 2004-07-13 | Hewlett-Packard Development Company, L.P. | Machine decisions based on preferential voting techniques |
WO2004090692A2 (en) | 2003-04-04 | 2004-10-21 | Icosystem Corporation | Methods and systems for interactive evolutionary computing (iec) |
US7292908B2 (en) | 2004-10-13 | 2007-11-06 | Robotic Built Structures, Inc. | Systems and methods for manufacturing customized prefabricated buildings including arbitrarily modularizing a building specification without using any pre-defined modules |
US20070083421A1 (en) | 2005-10-07 | 2007-04-12 | Cerner Innovation, Inc. | Business process model design measurement |
WO2008004892A1 (en) | 2006-07-07 | 2008-01-10 | Selvaag Gruppen As | Computer-based method for automated modelling and design of buildings |
US20080126023A1 (en) | 2006-11-27 | 2008-05-29 | Ramsay Hoguet | Searching and Matching Related objects, Drawings and Models For Home and Landscape Design |
US20080174598A1 (en) | 2007-01-12 | 2008-07-24 | Max Risenhoover | Design visualization system, apparatus, article and method |
JP4983296B2 (en) | 2007-02-20 | 2012-07-25 | 富士通株式会社 | Analysis support system and method, program and apparatus thereof |
US8482558B2 (en) | 2007-11-16 | 2013-07-09 | M.I.C. Industries, Inc. | Systems and methods for computational design and modeling of buildings |
US20090234696A1 (en) | 2008-03-17 | 2009-09-17 | Eli Attia | Engineered Architecture |
CN102165450A (en) | 2008-06-30 | 2011-08-24 | 三脚架组件私人有限公司 | System and method for designing a building |
US20100049477A1 (en) | 2008-08-19 | 2010-02-25 | Sivan Design D.S Ltd | Civil engineering simulation using quadtree data structures |
US8473265B2 (en) | 2008-10-27 | 2013-06-25 | Schneider Electric It Corporation | Method for designing raised floor and dropped ceiling in computing facilities |
US8364442B2 (en) | 2009-02-17 | 2013-01-29 | Schlumberger Technology Corporation | Automated structural interpretation |
US20100257457A1 (en) | 2009-04-07 | 2010-10-07 | De Goes John A | Real-time content collaboration |
US8352218B2 (en) | 2009-07-08 | 2013-01-08 | Graphisoft | Active building information modeling apparatus and method |
US20110047484A1 (en) | 2009-08-19 | 2011-02-24 | Onehub Inc. | User manageable collaboration |
US8204619B2 (en) | 2009-08-27 | 2012-06-19 | Heil Duane A | Building construction software and system |
US8954297B2 (en) * | 2012-01-02 | 2015-02-10 | Flux Factory, Inc. | Automated and intelligent structure design generation and exploration |
WO2012162110A1 (en) | 2011-05-20 | 2012-11-29 | Google Inc. | Automated and intelligent structure design generation and exploration |
-
2012
- 2012-01-02 US US13/342,162 patent/US8954297B2/en active Active
-
2015
- 2015-02-09 US US14/617,828 patent/US20150234946A1/en not_active Abandoned
Patent Citations (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100211512A1 (en) * | 2006-01-30 | 2010-08-19 | Detwiler Michael W | Computer-Implemented Land Planning System and Method |
US20100198563A1 (en) * | 2009-02-03 | 2010-08-05 | Thomas Plewe | Systems and methods for component-based architecture design |
Cited By (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10452797B2 (en) * | 2013-12-06 | 2019-10-22 | Synopsys, Inc. | Fault insertion for system verification |
US20150161306A1 (en) * | 2013-12-06 | 2015-06-11 | Synopsys, Inc. | Fault insertion for system verification |
US20160001508A1 (en) * | 2014-02-02 | 2016-01-07 | Worcester Polytechnic Institute | Method and system for fabricating thermal insulation for retrofit applications |
US10307962B2 (en) * | 2014-02-02 | 2019-06-04 | Worcester Polytechnic Institute | Method and system for fabricating thermal insulation for retrofit applications |
US11501042B2 (en) * | 2014-03-24 | 2022-11-15 | Imagars Llc | Decisions with big data |
CN105550393A (en) * | 2015-11-30 | 2016-05-04 | 北京理工大学 | Firearm variant design method supporting rapid generation of schemes |
WO2018120842A1 (en) | 2016-12-30 | 2018-07-05 | 上海欣百诺生物科技有限公司 | Bifunctional molecule and use thereof |
US11669220B2 (en) * | 2017-03-20 | 2023-06-06 | Autodesk, Inc. | Example-based ranking techniques for exploring design spaces |
US11048831B2 (en) * | 2017-07-20 | 2021-06-29 | Bricsys Nv | Predicting user desirability of a constructional connection in a building information model |
EP3432172A1 (en) * | 2017-07-20 | 2019-01-23 | Bricsys NV | Predicting user desirability of a constructional connection in a building information model |
US11899017B2 (en) | 2017-07-28 | 2024-02-13 | Bristol-Myers Squibb Company | Predictive peripheral blood biomarker for checkpoint inhibitors |
US20200360089A1 (en) * | 2017-12-28 | 2020-11-19 | Hutom Co., Ltd. | Method for generating surgical simulation information and program |
US11660142B2 (en) * | 2017-12-28 | 2023-05-30 | Hutom Co., Ltd. | Method for generating surgical simulation information and program |
US11010500B2 (en) * | 2018-09-17 | 2021-05-18 | Bricsy Nv | Direct room modeling in computer-aided design |
Also Published As
Publication number | Publication date |
---|---|
US8954297B2 (en) | 2015-02-10 |
US20150234946A1 (en) | 2015-08-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8954297B2 (en) | Automated and intelligent structure design generation and exploration | |
US11978019B2 (en) | Collaboration tool | |
US8229715B1 (en) | System and methods facilitating collaboration in the design, analysis, and implementation of a structure | |
Khodabandelu et al. | Agent-based modeling and simulation in construction | |
KR101847111B1 (en) | Management Apparatus and Management Method using BPS based E-Mmanual Module, and General Construction Project Management information System | |
Ozorhon et al. | Case-based reasoning model for international market selection | |
US8516572B2 (en) | User certification in a structure design, analysis, and implementation system | |
Parchami Jalal et al. | A BIM-based construction claim management model for early identification and visualization of claims | |
US20120296611A1 (en) | System and Methods for Structure Design, Analysis, and Implementation | |
US20120323535A1 (en) | Quantification of Structure Fitness Enabling Evaluation and Comparison of Structure Designs | |
Jrade et al. | Computer-integrated system for estimating the costs of building projects | |
Baalousha et al. | An integrated web-based data warehouse and artificial neural networks system for unit price analysis with inflation adjustment | |
US8285521B1 (en) | Certification controls for a structure design, analysis, and implementation system | |
Tariq et al. | Exploring adoption of integrated building information modelling and virtual reality | |
Marzouk et al. | Assessing design process in engineering consultancy firms using lean principles | |
Jelodar et al. | Designing for construction procurement: an integrated decision support system for building information modelling | |
Wu | Integrating building information modeling and green building certification: The BIM-LEED application model development | |
Mohanta et al. | Causal analysis of slow BIM adoption in Eastern India with a special focus on green building sector | |
Parrish | Applying a set-based design approach to reinforcing steel design | |
WO2012162110A1 (en) | Automated and intelligent structure design generation and exploration | |
KR102384931B1 (en) | Apparatus for user-customized building plan design utilizing the latest building related laws | |
Said et al. | Modeling of the sustainability goal and objective setting process in the predesign phase of green institutional building projects | |
US20110225103A1 (en) | Efficiency of computer modeling and analysis of complex processes | |
Beukes | How a quantity surveyor in South Africa can use building information modeling (BIM) to stay relevant in the construction industry | |
Christiansen et al. | Integrated Informed Design Processes: A mapping of building performance criteria in the Danish conventional design practice |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:TELLER, ERIC;ROMAN, AUGUSTO;CARLILE, JENNIFER;AND OTHERS;REEL/FRAME:027503/0889Effective date: 20111215 |
|
AS | Assignment |
Owner name: FLUX FACTORY, INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:GOOGLE, INC.;REEL/FRAME:034580/0094Effective date: 20141117 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: FLUX DATA, INC., CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:FLUX FACTORY, INC.;REEL/FRAME:042620/0467Effective date: 20170421 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FEPP | Fee payment procedure |
Free format text: 7.5 YR SURCHARGE - LATE PMT W/IN 6 MO, LARGE ENTITY (ORIGINAL EVENT CODE: M1555); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |