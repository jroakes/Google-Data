CN117396958A - Speech conversion model based on convolution enhanced transformation neural network - Google Patents
Speech conversion model based on convolution enhanced transformation neural network Download PDFInfo
- Publication number
- CN117396958A CN117396958A CN202280033462.6A CN202280033462A CN117396958A CN 117396958 A CN117396958 A CN 117396958A CN 202280033462 A CN202280033462 A CN 202280033462A CN 117396958 A CN117396958 A CN 117396958A
- Authority
- CN
- China
- Prior art keywords
- speech
- spectrogram
- conformer
- blocks
- encoder
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000006243 chemical reaction Methods 0.000 title claims abstract description 131
- 238000013528 artificial neural network Methods 0.000 title description 5
- 230000009466 transformation Effects 0.000 title description 2
- 238000000034 method Methods 0.000 claims abstract description 61
- 238000012549 training Methods 0.000 claims description 52
- 238000005070 sampling Methods 0.000 claims description 33
- 230000008569 process Effects 0.000 claims description 29
- 238000013518 transcription Methods 0.000 claims description 19
- 230000035897 transcription Effects 0.000 claims description 19
- 230000007246 mechanism Effects 0.000 claims description 17
- 238000013527 convolutional neural network Methods 0.000 claims description 16
- 238000012545 processing Methods 0.000 claims description 16
- 238000003786 synthesis reaction Methods 0.000 claims description 7
- 230000015572 biosynthetic process Effects 0.000 claims description 6
- 230000015654 memory Effects 0.000 description 41
- 238000010586 diagram Methods 0.000 description 10
- 206010002026 amyotrophic lateral sclerosis Diseases 0.000 description 9
- 238000004590 computer program Methods 0.000 description 8
- 230000006870 function Effects 0.000 description 5
- 206010011878 Deafness Diseases 0.000 description 4
- 208000037265 diseases, disorders, signs and symptoms Diseases 0.000 description 4
- 239000011159 matrix material Substances 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 230000008859 change Effects 0.000 description 3
- 230000006735 deficit Effects 0.000 description 3
- 230000006872 improvement Effects 0.000 description 3
- 238000004891 communication Methods 0.000 description 2
- 238000013135 deep learning Methods 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 201000010099 disease Diseases 0.000 description 2
- 230000000694 effects Effects 0.000 description 2
- 230000037433 frameshift Effects 0.000 description 2
- 230000001771 impaired effect Effects 0.000 description 2
- 230000003993 interaction Effects 0.000 description 2
- 230000007787 long-term memory Effects 0.000 description 2
- 238000012986 modification Methods 0.000 description 2
- 230000004048 modification Effects 0.000 description 2
- 230000006855 networking Effects 0.000 description 2
- 230000000926 neurological effect Effects 0.000 description 2
- 239000004065 semiconductor Substances 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000008901 benefit Effects 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000009826 distribution Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- -1 etc.) Substances 0.000 description 1
- 238000002474 experimental method Methods 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010801 machine learning Methods 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 230000001537 neural effect Effects 0.000 description 1
- 238000010606 normalization Methods 0.000 description 1
- 238000012887 quadratic function Methods 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000033764 rhythmic process Effects 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000004984 smart glass Substances 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 230000003595 spectral effect Effects 0.000 description 1
- 238000001228 spectrum Methods 0.000 description 1
- 230000002194 synthesizing effect Effects 0.000 description 1
- 238000012360 testing method Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/06—Transformation of speech into a non-audible representation, e.g. speech visualisation or speech processing for tactile aids
- G10L21/10—Transforming into visible information
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/003—Changing voice quality, e.g. pitch or formants
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/06—Transformation of speech into a non-audible representation, e.g. speech visualisation or speech processing for tactile aids
- G10L21/18—Details of the transformation process
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0316—Speech enhancement, e.g. noise reduction or echo cancellation by changing the amplitude
- G10L21/0364—Speech enhancement, e.g. noise reduction or echo cancellation by changing the amplitude for improving intelligibility
Abstract
A method (600) of speech conversion includes receiving an input spectrogram (102) corresponding to an utterance (108) as input to an encoder (210) of a speech conversion model (200), the encoder including a stack (400) of self-attention blocks. The method further includes generating an encoded spectrogram (212) as an output from the encoder and receiving the encoded spectrogram output from the encoder as an input to a spectrogram decoder (220) of the speech conversion model. The method also includes generating an output spectrogram (222) corresponding to the synthesized speech representation of the utterance as an output from the spectrogram decoder.
Description
Technical Field
The present disclosure relates to a convolutional enhanced transform neural network (Conformer) based speech conversion model.
Background
The speech conversion model may be used to modify the speech of the source speaker into another form without changing the linguistic information of the speech. For example, the speech conversion model may produce a copy of the user's speech. Alternatively, the speech conversion model may convert the user's speech into audio waveforms of speech in another language. Machine learning methods can be used to accurately train a speech conversion model and effectively convert speech to another form.
Disclosure of Invention
One aspect of the invention provides a speech conversion model comprising an encoder comprising a stack of self-attention blocks, the encoder configured to encode an input spectrogram corresponding to an utterance. The speech conversion model also includes a spectrogram decoder configured to receive as input an encoded spectrogram from the encoder. The spectrogram decoder is configured to generate as an output spectrogram corresponding to a synthesized speech representation of the utterance.
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the input spectrogram corresponding to the utterance is extracted from input speech spoken by a speaker associated with atypical speech. In these implementations, the synthesized speech representation of the utterance includes a synthesized canonical fluent speech representation of the utterance.
Further, the speech conversion model may include a field decoder configured to receive as input the encoded spectrogram from the encoder; and generating as output a textual representation corresponding to the transcription of the utterance. Further, the speech conversion model may include a phoneme decoder configured to receive the encoded spectrogram from the encoder as input; and generating as output a phonemic representation of the utterance.
In some implementations, the stack of self-attention blocks includes a stack of Conformer blocks, each Conformer block having a multi-headed self-attention mechanism. In these implementations, the encoder may further include a first sub-sampling layer disposed before the stack of Conformer blocks and configured to receive the input spectrogram, the first sub-sampling layer including a convolutional neural network CNN layer, and then pooled in time to reduce a number of frames processed by an initial Conformer block in the stack of Conformer blocks. Further, in these implementations, the encoder may include a second sub-sampling layer disposed between the initial set of Conformer blocks in the stack of Conformer blocks and the final set of Conformer blocks in the stack of Conformer blocks, the second sub-sampling layer configured to sub-sample the hidden representation output by the final Conformer block in the initial set of Conformer blocks to reduce the number of frames processed by the final set of Conformer blocks. In these embodiments, the encoder may further include an upsampling layer disposed after the stack of Conformer blocks, the upsampling layer including a single transposed CNN layer configured to upsample the hidden representation output by the final Conformer block in the stack of Conformer blocks to increase the number of frames processed by a cross-attention mechanism disposed between the encoder and the spectrogram decoder.
Furthermore, a two-step training process including a first training step of pre-training the speech conversion model over a plurality of spoken utterances of a typical speaker associated with typical fluent speech may be used to train the speech conversion model. Here, each spoken utterance is paired with a corresponding ground truth synthesis specification fluent phonetic representation of the utterance. The two-step training process also includes a second training step of fine-tuning parameters of the pre-trained speech conversion model based on a plurality of atypical speech samples spoken by speakers associated with atypical speech.
In some implementations, the spectrogram decoder generates the output spectrogram directly from the encoded spectrogram without performing any intermediate text-to-speech conversion on a text representation corresponding to a transcription of the utterance.
Another aspect of the present disclosure provides a computer-implemented method for a speech conversion model. When executed on data processing hardware, cause the data processing hardware to: an input spectrogram corresponding to an utterance is received as input to an encoder of a speech conversion model, the encoder comprising a stack of self-attention blocks. The operations also include generating an encoded spectrogram as an output of the encoder. The operations include receiving the encoded spectrogram generated as an output of the encoder as an input to a spectrogram decoder of the speech conversion model. The operations also include generating an output spectrogram corresponding to the synthesized speech representation of the utterance as an output of the spectrogram decoder.
This aspect may include one or more of the following optional features. In some implementations, the input spectrogram corresponding to the utterance is extracted from input speech spoken by a speaker associated with atypical speech. In these implementations, the synthesized speech representation of the utterance includes a synthesized canonical fluent speech representation of the utterance.
In some implementations, the operations include receiving the encoded spectrogram generated as an output of the encoder as an input to a field decoder of the speech conversion model. These implementations also include generating a textual representation corresponding to the transcription of the utterance as an output of the field decoder. The operations may also include receiving the encoded spectrogram generated as an output of the encoder, as an input to a phoneme decoder of the speech conversion model, and generating a phoneme representation of the utterance, as an output of the phoneme decoder.
In some implementations, the stack of self-attention blocks includes a stack of Conformer blocks, each Conformer block having a multi-headed self-attention mechanism. In these embodiments, the encoder further comprises a first sub-sampling layer disposed before the stack of Conformer blocks and configured to receive the input spectrogram, the first sub-sampling layer comprising a convolutional neural network CNN layer, and then pooled in time to reduce the number of frames processed by an initial Conformer block in the stack of Conformer blocks. Further, in these embodiments, the encoder further comprises a second sub-sampling layer disposed between the initial set of Conformer blocks in the stack of Conformer blocks and the final set of Conformer blocks in the stack of Conformer blocks, the second sub-sampling layer configured to sub-sample the hidden representation output by the final Conformer block in the initial set of Conformer blocks) to reduce the number of frames processed by the final set of Conformer blocks. In these embodiments, the encoder further includes an upsampling layer disposed after the stack of Conformer blocks, the upsampling layer including a single transposed CNN layer configured to upsample the hidden representations output by the final Conformer blocks in the stack of Conformer blocks to increase the number of frames processed by a cross-attention mechanism disposed between the encoder and the spectrogram decoder.
Further, the speech conversion model may be trained using a two-step training process that includes a first training step by pre-training the speech conversion model over a plurality of spoken utterances of a typical speaker associated with typical fluent speech. Here, each spoken utterance is paired with a corresponding ground truth synthesis specification fluent phonetic representation of the utterance. The two-step training process also includes a second training step of fine-tuning parameters of the pre-trained speech conversion model based on a plurality of atypical speech samples spoken by speakers associated with atypical speech.
In some implementations, the spectrogram decoder (220 a) generates the output spectrogram directly from the encoded spectrogram (212) without performing any intermediate text-to-speech conversion on a textual representation corresponding to a transcription of the utterance.
The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
Drawings
FIG. 1 is a schematic diagram of an example speech conversion system including a speech conversion model.
Fig. 2 is a schematic diagram of a speech conversion model.
FIG. 3 is a schematic diagram of an exemplary hybrid frame rate processing scheme for accelerating training and reasoning times of a speech conversion model.
Fig. 4 is a schematic diagram of an exemplary Conformer block.
FIG. 5 is a schematic diagram of an example training scheme for a speech conversion model.
Fig. 6 is a flowchart of an example arrangement of operations for performing a speech conversion method.
FIG. 7 is a schematic diagram of an exemplary computing device that may be used to implement the systems and methods described herein.
Like reference symbols in the various drawings indicate like elements.
Detailed Description
There is an increasing interest in developing more inclusive speech technologies, particularly those that can help people with speech impairments. With the introduction of end-to-end (E2E) deep learning based models, automatic Speech Recognition (ASR) has made tremendous progress in recognizing speech from speakers with Dysarthric (or atypical speech patterns to convert to accurate transcription. For example, atypical speech patterns may include, but are not limited to, impaired speech due to physical or neurological conditions (e.g., speakers suffering from Amyotrophic Lateral Sclerosis (ALS) disease), accent speech, and Deaf speech (Deaf speech). The speech conversion system may apply a similar deep learning based model to convert speech with atypical speech patterns to typical fluent output speech.
Matching training and test data distributions are known to give optimal performance for training a speech conversion model. However, it is difficult to train a model using the current method due to insufficient training data from a speaker with speech impairment. Furthermore, such training data is difficult to obtain because users with speech impairment may find it difficult to record enough data to adequately train the model. The present disclosure introduces improvements to speech conversion models with encoder/decoder structures. These improvements require less training data, speed up training of the speech conversion model, allow the model to be extended to a large set of users, and be robust to various atypical voices. The present disclosure provides these improvements by making structural modifications to the speech conversion model using encoder-activated sub-sampling and corresponding upsampling of typical encoder outputs. The present disclosure also provides for the combination of many-to-one speech conversion (VC) and ASR in a unified model to jointly decode speech and text during reasoning using a shared encoder architecture for tasks.
As used herein, and unless otherwise indicated, the terms "speech conversion system" and "speech conversion model" may refer to any combination of ASR systems/models in which input atypical speech is recognized and converted into corresponding text (e.g., transcription) and/or a collection of phonemes (Phoneme) representing atypical speech, or speech-to-speech conversion systems/models in which input atypical speech is directly converted into canonical fluent synthesized speech without performing speech recognition. In other words, the speech conversion system/model is configured to directly convert an input audio waveform or Spectrogram (spectra) corresponding to atypical speech to an output audio waveform or Spectrogram corresponding to canonical fluent speech without converting the input audio waveform to an intermediate representation (e.g., text or phonemes). It is apparent that speech conversion models and techniques for training speech conversion models will enable users with atypical speech to speak into, and be understood by, other persons and speech interfaces (e.g., digital assistants) by being able to recognize and/or reproduce the user's intended speech. Although the examples herein describe a speech conversion model that receives an input audio waveform or spectrogram corresponding to atypical speech for conversion to an output audio waveform or spectrogram corresponding to canonical fluent speech, the speech conversion model may be similarly adapted to perform other types of speech conversion tasks without departing from the scope of the present disclosure. For example, the speech conversion model may convert an input audio waveform or spectrogram corresponding to an Utterance in a first language (Utterance) to a translated output audio waveform or spectrogram corresponding to an Utterance in a different, second language. The speech conversion model may similarly receive a user's spoken input and output synthesized speech that contains the same language content of the spoken input but with different speech characteristics of the target speaker.
Fig. 1 shows a speech conversion system 100 that includes a speech conversion model 200 and a vocoder 374. The speech conversion model 200 is configured to convert input audio data 102 corresponding to utterances 108 spoken by the source speaker 104 that are related to atypical speech into output audio data 106 corresponding to a synthesized canonical fluent speech representation of the same utterance 114 spoken by the target speaker 104. As used herein, the input audio data 102 may include an input spectrogram corresponding to the utterance 108. As used herein, the output audio data 106 may include an output spectrogram 222 corresponding to a synthetic canonical fluency speech representation of the same utterance 114, or a time-domain audio waveform 376 converted from the output spectrogram 222 by the vocoder 375. Although not shown, an acoustic front-end resident on the user device 110 may convert the time-domain audio waveform of the utterance 108 captured via the microphone of the user device 110 into an input spectrogram 102 or other type of audio data 102. In some implementations, the speech conversion model 200 converts the input audio data 102 corresponding to the utterance 108 into a textual representation (e.g., grapheme, field, or Word) corresponding to the transcription 201 or phonemic representation 202 of the utterance 108. In some further embodiments, the speech conversion model 200 of the speech conversion system 100 is configured to directly convert the input audio data 102 (e.g., input spectrograms) to the output audio data 106 (e.g., output spectrogram 222) without performing speech recognition or without generating any intermediate discrete representations (e.g., text or phonemes) from the input audio data 102.
The speech conversion model 200 includes a spectrogram encoder 210 and one or more decoders 220,220a-c, the spectrogram encoder 210 being configured to encode the input spectrogram 102 into an encoded spectrogram 212 (e.g., comprising a sequence of vector hidden feature representations), the one or more decoders 220,220a-c being configured to decode the encoded spectrogram 212 into an output spectrogram 222, transcript 201 and/or phoneme representation 202 corresponding to the synthesized canonical fluency speech representation. Transcription 201 can include canonical fluency transcription of utterance 108, which can be understood by a human reader and/or by a downstream application (e.g., a digital assistant).
The encoder 210 may include a Stack (Stack) of multi-headed attention blocks 400 (referred to herein as Conformer blocks 400), which multi-headed attention blocks 400 may include Conformers or transformers. Each multi-headed attention block 400 may include a multi-headed attention mechanism 420 (fig. 4). Conformer block 400 may be implemented by encoder 210 to capture fine-grained spectral patterns (patterns) of incoming atypical speech. For example, when the spectrogram encoder 210 receives the input audio data 102 of the utterance 108, the spectrogram encoder 210 may process 10 millisecond (ms) speech samples of the input spectrogram 102 using the Conformer block 400 to produce an upsampled 40ms encoded spectrogram 212. The upsampling process of the Conformer block 400 of the encoder 210 is discussed in more detail below with reference to FIGS. 3 and 4. The spectrogram decoder 220a may then generate an output spectrogram 222 corresponding to the synthesized canonical fluency speech representation based on the upsampled encoded spectrogram 212 output from the spectrogram encoder 210. For example, the spectrogram decoder 220a may receive an upsampled 40ms encoded spectrogram 212 representing 10ms speech samples of the input spectrogram 102 from the spectrogram encoder 210. Here, through the cross-attention mechanism 231,231a (fig. 2 and 3), the spectrogram decoder 220a may generate a 12.5ms output spectrogram 222 that corresponds to a normalized fluent speech representation of the synthesis of the utterance 114, including as part of the intended word or words of the 10ms input audio data 102, but not including the non-fluent portion of atypical speech.
In some examples, speech conversion model 200 also includes a field (Word Piece) decoder 220b that decodes encoded spectrogram 212 into, for example, a textual representation of transcript 201. For example, field decoder 220b may be trained to decode encoded spectrogram 212 into corresponding fields that may form transcript 201. Although in the illustrated example the model 200 employs a field decoder 220b, the model 200 may also employ a Grapheme (Grapheme) decoder 220b or a Word (Word) decoder 220b configured to decode the encoded spectrogram into graphemes or words, respectively. Additionally or alternatively, the speech conversion model 200 may also include a phoneme decoder 220c that decodes the encoded spectrogram 212 into a phoneme representation 202, the phoneme representation 202 including phonemes indicative of a canonical fluent speech representation of the synthesis of the utterance 114. Thus, the spectrograms, fields, and the voxel decoders 220a-c may correspond to parallel decoding branches of the speech conversion model 200, each of which receives the up-sampled encoded spectrograms 212 encoded by the spectrogram encoder 210 and transmits the output spectrograms 222 in parallel, transcribing 201, and corresponding ones of the voxel representations 202. The vocoder 375 (also interchangeably referred to as synthesizer 375) of the speech conversion system 100 is configured to convert the output spectrogram 222 transmitted by the spectrogram decoder 220a into a time-domain waveform 376 of synthetic canonical fluent speech of the same utterance 114 for audible output from another computing device 116. The time-domain audio waveform comprises an audio waveform defining the amplitude of the audio signal over time. The vocoder 375 may include a cell selection module or a WaveNet module for synthesizing the output spectrogram 222 into a time domain waveform of synthesized typically fluent speech. In some implementations, synthesizer 375 includes a vocoder network, i.e., a neural vocoder, that is trained alone and adjusted based on mel frequency spectrograms for conversion to time-domain audio waveforms. In some additional examples, the vocoder 375 includes a streaming vocoder 375, such as a streaming Griffin-Lim vocoder. An exemplary streaming vocoder is described in U.S. provisional application 63/312,195 filed on month 21 of 2022, the contents of which are incorporated herein by reference in their entirety.
In the illustrated example, source speaker 104 is associated with atypical speech such that source speaker 104 speaks in atypical speech modes that may be unintelligible. Atypical speech patterns may include, but are not limited to, impaired speech due to physical or neurological conditions (e.g., speakers with Amyotrophic Lateral Sclerosis (ALS) disease), severely aggravated speech, and deaf speech. As an example, the source speaker 104 has an ALS disease and is associated with atypical speech due to the ALS disease. Thus, the speech conversion model 200 is trained to directly convert the input spectrogram 102 corresponding to the utterance 108 spoken by the source speaker 104 associated with ALS speech into an output spectrogram 222 corresponding to a synthesized standard fluent speech representation of the same utterance 108. Thus, the synthesized canonical fluency speech representation provided by output spectrogram 222 improves the intelligibility of the ALS speech uttered by source speaker 104. The speech conversion model 200 may be trained as a multilingual speech conversion model to directly convert the input spectrograms 102 corresponding to utterances 108 in a first language into output spectrograms 222 corresponding to synthesized speech representations of those utterances 108, which utterances 108 are identical to the source speaker's speech, but in a second, different language, without departing from the scope of the present disclosure. In addition, model 20 may be trained to directly convert input spectrograms 102 corresponding to utterances 108 spoken by a source speaker having first speech characteristics into output spectrograms 222 corresponding to synthesized speech representations of the same utterance 108 having different speech characteristics corresponding to the target speaker.
The computing device 110 associated with the source speaker 104 may capture the utterances 108 spoken by the source speaker 104 and provide corresponding input audio data 102 to the speech-to-speech conversion system 100 for conversion into any one of an output spectrogram 222, a transcription 201, or a phoneme representation 202. Computing device 110 may include, but is not limited to, a smart phone, a tablet, a desktop/laptop computer, a smart speaker, a smart display, a smart device, a wearable device that supports an assistant (e.g., a smart watch, a smart headset, smart glasses, etc.), or a vehicle infotainment system. Thereafter, the speech conversion system 100 can use the vocoder 375 to convert the output spectrogram 222 into a time-domain audio waveform 376, which time-domain audio waveform 376 can be audibly output from the computing device 110 or another computing device 116 as the synthesized utterance 114 of typical fluent speech. The speech conversion system 100 can also provide a transcription 201 and/or a phoneme representation 202 corresponding to the synthesized canonical fluent speech representation of the same utterance 114 spoken by the source speaker 104 to another computing device 116 associated with the user 118, whereby the other computing device 116 can display the canonical transcription 201 as an understandable representation of the utterance 108 spoken by the source speaker 104, without departing from the scope of the present disclosure. Or a text-to-speech (TTS) system is employed to convert the transcription 201 or phonemic representation 202 into synthesized canonical fluent speech. In this example, source speaker 104 and user 118 speak into each other through their respective computing devices 110,116 (e.g., through a telephone call or other type of voice communication protocol, such as through voice over internet protocol). Although source speaker 104 and other users 118 may speak the same language, other users 118 may have difficulty understanding source speaker 104 because source speaker 104 has atypical speech due to medical conditions (e.g., atypical speech), accents, or different native language. Thus, while the source speaker 104 speaks in atypical speech (e.g., ALS speech) that may be difficult to understand, another user 118 hearing the synthesized canonical fluent speech representation will more easily understand the utterance 108 intended by the source speaker 104. In other words, the synthesized canonical fluency phonetic representation provides a more consistent Cadence (Cadence) that may be easier for other users to understand than the original utterance 108 that the target speaker uttered in atypical speech. Notably, the synthesized canonical fluent speech representation is in the speech of the source speaker 104. However, depending on the application, the speech conversion system 100 may produce synthesized canonical fluency in the speech of the target speaker that has different speech characteristics than the source speaker.
In some further examples, the speech conversion system 100 communicates output audio data 106 corresponding to the synthesized canonical fluency phonetic representation of the utterance spoken by the source speaker 104 to an output audio device to audibly output the synthesized canonical fluency phonetic representation in the speech of the source speaker 104 to a viewer. For example, the source speaker 104 may be a psychographic professor providing a lecture for a student class, where the utterances spoken by the source speaker 104 include medical terms belonging to a particular proprietary domain of psychology, for example. As will become apparent, the speech-to-speech conversion model 200 is trained to learn language diversity associated with a particular domain, as well as to learn acoustic diversity associated with a particular type of atypical speech associated with the source speaker 104.
Alternatively, another computing device 116 may be associated with a downstream-stream automatic speech recognition system in which the speech conversion system 100 acts as a front-end to provide output audio data 106 corresponding to the synthesized canonical fluent speech representation as input to the ASR system for conversion to recognized text. The recognized text may be presented to other users 118 and/or may be provided to a natural language understanding) system for further processing. The functionality of speech conversion system 100 may reside on remote server 112, or on one or both of computing devices 110,116, or on any combination of remote server and computing devices 110, 116. The speech conversion system 100 can be distributed across multiple devices such that the speech conversion model 200 resides on one of the computing device 110 or the remote server 112 and the vocoder 375 resides on one of the remote server 112 or the other computing device 116. In some implementations, the speech conversion model 200 continuously generates an output spectrogram 222 corresponding to the synthesized canonical fluent speech representation of the utterance as the source speaker 104 speaks the respective portion of the utterance into atypical speech. By continuously generating the output spectrogram 222 corresponding to the synthesized canonical fluent speech representation of the portion of the utterance 108 spoken by the source speaker 104, the conversation rhythm between the source speaker 104 and the user 118 (or viewer) may be more natural. In some further implementations, the speech conversion model 200 waits to determine/detect when the source speaker 104 stops speaking, using techniques such as voice activity detection, end-pointing, query end-detection, and the like, and prior to converting the respective input audio data 102 of the utterance 108 with atypical speech into the respective output spectrogram 222 of the synthesized standard fluent speech representation corresponding to the same utterance 114.
FIG. 2 shows a schematic diagram of an example speech conversion model 200 used by the speech conversion system 100 of FIG. 1. The speech conversion model 200 includes an encoder 210 and one or more decoders 220,220a-c. The encoder 210 is configured to encode the input audio data 102 into an encoded spectrogram 212. Here, the input audio data 102 includes a sequence of input spectrograms corresponding to the utterance 108 spoken by the source speaker 104. In some implementations, the encoder 210 includes a stack of Conformer blocks 400. In these embodiments, the encoder uses a convolutional layer to sub-sample the input audio data 102 and then processes the input audio data 102 with a stack of Conformer blocks 400. Each Conformer block 400 may include a feedforward layer, a self-attention layer, a convolution layer, and a second feedforward layer. In some examples, the stack of Conformer blocks 400 includes 17 layers of Conformer blocks, each layer having 512 states, 8 attention headers, and a 32×1 convolution kernel size. Fig. 4 provides a schematic diagram of an exemplary Conformer block. Encoder 210 may instead use a stack of transform blocks or lightweight convolution blocks instead of the Conformer blocks.
The spectrogram, phoneme, and field decoders 220,220a-c may each include a recurrent neural network-based architecture that each receives the shared encoded spectrogram 212 output by the encoder 210. The spectrogram decoder 220a may include a cross-attention mechanism 231,231a (also shown in fig. 3) configured to receive the shared encoded spectrogram 212 from the encoder 210. The spectrogram decoder 220a may further process the shared code spectrogram 212 using a plurality of long-short time memory (LSTM) layers 233,233a and a plurality of convolution layers 235. For example, the spectrogram decoder 220a may include five (5) LSTM layers 233a and five (5) conversion layers 235. The spectrogram decoder 220a may generate an output spectrogram 222. In some implementations, the spectrogram decoder 220a can generate the output spectrogram 222 directly from the encoded spectrogram 212 without performing any intermediate text-to-speech conversion on the textual representation corresponding to the transcription of the utterance.
In the example shown, the field decoder 220b includes a corresponding cross-attention mechanism 231,231b configured to receive a shared encoded spectrogram from the encoder, followed by two long-term memory (LSTM) layers 233,233b and Softmax layers 245,245a that output a textual representation 201 of the transcription corresponding to the utterance.
Similar to the field decoder 220b, the phoneme decoder 220c may also include a cross-attention mechanism 231,231c configured to receive the shared encoded spectrogram 212 from the encoder 210, followed by two long-term memory (LSTM) layers 233,233c and Softmax layers 245,245b of the phoneme representation of the output utterance 202.
FIG. 3 illustrates a schematic diagram 300 of an exemplary hybrid frame rate processing scheme for accelerating training and inference times of the speech conversion model 200 of FIG. 1. The hybrid frame rate processing scheme may improve the memory consumption and training speed of the encoder 220 in speech-to-speech processing (i.e., the generation of the output spectrogram 222 by the spectrogram decoder 220 a). Unlike other models, such as Automatic Speech Recognition (ASR) or text-to-speech (TTS), where the predicted target or input sequence is text, the speech-to-speech conversion model uses sound frames as input sequences while also outputting sound frame sequences. Since the number of output audio frames is much greater than the number of output text sequences, speech-to-speech conversion requires increased computation compared to ASR or TTS models. In some cases, the model complexity becomes a quadratic function based on the number of input frames due to the self-attention mechanism of encoder 210. Furthermore, memory usage may be proportional to the length of the acoustic sequence, resulting in smaller batch sizes and slower training speeds. As shown in fig. 3, the hybrid frame rate processing scheme can greatly reduce the number of computations and subsequently speed up training.
In some implementations, the hybrid frame rate processing scheme uses convolutional sub-sampling with a 3×3 kernel size and a 2×2 Stride (Stride), resulting in a sub-sampling factor of 4. In these embodiments, the transposed convolutional network comprises a layer of Convolutional Neural Network (CNN) with 512 channels, with filter sizes of 4 and 2 time steps. Further, the hybrid frame rate scheme may include extracting 128-dim log-mel spectrogram features from the input speech using a 30ms window and a 10ms frame shift, which may be provided to the encoder 210. In one example embodiment, the goal of the spectrogram decoder 220a includes 1025-dim Short Time Fourier Transform (STFT) magnitudes calculated with a 50ms frame length, 12.5ms shift, and 2048 point FFT.
The processing scheme may begin with spectrogram encoder 210 receiving 10 millisecond (ms) speech samples of input spectrogram 102. Encoder 210 may first process 10ms speech samples using a first sub-sampling layer 305 comprising a plurality of CNN layers. The sub-sampling by the first sub-sampling layer 305 is implemented using a CNN layer, which is then assembled in time to reduce the number of frames processed by the initial Conformer blocks in the stack of Conformer blocks 400,400 a-b. The CNN may sub-sample 10ms speech to a 40ms representation, and then provide the 40ms representation to the initial set 400a of Conformer blocks. The initial set 400a of Conformer blocks may process a 40ms representation, which is then provided to the second sub-sampling layer 315. The second sub-sampling layer 315 may be disposed between the initial set of Conformer blocks 400a and the final set of Conformer blocks 400 b. In some examples, the initial set of Conformer blocks 400a includes four Conformer blocks and the final set of Conformer blocks 400b includes 13 Conformer blocks such that the total number of Conformer blocks of encoder 210 is 17. Here, the second sub-sampling layer 315 may be configured to sub-sample the hidden representation 308 output by the last Conformer block in the initial set 400a of Conformer blocks to reduce the number of frames processed by the final set 400b of Conformer blocks. For example, the second sub-sampling layer 315 may be configured to sub-sample the 40ms hidden representation 308 output by the initial set 400a of Conformer blocks into a corresponding 80ms representation 318. At the end of the last Conformer block of the final set 400b of Conformer blocks, the encoder 210 upsamples the 80ms hidden representation 322 using the upsampling layer 325. The upsampling layer 325 may comprise a single transposed CNN layer configured to upsample the 80ms hidden representations 322 output by the final Conformer blocks of the final set 400b of Conformer blocks to corresponding 40ms representations of the encoded spectrogram 212 to increase the number of frames of the encoded spectrogram 212.
The encoded spectrogram 212 may be received by a cross-attention mechanism 231a disposed between the encoder 210 and the spectrogram decoder 220 a. In some implementations, the cross-attention mechanism 231a is included in the spectrogram decoder 220 a. The spectrogram decoder 220a may reduce the 40ms representation of the encoded spectrogram 212 to a 25ms representation using the cross-attention mechanism 231a, which may then be provided to the LSTM 233a. The output of LSTM 233a may be reduced by a reduction factor 335 and spectrogram decoder 220a may output the resulting output spectrogram 222 at a final size of 12.5 ms. The output spectrogram 222 may be provided to a vocoder 375 (fig. 1) for conversion into a corresponding time-domain audio waveform of synthesized speech.
The above examples are not limiting. Encoder 210 may receive speech samples of any suitable length for processing. Encoder 210 may then process, sub-sample, or up-sample the speech samples to produce an encoded spectrogram 212, which may be of any suitable length. Similarly, decoder 220a may then process encoded spectrogram 212 to produce an output spectrogram 222 of appropriate length.
In experiments, the mixed frame rate scheme can achieve different effects through different sub-sampling and up-sampling settings given the same encoder frame shift. For example, increased sub-sampling typically results in accelerated training, but causes regression in spectrograms that are difficult to recover by upsampling. Information loss may be evaluated based on sparsity of the feedforward neural network weighting matrix in the final Conformer block of the final set 400b of encoder 210Conformer blocks. The cumulative change ratio (CPV) can be calculated by the following formula:
Wherein s is i Is the i-th singular value of the matrix, k is the number of singular values we consider, and D is the size of the feed forward matrix (d=512). For any given k, a larger CPV indicates that the network is able to learn the data structure with the sparsity index k. Smaller k values represent a sparse matrix structure.
Fig. 4 provides an example of a Conformer block 400 from a stack of Conformer layers of encoder 210. Conformer block 400 includes a first half feedforward layer 410, a second half feedforward layer 440, and a multi-headed self-attention block 420 and convolution layer 430 disposed between the first and second half feedforward layers 410,440, and a cascade operator 405. The first half feed-forward layer 410 processes the input audio data 102 comprising the input mel spectrogram sequence. Subsequently, the multi-headed self-attention block 420 receives the input audio data 102 concatenated with the output of the first half feedforward layer 410. Intuitively, the role of the multi-headed self-attention block 420 is to summarize the noise context for each input frame to be enhanced separately. The convolution layer 430 sub-samples the output of the multi-headed self-attention block 420 concatenated with the output of the first half feedforward layer 410. Thereafter, the second half feedforward layer 440 receives the convolutional layer 430 output and a concatenation of the multi-headed self-attention block 420. The layer normalization module 450 processes the output from the second half feed forward layer 440. Mathematically, the Conformer block 400 transforms the input signature x using the modulation signature m to produce the output signature y as follows:
x″＝x′+MHCA(x′,n′)
x″′＝x′⊙r(x″)+h(x″)
x″″＝x′+MHCA(x′,x″′)
Fig. 5 illustrates a training process 500 for the speech conversion model 200. In some embodiments, the process 500 employs a two-step training technique. First, the speech conversion model 200 is pre-trained on typical speech from a large pool of speakers to obtain a many-to-one speech conversion model 200, resulting in a speaker-independent ASR/conversion basis model. The target speech for training may be speech synthesized from a reference copy in a predetermined speech reflecting a typical speech. To achieve personalization, any parameter of the base model may be fine-tuned to speech from a single input speaker (e.g., a deaf speaker) to obtain a one-to-one speech conversion model from atypical speech to typical speech (speaker-dependent ASR) models.
Referring to fig. 5, process 500 begins with pre-training speech conversion model 200 using pre-training data 505. The pre-trained model is a technique for initializing the model, which may then be further fine-tuned 510 based on additional training data. For the speech conversion model 200, pre-training may include launching the speech conversion model 200 with pre-training data 505, the pre-training data 505 including a plurality of spoken utterances by a typical speaker associated with typical fluent speech. The pre-training data 505 may also include spoken utterances paired with canonical fluent speech representations of corresponding ground-truth (ground-trunk) syntheses of the spoken utterances.
Process 500 may then fine tune parameters of pre-trained speech conversion model 200 for atypical speech. The training process may include training either of the encoder 210 or the decoders 220,220a-c, either alone or in any suitable combination. Process 500 includes feeding training input 510 to speech conversion model 200. In some implementations, the training input 510 includes a plurality of atypical speech samples spoken by one or more speakers associated with atypical speech. Further, training input 510 may be labeled with a label 520 indicating a target output associated with training input 510. Upon receiving training input 510, speech conversion model 200 may generate output 515 (e.g., replica 201, phoneme representation 202, output spectrogram 222). The speech conversion model 200 can process the training input 510 in the manner described with respect to any of fig. 2-4 or any other suitable manner for speech conversion.
In some implementations, the output 515 is used by the loss function 530 to generate the loss 540. That is, the loss function 530 compares the output 515 and the tag 520 to produce a loss 540, wherein the loss 540 indicates the difference between the tag 520 (i.e., the target output) and the output 515. The loss function 350 may implement any suitable technique to determine the loss, such as regression loss, mean square error, mean square log error, mean square absolute error, binary classification, binary cross entropy, hinge loss (Hinge loss), multi-class loss, and the like. The loss 540 may then be fed directly to the speech conversion model 200. Here, speech conversion model 200 processes loss 540 and adjusts one or more parameters of speech conversion model 200 to account for loss 540.
Fig. 6 is a flow chart of an exemplary arrangement of operations of a computer-implemented method 600 for performing speech conversion. For example, the method 600 may be performed by various elements of the example speech conversion system 100 of fig. 1. At operation 610, the method includes receiving an input spectrogram 102 corresponding to the utterance 108 as an input to an encoder 210 of the speech conversion model 200, the encoder 210 comprising a stack of self-attention blocks 400. At operation 620, the method 600 includes generating the encoded spectrogram 212 as an output of the encoder 210. At operation 630, the method 600 includes receiving the encoded spectrogram 212 output from the encoder 210 as an input to the spectrogram decoder 220a of the speech conversion model 200. At operation 640, the method 600 includes generating, as output from the spectrogram decoder 220a, an output spectrogram 222 corresponding to the synthesized canonical fluency speech representation of the same utterance 114.
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform tasks. In some examples, a software application may be referred to as an "application," app, "or" program. Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
The non-transitory memory may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by the computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., typically for firmware such as a boot program). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
FIG. 7 is a schematic diagram of an exemplary computing device 700 that may be used to implement the systems and methods described herein. Computing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
Computing device 700 includes a processor 710, memory 720, storage device 730, high-speed interface/controller 740 coupled to memory 720 and high-speed expansion ports 750, and low-speed interface/controller 760 coupled to low-speed bus 770 and storage device 730. Each of the components 710,720,730,740,750 and 760 are interconnected using various buses, and may be mounted on a common motherboard or in other manners as appropriate. Processor 710 may process instructions for execution within computing device 700, including instructions stored in memory 720 or on storage device 730, to display graphical information for a Graphical User Interface (GUI) on an external input/output device, such as display 780 coupled to high speed interface 740. In other embodiments, multiple processors and/or multiple buses, as well as multiple memories and memory types may be used, as appropriate. Further, multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multiprocessor system). The processor 710 may be referred to as data processing hardware 710 residing on the remote server 112, on one or both of the computing devices 110,116, or on any combination of the remote server and the computing devices 110, 116. The memory 710 may be referred to as memory hardware 720 residing on the remote server 112, on one or both of the computing devices 110,116, or on any combination of the remote server and the computing devices 110, 116.
Memory 720 stores information non-instantaneously within computing device 700. Memory 720 may be a computer-readable medium, a volatile memory unit or a non-volatile memory unit. Non-transitory memory 720 may be a physical device for temporarily or permanently storing programs (e.g., sequences of instructions) or data (e.g., program state information) for use by computing device 700. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electrically erasable programmable read-only memory (EEPROM) (e.g., typically for firmware such as a boot program). Examples of volatile memory include, but are not limited to, random Access Memory (RAM), dynamic Random Access Memory (DRAM), static Random Access Memory (SRAM), phase Change Memory (PCM), and magnetic disk or tape.
Storage device 730 is capable of providing mass storage for computing device 700. In some implementations, the storage device 730 is a computer-readable medium. In various embodiments, storage device 730 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In a further embodiment, the computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer-or machine-readable medium, such as memory 720, storage device 730, or memory on processor 710.
The high speed controller 740 manages bandwidth-intensive operations for the computing device 700, while the low speed controller 760 manages lower bandwidth-intensive operations. This allocation of responsibilities is merely exemplary. In some implementations, high-speed controller 740 is coupled to memory 720, display 780 (e.g., via a graphics processor or accelerator), and high-speed expansion port 750, high-speed expansion port 750 accepting various expansion cards (not shown). In some implementations, a low-speed controller 760 is coupled to the storage device 730 and the low-speed expansion port 790. The low-speed expansion port 790, which may include various communication ports (e.g., USB, bluetooth, ethernet, wireless ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device, such as a switch or router, for example, through a network adapter.
Computing device 700 may be implemented in a number of different forms, as shown in the figures. For example, it may be implemented as a standard server 700a or multiple times in a group of such servers 700a, a laptop computer 700b, or as part of a rack server system 700 c.
Various implementations of the systems and techniques described here can be realized in digital electronic and/or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various embodiments may include embodiments in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
These computer programs (also known as programs, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. The terms "machine-readable medium" and "computer-readable medium" as used herein refer to any computer program product, non-transitory computer-readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term "machine-readable signal" refers to any signal used to provide machine instructions and/or data to a programmable processor.
The processes and logic flows described in this specification can be performed by one or more programmable processors (also referred to as data processing hardware) executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. Typically, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disk; CD ROM and DVD-ROM discs. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display) monitor, or a touch screen for displaying information to the user and, optionally, a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user may be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on a user's client device in response to a request received from the web browser.
Various embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.
Claims (20)
1. A speech conversion model (200), comprising:
an encoder (210), the encoder (210) comprising a stack (400) of self-attention blocks, the encoder (210) configured to encode an input spectrogram (102) corresponding to an utterance (108); and
a spectrogram decoder (220 a), the spectrogram decoder (220 a) being configured to:
receiving as input an encoded spectrogram (212) from the encoder (210); and
an output spectrogram (222) corresponding to the synthesized speech representation of the utterance (108) is generated as an output.
2. The speech conversion model (200) according to claim 1, characterized in that,
the input spectrogram (102) corresponding to the utterance (108) is extracted from input speech spoken by a speaker (104) associated with atypical speech; and
the synthetic speech representation of the utterance (108) includes a synthetic canonical fluent speech representation of the utterance.
3. The speech conversion model (200) according to claim 1 or 2, further comprising a field decoder (220 b), the field decoder (220 b) being configured to:
-receiving as input the encoded spectrogram (212) from the encoder (210); and
A textual representation corresponding to a transcription (201) of the utterance (108) is generated as output.
4. The speech conversion model (200) of any of claims 1-3, further comprising a phoneme decoder (220 c), the phoneme decoder (220 c) configured to:
-receiving as input the encoded spectrogram (212) from the encoder (210); and
a phoneme representation (202) of the utterance (108) is generated as an output.
5. The speech conversion model (200) according to any of claims 1-4, wherein the stack of self-attention blocks (400) comprises a stack of Conformer blocks (400), each Conformer block having a multi-headed self-attention mechanism (420).
6. The speech conversion model (200) according to claim 5, wherein the encoder (210) further comprises a first sub-sampling layer (305), the first sub-sampling layer (305) being disposed before the stack (400) of Conformer blocks and configured to receive the input spectrogram (102), the first sub-sampling layer (305) comprising a convolutional neural network, cnN, layer, and subsequently being temporally pooled to reduce the number of frames processed by initial Conformer blocks in the stack (400) of Conformer blocks.
7. The speech conversion model (200) according to claim 6, wherein the encoder (210) further comprises a second sub-sampling layer (315), the second sub-sampling layer (315) being arranged between an initial set (400 a) of Conformer blocks in the stack (400) of Conformer blocks and a final set (400 b) of Conformer blocks in the stack (400) of Conformer blocks, the second sub-sampling layer (315) being configured to sub-sample a hidden representation output by a final Conformer block in the initial set (400 a) of Conformer blocks to reduce a number of frames processed by the final set (400 b) of Conformer blocks.
8. The speech conversion model (200) of claim 7, wherein the encoder (210) further comprises an upsampling layer (325) disposed after the stack (400) of Conformer blocks, the upsampling layer (325) comprising a single transpose CNN layer configured to upsample a hidden representation output by a final Conformer block in the stack (400) of Conformer blocks to increase a number of frames processed by a cross-attention mechanism (231 a) disposed between the encoder (210) and the spectrogram decoder (220 a).
9. The speech conversion model (200) according to any of claims 1-8, wherein the speech conversion model (200) is trained by a two-step training process (500), the two-step training process (500) comprising:
a first training step of pre-training the speech conversion model (200) on a plurality of spoken utterances of a typical speaker associated with typical fluent speech, each spoken utterance paired with a corresponding ground truth synthesis specification fluent speech representation of the utterance; and
a second training step of fine-tuning parameters of the pre-trained speech conversion model (200) based on a plurality of atypical speech samples spoken by speakers associated with atypical speech.
10. The speech conversion model (200) according to any of claims 1-9, wherein the spectrogram decoder (220 a) generates the output spectrogram (222) directly from the encoded spectrogram (212) without performing any intermediate text-to-speech conversion on a text representation corresponding to the transcription (201) of the utterance (108).
11. A computer-implemented method (600), characterized by causing data processing hardware (710), when the method is executed on the data processing hardware (710), to:
Receiving an input spectrogram (102) corresponding to an utterance (108) as input to an encoder (210) of a speech conversion model (200), the encoder (210) comprising a stack (400) of self-attention blocks;
generating an encoded spectrogram (212) as an output of the encoder (210);
-receiving the encoded spectrogram (212) generated as output of the encoder (210) as input to a spectrogram decoder (220 a) of the speech conversion model (200); and
an output spectrogram (222) corresponding to a synthesized speech representation of the utterance (108) is generated as an output of the spectrogram decoder (220 a).
12. The method (600) of claim 11, wherein,
the input spectrogram (102) corresponding to the utterance (108) is extracted from input speech spoken by a speaker (104) associated with atypical speech; and
the synthetic speech representation of the utterance includes a synthetic canonical fluent speech representation of the utterance.
13. The method (600) of claim 11 or 12, wherein the operations further comprise:
-receiving the encoded spectrogram (212) generated as output of the encoder (210) as input to a field decoder (220 b) of the speech conversion model (200); and
A textual representation corresponding to a transcription (201) of the utterance (108) is generated as an output of the field decoder (220 b).
14. The method (600) of any of claims 11-13, wherein the operations further comprise:
-receiving the encoded spectrogram (212) generated as output of the encoder (210) as input to a phoneme decoder (220 c) of the speech conversion model (200); and
a phoneme representation (202) of the utterance (108) is generated as an output of the phoneme decoder (220 c).
15. The method (600) of any of claims 11-14, wherein the stack (400) of self-attention blocks of the encoder (210) comprises a stack (400) of Conformer blocks, each Conformer block having a multi-headed self-attention mechanism (420).
16. The method (600) of claim 15, wherein the encoder (210) further comprises a first sub-sampling layer (305), the first sub-sampling layer (305) being disposed before the stack (400) of Conformer blocks and configured to receive the input spectrogram (102), the first sub-sampling layer (305) comprising a convolutional neural network, cnN, layer, and subsequently being pooled in time to reduce a number of frames processed by an initial Conformer block in the stack (400) of Conformer blocks.
17. The method (600) of claim 16, wherein the encoder (210) further comprises a second sub-sampling layer (315), the second sub-sampling layer (315) being disposed between an initial set (400 a) of Conformer blocks in the stack (400) of Conformer blocks and a final set (400 b) of Conformer blocks in the stack (400) of Conformer blocks, the second sub-sampling layer (315) being configured to sub-sample a hidden representation of a final Conformer block output in the initial set (400 a) of Conformer blocks) to reduce a number of frames processed by the final set (400 b) of Conformer blocks.
18. The method (600) of claim 17, wherein the encoder (210) further comprises an upsampling layer (325) disposed after the stack (400) of Conformer blocks, the upsampling layer (325) comprising a single transposed CNN layer configured to upsample hidden representations output by final Conformer blocks in the stack (400) of Conformer blocks to increase a number of frames processed by a cross-attention mechanism (231 a) disposed between the encoder (210) and the spectrogram decoder (220 a).
19. The method (600) of any of claims 11-18, wherein the speech conversion model (200) is trained using a two-step training process (500), the two-step training process (500) comprising:
A first training step of pre-training the speech conversion model (200) on a plurality of spoken utterances of a typical speaker associated with typical fluent speech, each spoken utterance paired with a corresponding ground truth synthesis specification fluent speech representation of the utterance; and
a second training step of fine-tuning parameters of the pre-trained speech conversion model based on a plurality of atypical speech samples spoken by speakers associated with atypical speech.
20. The method (600) of any of claims 11-19, wherein the spectrogram decoder (220 a) generates the output spectrogram (222) directly from the encoded spectrogram (212) without performing any intermediate text-to-speech conversion on a text representation corresponding to the transcription (201) of the utterance (108).
Applications Claiming Priority (4)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US63/166,954 | 2021-03-26 | ||
US202263312195P | 2022-02-21 | 2022-02-21 | |
US63/312,195 | 2022-02-21 | ||
PCT/US2022/020606 WO2022203922A1 (en) | 2021-03-26 | 2022-03-16 | Conformer-based speech conversion model |
Publications (1)
Publication Number | Publication Date |
---|---|
CN117396958A true CN117396958A (en) | 2024-01-12 |
Family
ID=85511086
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202280033462.6A Pending CN117396958A (en) | 2021-03-26 | 2022-03-16 | Speech conversion model based on convolution enhanced transformation neural network |
Country Status (3)
Country | Link |
---|---|
US (1) | US20230267949A1 (en) |
CN (1) | CN117396958A (en) |
WO (1) | WO2023158563A1 (en) |
-
2022
- 2022-03-16 CN CN202280033462.6A patent/CN117396958A/en active Pending
-
2023
- 2023-02-02 WO PCT/US2023/012239 patent/WO2023158563A1/en unknown
- 2023-02-02 US US18/163,848 patent/US20230267949A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
WO2023158563A1 (en) | 2023-08-24 |
US20230267949A1 (en) | 2023-08-24 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11605368B2 (en) | Speech recognition using unspoken text and speech synthesis | |
US9922641B1 (en) | Cross-lingual speaker adaptation for multi-lingual speech synthesis | |
Zhao et al. | Foreign Accent Conversion by Synthesizing Speech from Phonetic Posteriorgrams. | |
Zhang et al. | Improving sequence-to-sequence voice conversion by adding text-supervision | |
US20220310056A1 (en) | Conformer-based Speech Conversion Model | |
CN116018638A (en) | Synthetic data enhancement using voice conversion and speech recognition models | |
US11475874B2 (en) | Generating diverse and natural text-to-speech samples | |
US20220310059A1 (en) | Phonemes And Graphemes for Neural Text-to-Speech | |
Purohit et al. | Intelligibility improvement of dysarthric speech using mmse discogan | |
JP7393585B2 (en) | WaveNet self-training for text-to-speech | |
CN116601702A (en) | End-to-end nervous system for multi-speaker and multi-language speech synthesis | |
Li et al. | End-to-end mongolian text-to-speech system | |
CN117642814A (en) | Robust direct speech-to-speech translation | |
CN117396958A (en) | Speech conversion model based on convolution enhanced transformation neural network | |
US11335321B2 (en) | Building a text-to-speech system from a small amount of speech data | |
US20230360632A1 (en) | Speaker Embeddings for Improved Automatic Speech Recognition | |
Saeki | Real-time, full-band, high-quality neural voice conversion with sub-band modeling and data-driven phase estimation | |
Kang et al. | A study on acoustic parameter selection strategies to improve deep learning-based speech synthesis | |
WO2023288169A1 (en) | Two-level text-to-speech systems using synthetic training data | |
WO2024091526A1 (en) | Residual adapters for few-shot text-to-speech speaker adaptation | |
WO2023277993A1 (en) | Advancing the use of text and speech in asr pretraining with consistency and contrastive losses | |
Madan et al. | Voice Text Concurrent Transmission Based on Locale | |
Jeethendra et al. | Recent Trends in Speech Recognition approaches and its application for Telugu Language for Speech & Hearing Impaired |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |