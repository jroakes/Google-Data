US20160117324A1 - Ranking labeled instances extracted from text - Google Patents
Ranking labeled instances extracted from text Download PDFInfo
- Publication number
- US20160117324A1 US20160117324A1 US13/105,679 US201113105679A US2016117324A1 US 20160117324 A1 US20160117324 A1 US 20160117324A1 US 201113105679 A US201113105679 A US 201113105679A US 2016117324 A1 US2016117324 A1 US 2016117324A1
- Authority
- US
- United States
- Prior art keywords
- class
- instance
- isa relationship
- frequency
- ranking
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G06F17/3053—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/35—Clustering; Classification
- G06F16/353—Clustering; Classification into predefined classes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/951—Indexing; Web crawling techniques
-
- G06F17/30598—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N5/00—Computing arrangements using knowledge-based models
- G06N5/02—Knowledge representation; Symbolic representation
- G06N5/022—Knowledge engineering; Knowledge acquisition
-
- G06N99/005—
Definitions
- IsA repositories are used to map class labels to instances, where the class labels and the instances are strings occurring in the text.
- Classes pertaining to unrestricted domains e.g., west african countries, science fiction films, slr cameras
- IsA repositories which can be mapped to their instances (cape verde, avatar, canon eos 7d) play a disproportionately important role in Web search. They occur prominently in Web documents and among search queries submitted most frequently by Web users. They also serve as building blocks in formal representation of human knowledge, and are useful in a variety of text processing tasks.
- IsA repositories are one tool used for processing text in this manner.
- the relative ranking of documents returned for a query directly affects the outcome of the search.
- the relative ranking among class labels extracted for a given instance as can be done using IsA repositories influences many applications using the class labels. It is desirable to provide technology that can improve the usefulness of such rankings.
- the present invention relates the development of rankings for classes associated with a given instance that can be applied to the interpretation of text by computing devices in a variety of settings.
- the use of features other than those computed over an underlying document collection, such as popularity in a training set of search queries, of the terms in the class labels, is described for the purpose of determining, or improving, the relative ranking of various class labels given an instance.
- an “instance” is a text string including one or more terms, typically a word or phrase, which could occur in a search query in an Internet search engine.
- a “class” is a class label than can be applied to the instance I.
- a class label can also be a text string including one or more terms, typically a word or phrase.
- An instance:class association I:C is a data structure that links a class with an instance, and can be made by manually coding the associations, by using extraction pattern-based analysis of web documents, and by the use of other technologies.
- a class C is associated with an instance I if it is a member of a set or list of classes assigned as attributes of the instance I in a database, whereby each class C in the list or set is associated with the instance I.
- a group of instance:class associations I:C for a given instance I can comprise a data structure including a linked list of classes mapped to the given instance I, whereby each class C in the linked list is associated with the instance I.
- an instance:class association I:C can comprise a data structure embodied in a parsable electronic document coded using a markup language, like XML, HTML, and SGML.
- An IsA repository is a data structure that includes a number of such instance:class associations I:C, in which the instance:class associations I:C can be ranked for given instance I, using the technology described herein.
- FIG. 1 is a high level block diagram of a computer system configured for processing instance:class associations as described herein.
- FIG. 2 is a simplified diagram of a memory storing an IsA repository including ranked instance:class associations produced as described herein.
- FIG. 3 is a simplified diagram of a computer program product storing executable instructions containing logic for processing instance:class associations as described herein.
- FIG. 4 is a simplified flowchart of a computer implemented process for ranking and re-ranking instance:class associations as described herein.
- a technology is described here for producing an IsA repository that can take advantage of the co-occurrence of a class and an instance within search queries from a training set of queries, such as anonymized query logs from an Internet search engine.
- the classes can be associated with instances using extraction pattern technology, using manual processes, or otherwise.
- the lists of classes associated with an instance can be re-ranked to promote classes that co-occur with the instance in the queries of the training set.
- the technology can be used for the ranking of candidate extractions (i.e. instance:class associations) so that the less relevant ones are ranked lower, as opposed to removed when deemed unreliable based on various clues.
- the accuracy of the associations of classes with instances, and of the ranking of the classes associated with a given instance, achieved using the present technology exceeds that of previous work, over evaluation sets of instances associated with Web search queries.
- FIG. 1 is a simplified block diagram of a computer system 210 suitable for use with embodiments of the technology.
- Computer system 210 typically includes at least one processor 214 which communicates with a number of peripheral devices via bus subsystem 212 .
- peripheral devices may include a storage subsystem 224 , comprising for example memory devices and a file storage subsystem, user interface input devices 222 , user interface output devices 220 , and a network interface subsystem 216 .
- the input and output devices allow user interaction with computer system 210 .
- Network interface subsystem 216 provides an interface to outside networks, including an interface to communication network 218 , and is coupled via communication network 218 to corresponding interface devices in other computer systems.
- Communication network 218 may comprise many interconnected computer systems and communication links. These communication links may be wireline links, optical links, wireless links, or any other mechanisms for communication of information. While in one embodiment, communication network 218 is the Internet, in other embodiments, communication network 218 may be any suitable computer network.
- User interface input devices 222 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices.
- pointing devices such as a mouse, trackball, touchpad, or graphics tablet
- audio input devices such as voice recognition systems, microphones, and other types of input devices.
- use of the term “input device” is intended to include all possible types of devices and ways to input information into computer system 210 or onto communication network 218 .
- User interface output devices 220 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices.
- the display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image.
- the display subsystem may also provide non-visual display such as via audio output devices.
- output device is intended to include all possible types of devices and ways to output information from computer system 210 to the user or to another machine or computer system.
- Storage subsystem 224 stores the basic programming and data constructs that provide the functionality of some or all of the tools described herein, including the logic for storing a training set of queries and extracted instance:class associations, and including logic for ranking and re-ranking instance:class associations utilizing the training set in one of the ranking and re-ranking steps.
- the storage subsystem can also store an IsA repository that is compiled according to the processes described herein.
- the storage subsystem can also store programming and data constructs for applying the IsA repository in processing text, including mapping instance:class associations to text representing natural language, and to rank classes associated with instances extracted from the text.
- These software modules are generally executed by processor 214 alone or in combination with other processors.
- Memory used in the storage subsystem can include a number of memories including a main random access memory (RAM) for storage of instructions and data during program execution and a read only memory (ROM) in which fixed instructions are stored.
- a file storage subsystem can provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges.
- the databases and modules implementing the functionality of certain embodiments may be stored by file storage subsystem in the storage subsystem 224 , or in other machines accessible by the processor.
- Bus subsystem 212 provides a mechanism for letting the various components and subsystems of computer system 210 communicate with each other as intended. Although bus subsystem 212 is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple busses.
- Computer system 210 can be of varying types including a personal computer, a portable computer, a workstation, a computer terminal, a network computer, a television, a mainframe, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computer system 210 depicted in FIG. 1 is intended only as a specific example for purposes of illustrating the preferred embodiments. Many other configurations of computer system 210 are possible having more or less components than the computer system depicted in FIG. 1 .
- FIG. 2 illustrates a product storing an IsA repository 280 including a number of ranked lists of instance:class associations produced according to the technology described herein, in a computer readable memory 240 .
- the memory 240 can comprise a medium for example associated with file storage subsystem 224 , and/or with network interface subsystem 216 , or can comprise a data storage medium in a separate device.
- the medium used for the computer readable memory 240 can be a non-transitory medium, such as a hard disk, a floppy disk, a CD-ROM, an integrated circuit memory device, an optical medium, and removable media cartridge.
- An IsA repository produced as described herein can also be embodied by data coded on a transitory medium, such as a radio communication channel.
- FIG. 3 illustrates a computer program product according to the technology described herein.
- the computer program product includes a computer readable memory 245 which is shown storing computer instructions 285 executable by a computing device that includes logic according to the technology described herein, for storing a training set of queries and extracted instance:class associations, and including logic for ranking and re-ranking instance:class associations utilizing the training set in one of the ranking and re-ranking steps.
- the computer readable memory 245 can be a medium for example associated with file storage subsystem 228 , and/or with network interface subsystem 216 , or be a separate memory device.
- the medium used for the computer readable memory can be a non-transitory medium, such as a hard disk, a floppy disk, a CD-ROM, an optical medium, and removable media cartridge.
- a computer program product as described herein can also be embodied by instructions coded on a transitory medium, such as a radio communication channel.
- FIG. 4 is a basic flowchart for a process for ranking and re-ranking instance:class associations.
- a set of instance:class associations which may be unranked is provided as input ( 300 ).
- the input set of instance:class associations can be derived for example from a text source using the extraction pattern technology.
- the classes associated with a given instance I are scored using a first scoring rule ( 301 ).
- the first scoring rule can be based on processing a text source 310 , which may or may not be the same text source from which the instance:class associations in the input set were derived.
- the classes in the set are ranked to produce a ranked list L 1 (I) according to the first scores ( 302 ).
- a first ranked list L 1 (I) of instance:class associations (I:C) is provided as input to a process to re-rank the list, where steps 300 - 302 may be performed externally or other technology may be used to produce the first ranked list L 1 (I).
- the rank of a particular instance:class association in the ranked list L 1 (I) can be assigned using a scoring formula.
- a scoring formula can be applied by a computing device executing a computer program over a text source 310 , such as a library of Web documents that includes unstructured text and search queries.
- the collection of queries could be a sample of a large number of unique, fully-anonymized queries in English submitted by Web users in a selected time period, such as the year 2009. Each query can be accompanied by its frequency of occurrence in the logs associated with the library.
- the document collection could consist for example of a sample of a large number of documents in English.
- the textual portion of the documents could be cleaned of HTML, tokenized, split into sentences and part-of-speech tagged using known part-of-speech tagger processes operating over sentences from text.
- a score Score(I:C) for a particular instance:class association can be calculated by a scoring formula, such as the following:
- Score( I:C ) Size( ⁇ Pattern( I:C ) ⁇ ) 2 ⁇ Freq( I:C )
- a computing device can be used to determine the square of the size (i.e. number of members) of the set of extraction patterns that return the particular instance:class association (Size( ⁇ Pattern (I:C) ⁇ )2); to determine the frequency of occurrence (Freq(I:C)) of the instance:class association in the source, and to multiply these numbers to generate a score for each instance:class association.
- a computer program can produce a ranked list of instance:class associations.
- the ranked list L 1 (I) can be ranked using the formula set out above, or by other ranking processes.
- an input to the ranking process described next can be a set of entries without initial ranking.
- This input list L 1 (I) is processed next to change the ranking of instance:class associations, and to score the instance:class associations according to a second scoring rule ( 303 ).
- the second scoring rule can compute scores based on information derivable from a training set of queries 311 .
- the scores can be determined according to the popularity of class terms in queries in the training set.
- the training set 311 can comprise a repository of anonymized queries.
- the second scoring rule can be executed over the instance:class associations in the first list L 1 (I).
- a computing device executing a computer program can be used to compute a score for a given class C i , that contains a set of terms T j (ignoring terms classified as stop words), by determining a subset Q of queries from the repository, whose members Q k contain the instance I within the query, and contain the term T j within the query.
- the subset Q of queries is further constrained by requiring that the members Q k must contain the instance I as a prefix in the query (i.e. occur as the first word or phrase in the query), and must contain the term T j anywhere else in the query (i.e. not in the prefix formed by the instance I).
- each instance:class association is assigned a score by applying an appropriate statistical function over the frequencies in the subset Q of the terms of the class C.
- the statistical function is the geometric mean of the frequencies of the T j in class C i , again ignoring stop words.
- An alternate statistical function could be a median, for example.
- a computer program for processing a list to change the ranking of instance:class associations in the list according to the popularity of class terms in queries can have a logical structure set out in pseudocode, as follows:
- Q collection (set) of Web search queries
- a second list L 2 (I) can be produced, using the scores produced according to the popularity of class terms in queries, to assign ranks to the instance:class associations ( 304 ).
- rank of the tied instance:class associations can be adjusted, according to a suitable rule.
- the tied instance:class associations have their scores adjusted to preserve the relative rank from the input list L 1 (I).
- a merged list can be produced (305) to reduce noise that may occur using a ranking based solely on popularity of class terms in queries. Relying on query logs to estimate the relevance of class labels can expose the ranking method to significant noise.
- useful class labels e.g., authors
- the ranked list L 2 (I) in some embodiments may be too noisy to be used directly as rankings in an IsA repository or other tool applying class rankings to instances.
- a merged list can be produced by a process that assigns a score based on a function of the ranks of the classes in the first list L 1 (I), or another ranked list, relative to the ranks of classes in the second list L 2 (I). In other embodiments, more than two ranked lists can be merged.
- One function that can be used to merge the first and second lists can be characterized as follows:
- This function operates to compute a score for an instance:class association I:C, that results in a new ranking in decreasing order of the inverse of the average rank (instance:class associations in the list L 1 and L 2 that have a higher rank will tend to have a lower MergedScore).
- the number “2” in the example formula corresponds to the number of lists being merged, which in this case is 2.
- the term Rank(I:C, Li) is the rank of the instance:class association for class C in list Li. The rank is set to a high number, such as 1000, if the class does not occur in the list Li.
- the scores of one of the lists can be used as a secondary ranking criterion. In one example, the scores for the first list L 1 (I) are used for this secondary ranking criterion.
- the merged list is stored ( 306 ).
- the merged list is a new list of instance:class associations usable in an IsA repository. By using only the relative ranks of the class labels within the input lists, and not on their scores, the outcome of the merging is less sensitive to how class labels of a given instance are scored.
- the merged list can be applied in processing text ( 307 ), including natural language text.
- the technology described herein includes a method that can be performed by a computing device.
- One method according to this technology processes instance:class associations, in which the instances comprise text, and the classes comprise text labels for the instances, for use in analysis of language by a computing device.
- This method comprises computing scores for classes in a set of classes associated with a given instance, the score for a particular class based upon occurrence in a set of queries of a term or terms in the particular class and occurrence in the set of queries of the given instance.
- the computing device can then store a ranking of instance:class associations for the given instance in memory, the ranking based on the scores.
- the process of computing scores for classes includes, for a given class C i , that contains a set of terms T j , determining a subset of queries Q from the set of queries, whose members Q k contain the text of the given instance I within the query, and contain the term T j within the query; computing a frequency of each term T j of class C i in the subset of queries Q; and assigning a score by applying a statistical function, such as a geometric mean, over the frequency of the terms of the class C i .
- a statistical function such as a geometric mean
- the subset of queries Q over which the score is determined is further constrained by requiring that the members Q k contain the instance I as a prefix in the query, and contain the term T j outside of the prefix in the query.
- a method includes merging a first ranked list of instance:class associations for the given instance with the stored ranking for the given instance, produced using the process above, to produce merged scores for the set of classes associated with the given instance I.
- a computing device can store a changed ranking of instance:class associations for the given instance based on the merged scores. The changed ranking based on the merged scores can be applied to associate classes with instances derived from processing text.
- a method that includes:
- the first ranked list can be produced by determining the square of a size of a set of extraction patterns that return the particular instance:class association (Size ⁇ Pattern (I:C) ⁇ )2 over a text source; determining a frequency of occurrence (Freq(I:C)) of the instance:class association in the text source; and multiplying the square of the size by the frequency to generate a score for each instance:class association for the given instance.
- the technology disclosed herein can be implemented by a product that comprises a memory storing the rankings of instance:class associations produced using the processes described herein.
- the technology disclosed also may be practiced as a computer program product or an article of manufacture.
- This article of manufacture includes a non-transitory memory that stores computer instructions.
- the computer instructions when run on suitable hardware, perform any of the methods described herein.
- the computer instructions when combined with suitable hardware, produce the devices described.
Abstract
Technologies for development of IsA repositories are described that can be applied to the interpretation of text by computing devices in a variety of settings. The use of features other than those computed over an underlying document collection, such as popularity in search queries of the terms in class labels, is described, for the purpose of determining, or improving, the relative ranking of various class labels, given a class instance.
Description
- A tool known as an “IsA” repository has been used to support computer-based interpretation of text, for ranking and refining search results, for example, and for other purposes. IsA repositories are used to map class labels to instances, where the class labels and the instances are strings occurring in the text. Classes pertaining to unrestricted domains (e.g., west african countries, science fiction films, slr cameras) which can be mapped to their instances (cape verde, avatar, canon eos 7d) play a disproportionately important role in Web search. They occur prominently in Web documents and among search queries submitted most frequently by Web users. They also serve as building blocks in formal representation of human knowledge, and are useful in a variety of text processing tasks. IsA repositories are one tool used for processing text in this manner.
- In the automatic offline acquisition of fine-grained, labeled classes of instances to form an IsA repository, some of the extracted class labels are inevitably less useful (works) or spurious (car makers) for an associated instance (avatar).
- In web search, the relative ranking of documents returned for a query directly affects the outcome of the search. Similarly, the relative ranking among class labels extracted for a given instance as can be done using IsA repositories, influences many applications using the class labels. It is desirable to provide technology that can improve the usefulness of such rankings.
- The present invention relates the development of rankings for classes associated with a given instance that can be applied to the interpretation of text by computing devices in a variety of settings. The use of features other than those computed over an underlying document collection, such as popularity in a training set of search queries, of the terms in the class labels, is described for the purpose of determining, or improving, the relative ranking of various class labels given an instance.
- In this description, an “instance” is a text string including one or more terms, typically a word or phrase, which could occur in a search query in an Internet search engine. A “class” is a class label than can be applied to the instance I. A class label can also be a text string including one or more terms, typically a word or phrase.
- An instance:class association I:C is a data structure that links a class with an instance, and can be made by manually coding the associations, by using extraction pattern-based analysis of web documents, and by the use of other technologies. In one data structure example, a class C is associated with an instance I if it is a member of a set or list of classes assigned as attributes of the instance I in a database, whereby each class C in the list or set is associated with the instance I. Also, a group of instance:class associations I:C for a given instance I can comprise a data structure including a linked list of classes mapped to the given instance I, whereby each class C in the linked list is associated with the instance I. In another example, an instance:class association I:C can comprise a data structure embodied in a parsable electronic document coded using a markup language, like XML, HTML, and SGML. An IsA repository is a data structure that includes a number of such instance:class associations I:C, in which the instance:class associations I:C can be ranked for given instance I, using the technology described herein.
-
FIG. 1 is a high level block diagram of a computer system configured for processing instance:class associations as described herein. -
FIG. 2 is a simplified diagram of a memory storing an IsA repository including ranked instance:class associations produced as described herein. -
FIG. 3 is a simplified diagram of a computer program product storing executable instructions containing logic for processing instance:class associations as described herein. -
FIG. 4 is a simplified flowchart of a computer implemented process for ranking and re-ranking instance:class associations as described herein. - The following detailed description is made with reference to the figures. Preferred embodiments are described to illustrate the present invention, not to limit its scope, which is defined by the claims. Those of ordinary skill in the art will recognize a variety of equivalent variations on the description that follows.
- A technology is described here for producing an IsA repository that can take advantage of the co-occurrence of a class and an instance within search queries from a training set of queries, such as anonymized query logs from an Internet search engine. The classes can be associated with instances using extraction pattern technology, using manual processes, or otherwise. The lists of classes associated with an instance can be re-ranked to promote classes that co-occur with the instance in the queries of the training set.
- The technology can be used for the ranking of candidate extractions (i.e. instance:class associations) so that the less relevant ones are ranked lower, as opposed to removed when deemed unreliable based on various clues. The accuracy of the associations of classes with instances, and of the ranking of the classes associated with a given instance, achieved using the present technology, exceeds that of previous work, over evaluation sets of instances associated with Web search queries.
-
FIG. 1 is a simplified block diagram of acomputer system 210 suitable for use with embodiments of the technology.Computer system 210 typically includes at least oneprocessor 214 which communicates with a number of peripheral devices viabus subsystem 212. These peripheral devices may include astorage subsystem 224, comprising for example memory devices and a file storage subsystem, userinterface input devices 222, userinterface output devices 220, and anetwork interface subsystem 216. The input and output devices allow user interaction withcomputer system 210.Network interface subsystem 216 provides an interface to outside networks, including an interface tocommunication network 218, and is coupled viacommunication network 218 to corresponding interface devices in other computer systems.Communication network 218 may comprise many interconnected computer systems and communication links. These communication links may be wireline links, optical links, wireless links, or any other mechanisms for communication of information. While in one embodiment,communication network 218 is the Internet, in other embodiments,communication network 218 may be any suitable computer network. - User
interface input devices 222 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices. In general, use of the term “input device” is intended to include all possible types of devices and ways to input information intocomputer system 210 or ontocommunication network 218. - User
interface output devices 220 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices. The display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image. The display subsystem may also provide non-visual display such as via audio output devices. In general, use of the term “output device” is intended to include all possible types of devices and ways to output information fromcomputer system 210 to the user or to another machine or computer system. -
Storage subsystem 224 stores the basic programming and data constructs that provide the functionality of some or all of the tools described herein, including the logic for storing a training set of queries and extracted instance:class associations, and including logic for ranking and re-ranking instance:class associations utilizing the training set in one of the ranking and re-ranking steps. The storage subsystem can also store an IsA repository that is compiled according to the processes described herein. The storage subsystem can also store programming and data constructs for applying the IsA repository in processing text, including mapping instance:class associations to text representing natural language, and to rank classes associated with instances extracted from the text. These software modules are generally executed byprocessor 214 alone or in combination with other processors. - Memory used in the storage subsystem can include a number of memories including a main random access memory (RAM) for storage of instructions and data during program execution and a read only memory (ROM) in which fixed instructions are stored. A file storage subsystem can provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges. The databases and modules implementing the functionality of certain embodiments may be stored by file storage subsystem in the
storage subsystem 224, or in other machines accessible by the processor. -
Bus subsystem 212 provides a mechanism for letting the various components and subsystems ofcomputer system 210 communicate with each other as intended. Althoughbus subsystem 212 is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple busses. -
Computer system 210 can be of varying types including a personal computer, a portable computer, a workstation, a computer terminal, a network computer, a television, a mainframe, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description ofcomputer system 210 depicted inFIG. 1 is intended only as a specific example for purposes of illustrating the preferred embodiments. Many other configurations ofcomputer system 210 are possible having more or less components than the computer system depicted inFIG. 1 . -
FIG. 2 illustrates a product storing an IsArepository 280 including a number of ranked lists of instance:class associations produced according to the technology described herein, in a computerreadable memory 240. Thememory 240 can comprise a medium for example associated withfile storage subsystem 224, and/or withnetwork interface subsystem 216, or can comprise a data storage medium in a separate device. The medium used for the computerreadable memory 240 can be a non-transitory medium, such as a hard disk, a floppy disk, a CD-ROM, an integrated circuit memory device, an optical medium, and removable media cartridge. An IsA repository produced as described herein can also be embodied by data coded on a transitory medium, such as a radio communication channel. -
FIG. 3 illustrates a computer program product according to the technology described herein. The computer program product includes a computerreadable memory 245 which is shown storingcomputer instructions 285 executable by a computing device that includes logic according to the technology described herein, for storing a training set of queries and extracted instance:class associations, and including logic for ranking and re-ranking instance:class associations utilizing the training set in one of the ranking and re-ranking steps. The computerreadable memory 245 can be a medium for example associated with file storage subsystem 228, and/or withnetwork interface subsystem 216, or be a separate memory device. The medium used for the computer readable memory can be a non-transitory medium, such as a hard disk, a floppy disk, a CD-ROM, an optical medium, and removable media cartridge. A computer program product as described herein can also be embodied by instructions coded on a transitory medium, such as a radio communication channel. -
FIG. 4 is a basic flowchart for a process for ranking and re-ranking instance:class associations. - For a process reflected in
FIG. 4 , a set of instance:class associations which may be unranked, is provided as input (300). The input set of instance:class associations can be derived for example from a text source using the extraction pattern technology. In a next step, the classes associated with a given instance I are scored using a first scoring rule (301). The first scoring rule can be based on processing atext source 310, which may or may not be the same text source from which the instance:class associations in the input set were derived. After computing scores according to the first scoring rule, the classes in the set are ranked to produce a ranked list L1(I) according to the first scores (302). In one embodiment, a first ranked list L1(I) of instance:class associations (I:C) is provided as input to a process to re-rank the list, where steps 300-302 may be performed externally or other technology may be used to produce the first ranked list L1(I). - The rank of a particular instance:class association in the ranked list L1(I) can be assigned using a scoring formula.
- A scoring formula can be applied by a computing device executing a computer program over a
text source 310, such as a library of Web documents that includes unstructured text and search queries. The collection of queries could be a sample of a large number of unique, fully-anonymized queries in English submitted by Web users in a selected time period, such as the year 2009. Each query can be accompanied by its frequency of occurrence in the logs associated with the library. The document collection could consist for example of a sample of a large number of documents in English. The textual portion of the documents could be cleaned of HTML, tokenized, split into sentences and part-of-speech tagged using known part-of-speech tagger processes operating over sentences from text. - For example, a score Score(I:C) for a particular instance:class association can be calculated by a scoring formula, such as the following:
-
Score(I:C)=Size({Pattern(I:C)})2×Freq(I:C) - A computing device can be used to determine the square of the size (i.e. number of members) of the set of extraction patterns that return the particular instance:class association (Size({Pattern (I:C)})2); to determine the frequency of occurrence (Freq(I:C)) of the instance:class association in the source, and to multiply these numbers to generate a score for each instance:class association. Using these calculated scores, a computer program can produce a ranked list of instance:class associations.
- The ranked list L1(I) can be ranked using the formula set out above, or by other ranking processes. In addition, rather than a ranked list, an input to the ranking process described next can be a set of entries without initial ranking.
- This input list L1(I) is processed next to change the ranking of instance:class associations, and to score the instance:class associations according to a second scoring rule (303). The second scoring rule can compute scores based on information derivable from a training set of
queries 311. For example, the scores can be determined according to the popularity of class terms in queries in the training set. The training set 311 can comprise a repository of anonymized queries. - The second scoring rule can be executed over the instance:class associations in the first list L1(I). For example a computing device executing a computer program can be used to compute a score for a given class Ci, that contains a set of terms Tj (ignoring terms classified as stop words), by determining a subset Q of queries from the repository, whose members Qk contain the instance I within the query, and contain the term Tj within the query. In one embodiment, the subset Q of queries is further constrained by requiring that the members Qk must contain the instance I as a prefix in the query (i.e. occur as the first word or phrase in the query), and must contain the term Tj anywhere else in the query (i.e. not in the prefix formed by the instance I). These combinations of constraints filter for queries that might arise in a query entered, for example, by a user who formulates the query using the instance I as a first word or phrase, and then refines the query by adding terms that can be part of a class label.
- Using this subset Q, the frequency of each term Tj of class Ci in the subset is determined. Then, each instance:class association is assigned a score by applying an appropriate statistical function over the frequencies in the subset Q of the terms of the class C. In one example, the statistical function is the geometric mean of the frequencies of the Tj in class Ci, again ignoring stop words. An alternate statistical function could be a median, for example. As a result, scores are assigned to instance:class associations that are weighted in favor of classes that include individual terms occurring in popular queries containing the instance.
- A computer program for processing a list to change the ranking of instance:class associations in the list according to the popularity of class terms in queries, can have a logical structure set out in pseudocode, as follows:
-
I = an instance L_I = input ranked list of class labels of the instance I Q = collection (set) of Web search queries # Scan class labels of instance I for class label C_i in L_I: num_terms = 0. # Scan terms of class label for term T_j of C_i: # Compute frequency of current term, over queries # starting with the instance I S_j = Sum_k(Freq(T_j, Q_k), such that Prefix(Q_k, I), where k=1..number of queries in Q. num_terms++. # Compute score of class label, as geometric mean # of scores of individual terms S_i = Product(S_j, with j=1..num_terms) {circumflex over ( )} (1/num_terms). Re-rank class labels C_i of L_I, based on scores S_i, with i=1..length(L_I). - A second list L2(I) can be produced, using the scores produced according to the popularity of class terms in queries, to assign ranks to the instance:class associations (304). In the case of a tie, then the rank of the tied instance:class associations can be adjusted, according to a suitable rule. In one embodiment, the tied instance:class associations have their scores adjusted to preserve the relative rank from the input list L1(I).
- Next, a merged list can be produced (305) to reduce noise that may occur using a ranking based solely on popularity of class terms in queries. Relying on query logs to estimate the relevance of class labels can expose the ranking method to significant noise. On one hand, arguably useful class labels (e.g., authors) may not occur in queries along with the respective instances (diderot). On the other hand, for each query containing an instance and terms from useful class labels, there are many other queries containing, for example attributes in the query (diderot biography or diderot beliefs), or the name of a book in the query (diderot the nun). Therefore, the ranked list L2(I) in some embodiments may be too noisy to be used directly as rankings in an IsA repository or other tool applying class rankings to instances.
- In one example, a merged list can be produced by a process that assigns a score based on a function of the ranks of the classes in the first list L1(I), or another ranked list, relative to the ranks of classes in the second list L2(I). In other embodiments, more than two ranked lists can be merged. One function that can be used to merge the first and second lists, can be characterized as follows:
-
MergedScore(I,C)=2/(Rank(I:C,L 1)+Rank(I:C,L 2)) - This function operates to compute a score for an instance:class association I:C, that results in a new ranking in decreasing order of the inverse of the average rank (instance:class associations in the list L1 and L2 that have a higher rank will tend to have a lower MergedScore). The number “2” in the example formula corresponds to the number of lists being merged, which in this case is 2. The term Rank(I:C, Li) is the rank of the instance:class association for class C in list Li. The rank is set to a high number, such as 1000, if the class does not occur in the list Li. In the case of ties in the merged ranking, the scores of one of the lists can be used as a secondary ranking criterion. In one example, the scores for the first list L1(I) are used for this secondary ranking criterion.
- Next, the merged list is stored (306). The merged list is a new list of instance:class associations usable in an IsA repository. By using only the relative ranks of the class labels within the input lists, and not on their scores, the outcome of the merging is less sensitive to how class labels of a given instance are scored.
- As a final step in the process shown
FIG. 4 , the merged list can be applied in processing text (307), including natural language text. - The technology described herein includes a method that can be performed by a computing device. One method according to this technology processes instance:class associations, in which the instances comprise text, and the classes comprise text labels for the instances, for use in analysis of language by a computing device. This method comprises computing scores for classes in a set of classes associated with a given instance, the score for a particular class based upon occurrence in a set of queries of a term or terms in the particular class and occurrence in the set of queries of the given instance. The computing device can then store a ranking of instance:class associations for the given instance in memory, the ranking based on the scores. In an example, the process of computing scores for classes includes, for a given class Ci, that contains a set of terms Tj, determining a subset of queries Q from the set of queries, whose members Qk contain the text of the given instance I within the query, and contain the term Tj within the query; computing a frequency of each term Tj of class Ci in the subset of queries Q; and assigning a score by applying a statistical function, such as a geometric mean, over the frequency of the terms of the class Ci.
- In one example, the subset of queries Q over which the score is determined, is further constrained by requiring that the members Qk contain the instance I as a prefix in the query, and contain the term Tj outside of the prefix in the query.
- A method is also provided which includes merging a first ranked list of instance:class associations for the given instance with the stored ranking for the given instance, produced using the process above, to produce merged scores for the set of classes associated with the given instance I. A computing device can store a changed ranking of instance:class associations for the given instance based on the merged scores. The changed ranking based on the merged scores can be applied to associate classes with instances derived from processing text.
- In another example, a method is provided that includes:
-
- processing a set of instance:class associations I:C to produce a first ranked list L1(I) for the given instance I, and wherein the stored ranking mentioned above comprises a second ranked list L2(I) for the given instance I;
- merging the first ranked list and the second ranked list to produce merged scores for the set of classes associated with the given instance I; and
- storing a changed ranking of instance:class associations for the given instance based on the merged scores.
- The first ranked list can be produced by determining the square of a size of a set of extraction patterns that return the particular instance:class association (Size{Pattern (I:C)})2 over a text source; determining a frequency of occurrence (Freq(I:C)) of the instance:class association in the text source; and multiplying the square of the size by the frequency to generate a score for each instance:class association for the given instance.
- My publication, Pasca, “The Role of Queries in Ranking Labeled Instances Extracted from Text,” Coling 2010: Poster Volume, August, 2010, pages 955-962, is incorporated by reference as if fully set forth herein.
- The technology disclosed herein can be implemented by a product that comprises a memory storing the rankings of instance:class associations produced using the processes described herein.
- The technology disclosed also may be practiced as a computer program product or an article of manufacture. This article of manufacture includes a non-transitory memory that stores computer instructions. In one implementation, the computer instructions, when run on suitable hardware, perform any of the methods described herein. In another implementation, the computer instructions, when combined with suitable hardware, produce the devices described.
Claims (24)
1-23. (canceled)
24. A method for use in analysis of language by a computing device, comprising:
identifying a class and a second class associated with an instance, the instance having an IsA relationship to the class and having a second IsA relationship to the second class;
identifying at least one instance term associated with the instance and one or more class terms associated with the class, the one or more class terms being a text label for the class;
identifying a training set of queries;
computing a score for the IsA relationship of the instance to the class based on a frequency of co-occurrence in the queries of the training set, wherein the frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more class terms outside of the query prefix;
identifying one or more second class terms associated with the second class, the one or more second class terms being a text label for the second class;
computing a second score for the second IsA relationship of the instance to the second class based on a second frequency of co-occurrence in the queries of the training set, wherein the second frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more second class terms outside of the query prefix;
determining, based on the score for the IsA relationship of the instance to the class and the second score for the additional IsA relationship of the instance to the second class, a ranking of the IsA relationship of the instance to the relative to the second IsA relationship of the instance to the second class; and
storing the ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class.
25. (canceled)
26. The method of claim 24 , wherein computing the score for the IsA relationship of the instance to the class includes:
determining an additional frequency of co-occurrence, in the queries of the training set, wherein the additional frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term and one or more additional class terms associated with the class, the one or more additional class terms being an additional text label for the class; and
computing the score for the class by applying a statistical function over the frequency of co-occurrence and the additional frequency of co-occurrence.
27. The method of claim 26 , wherein the statistical function comprises a geometric mean.
28. The method of claim 24 , wherein computing the score for the IsA relationship of the instance to the class includes:
determining an additional frequency of co-occurrence, in the queries of the training set, wherein the additional frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as the prefix and one or more additional class terms outside the prefix, the one or more additional class terms associated with the class and being an additional text label for the class; and
computing the score for the class by applying a statistical function over the frequency of co-occurrence and the additional frequency of co-occurrence.
29. The method of claim 24 , wherein the one or more class terms include only non-stop words.
30. The method of claim 24 , further comprising:
merging a first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class with the stored ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class to produce a merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class; and
storing the merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class.
31. The method of claim 30 , further comprising:
applying the merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class to associate the class with the instance in processing of text.
32. The method of claim 24 , further comprising:
processing a set of instance:class associations and instance:second class associations to produce a first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class;
merging the first ranking and the stored ranking to produce a merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class; and
storing the merged ranking.
33. The method of claim 32 , further comprising: applying the merged ranking to associate the class with the instance in processing of text.
34. The method of claim 32 , further comprising:
determining the first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class based on a frequency of occurrence of an association of the class with the instance in Web documents.
35. A data processing system for use in analysis of language by a computing device, comprising:
a processor including memory, and instructions executable by the processor stored in the memory, comprising logic to:
identify a class and a second class associated with an instance, the instance having an IsA relationship to the class and having a second IsA relationship to the second class;
identify at least one instance term associated with the instance and one or more class terms associated with the class, the one or more class terms being a text label for the class;
identify a training set of queries;
compute a score for the IsA relationship of the instance to the class based on a frequency of co-occurrence in the queries of the training set, wherein the frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more class terms outside of the query prefix;
identify one or more second class terms associated with the second class, the one or more second class terms being a text label for the second class;
compute a second score for the second IsA relationship of the instance to the second class based on a second frequency of co-occurrence in the queries of the training set, wherein the second frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more second class terms outside of the query prefix;
determine, based on the score for the IsA relationship of the instance to the class and the second score for the additional IsA relationship of the instance to the second class, a ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class and
store the ranking of IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class.
36. (canceled)
37. The system of claim 35 , wherein said logic to compute the score for the IsA relationship of the instance to the class includes logic to:
determine an additional frequency of co-occurrence, in the queries of the training set, wherein the additional frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term and one or more additional class terms associated with the class, the one or more additional class terms being an additional text label for the class; and
compute the score for the class by applying a statistical function over the frequency of co-occurrence and the additional frequency of co-occurrence.
38. The system of claim 37 , wherein the statistical function comprises a geometric mean.
39. The system of claim 35 , wherein said logic to compute the score for the IsA relationship of the instance to the class includes logic to:
determine an additional frequency of co-occurrence, in the queries of the training set, wherein the additional frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as the prefix and one or more additional class terms outside the prefix, the one or more additional class terms associated with the class and being an additional text label for the class; and
compute the score for the class by applying a statistical function over the frequency of co-occurrence and the additional frequency of co-occurrence.
40. The system of claim 35 , wherein the one or more class terms include only non-stop words.
41. The system of claim 35 , wherein the instructions further comprise logic to:
merge a first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class with the stored ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class to produce a merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class; and
store the merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class.
42. The system of claim 41 , wherein the instructions further comprise logic to:
apply the merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class to associate the class with the instance in processing of text.
43. The system of claim 35 , wherein the instructions further comprise logic to:
process a set of instance:class associations and instance:second class associations to produce a first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class;
merge the first ranking and the stored ranking to produce a merged ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class; and
store the merged ranking.
44. The system of claim 43 , wherein the instructions further comprise logic to:
apply the merged ranking to associate the class with the instance in processing of text.
45. The system of claim 43 , wherein the instructions further comprise logic to:
determine the first ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class based on a frequency of occurrence of an association of the class with the instance in Web documents.
46. A computer program product, comprising a memory storing instructions executable by a processor comprising logic to:
identify at least one instance term associated with the instance and one or more class terms associated with the class, the one or more class terms being a text label for the class;
identify a training set of queries;
compute a score for the IsA relationship of the instance to the class based on a frequency of co-occurrence in the queries of the training set, wherein the frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more class terms outside of the query prefix;
identify one or more second class terms associated with the second class, the one or more second class terms being a text label for the second class;
compute a second score for the second IsA relationship of the instance to the second class based on a second frequency of co-occurrence in the queries of the training set, wherein the second frequency of co-occurrence indicates frequency, in the training set, of the queries that include both: the at least one instance term as a query prefix and the one or more second class terms outside of the query prefix;
determine, based on the score for the IsA relationship of the instance to the class and the second score for the additional IsA relationship of the instance to the second class, a ranking of the IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class; and
store the ranking of IsA relationship of the instance to the class relative to the second IsA relationship of the instance to the second class.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/105,679 US20160117324A1 (en) | 2011-05-11 | 2011-05-11 | Ranking labeled instances extracted from text |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/105,679 US20160117324A1 (en) | 2011-05-11 | 2011-05-11 | Ranking labeled instances extracted from text |
Publications (1)
Publication Number | Publication Date |
---|---|
US20160117324A1 true US20160117324A1 (en) | 2016-04-28 |
Family
ID=55792140
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/105,679 Abandoned US20160117324A1 (en) | 2011-05-11 | 2011-05-11 | Ranking labeled instances extracted from text |
Country Status (1)
Country | Link |
---|---|
US (1) | US20160117324A1 (en) |
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140136935A1 (en) * | 2012-11-13 | 2014-05-15 | Cas Designs Group, Lp Dba Kaleidoscope | Digital media management system and methods of use |
US20160267611A1 (en) * | 2013-09-11 | 2016-09-15 | Ubic, Inc. | Digital information analysis system, digital information analysis method, and digital information analysis program |
CN111162923A (en) * | 2019-12-31 | 2020-05-15 | 广州市百果园信息技术有限公司 | Ranking method, device, equipment and storage medium of instant messaging group |
-
2011
- 2011-05-11 US US13/105,679 patent/US20160117324A1/en not_active Abandoned
Cited By (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140136935A1 (en) * | 2012-11-13 | 2014-05-15 | Cas Designs Group, Lp Dba Kaleidoscope | Digital media management system and methods of use |
US20160267611A1 (en) * | 2013-09-11 | 2016-09-15 | Ubic, Inc. | Digital information analysis system, digital information analysis method, and digital information analysis program |
CN111162923A (en) * | 2019-12-31 | 2020-05-15 | 广州市百果园信息技术有限公司 | Ranking method, device, equipment and storage medium of instant messaging group |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9542476B1 (en) | Refining search queries | |
US9697249B1 (en) | Estimating confidence for query revision models | |
US7565345B2 (en) | Integration of multiple query revision models | |
US8356025B2 (en) | Systems and methods for detecting sentiment-based topics | |
CN107092615B (en) | Query suggestions from documents | |
CN101630333B (en) | Transliteration for query expansion | |
US20120095984A1 (en) | Universal Search Engine Interface and Application | |
US20070136251A1 (en) | System and Method for Processing a Query | |
US8321409B1 (en) | Document ranking using word relationships | |
US20060230005A1 (en) | Empirical validation of suggested alternative queries | |
US20110040769A1 (en) | Query-URL N-Gram Features in Web Ranking | |
JP4778474B2 (en) | Question answering apparatus, question answering method, question answering program, and recording medium recording the program | |
US20110047457A1 (en) | System and Method for Managing Acronym Expansions | |
EP1665091A1 (en) | System and method for processing a query | |
US20190065502A1 (en) | Providing information related to a table of a document in response to a search query | |
JP4631795B2 (en) | Information search support system, information search support method, and information search support program | |
US9195706B1 (en) | Processing of document metadata for use as query suggestions | |
US20160117324A1 (en) | Ranking labeled instances extracted from text | |
US10073882B1 (en) | Semantically equivalent query templates | |
US9122727B1 (en) | Identification of related search queries that represent different information requests | |
US20080162433A1 (en) | Browsable search system | |
Rao | Recall oriented approaches for improved indian language information access | |
McCord | Word sense disambiguation in a slot grammar framework | |
WO2012052794A1 (en) | Universal search engine interface and application | |
Chauhan et al. | A framework to derive web page context from hyperlink structure |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:PASCA, MARIUS A.;REEL/FRAME:026263/0505Effective date: 20110509 |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |