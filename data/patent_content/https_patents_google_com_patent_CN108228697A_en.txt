CN108228697A - Node in directed acyclic graph - Google Patents
Node in directed acyclic graph Download PDFInfo
- Publication number
- CN108228697A CN108228697A CN201710881282.4A CN201710881282A CN108228697A CN 108228697 A CN108228697 A CN 108228697A CN 201710881282 A CN201710881282 A CN 201710881282A CN 108228697 A CN108228697 A CN 108228697A
- Authority
- CN
- China
- Prior art keywords
- node
- nodes
- obstacle nodes
- obstacle
- list
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9027—Trees
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/13—File access structures, e.g. distributed indices
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9024—Graphs; Linked lists
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/903—Querying
- G06F16/90335—Query processing
Abstract
This application involves the node in directed acyclic graph, wherein, obstacle nodes method for congregating includes：In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes in each node, for each descendent node of the first obstacle nodes mark as the follow-up obstacle nodes of the first obstacle nodes；And assemble the offspring as the first obstacle nodes and the information of each non-obstacle nodes not detached by any identified follow-up obstacle nodes with the first obstacle nodes at the first obstacle nodes.Non- obstacle nodes transmission method includes：In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes in each node, for each ancestor node of the first non-obstacle nodes mark as the previous obstacles node of the first non-obstacle nodes；And the information of the first non-obstacle nodes is traveled into each identified previous obstacles node and each non-obstacle nodes between the first non-obstacle nodes and the previous obstacles node identified.
Description
Cross reference to related applications
This application claims entitled " the NODES IN DIRECTED ACYCLIC submitted on December 22nd, 2016
The U.S. Patent application No.15/388 of GRAPH (node in directed acyclic graph) ", 288 priority, the U.S. Patent application
Content be incorporated herein by reference.
Technical field
The literature relates generally to the node in oriented acyclic figure.
Background technology
Figure is used in computer system, to organize the set of item or other entities, such as on disk or with another
A form of storage device.Such hierarchical structure for organizing to be implemented as node sometimes, wherein, the item of such as file is by cloth
It is set to ancestors and offspring with definition.Sometimes, perform aggregation in such a system, for example, from root to leaf or from leaf to
Root.The example of aggregation in file system hierarchy structure, which includes, gathers the counting of the file in the counting and hierarchical structure of file
Collection.Such system user can allow for inquire such as be stored in image below the node in hierarchical structure number or by
The number of byte that particular sublayers time structure on disk uses.
In some existing systems, each one ancestor list of node maintenance, the ancestor list is directed to the node designated layer
The name of the other nodes of node all of the above in secondary structure.In such a system, then there can be it by search
Any node of specific node in ancestor list is performed at specific node or the inquiry of following information.This can recognize
To be a kind of pre-computation methods, because relationship is by as hierarchical structure change must keep newest ancestor list to safeguard
's.When hierarchical structure deepens, there is height degree of being fanned out to when or simply when hierarchical structure frequently changes, this method may become
It is inefficient, it is even unpractical.For example, when hierarchical structure is updated (for example, when content changing), based entirely on estimated
There may be the problem of delay for the system of calculation.On the other hand, using only the method for query time aggregation for large-scale complicated layer
Secondary structure does not work.
Invention content
In a first aspect, a kind of method for the aggregation that obstacle nodes (barrier node) by directed acyclic graph carry out
Including：In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes (non-barrier node) in each node,
For each descendent node of the first obstacle nodes mark as the follow-up obstacle nodes of the first obstacle nodes；And first
At obstacle nodes aggregation as the first obstacle nodes offspring and not by any identified follow-up obstacle nodes and with the
The information of each non-obstacle nodes of one obstacle nodes separation.
Embodiment can include any or all in following characteristics.The method further includes：For the first obstacle section
Point creates first list, which identifies all descendent nodes as obstacle nodes of the first obstacle nodes.It is described
Method further includes：It is accumulation to make first list so that：If the first list of the first obstacle nodes identifies specific obstacle section
Point, then, the corresponding first list for containing the first obstacle nodes of the obstacle nodes on the first obstacle nodes also will packet
Containing the specific obstacle nodes.The method further includes：Detection new relation will be introduced in directed acyclic graph；Use described
One list determines whether the new relation has ring；And once it is determined that the new relation has ring, just in the directed acyclic
The new relation is prevented in figure.The method further includes：First list is stored at the first obstacle nodes.The method is also wrapped
It includes：Second list is created for the first obstacle nodes, which identifies the institute as obstacle nodes of the first obstacle nodes
There is ancestor node.Which node is second list, which indicate, identifies the first obstacle nodes in its corresponding first list.
In second aspect, the method for the propagation carried out by the non-obstacle nodes in directed acyclic graph includes：In each node
It is defined as in the directed acyclic graph of obstacle nodes or non-obstacle nodes, for the first non-obstacle nodes mark as the first non-barrier
Hinder each ancestor node of the previous obstacles node of node；And the information of the first non-obstacle nodes is traveled into each marked
The previous obstacles node of knowledge and each non-obstacle section between the first non-obstacle nodes and the previous obstacles node identified
Point.
Embodiment can include any or all in following characteristics.The method further includes：For the first non-obstacle
Node creates the ancestor list with the upper limit, and the ancestor list with the upper limit identifies the first non-obstacle nodes and passes information
The ancestor node being multicast to.The ancestor list with the upper limit is defined, the method based on current maximum ancestors' value
It further includes：Current maximum ancestors are set with how many father node in the directed acyclic graph based on the first non-obstacle nodes
Value.The method further includes：Follow-up obstacle nodes list, the follow-up obstacle nodes list mark are created for the first non-obstacle nodes
Each descendent node of the follow-up obstacle nodes as the first non-obstacle nodes is known.The method further includes：For the first non-barrier
Node is hindered to create previous obstacles node listing, the previous obstacles node listing is identified as the previous of the first non-obstacle nodes
Each ancestor node of obstacle nodes；And the previous obstacles node listing is used in the mark.
In the third aspect, a kind of method includes：Reception is defined as wherein each node at obstacle nodes or non-obstacle section
The inquiry of the directed acyclic graph of point, received inquiry are related with first node and its offspring；Based on received inquiry,
It determines：(i) the first aggregation, first aggregation are stored at first node；(ii) second assembles, which is stored
At the spawn node as obstacle nodes of first node；And use the described first aggregation and the second aggregation next life
The response of received inquiry in pairs.
Embodiment can include any or all in following characteristics.The method further includes：First node is
One obstacle nodes, the method further include：When determining second aggregation the first obstacle nodes are directed to using list, the list
Identify each descendent node as obstacle nodes.Determine that second aggregation includes：It identifies at least one in the list
Descendent node, and the second aggregation is obtained based on the mark.First node is the first non-obstacle nodes, and the method further includes：
It is identified when determining the second aggregation using list, the list for the first non-obstacle nodes as after the first non-obstacle nodes
Each descendent node of continuous obstacle nodes.Determine that second aggregation includes：At least one descendent node in the list is identified,
And the second aggregation is obtained based on the mark.The mark and the acquisition be using single more inquiry remote procedure calls and by
It performs.The directed acyclic graph has multiple approach that descendent node is reached from first node, and the method further includes：In life
Assemble into considering to count during the response more.Consider that more counting aggregations include：Determine first node and the descendent node
Between path number.The method further includes：The information of the descendent node is included in the number with identified path
In the corresponding first or second aggregation of mesh repeatedly.
In fourth aspect, a kind of method includes：It is defined as the oriented of obstacle nodes or non-obstacle nodes in each node
In acyclic figure, first node is defined as non-obstacle nodes；Obstacle nodes criterion is evaluated for first node；And once really
Determine first node and meet the obstacle nodes criterion, the obstacle nodes being just defined as first node in the directed acyclic graph.
Embodiment can include any or all in following characteristics.First node has to exist corresponding to first node
There is the ancestor list size of how many ancestors, and wherein in the directed acyclic graph, the obstacle nodes criterion includes the ancestral
First list size at least equal to first node current maximum ancestors' value, wherein, current maximum ancestors' value depends on first
Node has how many father node in the directed acyclic graph.First node, which has, depends on the first node in the oriented nothing
Current maximum ancestors' value (current max ancestor value) with how many father node in ring figure, and wherein, institute
It states obstacle nodes criterion and includes current maximum ancestors' value ancestors value (global maximum at least equal to the overall situation of the directed acyclic graph
max ancestor value).Multiple obstacle nodes criterion are evaluated, and wherein, once it is determined that the multiple obstacle nodes
Any one in criterion is satisfied, the obstacle nodes being just defined as first node in the directed acyclic graph.The oriented nothing
Second node in ring figure is defined as obstacle nodes, and the method further includes：It is accurate that non-obstacle nodes are evaluated for second node
Then, also, once it is determined that second node meets the non-obstacle nodes criterion, second node is just defined as the directed acyclic
Non- obstacle nodes in figure.The non-obstacle nodes criterion has common at least one parameter with the obstacle nodes criterion,
And wherein, the threshold value of at least one parameter is more tightened up than in obstacle nodes criterion in non-obstacle nodes criterion.Institute
The method of stating further includes：When determining whether first node being defined as obstacle nodes, consider about the directed acyclic graph extremely
Few other signals.At least one other signal includes a type of service, and user passes through described a type of
Service uses the directed acyclic graph.At least one other signal includes the spy what directed acyclic graph used as
Property.
Theme described in this specification further relates to the disclosed technology for directed acyclic graph and its node and is calculating
Database, file system and use, application and the embodiment in laminated tissue's storage device that machine is realized.In an example
In, system can be file system, wherein, file or catalogue are stored in forever for managing according to the directed acyclic graph of the disclosure
The hierarchical structure of used block and byte on long storage device.In another example, system can be the level for file
Storage system, wherein, according to the directed acyclic graph of the disclosure for managing distribution, catalogue and the hierarchical structure of file, wherein, it should
The node of figure can for example represent catalogue or file.
Description of the drawings
Fig. 1 shows the example of the aggregation in directed acyclic graph.
Fig. 2 shows the examples of the list in directed acyclic graph.
Fig. 3 is schematically shown using the example for reading fan-in list.
Fig. 4 schematically shows the examples for calculating the aggregation below obstacle nodes.
Fig. 5 shows the example for searching stream.
Fig. 6 schematically shows the example for calculating the aggregation below non-obstacle nodes.
Fig. 7 A-7D show the examples for counting aggregation more.
Fig. 8 shows an example of evaluation obstacle nodes criterion.
Fig. 9 shows another example of evaluation obstacle nodes criterion.
Figure 10 shows another example of evaluation obstacle nodes criterion.
Figure 11 shows the example of multiple indexes in aggregation directed acyclic graph.
Figure 12 shows that the cycle in directed acyclic graph prevents the example of (cycle prevention).
Figure 13 is shown available for realizing the computer equipment of technique described herein and the example of mobile computer device.
Specific embodiment
This figure is inquired this document describes the information in the directed acyclic graph for safeguarding node and for specific information
Example.In some embodiments, tissue is carried out to the propagation of nodal information so that certain node rendezvous are passed from its descendent node
Their information is multicast to, but they in the graphic do not propagate the information further up.But the information assembled is can to visit
It asks, for inquiring without being propagated further in the figure.In contrast, other nodes do not upwardly propagate its information,
The information assembled including it from descendent node.In this way, accessing the separate nodes, when its information is assembled elsewhere
May be unnecessary.Some embodiments can be provided by using the combination that precomputation and query time calculate in inquiry
Advantageous flexibility.This can allow for the manager realization of system to draw when the efficiency for answering Aggregation Query is updated with figure
Desired balance between the amount of delay entered.
Fig. 1 shows the example of the aggregation in directed acyclic graph (DAG) 100.Here, which is included by schematic earth's surface
It is shown as the two kinds of node of circle.These circles are labeled with alphabetical A to J for mark.One node type 102 is by thick line
Expression and referred to herein as obstacle nodes (BN).In this example, node A, E and F is BN.Another node type 104 by
Compared with filament expression and referred to herein as non-obstacle nodes (NBN).Here, node B, C, D, G, H, I and J is NBN.Node pair
Between edge 106 represent relationship.For example, edge 106 represents that node A is the parent of node B.
BN can store the precomputation aggregation of subtree below, until away from some depth of the BN, but not in figure
It is middle to propagate it further up.If BN cannot store the aggregation of the entire subtree below the BN, it can be stored under it
The list of one or more BN in face.Therefore, the aggregation of lower BN needs to be read to calculate the entire son below the first BN
The statistics of tree.Therefore, the BN, which is defined, can be stored in the aggregation at the node by reading and be stored in any
(one or more) at BN (that is, the descendent node for the node inquired) assembles poly- by what is performed on any node to service
Collection inquiry.In some embodiments, term " BN " represent the BN serve as the node information (information of their own and its
From the information of following node rendezvous) the obstacle upwardly propagated.For example, the BN can exclude information update and aggregation
It is any to upwardly propagate.
NBN can assemble information, and the aggregation information also is propagated up nearest BN from subtree below.It should
NBN can store ancestor list --- that is, above it with its node with direct or indirect interdependence --- until in layer
The point of nearest BN above its in secondary structure.Therefore the NBN can upwardly propagate its information, BN up to date.
Start at the bottom of DAG 100, node J is indicated here by counting with the aggregation file equal to 1.Example
Such as, node J represents the single file in DAG 100.Similarly, node H represents another single file, and node G is same.Node
G is the parent of node H and J herein, therefore, the information of G aggregation nodes H and J.That is, the aggregation file counting for node G is
For node G (file), node H (file) and node J (file) individual files count summation or
1+1+1=3.Since node G is NBN, its information is propagated up nearest BN by it.Here, only node F is (for example, single text
Part) it is the BN nearest from node G.Therefore, it is that its independent count (1) connects plus from node G for the counting of the aggregation file of node F
The aggregation received counts (3).
Since node F is BN, it does not upwardly propagate its information to node D (its parent) or any other node.Therefore,
Node D does not assemble any information from node F.On the other hand, node I be NBN and therefore by its information be broadcast to node D with
And the node A above D, because node A is BN.Therefore, here, node D from node I receive equal to 1 file count and by its
It is accumulated as counting for the aggregation file equal to 2 of node D.And then counted herein as 5 for the aggregation file of node A, because
The aggregation equal to 2 is received from node D and receive the independent counting equal to 1 from each in node B and C for it.It compares
Under, node E is BN, therefore its information is not upwardly propagated and give node B (its parent).
In brief, DAG 100 illustrates following relationship.Node B, C, D and I are NBN and each of which will
Its information (for example, file counting) travels to node A.On the other hand, node E and F is BN, in this way, they will not be upwardly propagated
Any information.Finally, information is traveled to node F and farther unlike node F by node G, H and J.
Therefore, it is possible to be defined as performing one kind in the directed acyclic graph (such as DAG 100) of BN or NBN in each node
Or a variety of method for congregating.Such method can include offspring's section for each follow-up BN as the first BN of the first BN marks
Point.As an example, for node A, BN E and F can be identified.Node E and F are the follow-up BN of node A, because it
Do not detached by any other BN with node A.After the method can be included at the first BN aggregation as the first BN
Generation and the information of each NBN not detached by any identified follow-up BN with the first BN.It for example, can at node A
To be the aggregation information of node B, C, D and I (each of which is NBN).
Such method can be included for each ancestor node of the first NBN marks as the previous BN of the first NBN.Make
For example, for node H, ancestor node F can be identified as previous BN.In contrast, node A is not the elder generation of node H
Preceding BN, because there are another BN, i.e. node F between them.The method can include the information of the first NBN being broadcast to often
A identified previous BN and each NBN between the first NBN and the previous BN identified.For example, the information energy of node H
Node F (that is, described previous BN) and node G is enough propagated to, here, node G is the NBN between node H and F.
The example for calculating the file in DAG 100 and counting will be provided now.If the file below node A is found in inquiry
It counts.Based on DAG 100, system counts the aggregation file obtained about node A oneself poly- with any BN below node A
Collect the information that file counts.Here, the aggregation file counting of any BN below node A includes node E and F (they are BN)
Following aggregation file counts.That is, by add A aggregation file count (being here 5), E aggregation file count (here for
1) and the aggregation file of F counts (being here 4), and the file counting below node A is confirmed as amounting to 10 files.
It is counted on the contrary, if the files of node D (it is NBN) below are found in inquiry.Similar with above-mentioned example, this is by obtaining
The aggregation that the aggregation at D (being here 2) must be stored in and be stored at node F (it is only offspring BN of node D) comes
It determines.Therefore it is 2+4=6 that aggregation file below D, which counts,.Note that in this example, the inquiry does not need to clearly detect
Node I because this is NBN (it is the child node for the node being just queried) and its counting has been gathered at its parent, that is, is saved
At point D.
As last example, it is assumed that inquiry is found the files of node G (it is also NBN) below and counted.Here, node G
Below without BN.In this way, it is to the inquiry in the example that the aggregation file for reading G is counted (being here 3) and this by system
Response.
It can carry out the aggregation of execution information using one or more lists and assemble the inquiry of information.Fig. 2 shows oriented
The example of list in acyclic Figure 200.Although the structure of the exemplary DAG is different from the structure in foregoing figures, for letter
For the sake of list, used nomenclature is similar.Therefore, BN is represented by thick line, and NBN compared with filament by representing, and node is divided
Biao Ji not be and F-U.Therefore, here, NBN is node A, F, G, H, J, K, M, N, P, Q and U, and BN be node B, C, D,
I, L, O, R, S and T.Illustrated node can be a part for the figure of bigger.Therefore, it is possible to exist than that can be seen in the diagram
The more BN and/or NBN arrived.In some embodiments, the root node of figure always BN.Above-mentioned list can store in office
What suitable position, such as at the respective nodes belonging to it or in another place.
In some embodiments, BN has the list different from NBN.Here, each BN (such as node B), which has, reads
Fan-in list (RFI) 210 and backward read take fan-in list (I-RFI) 220.For the sake of clarity, only for some nodes clearly
RFI and I-RFI are shown.To the example of these lists be described, it should be noted that here, BN does not include the complete list of its ancestors.
Since RFI, this is the list of all descendent nodes (themselves being BN) of BN.For example, here, node B's
RFI includes the name of node I, O, R and S, they are the offspring of node B and are BN.It is found when receiving about specific node
During the inquiry of the information of the subtree of (being in this example node B) below, system gets the bid fan-in (fan in) from the RFI
The aggregation information of the node of knowledge.This is a part for total aggregation required information below calculate node B.
It identifies the BN of its all descendent node as BN therefore, it is possible to be directed to and creates the list of such as RFI.It should
RFI can be accumulation.In some embodiments, if such as the RFI of node B mentions node I, then, the institute above B
There are BN (not shown)s that will also include node I in its respective RFI.For example, this is capable of providing following advantage：In inquiry
Between, system does not spend the too many time to determine the node for needing to assemble from its fan-in.
In mathematical term, RFI can be expressed as follows according to Read_Fan_In functions：
Wherein, k is the number of parent.
Therefore, the RFI of nodes X can be the union of the RFI of the node of multiple depths below X.In above-mentioned formula
In, this node below X is designated as Y, wherein, Y has the depth than M bigger, and according to induction, this can be expressed
For：
In addition, RFI can have less entry towards the bottom of DAG 200.For example, the RFI of node B be I, O,
R, S }, however, the RFI of node I is that only { R, S } and the RFI of node R are finally empty.
It I-RFI 220 and then will be used when updating figure, and it includes all ancestor nodes as BN.As slightly
Preceding described, RFI can be accumulation, and therefore, any update (for example, update to list) is required for being propagated to the phase of ancestors
Answer RFI.Therefore, I-RFI can be to determine which node needs newer inverse mapping.It is write for example, can be reduced with the I-RFI
Correctness and efficiency of the angle of incidence cost without influencing the aggregation at query time.
Here, the I-RFI 220 of node R is { I, B, C }.This indicates which of DAG 200 nodes to include node R
In its corresponding RFI.The list may be considered inverse mapping.In some sense, I-RFI is included from present node upward one
Until the name of all BN of root.If corresponding BN is not the one of the root folder particularly specified for being directed to the specific user
Part, then I-RFI can be empty.In some embodiments, this is I-RFI lists by for empty, only there is something special.
I-RFI can be accumulation.Mathematically, therefore I-RFI can be expressed according to I_RFI：
Wherein, the k (Y) of obstacle nodes Y indicates the depth of the subtree of its storage aggregation in its lower section.In other words, exist
After depth k (Y), there is another obstacle nodes X that aggregation below is considered to depth k (X).In some embodiments
In, the upper limits (max_ancestor) of the k (Y) depending on the ancestor list of non-obstacle nodes.The upper limit is bigger, and node will
Aggregation is propagated more deeply, until node Y, this is because more nodes will be included in Y in its ancestor list.
According to induction, this can be expressed as：
Therefore, the bottom growth being sized to towards DAG 200 of I-RFI.For example, the I-RFI of node B is empty, section
The I-RFI of point I is { B, C }, and the I-RFI of node R is { I, B, C }.
Therefore, I-RFI can be the list for all ancestor nodes for identifying a BN, these ancestor nodes are BN in itself.
For example, I-RFI can be indicated：For given BN, which BN above includes the BN in its corresponding RFI.
Fig. 3 is schematically shown using the example for reading fan-in list.DAG 300 is the figure for having node structure
One example.Only for for the sake of simplicity, herein show be illustratively represented as round individual node A.Here, node A is
BN, also, schematically show with the horizontal line 310 for crossing the DAG BN below node A.Here, between adjacent line 310
Separation be illustrated as " K distances ", so as to illustrate the regular interval that BN can be defined in hierarchical structure.By line 310
Each in the BN of expression can have its corresponding RFI.If the RFI is accumulation list, the information of all nodes
It is considered that it is stored at node A.
One or more lists can be used in NBN.Referring again to Fig. 2 and DAG 200, each NBN (for example, node F)
Can have ancestor list 230, follow-up BN lists 240 and previously BN lists 250.The ancestor list can be the ancestral with the upper limit
First list, it includes some or all of ancestors of given node.In some embodiments, which specifies section
The ancestors that point should travel to its information.For example, this can be along ancestors each path BN up to date it is all
Node, and including nearest BN.
For example, the ancestor list 230 of node F is { B, C } herein, its information is broadcast to this so as to indicate node F
A little nodes.In contrast, for node M, ancestor list is { I }, so as to indicate node M (it is NBN) by information
It is broadcast to node I.However, information is not broadcast to node above node I by node M, because node I is BN.Therefore, it is possible to for
NBN creates the ancestor list with the upper limit, and the ancestor list with the upper limit identifies the ancestors that the NBN travels to information
Node.
The upper limit can be specified in digital form.In some embodiments, the upper limit is flexible.For example,
The upper limit can change when adding new father node for specific node.It is assumed that parent is added to the given node in DAG,
The upper limit can increase a certain amount (being referred to herein as Δ).For example, if node has only one father node, size will be
Δ.On the other hand, if node has n father node, size will be n* Δs.This can be the maximum that the node can accommodate
Size.At any time, value n* Δs can be referred to as variable current_max_ancestor.For example, this can be represented：It is assumed that
The merging in ancestors path is relatively rare, then some nodes should be obtained from each ancestors path and system should not be preferential
Consider single long path.
It being capable of defined variable global_max_ancestor.In some embodiments, this represent the upper limit no more than
Limiting value.For example, the variable can be fixed in systems.As a result,
Current_max_ancestor (n* Δs) ＜ global_max_ancestor
Wherein, n is the number of parent (or entering the ancestors path in the node).
Other than variable current_max_ancestor and global_max_ancestor discussed above, for
Also there is practical ancestor list size (ancestor list size) in each NBN.For NBN, the relationship energy between them
Enough it is expressed as：
Ancestor list size ＜ current_max_ancestor (n* Δs) ＜ global_max_ancestor
That is, ancestor list 230 is the example of the ancestor list with the upper limit defined based on current maximum ancestors' value, and
The value can be set based on NBN in DAG with how many father node.Below with reference to Fig. 8-10 describes showing for the upper limit
Example.
Follow-up BN lists 240 include for below the node it is all levels structure, as the node recently after
The node (they are also BN) in generation.For example, the follow-up BN lists 240 of node F are { I, O }.In contrast and the node R of BN
With S not in list 240, because node I is the BN than node R and S closer to node F in the paths.On the other hand, for section
For point M, follow-up BN lists are only { R }.In some embodiments, the follow-up BN lists are used at query time.Therefore,
List 240 is that the example of follow-up BN lists is created for NBN, which saves as each offspring of the follow-up BN of the NBN
Point.
Previous BN lists 250 can include the node of the nearest BN ancestors along all ancestors paths as NBN.Example
Such as, for node M, which is included only { I }, because this is from the upward nearest BN of node M.In contrast,
Node B and C are not the nearest BN of M because node I in its path closer to M.As another example, for node P and
Speech, previous BN lists include node D.In some embodiments, the previous BN lists 250 are used in reproducting periods.Therefore, it arranges
Table 250 is the example that previous BN lists are created for NBN, each ancestor node of the List Identification as the previous BN of the NBN,
And identify the NBN should be by ancestor node that its information travels to when can use such list.
In some embodiments, the RFI 210 and I-RFI 220 that are present in BN and it is present in follow-up in NBN
BN lists 240 are considered similar concept with previous BN lists 250, and difference is that the former list is accumulation, then
The list of person only includes nearest respective nodes.Mathematically, this can be expressed as：
Wherein Y is one of BN ancestors of X.
Similarly,
Wherein Y is one of BN offsprings of X.
For example, in DAG 200, node P has ancestor list { D, G, H, K }, and it does not include node A in the row
In table.The reason is that, node P will upwardly propagate its information, until it hits BN.Here, node P finds node D (it is one
BN), therefore P no longer propagates the information.Therefore, node A is not in the ancestor list of node P.
Be as previously mentioned, using BN and NBN method can be used in when inquire figure to obtain information when situation in.
Such as and without limitation, which can be related with the counting of node either file or folder or it can be needle
Search to particular item (such as image).Method described herein using BN and NBN can be used in technical method and system (example
Such as database, file system, hierarchical stor) in, with efficiently realize the inquiry in those method and systems, search and
More new function.Usually, the inquiry for DAG can be received, received inquiry is related with specific node and its offspring.Base
In received inquiry, system, which can determine, to be stored in specific node from the aggregation being in and is stored in specific node
Spawn node (and BN) at aggregation.The response to received inquiry can be generated using these aggregations.
The inquiry related with BN and its offspring can be performed in two steps.Step 1 can be formulated as：<
N.aggregated_value,N.read_fan_in_list>, expression is stored at node N and its read_
Aggregation at aggregation_list is acquired.For deeper hierarchical structure, it may be necessary to perform step 2：It is right
Each node in read_fan_in_list obtains and is stored in cluster set at the node, then by these values with
The value obtained in step 1 is assembled.
Fig. 4 schematically shows the examples for calculating the aggregation below obstacle nodes.It is similar with diagram slightly before, the figure
BN is represented using heavier line and represents NBN using thinner line.In DAG 400, it is schematically shown that BN 410.Inquiry
The information about the node in subtree 420 is found, wherein, line 430 represents the corresponding BN offsprings of BN 410.It is being previously mentioned
Step 1 in, the aggregation and RFI that are stored at node 410 are read.RFI gives the BN offsprings of node 410.Institute above
In the step 2 mentioned, the aggregation for being stored in offspring BN (being represented by line 430) is read.That is, this illustrates in the exemplary query
In should be directed to its calculating aggregation node.It is to determine the middle example using list in aggregation above, which marks for BN
Know each descendent node (and BN).It also illustrates above and determines that aggregation can include identifying at least one offspring in the list
Node, and the aggregation is obtained based on the mark.
Fig. 5 shows the example for searching stream.Here, DAG 500 is included with the BN shown in heavier line and with thinner line
The NBN shown.When performing the inquiry about NBN 510, system reads the aggregation being stored at the node first.The aggregation
With the NBN below the node, until the first level of BN.In addition, the BN offsprings 520 for making its nearest are identified by node 510
In its RFI.Therefore, aggregation will be read from them.Therefore, it is possible to rank 530,540 and 550 defined in DAG 500.Rank
530 be wherein to cover the aggregation of the information by reading the aggregation being stored at node 510.Rank 540 is wherein to pass through reading
The aggregation being stored at BN520 is taken to cover the aggregation of the information.In addition, rank 550 is wherein to will be read by one or more
The aggregation assembled to cover the information at a lower BN 560.
Fig. 6 schematically shows the example for calculating the aggregation below non-obstacle nodes.In DAG 600, node 610
It is the information of NBN and the inquiry searching about the node in subtree 612.In the first step, it can be read from node 610
Aggregation and follow-up BN.In the second step, aggregation and RFI lists are read from by the nearest BN that RFI is identified.Nearest BN is here
It is schematically illustrated as line 614.It, can be from all sections present in the RFI obtained in the second step in third step
Point reads aggregation.The process can conclude that：If completed or if the more layers holding of DAG is queried, the process energy
It is enough to be continued by one or more additional iteration.
Therefore, the list of such as follow-up BN lists can be used in the aggregation for NBN is determined, because of the List Identification
The each descendent node of follow-up BN as the NBN.For example, descendent node can be identified on the list, and it is based on
The mark can be assembled.In some embodiments, system can use remote procedure call (RPC).It is for example, single more
Inquiry RPC can be used in identifying node and obtain the aggregation.
Some DAG may be extremely complex, have multiple layers and/or height degree of being fanned out to.For example, it can have two sections
The more than one path that point is connected to each other.In this or other situations, it is able to carry out more countings of path and/or node.
In some embodiments, the number in the path between more count requirement storage father nodes and its descendent node.For example, the number in path
Purpose counting can be added to one or more lists, such as RFI or ancestor list.If require more countings, system
The particular value of field can be added to the field up to corresponding number.Otherwise, counting can the ignored and field can
It is only added primary.Therefore, count can be considered when generating inquiry response to assemble more.For example, count is assembled and can be included more
Determine the number in the path between node and its descendent node.When that should consider count more, the information about the descendent node
Can repeatedly be included in the number in identified path it is corresponding aggregation information in.
Fig. 7 A-7D show the examples for counting aggregation more.Fig. 7 A show with node A (it is BN) and node B, C,
D, the DAG 700 of E (they are NBN).Here, node C forms a branch below node B, and node D and E are formed separately
One branch.The aggregation can be related to any nodal information, including but not limited to assemble file and count (here, A.F.C).It should
It shows and assembles the state that file counts before new node is added to DAG.For example, here, node B is received from node C
It counts 1 and receives aggregation from node D and E and count 3.Together with the counting 1 of B oneself, this aggregation formed at node B counts 4.
Currently assume that a node is added to DAG 700.Fig. 7 B show node F be added after state, this is new
Node has node C and E both as parent.Particularly, the figure shows the ancestor lists for each node.Node B has
There is ancestor list 710, including [(A, 1)].Value A can represent that unique ancestors of the node are node A, and value 1 being capable of table
Show that there is only a paths between node B and A.Similarly, node C has ancestor list [(A, 1), (B, 1)], indicates
Node A and B both are the ancestors of node C, and there is only a paths for each of which.
However, node F has the ancestor list convenient for more counting.Here, the ancestor list of node F is the ancestral of node C and E
The summation (because F using each in these nodes C and E as parent) of first list is along with being respectively used to node F to node C
With accordingly connect connection of E.Therefore, the ancestor list of node F be [(A, 2), (B, 2), (C, 1), (D, 1), (E,
1)].That is, node F has to two paths of node A, to two paths of node B and to each in node C, D and E
One path.
The influence that Fig. 7 C show due to being added to node F and counted to aggregation file.Node F oneself is counted with file
1.Since node F is NBN, which is upwardly propagated to follow-up BN and (one or more) intermediate NBN.Here, node B, C, D
It is NBN with E and receives additional count from node F.Thus, for example node C is now arranged in 2.In addition, node B is directed to additional two
A counting obtains appended document counting contribution from C node branches and from D-E node branches.Therefore, the aggregation file meter at node B
Number increases to 6 from 4.Similarly, the double counting of the node A also contributions of receiving node F and is therefore counted increase by 2 and from 5
Increase to 7.
Assume that more countings are disabled in turn now.Fig. 7 D are shown with the corresponding aggregation indicated by for each node
The DAG 700 that file counts.Compared with before, there is no difference for node C, D, E and F.On the other hand, for node
For B and A, the contribution of new node F is no longer calculated repeatedly.Therefore, node B have increase count 1, add up to 5 it is new
Assemble file to count.Similarly, node A have increase count 1, add up to 6 counting.
In some embodiments, the counting also is able to be stored in RFI.For example, appoint because BN is not upwardly propagated
What thing, this can promote more countings in the form of the cluster set read from BN is multiplied by the counting read from RFI.
DAG has been illustrated as making each the node person of being classified as BN or NBN, and in the above examples herein, should
Described ession for telecommunication is sorted in not for any one change in node.Usually, BN can be driven based on BN and NBN
It plays an important role in DAG during the cost amount of system.The cost is measured in the form of query time and precomputation amount of storage.Example
Such as, if DAG has a large amount of BN, performance is improved it reduce the demand for resource and when figure is updated, because
It is more than nearest BN that change, which is not required to be propagated,.However, these improvement can come in fact by cost of the degeneration of query time performance
It is existing, because system may require to look up multiple BN to answer the inquiry.On the other hand, if system has less BN, prolong
Shi Wenti may occur when being updated, and the demand to resource may bigger.However, fewer number of BN can be improved
Query time performance, because there are less BN lookups before the inquiry is answered.Therefore, this potentially contribute to can be neatly
The balance of the BN and NBN in the figure are controlled, such as optimizing above-mentioned factor according to present case.
Therefore, in some embodiments, the one or more nodes for being classified as BN or NBN can be reclassified
For another node type.In some embodiments, the method can be too high to when it becomes cost in layer
It is BN to make node when aggregation is upwardly propagated in secondary structure.For example, this can be when node has many father nodes in the graphic
Situation.The conversion can be realized dynamically, such as the evaluation by one or more criterion.For example, when which node determined
When should be BN and when carry out conversion from BN to NBN or conversion in turn, it can use what is used by lens system
One or more signals (for example, file aggregation in driver).
In some embodiments, system is configured so that：When the following conditions are no longer kept, node should be defined
For BN：
Ancestor list size<current_max_ancestor(k*max_ancestor)<global_max_
ancestor
Wherein, k is the number of parent., it is seen that the condition is included by two of corresponding " being less than " symbol instruction
Inequality.For example, if any inequality no longer meets, it may be considered that no longer keeping the condition.
Fig. 8 shows the example of evaluation obstacle nodes criterion.Herein, DAG 800 is included along exemplified earlier herein
Line BN and NBN.Particularly, node A and B are labeled, and both of which is NBN.
In this example, it is assumed that defined values below：
Max_ancestor=10
Global_max_ancestor=100
Here, there are five father nodes 810 for node A tools.Because there are five father node, the current_max_ of A for A tools
Ancestor values are 5*max_ancestor=5*10=50.That is, the ancestral that node A will will travel to its value comprising node A
First (for example, traveling to the first BN that node A is encountered along its all ancestors path).It is assumed that there are 45 such ancestrals
First.When node B is added to the filial generation of node A, some new values can be calculated.The ancestor list of B hosting nodes A so that B
Ancestor list include 45 ancestors of node A along with A oneself, therefore 45+1=46.
But because node B only has, there are one father nodes, and current_max_ancestor is 1*max_
Ancestor=1*10=10.That is, B currently has 46 ancestors, this has been more than maximum value 10.For the standard as obstacle nodes
It therefore can then be satisfied, and B can be newly defined as BN by system.
In some embodiments, criterion can be suitable for redefining for BN to NBN or redefining for NBN to BN,
Both or be suitable for simultaneously.For example, this can include the method performed in figure (such as DAG 800).The method can wrap
It is NBN, and for Node evaluation BN criterion to include node definition.Once it is determined that the BN criterion are satisfied, the method is with regard to energy
It is the BN in DAG enough by the node definition.
Fig. 9 shows another example of evaluation obstacle nodes criterion.Here, DAG 900 includes nodes X, and corresponding
Father node A, B, C and Y are then added to nodes X.The addition of father node can be made by the way that new node is introduced into DAG 800
Obtaining them has set membership with nodes X and carries out.It as another example, can be in the existing node in nodes X and the figure
Between create new set membership.
In this example, Max_ancestor values have been set to 50.Following number is added in addition, new father node has
It is added to the ancestor list of the ancestors of X：It is the list of 25, C is 60, and the list of D is 110 that the list of A, which is the list of 50, B,.When
When node A is added to nodes X as father node, X obtains a parent.The current_max_ancestor values of nodes X because
This becomes 1*50=50.In addition, A and its ancestor list are countings 50 to the cumulative effect of the ancestor list of B.This is by current_
Max_ancestor values allow, and therefore X copies to the ancestors of node A in its list.
When node B is added to the parent of nodes X, the current_max_ancestor values of X become 50+50=100.
However, the total of ancestors' number on X of B influences only to be 25, as mentioned above.Therefore these 25 will be added to by nodes X
In its ancestor list.That is, current_max_ancestor values are 100, but X currently has only 75 ancestor list.
When node C is added to the parent of nodes X, the current_max_ancestor values of X become 150 (due to tool
There are three parents).In addition, node C will count 60 ancestor lists for being added to X.Therefore the ancestor list of nodes X becomes 75+60
=135.
On the other hand, node Y has relatively large ancestor list.When node Y is added to the parent of nodes X, X's
Current_max_ancestor values increase by 50 and become 200.In addition, addition is contributed to existing the 135 of nodes X by node Y
110 ancestors of a ancestors will cause nodes X to have 245 ancestors.This is by the current_max_ancestor more than 200
Value.Therefore, once node Y is added to parent, nodes X can be just newly defined as BN by system.
In some embodiments, BN can be created and upwardly propagate higher to avoid too many be gathered in hierarchical structure, from
And stop propagating at the point being created at new node or new edge meaningful.In addition, the addition of father node can with it is upper
The different order of order described in text occurs.For example, if node Y is added to nodes X before node A, B and C
Parent, then, BN criterion will be met at this point.Therefore, nodes X may than in previous example earlier
It is redefined BN.
In the above examples, BN conditions are no longer kept, because the actual number growth of ancestors is too big.In other situations
In, the condition is it can be seen that be no longer kept, because regardless of the actual number of ancestors, the potential number of ancestors increases too
Greatly.It is described below such example.Figure 10 shows another example of evaluation obstacle nodes criterion.With previous example class
Seemingly, there is nodes X, and father node A, B, C and Y will be added to nodes X in DAG1000.Moreover, max_ancestor values are
50, and allowable_max_ancestor has been set to 200.However, the ancestor list of node A, B, C and Y with previously
Example it is different so that they contribute to the ancestor list of nodes X at this corresponding counts of 50,50,50 and 40 ancestors.
Therefore, when node A is added to the parent of nodes X, the current_max_ancestor values of X become 50.When
When node B is added to the parent of nodes X, the current_max_ancestor values of X become 100, and when node C is added
During parent for nodes X, the current_max_ancestor values of X become 150.Finally, when node Y is added to nodes X
During parent, the current_max_ancestor values of X become 200.However, the value and 200 allowable_max_
Ancestor values are identical.Current_max_ancestor should be less than allowable_max_ancestor inequality therefore not
It is kept again.Therefore, it is possible to determine that X should be redefined BN.
In some embodiments, multiple BN criterion (such as dual inequality mentioned above) can be evaluated, also, such as
Any one in criterion described in fruit is satisfied, then node can be redefined.For example, the criterion can include：Ancestors arrange
Table size is at least equal to current maximum ancestors' value of node.As another example, which can include：Current maximum ancestors' value
At least equal to global maximum ancestors' value.
Above example is related to NBN potentially is newly defined as BN.In some embodiments, BN can be redefined
For NBN.For example, since hierarchical structure updates (such as removal of big father's hierarchical structure), thus the node can be fitted preferably
It is combined into NBN.This can at least be determined using estimated ancestors' number.In some embodiments, BN is arranged without ancestors
Table, but the size of its potential ancestor list can be calculated using the size of the ancestor list of its parent.In some embodiment party
In formula, the criterion different from the criterion redefined for NBN to BN can be used.In some embodiments, can make
Use the following conditions：
2* (ancestor list size)<current_max_ancestor(k*max_ancestor)<(global_max_
ancestor)/2
For example, this can try to ensure that there is no converting back and forth too much from BN to NBN and from NBN to BN.Therefore, this
The criterion of sample can include the threshold value more tightened up than being directed to the correspondence threshold value of another criterion.
In some embodiments, one or more signals can be used in triggering the conversion between BN and NBN.Sometimes, needle
To some user's ratios, for other people, quickly Services Aggregation is inquired and search inquiry may be preferred.For example, this can take
The level for the service being certainly provided in user so that certain user will pay extra charge and be used as to more advanced or faster implementation
Remuneration.And then another user can receive discount or free service, as in the inquiry and level of maintenance structure is serviced
The remuneration of the stock number of the reduction used.Some embodiments can balance resource and use and the query time performance for aggregation
And it is searched in deep, the big and/or DAG of frequent updating based on graphics priority.If for example, figure have it is higher preferential
Grade then can relatively quickly service the inquiry, also, if figure has relatively low priority, system can will be looked into
Time performance is ask for resource-effective to compromise.
The balance of the number of BN and the number of NBN can realize above-mentioned characteristic.Reach flat between them determining how
The example for the signal that can be used in weighing apparatus includes but not limited to：The identity of user belonging to file-folder hierarchy, example
The rank of addressable service such as to user；And hierarchical structure behavior, for example, continually newer hierarchical structure should have phase
To more BN, and the hierarchical structure for being continually queried BN numbers can be held relatively low number.
Some of the above example has included the aggregation that the file below the respective nodes in DAG counts.About the other of node
Information can with or can be queried on the contrary.In some embodiments, the effective search being capable of providing in DAG.In level knot
Search on structure can be defined to search for all nodes for meeting a certain condition in the hierarchical structure.For example, inquiry can
Corresponding to request " my all images that can access in this document folder are shown to me " or " show in this document folder to me
All Files with specific type (such as " * .pdf " (that is, asterisk wildcard expression of pdf files)) ".Using BN and NBN, in depth
, in DAG that there is high degree of being fanned out to and/or when hierarchical structure frequently changes, can also be effectively carried out such search.
About search, BN can be stored in its lower section until the precomputation search metadata of the subtree of some depth.That is, BN
The search metadata of entire subtree may or may not be stored.If BN cannot store all search of entire subtree below
Metadata, then it can store BN lists below, because the metadata of those BN should be read to calculate under the node
The statistics of the entire subtree in face.As BN, node does not propagate the search metadata above oneself, but, institute below
There is search metadata to be all only accumulated into the BN.In contrast, NBN can store the list of the ancestors above it, until it is arrived
Up to the first BN in its hierarchical structure (that is, in each path upwards).Therefore it can propagate its search metadata, until BN
Until.That is, be not to assemble multiple values as in other examples herein, certain embodiments can in hierarchical structure to
The upper multiple indexes of aggregation, until finding BN.
Figure 11 shows the example of multiple indexes in aggregation DAG 1100.Herein, node A to J is shown.Node A, E
It is BN with F, and node B, C, D, G, H, I and J are NBN.Each node can include some information.File type field 1110
It is associated with what kind of file to indicate the node.For example, node B has file type " file ", node E has text
Part type " image ", and node H has type document " Doc ".File field 1120 indicates whether the node assembles one
A or multiple files and (if so) name of the file.For example, the file field of node B includes
“B”；The file field of node F includes " F, G ", because it is for use as the BN of the node G of file；Also, node
E --- it is image rather than file --- is without file field.In addition, image field 1130 is indicated by the node
The name (if any) of the image of aggregation.For example, the image field of node A includes " I ", because node I is corresponded to herein
In image.In contrast, node J (it is also image) is not identified in the image field of node A, because node J is assembled
In another BN in the following, i.e. node F.That is, the image field of node F includes entry " J ", because node J is to be focused into section here
The only image of point F.
Consider that wherein user wishes to show the situation of all images and all documents together now.As NBN, node B, C,
Their index will be gathered node A by D and I, and node A is BN.Node E and F are BN, therefore will not upwardly propagate its rope
Draw.Finally, node G, H and J is NBN, therefore its index will be traveled to node F (i.e. BN), and no more than node F.Example
Such as, it is assumed that all images below node A are found in the inquiry.Mathematically, this can be expressed as inquiring：
TypeIndexA[image]∪TypeIndexE[image]∪TypeIndexF[image]
That is, the inquiry concentrates on node A, E and F, each is all BN.Here, node I, E and J is to meet
The image of above-mentioned criterion.Therefore, these images can be searching results.
As another example, it is assumed that find all images below node D.Mathematically, this can be expressed as inquiring：
TypeIndexD[image]∪TypeIndexF[image]
That is, the inquiry concentrates on node D (it is NBN) and BN (i.e. node F) below.Here, node I and J are
Meet the image of above-mentioned criterion.Therefore, these images can be searching results.
As another example, it is assumed that find all images below node G.Mathematically, this can be expressed as inquiring：
TypeIndexG[image]
That is, the inquiry concentrates on node G, it is the NBN for not having any BN below.Herein, node J is to meet
State the image of criterion.Therefore, which can be searching results.
In some cases, it may be undesirable to form cycle during the edge addition in tree or DAG.Its example can wrap
Include the filial generation for the filial generation file that file is added to the their own in file system.For large-scale or complicated level knot
Structure, it is desirable to which the system that real-time circulation detection is performed when edge is added may not work.On the other hand, it is intended to which precomputation is any
The problem of system potentially recycled is delayed there may be update.
Method comprising BN and NBN is capable of providing efficient cycle and prevents.Figure 12 shows that the cycle in DAG 1200 is prevented
Example only.DAG 1200 includes many nodes, for simplicity, illustrates only some of which node.It has marked
Node A, B, C and D.Node A and B are NBN, and node C and D are BN.
Currently assume that user attempts to create the edge 1210 from node B to node A.If node A has been the ancestral of node B
It is first, then the node A being already present in the ancestor list of node B may be found in the case that many (or most of).For example, it protects
The upper limit for holding ancestor list sufficiently large just can try to ensure this point.However, in other cases, node A is not node B's
In ancestor list, but node A is the ancestors of node B.In this case, system can search the path for connecting node A with B
On one or more BN.
Here, on the edge 1210 of connecting node A and B, node C is the nearest BN offsprings of node A, and node D
It is the nearest BN ancestors of node B.As shown in the figure, it can have more than one BN between A and B.In addition, if A is in itself
BN, then, for such purposes, one can consider that C=A, and be similar for node B.
If A is the ancestor node of node B, then, it is assumed that node C and D are different, it should meet the following conditions：
The reading fan-in list of D ∈ C
That is, the RFI of C should include node D, because RFI is accumulation, and all BN offsprings are therefore stored.Therefore it can
To follow：
If A is the ancestors of B,At least two obstacle nodes C and D：
1.C：C is one of follow-up obstacle nodes of A
2.D：D is one of previous obstacles node of B
So that：
D ∈ C. read fan-in list or C=D
Therefore, if A is the ancestors of B, then one in following should keep：
A ∈ B. ancestor lists
Or
D ∈ C. read fan-in list
Or
C=D
In such manner, it is possible to detect the formation of the cycle in DAG, and therefore can if necessary prevent in this way.The method
It can include：Detection new relation will be introduced in DAG and, determine whether the new relation has ring.By in every secondary side
Edge verifies above-mentioned constraint when being added to figure (DAG), this is determined to be implemented in an efficient manner on computers.
For example, RFI can be used.Once it is determined that the new relation has ring, it will be able to the new relation is prevented in DAG.
Figure 13 shows the example of general purpose computing device 1300 and General Mobile computer equipment 1350, they can be with
Technique described herein is used together.Computing device 1300 is intended to indicate that various forms of digital computers, such as electricity on knee
Brain, desktop computer, tablet computer, work station, personal digital assistant, TV, server, blade server, mainframe and its
Its appropriate computing device.Computing device 1350 is intended to indicate that various forms of mobile equipment, such as personal digital assistant, honeycomb
Phone, smart phone and any other like computing device.Component shown herein, its connection and relationship and their functions
It is intended to only be exemplary, and is not intended to be limited to described herein and/or claimed invention embodiment.
Computing device 1300 includes processor 1302, memory 1304, storage device 1306 and is connected to memory 1304
It is connect with the high-speed interfaces 1308 of high-speed expansion ports 1310 and the low speed for being connected to low speed bus 1314 and storage device 1306
Mouth 1312.Processor 1302 can be the processor based on semiconductor.Memory 1304 can be the memory based on semiconductor.
Each in component 1302,1304,1306,1308,1310 and 1312 may be mounted at altogether using various bus interconnections
It installs on same mainboard or in other suitable ways.Processor 1302 can handle to perform in computing device 1300
Instruction, including being stored in memory 1304 or being used for external input/output device (example in storage device 1306 with display
Such as be connected to the display 1316 of high-speed interface 1308) on GUI graphical display instruction.In other embodiments, may be used
To take the circumstances into consideration to be used together multiple processors and/or multiple buses with a plurality of types of memories with multiple memories.It is moreover, multiple
Computing device 1300 can be connect with each equipment for the various pieces for providing necessary operation (for example, as server group, blade
Server group or multicomputer system).
Memory 1304 is stored information in computing device 1300.In one embodiment, memory 1304 is one
A or multiple volatile memory-elements.In another embodiment, memory 1304 is one or more non-volatile memories
Device unit.Memory 1304 can also be another form of computer-readable medium, such as disk or CD.
Storage device 1306 can be that computing device 1300 provides mass memory.In one embodiment, storage device
1306 can be computer-readable medium or comprising computer-readable medium, for example, floppy device, hard disc apparatus, compact disk equipment or
Tape unit, flash memory or other similar solid storage devices or equipment array, including storage area network or other
Equipment in configuration.Computer program product can be visibly implemented in the information carrier.The computer program product may be used also
To include the instruction for performing one or more methods (such as method as discussed above) when executed.The information carrier is to calculate
Machine or machine readable media, such as memory 1304, storage device 1306 or the processor on processor 1302.
The management of high-speed controller 1308 is used for the operation of the bandwidth intensive of computing device 1300, and low speed controller 1312 is managed
Manage the intensive operation of lower bandwidth.Such function distribution is only exemplary.In one embodiment, high-speed controller
1308 are coupled to memory 1304, display 1316 (for example, by graphics processor or accelerator) and high-speed expansion ports
1310, the high-speed expansion ports 1310 can receive various expansion card (not shown).In this embodiment, low speed controller
1312 are coupled to storage device 1306 and low-speed expansion port 1314.It can include various communication port (for example, USB, indigo plant
Tooth, Ethernet, wireless ethernet) low-speed expansion port may be coupled to one or more input-output apparatus (such as key
Disk, pointer device, scanner) or the network equipment (such as interchanger or router) is for example coupled to by network adapter.
Computing device 1300 can be realized in many different forms, as shown in FIG..For example, which can be implemented as
Standard server 1320 is repeatedly implemented in such server group.It is also implemented as rack server system
A part for system 1324.In addition, it can be implemented in personal computer (such as laptop computer 1322).Alternatively,
Component from computing device 1300 can be with other component combinations in the mobile equipment (not shown) of such as equipment 1350.This
Each equipment in the equipment of sample can include computing device 1300, one or more of 1350, and whole system can
To be made of the multiple computing devices 1300,1350 to communicate with one another.
Computing device 1350 especially includes processor 1352, memory 1364, input-output apparatus (such as display
1354th, communication interface 1366 and transceiver 1368).Equipment 1350 be also provided with storage device (such as mini drive or its
Its equipment), to provide additional storage device.Each component in component 1350,1352,1364,1366 and 1368 uses each
Kind of bus interconnection, and if the dry part in these components may be mounted on common mainboard or pacify in other suitable ways
Dress.
Processor 1352 is able to carry out the instruction in computing device 1350, including the finger being stored in memory 1364
It enables.The processor may be implemented as the chipset of chip, including the multiple analog- and digital- processors detached.The processor
Such as the coordination of other components of equipment 1350 can be provided, such as user interface control, run by equipment 1350 application,
And the wireless communication carried out by equipment 1350.
Processor 1352 can by be coupled to control interface 1358 and the display interface 1356 of display 1354 and with
Family communicates.Display 1354 for example can be TFT LCD (Thin Film Transistor-LCD) or OLED (organic light-emitting diodes
Pipe) display or other appropriate display technologies.Display interface 1356 can include driving display 1354 with by figure
The proper circuit being presented to the user with other information.Control interface 1358 can receive order from the user and it is turned
It changes to submit to processor 1352.It communicates in addition, external interface 1362 can be provided with processor 1352, to allow equipment
1350 with the near region field communication of miscellaneous equipment.External interface 1362 can for example provide wire communication in some embodiments or
Wireless communication in other embodiment is provided, and multiple interfaces can also be used.
Memory 1364 is stored information in computing device 1350.Memory 1364 may be implemented as in the following terms
It is one or more：Computer-readable medium or media, one or more volatile memory-elements or one or more non-easy
The property lost memory cell.Extended menory 1374 can also be provided and be connected to equipment 1350 by expansion interface 1372,
It can include such as SIMM (single in-line memory modules) card interface.Such extended menory 1374 can be that equipment 1350 carries
For additional storage space or the application for equipment 1350 or other information can also be stored.Particularly, extended menory
1374 can include performing or supplementing the instruction of the above process, and can also include security information.Thus, for example, extension is deposited
Reservoir 1374 may be provided as the security module of equipment 1350, and can be programmed with the safety for allowing equipment 1350
The instruction used.In addition, security application can be provided together with additional information via SIMM cards, such as with not assailable side
Identification information is placed on SIMM cards by formula.
The memory can for example include flash memory and/or NVRAM memory, as discussed below.One
In a embodiment, computer program product is visibly implemented in the information carrier.The computer program product is included in quilt
The instruction of one or more methods (such as method as described above) is performed during execution.The information carrier is that computer or machine can
Medium, such as memory 1364, extended menory 1374 or the memory on processor 1352 are read, can for example pass through receipts
Hair device 1368 or external interface 1362 receive.
Equipment 1350 can wirelessly be communicated by communication interface 1366, can include number letter in the case of necessary
Number processing circuit.It (is especially, for example, GSM audio calls, SMS, EMS that communication interface 1366, which can be provided in various patterns or agreement,
Or MMS message, CDMA, TDMA, PDC, WCDMA, CDMA2000 or GPRS) under communication.Such communication can for example pass through
RF transceiver 1368 carries out.In addition, short-range communication can carry out, such as use transceiver as bluetooth, WiFi or other
(not shown).In addition, GPS (global positioning system) receiver module 1370 can be by additional navigation no line number related to position
According to being supplied to equipment 1350, it can take the circumstances into consideration by run in equipment 1350 using.
Equipment 1350 can also audibly be communicated using audio codec 1360, and voice letter can be received from user
It ceases and is converted into available digital information.Audio codec 1360 can equally generate the audible sound for user
Sound, such as pass through loud speaker (for example, loud speaker in the headset of equipment 1350).Such sound can be included from voice electricity
The sound of calling is talked about, recording (for example, speech message, music file etc.) can be included, and can also include by equipment
The sound that the application run on 1350 is generated.
Computing device 1350 can be embodied in many different forms, as shown in FIG..For example, which can be implemented as bees
Cellular telephone 1380.It is also implemented as the one of smart phone 1382, personal digital assistant or other similar mobile equipment
Part.
Can with Fundamental Digital Circuit, integrated circuit, the ASIC (application-specific integrated circuit) specially designed, computer hardware,
Firmware, software and/or a combination thereof realize the various embodiments of system described herein and technology.These various embodiments
The one or more that can perform and/or can be explained in programmable system containing at least one programmable processor can be included in
Embodiment in computer program, the processor (it can be special or general) is coupled to from storage system, to
A few input equipment and at least one output equipment receive data and instruction and give data and instruction issue to the storage system
System, at least one input equipment and at least one output equipment.
These computer programs (also referred to as program, software, software application or code) are including being used for programmable processor
Machine instruction, and can be realized with advanced programs and/or object-oriented programming languages and/or compilation/machine language.Such as this
Used in text, term " machine readable media " and " computer-readable medium " refer to carry machine instruction and/or data
Any computer program product of programmable processor, device and/or equipment are supplied (for example, disk, CD, memory, can compile
Journey logical device (PLD)), including receiving machine instruction machine readable medium as a machine-readable signal.Term is " machine readable
Signal " refers to any signal for machine instruction and/or data to be supplied to programmable processor.
In order to provide the interaction with user, system described herein and technology can be implemented on computers, the calculating
Equipment is useful for displaying information to the display equipment of user (for example, CRT (cathode-ray tube) or LCD (liquid crystal display) prisons
Visual organ) and user can pass through its to computer provide input keyboard and pointer device (for example, mouse or trace ball).Its
The equipment of its type also can be used in providing the interaction with user；For example, the feedback for being supplied to user can be any type of
Sense feedback (such as visual feedback, audio feedback or touch feedback)；Also, input from the user can in any form by
It receives, including sound, voice or sense of touch.
System described herein and technology can be implemented in computing systems, which includes back-end component (example
Such as, as data server) either including middleware component (for example, application server) or including front end component (for example,
Graphical user circle of Web browser that can be interacted with user by its embodiment with system described herein and technology
The client computer in face) or such rear end, middleware or front end component any combinations.The component of the system can be with
Any form is interconnected by the medium of digital data communications (such as communication network).The example of communication network includes LAN
(" LAN "), wide area network (" WAN ") and internet.
The computing system can include client and server.Client and server is generally remote from each other and usually
Pass through communication network interaction.The relationship of client and server is by means of running on corresponding computer and having client each other
The computer program of end-relationship server and occur.
In one example, obstacle nodes method for congregating includes：It is defined as obstacle nodes or non-obstacle in each node
In the directed acyclic graph of node, for the first obstacle nodes mark as the first obstacle nodes follow-up obstacle nodes it is each after
For node；And at the first obstacle nodes aggregation as the first obstacle nodes offspring and not by any identified
Follow-up obstacle nodes and the information of each non-obstacle nodes detached with the first obstacle nodes.Non- obstacle nodes transmission method packet
It includes：In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes in each node, for the first non-obstacle nodes mark
Know each ancestor node of the previous obstacles node as the first non-obstacle nodes；And the information by the first non-obstacle nodes
Travel to each identified previous obstacles node and between the first non-obstacle nodes and the previous obstacles node identified
Each non-obstacle nodes.
Many embodiments have been described.It will be understood, however, that in the situation for not departing from spirit and scope
Under, various modifications may be made.
In addition, the logic flow described in attached drawing does not require shown particular order or sequentially realizes successively desired
As a result.Furthermore it is possible to provide other steps or step can be saved from described stream, and other components can be by
It is added to described system or is removed from the system.Therefore, other embodiments are also within the scope of the appended claims.
Claims (31)
1. a kind of computer implemented method of the hierarchial file structure storage in file system, the file system are oriented with being formed
Multiple nodes of acyclic figure, in the directed acyclic graph, each node is defined as obstacle nodes or non-obstacle nodes, described
Method includes：
In the directed acyclic graph of the file system, identified for the first obstacle nodes and be used as first obstacle nodes
Follow-up obstacle nodes each descendent node；And
Assemble the offspring as first obstacle nodes at first obstacle nodes and not by any identified
Follow-up obstacle nodes and the information of each non-obstacle nodes detached with first obstacle nodes.
2. computer implemented method according to claim 1, further includes：First row is created for first obstacle nodes
Table, the first list identify all descendent nodes as obstacle nodes of first obstacle nodes.
3. computer implemented method according to claim 2, further includes：It is accumulation to make the first list so that：
If the first list of first obstacle nodes identifies specific obstacle nodes, then, in first obstacle nodes
The corresponding first list for containing first obstacle nodes of obstacle nodes above will also include the specific obstacle nodes.
4. computer implemented method according to claim 2, further includes：Detection new relation is just being introduced in described oriented
In acyclic figure；Determine whether the new relation has ring using the first list；And once it is determined that the new relation is
There is ring, the new relation is just prevented in the directed acyclic graph.
5. computer implemented method according to claim 2, further includes：The first list is stored in described first
At obstacle nodes.
6. computer implemented method according to claim 2, further includes：Secondary series is created for first obstacle nodes
Table, the second list identify all ancestor nodes as obstacle nodes of first obstacle nodes.
7. computer implemented method according to claim 6, wherein, which node is the second list indicate by institute
The first obstacle nodes mark is stated in its corresponding first list.
8. a kind of method for the propagation that non-obstacle nodes by directed acyclic graph carry out, the method includes：
In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes in each node, for the first non-obstacle nodes mark
Know each ancestor node of the previous obstacles node as the described first non-obstacle nodes；And
By the information of the described first non-obstacle nodes travel to each identified previous obstacles node and described first it is non-
Each non-obstacle nodes between obstacle nodes and the previous obstacles node identified.
9. it according to the method described in claim 8, further includes：The ancestors with the upper limit are created for the described first non-obstacle nodes to arrange
Table, the ancestor list with the upper limit identify the ancestor node that the described first non-obstacle nodes travel to described information.
10. according to the method described in claim 9, wherein, the ancestor list with the upper limit is based on current maximum ancestors
It is worth and is defined, the method further includes：Had in the directed acyclic graph based on the described first non-obstacle nodes how many
Father node sets current maximum ancestors' value.
11. it according to the method described in claim 8, further includes：Follow-up obstacle nodes row are created for the described first non-obstacle nodes
Table, each offspring section of the follow-up obstacle nodes List Identification as the follow-up obstacle nodes of the described first non-obstacle nodes
Point.
12. it according to the method described in claim 8, further includes：Previous obstacles node row are created for the described first non-obstacle nodes
Table, the previous obstacles node listing identify each ancestors section as the previous obstacles node of the described first non-obstacle nodes
Point；And the previous obstacles node listing is used in the mark.
13. a kind of method, including：
The inquiry for the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes to wherein each node is received, it is received
Inquiry it is related with first node and its offspring；
Based on received inquiry, determine：(i) first aggregation, it is described first aggregation be stored at the first node and
(ii) the second aggregation, second aggregation are stored at the spawn node as obstacle nodes of the first node；
And
The response to received inquiry is generated using the described first aggregation and the second aggregation.
14. according to the method for claim 13, wherein, the first node is the first obstacle nodes, and the method is also wrapped
It includes：It is identified when determining second aggregation using list, the list for first obstacle nodes as obstacle section
Each descendent node of point.
15. according to the method for claim 14, wherein it is determined that second aggregation includes：It identifies in the list extremely
A few descendent node, and assembled based on the mark to obtain described second.
16. according to the method for claim 13, wherein, the first node is the first non-obstacle nodes, and the method is also
Including：It is identified when determining second aggregation using list, the list for the described first non-obstacle nodes as institute
State each descendent node of the follow-up obstacle nodes of the first non-obstacle nodes.
17. according to the method for claim 16, wherein it is determined that second aggregation includes：It identifies in the list extremely
A few descendent node, and assembled based on the mark to obtain described second.
18. according to the method for claim 17, wherein, the mark and the acquisition are using single more long-range mistakes of inquiry
Journey is called and is performed.
19. according to the method for claim 13, wherein, the directed acyclic graph, which has from the first node, reaches offspring
Multiple approach of node, the method further include：Consider that count is assembled more when generating the response.
20. according to the method for claim 19, wherein, consider that more counting aggregations include：Determine the first node
The number in the path between the descendent node.
21. it according to the method for claim 20, further includes：By the information of the descendent node include with identified road
In corresponding first aggregation of number of diameter or the second aggregation repeatedly.
22. a kind of method, including：
In the directed acyclic graph for being defined as obstacle nodes or non-obstacle nodes in each node, first node is defined as non-barrier
Hinder node；
Obstacle nodes criterion is evaluated for the first node；And
Once it is determined that the first node meets the obstacle nodes criterion, the first node is just defined as the oriented nothing
Obstacle nodes in ring figure.
23. according to the method for claim 22, wherein, the first node, which has, corresponds to the first node described
There is the ancestor list size of how many ancestors, and wherein in directed acyclic graph, the obstacle nodes criterion includes the ancestors
List size at least equal to the first node current maximum ancestors' value, wherein, current maximum ancestors' value depends on institute
State first node has how many father node in the directed acyclic graph.
24. according to the method for claim 22, wherein, the first node, which has, depends on the first node described
Current maximum ancestors' value with how many father node in directed acyclic graph, and wherein, the obstacle nodes criterion includes described
Current maximum ancestors' value is at least equal to the maximum ancestors' value of the overall situation of the directed acyclic graph.
25. according to the method for claim 22, wherein, multiple obstacle nodes criterion are evaluated, and wherein, once it is determined that
Any one in the multiple obstacle nodes criterion is satisfied, and just the first node is defined as in the directed acyclic graph
Obstacle nodes.
26. according to the method for claim 22, wherein, the second node in the directed acyclic graph is defined as obstacle section
Point, the method further include：Non- obstacle nodes criterion, also, once it is determined that second section are evaluated for the second node
Point meets the non-obstacle nodes criterion, the non-obstacle nodes being just defined as the second node in the directed acyclic graph.
27. according to the method for claim 26, wherein, the non-obstacle nodes criterion has with the obstacle nodes criterion
Common at least one parameter, and wherein, the threshold value of at least one parameter compares in the non-obstacle nodes criterion
It is tightened up in the obstacle nodes criterion.
28. it according to the method for claim 22, further includes：Determining whether the first node being defined as obstacle nodes
When, consider at least one other signal about the directed acyclic graph.
29. according to the method for claim 28, wherein, at least one other signal includes a type of service,
User uses the directed acyclic graph by a type of service.
30. according to the method for claim 28, wherein, at least one other signal is including the directed acyclic graph just
The characteristic how to be used.
31. a kind of file system, including：
Hierarchial file structure stores, and has the multiple nodes for forming directed acyclic graph, in the directed acyclic graph, each node quilt
It is defined as obstacle nodes or non-obstacle nodes；
Wherein, the file system is configured to：It is identified for the first obstacle nodes as the follow-up of first obstacle nodes
Each descendent node of obstacle nodes, and offspring of the aggregation as first obstacle nodes at first obstacle nodes
And each non-obstacle nodes not detached by any identified follow-up obstacle nodes with first obstacle nodes
Information.
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/388,288 | 2016-12-22 | ||
US15/388,288 US20180181676A1 (en) | 2016-12-22 | 2016-12-22 | Nodes in directed acyclic graph |
Publications (1)
Publication Number | Publication Date |
---|---|
CN108228697A true CN108228697A (en) | 2018-06-29 |
Family
ID=60002132
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201710881282.4A Pending CN108228697A (en) | 2016-12-22 | 2017-09-26 | Node in directed acyclic graph |
Country Status (5)
Country | Link |
---|---|
US (1) | US20180181676A1 (en) |
CN (1) | CN108228697A (en) |
DE (2) | DE202017105891U1 (en) |
GB (1) | GB2558346A (en) |
WO (1) | WO2018118167A1 (en) |
Families Citing this family (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10692254B2 (en) * | 2018-03-02 | 2020-06-23 | International Business Machines Corporation | Systems and methods for constructing clinical pathways within a GUI |
US11315204B2 (en) * | 2018-04-12 | 2022-04-26 | Coursera, Inc. | Updating sequence of online courses for new learners while maintaining previous sequences of online courses for previous learners |
US10613842B2 (en) * | 2018-04-30 | 2020-04-07 | International Business Machines Corporation | Simplifying a control flow graph based on profiling data |
US11169979B2 (en) * | 2019-12-31 | 2021-11-09 | Intuit, Inc. | Database-documentation propagation via temporal log backtracking |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060085440A1 (en) * | 2004-10-18 | 2006-04-20 | Srinivas Jandhyala | Apparatus, system, and method for efficiently managing membership in a hierarchical data structure |
US8504733B1 (en) * | 2007-07-31 | 2013-08-06 | Hewlett-Packard Development Company, L.P. | Subtree for an aggregation system |
CN105138859A (en) * | 2015-09-30 | 2015-12-09 | 四川师范大学 | Three-dimensional panorama roaming path finding method and system |
Family Cites Families (19)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5430870A (en) * | 1992-10-13 | 1995-07-04 | Sun Microsystems, Inc. | Saving and restoring traversal state attributes of a directed acyclic graph structure network for a parent structure when it invokes a child structure for traversal |
US5454102A (en) * | 1993-01-19 | 1995-09-26 | Canon Information Systems, Inc. | Method and apparatus for transferring structured data using a self-generating node network |
US5970496A (en) * | 1996-09-12 | 1999-10-19 | Microsoft Corporation | Method and system for storing information in a computer system memory using hierarchical data node relationships |
US7117273B1 (en) * | 2000-01-25 | 2006-10-03 | Cisco Technology, Inc. | Methods and apparatus for maintaining a map of node relationships for a network |
WO2002078229A1 (en) * | 2001-03-21 | 2002-10-03 | Stine John A | An access and routing protocol for ad hoc networks using synchronous collision resolution and node state dissemination |
WO2002084431A2 (en) * | 2001-04-11 | 2002-10-24 | International Business Machines Corporation | Simplifying and manipulating k-partite graphs |
US7315852B2 (en) * | 2003-10-31 | 2008-01-01 | International Business Machines Corporation | XPath containment for index and materialized view matching |
US8117606B2 (en) * | 2007-06-04 | 2012-02-14 | Infosys Technologies Ltd. | System and method for application migration in a grid computing environment |
US7856437B2 (en) * | 2007-07-31 | 2010-12-21 | Hewlett-Packard Development Company, L.P. | Storing nodes representing respective chunks of files in a data store |
US20090276404A1 (en) * | 2008-04-30 | 2009-11-05 | Henigman Timothy J | Method and system for efficient data structure for reporting on indeterminately deep hierarchies |
US9452654B2 (en) * | 2009-01-07 | 2016-09-27 | Fox Factory, Inc. | Method and apparatus for an adjustable damper |
US8135753B2 (en) * | 2009-07-30 | 2012-03-13 | Microsoft Corporation | Dynamic information hierarchies |
US9244976B1 (en) * | 2010-12-16 | 2016-01-26 | The George Washington University and Board of Regents | Just-in-time analytics on large file systems and hidden databases |
US8484208B1 (en) * | 2012-02-16 | 2013-07-09 | Oracle International Corporation | Displaying results of keyword search over enterprise data |
US8861340B1 (en) * | 2012-03-12 | 2014-10-14 | Juniper Networks, Inc. | Fast reroute using maximally redundant trees |
JP6021680B2 (en) * | 2013-02-19 | 2016-11-09 | 株式会社日立製作所 | Autonomous distributed deduplication file system, storage unit, and data access method |
US20160275154A1 (en) * | 2015-03-16 | 2016-09-22 | Infotrax Systems | Efficient calculations within a hierarchically organized data structure |
US10268798B2 (en) * | 2015-09-22 | 2019-04-23 | International Business Machines Corporation | Condition analysis |
SE2251212A1 (en) * | 2015-11-25 | 2022-10-15 | Teamifier Inc | Apparatuses for graphically representing a reconfigured portion of a directed acyclic graph as a hierarchical tree structure |
-
2016
- 2016-12-22 US US15/388,288 patent/US20180181676A1/en not_active Abandoned
-
2017
- 2017-09-22 GB GB1715312.3A patent/GB2558346A/en not_active Withdrawn
- 2017-09-22 WO PCT/US2017/052986 patent/WO2018118167A1/en active Application Filing
- 2017-09-26 CN CN201710881282.4A patent/CN108228697A/en active Pending
- 2017-09-27 DE DE202017105891.3U patent/DE202017105891U1/en not_active Expired - Lifetime
- 2017-09-27 DE DE102017122489.0A patent/DE102017122489A1/en not_active Withdrawn
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060085440A1 (en) * | 2004-10-18 | 2006-04-20 | Srinivas Jandhyala | Apparatus, system, and method for efficiently managing membership in a hierarchical data structure |
US8504733B1 (en) * | 2007-07-31 | 2013-08-06 | Hewlett-Packard Development Company, L.P. | Subtree for an aggregation system |
CN105138859A (en) * | 2015-09-30 | 2015-12-09 | 四川师范大学 | Three-dimensional panorama roaming path finding method and system |
Also Published As
Publication number | Publication date |
---|---|
US20180181676A1 (en) | 2018-06-28 |
WO2018118167A1 (en) | 2018-06-28 |
DE202017105891U1 (en) | 2018-02-12 |
GB2558346A (en) | 2018-07-11 |
DE102017122489A1 (en) | 2018-06-28 |
GB201715312D0 (en) | 2017-11-08 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11888605B2 (en) | Methods and systems for making effective use of system resources | |
US10936668B2 (en) | Systems and methods for querying databases | |
US20230281041A1 (en) | File operation task optimization | |
Coudert | On solving covering problems | |
US8237716B2 (en) | Algorithm for drawing directed acyclic graphs | |
CN108228697A (en) | Node in directed acyclic graph | |
JP6192800B2 (en) | Method, apparatus, and computer-readable medium for performing efficient operations on individual data values | |
US8782051B2 (en) | System and method for text categorization based on ontologies | |
CN104462084B (en) | Search refinement is provided based on multiple queries to suggest | |
JP5092165B2 (en) | Data construction method and system | |
CN110795509A (en) | Method and device for constructing index blood relationship graph of data warehouse and electronic equipment | |
US9411857B1 (en) | Grouping related entities | |
US9110984B1 (en) | Methods and systems for constructing a taxonomy based on hierarchical clustering | |
CN102999574A (en) | Positioning of relative content item via crossing plural different content sources | |
CN107229718A (en) | The method and apparatus for handling report data | |
US20170068732A1 (en) | Multi-system segmented search processing | |
KR20140089531A (en) | Routing query results | |
CN106446122A (en) | Information retrieval method and device and computation device | |
CA3089097A1 (en) | Domain-based search engine | |
US20150058363A1 (en) | Cloud-based enterprise content management system | |
US20150293971A1 (en) | Distributed queries over geometric objects | |
Theeten et al. | Chive: Bandwidth optimized continuous querying in distributed clouds | |
KR101955376B1 (en) | Processing method for a relational query in distributed stream processing engine based on shared-nothing architecture, recording medium and device for performing the method | |
US9965558B2 (en) | Cross-channel social search | |
WO2012161672A1 (en) | System and method for configuration policy extraction |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
WD01 | Invention patent application deemed withdrawn after publication | ||
WD01 | Invention patent application deemed withdrawn after publication |
Application publication date: 20180629 |