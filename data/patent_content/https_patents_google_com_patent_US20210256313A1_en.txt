US20210256313A1 - Learning policies using sparse and underspecified rewards - Google Patents
Learning policies using sparse and underspecified rewards Download PDFInfo
- Publication number
- US20210256313A1 US20210256313A1 US17/180,682 US202117180682A US2021256313A1 US 20210256313 A1 US20210256313 A1 US 20210256313A1 US 202117180682 A US202117180682 A US 202117180682A US 2021256313 A1 US2021256313 A1 US 2021256313A1
- Authority
- US
- United States
- Prior art keywords
- policy
- successful
- training
- trajectory
- task
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G06K9/6257—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
- G06F18/2148—Generating training patterns; Bootstrap methods, e.g. bagging or boosting characterised by the process organisation or structure, e.g. boosting cascade
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/217—Validation; Performance evaluation; Active pattern learning techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/24—Classification techniques
- G06F18/24765—Rule-based classification
-
- G06K9/626—
-
- G06K9/6262—
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/004—Artificial life, i.e. computing arrangements simulating life
- G06N3/006—Artificial life, i.e. computing arrangements simulating life based on simulated virtual individual or collective life forms, e.g. social simulations or particle swarm optimisation [PSO]
Definitions
- This specification relates to learning a policy for selecting a trajectory of actions in response to a context input.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input.
- Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer.
- Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification describes a system of one or more computers in one or more physical locations that learns a policy that selects a trajectory of actions in response to a context input.
- the system learns the policy such that the learned policy can effectively select trajectories of actions that result in a task being successfully completed when performed in response to received context inputs.
- An example of a sparse and underspecified reward is a binary reward that is a first value, e.g., one, when the trajectory results in the task successfully being completed, and a second value, e.g., zero, for all other trajectories.
- sparse rewards i.e., rewards that are only non-zero for a very small subset of trajectories in the combinatorial space of possible trajectories
- Underspecified rewards i.e., rewards that can be obtained even if the task was completed by exploiting spurious patterns in the environment, are problematic because learning to exploit spurious patterns inhibits generalization.
- Previous approaches have attempted to overcome these challenges by manually engineering an auxiliary reward function that augments the task reward signal.
- manually engineering auxiliary rewards is difficult and prevents the learned policy from effectively generalizing to new context inputs and new tasks.
- the described approaches mitigate these challenges and effectively learn policies that exhibit high quality performance and excellent generalization to new context inputs and tasks after training.
- the described approaches learn an auxiliary reward function jointly with the policy, resulting in a policy that is both high performing and generalizable.
- the described approaches collect an initial set of diverse successful trajectories, seeding the training with high quality and useful training data.
- FIG. 1 shows an example policy system.
- FIG. 2 shows the operation of the policy system while learning the policy
- FIG. 3 is a flow diagram of an example process for learning a policy.
- FIG. 4 is a flow diagram of an example process for updating the policy and the auxiliary reward function.
- This specification describes a system of one or more computers in one or more physical locations that learns a policy that selects a trajectory of actions in response to a context input.
- the system learns the policy such that the learned policy can effectively select trajectories of actions that result in a task being successfully completed when performed in response to received context inputs.
- learning a policy refers to training a machine learning model, e.g., a neural network, that is configured to map a context input to a trajectory of one or more actions.
- the machine learning model can be an auto-regressive neural network, e.g., a recurrent neural network, e.g., a long short-term memory (LSTM) neural network, or an attention-based neural network, e.g., a Transformer, that generates the first action in the trajectory conditioned on the context input and generates each subsequent action conditioned on the context input and on the earlier actions that have already been generated.
- a recurrent neural network e.g., a long short-term memory (LSTM) neural network
- LSTM long short-term memory
- an attention-based neural network e.g., a Transformer
- the auto-regressive neural network can, at each of multiple generation time steps, generate an output defining a probability distribution over a set of possible actions conditioned on the context input and any actions already selected at previous generation time steps and select, e.g., sample or greedily select, an action from the probability distribution to add a new action to the trajectory.
- the output of the policy defines an auto-regressive probability distribution over possible trajectories.
- the auto-regressive neural network can use beam search decoding to select the final trajectory of actions based on the probability distributions at the generation time steps.
- each received context input specifies a context for how a task should be performed.
- the received context input can be an instruction for an agent, e.g., a robot, a vehicle, or other mechanical agent, that instructs an agent on how to successfully perform a task.
- the instruction can be natural language text that specifies a goal location in an environment that should be reached by the agent or an image of the goal location.
- the instruction can be natural language text that specifies a path through the environment that should be traversed by the agent in order to successfully complete task, e.g., by specifying a sequence of high level maneuvers that should be performed by the agent.
- the instruction can be natural language text identify an object or an image of an object with which the agent should perform a specified interaction.
- the actions in the trajectory of actions are control inputs for controlling the agent.
- the task can be a program synthesis task
- the context input can be natural language text specifying a desired goal of the synthesized computer program
- the actions can be the instructions in the synthesized computer program, e.g., written in a particular programming language.
- the context input can be a question that should be answered by the synthesized computer program when executed on a relevant data source.
- the context input can be a natural language query or question and the trajectory of actions can be a sequence of structured query language (SQL) statements, i.e., an SQL program, that when executed on a relevant data table, produces the correct answer to the natural language query or question.
- SQL structured query language
- FIG. 1 shows an example policy system 100 .
- the policy system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented.
- the system 100 trains (or “learns”) a policy 110 that is used to control an agent to perform a task using a set of training context inputs 120 and a set of validation context inputs 130 and outputs trained policy data 150 that defines the trained policy 110 .
- the policy 110 has a plurality of policy parameters and is configured to receive a context input for performing a task and to generate, from the context input and in accordance with the policy parameters, a trajectory of one or more actions for performing the task.
- the policy 110 can be implemented as a neural network or other machine learning model that maps a control input to a trajectory of one or more actions in accordance with a set of parameters (referred to in this specification as “policy parameters”).
- policy parameters a set of parameters
- the system learns the policy 110 by repeatedly adjusting the values of the policy parameters to determine trained values of the policy parameters.
- the policy 110 maps the control input to an output that defines a probability distribution over possible trajectories.
- the policy 110 directly maps the control input to the probability distribution, e.g., when the policy 110 is a feedforward neural network.
- the policy 110 is an auto-regressive model and the probability distribution is an auto-regressive distribution.
- the system 100 receives a task reward value.
- the task reward value for a given trajectory indicates whether the task was successfully completed by performing the trajectory.
- the system 100 or another system can perform the actions in the trajectory, e.g., in an environment, and generate a task reward value that reflects whether the task was successfully completed after the last action in the trajectory was performed.
- the task reward value can represent binary success-failure feedback, with the task reward value for a successful trajectory being one and the task reward value for an unsuccessful trajectory being zero.
- the received task reward values tend to be sparse, i.e., only one task reward value is received per action trajectory and only a few successful trajectories in the space of possible trajectories for any given context input lead to a non-zero task reward.
- task reward values can be underspecified, meaning that the task reward value does not distinguish between an action trajectory that was successful because it exploited a meaningful pattern in the environment and an action trajectory that was successful merely by chance, i.e., by exploiting some spurious pattern in the environment.
- training the policy 110 to maximize task rewards directly can result in a trained policy that fails to generalize to context inputs outside of the training inputs 120 and therefore performs poorly on the task after training. Instead, the system 100 trains the policy 110 to optimize auxiliary rewards generated from trajectory features by an auxiliary reward function.
- the system 100 can use the trained policy data 150 to select trajectories of actions in response to received context inputs, i.e., to perform the task, or provide the trained policy data 150 to another system for use in performing the task.
- FIG. 2 shows the operation of the policy system 100 while learning the policy 110 .
- the system 100 obtains a train set 210 that includes a plurality of training context inputs and validation set 270 that includes a plurality of validation context inputs.
- the system can receive separate train and validation sets or can receive a data set of context inputs and randomly partition the data set into the train set 210 and the validation set 270 .
- the system 100 then performs exploration, e.g., mode covering exploration 220 , to generate successful trajectory data 230 that identifies a plurality of successful trajectories.
- exploration e.g., mode covering exploration 220
- successful trajectory data 230 that identifies a plurality of successful trajectories.
- Each successful trajectory corresponds to a respective context input from the train set 210 or the validation set 270 , i.e., either a training context input or a validation context input, and is a trajectory for which a received task reward value indicates that the task was successfully completed by performing the trajectory in response to the corresponding context input. That is, each successful trajectory reflects a successful completion of the task conditioned on the corresponding context input. For example, when the rewards are binary, the successful trajectories can be those for which a task reward value of one was received.
- the system 100 can perform the exploration to identify successful trajectories in any of a variety of ways.
- the system 100 performs random search, i.e., generates random trajectories, to identify trajectories that result in the task being successfully performed.
- system 100 trains, on the training set 120 , the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards, i.e., to optimize an objective that is based only on task rewards (and not auxiliary rewards as will be described later).
- the system 100 can train, on the training set 120 , the policy to optimize an Iterative Maximum Likelihood (IML) objective.
- IML Iterative Maximum Likelihood
- the IML objective is an objective that promotes mode covering behavior when performing the task, i.e., that promotes learning a policy that assigns equal likelihoods to all possible successful trajectories.
- the system 100 Periodically, during this initial training, the system 100 uses the policy to identify successful trajectories. In other words, the system 100 can periodically use the current policy at the current point during the initial training to generate a plurality of trajectories, determine if any of the generated trajectories resulted in the task being successfully performed, and, if so, add the successful trajectories to the successful trajectory data 230 .
- the system can use both the initial training and random search to generate the successful trajectory data 230 , i.e., such that data 230 includes some trajectories generated using random search and some trajectories generated during the initial training of the policy.
- Using the initial training on an objective that promotes mode covering behavior to generate successful trajectories can result in the successful trajectory data 230 being populated with successful trajectories that are more diverse than trajectories that would be generated using only random search or trajectories generated using an objective that promotes mode seeking behavior.
- This diversity of successful trajectories can improve the subsequent training of the policy using auxiliary rewards.
- the system 100 then performs policy optimization 240 .
- the system 100 trains the policy 110 jointly with an auxiliary reward function having a plurality of auxiliary reward parameters.
- the system 100 can either train the policy 110 from scratch, i.e., from initial values of the parameters, or from the values of the parameters that were determined as a result of the initial training.
- the auxiliary reward function is configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least the trajectory and, optionally, also the context input to an auxiliary reward value 250 that indicates how well the trajectory performed the task in response to the context input.
- the auxiliary reward function can be a linear function that computes the auxiliary reward value as a linear combination of the task features based on the auxiliary reward parameters.
- the auxiliary reward function can be a neural network that receives the task features as input and processes the task features in accordance with the auxiliary reward parameters to generate the auxiliary task reward.
- the trajectory features will generally be specific to the task being performed.
- the trajectory features can include single comparisons, pairwise comparisons, or both of counts of symbols and actions in the language command and the trajectory, respectively.
- the features can include a tuple that, for a given symbol in the instruction and a given action in the trajectory, includes the number of times the given symbol occurred in the instruction and the number of times the given action occurred in the trajectory.
- the trajectory features can include features like the number of actions in the trajectory or the distance travelled by the agent by performing the trajectory.
- the trajectory features can include any of: the length of the trajectory, features that represent a relationship between the entities in the natural language text and the entities in the computer program, features that represent how frequently entities of different types occur in the computer program, and so on.
- the system 100 To perform the policy optimization 240 , i.e., to perform the joint training, the system 100 repeatedly performs the following operations.
- the system 100 obtains, from the successful trajectory data 230 , a plurality of training successful trajectories.
- the system 100 determines, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward 250 for each training successful trajectory.
- the system 100 updates the current values of the policy parameters of the policy 110 using the auxiliary rewards 250 for the training successful trajectories and using the sparse and underspecified task rewards 270 for the training successful trajectories.
- the system 100 also obtains, from the successful trajectory data 230 , a plurality of validation successful trajectories.
- the system then updates the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories, i.e., using the error on the validation set 270 .
- Performing the policy optimization 240 is described in more detail below with reference to FIGS. 3 and 4 .
- FIG. 3 is a flow chart of an example process 300 for learning a policy.
- the process 300 will be described as being performed by a system of one or more computers located in one or more locations.
- a policy system e.g., the policy system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 300 .
- the system obtains a plurality of training context inputs and a plurality of validation context inputs (step 302 ).
- the system generates successful trajectory data that identifies a plurality of successful trajectories (step 304 ).
- the system generates the successful trajectory data as described above with reference to FIG. 2 .
- the system trains the policy jointly with an auxiliary reward function (step 306 ).
- the system trains the policy and the auxiliary reward function by repeatedly performing training iterations.
- the system updates the policy and the auxiliary reward function, i.e., updates the current values of the policy parameters and the auxiliary reward parameters as of the training iteration. Performing a training iteration is described in more detail below with reference to FIG. 4 .
- FIG. 4 is a flow chart of an example process 400 for updating the policy and the auxiliary reward function.
- the process 400 will be described as being performed by a system of one or more computers located in one or more locations.
- a policy system e.g., the policy system 100 of FIG. 1 , appropriately programmed in accordance with this specification, can perform the process 400 .
- the system can repeatedly perform the process 400 to jointly learn the policy and the auxiliary reward function. For example, the system can repeatedly perform the process 400 until some termination criterion is satisfied, e.g., until a threshold number of iterations have been performed, a threshold amount of time has elapsed, or the values of the policy parameters have converged.
- the system obtains, from the successful trajectory data, a plurality of training successful trajectories, where, as descried above, each training successful trajectory is a successful trajectory that corresponds to a respective one of the training context inputs (step 402 ).
- the system determines, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward for each training successful trajectory (step 404 ).
- the system applies the auxiliary reward function in accordance with the current values of the auxiliary reward parameters to trajectory features for the trajectory or both the context input and the trajectory to generate the respective auxiliary reward for the parameters.
- the auxiliary reward for a successful trajectory is equal to the output of the auxiliary reward function.
- the auxiliary reward is equal to the output of the auxiliary reward function multiplied by the task reward for the trajectory.
- the system updates the current values of the policy parameters using the auxiliary rewards for the training successful trajectories (step 406 ).
- the system can update the current values of the policy parameters to optimize, e.g., maximize, a Memory Augmented Policy Optimization (MAPO) objective that is based on the auxiliary rewards.
- MAPO Memory Augmented Policy Optimization
- the MAPO objective can be expressed as follows:
- x is a context input
- D train is the set of training context inputs
- a is a trajectory
- B train + is the set of successful training trajectories
- R ⁇ (a) is the auxiliary reward function
- ⁇ are the auxiliary reward parameters
- x) is the policy
- ⁇ are the policy parameters
- ⁇ is a constant hyperparameter value
- Shannon Entropy is the Shannon Entropy.
- the context inputs x in the first summation over x are the training context inputs that correspond to the plurality of sampled successful trajectories.
- the context inputs x in the second summation over x can either be the same training context inputs or a separate set of context inputs that are sampled independently from the set of training context inputs.
- the system can compute a gradient with respect to the policy parameters of the MAPO objective and then use the gradient to update the current values of the policy parameters, e.g., by multiplying the gradient by a learning rate a and then subtracting the product from the current values, to determine updated values of the policy parameters.
- the system obtains, from the successful trajectory data, a plurality of validation successful trajectories, where each validation successful trajectory is a successful trajectory that corresponds to a respective one of the validation context inputs (step 408 ).
- the system updates the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories (step 410 ).
- the system optimizes, e.g., maximizes, a validation objective that is based on task rewards for the validation successful trajectories, i.e., the auxiliary rewards are not optimized directly to maximize the rewards on the validation set but optimized such that a policy learned by maximizing the auxiliary rewards on the training set attains high underspecified task rewards on the validation set satisfies.
- the validation objective can satisfy, for a policy ⁇ :
- D val is the set of validation context inputs
- B val + is the set of successful validation trajectories
- R(a) is the task reward for the trajectory a
- x) is the policy.
- the system computes the validation objective using the policy obtained after one gradient step update on the training objective, i.e., using the policy in accordance with the updated values of the policy parameters and therefore, the auxiliary rewards affect the validation objective via the updated values of the policy parameters.
- the gradient of the above validation objective with respect to the auxiliary reward parameters can satisfy:
- ⁇ ′ are the updated values of the policy parameters and O val ( ⁇ ⁇ ′ ) is the validation objective evaluated at the policy defined by the updated policy parameter values.
- the system trains the auxiliary reward function so that a policy trained using auxiliary rewards generated by the auxiliary reward function assigns high probabilities to successful trajectories.
- the system can also generate additional successful trajectories and add the additional successful trajectories to the successful trajectory data.
- the system obtains a training mini-batch of the training context inputs and a validation mini-batch of the validation context inputs, e.g., by sampling the mini-batches from the training context inputs and the validation context inputs, respectively.
- the system For each context input in the training and validation mini-batches, the system generates a plurality of exploratory trajectories using the policy and in accordance with the current values of the policy parameters. That is, the system samples a plurality of exploratory trajectories from the probability distribution defined by the output generated by the policy for the corresponding context input.
- the system obtains a respective task reward value for each of the exploratory trajectories that indicates whether the task was successfully completed by performing the exploratory trajectory and adds, to the successful trajectory data, any exploratory trajectories for which the task reward indicates that the task was successfully completed.
- the system can repeatedly update the successful trajectory data with new successful trajectories as the policy improves during the training.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations.
- the index database can include multiple collections of data, each of which may be organized and accessed differently.
- engine is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions.
- an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit.
- a central processing unit will receive instructions and data from a read only memory or a random access memory or both.
- the essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data.
- the central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- PDA personal digital assistant
- GPS Global Positioning System
- USB universal serial bus
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser.
- a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- a machine learning framework e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- LAN local area network
- WAN wide area network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client.
- Data generated at the user device e.g., a result of the user interaction, can be received at the server from the device.
Abstract
Methods and systems for learning policies using sparse and underspecified rewards. One of the methods includes training the policy jointly with an auxiliary reward function having a plurality of auxiliary reward parameters, the auxiliary reward function being configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least a trajectory to an auxiliary reward value that indicates how well the trajectory performed a task in response to a context input.
Description
- This application claims priority to U.S. Provisional Application No. 62/978,793, filed on Feb. 19, 2020. The disclosure of the prior application is considered part of and is incorporated by reference in the disclosure of this application.
- This specification relates to learning a policy for selecting a trajectory of actions in response to a context input.
- Many systems represent policies for selecting actions using neural networks.
- Neural networks are machine learning models that employ one or more layers of nonlinear units to predict an output for a received input. Some neural networks include one or more hidden layers in addition to an output layer. The output of each hidden layer is used as input to the next layer in the network, i.e., the next hidden layer or the output layer. Each layer of the network generates an output from a received input in accordance with current values of a respective set of parameters.
- This specification describes a system of one or more computers in one or more physical locations that learns a policy that selects a trajectory of actions in response to a context input. In particular, the system learns the policy such that the learned policy can effectively select trajectories of actions that result in a task being successfully completed when performed in response to received context inputs.
- The subject matter described in this specification can be implemented in particular embodiments so as to realize one or more of the following advantages.
- Episodic tasks that require generating a trajectory of actions conditioned on a context input to accomplish some goal frequently have task rewards that are sparse and underspecified. An example of a sparse and underspecified reward is a binary reward that is a first value, e.g., one, when the trajectory results in the task successfully being completed, and a second value, e.g., zero, for all other trajectories. These characteristics of the rewards make learning a policy, i.e., training a neural network, to successfully accomplish goals based solely on task rewards difficult. In particular, sparse rewards, i.e., rewards that are only non-zero for a very small subset of trajectories in the combinatorial space of possible trajectories, are problematic because they appear too infrequently to provide a good learning signal for the learning of the policy. Underspecified rewards, i.e., rewards that can be obtained even if the task was completed by exploiting spurious patterns in the environment, are problematic because learning to exploit spurious patterns inhibits generalization. Previous approaches have attempted to overcome these challenges by manually engineering an auxiliary reward function that augments the task reward signal. However, manually engineering auxiliary rewards is difficult and prevents the learned policy from effectively generalizing to new context inputs and new tasks. The described approaches, however, mitigate these challenges and effectively learn policies that exhibit high quality performance and excellent generalization to new context inputs and tasks after training. In particular, the described approaches learn an auxiliary reward function jointly with the policy, resulting in a policy that is both high performing and generalizable. Additionally, the described approaches collect an initial set of diverse successful trajectories, seeding the training with high quality and useful training data.
- The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 shows an example policy system. -
FIG. 2 shows the operation of the policy system while learning the policy -
FIG. 3 is a flow diagram of an example process for learning a policy. -
FIG. 4 is a flow diagram of an example process for updating the policy and the auxiliary reward function. - Like reference numbers and designations in the various drawings indicate like elements.
- This specification describes a system of one or more computers in one or more physical locations that learns a policy that selects a trajectory of actions in response to a context input. In particular, the system learns the policy such that the learned policy can effectively select trajectories of actions that result in a task being successfully completed when performed in response to received context inputs.
- Generally, in this specification “learning a policy” refers to training a machine learning model, e.g., a neural network, that is configured to map a context input to a trajectory of one or more actions.
- For example, the machine learning model can be an auto-regressive neural network, e.g., a recurrent neural network, e.g., a long short-term memory (LSTM) neural network, or an attention-based neural network, e.g., a Transformer, that generates the first action in the trajectory conditioned on the context input and generates each subsequent action conditioned on the context input and on the earlier actions that have already been generated.
- More specifically, the auto-regressive neural network can, at each of multiple generation time steps, generate an output defining a probability distribution over a set of possible actions conditioned on the context input and any actions already selected at previous generation time steps and select, e.g., sample or greedily select, an action from the probability distribution to add a new action to the trajectory. Thus, the output of the policy defines an auto-regressive probability distribution over possible trajectories. In some cases, the auto-regressive neural network can use beam search decoding to select the final trajectory of actions based on the probability distributions at the generation time steps.
- Generally, each received context input specifies a context for how a task should be performed.
- For example, the received context input can be an instruction for an agent, e.g., a robot, a vehicle, or other mechanical agent, that instructs an agent on how to successfully perform a task. As a particular example, the instruction can be natural language text that specifies a goal location in an environment that should be reached by the agent or an image of the goal location. As another particular example, the instruction can be natural language text that specifies a path through the environment that should be traversed by the agent in order to successfully complete task, e.g., by specifying a sequence of high level maneuvers that should be performed by the agent. As yet another example, the instruction can be natural language text identify an object or an image of an object with which the agent should perform a specified interaction.
- In these examples, the actions in the trajectory of actions are control inputs for controlling the agent.
- As another example, the task can be a program synthesis task, the context input can be natural language text specifying a desired goal of the synthesized computer program, and the actions can be the instructions in the synthesized computer program, e.g., written in a particular programming language. As a particular example, the context input can be a question that should be answered by the synthesized computer program when executed on a relevant data source.
- As a particular example, the context input can be a natural language query or question and the trajectory of actions can be a sequence of structured query language (SQL) statements, i.e., an SQL program, that when executed on a relevant data table, produces the correct answer to the natural language query or question.
-
FIG. 1 shows anexample policy system 100. Thepolicy system 100 is an example of a system implemented as computer programs on one or more computers in one or more locations, in which the systems, components, and techniques described below can be implemented. - In particular, the
system 100 trains (or “learns”) apolicy 110 that is used to control an agent to perform a task using a set oftraining context inputs 120 and a set ofvalidation context inputs 130 and outputs trained policy data 150 that defines the trainedpolicy 110. - The
policy 110 has a plurality of policy parameters and is configured to receive a context input for performing a task and to generate, from the context input and in accordance with the policy parameters, a trajectory of one or more actions for performing the task. - As described above, the
policy 110 can be implemented as a neural network or other machine learning model that maps a control input to a trajectory of one or more actions in accordance with a set of parameters (referred to in this specification as “policy parameters”). Thus, the system learns thepolicy 110 by repeatedly adjusting the values of the policy parameters to determine trained values of the policy parameters. - More specifically, the
policy 110 maps the control input to an output that defines a probability distribution over possible trajectories. In some cases, thepolicy 110 directly maps the control input to the probability distribution, e.g., when thepolicy 110 is a feedforward neural network. In some other cases, thepolicy 110 is an auto-regressive model and the probability distribution is an auto-regressive distribution. - In response to generating a trajectory of actions conditioned on a given context input, e.g., using the
policy 110, thesystem 100 receives a task reward value. The task reward value for a given trajectory indicates whether the task was successfully completed by performing the trajectory. For example, thesystem 100 or another system can perform the actions in the trajectory, e.g., in an environment, and generate a task reward value that reflects whether the task was successfully completed after the last action in the trajectory was performed. As a particular example, the task reward value can represent binary success-failure feedback, with the task reward value for a successful trajectory being one and the task reward value for an unsuccessful trajectory being zero. - Thus, the received task reward values tend to be sparse, i.e., only one task reward value is received per action trajectory and only a few successful trajectories in the space of possible trajectories for any given context input lead to a non-zero task reward. Additionally, task reward values can be underspecified, meaning that the task reward value does not distinguish between an action trajectory that was successful because it exploited a meaningful pattern in the environment and an action trajectory that was successful merely by chance, i.e., by exploiting some spurious pattern in the environment.
- Thus, training the
policy 110 to maximize task rewards directly can result in a trained policy that fails to generalize to context inputs outside of thetraining inputs 120 and therefore performs poorly on the task after training. Instead, thesystem 100 trains thepolicy 110 to optimize auxiliary rewards generated from trajectory features by an auxiliary reward function. - The operation of the
system 100 during the training is described in more detail below with reference toFIG. 2 . - After training, the
system 100 can use the trained policy data 150 to select trajectories of actions in response to received context inputs, i.e., to perform the task, or provide the trained policy data 150 to another system for use in performing the task. -
FIG. 2 shows the operation of thepolicy system 100 while learning thepolicy 110. - In particular, the
system 100 obtains atrain set 210 that includes a plurality of training context inputs and validation set 270 that includes a plurality of validation context inputs. For example, the system can receive separate train and validation sets or can receive a data set of context inputs and randomly partition the data set into thetrain set 210 and the validation set 270. - The
system 100 then performs exploration, e.g.,mode covering exploration 220, to generatesuccessful trajectory data 230 that identifies a plurality of successful trajectories. - Each successful trajectory corresponds to a respective context input from the
train set 210 or the validation set 270, i.e., either a training context input or a validation context input, and is a trajectory for which a received task reward value indicates that the task was successfully completed by performing the trajectory in response to the corresponding context input. That is, each successful trajectory reflects a successful completion of the task conditioned on the corresponding context input. For example, when the rewards are binary, the successful trajectories can be those for which a task reward value of one was received. - The
system 100 can perform the exploration to identify successful trajectories in any of a variety of ways. - In one example, the
system 100 performs random search, i.e., generates random trajectories, to identify trajectories that result in the task being successfully performed. - In another example, the
system 100 trains, on the training set 120, the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards, i.e., to optimize an objective that is based only on task rewards (and not auxiliary rewards as will be described later). - As a particular example, during this initial training, the
system 100 can train, on the training set 120, the policy to optimize an Iterative Maximum Likelihood (IML) objective. The IML objective is an objective that promotes mode covering behavior when performing the task, i.e., that promotes learning a policy that assigns equal likelihoods to all possible successful trajectories. - Periodically, during this initial training, the
system 100 uses the policy to identify successful trajectories. In other words, thesystem 100 can periodically use the current policy at the current point during the initial training to generate a plurality of trajectories, determine if any of the generated trajectories resulted in the task being successfully performed, and, if so, add the successful trajectories to thesuccessful trajectory data 230. - Optionally, the system can use both the initial training and random search to generate the
successful trajectory data 230, i.e., such thatdata 230 includes some trajectories generated using random search and some trajectories generated during the initial training of the policy. - Using the initial training on an objective that promotes mode covering behavior to generate successful trajectories (either in combination with random search or alone) can result in the
successful trajectory data 230 being populated with successful trajectories that are more diverse than trajectories that would be generated using only random search or trajectories generated using an objective that promotes mode seeking behavior. This diversity of successful trajectories can improve the subsequent training of the policy using auxiliary rewards. - The
system 100 then performspolicy optimization 240. - During
policy optimization 240, thesystem 100 trains thepolicy 110 jointly with an auxiliary reward function having a plurality of auxiliary reward parameters. - When the system performs the initial training described above, during the
policy optimization 240, thesystem 100 can either train thepolicy 110 from scratch, i.e., from initial values of the parameters, or from the values of the parameters that were determined as a result of the initial training. - The auxiliary reward function is configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least the trajectory and, optionally, also the context input to an
auxiliary reward value 250 that indicates how well the trajectory performed the task in response to the context input. - As one example, the auxiliary reward function can be a linear function that computes the auxiliary reward value as a linear combination of the task features based on the auxiliary reward parameters.
- As another example, the auxiliary reward function can be a neural network that receives the task features as input and processes the task features in accordance with the auxiliary reward parameters to generate the auxiliary task reward.
- The trajectory features will generally be specific to the task being performed.
- For example, when the received context input is an instruction for an agent that instructs an agent on how to successfully perform a task, the trajectory features can include single comparisons, pairwise comparisons, or both of counts of symbols and actions in the language command and the trajectory, respectively. For example, the features can include a tuple that, for a given symbol in the instruction and a given action in the trajectory, includes the number of times the given symbol occurred in the instruction and the number of times the given action occurred in the trajectory. As another example, the trajectory features can include features like the number of actions in the trajectory or the distance travelled by the agent by performing the trajectory.
- When the task is a program synthesis task, the trajectory features can include any of: the length of the trajectory, features that represent a relationship between the entities in the natural language text and the entities in the computer program, features that represent how frequently entities of different types occur in the computer program, and so on.
- To perform the
policy optimization 240, i.e., to perform the joint training, thesystem 100 repeatedly performs the following operations. - The
system 100 obtains, from thesuccessful trajectory data 230, a plurality of training successful trajectories. - The
system 100 determines, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respectiveauxiliary reward 250 for each training successful trajectory. - The
system 100 updates the current values of the policy parameters of thepolicy 110 using theauxiliary rewards 250 for the training successful trajectories and using the sparse and underspecified task rewards 270 for the training successful trajectories. - The
system 100 also obtains, from thesuccessful trajectory data 230, a plurality of validation successful trajectories. - The system then updates the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories, i.e., using the error on the validation set 270.
- Performing the
policy optimization 240 is described in more detail below with reference toFIGS. 3 and 4 . -
FIG. 3 is a flow chart of anexample process 300 for learning a policy. For convenience, theprocess 300 will be described as being performed by a system of one or more computers located in one or more locations. For example, a policy system, e.g., thepolicy system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 300. - The system obtains a plurality of training context inputs and a plurality of validation context inputs (step 302).
- The system generates successful trajectory data that identifies a plurality of successful trajectories (step 304). In particular, the system generates the successful trajectory data as described above with reference to
FIG. 2 . - The system trains the policy jointly with an auxiliary reward function (step 306). In particular, the system trains the policy and the auxiliary reward function by repeatedly performing training iterations. At each training iteration, the system updates the policy and the auxiliary reward function, i.e., updates the current values of the policy parameters and the auxiliary reward parameters as of the training iteration. Performing a training iteration is described in more detail below with reference to
FIG. 4 . -
FIG. 4 is a flow chart of anexample process 400 for updating the policy and the auxiliary reward function. For convenience, theprocess 400 will be described as being performed by a system of one or more computers located in one or more locations. For example, a policy system, e.g., thepolicy system 100 ofFIG. 1 , appropriately programmed in accordance with this specification, can perform theprocess 400. - The system can repeatedly perform the
process 400 to jointly learn the policy and the auxiliary reward function. For example, the system can repeatedly perform theprocess 400 until some termination criterion is satisfied, e.g., until a threshold number of iterations have been performed, a threshold amount of time has elapsed, or the values of the policy parameters have converged. - The system obtains, from the successful trajectory data, a plurality of training successful trajectories, where, as descried above, each training successful trajectory is a successful trajectory that corresponds to a respective one of the training context inputs (step 402).
- The system determines, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward for each training successful trajectory (step 404).
- That is, for each trajectory, the system applies the auxiliary reward function in accordance with the current values of the auxiliary reward parameters to trajectory features for the trajectory or both the context input and the trajectory to generate the respective auxiliary reward for the parameters.
- In some cases, e.g., in cases where the task reward for a trajectory is one when the task is successful and zero when the task is not successful, the auxiliary reward for a successful trajectory is equal to the output of the auxiliary reward function. In some other cases, e.g., in cases where the task reward for a trajectory is not binary success-failure feedback, the auxiliary reward is equal to the output of the auxiliary reward function multiplied by the task reward for the trajectory.
- The system updates the current values of the policy parameters using the auxiliary rewards for the training successful trajectories (step 406).
- As a particular example, the system can update the current values of the policy parameters to optimize, e.g., maximize, a Memory Augmented Policy Optimization (MAPO) objective that is based on the auxiliary rewards.
- The MAPO objective can be expressed as follows:
- where x is a context input, Dtrain is the set of training context inputs, a is a trajectory, Btrain + is the set of successful training trajectories, Rϕ(a) is the auxiliary reward function, ϕ are the auxiliary reward parameters, πθ(a|x) is the policy, θ are the policy parameters, τ is a constant hyperparameter value, and
- In particular, the system can compute a gradient with respect to the policy parameters of the MAPO objective and then use the gradient to update the current values of the policy parameters, e.g., by multiplying the gradient by a learning rate a and then subtracting the product from the current values, to determine updated values of the policy parameters.
- The system obtains, from the successful trajectory data, a plurality of validation successful trajectories, where each validation successful trajectory is a successful trajectory that corresponds to a respective one of the validation context inputs (step 408).
- The system updates the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories (step 410).
- In particular, the system optimizes, e.g., maximizes, a validation objective that is based on task rewards for the validation successful trajectories, i.e., the auxiliary rewards are not optimized directly to maximize the rewards on the validation set but optimized such that a policy learned by maximizing the auxiliary rewards on the training set attains high underspecified task rewards on the validation set satisfies. As a particular example, the validation objective can satisfy, for a policy π:
-
- where Dval is the set of validation context inputs, Bval + is the set of successful validation trajectories, R(a) is the task reward for the trajectory a, and π(a|x) is the policy.
- In particular, the system computes the validation objective using the policy obtained after one gradient step update on the training objective, i.e., using the policy in accordance with the updated values of the policy parameters and therefore, the auxiliary rewards affect the validation objective via the updated values of the policy parameters. More specifically, the gradient of the above validation objective with respect to the auxiliary reward parameters can satisfy:
-
∇θ′ O val(πθ′)∇ϕθ′(ϕ), - where θ′ are the updated values of the policy parameters and Oval (πθ′) is the validation objective evaluated at the policy defined by the updated policy parameter values.
- Thus, the system trains the auxiliary reward function so that a policy trained using auxiliary rewards generated by the auxiliary reward function assigns high probabilities to successful trajectories.
- Optionally, at some or all iterations of the
process 400, the system can also generate additional successful trajectories and add the additional successful trajectories to the successful trajectory data. - In particular, the system obtains a training mini-batch of the training context inputs and a validation mini-batch of the validation context inputs, e.g., by sampling the mini-batches from the training context inputs and the validation context inputs, respectively.
- For each context input in the training and validation mini-batches, the system generates a plurality of exploratory trajectories using the policy and in accordance with the current values of the policy parameters. That is, the system samples a plurality of exploratory trajectories from the probability distribution defined by the output generated by the policy for the corresponding context input.
- The system obtains a respective task reward value for each of the exploratory trajectories that indicates whether the task was successfully completed by performing the exploratory trajectory and adds, to the successful trajectory data, any exploratory trajectories for which the task reward indicates that the task was successfully completed.
- Thus, the system can repeatedly update the successful trajectory data with new successful trajectories as the policy improves during the training.
- This specification uses the term “configured” in connection with systems and computer program components. For a system of one or more computers to be configured to perform particular operations or actions means that the system has installed on it software, firmware, hardware, or a combination of them that in operation cause the system to perform the operations or actions. For one or more computer programs to be configured to perform particular operations or actions means that the one or more programs include instructions that, when executed by data processing apparatus, cause the apparatus to perform the operations or actions.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non transitory storage medium for execution by, or to control the operation of, data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be, or further include, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program, which may also be referred to or described as a program, software, a software application, an app, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages; and it can be deployed in any form, including as a stand alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a data communication network.
- In this specification, the term “database” is used broadly to refer to any collection of data: the data does not need to be structured in any particular way, or structured at all, and it can be stored on storage devices in one or more locations. Thus, for example, the index database can include multiple collections of data, each of which may be organized and accessed differently.
- Similarly, in this specification the term “engine” is used broadly to refer to a software-based system, subsystem, or process that is programmed to perform one or more specific functions. Generally, an engine will be implemented as one or more software modules or components, installed on one or more computers in one or more locations. In some cases, one or more computers will be dedicated to a particular engine; in other cases, multiple engines can be installed and running on the same computer or computers.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e.g., an FPGA or an ASIC, or by a combination of special purpose logic circuitry and one or more programmed computers.
- Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors or both, or any other kind of central processing unit. Generally, a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. The central processing unit and the memory can be supplemented by, or incorporated in, special purpose logic circuitry. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device, e.g., a universal serial bus (USB) flash drive, to name just a few.
- Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's device in response to requests received from the web browser. Also, a computer can interact with a user by sending text messages or other forms of message to a personal device, e.g., a smartphone that is running a messaging application, and receiving responsive messages from the user in return.
- Data processing apparatus for implementing machine learning models can also include, for example, special-purpose hardware accelerator units for processing common and compute-intensive parts of machine learning training or production, i.e., inference, workloads.
- Machine learning models can be implemented and deployed using a machine learning framework, e.g., a TensorFlow framework, a Microsoft Cognitive Toolkit framework, an Apache Singa framework, or an Apache MXNet framework.
- Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface, a web browser, or an app through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network (LAN) and a wide area network (WAN), e.g., the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, a server transmits data, e.g., an HTML page, to a user device, e.g., for purposes of displaying data to and receiving user input from a user interacting with the device, which acts as a client. Data generated at the user device, e.g., a result of the user interaction, can be received at the server from the device.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially be claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings and recited in the claims in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
1. A method of learning a policy having a plurality of policy parameters and configured to receive a context input for performing a task and to generate, from the context input and in accordance with the policy parameters, a trajectory of one or more actions for performing the task, the method comprising:
obtaining a plurality of training context inputs and a plurality of validation context inputs;
generating successful trajectory data that identifies a plurality of successful trajectories, each successful trajectory corresponding to a respective context input from either the training context inputs or the validation context inputs and being a trajectory for which a received task reward value indicates that the task was successfully completed by performing the trajectory in response to the corresponding context input; and
training the policy jointly with an auxiliary reward function having a plurality of auxiliary reward parameters, the auxiliary reward function being configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least a trajectory to an auxiliary reward value that indicates how well the trajectory performed the task in response to the context input, and the training comprising repeatedly performing at least the following operations:
obtaining, from the successful trajectory data, a plurality of training successful trajectories, wherein each training successful trajectory is a successful trajectory that corresponds to a respective one of the training context inputs;
determining, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward for each training successful trajectory;
updating current values of the policy parameters using the auxiliary rewards for the training successful trajectories;
obtaining, from the successful trajectory data, a plurality of validation successful trajectories, wherein each validation successful trajectory is a successful trajectory that corresponds to a respective one of the validation context inputs; and
updating the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories.
2. The method of claim 1 , the following operations further comprising:
obtaining a training mini-batch of training context inputs and a validation mini-batch of validation context inputs;
for each context input in the training and validation mini-batches, generating a plurality of exploratory trajectories using the policy and in accordance with the current values of the policy parameters;
obtaining a respective task reward value for each of the exploratory trajectories that indicates whether the task was successfully completed by performing the exploratory trajectory; and
adding, to the successful trajectory data, any exploratory trajectories for which the task reward indicates that the task was successfully completed.
3. The method of claim 1 , wherein the auxiliary reward function is a linear function that computes the auxiliary reward value as a linear combination of the task features based on the auxiliary reward parameters.
4. The method of claim 1 , wherein the auxiliary reward function is a neural network that receives the task features as input and processes the task features in accordance with the auxiliary reward parameters to generate the auxiliary task reward.
5. The method of claim 1 , wherein updating the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories comprises:
determining a performance of the policy with the updated values of the policy parameters as measured by task rewards; and
updating the current values of the auxiliary reward parameters based on the performance of the policy.
6. The method of claim 1 , wherein generating successful trajectory data that identifies a plurality of successful trajectories comprises:
training the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards; and
periodically during the training using the policy to identify successful trajectories.
7. The method of claim 6 , wherein training the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards comprises training the policy to optimize an Iterative Maximum Likelihood (IML) objective.
8. The method of claim 6 , wherein training the policy jointly with the auxiliary reward function comprises training the policy starting from the first values of the policy parameters.
9. The method of claim 1 , wherein generating successful trajectory data that identifies a plurality of successful trajectories comprises:
identifying at least a subset of the trajectories in the successful trajectory data using random search.
10. The method of claim 1 , wherein updating the current values of the policy parameters comprising updating the current values of the policy parameters to optimize an Memory Augmented Policy Optimization (MAPO) objective that is based on the auxiliary rewards.
11. A system for learning a policy having a plurality of policy parameters and configured to receive a context input for performing a task and to generate, from the context input and in accordance with the policy parameters, a trajectory of one or more actions for performing the task, the system comprising one or more computers and one or more storage devices storing instructions that when executed by the one or more computers cause the one or more computers to perform operations comprising:
obtaining a plurality of training context inputs and a plurality of validation context inputs;
generating successful trajectory data that identifies a plurality of successful trajectories, each successful trajectory corresponding to a respective context input from either the training context inputs or the validation context inputs and being a trajectory for which a received task reward value indicates that the task was successfully completed by performing the trajectory in response to the corresponding context input; and
training the policy jointly with an auxiliary reward function having a plurality of auxiliary reward parameters, the auxiliary reward function being configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least a trajectory to an auxiliary reward value that indicates how well the trajectory performed the task in response to the context input, and the training comprising repeatedly performing at least the following operations:
obtaining, from the successful trajectory data, a plurality of training successful trajectories, wherein each training successful trajectory is a successful trajectory that corresponds to a respective one of the training context inputs;
determining, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward for each training successful trajectory;
updating current values of the policy parameters using the auxiliary rewards for the training successful trajectories;
obtaining, from the successful trajectory data, a plurality of validation successful trajectories, wherein each validation successful trajectory is a successful trajectory that corresponds to a respective one of the validation context inputs; and
updating the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories.
12. The system of claim 11 , the following operations further comprising:
obtaining a training mini-batch of training context inputs and a validation mini-batch of validation context inputs;
for each context input in the training and validation mini-batches, generating a plurality of exploratory trajectories using the policy and in accordance with the current values of the policy parameters;
obtaining a respective task reward value for each of the exploratory trajectories that indicates whether the task was successfully completed by performing the exploratory trajectory; and
adding, to the successful trajectory data, any exploratory trajectories for which the task reward indicates that the task was successfully completed.
13. The system of claim 11 , wherein the auxiliary reward function is a linear function that computes the auxiliary reward value as a linear combination of the task features based on the auxiliary reward parameters.
14. The system of claim 11 , wherein the auxiliary reward function is a neural network that receives the task features as input and processes the task features in accordance with the auxiliary reward parameters to generate the auxiliary task reward.
15. The system of claim 11 , wherein updating the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories comprises:
determining a performance of the policy with the updated values of the policy parameters as measured by task rewards; and
updating the current values of the auxiliary reward parameters based on the performance of the policy.
16. The system of claim 11 , wherein generating successful trajectory data that identifies a plurality of successful trajectories comprises:
training the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards; and
periodically during the training using the policy to identify successful trajectories.
17. The system of claim 16 , wherein training the policy starting from initial values of the policy parameters to generate first values of the policy parameters using only task rewards comprises training the policy to optimize an Iterative Maximum Likelihood (IML) objective.
18. The system of claim 16 , wherein training the policy jointly with the auxiliary reward function comprises training the policy starting from the first values of the policy parameters.
19. The system of claim 11 , wherein generating successful trajectory data that identifies a plurality of successful trajectories comprises:
identifying at least a subset of the trajectories in the successful trajectory data using random search.
20. One or more non-transitory computer-readable storage media storing instructions that when executed by one or more computers cause the one or more computers to perform operations for learning a policy having a plurality of policy parameters and configured to receive a context input for performing a task and to generate, from the context input and in accordance with the policy parameters, a trajectory of one or more actions for performing the task, the operations comprising:
obtaining a plurality of training context inputs and a plurality of validation context inputs;
generating successful trajectory data that identifies a plurality of successful trajectories, each successful trajectory corresponding to a respective context input from either the training context inputs or the validation context inputs and being a trajectory for which a received task reward value indicates that the task was successfully completed by performing the trajectory in response to the corresponding context input; and
training the policy jointly with an auxiliary reward function having a plurality of auxiliary reward parameters, the auxiliary reward function being configured to map, in accordance with the auxiliary reward parameters, trajectory features of at least a trajectory to an auxiliary reward value that indicates how well the trajectory performed the task in response to the context input, and the training comprising repeatedly performing at least the following operations:
obtaining, from the successful trajectory data, a plurality of training successful trajectories, wherein each training successful trajectory is a successful trajectory that corresponds to a respective one of the training context inputs;
determining, using the auxiliary reward function and in accordance with current values of the auxiliary reward parameters, a respective auxiliary reward for each training successful trajectory;
updating current values of the policy parameters using the auxiliary rewards for the training successful trajectories;
obtaining, from the successful trajectory data, a plurality of validation successful trajectories, wherein each validation successful trajectory is a successful trajectory that corresponds to a respective one of the validation context inputs; and
updating the current values of the auxiliary reward parameters based on the updated values of the policy parameters and using the validation successful trajectories.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US17/180,682 US20210256313A1 (en) | 2020-02-19 | 2021-02-19 | Learning policies using sparse and underspecified rewards |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062978793P | 2020-02-19 | 2020-02-19 | |
US17/180,682 US20210256313A1 (en) | 2020-02-19 | 2021-02-19 | Learning policies using sparse and underspecified rewards |
Publications (1)
Publication Number | Publication Date |
---|---|
US20210256313A1 true US20210256313A1 (en) | 2021-08-19 |
Family
ID=77273533
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US17/180,682 Pending US20210256313A1 (en) | 2020-02-19 | 2021-02-19 | Learning policies using sparse and underspecified rewards |
Country Status (1)
Country | Link |
---|---|
US (1) | US20210256313A1 (en) |
-
2021
- 2021-02-19 US US17/180,682 patent/US20210256313A1/en active Pending
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11544536B2 (en) | Hybrid neural architecture search | |
US11087201B2 (en) | Neural architecture search using a performance prediction neural network | |
US11669744B2 (en) | Regularized neural network architecture search | |
US10204097B2 (en) | Efficient dialogue policy learning | |
US11205099B2 (en) | Training neural networks using data augmentation policies | |
US20220092416A1 (en) | Neural architecture search through a graph search space | |
US20240127058A1 (en) | Training neural networks using priority queues | |
US11922281B2 (en) | Training machine learning models using teacher annealing | |
US20220215209A1 (en) | Training machine learning models using unsupervised data augmentation | |
US10824946B2 (en) | Training neural networks using posterior sharpening | |
US20210034973A1 (en) | Training neural networks using learned adaptive learning rates | |
US20220230065A1 (en) | Semi-supervised training of machine learning models using label guessing | |
US20230029590A1 (en) | Evaluating output sequences using an auto-regressive language model neural network | |
US20210256313A1 (en) | Learning policies using sparse and underspecified rewards | |
US11886976B1 (en) | Efficient decoding of output sequences using adaptive early exiting | |
WO2023222882A1 (en) | Resource navigation using neural networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:AGARWAL, RISHABH;LIANG, CHEN;SCHUURMANS, DALE ERIC;AND OTHERS;SIGNING DATES FROM 20210224 TO 20210301;REEL/FRAME:055452/0907 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: APPLICATION DISPATCHED FROM PREEXAM, NOT YET DOCKETED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |