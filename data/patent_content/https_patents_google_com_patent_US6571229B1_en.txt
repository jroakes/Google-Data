FIELD OF THE INVENTION
This invention relates to classification systems, e.g. speaker recognition systems, and more specifically to a method and apparatus for iterative training of a classification system.
BACKGROUND OF THE INVENTION
Modern classification systems require high accuracy training for optimal performance in a variety of environments. One method of achieving high accuracy is through discriminative training methods. A discriminative polynomial classifier for speaker verification is described in detail in W. M. Campbell and K. T. Assaleh, “Polynomial Classifier Techniques for Speaker Verification”, in Proceedings of the International Conference on Acoustics, Speech, and Signal Processing, pp. 321-324, 1999. Iterative techniques to solve linear equations have typically been used in two areas. In the numerical analysis community, methods are targeted toward solving large sparse systems. In the engineering community, approaches have concentrated on using iterative methods for recursive learning. The present disclosure applies to both areas.
Polynomial discriminative training methods optimize the performance of a classifier by maximally separating the decision regions. The main advantages of this polynomial approach are:
the training method is able to handle large amounts of enrollment data in a straightforward manner;
the architecture is based upon a simple multiply-add only architecture;
the classifier is trained discriminatively with an algorithm achieving the global minimum; and
the classifier output approximates a posteriori probabilities, which eliminates the need to perform cohort selection and cohort scoring (cohorts are incorporated as part of the training).
A major difficulty in using polynomial discriminative training for previous systems is the large memory footprint required for training. The training process requires the solution of a large (for small platforms) matrix problem. This is a serious drawback for portable devices, sometimes prohibiting discriminative training from being a viable choice. Many portable devices (e.g., cell phones) have high MIPS (i.e., they include DSPs and the like) but little memory. Therefore, it is desirable to construct methods and apparatus that minimize memory usage and produce equivalent functionality.
Accordingly the present disclosure describes a new and improved method and apparatus for iterative training of a classification system in which memory usage is substantially reduced while producing equivalent functionality.
BRIEF DESCRIPTION OF THE DRAWINGS
Referring to the drawings:
FIG. 1 is a simplified block diagram of a basic training implementation;
FIG. 2 is a simplified block diagram of polynomial classifier structure; and
FIG. 3 illustrates a training procedure for the polynomial classifier structure of FIG. 2.
DESCRIPTION OF THE PREFERRED EMBODIMENT
Turning now to FIG. 1, a basic training implementation 10 is illustrated for use in a standard method of applying the polynomial classifier discriminatively for speaker recognition. Implementation 10 includes an audio input 11, an analog-to-digital converter 12, a digital signal processor (DSP) 14, a data link 16 and a computer 18. It should be noted that several of the elements are shown separately for convenience of this description, but could be combined; e.g., data link 16 could be removed and DSP 14 and computer 16 could be the same element. Speech is collected at audio input 11 and then converted to digital samples by A/D converter 12. DSP 14 extracts feature vectors for the input speech, say x1, x2, etc.
After this process, two more steps are required: calculation of an r vector, and training of a model w. The calculation can be performed in several ways: calculate r in DSP 14 and send r across data link 16; and send the feature vectors to computer 18 and calculate r and then w in computer 18. The best method depends upon the implementation and memory requirements. Details of the calculation of the r and w vectors are given below in algorithm I.
Denote the vector of polynomial basis terms up to order k for a given vector x by p(x); i.e., p(x)={1 x1 x2 . . . xn x1x2 . . . }t. Denote by p2(x) the vector of polynomial basis terms up to order 2K. Algorithm I, set forth below, shows the standard method of training.
Algorithm I: Training Algorithm
1. For i=1 to # speakers.
2. Set ri=0. ai=0.
3. for k=1 to # vectors from speaker i.
4. Read in feature vector k in speaker i, xi,k.
5. ri=ri+p2(xi,k).
6. ai=ai+p(xi,k).
7. Next k.
8. Next i.
9. Find
10. For i=1 to # speakers.
11. r=r+((N/Ni)−2)ri.
12. Map r→R using a mapping.
13. Solve Rwi=((N/Ni)−1)ai.
14. Next i.
where
and Ni=feature vectors for the ith speaker.
The main difficulty in implementing algorithm I on a portable platform is contained in steps 12 to 14. Up until that point, algorithm I deals with a non-redundant version of the R matrix, the vector r. The process of mapping r to R consumes considerable memory and requires the storage of an auxiliary index map, m, which tells where an element of r belongs in R; i.e.,{R}j,k={r}m(j,k), where { }j,k means the (i,j)th term of the matrix R.
As an example, a typical system may use an input feature vector of dimension 12 and a polynomial order of K=3. Then the vector r has a length of 18,564 and the matrix R has 207,025 elements. Therefore, R requires an order of magnitude more storage than r.
Turning now to FIG. 2, a simplified block diagram of polynomial classifier structure 20 is illustrated. Structure 20 includes a polynomial function block 22 having an input for feature vectors produce from an utterance to be classified, and an input for speaker models from a model memory 24. The output of polynomial discriminant function block 22 is given by f(x)=wtp(x). Here, x is a feature vector, w is a vector of coefficients (the speaker model), and p(x) is a vector of monomial basis terms of degree K or less. When enrolling speaker i, the output of the classifier is trained to approximate 1 on the speaker's feature vectors and 0 on the anti-speaker data, as illustrated in FIG. 3. A mean-squared error criterion is used for this training process The resulting classifier approximates a posteriori probabilities.
Verification is accomplished by averaging in a block 26 the output of polynomial discriminant function block 22, f(x), over the feature vectors derived from the input utterance. The resulting average score is compared in a block 28 to a threshold, T, and an accept/reject decision is made.
Iterative methods of training are a common technique used to solve linear equations; e.g., Rw=b. The basic structure of an iterative method is as follows. First, an initial guess is made, w0. Then, a descent direction, d, is estimated using data from previous iterations, the (typically) unaltered matrix, R, and the current best solution, wi. In many cases, this involves computing a product Rp, where p is some auxiliary vector. The new solution estimate is then given by wi+1=wi+αd, where α is some suitable chosen scalar.
A common method for iterative training is implemented in Kaczmarz algorithm for recursive learning. For more details see J. Schurmann, Pattern Classification, John Wiley and sons, Inc. 1996; and S. Kaczmarz, “Angenaherte Auflosung von Systemen Linearer Gleichungen” Bull. Internat. Aca. Polon. Sciences et Lettres, pp. 355-357, 1937. The method uses the update
w i+1 =w i+μ(b j −a j x i)a j t,
where aj is the jth row of R, bj is the jth entry of b, and 0<μ|aj|2 2<2. The two main advantages of this method are (1) it is computationally simple, and (2) the update involves only one row of R.
More sophisticated algorithms for iterative training are the successive over-relaxation (SOR) algorithm and the conjugate gradient (CG) algorithm. The SOR algorithm is an extension of the well-known Gauss-Seidel method with a parameter 0<ω<2, which can be varied to give difference convergence rates. The CG algorithm has the advantage that there are no direct parameters to estimate, and its convergence rate is determined by the condition of the matrix R. While these iterative methods are described herein as a preferred embodiment, because of their common use and applicability to the present problem, many other methods are available and may be used herein.
The iterative methods are used to solve step 14 in algorithm I. Several properties of R are critical. First, R is symmetric, non-negative definite, and square by structure. Second, in some specific applications, it may be assumed (with no violations in practice) that R is nonsingular. These properties allow all of the mentioned iterative methods to be applied. Here it should be noted that the present novel method of reducing the required memory can be used in conjunction with the mapping of any matrix, R, with these properties, and the present invention is not limited to training voice classification or verification systems.
Generally, the present invention is a novel method and apparatus for computing Rw for an arbitrary w without explicitly performing the mapping from r to R. The basic idea is to utilize the structure of the matrix R. As stated above, training of the classifier is performed to approximate an
ideal output 0 for all anti-speakers and 1 for the input model (as illustrated in FIG.
3). In the present training method, this optimization is solved with normal equations and “feature space” correlation matrices, R=M
tM or
Thus, the process solves the equation Rw=M t 0, where R and M t 0 are known and w is the unknown. In a typical example, 12 features and a 3rd degree system may be used. In this example, the vector r has 18,564 elements (where r represents the unique entries of R) and the matrix R has 207,025 entries. Therefore, in the present novel process constructing the matrix R is avoided, so that the required memory is reduced by a factor of >10.
The present process solves Rw=
M t 0 using iterative methods e.g., Steepest Descent, Conjugate Gradient, or Kaczmarz algorithm. To perform the iterative method, the product y=Rw must be computed at each iteration. Typically, y and w may each contain 455 elements while the matrix R contains 455×455 elements. However, to compute the product at a specific iteration:
only the ith row of R is needed.
In the present method, to compute y=Rw, the following algorithm is used.
First, use a matrix outer product structure of R:
Let n=1, then; {R}i,j={p(x)}i{p(x)}j
Let p=p(q), where q is a vector of primes;
Let rint=p2(q);
Then to find the (i,j)th entry of R,
find m={p}i{p}j in the integer version of r, rint.
Call this location im.
Then {r}im is the required entry of R.
In a simplified example, let y=Rw include 2 features with a 1st degree classifier. Then:
where r includes only the unique entries of R. In this very simplified form it can be seen that R has nine entries while r has only six.
Converting p to p(q), where q is a vector of primes:
therefore,
Thus, six numbers are stored, rather than nine polynomials. Each entry in the matrix R can be quickly found because each entry is represented by a unique number. This can be seen by noting that the product of two basis elements is a basis element, e.g., (x1 2x2) (x3x4)=x1 2x2x3x4. Let qi be the ith prime number. Then substitute qi for xi. To illustrate the effectiveness of this process and using r and rint from the above example:
goal find the (2,3) entry of the matrix R, i.e., x1x2.
m={p}i{p}j=2*3=6.
m=6 is the 4th entry of rint; {r}4=x1x2.
To further illustrate the steps of the present procedure, assume a feature vector with n variables, x1, . . . , xn. Now let q1, . . . , qn be the first n prime numbers. Then
x
i1
x
i2
. . . x
ik
→q
i1
q
i2
. . . q
ik
This mapping turns the process of locating a monomial term into a much simpler numerical search. Based upon this mapping, an algorithm for computing an arbitrary product, Rw, is derived below.
1) Let q be the vector of the first n primes. |
2) Let v = p(q) and v2 = p2(q). |
3) Sort v2 into a numerically increasing vector, v2′. |
|
Store the permutation, π, which maps v2′ to v2. |
4) For i = 1 to (Number of rows of R) |
|
5) Let {y}i = 0. |
|
6) For j = 1 to (Number of rows of R) |
|
7) Compute n = {v}i {v}j |
|
8) Perform a binary search for n in v2′, call |
|
the index of the resulting location in′ |
|
9) Using the permutation π, find the index, |
|
in, in v2 corresponding to the index, in′ |
|
in v2′ |
|
10) {y}i = {y}i + {r}in {w}j |
In an actual test, the new iterative procedure was applied to the YOHO database for speaker verification. For information on the YOHO database see J. P. Campbell, Jr., “Testing with the YOHO CD-ROM voice verification corpus”, in Proceedings of the Internation Conference on Acoustics, Speech, and Signal Processing, pp. 341-344, 1995.
Feature extraction was performed by examining 30 ms frames every 10 ms. For each frame, mean removal, pre emphasis, and Hamming window were applied. Then, 12 LP coefficients were obtained and transformed to 12 LP cepstral coefficients (LPCC's). Cepstral mean subtraction was performed on the result.
A polynomial classifier of degree 3 was applied to the 12 dimensional feature vectors generated. This resulted in a speaker model with 455 coefficients per speaker. The antispeaker population vector, rimp, was constructed by computing an rk for each speaker and then summing across all speakers.
The memory usage for the new iterative procedure was compared to the usage required in the original direct approach described above to illustrate the advantage of the new iterative procedure. For the original approach, allocate memory space for r (double precision, 8*18,564 bytes), the index map (16 bit int, 2*455*455 bytes), and for the matrix R (double precision, 8*455*455 bytes) for a total of 2,218,762 bytes. For the new iterative procedure, allocate memory space for r (double precision, 8*18,564 bytes), v (16 bit int, 18,564*2 bytes), v2′ (32 bit int, 18,564*4 bytes), π (16 bit int, 18,564*2 bytes), and scratch space for the iterative algorithm (double precision, 455*5*8 bytes) for a total of 315,224 bytes. The memory savings is thus 2,218,762/315,224 or approximately 7.
Thus, new and improved apparatus and method are disclosed for computing complicated mathematical processes, such as the product of a large matrix and a large vector. The new and improved apparatus and method greatly reduce the amount of memory required to perform the mathematical processes so that some very complicated systems, such as classification systems, can be incorporated in portable platforms (e.g., cellular telephones and the like). Further, because of the substantial reduction in the amount of memory required to perform the various processes, iterative training can be used in the classification systems on portable platforms, which greatly enhances their operation.
While we have shown and described specific embodiments of the present invention, further modifications and improvements will occur to those skilled in the art. We desire it to be understood, therefore, that this invention is not limited to the particular forms shown and we intend in the appended claims to cover all modifications that do not depart from the spirit and scope of this invention.