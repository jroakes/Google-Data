CN114945920A - Using secure multi-party computing to improve content selection process integrity - Google Patents
Using secure multi-party computing to improve content selection process integrity Download PDFInfo
- Publication number
- CN114945920A CN114945920A CN202180008133.1A CN202180008133A CN114945920A CN 114945920 A CN114945920 A CN 114945920A CN 202180008133 A CN202180008133 A CN 202180008133A CN 114945920 A CN114945920 A CN 114945920A
- Authority
- CN
- China
- Prior art keywords
- server
- selection
- mpc
- values
- digital component
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000000034 method Methods 0.000 title claims abstract description 188
- 230000008569 process Effects 0.000 title claims abstract description 154
- 230000004044 response Effects 0.000 claims description 43
- 101710165590 Mitochondrial pyruvate carrier 1 Proteins 0.000 description 87
- 102100024828 Mitochondrial pyruvate carrier 1 Human genes 0.000 description 87
- 101710101695 Probable mitochondrial pyruvate carrier 1 Proteins 0.000 description 87
- 101710165595 Mitochondrial pyruvate carrier 2 Proteins 0.000 description 69
- 102100025031 Mitochondrial pyruvate carrier 2 Human genes 0.000 description 69
- 101710101698 Probable mitochondrial pyruvate carrier 2 Proteins 0.000 description 69
- 235000019800 disodium phosphate Nutrition 0.000 description 39
- 241000544061 Cuculus canorus Species 0.000 description 24
- 101100346198 Caenorhabditis elegans mpc-2 gene Proteins 0.000 description 18
- 238000012545 processing Methods 0.000 description 17
- 230000006870 function Effects 0.000 description 15
- 238000004590 computer program Methods 0.000 description 12
- 238000004422 calculation algorithm Methods 0.000 description 10
- 238000010586 diagram Methods 0.000 description 10
- 230000005540 biological transmission Effects 0.000 description 9
- 238000004891 communication Methods 0.000 description 9
- 239000000203 mixture Substances 0.000 description 9
- 230000001143 conditioned effect Effects 0.000 description 8
- 230000000694 effects Effects 0.000 description 7
- 230000009471 action Effects 0.000 description 6
- 230000008901 benefit Effects 0.000 description 6
- 230000014509 gene expression Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 6
- 230000009286 beneficial effect Effects 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 4
- 238000013515 script Methods 0.000 description 4
- 238000013461 design Methods 0.000 description 3
- 238000005516 engineering process Methods 0.000 description 3
- 239000004615 ingredient Substances 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000012360 testing method Methods 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 101100346189 Caenorhabditis elegans mpc-1 gene Proteins 0.000 description 2
- 239000000654 additive Substances 0.000 description 2
- 230000000996 additive effect Effects 0.000 description 2
- 230000000903 blocking effect Effects 0.000 description 2
- 230000001186 cumulative effect Effects 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000010295 mobile communication Methods 0.000 description 2
- 238000009877 rendering Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 239000013589 supplement Substances 0.000 description 2
- 230000001960 triggered effect Effects 0.000 description 2
- 238000013459 approach Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000013480 data collection Methods 0.000 description 1
- 238000005242 forging Methods 0.000 description 1
- 238000010413 gardening Methods 0.000 description 1
- 239000011521 glass Substances 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000008450 motivation Effects 0.000 description 1
- 230000002265 prevention Effects 0.000 description 1
- 239000000047 product Substances 0.000 description 1
- 238000012797 qualification Methods 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000001629 suppression Effects 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/64—Protecting data integrity, e.g. using checksums, certificates or signatures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0816—Key establishment, i.e. cryptographic processes or cryptographic protocols whereby a shared secret becomes available to two or more parties, for subsequent use
- H04L9/085—Secret sharing or secret splitting, e.g. threshold schemes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6254—Protecting personal data, e.g. for financial or medical purposes by anonymising data, e.g. decorrelating personal data from the owner's identification
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L63/00—Network architectures or network communication protocols for network security
- H04L63/20—Network architectures or network communication protocols for network security for managing network security; network security policies in general
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W12/00—Security arrangements; Authentication; Protecting privacy or anonymity
- H04W12/02—Protecting privacy or anonymity, e.g. protecting personally identifiable information [PII]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
This document describes systems and techniques for improving integrity and protecting information security in content selection and distribution. In one aspect, a method includes receiving, by a first server of a secure multi-party computing (MPC) system, a request for a digital component from an application on a user device. The request is parsed into different sub-requests. Each sub-request is transmitted to a different server. A set of candidate selection values is received from a separate server. The first server performs a selection process in cooperation with one or more second servers of the MPC system to generate a selection of a winning digital component, including combining the first set of candidate selection values and the set of cached selection values to create a final set of candidate selection values and ranking the final set according to the values of the candidate selection values.
Description
Cross Reference to Related Applications
This application claims priority to IL application 279405 filed on 12/13/2020. The disclosures of the aforementioned applications are incorporated herein by reference.
Technical Field
This specification relates to data security and integrity.
Background
Secure multi-party computing (MPC) is an encryption protocol that prevents access to data by distributing the computation across multiple parties such that an individual party cannot access the data of another party. The MPC computing system uses secret shares of data to perform computations.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include: receiving, by a first server of a secure multi-party computing (MPC) system, a request for a digital component from an application on a user device, parsing, by the first server, the request into two or more different sub-request portions, transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server, receiving, by the first server, a first set of candidate selection values from a separate server in response to transmitting the two or more different sub-requests, performing, by the first server, a selection process in cooperation with one or more second servers of the MPC system to generate a selection result for a winning digital component, including merging, by the first server, the first set of candidate selection values and a set of cached selection values to create a final set of candidate selection values, ranking, by the first server, the final set of candidate selection values according to the values of the candidate selection values, and applying, by the first server, each rule of the set of two or more selection rules, and transmitting, by the first server in cooperation with the one or more second servers, a selection result of the winning digital component to the user device.
These and other embodiments may optionally include one or more of the following features. In some embodiments, the method comprises receiving, by a first server of the secure MPC system, a notification from an application on a user device, the notification comprising data indicating that a winning digital component was presented at a client device. In some embodiments, a notification is received by the first server of the secure MPC system along with the second request for the second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
In some embodiments, transmitting the selection result of the winning digital component from the final selection process includes receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system, and transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
In some implementations, receiving the first set of candidate selection values includes receiving at least two secret shares of each candidate selection value of the first set of candidate selection values from a separate server. In some embodiments, the merging and sorting may be performed by the first server as a single comparison-based sorting process.
In some embodiments, the set of selection rules includes at least a privacy preserving anonymization enforcement rule.
Other embodiments of this aspect include corresponding systems, apparatus, and computer programs, encoded on computer storage devices, configured to perform the actions of the methods.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages.
The proposed architecture uses a secure MPC process performed by two or more MPC servers operated by different parties to select digital components based on secret shares of user information to ensure that the MPC server or another party cannot access the user information in clear text or in clear code without unauthorized collusion between MPC servers. The MPC process is used to implement privacy safeguards and reduce transmission between the requesting client device and the MPC cluster.
The MPC cluster also performs a final selection process and may transmit a secret share of the result directly to the requesting client device, the result identifying the selection number component of the MPC cluster using the secure MPC process selection. Because the final selection process is performed on the MPC cluster and not on the requesting client device, only the selection values of the winning digital components are transmitted to the requesting client device, not the information of all or a large set of digital components. Reducing the need to transmit data reduces the amount of bandwidth consumed by transmitting information, reduces latency in transmitting information, and reduces the amount of processing power required to transmit information and the associated battery power of a device (e.g., a mobile device) that operates on a battery.
In addition, data cached locally at a particular computing system reduces latency for any future requests to cache the data. Reducing the latency of content presentation also reduces the number of errors that occur when a user device waits for such content to arrive. Since content typically needs to be provided to a mobile device connected over a wireless network in a few milliseconds, reducing the latency of selecting and providing content is critical to prevent errors and reduce user frustration.
The process also reduces the likelihood of leakage of confidential information for content platforms submitting digital component selection values to the MPC cluster by limiting the number of digital components providing information to the client device. The described technology provides a simplified process for maintaining advanced privacy. The system provides a high standard for user privacy without requiring extensive changes to the demand side platform.
Various features and advantages of the foregoing subject matter are described below with reference to the drawings. Additional features and advantages will be apparent from the subject matter described herein and the claims.
Drawings
FIG. 1 is a block diagram of an environment in which an MPC cluster performs a secure MPC process to select digital components for assignment to client devices.
FIG. 2 is a data flow diagram of an example process for selecting a digital component to provide for display on or assignment to a client device.
FIG. 3 is a swim lane diagram of an example process for selecting a numeric component to provide for display on or assignment to a client device.
FIG. 4 is a flow diagram illustrating an example process for selecting a digital component for distribution to a client device.
FIG. 5 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
In general, this document describes systems and techniques to improve information integrity and protect information security in content selection and distribution. The MPC cluster of server computers can perform a secure MPC process to select digital components based on user information without any one MPC server having access to the user information in clear text without unauthorized collusion. The user information may be sent to the MPC cluster using a probabilistic data structure to reduce the data size of the information transmitted over the network and to maintain information security during transmission. In some embodiments, additional techniques including distribution point functionality may be used to send user information to the MPC cluster.
The MPC cluster provides a secure environment for performing a selection process to select a selection value mapped to a digital component in response to a request for the digital component from a client device. Performing this selection process at the MPC cluster provides improved process integrity and user privacy over performing a final selection process at the requesting client device, which requires the transmission of a securely determined candidate from the MPC cluster to the client device. Furthermore, the client device presents an environment in which fraud prevention is more difficult — once the candidate selection value is received, the final selection process is typically performed in the clear and can be easily manipulated. By performing the final selection process at the secure MPC cluster, the described system provides a number of advantages over performing the process at the client device.
For example, the client device may transmit requests for digital components based on potentially sensitive information, such as a group of users to which the user may belong, and transmit separate requests for digital components based on insensitive information, such as context in which the digital components will be presented in a single digital component slot, in order to protect user privacy. The process may cause the client device to transmit twice as many requests for digital components as there are slots of digital components available, and to receive twice as many candidates from potentially many different servers in response to the requests. The additional requests and responses require additional bandwidth and battery power, which may degrade the user's online experience. The described system reduces the number of transmissions required between a client device and another server: because the MPC cluster is performing the entire selection process, the client device may only send one request to the servers of the MPC cluster, and the client device may only receive one response from the MPC cluster.
In some cases, it may be beneficial for a user to receive a digital component (or other data) related to a web page, application page, or other electronic resource that the user previously accessed and/or interacted with. To allocate such digital components to users, users may be assigned to groups of users based on the digital content accessed by the users, such as groups of user interests, queues of similar users, or other group types involving similar user data. For example, when a user visits a particular website and interacts with a particular item presented on the website or adds an item to a virtual shopping cart, the user may be assigned to a group of users who visited the same website or other websites with similar context or are interested in the same item. For example, if a user of client device 110 searches for shoes and accesses multiple web pages for different shoe manufacturers, the user may be assigned to a user group of "shoes," which may include identifiers of all users who have accessed a website related to the shoes.
In some implementations, the user's group membership may be maintained on the user's client device 110, e.g., through a browser-based application, rather than through a digital component server, content provider, or another party. The user groups may be specified by respective tags of the user groups. The tags of the user group may describe the group (e.g. a gardening group) or a code (e.g. a non-descriptive alphanumeric sequence) representing the group. The tags for the user group may be stored in a secure store of the client device 106 and/or may be encrypted at the time of storage to prevent others from accessing the list.
In some implementations, the identifier of the user group may be generated using a hash-based message authentication code (HMAC) parameterized by the tag of the user group and the domain of the content provider, denoted as HMAC (user _ group _ label, eTLD + 1). In some embodiments, HMAC may be implemented using a secure hash algorithm (SHA-256), which is a cryptographic hash function having a 256-bit digest length to generate a hashed 256-bit (32-byte) output. In such an example, the HMAC (user _ group _ label, eTLD +1) generates a 256-bit unique identifier of the user group as the user group identifier.
The user group membership of the user may be used to select digital components or other content that may be of interest to the user, or may be otherwise beneficial to the user/client device (e.g., to assist the user in completing a task). For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or client device in some other manner.
The MPC cluster forwards the digital component request, or a portion thereof, to a supply-side platform (SSP) to solicit candidate selection values while shielding the SSP from sensitive information, such as the IP address of the requesting client device. The IP address is a strong fingerprint signal, or information that can be used to identify a particular device and associate that device with its user, hiding the IP address of the device from the SSP enhances user privacy.
Furthermore, the entire selection process is performed in the MPC cluster, allowing the selection rules to be applied uniformly to all candidate selection values for a particular response to a digital component request. In the selection process performed at the client device for the final selection, the MPC cluster can only apply the selection rule to the candidate selection values that the MPC cluster has access to, but not to the candidate selection values that the client device receives alone. This improves the consistency of the user experience and reduces confusion that may arise, for example, when a user specifies a particular selection rule that applies to some digital components but not others.
The MPC cluster implements a secret sharing algorithm to maintain the security of the selection process. In the described system, the MPC cluster may use a secret sharing algorithm, such as an inadvertently transmitted extension (OTe), to securely evaluate boolean operations that need to be performed during the selection process. The algorithm minimizes the incremental computational cost and delay required to support the application of the selection rules.
Fig. 1 is a block diagram of an environment 100 in which an MPC cluster performs a secure MPC process to select digital components for assignment to client devices 110. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, secure MPC cluster 130, publishers 140, websites 142, content platforms, such as provider platform (SSP)170 and demand side platform DSP (150). Example environment 100 may include many different client devices 110, secure MPC clusters 130, publishers 140, web sites 142, DSPs 150, and SSPs 170.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices such as smart phones, and other devices that can send and receive data over the network 105. The client device may also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hot word" or "hot phrase" that activates the microphone to accept audio input, the digital assistant may be placed in a listening mode (e.g., ready to accept audio input). The digital assistant device may also include a camera and/or a display to capture images and visually present information. The digital assistant may be implemented in different forms of hardware devices, including a wearable device (e.g., a watch or glasses), a smartphone, a speaker device, a tablet device, or another hardware device. The client device may also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to the television, a game console, or a virtual reality system.
The client device 110 typically includes an application 112, such as a web browser and/or a local application, to facilitate sending and receiving data over the network 105. A native application is an application developed for a particular platform or a particular device (e.g., a mobile device with a particular operating system). In some implementations, the application 112 can be a program such as an operating system. The publisher 140 may develop and provide (e.g., make available for download) the native application to the client device 110. For example, in response to a user of the client device 110 entering a resource address of the resource 145 in an address bar of a web browser or selecting a link referencing the resource address, the web browser can request the resource 145 from a web server hosting the publisher's 140 website 142. Similarly, the local application may request application content from a publisher's remote server.
Some resources, application pages, or other application content may include slots for digital components for rendering the digital components using the resources 145 or application pages. As used throughout this document, the phrase "digital component" refers to a discrete unit of digital content or digital information (e.g., a video clip, an audio clip, a multimedia clip, an image, text, or another unit of content). The digital component may be electronically stored in the physical memory device as a single file or collection of files, and the digital component may take the form of a video file, audio file, multimedia file, image file, or text file, and include advertising information such that the advertisement is a type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource presented by the application 112. More specifically, the digital component may include digital content related to the resource content (e.g., the digital component may relate to the same subject matter as the web page content, or a related subject matter). Thus, the provision of the digital component may supplement and generally enhance the web page or application content.
When application 112 loads a resource (or application content) that includes one or more slots for a digital component, application 112 may request the digital component for each slot. In some implementations, the digital component slot may include code (e.g., scripts) that cause the application 112 to request digital components from an MPC cluster, such as MPC cluster 130, that selects and provides the digital components to the application 112 for presentation to a user of the client device 110. As described below, an application 112 may request a digital component from an MPC cluster 130, and the MPC cluster 130 may forward the request to other servers, such as SSP 170.
Some publishers 140 use the SSP170 to manage the process of obtaining digital components for the digital component slots of their resources and/or applications. SSP170 is a hardware and/or software implemented technology platform that automates the process of obtaining the digital components of resources and/or applications. Each publisher 140 may have a corresponding SSP170 or SSPs 170. Some publishers 140 may use the same SSP 170.
The digital component provider 160 may create (or otherwise publish) digital components that are presented in digital component slots of publisher resources and applications. The digital component provider 160 may use the DSP 150 to manage its supply of digital components for presentation in the digital component slots. DSP 150 is a hardware and/or software implemented technology platform that automates the process of allocating digital components for presentation with resources and/or applications. The DSP 150 may interact with a plurality of supply side platforms SSP on behalf of a digital composition provider 160 to provide digital compositions for rendering using resources and/or applications of a plurality of different publishers 140. In general, DSP 150 may receive a request for a digital composition (e.g., from an SSP), generate (or select) a selection value for one or more digital compositions created by one or more digital composition providers based on the request, and provide data related to the digital composition (e.g., the digital composition itself) and a selection parameter to the SSP. The selection value may indicate an amount that the digital component provider 160 is willing to provide for presentation or user interaction of the digital component. The SSP may then select a digital component for presentation on the client device 110 and provide the client device 110 with data that causes the client device 110 to present the digital component.
In some cases, it may be beneficial for a user to receive a digital component associated with a web page, application page, or other electronic resource that the user previously accessed and/or interacted with. To allocate such digital components to users, users may be assigned to groups of users, such as groups of user interests, queues of similar users, or other group types involving similar user data, when the users access a particular resource or perform a particular action on the resource (e.g., interact with a particular item presented on a web page or add the item to a virtual shopping cart). The user group may be generated by the digital composition provider 160. That is, each digital component provider 160 may assign users to their group of users when the users access electronic resources of the digital component provider 160. The user group may also be created by the content platform, for example, by DSP 150 and/or SSP 170.
To protect user privacy, group membership of the user may be maintained on the user's client device 110, for example, by one of the applications 112 or operating systems of the client device 110, rather than by the digital component provider, content platform, or other party. In a particular example, a trusted program (e.g., a web browser or operating system may maintain a list of user group identifiers ("user group list") for users using a web browser or another application (e.g., users logged into the browser, application, or client device 110).
When the application 112 presents resources or application content related to a web page on the digital component provider 160 or the website 142, the resource may request that the application 112 add one or more user group identifiers to the user group list. In response, the application 112 may add one or more user group identifiers to the user group list and securely store the user group list.
The MPC cluster 130 may use the user group membership of the user to select digital components or other content that the user may be interested in or otherwise beneficial to the user/user device. For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or user device in some other manner. However, the user group identifiers of the user group list of users may be provided and used to select the digital components in a manner that prevents the computing systems MPC1 and MPC2 of MPC cluster 130 from having clear access to the user group identifiers of the users, thereby protecting user privacy when using the user group membership data to select the digital components. Plaintext is text that has not been computationally tagged, specially formatted, or written in code or data (including binary files) in a form that can be viewed or used without the need for a key or other decryption device or other decryption process. The MPC cluster 130 also performs a final selection process using the set of candidate selection values received from the SSP170 to select a winning selection value that maps to a digital component. The MPC cluster 130 then provides the data of the digital components mapped to the winning selection values directly to the client devices 110 in response to the digital component requests. The data may include, for example, data identifying the digital component, a location at which the digital component is stored and/or from which the digital component may be requested, a winning selection value, and other parameters.
The secure MPC cluster 130 includes two computing systems MPCs 1 and MPC2 (e.g., server computers) that perform secure MPC processes to select digital components for assignment to a user's client device based on the user's group membership without having access to group membership information (or other sensitive user information) in the clear. Although the example MPC cluster 130 includes two computing systems, more computing systems may be used as long as MPC cluster 130 includes more than one computing system. For example, MPC cluster 130 may include three computing systems, four computing systems, or other suitable number of computing systems. Using more computing systems in the MPC cluster 130 may provide more security, but may also increase the complexity of the MPC process.
Computing systems MPC1 and MPC2 may be operated by different entities. As such, each entity may not have access to the user group membership in the plain text. For example, one of computing systems MPC1 or MPC2 may be operated by a trusted party other than the user, publisher 140, DSP 150, SSP170, and digital ingredient provider 160. For example, an industry group, government group, or browser developer may maintain and operate one of computing systems MPC1 and MPC 2. Other computing systems may be operated by a different one of these groups, such that a different recipient operates each computing system MPC1 and MPC 2. Preferably, the different parties operating the different computing systems MPC1 and MPC2 have no incentive to collude to compromise user privacy. In some embodiments, computing systems MPC1 and MPC2 are architecturally separate and are monitored as not communicating with each other except for performing the secure MPC process described herein.
In addition to the description in this document, a user may be provided with controls (e.g., user interface elements with which the user may interact), allowing the user to select whether and when the systems, programs, or features described herein may collect user information (e.g., information about the user's social network, social actions or activities, profession, user preferences, or user's current location), and whether to transmit content or communications from a server to the user. In addition, certain data may be processed in one or more ways to delete personally identifiable information before it is stored or used. For example, the identity of the user may be processed such that personally identifiable information of the user cannot be determined, or the geographic location of the user may be summarized where location information is obtained (such as summarized at a city, zip code, or state level), such that a particular location of the user cannot be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user.
Fig. 2 is a data flow diagram of an example process 200 for selecting a digital component for display on or assignment to a client device. The operations of process 200 may be performed, for example, by applications 112 on client devices 110, computing systems MPC1 and MPC2 of MPC cluster 130, DSP 150, and SSP 170. The operations of process 200 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 200. Although the process 200 and the other processes below are described in terms of two computing system MPC clusters 130, MPC clusters having more than two computing systems may also be used to perform similar processes.
This specification includes two types of selection values-a selection value conditioned on any one sensitive user information, such as user group membership or other business sensitive information or a change in value thereof, which may allow an ill party to infer parameters of the sensitive information, or a "conditional selection value," and a selection value not conditioned on sensitive information, or an "unconditional selection value. To protect user privacy, the "conditional selection value" condition is evaluated within MPC cluster 130, rather than within SSP170 or DSP 150, to determine whether the "conditional selection value" is appropriate for the content selection process.
This architecture allows the MPC cluster 130 to protect user privacy and business confidential information and prove its trustworthiness to application providers, such as the provider of the application 112. In this example, the MPC cluster 130 relies on a secure two-party computing (2PC) architecture that applies cryptographic techniques to ensure that if at least one of the two computing systems of the MPC cluster 130 is honest, there is no leakage of confidential user data or business confidential information. If the MPC cluster 130 includes more than two computing systems, the current MPC protocol may be extended or other MPC protocols may be used.
The MPC cluster 130 runs a secure 2PC protocol to evaluate and apply conditions to select eligible selection process candidates, performs a selection process to select digital components based on winning selection values (e.g., where digital components map to winning selection values), and receives impression notifications to update counters on which these conditions depend. All of these processes can be done using secret sharing techniques. The protocol is described in detail below with reference to fig. 3.
The request contains information used in the digital component selection process, including information that may be sensitive, such as identifiers of user groups that the application 112 maps or otherwise associates, and insensitive information, such as contextual signals from the application 112 regarding the context in which the digital components are to be presented and/or displayed. As described in further detail below, the design of system 110 improves protection against user data that may be sensitive or confidential.
The trigger element may be, for example, a tag that detects the presence of a digital component slot within an internet location accessed by the application 112. The trigger element may be placed, for example, at an internet location and may notify the application 112 that there is a digital component slot for which a digital component should be requested.
SSP170 also applies selection value rules to determine, for example, how a selection value affects post-publication values of a particular content provider. The post-publication value may indicate, for example, the number of digital components provided to the content provider for publication. SSP170 then performs a selection process to determine the highest unconditional selection value that results in the highest post-issuance value. Unconditional selection values are not conditional on sensitive information and therefore do not apply content selection rules, such as user group membership, frequency control, content distribution rules, and pacing (pacing) rules. SSP170 then forwards to MPC cluster 130 as JIT select values: all selection values that enable caching in the MPC cluster 130 (selection values with TTL values), and all selection values whose post-release values are not less than the post-release value of the highest unconditional selection value.
FIG. 3 is a swim lane diagram of an example process 300 for selecting a digital component for presentation on or assignment to a client device. The operations of process 300 may be implemented, for example, by applications 112 on client device 110, computing systems MPC1 and MPC2 of MPC cluster 130, DSP 150, and SSP 170. The operations of process 300 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 300. Although the process 300 and the other processes below are described in terms of two computing system MPC clusters 130, MPC clusters having more than two computing systems may also be used to perform similar processes. In this particular example, two computing systems MPC1 and MPC2 have the same software and functionality, but are managed by different entities that have no motivation to collude to compromise user privacy.
The MPC cluster performs a secure MPC process to select a digital component based on characteristic information, such as user group information, in the digital component request. This may further include identifying a selection value of the numeric component as a candidate for selection based on the numeric component having the user group identifier matching one of the user group identifiers of the users. This may also include selecting a number component from the candidate number components based on the selection value of the number component. These selection values include selection values cached in the MPC cluster and selection values received from other servers in response to requests for selection values, and some selection values may be conditioned on sensitive information. This may be performed without computing system MPC1 or MPC2 having access to the user group identifier in the clear.
Computing systems MPC1 and MPC2 may use the secret shares to identify candidate selection values using secure MPC techniques such that neither computing system MPC1 nor MPC2 know which digital components are candidates or include groups of users of which the users are members. To this end, the computing system MPC1 calculates a first share of the candidate parameter for each conditional selection value of a set of conditional selection values that may potentially serve the current digital composition request. Similarly, the computing system MPC2 calculates a second share of the candidate parameter for each condition selection value in the same set of condition selection values. The conditional selection value may be a boolean value (e.g., 0 or 1) indicating whether the selection value associated with the numeric component and the optional user group identifier is a candidate.
Computing systems MPC1 and MPC2 may use secure MPC techniques to compute a secret share of the selection process result by one or more round trips between the computing systems. That is, computing systems MPC1 and MPC2 may determine secret shares of winning selection values, data identifying their respective digital components, and/or data identifying network locations from which client devices may download digital components.
Once the secret share calculation is complete, MPCs 1 and MPC2 may each return one of the shares of the selection result to the client device. The client device may then use the two secret shares to reconstruct the selection result in the clear.
The process 300 begins at step 1, where the application 112 generates a digital component request for transmission to the MPC cluster 130. The application 112 selects one of the computing systems of the MPC cluster 130 to which the request is to be transmitted. This selection process may be arbitrary, and in this example, the computing system chosen is MPC1 for simplicity.
The initial ad request contains three types of information: digital component requests based on sensitive information for each of computing systems MPC1 and MPC2, and digital component requests based on non-sensitive information for SSP 170.
To securely and efficiently generate a digital component request based on sensitive information, the application 112 may use a probabilistic data structure, such as a brook bird filter or a bloom filter. In this example, the probabilistic data structure is a cuckoo filter. Typically, a cuckoo filter includes an array of buckets, where each bucket can hold b fingerprints. A fingerprint of an item is a string of bits derived from a hash of the item. The cuckoo filter uses a hash function of n that allows one item to be placed anywhere in b of n different buckets. Typically, cuckoo filters are identified by the number of fingerprints in each bucket and the number of buckets. For example, a (2, 4) cuckoo filter has 2 buckets, and each bucket in the cuckoo array can store up to 4 fingerprints. Thus, the total capacity of the cuckoo filter is 2 × 4 or 8 fingerprints.
Depending on the configuration of the cuckoo filter, items may be inserted into the cuckoo filter at one of N possible locations, e.g., N-2. The application 112 determines all possible locations of the item to be inserted using N pseudo-random functions (PRFs) parameterized by the user group identifier or an identifier from the set of blocked identifiers and either of two random variables generated by the application 112. For example, assume that the two random variables generated by the application 112 are rand _ var1a and rand _ var 1b. In some embodiments, the application 112 and the MPC cluster 130 agree on a PRF in advance, where PRF (x, y) is ∈ [0, 2] k -1]Where k is the number of bits in each entry in the bucket of the cuckoo filter. Each position of the cuckoo filter may be occupied by a user group identifier or by a block identifier, or be empty. For example, the application 112 may generate a cuckoo filter table whose elements are PRF (ug _ id, rand _ var1a), PRF (blocked _ uid, rand _ var1b), and 0, where ug _ id is an identifier of the user group generated by applying HMAC to the tags of the user group based on the domain of the content provider, blocked _ uid is one identifier from a set of blocked identifiers, and 0 represents an empty item. The process is repeated for all subscriber group identifiers and all identifiers in the group blocked identifiers.
The application 112 may transmit a request for a digital component containing a corresponding secret share to a corresponding compute server of the MPC system. For example, the application 112 generates and transmits to the MPC 1a digital component request that includes a first secret share of a probabilistic data structure (i.e., cuckoo filter), which may be the vector B described in the previous paragraph. The parameters include rand _ var1a and rand _ var1b, as well as context signals from the location that triggered the generation and transmission of the digital component request. Similarly, the application 112 also transmits to the MPC2 a request for a digital component that includes a second secret share of the probabilistic data structure defined by rand _ var2 via a function PRF (rand _ var2, i) where i is an index of the secret share array, and rand _ var1a and rand _ var 1b. The additional data included in the digital component request may include a context selection signal indicating a context for which the digital component is eligible, such as a location of the client device 110, a spoken language selected for the application 110, a Universal Resource Locator (URL) of a resource with which the digital component may be presented, and/or an exclude URL of a resource with which the digital component may not be presented. This data of the digital component may also identify the digital component, for example, using a unique identifier, a field from which the digital component may be obtained, and/or other suitable data of the digital component.
The application 112 encrypts the digital component request based on sensitive information because if MPC1 has access to the request parameters for MPC2, MPC1 may reconstruct cuckoo filter table a and recover the user group identifier, thus violating the privacy of the user of the application 112. For example, application 112 may encrypt the digital component request of MPC2 using public key encryption and the public key of MPC 2: PubKeyEncrypt (rand _ var1a | | rand _ var1b | | rand _ var2| | | other signals, MPC2), where | | | is any reversible method that can be used to compose a complex message from a simple message, such as a protocol buffer or JSON. By using the function PubKeyEncrypt (), the parameters in parentheses are encrypted using the public key algorithm and the public key of MPC2 so that MPC2 can decrypt the shares using the corresponding private key. If encrypted, the application 112 may send a request for digital components of the MPC2 to the MPC1, and the MPC1 may forward this encrypted request to the MPC 2. In this manner, application 112 may send a single request to MPC1 that includes three sub-requests, e.g., a context request that includes context signals and two user group requests (i.e., conditional requests conditioned on user group information). The first user group sub-request is for MPC1 and the second user group sub-request is for an encrypted user group request of MPC 2. The second sub-request is encrypted so that MPC1 cannot access the information and the share must simply be forwarded to MPC 2.
To safely and efficiently generate a digital component request for the SSP170 based on non-sensitive information, such as a context signal, the application 112 uses a context signal that includes any signal, such as a signal specific to a particular content provider, but does not include a user group identifier or blocked identifier that is provided based on sensitive information using only digital component requests.
To minimize the risk of user privacy and maintain process integrity, the application 112 encrypts requests for digital components intended for the SSP170 using public key cryptography based on non-sensitive information. For example, application 112 may encrypt a digital component request to SSP170 using public key encryption and the public key of SSP 170: PubKeyEncrypt (SSP).
The process 300 continues with step 2 where the MPC1 parses the initial digital component request to obtain each of the three sub-requests. For example, MPC1 receives a digital component request. In some implementations, the request can be parsed into sub-requests and the request parsed into three sub-requests so that the sub-requests can be forwarded to separate recipients. For example, context requests may be forwarded to the SSP, user group requests may be saved and processed by the MPC1, and encrypted user group requests may be forwarded to the MPC 2.
Flow continues to step 3 where MPC1 grabs the JIT selection value from SSP170 and DSP 150 using a contextual or unconditional numeric component request, which is a sub-request in step 1. Some JIT selection values are conditional, depending on, for example: (1) whether the user is a member of a particular user group, (2) applicable selection rules, such as frequency control or pacing rules, and (3) whether the digital component creative associated with the selection value satisfies the rules that prevent micro-targeting. In some embodiments, the JIT selection value may be cached by the MPC cluster 130 based on TTL information provided with the selection value.
Micro-targeting is a selection process that narrowly targets users to the point where some users may feel uncomfortable. For example, a digital component targeted and assigned to only some users may be perceived as too personalized, and the user may be perceived as being singled out or uncomfortable with the specificity of the digital component. By ensuring that a particular digital component is provided to a threshold number of other users, the system ensures that the digital component is distributed to a sufficiently broad audience by enforcing k-anonymization, so that users are comfortable with the size of the digital component they receive and the target audience for the digital component. The concept of k-anonymization ensures that data of a particular user cannot be distinguished from data of a threshold number k of other users. The system may enforce k-anonymization rules, e.g., by ensuring that a particular digital component is assigned to the client device 110 at least k times in response to a request for one or more digital components, such that anonymization within a set of at least k users is maintained. In some embodiments, each of the k times the digital component is assigned must be for a different device or a different user. The system performs k-anonymization by using privacy preserving data structures. The assignment of particular digital components may be tracked in a privacy preserving data structure, such as a counter of the number of times a digital component has been selected for assignment or actual presentation to a user.
Furthermore, when a user navigates across multiple different websites, the user typically prefers to be discontinuously displayed the same third-party content, such that successively allocating the same third-party content to the same user across multiple different websites can result in wasted computing resources for allocating content that the user does not want to see and may ignore. One way to limit the number of times a particular user has been exposed to the same third-party content is to utilize frequency control techniques that prevent the same user from being exposed to the same third-party content more than a specified number of times within a recently specified time period.
The system allows further user input by receiving information from the user to suppress the digital component or prevent the digital component from being presented to the user for a period of time. For example, the user may choose to suppress a particular digital component that has been presented to them for a five day period. In some implementations, the time period may be specified by the client device 110, MPC cluster 130, DSP 150, digital content provider 160, or SSP170 based on the type of content item and/or the type of feedback provided by the user, among other factors.
Distribution of content may also be controlled by input from the digital component provider 160 through pacing control techniques. The digital component provider may specify an overall threshold for a selected value over a period of time to implement measures to ensure that resources for an activity or a set of digital components that include the digital component are not exhausted early in the activity period. For example, the digital component provider 160 may specify that the total number of selected digital components or selection values for a particular digital component selected from the digital component provider 160 over the course of a week is limited to a maximum of 8000 units. Once the maximum total number of selection values is reached, the particular digital component to which the maximum value is applied will no longer qualify for the selection process assigned to client device 110 until the end of the time period (e.g., one week).
The digital component provider may also specify a speed or pace at which a threshold of the selected digital component or selection value of a particular digital component from the digital component provider 160 will be reached. For example, the digital component provider 160 may specify that a maximum threshold of 6000 units must be reached at a pace of less than 250 units per day over the course of a month. Once the total number of days for the selection value is reached, the paced digital components provided by the digital component provider 160 will no longer qualify for the selection process assigned to the client device 110 until the end of the time period (day). Further, pacing may be based on the pace of a particular digital component selected and delivered to the user device, or the pace with which a particular digital component has been delivered to a user interacting with the particular digital component, among other metrics.
In addition to performing the selection process that enforces the content selection and user preference rules, the system may also improve security by preventing the MPC cluster 130 from accessing JIT selection values in the clear. SSP170 may split each JIT selection value into secret shares before transmitting the selection values to MPC cluster 130. Further, SSP170 may order the JIT selection values according to their post-issuance values.
In steps 4 through 6, SSP170 requests a selection value from DSP 150, receives a candidate selection value from DSP 150, and performs an initial selection process. In step 4, SPP 170 transmits a context number component request to DSP 150.
In step 5, the DSP 150 returns the select value mapped to the particular digital component. The selection values may include unconditional selection values and conditional selection values.
At step 6, SSP170 applies content provider and digital component blocking rules that prevent a particular content provider from being eligible to provide candidate digital components and selection values, or from becoming a candidate. Further, SSP170 performs an initial selection process to select an unconditional selection value and a conditional selection value from the candidate unconditional selection values. The conditionally selected value may be used to refill the cache of the MPC cluster 130 for subsequent requests from the application 112.
In step 7, SSP170 calculates a post-issuance value based on the selection value and information provided by DSP 150. For example, SSP170 may calculate the number of digital components to provide to the content publisher for display mapping to the selected value.
In step 8, SSP170 returns both the conditional selection value and the unconditional selection value to MPC cluster 130. The SSP response to MPC1 has the following parameters: { [ jit _ sv 1，1 ]，...[jit_sv n，1 ]Where n is the number of JIT-selected values, PubKeyEncrypt ({ [ JIT _ sv) } 1，2 ]，...[jit_sv n，2 ]}，MPC2)、{cache_ttl 1 ，...cache_tll n And { post _ publishing _ value } 1 ，...post_publishing_value n }. As described above, PubKeyEncrypt is a public key encryption algorithm and allows SSP170 to transmit a single response to MPC1 including a response to MPC2 without allowing MPC1 to access the response data. Appearing in parenthesesThe parameter represents the secret share of the variable in parentheses. Such as here, [ jit _ sv i，1 ]And [ jit _ sv i，2 ]Is jit _ sv i Jit _ sv i Representing the JIT selection value. With respect to secret shares, subscript 1 indicates a parameter representing a first secret share, and subscript 2 indicates a parameter representing a second secret share. In some embodiments, jit _ sv i Including data identifying the selection value and the digital component to which the selection value is mapped, as well as parameter values corresponding to parameters specified in the digital component request, and other data. SSP170 may assign jit _ sv i Split into its secret shares and reconstruction jit _ sv from its secret shares can be performed using an appropriate cryptographic library that supports the secret share algorithm i . For example, using an additional secret share library, client device 110 may add together two secret shares of the selection result to obtain a plaintext selection result. This allows the client device 110 to access selected values of the digital components and metadata of the digital components, such as the identity of the digital components, the location where the client device 110 can download the digital components, and the like. Parameter cache _ ttl i TTL value, publication _ value, representing each selection value i i Representing the post-issue value of each selection value i.
The selection result may include data of the selection value and/or the digital component corresponding to the selection value. For example, the selection result may be a data array including the digital component, or a URL or other resource locator referencing a network location where the client device 110 may obtain the digital component. In this way, the client device 110 may display the winning digital component after combining the secret shares of the selection result.
Process 300 continues with steps 9 and 10 where computing system MPC1 merges the cached and received JIT candidate selection values, where computing system MPC1 parses the response from SSP 170. First, MPC1 analyzes the response received from SSP170 at step 9.
The process 300 continues with step 10, where the computing system MPC1 transmits a request to MPC2 with the following parameters: PubKeyEncrypt ({ [ jit _ sv) 1，2 ]，...[jit_sv n，2 ]}，MPC2)、{cache_ttl 1 ，...cache-ttl n And { post _ publishing _ value } 1 ，...post_publishing-value n }. These are the values that MPC1 receives from SSP170 in step 8, where subscript 2 denotes the value jit _ sv i The second secret share of (a). Thereafter, MPC1 executes an efficient, general purpose, comparison-based ranking algorithm, such as a merge-ranking operation, to merge the cached select values associated with the signals from the original request received in step 1. For example, the merge-sort operation may include dividing the cached selection value and the received unordered list of selection values into n sub-lists, each sub-list containing one element (where a list of one element is considered sorted), and then repeating the merging of the sub-lists to generate a new sorted sub-list until only one sub-list remains, which is the final sorted list. Consolidated ordering is particularly suited to this situation because both the cached selection value list and the selection value received from SSP170 in step 8 can be pre-ordered.
The sorting process combines the JIT selection values and the cached selection values into a sequence of selection values (in the form of secret shares) that are ranked according to their post-issuance values. In parallel, MPC2 performs the same merge sort process on its secret share of the cached selection value and the JIT selection value.
There are two reasons for using the merge-sort process results — to update the cache selection values that may exist in the sort sequence of the MPC cluster 130, and to prepare a list of candidate selection values. The input to the final selection process is a list of candidate selection values prepared by the merge-sort process. In addition, the final selection process input also includes any number of user group identifiers and blocked identifiers encoded in the probabilistic data structure received from the application 112 in step 1, as well as counters or other data structures that support the enforcement of selection rules.
The final selection process of process 300 includes two successive stages, steps 11 and 12. All calculations of the final selection process are performed on the secret shares. Although some of the calculations may be described in the following sections in the clear, this is purely for the sake of brevity.
For each cache or used in the final selection processUpon receiving the selection values (i.e., the selection values in the final list resulting from the merge-sort process performed in step 10), the MPC cluster 130 conceptually calculates the variable value is _ candidate for each selection value x x . MP C1 calculates is _ candidate x Is represented as [ is _ candidate "] x,1 ]MPC2 calculates is _ candidate x Is represented as [ is _ candidate "] x,2 ]. MPC1 and MPC2 may cooperatively compute secret shares using a secure MPC process.
In step 11, MPC1 determines whether each candidate selection value is associated with the user group specified in the request received in step 1. The MPC1 receives in step 1 the equivalent of the secret share array of the cuckoo filter table M, denoted by [ M1 ]. Each subscriber group identifier present in M will be located in one of N possible locations. If the selection value x is associated with the user group specified in the request received in step 1 (i.e. the user group identifier of the selection value x is present in the probabilistic data structure from step 1), the selection value x must be present in one of the N possible locations.
MPC1 calculates [ is _ candidate according to the following equation x,1 ]：
Where Π represents the product of multiple items. Here, ug _ id (x) is a function for retrieving ug _ id associated with the selection value x, { F 1 ,…F N Is a function for calculating the possible indices (i.e., positions) of the entries within cuckoo filter table a, and rand _ val1a is the random value received in step 1. [ M ] A x,1 ]Is an array [ M 1 ]The xth element of (1). Equal testing between secret shares of plaintext integer and secret integer. The result is a secret share that is a secret integer of 0 (not equal) or 1 (equal). Here, [ M ] i,1 ]Is defined as Bi above.
Similarly, MPC2 calculates [ is _ candidate according to the following equation x,2 ]：
Here, [ M ] i,2 ]PRF (rand _ val2, i).
When [ is _ candidate x,1 ]And [ is _ candidate x,2 ]When combined, it is clear that is _ candidate if ug _ id of the selection value x is in the probability data structure table x Is 1. The false positive rate of a cuckoo filter is controlled by the length (i.e., number of bits) k of the entries in the cuckoo filter and may affect the eligibility of the selection values. Otherwise, is _ candidate is 0.
In this particular example, the user group check occurs after the MPC cluster 130 receives the unconditional selection value response from the SSP170 in step 8. In some implementations, MPC cluster 130 performs a user group check in parallel with sending the context digital component request in step 3 and receiving the context digital component response in step 8.
In this particular example, context digital components may contain conditional selection values from DSP 150 through SSP170, and MPC cluster 130 may perform a user group check on those JIT conditional selection values that may potentially be eligible for the final selection process in step 13 and may become the winner of the current digital component request received in step 1 if and only if the JIT conditional selection values may satisfy the rules that prevent user micro-targeting. In an alternative design, the JIT conditional select value is not eligible for the final selection process and cannot be the winner of the current digital component request. In addition, DSP 150 and SSP170 have the opportunity to customize lookup keys for caches, which provides additional flexibility for the DSP and SSP.
However, the delay in performing the user group check after receiving the conditional selection value will increase the overall delay of the overall process 300, as shown between steps 1 and 14. For example, even the most efficient secret share equality testing requires three round-trip Remote Procedure Calls (RPCs) between the computing systems of the MPC cluster 130, which can take tens to hundreds of milliseconds depending on the network conditions and the chosen equality testing algorithm.
The process 300 continues with step 12, where the MPC cluster 130 applies selection rules — MPC1 and MPC2 cooperate to apply selection rules. Each of the following rules is optional and will not be applied if a particular selection rule is not required for a particular selection flow.
For example, the MPC cluster 130 may optionally apply rules where a particular digital component identifier mapped to a particular selection value is in the blocklist and therefore not eligible for the selection process. Here, block _ id (x) is a function of retrieving block _ id associated with the selection value x. MPC1 may calculate:
similarly, MPC2 may calculate:
if can be selected from [ should _ block x,1 ]And [ should _ block x,2 ]Reconstructing should _ block x It is then clear that if the block _ id of the selection value x is in the probabilistic data structure, then the shouldjblock x Is 1. The FPR of the probabilistic data structure is controlled by the length of the entries in the structure. In the should _ block x In the case of 1, the MPC server 130 should assign the is _ candidate x Set to 0, because the identifier should be blocked, it is not qualified as a candidate. For example, for a 2-position cuckoo filter, if the block _ id of the selection value x is not in the probabilistic data structure, i.e., the block _ id does not match an entry in any of the two cuckoo filter positions, then the should _ block x Is 0. In this case, the MPC cluster 130 should not modify the is _ candidate x The value of (1), and thus the shouldjblock, since the identifier should not be blocked x Does not affect whether the selection value x qualifies as a candidate.
To be according to shadow _ block x Is _ candidate value modification x MPC1 calculation [ c ], [is_candidate x,1 ]＝[is_candidate x,1 ]x(1-[should_block x,1 ]). Similarly, MPC2 calculates [ is _ candidate [ ] x,2 ]＝[is_candidate x,2 ]x(1-[should_block x,2 ])。
Next, the MPC cluster 130 optionally applies pacing selection rules provided by the content provider. For each digital component request, the MPC cluster 130 conceptually randomly generates a rule _ selector in secret shares for each unit of the selection value to which the selection rule applies runit_id Or runit _ id. The function runit _ id (x) grabs runit _ id for the selection value x.
For example, MPC1 first randomly generates [ rules _ selector runit_id,1 ]. MPC1 then based on rule _ selector runit_id Is _ candidate value x MPC1 calculates [ is _ candidate [ ] x,1 ]＝[is_candidate x,1 ]x(1-[rule_selector runit_id(x),1 ])。
Similarly, MPC2 calculates [ is _ candidate [ ] x,2 ]＝[is_candidate x,2 ]x(1-[rule_selector runit_id(x),2 ])。
Here, rule _ selector is used up when the maximum total select value of cell runit _ id is exhausted runit_id Is set to 0. Further, a rule _ selector when the speed at which the threshold value of the selection value of the selected digital component is reached lags behind the target pace runit_id With an increased probability of 1. For example, MPC1 is generating rules _ selector at random runit_id When the value of (1) is added, rule _ selector of 1 is added runit_id The probability of (c). Rule _ selector if pacing leads target pacing runit_id With a reduced probability of 1.
Next, the MPC cluster 130 may optionally prevent micro-targeting by performing k-anonymization. Here, the aggregate _ id is a unit of a selection value on which k-anonymization is performed, and the aggregate _ id of the selection value x is grasped using a function aggregate _ id (x). The aggregate _ ID may be an activity ID of a particular number component mapped to one or more selection values. In some embodiments, the aggregate _ id and runit _ id are the same.
MPC1 is obtained by adding to secret sharesAsynchronously update the satisfy _ k _ opportunity value x per cached selection value of aggregate_id(x) To perform k-anonymization. For example, MPC1 maintains [ satisfy _ k _ opportunity asynchronously ] aggregate_id(x),1 ]And calculates [ is _ candidate [ ] x,1 ]＝[is_candidate x,1 ]x[satisfy_k_anonymity aggregate_id(x),1 ]。
Similarly, MPC2 calculates [ is _ candidate [ ] x,2 ]＝[is_candidate x,2 ]x[satisfy_k_anonymity aggregate_id(x),2 ]。
After steps 11 and 12, MPC1 and MPC2 have calculated [ is _ candidate, respectively x,1 ]And [ is _ candidate x,2 ]I.e. two secret shares of a secret message is _ secret x . Here, if the selection value x is qualified for the final selection process performed by the MPC cluster 130 before the winning selection value mapped to the numerical component is provided to the client device 110 for presentation and/or display, then the result is that is _ candidate x 1. If the selection value x is not eligible for the final selection process, then is _ candidate x ＝0。
The above description relates to multiplication between secret shares of secret integers whose values are 0 or 1 to compute a logical AND. The above description also refers to 1 subtracting the secret shares of secret integers whose values are 0 or 1 to calculate the logical NOT. In some embodiments, alternative solutions may be employed to evaluate logical expressions with secret shares. For example, to compute a logical AND of additive secret shares of a secret integer whose value is 0 or 1, the MPC cluster may compare the sum of these additive secret shares to the number of secret shares. In another example, to compute any logical expression having secret shares as inputs, an MPC cluster may employ a truth table approach, i.e., MPC1 may build a truth table containing one row for each possible combination of input secret shares held by MPC 2. MPC1 randomly selects a secret share for the result, denoted as result 1. For each row, MPC1 may combine its input secret shares with the speculative input secret shares held by MPC2 to reconstruct the inputs to the logical expression in the clear, and then evaluate the results of the logical expression. For each row, the MPC1 splits the result into two secret shares, one of which is [ result1] and the other is [ result2 ]. MPC1 then writes [ result2] to the row in the truth table. After MPC1 completes the construction of the truth table, MPC2 may initiate an inadvertent transfer extension (OTe) to grab the rows in the truth table that correspond to the input secret shares held by MPC 2. The grasping result is [ result2 ]. At the end of the above process, MPC1 and MPC2 hold [ result1] and [ result2], respectively, which are secret shares of the logical expression result. MPC1 does not know the value of [ result2], MPC2 does not know the value of [ result1 ]. In some embodiments, MPCs 1 and MPC2 may evaluate logical expressions by constructing garbled circuits to determine [ is _ candidatex,1] and [ is _ candidatex,2 ].
In step 13, the MPC cluster 130 performs a final selection process. Conceptually, the MPC cluster 130 computes a cumulative value for a given selection value of the digital components, the cumulative value representing the total number of candidate selection values from the top of the permutation to the given selection value. For example, the MPC cluster 130 calculates the accumulated value acc using the following equation x The accumulated value acc x Representing the total number of qualifying candidate selection values that are ranked before the selection value x in the final selection process.
acc x ＝∑is_candidate b
Where the variable b represents a candidate selection value b that is ranked ahead of the selection value x based on the selection value. In a practical embodiment, using secret shares, the MPC1 calculates [ acc x,1 ]MPC2 calculating [ acc x,2 ]。
First, the MPC cluster 130 ranks the selection values by ranking the selection values according to a metric such as the value of the selection value. For example, if the selection value x has a value of 12 units and the selection value y has a selection value of 14 units, the MPC cluster 130 may rank the selection value y higher than the selection value x. This process may be performed in the clear. Once the selection values have been ranked, the MPC cluster 130 completes the final selection process by selecting the winner. The MPC cluster can determine the variable is _ winner by selecting the value for each cache x To calculate the winning outcome of the final selection process.
is_winner x ＝is_candidate x ×(acc x ＝＝0)
Wherein the variable is _ winner if and only if x is the winner of the final selection process x 1. Otherwise, the variable is _ winner x 0. Of all the cached selection values and JIT selection values, there is at most one for each final selection process performed in response to a digital component request, for which is _ winner x 1, x.
The computing system MPC1 holds [ is _ winner [ ] x，1 ]. The computing system MPC2 holds [ is _ winner [ ] x，2 ]。[is_winner x，1 ]And [ is _ winner x，2 ]Each of which represents a variable is _ winner x Is given.
To create a response, MPC1 calculates:
where cached _ or _ JIT _ svx represents a cache selection value at MPC cluster 130 or a JIT selection value received by MPC cluster 130.
Similarly, MPC2 calculates:
since there is at most one is _ winner for it x A select value x with a non-zero value (i.e., a value of 1), so result is 0 (where no digital component is the winner and therefore will not be provided in response to a digital component request) or a select value x, which is one of the cached or JIT select values for which is _ winnerx is 1.
Next, MPC2 encrypts its secret share of result using the public key of application 112 according to: PubKeyEncrypt ([ result) 2 ]Application _ public _ key), where application _ public _ key is the public key of application 112, and [ result [ 2 ]Is a secret share of result held by MPC 2. The cryptographic function PubKeyEncrypt prevents MPC1 from accessing [ result [ 2 ]To prevent the MPC from being received from MPC2 once MPC1 is received for eventual transmission to MPC2Application 112 [ result 2 ]The MPC1 is able to reconstruct the result from the two secret shares.
In some embodiments, MPC2 signs its secret share of result according to the following equation: PubKeySign (PubKeyEncrypt ([ result) 2 ]Application _ public _ key), MPC2), where the function PubKeySign allows MPC2 to sign its secret share of result so that application 112 can verify [ result [ 2 ]Derived from MPC 2. Signing the results may prevent MPC1 from forging the results of MPC 2. In some embodiments, MPC2 signs its secret share of result according to the following equation: PubKeyEncrypt (PubKeySign ([ result 2))],MPC2),application_public_key)。
In step 14, one of the MPC computing systems returns a response to the digital component request received in step 1 to the client device 110. In this example, MPC1 returns a complete response to client device 110. Responses returned by MPC1 include: [ result 1 ]And PubKeySign (PubKeyEncrypt ([ result) 2 ],application_public_key),MPC2)。
In step 15, the client device 110 renders the digital components mapped to the selected values indicated by result. First, the client device 110 receives a response with two secret shares of the result originating from MPC1 and MPC2, respectively, which enables the application 112 to reconstruct the result in the clear and present the resulting digital components on the client device 110.
If MPC2 signed its secret share of result, application 112 verifies the digital signature of MPC 2. In addition, application 112 decrypts MPC2 with its own private key corresponding to MPC2 having encrypted [ result ] with it 2 ]To recover [ result ] in clear text 2 ]. Now, application 112 holds two secret shares of result in clear text, application 112 reads from [ result 1 ]And [ result 2 ]And reconstructing the result.
In step 16, the client device 110 returns an impression notification to the MPC cluster 130 that allows the MPC cluster 130 to update the data structures used to track the variables needed to enforce the selection rules, such as the pacing control rules and the k-anonymization rules. The impression notification may include variable values for updating counter variables maintained by the MPC cluster 130 for tracking k-anonymization and pacing control. These counter variables may be cached by the MPC cluster 130.
In step 17, the MPC cluster 130 updates its counter variable based on the impression notification. For example, MPCs 1 and MPC2 may update counters cached within MPC cluster 130 to track pacing control and k-anonymization. In some embodiments, to reduce the number of operations performed on MPC cluster 130 (e.g., Queries Per Second (QPS)), application 112 may keep impression notifications for a duration and send them asynchronously to MPC cluster 130. For example, the application 112 may piggyback the impression notification with future digital component requests by transmitting the impression notification to the MPC cluster 130 with the digital component request. By transmitting the impression notification along with the data that must be transmitted to the MPC cluster 130, the application 112 may reduce data traffic. In some embodiments, if the application 112 cannot find any mount opportunity at the end of the predetermined duration, the application may send an impression notification to the MPC cluster 130 in a dedicated message to prevent delays in updating the counters and any inaccuracies that may result from the delays in updating the counters. For example, the application 112 may transmit the impression notification to the MPC cluster 130 in a dedicated HTTP request.
In some embodiments, to prevent MPC cluster 130 from being a single point of failure of system 100, a trigger element embedded in the internet location where digital components are to be rendered and/or displayed may also resend a digital component request (e.g., an unconditional request) transmitted to application 112 directly to SSP170 in the event that application 112 fails to send a request to MPC cluster 130 if MPC cluster 130 is powered down. Such a backup mechanism does not add to the complexity of the trigger element embedded within the internet location where the digital component is to be rendered and/or displayed, as the trigger element typically creates an unconditional request. In addition, the backup mechanism does not add complexity to SSP 170. SSP170 will receive the same digital component request from MPC cluster 130 during normal operation or directly from a trigger element if MPC cluster 130 is powered down. Whether the trigger element receives a response from the MPC cluster 130 during normal operation or from the SSP170 during power down of the MPC cluster 130, the trigger element need only render the winning final result.
The system design allows for an improved user experience without significantly increasing the bandwidth and battery consumption of the mobile device. MPC cluster 130 prevents SSP170 and DSP 150 from seeing identification information of client device 110, such as the IP address of client device 110 associated with the digital component. Without additional cost in terms of computational resources, the system prevents SSPs and DSPs from passively collecting user data using the IP address of the client device 110 as a fingerprint signal. This can be a problem because many SSPs and DSPs passively listen to digital component requests without user permission to gather signals, and those servers can use this data to identify the user when a user identifier that can be used as a fingerprint signal (i.e., a deterministic signal that can uniquely identify the user) is missing from the digital component request. The system prevents such passive data collection based on information such as the IP address of the client device 110.
For servers that provide elements at internet locations, such servers may implement signal collection logic to prevent unwanted or malicious content distribution as scripts in the digital component, thereby improving the user experience. The collected signals may be transmitted back to the server in an impression notification.
In some embodiments, some entities may legitimately use a fingerprint signal, such as an IP address. For example, functions using geographic information are widely used to customize and deliver location-specific digital components to users to improve the relevance and utility of the information provided to the users. To implement a legal use case, the MPC cluster 130 may perform the function of sending location signals and/or identification information with appropriate granularity to the SSPs and DSPs, or forward appropriately truncated or edited information to the SSPs and DSPs. Alternatively, for each application and content publisher domain pair, the MPC cluster 130 may assign an alternate IP address from the same geographic region to support geo-location (geotargeting) functionality.
In addition, the MPC cluster 130 may also block illegal traffic, improve user experience, and reduce unnecessary traffic. For example, after identifying malicious or illegal traffic from a particular IP address or subnet, SSP170 may upload the IP address blocklist to MPC cluster 130, which MPC cluster 130 securely holds the information. The MPC cluster 130 may then filter out all numeric component requests from IP addresses on the blocklist.
Fig. 4 is a flow diagram illustrating an example process 400 for selecting a digital component for distribution to a client device. The operations of process 400 may be performed, for example, by computing system MPC1 or computing system MPC2 of MPC cluster 130. The operations of process 400 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 400. For simplicity, the process 400 is described as being performed by a computing system MPC1 of an MPC cluster 130.
The process 400 begins by a first server of a secure multi-party computing (MPC) system receiving a request for a digital component from an application on a user device (402). For example, a computing system MPC1 of MPC cluster 130 may receive a request for one or more digital components from a client device 110 for a particular digital component slot. The request may include information indicating characteristics of the digital component slot, the context of the slot (including the content in which the digital component slot is located), content distribution and/or selection rules specified by client device 110, and user-provided information, among other information.
The process 400 continues with parsing 404, by a first server of the secure MPC system, the request into two or more different sub-requests. For example, MPC1 may parse the request into three sub-requests. In some implementations, the different portions can be separated based on the destination and the type of information (i.e., sensitive information or non-sensitive information) on which the request is conditional. For example, the sub-requests may include secret shares for each of the computing systems MPC1 and MPC2 for digital ingredient requests based on sensitive information and digital ingredient requests based on non-sensitive information for SSP 170.
The process 400 continues with transmitting, by the first server of the secure MPC system, each of the two or more different portions of the request to a different server (406). For example, MPC1 may transmit separate sub-requests to SSP170, MPC1 (itself), and MPC 2.
In some implementations, the two or more different servers include a supply-side platform server that automates the process of distributing digital components and communicates with one or more content publishers. For example, MPC1 may transmit different sub-requests of the request to SSP170 and MPC 2. In some embodiments, MPC1 may transmit different sub-requests of the request to SSP170, and SSP170 may forward different portions of the sub-requests to DSP 150.
The process 400 continues with receiving, by a first server of the secure MPC system, a first set of candidate selection values from the individual servers in response to transmitting two or more different sub-requests for the request (408). For example, MPC1 may receive a secret share of a set of candidate selection values from MPC2 and a secret share of a set of candidate selection values from SSP 170.
In some implementations, this includes receiving at least two secret shares for each candidate selection value in the first set of candidate selection values from a separate server. For example, MPC1 may receive two secret shares of each candidate selection value from SSP170, wherein a first secret share is unencrypted, and wherein a second secret share is encrypted using a public key encryption algorithm and a public key of MPC 2.
The process 400 continues with the first server performing, in cooperation with a second server of the MPC system, a selection process to generate a selection result for the winning digital component, the selection process including merging, by the first server, the first set of candidate selection values and the set of cached selection values to create a final set of candidate selection values, ranking, by the first server, the final set of candidate selection values according to their values, and applying, by the first server, each rule of the set of two or more selection rules (410). For example, the computing system MPC1 of the MPC cluster 130 may cooperate with the MPC2 to perform the final selection process described with respect to fig. 2 and 3. MPC cluster 130 applies all selection rules to the cache selection values and the selection values received from SSP170 to determine a set of eligible selection values. The MPC cluster 130 then ranks the qualifying selection values and selects the winner of the selection process.
In some embodiments, performing the selection process includes merging, by the first server of the secure MPC system, the two or more set candidate selection values and the set of cache selection values to create a final set of candidate selection values, and ranking, by the first server of the secure MPC system, the final set of candidate selection values according to the values of the candidate selection values. In some embodiments, the merging and sorting may be performed by the first server as a single comparison-based sorting process. For example, MPC cluster 130 may perform a merge sort operation on the cache selection values and the selection values received from SSP 170.
In some embodiments, the set of selection rules includes at least a privacy preserving anonymization enforcement rule. In some embodiments, the set of selection rules includes budget rules or pacing rules. In some embodiments, the set of selection rules includes at least one rule specifying a function in which each user group identifier of a set of one or more user group identifiers is compared to user group identifiers mapped to candidate selection values. For example, the MPC cluster 130 may determine user group membership based on the candidate selection values and the qualification of each candidate selection value in the final set of candidate selection values indicated by the digital component request.
The process 400 continues with transmitting, by the first server of the secure MPC system in cooperation with the second server of the MPC system, a winning selection value to the user device (412). For example, the MPCs 1 of the MPC cluster 130 may provide a secret share of the winning selection value to the client device 110.
In some embodiments, transmitting the winning selection value from the final selection process includes receiving, by a first server of the secure MPC system, a first secret share of the selection result from a second server of the secure MPC system; and transmitting, by the first server of the secure MPC system to the client device, (i) the first secret share of the selection result and (ii) the second secret share of the selection result. For example, the MPCs 2 of the MPC cluster 130 transmit to the MPCs 1 of the MPC cluster 130 a secret share of the MPC2 indicating data mapped to the digital components of the winning selection value, and the MPC1 transmits to the client device 110 a secret share of the MPC1 itself indicating data mapped to the digital components of the winning selection value, along with the secret share from the MPC 2.
In some embodiments, the MPC2 encrypts the secret shares of the MPC2 that selects the result before sending the secret shares to the MPC 1. In this manner, MPC1 is unable to combine two secret shares to obtain a plaintext value for the selection result, which prevents MPC1 from identifying the winning selection value and its corresponding digital component, thereby protecting user privacy with respect to the digital components presented to the user. Each MPC2 may encrypt the share of that MPC2 of the selection result using the public key of the user device or application of the user device. The user device may then decrypt the selection result using its private key corresponding to the public key.
In some embodiments, the process 400 includes updating, by the first server of the secure MPC system, a data structure used to determine whether the digital component satisfies a privacy preserving anonymization enforcement rule that maintains a value of a privacy preserving characteristic corresponding to the winning selection value. For example, the MPC cluster 130 may update the counter variable satisfy _ k _ opportunity for each selection value x x . Variable satisfy _ k _ opportunity x Indicating whether the selection value x satisfies the k-anonymization rule.
In some embodiments, a notification is received by the first server of the secure MPC system along with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented on the client device. For example, the application 112 may provide impression notifications to the MPC cluster 130 asynchronously and with subsequent digital component requests to save required transmission and computing resources.
FIG. 5 is a block diagram of an example computer system 500 that may be used to perform the operations described above. The system 500 includes a processor 510, a memory 520, a storage device 530, and an input/output device 540. Each of the components 510, 520, 530, and 540 may be interconnected, for example, using a system bus 550. Processor 510 is capable of processing instructions for execution within system 500. In some implementations, the processor 510 is a single-threaded processor. In another implementation, the processor 510 is a multi-threaded processor. The processor 510 is capable of processing instructions stored in the memory 520 or the storage device 530.
The storage device 530 is capable of providing mass storage for the system 500. In some implementations, the storage device 530 is a computer-readable medium. In various different implementations, the storage device 530 may include, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
The input/output device 540 provides input/output operations for the system 500. In some implementations, the input/output device 540 may include one or more network interface devices, such as an ethernet card, a serial communication device, such as an RS-232 port, and/or a wireless interface device, such as an 802.11 card. In another embodiment, the input/output devices may include driver devices configured to receive input data and transmit output data to external devices 560 (e.g., keyboard, printer, and display devices). However, other implementations may also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system has been described in fig. 5, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or multiple media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage media may be or be embodied in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or data received from other sources.
The term "data processing apparatus" includes all types of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a Local Area Network (LAN) and a Wide Area Network (WAN), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order or sequence shown or that all illustrated operations be performed to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some implementations, multitasking and parallel processing may be advantageous.
The following is a non-exhaustive list of aspects of the disclosure:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from a separate server in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of winning digital components, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, the selection result of a winning digital component to the user device.
Aspect 1a. the method of aspect 1, wherein the different server is a second server of the MPC system.
Aspect 1b the method of aspect 1, wherein the different server is a provisioning side platform server.
Aspect 1c. the method of any of aspects 1-1 b, wherein the separate server is a provisioning side platform server.
Aspect 2. the method of any one of aspects 1 to 1c, further comprising:
receiving, by the first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was presented at the client device.
Aspect 3. the method of aspect 2, wherein the notification is received by the first server of the secure MPC system with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
Aspect 4 the method of any of aspects 1 to 3, wherein transmitting the selection result of the winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
Aspect 5 the method of any of aspects 1-4, wherein receiving the first set of candidate selection values comprises receiving at least two secret shares of each candidate selection value of the first set of candidate selection values from the separate server.
An aspect 8. a system, comprising:
one or more processors; and
one or more memory elements comprising instructions that, when executed, cause the one or more processors to perform operations comprising:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from a separate server in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of winning digital components, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, the selection result of a winning digital component to the user device.
Aspect 8a the system of aspect 8, wherein the different server is a second server of the MPC system.
Aspect 8b the system of aspect 8, wherein the different server is a provisioning side platform server.
The system of any of aspects 8-8 b, wherein the separate server is a provisioning side platform server.
Aspect 9. the system of any of aspects 8-8 c, the operations further comprising:
receiving, by a first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was rendered at the client device.
The system of aspect 11. the system of any of aspects 8-10, wherein transmitting the selection result of the winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
A non-transitory computer storage medium encoded with instructions that, when executed by a distributed computing system, cause the distributed computing system to perform operations comprising:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from a separate server in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of a winning digital component, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, the selection result of a winning digital component to the user device.
Aspect 15a the non-transitory computer storage medium of aspect 15, wherein the different server is a second server of the MPC system.
Aspect 15b the non-transitory computer storage medium of aspect 15, wherein the different server is a provisioning side platform server.
The non-transitory computer storage medium of any of aspects 15-15 b, wherein the separate server is a provisioning side platform server.
receiving, by a first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was rendered at the client device.
The non-transitory computer storage medium of aspect 16, wherein the notification is received by the first server of the secure MPC system with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
Aspect 18 the non-transitory computer storage medium of any of aspects 15-17, wherein transmitting the selection result of a winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
Aspect 19 the non-transitory computer storage medium of any of aspects 15-18, wherein receiving the first set of candidate selection values comprises receiving at least two secret shares of each candidate selection value of the first set of candidate selection values from the separate server.
Aspect 20 the non-transitory computer storage medium of any of aspects 15-19, wherein the merging and sorting are performed by the first server as a single comparison-based sorting process.
Aspect 21. a system, comprising: one or more processors; and
one or more memory elements comprising instructions that, when executed, cause the one or more processors to perform operations comprising a method according to any of aspects 1 to 7.
Aspect 22 a non-transitory computer storage medium encoded with instructions that, when executed by a distributed computing system, cause the distributed computing system to perform operations comprising a method according to any of aspects 1 to 7.
Claims (20)
1. A computer-implemented method, comprising:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from separate servers in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of winning digital components, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, a selection result of the winning digital component to the user device.
2. The method of claim 1, further comprising:
receiving, by the first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was presented at the client device.
3. The method of claim 2, wherein the notification is received by the first server of the secure MPC system with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
4. The method of claim 1, wherein transmitting the selection result of the winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a respective first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
5. The method of claim 1, wherein receiving the first set of candidate selection values comprises receiving at least two secret shares of each candidate selection value of the first set of candidate selection values from the separate server.
6. The method of claim 5, wherein the merging and the sorting are performable by the first server as a single comparison-based sorting process.
7. The method of claim 1, wherein the set of selection rules includes at least a privacy preserving anonymization enforcement rule.
8. A system, comprising:
one or more processors; and
one or more memory elements comprising instructions that, when executed, cause the one or more processors to perform operations comprising:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from a separate server in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of a winning digital component, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, a selection result of the winning digital component to the user device.
9. The system of claim 8, the operations further comprising:
receiving, by the first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was presented at the client device.
10. The system of claim 9, wherein the notification is received by the first server of the secure MPC system with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
11. The system of claim 8, wherein transmitting the selection result of the winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
12. The system of claim 8, wherein receiving the first set of candidate selection values comprises receiving at least two secret shares of each candidate selection value in the first set of candidate selection values from the separate server.
13. The system of claim 12, wherein the merging and the sorting are performable by the first server as a single comparison-based sorting process.
14. The system of claim 8, wherein the set of selection rules includes at least a privacy preserving anonymization enforcement rule.
15. A computer storage medium encoded with instructions that, when executed by a distributed computing system, cause the distributed computing system to perform operations comprising:
receiving, by a first server of a secure multi-party computing MPC system, a request for a digital component from an application on a user device;
parsing, by the first server, the request into two or more different sub-requests;
transmitting, by the first server of the secure MPC system, each of the two or more different sub-requests to a different server;
receiving, by the first server, a first set of candidate selection values from separate servers in response to transmitting the two or more different sub-requests;
performing, by the first server in cooperation with one or more second servers of the MPC system, a selection process to generate a selection of a winning digital component, comprising:
merging, by the first server, the first set of candidate selection values and a set of cache selection values to create a final set of candidate selection values;
ordering, by the first server, the final set of candidate selection values according to the values of the candidate selection values; and
applying, by the first server, each rule of a set of two or more selection rules; and
transmitting, by the first server in cooperation with the one or more second servers, a selection result of the winning digital component to the user device.
16. The computer storage medium of claim 15, the operations further comprising:
receiving, by the first server of the secure MPC system, a notification from the application on the user device, the notification including data indicating that the winning digital component was presented at the client device.
17. The computer storage medium of claim 16, wherein the notification is received by the first server of the secure MPC system with a second request for a second selection value, the notification including data indicating that the digital component corresponding to the winning selection value was presented at the client device.
18. The computer storage medium of claim 15, wherein transmitting the selection result of the winning digital component from the final selection process comprises:
receiving, by the first server of the secure MPC system, a first secret share of the selection result from each second server of the secure MPC system; and
transmitting, by the first server of the secure MPC system to the client device, (i) each first secret share of the selection result and (ii) a second secret share of the selection result.
19. The computer storage medium of claim 15, wherein receiving the first set of candidate selection values comprises receiving at least two secret shares of each candidate selection value of the first set of candidate selection values from the separate server.
20. The computer storage medium of claim 19, wherein the merging and the sorting are executable by the first server as a single comparison-based sorting process.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
IL279405 | 2020-12-13 | ||
IL279405A IL279405B2 (en) | 2020-12-13 | 2020-12-13 | Using secure multi-party computation to improve content selection process integrity |
PCT/US2021/054340 WO2022125182A1 (en) | 2020-12-13 | 2021-10-11 | Using secure multi-party computation to improve content selection process integrity |
Publications (1)
Publication Number | Publication Date |
---|---|
CN114945920A true CN114945920A (en) | 2022-08-26 |
Family
ID=80628472
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180008133.1A Pending CN114945920A (en) | 2020-12-13 | 2021-10-11 | Using secure multi-party computing to improve content selection process integrity |
Country Status (7)
Country | Link |
---|---|
US (1) | US20230143933A1 (en) |
EP (2) | EP4283919A3 (en) |
JP (2) | JP7238213B2 (en) |
KR (1) | KR20220110280A (en) |
CN (1) | CN114945920A (en) |
IL (1) | IL279405B2 (en) |
WO (1) | WO2022125182A1 (en) |
Cited By (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116361838A (en) * | 2023-05-23 | 2023-06-30 | 华控清交信息科技(北京)有限公司 | Data processing method, device and system and readable storage medium |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
IL295204A (en) * | 2022-07-31 | 2024-02-01 | Google Llc | Single request architecture for increasing efficiency of secure multi-party computations |
Family Cites Families (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN100373377C (en) * | 2000-04-27 | 2008-03-05 | 网上技术公司 | Method and system for retrieving search results from multiple disparate databases |
US10360392B2 (en) * | 2014-08-01 | 2019-07-23 | National Ict Australia Limited | Generating shares of secret data |
JP6887429B2 (en) * | 2015-10-23 | 2021-06-16 | オラクル・インターナショナル・コーポレイション | Automatic behavior detection on protected fields with support for integrated search |
EP4220464A1 (en) * | 2017-03-22 | 2023-08-02 | Visa International Service Association | Privacy-preserving machine learning |
US11050725B2 (en) * | 2018-07-16 | 2021-06-29 | Sap Se | Private benchmarking cloud service with enhanced statistics |
JP2022546470A (en) * | 2019-08-30 | 2022-11-04 | コーネル ユニヴァーシティ | Decentralized techniques for validation of data in transport layer security and other contexts |
US10924460B2 (en) * | 2019-12-13 | 2021-02-16 | TripleBlind, Inc. | Systems and methods for dividing filters in neural networks for private data computations |
-
2020
- 2020-12-13 IL IL279405A patent/IL279405B2/en unknown
-
2021
- 2021-10-11 WO PCT/US2021/054340 patent/WO2022125182A1/en unknown
- 2021-10-11 KR KR1020227023090A patent/KR20220110280A/en unknown
- 2021-10-11 US US17/795,024 patent/US20230143933A1/en active Pending
- 2021-10-11 EP EP23202856.3A patent/EP4283919A3/en active Pending
- 2021-10-11 JP JP2022541856A patent/JP7238213B2/en active Active
- 2021-10-11 CN CN202180008133.1A patent/CN114945920A/en active Pending
- 2021-10-11 EP EP21865330.1A patent/EP4070223B1/en active Active
-
2023
- 2023-03-01 JP JP2023030973A patent/JP2023067928A/en active Pending
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN116361838A (en) * | 2023-05-23 | 2023-06-30 | 华控清交信息科技(北京)有限公司 | Data processing method, device and system and readable storage medium |
CN116361838B (en) * | 2023-05-23 | 2023-08-11 | 华控清交信息科技(北京)有限公司 | Data processing method, device and system and readable storage medium |
Also Published As
Publication number | Publication date |
---|---|
IL279405B1 (en) | 2023-09-01 |
EP4283919A2 (en) | 2023-11-29 |
JP2023067928A (en) | 2023-05-16 |
US20230143933A1 (en) | 2023-05-11 |
EP4070223A1 (en) | 2022-10-12 |
IL279405B2 (en) | 2024-01-01 |
EP4070223B1 (en) | 2024-01-10 |
JP7238213B2 (en) | 2023-03-13 |
KR20220110280A (en) | 2022-08-05 |
EP4283919A3 (en) | 2024-02-28 |
JP2023506088A (en) | 2023-02-14 |
IL279405A (en) | 2022-07-01 |
WO2022125182A1 (en) | 2022-06-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP2023067928A (en) | Using secure multi-party computation to improve content selection process integrity | |
US20230188329A1 (en) | Using secure multi-party computation and probabilistic data structures to protect access to information | |
WO2022132618A1 (en) | Feedback controller using secret sharing | |
EP4081971B1 (en) | Using secure mpc and vector computations to protect access to information in content distribution | |
WO2023027982A1 (en) | Cryptographically secure control using secure multi-party computation | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
JP7440667B2 (en) | Flexible content selection process using secure multiparty calculations | |
US20240022392A1 (en) | Privacy preserving measurements using secure multi-party computation | |
CN114450919A (en) | Online privacy protection techniques | |
CN115943375A (en) | Privacy preserving cross-domain experimental group partitioning and monitoring |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |