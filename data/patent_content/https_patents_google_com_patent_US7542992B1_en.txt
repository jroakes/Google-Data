US7542992B1 - Assimilator using image check data - Google Patents
Assimilator using image check data Download PDFInfo
- Publication number
- US7542992B1 US7542992B1 US11/194,230 US19423005A US7542992B1 US 7542992 B1 US7542992 B1 US 7542992B1 US 19423005 A US19423005 A US 19423005A US 7542992 B1 US7542992 B1 US 7542992B1
- Authority
- US
- United States
- Prior art keywords
- image
- client
- check data
- cumulative
- effective
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/10—File systems; File servers
- G06F16/17—Details of further file system functions
- G06F16/178—Techniques for file synchronisation in file systems
- G06F16/1787—Details of non-transparently synchronising file systems
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99948—Application of database or data structure, e.g. distributed, multimedia, or image
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99951—File or database maintenance
- Y10S707/99952—Coherency, e.g. same view to multiple users
- Y10S707/99953—Recoverability
Definitions
- Embodiments relate to the fields of computer administration, computer networks, and computer clusters. Embodiments also relate to distributing, monitoring, and repairing the file system images of a network of client computers.
- a computer is a machine that has a processor, memory, and other parts.
- Computer memories contain data. Some of the data are computer programs and other data are information that can be operated on or accessed by a computer program. Most computers contain two types of memory: volatile, which forgets data when not energized, and non-volatile, which does not forget data when not energized.
- the processor executes a series of computer programs stored in non-volatile memory.
- the processor loads a program before executing it.
- Loading means copying all or part of the computer program from non-volatile memory into volatile memory.
- a computer connected to a computer network can also load a computer program from another computer on the network into its own volatile memory.
- the program or set of programs the computer loads first is usually the operating system.
- the operating system supplies resources to and coordinates resource sharing among all the programs that the computer is running.
- Some programs are designed to run continuously and perform a task without most users being aware that the program is running.
- the service is not beneficial to the user, it is often called a virus.
- it is beneficial such as a virus scanner, it can be called a daemon.
- a non-volatile memory contains data.
- the data is meaningless without a computer program to interpret it.
- Most computers have an operating system that interprets some, or all, of the non-volatile memory contents as a file system.
- a file system is often thought-of as a hierarchical arrangement of directories and files. In reality, most file systems have at least three kinds of files and some extra information for keeping track of things. The three kinds of files are regular files, directory files, and special files.
- Regular files contain data and are neither special files nor directories.
- Directory files also called “directories”, contain directory data. Directory data includes information about descendant files.
- Special files come in many varieties with many uses. For example, some special files can be used for accessing devices, such as hard drives, keyboards, and graphics chips. Other special files can be used for accessing services offered by the operating system, such as pipes. Special files also provide for capabilities like soft linking (also known as symbolic linking).
- Every file in a file system usually has other information associated with it. For clarity, this other information will be called “I-nodes” (short for information node) because that is what it is called in the UNIX operating system and its progeny. Other operating systems give it other names. Every file has at least one I-node. An I-node is associated with only one file. I-nodes are not part of the file data. I-nodes can include data informing the computer where the file data are located. I-nodes can include other data such as regarding file permissions, ownership, creation time, and last modification time.
- Directory files contain information about descendent files. Oftentimes, a directory's information about a file is a directory entry that pairs a filename with an I-node reference. A user sees the filename and can choose to open the file. When the file is opened, the operating system uses the I-node reference to find the file's first I-node. Then it examines the I-node to determine the file type, permissions, and other information. When more than one directory entry, even entries in different directories, contains the same I-node reference, the file data is “hard linked”. A hard link is different from a soft link because soft links typically are implemented using special files while hard links use directory entries.
- computer memory including non-volatile memory contains data.
- files can have file data.
- the difference between a file and a memory is that a memory is a physical device giving little if any structure to the data.
- the memory can contain files, directories, portions of files, portions of directories, or nothing without understanding those contents.
- a file is structured data held in the computer memory where the structure is defined by people and implemented by a computer program.
- a brand new computer hard drive is a non-volatile computer memory containing nothing.
- a computer can use the hard drive to hold files and directories. The files and directories are structured data held on the hard drive and the structure is implemented by the computer operating system.
- a computer can also treat the hard drive itself as a single file called a device file or a raw device file.
- Metadata is generally defined as data about data; hence file metadata is information about a file.
- a file system can contain regular files, directory files, and special files. Each file has at least one I-node and can contain file data.
- An I-node can contain data about the file such as file creation date, last modification date, who created it, who can access it, and what kind of file it is.
- This data can be file metadata.
- a file system consists of file data and file metadata.
- a collection of file data and file metadata is called an image. The image of a file system can be used to create a duplicate file system or to recover a file system that is lost or destroyed.
- the metadata can also contain data that is not normally contained in an I-node, such as a checksum or a digital signature.
- One of the problems often encountered in computer administration is ensuring that a computer memory contains the correct data.
- the files and other objects in memory, such as those held on a hard drive, can become corrupted.
- Sources of corruption include: computer viruses; malicious, inattentive, or untrained users; hardware failure or degradation over time; and upgrades to the set of correct files.
- One way to detect a corrupt file is to compare it to a known good copy. A byte by byte or word by word comparison can detect corruption as well as where in the file the corruption lies.
- a file checksum is a number that is calculated based on the data held in the file. Two files with the same contents will have the same checksum. When two files that are different can have the same checksum, it is called a collision. Some people are motivated to intentionally create collisions. Historically, many checksum algorithms have been developed to avoid both intentional and unintentional collisions. Unintentional collisions are exceedingly rare. The various checksum algorithms are widely known and available.
- checksum over a byte by byte comparison is that a checksum is a relatively small datum.
- one of the popular current checksum algorithms gives a number that is 256 bits long.
- Checksums are small enough to be treated as file metadata, although current operating systems rarely use them.
- Byte by byte comparison requires a complete copy of the file under scrutiny, which can be many gigabytes long.
- a cryptographically secure and signed checksum can be distributed with a file so that anyone can verify that the file is not corrupted.
- a complete copy of the file even if received from a trusted source, is not cryptographically secure.
- a trusted source is a computer or other data source that is known to provide the correct data and to never supply a corrupted copy.
- Trusted servers, digital signatures, secure checksums, key exchanges, and other fundamentals of secure or trusted data storage and data exchange are well known to those practiced in the arts of secure computing, encryption, and cryptography.
- Checksums are also commonly used to verify data integrity in other protocols, such as rsync.
- Data such as files and images
- PTP peer-to-peer networks
- TORRENT files currents
- a client requests data from the PTP network.
- a centralized PTP network such as the original NAPSTER network
- the client sends the request to a central index server.
- the central index server responds by telling the client where to go to get the data.
- the client asks another computer on the network for the data. If that computer does not have or know where to get the data, it then it forwards the request to other computers on the network. The request can be repeatedly forwarded until the data is found or the search is given up. If the data is found, then the client is told where to go to get the data.
- the client In both centralized PTP and decentralized PTP networks, the client often receives many different places to get the data from and chooses one of them.
- TORRENT files are special implementations of PTP.
- a torrent client receives many places from which to retrieve all or part of the data. The client can then retrieve different parts of the data from different computers and can do it simultaneously.
- the central index server mediates the exchange of data between the client and the other computers on the network. In a decentralized architecture, the central index server is replaced by a decentralized database that carries information for mediating the data exchange.
- One aspect of the embodiments to overcome the shortcomings of current technology is by storing multiple images on multiple image servers.
- Different images have different image identifiers because they include different files and different image metadata.
- Different images can be stored on and served from different image servers.
- copies of the different images can be stored on different image servers so that there are multiple servers from which an image can be obtained.
- a client image specification is associated with every client.
- the client image specification contains information specifying how to combine the images into a cumulative image.
- the cumulative image can be loaded onto a client at which time the client's effective image is an exact duplicate of the cumulative image.
- Each client has a single effective image in its memory. As the client runs, its effective image can change such that the client's effective image is no longer a duplicate of the cumulative image that was originally loaded.
- the client image specification can be used, along with the images, to create cumulative image check data.
- the cumulative image check data can include a checksum for some of the files, or even every file, in the cumulative image.
- a yet further aspect of the embodiments is to generate effective image check data based on the files that the client actually has stored in memory.
- a client can generate effective image check data based on the effective image in its own memory.
- An additional aspect of the embodiments is comparing the effective image check data to the cumulative image check data.
- a client side comparison occurs when the cumulative image check data is sent to a client and the client compares it to the effective image check data.
- a server side comparison occurs when the comparison is made on a computer other than the client. The comparison finds differences between the effective image check data and the cumulative image check data and those differences are recorded.
- FIG. 1 illustrates clients, masters, and image servers interconnected by a communications network in accordance with an aspect of the embodiments
- FIG. 2 illustrates an image server storing images in accordance with an aspect of the embodiments
- FIG. 3 illustrates a master with a machine mapper in accordance with an aspect of the embodiments
- FIG. 4 illustrates a client in accordance with an aspect of the embodiments
- FIG. 5 illustrates a machine mapper in accordance with an aspect of the embodiments
- FIG. 6 illustrates file metadata in accordance with an aspect of the embodiments
- FIG. 7 illustrates image metadata in accordance with an aspect of the embodiments
- FIG. 8 illustrates image check data in accordance with an aspect of the embodiments
- FIG. 9 illustrates a high level flow diagram of the assembly of a cumulative image in accordance with an aspect of the embodiments.
- FIG. 10 illustrates a high level flow diagram of incorporating an extended image into a cumulative image in accordance with an aspect of the embodiments
- FIG. 11 illustrates a high level flow diagram of filtering an image 905 in accordance with an aspect of the embodiments
- FIG. 12 illustrates a high level flow diagram of accumulating effective image check data in accordance with an aspect of the embodiments
- FIG. 13 illustrates a high level flow diagram of creating an image report in accordance with an aspect of the embodiments.
- FIG. 14 illustrates creating a correction list from an image report in accordance with an aspect of the embodiments.
- An assimilator ensures that a multitude of client computers have the correct data stored in their memory.
- a daemon process continuously produces effective image check data.
- a master assembles cumulative image check data. Comparing the effective image check data to the cumulative image check data reveals corrupt files, files that should exist but do not, and files that do exist but should not.
- the client can download correct files from image servers that store images of partial and complete file systems. The client can also download correct files from peers.
- FIG. 1 illustrates clients 103 , masters 102 , and image servers 101 interconnected by a communications network 104 in accordance with an aspect of the embodiments.
- the communications network 104 is used by computers to communicate with one another. Examples of communications networks are the Internet and the local computer networks in compute clusters.
- the clients 103 , masters 102 , or image servers 101 are computers that can use the communications network 104 to communicate with one another as well as any other computers that are also connected to the communications network.
- FIG. 2 illustrates an image server 101 storing images in accordance with an aspect of the embodiments.
- the first image 202 is shown as including the first image identifier 203 , the first image metadata 204 and the first image files 205 .
- An image can contain other data as well.
- the first image identifier 203 is a name or label, such as “Bob's_old_filesystem” or “image7 of 9_version19411207”. The important criterion for such an identifier is that it refers to only one image, although one image can have multiple identifiers.
- the image metadata will be discussed below.
- the first image 202 also includes a set of files called the first image files 205 .
- the image server 101 is shown containing more than one image.
- N is a nonnegative number.
- the images are also shown stored separately, which is not necessarily the case. The images can also be stored and accessed via a revision control system.
- FIG. 3 illustrates a master 102 with a machine mapper 302 in accordance with an aspect of the embodiments.
- the machine mapper 302 is used to specify each cumulative image, the cumulative image associated with each client, and the filter to apply to the cumulative image and to the client's effective image.
- FIG. 4 illustrates a client 103 in accordance with an aspect of the embodiments.
- Every client 103 has an effective image 401 stored in memory.
- a cumulative image can be assembled using a client image specification and images. The cumulative image can then be loaded into a client's memory at which time it becomes the client's 103 effective image 401 .
- the client 103 can also contain an image daemon 402 and effective image check data 403 .
- the image daemon 402 continuously scans the files in the effective image 401 to produce checksums that are recorded in the effective image check data 403 .
- the image daemon 402 must access the effective image 401 in the client memory by way of the communications network 104 .
- FIG. 5 illustrates a machine mapper 302 in accordance with an aspect of the embodiments.
- the machine mapper 302 contains client image specifications to track or determine exactly which files should be present on a client 103 .
- the first client image specification 501 can include the first client identifier 502 , first client base image identifier 503 , first client extended image list 504 , first client filter 505 , and possibly other data.
- the first client identifier 502 is associated with a specific client computer.
- the machine mapper 302 is shown containing a second client image specification 506 , third client image specification 507 , and so on through the Pth client image specification 508 .
- the machine mapper contains client image specifications for P different client computers.
- P is a number greater than 0.
- An image identifier can be used to obtain the image itself from an image server.
- the client image specification contains one image identifier to identify the base image, and a list of zero or more image identifiers to identify the extended images.
- FIG. 6 illustrates file metadata 601 in accordance with an aspect of the embodiments.
- Files contain data.
- File metadata 601 is information about a file such as ownership 602 , permissions 603 , and a checksum 604 .
- the checksum 604 can be intended as a secure checksum, such as producing using MD-5, SHA-1, SHA-224, or one of the other cryptographic hash functions.
- a non-cryptographically-secure hash function can be used instead.
- FIG. 7 illustrates image metadata 701 in accordance with an aspect of the embodiments. Every file in an image needs a file name or some other kind of label or identifier because otherwise there is no way to refer to it.
- the first file shown in the image metadata 701 has the file identifier 702 .
- An example of a file identifier is “AssimilatorPatentApplication”.
- Each file also has file metadata 601 as discussed above.
- the first file has first file metadata 703 .
- the first image 202 has first image metadata 204 . Notice that the image metadata 701 does not include the files themselves.
- the files are contained elsewhere in the image, as seen by the first image files 205 contained in the first image 202 .
- Image metadata 701 can also contain a digital signature 704 .
- Digital signatures are essentially stamps of authenticity that can be attached to data such as images and files. For example, an administrator on deciding that an image is correct and ready for distribution can digitally sign it. The digital signature is then used by others to affirm that the administrator approved and the data in the image has not changed.
- FIG. 8 illustrates image check data 801 in accordance with an aspect of the embodiments.
- Image check data 801 is similar in form to image metadata 701 .
- Image check data associates a checksum with every file. For the first file, a first file identifier 702 is associated with the first file checksum 802 . Checksums have already been discussed.
- FIG. 9 illustrates a high level flow diagram of the assembly of a cumulative image in accordance with an aspect of the embodiments.
- the client image specification is obtained 902 .
- a client image specification has a base image identifier, an extended image list, and a client filter.
- the base image is obtained.
- the base image can be obtained from an image server 903 or the master's own memory.
- the master however, often stores image identifiers and image metadata, but not image files.
- the base image is copied to the cumulative image 904 .
- the cumulative image is filtered 905 as discussed in detail later.
- the extended image list is now examined to see if any image identifiers are on the list 906 .
- FIG. 10 illustrates a high level flow diagram of incorporating an extended image into a cumulative image in accordance with an aspect of the embodiments.
- the first file which is the next file the first time through, is obtained from the extended image 1002 .
- a client filter can be obtained as part of the client image specification.
- the file identifier is submitted to the client filter 1003 and the client filter indicates if the file should be included 1004 . If the client filter does not indicate that the file should be included, then the process loops back to getting the next file 1002 . If the file should be included, then the cumulative image is checked to see if it already contains the file 1005 . If the cumulative image does not already include the file, then the file is inserted into it 1006 .
- the version of the file already included in the cumulative image is replaced by the version obtained from the extended image 1007 . If there are more files to process 1008 , the process loops back to getting the next file 1002 . Otherwise, the process is done 1009 .
- image filtering can occur on any computer that has access to the client filter and to the image. For example, another way of doing this is to not filter files on the master at all, but to send the entire image to every client, and have the client filter the files.
- FIG. 11 illustrates a high level flow diagram of filtering an image 905 in accordance with an aspect of the embodiments.
- the next file or the first file on the first time through the loop, is obtained from the image 1102 .
- the file identifier is submitted to the client filter 1103 and if the client filter indicates that the file should not be included 1104 , the file is deleted from the image 1105 .
- the image is checked for more files 1106 . If there are none, the process is done 1107 . Otherwise the process loops back to obtaining the next file from the image 1102 .
- the client filter checks in the high level flow diagrams that are not performed and the default action is to include every file. Furthermore, notice that the files in the extended images overwrite files in the cumulative image if both files have the same file identifier.
- the overwriting property has a side effect that the order in which extended images are incorporated into the cumulative image is important, as described above. The order of files in the extended image list must be preserved and respected.
- FIG. 12 illustrates a high level flow diagram of accumulating image check data in accordance with an aspect of the embodiments.
- Image check data 801 contains file identifiers and file checksums. After the start 1201 the first file, or next file after the first time through the loop, is obtained from the image 1202 . Recall that a file can be a regular file, directory file, special file, or other type of file. Next the file checksum is obtained 1203 . If the image is an effective image then the checksum should be calculated. If the image is a cumulative image then, although it can be calculated, the checksum is usually read from the image metadata because masters rarely contain the image files from which a checksum can be calculated.
- the file checksum and file identifier are incorporated into the image check data 1204 and then the process checks to see if there are more files in the image 1205 . If there are not, the process is done 1206 . Otherwise the process loops back and gets the next file 1202 .
- the daemon process 402 mentioned earlier can follow a process flow similar to this one to continually produce and update effective image check data. However, the daemon's work is never done. There is always another file for the daemon to process. The daemon can choose files to process by walking the directory tree, repeatedly running through a list, choosing files randomly, choosing them by some other metric such as how likely the file is to have been changed, or some other method, as long as new files are discovered, and old files that have been deleted are noticed as well.
- cumulative image check data is accumulated using the possibly corrupt effective image located in client memory while cumulative image check data is accumulated from uncorrupted images stored on image servers or uncorrupted data stored on masters. Another difference is that cumulative image check data can cover a subset of the files in the cumulative image.
- a master 102 can assemble a cumulative image from a client image specification based on the images on an image server.
- the master can use a process such as that shown in FIG. 12 to accumulate cumulative image check data.
- the file identifier and file checksum are incorporated into cumulative image check data instead of effective image check data.
- the image metadata 204 can include a checksum for every file in the image. In this case, the master does not need to assemble a cumulative image but can accumulate cumulative image check data directly from the image metadata.
- one practiced in the art of computer programming can implement image check data accumulation via numerous other adaptations of the high level flows.
- Cumulative image check data and effective image check data can be filtered by a process similar to that illustrated in FIG. 11 .
- the only difference is that instead of deleting the file from the image 1105 , the checksum and file identifier are deleted from the check data. Filtering the cumulative image check data results in filtered cumulative check data.
- Filtering effective image check data results in filtered effective image check data. Every file identifier and associated checksum in the filtered cumulative image check data should have a corresponding entry in the filtered effective image check data. Similarly, every file identifier and associated checksum in the filtered effective image check data should have a corresponding entry in the filtered cumulative image check data.
- FIG. 13 illustrates a high level flow diagram of creating an image report in accordance with an aspect of the embodiments.
- the filtered effective image check data and the filtered cumulative image check data are obtained 1302 .
- file identifiers that are present in the filtered effective check data but not in the filtered cumulative check data are added to the image report as “unwanted” 1303 .
- a file that should not be present exists in a client's effective image.
- File identifiers that are present in the filtered cumulative check data but not in the filtered effective check data are added to the image report as “absent” 1304 .
- File identifiers that are present in the filtered effective check data and in the filtered cumulative check data but with different checksums are added to the image report as “corrupted” 1305 .
- the process is done 1306 .
- FIG. 14 illustrates creating a correction list from an image report in accordance with an aspect of the embodiments.
- the image report 1401 contains a first file identifier 1402 and the first file error 1403 .
- the file error can be “corrupted”, “absent”, “unwanted” or some other meaningful information. If there are R errors, where R is a positive number, then the image report contains R entries.
- Each file identifier included in the image report 1401 can result in a corrective action in the correction list 1404 .
- File identifier 1 1402 results in corrective action 1 1405 .
- Corrective action 1 1405 is associated with trigger 1 1406 .
- the trigger is a series of instructions, such as a computer program, that can be executed after the corrective action is completed.
- Another action that can be taken after correcting a file that was absent or corrupted is to immediately validate that the file is now correct. As discussed above, validation can be performed by calculating the file's checksum and comparing the calculated checksum to a correct checksum. If the checksums match then the file has been properly corrected. If they do not match, then the file has not been properly corrected. If a file is not properly corrected, then another attempt can be immediately made to correct it or the error can be added to a correction list for later correction.
- a client 103 containing cumulative image check data 403 can receive image check data 801 from a master 102 and use it to create an image report 1401 .
- the client 103 can send the image report 1401 back to the master 102 where it is used to create a correction list 1404 .
- the correction list 1404 can be sent back to the client 103 where each corrective action is taken and triggers are executed as required.
- a corrective action can include instructions for the client 103 to obtain a new copy of the corrupted file from a source.
- the source can be another client 103 , an image server 101 , or any other source thought to have a good copy.
- the master server can request that the client fix a subset of the errors that it reports.
- a secure method is for the corrective action to include a digitally signed datum, known as a ticket, that sources can require from the client 103 . In this manner, only clients 103 with permission can download data. Tickets can be generated that are valid for a limited time, such as an hour.
- Embodiments can be implemented in the context of modules.
- a module e.g., a software module
- a software module can be implemented as a collection of routines and data structures that perform particular tasks or implement a particular abstract data type. Modules generally can be composed of two parts. First, a software module may list the constants, data types, variables, routines and the like that can be accessed by other modules or routines. Second, a software module can be configured as an implementation, which can be private (i.e., accessible perhaps only to the module), and that contains the source code that actually implements the routines or subroutines upon which the module is based.
- the term “module”, as utilized herein generally refers to software modules or implementations thereof. Such modules can be utilized separately or together to form a program product that can be implemented through signal-bearing media, including transmission media and recordable media.
Abstract
Description
Claims (16)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/194,230 US7542992B1 (en) | 2005-08-01 | 2005-08-01 | Assimilator using image check data |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/194,230 US7542992B1 (en) | 2005-08-01 | 2005-08-01 | Assimilator using image check data |
Publications (1)
Publication Number | Publication Date |
---|---|
US7542992B1 true US7542992B1 (en) | 2009-06-02 |
Family
ID=40672507
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/194,230 Active 2026-03-10 US7542992B1 (en) | 2005-08-01 | 2005-08-01 | Assimilator using image check data |
Country Status (1)
Country | Link |
---|---|
US (1) | US7542992B1 (en) |
Cited By (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070156778A1 (en) * | 2006-01-04 | 2007-07-05 | Microsoft Corporation | File indexer |
US20090276632A1 (en) * | 2008-04-30 | 2009-11-05 | Singer Howard M | Systems, Methods, and Media for Providing Secure Content Information |
US20100287104A1 (en) * | 2009-05-06 | 2010-11-11 | Luc Leroy | Systems and Methods for Collaborative Innovation Management |
US8060477B1 (en) * | 2006-03-29 | 2011-11-15 | Abo Enterprises, Llc | System and method for archiving a media collection |
US8307092B2 (en) | 2007-02-21 | 2012-11-06 | Napo Enterprises, Llc | Method and system for collecting information about a user's media collections from multiple login points |
US8620699B2 (en) | 2006-08-08 | 2013-12-31 | Napo Enterprises, Llc | Heavy influencer media recommendations |
US20140259167A1 (en) * | 2013-03-11 | 2014-09-11 | Samsung Electronics Co. Ltd. | Behavior based application blacklisting |
US20150074415A1 (en) * | 2013-09-06 | 2015-03-12 | Mastercard International Incorporated | Image Verification By An Electronic Device |
US9037639B2 (en) | 2006-04-13 | 2015-05-19 | Eloy Technology, Llc | System and method for obtaining media content for a portable media player |
Citations (26)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5608865A (en) * | 1995-03-14 | 1997-03-04 | Network Integrity, Inc. | Stand-in Computer file server providing fast recovery from computer file server failures |
US5745669A (en) * | 1993-10-21 | 1998-04-28 | Ast Research, Inc. | System and method for recovering PC configurations |
US6202070B1 (en) * | 1997-12-31 | 2001-03-13 | Compaq Computer Corporation | Computer manufacturing system architecture with enhanced software distribution functions |
US20020038296A1 (en) * | 2000-02-18 | 2002-03-28 | Margolus Norman H. | Data repository and method for promoting network storage of data |
US20030204529A1 (en) * | 2002-04-24 | 2003-10-30 | Hertling William Edward | File caching method and apparatus |
US6647400B1 (en) * | 1999-08-30 | 2003-11-11 | Symantec Corporation | System and method for analyzing filesystems to detect intrusions |
US20040003266A1 (en) * | 2000-09-22 | 2004-01-01 | Patchlink Corporation | Non-invasive automatic offsite patch fingerprinting and updating system and method |
US20040034663A1 (en) * | 2000-10-24 | 2004-02-19 | Takashi Noguchi | Information providing/requesting database building method and information searching method |
US6704755B2 (en) * | 1999-12-16 | 2004-03-09 | Livevault Corporation | Systems and methods for backing up data files |
US20040167938A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US6785786B1 (en) * | 1997-08-29 | 2004-08-31 | Hewlett Packard Development Company, L.P. | Data backup and recovery systems |
US20040267696A1 (en) * | 2003-05-23 | 2004-12-30 | Hewlett-Packard Development Company, L.P. | Data management method, and data processing unit |
US20050071390A1 (en) * | 2003-09-30 | 2005-03-31 | Livevault Corporation | Systems and methods for backing up data files |
KR20050074816A (en) * | 2004-01-14 | 2005-07-19 | (주)센다컴 | The method of operation real time automatic recovery system |
US20050203851A1 (en) * | 2003-10-25 | 2005-09-15 | Macrovision Corporation | Corruption and its deterrence in swarm downloads of protected files in a file sharing network |
US20050273858A1 (en) * | 2004-06-07 | 2005-12-08 | Erez Zadok | Stackable file systems and methods thereof |
US20050281469A1 (en) * | 2004-06-17 | 2005-12-22 | Anderson Alison H | Efficient method and system for reducing update requirements for a compressed binary image |
US20050289181A1 (en) * | 2004-06-23 | 2005-12-29 | William Deninger | Object classification in a capture system |
US20060020662A1 (en) * | 2004-01-27 | 2006-01-26 | Emergent Music Llc | Enabling recommendations and community by massively-distributed nearest-neighbor searching |
US7024581B1 (en) * | 2002-10-09 | 2006-04-04 | Xpoint Technologies, Inc. | Data processing recovery system and method spanning multiple operating system |
US20060123010A1 (en) * | 2004-09-15 | 2006-06-08 | John Landry | System and method for managing data in a distributed computer system |
US7100072B2 (en) * | 1995-06-09 | 2006-08-29 | Emc Corporation | Backing up selected files of a computer system |
US20070022264A1 (en) * | 2005-07-14 | 2007-01-25 | Yottayotta, Inc. | Maintaining write order fidelity on a multi-writer system |
US20070027936A1 (en) * | 2005-07-28 | 2007-02-01 | Stakutis Christopher J | Determining changes made to a source file to transmit to a target location providing a mirror copy of the source file |
US7376945B1 (en) * | 2003-12-02 | 2008-05-20 | Cisco Technology, Inc. | Software change modeling for network devices |
US7379967B2 (en) * | 2005-01-28 | 2008-05-27 | Grid Solutions, Inc. | Download method for file by bit torrent protocol |
-
2005
- 2005-08-01 US US11/194,230 patent/US7542992B1/en active Active
Patent Citations (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5745669A (en) * | 1993-10-21 | 1998-04-28 | Ast Research, Inc. | System and method for recovering PC configurations |
US5608865A (en) * | 1995-03-14 | 1997-03-04 | Network Integrity, Inc. | Stand-in Computer file server providing fast recovery from computer file server failures |
US7100072B2 (en) * | 1995-06-09 | 2006-08-29 | Emc Corporation | Backing up selected files of a computer system |
US6785786B1 (en) * | 1997-08-29 | 2004-08-31 | Hewlett Packard Development Company, L.P. | Data backup and recovery systems |
US6202070B1 (en) * | 1997-12-31 | 2001-03-13 | Compaq Computer Corporation | Computer manufacturing system architecture with enhanced software distribution functions |
US6647400B1 (en) * | 1999-08-30 | 2003-11-11 | Symantec Corporation | System and method for analyzing filesystems to detect intrusions |
US6704755B2 (en) * | 1999-12-16 | 2004-03-09 | Livevault Corporation | Systems and methods for backing up data files |
US20020038296A1 (en) * | 2000-02-18 | 2002-03-28 | Margolus Norman H. | Data repository and method for promoting network storage of data |
US20040003266A1 (en) * | 2000-09-22 | 2004-01-01 | Patchlink Corporation | Non-invasive automatic offsite patch fingerprinting and updating system and method |
US20040034663A1 (en) * | 2000-10-24 | 2004-02-19 | Takashi Noguchi | Information providing/requesting database building method and information searching method |
US20030204529A1 (en) * | 2002-04-24 | 2003-10-30 | Hertling William Edward | File caching method and apparatus |
US7024581B1 (en) * | 2002-10-09 | 2006-04-04 | Xpoint Technologies, Inc. | Data processing recovery system and method spanning multiple operating system |
US20040167943A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US20040167903A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US20040167940A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US20040167938A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US20040167939A1 (en) * | 2003-02-26 | 2004-08-26 | Permabit, Inc., A Massachusetts Corporation | History preservation in a computer storage system |
US20040267696A1 (en) * | 2003-05-23 | 2004-12-30 | Hewlett-Packard Development Company, L.P. | Data management method, and data processing unit |
US20050071390A1 (en) * | 2003-09-30 | 2005-03-31 | Livevault Corporation | Systems and methods for backing up data files |
US20050203851A1 (en) * | 2003-10-25 | 2005-09-15 | Macrovision Corporation | Corruption and its deterrence in swarm downloads of protected files in a file sharing network |
US7376945B1 (en) * | 2003-12-02 | 2008-05-20 | Cisco Technology, Inc. | Software change modeling for network devices |
KR20050074816A (en) * | 2004-01-14 | 2005-07-19 | (주)센다컴 | The method of operation real time automatic recovery system |
US20060020662A1 (en) * | 2004-01-27 | 2006-01-26 | Emergent Music Llc | Enabling recommendations and community by massively-distributed nearest-neighbor searching |
US20050273858A1 (en) * | 2004-06-07 | 2005-12-08 | Erez Zadok | Stackable file systems and methods thereof |
US20050281469A1 (en) * | 2004-06-17 | 2005-12-22 | Anderson Alison H | Efficient method and system for reducing update requirements for a compressed binary image |
US20050289181A1 (en) * | 2004-06-23 | 2005-12-29 | William Deninger | Object classification in a capture system |
US20060123010A1 (en) * | 2004-09-15 | 2006-06-08 | John Landry | System and method for managing data in a distributed computer system |
US7379967B2 (en) * | 2005-01-28 | 2008-05-27 | Grid Solutions, Inc. | Download method for file by bit torrent protocol |
US20070022264A1 (en) * | 2005-07-14 | 2007-01-25 | Yottayotta, Inc. | Maintaining write order fidelity on a multi-writer system |
US20070027936A1 (en) * | 2005-07-28 | 2007-02-01 | Stakutis Christopher J | Determining changes made to a source file to transmit to a target location providing a mirror copy of the source file |
Non-Patent Citations (15)
Title |
---|
Anderson et al., "Serverless Network File Systems", Feb. 1996, ACM Transactions on Computer Systems, p. 41-79. * |
Androutsellis-theotokis, et al., "A Survey of Peer-to-Peer Content Distribution Technologies", Dec. 2004, ACM Computing Surveys, vol. 36, No. 4, p. 335-371. * |
Castro et al, "Practical Byzantine Fault Tolerance and Proactive Recovery", Nov. 2002, ACM Transactions on Computer Systems, vol. 20, No. 4, p. 398-461. * |
Chang et al, "Mimic: Raw Activity Shipping for File Synchronization in Mobile File Systems", Jun. 6, 2004, MobiSys' 04, ACM Press, p. 165-176. * |
Creedon et al., "P2P Networks: Gnutella", Mar. 2002, Retrieved from <<http://ntrg.cs.tcd.ie/undergrad/4ba2.02-03/p4.html>> on Jun. 15, 2006. * |
Crosse et al., "P2P Networks: Napster", Mar. 2002, Retrieved from <<http://ntrg.cs.tcd.ie/undergrad/4ba2.02-03/p4.html>> on Jun. 15, 2006. * |
Devarankonda et al, "Recovery in the Calypso File System", Aug. 1996, ACM Transactions on Computer Systems, vol. 14, No. 3, p. 287-310. * |
HP-UX, "tar(1)-tape file archiver", Jun. 2002, HP-UX 11i Version 1.6, hereinafter Tar, p. 1-5. * |
Huang et al., "Cheap Recovery: A Key to Self-Managing State", Dec. 2004, ACM Transactions on Storage, p. 38-70. * |
Loguinov et al, "Graph-Theoretic Analysis of Structured Peer-to-Peer Systems: Routing Distances and Fault Resilience", Oct. 2005, IEEE/ACM TRansactions on Networking, vol. 13, No. 5, p. 1107-1120. * |
Muthitacharoen et al, "A Low-bandwidth Network File System", Oct. 2001, ACM Press, p. 174-187. * |
Wiki.theory.org, "BitTorrent Protocol Specification v1.0", Sep. 2006, From TheoryORg, <Retrieved Jun. 22, 2008>. * |
Williamson et al, "Ant Developers Handbook", Aug. 2002, Sam's Publishing, p. 1, 166. * |
www.oed.com, "Obtain, v.", "Entry printed from Oxford English Dictionary Online", Jun. 2008, p. 1-6. * |
www.oed.com, "Pull, v.", "Entry printed from Oxford English Dictionary Online", Jun. 2008, p. 1-64. * |
Cited By (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070156778A1 (en) * | 2006-01-04 | 2007-07-05 | Microsoft Corporation | File indexer |
US8060477B1 (en) * | 2006-03-29 | 2011-11-15 | Abo Enterprises, Llc | System and method for archiving a media collection |
US9037639B2 (en) | 2006-04-13 | 2015-05-19 | Eloy Technology, Llc | System and method for obtaining media content for a portable media player |
US8620699B2 (en) | 2006-08-08 | 2013-12-31 | Napo Enterprises, Llc | Heavy influencer media recommendations |
US8307092B2 (en) | 2007-02-21 | 2012-11-06 | Napo Enterprises, Llc | Method and system for collecting information about a user's media collections from multiple login points |
US20090276632A1 (en) * | 2008-04-30 | 2009-11-05 | Singer Howard M | Systems, Methods, and Media for Providing Secure Content Information |
US20100287104A1 (en) * | 2009-05-06 | 2010-11-11 | Luc Leroy | Systems and Methods for Collaborative Innovation Management |
US20140259167A1 (en) * | 2013-03-11 | 2014-09-11 | Samsung Electronics Co. Ltd. | Behavior based application blacklisting |
US20150074415A1 (en) * | 2013-09-06 | 2015-03-12 | Mastercard International Incorporated | Image Verification By An Electronic Device |
US9531549B2 (en) * | 2013-09-06 | 2016-12-27 | Mastercard International Incorporated | Image verification by an electronic device |
US9787476B2 (en) | 2013-09-06 | 2017-10-10 | Mastercard International Incorporated | Image verification by an electronic device |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7542992B1 (en) | Assimilator using image check data | |
US7139808B2 (en) | Method and apparatus for bandwidth-efficient and storage-efficient backups | |
RU2372644C2 (en) | System and method for updating installation components in network environment | |
CN111951004A (en) | Database world state integrity validation | |
Batten et al. | pStore: A secure peer-to-peer backup system | |
US8051043B2 (en) | Group based complete and incremental computer file backup system, process and apparatus | |
RU2357279C2 (en) | System and control method and transmission of software updates | |
US8667273B1 (en) | Intelligent file encryption and secure backup system | |
KR101150041B1 (en) | System and method for updating files utilizing delta compression patching | |
JP5075236B2 (en) | Secure recovery in serverless distributed file system | |
US7676503B2 (en) | Hybrid computer restore using network service | |
US6633978B1 (en) | Method and apparatus for restoring computer resources | |
US20120131058A1 (en) | Access Control in A Data Processing System Using Data Item Signatures | |
US20020174422A1 (en) | Software distribution system | |
JP2007523395A (en) | System and method for software distribution service | |
CN111796968A (en) | Database transaction guaranteed submission | |
CN111831740B (en) | Synchronization of peers | |
CN111797347A (en) | Content distributed over secure channels | |
US7181739B1 (en) | Installation relationship database | |
CN112084186A (en) | Splitting and merging storage | |
CN112035291A (en) | Snapshot recovery | |
US11409709B1 (en) | Cloud-native global file system with file accelerator | |
Shapiro et al. | Access and Integrity Control in a {Public-Access},{High-Assurance} Configuration Management System | |
Sion et al. | Fighting mallory the insider: Strong write-once read-many storage assurances | |
Happe et al. | Malicious clients in distributed secret sharing based storage networks |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: ORTIZ & LOPEZ, PLLC, NEW MEXICOFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:PANDURANGAN, VIJAY;REISS, DAVID;REEL/FRAME:016829/0876;SIGNING DATES FROM 20050719 TO 20050722 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:PANDURANGAN, VIJAY;REISS, DAVID;REEL/FRAME:019584/0427;SIGNING DATES FROM 20050719 TO 20050722 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
CC | Certificate of correction | ||
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |