US7313553B2 - Apparatus and method for using values from a frequent values list to bridge additional keys in a database index - Google Patents
Apparatus and method for using values from a frequent values list to bridge additional keys in a database index Download PDFInfo
- Publication number
- US7313553B2 US7313553B2 US10/815,231 US81523104A US7313553B2 US 7313553 B2 US7313553 B2 US 7313553B2 US 81523104 A US81523104 A US 81523104A US 7313553 B2 US7313553 B2 US 7313553B2
- Authority
- US
- United States
- Prior art keywords
- query
- sub
- index
- optimal index
- rows
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2453—Query optimisation
- G06F16/24534—Query rewriting; Transformation
- G06F16/24537—Query rewriting; Transformation of operators
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/22—Indexing; Data structures therefor; Storage structures
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99932—Access augmentation or optimizing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99934—Query formulation, input preparation, or translation
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99933—Query processing, i.e. searching
- Y10S707/99935—Query augmenting and refining, e.g. inexact access
Definitions
- This invention generally relates to computer systems, and more specifically relates to apparatus and methods for optimizing a database query.
- computers Since the dawn of the computer age, computers have evolved and become more and more powerful. In our present day, computers have become indispensable in many fields of human endeavor including engineering design, machine and process control, information storage and retrieval, and office computing.
- One of the primary uses of computers is for information storage and retrieval.
- Database systems have been developed that allow a computer to store a large amount of information in a way that allows a user to search for and retrieve specific information in the database.
- an insurance company may have a database that includes all of its policy holders and their current account information, including payment history, premium amount, policy number, policy type, exclusions to coverage, etc.
- a database system allows the insurance company to retrieve the account information for a single policy holder among the thousands and perhaps millions of policy holders in its database.
- a query usually specifies conditions that apply to one or more columns of the database, and may specify relatively complex logical operations on multiple columns.
- the database is searched for records that satisfy the query, and those records are returned as the query result.
- Queries that are frequently run may be optimized to enhance system performance.
- a query optimizer In order to optimize a query, a query optimizer must be able to estimate the number of rows that the query will return. This estimate may then be used by the query optimizer to determine how to most efficiently execute the query.
- the optimal index When an optimal index for the query exists, the optimal index may be probed using the keys that correspond to columns in the query to determine the number of rows that satisfy the query.
- the sub-optimal index may be probed. However, this sub-optimal index includes one or more additional keys that prevent traversing the sub-optimal index.
- the query optimizer may go ahead and use the number of rows returned as an estimate for rows that satisfy the query, and optimize the query accordingly.
- a database query optimizer determines when no optimal index for a query exists, determines whether a sub-optimal index exists, and if so, uses statistical information for each additional key in the sub-optimal index to rewrite the query in a manner that allows traversing the sub-optimal index. The sub-optimal index is then probed using the rewritten query, and the number of estimated returned rows is then used to optimize the query.
- FIG. 1 is a block diagram of an apparatus in accordance with the preferred embodiments
- FIG. 2 shows a sample database query in Structured Query Language (SQL) for the database table shown in FIG. 3 ;
- SQL Structured Query Language
- FIG. 3 shows a sample database table for the query in FIG. 2 and an associated index for the database table
- FIG. 4 is a flow diagram of a prior art method for optimizing a query
- FIG. 5 shows probe values generated in the prior art for the query in FIG. 2 to probe the sub-optimal index shown in FIG. 3 ;
- FIG. 6 shows a method for optimizing database queries in accordance with the preferred embodiments
- FIG. 7 is a sample frequent values list for the CustStatus column in the table in FIG. 3 ;
- FIG. 8 is the query of FIG. 2 after being rewritten according to the frequent values of the additional CustStatus key in the index in FIG. 3 ;
- FIG. 9 shows probe values used to probe the index of FIG. 3 in accordance with the preferred embodiments.
- the present invention relates to optimizing database queries. For those not familiar with databases or queries, this Overview section will provide background information that will help to understand the present invention.
- RDB relational database
- a database query is an expression that is evaluated by a database manager.
- the expression may contain one or more predicate expressions that are used to retrieve data from a database. For example, lets assume there is a database for a company that includes a table of employees, with columns in the table that represent the employee's name, address, phone number, gender, and salary. With data stored in this format, a query could be formulated that would retrieve the records for all female employees that have a salary greater than $40,000. Similarly, a query could be formulated that would retrieve the records for all employees that have a particular area code or telephone prefix.
- SQL Structured Query Language
- FIG. 2 One sample SQL query is shown in FIG. 2 .
- the “select*” statement tells the database query processor to select all values
- the “from MyTable” statement identifies which database table to search
- the “where” clause specifies one or more expressions that must be satisfied for a record to be included in the resulting dataset.
- the query of FIG. 2 is expressed in terms of columns StoreID and CustID, which are columns defined on the database table MyTable 300 shown in FIG. 3 . Information about the internal storage of the data is not required as long as the query is written in terms of expressions that relate to values in columns from tables.
- the sample table MyTable 300 is shown in FIG. 3 .
- MyTable 300 is a suitable table that the query of FIG. 2 could be run against.
- MyTable 300 includes multiple rows and multiple columns.
- An index 310 is an example of an index that exists for table 300 .
- An optimal index for the query in FIG. 2 would include either the StoreID or the CustID at the top level of the index, and would have the other key (StoreID or CustID) at the next level down in the index.
- index 310 in FIG. 3 includes the keys StoreID and CustID that are specified in the query of FIG. 2 .
- index 310 additionally includes the key CustStatus interposed between the StoreID and CustID keys, and is therefore a sub-optimal index.
- optical index means an index that includes all of the keys in the query arranged so that probing the index with the keys in the query returns the rows that satisfy the query.
- sub-optimal index means an index that includes one or more of the keys in the query but that has one or more additional keys in the index that prevents traversal of the sub-optimal index to determine the number of rows that the query will return.
- step 430 NO
- a table scan is used to execute the query (step 440 ). If a sub-optimal index exists for the query (step 430 ), the sub-optimal index is probed until an additional key is encountered that prevents further traversing the sub-optimal index (step 450 ). The estimate of rows returned up to the additional key is returned (step 460 ). The query is then optimized based on the estimated rows returned when probing the sub-optimal index up to the point of the additional key (step 480 ).
- step 410 When the query is evaluated in step 410 , it is determined that the StoreID and CustID are columns in the query.
- step 420 NO
- step 430 YES
- step 430 YES
- CustID is also part of the index 310 , but we can only guess as to how selective that criteria may be since we cannot probe this portion of the index. For a large table, this estimate of 60% may cause a decision to be made to do a table scan because so much of the table is being processed. Without a way for making an intelligent decision when using a sub-optimal index, the prior art will continue to make wrong choices when optimizing a query using a sub-optimal index.
- the present invention provides a way to use a sub-optimal index in a way that uses statistics information for index keys that are not referenced in the query to traverse the index.
- the statistics information is used to rewrite the query in a way that bridges any gaps in the index caused by additional keys, thereby allowing probing of the index to estimate the number of rows the query will return.
- a computer system 100 is one suitable implementation of an apparatus in accordance with the preferred embodiments of the invention.
- Computer system 100 is an IBM eServer iSeries computer system.
- IBM eServer iSeries computer system As shown in FIG. 1 , computer system 100 comprises a processor 110 , a main memory 120 , a mass storage interface 130 , a display interface 140 , and a network interface 150 . These system components are interconnected through the use of a system bus 160 .
- Mass storage interface 130 is used to connect mass storage devices, such as a direct access storage device 155 , to computer system 100 .
- mass storage devices such as a direct access storage device 155
- One specific type of direct access storage device 155 is a readable and writable CD RW drive, which may store data to and read data from a CD RW 195 .
- Main memory 120 in accordance with the preferred embodiments contains data 121 , an operating system 122 , a database 123 , a database manager 124 , one or more database queries 125 , a database query optimizer 126 , a sub-optimal index 128 , and a frequent values list 129 .
- Data 121 represents any data that serves as input to or output from any program in computer system 100 .
- Operating system 122 is a multitasking operating system known in the industry as OS/400; however, those skilled in the art will appreciate that the spirit and scope of the present invention is not limited to any one operating system.
- Database 123 is any suitable database, whether currently known or developed in the future. Database 123 preferably includes one or more tables.
- Database manager 124 provides an interface to database 123 , processing queries and returning the query results.
- Database query 125 is a query in a format compatible with the database 123 that allows retrieval of information stored in the database 123 that satisfies the database query 125 .
- Database query optimizer 126 processes database query 125 to optimize database query 125 .
- Database query optimizer 126 includes an index processing mechanism 127 that may process a sub-optimal index 128 for query 125 using statistical information from the frequent values list 129 to bridge gaps in the sub-optimal index 128 .
- the sub-optimal index 128 is sub-optimal from the point of view of the query 125 , which means that the sub-optimal index 128 includes one or more of the keys corresponding to columns referenced in the query 125 and additionally includes one or more additional keys that prevent traversing the sub-optimal index 128 to determine from the index 128 the number of rows that the database query 125 will return. While database query optimizer 126 is shown in FIG. 1 to be separate from the other items in main memory 120 , it is also within the scope of the preferred embodiments to include the database query optimizer 126 as part of the database manager 124 , or as part of any other computer program.
- the frequent values list 129 includes statistical information for a database table in the form of a list of values for a specified column in a database table, and indicates the count of the most frequent values. Frequent values lists are common and known in the art.
- a sample frequent values list 129 for the CustStatus column in the table 300 in FIG. 3 is shown in FIG. 7 .
- a frequent values list typically includes a threshold value, and values that have a count above the threshold are included in the frequent values list while values that have a count below the threshold are excluded from the frequent values list.
- the threshold may be defined in terms of storing the N most frequent values. In this manner, only the most frequent values are stored in the frequent values list.
- the index processing mechanism 127 may access and use the frequent values list corresponding to each additional key in the sub-optimal index 128 that prevents the sub-optimal index from being traversed to determine a number of rows returned by the query 125 .
- the index processing mechanism 127 essentially re-writes the query 125 using the statistical information in the frequent values list 129 so that the sub-optimal index 128 may be used to estimate the number of rows that will be returned when processing the query 125 .
- Computer system 100 utilizes well known virtual addressing mechanisms that allow the programs of computer system 100 to behave as if they only have access to a large, single storage entity instead of access to multiple, smaller storage entities such as main memory 120 and DASD device 155 . Therefore, while data 121 , operating system 122 , database 123 , database manager 124 , database query 125 , database query optimizer 126 , sub-optimal index 128 , and frequent values list 129 are shown to reside in main memory 120 , those skilled in the art will recognize that these items are not necessarily all completely contained in main memory 120 at the same time. It should also be noted that the term “memory” is used herein to generically refer to the entire virtual memory of computer system 100 , and may include the virtual memory of other computer systems coupled to computer system 100 .
- Processor 110 may be constructed from one or more microprocessors and/or integrated circuits. Processor 110 executes program instructions stored in main memory 120 . Main memory 120 stores programs and data that processor 110 may access. When computer system 100 starts up, processor 110 initially executes the program instructions that make up operating system 122 . Operating system 122 is a sophisticated program that manages the resources of computer system 100 . Some of these resources are processor 110 , main memory 120 , mass storage interface 130 , display interface 140 , network interface 150 , and system bus 160 .
- computer system 100 is shown to contain only a single processor and a single system bus, those skilled in the art will appreciate that the present invention may be practiced using a computer system that has multiple processors and/or multiple buses.
- the interfaces that are used in the preferred embodiment each include separate, fully programmed microprocessors that are used to off-load compute-intensive processing from processor 110 .
- processor 110 processors 110
- the present invention applies equally to computer systems that simply use I/O adapters to perform similar functions.
- Display interface 140 is used to directly connect one or more displays 165 to computer system 100 .
- These displays 165 which may be non-intelligent (i.e., dumb) terminals or fully programmable workstations, are used to allow system administrators and users to communicate with computer system 100 . Note, however, that while display interface 140 is provided to support communication with one or more displays 165 , computer system 100 does not necessarily require a display 165 , because all needed interaction with users and other processes may occur via network interface 150 .
- Network interface 150 is used to connect other computer systems and/or workstations (e.g., 175 in FIG. 1 ) to computer system 100 across a network 170 .
- the present invention applies equally no matter how computer system 100 may be connected to other computer systems and/or workstations, regardless of whether the network connection 170 is made using present-day analog and/or digital techniques or via some networking mechanism of the future.
- many different network protocols can be used to implement a network. These protocols are specialized computer programs that allow computers to communicate across network 170 .
- TCP/IP Transmission Control Protocol/Internet Protocol
- a method 600 in accordance with the preferred embodiments optimizes a query.
- steps 410 , 420 , 422 , 424 , 430 and 440 are preferably identical to the steps shown in FIG. 4 and described in detail above.
- the frequent values list is read for each additional key in the sub-optimal index that prevents traversing the sub-optimal index to estimate a number of rows that will be returned by the query (step 650 ).
- the query is then rewritten to retrieve all the values in the frequent values lists for the additional keys (step 660 ).
- step 660 preferably uses all the values in the frequent values list, but could optionally use less than all of the values in the frequent values list.
- the sub-optimal index is then probed using the rewritten query (step 670 ).
- the query is then optimized based on the estimated rows returned from probing the sub-optimal index with the rewritten query (step 680 ).
- an additional key that prevented traversing the sub-optimal index acted like a roadblock that prevented any additional information from being gleaned from the sub-optimal index.
- the gap caused by an additional key is bridged by using the values from its frequent values list to rewrite the query to include all of the values in the frequent values list.
- steps 650 and 660 may be performed multiple times, once for each additional key in the sub-optimal index that prevents traversing the index to estimate the number of rows that the query will return.
- step 410 The query in FIG. 2 is evaluated (step 410 ).
- step 420 NO
- step 430 YES
- the index 310 includes an additional key CustStatus that prevents traversing the index to estimate the number of rows returned by the query.
- the frequent values list for the additional key namely CustStatus
- FIG. 7 the frequent values list for CustStatus is shown in FIG. 7 .
- the query is rewritten internally to retrieve all the values in the frequent values list (step 660 ).
- the result of rewriting the query in step 660 is shown in FIG. 8 .
- the rewritten query includes the original columns and corresponding values, and additionally includes the three most frequent values for CustStatus, namely A, E and D, that are listed in the frequent values list in FIG. 7 .
- the probe of the sub-optimal index in step 670 estimates two records, or 20%.
- the query may then be optimized based on the number of rows returned from probing the index in step 670 (step 680 ).
- the prior art method 400 in FIG. 4 returned an estimate of 60% of the rows being selected by the query.
- An estimate of 20% selectivity using method 600 is much more accurate than the estimate of 60% selectivity using prior art method 400 .
- the method 600 of FIG. 6 bridges gaps in the index, resulting in an estimate that is much better than using the prior art method 400 .
- the query may be optimized in step 680 by implementing the query with the sub-optimal index in a manner that assures we do not miss any rows. Missing rows could occur, for example, if the frequent values list is slightly out of date.
- the query optimizer may perform the following query:
- the Temp result may then be joined into an index probe using the full key.
- the query optimizer of the preferred embodiments provides much better information for optimizing a query when only a sub-optimal index is available.
- the gaps caused by additional keys in the index that prevent traversing the index are bridged by rewriting the query to include values in the frequent values list for each additional key.
- the index may then be probed using the rewritten query to more accurately determine an estimate of the number of rows returned by the query.
Abstract
Description
Claims (5)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/815,231 US7313553B2 (en) | 2004-03-31 | 2004-03-31 | Apparatus and method for using values from a frequent values list to bridge additional keys in a database index |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US10/815,231 US7313553B2 (en) | 2004-03-31 | 2004-03-31 | Apparatus and method for using values from a frequent values list to bridge additional keys in a database index |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050228772A1 US20050228772A1 (en) | 2005-10-13 |
US7313553B2 true US7313553B2 (en) | 2007-12-25 |
Family
ID=35061769
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/815,231 Expired - Fee Related US7313553B2 (en) | 2004-03-31 | 2004-03-31 | Apparatus and method for using values from a frequent values list to bridge additional keys in a database index |
Country Status (1)
Country | Link |
---|---|
US (1) | US7313553B2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090083215A1 (en) * | 2007-09-21 | 2009-03-26 | Louis Burger | System, method, and computer-readable medium for automated selection of sampling usage in a database system |
US10262035B2 (en) * | 2013-11-14 | 2019-04-16 | Hewlett Packard Enterprise Development Lp | Estimating data |
Families Citing this family (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
DE102004035097A1 (en) * | 2004-07-20 | 2006-02-09 | Endress + Hauser Gmbh + Co. Kg | Electronic device and method for performing multiple processes with the electronic device |
US20060182131A1 (en) * | 2005-01-21 | 2006-08-17 | L-3 Communications Corporation | Gateway interface control |
US7519921B2 (en) * | 2005-05-05 | 2009-04-14 | Cisco Technology, Inc. | Method and system for selecting a dynamic object in a graphical user interface |
US7873627B2 (en) * | 2006-01-18 | 2011-01-18 | Microsoft Corporation | Relational database scalar subquery optimization |
CN103226610B (en) * | 2013-05-07 | 2016-06-29 | 华为技术有限公司 | Database table querying method and device |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6513028B1 (en) * | 1999-06-25 | 2003-01-28 | International Business Machines Corporation | Method, system, and program for searching a list of entries when search criteria is provided for less than all of the fields in an entry |
US20040122845A1 (en) * | 2002-12-19 | 2004-06-24 | International Business Machines Corporation | System and method for automating data partitioning in a parallel database |
US20040225639A1 (en) * | 2003-05-09 | 2004-11-11 | Oracle International Corporation | Optimizer dynamic sampling |
US20050097084A1 (en) * | 2003-10-31 | 2005-05-05 | Balmin Andrey L. | XPath containment for index and materialized view matching |
-
2004
- 2004-03-31 US US10/815,231 patent/US7313553B2/en not_active Expired - Fee Related
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6513028B1 (en) * | 1999-06-25 | 2003-01-28 | International Business Machines Corporation | Method, system, and program for searching a list of entries when search criteria is provided for less than all of the fields in an entry |
US20040122845A1 (en) * | 2002-12-19 | 2004-06-24 | International Business Machines Corporation | System and method for automating data partitioning in a parallel database |
US20040225639A1 (en) * | 2003-05-09 | 2004-11-11 | Oracle International Corporation | Optimizer dynamic sampling |
US20050097084A1 (en) * | 2003-10-31 | 2005-05-05 | Balmin Andrey L. | XPath containment for index and materialized view matching |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090083215A1 (en) * | 2007-09-21 | 2009-03-26 | Louis Burger | System, method, and computer-readable medium for automated selection of sampling usage in a database system |
US10262035B2 (en) * | 2013-11-14 | 2019-04-16 | Hewlett Packard Enterprise Development Lp | Estimating data |
Also Published As
Publication number | Publication date |
---|---|
US20050228772A1 (en) | 2005-10-13 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7392266B2 (en) | Apparatus and method for monitoring usage of components in a database index | |
US9135298B2 (en) | Autonomically generating a query implementation that meets a defined performance specification | |
US7343367B2 (en) | Optimizing a database query that returns a predetermined number of rows using a generated optimized access plan | |
US8478741B2 (en) | Autonomic refresh of a materialized query table in a computer database | |
US7987200B2 (en) | Method and apparatus for predicting selectivity of database query join conditions using hypothetical query predicates having skewed value constants | |
US7203685B2 (en) | Apparatus and method for estimating cardinality when data skew is present | |
US20070073657A1 (en) | Apparatus and method for utilizing a materialized query table in a computer database system | |
US20080301131A1 (en) | Modification of a saved database query based on a change in the meaning of a query value over time | |
US8032514B2 (en) | SQL distinct optimization in a computer database system | |
US20060173852A1 (en) | Apparatus and method for highlighting discrepancies between query performance estimates and actual query performance | |
US7877377B2 (en) | Dropping tautological predicates from SQL queries for reusability | |
US7313553B2 (en) | Apparatus and method for using values from a frequent values list to bridge additional keys in a database index | |
US20070005631A1 (en) | Apparatus and method for dynamically determining index split options from monitored database activity | |
US8838573B2 (en) | Autonomic index creation | |
US20080215539A1 (en) | Data ordering for derived columns in a database system | |
US20080109423A1 (en) | Apparatus and method for database partition elimination for sampling queries | |
US7475064B2 (en) | Optimizing a union database query | |
US20060271584A1 (en) | Apparatus and method for using ontological relationships in a computer database | |
US20060235819A1 (en) | Apparatus and method for reducing data returned for a database query using select list processing | |
US7925642B2 (en) | Apparatus and method for reducing size of intermediate results by analyzing having clause information during SQL processing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FAUNCE, MICHAEL S.;MURAS, BRIAN ROBERT;REEL/FRAME:015182/0624;SIGNING DATES FROM 20040330 TO 20040331 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYFree format text: PAYER NUMBER DE-ASSIGNED (ORIGINAL EVENT CODE: RMPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20191225 |