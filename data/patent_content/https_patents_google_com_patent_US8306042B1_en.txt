US8306042B1 - Class-based deterministic packet routing - Google Patents
Class-based deterministic packet routing Download PDFInfo
- Publication number
- US8306042B1 US8306042B1 US12/487,832 US48783209A US8306042B1 US 8306042 B1 US8306042 B1 US 8306042B1 US 48783209 A US48783209 A US 48783209A US 8306042 B1 US8306042 B1 US 8306042B1
- Authority
- US
- United States
- Prior art keywords
- packet
- memory
- routing
- packets
- array
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/58—Association of routers
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs
- G06F15/163—Interprocessor communication
- G06F15/173—Interprocessor communication using an interconnection network, e.g. matrix, shuffle, pyramid, star, snowflake
- G06F15/17306—Intercommunication techniques
- G06F15/17312—Routing techniques specific to parallel machines, e.g. wormhole, store and forward, shortest path problem congestion
Definitions
- aspects of the invention relate generally to multiprocessor computer architectures. More particularly, aspects are directed to routing data between processors and memory in such multiprocessor architectures.
- processors In many computer systems, such as high speed data processing systems, multiple processors are employed.
- the processors may be arranged in different configurations. For instance, an array of processors may be configured in a mesh architecture. These processors may be interconnected and have access to external memory through one or more memory controllers.
- deadlock In a deadlock condition, data may be stalled during its transmission to or from a processor. Some schemes rely on virtual channels to overcome the deadlock issue.
- a multiprocessor architecture employing deterministic packet routing.
- the architecture comprises a plurality of processors, a plurality of memory controllers and a plurality of router switches.
- the plurality of processors are arranged in an array. Each processor resides at a node of the array and is operable to route message packets across the array.
- Each memory controller is directly connected to at least one of the plurality of processors and to external memory.
- Each router switch is coupled to one of the nodes in the array and is operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process. Each router switch evaluates a received message packet to determine if it is a memory request packet or a memory reply packet.
- the received message packet is a memory request packet issued from a source processor of the plurality of processors to a destination memory controller of the plurality of memory controllers
- the received memory packet is passed through selected nodes from the source processor to the destination memory controller via XY or YX routing.
- the received message packet is a memory reply packet issued from a source memory controller of the plurality of memory controllers to a destination processor of the plurality of processors
- the received memory packet is passed through the selected nodes from the source memory controller to the destination processor via YX or XY routing.
- the memory reply packet is passed through the selected nodes via YX routing.
- the memory reply packet is passed through the selected nodes via XY routing.
- each router switch is a multi-port router switch having ports coupled to the adjacent nodes in the array and a port coupled to the processor residing at the same node in the array.
- each multi-port router switch includes buffering for storing the received memory packet, a routing mechanism for routing the received memory packet, and processing logic for determining which path to route the received memory packet along.
- the routing mechanism may include at least one pair of shared physical channels into and out of the multi-port router switch and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
- each router switch includes a preset routing table for determining an output routing direction for the received memory packet.
- the preset routing table includes at least a first entry for the memory request packet and at least a second entry for the memory reply packet, wherein the second entry is distinct from the first entry.
- a method of performing deterministic packet routing in a multiprocessor architecture comprises obtaining one or more message packets at a node in a multiprocessor array; determining whether each message packet is a memory request packet or a memory reply packet; storing each memory request packet in a request input buffer and storing each memory reply packet in a reply input buffer; arbitrating between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
- analyzing the first selecting packet includes evaluating a route lookup table to determine the adjacent node.
- the route lookup table stores a first routing layout for memory request packets and a second routing layout for memory reply packets, the second layout being distinct from the first layout.
- the first layout is an XY routing scheme and the second layout is a YX routing scheme.
- the first layout is the YX routing scheme and the second layout is the XY routing scheme.
- the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via XY routing and if the first selected packet is a memory reply packet it is passed through the selected nodes via YX routing.
- the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via YX routing and if the first selected packet is a memory reply packet it is passed through the selected nodes via XY routing.
- Yet another embodiment provides a computer-readable recording medium recorded with a program executable by a processor.
- the program causes the processor to: obtain one or more message packets at a node in a multiprocessor array; determine whether each message packet is a memory request packet or a memory reply packet; store each memory request packet in a request input buffer and store each memory reply packet in a reply input buffer; arbitrate between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyze a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmit the first selected packet to the determined adjacent node in the multiprocessor array.
- the program further causes the processor to execute operations associated with the first selected packet.
- the program further causes the processor to configure a routing mechanism having at least one pair of shared physical channels and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
- a multiprocessor architecture employs deterministic packet routing and the architecture comprises a plurality of processors arranged in an array, each processor residing at a node of the array and operable to route message packets across the array; a plurality of memory controllers, each memory controller being directly connected to at least one of the plurality of processors and to external memory; a plurality of router switches, each router switch being coupled to one of the nodes in the array and operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process; wherein each router switch evaluates a received message packet to determine whether it is a memory request packet, and if the received message packet is a memory request packet issued from a source processor of the plurality of processors to a destination memory controller of the plurality of memory controllers, then the memory request packet is passed through selected nodes from the source processor to the destination memory controller using one of XY or YX routing.
- a multiprocessor architecture employs deterministic packet routing, and the architecture comprises a plurality of processors arranged in an array, each processor residing at a node of the array and operable to route message packets across the array; a plurality of memory controllers, each memory controller being directly connected to at least one of the plurality of processors and to external memory; a plurality of router switches, each router switch being coupled to one of the nodes in the array and operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process; wherein each router switch evaluates a received message packet to determine if it is a memory request packet or a memory reply packet, and if the received message packet is a memory reply packet issued from a source memory controller of the plurality of memory controllers to a destination processor of the plurality of processors, then the received memory reply packet is passed through the selected nodes from the source memory controller to the destination processor using one of YX or XY routing.
- Another embodiment is directed to a method of performing deterministic packet routing in a multiprocessor architecture.
- the method comprises obtaining message packets at a node in a multiprocessor array, the message packets comprising memory request packets; storing each memory request packet in an input buffer; arbitrating between the stored packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
- a method of performing deterministic packet routing in a multiprocessor architecture comprises obtaining message packets at a node in a multiprocessor array, the message packets comprising memory reply packets; storing each memory reply packet in an input buffer; arbitrating between the stored packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
- FIG. 1 illustrates a multiprocessor architecture for use in accordance with aspects of the invention.
- FIGS. 2A-B illustrate a router switch in accordance with aspects of the invention.
- FIG. 3 illustrates a virtual channel implementation for use with aspects of the invention.
- FIG. 4A illustrates a routing implementation in accordance with aspects of the invention.
- FIG. 4B is a flow diagram illustrating aspects of the invention in accordance with FIG. 4A .
- FIGS. 4C-D illustrate examples of routing functions in accordance with aspects of the invention.
- FIG. 5 illustrates a latency versus offered load chart in accordance with aspects of the invention.
- FIGS. 6A-B illustrate a multiprocessor and controller architecture and a latency versus offered load chart in accordance with aspects of the invention.
- FIGS. 7A-B illustrate normalized performance plots in accordance with aspects of the invention.
- FIGS. 8A-D illustrate distribution plots for a first multiprocessor architecture in accordance with aspects of the invention.
- FIGS. 9A-D illustrate distribution plots for a second multiprocessor architecture in accordance with aspects of the invention.
- FIG. 1 illustrates an exemplary multiprocessor computer architecture 100 for use with aspects of the invention.
- the architecture includes 64 processors (P 0 . . . P 63 ) arranged in a mesh-type configuration at nodes 102 .
- the processors at adjacent nodes 102 in the mesh are directly linked to one another via connections 104 .
- processor P 9 is connected to processors P 1 , P 8 , P 10 and P 17 .
- the processors along the top (P 0 . . . P 7 ) and bottom (P 56 . . . P 63 ) nodes of the mesh may be directly linked to respective memory controllers 106 .
- four processors 102 connect to each memory controller 106 .
- each memory controller 106 couples to a physical memory 108 .
- the remaining processors may communicate with the memory controllers 106 through one or more intervening nodes 102 .
- FIG. 2A illustrates that each node 102 may include a multi-port router switch 110 .
- the multi-port router switch 110 is a five-port router switch.
- Four ports connect to adjacent nodes in the +X, ⁇ X, +Y and ⁇ Y directions of the mesh.
- the fifth port connects to the processor co-located at the switch's respective node.
- the fifth port connects to processor P 4 , which is located along the top edge of the mesh.
- the ⁇ X direction port connects to processor P 3
- the +X direction port connects to processor P 5
- the ⁇ Y direction port connects to processor P 12 .
- the +Y direction port connects to a memory controller, namely memory controller 1 .
- the multi-port router switch 110 includes buffering 112 and a routing mechanism 114 for routing data packets between the memory controllers and the processors.
- the router switch 110 also includes processing logic or firmware 116 for determining which path(s) to route packets along. This avoids undesirable situations such as routing deadlock.
- FIG. 3 illustrates a virtual channel configuration 200 for the routing mechanism 114 of the router switch 110 . As shown, there is at least one pair of shared physical channels 202 into and out of the switch. A set of independent request and response virtual channels 204 are multiplexed between the shared physical channels 202 and a crossbar architecture 206 .
- the CDR architecture employs virtual channels to break deadlock routing. Those same channels can also be used to break protocol deadlock.
- Virtual channels may used to break deadlock in several ways: 1) protocol deadlocks, e.g. a request-reply deadlock where a reply is blocked by a request which is in turn blocked by another reply, etc; 2) turn cycles which arise in a routing algorithms (i.e. routing deadlock). The process may make an “illegal” turn—one which may cause a potential cycle—by switching virtual channels to avoid the dependency; and 3) overlapping virtual channel dependencies around a torus where virtual channels are used to set a “dateline” and only when a packet crosses this dateline it switches virtual channels.
- protocol deadlocks e.g. a request-reply deadlock where a reply is blocked by a request which is in turn blocked by another reply, etc
- turn cycles which arise in a routing algorithms i.e. routing deadlock
- class-based deterministic routing employs message routing between the processors and the memory controllers based on message type.
- memory request packets employ “XY” routing while memory reply packets employ “YX” routing.
- FIG. 4A illustrates the exemplary architecture 100 of FIG. 1 using the CDR architecture.
- data packets are routed between external memory 108 associated with memory controller “0” and processor P 29 .
- Memory request packets from the processor P 29 are routed as shown with the solid arrows.
- Memory reply packets from the external memory 108 associated with memory controller “0” are routed as shown with the dashed arrows.
- a memory request packet sent from processor P 29 to external memory via memory controller 0 may be routed through the nodes in the ⁇ X direction and then through the nodes in the +Y direction. As shown, such memory request packets pass through the nodes containing processors P 28 , P 27 and P 26 in the ⁇ X direction and through P 18 , P 10 and P 2 in the +Y direction.
- the memory reply packets from the external memory are sent from memory controller 0 in the ⁇ Y direction and then in the +X direction. Thus, these packets pass through the nodes containing processors P 2 , P 10 , P 18 and P 26 in the ⁇ Y direction, and through P 27 and P 28 in the +X direction before arriving at the node for processor P 29 .
- the edge of the mesh may be handled the same way. For instance, requests from P 24 to P 31 travel in the +X direction as there are no Y dimension components, and the reply(ies) from P 31 to P 24 travel in the ⁇ X direction as there are no Y dimension components.
- This scenario is a good example of why a torus (e.g., an architecture with edge symmetric topology) may be a good architecture choice, because P 24 and P 31 would only be 1 hop away (around the wraparound link of the torus).
- the logic for performing such routing may reside in the router switches, such as in processing logic or firmware 116 .
- the routing logic is desirably integral to every router/switch in the tile.
- Each router determines the output port using either a lookup table or combinational logic.
- a lookup table provides flexibility and handles faults gracefully by easily re-routing packets.
- the “routing algorithm” is desirably implemented by programming the collective set of routing tables.
- a lookup table is used to implement a flexible, programmable routing function. It is indexed by a virtual channel and destination identifier fields found in the header of each packet.
- each packet comprises one or more flow control units (“flits”), which are the basic unit for managing buffer space in the input buffers of the router switches.
- flits flow control units
- Request and reply packet classes have separate virtual channel buffers to ensure protocol deadlock-freedom.
- FIG. 4B provides a flow diagram 300 illustrating one embodiment of such a routing function.
- incoming packets from a data link layer are received via an input port of a router.
- the incoming packets are checked for data integrity in the data-link layer prior to being enqueued on the appropriate input buffer.
- the type of packet (e.g., request or reply) is evaluated.
- the virtual channel indicates what “class” the packet is used for. For instance, class 0 may be used for request packets, and class 1 may be used for reply packets.
- a 64 node on-chip network may employ a 128 entry lookup table.
- entries 0 . . . 63 may be used for routing request packets, and entries 64 . . . 127 may be used for routing reply packets.
- an incoming packet is a request packet, it is stored in a request input buffer per block 306
- if it is a reply packet it is stored in a reply input buffer per block 308 .
- virtual channel arbitration is conducted for the packets temporarily stored in the request and reply input buffers. Then, as per block 312 , the packet that wins arbitration flows to the route lookup table for routing.
- the value programmed in the lookup table (“LUT”) and index (i) determines the output port, as shown in block 314 . Two examples of this are shown in FIGS. 4C and 4D .
- LUT[29] ⁇ X, indicating that the request packet(s) initiated from that input port be routed along the ⁇ X direction.
- LUT[26] +Y, indicating that received request packets be routed along the +Y direction.
- FIG. 4D illustrates routing of reply packets according to another lookup example.
- LUT[90] +X
- the lookup table at each router switch is desirably programmed or otherwise stored in the processing logic/firmware of the router switch prior to injecting any traffic in the network. Once programmed or otherwise stored, the lookup table effectively implements the CDR routing process in a way that load-balances request-reply traffic to minimize memory contention and provide low-latency under heavy traffic demand. Once the routing is selected, the packet is then sent via an output port to the appropriate next node in the array.
- the CDR architecture is employed to load-balance the processor-to-memory traffic.
- the impact of request and response routing on memory traffic can be estimated by measuring the channel load, because the network throughput is inversely proportional to the worst-case (maximum) channel load.
- FIG. 5 illustrates how CDR compares to XY, XY and XY-YX routing for a mesh architecture.
- a simulation was performed with the following parameters.
- 64 processors were configured in an array such as shown in FIG. 1 .
- 16 memory controllers were positioned with eight connected to the top row of processors and eight connected to the bottom row of processors.
- Router latency was cycle, and the inter-router wire latency was 1 cycle.
- Router buffering was 32 flits per input divided among the virtual controllers. The flits are flow control digits which form the packets that are routed.
- the packet size was 1 flit for a request and four flits for a reply.
- Two virtual channels were simulated for XY and YX DOR as well as CDR. Four virtual channels were simulated for XY-YX routing.
- FIG. 5 plots offered load (flits per cycle) versus latency (number of cycles).
- CDR provided a nearly 100% increase in throughput over XY and YX DOR as well as XY-YX routing (at the asymptote, approximately 0.7 flits per cycle for CDR as compared to approximately 0.35 flits per cycle for the other routing techniques).
- CDR While both CDR and XY-YX routing take advantage of path diversity as some packets are routed XY and others are routed YX, CDR significantly outperformed XY-YX routing for the above simulated scenario. Unlike XY-YX routing, CDR takes advantage of the characteristics of memory traffic (where approximately 1 ⁇ 2 the traffic will be requests and the remaining approximate 1 ⁇ 2 is reply traffic) and the load-balanced traffic pattern. For instance, the CDR deterministic routing is based on the message type and load-balances all of channels to provide high throughput while adding randomization.
- FIG. 6A illustrates an 8 ⁇ 8 mesh array having the memory controllers positioned in a diamond-type arrangement.
- FIG. 6B a latency versus offered load simulation is provided. As shown, the results for XY, YX, XY-YX and CDR are similar.
- each processor executed a fixed number of remote memory operations (N) (e.g., requests to the memory controller) during the simulation and the time required for all operations to complete was measured.
- N remote memory operations
- Each processor was allowed to have r outstanding requests before the processor needed to halt the injection of packets into the network and wait until replies were received from the memory controller.
- An on-chip network using values of 4 and 16 for r and 1000 for N were employed. Simulations showed that a larger N did not change the trend in the comparisons.
- CDR routing significantly outperformed the XY, YX and XY-YX techniques, as shown in FIG. 7A .
- FIG. 7B illustrates simulation results for the diamond-type architecture shown in FIG. 6A .
- the benefit of CDR provided up to a 9% improvement in performance.
- the processes and operations set forth herein may be implemented directly by one or more hardware-based processors such as sub-processing units in a multiprocessor array.
- the processes and operations may be stored in a computer-readable recording medium such as flash memory, a CD-ROM, a hard drive and the like.
- the information may be stored in electronic format as a program for execution by the processor(s).
Abstract
Aspects of the invention pertain to deterministic packet routing systems and methods in multiprocessor computing architectures. Packets are analyzed to determine whether they are memory request packets or memory reply packets. Depending upon the packet, it is routed through nodes in the multiprocessor computer architecture in either an XY or YX path. Request and reply packets are sent in opposing routes according to a deterministic routing scheme. Multiport routers are placed at nodes in the architecture to pass the packets, using independent request and response virtual channels to avoid deadlock conditions.
Description
1. Field of the Invention
Aspects of the invention relate generally to multiprocessor computer architectures. More particularly, aspects are directed to routing data between processors and memory in such multiprocessor architectures.
2. Description of Related Art
In many computer systems, such as high speed data processing systems, multiple processors are employed. The processors may be arranged in different configurations. For instance, an array of processors may be configured in a mesh architecture. These processors may be interconnected and have access to external memory through one or more memory controllers.
Various routing schemes have been employed to pass data between processors and memory controllers. One issue that is particularly problematic is “deadlock.” In a deadlock condition, data may be stalled during its transmission to or from a processor. Some schemes rely on virtual channels to overcome the deadlock issue.
Systems and methods which avoid deadlock conditions without increasing the number of virtual channels are provided.
In accordance with one embodiment, a multiprocessor architecture employing deterministic packet routing is provided. The architecture comprises a plurality of processors, a plurality of memory controllers and a plurality of router switches. The plurality of processors are arranged in an array. Each processor resides at a node of the array and is operable to route message packets across the array. Each memory controller is directly connected to at least one of the plurality of processors and to external memory. Each router switch is coupled to one of the nodes in the array and is operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process. Each router switch evaluates a received message packet to determine if it is a memory request packet or a memory reply packet. If the received message packet is a memory request packet issued from a source processor of the plurality of processors to a destination memory controller of the plurality of memory controllers, then the received memory packet is passed through selected nodes from the source processor to the destination memory controller via XY or YX routing. And if the received message packet is a memory reply packet issued from a source memory controller of the plurality of memory controllers to a destination processor of the plurality of processors, then the received memory packet is passed through the selected nodes from the source memory controller to the destination processor via YX or XY routing. If the memory request packet is passed through the selected nodes via XY routing then the memory reply packet is passed through the selected nodes via YX routing. And if the memory request packet is passed through the selected nodes via YX routing then the memory reply packet is passed through the selected nodes via XY routing.
In one example, the array comprises a mesh architecture. In another example, each router switch is a multi-port router switch having ports coupled to the adjacent nodes in the array and a port coupled to the processor residing at the same node in the array. In one alternative, each multi-port router switch includes buffering for storing the received memory packet, a routing mechanism for routing the received memory packet, and processing logic for determining which path to route the received memory packet along. In this case, the routing mechanism may include at least one pair of shared physical channels into and out of the multi-port router switch and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
In another example, each router switch includes a preset routing table for determining an output routing direction for the received memory packet. And in a further example, the preset routing table includes at least a first entry for the memory request packet and at least a second entry for the memory reply packet, wherein the second entry is distinct from the first entry.
In another embodiment, a method of performing deterministic packet routing in a multiprocessor architecture is provided. The method comprises obtaining one or more message packets at a node in a multiprocessor array; determining whether each message packet is a memory request packet or a memory reply packet; storing each memory request packet in a request input buffer and storing each memory reply packet in a reply input buffer; arbitrating between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
In one example, analyzing the first selecting packet includes evaluating a route lookup table to determine the adjacent node. In an alternative, the route lookup table stores a first routing layout for memory request packets and a second routing layout for memory reply packets, the second layout being distinct from the first layout. In a first scenario, the first layout is an XY routing scheme and the second layout is a YX routing scheme. And in a second scenario the first layout is the YX routing scheme and the second layout is the XY routing scheme.
In another example, the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via XY routing and if the first selected packet is a memory reply packet it is passed through the selected nodes via YX routing.
In a further example, the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via YX routing and if the first selected packet is a memory reply packet it is passed through the selected nodes via XY routing.
Yet another embodiment provides a computer-readable recording medium recorded with a program executable by a processor. The program causes the processor to: obtain one or more message packets at a node in a multiprocessor array; determine whether each message packet is a memory request packet or a memory reply packet; store each memory request packet in a request input buffer and store each memory reply packet in a reply input buffer; arbitrate between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyze a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmit the first selected packet to the determined adjacent node in the multiprocessor array.
In one example, the program further causes the processor to execute operations associated with the first selected packet. In another example, the program further causes the processor to configure a routing mechanism having at least one pair of shared physical channels and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
In a further embodiment, a multiprocessor architecture employs deterministic packet routing and the architecture comprises a plurality of processors arranged in an array, each processor residing at a node of the array and operable to route message packets across the array; a plurality of memory controllers, each memory controller being directly connected to at least one of the plurality of processors and to external memory; a plurality of router switches, each router switch being coupled to one of the nodes in the array and operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process; wherein each router switch evaluates a received message packet to determine whether it is a memory request packet, and if the received message packet is a memory request packet issued from a source processor of the plurality of processors to a destination memory controller of the plurality of memory controllers, then the memory request packet is passed through selected nodes from the source processor to the destination memory controller using one of XY or YX routing.
In yet another embodiment, a multiprocessor architecture employs deterministic packet routing, and the architecture comprises a plurality of processors arranged in an array, each processor residing at a node of the array and operable to route message packets across the array; a plurality of memory controllers, each memory controller being directly connected to at least one of the plurality of processors and to external memory; a plurality of router switches, each router switch being coupled to one of the nodes in the array and operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process; wherein each router switch evaluates a received message packet to determine if it is a memory request packet or a memory reply packet, and if the received message packet is a memory reply packet issued from a source memory controller of the plurality of memory controllers to a destination processor of the plurality of processors, then the received memory reply packet is passed through the selected nodes from the source memory controller to the destination processor using one of YX or XY routing.
Another embodiment is directed to a method of performing deterministic packet routing in a multiprocessor architecture. The method comprises obtaining message packets at a node in a multiprocessor array, the message packets comprising memory request packets; storing each memory request packet in an input buffer; arbitrating between the stored packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
And in a further embodiment, a method of performing deterministic packet routing in a multiprocessor architecture is provided. The method comprises obtaining message packets at a node in a multiprocessor array, the message packets comprising memory reply packets; storing each memory reply packet in an input buffer; arbitrating between the stored packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array; analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and transmitting the first selected packet to the determined adjacent node in the multiprocessor array.
Aspects, features and advantages of the invention will be appreciated when considered with reference to the following description of preferred embodiments and accompanying figures. The same reference numbers in different drawings may identify the same or similar elements.
Furthermore, the following description is not limiting; the scope of the invention is defined by the appended claims and equivalents.
The processors along the top (P0 . . . P7) and bottom (P56 . . . P63) nodes of the mesh may be directly linked to respective memory controllers 106. As shown in this example, four processors 102 connect to each memory controller 106. In addition, each memory controller 106 couples to a physical memory 108. The remaining processors may communicate with the memory controllers 106 through one or more intervening nodes 102.
As shown in FIG. 2B , the multi-port router switch 110 includes buffering 112 and a routing mechanism 114 for routing data packets between the memory controllers and the processors. The router switch 110 also includes processing logic or firmware 116 for determining which path(s) to route packets along. This avoids undesirable situations such as routing deadlock.
Routing deadlock occurs when one packet held in a router switch prevents other packets from being routed through that router switch. One solution is to pass data packets along virtual channels instead of along actual physical channels. FIG. 3 illustrates a virtual channel configuration 200 for the routing mechanism 114 of the router switch 110. As shown, there is at least one pair of shared physical channels 202 into and out of the switch. A set of independent request and response virtual channels 204 are multiplexed between the shared physical channels 202 and a crossbar architecture 206. The CDR architecture employs virtual channels to break deadlock routing. Those same channels can also be used to break protocol deadlock.
Virtual channels may used to break deadlock in several ways: 1) protocol deadlocks, e.g. a request-reply deadlock where a reply is blocked by a request which is in turn blocked by another reply, etc; 2) turn cycles which arise in a routing algorithms (i.e. routing deadlock). The process may make an “illegal” turn—one which may cause a potential cycle—by switching virtual channels to avoid the dependency; and 3) overlapping virtual channel dependencies around a torus where virtual channels are used to set a “dateline” and only when a packet crosses this dateline it switches virtual channels.
In accordance with one aspect of the invention, class-based deterministic routing (“CDR”) employs message routing between the processors and the memory controllers based on message type. In particular, memory request packets employ “XY” routing while memory reply packets employ “YX” routing. FIG. 4A illustrates the exemplary architecture 100 of FIG. 1 using the CDR architecture. In this example, data packets are routed between external memory 108 associated with memory controller “0” and processor P29. Memory request packets from the processor P29 are routed as shown with the solid arrows. Memory reply packets from the external memory 108 associated with memory controller “0” are routed as shown with the dashed arrows.
Thus, a memory request packet sent from processor P29 to external memory via memory controller 0 may be routed through the nodes in the −X direction and then through the nodes in the +Y direction. As shown, such memory request packets pass through the nodes containing processors P28, P27 and P26 in the −X direction and through P18, P10 and P2 in the +Y direction. The memory reply packets from the external memory are sent from memory controller 0 in the −Y direction and then in the +X direction. Thus, these packets pass through the nodes containing processors P2, P10, P18 and P26 in the −Y direction, and through P27 and P28 in the +X direction before arriving at the node for processor P29.
The edge of the mesh may be handled the same way. For instance, requests from P24 to P31 travel in the +X direction as there are no Y dimension components, and the reply(ies) from P31 to P24 travel in the −X direction as there are no Y dimension components. This scenario is a good example of why a torus (e.g., an architecture with edge symmetric topology) may be a good architecture choice, because P24 and P31 would only be 1 hop away (around the wraparound link of the torus).
The logic for performing such routing may reside in the router switches, such as in processing logic or firmware 116. The routing logic is desirably integral to every router/switch in the tile. Each router determines the output port using either a lookup table or combinational logic. A lookup table provides flexibility and handles faults gracefully by easily re-routing packets. The “routing algorithm” is desirably implemented by programming the collective set of routing tables.
In one example, a lookup table is used to implement a flexible, programmable routing function. It is indexed by a virtual channel and destination identifier fields found in the header of each packet. In the example, each packet comprises one or more flow control units (“flits”), which are the basic unit for managing buffer space in the input buffers of the router switches. Request and reply packet classes have separate virtual channel buffers to ensure protocol deadlock-freedom.
At block 304, the type of packet (e.g., request or reply) is evaluated. The virtual channel indicates what “class” the packet is used for. For instance, class 0 may be used for request packets, and class 1 may be used for reply packets. A 64 node on-chip network, for example, may employ a 128 entry lookup table. Here, entries 0 . . . 63 may be used for routing request packets, and entries 64 . . . 127 may be used for routing reply packets. As shown, if an incoming packet is a request packet, it is stored in a request input buffer per block 306, and if it is a reply packet, it is stored in a reply input buffer per block 308. As shown at block 310, virtual channel arbitration is conducted for the packets temporarily stored in the request and reply input buffers. Then, as per block 312, the packet that wins arbitration flows to the route lookup table for routing.
The value programmed in the lookup table (“LUT”) and index (i) determines the output port, as shown in block 314. Two examples of this are shown in FIGS. 4C and 4D .
Thus, for a request as shown in FIG. 4C , at index 29, LUT[29]=−X, indicating that the request packet(s) initiated from that input port be routed along the −X direction. At index 26, LUT[26]=+Y, indicating that received request packets be routed along the +Y direction. And at index 2, LUT[2]=+Y, indicates that request packets from that input port should exit the router on the +Y output port, and enter the memory controller.
The lookup table at each router switch is desirably programmed or otherwise stored in the processing logic/firmware of the router switch prior to injecting any traffic in the network. Once programmed or otherwise stored, the lookup table effectively implements the CDR routing process in a way that load-balances request-reply traffic to minimize memory contention and provide low-latency under heavy traffic demand. Once the routing is selected, the packet is then sent via an output port to the appropriate next node in the array.
According to another aspect, the CDR architecture is employed to load-balance the processor-to-memory traffic. In one example, the impact of request and response routing on memory traffic can be estimated by measuring the channel load, because the network throughput is inversely proportional to the worst-case (maximum) channel load.
When both the request and the reply traffic are both considered, static routing procedures such as XY and YX dimension order routing (“DOR”) perform similarly. For instance, reply traffic creates a bottleneck for XY routing and request traffic creates a bottleneck for YX routing. In contrast, the CDR system may significantly outperform other routing configurations.
While both CDR and XY-YX routing take advantage of path diversity as some packets are routed XY and others are routed YX, CDR significantly outperformed XY-YX routing for the above simulated scenario. Unlike XY-YX routing, CDR takes advantage of the characteristics of memory traffic (where approximately ½ the traffic will be requests and the remaining approximate ½ is reply traffic) and the load-balanced traffic pattern. For instance, the CDR deterministic routing is based on the message type and load-balances all of channels to provide high throughput while adding randomization.
Other system configurations may result in different results. For instance, FIG. 6A illustrates an 8×8 mesh array having the memory controllers positioned in a diamond-type arrangement. In FIG. 6B , a latency versus offered load simulation is provided. As shown, the results for XY, YX, XY-YX and CDR are similar.
The impact of routing algorithms has also been simulated with closed-loop evaluation using a batch experiment to model the memory coherence traffic of a shared memory multiprocessor. In this scenario, each processor executed a fixed number of remote memory operations (N) (e.g., requests to the memory controller) during the simulation and the time required for all operations to complete was measured. Each processor was allowed to have r outstanding requests before the processor needed to halt the injection of packets into the network and wait until replies were received from the memory controller. An on-chip network using values of 4 and 16 for r and 1000 for N were employed. Simulations showed that a larger N did not change the trend in the comparisons.
For the simulation architecture described above having a mesh of 64 processors with memory controllers along the top and bottom portions of the array, CDR routing significantly outperformed the XY, YX and XY-YX techniques, as shown in FIG. 7A . With CDR routing, it can be seen that the limitations of the placement are overcome resulting in significant improvements as CDR balanced the load to reduce the execution time by up to 45% with r=4 and up to 56% with r=16. With higher r, the network becomes more congested and thus, proper load-balancing through the use of CDR routing enables significant performance advantage.
For the batch simulations, a distribution of completion time was plotted for processor. With the mesh of 64 processors with memory controllers along the top and bottom portions of the array, the use of CDR provided not only higher performance in terms of lower completion time but also resulted is a much tighter distribution of completion, which lead to a tighter variance, as shown in FIGS. 8A-9D . In the diamond configuration, balancing the load through CDR also resulted in a tighter distribution when compared to XY and YX DOR, as shown in FIGS. 9A-D .
The processes and operations set forth herein may be implemented directly by one or more hardware-based processors such as sub-processing units in a multiprocessor array. Alternatively, the processes and operations may be stored in a computer-readable recording medium such as flash memory, a CD-ROM, a hard drive and the like. In the latter case, the information may be stored in electronic format as a program for execution by the processor(s).
Although aspects of the invention herein have been described with reference to particular embodiments, it is to be understood that these embodiments are merely illustrative of the principles and applications of the present invention. It is therefore to be understood that numerous modifications may be made to the illustrative embodiments and that other arrangements may be devised without departing from the spirit and scope of the invention as defined by the appended claims.
Claims (16)
1. A multiprocessor architecture employing deterministic packet routing, the architecture comprising:
a plurality of processors arranged in an array, each processor residing at a node of the array and operable to route message packets across the array;
a plurality of memory controllers, each memory controller being directly connected to at least one of the plurality of processors and to external memory;
a plurality of router switches, each router switch being coupled to one of the nodes in the array, each router switch being connected to the processor of that node, and operable to direct the message packets to an adjacent node in the array in a class-based deterministic packet routing process;
wherein each router switch evaluates a received message packet to determine if it is a memory request packet or a memory reply packet, if the received message packet is a memory request packet issued from a source processor of the plurality of processors to a destination memory controller of the plurality of memory controllers, then the received memory packet is passed through selected nodes from the source processor to the destination memory controller via XY or YX routing, where X and Y are the routing directions from the selected nodes of the array, and if the received message packet is a memory reply packet issued from a source memory controller of the plurality of memory controllers to a destination processor of the plurality of processors, then the received memory packet is passed through the selected nodes from the source memory controller to the destination processor via YX or XY routing, so that if the memory request packet is passed through the selected nodes via XY routing then the memory reply packet is passed through the selected nodes via YX routing, and if the memory request packet is passed through the selected nodes via YX routing then the memory reply packet is passed through the selected nodes via XY routing.
2. The multiprocessor architecture of claim 1 , wherein the array comprises a mesh architecture.
3. The multiprocessor architecture of claim 1 , wherein each router switch is a multi-port router switch having ports coupled to the adjacent nodes in the array and a port coupled to the processor residing at the same node in the array.
4. The multiport processor architecture of claim 3 , wherein each multi-port router switch includes buffering for storing the received memory packet, a routing mechanism for routing the received memory packet, and processing logic for determining which path to route the received memory packet along.
5. The multiport processor architecture of claim 4 , wherein the routing mechanism includes at least one pair of shared physical channels into and out of the multi-port router switch and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
6. The multiport processor architecture of claim 1 , wherein each router switch includes a preset routing table for determining an output routing direction for the received memory packet.
7. The multiport processor architecture of claim 6 , wherein the preset routing table includes at least a first entry for the memory request packet and at least a second entry for the memory reply packet, wherein the second entry is distinct from the first entry.
8. A method of performing deterministic packet routing in a multiprocessor architecture, the method comprising:
obtaining one or more message packets at a node in a multiprocessor array;
determining whether each message packet is a memory request packet or a memory reply packet;
storing each memory request packet in a request input buffer and storing each memory reply packet in a reply input buffer;
arbitrating between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array;
analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and
transmitting the first selected packet to the determined adjacent node in the multiprocessor array;
wherein the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via XY routing and if the first selected packet is a memory reply packet it is passed from the node to a given one of the adjacent nodes via YX routing, where X and Y are the routing directions from nodes in the multiprocessor array.
9. The method of claim 8 , wherein analyzing the first selecting packet includes evaluating a route lookup table to determine the adjacent node.
10. The method of claim 9 , wherein the route lookup table stores a first routing layout for memory request packets and a second routing layout for memory reply packets, the second layout being distinct from the first layout.
11. The method of claim 10 , wherein in a first scenario the first layout is an XY routing scheme and the second layout is a YX routing scheme, and in a second scenario the first layout is the YX routing scheme and the second layout is the XY routing scheme.
12. A method of performing deterministic packet routing in a multiprocessor architecture, the method comprising:
obtaining one or more message packets at a node in a multiprocessor array;
determining whether each message packet is a memory request packet or a memory reply packet;
storing each memory request packet in a request input buffer and storing each memory reply packet in a reply input buffer;
arbitrating between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array;
analyzing a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and
transmitting the first selected packet to the determined adjacent node in the multiprocessor array;
wherein the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via YX routing and if the first selected packet is a memory reply packet it is passed from the node to a given one of the adjacent nodes via XY routing, where X and Y are the routing directions from node in the multiprocessor array.
13. A tangible, non-transitory computer-readable recording medium recorded with a program executable by a processor, the program causing the processor to perform deterministic packet routing in a multiprocessor architecture, the processor being configured to execute the program to:
obtain one or more message packets at a node in a multiprocessor array;
determine whether each message packet is a memory request packet or a memory reply packet;
store each memory request packet in a request input buffer and store each memory reply packet in a reply input buffer;
arbitrate between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array;
analyze a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to;
transmit the first selected packet to the determined adjacent node in the multiprocessor array; and
configure a routing mechanism having at least one pair of shared physical channels and a set of independent request and response virtual channels multiplexed between the at least one pair of shared physical channels to avoid deadlock.
14. The computer-readable recording medium of claim 13 , further comprising causing the processor to execute operations associated with the first selected packet.
15. A tangible, non-transitory computer-readable recording medium recorded with a program executable by a processor, the program causing the processor to perform deterministic packet routing in a multiprocessor architecture, the processor being configured to execute the program to:
obtain one or more message packets at a node in a multiprocessor array;
determine whether each message packet is a memory request packet or a memory reply packet;
store each memory request packet in a request input buffer and store each memory reply packet in a reply input buffer;
arbitrate between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array;
analyze a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and
transmit the first selected packet to the determined adjacent node in the multiprocessor array;
wherein the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via XY routing and if the first selected packet is a memory reply packet it is passed from the node to a given one of the adjacent nodes via YX routing, where X and Y are the routing directions from nodes in the multiprocessor array.
16. A tangible, non-transitory computer-readable recording medium recorded with a program executable by a processor, the program causing the processor to perform deterministic packet routing in a multiprocessor architecture, the processor being configured to execute the program to:
obtain one or more message packets at a node in a multiprocessor array;
determine whether each message packet is a memory request packet or a memory reply packet;
store each memory request packet in a request input buffer and store each memory reply packet in a reply input buffer;
arbitrate between the stored memory request packets and memory reply packets to determine which virtual channel will be used to transmit selected packets to adjacent nodes in the multiprocessor array;
analyze a first one of the selected packets using preset routing information to determine which adjacent node in the multiprocessor array the first selected packet will be sent to; and
transmit the first selected packet to the determined adjacent node in the multiprocessor array;
wherein the first selected packet is transmitted via XY or YX routing according to its packet type so that if the first selected packet is a memory request packet it is passed via YX routing and if the first selected packet is a memory reply packet it is passed from the node to a given one of the adjacent nodes via XY routing, where X and Y are the routing directions from node in the multiprocessor array.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/487,832 US8306042B1 (en) | 2009-06-19 | 2009-06-19 | Class-based deterministic packet routing |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/487,832 US8306042B1 (en) | 2009-06-19 | 2009-06-19 | Class-based deterministic packet routing |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2010/032202 Continuation-In-Part WO2010135055A2 (en) | 2009-05-18 | 2010-04-23 | Pyrolysis reactor materials and methods |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/576,002 Continuation-In-Part US8450552B2 (en) | 2009-05-18 | 2009-10-08 | Pyrolysis reactor materials and methods |
Publications (1)
Publication Number | Publication Date |
---|---|
US8306042B1 true US8306042B1 (en) | 2012-11-06 |
Family
ID=47075487
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/487,832 Expired - Fee Related US8306042B1 (en) | 2009-06-19 | 2009-06-19 | Class-based deterministic packet routing |
Country Status (1)
Country | Link |
---|---|
US (1) | US8306042B1 (en) |
Cited By (38)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110035530A1 (en) * | 2009-08-10 | 2011-02-10 | Fujitsu Limited | Network system, information processing apparatus, and control method for network system |
US20110244906A1 (en) * | 2010-03-30 | 2011-10-06 | Qualcomm Incorporated | Systems, apparatuses, and methods to facilitate coordinated scheduling in wireless communication systems |
US20140211622A1 (en) * | 2013-01-28 | 2014-07-31 | Netspeed Systems | Creating multiple noc layers for isolation or avoiding noc traffic congestion |
WO2014160923A1 (en) * | 2013-03-29 | 2014-10-02 | Deere & Company | Retracting shortcut bars, status shortcuts and edit run page sets |
US8934347B1 (en) * | 2009-09-21 | 2015-01-13 | Tilera Corporation | Low latency dynamic route selection |
US9444702B1 (en) | 2015-02-06 | 2016-09-13 | Netspeed Systems | System and method for visualization of NoC performance based on simulation output |
US9568970B1 (en) | 2015-02-12 | 2017-02-14 | Netspeed Systems, Inc. | Hardware and software enabled implementation of power profile management instructions in system on chip |
US9590813B1 (en) | 2013-08-07 | 2017-03-07 | Netspeed Systems | Supporting multicast in NoC interconnect |
US9742630B2 (en) | 2014-09-22 | 2017-08-22 | Netspeed Systems | Configurable router for a network on chip (NoC) |
US9769077B2 (en) | 2014-02-20 | 2017-09-19 | Netspeed Systems | QoS in a system with end-to-end flow control and QoS aware buffer allocation |
US9825887B2 (en) | 2015-02-03 | 2017-11-21 | Netspeed Systems | Automatic buffer sizing for optimal network-on-chip design |
US9825809B2 (en) | 2015-05-29 | 2017-11-21 | Netspeed Systems | Dynamically configuring store-and-forward channels and cut-through channels in a network-on-chip |
US9864728B2 (en) | 2015-05-29 | 2018-01-09 | Netspeed Systems, Inc. | Automatic generation of physically aware aggregation/distribution networks |
US9928204B2 (en) | 2015-02-12 | 2018-03-27 | Netspeed Systems, Inc. | Transaction expansion for NoC simulation and NoC design |
US10050843B2 (en) | 2015-02-18 | 2018-08-14 | Netspeed Systems | Generation of network-on-chip layout based on user specified topological constraints |
US10063496B2 (en) | 2017-01-10 | 2018-08-28 | Netspeed Systems Inc. | Buffer sizing of a NoC through machine learning |
US10074053B2 (en) | 2014-10-01 | 2018-09-11 | Netspeed Systems | Clock gating for system-on-chip elements |
US10084692B2 (en) | 2013-12-30 | 2018-09-25 | Netspeed Systems, Inc. | Streaming bridge design with host interfaces and network on chip (NoC) layers |
US10084725B2 (en) | 2017-01-11 | 2018-09-25 | Netspeed Systems, Inc. | Extracting features from a NoC for machine learning construction |
US10218580B2 (en) | 2015-06-18 | 2019-02-26 | Netspeed Systems | Generating physically aware network-on-chip design from a physical system-on-chip specification |
US10298485B2 (en) | 2017-02-06 | 2019-05-21 | Netspeed Systems, Inc. | Systems and methods for NoC construction |
US10313269B2 (en) | 2016-12-26 | 2019-06-04 | Netspeed Systems, Inc. | System and method for network on chip construction through machine learning |
US10348563B2 (en) | 2015-02-18 | 2019-07-09 | Netspeed Systems, Inc. | System-on-chip (SoC) optimization through transformation and generation of a network-on-chip (NoC) topology |
US10355996B2 (en) | 2012-10-09 | 2019-07-16 | Netspeed Systems | Heterogeneous channel capacities in an interconnect |
US10419300B2 (en) | 2017-02-01 | 2019-09-17 | Netspeed Systems, Inc. | Cost management against requirements for the generation of a NoC |
US10452124B2 (en) | 2016-09-12 | 2019-10-22 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10496770B2 (en) | 2013-07-25 | 2019-12-03 | Netspeed Systems | System level simulation in Network on Chip architecture |
US10547514B2 (en) | 2018-02-22 | 2020-01-28 | Netspeed Systems, Inc. | Automatic crossbar generation and router connections for network-on-chip (NOC) topology generation |
US10735335B2 (en) | 2016-12-02 | 2020-08-04 | Netspeed Systems, Inc. | Interface virtualization and fast path for network on chip |
US10896476B2 (en) | 2018-02-22 | 2021-01-19 | Netspeed Systems, Inc. | Repository of integration description of hardware intellectual property for NoC construction and SoC integration |
US10983910B2 (en) | 2018-02-22 | 2021-04-20 | Netspeed Systems, Inc. | Bandwidth weighting mechanism based network-on-chip (NoC) configuration |
US11023377B2 (en) | 2018-02-23 | 2021-06-01 | Netspeed Systems, Inc. | Application mapping on hardened network-on-chip (NoC) of field-programmable gate array (FPGA) |
US11144457B2 (en) | 2018-02-22 | 2021-10-12 | Netspeed Systems, Inc. | Enhanced page locality in network-on-chip (NoC) architectures |
US11176302B2 (en) | 2018-02-23 | 2021-11-16 | Netspeed Systems, Inc. | System on chip (SoC) builder |
US20220035760A1 (en) * | 2020-07-31 | 2022-02-03 | Alibaba Group Holding Limited | Processing accelerator architectures |
EP4006736A1 (en) * | 2020-11-30 | 2022-06-01 | Google LLC | Connecting processors using twisted torus configurations |
US11625341B2 (en) | 2020-08-11 | 2023-04-11 | Alibaba Group Holding Limited | Narrow DRAM channel systems and methods |
US11847091B2 (en) * | 2018-12-28 | 2023-12-19 | Lynxi Technologies Co., Ltd. | Data transmission method and device for network on chip and electronic apparatus |
Citations (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5041971A (en) * | 1988-11-30 | 1991-08-20 | Bolt Beranek And Newman Inc. | Memory accessing switch network |
US5559970A (en) * | 1993-05-06 | 1996-09-24 | Nec Corporation | Crossbar switch for multi-processor, multi-memory system for resolving port and bank contention through the use of aligners, routers, and serializers |
US5574849A (en) * | 1992-12-17 | 1996-11-12 | Tandem Computers Incorporated | Synchronized data transmission between elements of a processing system |
US5675807A (en) * | 1992-12-17 | 1997-10-07 | Tandem Computers Incorporated | Interrupt message delivery identified by storage location of received interrupt data |
US5751932A (en) * | 1992-12-17 | 1998-05-12 | Tandem Computers Incorporated | Fail-fast, fail-functional, fault-tolerant multiprocessor system |
US5867501A (en) * | 1992-12-17 | 1999-02-02 | Tandem Computers Incorporated | Encoding for communicating data and commands |
US5964835A (en) * | 1992-12-17 | 1999-10-12 | Tandem Computers Incorporated | Storage access validation to data messages using partial storage address data indexed entries containing permissible address range validation for message source |
CA2306364A1 (en) * | 1999-04-30 | 2000-10-30 | Pmc-Sierra, Inc. | Method and apparatus for programmable lexical packet classifier |
US6151689A (en) * | 1992-12-17 | 2000-11-21 | Tandem Computers Incorporated | Detecting and isolating errors occurring in data communication in a multiple processor system |
US6157967A (en) * | 1992-12-17 | 2000-12-05 | Tandem Computer Incorporated | Method of data communication flow control in a data processing system using busy/ready commands |
US6285679B1 (en) * | 1997-08-22 | 2001-09-04 | Avici Systems, Inc. | Methods and apparatus for event-driven routing |
US6370145B1 (en) * | 1997-08-22 | 2002-04-09 | Avici Systems | Internet switch router |
US20020048272A1 (en) * | 2000-09-21 | 2002-04-25 | Avici Systems, Inc. | Router implemented with a gamma graph interconnection network |
US20020049901A1 (en) * | 2000-09-21 | 2002-04-25 | Avici Systems, Inc. | System and method for implementing source based and egress based virtual networks in an interconnection network |
US20020051427A1 (en) * | 2000-09-21 | 2002-05-02 | Avici Systems, Inc. | Switched interconnection network with increased bandwidth and port count |
US20030131214A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Masterless building block binding to partitions using identifiers and indicators |
US20030131067A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Hardware support for partitioning a multiprocessor system to allow distinct operating systems |
US20030131200A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Method and apparatus of using global snooping to provide cache coherence to distributed computer nodes in a single coherent system |
US20030131203A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Multi-level classification method for transaction address conflicts for ensuring efficient ordering in a two-level snoopy cache architeture |
US6751698B1 (en) * | 1999-09-29 | 2004-06-15 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US20050080953A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Fragment storage for data alignment and merger |
US20050078669A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Exponential channelized timer |
US20050078694A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Packet manager interrupt mapper |
US20050078696A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Descriptor write back delay mechanism to improve performance |
US20050078601A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Hash and route hardware with parallel routing scheme |
US20050081127A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Hypertransport exception detection and processing |
US20050080941A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Distributed copies of configuration information using token ring |
US20050080948A1 (en) * | 2001-11-20 | 2005-04-14 | Broadcom Corporation | Bridges performing remote reads and writes as uncacheable coherent |
US20050080952A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Descriptor-based load balancing |
US20050228930A1 (en) * | 2004-04-09 | 2005-10-13 | Broadcom Corporation | Programmable inter-virtual channel and intra-virtual channel instructions issuing rules for an I/O bus of a system-on-a-chip processor |
US6988170B2 (en) * | 2000-06-10 | 2006-01-17 | Hewlett-Packard Development Company, L.P. | Scalable architecture based on single-chip multiprocessing |
FR2905047A1 (en) * | 2006-08-17 | 2008-02-22 | Airbus France Sas | AFDX NETWORK SUPPORTING A PLURALITY OF SERVICE CLASSES |
US20080108310A1 (en) * | 2004-06-22 | 2008-05-08 | Wen Tong | Closed Loop Mimo Systems and Methods |
US20080151909A1 (en) | 2003-11-19 | 2008-06-26 | Cray Inc. | Reduced arbitration routing system and method |
US7646230B2 (en) * | 2007-09-21 | 2010-01-12 | Siemens Industry, Inc. | Devices, systems, and methods for reducing signals |
US8179775B2 (en) * | 2007-08-14 | 2012-05-15 | Texas Instruments Incorporated | Precoding matrix feedback processes, circuits and systems |
-
2009
- 2009-06-19 US US12/487,832 patent/US8306042B1/en not_active Expired - Fee Related
Patent Citations (74)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5041971A (en) * | 1988-11-30 | 1991-08-20 | Bolt Beranek And Newman Inc. | Memory accessing switch network |
US5790776A (en) * | 1992-12-17 | 1998-08-04 | Tandem Computers Incorporated | Apparatus for detecting divergence between a pair of duplexed, synchronized processor elements |
US5751955A (en) * | 1992-12-17 | 1998-05-12 | Tandem Computers Incorporated | Method of synchronizing a pair of central processor units for duplex, lock-step operation by copying data into a corresponding locations of another memory |
US5675579A (en) * | 1992-12-17 | 1997-10-07 | Tandem Computers Incorporated | Method for verifying responses to messages using a barrier message |
US5675807A (en) * | 1992-12-17 | 1997-10-07 | Tandem Computers Incorporated | Interrupt message delivery identified by storage location of received interrupt data |
US5838894A (en) * | 1992-12-17 | 1998-11-17 | Tandem Computers Incorporated | Logical, fail-functional, dual central processor units formed from three processor units |
US5751932A (en) * | 1992-12-17 | 1998-05-12 | Tandem Computers Incorporated | Fail-fast, fail-functional, fault-tolerant multiprocessor system |
US5574849A (en) * | 1992-12-17 | 1996-11-12 | Tandem Computers Incorporated | Synchronized data transmission between elements of a processing system |
US6496940B1 (en) * | 1992-12-17 | 2002-12-17 | Compaq Computer Corporation | Multiple processor system with standby sparing |
US5689689A (en) * | 1992-12-17 | 1997-11-18 | Tandem Computers Incorporated | Clock circuits for synchronized processor systems having clock generator circuit with a voltage control oscillator producing a clock signal synchronous with a master clock signal |
US5867501A (en) * | 1992-12-17 | 1999-02-02 | Tandem Computers Incorporated | Encoding for communicating data and commands |
US5914953A (en) * | 1992-12-17 | 1999-06-22 | Tandem Computers, Inc. | Network message routing using routing table information and supplemental enable information for deadlock prevention |
US5964835A (en) * | 1992-12-17 | 1999-10-12 | Tandem Computers Incorporated | Storage access validation to data messages using partial storage address data indexed entries containing permissible address range validation for message source |
US6233702B1 (en) * | 1992-12-17 | 2001-05-15 | Compaq Computer Corporation | Self-checked, lock step processor pairs |
US6151689A (en) * | 1992-12-17 | 2000-11-21 | Tandem Computers Incorporated | Detecting and isolating errors occurring in data communication in a multiple processor system |
US6157967A (en) * | 1992-12-17 | 2000-12-05 | Tandem Computer Incorporated | Method of data communication flow control in a data processing system using busy/ready commands |
US5559970A (en) * | 1993-05-06 | 1996-09-24 | Nec Corporation | Crossbar switch for multi-processor, multi-memory system for resolving port and bank contention through the use of aligners, routers, and serializers |
US20020044560A1 (en) * | 1997-08-22 | 2002-04-18 | Avici Systems | Internet switch router |
US7187679B2 (en) * | 1997-08-22 | 2007-03-06 | Avici Systems, Inc. | Internet switch router |
US6370145B1 (en) * | 1997-08-22 | 2002-04-09 | Avici Systems | Internet switch router |
US20010038634A1 (en) * | 1997-08-22 | 2001-11-08 | Avici Systems | Methods and apparatus for event-driven routing |
US20070140240A1 (en) * | 1997-08-22 | 2007-06-21 | Dally William J | Internet switch router |
US20040160970A1 (en) * | 1997-08-22 | 2004-08-19 | Avici Systems, Inc. | Methods and apparatus for event-driven routing |
US6654381B2 (en) * | 1997-08-22 | 2003-11-25 | Avici Systems, Inc. | Methods and apparatus for event-driven routing |
US6285679B1 (en) * | 1997-08-22 | 2001-09-04 | Avici Systems, Inc. | Methods and apparatus for event-driven routing |
US6563831B1 (en) * | 1997-08-22 | 2003-05-13 | Avici Systems | Router with virtual channel allocation |
US20030118048A1 (en) * | 1997-08-22 | 2003-06-26 | Avici Systems | Internet switch router |
CA2306364A1 (en) * | 1999-04-30 | 2000-10-30 | Pmc-Sierra, Inc. | Method and apparatus for programmable lexical packet classifier |
US20050053057A1 (en) * | 1999-09-29 | 2005-03-10 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US20090024833A1 (en) * | 1999-09-29 | 2009-01-22 | Silicon Graphics, Inc. | Multiprocessor Node Controller Circuit and Method |
US7406086B2 (en) * | 1999-09-29 | 2008-07-29 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US6751698B1 (en) * | 1999-09-29 | 2004-06-15 | Silicon Graphics, Inc. | Multiprocessor node controller circuit and method |
US7881321B2 (en) * | 1999-09-29 | 2011-02-01 | Silicon Graphics International | Multiprocessor node controller circuit and method |
US6988170B2 (en) * | 2000-06-10 | 2006-01-17 | Hewlett-Packard Development Company, L.P. | Scalable architecture based on single-chip multiprocessing |
US20020049901A1 (en) * | 2000-09-21 | 2002-04-25 | Avici Systems, Inc. | System and method for implementing source based and egress based virtual networks in an interconnection network |
US20020048272A1 (en) * | 2000-09-21 | 2002-04-25 | Avici Systems, Inc. | Router implemented with a gamma graph interconnection network |
US20020051427A1 (en) * | 2000-09-21 | 2002-05-02 | Avici Systems, Inc. | Switched interconnection network with increased bandwidth and port count |
US7046633B2 (en) * | 2000-09-21 | 2006-05-16 | Avici Systems, Inc. | Router implemented with a gamma graph interconnection network |
US7039058B2 (en) * | 2000-09-21 | 2006-05-02 | Avici Systems, Inc. | Switched interconnection network with increased bandwidth and port count |
US6947433B2 (en) * | 2000-09-21 | 2005-09-20 | Avici Systems, Inc. | System and method for implementing source based and egress based virtual networks in an interconnection network |
US20050080948A1 (en) * | 2001-11-20 | 2005-04-14 | Broadcom Corporation | Bridges performing remote reads and writes as uncacheable coherent |
US7752281B2 (en) * | 2001-11-20 | 2010-07-06 | Broadcom Corporation | Bridges performing remote reads and writes as uncacheable coherent operations |
US7051180B2 (en) * | 2002-01-09 | 2006-05-23 | International Business Machines Corporation | Masterless building block binding to partitions using identifiers and indicators |
US6785779B2 (en) * | 2002-01-09 | 2004-08-31 | International Business Machines Company | Multi-level classification method for transaction address conflicts for ensuring efficient ordering in a two-level snoopy cache architecture |
US20030131214A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Masterless building block binding to partitions using identifiers and indicators |
US6910108B2 (en) * | 2002-01-09 | 2005-06-21 | International Business Machines Corporation | Hardware support for partitioning a multiprocessor system to allow distinct operating systems |
US20030131067A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Hardware support for partitioning a multiprocessor system to allow distinct operating systems |
US20030131200A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Method and apparatus of using global snooping to provide cache coherence to distributed computer nodes in a single coherent system |
US6973544B2 (en) * | 2002-01-09 | 2005-12-06 | International Business Machines Corporation | Method and apparatus of using global snooping to provide cache coherence to distributed computer nodes in a single coherent system |
US20030131203A1 (en) * | 2002-01-09 | 2003-07-10 | International Business Machines Corporation | Multi-level classification method for transaction address conflicts for ensuring efficient ordering in a two-level snoopy cache architeture |
US20080198867A1 (en) * | 2003-10-14 | 2008-08-21 | Broadcom Corporation | Hash and Route Hardware with Parallel Routing Scheme |
US7475271B2 (en) * | 2003-10-14 | 2009-01-06 | Broadcom Corporation | Exponential channelized timer |
US20050078694A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Packet manager interrupt mapper |
US20050078669A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Exponential channelized timer |
US7131020B2 (en) * | 2003-10-14 | 2006-10-31 | Broadcom Corporation | Distributed copies of configuration information using token ring |
US20050080953A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Fragment storage for data alignment and merger |
US20050078601A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Hash and route hardware with parallel routing scheme |
US20050080952A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Descriptor-based load balancing |
US7243172B2 (en) * | 2003-10-14 | 2007-07-10 | Broadcom Corporation | Fragment storage for data alignment and merger |
US20050081127A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Hypertransport exception detection and processing |
US7366092B2 (en) * | 2003-10-14 | 2008-04-29 | Broadcom Corporation | Hash and route hardware with parallel routing scheme |
US7584316B2 (en) * | 2003-10-14 | 2009-09-01 | Broadcom Corporation | Packet manager interrupt mapper |
US7549091B2 (en) * | 2003-10-14 | 2009-06-16 | Broadcom Corporation | Hypertransport exception detection and processing |
US6981074B2 (en) * | 2003-10-14 | 2005-12-27 | Broadcom Corporation | Descriptor-based load balancing |
US20050080941A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Distributed copies of configuration information using token ring |
US7440469B2 (en) * | 2003-10-14 | 2008-10-21 | Broadcom Corporation | Descriptor write back delay mechanism to improve performance |
US20050078696A1 (en) * | 2003-10-14 | 2005-04-14 | Broadcom Corporation | Descriptor write back delay mechanism to improve performance |
US20080151909A1 (en) | 2003-11-19 | 2008-06-26 | Cray Inc. | Reduced arbitration routing system and method |
US20050228930A1 (en) * | 2004-04-09 | 2005-10-13 | Broadcom Corporation | Programmable inter-virtual channel and intra-virtual channel instructions issuing rules for an I/O bus of a system-on-a-chip processor |
US7240141B2 (en) * | 2004-04-09 | 2007-07-03 | Broadcom Corporation | Programmable inter-virtual channel and intra-virtual channel instructions issuing rules for an I/O bus of a system-on-a-chip processor |
US20080108310A1 (en) * | 2004-06-22 | 2008-05-08 | Wen Tong | Closed Loop Mimo Systems and Methods |
FR2905047A1 (en) * | 2006-08-17 | 2008-02-22 | Airbus France Sas | AFDX NETWORK SUPPORTING A PLURALITY OF SERVICE CLASSES |
US8179775B2 (en) * | 2007-08-14 | 2012-05-15 | Texas Instruments Incorporated | Precoding matrix feedback processes, circuits and systems |
US7646230B2 (en) * | 2007-09-21 | 2010-01-12 | Siemens Industry, Inc. | Devices, systems, and methods for reducing signals |
Non-Patent Citations (11)
Title |
---|
Bjerregaard et al., A Survey of Research and Practices of Network-on-Chip, ACM Computing Surveys, vol. 38, Mar. 2006, pp. 1-51. |
Dally et al., Deadlock-Free Adaptive Routing in Multicomputer Networks Using Virtual Channels, IEEE Transactions And Distributed Systems, vol. 4, No. 4, Apr. 1993, p. 466-475. |
Dally, Virtual Channel Flow Control, IEEE, 1990, pp. 60-68. |
Dally, Virtual-Channel Flow Control, IEEE Transactions on Parallel and Distributed Systems, vol. 3, No. 2, Mar. 1992, pp. 194-205. |
Jayasimha D.N. et al., A Foundation for Designing Deadlock-Free Routing Algorithms in Wormhole Networks, Journal of the ACM, vol. 50, No. 2, Mar. 2003, pp. 250-275. |
Mohapatra, Wormhole Routing Techniques for Directly Connected Multicomputer Systems, ACM Computing Surveys, vol. 30, No. 3, Sep. 1998, pp. 374-410. |
Mukherjee et al., A Comparative Study of Arbitration Algorithms for the Alpha 21364 Pipelined Router, Oct. 2002, pp. 223-234. |
Ramanathan et al., Survey of Commercial Parallel Machines, ACM Sigarch Computer Architecture News, vol. 21, Issue 3, Jun. 1993, pp. 13-33. |
Seo et al., Near-Optimal Worst-case Throughput Routing for Two-Dimensional Mesh Networks, Proceedings of the 32nd International Symposium on Computer Architecture (ISCA '05), IEEE, 2005, 12 pages. |
Vangal et al., An 80 Tile 1.28TFLOPS Network-on-Chip in 65nm CMOS, 2007 IEEE International Solid-State Circuits Conference, ISSCC 2007/Session 5/Microprocessors/5.2, pp. 98-99, and p. 589. |
Wentzlaff et al., On-Chip Interconnection Architecture of the Tile Processor, IEEE Micro, Sep.-Oct. 2007, pp. 15-31. |
Cited By (58)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8589614B2 (en) * | 2009-08-10 | 2013-11-19 | Fujitsu Limited | Network system with crossbar switch and bypass route directly coupling crossbar interfaces |
US20110035530A1 (en) * | 2009-08-10 | 2011-02-10 | Fujitsu Limited | Network system, information processing apparatus, and control method for network system |
US8934347B1 (en) * | 2009-09-21 | 2015-01-13 | Tilera Corporation | Low latency dynamic route selection |
US20110244906A1 (en) * | 2010-03-30 | 2011-10-06 | Qualcomm Incorporated | Systems, apparatuses, and methods to facilitate coordinated scheduling in wireless communication systems |
US8948800B2 (en) * | 2010-03-30 | 2015-02-03 | Qualcomm Incorporated | Systems, apparatuses, and methods to facilitate coordinated scheduling in wireless communication systems |
US9130607B2 (en) | 2010-03-30 | 2015-09-08 | Qualcomm Incorporated | Systems, apparatuses, and methods to facilitate coordinated scheduling in wireless communication systems |
US10355996B2 (en) | 2012-10-09 | 2019-07-16 | Netspeed Systems | Heterogeneous channel capacities in an interconnect |
US20140211622A1 (en) * | 2013-01-28 | 2014-07-31 | Netspeed Systems | Creating multiple noc layers for isolation or avoiding noc traffic congestion |
US9130856B2 (en) * | 2013-01-28 | 2015-09-08 | Netspeed Systems | Creating multiple NoC layers for isolation or avoiding NoC traffic congestion |
US9575628B2 (en) | 2013-03-29 | 2017-02-21 | Deere & Company | Icon featured touch screen display system including status shortcuts for a work vehicle and method of managing the same |
WO2014160923A1 (en) * | 2013-03-29 | 2014-10-02 | Deere & Company | Retracting shortcut bars, status shortcuts and edit run page sets |
GB2530916A (en) * | 2013-03-29 | 2016-04-06 | Deere & Co | Retracting shortcut bars, status shortcuts and edit run page sets |
GB2530916B (en) * | 2013-03-29 | 2020-03-25 | Deere & Co | Retracting shortcut bars, status shortcuts and edit run page sets |
US10496770B2 (en) | 2013-07-25 | 2019-12-03 | Netspeed Systems | System level simulation in Network on Chip architecture |
US9590813B1 (en) | 2013-08-07 | 2017-03-07 | Netspeed Systems | Supporting multicast in NoC interconnect |
US10084692B2 (en) | 2013-12-30 | 2018-09-25 | Netspeed Systems, Inc. | Streaming bridge design with host interfaces and network on chip (NoC) layers |
US10110499B2 (en) | 2014-02-20 | 2018-10-23 | Netspeed Systems | QoS in a system with end-to-end flow control and QoS aware buffer allocation |
US9769077B2 (en) | 2014-02-20 | 2017-09-19 | Netspeed Systems | QoS in a system with end-to-end flow control and QoS aware buffer allocation |
US9742630B2 (en) | 2014-09-22 | 2017-08-22 | Netspeed Systems | Configurable router for a network on chip (NoC) |
US10074053B2 (en) | 2014-10-01 | 2018-09-11 | Netspeed Systems | Clock gating for system-on-chip elements |
US9860197B2 (en) | 2015-02-03 | 2018-01-02 | Netspeed Systems, Inc. | Automatic buffer sizing for optimal network-on-chip design |
US9825887B2 (en) | 2015-02-03 | 2017-11-21 | Netspeed Systems | Automatic buffer sizing for optimal network-on-chip design |
US9444702B1 (en) | 2015-02-06 | 2016-09-13 | Netspeed Systems | System and method for visualization of NoC performance based on simulation output |
US9829962B2 (en) | 2015-02-12 | 2017-11-28 | Netspeed Systems, Inc. | Hardware and software enabled implementation of power profile management instructions in system on chip |
US9928204B2 (en) | 2015-02-12 | 2018-03-27 | Netspeed Systems, Inc. | Transaction expansion for NoC simulation and NoC design |
US9568970B1 (en) | 2015-02-12 | 2017-02-14 | Netspeed Systems, Inc. | Hardware and software enabled implementation of power profile management instructions in system on chip |
US10218581B2 (en) | 2015-02-18 | 2019-02-26 | Netspeed Systems | Generation of network-on-chip layout based on user specified topological constraints |
US10348563B2 (en) | 2015-02-18 | 2019-07-09 | Netspeed Systems, Inc. | System-on-chip (SoC) optimization through transformation and generation of a network-on-chip (NoC) topology |
US10050843B2 (en) | 2015-02-18 | 2018-08-14 | Netspeed Systems | Generation of network-on-chip layout based on user specified topological constraints |
US9825809B2 (en) | 2015-05-29 | 2017-11-21 | Netspeed Systems | Dynamically configuring store-and-forward channels and cut-through channels in a network-on-chip |
US9864728B2 (en) | 2015-05-29 | 2018-01-09 | Netspeed Systems, Inc. | Automatic generation of physically aware aggregation/distribution networks |
US10218580B2 (en) | 2015-06-18 | 2019-02-26 | Netspeed Systems | Generating physically aware network-on-chip design from a physical system-on-chip specification |
US10613616B2 (en) | 2016-09-12 | 2020-04-07 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10564703B2 (en) | 2016-09-12 | 2020-02-18 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10564704B2 (en) | 2016-09-12 | 2020-02-18 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10452124B2 (en) | 2016-09-12 | 2019-10-22 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10749811B2 (en) | 2016-12-02 | 2020-08-18 | Netspeed Systems, Inc. | Interface virtualization and fast path for Network on Chip |
US10735335B2 (en) | 2016-12-02 | 2020-08-04 | Netspeed Systems, Inc. | Interface virtualization and fast path for network on chip |
US10313269B2 (en) | 2016-12-26 | 2019-06-04 | Netspeed Systems, Inc. | System and method for network on chip construction through machine learning |
US10523599B2 (en) | 2017-01-10 | 2019-12-31 | Netspeed Systems, Inc. | Buffer sizing of a NoC through machine learning |
US10063496B2 (en) | 2017-01-10 | 2018-08-28 | Netspeed Systems Inc. | Buffer sizing of a NoC through machine learning |
US10084725B2 (en) | 2017-01-11 | 2018-09-25 | Netspeed Systems, Inc. | Extracting features from a NoC for machine learning construction |
US10419300B2 (en) | 2017-02-01 | 2019-09-17 | Netspeed Systems, Inc. | Cost management against requirements for the generation of a NoC |
US10469338B2 (en) | 2017-02-01 | 2019-11-05 | Netspeed Systems, Inc. | Cost management against requirements for the generation of a NoC |
US10469337B2 (en) | 2017-02-01 | 2019-11-05 | Netspeed Systems, Inc. | Cost management against requirements for the generation of a NoC |
US10298485B2 (en) | 2017-02-06 | 2019-05-21 | Netspeed Systems, Inc. | Systems and methods for NoC construction |
US11144457B2 (en) | 2018-02-22 | 2021-10-12 | Netspeed Systems, Inc. | Enhanced page locality in network-on-chip (NoC) architectures |
US10896476B2 (en) | 2018-02-22 | 2021-01-19 | Netspeed Systems, Inc. | Repository of integration description of hardware intellectual property for NoC construction and SoC integration |
US10983910B2 (en) | 2018-02-22 | 2021-04-20 | Netspeed Systems, Inc. | Bandwidth weighting mechanism based network-on-chip (NoC) configuration |
US10547514B2 (en) | 2018-02-22 | 2020-01-28 | Netspeed Systems, Inc. | Automatic crossbar generation and router connections for network-on-chip (NOC) topology generation |
US11023377B2 (en) | 2018-02-23 | 2021-06-01 | Netspeed Systems, Inc. | Application mapping on hardened network-on-chip (NoC) of field-programmable gate array (FPGA) |
US11176302B2 (en) | 2018-02-23 | 2021-11-16 | Netspeed Systems, Inc. | System on chip (SoC) builder |
US11847091B2 (en) * | 2018-12-28 | 2023-12-19 | Lynxi Technologies Co., Ltd. | Data transmission method and device for network on chip and electronic apparatus |
US20220035760A1 (en) * | 2020-07-31 | 2022-02-03 | Alibaba Group Holding Limited | Processing accelerator architectures |
US11409684B2 (en) * | 2020-07-31 | 2022-08-09 | Alibaba Group Holding Limited | Processing accelerator architectures |
US11625341B2 (en) | 2020-08-11 | 2023-04-11 | Alibaba Group Holding Limited | Narrow DRAM channel systems and methods |
EP4006736A1 (en) * | 2020-11-30 | 2022-06-01 | Google LLC | Connecting processors using twisted torus configurations |
US11516087B2 (en) | 2020-11-30 | 2022-11-29 | Google Llc | Connecting processors using twisted torus configurations |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8306042B1 (en) | Class-based deterministic packet routing | |
US8730965B2 (en) | Systems and methods for dynamic routing in a multiprocessor network using local congestion sensing | |
CN113748652A (en) | Algorithm for using load information from neighboring nodes in adaptive routing | |
US8085659B2 (en) | Method and switch for routing data packets in interconnection networks | |
US11228488B2 (en) | Software implementation of network switch/router | |
US8984206B2 (en) | Weightage-based scheduling for hierarchical switching fabrics | |
US20140204764A1 (en) | Qos in heterogeneous noc by assigning weights to noc node channels and using weighted arbitration at noc nodes | |
EP3445007B1 (en) | Routing packets in dimensional order in multidimensional networks | |
Abts et al. | Cray XT4 and Seastar 3-D Torus Interconnect. | |
US10944694B2 (en) | Predictive arbitration circuit | |
US20180287963A1 (en) | Apparatus and method for using multiple multi-drop buses | |
WO2017111780A1 (en) | Apparatus and method for distribution of congestion information in a switch | |
US20180262438A1 (en) | Communication method and zone scheduler and inter-zone scheduling coordinator (izsc) | |
Kumar et al. | A novel non-minimal turn model for highly adaptive routing in 2D NoCs | |
Gliksberg et al. | Node-type-based load-balancing routing for Parallel Generalized Fat-Trees | |
Danashtalab et al. | Basic concepts on on-chip networks | |
CN111771361B (en) | Hierarchical switching device, method and medium for switching packets in hierarchical switching device | |
García et al. | On-the-fly adaptive routing for dragonfly interconnection networks | |
Nia et al. | Deadlock recovery technique in bus enhanced NOC architecture | |
Gómez et al. | A HoL-blocking aware mechanism for selecting the upward path in fat-tree topologies | |
Yebenes et al. | Combining Source-adaptive and Oblivious Routing with Congestion Control in High-performance Interconnects using Hybrid and Direct Topologies | |
Nishikawa et al. | A deadlock-free non-minimal fully adaptive routing using virtual cut-through switching | |
Lei et al. | An Efficient Label Routing on High-Radix Interconnection Networks | |
Wang et al. | An innovative routing scheme to reduce communication delay in DMesh networks | |
Dimitrakopoulos et al. | Baseline Virtual-Channel Based Switching Modules and Routers |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ABTS, DENNIS C.;REEL/FRAME:022865/0393Effective date: 20090618 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20161106 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |