US20180017403A1 - Navigation API for Linking Software Applications - Google Patents
Navigation API for Linking Software Applications Download PDFInfo
- Publication number
- US20180017403A1 US20180017403A1 US15/620,731 US201715620731A US2018017403A1 US 20180017403 A1 US20180017403 A1 US 20180017403A1 US 201715620731 A US201715620731 A US 201715620731A US 2018017403 A1 US2018017403 A1 US 2018017403A1
- Authority
- US
- United States
- Prior art keywords
- software application
- navigation
- user
- travel
- application
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Abandoned
Links
Images
Classifications
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3605—Destination input or retrieval
- G01C21/362—Destination input or retrieval received from an external device or application, e.g. PDA, mobile phone or calendar application
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3626—Details of the output of route guidance instructions
- G01C21/3661—Guidance output on an external device, e.g. car radio
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3667—Display of a road map
- G01C21/3676—Overview of the route on the road map
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/44—Arrangements for executing specific programs
- G06F9/445—Program loading or initiating
- G06F9/44521—Dynamic linking or loading; Link editing at or after load time, e.g. Java class loading
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/547—Remote procedure calls [RPC]; Web services
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/02—Services making use of location information
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W4/00—Services specially adapted for wireless communication networks; Facilities therefor
- H04W4/02—Services making use of location information
- H04W4/024—Guidance services
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3664—Details of the user input interface, e.g. buttons, knobs or sliders, including those provided on a touch screen; remote controllers; input using gestures
-
- G—PHYSICS
- G01—MEASURING; TESTING
- G01C—MEASURING DISTANCES, LEVELS OR BEARINGS; SURVEYING; NAVIGATION; GYROSCOPIC INSTRUMENTS; PHOTOGRAMMETRY OR VIDEOGRAMMETRY
- G01C21/00—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00
- G01C21/26—Navigation; Navigational instruments not provided for in groups G01C1/00 - G01C19/00 specially adapted for navigation in a road network
- G01C21/34—Route searching; Route guidance
- G01C21/36—Input/output arrangements for on-board computers
- G01C21/3667—Display of a road map
- G01C21/3673—Labelling using text of road map data items, e.g. road names, POI names
Definitions
- the present disclosure relates generally to application programming interfaces for providing navigation information.
- Applications implemented on computing devices such as mobile computing devices (e.g., smartphones, tablets, smart watches, etc.) have been developed for a variety of purposes, including business, social, health, and other purposes. These applications can provide a user interface (e.g., a graphical user interface) for presenting information to a user as well as allowing the user to interact with the application.
- Popular applications for mobile computing devices include maps applications that make varied geographic information (e.g., current location information presented on a map) available to users.
- Application programming interfaces can allow applications implemented on computing devices to interact with various services to provide information and functionality to a user.
- Application programming interfaces can provide a tool for developers to easily embed information, programming, services, frameworks, and structures into applications for access by the user.
- a map service provider can provide a maps application programming interface that can be used by third parties to communicate navigation data from the map service provider to an application developed by the third party.
- One example aspect of the present disclosure is directed to a non-transitory computer-readable medium storing computer-readable instructions that implement an application programming interface for linking two or more software applications executed on one or more computing devices.
- the one or more computing devices can include one or more processors and a display device.
- the application programming interface can include instructions for invoking, by a first software application associated with a computing device, a second software application associated with the computing device. The invocation of the second software application causes the second software application to launch on the computing device.
- the second software application is associated with a navigation service for providing navigation information to the user of the computing device.
- the instructions are further for controlling, by the first software application, an interaction of the second software application with a routing engine based at least in part on one or more travel parameters provided to the second software application by the first software application.
- the instructions are further for receiving, by the first software application, travel data associated with the one or more travel parameters. The travel data is determined based at least in part on the interaction of the second software application and the routing engine.
- FIG. 1 depicts an overview of an example system for linking two or more software applications using an application programming interface according to example embodiments of the present disclosure
- FIGS. 2-4 depict example graphical user interfaces associated with software applications linked using a navigation application programming interface according to example embodiments of the present disclosure
- FIG. 5 depicts a block diagram of an example user device implementing a software application according to example embodiments of the present disclosure
- FIGS. 6-7 depicts example implementations of a navigation application programming interface according to example embodiment of the present disclosure.
- FIG. 8 depicts a flow diagram of an example method according to example embodiments of the present disclosure.
- Example aspects of the present disclosure are directed to application programming interfaces (“APIs”) for linking software applications implemented on a user computing device, such as web-based software applications implemented in a browser, locally-stored software applications, and other applications.
- a first software application executed on the user computing device can invoke a second software application via an API call to launch the second software application on the user computing device.
- the first software application can be associated with a separate entity relative to the second software application.
- the API can allow developers to include a linking element within a user interface of the first software application.
- the linking element can be a selectable user interface element (e.g., a button or other user interface element) operable to link the first and second software applications.
- the second software application can be launched on the user computing device and/or brought to the foreground of the user interface of the user computing device.
- the second software application can implement aspects of a navigation service for providing navigation information to a user.
- the second software application 110 can be the Waze ⁇ mobile application developed by Waze Mobile Ltd.
- the second software application can be configured to present navigation information (e.g., through a graphical user interface component or through audio and/or vibratory cues) based on routing information and/or travel data to provide a navigation service the second software application.
- a navigation service can be an application (e.g. a software application) that provides navigation information that can be used to guide a user from an origin and a destination.
- the navigation service embedded in the software application can provide navigation information (e.g., turn-by-turn navigation information) to a user as a user traverses along a navigation route or other path. More particularly, in some embodiments, the navigation service can receive a route directing a user from an origin location (e.g. a current location of the user or other location) to a destination. As one example, the route can include a sequence of steps, each describing a route portion (e.g., name or number of the road, distance, travel time, speed limit) and a maneuver (e.g., left turn, merge right, proceed straight) to access the next route portion.
- the navigation service can provide the route to a user through a graphical user interface and via one or more cues (e.g., audio or video cues) to guide the user from an origin to a destination.
- the API when invoked by the first software application, can permit control of the second software application by the first software application.
- the API can include one or more sets of instructions for controlling an interaction of the second software application with a routing engine implemented by a navigation data provider or other source (e.g., a local source of navigation information).
- the first software application upon an interaction by the user with the linking element within the first software application, can provide one or more travel parameters to the second software application.
- the travel parameters can include a destination location (e.g. latitude, longitude coordinates), a search query, or other suitable travel parameters.
- a user interaction with the linking element can further cause the second software application to launch on the user device, and for the second software application to be brought to the foreground of the user interface associated with the user device. In this manner, the user may view and/or interact with the second software application.
- the travel parameters can be provided by the second software application to the routing engine along with instructions specifying one or more actions to be performed by the routing engine.
- the routing engine can determine travel data associated with the travel parameters.
- the travel data can include routing information, such as one or more travel routes to the destination location, an estimated time and/or distance remaining to an arrival by the user at the destination location (“ETD information”), one or more navigation instructions (e.g. next navigation action instructions, an estimated time and/or distance remaining to the next navigation action, etc.), and/or other suitable travel data.
- the travel data can include a visual representation of the one or more travel routes, such as map data for presentation in conjunction with the route(s) and/or other information.
- the travel data can include one or more search results associated with the search query.
- the routing engine associated with the navigation data provider can be stored locally on the user computing device.
- the routing engine can be associated with one or more remote computing devices, such as one or more web servers.
- the navigation data provider can be associated with a web server that hosts a geographic information system. In this manner, the routing engine can leverage the geographic information system to determine the travel data (e.g. routing information, search results, and/or other suitable travel data).
- the travel data can be received by the second software application, and passed to the first software application via the API.
- the first software application can present at least a portion of the travel data within a user interface of the first software application.
- the first software application can provide for display a visual representation of the one or more travel routes, ETD information, navigation instructions, and/or other suitable travel data.
- the first software application can present the at least a portion of the travel data through audio and/or vibratory cues.
- the API can further allow for developers to implement a linking element within the second software application. For instance, upon a user interaction with the linking element of the first software application, a session between the first and second software applications can be initialized or opened. The open session can signify a coordination of the software application through use of the API. In this manner, when the second software application is launched and brought to the foreground via the API call of the first software application, the second software application can present a linking element within a user interface of the second software application. Similar to the linking element of the first software application, the linking element of the second software application can be a selectable user interface element displayed within the user interface of the second software application.
- a user interaction with the linking element in the second software application can cause the first software application to be brought to the foreground of the user interface of the user computing device, such that the user can view and/or interact with the first software application.
- the linking elements can allow for a simple and efficient way for the user to switch between the first and second software applications.
- one or more API calls may be performed to update the travel data.
- one or more updated travel parameters e.g. updated destination locations and/or search queries
- the first and second software applications can coordinate via the API to update the travel data for presentation by the first software application.
- the updated travel parameters can be provided to the second software application via the API, and the updated travel data (e.g. as determined by the interaction of the second software application and/or the routing engine) can be provided back to the first software application via the API.
- updated travel data can be determined and provided to the first software application via the API.
- a user interaction with the linking element of the second software application can cause the first software application to present the at least a portion of the travel data.
- the first software application in response to a user selection of the linking element of the second software application (e.g. when the second software application is at the foreground of the user interface of the user computing device), the first software application can load and present (e.g. provide for display) the at least a portion of the travel data.
- the first software application can then be brought to the foreground of the user interface of the user computing device, such that the user can view and/or interact with the at least a portion of the travel data as presented by the first software application.
- the at least a portion of the travel data is presented by audio or vibratory cues
- the audio and/or vibratory cues can be provided to the user upon an interaction by the user with the linking element of the second software application.
- the API can include sets of computer-readable instructions that when executed by one or more processors facilitate integration of a navigation experience into a developer's software application.
- the sets of instructions when implemented by one or more processors, can govern interaction by the software application with the navigation data provider via the API as well as the display and/or delivery of navigation information to the user as part of the software application.
- example instructions associated with an API that are facing a developer of a software application can include instructions specifying one or more parameters that govern an invocation of a second software application from within a first software application.
- the API can further include instructions specifying one or more parameters that control the interaction of the second software application with the routing engine provided by the navigation data provider.
- the API can have a technical effect of linking a first and second software application, and facilitating the integration of a navigation experience provided by a navigation data provider associated with the second software application in the first software application.
- the API can allow for the customization of the navigation service for various end use needs, such as for ride sharing applications, shipping/delivery applications, social applications, and other end use applications.
- FIG. 1 depicts an overview of an example system 100 for linking one or more software applications according to example embodiments of the present disclosure.
- the system 100 can include a user device 102 that can receive navigation data from a navigation data provider 104 via a communication network 106 .
- the user device 102 can be, for instance, a smartphone, tablet, wearable device, laptop, desktop, mobile device, device capable of being carried by a user while in operation, display with one or more processors, vehicle system, or other user device.
- a first software application 108 and a second software application 110 can be implemented on the user device 102 .
- the first software application 108 can be, for instance, a mapping application, a browser, a ride share application, an application used to assist with delivery, a social media application or other software application that may need to provide navigation information to a user.
- the second software application 110 can implement a navigation service for providing navigation instructions to a user.
- the software applications 108 , 110 can be stored locally on the user device 102 or can be, for instance, web applications accessed via a web browser implemented on the user device 102 .
- the software applications 108 , 110 can be developed by separate entities.
- the first software application 108 can be developed by a third party entity that is independent of and/or not affiliated with an entity associated the second software application 110 and the navigation data provider 104 .
- the first software application 108 can call a navigation API 112 to invoke the second software application 110 and/or to control an interaction of the second software application 110 with a routing engine 114 associated with the navigation data provider 104 .
- the navigation API 112 can be used by the first software application 108 to cause the second software application 110 to access and provide navigation data from the navigation data provider 114 via the communication network 116 .
- Example aspects of the present disclosure are discussed with accessing data from a remote navigation data provider 114 for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that the API 112 can access data from other sources, such as local sources or applications located on the user device 102 .
- the second software application 110 can be configured to present navigation information (e.g., turn-by-turn navigation information) to a user in real time or near real time as a user or vehicle carrying the user device 102 traverses along a route from an origin to one or more destinations.
- the second software application 110 can include a graphical user interface component for presenting the navigation information to the user on one or more display devices. Additionally or alternatively, the second software application can provide audio guidance or other notifications (e.g., vibratory notifications) to the user indicative of navigation information (e.g., turn-by-turn) directions.
- the navigation API 112 can facilitate an invocation of the second software application 110 by the first software application 108 .
- the invocation can cause the second software application to launch and/or execute on the user device 102 .
- the invocation can further cause the second software application 110 to be brought to the foreground of a user interface of the user device 102 , such that the user can view and/or interact with the second software application 110 .
- the second software application 110 can be launched and brought to the foreground of the user interface responsive to the invocation.
- the second software application 110 is currently running on the user device 102
- the second software application 110 can be brought to the foreground of the user interface responsive to the invocation.
- FIG. 2 depicts an example graphical user interface component 200 of the first software application 108 according to example embodiments of the present disclosure.
- the graphical user interface component 200 can be displayed on a display device of the user device 102 .
- the graphical user interface component can include a plurality of interface elements 202 that provide information associated with the first software application 108 .
- the graphical user interface component 200 can further include a linking element 204 configured to link or otherwise connect the first software application 108 and the second software application 110 .
- the linking element 204 can be a selectable interface element capable of receiving an input by the user.
- the second software application 110 can be launched on the user device 102 and/or brought to the foreground of the user interface of the user device 102 .
- FIG. 3 depicts an example graphical user interface component 206 of the second software application 110 according to example embodiments of the present disclosure.
- the graphical user interface component 206 can be displayed on a display device of the user device 102 .
- the graphical user interface component 200 can include various interface elements that provide navigation information to a user as part of a navigation service.
- the graphical user interface component 206 includes a map 208 as well as a route 210 to a destination location 212 presented on the map 208 .
- the route 210 is displayed on a top down view of the map 208 to provide a route overview.
- data associated with the map 208 , the route 210 , and other navigation information can be obtained from a navigation data provider 114 .
- the data can be obtained responsive to a call to API 112 invoked by the first software application 108 .
- the API 112 call can include or otherwise be associated with one or more travel parameters (e.g. destination location 212 ).
- the second software application 110 can query the navigation data provider 114 for travel data associated with the API 112 call.
- the graphical user interface component 206 can include a linking element 214 .
- the linking element 214 can be selected by the user to return to the first software application 108 (e.g. to bring the first software application 108 to the foreground of the user interface of the user device 102 ).
- the linking element 214 can be presented within the graphical user interface component 206 responsive to the API 112 call by the first software application 108 .
- the linking element 214 can be presented within the graphical user interface component 206 only during an open session between the first software application 108 and the second software application 110 as facilitated by the API 112 .
- the graphical user interface component 206 is intended for illustrative purposes only.
- the second software application 110 can have various other suitable interfaces that present suitable navigation data in a number of manners.
- the second software application may include a navigation mode wherein turn-by-turn instructions associated with the route 210 are presented to the user.
- the second software application 110 may include an interface for presenting navigation data in text form, such as written instructions for traversing route 210 .
- the second software application 110 may include an interface for receiving a search query and presenting search results determined based at least in part on the search query.
- the API 112 can provide an interface between the first software application 108 and the second software application 110 .
- the travel parameters passed to the second software application 110 as part of the API 112 call can be used to automatically determine the travel data (e.g. route 210 , mad data 208 , etc.) through an interaction with the routing engine 114 .
- the routing engine 114 can be configured to, for instance, compute routes to one or more waypoints, access mapping data, update navigation data based on various navigation events, and respond to requests for navigation data from the second software application 110 .
- the navigation data provider 104 can include one or more servers, such as web servers.
- the one or more servers can include one or more processors and one or more memory devices.
- the one or more memory devices can store computer-readable instruction to implement, for instance, the routing engine 114 .
- the routing engine 114 can access data associated, for instance, with a geographic information system 118 .
- the geographic information system 118 can include data that indexed by geographic coordinates of its elements.
- the data associated with the geographic information system 118 can include, for instance, map data, route data, geographic imagery, data associated with various waypoints (e.g., business listing names, addresses, geographic coordinates, etc.), and/or other data.
- the travel data as determined by routing engine 114 can be provided by to the first software application 108 by the second software application 110 via the API 112 .
- the first software application 108 can present the travel data within the user interface of the first software application 108 .
- FIG. 4 depicts example graphical user interface 200 of the first software application.
- graphical user interface component 200 includes a display of travel data 216 .
- travel data 216 can include a visual representation of map 208 and/or route 210 , ETD information, navigation instruction information (e.g. next turn instructions, time to next turn, etc.), one or more search results, and/or other suitable data.
- the second software application 110 can interact with the navigation data provider 114 via the network 116 .
- the network 116 can be any type of communications network, such as a local area network (e.g. intranet), wide area network (e.g. Internet), cellular network, or some combination thereof.
- the network 116 can also include a direct connection.
- communication can be carried via network 116 using any type of wired and/or wireless connection, using a variety of communication protocols (e.g. TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g. HTML, XML), and/or protection schemes (e.g. VPN, secure HTTP, SSL).
- FIG. 5 depicts an example user device 102 configured to implement a navigation API 112 according to example embodiments of the present disclosure.
- the user device 102 includes an instruction memory 152 , one or more processors 154 configured to execute instructions stored in the memory 152 , a display device 156 , a network interface 158 that supports network communications, and a storage memory 160 .
- the one or more processors 154 can include any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, logic device, or other suitable processing device.
- the instruction memory 152 and the storage memory 160 are illustrated separately. It will be understood, however, that the components 152 and 160 can also be regions within the same memory module.
- the user device 102 can include one or more additional processors, memory devices, network interfaces, which may be provided separately or on a same chip or board.
- the components 152 and 160 can include one or more computer-readable media, including, but not limited to, non-transitory computer-readable media, RAM, ROM, hard drives, flash drives, or other memory devices.
- the instruction memory 52 can store sets of instructions of an operating system (OS) 170 , a navigation API 130 , and a first software application 108 and a second software application 110 .
- the OS 170 can be a mobile OS developed specifically for mobile devices.
- the OS 170 can include functions that allow the software application to access data such as wireless network parameters (e.g., identity of the wireless network, quality of service), as well as invoke such services as telephony, location determination (e.g., via global positioning service (GPS) or WLAN), wireless network data call origination, etc.
- the OS 170 is a general-purpose operating system that operates on both mobile and stationary devices, such as smartphones and desktop computers, for example.
- the OS includes or based upon an Android® mobile operating system developed by Google Inc. or other operating system to implement an Android operating platform.
- Android® mobile operating system developed by Google Inc.
- other operating system to implement an Android operating platform.
- other suitable operating systems can be used without deviating from the scope of the present disclosure.
- the first software application 108 can be, for example, a mapping application, a navigation application, ride share application, an application to assist with delivery, a social media application, etc.
- the second software application 110 can provide a navigation experience from a navigation service.
- the software applications 108 , 110 can be native applications or web-based applications.
- the first software application 108 can perform a call to API 112 to invoke the second software application 110 .
- the navigation API 112 can be made available to any suitable software application that executes on the user device 102 . Also, multiple different software applications may invoke the navigation API 112 .
- the user device can include a positioning system.
- the positioning system can include one or more devices or circuitry for determining the position of a device.
- the positioning device can determine actual or relative position by using a satellite navigation positioning system (e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system), an inertial navigation system, a dead reckoning system, based on IP address, by using triangulation and/or proximity to cellular towers or WiFi hotspots, beacons, and the like and/or other suitable techniques for determining position.
- the positioning system can determine a user location of the user device. The user location can be provided to the navigation data provider 104 for use by the navigation data provider in determining travel data associated with the user device 102 .
- the navigation API 112 can be implemented as one or several functions, a data structure, etc. Further, the API 112 may include compiled code that executes directly on the processor(s) 154 or, alternatively, instructions in any other form such as a scripting language interpreted at runtime by the applications 108 , 110 .
- the API 112 in one example implementation includes well-documented prototypes of several functions which a developer can include in the code of the software applications 108 , 110 , as well as instructions that implement these functions.
- the API 112 can be provided to the developer as a static library.
- FIG. 6 depicts a block diagram of example sets of instructions that a developer can user to configure a navigation API 112 according to example embodiments of the present disclosure.
- the sets of instructions can include an initialization function 302 , open session functions 304 , terminate session functions 306 , and various instructions 308 .
- the instructions depicted in FIG. 6 can be used to implement the API 112 in an Android operating system. Such Android implementation can be based on a Messenger Object technique.
- API 112 can create an asymmetric key for the session, and send it to the second software application 110 .
- data provided by the second software application 110 e.g. travel data
- the first software application 108 will then be able to decrypt the data based on a one-way encryption method.
- the initialization function 302 can be used to initialize the API with the second software application 110 , bind the API 112 , and cause the second software application 110 to launch (e.g. responsive to a user interaction with the linking element 204 ).
- the initialization function can further be used to navigate or search with the second software application 110 (e.g. via an interaction with the routing engine 114 ), and to receive travel data from the second software application 110 .
- the initialization function 302 e.g. initSDK
- initSDK can be implemented as follows:
- the initialization function 302 can be used to pass the travel parameters (e.g. double lat, double lon, string query, etc.) to the second software application 110 .
- the travel parameters along with other suitable data (e.g. user location data) can be provided to routing engine 114 for determination of suitable travel data.
- the initialization function 302 can be used to open a session between the first application 108 and the second application 110 .
- the open session can allow for communication between the first application 108 and the second application 110 via the API 112 .
- one or more open session functions 304 can be called to facilitate a determination of updated travel data.
- the open session functions 304 can include a new destination function.
- the new destination function can be used to provide a new destination location during an open session for which a route should be determined.
- the new destination function can be implemented as follows:
- the open session functions 304 can include a new search query function.
- the new search query function can be used to provide a new search query during an open session for which new search results should be determined.
- the new search query function can be implemented as follows:
- An open session can be terminated using the terminate session function 306 .
- the terminate session function can be used to terminate the connection between first application 108 and the second application 110 .
- the API 112 can further include further instructions 308 that can be used to implement various other functions.
- instructions 308 can include a get App version function that can be used to receive a version number of the second software application. It will be appreciated that instructions 308 can further include various other suitable functions.
- the API 112 displayed in FIG. 6 can be implemented using a Messenger Object technique.
- a developer can create a messenger object and can implement a messenger handler, such that data communicated between the applications can be parsed after decryption.
- messenger handler such that data communicated between the applications can be parsed after decryption.
- such techniques can be implemented as follows:
- a developer can create a pending intent for the second software application 110 to call responsive to a user interaction with the linking element within the second software application.
- Such pending intent can be used to return to the first software application 108 .
- such technique can be implemented as follows:
- mCurrentActivity PendingIntent.getActivity(this , 01, intent, PendingIntent.FLAG_UPDATE_CURRENT);
- a developer can implement the initialization function 302 to initialize the API with the travel parameters, and to navigate to the destination location as follows:
- the travel data provided by the second software application 110 to the first software application 108 can be include various messages as the user traverses the travel route.
- the messages can be periodically provided to the second software application 110 by the routing engine 114 to reflect updated travel data as the user travels along the route.
- Such messages can include messages for distance to the next navigation action to be taken by the user (e.g. a numeric value of distance in meters), an estimated time of arrival at the destination location (e.g. a numeric value of estimated time of arrival in minutes), a connection status (e.g. a Boolean value of true when connected and false when disconnected), and route geometry data (e.g. in a GeoJSON format), and next action instructions (e.g. a numeric value).
- the next action instructions can an enumeration of the navigation action types as follows:
- FIG. 7 depicts another example implementation of the API 112 .
- the API 112 depicted in FIG. 7 can be configured for implementation in an iOS® mobile operating system developed by Apple Inc.
- Such implementation depicted in FIG. 7 can be based on an URL scheme technique for initializing the second software application 110 from the first software application 108 .
- Communication between the first software application 108 and the second software application 110 can be performed using encrypted bi-directional messaging techniques.
- the API 112 can be configured to encapsulate the communication, and to provide the first software application 108 a framework for simple integration.
- the API 112 can include a transport class 310 and a transport delegate 312 .
- the transport class 310 can be the main class, and can be used to initialize a session between the first software application 108 and the second software application 110 .
- the transport class 310 can further be used to launch the second software application (e.g. responsive to a user interaction with the linking element 204 of the first software application 108 ) with a destination location for which a route is to be determined.
- the transport class 310 can use a shared instance design pattern.
- Transport class 310 can include one or more functions 314 .
- the one or more functions can include one or more initialization functions (e.g.
- a navigation initialization function and a query initialization function a navigation initialization function and a query initialization function
- one or more open session functions e.g. a new address function, a new query function, a stop navigation function, a linking function, and/or other functions
- a terminate session function e.g. a new address function, a new query function, a stop navigation function, a linking function, and/or other functions
- the navigation initialization function can be used to initialize a session, launch the second software application 110 , and begin navigating to the specified destination location.
- the navigation initialization function e.g. startWithLocation
- startWithLocation can be implemented as follows:
- the query initialization function can be used to initialize a session and launch the second software application 110 .
- the function can further be used to return search results associated with a search query (e.g. an address query).
- a search query e.g. an address query.
- the query initialization function e.g. startWithAddressQuery
- startWithAddressQuery can be implemented as follows:
- the new address function can be used to update the second software application with a new destination location during an open session, and to begin navigating to the new destination location.
- the new address function e.g. setLocation
- setLocation can be implemented as follows:
- the new query function can be used to update the second software application 110 with a new address query or other search query, and to receive new search results for the new query.
- the new query function e.g. setAddressQuery
- setAddressQuery can be implemented as follows:
- the stop navigation function can be used to stop navigation during an open session, and can be implemented as follows:
- the linking function can be used to return to the first software application 108 from within the second software application 110 .
- the linking function e.g. sendReturnRequest
- sendReturnRequest can be implemented as follows:
- the terminate session function can be used to terminate an open session between the first software application 108 and the second software application 110 .
- the terminate session function can be implemented as follows:
- Transport delegate 312 can include one or more delegate functions 316 .
- developers can implement delegates to act on behalf of, or in coordination with, one or more other objects when the one or more other objects encounter events in a program.
- transport delegate 312 can coordinate with transport class 310 to implement example aspects of the present disclosure. More particularly, transport delegate 312 can be used to receive messages from the second software application 110 .
- the transport delegate 312 and the delegate function 316 can be implemented as follows:
- the API 112 can be implemented within the first software application 108 and/or the second software application 110 as follows:
- the travel data communicated to the first software application 108 by the second software application 110 can include one or more messages.
- the message types can include next action distance messages (e.g. numeric value of distance in meters), time to destination messages (e.g. numeric value of ETA in seconds), route geometry (e.g. GeoJSON format), exit number messages (e.g. numeric value, roundabout exit number for roundabout without turn instruction), and next action messages (e.g. numeric value, enumeration of the type described below):
- the API 112 can include one or more modes of operation.
- the API 112 can include a “with data” mode wherein the API can be configured to permit the communication of travel data to the first software application 108 .
- the “with data” mode can further allow for the linking elements 204 , 214 to enable switching between the applications.
- the API 112 can further include a “without data” mode, wherein the travel data is not communicated to the first software application 108 .
- the “without data” mode can include the linking elements 204 , 214 for switching between the applications. In this manner, the first software application 108 will not display travel data when associated with the API 112 while in the “without data” mode.
- FIG. 7 depicts a flow diagram of one example method ( 400 ) of linking one or more software applications using a navigation API according to example embodiments of the present disclosure.
- the method ( 400 ) can be implemented using, for instance, the API 112 depicted in FIGS. 5 and 6 .
- FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure.
- the method can include accessing and incorporating data (e.g., files) associated with the navigation API 112 into the first software application 108 .
- data e.g., files
- a user can download files associated with the navigation API 112 , for instance, over a network (e.g., the Internet) and can provide the navigation API files into a subdirectory under a gradle root associated with the software application.
- Libraries associated with the navigation API 112 and third-party dependencies can be added to the software application.
- an access key for enabling the navigation API 112 can be obtained.
- the access key can be obtained from the navigation data provider.
- the access key can be added to the first software application 108 , for instance, to the androidmanifest.xml associated with the software application.
- the developer can initialize the API 112 .
- the developer can implement an initialization function using one or more of the API 112 implementations as described above.
- the developer can implement a linking element within the first software application 108 .
- the linking element can be a selectable user interface element operable to initialize a session between the first software application 108 and the second software application 110 , and to launch the second software application via the navigation API 112 .
- the developer can configure the first software application 108 to call the API 112 initialization function(s) responsive to a user interaction with the linking element.
- the developer can implement API 112 to control and configure the navigation service as shown at ( 408 ). For example, various functions can be specified to determine travel parameters (e.g. destination location, search query, etc.) to be provided to the second software application 110 . In this manner, the travel parameters can be provided by calling one or more initialization functions and/or one or more open session functions associated with the API 112 .
- the method can include building and testing the first software application 108 with the coordination and communication between the second software application 110 and the navigation service associated with the second software application 110 .
- server processes discussed herein may be implemented using a single server or multiple servers working in combination.
- Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.
Abstract
Description
- The present application is based on and claims priority to U.S. Provisional Application 62/361,218 having a filing date of Jul. 12, 2016, which is incorporated by reference herein.
- The present disclosure relates generally to application programming interfaces for providing navigation information.
- Applications implemented on computing devices, such as mobile computing devices (e.g., smartphones, tablets, smart watches, etc.) have been developed for a variety of purposes, including business, social, health, and other purposes. These applications can provide a user interface (e.g., a graphical user interface) for presenting information to a user as well as allowing the user to interact with the application. Popular applications for mobile computing devices include maps applications that make varied geographic information (e.g., current location information presented on a map) available to users.
- Application programming interfaces can allow applications implemented on computing devices to interact with various services to provide information and functionality to a user. Application programming interfaces can provide a tool for developers to easily embed information, programming, services, frameworks, and structures into applications for access by the user. For example, a map service provider can provide a maps application programming interface that can be used by third parties to communicate navigation data from the map service provider to an application developed by the third party.
- Aspects and advantages of embodiments of the present disclosure will be set forth in part in the following description, or may be learned from the description, or may be learned through practice of the embodiments.
- One example aspect of the present disclosure is directed to a non-transitory computer-readable medium storing computer-readable instructions that implement an application programming interface for linking two or more software applications executed on one or more computing devices. The one or more computing devices can include one or more processors and a display device. The application programming interface can include instructions for invoking, by a first software application associated with a computing device, a second software application associated with the computing device. The invocation of the second software application causes the second software application to launch on the computing device. The second software application is associated with a navigation service for providing navigation information to the user of the computing device. The instructions are further for controlling, by the first software application, an interaction of the second software application with a routing engine based at least in part on one or more travel parameters provided to the second software application by the first software application. The instructions are further for receiving, by the first software application, travel data associated with the one or more travel parameters. The travel data is determined based at least in part on the interaction of the second software application and the routing engine.
- Other example aspects of the present disclosure are directed to computer-implemented methods, systems, apparatus, tangible, non-transitory computer-readable media, user interfaces, memory devices, and electronic devices for implementing a navigation API to link two or more software applications.
- These and other features, aspects and advantages of various embodiments will become better understood with reference to the following description and appended claims. The accompanying drawings, which are incorporated in and constitute a part of this specification, illustrate embodiments of the present disclosure and, together with the description, serve to explain the related principles.
- Detailed discussion of embodiments directed to one of ordinary skill in the art are set forth in the specification, which makes reference to the appended figures, in which:
-
FIG. 1 depicts an overview of an example system for linking two or more software applications using an application programming interface according to example embodiments of the present disclosure; -
FIGS. 2-4 depict example graphical user interfaces associated with software applications linked using a navigation application programming interface according to example embodiments of the present disclosure; -
FIG. 5 depicts a block diagram of an example user device implementing a software application according to example embodiments of the present disclosure; -
FIGS. 6-7 depicts example implementations of a navigation application programming interface according to example embodiment of the present disclosure; and -
FIG. 8 depicts a flow diagram of an example method according to example embodiments of the present disclosure. - Reference now will be made in detail to embodiments, one or more examples of which are illustrated in the drawings. Each example is provided by way of explanation of the embodiments, not limitation of the present disclosure. In fact, it will be apparent to those skilled in the art that various modifications and variations can be made to the embodiments without departing from the scope or spirit of the present disclosure. For instance, features illustrated or described as part of one embodiment can be used with another embodiment to yield a still further embodiment. Thus, it is intended that aspects of the present disclosure cover such modifications and variations.
- Example aspects of the present disclosure are directed to application programming interfaces (“APIs”) for linking software applications implemented on a user computing device, such as web-based software applications implemented in a browser, locally-stored software applications, and other applications. For instance, a first software application executed on the user computing device can invoke a second software application via an API call to launch the second software application on the user computing device. The first software application can be associated with a separate entity relative to the second software application. In some embodiments, the API can allow developers to include a linking element within a user interface of the first software application. The linking element can be a selectable user interface element (e.g., a button or other user interface element) operable to link the first and second software applications. For instance, upon an interaction with the linking element by a user of the first software application, the second software application can be launched on the user computing device and/or brought to the foreground of the user interface of the user computing device.
- The second software application can implement aspects of a navigation service for providing navigation information to a user. In some implementations, the
second software application 110 can be the Waze© mobile application developed by Waze Mobile Ltd. For instance, the second software application can be configured to present navigation information (e.g., through a graphical user interface component or through audio and/or vibratory cues) based on routing information and/or travel data to provide a navigation service the second software application. A navigation service can be an application (e.g. a software application) that provides navigation information that can be used to guide a user from an origin and a destination. In some embodiments, the navigation service embedded in the software application can provide navigation information (e.g., turn-by-turn navigation information) to a user as a user traverses along a navigation route or other path. More particularly, in some embodiments, the navigation service can receive a route directing a user from an origin location (e.g. a current location of the user or other location) to a destination. As one example, the route can include a sequence of steps, each describing a route portion (e.g., name or number of the road, distance, travel time, speed limit) and a maneuver (e.g., left turn, merge right, proceed straight) to access the next route portion. The navigation service can provide the route to a user through a graphical user interface and via one or more cues (e.g., audio or video cues) to guide the user from an origin to a destination. - The API, when invoked by the first software application, can permit control of the second software application by the first software application. For instance, in implementations wherein the second software application is associated with a navigation service, the API can include one or more sets of instructions for controlling an interaction of the second software application with a routing engine implemented by a navigation data provider or other source (e.g., a local source of navigation information). In such implementations, upon an interaction by the user with the linking element within the first software application, the first software application can provide one or more travel parameters to the second software application. The travel parameters can include a destination location (e.g. latitude, longitude coordinates), a search query, or other suitable travel parameters. As indicated, in some implementations, a user interaction with the linking element can further cause the second software application to launch on the user device, and for the second software application to be brought to the foreground of the user interface associated with the user device. In this manner, the user may view and/or interact with the second software application.
- The travel parameters can be provided by the second software application to the routing engine along with instructions specifying one or more actions to be performed by the routing engine. The routing engine can determine travel data associated with the travel parameters. For instance, the travel data can include routing information, such as one or more travel routes to the destination location, an estimated time and/or distance remaining to an arrival by the user at the destination location (“ETD information”), one or more navigation instructions (e.g. next navigation action instructions, an estimated time and/or distance remaining to the next navigation action, etc.), and/or other suitable travel data. In some implementations, the travel data can include a visual representation of the one or more travel routes, such as map data for presentation in conjunction with the route(s) and/or other information. As another example, when the travel parameters are associated with a search query by the user, the travel data can include one or more search results associated with the search query.
- At least a portion of the routing engine associated with the navigation data provider can be stored locally on the user computing device. In some implementations, the routing engine can be associated with one or more remote computing devices, such as one or more web servers. For instance, the navigation data provider can be associated with a web server that hosts a geographic information system. In this manner, the routing engine can leverage the geographic information system to determine the travel data (e.g. routing information, search results, and/or other suitable travel data).
- The travel data can be received by the second software application, and passed to the first software application via the API. The first software application can present at least a portion of the travel data within a user interface of the first software application. For instance, the first software application can provide for display a visual representation of the one or more travel routes, ETD information, navigation instructions, and/or other suitable travel data. In some implementations, the first software application can present the at least a portion of the travel data through audio and/or vibratory cues.
- The API can further allow for developers to implement a linking element within the second software application. For instance, upon a user interaction with the linking element of the first software application, a session between the first and second software applications can be initialized or opened. The open session can signify a coordination of the software application through use of the API. In this manner, when the second software application is launched and brought to the foreground via the API call of the first software application, the second software application can present a linking element within a user interface of the second software application. Similar to the linking element of the first software application, the linking element of the second software application can be a selectable user interface element displayed within the user interface of the second software application. In this manner, a user interaction with the linking element in the second software application can cause the first software application to be brought to the foreground of the user interface of the user computing device, such that the user can view and/or interact with the first software application. In this manner, the linking elements can allow for a simple and efficient way for the user to switch between the first and second software applications.
- During an open session between the first and second software applications, one or more API calls may be performed to update the travel data. For instance, during an open session, one or more updated travel parameters (e.g. updated destination locations and/or search queries) can be specified by the user through an interaction by the user with the first or second software applications. In this manner, during the open session, the first and second software applications can coordinate via the API to update the travel data for presentation by the first software application. As an example, if the user specifies one or more update travel parameters from within the first software application during an open session, the updated travel parameters can be provided to the second software application via the API, and the updated travel data (e.g. as determined by the interaction of the second software application and/or the routing engine) can be provided back to the first software application via the API. As another example, if the user specifies one or more updated travel parameters from within the second software application during an open session, updated travel data can be determined and provided to the first software application via the API.
- In some implementations, a user interaction with the linking element of the second software application can cause the first software application to present the at least a portion of the travel data. For instance, in response to a user selection of the linking element of the second software application (e.g. when the second software application is at the foreground of the user interface of the user computing device), the first software application can load and present (e.g. provide for display) the at least a portion of the travel data. The first software application can then be brought to the foreground of the user interface of the user computing device, such that the user can view and/or interact with the at least a portion of the travel data as presented by the first software application. In implementations wherein the at least a portion of the travel data is presented by audio or vibratory cues, the audio and/or vibratory cues can be provided to the user upon an interaction by the user with the linking element of the second software application.
- In this manner, according to particular aspects of the present disclosure, the API can include sets of computer-readable instructions that when executed by one or more processors facilitate integration of a navigation experience into a developer's software application. The sets of instructions, when implemented by one or more processors, can govern interaction by the software application with the navigation data provider via the API as well as the display and/or delivery of navigation information to the user as part of the software application.
- More particularly, example instructions associated with an API that are facing a developer of a software application can include instructions specifying one or more parameters that govern an invocation of a second software application from within a first software application. The API can further include instructions specifying one or more parameters that control the interaction of the second software application with the routing engine provided by the navigation data provider.
- In this way, the API according to example embodiments of the present disclosure can have a technical effect of linking a first and second software application, and facilitating the integration of a navigation experience provided by a navigation data provider associated with the second software application in the first software application. The API can allow for the customization of the navigation service for various end use needs, such as for ride sharing applications, shipping/delivery applications, social applications, and other end use applications.
- With reference now to the figures, example aspects of the present disclosure will be disclosed in greater detail. For instance,
FIG. 1 depicts an overview of anexample system 100 for linking one or more software applications according to example embodiments of the present disclosure. Thesystem 100 can include auser device 102 that can receive navigation data from anavigation data provider 104 via acommunication network 106. Theuser device 102 can be, for instance, a smartphone, tablet, wearable device, laptop, desktop, mobile device, device capable of being carried by a user while in operation, display with one or more processors, vehicle system, or other user device. - A
first software application 108 and asecond software application 110 can be implemented on theuser device 102. Thefirst software application 108 can be, for instance, a mapping application, a browser, a ride share application, an application used to assist with delivery, a social media application or other software application that may need to provide navigation information to a user. Thesecond software application 110 can implement a navigation service for providing navigation instructions to a user. Thesoftware applications user device 102 or can be, for instance, web applications accessed via a web browser implemented on theuser device 102. In some embodiments, thesoftware applications first software application 108 can be developed by a third party entity that is independent of and/or not affiliated with an entity associated thesecond software application 110 and thenavigation data provider 104. - The
first software application 108 can call anavigation API 112 to invoke thesecond software application 110 and/or to control an interaction of thesecond software application 110 with arouting engine 114 associated with thenavigation data provider 104. In this manner, thenavigation API 112 can be used by thefirst software application 108 to cause thesecond software application 110 to access and provide navigation data from thenavigation data provider 114 via the communication network 116. Example aspects of the present disclosure are discussed with accessing data from a remotenavigation data provider 114 for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that theAPI 112 can access data from other sources, such as local sources or applications located on theuser device 102. - The
second software application 110 can be configured to present navigation information (e.g., turn-by-turn navigation information) to a user in real time or near real time as a user or vehicle carrying theuser device 102 traverses along a route from an origin to one or more destinations. Thesecond software application 110 can include a graphical user interface component for presenting the navigation information to the user on one or more display devices. Additionally or alternatively, the second software application can provide audio guidance or other notifications (e.g., vibratory notifications) to the user indicative of navigation information (e.g., turn-by-turn) directions. - According to example embodiments of the present disclosure, the
navigation API 112 can facilitate an invocation of thesecond software application 110 by thefirst software application 108. The invocation can cause the second software application to launch and/or execute on theuser device 102. The invocation can further cause thesecond software application 110 to be brought to the foreground of a user interface of theuser device 102, such that the user can view and/or interact with thesecond software application 110. For instance, if thesecond software application 110 is not currently running on theuser device 102, thesecond software application 110 can be launched and brought to the foreground of the user interface responsive to the invocation. If thesecond software application 110 is currently running on theuser device 102, thesecond software application 110 can be brought to the foreground of the user interface responsive to the invocation. - The invocation can occur responsive to a user interaction with a linking element displayed within a user interface of the
first software application 108. For instance,FIG. 2 depicts an example graphicaluser interface component 200 of thefirst software application 108 according to example embodiments of the present disclosure. The graphicaluser interface component 200 can be displayed on a display device of theuser device 102. The graphical user interface component can include a plurality ofinterface elements 202 that provide information associated with thefirst software application 108. - The graphical
user interface component 200 can further include a linkingelement 204 configured to link or otherwise connect thefirst software application 108 and thesecond software application 110. As indicated the linkingelement 204 can be a selectable interface element capable of receiving an input by the user. Upon a user interaction with linkingelement 204, thesecond software application 110 can be launched on theuser device 102 and/or brought to the foreground of the user interface of theuser device 102. -
FIG. 3 depicts an example graphicaluser interface component 206 of thesecond software application 110 according to example embodiments of the present disclosure. The graphicaluser interface component 206 can be displayed on a display device of theuser device 102. The graphicaluser interface component 200 can include various interface elements that provide navigation information to a user as part of a navigation service. As shown inFIG. 2 , the graphicaluser interface component 206 includes amap 208 as well as aroute 210 to adestination location 212 presented on themap 208. Theroute 210 is displayed on a top down view of themap 208 to provide a route overview. - According to example embodiments of the present disclosure, data associated with the
map 208, theroute 210, and other navigation information can be obtained from anavigation data provider 114. As will be described in more detail below, the data can be obtained responsive to a call toAPI 112 invoked by thefirst software application 108. For instance, theAPI 112 call can include or otherwise be associated with one or more travel parameters (e.g. destination location 212). Responsive to receiving the travel parameters and/or theAPI 112 call from thefirst software application 108, thesecond software application 110 can query thenavigation data provider 114 for travel data associated with theAPI 112 call. - Similar to the graphical
user interface component 200 associated with thefirst software application 108, the graphicaluser interface component 206 can include a linkingelement 214. The linkingelement 214 can be selected by the user to return to the first software application 108 (e.g. to bring thefirst software application 108 to the foreground of the user interface of the user device 102). In some implementations, the linkingelement 214 can be presented within the graphicaluser interface component 206 responsive to theAPI 112 call by thefirst software application 108. For instance, the linkingelement 214 can be presented within the graphicaluser interface component 206 only during an open session between thefirst software application 108 and thesecond software application 110 as facilitated by theAPI 112. - It will be appreciated that the graphical
user interface component 206 is intended for illustrative purposes only. In particular, it will be appreciated that thesecond software application 110 can have various other suitable interfaces that present suitable navigation data in a number of manners. For instance, the second software application may include a navigation mode wherein turn-by-turn instructions associated with theroute 210 are presented to the user. As another example, thesecond software application 110 may include an interface for presenting navigation data in text form, such as written instructions for traversingroute 210. As yet another example, thesecond software application 110 may include an interface for receiving a search query and presenting search results determined based at least in part on the search query. - Referring back to
FIG. 1 , theAPI 112 can provide an interface between thefirst software application 108 and thesecond software application 110. In this manner, the travel parameters passed to thesecond software application 110 as part of theAPI 112 call can be used to automatically determine the travel data (e.g.route 210,mad data 208, etc.) through an interaction with therouting engine 114. Therouting engine 114 can be configured to, for instance, compute routes to one or more waypoints, access mapping data, update navigation data based on various navigation events, and respond to requests for navigation data from thesecond software application 110. In some embodiments, thenavigation data provider 104 can include one or more servers, such as web servers. The one or more servers can include one or more processors and one or more memory devices. The one or more memory devices can store computer-readable instruction to implement, for instance, therouting engine 114. In some embodiments, therouting engine 114 can access data associated, for instance, with a geographic information system 118. The geographic information system 118 can include data that indexed by geographic coordinates of its elements. The data associated with the geographic information system 118 can include, for instance, map data, route data, geographic imagery, data associated with various waypoints (e.g., business listing names, addresses, geographic coordinates, etc.), and/or other data. - The travel data as determined by routing
engine 114 can be provided by to thefirst software application 108 by thesecond software application 110 via theAPI 112. In some implementations, thefirst software application 108 can present the travel data within the user interface of thefirst software application 108. For instance,FIG. 4 depicts examplegraphical user interface 200 of the first software application. As shown, graphicaluser interface component 200 includes a display oftravel data 216. In various implementations,travel data 216 can include a visual representation ofmap 208 and/orroute 210, ETD information, navigation instruction information (e.g. next turn instructions, time to next turn, etc.), one or more search results, and/or other suitable data. - The
second software application 110 can interact with thenavigation data provider 114 via the network 116. The network 116 can be any type of communications network, such as a local area network (e.g. intranet), wide area network (e.g. Internet), cellular network, or some combination thereof. The network 116 can also include a direct connection. In general, communication can be carried via network 116 using any type of wired and/or wireless connection, using a variety of communication protocols (e.g. TCP/IP, HTTP, SMTP, FTP), encodings or formats (e.g. HTML, XML), and/or protection schemes (e.g. VPN, secure HTTP, SSL). -
FIG. 5 depicts anexample user device 102 configured to implement anavigation API 112 according to example embodiments of the present disclosure. As shown, theuser device 102 includes aninstruction memory 152, one ormore processors 154 configured to execute instructions stored in thememory 152, adisplay device 156, anetwork interface 158 that supports network communications, and astorage memory 160. The one ormore processors 154 can include any suitable processing device, such as a microprocessor, microcontroller, integrated circuit, logic device, or other suitable processing device. For clarity, theinstruction memory 152 and thestorage memory 160 are illustrated separately. It will be understood, however, that thecomponents user device 102 can include one or more additional processors, memory devices, network interfaces, which may be provided separately or on a same chip or board. Thecomponents - The instruction memory 52 can store sets of instructions of an operating system (OS) 170, a navigation API 130, and a
first software application 108 and asecond software application 110. The OS 170 can be a mobile OS developed specifically for mobile devices. As such, the OS 170 can include functions that allow the software application to access data such as wireless network parameters (e.g., identity of the wireless network, quality of service), as well as invoke such services as telephony, location determination (e.g., via global positioning service (GPS) or WLAN), wireless network data call origination, etc. In other implementations, the OS 170 is a general-purpose operating system that operates on both mobile and stationary devices, such as smartphones and desktop computers, for example. In some example implementations, the OS includes or based upon an Android® mobile operating system developed by Google Inc. or other operating system to implement an Android operating platform. However, other suitable operating systems can be used without deviating from the scope of the present disclosure. - The
first software application 108 can be, for example, a mapping application, a navigation application, ride share application, an application to assist with delivery, a social media application, etc. Thesecond software application 110 can provide a navigation experience from a navigation service. Thesoftware applications first software application 108 can perform a call toAPI 112 to invoke thesecond software application 110. In general, thenavigation API 112 can be made available to any suitable software application that executes on theuser device 102. Also, multiple different software applications may invoke thenavigation API 112. - In some implementations, the user device can include a positioning system. the positioning system can include one or more devices or circuitry for determining the position of a device. For example, the positioning device can determine actual or relative position by using a satellite navigation positioning system (e.g. a GPS system, a Galileo positioning system, the GLObal Navigation satellite system (GLONASS), the BeiDou Satellite Navigation and Positioning system), an inertial navigation system, a dead reckoning system, based on IP address, by using triangulation and/or proximity to cellular towers or WiFi hotspots, beacons, and the like and/or other suitable techniques for determining position. The positioning system can determine a user location of the user device. The user location can be provided to the
navigation data provider 104 for use by the navigation data provider in determining travel data associated with theuser device 102. - The
navigation API 112 can be implemented as one or several functions, a data structure, etc. Further, theAPI 112 may include compiled code that executes directly on the processor(s) 154 or, alternatively, instructions in any other form such as a scripting language interpreted at runtime by theapplications API 112 in one example implementation includes well-documented prototypes of several functions which a developer can include in the code of thesoftware applications API 112 can be provided to the developer as a static library. -
FIG. 6 depicts a block diagram of example sets of instructions that a developer can user to configure anavigation API 112 according to example embodiments of the present disclosure. The sets of instructions can include aninitialization function 302, open session functions 304, terminate session functions 306, andvarious instructions 308. The instructions depicted inFIG. 6 can be used to implement theAPI 112 in an Android operating system. Such Android implementation can be based on a Messenger Object technique. In such implementation,API 112 can create an asymmetric key for the session, and send it to thesecond software application 110. Once an initial “handshake” is performed between the applications via theAPI 112, data provided by the second software application 110 (e.g. travel data) can be encrypted using the asymmetric key. Thefirst software application 108 will then be able to decrypt the data based on a one-way encryption method. - The
initialization function 302 can be used to initialize the API with thesecond software application 110, bind theAPI 112, and cause thesecond software application 110 to launch (e.g. responsive to a user interaction with the linking element 204). The initialization function can further be used to navigate or search with the second software application 110 (e.g. via an interaction with the routing engine 114), and to receive travel data from thesecond software application 110. In some implementations, the initialization function 302 (e.g. initSDK) can be implemented as follows: -
public boolean initSDK(Context context, Messenger cbReceivedData, PendingIntent CallbackIntent, double lon, double lat, String query) - boolean for success or failed, if failed, you can check in the logcat for errors under the name “TRANSPORTATION”
-
-
- Context context: Context that the WazeSDKManager will run on
- Messenger cbReceivedData: Messenger object that will receive the data from the Waze app (the messages will be decrypted in WazeSDKManager and transfer to cbReceivedData the decrypted payload)
- PendingIntent CallbackIntent: Intent to be called when clicking on your app button in Waze
- double lon: longitude of the destination to navigate(optional—if query is not null, then it will start search).
- double lat: latitude of the destination to navigate(optional—if query is not null, then it will start search).
- String query: address text for search (optional—might be null for navigate when using lon,lat)
- As indicated, the
initialization function 302 can be used to pass the travel parameters (e.g. double lat, double lon, string query, etc.) to thesecond software application 110. The travel parameters along with other suitable data (e.g. user location data) can be provided torouting engine 114 for determination of suitable travel data. In some implementations, theinitialization function 302 can be used to open a session between thefirst application 108 and thesecond application 110. The open session can allow for communication between thefirst application 108 and thesecond application 110 via theAPI 112. - During an open session, one or more open session functions 304 can be called to facilitate a determination of updated travel data. For instance, the open session functions 304 can include a new destination function. The new destination function can be used to provide a new destination location during an open session for which a route should be determined. In some implementations, the new destination function can be implemented as follows:
- public void driveRequest(double lon, double lat)
- Send a drive message to the Waze app (Note that InitSDK function will navigate when initialize Waze app, so calling again this function will change the route).
This function should be used for new destination in the middle of an open session. -
-
- double lon longitude of the destination to navigate.
- double lat latitude of the destination to navigate.
- Similarly, the open session functions 304 can include a new search query function. The new search query function can be used to provide a new search query during an open session for which new search results should be determined. In some implementations, the new search query function can be implemented as follows:
- public void searchRequest(String query)
- Send a search request message to the Waze app. This function should be used for new
search requests in the middle of an open session. -
-
- String query address text for search
- An open session can be terminated using the terminate
session function 306. The terminate session function can be used to terminate the connection betweenfirst application 108 and thesecond application 110. TheAPI 112 can further includefurther instructions 308 that can be used to implement various other functions. For instance,instructions 308 can include a get App version function that can be used to receive a version number of the second software application. It will be appreciated thatinstructions 308 can further include various other suitable functions. - As indicated above, the
API 112 displayed inFIG. 6 can be implemented using a Messenger Object technique. In some implementations, a developer can create a messenger object and can implement a messenger handler, such that data communicated between the applications can be parsed after decryption. For instance, in a particular embodiment, such techniques can be implemented as follows: -
private final Messenger mActivityMessenger = new Messenger( new MessageHandler(this )); static class MessageHandler extends Handler { private final WeakReference<MainActivity> mActivity ; public MessageHandler(MainActivity activity) { mActivity = new WeakReference<MainActivity>(activity); } @ Override public void handleMessage(Message msg) { int MessageType = msg.what ; WazeSDKManager.Waze_Message message = WazeSDKManager.Waze_Message.values( )[MessageType]; switch (message) { case Waze_Message_CONNECTION_STATUS : { String ConnectedString = msg.getData( ).getString( “STATUS” ); boolean IsConnected = Boolean.valueOf(ConnectedString); break ; } c ase Waze_Message_ETA : { String strETA = msg.getData( ).getString( “ETA_MINUTES” ); break ; } c ase Waze_Message_INSTRUCTION : { String instruction = msg.getData( ).getString( “INSTRUCTION” ); int instructionCode = Integer.valueOf(instruction); break ; } // This message is received only when the instruction is roundabout (this is the exit number) case Waze_Message_INSTRUCTION_EXIT : { String instructionExit = msg.getData( ).getString( “INSTRUCTION_EXIT” ); int instructionCode = Integer.valueOf(instructionExit); Log.e(“Transportation” , “INSTRUCTION EXIT MSG : ” + instructionExit); break ; } case Waze_Message_DISTANCE : { String Distance = msg.getData( ).getString( “DISTANCE_METERS” ); break ; } c ase Waze_Message_ROUTE : { String RouteGeometry = msg.getData( ).getString( “GeoJson” ); break ; } } - In some implementations, a developer can create a pending intent for the
second software application 110 to call responsive to a user interaction with the linking element within the second software application. Such pending intent can be used to return to thefirst software application 108. For instance, such technique can be implemented as follows: -
mCurrentActivity = PendingIntent.getActivity(this , 01, intent, PendingIntent.FLAG_UPDATE_CURRENT); - In some implementations, a developer can implement the
initialization function 302 to initialize the API with the travel parameters, and to navigate to the destination location as follows: -
WazeSDKManager.getInstance( ).InitSDK(privatekey , MainActivity.this , mActivityMessenger , mCurrentActivity, lat, lon); - In some implementations, the travel data provided by the
second software application 110 to thefirst software application 108 can be include various messages as the user traverses the travel route. For instance, the messages can be periodically provided to thesecond software application 110 by therouting engine 114 to reflect updated travel data as the user travels along the route. Such messages can include messages for distance to the next navigation action to be taken by the user (e.g. a numeric value of distance in meters), an estimated time of arrival at the destination location (e.g. a numeric value of estimated time of arrival in minutes), a connection status (e.g. a Boolean value of true when connected and false when disconnected), and route geometry data (e.g. in a GeoJSON format), and next action instructions (e.g. a numeric value). For instance, the next action instructions can an enumeration of the navigation action types as follows: -
public static enum Waze_Instructions_Types { NAV_INSTR_NONE, TURN_LEFT, TURN_RIGHT, KEEP_LEFT, KEEP_RIGHT, CONTINUE_STRAIGHT, ROUNDABOUT_ENTER, ROUNDABOUT_EXIT, ROUNDABOUT_LEFT, ROUNDABOUT_EXIT_LEFT, ROUNDABOUT_STRAIGHT, ROUNDABOUT_EXIT_STRAIGHT, ROUNDABOUT_RIGHT, ROUNDABOUT_EXIT_RIGHT, ROUNDABOUT_U, ROUNDABOUT_EXIT_U, APPROACHING_DESTINATION, EXIT_LEFT, EXIT_RIGHT, WAYPOINT_DELAY, U_TURN, NAV_INSTR_COUNT } -
FIG. 7 depicts another example implementation of theAPI 112. For instance, theAPI 112 depicted inFIG. 7 can be configured for implementation in an iOS® mobile operating system developed by Apple Inc. Such implementation depicted inFIG. 7 can be based on an URL scheme technique for initializing thesecond software application 110 from thefirst software application 108. Communication between thefirst software application 108 and thesecond software application 110 can be performed using encrypted bi-directional messaging techniques. In this manner, theAPI 112 can be configured to encapsulate the communication, and to provide the first software application 108 a framework for simple integration. - As shown in
FIG. 7 , theAPI 112 can include atransport class 310 and atransport delegate 312. Thetransport class 310 can be the main class, and can be used to initialize a session between thefirst software application 108 and thesecond software application 110. Thetransport class 310 can further be used to launch the second software application (e.g. responsive to a user interaction with the linkingelement 204 of the first software application 108) with a destination location for which a route is to be determined. In some implementations, thetransport class 310 can use a shared instance design pattern.Transport class 310 can include one ormore functions 314. For instance, the one or more functions can include one or more initialization functions (e.g. a navigation initialization function and a query initialization function), one or more open session functions (e.g. a new address function, a new query function, a stop navigation function, a linking function, and/or other functions), a terminate session function, and/or other functions. - The navigation initialization function can be used to initialize a session, launch the
second software application 110, and begin navigating to the specified destination location. In some implementations, the navigation initialization function (e.g. startWithLocation) can be implemented as follows: -
(void)startWithLocation :(CLLocation *)location delegate :(id<WazeTransportDelegate>)delegate returnURL :(NSURL *)returnURL Overview Used to initialize the session with Waze app and launch Waze. Will start navigation to specified location. Parameters location : drive destination coordinates delegate : WazeTransportDelegate used to receive messages returnURL : URL scheme of 3rd party app, will be used to return to the app by button. - The query initialization function can be used to initialize a session and launch the
second software application 110. The function can further be used to return search results associated with a search query (e.g. an address query). In some implementations, the query initialization function (e.g. startWithAddressQuery) can be implemented as follows: -
(void)startWithAddressQuery :(NSString*)addressQuery delegate :(id<WazeTransportDelegate>)delegate returnURL :(NSURL *)returnURL Overview Used to initialize the session with Waze app and launch Waze. Will show search results for the provided address query. Parameters addressQuery : destination address delegate : WazeTransportDelegate used to receive messages returnURL : URL scheme of 3rd party app, will be used to return to the app by button. - The new address function can be used to update the second software application with a new destination location during an open session, and to begin navigating to the new destination location. In some implementations, the new address function (e.g. setLocation) can be implemented as follows:
-
(void)setLocation :(CLLocation *)location Overview Update Waze app with new destination. Requires active session. Parameters location : drive destination coordinates - The new query function can be used to update the
second software application 110 with a new address query or other search query, and to receive new search results for the new query. In some implementations, the new query function (e.g. setAddressQuery) can be implemented as follows: -
(void)setAddressQuery :(NSString *)address Overview Update Waze app with new address and show search results. Requires active session. Parameters address : address for search - The stop navigation function can be used to stop navigation during an open session, and can be implemented as follows:
-
-(void)stopNavigation Overview Stops navigation. - The linking function can be used to return to the
first software application 108 from within thesecond software application 110. The linking function (e.g. sendReturnRequest) can be implemented as follows: -
(void)sendReturnRequest Overview If Waze is in foreground, will return to the calling app once receiving this command. - The terminate session function can be used to terminate an open session between the
first software application 108 and thesecond software application 110. The terminate session function can be implemented as follows: -
(void)terminate Overview Terminates the connection to Waze and stops listening to messages -
Transport delegate 312 can include one or more delegate functions 316. As will be understood by those in the art, developers can implement delegates to act on behalf of, or in coordination with, one or more other objects when the one or more other objects encounter events in a program. In this manner,transport delegate 312 can coordinate withtransport class 310 to implement example aspects of the present disclosure. More particularly,transport delegate 312 can be used to receive messages from thesecond software application 110. In some implementations, thetransport delegate 312 and thedelegate function 316 can be implemented as follows: -
@protocol WazeTransportDelegate Overview Use this delegate to receive messages from Waze (void)wazeTransportDidReceiveMessage :(NSDictionary *)message Overview Called whenever new data is available Parameters message: will include one or more key/values from Waze (void)wazeTransportDidUpdateConnection :(BOOL)connected Overview Connection state change. If connection is lost (for example if Waze app was closed), terminate the session and start a new one when app is in foreground. Parameters connected: YES when session connects successfully, NO when connection is lost. (void)wazeTransportDidReceiveWazeVersion :(NSString *)version Overview Once connected, Waze will send version message. Parameters version: The installed Waze version. Details Older Waze clients did not support this feature. To determine if installed Waze supports version reporting, check if the following waze url exists (using canOpenURL): wazeapi2 - Still referring to
FIG. 7 , in a particular implementation, theAPI 112 can be implemented within thefirst software application 108 and/or thesecond software application 110 as follows: -
(void)startWaze { NSURL *url = [NSURL URLWithString:@“transport://”]; //Replace “transport://” with your URL scheme CLLocation *location = [[CLLocation alloc]initWithLatitude:32.196208 longitude:34.878593]; [[WazeTransport sharedInstance] startWithLocation:location delegate:self returnURL:url]; } (void)updateWaze { [[WazeTransport sharedInstance] setLocation:[[CLLocation alloc]initWithLatitude:32.196208 longitude:34.878593]]; } #pragma mark WazeTransportDelegate (void)wazeTransportDidReceiveMessage :(NSDictionary *)message { //Message may include one or more of the following keys NSNumber *distance = message[@“distance”]; NSNumber *instruction = message[@“instruction”]; NSNumber *exitNumber = message[@“exitNumber”]; //used for roundabout NSNumber *ETA = message[@“ETA”]; NSString *geoJSON = message[@“Route”]; } (void)wazeTransportDidUpdateConnection :(BOOL)connected { if (!connected) { //terminate [[WazeTransport sharedInstance] terminate]; //add your code start again by relaunching Waze. } } - As indicated above, the travel data communicated to the
first software application 108 by thesecond software application 110 can include one or more messages. For instance, various message types can be provided. In some implementations, the message types can include next action distance messages (e.g. numeric value of distance in meters), time to destination messages (e.g. numeric value of ETA in seconds), route geometry (e.g. GeoJSON format), exit number messages (e.g. numeric value, roundabout exit number for roundabout without turn instruction), and next action messages (e.g. numeric value, enumeration of the type described below): -
public static enum Waze_Instructions_Types { NAV_INSTR_NONE, TURN_LEFT, TURN_RIGHT, KEEP_LEFT, KEEP_RIGHT, CONTINUE_STRAIGHT, ROUNDABOUT_ENTER, ROUNDABOUT_EXIT, ROUNDABOUT_LEFT, ROUNDABOUT_EXIT_LEFT, ROUNDABOUT_STRAIGHT; ROUNDABOUT_EXIT_STRAIGHT, ROUNDABOUT_RIGHT, ROUNDABOUT_EXIT_RIGHT, ROUNDABOUT_U, ROUNDABOUT_EXIT_U, APPROACHING_DESTINATION, EXIT_LEFT, EXIT_RIGHT, WAYPOINT_DELAY, U_TURN, NAV_INSTR_COUNT } - In some implementations, the
API 112 can include one or more modes of operation. For instance, theAPI 112 can include a “with data” mode wherein the API can be configured to permit the communication of travel data to thefirst software application 108. The “with data” mode can further allow for the linkingelements API 112 can further include a “without data” mode, wherein the travel data is not communicated to thefirst software application 108. The “without data” mode can include the linkingelements first software application 108 will not display travel data when associated with theAPI 112 while in the “without data” mode. -
FIG. 7 depicts a flow diagram of one example method (400) of linking one or more software applications using a navigation API according to example embodiments of the present disclosure. The method (400) can be implemented using, for instance, theAPI 112 depicted inFIGS. 5 and 6 .FIG. 7 depicts steps performed in a particular order for purposes of illustration and discussion. Those of ordinary skill in the art, using the disclosures provided herein, will understand that various steps of any of the methods disclosed herein can be adapted, modified, rearranged, omitted, and/or expanded without deviating from the scope of the present disclosure. - At (402), the method can include accessing and incorporating data (e.g., files) associated with the
navigation API 112 into thefirst software application 108. For instance, a user can download files associated with thenavigation API 112, for instance, over a network (e.g., the Internet) and can provide the navigation API files into a subdirectory under a gradle root associated with the software application. Libraries associated with thenavigation API 112 and third-party dependencies can be added to the software application. - At (404), an access key for enabling the
navigation API 112 can be obtained. In some embodiments, the access key can be obtained from the navigation data provider. The access key can be added to thefirst software application 108, for instance, to the androidmanifest.xml associated with the software application. - At (406), the developer can initialize the
API 112. For instance, the developer can implement an initialization function using one or more of theAPI 112 implementations as described above. In some implementations, the developer can implement a linking element within thefirst software application 108. The linking element can be a selectable user interface element operable to initialize a session between thefirst software application 108 and thesecond software application 110, and to launch the second software application via thenavigation API 112. For instance, the developer can configure thefirst software application 108 to call theAPI 112 initialization function(s) responsive to a user interaction with the linking element. - Once the
navigation API 112 is initialized, the developer can implementAPI 112 to control and configure the navigation service as shown at (408). For example, various functions can be specified to determine travel parameters (e.g. destination location, search query, etc.) to be provided to thesecond software application 110. In this manner, the travel parameters can be provided by calling one or more initialization functions and/or one or more open session functions associated with theAPI 112. At (410), the method can include building and testing thefirst software application 108 with the coordination and communication between thesecond software application 110 and the navigation service associated with thesecond software application 110. - The technology discussed herein makes reference to servers, databases, software applications, and other computer-based systems, as well as actions taken and information sent to and from such systems. One of ordinary skill in the art will recognize that the inherent flexibility of computer-based systems allows for a great variety of possible configurations, combinations, and divisions of tasks and functionality between and among components. For instance, server processes discussed herein may be implemented using a single server or multiple servers working in combination. Databases and applications may be implemented on a single system or distributed across multiple systems. Distributed components may operate sequentially or in parallel.
- While the present subject matter has been described in detail with respect to specific example embodiments thereof, it will be appreciated that those skilled in the art, upon attaining an understanding of the foregoing may readily produce alterations to, variations of, and equivalents to such embodiments. Accordingly, the scope of the present disclosure is by way of example rather than by way of limitation, and the subject disclosure does not preclude inclusion of such modifications, variations and/or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/620,731 US20180017403A1 (en) | 2016-07-12 | 2017-06-12 | Navigation API for Linking Software Applications |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662361218P | 2016-07-12 | 2016-07-12 | |
US15/620,731 US20180017403A1 (en) | 2016-07-12 | 2017-06-12 | Navigation API for Linking Software Applications |
Publications (1)
Publication Number | Publication Date |
---|---|
US20180017403A1 true US20180017403A1 (en) | 2018-01-18 |
Family
ID=60940982
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/620,731 Abandoned US20180017403A1 (en) | 2016-07-12 | 2017-06-12 | Navigation API for Linking Software Applications |
Country Status (1)
Country | Link |
---|---|
US (1) | US20180017403A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2019237780A1 (en) * | 2018-06-11 | 2019-12-19 | 阿里巴巴集团控股有限公司 | Android system activity launching method and device |
USD953371S1 (en) | 2021-10-22 | 2022-05-31 | BioReference Health, LLC | Display screen or portion thereof with animated graphical user interface |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080209451A1 (en) * | 2007-01-29 | 2008-08-28 | Mashery, Inc. | Methods for analyzing, limiting, and enhancing access to an internet API, web service, and data |
US20130167159A1 (en) * | 2010-10-01 | 2013-06-27 | Flextronics Ap, Llc | Vehicle comprising multi-operating system |
US20130345980A1 (en) * | 2012-06-05 | 2013-12-26 | Apple Inc. | Providing navigation instructions while operating navigation application in background |
US20140278051A1 (en) * | 2013-03-15 | 2014-09-18 | Apple Inc. | Prediction Engine |
US20140365120A1 (en) * | 2013-06-08 | 2014-12-11 | Apple Inc. | Mapping Application with Several User Interfaces |
US20160069694A1 (en) * | 2014-09-05 | 2016-03-10 | Uber Technologies, Inc. | Providing route information to devices during a shared transport service |
US20170329475A1 (en) * | 2016-05-16 | 2017-11-16 | Samsung Electronics Co., Ltd. | Method for displaying application and electronic device for the same |
US20170357431A1 (en) * | 2016-06-12 | 2017-12-14 | Apple Inc. | Proactive search window |
US20180100742A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | API for Obtaining Geographic Location Data |
US20180270220A1 (en) * | 2017-03-20 | 2018-09-20 | Welch Allyn, Inc. | Medical Environment Single Sign-On System |
-
2017
- 2017-06-12 US US15/620,731 patent/US20180017403A1/en not_active Abandoned
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080209451A1 (en) * | 2007-01-29 | 2008-08-28 | Mashery, Inc. | Methods for analyzing, limiting, and enhancing access to an internet API, web service, and data |
US20130167159A1 (en) * | 2010-10-01 | 2013-06-27 | Flextronics Ap, Llc | Vehicle comprising multi-operating system |
US20130345980A1 (en) * | 2012-06-05 | 2013-12-26 | Apple Inc. | Providing navigation instructions while operating navigation application in background |
US20140278051A1 (en) * | 2013-03-15 | 2014-09-18 | Apple Inc. | Prediction Engine |
US20140365120A1 (en) * | 2013-06-08 | 2014-12-11 | Apple Inc. | Mapping Application with Several User Interfaces |
US20160069694A1 (en) * | 2014-09-05 | 2016-03-10 | Uber Technologies, Inc. | Providing route information to devices during a shared transport service |
US20170329475A1 (en) * | 2016-05-16 | 2017-11-16 | Samsung Electronics Co., Ltd. | Method for displaying application and electronic device for the same |
US20170357431A1 (en) * | 2016-06-12 | 2017-12-14 | Apple Inc. | Proactive search window |
US20180100742A1 (en) * | 2016-10-11 | 2018-04-12 | Google Inc. | API for Obtaining Geographic Location Data |
US20180270220A1 (en) * | 2017-03-20 | 2018-09-20 | Welch Allyn, Inc. | Medical Environment Single Sign-On System |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2019237780A1 (en) * | 2018-06-11 | 2019-12-19 | 阿里巴巴集团控股有限公司 | Android system activity launching method and device |
USD953371S1 (en) | 2021-10-22 | 2022-05-31 | BioReference Health, LLC | Display screen or portion thereof with animated graphical user interface |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10254120B2 (en) | API for obtaining geographic location data | |
EP3494468B1 (en) | Multi-platform mapping api | |
US10393539B2 (en) | API for obtaining geographic location data | |
JP7201651B2 (en) | Navigation application programming interface | |
US10061625B2 (en) | Navigation application programming interface to accommodate multiple waypoint routing | |
Rani et al. | Location based services in android | |
US20220100335A1 (en) | Assistive Screenshots | |
CN107229461B (en) | Method for integrating navigation services as part of a software application and computing device | |
JP2023134828A (en) | Electronic equipment and computer program for providing clear pickup site | |
US20180017403A1 (en) | Navigation API for Linking Software Applications | |
Tsindeliani et al. | Latency Reduction in Real-time GPS tracking in Android and the Web-based GPS Monitoring System | |
US20180266839A1 (en) | Process and system in which the user can provide additional criteria to select for the most preferable routes through Google Maps | |
Khan | Smart Tourist Guide | |
MacLean et al. | Exploring maps and location-based services | |
Klavestad et al. | Mobile computing: Prototype development of a context dependent location tracking system | |
Li et al. | GIS Web Service using context information in mobile environments | |
Kalyuzhny et al. | Technologies and implementation of an integration with geolocation and maps in mobile application development | |
Pei et al. | Location-based services and navigation in smart phones | |
KR101434961B1 (en) | Method and apparatus for developing a location based application | |
KR20190125263A (en) | Method, system, and non-transitory computer readable medium for providing pick up place | |
KR20090070418A (en) | System for displaying user created content and method for controlling the system | |
Shin et al. | Intelligent secure Web service using context information | |
Topgyal | Map Schedule Planner | |
Khor | GPS traffic navigation system | |
Kao et al. | Where Am I? Using Location-Based Services |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FALAH, ELIRAN;ROMANO, AVI;REEL/FRAME:042680/0725Effective date: 20160915 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: DOCKETED NEW CASE - READY FOR EXAMINATION |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: RESPONSE TO NON-FINAL OFFICE ACTION ENTERED AND FORWARDED TO EXAMINER |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: NON FINAL ACTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: FINAL REJECTION MAILED |
|
STPP | Information on status: patent application and granting procedure in general |
Free format text: ADVISORY ACTION MAILED |
|
STCB | Information on status: application discontinuation |
Free format text: ABANDONED -- FAILURE TO RESPOND TO AN OFFICE ACTION |