WO2023063957A1 - Stateful hash-based signing with a single public key and multiple independent signers - Google Patents
Stateful hash-based signing with a single public key and multiple independent signers Download PDFInfo
- Publication number
- WO2023063957A1 WO2023063957A1 PCT/US2021/055170 US2021055170W WO2023063957A1 WO 2023063957 A1 WO2023063957 A1 WO 2023063957A1 US 2021055170 W US2021055170 W US 2021055170W WO 2023063957 A1 WO2023063957 A1 WO 2023063957A1
- Authority
- WO
- WIPO (PCT)
- Prior art keywords
- lms
- signers
- computer
- implemented method
- recited
- Prior art date
Links
- 238000000034 method Methods 0.000 claims abstract description 67
- 230000006870 function Effects 0.000 description 22
- 238000004891 communication Methods 0.000 description 14
- 230000015654 memory Effects 0.000 description 8
- RVCKCEDKBVEEHL-UHFFFAOYSA-N 2,3,4,5,6-pentachlorobenzyl alcohol Chemical compound OCC1=C(Cl)C(Cl)=C(Cl)C(Cl)=C1Cl RVCKCEDKBVEEHL-UHFFFAOYSA-N 0.000 description 6
- 230000002093 peripheral effect Effects 0.000 description 4
- 238000004364 calculation method Methods 0.000 description 3
- 238000011161 development Methods 0.000 description 3
- 238000012546 transfer Methods 0.000 description 3
- 230000001413 cellular effect Effects 0.000 description 2
- 238000012423 maintenance Methods 0.000 description 2
- 239000000463 material Substances 0.000 description 2
- 238000012545 processing Methods 0.000 description 2
- 230000000007 visual effect Effects 0.000 description 2
- 230000003466 anti-cipated effect Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 238000007796 conventional method Methods 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 230000002708 enhancing effect Effects 0.000 description 1
- 230000007257 malfunction Effects 0.000 description 1
- 238000004519 manufacturing process Methods 0.000 description 1
- 238000005192 partition Methods 0.000 description 1
- 230000004044 response Effects 0.000 description 1
- 230000003068 static effect Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012795 verification Methods 0.000 description 1
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/08—Key distribution or management, e.g. generation, sharing or updating, of cryptographic keys or passwords
- H04L9/0894—Escrow, recovery or storing of secret information, e.g. secret key escrow or cryptographic key storage
- H04L9/0897—Escrow, recovery or storing of secret information, e.g. secret key escrow or cryptographic key storage involving additional devices, e.g. trusted platform module [TPM], smartcard or USB
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3236—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions
- H04L9/3239—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials using cryptographic hash functions involving non-keyed hash functions, e.g. modification detection codes [MDCs], MD5, SHA or RIPEMD
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/32—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials
- H04L9/3247—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols including means for verifying the identity or authority of a user of the system or for message authentication, e.g. authorization, entity authentication, data integrity or data verification, non-repudiation, key authentication or verification of credentials involving digital signatures
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/12—Details relating to cryptographic hardware or logic circuitry
- H04L2209/125—Parallelization or pipelining, e.g. for accelerating processing of cryptographic operations
Definitions
- loT devices make significant contributions to modern society, such as in the realms of safety, transportation, communication, and manufacturing.
- An aspect of what makes loT devices so useful is their ability to be periodically updated, thereby correcting or enhancing certain software features. If, however, a bad actor managed to deliver malware to an loT device, disguised as a firmware update, then the device could malfunction, expose sensitive data, or operate unsafely. To thwart such cyberattacks, numerous security measures are implemented on computing devices to prevent unauthorized access to and manipulation of device data and communications.
- These security measures may include utilizing digital signature schemes based on asymmetric encryption algorithms including Rivest-Shamir-Adleman (RSA) and Elliptic Curve Digital Signature Algorithm (ECDSA).
- digital signature schemes are mathematical schemes employed to validate the authenticity and integrity of a message, software, or digital document. These digital signature schemes give a recipient of a message the confidence to know that the message was generated by a known sender and that it was not manipulated sometime during transmission.
- hash-based signature schemes believed to be secure against cyberattacks performed by quantum computers have been standardized.
- NIST National Institute of Standards and Technology
- SP 800-208 provides a Recommendation for Stateful Hash-Based Signature Schemes theorized to be resistant to quantum-computer cyberattacks.
- the security of these stateful hash-based signatures schemes depends on the security of the underlying cryptographic hash functions.
- LM- OTS Leighton-Micali one-time signature
- the provisioning server may then order the local LMS public keys and generate a common LMS public key.
- the provisioning server can then provision the ordered list, the common LMS public key, and a Merkle tree path to each of the signers.
- FIG. 1 illustrates an example operating environment including an example computing device
- FIG. 2 illustrates an example operating environment including an example portable signing device, which is capable of implementing cryptographic techniques and other security functions described herein;
- FIG. 3 illustrates an example operating environment including an example provisioning server
- FIG. 4 illustrates an example operating environment including a computing device operably coupled to multiple signing devices and linked to a provisioning server;
- FIG. 5 illustrates an example technique for key generation
- FIG. 6 illustrates an example operating environment including an example portable signing device operably coupled to an example computing device
- FIG. 7 illustrates an example technique for key signing.
- postquantum cryptosystems Of the standardized and presently defined postquantum cryptosystems, many techniques are outlined in the assumption of a single signing service owning all private keys and implementing a stateful hash-based signature scheme. Many such implementations of post-quantum cryptosystems may not be desirable in some instances. For example, when accessing the signing service having all the private keys may be difficult, or in some instances impossible, such as when a firewall is present.
- Hash-based signature (HBS) schemes combine a one-time signature (OTS) scheme with a Merkle tree structure.
- OTS scheme is a digital signature scheme that employs a one-way function (e.g., a function for which it is practically infeasible to invert or reverse a computation) to securely sign one message per key pair.
- An OTS scheme should only be used to sign a single message because the system may become less secure if more than one message is signed using the same public and private key pair. If more than one message is signed using the same public and private key pair, it becomes mathematically feasible for an attacker to forge a digital signature. Since an OTS scheme key should only sign a single message securely, it is practical to combine many such keys within a single, larger structure (e.g., a Merkle tree).
- the state of the private key may be updated each time a signature is generated.
- HBS schemes that implement OTS keys and update the private key can therefore be described as stateful (e.g., a process performed with the context of previous transactions). For example, if a private key is stored in non-volatile memory, then the state of the key may be updated in the non-volatile memory to mark an OTS key as unavailable before the corresponding signature that was generated using the OTS key is exported.
- Stateful HBS schemes are only as secure as the level of security afforded by the underlying one-way function of the OTS scheme.
- a stateful OTS scheme is secure insofar as it is infeasible to find a preimage or a second preimage of the digest computed by the one-way function.
- An exemplary one-way function includes a hash function.
- OTS schemes that use hash functions to compute a one-time signature are believed to be impervious to large-scale quantum computers.
- Hash functions may include, for instance, a secure hashing algorithm (SHA) (e.g., SHA-256, SHA-256/192, SHAKE256/256, SHAKE256/192).
- SHA secure hashing algorithm
- Hash functions can input any of a variety of computer-interpretable objects and output a fixed-size string (e.g., a hexadecimal number).
- Hash functions generally have useful cryptographic properties such as preimage resistance (e.g., irreversibility) and collision resistance.
- the Leighton-Micali signature (LMS) scheme is an example stateful HBS scheme that may implement a hash function and an OTS scheme.
- the LMS scheme may implement the Leighton-Micali one-time signature (LM-OTS) scheme as its OTS scheme.
- LM-OTS signatures may be used to validate the authenticity of a message by associating a secret private key with a shared public key.
- a private key may include a large set (e.g., an array) of LM-OTS private keys.
- each LM-OTS key in the system may use the same parameter set, as outlined in section four of the NIST SP 800-208.
- An LM-OTS public key may be generated from a private key by iteratively applying a hashing function and then hashing the resulting values.
- the hash function used for the LMS scheme may be the same as the function used in the LM-OTS keys.
- the format of an LM-OTS private key may be of any configuration defined by the implementation of the system.
- the private key may include a typecode indicating the particular LM-OTS algorithm, an array containing n-byte strings (e.g., the value of n is determined by the hash function selected for use as part of the LM-OTS algorithm), a parameter (e.g., a 16-byte string parameter that indicates which Merkle tree the LM-OTS is used with), and a 4-byte parameter (e.g., a 32-bit integer parameter that indicates the leaf of the Merkle tree where the OTS public key appears).
- n-byte strings e.g., the value of n is determined by the hash function selected for use as part of the LM-OTS algorithm
- a parameter e.g., a 16-byte string parameter that indicates which Merkle tree the LM-OTS is used with
- a 4-byte parameter e.g., a 32-bit integer parameter that indicates the leaf of the Merkle tree where the OTS public key appears.
- the LMS scheme may combine the LM-OTS scheme with a Merkle tree structure.
- each LMS public and private key pair may be associated with a perfect binary Merkle tree.
- a Merkle tree is a non-linear, binary data structure, having leaf nodes, a group of middle nodes, and a root node.
- the leaf nodes may include the hash value of a data element.
- Each middle node of the Merkle tree may be computed by applying the hash function to the concatenation of the values of its two, corresponding children nodes.
- the root node may be a singular final node of the Merkle tree.
- the utilization of a Merkle tree may enable a system to identify and/or verify a particular data element without having to access the full data set.
- a Merkle tree can provide an efficient method by which to bind together a large number of OTS instances under a single public key.
- a Merkle tree may utilize 2 n OTS instances whose public keys are hashed together via a binary Merkle tree to generate a single public key.
- the single public key may bind all of the OTS instances together, enabling the generation of 2 n signatures from the single public key.
- Each leaf of the Merkle tree can contain the value of the public key of an LM-OTS public and private key pair.
- the value contained by the root of the Merkle tree may be the LMS public key (e.g., a recursive hash of the OTS public keys).
- the private key of the Merkle tree may be the collection of all the OTS private keys, together with the index of the next OTS private key with which to sign the next message.
- a hierarchical signature scheme (HSS) may be built on top of an LMS scheme, allowing for efficient scaling to a larger number of signatures.
- a sequence of Merkle trees may be included in the HSS system. For example, a Merkle tree can be subdivided into a number of smaller trees. Only the bottommost Merkle tree may be used to sign messages, while the Merkle trees, or parts of the larger Merkle tree, above may be used to sign the public keys of their children.
- FIG. 1 illustrates an example operating environment 100 including an example computing device 102.
- the computing device 102 is a desktop computer.
- the computing device 102 may be a laptop, a tablet, or the like.
- the computing device 102 may provide other functions or include components or interfaces omitted from FIG. 1 for the sake of clarity or visual brevity.
- the computing device 102 includes a printed circuit board assembly 104 (PCB A 104) on which components and interconnects of the computing device are embodied. Alternatively or additionally, components of the computing device 102 can be embodied on other substrates, such as flexible circuit material or other insulative material. Although not shown, the computing device 102 may also include a housing, various human-input devices, a display, a battery pack, antennas, and the like. Generally, electrical components and electromechanical components of the computing device 102 are assembled onto a printed circuit board (PCB) to form the PCBA 104. Various components of the PCBA 104 (e.g, processors and memories) are then programmed and tested to verify the correct function of the PCBA 104. The PCBA 104 is connected to or assembled with other parts of the computing device 102 into a housing.
- PCB printed circuit board
- the PCBA 104 includes one or more processors 106 and computer-readable media 108.
- the processor(s) 106 may be any suitable single-core or multicore processor (e.g., an application processor (AP), a digital- signal processor (DSP), a central processing unit (CPU), graphics processing unit (GPU)).
- the processor(s) 106 may be configured to execute instructions or commands stored within the computer-readable media 110 to implement an operating system 112 and a software development environment module 114, which are stored within computer-readable storage media 110.
- the computer-readable storage media 110 may include one or more non-transitory storage devices such as a random access memory (RAM, dynamic RAM (DRAM), non-volatile RAM (NVRAM), or static RAM (SRAM)), read-only memory (ROM), or flash memory), hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- RAM random access memory
- DRAM dynamic RAM
- NVRAM non-volatile RAM
- SRAM static RAM
- ROM read-only memory
- flash memory hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- the term “coupled” may refer to two or more elements that are in direct contact (physically, electrically, magnetically, optically, etc.) or to two or more elements that are not in direct contact with each other, but still cooperate and/or interact with each other.
- the PCBA 104 may also include I/O ports 116 and communication systems 118.
- the I/O ports 116 allow the computing device 102 to interact with other devices or users through peripheral devices.
- the I/O ports 116 may include any combination of local or external ports, such as universal serial bus (USB) ports, audio ports, Serial ATA (SATA) ports, PCI-express based ports or card-slots, secure digital input/output (SDIO) slots, and/or other legacy ports.
- Various peripherals may be operatively coupled with the I/O ports 116, such as human-input devices (HIDs), external computer-readable storage media, or other peripherals.
- HIDs human-input devices
- the communication systems 118 enable communication of device data, such as received data, transmitted data, or other information as described herein, and may provide connectivity to one or more networks and other devices connected therewith.
- Example communication systems include NFC transceivers, WPAN radios compliant with various IEEE 802.15 (Bluetooth®) standards, WLAN radios compliant with any of the various IEEE 802.11 (WiFi®) standards, WWAN (3 GPP-compliant) radios for cellular telephony, wireless metropolitan area network (WMAN) radios compliant with various IEEE 802.16 (WiMAX®) standards, infrared (IR) transceivers compliant with an Infrared Data Association (IrDA) protocol, and wired local area network (LAN) Ethernet transceivers.
- WiMAX® wireless metropolitan area network
- IR infrared
- IrDA Infrared Data Association
- LAN local area network
- Device data communicated over communication systems 118 may be packetized or framed depending on a communication protocol or standard by which the computing device 102 is communicating.
- the communication systems 118 may include wired interfaces, such as Ethernet or fiber-optic interfaces for communication over a local network, private network, intranet, or the Internet.
- the communication systems 118 may include wireless interfaces that facilitate communication over wireless networks, such as wireless LANs, cellular networks, or WPANs.
- the computing device 102 can also include a system bus, interconnect, crossbar, or data transfer system that couples the various components within the device.
- a system bus or interconnect can include any one or combination of different bus structures, such as a memory bus or memory controller, a peripheral bus, a universal serial bus, and/or a processor or local bus that utilizes any of a variety of bus architectures.
- FIG. 2 illustrates an example operating environment 200 that includes an example portable signing device 202, which is capable of implementing cryptographic techniques and other security functions.
- the portable signing device 202 is a USB flash drive.
- the portable signing device 202 may be an external drive or other external hardware security device.
- the portable signing device 202 may provide other functions or include components or interfaces omitted from FIG. 2 for the sake of clarity or visual brevity.
- the portable signing device 202 may include a security-hardened integrated circuit 204 on which components and interconnects of the portable signing device are embodied and to which an input/output (I/O) port 206 is coupled.
- the I/O port 206 may be a standard USB plug that forms a physical connection with a host (e.g., computing device 102).
- a host e.g., computing device 102
- the portable signing device 202 may receive power and implement cryptographic techniques described herein.
- the portable signing device 202 is referred to herein as a signer.
- the portable signing device 202 includes one or more microcontrollers 208 and computer-readable media 214.
- the microcontroller(s) 208 may enable file transfers between the computing device 102 and the portable signing device 202.
- the microcontroller(s) 208 may include processor(s) 210 configured to execute instructions or commands stored within the computer-readable storage media 216 to implement a signer module 218.
- the computer- readable storage media 210 may further store a private key 220.
- the computer-readable storage media 216 may include one or more non-transitory storage devices such as a RAM, ROM, or flash memory, hard drive, SSD, or any type of media suitable for storing electronic instructions, each coupled with a computer system bus.
- the microcontroller(s) 208 may further include a cryptographic engine 212.
- the cryptographic engine 212 is a secure, root of trust (RoT) component, including a cryptographic coprocessor or processor.
- the cryptographic engine 212 possesses the computational capacity to perform calculations required to implement steps of key generation and key signing.
- the cryptographic engine 212 may be communicatively coupled, through private interfaces, to a secure, non-volatile computer-readable storage media
- FIG. 3 illustrates an example operating environment 300 that includes an example provisioning server 302.
- the provisioning server 302 may include processor(s) 304, computer-readable media 306, I/O ports 314, and a communication system 316.
- the computer-readable storage media 308 may include a cryptographic module 310 and a key provisioner 312.
- the cryptographic module 310 may be configured to perform hash operations to compute an LM-OTS public key.
- FIG. 4 illustrates an example operating environment 400 including a computing device 102-1 operably coupled to multiple portable signing devices 202 (e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5) and linked 402 to the provisioning server 302.
- the operating environment 400 may include all previous operating environments disclosed herein (e.g., operating environment 100, operating environment 200, operating environment 300).
- the operating environment 400 may be an air-gapped network (e.g., a network employed on one or more computing devices to ensure that a secure computer network is physically isolated from unsecured networks) defining a secure system.
- the computing device 102-1 is operably coupled to more than one portable signing device 202 via a USB hub 404.
- the five portable signing devices 202 are powered and implement cryptographic techniques, constituting five signers.
- many more signers may be operably coupled to the computing device 102-1 (e.g., 32 signers).
- the computing device 102-1 may be linked 402 to the provisioning server 302.
- the link 402 may be wirelessly implemented via the communication systems of both devices.
- Link 402 enables data transfer between the provisioning server 302 and the signers.
- the signers are operably coupled directly to the provisioning server 302 via the USB hub 404.
- FIG. 5 illustrates an example technique 500 for key generation.
- the techniques and apparatuses described herein for key generation adhere to the NIST SP 800- 208 Random Number Generation for Keys and Signatures.
- an LMS randomized parameter of the LMS scheme is generated using an approved random bit generator, where the instantiation of the random bit generator supports at least 128 bits of security strength.
- a signer e.g., portable signing device 202-1 operably coupled to computing device 102-1
- a provisioning server e.g., provisioning server 302
- the provisioning server obtains the LMS randomized parameter 502.
- the provisioning server can then share the LMS randomized parameter 504 among each of the signers (e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5).
- the signers may utilize the LMS randomized parameter to “walk up” a Merkle tree. In implementations, parts of the Merkle tree may be independently computed by each of the signers.
- the provisioning server associates a unique, starting leaf index number from 0 to (2 s )- 1 to each signer 506. In some implementations, the provisioning server associates a unique range of leaf indices.
- the provisioning server may notify each of the signers 508. Notifying each of the signers 508 may include transmitting to each of the signers the unique, starting leaf index number with which each signer is associated, a range of leaf indices, and a target height of the Merkle tree.
- the provisioning server which may notify each of the signers 508 by transmitting the range of leaf indices, may configure each of the signers to compute a part of the Merkle tree having a predetermined height. Data transmitted during signer notification may facilitate proper maintenance of leaf indices during computation of the Merkle tree.
- each signer may create its own random SEED for LM-OTS signatures and generate local LM-OTS and LMS public keys.
- the random SEED may be a byte-string value that is generated using an approved random bit generator, where the instantiation of the random bit generator supports a predetermined security strength.
- the SEED may be a secret random value used for pseudorandom key generation that is not disclosed outside of each respective portable signing device. The same SEED value may be used to generate every private element in a single LMS instance.
- each signer uses its own random SEED for its own part (e.g., sector, partition) of the Merkle tree.
- the local LM-OTS and LMS keys may be generated as though the resulting Merkle tree will be a reduced Merkle tree.
- an HBS scheme of 2 20 size may only be a size of 2 15 for 32 signers.
- key generation may be performed completely independently by the signers.
- each signer may independently build a part of the Merkle tree (e.g., the Merkle tree for the HBS scheme), generating local LM- OTS and LMS keys using the common LMS randomized parameter and a secret random SEED. Key generation may take several hours to execute due to the low-performance capabilities of a portable signing device.
- a security-hardened portable signing device may not be well-suited for LM-OTS key generation.
- a signer may share a first hash of each local LM-OTS private key with the provisioning server, and the provisioning server can continue hash operations to compute the LM-OTS public key.
- the provisioning server may include a cryptography module (e.g., cryptographic module 310) and destroy SEEDs after computations.
- the provisioning server can generate a complete Merkle tree and provision used SEED and at least portions of the Merkle tree back to each signer via the secure link (e.g., link 402).
- the signer may share its local LMS public key (e.g., a root key) with the provisioning server.
- the provisioning server may receive local LMS public keys 510 from each of the signers over the secure link.
- the provisioning server may implement steps of a key provisioner (e.g., key provisioner 312).
- the key provisioner may order the received local LMS public keys 512. Ordering of the local LMS public keys 512 may include the key provisioner generating an ordered list.
- the provisioning server may generate a common LMS public key 514.
- the provisioning server can hash the local LMS public keys via a Merkle tree to generate a single common LMS public key.
- the key provisioner may provision to each of the signers 516 the ordered list, the common LMS public key, and/or a Merkle tree path.
- the key provisioner of the provisioning server provisioning a Merkle tree path to each signer enables a signer to store a path to the top of the Merkle tree without revealing data or paths of other signers.
- a signer receives a unique Merkle tree path including a path of its local LMS public key (e.g., leaf) to the common LMS public key (e.g., root).
- the portable signing devices e.g., portable signing device 202-1, portable signing device 202-2, portable signing device 202-3, portable signing device 202-4, portable signing device 202-5) can be physically distributed.
- portable signing device 202-1 can be distributed to a development team.
- FIG. 6 illustrates an example operating environment 600 including an example portable signing device 202-1 operably coupled to an example computing device 102-2.
- the computing device 102-2 may include the software development environment module 114.
- the software development environment module 114 may be a module configured to provide an environment for developing software of a firmware update.
- the software developed on the computing device 102-2 may be only a portion of a greater firmware update.
- FIG. 7 illustrates an example technique 700 for key signing.
- a signer e.g., a portable signing device 202-1 operably coupled to computing device 102-2
- the signer may then implement steps of a signer module 218.
- the signer module 218 may operate completely independently on the security-hardened integrated circuit (e.g., security-hardened integrated circuit 204) of the portable signing device.
- the signer module 218 may verify that the used Merkle tree is not exhausted by checking a monotonic leaf counter 704.
- the leaf counter may count up from 0 to 2 n -1 within a provisioned range, and increment after each OTS is generated.
- the leaf counter count can be referred to as the state of the hash-based signature, and its management is critical to ensuring security.
- the signer module 218 may sign a message 706 either using its own Merkle tree of reduced height or using its own part of the larger Merkle tree.
- the signer module 218 continues the signature 708 using the provisioned ordered list having the local LMS public keys of other signers to the common LMS public key.
- Each signer may append its respective Merkle tree path to its signature such that the signature is verifiable with the common LMS public key.
- the signer module 218 may then share a signature 710.
- the signer module 218 may share the signature 710 with the computing device 102- 2. In such a manner, a signer can independently perform key signing and maintain its own state.
- a signer can sign the message using its own SEED coming to its root key and append the path to the top of the Merkle tree which is needed for signature verification. In so doing, the resulting signature size may be smaller than that of comparable HSS schemes. Further, the signing process can be computed quicker than conventional techniques, as each signer can operate on a smaller tree. In addition, because a single-level Merkle tree is produced and a small signature can be achieved, the amount of storage space occupied on a portable signing device can be minimized.
- signers may store a cache of local LM-OTS public keys or at least portions of the Merkle tree so as to avoid computationally expensive operations of computing local LM-OTS public keys.
- the stored cache may reside completely within a computer-readable media (e.g., computer-readable media 214) of a portable signing device.
- a computer-readable media e.g., computer-readable media 214
- all or some portions of the Merkle tree may be stored.
- each signer can independently sign without having to access a signing service.
- a signer may validate the computed signature with common public key.
- the provisioning server if the provisioning server is secured and accessible by the signers, then the provisioning server can generate a complete Merkle tree and provision used SEED back and/or at least a portion of the Merkle tree to each of the signers using an offline channel.
- each of the signers can maintain state within its security-hardened integrated circuitry.
- the techniques described herein are fully compatible with the standards outlined in the NIST SP 800-208.
- Example 1 A computer-implemented method comprising: obtaining a Leighton-Micali signature (LMS) randomized parameter; sharing the LMS randomized parameter among one or more signers; associating a unique, starting leaf index number to each of the signers; notifying each of the signers, the notifying including transmitting to each of the signers the unique, starting leaf index number with which each signer is associated, a range of leaf indices, and a target height of a Merkle tree; receiving a local LMS public key from each of the signers; ordering the received local LMS public keys, the ordering resulting in an ordered list of received local LMS public keys; generating a common LMS public key; provisioning to each of the signers, the provisioning including transmitting the ordered list, the common LMS public key, and a Merkle tree path to each of the signers; and verifying each of the signers, the verifying being the obtaining of the common LMS public key.
- LMS Leighton-Micali signature
- Example 2 The computer-implemented method as recited in example 1, wherein the LMS randomized parameter is an LMS key pair identifier.
- Example 3 The computer-implemented method as recited in example 1, wherein the signers are portable signing devices operably coupled to a host, the portable signing devices having security-hardened integrated circuitry.
- Example 4 The computer-implemented method as recited in example 1, wherein the computer-implemented method is implemented on a provisioning server.
- Example 5 The computer-implemented method as recited in example 4, wherein obtaining the LMS randomized parameter includes receiving the LMS randomized parameter, at the provisioning server, from one of the signers.
- Example 6 The computer-implemented method as recited in example 4, wherein obtaining the LMS randomized parameter includes generating, at the provisioning server, the LMS randomized parameter.
- Example 7 The computer-implemented method as recited in example 4, further comprising implementing, at a cryptographic module of the provisioning server, a stateful hash-based signature (HBS) scheme that combines a one-time signature (OTS) scheme with a Merkle tree structure.
- HBS stateful hash-based signature
- OTS one-time signature
- Example 8 The computer-implemented method as recited in example 7, wherein the stateful HBS scheme is an LMS scheme configured to implement SHA-256.
- Example 9 The computer-implemented method as recited in example 4, wherein providing the ordered list to the signers enables each of the signers to generate a part of a Merkle tree, the Merkle tree associated with each respective signer.
- Example 10 The computer-implemented method as recited in example 4, further comprising computing a Merkle tree and causing each of the signers to cache parts of the Merkle tree to accelerate signing on low-performance hardware.
- Example 11 The computer-implemented method as recited in example 4, further comprising provisioning local LMS public keys to each of the signers, effective to cause each of the signers to operate independently after the provisioning.
- Example 12 The computer-implemented method as recited in example 4, further comprising computing a local Leighton-Micali one-time signature (LM-OTS) public key, at the provisioning server.
- L-OTS local Leighton-Micali one-time signature
- Example 13 The computer-implemented method as recited in example 4, further comprising verifying that each of the signers independently signs with a common LMS public key.
- Example 14 The computer-implemented method as recited in example 4, further comprising generating a complete Merkle tree, at the secured and accessible provisioning server, and provisioning used SEED and at least a portion of the Merkle tree back to each of the signers using an offline channel.
- Example 15 A provisioning server comprising: at least one processor; and at least one computer-readable storage medium comprising instructions that, when executed by the at least one processor, cause the processor to perform the method of any preceding claim.
Abstract
Description
Claims
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
KR1020247011218A KR20240055815A (en) | 2021-10-15 | 2021-10-15 | Stateful hash-based signing using a single public key and multiple independent signers |
PCT/US2021/055170 WO2023063957A1 (en) | 2021-10-15 | 2021-10-15 | Stateful hash-based signing with a single public key and multiple independent signers |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/055170 WO2023063957A1 (en) | 2021-10-15 | 2021-10-15 | Stateful hash-based signing with a single public key and multiple independent signers |
Publications (1)
Publication Number | Publication Date |
---|---|
WO2023063957A1 true WO2023063957A1 (en) | 2023-04-20 |
Family
ID=78599232
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
PCT/US2021/055170 WO2023063957A1 (en) | 2021-10-15 | 2021-10-15 | Stateful hash-based signing with a single public key and multiple independent signers |
Country Status (2)
Country | Link |
---|---|
KR (1) | KR20240055815A (en) |
WO (1) | WO2023063957A1 (en) |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210306155A1 (en) * | 2020-03-26 | 2021-09-30 | Intel Corporation | Robust state synchronization for stateful hash-based signatures |
-
2021
- 2021-10-15 WO PCT/US2021/055170 patent/WO2023063957A1/en active Application Filing
- 2021-10-15 KR KR1020247011218A patent/KR20240055815A/en unknown
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20210306155A1 (en) * | 2020-03-26 | 2021-09-30 | Intel Corporation | Robust state synchronization for stateful hash-based signatures |
Non-Patent Citations (3)
Title |
---|
BANSARKHANI RACHID EL ET AL: "G-Merkle: A Hash-Based Group Signature Scheme from Standard Assumptions", 1 April 2018, SAT 2015 18TH INTERNATIONAL CONFERENCE, AUSTIN, TX, USA, SEPTEMBER 24-27, 2015; [LECTURE NOTES IN COMPUTER SCIENCE; LECT.NOTES COMPUTER], SPRINGER, BERLIN, HEIDELBERG, PAGE(S) 441 - 463, ISBN: 978-3-540-74549-5, XP047471365 * |
MCGREW DAVID ET AL: "State Management for Hash-Based Signatures", 2 November 2016, SAT 2015 18TH INTERNATIONAL CONFERENCE, AUSTIN, TX, USA, SEPTEMBER 24-27, 2015; [LECTURE NOTES IN COMPUTER SCIENCE; LECT.NOTES COMPUTER], SPRINGER, BERLIN, HEIDELBERG, PAGE(S) 244 - 260, ISBN: 978-3-540-74549-5, XP047362965 * |
SUHAIL SABAH ET AL: "On the Role of Hash-Based Signatures in Quantum-Safe Internet of Things: Current Solutions and Future Directions", IEEE INTERNET OF THINGS JOURNAL, IEEE, USA, vol. 8, no. 1, 30 July 2020 (2020-07-30), pages 1 - 17, XP011828808, DOI: 10.1109/JIOT.2020.3013019 * |
Also Published As
Publication number | Publication date |
---|---|
KR20240055815A (en) | 2024-04-29 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11184157B1 (en) | Cryptographic key generation and deployment | |
Yuan et al. | Efficient public integrity checking for cloud data sharing with multi-user modification | |
Wang et al. | Enabling public verifiability and data dynamics for storage security in cloud computing | |
US10965448B1 (en) | Dynamic distributed storage for scaling blockchain | |
Schröder et al. | Verifiable data streaming | |
Ma et al. | Outsourcing computation of modular exponentiations in cloud computing | |
CN111492615B (en) | Encryption device with updatable shared matrix | |
CN112106322A (en) | Password-based threshold token generation | |
WO2019084578A1 (en) | Trusted remote proving method, apparatus and system | |
US8681986B2 (en) | Single-round password-based key exchange protocols | |
Chikouche et al. | A privacy-preserving code-based authentication protocol for Internet of Things | |
US20130046994A1 (en) | Integrated genomic and proteomic security protocol | |
US9407631B1 (en) | Multi-server passcode verification for one-time authentication tokens with auxiliary channel compatibility | |
Persichetti | Improving the efficiency of code-based cryptography | |
Qin et al. | Efficient chosen‐ciphertext secure public‐key encryption scheme with high leakage‐resilience | |
CN113971290A (en) | Method and apparatus for encoding and decoding cryptographic information, consumable, authentication system, and medium | |
Wu et al. | Consensus mechanism of IoT based on blockchain technology | |
CN101789939B (en) | Effective realization method for credible OpenSSH | |
Xu et al. | Data tag replacement algorithm for data integrity verification in cloud storage | |
US11627002B2 (en) | Cryptographic operation | |
Li et al. | IPOR: An efficient IDA-based proof of retrievability scheme for cloud storage systems | |
Qian et al. | Anonymous password‐based key exchange with low resources consumption and better user‐friendliness | |
WO2023063957A1 (en) | Stateful hash-based signing with a single public key and multiple independent signers | |
US20220086003A1 (en) | Continuous space-bounded non-malleable codes from stronger proofs-of-space | |
Chen et al. | Double rainbows: A promising distributed data sharing in augmented intelligence of things |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
121 | Ep: the epo has been informed by wipo that ep was designated in this application |
Ref document number: 21806552Country of ref document: EPKind code of ref document: A1 |
|
ENP | Entry into the national phase |
Ref document number: 20247011218Country of ref document: KRKind code of ref document: A |
|
WWE | Wipo information: entry into national phase |
Ref document number: 2021806552Country of ref document: EP |
|
ENP | Entry into the national phase |
Ref document number: 2021806552Country of ref document: EPEffective date: 20240411 |