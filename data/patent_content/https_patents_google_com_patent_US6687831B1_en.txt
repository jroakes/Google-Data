US6687831B1 - Method and apparatus for multiple security service enablement in a data processing system - Google Patents
Method and apparatus for multiple security service enablement in a data processing system Download PDFInfo
- Publication number
- US6687831B1 US6687831B1 US09/303,366 US30336699A US6687831B1 US 6687831 B1 US6687831 B1 US 6687831B1 US 30336699 A US30336699 A US 30336699A US 6687831 B1 US6687831 B1 US 6687831B1
- Authority
- US
- United States
- Prior art keywords
- connection
- type
- server target
- target object
- client proxy
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/546—Message passing systems or structures, e.g. queues
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/465—Distributed object oriented systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2209/00—Indexing scheme relating to G06F9/00
- G06F2209/54—Indexing scheme relating to G06F9/54
- G06F2209/547—Messaging middleware
Definitions
- the present invention relates generally to an improved data processing system and in particular to a method and apparatus for providing a connection between objects in a data processing system. Still more particularly, the present invention provides a method and apparatus for dynamically providing connections with different types of security between a client proxy object and a server target object.
- CORBA Common Object Request Broker Architecture
- OMG Object Management Group
- CORBA specifies a system, which provides interoperability between objects in a heterogeneous, distributed environment and in a way transparent to the programmer.
- the OMG Object Model defines common object semantics for specifying the externally visible characteristics of objects in a standard and implementation-independent way. In this model clients request services from objects (which will also be called server target objects) through a well-defined interface. This interface is specified in OMG IDL (Interface Definition Language).
- a client proxy object accesses an object by issuing a request to the object.
- a client proxy object represents the server target object in the client process.
- the request is an event, and it carries information including an operation, the object reference of the service provider, and actual parameters (if any).
- the object reference is an object name that defines an object reliably.
- ORB Object Request Broker
- the basic functionality provided by the ORB consists of passing the requests from client proxy objects to the object implementations on which they are invoked.
- the client proxy object can communicate with the ORB. Core through the IDL stub or through the Dynamic Invocation Interface (DII).
- DII Dynamic Invocation Interface
- the stub represents the mapping between the language of implementation of the client proxy object the ORB core.
- the ORB Core then transfers the request to the object implementation which receives the request as an up-call through either an IDL skeleton, or a dynamic skeleton.
- the OMG security service specification defines client-server security authentication functions in terms of the CORBA programming model. A strong decoupling relationship between this security service implementation and the ORB implementation is present. With the current implementations, dynamically providing security mechanisms for different specifications or protocols is absent.
- the present invention provides a method and apparatus in a computer system for establishing a connection between a client proxy object and a server target object.
- a request is received from the client proxy object to access the server target object, wherein the request includes an identification of a type of communication.
- the request also may include a type of message to be sent to the server target object.
- a connection object is identified based on the type of communication, the type of message, and quality of protection.
- the connection object implementing the type of communication is returned, wherein the connection between the client proxy object and the server target object is facilitated using the connection object.
- a server target object is an object that provides the function or implementation of the object in the server process.
- FIG. 1 is a pictorial representation of a distributed data processing system in which the present invention may be implemented
- FIG. 2 is a block diagram of a data processing system, which may be implemented as a server in accordance with a preferred embodiment of the present invention
- FIG. 3 is a block diagram of a data processing system in which the present invention may be implemented
- FIG. 4 is a diagram illustrating a distributed application using the CORBA standard in accordance with a preferred embodiment of the present invention
- FIG. 5 is a diagram depicting the components in a distributed application that may implement a connection interceptor in accordance with a preferred embodiment of the present invention
- FIG. 6 is a diagram illustrating a object request broker (ORB) with a connection database object and a connection interceptor in accordance with a preferred embodiment of the present invention
- FIG. 7 is a diagram of an ORB implementing security services in accordance with a preferred embodiment of the present invention.
- FIG. 8 is a block diagram of functional units within an ORB and functional units within security services in accordance with a preferred embodiment of the present invention.
- FIG. 9 is a data flow diagram illustrating use of a connection interceptor in accordance with a preferred embodiment of the present invention.
- FIG. 10 is a data flow diagram illustrating the use of a security connection interceptor in accordance with a preferred embodiment of the present invention.
- FIG. 11 is a block diagram of a key in accordance with a preferred embodiment of the present invention.
- FIG. 12 is a diagram illustrating steps performed when an ORB is initialized in accordance with a preferred embodiment of the present invention.
- FIG. 13 is a flowchart of a process used by a connection database object in accordance with a preferred embodiment of the present invention.
- FIG. 14 is a flowchart of a process used to create a connection key in accordance with a preferred embodiment of the present invention.
- FIG. 15 is a flowchart of a process used to generate a key in accordance with a preferred embodiment of the present invention.
- FIG. 1 a pictorial representation of a distributed data processing system is depicted in which the present invention may be implemented.
- Distributed data processing system 100 is a network of computers in which the present invention may be implemented.
- Distributed data processing system 100 contains network 102 , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system 100 .
- Network 102 may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.
- server 104 is connected to network 102 along with storage unit 106 .
- clients 108 , 110 , and 112 are also connected to network 102 .
- These clients 108 , 110 , and 112 may be, for example, personal computers or network computers.
- a network computer is any computer coupled to a network, which receives a program or other application from another computer coupled to the network.
- server 104 provides data, such as boot files, operating system images, and applications to clients 108 - 112 .
- Clients 108 , 110 , and 112 are clients to server 104 .
- Distributed data processing system 100 may include additional servers, clients, and other devices not shown.
- Distributed data processing system 100 also includes printers 114 , 116 , and 118 .
- a client such as client 110 , may print directly to printer 114 .
- Clients such as client 108 and client 112 do not have directly attached printers. These clients may print to printer 116 , which is attached to server 104 , or to printer 118 , which is a network printer that does not require connection to a computer for printing documents.
- Client 110 alternatively, may print to printer 116 or printer 118 , depending on the printer type and the document requirements.
- distributed data processing system 100 is the Internet with network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational, and other computer systems that route data and messages.
- distributed data processing system 100 also may be implemented as a number of different types of networks, such as, for example, an Intranet or a local area network.
- FIG. 1 is intended as an example and not as an architectural limitation for the processes of the present invention.
- Data processing system 200 may be a symmetric multiprocessor (SMP) system including a plurality of processors 202 and 204 connected to system bus 206 . Alternatively, a single processor system may be employed. Also connected to system bus 206 is memory controller/cache 208 , which provides an interface to local memory 209 . I/O bus bridge 210 is connected to system bus 206 and provides an interface to I/O bus 212 . Memory controller/cache 208 and I/O bus bridge 210 may be integrated as depicted.
- SMP symmetric multiprocessor
- Peripheral component interconnect (PCI) bus bridge 214 connected to I/O bus 212 provides an interface to PCI local bus 216 .
- PCI Peripheral component interconnect
- a number of modems 218 - 220 may be connected to PCI bus 216 .
- Typical PCI bus implementations will support four PCI expansion slots or add-in connectors.
- Communications links to network computers 108 - 112 in FIG. 1 may be provided through modem 218 and network adapter 220 connected to PCI local bus 216 through add-in boards.
- Additional PCI bus bridges 222 and 224 provide interfaces for additional PCI buses 226 and 228 , from which additional modems or network adapters may be supported. In this manner, server 200 allows connections to multiple network computers.
- a memory mapped graphics adapter 230 and hard disk 232 may also be connected to I/O bus 212 as depicted, either directly or indirectly.
- FIG. 2 may vary.
- other peripheral devices such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted.
- the depicted example is not meant to imply architectural limitations with respect to the present invention.
- the data processing system depicted in FIG. 2 may be, for example, an IBM RISC/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- IBM RISC/System 6000 system a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- AIX Advanced Interactive Executive
- Data processing system 300 is an example of a client computer.
- Data processing system 300 employs a peripheral component interconnect (PCI) local bus architecture.
- PCI peripheral component interconnect
- Processor 302 and main memory 304 are connected to PCI local bus 306 through PCI bridge 308 .
- PCI bridge 308 also may include an integrated memory controller and cache memory for processor 302 . Additional connections to PCI local bus 306 may be made through direct component interconnection or through add-in boards.
- local area network (LAN) adapter 310 SCSI host bus adapter 312 , and expansion bus interface 314 are connected to PCI local bus 306 by direct component connection.
- audio adapter 316 graphics adapter 318 , and audio/video adapter 319 are connected to PCI local bus 306 by add-in boards inserted into expansion slots.
- Expansion bus interface 314 provides a connection for a keyboard and mouse adapter 320 , modem 322 , and additional memory 324 .
- SCSI host bus adapter 312 provides a connection for hard disk drive 326 , tape-drive 328 , and CD-ROM drive 330 .
- Typical PCI local bus implementations will support three or four PCI expansion slots or add-in connectors.
- An operating system runs on processor 302 and is used to coordinate and provide control of various components within data processing system 300 in FIG. 3 .
- the operating system may be a commercially available operating system such as OS/2, which is available from International Business Machines Corporation. “OS/2” is a trademark of International Business Machines Corporation.
- An object oriented programming system such as Java may run in conjunction with the operating system and provides calls to the operating system from Java programs or applications executing on data processing system 300 .
- Java is a trademark of Sun Microsystems, Inc. Instructions for the operating system, the object-oriented operating system, and applications or programs are located on storage devices, such as hard disk drive 326 , and may be loaded into main memory 304 for execution by processor 302 .
- FIG. 3 may vary depending on the implementation.
- Other internal hardware or peripheral devices such as flash ROM (or equivalent nonvolatile memory) or optical disk drives and the like, may be used in addition to or in place of the hardware depicted in FIG. 3 .
- the processes of the present invention may be applied to a multiprocessor data processing system.
- data processing system 300 may not include SCSI host bus adapter 312 , hard disk drive 326 , tape drive 328 , and CD-ROM 330 , as noted by dotted line 332 in FIG. 3 denoting optional inclusion.
- the computer to be properly called a client computer, must include some type of network communication interface, such as LAN adapter 310 , modem 322 , or the like.
- data processing system 300 may be a stand-alone system configured to be bootable without relying on some type of network communication interface, whether or not data processing system 300 comprises some type of network communication interface.
- data processing system 300 may be a Personal Digital Assistant (PDA) device which is configured with ROM and/or flash ROM in order to provide non-volatile memory for storing operating system files and/or user-generated data.
- PDA Personal Digital Assistant
- the present invention provides a method, apparatus, and instructions for selecting a connection with a particular security mechanism in response to requests from a client proxy object to access a server target object.
- this mechanism is provided through the use of a connection interceptor used in association with an object request broker.
- the connection interceptor includes processes that are used to support any number of security mechanisms for a connection between a client proxy object and a server target object.
- the connection interceptor provides this support using security mechanisms present in an OMG security service.
- the connection interceptor determines the type of connection to make by scanning a profile for information regarding the client's security requirements. These security requirements may include, for example, the type of security mechanism and the quality of protection.
- the security mechanism may be, for example, secure sockets layer (SSL) or distributed computing environment (DCE).
- the quality of protection may be for example, confidentiality, integrity, out of sequence detection, replay detection, etc.
- an ORB is the middleware that establishes the client-server relationships between objects.
- a client proxy object can transparently invoke a method on a server target object, which can be on the same machine or across a network.
- the ORB intercepts the call and is responsible for finding an object that can implement the request, pass it the parameters, invoke its method, and return the results.
- the client does not have to be aware of where the object is located, its programming language, its operating system, or any other system aspects that are not part of an object's interface. In so doing, the ORB provides interoperability between applications on different machines in heterogeneous distributed environments and seamlessly interconnects multiple object systems.
- ORBs simplify this process and provide flexibility. They let programmers choose the most appropriate operating system, execution environment and even programming language to use for each component of a system under construction. More importantly, ORBs allow the integration of existing components. In an ORB-based solution, developers simply model the legacy component using the same interface that they use for creating new objects, then write “wrapper” code that translates between the standardized bus and the legacy interfaces.
- CORBA is an ORB that represents an important advance towards object-oriented standardization and interoperability. With CORBA, users gain access to information transparently without having to know on which software or hardware platform the information resides or where it is located within a network.
- the goal in CORBA object development is the creation and registration of an server target object, or simply server.
- a server target object is a program, which contains the implementation of one or more object types and which has been registered with the ORB.
- CORBA details an object bus that lets objects communicate across enterprises and even continents.
- CORBA was designed to allow intelligent components to discover each other and inter-operate on an object bus.
- CORBA goes beyond just inter-operability. It also specifies an extensive set of bus-related services for creating and deleting objects, accessing them by name, storing them in persistent stores, externalizing their states, and defining ad-hoc relationships between them.
- CORBA is an integration technology, not a programming technology. It is specifically designed to be the glue that binds disparate programming technologies together. CORBA does not exist as a point in the programming space-by design, it occupies the spaces between the points representing individual languages. For example, when a client implemented using Java uses CORBA technology to communicate with a C++ object, both the C++ programmer and the Java programmer work completely within their respective language environments. The CORBA ORB presents the Java client with a Java stub interface and the C++ programmer with a C++ skeleton interface. CORBA resolves the cross-language issues automatically.
- CORBA offers an integration-oriented point of view, where design efforts focus on the boundaries between elements of the system.
- the underlying interface technologies e.g., IIOP
- IIOP interface technologies
- CBRBA interface technologies, such as CBRBA, not only have longer half-lives than programming technologies, they are the best defense against the adding and death of applications due to dependence on obsolete programming technology.
- FIG. 4 a diagram illustrating a distributed application using the CORBA standard is depicted in accordance with a preferred embodiment of the present invention.
- the mechanisms of the present invention may be implemented within such a distributed application.
- client proxy object 400 communicates with CORBA server target object 420 using the IIOP standard illustrated as communication link 410 .
- CORBA server target object 420 provides integration and interoperability for disparate types of software objects.
- JavaBean 421 , C++ object 422 , Enterprise JavaBean (EJB) 423 , and COBOL object 424 communicate and register with service functions using the CORBA services provided by server target object 420 .
- Client proxy object 400 may invoke functions and methods provided by objects 421 - 424 through the CORBA services.
- FIG. 5 a diagram depicts the components in a distributed application that may implement a connection interceptor in accordance with a preferred embodiment of the present invention.
- FIG. 5 shows method request 518 sent from client 502 to a CORBA object implementation in a server target object.
- a client is any code, perhaps itself a CORBA object, that invokes a method on a CORBA object.
- Servant 520 is an instance of the object implementation—the actual code and data that implements the CORBA object.
- Client 502 of a CORBA server target object has object reference 516 for the server target object and the client uses this object reference to issue method request 518 .
- An object reference is the information needed to specify an object within an ORB.
- Clients typically obtain object references in a few different ways.
- a client can invoke a “create” method on an object in order to create the object. The create method would return an object reference for the new object to the client.
- a client could obtain an object reference by issuing a request to a naming service.
- a naming service stores object references by name in a data structure, and a client may lookup or resolve object references by the object's associated name rather than some type of hard coded network address, i.e., locate an object within the same physical machine or elsewhere on the network.
- the present invention provides a mechanism in which an object implementing a desired security mechanism may be used to provide a connection between a client and a server target object.
- the object reference points to stub function 504 , which uses the ORB machinery to forward invocations to the server target object.
- a CORBA client proxy object needs a local ORB object to perform all of its data marshalling and IIOP work.
- the stub code uses ORB 506 to identify the machine that runs the server target object and asks that machine's ORB 510 for a connection to the object's server target object 514 .
- the stub code sends the object reference and parameters to skeleton code 512 linked to the destination object's implementation.
- the skeleton code transforms the call and parameters into the required implementation-specific format and calls the object. Any results or exception are returned along the same path.
- the client proxy object has no knowledge of the CORBA object's location, implementation details, nor which ORB is used to access the object.
- Different ORBs may communicate via Internet InterORB Protocol (IIOP) 508 .
- IIOP Internet InterORB Protocol
- a client proxy object may only invoke methods that are specified in the CORBA object's interface.
- An interface defines an object type and specifies a set of named methods and parameters as well as the exception types that these methods may return.
- a client proxy object of a server target object has access to an object reference for the server target object and invokes operations on the object.
- a client proxy object knows only the logical structure of the server target object according to its interface and experiences the behavior of the server target object through method invocations. It is important to realize that the client-server relationship is relative to two particular objects—the implementation of one server target object may be a client proxy object of other server target objects.
- the stub and skeleton files are generated in a variety of ways.
- Stub files present the client proxy object with access to server target object methods in the client proxy object programming language.
- the server target object skeleton files glue the object implementation to the ORB runtime.
- the ORB uses the skeletons to dispatch methods to the object implementation instances (servants).
- FIG. 6 a diagram illustrating a object request broker (ORB) with a connection database object and a connection interceptor is depicted in accordance with a preferred embodiment of the present invention.
- ORB 600 contains a connection database object 602 and a base connection interceptor 604 . These components are used to return a connection object to be used by a client proxy object communicate with a server target object.
- Base connection interceptor 604 is activated when the ORB, on behalf of the client proxy object, requests a connection to a server target object.
- Connection database object 602 stores information about connection objects in entries 606 - 618 .
- Connection objects are wrappers for underlying communication layers, such as transmission control protocol (TCP), SSL, and DCE.
- TCP transmission control protocol
- SSL Secure Sockets Layer
- DCE DCE
- a reference to a connection object is stored in each of entries 606 - 618 .
- Each of these entries are indexed by keys. These keys are generated by base connection interceptor 604 using information supplied by connection database object 602 about the target object.
- keys returned by base connection interceptor 604 to index an entry within connection database object 602 may only include basic information, such as a target ID and a port ID.
- the target ID identifies the server target object while the port ID identifies a port used to address the server target object.
- port 80 on an Internet node indicates a web server.
- FIG. 7 a diagram of an ORB implementing security services is depicted in accordance with a preferred embodiment of the present invention.
- security connection interceptor 702 replaces base connection interceptor 704 .
- Security connection interceptor 702 will return more complex keys reflecting a need for a more secure connection between a client proxy object and a server target object.
- Security connection interceptor 702 uses information supplied by connection database object 706 within ORB 708 to generate a key to index entries 710 - 722 in connection database 706 .
- connection data object In addition to a target ID and a port ID, the key generated by security connection interceptor 702 is contained in a connection data object also includes information about the type of connection.
- the information within the connection data object and the key allows a client proxy object and a server target object to form connections using different security mechanisms with different quality of protection.
- the type of connection may be changed on a per message basis between the client proxy object and the server target object.
- the present invention may be applied to a connection shared between multiple client proxy objects and multiple server target objects.
- Information or data about an object is normally obtained from the ORB. When changing the type of connection on a per message basis, current information about the object will be required to identify changes in configuration data for the object.
- FIG. 8 a block diagram of functional units within an ORB and functional units within security services is depicted in accordance with a preferred embodiment of the present invention.
- ORB 800 includes a base connection interceptor 802 , a connection database object 804 , a base request interceptor 806 , and a base message interceptor 808 .
- Security services 810 include a security connection interceptor 812 , a security request interceptor 814 , and a security message interceptor 816 .
- Both ORB 800 and security services 810 are in a layer above connection layer 818 , which provides an interface to SSL layer 820 and TCP layer 822 .
- Connection layer 818 provides the interface between client proxy objects and server target objects.
- Base connection interceptor 802 typically is present when security services 810 is not initialized. When registered with ORB 800 , security connection interceptor 812 replaces base connection interceptor 802 when security services 810 are initialized.
- Security services 810 may be initialized based on configuration data supplied at run time. If this service is initialized, security connection interceptor 812 , security request interceptor 814 , and security message interceptor 816 are all registered with ORB 800 .
- the request interceptors and the message interceptors illustrated in FIG. 8 are known interceptors while base connection interceptor 802 and security connection interceptor 812 are new interceptors provided by the present invention. These new interceptors will process a GetConnection request before any other interceptor processes such a message in these examples.
- FIG. 8 illustrates the use of a SSL mechanism for security and a TCP mechanism when security is not required
- the mechanisms of the present invention may be used to select other types of security mechanisms in addition to or in place of SSL.
- DCE also may be used.
- FIG. 9 a data flow diagram illustrating use of a base connection interceptor is depicted in accordance with a preferred embodiment of the present invention.
- This diagram illustrates data flow in which security services are not being used with an ORB.
- a secure connection between a client proxy object and a server target object is not provided.
- client proxy object 900 desires to send a message to an object.
- Object request broker (ORB) 901 sends a request, GetConnection request 902 , for a connection to the ORB, which is handled by connection database object 904 within the ORB.
- This request is made by ORB 901 because client proxy object 900 wants to send a message to a target, e.g., server target object.
- no security mechanism is requested by object request broker 901 for establishing a connection to a server target object.
- Connection database object 904 passes information about the target and the message to be sent to connection interceptor 906 in a GetConnectionKey request 908 . This information about the target and the message is obtained from GetConnection request 902 .
- connection interceptor 906 In response, connection interceptor 906 generates key 910 , also called a “connection key”, based on the information in the target server profile.
- key 910 is a simple key containing the target ID and the port ID (i.e. port number or address) because no security mechanism is required in this particular example.
- Key 910 is then returned to connection database object 904 in a connection data object 911 .
- Connection data object 911 is an object that also includes the connection type and the quality of protection for the connection.
- Connection database object 904 uses key 910 contained within connection data object 911 as an index to look up a connection object in database 913 .
- connection object 912 is an existing connection object, such as connection object 912 . If an existing connection object, such as connection object 912 is identified, this object is returned to client proxy object 900 via object request broker 901 using connection object reference 914 .
- Connection data object 911 is attached to a connection object and used to pass data to that object and other objects.
- Connection object 912 is an instance of connection object 916 , which is a reference to connection object 912 . If a connection object does not exist, connection database object 904 will attempt to create an instance of a connection object using the information contained in key 910 . This call is made to connection object 916 by passing connection key data 918 found in key 910 to connection object 916 . If successful, a reference 920 to an instance of connection object 916 , connection object 912 , is returned to database object 904 .
- connection database object 904 will store the reference to the created connection object using key 910 returned from connection interceptor 906 .
- the information in key 910 will serve as an index to the created connection object.
- This connection object is then returned to client proxy object 900 by returning a reference to the connection object to client proxy object 900 via object request broker 901 .
- FIG. 10 a data flow diagram illustrating the use of a security connection interceptor is depicted in accordance with a preferred embodiment of the present invention.
- the data flow illustrated in FIG. 10 occurs when security services are enabled for use in association with the ORB.
- client proxy object 1000 desires to send messages to a target and causes object request broker 1001 to send a GetConnection request 1002 to connection database object 1004 to request a connection to a target, such as a server target object.
- This request includes a request for a secure connection.
- Connection database object 1004 passes information about the target and the information to be sent to security connection interceptor 1006 in a GetConnectionKey request.
- security connection interceptor 1006 uses the target server profile (target ID, port ID, supported security mechanisms, and quality of protection (QOP) required and supported) in GetConnection request 1008 and the client security configuration data 1010 from ORB 1012 to form a key 1014 based on the security requirements of the client proxy object, client proxy object 1000 , and the server target object.
- This key includes an identification of the security mechanism to be used along with the quality of the protection for the connection.
- Connection database object 1004 uses key 1014 to locate a connection object within database 1016 .
- Database 1016 includes information about connection objects, which are indexed and accessed using keys.
- connection object reference 1018 is returned to client proxy object 1000 , which uses the reference to establish a connection to the server target object with the referenced connection object.
- the keys in database 1016 reference a number of connection objects, such as connection objects 1020 , 1022 , and 1024 . Each of these connection objects are instances of connection object 1026 .
- Connection data object 1015 may be passed to the identified connection objects.
- connection objects may provide a specific type of security mechanism to a particular quality of protection.
- connection object 1020 may provide a SSL security mechanism with encryption for the quality of protection, while connection object 1022 provides a SSL security mechanism with integrity for the quality of protection.
- the type of connection may provide no security, such as a TCP or UDP connection.
- connection database object 1004 will attempt to create a new connection object by sending connection key data 1028 to connection object 1026 .
- this connection key data is obtained using information contained within key 1014 .
- key 1014 includes information about the security mechanism that is to be used to protect the connection between the client proxy object and the server target object along with the required quality of protection.
- a connection object may be initialized using SSL with the quality of protection specified in key 1014 being used to set a characteristic for the connection object.
- connection database object 1004 If an instance of a connection object is successfully created, then a reference 1030 to the created connection object is returned to connection database object 1004 , which will store the reference to the connection object in database 1016 using key 1014 as an index to the new connection object. Thereafter, the new connection object is returned to client proxy object 1000 by sending a reference to the new connection object to client proxy object 1000 via object request broker 1001 .
- Key 1100 is an example of a key returned by a security connection interceptor when a client requests a connection to a server target object.
- Key 1100 includes a target ID field 1102 , which is used to identify the target. For example, an IP address or DNS name may be used to identify the target.
- Port ID field 1104 identifies the node on which the target is located.
- the connection type field 1106 identifies the security mechanism that is be used, e.g., SSL and DCE. If no security mechanism is to be used, the connection type could be for example, TCP.
- Quality of protection field 1108 indicates the quality of protection to be used with a particular security mechanism such as confidentiality, message integrity, no encryption, or detect replay of message, etc..
- FIG. 12 a diagram illustrating steps performed when an ORB is initialized is depicted in accordance with a preferred embodiment of the present invention.
- a new ORB 1201 is created (step 1200 ).
- ORB 1200 then creates a connection interceptor 1203 (step 1202 ).
- Connection interceptor 1203 then registers itself with ORB 1201 (step 1204 ). Steps 1200 - 1204 occur before any messages are sent.
- security services 1205 When security services 1205 is initialized (step 1206 ), this service uses security configuration data to determine whether it is necessary to secure messages flowing between a client proxy object and a server target object (step 1208 ). If security is required, then security services 1205 creates an instance of security connection interceptor 1207 (step 1210 ). In turn, security connection interceptor 1207 registers itself with ORB. 1201 (step 1212 ). This registration replaces connection interceptor 1203 with security connection interceptor 1207 . Thereafter, security services 1205 creates an instance of a request interceptor and a message interceptor and registers these with ORB 1201 (step 1214 ).
- ORB 1201 then initializes the other services (step 1216 ).
- the services include services 1209 and 1211 .
- These services may be, for example, without limitation, a persistent object service, which provides a set of common interfaces to the mechanisms used for retaining and managing the persistent state of objects; a concurrency control service, which enables multiple clients to coordinate access to sheared resources; and a naming service, which provides an ability to bind a name to an object relative to a naming context, which is an object that contains a set of name bindings in which each name is unique.
- the services decide, based on configuration data whether that particular service is required.
- connection database object begins by receiving a request from a client proxy object to access a server target object (step 1300 ). This request includes information about the server target object including it's name, listening port, and security requirement.
- the connection database object will request a connection key from a security connection interceptor (step 1302 ).
- the connection database object receives a key (step 1304 ). The key is used as an index to the database to search for an appropriate connection object.
- the database for the connection database object is then queried to identify a connection object (step 1306 ).
- connection objects is not limited to databases and may be stored in another type of data structure.
- a determination is then made as to whether a reference to a connection object, matching the key, is present within the database (step 1308 ).
- connection database object will request creation of an instance of a connection object having the appropriate parameters to match the key (step 1310 ).
- the request to create an instance of a connection object is made to a connection object.
- Appropriate parameters such as the quality of protection, are sent to the connection object.
- a determination is made as to whether a connection object is returned (step 1312 ). If a connection object is returned, the key and the reference to the connection object are stored in the database (step 1314 ), and the reference to the connection object is returned to the client proxy object (step 1316 ) with the process terminating thereafter.
- step 1312 if a connection object is not returned, an error is then returned to the client proxy object (step 1318 ).
- step 1308 if a connection object is identified in the query of the database, then the process proceeds to step 1316 to return the reference to the connection object to the client proxy object.
- FIG. 14 a flowchart of a process used to create a connection key is depicted in accordance with a preferred embodiment of the present invention.
- This process is implemented in a security connection interceptor.
- the process begins by obtaining client security configuration information (step 1400 ).
- This information is received from the ORB and includes a security mechanism and QOP.
- server security configuration information is obtained (step 1402 ).
- This information includes target ID, port ID, and available security mechanisms including QOP supported and required.
- This information is also received from the QRB.
- a determination is then made as to whether security is enabled at the client proxy object (step 1404 ). If security is enabled, a determination is then made as to whether the server target object uses the security enabled for use at the client proxy object (step 1406 ). If the server uses the security mechanism, a key is created based on the identified information (step 1408 ) with the process terminating thereafter.
- connection database object if security is not enabled at the client proxy object or the server does not use the security mechanism enabled at the client proxy object, a default key is returned to the connection database object (step 1410 ) with the process terminating thereafter.
- the connection type identified in this key may be a connection mechanism that involves no security or some security mechanism known to be useable by both the client proxy object and the server target object.
- FIG. 15 a flowchart of a process used to generate a key is depicted in accordance with a preferred embodiment of the present invention.
- This flowchart provides an example of a process for generating a key in a system that supports TCP, DCE, and SSL connection types.
- the flowchart in this process also may be implemented within a security connection interceptor.
- the process begins by obtaining client security configuration information (step 1500 ) and by obtaining server security configuration information (step 1502 ). Then, a determination is made as to whether DCE security is enabled at the client proxy object (step 1504 ). If DCE security is enabled, then a determination is made as to whether the server target object will use DCE (step 1506 ). If the server target object will use DCE, then the connection type is set equal to DCE (step 1508 ). The security mechanism is then set equal to DCE (step 1510 ).
- connection type is found in the connection data object, while the security mechanism is found in the key, which is contained within the connection data object.
- the port is then set to the server TCP port (step 1512 ).
- the required quality of protection is determined from the client configuration and the server DCE configuration (step 1514 ).
- a TCP key is returned (step 1522 ) with the process terminating thereafter.
- the TCP key is a default key.
- step 1504 if DCE security is not enabled at the client proxy object, then a determination is made as to whether SSL security is enabled at the client proxy object (step 1524 ). If SSL security is enabled, then a determination is made as to whether the server target object will use SSL (step 1526 ). If the server target object will use SSL, then the connection type is set equal to SSL (step 1528 ). The security mechanism is then set equal to SSL (step 1530 ). The port is then set to the server SSL port (step 1532 ). Next, the required quality of protection is determined from the client configuration and the server SSL configuration (step 1534 ). Thereafter, the process proceeds to step 1516 as previously described.
- a TCP key is returned (step 1534 ) with the process terminating thereafter.
- the TCP key in this example is a default key.
- the process also proceeds to step 1534 to return a TCP key.
- connection interceptor and the security connection interceptor of the present invention may be dynamically registered by any service requiring connections to have certain characteristics. Specifically, each service may register its own connection interceptor.
- connection interceptor can be used for all types of connections as it is not tied to a specific security mechanism or only applicable to a security service. It can be generalized to other types of services, which require specific connection characteristics. For instance, a service which requires the ability to broadcast messages to many listeners could us a connection interceptor to request a connection which is configured to allow for many listeners.
- a connection interceptor can be dynamic at the individual message or request level. For example, certain types of requests may need flow over secured connections while others may flow over unsecured connections. As another example, some requests may need to be broadcast while others may be intended only for a single listener.
- connection interceptor Although the example describes a single-instance, replaceable connection interceptor, the concept can be extended to allow multiple connection interceptors to be registered and executed at run-time. Each connection interceptor would be invoked in some defined order and would have an opportunity to add its requirements for determining the connection to use when sending the request. The requirements may be placed into the key.
- connection interceptors can also be used as a communication mechanism between an executor, in this case an ORB, and a requester
- some methods of the connection interceptor can be used as callbacks to pass other information from executor to requester such as whether an existing connection has been broken. When the callback is executed, the requester can then take the appropriate action.
- connection interceptor for providing connections between a client proxy object and a server target object
- the connection interceptor of the present invention may be applied to providing connections for services requiring a connection to have certain characteristics including, those other than security and quality of protection.
- user datagram protocol UDP
- TCP user datagram protocol
Abstract
Description
Claims (19)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/303,366 US6687831B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multiple security service enablement in a data processing system |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/303,366 US6687831B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multiple security service enablement in a data processing system |
Publications (1)
Publication Number | Publication Date |
---|---|
US6687831B1 true US6687831B1 (en) | 2004-02-03 |
Family
ID=30443922
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/303,366 Expired - Lifetime US6687831B1 (en) | 1999-04-29 | 1999-04-29 | Method and apparatus for multiple security service enablement in a data processing system |
Country Status (1)
Country | Link |
---|---|
US (1) | US6687831B1 (en) |
Cited By (36)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020019872A1 (en) * | 2000-07-27 | 2002-02-14 | Paul Ferwerda | System and method for concentration and load-balancing of requests |
US20020091873A1 (en) * | 2001-01-09 | 2002-07-11 | Chun-Hua Tseng | Method for intercepting callback functions |
US20020178365A1 (en) * | 2001-05-24 | 2002-11-28 | Shingo Yamaguchi | Method and system for controlling access to network resources based on connection security |
US20030033517A1 (en) * | 2001-06-01 | 2003-02-13 | Rutherglen Jason John | Secure data accessing system and method |
US20040060055A1 (en) * | 2000-01-28 | 2004-03-25 | Kukura Robert A. | Method and system for dynamic configuration of interceptors in a client-server environment |
US6735703B1 (en) * | 2000-05-08 | 2004-05-11 | Networks Associates Technology, Inc. | Multi-platform sequence-based anomaly detection wrapper |
US20040128644A1 (en) * | 2002-10-25 | 2004-07-01 | Walter Hurst | Software architecture for distributed enterprise business applications |
US20040216109A1 (en) * | 2003-04-24 | 2004-10-28 | Sun Microsystems, Inc. | Common transaction manager interface |
US20040230831A1 (en) * | 2003-05-12 | 2004-11-18 | Microsoft Corporation | Passive client single sign-on for Web applications |
US20050015425A1 (en) * | 2003-07-14 | 2005-01-20 | Sun Microsystems, Inc. | Transaction manager freezing |
US20050055325A1 (en) * | 2003-09-04 | 2005-03-10 | Sun Microsystems, Inc. | Identity for data sources |
US20050223217A1 (en) * | 2004-04-01 | 2005-10-06 | Microsoft Corporation | Authentication broker service |
US20050243789A1 (en) * | 2004-04-19 | 2005-11-03 | Brian Dinello | Network security system |
US20060072527A1 (en) * | 2004-03-04 | 2006-04-06 | Sweet Spot Solutions, Inc. | Secure authentication and network management system for wireless LAN applications |
US20060095467A1 (en) * | 2004-10-29 | 2006-05-04 | International Business Machines Corporation | Creating reference objects |
US20060093190A1 (en) * | 2004-09-17 | 2006-05-04 | Proximex Corporation | Adaptive multi-modal integrated biometric identification detection and surveillance systems |
US20060123234A1 (en) * | 2004-12-07 | 2006-06-08 | Microsoft Corporation | Providing tokens to access extranet resources |
US20060123472A1 (en) * | 2004-12-07 | 2006-06-08 | Microsoft Corporation | Providing tokens to access federated resources |
US20060168363A1 (en) * | 2004-12-30 | 2006-07-27 | Jie Weng | Generic device integration within an auto-id system |
US20070067437A1 (en) * | 2005-09-19 | 2007-03-22 | Eugene Sindambiwe | Generation of customized client proxies |
US20080016250A1 (en) * | 2000-05-23 | 2008-01-17 | Palmsource, Inc. | Method and system for device bootstrapping via server synchronization |
US20080086472A1 (en) * | 2006-10-04 | 2008-04-10 | International Business Machines Corporation | Supporting Multiple Security Mechanisms in a Database Driver |
US7702917B2 (en) | 2004-11-19 | 2010-04-20 | Microsoft Corporation | Data transfer using hyper-text transfer protocol (HTTP) query strings |
US20100191960A1 (en) * | 2004-03-04 | 2010-07-29 | Directpointe, Inc. | Token based two factor authentication and virtual private networking system for network management and security and online third party multiple network management method |
US20110191462A1 (en) * | 2000-07-17 | 2011-08-04 | Smith Philip S | Method and system for operating an E-Commerce service provider |
US20110246504A1 (en) * | 2010-04-01 | 2011-10-06 | Salesforce.Com, Inc. | System, method and computer program product for performing one or more actions based on a comparison of data associated with a client to one or more criteria |
US8145759B2 (en) | 2002-11-04 | 2012-03-27 | Oracle America, Inc. | Dynamically configurable resource pool |
US8302100B2 (en) | 2000-01-18 | 2012-10-30 | Galactic Computing Corporation Bvi/Bc | System for balance distribution of requests across multiple servers using dynamic metrics |
US8316131B2 (en) | 2000-11-10 | 2012-11-20 | Galactic Computing Corporation Bvi/Bc | Method and system for providing dynamic hosted service management across disparate accounts/sites |
US8560709B1 (en) * | 2004-02-25 | 2013-10-15 | F5 Networks, Inc. | System and method for dynamic policy based access over a virtual private network |
US8676988B1 (en) * | 2004-07-26 | 2014-03-18 | Open Invention Network, Llc | Systems and methods for secure data exchange in a distributed collaborative application |
US20140181249A1 (en) * | 2012-12-20 | 2014-06-26 | Fujitsu Limited | Storage medium, information processing apparatus, and object transmission method |
US20140310422A1 (en) * | 2003-05-30 | 2014-10-16 | Facebook, Inc. | Switching between connectivity types to maintain connectivity |
US9544563B1 (en) | 2007-03-23 | 2017-01-10 | Proximex Corporation | Multi-video navigation system |
US9544496B1 (en) | 2007-03-23 | 2017-01-10 | Proximex Corporation | Multi-video navigation |
US11068581B1 (en) * | 2018-01-26 | 2021-07-20 | EMC IP Holding Company LLC | Techniques for establishing host connectivity |
Citations (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5727145A (en) * | 1996-06-26 | 1998-03-10 | Sun Microsystems, Inc. | Mechanism for locating objects in a secure fashion |
US6230160B1 (en) * | 1997-07-17 | 2001-05-08 | International Business Machines Corporation | Creating proxies for distributed beans and event objects |
US6253253B1 (en) * | 1997-08-25 | 2001-06-26 | International Business Machines Corporation | Method and apparatus for optimizing references to objects in a data processing system |
US6330677B1 (en) * | 1998-10-27 | 2001-12-11 | Sprint Communications Company, L. P. | Object-based security system |
US20010051949A1 (en) * | 1997-05-09 | 2001-12-13 | Carey Michael J. | System, method, and program for object building in queries over object views |
US6336118B1 (en) * | 1998-12-03 | 2002-01-01 | International Business Machines Corporation | Framework within a data processing system for manipulating program objects |
US6356930B2 (en) * | 1998-10-16 | 2002-03-12 | Silverstream Software, Inc. | Connection concentrator for distributed object systems |
US6425017B1 (en) * | 1998-08-17 | 2002-07-23 | Microsoft Corporation | Queued method invocations on distributed component applications |
US6453320B1 (en) * | 1999-02-01 | 2002-09-17 | Iona Technologies, Inc. | Method and system for providing object references in a distributed object environment supporting object migration |
US6457041B1 (en) * | 1999-02-19 | 2002-09-24 | International Business Machines Corporation | Client-server transaction data processing system with optimum selection of last agent |
US6490624B1 (en) * | 1998-07-10 | 2002-12-03 | Entrust, Inc. | Session management in a stateless network system |
-
1999
- 1999-04-29 US US09/303,366 patent/US6687831B1/en not_active Expired - Lifetime
Patent Citations (12)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5727145A (en) * | 1996-06-26 | 1998-03-10 | Sun Microsystems, Inc. | Mechanism for locating objects in a secure fashion |
US20010051949A1 (en) * | 1997-05-09 | 2001-12-13 | Carey Michael J. | System, method, and program for object building in queries over object views |
US6477527B2 (en) * | 1997-05-09 | 2002-11-05 | International Business Machines Corporation | System, method, and program for object building in queries over object views |
US6230160B1 (en) * | 1997-07-17 | 2001-05-08 | International Business Machines Corporation | Creating proxies for distributed beans and event objects |
US6253253B1 (en) * | 1997-08-25 | 2001-06-26 | International Business Machines Corporation | Method and apparatus for optimizing references to objects in a data processing system |
US6490624B1 (en) * | 1998-07-10 | 2002-12-03 | Entrust, Inc. | Session management in a stateless network system |
US6425017B1 (en) * | 1998-08-17 | 2002-07-23 | Microsoft Corporation | Queued method invocations on distributed component applications |
US6356930B2 (en) * | 1998-10-16 | 2002-03-12 | Silverstream Software, Inc. | Connection concentrator for distributed object systems |
US6330677B1 (en) * | 1998-10-27 | 2001-12-11 | Sprint Communications Company, L. P. | Object-based security system |
US6336118B1 (en) * | 1998-12-03 | 2002-01-01 | International Business Machines Corporation | Framework within a data processing system for manipulating program objects |
US6453320B1 (en) * | 1999-02-01 | 2002-09-17 | Iona Technologies, Inc. | Method and system for providing object references in a distributed object environment supporting object migration |
US6457041B1 (en) * | 1999-02-19 | 2002-09-24 | International Business Machines Corporation | Client-server transaction data processing system with optimum selection of last agent |
Non-Patent Citations (2)
Title |
---|
A Discussion of the Object Management Architecture; Jan. 1997; 1-1-A-8; Object Management Group. |
A Discussion of the Object Management Architecture; Jan. 1997; 1-1—A-8; Object Management Group. |
Cited By (73)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080244617A1 (en) * | 1999-01-29 | 2008-10-02 | Iona Technologies, Plc | Method and system for dynamic configuration of interceptors in a client-server environment |
US20090300653A1 (en) * | 1999-01-29 | 2009-12-03 | Iona Technologies, Plc | Method and system for dynamic configuration of interceptors in a client-server environment |
US8010968B2 (en) | 1999-01-29 | 2011-08-30 | Iona Technologies Limited | Method and system for dynamic configuration of interceptors in a client-server environment |
US8010967B2 (en) | 1999-01-29 | 2011-08-30 | Iona Technologies Limited | Method and system for dynamic configuration of interceptors in a client-server environment |
US8302100B2 (en) | 2000-01-18 | 2012-10-30 | Galactic Computing Corporation Bvi/Bc | System for balance distribution of requests across multiple servers using dynamic metrics |
US7415713B2 (en) * | 2000-01-28 | 2008-08-19 | Iona Technologies, Plc | Method and system for dynamic configuration of interceptors in a client-server environment |
US20040060055A1 (en) * | 2000-01-28 | 2004-03-25 | Kukura Robert A. | Method and system for dynamic configuration of interceptors in a client-server environment |
US6735703B1 (en) * | 2000-05-08 | 2004-05-11 | Networks Associates Technology, Inc. | Multi-platform sequence-based anomaly detection wrapper |
US20080016250A1 (en) * | 2000-05-23 | 2008-01-17 | Palmsource, Inc. | Method and system for device bootstrapping via server synchronization |
US8037208B2 (en) * | 2000-05-23 | 2011-10-11 | Access Co., Ltd. | Method and system for device bootstrapping via server synchronization |
US20110191462A1 (en) * | 2000-07-17 | 2011-08-04 | Smith Philip S | Method and system for operating an E-Commerce service provider |
US8429049B2 (en) | 2000-07-17 | 2013-04-23 | Galactic Computing Corporation Bvi/Ibc | Method and system for allocating computing resources |
US8538843B2 (en) | 2000-07-17 | 2013-09-17 | Galactic Computing Corporation Bvi/Bc | Method and system for operating an E-commerce service provider |
US20020019872A1 (en) * | 2000-07-27 | 2002-02-14 | Paul Ferwerda | System and method for concentration and load-balancing of requests |
US6990511B2 (en) * | 2000-07-27 | 2006-01-24 | Bea Systems, Inc. | System and method for concentration and load-balancing of requests |
US20110016203A1 (en) * | 2000-07-27 | 2011-01-20 | Bea Systems, Inc. | System and method for achieving scalability in domain computing |
US8166095B2 (en) | 2000-07-27 | 2012-04-24 | Oracle International Corporation | System and method for achieving scalability in domain computing |
US8316131B2 (en) | 2000-11-10 | 2012-11-20 | Galactic Computing Corporation Bvi/Bc | Method and system for providing dynamic hosted service management across disparate accounts/sites |
US20020091873A1 (en) * | 2001-01-09 | 2002-07-11 | Chun-Hua Tseng | Method for intercepting callback functions |
US20020178365A1 (en) * | 2001-05-24 | 2002-11-28 | Shingo Yamaguchi | Method and system for controlling access to network resources based on connection security |
US7428752B2 (en) * | 2001-06-01 | 2008-09-23 | Applications In Internet Time, Llc | Secure data accessing system and method |
US20030033517A1 (en) * | 2001-06-01 | 2003-02-13 | Rutherglen Jason John | Secure data accessing system and method |
US20040128644A1 (en) * | 2002-10-25 | 2004-07-01 | Walter Hurst | Software architecture for distributed enterprise business applications |
US8145759B2 (en) | 2002-11-04 | 2012-03-27 | Oracle America, Inc. | Dynamically configurable resource pool |
US20040216109A1 (en) * | 2003-04-24 | 2004-10-28 | Sun Microsystems, Inc. | Common transaction manager interface |
US7743083B2 (en) | 2003-04-24 | 2010-06-22 | Oracle America, Inc. | Common transaction manager interface for local and global transactions |
US20040230831A1 (en) * | 2003-05-12 | 2004-11-18 | Microsoft Corporation | Passive client single sign-on for Web applications |
US8108920B2 (en) | 2003-05-12 | 2012-01-31 | Microsoft Corporation | Passive client single sign-on for web applications |
US9344462B2 (en) * | 2003-05-30 | 2016-05-17 | Facebook, Inc. | Switching between connectivity types to maintain connectivity |
US20140310422A1 (en) * | 2003-05-30 | 2014-10-16 | Facebook, Inc. | Switching between connectivity types to maintain connectivity |
US20050015425A1 (en) * | 2003-07-14 | 2005-01-20 | Sun Microsystems, Inc. | Transaction manager freezing |
US7640545B2 (en) | 2003-07-14 | 2009-12-29 | Sun Microsytems, Inc. | Transaction manager freezing |
US20050055325A1 (en) * | 2003-09-04 | 2005-03-10 | Sun Microsystems, Inc. | Identity for data sources |
US8521875B2 (en) * | 2003-09-04 | 2013-08-27 | Oracle America, Inc. | Identity for data sources |
US8560709B1 (en) * | 2004-02-25 | 2013-10-15 | F5 Networks, Inc. | System and method for dynamic policy based access over a virtual private network |
US8973122B2 (en) | 2004-03-04 | 2015-03-03 | Directpointe, Inc. | Token based two factor authentication and virtual private networking system for network management and security and online third party multiple network management method |
US20100191960A1 (en) * | 2004-03-04 | 2010-07-29 | Directpointe, Inc. | Token based two factor authentication and virtual private networking system for network management and security and online third party multiple network management method |
US20060072527A1 (en) * | 2004-03-04 | 2006-04-06 | Sweet Spot Solutions, Inc. | Secure authentication and network management system for wireless LAN applications |
US7565529B2 (en) | 2004-03-04 | 2009-07-21 | Directpointe, Inc. | Secure authentication and network management system for wireless LAN applications |
US7607008B2 (en) | 2004-04-01 | 2009-10-20 | Microsoft Corporation | Authentication broker service |
US20050223217A1 (en) * | 2004-04-01 | 2005-10-06 | Microsoft Corporation | Authentication broker service |
US7673049B2 (en) | 2004-04-19 | 2010-03-02 | Brian Dinello | Network security system |
US20050243789A1 (en) * | 2004-04-19 | 2005-11-03 | Brian Dinello | Network security system |
US10986052B1 (en) | 2004-07-26 | 2021-04-20 | Open Invention Network Llc | Systems and methods for secure data exchange in a distributed collaborative application |
US10587547B1 (en) | 2004-07-26 | 2020-03-10 | Open Invention Network Llc | Systems and methods for secure data exchange in a distributed collaborative application |
US10110527B1 (en) * | 2004-07-26 | 2018-10-23 | Open Invention Network, Llc | Systems and methods for secure data exchange in a distributed collaborative application |
US8676988B1 (en) * | 2004-07-26 | 2014-03-18 | Open Invention Network, Llc | Systems and methods for secure data exchange in a distributed collaborative application |
US9825891B1 (en) * | 2004-07-26 | 2017-11-21 | Open Invention Newtork, LLC | Systems and methods for secure data exchange in a distributed collaborative application |
US8373753B2 (en) * | 2004-09-17 | 2013-02-12 | Proximex Corporation | Adaptive multi-modal integrated biometric identification detection and surveillance systems |
US7956890B2 (en) * | 2004-09-17 | 2011-06-07 | Proximex Corporation | Adaptive multi-modal integrated biometric identification detection and surveillance systems |
US20060093190A1 (en) * | 2004-09-17 | 2006-05-04 | Proximex Corporation | Adaptive multi-modal integrated biometric identification detection and surveillance systems |
US20110228094A1 (en) * | 2004-09-17 | 2011-09-22 | Ken Prayoon Cheng | Adaptive multi-modal integrated biometric identification detection and surveillance systems |
US20090106301A1 (en) * | 2004-10-29 | 2009-04-23 | International Business Machines Corporation | Creating reference objects |
US7953737B2 (en) | 2004-10-29 | 2011-05-31 | International Business Machines Corporation | Creating reference objects |
US7480678B2 (en) * | 2004-10-29 | 2009-01-20 | International Business Machines Corporation | Creating reference objects |
US20060095467A1 (en) * | 2004-10-29 | 2006-05-04 | International Business Machines Corporation | Creating reference objects |
US7702917B2 (en) | 2004-11-19 | 2010-04-20 | Microsoft Corporation | Data transfer using hyper-text transfer protocol (HTTP) query strings |
US7603555B2 (en) | 2004-12-07 | 2009-10-13 | Microsoft Corporation | Providing tokens to access extranet resources |
US20060123472A1 (en) * | 2004-12-07 | 2006-06-08 | Microsoft Corporation | Providing tokens to access federated resources |
US20060123234A1 (en) * | 2004-12-07 | 2006-06-08 | Microsoft Corporation | Providing tokens to access extranet resources |
US8417854B2 (en) * | 2004-12-30 | 2013-04-09 | Sap Aktiengesellschaft | Generic device integration within an auto-id system |
US20060168363A1 (en) * | 2004-12-30 | 2006-07-27 | Jie Weng | Generic device integration within an auto-id system |
US8090818B2 (en) * | 2005-09-19 | 2012-01-03 | Sap Ag | Generation of customized client proxies |
US20070067437A1 (en) * | 2005-09-19 | 2007-03-22 | Eugene Sindambiwe | Generation of customized client proxies |
US7761468B2 (en) * | 2006-10-04 | 2010-07-20 | International Business Machines Corporation | Supporting multiple security mechanisms in a database driver |
US20080086472A1 (en) * | 2006-10-04 | 2008-04-10 | International Business Machines Corporation | Supporting Multiple Security Mechanisms in a Database Driver |
US9544496B1 (en) | 2007-03-23 | 2017-01-10 | Proximex Corporation | Multi-video navigation |
US9544563B1 (en) | 2007-03-23 | 2017-01-10 | Proximex Corporation | Multi-video navigation system |
US10326940B2 (en) | 2007-03-23 | 2019-06-18 | Proximex Corporation | Multi-video navigation system |
US10484611B2 (en) | 2007-03-23 | 2019-11-19 | Sensormatic Electronics, LLC | Multi-video navigation |
US20110246504A1 (en) * | 2010-04-01 | 2011-10-06 | Salesforce.Com, Inc. | System, method and computer program product for performing one or more actions based on a comparison of data associated with a client to one or more criteria |
US20140181249A1 (en) * | 2012-12-20 | 2014-06-26 | Fujitsu Limited | Storage medium, information processing apparatus, and object transmission method |
US11068581B1 (en) * | 2018-01-26 | 2021-07-20 | EMC IP Holding Company LLC | Techniques for establishing host connectivity |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6687831B1 (en) | Method and apparatus for multiple security service enablement in a data processing system | |
US6496865B1 (en) | System and method for providing interpreter applications access to server resources in a distributed network | |
US8307380B2 (en) | Proxy object creation and use | |
US6189046B1 (en) | Mechanism and method for merging cached location information in a distributed object environment | |
US5727145A (en) | Mechanism for locating objects in a secure fashion | |
US5787251A (en) | Method and apparatus for subcontracts in distributed processing systems | |
US5566302A (en) | Method for executing operation call from client application using shared memory region and establishing shared memory region when the shared memory region does not exist | |
US6282581B1 (en) | Mechanism for resource allocation and for dispatching incoming calls in a distributed object environment | |
US6260078B1 (en) | Using a distributed object system to find and download java-based applications | |
US6272557B1 (en) | Framework for marshaling and unmarshaling argument object references | |
US6820267B2 (en) | Method and system for remote automation of object oriented applications | |
US5497463A (en) | Ally mechanism for interconnecting non-distributed computing environment (DCE) and DCE systems to operate in a network system | |
US8032623B2 (en) | Context-based dynamic policy assignment in a distributed processing environment | |
EP0737922B1 (en) | Method and apparatus for managing computer processes | |
EP0817025A2 (en) | Data structures and method for implementing subcontracts in a distributed object oriented system | |
EP0817037A2 (en) | Mechanism for dynamically associating a service dependent representation with objects at run time | |
US6718550B1 (en) | Method and apparatus for improving the performance of object invocation | |
JPH09223116A (en) | Positional penetrability of distributed objects for plural middlewares | |
JP2002529862A (en) | Smart stubs or enterprise beans in distributed processing systems | |
JPH0926890A (en) | Method, apparatus and data structure for management of object | |
JP2002529854A (en) | Replicated naming service in distributed processing system | |
US7823169B1 (en) | Performing operations by a first functionality within a second functionality in a same or in a different programming language | |
JPH1069395A (en) | Request dispatch mechanism in distributed object system | |
AU775624B2 (en) | Method and apparatus for dynamic command extensibility in an intelligent agent | |
US7424721B2 (en) | Inter-object communication interface bridge |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ALBAUGH, VIRGIL A.;BENANTAR, MESSAOUD;BUSHLAWSKI, JOHN A.;AND OTHERS;REEL/FRAME:009948/0858;SIGNING DATES FROM 19990324 TO 19990427 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |