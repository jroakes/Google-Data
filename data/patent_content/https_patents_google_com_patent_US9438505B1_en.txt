US9438505B1 - System and method for increasing capacity in router forwarding tables - Google Patents
System and method for increasing capacity in router forwarding tables Download PDFInfo
- Publication number
- US9438505B1 US9438505B1 US13/434,094 US201213434094A US9438505B1 US 9438505 B1 US9438505 B1 US 9438505B1 US 201213434094 A US201213434094 A US 201213434094A US 9438505 B1 US9438505 B1 US 9438505B1
- Authority
- US
- United States
- Prior art keywords
- bit positions
- tables
- flow key
- width
- bits
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 title claims description 52
- 230000009471 action Effects 0.000 claims abstract description 40
- 230000015654 memory Effects 0.000 claims description 23
- 230000004931 aggregating effect Effects 0.000 claims description 2
- 238000005516 engineering process Methods 0.000 description 22
- 230000000875 corresponding effect Effects 0.000 description 15
- 230000008569 process Effects 0.000 description 5
- 238000004891 communication Methods 0.000 description 4
- 230000009467 reduction Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 230000006870 function Effects 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 230000006399 behavior Effects 0.000 description 1
- 239000000835 fiber Substances 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000006855 networking Effects 0.000 description 1
- 230000003287 optical effect Effects 0.000 description 1
- 238000007493 shaping process Methods 0.000 description 1
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/74591—Address table lookup; Address filtering using content-addressable memories [CAM]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
-
- H04L45/7457—
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/24—Traffic characterised by specific attributes, e.g. priority or QoS
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/32—Flow control; Congestion control by discarding or delaying data units, e.g. packets or frames
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L49/00—Packet switching elements
- H04L49/30—Peripheral units, e.g. input or output ports
- H04L49/3009—Header conversion, routing tables or routing tags
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W40/00—Communication routing or communication path finding
- H04W40/02—Communication route or path selection, e.g. power-based or shortest path routing
- H04W40/04—Communication route or path selection, e.g. power-based or shortest path routing based on wireless node resources
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04W—WIRELESS COMMUNICATION NETWORKS
- H04W40/00—Communication routing or communication path finding
- H04W40/24—Connectivity information management, e.g. connectivity discovery or connectivity update
- H04W40/246—Connectivity information discovery
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/24—Traffic characterised by specific attributes, e.g. priority or QoS
- H04L47/2483—Traffic characterised by specific attributes, e.g. priority or QoS involving identification of individual flows
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/30—Flow control; Congestion control in combination with information about buffer occupancy at either end or at transit nodes
Definitions
- a Ternary Content Addressable Memory (“TCAM”) is a type of computer memory used in certain high speed searching applications, such as routing information through a network. It is designed such that it receives a data word (e.g., a key in a packet header) and performs parallel matches of that word against every entry in the TCAM in a single clock cycle. Each TCAM entry can store a flow rule comprising a key, an action, and a priority.
- TCAMs have been widely used in routers, switches, and network security appliances of high speed networks to implement packet flow rules, e.g., access control list (“ACL”) call rules. They may be used for various applications, including packet filtering, forwarding, traffic load balancing and shaping.
- ACL access control list
- TCAMS may be very costly and may consume a significant amount of power. Accordingly, TCAMs are often small and do not scale well to large networks using thousands of flow rules.
- TCAMs are often used in network routers.
- TCAMs may have variable widths, where the width is inversely proportional to a capacity of the TCAM.
- a TCAM may support 1000 entries of 72 bits, 512 entries of 144 bits, or 256 entries of 288 bits.
- a router programs each flow rule (comprising a key, priority, and an action) into one TCAM entry, and configures the width of the TCAM to be the maximum width of flow key. This results in minimal capacity of the TCAM.
- Some chip hardware includes a pipeline of tables.
- the pipeline of tables may be used to perform a multi-stage look-up of packets, in which the result of one table lookup is used as part of lookup key to the next table in the pipeline.
- VFP Virtual local area network Field Processor
- IFP Ingress Field Processor
- EFP Egress Field Processor
- VFP generates an VRF; (VRF_id, dst_ip, dst_port, . . . ) is matched against IFP, which produces (egress_port, egress_mod_id); (egress_port, src_ip, dst_ip, . . .
- Dune Networking chips support a 4-stage pipeline: AC classification table (generating VRF_id), LPM (Longest Prefix Match), IFP-stage-1 (using (FEC_id, src_ip, dst_ip, etc.) as the lookup key), IFP-stage-2, and EFP.
- One aspect of the technology provides a method of building a multi-stage router forwarding table, the method comprising parsing a flow key into a plurality of buckets, using a processor, wherein each of the plurality of buckets includes one or more bits of the flow key, creating a plurality of tables in a memory, each of the plurality of buckets corresponding to one of the plurality of tables and each of the plurality of tables including one or more entries, wherein the plurality of tables are linked in a pipeline, and populating, using the processor, an entry in each of the plurality of tables in the pipeline with a lookup key and a corresponding output, the lookup key comprising an output from a preceding table and the bits from the bucket corresponding to the table.
- a last one of the plurality of tables in the pipeline may include an action for forwarding a data packet. Widths of one or more of the plurality of tables may be reduced according to variety of different methods.
- Parsing the flow key into the plurality of buckets may comprise determining a minimum configurable width of a last one of the plurality of tables in the pipeline, identifying sets of bits in the flow key as candidates for a last bucket, and determining whether any of the candidate sets of bits, when combined with an output from a preceding table, have a combined width less than the minimum configurable width of the last table in the pipeline. If a given candidate set of bits, when combined with the output from the preceding table, has a combined width less than the minimum configurable width of the last table in the pipeline, the given candidate set of bits may be grouped into the last bucket.
- a next smallest configurable width of the last table may be determined, and it may be further determined whether any of the candidate sets of bits, when combined with the output from the preceding table, have a combined width less than the next smallest configurable width of the last table in the pipeline.
- Another aspect of the technology provides a method for increasing capacity in a router forwarding table, comprising implementing one or more multi-stage TCAMs in a memory, the one or more multi-stage TCAMs comprising a plurality of tables linked in a pipeline, an input for each table in the pipeline including an output from a preceding table and a set of bits from a flow key, and an output for a last of the plurality of tables in the pipeline comprising an action for forwarding a data packet.
- the method may further comprise reducing, using a processor, a width of the one or more multi-stage TCAMs.
- Reducing the width of the one or more multi-stage TCAMs may comprise reducing a width of the output from the preceding table and reducing a width of the set of bits from the flow key, reducing a number of different outputs in the table, and reducing a number of bits used to represent the different outputs in the table, and/or aggregating two or more flow rules having different keys and the same output into one flow rule. This reducing may be performed periodically.
- a router comprising a storage area storing one or more multi-stage TCAMs, the one or more multi-stage TCAMs comprising a plurality of tables linked in a pipeline, an input for each table in the pipeline including an output from a preceding table and a set of bits from a flow key, and an output for a last of the plurality of tables in the pipeline comprising an action for forwarding a packet.
- the multi-stage TCAMs may further comprise an input adapted to receive packets including routing information, and a processor configured to sequentially match portions of the routing information against each of the plurality of tables linked in the pipeline, and forward the packet based on the action in the last table in the pipeline.
- FIG. 1 is a system diagram according to an aspect of the technology.
- FIG. 2 is a pictorial diagram of flow key buckets according to an aspect of the technology.
- FIG. 3 illustrates a multi-stage TCAM according to an aspect of the technology.
- FIG. 4 illustrates a stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 5 illustrates reduction of a width of a stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 6 illustrates a reduction of consumed hardware resources in a stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 7 illustrates a method of minimizing a width of a last stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 8 illustrates a method of minimizing a width of a preceding stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 9 illustrates a method of adding a rule to a TCAM according to an aspect of the technology.
- FIG. 10 illustrates a method for deleting a rule from the router according to an aspect of the technology.
- a multi-stage TCAM may include a plurality of tables on a pipeline and may store flow rules, including a key, an action, and a priority.
- the flow rule's key which may consist of a number of bits, may be divided into several buckets. For each bucket, a hardware table on the multi-stage TCAM may be created.
- the first bucket may be used as a lookup key to the first table, and an output from this first table may be used as a lookup key to the next table on the pipeline.
- a lookup key to the first table (T 1 ) may be the first bucket (B 1 ), and a corresponding action may be output 1 .
- the lookup key to the next table (T 2 ) may be (output 1 , B 2 ), and so on, until the last table (T N ), which has a lookup key of (output N-1 , B N ). Because the full flow key need not be stored in a single TCAM table, a capacity of the TCAM can be maximized with its width minimized.
- FIG. 1 illustrates an exemplary network 150 that joins a plurality of client computers 160 , 162 , 164 , 182 , 184 .
- the network 150 includes a plurality of routers 142 , 144 , 146 , 148 .
- Each router may include a processor 130 and a memory 120 coupled to the processor 130 .
- Each router 142 - 148 may further include one or more input ports for receiving data from other routers or computing devices, such as packets or program updates.
- each router 142 - 148 may have one or more output ports for transmitting data through the network 150 .
- Each router 142 - 148 may also include one or more packet forwarding tables, some or all of which may be multi-staged.
- TCAM 110 includes tables 112 , 114 , and 116 .
- each router may have a processor and a memory, such as memory 120 of the router 144 , which stores data 122 and instructions 128 (e.g., for populating multi-stage TCAMs, adding rules, deleting rules, etc.). While the TCAM 130 is shown as being stored separately from memory 120 , it should be understood that the TCAM 110 , data 122 , and instructions 128 may all be stored in the same medium.
- the memory 120 stores information accessible by processor 130 , including instructions 128 , and data 122 that may be executed or otherwise used by the processor 130 .
- the memory 120 may be of any type capable of storing information accessible by the processor, including a computer-readable medium, or other medium that stores data that may be read with the aid of an electronic device, such as a hard-drive, memory card, ROM, RAM, DVD or other optical disks, as well as other write-capable and read-only memories.
- Systems and methods may include different combinations of the foregoing, whereby different portions of the instructions and data are stored on different types of media.
- the instructions 128 may be any set of instructions to be executed directly (such as machine code) or indirectly (such as scripts) by the processor 130 .
- the instructions may be stored as computer code on the computer-readable medium.
- the terms “instructions” and “programs” may be used interchangeably herein.
- the instructions may be stored in object code format for direct processing by the processor, or in any other computer language including scripts or collections of independent source code modules that are interpreted on demand or compiled in advance. Functions, methods and routines of the instructions are explained in more detail below.
- the data 122 may be retrieved, stored or modified by processor 130 in accordance with the instructions 128 .
- the data may be stored in computer registers, in a relational database as a table having a plurality of different fields and records, XML documents or flat files.
- the data may also be formatted in any computer-readable format.
- the data may comprise any information sufficient to identify the relevant information, such as numbers, descriptive text, proprietary codes, references to data stored in other areas of the same memory or different memories (including other network locations) or information that is used by a function to calculate the relevant data.
- the processor 130 may be any conventional processor, such as processors in commercially available routers. Alternatively, the processor may be a dedicated controller such as an ASIC or other hardware-based processor.
- the processor and memory may actually comprise multiple processors and memories that may or may not be stored within the same physical housing. For example, memory may be a hard drive or other storage media located in a server farm of a data center. Accordingly, references to a processor, memory, or computer will be understood to include references to a collection of processors, memories or computers that may or may not operate in parallel.
- the computers 160 , 162 , 164 , 182 , 184 may be any of a variety of computing devices, including personal digital assistants (PDAs), laptops, tablet PCs, netbooks, PCs, etc. These devices may be connected to the network 150 via a wired connection, such as through a modem, or wirelessly, such as through an access point in communication with one of the routers 142 - 148 . Although only a few computers are depicted in FIG. 1 , it should be appreciated that a typical system can include a large number of connected computers, with each different computer being at a different node of the network 150 .
- the network, and intervening nodes may comprise various configurations and protocols including the Internet, World Wide Web, intranets, virtual private networks, wide area networks, local networks, private networks using communication protocols proprietary to one or more companies, Ethernet, WiFi (such as 802.11, 802.11b, g, n, or other such standards), and HTTP, and various combinations of the foregoing.
- Such communication may be facilitated by any device capable of transmitting data to and from other computers, such as modems (e.g., dial-up, cable or fiber optic) and wireless interfaces.
- each TCAM table 112 - 116 may comprise a set of TCAM entries.
- a width of the entries in these TCAM tables may be configurable, and inversely proportional to a capacity of the table.
- a table may support 1000 entries of 72 bits, 512 entries of 144 bits, or 256 entries of 288 bits.
- Each entry may store a flow rule.
- the rule includes a key (K), an action (A), and a priority (P).
- K key
- A action
- P priority
- Each rule is stored as a TCAM entry in order of priority.
- highest priority rules may be stored at a lowest indexed entry.
- router 142 may use packet information to determine that the next hop should be router 144 , and router 144 receives the packet and determines that the next hop should be router 148 .
- One mechanism used by the routers (e.g., router 144 ) to make such determinations is the TCAM 110 .
- a header of an incoming packet may include a series of bits, which may be compared against a lookup key of the multi-stage TCAM 110 .
- An output of the TCAM 110 may indicate an action to be taken, directing the packet to the next hop.
- systems and methods according to one aspect of the present technology provide for efficiently building and populating multi-stage TCAMs, as well as maintaining/updating such multi-stage TCAMs.
- the multi-stage TCAM tables may be dynamically configured to minimize their entry width, and therefore maximize capacity.
- FIG. 2 is a pictorial diagram of flow key buckets according to an aspect of the technology.
- a flow key may be included, for example, in a header of a packet to indicate a destination for the packet.
- the key includes a number of bits b 0 -b 7 . These bits may be grouped into “buckets” B 1 ( 212 ), B 2 ( 214 ), and B 3 ( 216 ). For example, as shown, bits b 0 -b 2 may be grouped in bucket B 1 , bits b 3 -b 5 may be grouped in bucket B 2 , and bits b 6 -b 7 may be grouped in bucket B 3 . It should be understood that any number of buckets 212 - 216 may be used. Additionally, it should be understood that any number of bits may be assigned to a given bucket. For example, a first bucket may include one bit, while a second bucket includes 5 bits, etc.
- Each bucket may correspond to a table in a multi-stage TCAM.
- FIG. 3 illustrates a multi-stage TCAM 300 according to an aspect of the technology.
- the multi-stage TCAM may be located on a router, such as the router 144 of FIG. 1 .
- the multi-stage TCAM 300 includes three tables 312 - 316 , corresponding to each of the buckets 212 - 216 in FIG. 2 . These tables 312 - 316 may be linked in a pipeline, such that table 314 follows table 312 , and table 316 follows table 314 .
- Each TCAM table 312 - 316 may be structured as a forwarding table including a key, an action, and a priority. While it should be understood that other structures are possible for the TCAM stages, each stage may be referred to as a “table” hereon for ease of reference, and “stage” and “table” may be used interchangeably herein.
- the bits in bucket B 1 may be listed as a lookup key in the first TCAM stage 312 , and a corresponding output (output 1 ) may be listed as the action.
- the output 1 from the first TCAM stage 312 may be used with the bits from the second bucket B 2 as a lookup key to the second TCAM stage 314 .
- the second TCAM stage 314 may include a lookup key (output 1 , B 2 ), and a corresponding action output 2 .
- the output from the second TCAM stage 314 , along with the third bucket, may be used as a lookup key to the third TCAM stage 316 .
- TCAM stage 316 may list (output 2 , B 3 ) as a lookup key, with a corresponding action. If the TCAM stage 316 is the last stage in the pipeline, the action may indicate a forwarding behavior for the packet. For example, the action may determine the next hop the packet will travel from the router.
- Using a multi-stage TCAM may facilitate conservation of resources as compared to a conventional TCAM. For example, because an entire flow key need not be stored as a lookup in the TCAM, a width of the TCAM may be reduced. Because a width of the TCAM may be reduced, a capacity of the TCAM may be increased.
- the capacity of the multi-stage TCAM 300 may be maximized if the flow keys are parsed into buckets efficiently. Accordingly, several rules may provide for efficiently parsing the flow keys and creating the multi-stage TCAMs. These rules may be implemented as instructions or software modules executable by the processor 130 , or may be used as guidelines for writing such instructions.
- FIG. 4 depicts a stage (e.g., table 314 ) of a multi-stage TCAM (e.g., TCAM 300 ).
- a lookup key listed in the table 314 is (output 1 , B 2 ).
- This key has a given width, for example, determined by a total number of bits therein.
- the width of the key (output 1 , B 2 ) may be minimized if the width of output 1 and the width of B 2 are each minimized.
- a width of the TCAM table 314 may potentially be reduced.
- the width of the key (output 1 , B 2 ) was greater than a width of any other key in the table, reducing the width of the key would enable a reduced width of the entire table.
- the widths of each of the keys in the table 314 were reduced in a similar manner to the key (output 1 , B 2 ), the width of the table 314 could also be reduced. In any of these instances of reducing the width of the table 314 , the capacity of the table 314 may be increased.
- FIG. 5 depicts reduction of a width of a stage of a multi-stage TCAM according to an aspect of the technology.
- FIG. 5 shows two tables 510 , 550 .
- Each table includes a listing of outputs (e.g., outputX, outputY, outputZ) which may be the outputs corresponding to various lookup keys listed in one stage of a multi-stage TCAM.
- Each table 510 , 550 also includes a bit representation of the output. These bit representations are simplified for ease of explanation. As shown in the table 510 , outputX and outputZ are both represented by bits 01 , while outputY is represented by bits 10 . Because there are effectively only two different outputs ( 01 and 10 ), these outputs may be represented by one bit ( 0 or 1 ) as shown in table 550 .
- FIG. 6 depicts a reduction of consumed hardware resources in a stage of a multi-stage TCAM according to an aspect of the technology.
- two flow rules having different keys may be aggregated into one flow rule in a router forwarding table if they produce the same output.
- a TCAM 600 includes a first stage 612 and a second stage 614 .
- the second stage 614 includes at least two flow rules, comprising lookup keys with corresponding outputs. Although the two lookup keys (output a, B 1 ) and (output b, B 1 ) are different, they correspond to the same output c. These two flow rules may thus be aggregated into a single flow rule.
- TCAM stage 614 ′ the two keys of stage 614 are replaced with a single key (output a,b, B 1 ), which corresponds to the output c.
- a capacity of the TCAM 600 is increased by freeing entries in its individual stages.
- minimum widths of the stages in a multi-stage TCAM may be determined, and flow keys may be efficiently parsed into buckets accordingly. For example, according to one aspect of the technology, a minimum width of the last stage in the TCAM may be determined first. Minimum widths of each preceding TCAM stage in the pipeline may then be determined until a width of a first stage in the TCAM is determined. Once the minimal widths of the TCAM stages are determined, a grouping of bits of a flow key into buckets may be determined.
- FIG. 7 illustrates a method 700 of minimizing the width of the last table in a multi-stage TCAM according to an aspect of the technology.
- a minimum width (W n1 ) of the table (T n ) may be determined. It is then determined whether a bucket (B n ), which corresponds to the last stage, exists such that a total width of a lookup key in the last stage is less than or equal to the determined minimum width of the table. If no such bucket exists, a next smallest configurable width for the last table is determined, and a similar analysis is performed. This process is explained in further detail below.
- a TCAM stage's minimum configurable width (W n1 ) is determined.
- the minimum configurable width may be set by a manufacturer and read by a processor in communication with the TCAM.
- a set of candidate bits to be grouped into a last bucket B n corresponding to the last table T n of the TCAM, is identified.
- the candidate bits may include all or some of the bits of a flow key, such as the last four bits as a first set, the last three bits as a second set, the last two bits as a third set, etc.
- the method 700 returns to block 730 , where it is determined whether the any candidate sets of bits remain for analysis and another candidate set is selected for analysis (block 740 ).
- the method 700 may continue this progression of analyzing candidate sets of bits for the bucket B n for each possible width of the table T n greater than the minimum configurable width until a value for B n is identified.
- Buckets for each TCAM table preceding the last table T n may be consecutively determined in a manner similar to the method 700 .
- bucket B n-1 may be determined for a minimum width of table T n-1
- bucket B n-2 may be determined for a minimum width of table T n-2
- a method 800 of determining the bucket (B L ) and minimum width (W) of a TCAM stage table (T L ) preceding the last table in the pipeline is illustrated in FIG. 8 .
- This method 800 may be performed, for example, after determining the widths of T L+1 , T L+2 , . . . T N .
- a minimum configurable width (W L ) of a TCAM table T L is determined.
- the minimum configurable width may be determined in a manner similar to that described above in connection with block 710 of FIG. 7 .
- a set of candidate bits to be grouped into a bucket B L corresponding to the table T 2 , is identified.
- the candidate sets of bits may include only those bits which have not been already been assigned to buckets B L+1 , B L+2 , etc., corresponding to TCAM tables T L+1 , T L+2 , etc. For example, if the table T L immediately precedes the last table T N in the pipeline, and the last 3 bits of an 8-bit key are assigned to the bucket B N , only sets of bits including the first five bits of the key may be identified as candidates for B L .
- it may be determined whether the candidate sets of bits are empty. For example, if all the candidate sets of bits have been analyzed, s 0 may return true. However, if there are candidate sets that have not yet been analyzed, a set may be selected in block 840 and removed from the candidate sets.
- block 850 it is determined whether a total width of (output L-1 , B L ) is less than or equal to the minimum configurable width W L1 , where the selected candidate set of bits is used for B L . If this returns true, B L is set to the selected candidate set of bits (block 860 ). However, if the condition of block 850 returns false, the method 800 returns to block 830 , where it is determined whether any candidate sets of bits remain for analysis, and if so, another candidate set is selected for analysis (block 840 ).
- the method 800 may continue this progression of analyzing candidate sets of bits for the bucket B L for each possible width of the table T L greater than the minimum configurable width until a value for B L is identified.
- the multi-stage TCAM may need to be updated, for example, to add a flow rule or delete a flow rule.
- rules may be added or deleted according to a given method.
- FIG. 9 illustrates an example method 900 of adding a rule to a multi-stage TCAM according to an aspect of the technology.
- the multi-stage TCAM may include tables T 1 , T 2 , . . . T n . Widths of each of these tables and a number of bits in each corresponding bucket B 1 , B 2 , . . . B n may have been determined, for example, according to the methods 700 and 800 of FIGS. 7-8 .
- a rule to be added to the multi-stage TCAM is identified.
- the rule may include a key, an action, and a priority.
- the key of the rule may be parsed into buckets based on existing buckets B 1 , B 2 , . . . B n corresponding to table stages T 1 , T 2 , . . . T n .
- the lookup key of the rule to be added may be parsed to group the first three bits in B 1 , the next three bits in B 2 , and the last three bits in B 3 .
- the number of buckets and the number of bits assigned to each bucket are merely exemplary, and that lookup keys may be longer or shorter than 9 bits and that more or fewer buckets or bits per bucket may be designated.
- a first table T 1 in the multi-stage TCAM is selected.
- the table T 1 may be, for example, the first or last table in the pipeline. This table T 1 may be defined as T for purposes of the remaining blocks in the method 900 .
- a lookup key and action for the new rule may be determined for the table T. For example, if table T is the first table in the pipeline, the lookup key may be B 1 and the action may be output 1 . If table T is not the first table in the pipeline (e.g., T L ), the lookup key may be (output L-1 , B L ) and the action may be output L .
- the lookup key for the new rule may be “100” and the action may be “11.” If another rule in the table T includes lookup key “100” and action “11,” the new rule may be considered redundant for table T.
- T is defined as a next table in the pipeline (e.g., T 2 ), and the method repeats from block 940 to determine whether a new entry need be created in that next table.
- a new entry for the rule may be created in the table T (block 960 ).
- the new rule's lookup key and action for the table T may thus be added in the new entry (block 970 ).
- the next table may then be analyzed to determine whether a new entry need be created, and this process may iterate until all the tables in the pipeline have been analyzed.
- FIG. 10 illustrates a method 1000 for deleting a rule from the multi-stage TCAM according to an aspect of the technology. Similar to the method 900 of FIG. 9 , the method 1000 visits each table T 1 , T 2 , . . . T n of the multi-stage TCAM. However, rather than determining whether new entries need be created, the method 1000 determines whether entries may be deleted.
- a rule (e.g., rule “r”) to be removed is identified.
- the rule r may include a key and an action.
- a first table of the multi-stage TCAM is selected. For example, a first table T 1 in the pipeline may be selected first and defined as T for purposes of the remainder of the method 1000 .
- a lookup and action for the rule r is identified in the table T.
- the lookup key may be B 1 and the action may be output 1 .
- the lookup key may be (output L-1 , B L ) and the action may be output L .
- the above described methods may be implemented as software (e.g., executable code stored in memory 120 ) and executed by a processor in the router.
- the software may be stored remotely. This software application may be automatically run, for example, each time a flow rule is to be added to or removed from the router.
- the above-described methods may produce a significant cost savings. Particularly, less hardware resources may be consumed, because the TCAMs are used more efficiently. Further, because the width and capacity of each TCAM may be automatically configured, updating of the router to add or delete rules may be done quickly and efficiently.
- the present invention has been described with reference to particular embodiments, it should be understood that these examples are merely illustrative of the principles and applications of the present invention.
- the described system and method may be implemented over any network, such as the Internet, or any private network connected through a router.
- the network may be a virtual private network operating over the Internet, a local area network, or a wide area network.
- numerous other modifications may be made to the illustrative embodiments. For example, the steps taken to derive the lowest cost number of moves within the TCAM may be modified.
- these and that other arrangements may be devised without departing from the spirit and scope of the present invention as defined by the appended claims.
Abstract
Description
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/434,094 US9438505B1 (en) | 2012-03-29 | 2012-03-29 | System and method for increasing capacity in router forwarding tables |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/434,094 US9438505B1 (en) | 2012-03-29 | 2012-03-29 | System and method for increasing capacity in router forwarding tables |
Publications (1)
Publication Number | Publication Date |
---|---|
US9438505B1 true US9438505B1 (en) | 2016-09-06 |
Family
ID=56878337
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/434,094 Active 2035-03-11 US9438505B1 (en) | 2012-03-29 | 2012-03-29 | System and method for increasing capacity in router forwarding tables |
Country Status (1)
Country | Link |
---|---|
US (1) | US9438505B1 (en) |
Cited By (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160134535A1 (en) * | 2014-11-06 | 2016-05-12 | Juniper Networks, Inc. | Deterministic and optimized bit index explicit replication (bier) forwarding |
US20160342662A1 (en) * | 2010-08-01 | 2016-11-24 | Gsi Technology Israel Ltd. | Multi-stage tcam search |
US20180068032A1 (en) * | 2016-09-07 | 2018-03-08 | Mellanox Technologies Tlv Ltd. | Efficient matching of TCAM rules using hash tables in RAM |
EP3035612A4 (en) * | 2013-09-16 | 2018-07-18 | ZTE Corporation | Method for making flow table multiple levels, and multi-level flow table processing method and device |
US10049126B2 (en) | 2015-09-06 | 2018-08-14 | Mellanox Technologies Tlv Ltd. | Cuckoo hashing with selectable hash |
US10153967B2 (en) | 2014-11-06 | 2018-12-11 | Juniper Networks, Inc. | Deterministic and optimized bit index explicit replication (BIER) forwarding |
US10476794B2 (en) | 2017-07-30 | 2019-11-12 | Mellanox Technologies Tlv Ltd. | Efficient caching of TCAM rules in RAM |
US10491521B2 (en) | 2017-03-26 | 2019-11-26 | Mellanox Technologies Tlv Ltd. | Field checking based caching of ACL lookups to ease ACL lookup search |
US10496680B2 (en) | 2015-08-17 | 2019-12-03 | Mellanox Technologies Tlv Ltd. | High-performance bloom filter array |
US10944675B1 (en) | 2019-09-04 | 2021-03-09 | Mellanox Technologies Tlv Ltd. | TCAM with multi region lookups and a single logical lookup |
US11003715B2 (en) | 2018-09-17 | 2021-05-11 | Mellanox Technologies, Ltd. | Equipment and method for hash table resizing |
US11327974B2 (en) | 2018-08-02 | 2022-05-10 | Mellanox Technologies, Ltd. | Field variability based TCAM splitting |
US20220170790A1 (en) * | 2020-11-27 | 2022-06-02 | Coretronic Corporation | Electronic device and method for spectral model explanation |
CN114745327A (en) * | 2022-06-10 | 2022-07-12 | 鹏城实验室 | Service data forwarding method, device, equipment and storage medium |
US20220345405A1 (en) * | 2015-08-26 | 2022-10-27 | Barefoot Networks, Inc. | Packet header field extraction |
US11539622B2 (en) | 2020-05-04 | 2022-12-27 | Mellanox Technologies, Ltd. | Dynamically-optimized hash-based packet classifier |
US11782895B2 (en) | 2020-09-07 | 2023-10-10 | Mellanox Technologies, Ltd. | Cuckoo hashing including accessing hash tables using affinity table |
US11917042B2 (en) | 2021-08-15 | 2024-02-27 | Mellanox Technologies, Ltd. | Optimizing header-based action selection |
US11929837B2 (en) | 2022-02-23 | 2024-03-12 | Mellanox Technologies, Ltd. | Rule compilation schemes for fast packet classification |
US11968285B2 (en) | 2022-02-24 | 2024-04-23 | Mellanox Technologies, Ltd. | Efficient memory utilization for cartesian products of rules |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6862281B1 (en) * | 2001-05-10 | 2005-03-01 | Cisco Technology, Inc. | L4 lookup implementation using efficient CAM organization |
US7043494B1 (en) * | 2003-01-28 | 2006-05-09 | Pmc-Sierra, Inc. | Fast, deterministic exact match look-ups in large tables |
US20070280258A1 (en) * | 2006-06-05 | 2007-12-06 | Balaji Rajagopalan | Method and apparatus for performing link aggregation |
US20110038375A1 (en) * | 2009-08-17 | 2011-02-17 | Board Of Trustees Of Michigan State University | Efficient tcam-based packet classification using multiple lookups and classifier semantics |
US7986696B1 (en) * | 2009-02-12 | 2011-07-26 | Compass Electro-Optical Systems | Method and apparatus for longest prefix matching |
-
2012
- 2012-03-29 US US13/434,094 patent/US9438505B1/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6862281B1 (en) * | 2001-05-10 | 2005-03-01 | Cisco Technology, Inc. | L4 lookup implementation using efficient CAM organization |
US7043494B1 (en) * | 2003-01-28 | 2006-05-09 | Pmc-Sierra, Inc. | Fast, deterministic exact match look-ups in large tables |
US20070280258A1 (en) * | 2006-06-05 | 2007-12-06 | Balaji Rajagopalan | Method and apparatus for performing link aggregation |
US7986696B1 (en) * | 2009-02-12 | 2011-07-26 | Compass Electro-Optical Systems | Method and apparatus for longest prefix matching |
US20110038375A1 (en) * | 2009-08-17 | 2011-02-17 | Board Of Trustees Of Michigan State University | Efficient tcam-based packet classification using multiple lookups and classifier semantics |
Cited By (23)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160342662A1 (en) * | 2010-08-01 | 2016-11-24 | Gsi Technology Israel Ltd. | Multi-stage tcam search |
EP3035612A4 (en) * | 2013-09-16 | 2018-07-18 | ZTE Corporation | Method for making flow table multiple levels, and multi-level flow table processing method and device |
US10153967B2 (en) | 2014-11-06 | 2018-12-11 | Juniper Networks, Inc. | Deterministic and optimized bit index explicit replication (BIER) forwarding |
US10033641B2 (en) * | 2014-11-06 | 2018-07-24 | Juniper Networks, Inc. | Deterministic and optimized bit index explicit replication (BIER) forwarding |
US20160134535A1 (en) * | 2014-11-06 | 2016-05-12 | Juniper Networks, Inc. | Deterministic and optimized bit index explicit replication (bier) forwarding |
US10496680B2 (en) | 2015-08-17 | 2019-12-03 | Mellanox Technologies Tlv Ltd. | High-performance bloom filter array |
US20220345405A1 (en) * | 2015-08-26 | 2022-10-27 | Barefoot Networks, Inc. | Packet header field extraction |
US10049126B2 (en) | 2015-09-06 | 2018-08-14 | Mellanox Technologies Tlv Ltd. | Cuckoo hashing with selectable hash |
US20180068032A1 (en) * | 2016-09-07 | 2018-03-08 | Mellanox Technologies Tlv Ltd. | Efficient matching of TCAM rules using hash tables in RAM |
US10068034B2 (en) * | 2016-09-07 | 2018-09-04 | Mellanox Technologies Tlv Ltd. | Efficient matching of TCAM rules using hash tables in RAM |
US10491521B2 (en) | 2017-03-26 | 2019-11-26 | Mellanox Technologies Tlv Ltd. | Field checking based caching of ACL lookups to ease ACL lookup search |
US10476794B2 (en) | 2017-07-30 | 2019-11-12 | Mellanox Technologies Tlv Ltd. | Efficient caching of TCAM rules in RAM |
US11327974B2 (en) | 2018-08-02 | 2022-05-10 | Mellanox Technologies, Ltd. | Field variability based TCAM splitting |
US11003715B2 (en) | 2018-09-17 | 2021-05-11 | Mellanox Technologies, Ltd. | Equipment and method for hash table resizing |
US10944675B1 (en) | 2019-09-04 | 2021-03-09 | Mellanox Technologies Tlv Ltd. | TCAM with multi region lookups and a single logical lookup |
US11539622B2 (en) | 2020-05-04 | 2022-12-27 | Mellanox Technologies, Ltd. | Dynamically-optimized hash-based packet classifier |
US11782895B2 (en) | 2020-09-07 | 2023-10-10 | Mellanox Technologies, Ltd. | Cuckoo hashing including accessing hash tables using affinity table |
US20220170790A1 (en) * | 2020-11-27 | 2022-06-02 | Coretronic Corporation | Electronic device and method for spectral model explanation |
US11852532B2 (en) * | 2020-11-27 | 2023-12-26 | Coretronic Corporation | Electronic device and method for spectral model explanation |
US11917042B2 (en) | 2021-08-15 | 2024-02-27 | Mellanox Technologies, Ltd. | Optimizing header-based action selection |
US11929837B2 (en) | 2022-02-23 | 2024-03-12 | Mellanox Technologies, Ltd. | Rule compilation schemes for fast packet classification |
US11968285B2 (en) | 2022-02-24 | 2024-04-23 | Mellanox Technologies, Ltd. | Efficient memory utilization for cartesian products of rules |
CN114745327A (en) * | 2022-06-10 | 2022-07-12 | 鹏城实验室 | Service data forwarding method, device, equipment and storage medium |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US9438505B1 (en) | System and method for increasing capacity in router forwarding tables | |
CN108370352B (en) | High speed flexible packet classification using network processors | |
US10511532B2 (en) | Algorithmic longest prefix matching in programmable switch | |
US9225643B2 (en) | Lookup cluster complex | |
US8750144B1 (en) | System and method for reducing required memory updates | |
US8856203B1 (en) | System and method for algorithmic TCAM packet classification | |
US8504510B2 (en) | State machine compression for scalable pattern matching | |
US9531723B2 (en) | Phased bucket pre-fetch in a network processor | |
Qiao et al. | Fast Bloom filters and their generalization | |
US20150242429A1 (en) | Data matching based on hash table representations of hash tables | |
US9595003B1 (en) | Compiler with mask nodes | |
US8990492B1 (en) | Increasing capacity in router forwarding tables | |
JP4995125B2 (en) | How to search fixed length data | |
US9692705B1 (en) | System and method for measurement of flow statistics | |
Luo et al. | Practical flow table aggregation in SDN | |
US11652744B1 (en) | Multi-stage prefix matching enhancements | |
Abbasi et al. | MBitCuts: optimal bit-level cutting in geometric space packet classification | |
Pao et al. | A multi-pipeline architecture for high-speed packet classification | |
Yang et al. | Fast OpenFlow table lookup with fast update | |
US9900409B2 (en) | Classification engine for data packet classification | |
Lu et al. | Succinct representation of static packet classifiers | |
Nikolenko et al. | How to represent IPv6 forwarding tables on IPv4 or MPLS dataplanes | |
Lo et al. | Flow entry conflict detection scheme for software-defined network | |
US9590897B1 (en) | Methods and systems for network devices and associated network transmissions | |
Erdem et al. | Multi-pipelined and memory-efficient packet classification engines on FPGAs |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ZHOU, JUNLAN;JI, ZHENGRONG;REEL/FRAME:027993/0405Effective date: 20120326 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044566/0657Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |