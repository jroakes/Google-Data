CN112912840A - Debugging applications for delivery by an application delivery server - Google Patents
Debugging applications for delivery by an application delivery server Download PDFInfo
- Publication number
- CN112912840A CN112912840A CN201980002163.4A CN201980002163A CN112912840A CN 112912840 A CN112912840 A CN 112912840A CN 201980002163 A CN201980002163 A CN 201980002163A CN 112912840 A CN112912840 A CN 112912840A
- Authority
- CN
- China
- Prior art keywords
- application
- data processing
- processing system
- action
- classification score
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000012384 transportation and delivery Methods 0.000 title claims abstract description 241
- 230000009471 action Effects 0.000 claims abstract description 465
- 238000012545 processing Methods 0.000 claims description 532
- 238000000034 method Methods 0.000 claims description 181
- 230000008569 process Effects 0.000 claims description 111
- 230000004044 response Effects 0.000 claims description 66
- 238000009434 installation Methods 0.000 claims description 3
- 230000002401 inhibitory effect Effects 0.000 claims 1
- 238000004458 analytical method Methods 0.000 abstract description 5
- 238000012552 review Methods 0.000 description 45
- 238000003058 natural language processing Methods 0.000 description 37
- 230000005236 sound signal Effects 0.000 description 37
- 239000008186 active pharmaceutical agent Substances 0.000 description 35
- 230000000875 corresponding effect Effects 0.000 description 19
- 238000003860 storage Methods 0.000 description 19
- 238000004590 computer program Methods 0.000 description 12
- 230000006870 function Effects 0.000 description 10
- 238000004891 communication Methods 0.000 description 8
- 230000000694 effects Effects 0.000 description 6
- 230000003993 interaction Effects 0.000 description 6
- 230000000007 visual effect Effects 0.000 description 6
- 238000013515 script Methods 0.000 description 5
- 230000002730 additional effect Effects 0.000 description 4
- 238000012550 audit Methods 0.000 description 4
- 230000006399 behavior Effects 0.000 description 4
- 230000000670 limiting effect Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 238000010586 diagram Methods 0.000 description 3
- 238000007726 management method Methods 0.000 description 3
- 238000004519 manufacturing process Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 230000001960 triggered effect Effects 0.000 description 3
- 238000013475 authorization Methods 0.000 description 2
- 230000008901 benefit Effects 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 238000006243 chemical reaction Methods 0.000 description 2
- 230000001276 controlling effect Effects 0.000 description 2
- 230000001934 delay Effects 0.000 description 2
- 238000001514 detection method Methods 0.000 description 2
- 238000007689 inspection Methods 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 238000010801 machine learning Methods 0.000 description 2
- 238000013507 mapping Methods 0.000 description 2
- 230000007246 mechanism Effects 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000004904 shortening Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- 238000012360 testing method Methods 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- 238000013519 translation Methods 0.000 description 2
- IRLPACMLTUPBCL-KQYNXXCUSA-N 5'-adenylyl sulfate Chemical compound C1=NC=2C(N)=NC=NC=2N1[C@@H]1O[C@H](COP(O)(=O)OS(O)(=O)=O)[C@@H](O)[C@H]1O IRLPACMLTUPBCL-KQYNXXCUSA-N 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000008859 change Effects 0.000 description 1
- 239000003795 chemical substances by application Substances 0.000 description 1
- 238000004140 cleaning Methods 0.000 description 1
- 239000003086 colorant Substances 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 230000009193 crawling Effects 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000018109 developmental process Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 235000013305 food Nutrition 0.000 description 1
- 239000000446 fuel Substances 0.000 description 1
- 230000006872 improvement Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000012423 maintenance Methods 0.000 description 1
- 239000003550 marker Substances 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000011218 segmentation Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 238000011524 similarity measure Methods 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 230000009466 transformation Effects 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3664—Environments for testing or debugging software
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3604—Software analysis for verifying properties of programs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/56—Computer malware detection or handling, e.g. anti-virus arrangements
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/57—Certifying or maintaining trusted computer platforms, e.g. secure boots or power-downs, version controls, system software checks, secure updates or assessing vulnerabilities
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/60—Software deployment
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/70—Software maintenance or management
- G06F8/71—Version control; Configuration management
Abstract
Analysis or debugging applications are provided. The system identifies an action for an application provided by a developer. The system determines a first classification score based on historical execution of the action. The system generates a machine-generated action for the application based on metadata associated with the application. The system determines a second classification score based on a comparison of the action to the machine-generated action. The system selects a second application via the matching program that matches the application. The system determines a third classification score based on a comparison of the action approved for the second application and the action provided by the application developer. The system updates the delivery control parameter based on the first classification score, the second classification score, and the third classification score. The system controls delivery of the application based on the delivery control parameters.
Description
Background
An application may be installed on a computing device. The computing device may execute an application.
Disclosure of Invention
The present disclosure relates generally to analyzing or debugging an application for delivery via an application delivery server. In response to a request or trigger, an application may perform a malicious action or perform an incorrect action. The performance of malicious or incorrect actions may result in wasted computing resource utilization, bandwidth utilization, and battery utilization on the mobile device. In addition, the execution of malicious or incorrect actions may cause the remote procedure call to increase due to repeated requests before the correct action is performed. Network security issues may arise from the provision of applications that perform malicious actions, and timely identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications provided for delivery via the application delivery server, it may be challenging to efficiently and reliably detect applications that perform malicious or incorrect actions, e.g., to detect rogue applications or to perform quality or other review on the applications without causing delays in the review process. The system and method of the present technical solution allows for reviewing applications based on historical execution information, simulated actions, or matching applications. Based on the review, the technical solution may prevent the delivery of applications that are determined to be fraudulent or incorrect or prohibit certain actions of applications that are determined to be fraudulent or incorrect.
At least one aspect relates to a system that analyzes or debugs an application for delivery via an application delivery server. The system may include a data processing system having one or more processors and memory. The data processing system may identify, for an application, a messaging object configured with an action by an application developer. The application may be submitted by an application developer. The data processing system may determine a first classification score based on historical performance of actions of the messaging object provided by the application developer. The data processing system may generate a machine-generated action for the application based on metadata associated with the application. The data processing system may determine a second classification score based on a comparison of the action of the messaging object provided with the application developer and the machine-generated action. The data processing system may select, via a matching program, a second application that matches the application. The data processing system may determine a third classification score based on a comparison of the action approved for the second application and the action of the messaging object provided by the application developer. The data processing system may update the delivery control parameters based on one or more or each of: the first classification score, the second classification score, and/or the third classification score. The data processing system may control delivery of the application by the application delivery server in response to the delivery control parameters updated by the data processing system.
Exemplary optional features of the system may be as follows. The data processing system may be configured to receive the application from an application developer device. The data processing system may be configured to receive a data file associated with the application, the data file including a plurality of actions established by the application developer for the application. The data processing system may be configured to receive an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server. The data processing system may be configured to trigger a debugging process in response to an indication of the new application, the debugging process including determining the first classification score, the second classification score, and the third classification score. The data processing system may be configured to receive an indication that the application is an updated version of the application uploaded by the application developer for delivery by the application delivery server. The data processing system may be configured to trigger a debugging process in response to an indication of an updated version of the application, the debugging process including determining the first classification score, the second classification score, and the third classification score. The data processing system may be configured to receive an indication of negative feedback for the application from a client computing device on which the application is installed. The data processing system may be configured to trigger a debugging process in response to an indication of the negative feedback for the application, the debugging process including determining the first, second, and third classification scores. The data processing system may be configured to determine to trigger a debugging process that includes determining the first, second, and/or third classification scores prior to delivering the application for installation on a client computing device. The first classification score may indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score to a threshold. The data processing system may be configured to determine that the application matches the second application based on a similarity score between the application and the second application being greater than a similarity threshold. The data processing system may be configured to determine to authorize delivery of the application based on the first classification score, the second classification score, and the third classification score. The data processing system may be configured to update the delivery control parameters to cause the application to be delivered by the application delivery server. The data processing system may be configured to determine a classification failure based on at least one of the first classification score, the second classification score, or the third classification score being less than a failure threshold. The data processing system may be configured to determine a classification failure based on the first classification score, the second classification score, and the third classification score. The data processing system may be configured to update the delivery control parameter to prevent delivery of the application by the application delivery server in response to the classification failing. The data processing system may be configured to send a notification of the classification failure to the application developer. The data processing system may be configured to request an updated version of the application from the application developer in response to the classification failing. The data processing system may be configured to determine a classification failure based on the first classification score, the second classification score, and/or the third classification score for the action of the messaging object. The data processing system may be configured to disable an action of the messaging object performed via the application in response to the classification failing. The data processing system may be configured to authorize the application for delivery by the application delivery server. The data processing system may be configured to identify a plurality of actions established for the application. The data processing system may be configured to determine a first classification score, a second classification score, and/or a third classification score via a debugging process for each of the plurality of actions. The data processing system may be configured to update the delivery control parameters to inhibit one or more of the plurality of actions based on the debugging process. The data processing system may be configured to identify a plurality of digital surfaces for performing actions of messaging objects of the application. The data processing system may be configured to update the delivery control parameters to inhibit execution of actions of messaging objects of the application on ones of the plurality of digital surfaces. The data processing system may be configured to trigger a debugging process for a third application. The data processing system may be configured to determine a first classification score for the third application via the debugging process for the third application. The data processing system may be configured to detect a first classification failure based on a comparison of the first classification score for the third application to a first classification threshold. The data processing system may be configured to exit the debugging process for the third application prior to determining a second classification score for the third application and/or a third classification score for the third application in response to detecting the first classification failure. The data processing system may be configured to send a notification of the failure of the first classification to an administrator device.
At least one aspect relates to a method of analyzing or debugging an application for delivery via an application delivery server. The method may be performed by a data processing system having a processor and a memory. The method may include identifying, for an application, a messaging object configured with an action by the application developer. The application may be submitted by the application developer. The method may include the data processing system determining a first classification score based on historical performance of actions of the messaging object provided by the application developer. The method may include the data processing system generating a machine-generated action for the application based on metadata associated with the application. The method may include determining a second classification score based on a comparison of an action of the messaging object provided by the application developer and the machine-generated action. The method may include selecting, via a matching program, the data processing system of a second application that matches the application. The method may include determining a third classification score based on a comparison of an action approved for the second application and an action of the messaging object provided by the application developer. The method may include updating the data processing system of a delivery control parameter based on the first classification score, the second classification score, and the third classification score. The method may include controlling the data processing system of the delivery of the application by the application delivery server in response to the delivery control parameters updated by the data processing system.
The method may include receiving, by the data processing system, the application from an application developer device. The method may include receiving, by the data processing system, a data file associated with the application, the data file including a plurality of actions established by the application developer for the application. The method may include determining to authorize delivery of the application based on the first classification score, the second classification score, and/or the third classification score. The method may include updating the delivery control parameter to cause the application delivery server to deliver the application. The method may include determining a classification failure based on at least one of the first classification score, the second classification score, or the third classification score being less than a failure threshold. The method may include updating the delivery control parameter to prevent delivery of the application by the application delivery server in response to the classification failing.
At least one aspect relates to a computer program product, which when implemented on a data processing system of an application delivery server, is configured to cause the data processing system to perform a method of analyzing or debugging an application for delivery via the application delivery server.
Individual features and/or combinations of features defined above in accordance with any aspect of the invention or below in relation to any specific embodiment of the invention may be utilized in any other aspect or embodiment of the invention separately and individually, separately or in combination with any other defined features.
Furthermore, the invention is intended to cover devices configured to perform any of the features described herein with respect to the method and/or methods of using or producing, using or manufacturing any of the device features described herein.
These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments, and provide a summary or framework for understanding the nature and character of the claimed aspects and embodiments. The accompanying drawings are included to provide an illustration and a further understanding of the various aspects and embodiments, and are incorporated in and constitute a part of this specification.
Drawings
The drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing.
In the drawings:
FIG. 1 is an illustration of an example system for debugging an application;
FIG. 2 is an illustration of example operation of a system for debugging an application;
FIG. 3 is an illustration of an example method of debugging an application; and
fig. 4 is a block diagram illustrating a general architecture for a computer system that may be employed to implement elements of the systems and methods described herein and illustrated herein, including, for example, the systems depicted in fig. 1 and 2 and the method depicted in fig. 3.
Detailed Description
The following are more detailed descriptions of various concepts related to methods, apparatuses, and systems for analyzing or debugging an application and embodiments of such methods, apparatuses, and systems. The various concepts introduced above and discussed in more detail below may be implemented in any of a number of ways.
The present disclosure relates generally to analyzing or debugging applications for delivery via an application delivery server. For example, the systems and methods of the present technology solution may analyze or debug actions configured in an application. Actions may refer to or include mechanisms used by application developers to surfaced their applications and their content. An application developer may specify the operations that their application supports. An application developer may submit an indication of its application and the operations supported by the application to a data processing system. The data processing system may, upon receiving an indication of an application and an action provided by an application developer, debug or otherwise review the application. The data processing system may debug or audit the application before or after making the application available for download or use by the end-user client device. The data processing system may debug or examine the application to determine whether the deep link for the application causes the application to perform a function responsive to the requested action or to provide a content item responsive to the requested action. For example, the data processing system may debug the application to determine whether the deep link for the application actually directs the user to the appropriate picture or state in the application based on the desired action. A deep link may refer to a hyperlink or other reference or pointer that links to a particular piece of content, such as a particular state or screen in the application as opposed to the home page or initial state or screen of the application. Deep links may refer to links to pages or content beyond the top level home page, screen, or state.
The data processing system may perform an analysis or debugging process for the application. The analysis or debugging process may include fraud detection and quality review. Fraud detection may refer to detecting whether an application intentionally attempts to mislead a user. For example, a user may request to book a ride to a particular destination, but a deep link into an application may take the user to a page that does not wish to fulfill the user's intent. Alternatively, deep links into the application may direct the user to malicious or abusive content.
Quality review may refer to determining whether deep linking directs a user to a desired action and helps fulfill the user's intent. To perform a quality audit, the data processing system may determine whether the intent purportedly provided by the application was actually provided by the application. For example, a developer of a music streaming service may provide an entity for artists and songs to an application. The user may request a song by artist, which may cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ultimately leads the user to a page of a different artist or a different type of page (e.g., an audio reading), the deep link may be incorrect or bad.
Thus, in response to a request or trigger, an application may perform a malicious action or perform an incorrect action. The performance of malicious or incorrect actions may result in wasted computing resource utilization, bandwidth utilization, and battery utilization on the computing device. Furthermore, the execution of malicious or incorrect actions may cause an increase in remote procedure calls due to repeated requests before the correct action is performed. Network security issues may arise from the provision of applications that perform malicious actions, and timely automatic identification and addressing of such applications may provide system security benefits. Due to the large number of applications and updates to applications provided for delivery via the application delivery server, it can be challenging to efficiently and reliably detect malicious or rogue applications or perform quality inspections on applications without causing delays in the inspection process. The system and method of the present technical solution allows for reviewing applications based on historical execution information, simulated actions, or matching applications. Based on the review, the technical solution may prevent the delivery of applications that are determined to be malicious, fraudulent or incorrect or prohibit certain actions of applications that are determined to be malicious, fraudulent or incorrect.
For example, the data processing system may include an application review system. The data processing system may receive application metadata from an application developer. The application metadata may include, for example, a title of the application, a description of the application, a screen shot of the application, a manifest of the entities supported by the application, a web site or web corpus indicated by the entities supported by the application, intents or actions corresponding to the entities supported by the application, and mechanisms or instructions regarding how to construct deep links for the entities of the application. For example, an application for a music streaming surface may provide the name, description, and list of artists, songs as entities, and play music as an intent or action to be performed per entity. The data processing system may apply a filter to identify a list of entities and then rank the entities to identify a top entity. The data processing system may construct an application deep link that may use a deep link build engine to trigger an application. If the results of the review indicate that the quality of the deep link for the application action is below a threshold, the data processing system may perform the review including crawling the application or website to compare entities exposed via the deep link as compared to entities indicated by the application metadata. The data processing system may then block the results of the review indicating that the quality of the deep link for the application is below a threshold. If the quality is below a threshold, the data processing system may prevent submission of the application or action.
The data processing system may use or include one or more classifiers to review the application. The data processing system may include or be configured with a first classifier that may use feedback from a user. For example, "can app _ a subscribe to a ride? ". The data processing system may collect feedback from the user and if a percentage of the users answer "yes" within a predetermined time frame, the data processing system may determine that the application may perform the desired intent or action.
The data processing system may include or be configured with a second classifier. The second classifier may create a vector based on the intent or action associated with the application and the extended entity to then determine the most relevant intent associated with the application. For example, the data processing may parse or process the name of the application, short descriptions of the application, long descriptions of the application, and other sources such as user comments to extract nouns and verbs. The data processing system may map nouns and verbs (e.g., artist name, play music) and map them to actual intentions or actions, such as playing a song. The data processing system may then use classification techniques to determine a level of similarity between the automatically generated or detected intent or action and the action registered or provided by the application developer. The data processing system may block the application if the action is below a threshold similarity level.
The data processing system may include or be configured with a third classifier. The third classifier may determine a classification score for the application based on the similar applications. For example, the first application may be a ride share application. The data processing system may identify a second application that is also a ride share application and that has passed the review process. If the first application is undergoing a debugging or auditing process, the data processing system may utilize results similar to the second application to determine if the action submitted with the first application is satisfactory. The data processing system may perform this vetting process in response to submission of the first application or on an ongoing basis.
By using or being configured with one or more classifiers, data processing may improve the quality and reliability of the analysis or debugging process while also shortening the review process. The data processing system, via one or more classifiers, may improve the efficiency of the application review process while also improving the results of the application review process. For example, the data processing system, via one or more classifiers, may review or debug applications without having to download each application, install the application, set an account for the application, and then test the application.
Thus, by shortening the review process while also improving the results of the review process, the data processing system may provide improvements to the application delivery server. The data processing system may further provide for a reduction in resource consumption or resource utilization by reducing the number of remote procedure calls or fraudulent remote procedure calls or processes, for example, as a result of preventing or preventing the delivery of a fraudulent or malicious application. For example, a rogue or malicious application may provide a misleading, rogue, or erroneous content item in response to a user query or request. The data processing system may further provide enhanced device security against malicious applications.
FIG. 1 illustrates an example system 100 for synchronizing access controls between computing devices. The system 100 may include a content selection infrastructure. The system 100 may include an application delivery infrastructure. The system 100 may include an online application store or marketplace. System 100 may include a data processing system 102. The data processing system 102 may communicate with one or more of the application developer device 160 or the client computing device 140 via the network 105. The system 100 may also communicate with other devices, such as third party devices, content provider devices, or digital surface devices.
The network 105 may be any type or form of network and may include any of the following: point-to-point networks, broadcast networks, wide area networks, local area networks, telecommunications networks, data communication networks, computer networks, ATM (asynchronous transfer mode) networks, SONET (synchronous optical network) networks, SDH (synchronous digital hierarchy) networks, wireless networks and wired networks. The network 105 may include a wireless link such as an infrared channel or a satellite band. The topology of the network 105 may include a bus, star, or ring network topology. The network may comprise a mobile telephone network using any one or more protocols for communicating between mobile devices, including advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code division multiple access ("CDMA"), global system for mobile communications ("GSM"), general packet radio service ("GPRS"), or universal mobile telecommunications system ("UMTS"). Different types of data may be sent via different protocols, or the same type of data may be sent via different protocols.
The servers in the machine farm may be stored in a high density rack system along with associated storage systems and located in an enterprise data center. For example, merging servers in this manner may improve system manageability, data security, physical security of the system, and system performance by locating the servers and high performance storage systems on a localized high performance network. The centralization of all or some of the data processing system 102 components, including servers and storage systems, and coupling them together with advanced system management tools allows for more efficient utilization of server resources, which saves power and processing requirements and reduces bandwidth usage.
The system 100 may include, access, or otherwise interact with at least one third party device 162. The third party device 162 may include at least one logic device, such as a computing device having a processor to communicate with the computing device 140, the data processing system 102, or the application developer device 160, for example, via the network 105. The third party device 162 may include at least one computing resource, server, processor, or memory. For example, the third party device 162 may include a plurality of computing resources or servers located in at least one data center.
The third party device 162 may provide the audio-based digital component for presentation or display by the client computing device 140 as an audio output digital component. The digital component may include an offer for a good or service, such as a statement "do you like i am reserving your taxi? "based on voice. For example, the third party device 162 may include a memory for storing a series of audio digital components that may be provided in response to a voice-based query. The third party device 162 may also provide the audio-based digital components (or other digital components) to the data processing system 102 where they may be stored in the data repository 128. The data processing system 102 can select the audio digital component and provide the audio digital component to the client computing device 140 (or instruct the third party device 162 to provide the audio digital component to the client computing device 140). The audio-based digital component may be exclusively audio or may be combined with text, image or video data.
The third party device 162 may include the data processing system 102, interface with the data processing system 102, or otherwise communicate with the data processing system 102. The third party device 162 may include the client computing device 140, interface with the client computing device 140, or otherwise communicate with the client computing device 140. The third party device 162 may include the computing device 140, interface with the computing device 140, or otherwise communicate with the computing device 140, which computing device 140 may be a mobile computing device. The third party device 162 may include the application developer device 160, interface with the application developer device 160, or otherwise communicate with the application developer device 160. For example, the third party device 162 may provide the digital component to the client computing device 140 for execution by the client computing device 140. The third party device 162 may provide the digital component to the data processing system 102 for storage by the data processing system 102. The third party device 162 may provide the rules or parameters related to the digital component to the data processing system 102.
The client computing device 140 may download the application developed by the application developer device 160. The client computing device 140 may download applications from the data processing system 102 via the network 105. The client computing device may download the application from application delivery server 110. The client computing device 140 may install an application. The client computing device 140 may execute an application. The client computing device 140 may execute, launch, trigger, or otherwise access or use the application in response to user input or a triggering event or condition. An application may include a front-end component and a back-end component. The client computing device 140 may execute or provide the front-end components of the application, while the data processing system 102 or the application developer device 160 provides the back-end components of the application.
The client computing device 140 may include at least one sensor 144, transducer 146, audio driver 148, or preprocessor 150, interface with the at least one sensor 144, transducer 146, audio driver 148, or preprocessor 150, or otherwise communicate with the at least one sensor 144, transducer 146, audio driver 148, or preprocessor 150. The client computing device 140 may include a light source 142 or a display device 152, such as a light indicator, a light emitting diode ("LED"), an organic light emitting diode ("OLED"), or other visual indicator configured to provide a visual or light output. The sensors 144 may include, for example, ambient light sensors, proximity sensors, temperature sensors, accelerometers, gyroscopes, motion detectors, GPS sensors, location sensors, microphones, or touch sensors. The transducer 146 may include a speaker or a microphone. The audio driver 148 may provide a software interface to the hardware transducer 146. The audio driver may execute audio files or other instructions provided by the data processing system 102 to control the transducer 146 to generate corresponding acoustic waves or sound waves. The preprocessor 150 may include a processing unit having hardware configured to detect keywords and perform actions based on the keywords. The preprocessor 150 may filter out one or more words or modify words before sending the words to the data processing system 102 for further processing. The preprocessor 150 may convert the analog audio signal detected by the microphone into a digital audio signal and send one or more data packets carrying the digital audio signal to the data processing system 102 via the network 105. In some cases, the pre-processor 150 may send data packets carrying some or all of the input audio signals in response to detecting an instruction to perform such transmission. The instructions may include, for example, trigger keywords or other keywords or approvals to send data packets including the input audio signal to the data processing system 102.
The client computing device 140 may be associated with an end user that enters (via the sensors 144) a voice query input (enter) as an audio input into the client computing device 140 and receives audio output from the transducer 146 (e.g., a speaker) in the form of computer-generated speech that may be provided to the client computing device 140 from the data processing system 102 (or the application development device 160 or the third party device 162). The computer-generated speech may include a recording from a live person or a computer-generated language.
The client computing device 140 (or computing device or client device or digital device) may or may not include a display. For example, a computing device may include a limited type of user interface, such as a microphone and speaker. In some cases, the primary user interface of the computing device 140 may be a microphone and speaker or a voice interface. For example, the primary user interface of the client computing device 140 may include a voice-based or audio-based user interface. The client computing device 140 may include a display and have a primary voice-based or audio-based user interface. The primary user interface of the client computing device 140 may be conversational. A conversational user interface may refer to a user interface driven or facilitated at least in part by the natural language processor component 106 of the data processing system 102.
The data processing system 102 may include a content delivery system having at least one computing resource or server. The data processing system 102 may include at least one interface 104, interface with the at least one interface 104, or otherwise communicate with the at least one interface 104. The data processing system 102 may include at least one natural language processor component 106, interface with the at least one natural language processor component 106, or otherwise communicate with the at least one natural language processor component 106. The data processing system 102 may include at least one direct action application programming interface ("API") 108, interface with the at least one direct action application programming interface ("API") 108, or otherwise communicate with the at least one direct action application programming interface ("API") 108. The interface 104, natural language processing component 106, and direct action API 108 may provide dialog APIs or digital assistant functionality. The dialog API or digital assistant can communicate or interface with one or more voice-based interfaces or various digital assistant devices or surfaces to provide data or receive data or perform other functionality.
The interface 104, the natural language processor component 106, the direct action API 108, the application delivery server 110, the delivery controller component 112, the deep link builder component 114, the first classifier component 116, the second classifier component 118, the third classifier component 120, the matching engine component 122, and the action generator 124 may each include at least one processing unit or other logic device, such as a programmable logic array engine or module configured to communicate with the database repository 128 or database. The interface 104, the natural language processor component 106, the direct action API 108, the application delivery server 110, the delivery controller component 112, the deep link builder component 114, the first classifier component 116, the second classifier component 118, the third classifier component 120, the matching engine component 122, the action generator 124, and the data repository 128 may be separate components, a single component, or part of the data processing system 102. System 100 and its components, such as data processing system 102, may include hardware elements, such as one or more processors, logic devices, or circuits.
The data processing system 102 can obtain anonymous computer network activity information associated with a plurality of client computing devices 140 (or computing devices or digital assistant devices). A user of the client computing device 140 or the mobile computing device may affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the client computing device 140 or the mobile computing device. For example, the data processing system 102 may prompt a user of the computing device 140 to agree to obtain one or more types of network activity information. The client computing device 140 may include a mobile computing device, such as a smartphone, tablet, smart watch, or wearable device. The identity of the user of the client computing device 140 may remain anonymous and the computing device 140 may be associated with a unique identifier (e.g., a unique identifier for the user or a computing device provided by the data processing system or a user of the computing device). The data processing system can associate each observation with a corresponding unique identifier.
The data processing system 102 may interface with a third party device 162. The third party device 162 may include or refer to a device of a content provider. The content provider may create an electronic content campaign (campaigns). The electronic content campaigns may be stored as content data in data repository 128. An electronic content campaign may refer to one or more groups of content that correspond to a common topic. The content campaign may include a hierarchical data structure including the content groups, the digital component data objects, and the content selection criteria. To create a content campaign, a content provider may specify a value for a campaign level parameter of the content campaign. The campaign level parameters may include, for example, the campaign name, the preferred content network for delivering the digital component object, the value of the resource to be used for the content campaign, the start and end dates to be used for the content campaign, the duration of the content campaign, the schedule for delivery of the digital component object, the language, the geographic location, the type of computing device on which the digital component object is to be provided. In some cases, impression may refer to when a digital component object is fetched from its source (e.g., data processing system 102 or a content provider) and is countable. In some cases, robot activity may be filtered and eliminated as a flash due to the possibility of click fraud. Thus, in some cases, an impression may refer to a measurement of a response from a Web server to a page request from a browser that is filtered from robot activity and error codes and recorded at a point as close as possible to an opportunity to render a digital component object for display on computing device 140. In some cases, flash may refer to visible or audible flash; for example, digital component objects are at least partially (e.g., 20%, 30%, 40%, 50%, 60%, 70%, or more) visible on display device 152 of client computing device 140 or audible via speakers 136 of computing device 140. Clicking or selecting may refer to user interaction with a digital component object, such as a voice response to an audible flash, a mouse click, a touch interaction, a gesture, a shake, an audio interaction, or a keyboard click. A transformation may refer to a user taking a desired action against a digital component objection; for example, purchasing a product or service, completing a survey, visiting a physical store corresponding to a digital component, or completing an electronic transaction.
The content provider may further establish one or more content groups for the content campaign. The content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, phrases, geographic locations, type of computing device, time of day, interests, topics, or industries. Content groups under the same content campaign may share the same campaign level parameters, but may have customized specifications for particular content group level parameters, such as keywords, negative keywords (e.g., which prevent the delivery of numeric components if negative keywords are present on the primary content), bids for keywords, or parameters associated with a bid or content campaign.
To create a new content group, the content provider may provide a value for a content group level parameter for the content group. The content group level parameters include, for example, a content group name or a content group topic and bids for different content delivery opportunities (e.g., automatic delivery or managed delivery) or results (e.g., clicks, impressions, or conversions). The content group name or content group topic may be one or more terms that the content provider may use to capture the topic or topic that the digital component object of the content group is to select for display. For example, an auto dealer may create a different content set for each brand of vehicle it carries, and may further create a different content set for each model of vehicle it carries. Examples of content group themes that may be used by an automobile dealer include, for example, "make a sports car," make B sports car, "" make C truck, "" make C hybrid car, "or" make D hybrid car. For example, an example content campaign theme may be "hybrid vehicle" and include a content set for both "manufacturing C hybrid vehicle" and "manufacturing D hybrid vehicle".
The content provider may provide one or more keywords and digital component objects to each content group. The keywords may include words related to products or services associated with or identified by the digital component object. Keywords may include one or more words or phrases. For example, an automobile dealer may include "sports car," "V-6 engine," "four wheel drive," "fuel efficiency" as keywords for a content group or content campaign. In some cases, negative keywords may be specified by the content provider to avoid, prevent, block, or prohibit content delivery over certain words or keywords. The content provider may specify the type of match, such as an exact match, a phrase match, or a broad match, used to select the digital component object.
The content provider may provide one or more keywords to be used by the data processing system 102 to select digital component objects provided by the content provider. The content provider can identify one or more keywords to bid on, and further provide a bid amount for various keywords. The content provider may provide additional content selection criteria to be used by data processing system 102 to select digital component objects. Multiple content providers may bid on the same or different keywords, and the data processing system 102 may run a content selection process or an advertising auction in response to receiving an indication of a keyword of an electronic message.
The content provider may provide one or more digital component objects for selection by the data processing system 102. The data processing system 102 can select the digital component object when content delivery opportunities become available that match the content assignments, content schedule, maximum bids, keywords, and other selection criteria specified for the content group. Different types of digital component objects may be included in the content set, such as a voice digital component, an audio digital component, a text digital component, an image digital component, a video digital component, a multimedia digital component, or a digital component link. The digital component objects (or digital components) may include, for example, content items, online documents, audio, images, video, multimedia content, or sponsored content. Upon selecting the digital component, data processing system 102 can send the digital component object for rendering on computing device 140 or display device 152 of computing device 140. Rendering may include displaying the digital component on a display device or playing the digital component via a speaker of the computing device 140. Data processing system 102 may provide instructions to computing device 140 to render the digital component object. The data processing system 102 may instruct the computing device 140 or the audio driver 148 of the computing device 140 to generate an audio signal or acoustic wave.
The data repository 124 may include one or more local or distributed databases and may include a database management system. Data repository 128 may include a computer data store or memory and may store one or more of application ("app") data 130, scores 132, historical data 134, parameters 136 or thresholds 138, and other data. Data repository 128 may store one or more of application ("app") data 130, scores 132, historical data 134, parameters 136, or thresholds 138 in one or more data structures, databases, data files, indexes, or other types of data stores.
The score 132 may refer to a classification score of the application. The score 132 may include a first classification score, a second classification score, a third classification score, or a combined classification score for the application. The data processing system 102 may review or process the application to determine one or more scores and store the scores for the application in a score 132 data structure. The score may be numeric, alphanumeric, alphabetical grade, ranking, symbolic, textual, binary, or otherwise provide an indication of the results of the applied vetting process. For example, the score may include a numerical score in the range of 0-100, where 0 represents the lowest level or likelihood of fraud and 100 represents the highest level or likelihood of fraud. The score may indicate whether the application passed the review process. For example, a score of 100 may indicate that the application passed the review process, whereas a score of 0 may indicate that the application failed the review process. The score may be an alphabetical rating, such as "a," "B," "C," "D," or "F," where alphabetical rating a may indicate that the application passed the review process and alphabetical rating F indicates that the application failed the review process. The score may be a keyword or text, such as "pass" or "fail". The score may be binary, such as "0" or "1".
The historical data 134 may include data related to the application. The historical data 134 may include data related to execution or use of the application. The historical data 134 may include data related to previous uses or executions of applications by the client computing device 140. The historical data 134 may include feedback regarding previous use or execution of the application. For example, the client computing device 140 may execute an application. The client computing device 140 may include a monitor or proxy executing on the client computing device 140 that may identify aspects related to the application, such as the number of remote procedure calls, repeated requests made to the application, indications of erroneous responses or content data provided by the application, or indications of fraudulent or misleading content data or responses provided by the application. The client computing device 140 may provide feedback from the user regarding the execution of the application. For example, the client computing device 140 may provide a prompt to a user of the application as to whether the application provided a satisfactory response or performed the requested or desired action. For example, the prompt may include "is application _ a satisfactorily performing the requested action? "historical data 134 may include or store feedback from a monitor or agent executing on the client computing device 140 as well as feedback on prompts or surveys provided by the user of the client computing device 140 or application.
Data repository 128 may store parameters 136. The parameters 136 may refer to or include parameter data structures. The parameters 136 may refer to or include delivery control parameters. The delivery control parameter is a parameter that can cause the application delivery server 110 to deliver an application, block delivery of an application, authorize an action of an application, or prohibit an action of an application. Each application that has been reviewed or processed by the data processing system 102 may be associated with delivery control parameters. The delivery control parameter may be an instruction, a numerical parameter, an alphanumeric value, a flag, a label, or other indicator that may cause the application delivery server 110 to adjust whether or how to deliver the application to the client computing device 140.
The data repository 128 may include or store a threshold 138. The threshold 138 may refer to or include a threshold data structure. The data processing system 102 may compare the score 132 (e.g., classification score) of the application to a threshold 138 in order to determine whether the application passed or failed the classification. The threshold 138 may be the same or different for each type of classification. The threshold 138 may be an absolute threshold (e.g., absolute or fixed value), a percentage threshold, a ratio threshold. The threshold 138 may be a dynamic threshold that may vary based on metadata associated with the application. The threshold 138 may vary based on feedback, real-time information, or other factors. The threshold 138 may vary based on the type of application or version of the application (e.g., a new application or new version of an application being submitted). The threshold 138 may be set for a particular application and the threshold 138 may vary based on, for example, the number of times the application has been installed (e.g., a threshold for applications with more than 100,000 downloads is low, as a high download count may indicate that the application is unlikely to be fraudulent or provide erroneous content). In some cases, the threshold may be higher for applications with high download counts, so data processing system 102 may prevent a large number of false responses or wasted remote procedure calls or other computing resource utilization.
The data processing system 102 may include an interface 104 (or interface component) designed, configured, constructed, or operable to receive and transmit information using, for example, data packets. The interface 104 may receive and transmit information using one or more protocols, such as a network protocol. The interface 104 may include a hardware interface, a software interface, a wired interface, or a wireless interface. The interface 104 may facilitate translation or formatting of data from one format to another. For example, the interface 104 may include an application programming interface that includes definitions for communicating between various components, such as software components. The interface 104 may communicate with one or more of the client computing device 140, the application developer device 160, or the third party device 162 via the network 105.
The data processing system 102 may interface with an application, script, or program, such as an app, installed at the client computing device 140 to communicate input audio signals to the interface 104 of the data processing system 102 and to drive components of the local client computing device to render output audio signals. The data processing system 102 may receive the data packet or its signal that includes or otherwise identifies the audio input signal.
The data processing system 102 can include a natural language processor ("NLP") component 106. For example, the data processing system 102 may execute or run the NLP component 106 to receive or obtain an audio signal and parse the audio signal. For example, the NLP component 106 can provide interaction between a human and a computer. The NLP component 106 may be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input. The NLP component 106 can include or be configured with techniques based on machine learning, such as statistical machine learning. The NLP component 106 can utilize decision trees, statistical models, or probabilistic models to parse the input audio signal. The NLP component 106 can perform functions such as, for example: named entity recognition (e.g., given a text stream, determining which term items in the text map to appropriate names such as people or places, and what each such name is of a type such as people, location, or organization), natural language generation (e.g., converting information from a computer database or semantic intent into intelligible human language), natural language understanding (e.g., converting text into a more formal representation such as a first-order logical structure that a computer module can manipulate), machine translation (e.g., automatically translating text from one human language to another), lexical segmentation (e.g., dividing a word into individual morphemes and identifying classes of morphemes, which may be challenging based on the results of the words of the language under consideration or the complexity of the lexical), question answering (e.g., determining answers to questions in human language, this may be specific or open), semantic processing (e.g., processing that may occur after a word is recognized and its meaning is encoded so as to associate the recognized word with other words having similar meanings).
The NLP component 106 may convert the audio input signal into recognized text by comparing the input signal against a stored set of representative audio waveforms (e.g., in the data repository 128) and choosing the closest match. The set of audio waveforms may be stored in a data repository 128 or other database accessible to the data processing system 102. Representative waveforms are generated across a large group of users and can then be augmented with speech samples from the users. After the audio signal is converted to recognized text, the NLP component 106 matches the text with words associated with actions that the data processing system 102 can service, for example, via training across users or by manual designation. Aspects or functionality of the NLP component 106 may be performed by the data processing system 102 or the client computing device 140. For example, a local NLP component may execute on the client computing device 140 to perform aspects of converting an input audio signal to text and sending the text via data packets to the data processing system 102 for further natural language processing.
The audio input signal may be detected by a sensor 144 or a transducer 146 (e.g., a microphone) of the client computing device 140. Via the transducer 146, audio driver 148, or other components, the client computing device 140 can provide the audio input signal to the data processing system 102 (e.g., via the network 105), where it can be received (e.g., through the interface 104) and provided to the NLP component 106 or stored in the data repository 128.
The client computing device 140 may include an audio driver 148, a transducer 146, a sensor 144, and a preprocessor component 150. The sensor 144 may receive or detect an input audio signal (e.g., a voice input). The preprocessor component 150 can be coupled to the audio driver, the transducer, and the sensor. The preprocessor component 150 can filter the input audio signal to create a filtered input audio signal (e.g., by removing certain frequencies or suppressing noise). The pre-processor component 150 can convert the filtered input audio signal into data packets (e.g., using a software or hardware digital-to-analog converter). In some cases, the preprocessor component 150 may convert the unfiltered input audio signal into data packets and send the data packets to the data processing system 102. The pre-processor component 150 can send the data packets to the data processing system 102 that includes one or more processors and memory that execute a natural language processor component, an interface, a speaker recognition component, and a direct action application programming interface.
The data processing system 102 may receive data packets from the pre-processor component via the interface that include filtered (or unfiltered) input audio signals detected by the sensor. The data processing system 102 may identify an acoustic marker from the input audio signal. The data processing system 102 can identify the electronic account corresponding to the acoustic token based on a lookup in a data repository (e.g., querying a database). In response to identifying the electronic account, the data processing system 102 may establish a session and an account for use in the session. An account may include a profile with one or more policies. The data processing system 102 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request.
The data processing system 102 can provide the state to the preprocessor component 150 of the client computing device 140. The client computing device 140 may receive an indication of the status. The audio driver may receive an indication of a state of the profile and generate an output signal based on the indication. The audio driver may convert the indication into an output signal, such as a sound signal or an acoustic output signal. The audio driver may drive a transducer 146 (e.g., a speaker) to generate sound based on an output signal generated by the audio driver.
In some cases, the client computing device 140 may include a light source 142. The light source may include one or more LEDs, lights, displays, or other components or devices configured to provide an optical or visual output. The preprocessor component 150 can cause the light source to provide a visual indication corresponding to the status. For example, the visual indication may be an on status indicator light, a color change of light, a light pattern having one or more colors, or a visual display of text or images.
The NLP component 106 may obtain an input audio signal. From the input audio signal, the NLP component 106 may identify at least one request or at least one trigger keyword corresponding to the request. The request may indicate an intent or subject of the input audio signal. The trigger keyword may indicate the type of action that may be taken. The trigger keyword may be a wake signal or hotword (hotword) that is indicated to the client computing device 140 to convert subsequent audio input into text and send the text to the data processing system 102 for further processing. For example, the NLP component 106 can parse the input audio signal to identify at least one request to leave home for dinner and movies at night. The trigger keyword may comprise at least one word, phrase, root or partial word, or derivative indicating an action to be taken. For example, a trigger keyword "go" or "to go to" from an input audio signal may indicate a need for delivery. In this example, the input audio signal (or the identified request) does not directly express the intent of the shipment, however the trigger keyword indicates that the shipment is an auxiliary action to the at least one other action indicated by the request.
The NLP component 106 can parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and trigger keywords. For example, the NLP component 106 can apply semantic processing techniques to the input audio signal to identify triggering keywords or requests. The NLP component 106 can apply semantic processing techniques to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal may comprise the sentence "I road a edge to the airport". The NLP component 106 may apply semantic processing techniques or other natural language processing techniques to the data packet comprising the sentence to identify the request or trigger phrases "road a ride" and "airport". The NLP component 106 can further identify a plurality of trigger keywords, such as wan (wanted) and ride (free). For example, the NLP component 106 can determine that the trigger phrase includes the trigger keyword and a second trigger keyword.
The NLP component 106 may filter the input audio signal to identify trigger keywords. For example, a data packet carrying an input audio signal may include "It would be if I's result get a voice by result help me to the airport" in which case the NLP component 106 may filter out one or more words as follows: "it", "woold", "be", "great", "if", "I", "result", "get", "someone", "that", "result", or "help". By filtering out these words, the NLP component 106 can more accurately and reliably identify a trigger keyword, such as "go to the airport," and determine that this is a request for a taxi or ride share service.
In some cases, the NLP component 106 may determine that the data packet carrying the input audio signal includes one or more requests. For example, the input audio signal may include the sentence "I want to purchase an audiobook and a monthly subscription to movies". The NLP component 106 can determine that this is a request for an audio book and streaming multimedia service. The NLP component 106 can determine that this is a single request or multiple requests. The NLP component 106 can determine that these are two requests: a first request to a service provider that provides the audio reading and a second request to a service provider that provides the streaming of the movie. In some cases, the NLP component 106 may combine the multiple determined requests into a single request and send the single request to the third party device 162. In some cases, the NLP component 106 may send a separate request to another service provider device, or send two requests separately to the same third party device 162.
The data processing system 102 may include a direct action API 108 designed and constructed to generate an action data structure responsive to a request based on a trigger keyword. The direct action API 108 may generate an action data structure that causes the application to perform the corresponding action. The direct action API 108 may send an action data structure to an application installed on the client computing device 140 to cause the client computing device 140 to perform a corresponding action or initiate an action. The action data structure generated by the direct action API 108 may include deep links for applications installed on the client computing device 140. The application installed on the client computing device 140 may then perform the action or communicate with the application developer device 160 or the third party device 162 to perform the action.
The processor of the data processing system 102 may invoke the direct action API 108 to execute a script that generates a data structure to be provided to an application installed on the client computing device 140, the application developer device 160, or the third party device 162, or other service provider to obtain a digital component of an automobile or audio reading, an order service, or a product, such as from an automobile sharing service. The direct action API 108 may obtain data from the data repository 128 and data received from the end computing device 140 with the end user's consent to determine location, time, user accounts, logistics, or other information to allow the third party device 162 to perform operations, such as ordering automobiles from an automobile sharing service. Using the direct action API 108, the data processing system 102 may also communicate with third party devices 162 to complete the conversion by making a car share ride reservation in this example.
The direct action API 108 may perform specified actions to satisfy the end user's intent as determined by the data processing system 102. Depending on the actions specified in its input and the parameters or rules in the data repository 128, the direct action API 108 may execute code or dialog scripts that identify the parameters needed to fulfill the user request. The direct action API 108 may execute an application to meet or fulfill the intent of the end user. Such code may look up additional information, such as the name of the home automation service or third party service, for example, in the data repository 128, or it may provide an audio output for rendering at the client computing device 140 for a question to the end user asking for a predetermined destination, such as a requested taxi. Direct action API 108 may determine parameters and may group the information into an action data structure, which may then be sent to another component, such as application delivery server 110, to be fulfilled.
The direct action API 108 may receive instructions or commands from the NLP component 106 or other components of the data processing system 102 to generate or construct an action data structure. The direct action API 108 may determine the type of action to select a template stored in the data repository 128. The actions may be performed by an application provided by the application delivery server 110 and submitted by the application developer device 160. An application may perform or facilitate the performance of an action. Example types of actions may include, for example, a watch action, a listen action, a read action, a navigation action, or a weather action. The type of action may include or be configured to provide, for example, a service, a product, a reservation, a ticket, multimedia content, an audio book, manage a subscription, adjust a subscription, transfer digital money, make a purchase, or music. The type of action may further include a type of service or product. For example, the types of services may include car sharing services, food delivery services, laundry services, cleaning services, maintenance services, home services, equipment automation services, or media streaming services. The type of product may include, for example, clothing, shoes, toys, electronic devices, computers, books, or jewelry. The type of reservation may include, for example, a dinner reservation or a hair salon reservation. The types of tickets may include, for example, movie tickets, sports stadium tickets, or airline tickets. In some cases, the type of service, product, reservation, or ticket may be categorized based on price, location, type of shipment, availability, or other attributes.
The NLP component 106 can parse the input audio signal to identify a request and a trigger keyword corresponding to the request, and provide the request and the trigger keyword to the direct action API 108 to cause the direct action API to generate a first action data structure responsive to the request based on the trigger keyword. Direct action API 108, upon identifying the type of request, may access the corresponding template from a template repository (e.g., data repository 128). The template may include fields in the structured dataset that may be populated by the direct action API 108 to facilitate operations via an input audio request detected by the client computing device 140 (such as operations to send out a rental car to pick up an end user at a pickup location and transport the end user to a destination location). The direct action API 108 or the client computing device 140 may launch or trigger an application to fulfill the request in the input audio. For example, the car sharing service application may include one or more of the following fields: a device identifier, a pickup location, a destination location, a number of passengers, or a type of service. The direct action API 108 may populate the fields with values. To populate a field with a value, the direct action API 108 may ping, poll, or otherwise obtain information from one or more sensors 144 of the computing device 140 or a user interface of the device 140. For example, the direct action API 108 may use a location sensor, such as a GPS sensor, to detect the source location. The direct action API 108 may obtain additional information by submitting surveys, prompts, or queries to the user side of the computing device 140. The direct action API may submit a survey, prompt, or query via the interface 104 of the data processing system 102 and a user interface (e.g., an audio interface, a voice-based user interface, a display, or a touch screen) of the computing device 140. Thus, the direct action API 108 may select a template for the action data structure based on the trigger keyword or request, populate one or more fields in the template with information detected by the one or more sensors 144 or obtained via the user interface, and generate, create, or otherwise construct the action data structure to facilitate performance of the operation by the third party device 162.
The application delivery server 110 may receive an application submitted by the application developer device 160. Application delivery server 110 may maintain one or more versions of an application. Application delivery server 110 may send the application to client computing device 140. Application delivery server 110 may download the application onto client computing device 140. The application delivery server 110 may maintain an online application store or marketplace. The application delivery server 110 may manage or maintain accounts for the application developer device 160 or the client computing device 140. Application delivery server 110 may maintain a configuration file for the account. An account or profile may be associated with a unique identifier. The account may include a financial account or a token account that may be used to purchase or subscribe to the application. The application delivery server 110 may prompt the user of the client computing device 140 to pay for the application by providing electronic account information, such as an electronic financial account.
The application delivery server 110 may provide authentication and authorization services for accounts of the client computing device 140 or the application developer device 160. For example, the application delivery server 110 may authenticate and authorize the application developer device 160 prior to submission of the application. Application delivery server 110 may authenticate and authorize client computing device 140 before allowing client computing device 140 to download the application.
The data processing system 102 (e.g., via the application delivery server 110) may receive an application submitted by the application developer device 160. The data processing system 102 may receive a new application or an updated version of a previously submitted application. An application may be associated with one or more actions or intents. The action may be directed to a messaging object. The messaging object may be configured with an action. The application developer 160 may build an application with messaging objects and actions to have the application perform the actions or perform the actions. An action may refer to an intent. An action may be performed on the entity. An application may be configured to perform operations on an inventory of entities. For example, an action may refer to "playing a song" and an entity may be a particular song. The application may be used for a music streaming service and may be configured to fulfill requests to play songs by artist.
The data processing system 102 may receive a data file associated with an application. The data file may include a number of actions established by the application developer device 160 for the application. The application developer device 160 may provide the data file to the data processing system 102 along with the application submission. The data file may be in a format such as markup language, meta language, custom markup language, extensible markup language, text, or other format.
The data file may indicate an action that the application is configured to perform or fulfill. The data file may provide an indication of a listing of entities for which the application is configured to perform an action or is configured to access to otherwise fulfill a user's request or desire intent. The manifest of the entity may be provided as a list in a data file. The data file may include pointers, references, uniform resource locators, or other indicators to data repositories or entities. In some cases, the data processing system 102 may access a link to a web page containing the entity. The data processing system 102 may parse or otherwise process the web page to identify entities accessible to the application.
The data processing system 102 can determine that a debugging process is to be triggered before the application is delivered for installation on any client computing device 140. In some cases, the data processing system 102 may determine to trigger the debugging process after the application has been installed on the at least one client computing device 140. For example, data processing system 102 can determine to perform a debugging process in response to negative feedback associated with the installed application. The data processing system 102 may receive an indication of negative feedback for the application from the client computing device 140 on which the application is installed. Data processing system 102 may trigger a debugging process in response to an indication of negative feedback for an application.
The debugging process may include determining one or more classification scores, such as a first classification score, a second classification score, and a third classification score. The data processing system 102 can include a first classifier component 116 that interfaces with or otherwise accesses the first classifier component 116. The data processing system 102 can include a first classifier component 116 designed, constructed, and operable to determine a first classification score. The first classifier component 116 may determine a first classification score. The data processing system 102 (e.g., via the first classifier component 116) can determine a first classification score based on historical execution of actions of messaging objects provided by an application developer. The data processing system 102 may determine the first classification score based on whether a previous invocation of an application to perform the action resulted in fulfillment of the action. The data processing system 102 may determine the first classification score based on user feedback based on previous performance of the action by the application.
For example, multiple client computing devices 140 may have applications installed. The user of the client computing device 140 may have requested that the application perform an action, such as playing a particular song. The application may or may not have played the song in response to the request from the user. The user of the client computing device 140 may provide feedback about the application based on their previous interactions with the application and previous performance of the action with the application. For example, application delivery server 110 may provide a prompt or other graphical user interface via which a user of client computing device 140 may be used to provide an indication as to whether the application has fulfilled the user's action on the application request.
The rating system may include a score. The scores may be stored in a score data structure 132 in the data repository 128. The data processing system 102 may determine the first classification score based on feedback from a user making a request for the application. For example, a user may rate applications on a scale of 1 to 5, where 5 indicates that the application fulfilled the request well and 1 indicates that the application did not fulfill the request well.
In some cases, the data processing system 102 may provide a prompt or query to a user of the client computing device 140 to obtain information about the application. The data processing system 102 (e.g., via the first classifier component 116) may construct a prompt or query for obtaining information about the application and whether the application can fulfill certain types of actions or requests. The data processing system 102 may determine a category of the application or a type of the application (e.g., bus share, music service, news, or weather) from the application data 130. The data processing system 102 may determine the type of action configured for the application from a data file submitted with the application that lists the actions configured or established for the application by the application developer device 160. Using the application data 130, the data processing system 102 can construct a query or survey. For example, the application data 130 can indicate that the application is a ride share application. The data processing system 102 may determine that the action of the application may be to provide a lift to the user. The data processing system 102 may generate a message such as "do app _ a provide a lift? "such a query. The data processing system 102 can send the query to the client computing device 140 that has the application installed. The data processing system 102 can provide the query to the client computing device 140 that has performed the action for the application. The data processing system 102 can determine whether the client computing device 140 has downloaded, installed, or performed an action for the application based on account information stored in the data repository 128 or information stored on the client computing device 140.
The data processing system 102 may obtain feedback from a user of the client computing device 140 as to whether the application is configured to fulfill an action that the application developer 160 indicates the application is configured to fulfill. The first classification score may indicate whether an action corresponding to the application is satisfied based on a comparison of the first classification score to a threshold (e.g., threshold 138 stored in data repository 128).
The first classifier component 116 may obtain feedback from a user of the client computing device 140 in various forms including, for example, written comments, scores, responses to surveys, responses to queries, user uninstallation of applications after seeking to perform actions, or other types of feedback. The first classifier component 116 may generate a first classification score using one or more types of feedback. For example, the first classifier component 116 may determine an average score from the individual ratings and use the average score as the first classification score. The first classifier component 116 may combine two or more different types of feedback scores to generate a single feedback score as the first classification score. To generate the first classification score, the first classifier component 116 may combine different types of feedback scores by multiplying the scores, adding the scores, taking a dot product of the scores, inputting the scores into a function, or otherwise combining the scores. The first classifier component 116 may combine scores by taking an average of different scores. The first classifier component 116 may combine the scores by applying weights to the different scores before combining the scores. The first classifier component 116 may generate the first classification score as a weighted average of the different scores. To generate the first classification score, the first classification component 116 may reformat, translate, transform, or otherwise manipulate the individual feedback scores from the different feedback sources. For example, the data processing system 102 may generate a first feedback score from the commentary of the parsed application, a second feedback score based on a user rating of the application in an online application delivery marketplace managed by the application delivery server 110, and a third feedback based on a survey result from the user. The data processing system 102 may convert each of these different feedback scores into a normalized feedback score and then combine these normalized scores (e.g., via an average) to generate a first classification score. The first classification component 116 may store the first classification score in a score data structure 132 for further processing by the data processing system 102.
The data processing system 102 may include an action generator 124 engaged with or otherwise accessing the action generator 124, the action generator 124 designed, constructed and operable to generate a machine-generated action for an application based on metadata associated with the application. The data processing system 102 may generate actions based on the application data 130 including, for example, a title, short description, long description, metadata, entity, content, or user comment of the application. The action generator 124 may take as input a name, short description, long description, user comment, or other source to extract nouns and verbs. The action generator 124 may map nouns and verbs (e.g., artist name or playing music) to actions or intentions such as "play song". Thus, the action generator 124 may map the application information to machine-generated actions. The action generator 124 may map the application message in the absence of a list of actions provided by the application developer device 160 with the submission of the application. The action generator 124 may generate machine-generated actions without using actions listed or identified in a data file provided by the application developer device 160. By using metadata such as titles, descriptions, or user comments for the application, the action generator 124 may generate machine-generated actions independent of information about the actions provided by the application developer device 160. Independent of generating machine-generated actions by the application developer using the actions listed in the data file, the data processing system 102 may review the actions identified by the developer as being configured for the application.
The action generator 124 may map the application data 130 to a predetermined list of actions to create a machine-generated action for the application. The predetermined list of actions may be provided by an administrator of the application delivery server 110 or an administrator of the data processing system 102. The predetermined list of actions may include or refer to a list of actions that the direct action API 108 of the data processing system 102 is configured to perform or execute. A predetermined list of actions may be sorted. The predetermined list of actions may be sorted based on different types of actions. The types of actions may include, for example, music actions, ride share actions, navigation actions, news actions, ticket purchase actions, or other types of actions.
The action generator 124 may identify machine-generated actions by mapping the application data 130 to a predetermined list of actions. For example, a predetermined list of actions for a music application may include: play a song, play an album, play the next song, replay, pause, start a radio station, or create a playlist. In another example, the predetermined list of actions for the ride share application may include: booking to take a car to [ destination ]; go [ destination ] to estimate how much the cost is; how far did my trip? Canceling vehicle taking; or what type of car to pick up me? The action generator 124 may identify the machine-generated action mapped to the application based on one of these predetermined actions.
The action generator 124 may convert an entity into an intent or action to generate a machine-generated action. For example, a data file submitted with an application may include both intents and entities. The data processing system 102 may parse an entity to generate machine-generated actions that may be performed on the entity.
The data processing system 102 may generate machine-generated actions based on metadata or descriptions provided for the application. The data processing system 102 can identify discrete objects and combine them into text clusters, and input the text clusters to a mapping technique that can output nouns and verbs. The data processing system 102 can then use the hierarchical graph to convert the nouns and verbs into intents. The data processing system 102 may traverse the graph to identify an intent or action.
The data processing system 102 may perform the lookup using an entity submitted by the application developer. The lookup table may map an entity to an intent or action. The data processing system 102 may perform a lookup to determine what action is typically associated with an entity. The data processing system 102 may generate machine-generated actions using intents and other techniques typically associated with an entity.
The data processing system 102 can include a second classifier component 118 engaged with or otherwise accessing the second classifier component 118, the second classifier component 118 designed, constructed and operable to determine a second classification score based on a comparison of actions of messaging objects provided by application developers and machine-generated actions. The second classifier component 118 can compare actions to determine if there is a match. The second classifier component 118 may compare one or more actions provided by the application developer device 160 to one or more machine-generated actions generated by the action generator 124. The second classification score may be based on different types of matching or comparison techniques. The second classifier component 118 can determine how many actions are matches, match levels, overlap levels, or otherwise compare two sets of actions. For example, the application developer device 160 may submit five different actions with the application. The action generator 124 may identify five machine-generated actions based on the application data 130 and in the absence of a list of actions submitted by the application developer device 160. The second classifier component 118 may compare the five actions provided by the application developer device 160 with the five actions generated by the action generator 124 to determine the number of matching actions (if any). The second classifier component 118 may generate a second classification score based on the match level. The second classification score may be based on a percentage of a ratio of machine-generated actions to developer-provided actions (e.g., a number of machine-generated actions matching the developer-provided actions divided by a number of developer-provided actions). If all five actions match each other, the data processing system 102 may determine that the second classification score is a 100% match; if four of the five developer-provided actions match, the data processing system 102 may determine that the second classification score is an 80% match; if three of the five actions match, the data processing system 102 may determine that the second classification score is 60%; if two of the five actions match, then the second classification score is 40%; if one of the five actions matches, then the second classification score is 20%; if 0 of the 5 actions match, then the second classification score is 0%. The data processing system 102 may store the second classification score in a score 132 data structure for further processing.
The data processing system 102 can include a matching engine component 122 that interfaces with or otherwise accesses the matching engine component 122, which is designed, constructed, and operable to select a second application that matches the application. The matching engine component 122 can use a matching program to select a second application that matches the application. The matching engine component 122 can match applications based on the application data 130. The matching engine component 122 can match applications based on, for example, short descriptions, detailed descriptions, categories, user reviews, or other information. The matching engine component 122 can match the application based on a previous version of the application.
The data processing system 102 may determine that the application matches the second application based on a similarity score between the application and the second application being greater than a similarity threshold. A matching procedure may be used to generate the similarity score. The matching engine component 122 can match the first application with the second application based on a category of the application or a description of the application. For example, the description of the first application may be "ride share" and the description of the second application may be "ride share" or "partner car" or "taxi service" or "ride service". The data processing system 102 may determine, based on the description, that the first application matches the second application. The matching engine component 122 can generate a similarity score based on comparing keywords associated with the metadata or application data 130 between the application and the second application. The data processing system 102 may determine the similarity score by using a statistical similarity measure or similarity function to determine a distance between keywords associated with the two applications. The similarity function may be a real-valued function that quantifies the similarity between two objects. The similarity function may output a similarity score. The similarity function may output a distance metric that may be based on coordinates. The similarity score may correspond to the euclidean distance between two points that are mapped onto euclidean space based on keywords or features associated with the two applications. Other similarity distances may include, for example, manhattan distances.
If the similarity score of two applications is greater than the threshold, the data processing system 102 may determine that they are a match. The threshold may refer to a fractional threshold (e.g., 80% match). For example, the data processing system 102 may first determine the two applications with the highest level of similarity. In some cases, the data processing system 102 determines to use the selected matching application without further checking of the similarity score. However, in some cases, the data processing system 102 may further determine a similarity score and determine to select the second application as a matching application for debugging purposes if the similarity score is also greater than a threshold (e.g., 70% similarity, 80% similarity, 90% similarity).
In another example, the category of both the first application and the second application may be "music". The matching program may be configured to perform a first level matching of applications based on whether the applications are in the same category. The matching program may be further configured to determine a second level of matching based on the description of the application (e.g., the two descriptions indicate an online music streaming service).
The matching engine component 122 can select a second application that matches the application undergoing the debugging process. The matching engine component 122 can provide an indication of a match to the second application to the third classifier component 120 to generate a third classification score.
The data processing system 102 may include a third classifier component 120, the third classifier component 120 engaged with or otherwise accessing the third classifier component 120, the third classifier component 120 designed, constructed, and operable to determine a third classification score. The third classifier component 120 may determine a third classification score based on a comparison of the action approved for the second matching application and the action of the messaging object provided by the application developer for the application undergoing the debugging or review process. The third classifier component 120 may compare the level of match between the actions to generate a third classification score. The third classifier component 120 can compare the actions provided by the application developer device 160 with the actions associated with the second matching application to determine the number of matching actions, if any. The third classifier component 120 may generate a third classification score based on the match level. The third classification score may be based on a percentage of a ratio of the second matching application actions to the developer provided actions (e.g., a number of second application actions matching the developer provided actions divided by a number of developer provided actions). If all the actions match each other, the data processing system 102 may determine that the second classification score is a 100% match. The third classification score may be less than 100% if not all actions match each other. For example, there may be five actions provided by the application developer device 160 for an application undergoing a debugging or auditing process. There may be five actions associated with the second matching application identified by the matching engine component 122. If four of the second application actions match among the five developer-provided actions, the data processing system 102 may determine that the second classification score is an 80% match; if three of the five actions match, the data processing system 102 may determine that the second classification score is 60%; if two of the five actions match, then the second classification score is 40%; if one of the five actions matches, then the second classification score is 20%; if 0 of the 5 actions match, then the second classification score is 0%. The data processing system 102 may store the third classification score in a score 132 data structure for further processing. The data processing system 102 may determine the score using various matching techniques, scoring techniques, labels, or classifications.
The data processing system 102 may include a delivery controller component 112 engaged with or otherwise accessing the delivery controller component 112, the delivery controller component 112 designed, constructed and operable to update delivery control parameters based on the first classification score, the second classification score and the third classification score. The delivery controller component 112 may combine the first classification score, the second classification score, and the third classification score to generate a combined classification score. However, in other examples, the delivery controller component 112 may combine any of the first, second, and/or third classification scores and optionally other classification scores to generate a combined classification score. The delivery controller component 112 may determine whether to block delivery of the application or authorize delivery of the application based on the combined classification score. The delivery controller component 112 may determine whether to block an action associated with the application or authorize the action based on the combined classification score. The delivery controller component 112 may update the delivery control parameters based on the combined classification score. For example, the delivery control parameters may include a value, a flag, a binary value, or a switch. The delivery control parameters may instruct the application delivery server 110 to block or prevent delivery of the application, or to prohibit actions associated with the application. The delivery control parameters may block delivery of the application or prohibit actions in order to prevent malicious, fraudulent, misleading, or erroneous remote procedure calls or content delivery in response to a user request for an action. The data processing system 102 may control the delivery of the application by the application delivery server 110 in response to the delivery control parameters updated by the data processing system.
The delivery controller component 112 may determine to authorize delivery of the application based on the first classification score, the second classification score, and the third classification score. The delivery controller component 112 may determine to authorize the delivery based on each score individually satisfying a threshold (or a corresponding threshold stored in a threshold 138 data structure). The delivery controller component 112 may determine to authorize the delivery based on the sum of the three scores that satisfy the threshold. The delivery controller component may determine to authorize the delivery based on an average of the three scores that satisfy the threshold. Data processing system 102 may update the delivery control parameters to cause the application to be delivered by application delivery server 110.
The delivery controller component 112 may determine that the classification failed based on at least one of the first classification score, the second classification score, or the third classification score being less than a failure threshold. The data processing system 102 may retrieve the failure threshold from the threshold data structure 138. The data processing system 102 may compare each of the first, second, and third classification scores to a failure threshold (or corresponding failure threshold). If any of these classification scores do not meet the failure threshold, the data processing system 102 may determine to block delivery of the application. For example, the data processing system 102 may update the delivery control parameter to prevent delivery of the application by the application delivery server 110 in response to the classification failing. By prohibiting or preventing delivery of the application in the event that any of these classification scores fail, the data processing system 102 may prevent fraudulent or erroneous applications from being delivered. For example, the data processing system 102 may determine that a first classification score, which may be based on user feedback, may not satisfy a failure threshold, whereas a second classification score and a third classification score may satisfy the failure threshold. However, the data processing system 102 may still determine to block delivery of the application because the feedback-related classification score does not meet the failure threshold, indicating that the application may be fraudulent or erroneous or otherwise unsuitable for delivery to the client computing device 140.
The data processing system 102 may determine a classification failure based on the first classification score, the second classification score, and the third classification score. The data processing system 102 may determine a classification failure based on a combination of the three scores or based on each score individually. The data processing system 102 may automatically update the delivery control parameters to prevent delivery of the application by the application delivery server 110 in response to the classification failing. The data processing system 102 sends a notification of the classification failure to the application developer device 160. The application developer device 160, upon receiving the notification, may debug its application to fix or correct the problem causing the classification failure. In response to the classification failing, the data processing system 102 may request an updated version of the application from the application developer device 160. The data processing system 102 may send a request (e.g., a message, electronic message, notification, push message, or prompt) to the application developer device 160 stating that the application is not passing the review or debugging process. Data processing system 102 may provide additional information regarding which action of the application caused the review or debug process to fail. The data processing system 102 may provide additional information regarding which classifier caused the application to fail the review or debug process during the review process.
The data processing system 102 may determine that the application is to be authorized for delivery even if one or more of the actions associated with the application fail the review or debug process. The delivery controller component 112 may determine a classification failure for the action of the messaging object based on the first classification score, the second classification score, and the third classification score. In response to a classification failure, the delivery controller component 112 can automatically disable actions of the messaging object performed via the application. The data processing system 102 may authorize the application for delivery by the application delivery server 110 such that when the application is delivered to the client computing device 140, the action is prohibited and may not be performed on the client computing device 140. Thus, even though the application may have been initially configured by the application developer 160 in some manner with an action that may be fraudulent, misleading, or erroneous, the data processing system 102 may provide for delivery to the client computing device 140 without incurring a waste of computing resource utilization, as the data processing system 102 may preemptively inhibit operation of the application, thereby preventing fraudulent, misleading, or erroneous operations from being performed. Application delivery server 110 may determine to prohibit one or more actions based on delivery control parameters stored in parameter data structure 136 for the application. The delivery control parameters may include a data structure that enumerates authorized actions for the application. By removing the fraudulent action, the data processing system 102 can then prevent the application from being triggered in response to the action. In another example of a prohibited action, data processing system 102 may remove an unauthorized action from a data file associated with an application. The data file may be a data file submitted by the application developer device 160 along with the submission of the application.
For example, the data processing system 102 may identify an action established for an application via a data file. The data processing system 102 may determine a first classification score, a second classification score, and a third classification score via a debugging process for each action. The data processing system 102 may update the delivery control parameters to inhibit one or more actions based on the debugging process.
The data processing system 102 may determine to exit the debugging process before determining each of the first, second, and third classification scores for the application or the action of the application. The data processing system 102 may determine to exit the debugging process without executing each of the first classifier component 116, the second classifier component 118, and the third classifier component 120 for the application or the action of the application. For example, the data processing system 102 may determine that one of the first classification score or the second classification score does not satisfy a failure threshold. In response to determining that one of the first classification score or the second classification score does not satisfy the failure threshold, the data processing system 102 may determine to skip determining the third classification score in order to reduce the computing resource utilization of the data processing system 102.
For example, data processing system 102 may trigger a debugging process for an application. The data processing system 102 may determine a first classification score for the application via a debugging process for the application. The data processing system 102 may detect a first classification failure based on a comparison of a first classification score for the application to a first classification threshold. The first classification threshold may be retrieved from a threshold data structure 138 stored in the data repository 128. In response to detecting the failure to classify the first classification, the data processing system 102 may exit the debugging process for the application before determining the second classification score for the application or the third classification score for the application. The data processing system 102 may send a notification of the failure of the first classification to an administrator device or application developer device 160 of the data processing system 102. By exiting the debugging process after detecting a classification failure, the data processing system 102 may both reduce computing resource utilization and expedite completing application review and providing the results of the review to the application developer device 160.
The data processing system 102 can include a deep link builder component 114 that interfaces with or otherwise accesses the deep link builder component 114, the deep link builder component 114 being designed, constructed, and operable to generate deep links for an application. The data processing system 102 may debug or audit the application to determine whether the deep link for the application causes the application to perform a function or provide a content item in response to the requested action. For example, the data processing system 102 can debug the application based on the desired action to determine whether the deep links for the application actually direct the user to the appropriate screen or state in the application. The deep link builder component 114 can generate deep links based on actions, entities, and templates provided for an application. A deep link may refer to a hyperlink or other reference or pointer that links to a particular piece of content, such as a particular state or screen in the application as opposed to the home page or initial state or screen of the application. Deep links may refer to links to pages or content beyond the top level home page or screen or state.
The data processing system 102 (e.g., via the deep link builder component 114) can generate deep links for applications. For example, the data processing system 102 can build deep links for booking trips to a particular destination. However, the data processing system 102 may determine that a deep link into an application may take the user to a page that does not wish to fulfill the user's intent. Alternatively, deep links into the application may direct the user to malicious or abusive content. Thus, the deep link builder component 114 can determine whether a deep link built in accordance with the templates, actions, and entities of the application fulfills the user's intent. The data processing system 102 may thus perform a quality review by determining whether the deep links direct the user to the desired action and help fulfill the user's intent. To perform a quality audit, the data processing system may determine whether the intent purportedly provided by the application was actually provided by the application. For example, a developer of a music streaming service may provide an entity for artists and songs to an application. The user may request a song by artist, which may cause the application to provide a deep link to be provided that directs the user directly to the page of the artist within the application. However, if the deep link ultimately leads the user to a page of a different artist or a different type of page (e.g., an audio reading), the data processing system 102 may determine that the deep link may be erroneous.
Fig. 2 is a diagram of the operation of a system 200 for debugging an application. System 200 may include one or more components of system 100 depicted in fig. 1 or system 400 depicted in fig. 4. System 200 may include data processing system 102. The data processing system 102 may communicate with the application developer device 160, interface with the application developer device 160, or otherwise interact with the application developer device 160.
At act 201, the data processing system 102 receives an application. The data processing system 102 may receive an application from the application developer device 160. The application developer device 160 may be associated with a unique developer account such as a user name and authentication credentials. The application developer device 160 may submit the application to the data processing system 102 for delivery via an application delivery server or an online application marketplace. The data processing system 102 may receive applications and application data such as metadata, data files, lists of actions, manifests of entities, or other information.
At act 202, the data processing system 102 may determine whether the application is configured with an action. The data processing system 102 can determine whether the application is associated with an action. The data processing system 102 can determine whether the application developer has established an action for the application. A developer may use a data file, such as an XML file, to submit actions with an application. The actions may be established or configured by a developer for execution by an application. The operation may include or trigger a deep link into a particular screen, web page, or state in the application. The deep link may be created by a deep link builder of data processing system 102 in response to a request from a user to trigger an action established for an application.
The data processing system 102 may determine whether the application is configured with an action based on parsing the application data file or other information provided by the application developer device 160.
If, at act 202, the data processing system 102 determines that the application is not configured with an action, the data processing system 102 may proceed to act 234 to authorize the application for delivery. However, if data processing system 102 determines at act 202 that the application is configured with an action, data processing system 102 may proceed to act 204 to trigger a debugging process for the action.
At act 204, data processing system 102 can trigger a debugging process. Data processing system 102 may trigger debugging in response to submission of an application by an application developer or on a continuous basis. Data processing system 102 may trigger a debugging process to generate a first classification score at act 208 in response to determining that there is sufficient historical execution information at act 206. For example, if there is insufficient historical execution information (e.g., limited user feedback, such as less than 10, 20, 30, 50, 100, 150, 200, 300, or 500 user ratings, comments, or responses to survey prompts), the data processing system 102 may determine not to trigger the debugging process and continue authorizing the application at act 234 until there is sufficient user feedback.
If no historical execution information exists, the data processing system 102 may determine to proceed to the second classifier and skip the first classifier. If no historical execution information exists, the data processing system 102 may determine to insert a delay or wait until historical execution information exists. For example, the data processing system 102 may temporarily authorize the application for delivery in order for the application and its actions to be installed and executed on the client computing device 140. The application, when installed and executed, may generate historical execution information, which the data processing system 102 may then use to determine a first classification score.
If, at act 206, the data processing system 102 determines that historical execution information is available, the data processing system 102 may proceed to act 208 to generate a first classification score. The data processing system 102 (e.g., via the first classifier component 116) may generate a first classification score using a first classifier component of the data processing system 102. The first classification score may be based on its historical execution or feedback data. The first classification score may indicate whether the action provided for the application fulfills the user's intent to trigger the action. The first classification score may be a feedback rating provided by the user, a response of the user to a survey, a user comment, or other feedback provided by the user.
The data processing system 102 may then determine whether there is a classification failure based on the first classification score at act 210. The classification failure may be based on a threshold. If the data processing system 102 determines at act 210 that the classification failed based on the first classification score, the data processing system 102 may proceed to act 236 to update a parameter (e.g., a delivery control parameter) to block the application for delivery or to inhibit operation of the application. The data processing system 102 may then determine whether the application is configured with additional actions at act 214. If the application is configured with additional actions, data processing system 102 can debug the next action by triggering a debugging process at act 204 with the next action. If data processing system 102 determines that there are no further actions to review or debug for the application, data processing system 102 may exit the debugging process at 230. The data processing system 102 may then control the application delivery server based on the parameters at act 232.
If at act 210, the data processing system 102 determines that the first classification did not result in a classification failure, the data processing system 102 may proceed to act 212. At act 212, the data processing system 102 can generate a machine action. Machine actions may refer to machine-generated actions. Machine actions may refer to simulated actions or actions generated by the data processing system 102 based on application data or metadata. A machine action or machine-generated action may refer to an action that is generated or recognized by the data processing system 102 without using a list of actions provided by an application. Machine actions may refer to actions generated by the data processing system 102 independent of a list of actions provided by the application developer device 160.
After generating the machine action at act 212, the data processing system 102 may proceed to act 216 to generate a second classification score based on the machine action. The data processing system 102 (e.g., via the second classifier component 118) may determine a second classification score based on a comparison of the machine-generated action and the action provided by the application developer device 160. The data processing system 102 may determine at act 218 whether a classification failure occurred as a result of the second score. Classification failure may refer to or include a second score that is null or does not meet a minimum failure threshold. A classification failure may cause data processing system 102 to exit the debugging process. Data processing system 102 may exit the debugging process in response to a classification failure in order to reduce or prevent wasted consumption of computing resources.
If at act 218, the data processing system 102 determines that there is a classification failure based on the second score, the data processing system may proceed to act 236 to update the delivery control parameters and block the application or action.
However, if at act 218 data processing system 102 determines that there is no classification failure, data processing system 102 may proceed to act 220 to execute the matching procedure. The data processing system 102 may use the matching engine component 122 to execute the matching program. The matching program may be executed to identify a second application that is similar to the application. Similarity may be determined using various techniques including, for example, statistical techniques. The similarity may be based on whether the applications are in the same category, the same type of application, provide similar functionality, provide similar services, or use similar functionality or tools. The data processing system 102 may select similar applications based on title, description, metadata, category, user, comments, or other data sources (e.g., external data sources, third party devices 162, search engine results). For example, the data processing system 102 may utilize or apply a search engine to identify similar applications. The data processing system 102 may enter information about the application into a search engine and parse the search results to identify similar applications.
At act 222, the data processing system 102 may determine whether a similar application exists. If the data processing system 102 is unable to identify a similar application, the data processing system may proceed to act 236 to update the delivery control parameters without generating a third classification score. The data processing system 102 may update the delivery control parameter using the first classification score and the second classification score. The data processing system 102 may not find a similar application because the similar application may not yet have been submitted to the data processing system 102 for application delivery. The data processing system 102 may select a similar application as configured with actions. If otherwise a similar application is not configured with actions, the data processing system 102 may not find a similar application.
If, at act 222, the data processing system 102 determines that there is a similar application configured with actions, the data processing system 102 may proceed to act 224 to generate a third classification score. The data processing system 102 may generate a third classification score using a third classifier component. The data processing system 102 may compare actions configured for an application to actions configured for similar applications to determine a level of similarity between the actions. For example, data processing system 102 can determine that the actions of an application undergoing a debugging process match or do not match any actions established for similar applications. If data processing system 102 determines that the action undergoing the debugging process does not match any action of a similar application, data processing system 102 may assign a low classification score (e.g., 0) to the action. If data processing system 102 determines that the action of the application undergoing the debugging process matches one of the actions established for similar applications, data processing system 102 may assign a high third classification score (e.g., 1) to the action. Thus, if the action matches an action established for a similar application that has been reviewed or approved by the data processing system 102, the data processing system 102 sets a higher classification score.
At act 226, the data processing system 102 may determine whether there is a classification failure based on the third classification score. If the data processing system 102 determines that the classification failed based on the third classification score, the data processing system 102 may proceed to act 236 to update delivery control parameters to prevent authorization of the application for delivery, or to inhibit actions for the application.
If, at act 226, the data processing system 102 determines that the third classification score does not result in a classification failure, the data processing system 102 may proceed to generate a combined classification score at act 228. The data processing system 102 may generate a combined classification score based on the first classification score, the second classification score, and the third classification score. The data processing system 102 may combine the classification scores using any technique including, for example, addition, multiplication, division, dot product, function, average, or statistical techniques.
The data processing system 102 may update the delivery control parameters at act 236 based on the combined score generated at act 228. The data processing system 102 may update parameters to prevent delivery of the application, prohibit the action, or authorize the delivery or the action. The data processing system 102 may then determine whether the application is configured with additional actions at act 214. If data processing system 102 determines that there are additional actions to review, data processing system 102 may proceed to act 204 to debug or review the next action. If, at act 214, the data processing system determines that no remaining actions are to be entered into the debugging process, then data processing system 102 may proceed to act 230 to exit the debugging process.
FIG. 3 is an illustration of an example method of debugging an application. The method 300 may be performed by one or more components, systems, or elements of the system 100 depicted in fig. 1, the system 200 depicted in fig. 2, or the system 400 depicted in fig. 4. For example, the method 300 may be performed by a data processing system. At act 302, the data processing system can identify an action of the application. The application may be submitted by an application developer. The action may be a message object configured by an application developer to perform an action associated with the application. The action may include, for example, a viewing action, a listening action, a content request action, a navigation action, or other type of action. The action may be performed by an application. An action may be performed on an entity associated with the application (e.g., play Song _ A by artist _ 1).
At act 304, the data processing system may determine a first classification score. The data processing system may determine a first classification score based on historical performance of actions of messaging objects provided by an application developer. The data processing system may determine a first classification score based on the user feedback. The data processing system may determine a first classification score based on the user comment. The data processing system may determine a first classification score based on semantic analysis of the user comment or feedback. The data processing system may determine a first classification score based on the survey or the user's response to the survey. The data processing system may be based on a user's actions such as "can an application execute < action >? "to determine a first classification score. The action may correspond to an action that the application developer indicates the application is configured to perform.
In some cases, the data processing system may determine that the application does not have historical execution information. The data processing system may determine to skip generation of the first generated score or assign a default value for the first classification score. For example, the data processing system may provide a default value for the first classification score so that the application may pass the classification failure test. In some cases, the data processing system may determine that the debugging process is to be halted and authorize the application for delivery in order to obtain user feedback regarding the application.
At act 306, the data processing system may generate a machine-generated action. The data processing system may generate a machine-generated action for the application based on metadata associated with the application. The data processing system may generate the machine-generated actions without using the actions submitted by the application developer. The data processing system may generate the machine-generated actions independently of the actions submitted by the application developer. The data processing system may generate the machine-generated action based on a description of the application or other metadata associated with the application.
At act 308, the data processing system may determine a second classification score. The data processing system may determine a second classification score based on a comparison of the action provided by the application developer and the machine-generated action. If the action provided by the developer matches the machine-generated action, the data processing system may assign a high second classification score (e.g., 1) to the action. If the action provided by the developer does not match the machine-generated action, the data processing system may assign a low second classification score (e.g., 0) to the action. If the action does not exactly match the machine-generated action, but is similar, the data processing system may assign an intermediate second classification score (e.g., 0.5) to the action. If the actions are in a similar domain or category or industry, the actions provided by the developer may be similar to the machine-generated actions. For example, the data processing system may consider the listening action to be similar to the viewing action.
At act 310, the data processing system may select a second application. The second action may be a similar application. The data processing system may use a matching program to select similar actions. The second application may match or be considered similar to the application undergoing the debugging process. The data processing system may select or identify similar applications based on metadata associated with the applications. The data processing system may identify a plurality of similar applications. The data processing system may select the most similar application based on a similarity ranking of similarity scores (e.g., statistical similarity scores). The data processing system may select a similar application that is configured with actions. If a similar application contains or is configured with an action, the data processing system may determine that a similar application is to be selected for further processing. For example, if the data processing system identifies similar applications, but only one of the applications is configured with an action, the data processing system may select the application configured with the action as the similar application (or second application) to be used for the debugging process.
At act 312, the data processing system may determine a third classification score. The data processing system may determine a third classification score based on a comparison of an action approved for a second application (e.g., a selected similar application) and an action of the application by the application developer. If the action provided by the application developer matches an action configured for a similar application, the data processing system may set a high third classification score (e.g., 1). If the action provided by the developer does not match any action configured for a similar application, the data processing system may set a low third classification score (e.g., 0). If the action does not match exactly, but is similar to, any action of the second application, the data processing system may assign an intermediate second classification score (e.g., 0.5) to the action. If the action is in a similar domain or category or industry, the action provided by the developer may be similar to the action of the second application. For example, the data processing system may consider the listening action to be similar to the viewing action.
At act 314, the data processing system may update the delivery control parameters. The data processing system may update the delivery control parameter based on the first classification score, the second classification score, and the third classification score. The data processing system may update the delivery control parameters for a particular action or for the entire application. The data processing system may update the delivery control parameter based on one of the classification scores or a combination of the classification scores. For example, if one of the classification scores is below a minimum threshold (e.g., a failure threshold), the data processing system may determine that the delivery of the application is to be prevented or that the action is to be prohibited, regardless of whether the other classification scores are satisfactory. In some cases, the data processing system may combine the three classification scores to determine whether the action or application is satisfactory or passes the review process. If the action or application passes the review process, the data processing system may update the delivery control parameters to authorize the application or action for delivery.
At act 316, the data processing system may control delivery of the application. The data processing system may control delivery of the application by the application delivery server. The data processing system may control the delivery in response to the delivery control parameters updated by the data processing system. The data processing system may indicate an application delivery server that may be internal or remote to the data processing system. The data processing system may instruct the online application marketplace to prohibit actions or prevent delivery of the application. Preventing delivery of the application may include removing the application from the application store. Preventing delivery of the application may include returning the application to a previous version that passed the review process.
The data processing system may provide notifications to the application developer regarding the results of the debugging process.
Thus, the systems and methods of the present technical solution may debug an application or improve the application debugging process in order to prevent delivery of fraudulent or erroneous applications. For example, a developer may provide an XML file as part of an application package suite for an application. An XML file may include intents and entities for an application, where an intent may refer to an action that an application may perform and an entity may include or refer to content on which an action may be performed. Developers may indicate a large number of entities for an application (e.g., millions of songs for a music streaming application). A request or trigger for an action by an entity may cause the generation of a deep link to an application. For example, the client computing device may detect the request and generate deep links for actions and entities. The deep link may direct the application to a particular state or a particular web page. Thus, due to the number of intents or the large number of entities, it may be challenging to review or debug an application to determine whether a deep link generated for the application is fraudulent, erroneous, or otherwise misleading or incorrect.
The data processing system of the present technical solution may determine whether the application may actually perform the action, whether the application may actually access the entity, or whether the application may actually perform the action on the entity.
The data processing system may use one or more classifiers that generate one or more scores that indicate whether the application can fulfill the intent. The data processing system may be configured to use all three classifiers in order to improve reliability. For example, if any one classifier fails, the data processing system may determine to remove the application or disable the action. The data processing system may perform the vetting process on a per-action basis or for the entire application. The data processing system may automatically disable actions based on any one classifier failing. The data processing system may automatically disable actions for a particular digital surface (e.g., a voice-based digital assistant, a search, or a content request). The data processing system may provide a log or error log to the application developer indicating any failures or other results of the debugging process.
Fig. 4 is a block diagram of an example computer system 400. Computer system or computing device 400 may include or be used to implement system 100 or components of system 100 such as data processing system 102. Data processing system 102 may include an intelligent personal assistant or a voice-based digital assistant. Computing system 400 includes a bus 405 or other communication component for communicating information, and a processor 410 or processing circuit coupled to bus 405 for processing information. Computing system 400 may also include one or more processors 410 or processing circuits coupled to the bus for processing information. Computing system 400 also includes a main memory 415, such as a Random Access Memory (RAM), or other dynamic storage device, coupled to bus 405 for storing information and instructions to be executed by processor 410. The main memory 415 may be or include a data repository 145. Main memory 415 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 410. Computing system 400 may also include a Read Only Memory (ROM)420 or other static storage device coupled to bus 405 for storing static information and instructions for processor 410. A storage device 425, such as a solid state device, magnetic disk or optical disk, may be coupled to bus 405 for persistently storing information and instructions. The storage device 425 may comprise or be part of the data repository 145.
The processes, systems, and methods described herein may be implemented by the computing system 400 in response to the processor 410 executing an arrangement of instructions contained in main memory 415. Such instructions may be read into main memory 415 from another computer-readable medium, such as storage device 425. Execution of the arrangement of instructions contained in main memory 415 causes the computing system 400 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 415. Hard-wired circuitry may be used in place of or in combination with software instructions with the systems and methods described herein. The systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
Although an example computing system has been described in fig. 4, the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Where the systems discussed herein collect or may make use of personal information about a user, the user may be provided with an opportunity to control whether programs or features may collect personal information (e.g., information about the user's social network, social actions or activities, the user's preferences, or the user's location) or whether or how to receive content from a content server or other data processing system more relevant to the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, such that personally identifiable information is removed when generating the parameters. For example, the identity of the user may be anonymized so that personally identifiable information cannot be determined for the user, or the geographic location of the user (such as to a city, zip code, or state level) may be generalized where location information is obtained so that a particular location of the user cannot be determined. Thus, the user can control how the content server usage collects and uses information about him or her.
The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits, of computer program instructions encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The words "data processing system," "computing device," "component," or "data processing apparatus" encompass various devices, apparatuses, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple programmable processors, computers, systems on a chip, or a combination of the foregoing. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures. For example, the direct action API 108 or NLP component 106 and other data processing system 102 components may include or share one or more data processing apparatuses, systems, computing devices, or processors.
A computer program (also known as a program, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of data processing system 102) to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and storage devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
The subject matter described herein can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an internetwork (e.g., the internet), and a peer-to-peer network (e.g., an ad hoc peer-to-peer network).
A computing system, such as system 100 or system 400, may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network, such as network 105. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server sends data (e.g., data packets representing the digital components) to the client device (e.g., for displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., the result of the user interaction) may be received at the server from the client device (e.g., received by the data processing system 102 from the client computing device 140 or the application developer device 160 or the third party device 162).
Although operations are depicted in the drawings in a particular order, such operations are not required to be performed in the particular order shown or in sequential order, and not all illustrated operations are required to be performed. The actions described herein may be performed in a different order.
The separation of various system components does not require separation in all embodiments, and the described program components may be included in a single hardware or software product. For example, the NLP component 106 or the direct action API 108 may be a single component, app, or program, or a logical device having one or more processing circuits, or part of one or more servers of the data processing system 102.
Having now described some illustrative embodiments, which have been presented by way of example, it should be apparent that the foregoing is illustrative and not limiting. In particular, although many of the examples presented herein involve specific combinations of method acts or system elements, those acts and those elements may be combined in other ways to accomplish the same objectives. Acts, elements and features discussed in connection with one embodiment in other embodiments or implementations are not intended to be excluded from a similar role.
The phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of "including," "comprising," "having," "containing," "involving," "characterized by," and variations thereof herein, is meant to encompass the items listed thereafter and equivalents thereof as well as additional items and alternative embodiments consisting of the items listed thereafter exclusively. In one embodiment, the systems and methods described herein are comprised of each combination or all of one or more of the described elements, acts or components.
Any reference to an embodiment or element or act of the systems and methods referred to herein in the singular may also encompass embodiments comprising a plurality of such elements, and any reference to any embodiment or element or act herein in the plural may also encompass embodiments comprising only a single element. References in the singular or plural form are not intended to limit the presently disclosed systems or methods, components, acts or elements thereof to a single or multiple configurations. A reference to any behavior or element based on any information, behavior, or element may include an implementation in which the behavior or element is based, at least in part, on any information, behavior, or element.
Any embodiment disclosed herein may be combined with any other embodiment or examples, and references to "an embodiment," "some embodiments," "one embodiment," etc. are not necessarily mutually exclusive and are intended to indicate that a particular feature, structure, or characteristic described in connection with the embodiment may be included in at least one embodiment or example. Such phrases as used herein do not necessarily all refer to the same embodiment. Any embodiment may be combined with any other embodiment, inclusively or exclusively, in any manner consistent with aspects and embodiments disclosed herein.
References to "or" may be construed as inclusive such that any term described using "or" may indicate any single one, more than one, or all of the described terms. References to "at least one of a 'and' B" may include only 'a', only 'B', and both 'a' and 'B'. Such references used in conjunction with "including" or other open words may include additional items.
Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims. Accordingly, neither the reference signs nor their absence have any limiting effect on the scope of any claim elements.
The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing embodiments are illustrative, and not limiting of the described systems and methods. The scope of the systems and methods described herein is, therefore, indicated by the appended claims rather than by the foregoing description, and all changes that come within the meaning and range of equivalency of the claims are intended to be embraced therein.
Claims (20)
1. A system to debug an application for delivery via an application delivery server, comprising:
a data processing system comprising one or more processors and memory for:
identifying, for an application submitted by an application developer, a messaging object configured with an action by the application developer;
determining a first classification score based on historical performance of the action of the messaging object provided by the application developer;
generating a machine-generated action for the application based on metadata associated with the application;
determining a second classification score based on a comparison of the action of the messaging object provided by the application developer and the machine-generated action;
selecting, via a matching program, a second application that matches the application;
determining a third classification score based on a comparison of an action approved for the second application and the action of the messaging object provided by the application developer;
updating a delivery control parameter based on the first classification score, the second classification score, and the third classification score; and is
Controlling delivery of the application by the application delivery server in response to the delivery control parameters updated by the data processing system.
2. The system of claim 1, comprising the data processing system to:
receiving the application from an application developer device; and is
Receiving a data file associated with the application, the data file comprising a plurality of actions established by the application developer for the application.
3. The system of claim 1 or 2, comprising the data processing system to:
receiving an indication that the application is a new application uploaded by the application developer for delivery by the application delivery server; and is
Triggering a debugging process in response to the indication of the new application, the debugging process comprising determining the first classification score, the second classification score, and the third classification score.
4. The system of any one of the preceding claims, comprising the data processing system to:
receiving an indication that the application is an updated version of the application uploaded by the application developer for delivery by the application delivery server; and is
Triggering a debugging process in response to the indication of an updated version of the application, the debugging process comprising determining the first, second, and third classification scores.
5. The system of any one of the preceding claims, comprising the data processing system to:
receiving, from a client computing device on which the application is installed, an indication of negative feedback for the application; and is
Triggering a debugging process in response to the indication of the negative feedback for the application, the debugging process comprising determining the first, second, and third classification scores.
6. The system of any one of the preceding claims, comprising:
the data processing system is to determine to trigger a debugging process that includes determining the first, second, and third classification scores prior to delivering the application for installation on a client computing device.
7. The system of any one of the preceding claims, wherein:
the first classification score indicates whether an action corresponding to the application is satisfied based on a comparison of the first classification score to a threshold.
8. The system of any one of the preceding claims, comprising:
the data processing system is to determine that the application matches the second application based on a similarity score between the application and the second application being greater than a similarity threshold.
9. The system of any one of the preceding claims, comprising the data processing system to:
determining to authorize delivery of the application based on the first classification score, the second classification score, and the third classification score; and is
Updating the delivery control parameter to cause the application to be delivered by the application delivery server.
10. The system of any one of the preceding claims, comprising the data processing system to:
determining a classification failure based on at least one of the first classification score, the second classification score, or the third classification score being less than a failure threshold; and is
Updating the delivery control parameter to prevent delivery of the application by the application delivery server in response to the classification failing.
11. The system of any one of the preceding claims, comprising the data processing system to:
determining a classification failure based on the first classification score, the second classification score, and the third classification score;
updating the delivery control parameter to prevent delivery of the application by the application delivery server in response to the classification failing; and is
Sending a notification of the classification failure to the application developer.
12. The system of any of claims 1 to 10, comprising the data processing system to:
determining a classification failure based on the first classification score, the second classification score, and the third classification score; and is
Requesting an updated version of the application from the application developer in response to the classification failure.
13. The system of any one of the preceding claims, comprising the data processing system to:
the action for the messaging object determines a classification failure based on the first classification score, the second classification score, and the third classification score;
in response to the classification failing, inhibiting the action of the messaging object from being performed via the application; and is
Authorizing the application for delivery by the application delivery server.
14. The system of any one of the preceding claims, comprising the data processing system to:
identifying a plurality of actions established for the application;
determining, via a debugging process for each of the plurality of actions, a first classification score, a second classification score, and a third classification score; and is
Updating the delivery control parameters to inhibit one or more of the plurality of actions based on the debugging process.
15. The system of any one of the preceding claims, comprising the data processing system to:
identifying a plurality of digital surfaces for performing the action of the messaging object of the application; and is
Updating the delivery control parameters to inhibit the action of executing the messaging object of the application on a digital surface of the plurality of digital surfaces.
16. The system of any one of the preceding claims, comprising the data processing system to:
triggering a debugging process for a third application;
determining, via the debugging process for the third application, a first classification score for the third application;
detecting a first classification failure based on a comparison of the first classification score for the third application to a first classification threshold;
exiting the debugging process for the third application prior to determining a second classification score for the third application or a third classification score for the third application in response to detecting the first classification failure; and is
Sending a notification of the first classification failure to an administrator device.
17. A method of debugging an application for delivery via an application delivery server, comprising:
identifying, by a data processing system comprising one or more processors and memory, for an application submitted by an application developer, a messaging object configured with an action by the application developer;
determining, by the data processing system, a first classification score based on historical performance of the action of the messaging object provided by the application developer;
generating, by the data processing system, a machine-generated action for the application based on metadata associated with the application;
determining, by the data processing system, a second classification score based on a comparison of the action of the messaging object provided by the application developer and the machine-generated action;
selecting, by the data processing system, a second application that matches the application via a matching program;
determining, by the data processing system, a third classification score based on a comparison of an action approved for the second application and the action of the messaging object provided by the application developer;
updating, by the data processing system, a delivery control parameter based on the first classification score, the second classification score, and the third classification score; and
controlling, by the data processing system, delivery of the application by the application delivery server in response to the delivery control parameters updated by the data processing system.
18. The method of claim 17, comprising:
receiving, by the data processing system, the application from an application developer device; and
receiving, by the data processing system, a data file associated with the application, the data file comprising a plurality of actions established by the application developer for the application.
19. The method according to claim 17 or 18, comprising:
determining to authorize delivery of the application based on the first classification score, the second classification score, and the third classification score; and
updating the delivery control parameter to cause the application to be delivered by the application delivery server.
20. The method of any of claims 17 to 19, comprising:
determining a classification failure based on at least one of the first classification score, the second classification score, or the third classification score being less than a failure threshold; and
updating the delivery control parameter to prevent delivery of the application by the application delivery server in response to the classification failing.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/022051 WO2020185224A1 (en) | 2019-03-13 | 2019-03-13 | Assessing applications for delivery via an application delivery server |
Publications (1)
Publication Number | Publication Date |
---|---|
CN112912840A true CN112912840A (en) | 2021-06-04 |
Family
ID=65995853
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201980002163.4A Pending CN112912840A (en) | 2019-03-13 | 2019-03-13 | Debugging applications for delivery by an application delivery server |
Country Status (5)
Country | Link |
---|---|
US (1) | US11385990B2 (en) |
EP (2) | EP4235438A3 (en) |
KR (2) | KR102637614B1 (en) |
CN (1) | CN112912840A (en) |
WO (1) | WO2020185224A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
KR20240031894A (en) | 2022-09-01 | 2024-03-08 | 경희대학교 산학협력단 | A System and Method for Diagnosing Motor Faults by Analyzing the Time-Varying Changes of Fourier Transformed Values Using Artificial Intelligence |
Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130227683A1 (en) * | 2012-02-24 | 2013-08-29 | Appthority, Inc. | Quantifying the risks of applications for mobile devices |
CN105068921A (en) * | 2015-07-23 | 2015-11-18 | 清华大学 | App comparative analysis based Android application store credibility evaluation method |
US20160080345A1 (en) * | 2014-09-15 | 2016-03-17 | PerimeterX, Inc. | Analyzing client application behavior to detect anomalies and prevent access |
US20160127367A1 (en) * | 2014-10-31 | 2016-05-05 | Proofpoint, Inc. | Systems and methods for privately performing application security analysis |
CN107077391A (en) * | 2014-10-03 | 2017-08-18 | 益焦.com有限公司 | System and method for classifying and analyzing run time events |
EP3267349A1 (en) * | 2016-07-04 | 2018-01-10 | Cyan Security Group GmbH | Method and computer system for determining a threat score |
Family Cites Families (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8135775B1 (en) * | 2007-08-31 | 2012-03-13 | Crimson Corporation | Systems and methods for staged deployment of software |
US10642364B2 (en) * | 2009-04-02 | 2020-05-05 | Oblong Industries, Inc. | Processing tracking and recognition data in gestural recognition systems |
KR101416089B1 (en) * | 2012-08-06 | 2014-07-09 | 인크로스 주식회사 | An integrated platform for authoring web applications and the authoring method thereof |
WO2014137321A1 (en) * | 2013-03-05 | 2014-09-12 | Mcafee, Inc. | Modification of application store output |
US9098707B2 (en) | 2013-10-14 | 2015-08-04 | International Business Machines Corporation | Mobile device application interaction reputation risk assessment |
US9223970B2 (en) * | 2014-01-14 | 2015-12-29 | Citrix Systems, Inc. | Evaluating application integrity |
US10324926B2 (en) * | 2015-05-15 | 2019-06-18 | Microsoft Technology Licensing, Llc | System and method for extracting and sharing application-related user data |
US10789509B2 (en) * | 2018-01-24 | 2020-09-29 | WeR.AI, Inc. | Systems and methods for generating machine learning applications |
US10664256B2 (en) * | 2018-06-25 | 2020-05-26 | Microsoft Technology Licensing, Llc | Reducing overhead of software deployment based on existing deployment occurrences |
US10423403B1 (en) * | 2018-11-29 | 2019-09-24 | Capital One Services, Llc | Utilizing a machine learning model to predict metrics for an application development process |
-
2019
- 2019-03-13 EP EP23185798.8A patent/EP4235438A3/en active Pending
- 2019-03-13 US US16/333,535 patent/US11385990B2/en active Active
- 2019-03-13 CN CN201980002163.4A patent/CN112912840A/en active Pending
- 2019-03-13 KR KR1020237033901A patent/KR102637614B1/en active IP Right Grant
- 2019-03-13 WO PCT/US2019/022051 patent/WO2020185224A1/en unknown
- 2019-03-13 KR KR1020217026371A patent/KR102587887B1/en active IP Right Grant
- 2019-03-13 EP EP19714914.9A patent/EP3729259B1/en active Active
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130227683A1 (en) * | 2012-02-24 | 2013-08-29 | Appthority, Inc. | Quantifying the risks of applications for mobile devices |
US20160080345A1 (en) * | 2014-09-15 | 2016-03-17 | PerimeterX, Inc. | Analyzing client application behavior to detect anomalies and prevent access |
CN107077391A (en) * | 2014-10-03 | 2017-08-18 | 益焦.com有限公司 | System and method for classifying and analyzing run time events |
US20160127367A1 (en) * | 2014-10-31 | 2016-05-05 | Proofpoint, Inc. | Systems and methods for privately performing application security analysis |
CN105068921A (en) * | 2015-07-23 | 2015-11-18 | 清华大学 | App comparative analysis based Android application store credibility evaluation method |
EP3267349A1 (en) * | 2016-07-04 | 2018-01-10 | Cyan Security Group GmbH | Method and computer system for determining a threat score |
Non-Patent Citations (3)
Title |
---|
ANIKET GULHANE 等: "Security, Privacy and Safety Risk Assessment for Virtual Reality Learning Environment Applications", 《2019 16TH IEEE ANNUAL CONSUMER COMMUNICATIONS & NETWORKING CONFERENCE (CCNC)》, pages 1 - 9 * |
酷传: "安智市场软件审核标准", pages 1 - 2, Retrieved from the Internet <URL:http://shouce.kuchuan.com/Detail/index/contentid/458/category/4/os/android/type/app/market/all/guize/%E4%B8%8A%E4%BC%A0/kguize/all> * |
鞠天骄: "在线评论对移动应用下载影响的实证研究", 《中国优秀硕士学位论文全文数据库 经济与管理科学辑》, pages 155 - 29 * |
Also Published As
Publication number | Publication date |
---|---|
KR20210114515A (en) | 2021-09-23 |
WO2020185224A1 (en) | 2020-09-17 |
US11385990B2 (en) | 2022-07-12 |
KR102637614B1 (en) | 2024-02-16 |
KR102587887B1 (en) | 2023-10-10 |
EP4235438A3 (en) | 2023-11-15 |
EP3729259A1 (en) | 2020-10-28 |
EP3729259B1 (en) | 2023-07-19 |
EP4235438A2 (en) | 2023-08-30 |
KR20230144664A (en) | 2023-10-16 |
US20210240598A1 (en) | 2021-08-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6704937B2 (en) | Modulate packetized audio signal | |
US11599336B2 (en) | Generating and updating voice-based software applications using application templates | |
CN112334871A (en) | Action verification for digital assistant-based applications | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11514896B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
CN111465932B (en) | Integrating responses from queries into heterogeneous data sources | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
EP3762889A1 (en) | Secure digital assistant integration in web pages | |
US20240144928A1 (en) | Systems and methods to verify trigger keywords in acoustic-based digital assistant applications | |
US11385990B2 (en) | Debugging applications for delivery via an application delivery server | |
WO2023282890A1 (en) | Real-time micro-profile generation using a dynamic tree structure |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |