CN113498517A - Stable real-time translation of audio streams - Google Patents
Stable real-time translation of audio streams Download PDFInfo
- Publication number
- CN113498517A CN113498517A CN202080004986.3A CN202080004986A CN113498517A CN 113498517 A CN113498517 A CN 113498517A CN 202080004986 A CN202080004986 A CN 202080004986A CN 113498517 A CN113498517 A CN 113498517A
- Authority
- CN
- China
- Prior art keywords
- translated
- partial
- transcription
- audio
- word
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
- 238000013519 translation Methods 0.000 title claims abstract description 114
- 238000013518 transcription Methods 0.000 claims abstract description 359
- 230000035897 transcription Effects 0.000 claims abstract description 359
- 230000014616 translation Effects 0.000 claims abstract description 113
- 238000000034 method Methods 0.000 claims abstract description 54
- 238000012549 training Methods 0.000 claims description 77
- 230000006641 stabilisation Effects 0.000 claims description 29
- 238000011105 stabilization Methods 0.000 claims description 29
- 230000008859 change Effects 0.000 claims description 27
- 238000012545 processing Methods 0.000 claims description 23
- 230000004044 response Effects 0.000 claims description 8
- 238000004590 computer program Methods 0.000 abstract description 16
- 230000008569 process Effects 0.000 description 18
- 238000010586 diagram Methods 0.000 description 12
- 238000004422 calculation algorithm Methods 0.000 description 7
- 238000004891 communication Methods 0.000 description 6
- 238000010801 machine learning Methods 0.000 description 6
- 238000003491 array Methods 0.000 description 4
- 230000008901 benefit Effects 0.000 description 3
- 230000003993 interaction Effects 0.000 description 3
- 230000003287 optical effect Effects 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000013528 artificial neural network Methods 0.000 description 2
- 230000004397 blinking Effects 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 238000013515 script Methods 0.000 description 2
- 238000000926 separation method Methods 0.000 description 2
- 238000013179 statistical model Methods 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000006870 function Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000001953 sensory effect Effects 0.000 description 1
- 230000005236 sound signal Effects 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 230000009897 systematic effect Effects 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 230000000007 visual effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/40—Processing or translation of natural language
- G06F40/58—Use of machine translation, e.g. for multi-lingual retrieval, for server-side translation for client devices or for real-time translation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/04—Architecture, e.g. interconnection topology
- G06N3/045—Combinations of networks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N3/00—Computing arrangements based on biological models
- G06N3/02—Neural networks
- G06N3/08—Learning methods
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/005—Language recognition
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/06—Creation of reference templates; Training of speech recognition systems, e.g. adaptation to the characteristics of the speaker's voice
- G10L15/063—Training
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/22—Procedures used during a speech recognition process, e.g. man-machine dialogue
Abstract
Methods, systems, and apparatus, including computer programs encoded on a computer storage medium, that facilitate generating stable real-time text translations in a target language of an input audio data stream recorded in a source language. An audio stream recorded in a first language is obtained. A partial transcription of the audio at each of a plurality of successive time intervals may be generated. Each partial transcription may be translated into a second language different from the first language. Each translated partial transcription may be input to a model that determines whether a portion of the input translated partial transcription is stable. Based on the input translated local transcription, the model identifies the portion of the translated local transcription that is predicted to be stable. The stable portion of the translated partial transcript is provided for display on a user device.
Description
Cross Reference to Related Applications
This application is international and claims the benefit of U.S. application No.62/970,892 filed on 6/2/2020. The disclosures of the aforementioned applications are incorporated herein by reference in their entirety.
Background
The present specification relates generally to generating stable real-time text translations in a target language of an input audio data stream recorded in a source language.
The real-time translation system is intended to provide real-time text translation of a target language of an audio stream recorded in a source language. In other words, real-time translation systems aim to generate text translations of audio streams when (or shortly after) such systems receive the audio streams. Generally, conventional real-time systems generate a text translation of an initial portion of a received audio stream shortly after the portion of the stream is received. When additional portions of the audio stream are received, these systems generate updated textual translations of the audio from the beginning of the stream until the end of the additional portions. This process continues until the entire audio stream is interpreted. FIG. 1 shows an example of a chronological list of real-time Spanish translations ("Set makers Feud over Set with big orders at state") of a sentence audio stream generated by a conventional real-time translation system. It should be noted that the example statement shown in FIG. 1 contains errors that result from automatic machine translation (the original statement is said to be "Jet makers trouble over seat with big orders at stop").
While conventional real-time translation systems are capable of visualizing a text translation of an audio stream as the audio stream is received, the text translation typically changes repeatedly (referred to in this specification as "translation blinking" or simply "blinking") as additional portions of the audio stream are received. This is illustrated in fig. 1, where the first translated word in the first few translations changes multiple times before the word "Establecer" is determined. Word order (e.g., the order of verbs and adjectives with respect to nouns) between languages may change, and thus such a flash of translation may occur. For example, existing translation algorithms typically make arbitrary decisions between roughly equivalent words, phrases, and word sequences, and these decisions may change as the audio stream is continuously received, and thus such translation flickering also occurs.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that can include the actions of: obtaining an audio data stream; determining a first language in which to record audio in the audio data stream; generating a partial transcription of the audio at each of a plurality of consecutive time intervals, wherein each partial transcription is: (1) a transcription of the audio from a start of the audio until a particular time interval, and (2) in a first language; for each partial transcription: translating the partial transcription into a second language different from the first language; inputting the translated partial transcript to a model, wherein the model determines whether a portion of the input translated partial transcript is stable, wherein the portion of the input translated partial transcript is stable when the portion of the input translated partial transcript is expected not to change in another translated partial transcript of the recorded audio until a time interval later than the time interval of the input partial transcript; identifying, by the model and based on the input translated partial transcript, a portion of the translated partial transcript as stable; and responsive to identifying the portion of the translated partial transcript as stable, providing the portion of the translated partial transcript for display on a user device and using the identification. Other embodiments of this aspect include corresponding systems, apparatus, devices, and computer programs configured to perform the actions of the methods. A computer program (e.g., instructions) can be encoded on a computer storage device.
These and other embodiments can each optionally include one or more of the following features.
In some implementations, the model can be trained based on translations of transcriptions generated from one or more training audio data files recorded in a first language.
In some implementations, for each training audio data file, the transcription generated from the one or more training data audio files may include a plurality of partial transcriptions of the audio data file, each partial transcription of the training audio data file being generated at a respective one of a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval, and (2) in the first language.
In some implementations, the model can be trained based on stable values that identify stable portions of respective translated partial transcriptions of respective ones of the one or more audio data files.
In some implementations, each stable value may be generated using the word position in the respective translated partial transcription and the other translated partial transcriptions of the respective one of the one or more audio data files.
In some embodiments, the method may comprise: training the model to identify word sequences in the local transcription that are expected to be stable, wherein training may include: obtaining a training audio data file; identifying a plurality of training audio data files having audio recorded in a first language from the training audio data files; for each training audio data file of the plurality of training audio data files: generating partial transcriptions of audio in a training audio data file at a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of audio from a start of audio until a particular time interval and (2) a first language; and generating a chronological list of partial transcriptions ordered from earliest to latest with respect to the start of the audio; and generating a chronological list of translated partial transcriptions corresponding to the chronological list of partial transcriptions, comprising: for each partial transcript in the chronological list of partial transcripts, translating the partial transcript to a target language; for each translated partial transcription, starting from the first translated partial transcription in the chronological list of translated partial transcriptions: generating a stable value using the word position in the translated partial transcription and the other translated partial transcriptions, the stable value identifying a stable portion of the translated partial transcription; and training a model using the translated local transcription as an input to the model and the stable value as an output of the translation stabilization model.
In some embodiments, generating the stable value may include: calculating a probability of correctness for each word in the translated partial transcript, wherein the probability of correctness measures the probability that a word at a particular location of the translated partial transcript occurs at a particular location of one or more other translated partial transcripts that occur after the translated partial transcript in the chronological list of translated partial transcripts; and generating a stable value for the translated partial transcription using the probability of correctness for each word in the translated partial transcription.
In some embodiments, calculating the probability of correctness for each word in the translated partial transcript may include: for each word in the translated partial transcript: determining a particular location of the word in the translated partial transcript; calculating a first value, wherein the first value is a number of local translated transcripts after a translated local transcript arranged in a chronological list of the translated local transcripts; calculating a second value, wherein the second value specifies a number of times the word occurs at a particular location in a translated partial transcription that occurs after the translated partial transcription in a chronological list of the translated partial transcription; and dividing the second value by the first value to obtain a probability of correctness of the word.
In some embodiments, generating the stable value may include: calculating a change frequency metric for each word in the translated partial transcript, wherein the change frequency metric measures a number of times a word at a particular location of the translated partial transcript changes at the particular location of the translated partial transcript, the translated partial transcript being arranged after the translated partial transcript in the chronological list of translated partial transcripts; and generating a stable value for the translated local transcription using the measure of frequency of change for each word in the translated local transcription.
In some embodiments, generating the stable value may include: calculating a last equality measure for each word in the partial transcription, wherein the last equality measure identifies whether the position of the word in the partial transcription is the same as the position of the word that appears in the last partial transcription in the chronological list of translated partial transcriptions; and generating a stable value for the translated partial transcription using the last equality measure for each word in the translated partial transcription.
Another innovative aspect of the subject matter described in this specification can be embodied in methods that can include the actions of: obtaining an audio data stream; determining a first language in which to record audio in the audio data stream; generating partial transcriptions of audio at a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of audio from a start of audio until a particular time interval and (2) a first language; for each successive specific partial transcription: translating the particular partial transcription into a target language; and for each word of the translated specific partial transcript, calculating a stable value for the word by determining whether the position of the word in the translated specific partial transcript matches the position of the word in a threshold number of translated partial transcripts within a set of translated partial transcripts, the set of translated partial transcripts preceding the translated specific partial transcript; generating a stable value for the translated specific local transcription using the calculated stable value for the word in the translated specific local transcription, wherein the stable value for the translated specific local transcription identifies a stable portion of the specific translated local transcription; in response to generating the stable value, the portion of the translated particular partial transcription is provided for display on the user device. Other embodiments of this aspect include corresponding systems, apparatus, devices, and computer programs configured to perform the actions of the methods. A computer program (e.g., instructions) can be encoded on a computer storage device.
Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. The innovations described in this specification reduce the translation flicker that conventional real-time translation systems often encounter when translating audio streams in real-time. To achieve such reduced translation flicker, the techniques described herein display only those portions of the real-time translation that are determined to be stable (which, as further described herein, refers to translations that are not expected/predicted to change when receiving and translating other portions of the audio stream).
Furthermore, the techniques described in this specification have faster processing times relative to conventional real-time translation systems that impose some delay before generating translations. In particular, such conventional systems generate translated text with a longer latency than the present system. Thus, while these delay-based conventional systems achieve higher accuracy and/or lower translation flicker than other conventional systems, such accuracy comes at the expense of longer delay, which is not practical in settings requiring faster real-time translation output. In contrast, the stability-based techniques described in this specification can minimize the delay that would otherwise exist in conventional delay-based systems, while doing so provides similar or even better stability/reduced translation flicker than such conventional systems.
In one embodiment, further described in this specification, a model (e.g., a supervised machine learning model) is used to predict a stable portion of the translated portion of the input audio stream, which in turn is used to determine the translated portion to be displayed. Unlike conventional systems, which may use already translated text to train a model, the model training techniques described herein use actual audio files/streams that are transcribed and then translated. Using actual audio to groom the training data ensures that the model is more robust (than conventional systems) because the model is trained using a variety of different audio scenes from which people (or other entities) speak or emit sounds. Furthermore, any errors in the translation that may be introduced during translation (e.g., when an erroneous translation is generated) and/or during audio transcription (e.g., when one or more words are incorrectly transcribed) propagate during model training. For example, as more audio data is received, the transcription of the audio file may be continuously updated with the context information. By using audio to groom the training data, the model can effectively integrate uncertainty in the transcription of the audio signal into the model. As a result, the model is trained using potentially erroneous training data, which not only simulates how the translation performs in practice, but also ensures that the model is trained to accommodate such system errors to determine the stability of the translation.
Furthermore, the model-based techniques described in this specification do not require any prior label data to train, nor do they require significant resources to obtain or generate such labels. In contrast, the techniques described in this specification utilize a simple set of rules that require limited computer processing to generate training labels for the obtained audio training data.
In another embodiment further described in this specification, the algorithm is a stable part for predicting a particular translation based on whether one or more previous translations earlier in the audio stream also include that part of the translation at the same location or locations as in the particular translation. This technique is more resource efficient than the model-based technique because it requires less computational resources (e.g., processor and memory requirements) than training, building, and storing models.
The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
Drawings
FIG. 1 illustrates an example output of a real-time translation generated by a conventional real-time translation system.
FIG. 2 is a block diagram of an example environment in which an input audio stream in a source language is translated textually in real-time into a target language.
FIG. 3 is a flow diagram of an example process for generating a real-time text translation of an input audio stream recorded in a source language in a target language.
FIG. 4 illustrates an example list of translated partial transcripts and corresponding stability values for the translated partial transcripts generated by the system of FIG. 2.
FIG. 5 is a block diagram of an example environment for training a translation stability model described with reference to FIGS. 2, 3, and 4.
FIG. 6 is a flow diagram of an example process for training a translation stability model described with reference to FIGS. 2, 3, 4, and 5.
FIG. 7 is a block diagram of an example environment in which an input audio stream in a source language is translated textually in real-time into a target language.
FIG. 8 is a block diagram of an example computer system.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
The present specification relates generally to generating stable real-time text translations in a target language of an input audio data stream recorded in a source language.
As described below and in more detail throughout the specification, the real-time translator receives an audio stream and generates a stable real-time text translation of the audio stream in a target language. As used in this specification, a stable real-time text translation refers to a translation of a first portion of an audio stream (i.e., the beginning of the audio stream to a particular time interval) that is expected/predicted to not change when a real-time translation is generated for a subsequent portion of the audio stream (i.e., a portion of the audio stream from the beginning of the stream to a time interval that occurs after the particular time interval).
Upon receiving the audio stream (or a portion of the stream), the real-time translator determines the first language (also known as the source language) in which the audio stream was recorded. During audio streaming, the real-time interpreter generates partial transcriptions of the audio stream at a plurality of consecutive time intervals. As used in this specification, a partial transcription is (1) an audio transcription from the start of the audio until a certain time interval, and (2) a first language. Then, for each partial transcription, the real-time translator generates a text translation of the partial transcription in a second language (also referred to as a target language in this specification) that is different from the first language.
For each translated partial transcription, the real-time translator determines whether a portion of the translated partial transcription (which may include part of the translated partial transcription or all thereof) is stable, i.e., the translated partial transcription is expected/predicted to not change in another translated partial transcription of the recorded audio until a time interval later than the time interval of the input partial transcription.
The real-time translator can determine stability in several different ways. In some implementations, the real-time translator can use a model (e.g., a supervised or unsupervised machine learning model) that is trained to generate stable values that identify stable portions of the translated local transcription of the input. Such a model is trained using a set of translated partial transcriptions (generated from an actual audio data file) and stable values of the corresponding translated partial transcriptions. In other embodiments, the real-time translator calculates a stable value for a particular translated partial transcription by determining whether the location of each word in the particular translated partial transcription matches the location of words within a threshold number of other translated partial transcriptions prior to the particular translated partial transcription. Each word in the transcription/translation can be summarized into tokens in other languages.
Using the generated stable value, the stable value identifies a portion of the translated partial transcript identified as stable, and the real-time translator provides for display only the portion of the translated partial transcript.
The above-described and additional features of the real-time translator are further described below with reference to fig. 2-8.
FIG. 2 is a block diagram of an example environment 200 in which an input audio stream in a source language is text-translated in real-time into a target language.
The real-time translator 204 (shown in fig. 2) generates a real-time translation of the input audio stream 202. The input audio stream 202 can be received from multiple sources. For example, the audio stream 202 may be a voice recording or an audio file stored on the user device. As another example, the audio stream 202 may be obtained from a server or cloud service over a network.
In some implementations, a user of the user device can send a request to the real-time translator 204 to generate a real-time translation of the audio stream 202. Such a request can include the audio stream 202 or alternatively can identify a location or source of the audio stream 202 that the real-time translator 204 can use to obtain the audio stream 202.
The real-time translator 204 is a data processing device that includes a number of components: (1) a language detector 206; (2) a transcriber 208; (3) a translator 210; (4) a translation model 212; (5) a display engine 214. Each of these components is also a data processing device as further described in this specification. Although these components are shown as part of the real-time translator 204, in alternative embodiments, one or more of these components may be implemented separately. Further, while these components are shown as separate components, one or more of these components can be combined into one component. For example, the transcriber 208 and the language detector 206 can be implemented as a single component. The structure and operation of each of these components is described with reference to fig. 3.
In some embodiments, the real-time translator 204 may be implemented as a single software package that resides locally on the user device. The user device typically includes a user application, such as a web browser, to facilitate sending and receiving data over the network 108, but a native application executed by the client device 102 can also facilitate sending and receiving data over the network 108. Alternatively, the real-time translator can be deployed in a cloud or on a server accessible by the user device over a network, such as a Local Area Network (LAN), Wide Area Network (WAN), the internet, or a combination thereof.
FIG. 3 is a flow diagram of an example process 300 for generating a real-time text translation of an input audio stream recorded in a source language in a target language. The operation of process 300 is illustratively described below with reference to real-time translator 204 (and its components) of FIG. 2. The operations of process 300 can be performed by any suitable device or system, such as any suitable data processing apparatus. The operations of process 300 can also be implemented as instructions stored on a non-transitory computer-readable medium. Execution of the instructions causes the one or more data processing apparatus to perform the operations of process 300.
The real-time translator 204 obtains an audio data stream (at 302). As described with reference to fig. 2, the input audio stream 202 may be received from multiple sources. For example, the audio stream 202 can be a voice recording or an audio file stored on the user device. As another example, the audio stream 202 may be obtained from a server or cloud service over a network.
The language detector 206 determines (at 304) a first language in which audio in the audio data stream is recorded. In some implementations, the language detector 206 parses metadata included in the audio stream 202 to search for a tag that identifies the first language in which the audio was recorded. Alternatively, such a language identifier may be included in a request of the user device to translate the input audio stream. If such a language identification tag is included in the audio stream 202 (or otherwise included in the request), the language detector 206 obtains data associated with the tag identifying the first language in which the audio was recorded. If the audio stream or file does not include such language identification tags, language detector 206 analyzes a portion of input audio stream 202 (e.g., a portion corresponding to a time interval of audio (e.g., 1-3 seconds)) to determine a source language in which to record audio corresponding to the portion. In some implementations, to accomplish this, the language detector 206 can compare the portion of the input audio stream or file to a library of known signatures associated with different target languages. In some implementations, the language detector 206 can include a machine learning model, such as a Residual Neural Network (RNN) (or another suitable statistical model) that identifies the language in which a certain audio clip is recorded and is trained using a set of audio clips and a corresponding set of tags that identify the language in which each audio clip is recorded.
As shown in FIG. 2, the transcriber 208 generates a partial transcription of the audio in the audio stream 202 at each time interval (T1 through TN) shown on the timeline (TR 1208-1 through TRN 208-N). Thus, the transcriber 208 generates a partial transcription TR 1208-1 for time T1, which is a transcription of the audio from the start of the audio (time T0) until time T1. Similarly, the transcriber 208 generates a partial transcription TR 2208-2 for time T2, which is a transcription of the audio from the start of the audio (time T0) until time T2. As another example, the transcriber 208 generates a partial transcription TRN208-N for time TN, which is a transcription of the audio from the start of the audio (time T0) until time TN.
For each partial transcription, the following operations are iteratively performed (operations 308, 310, 312, and 314). In some embodiments, the execution of these operations starts with a first partial transcription (TR1) and continues to each subsequent successive partial transcription (TR2, tr3.. TRN).
The translator 210 translates the partial transcription into a second language different from the first language (at 308). The translator 210 is implemented using a conventional machine translation service that translates text in a source language (i.e., a first language) to a target language (i.e., a second language). In some embodiments, the translator 210 accepts as input each local transcription (generated by the transcriber 208) of the first language/source language. For each such partial transcription, the translator 210 generates a text translation of the partial transcription in the target language. As shown in FIG. 2, the translator 210 uses partial transcripts (TR 1208-1 through TRN208-N) to generate corresponding translated partial transcripts (L1210-1 through LN 210-N).
The real-time translator 204 inputs (at 310) the translated partial transcription (generated at operation 308) into the translation stability model 212. The translation stability model 212 accepts the translated local transcription as input and outputs a stability value that identifies a stable portion of the input translated local transcription, i.e., a portion of the input translated local transcription is expected/predicted to not change in a subsequent translated local (or complete) transcription (i.e., another translated transcription at a later time interval than the time interval of the input translated local transcription). In some embodiments, the stable value output by translation stability model 212 indicates the number of words that are stable in the translated local transcription. For example, for a translated partial transcript that includes 10 words, a stability value of 5 indicates that the first five words of the translated partial transcript are stable.
In some implementations, the translation stabilization model 212 can be implemented as a machine learning model, such as an RNN (e.g., a supervised or unsupervised model). Alternatively, the translation stabilization model 212 can be implemented as a rule-based engine or another suitable statistical model. When the translation stabilization model 212 is implemented as a supervised machine learning model (e.g., a recurrent neural network), it can be trained using a set of translated local transcripts and a set of corresponding stabilization values for the translated local transcripts. Additional details regarding training the translation stability model 212 are described with reference to fig. 5 and 6.
In response to inputting the translated local transcription into the translation stability model 212 at operation 308, the translation stability model 212 identifies (and the real-time translator 202 obtains from the model 212) a stable value that identifies a portion of the translated local transcription that is expected/predicted to be stable (at 312). This is further illustrated in fig. 2. For example, FIG. 2 shows that the translation stability model 212 outputs a stable value of 0 for the first two translated partial transcripts (L1210-1 and L2210-2) and a stable value of 4 for the third and fourth translated partial transcripts (L3210-3 and L4210-4).
In response to identifying a portion of the translated partial transcript that is expected/predicted to be stable, the real-time translator 204 provides the portion of the translated partial transcript for display (at 314). In some embodiments, the translation stabilization model 212 outputs a stable value and provides the value and the corresponding translated partial transcription to the display engine 214. The display engine 214 uses the translated partial transcription and the corresponding stable value to provide for display only the portion of the translated partial transcription for which the stable value is identified as stable. For example, if (1) the translated partial transcription includes 10 words and (2) the stabilization value is 5, indicating that the first five words of the translated partial transcription are expected to be stable, the display engine 214 only provides the first five words of the translated partial transcription for display. For example, as shown in FIG. 2, the stable value of the fourth translated partial transcript L4 is 4, so the display engine 214 will only provide the first four words of the translated partial transcript. This is further described with reference to fig. 4.
FIG. 4 illustrates an example listing of translated partial transcripts and stable values of corresponding translated partial transcripts generated by the real-time translator of FIG. 2.
In the next paragraph, the top five translated partial transcriptions and their corresponding stable values (as shown in FIG. 4) are used as a description of an example provided by the display engine 214 for display.
The stable values for the first three translated partial transcripts ("soy", "yo no", and "no soy vidente") shown in FIG. 4 are 0, indicating that all words in these translated partial transcripts are expected to be unstable. Thus, for these translated partial transcriptions, the display engine 214 does not provide any words of the translated partial transcriptions for display.
The stabilization value for the fourth translated partial transcript ("no soy vidente transcripts de cajones con dicho") was 3, indicating that the first three words of this translated partial transcript are expected to be stable. Accordingly, the presentation engine 214 provides the first three words ("no soy vidente") of the translated partial transcript for display.
The stable value of the fifth partial transcript ("no soy videos de cajones con dicho") is 8, indicating that the first eight words in this translated partial transcript are expected to be stable. Accordingly, the display engine 214 provides the first eight words ("no soy vidente diodes de cajones con dicho") of the translated partial transcript for display.
FIG. 5 is a block diagram of an example environment 500 for training the translation stabilization model 212 described with reference to FIGS. 2, 3, and 4.
The environment 500 is used to train a translation stabilization model 212, which can be implemented, for example, as a supervised machine learning model, to generate a stabilization value for a translated local transcription of an input obtained from an audio stream. With the exception of the stability metric generator 504, all of the components of the real-time translator 204 shown in fig. 5 (and their associated structure and operations performed by these components) are identical to the like-named components of the real-time translator 204 described with reference to fig. 2-4.
In some implementations, any audio utterance can be used to sort through the audio training data used in the training of the translation stabilization model. Collating a diverse set of audio training data ensures that the model is trained using a variety of different audio scenes of the person (or other entity) speaking or speaking.
Furthermore, actual (i.e., validated) translated partial transcriptions are generally not used in training; instead, the translation stability model is preferably trained using translated local transcripts generated by the translator 210, which in turn are generated from local transcripts generated by the transcriber 208. The generated translated partial transcription may have errors that may have been introduced by the translator 210 (e.g., generating a wrong translation) and/or introduced by the transcriber 208 (e.g., transcribing one or more words in error). Thus, training the translation stability model 212 with these potentially erroneous training data ensures that the model is trained to accommodate such systematic errors in determining a stable value.
As described in detail below, the translation stabilization model 212 is trained using a set of training label data that includes a set of translated local transcriptions of the target/second language and a set of corresponding labels that identify a stabilization value for each translated local transcription. The translation stabilization model is trained to reduce the loss of model 212 (specified by a loss function (e.g., L1, L2 loss)). For translated partial transcriptions corresponding to the training audio file, there are generally no stable values yet, so stability metric generator 504 is used to generate stable values for these translated partial transcriptions (as described further below with reference to FIG. 6), which are then used as tags during training.
In some implementations, the stability metric generator 502 is a rule-based engine (i.e., a type of data processing device) that includes a set of rules for generating stable values for translated local transcriptions obtained from training audio data files. Additional details regarding the training of stability metric generator 504 and translation stability model 212 are described below with reference to FIG. 6.
Fig. 6 is a flow diagram of an example process 600 for training the translation stability model 212 described with reference to fig. 2-5. The operation of process 600 is illustratively described below with reference to real-time translator 204 of FIG. 5. The operations of process 600 can be performed by any suitable device or system, such as any suitable data processing apparatus. The operations of process 600 can also be implemented as instructions stored on a non-transitory computer-readable medium. Execution of the instructions causes one or more data processing apparatus to perform the operations of process 600.
The real-time translator 204 obtains training audio data files (at 602). As described above, the real-time translator 204 can obtain training audio data files from any source that stores recorded audio. Examples of these sources are described with reference to fig. 3.
The real-time translator 204 identifies (at 604) a plurality of training audio data files having audio recorded in a first language from the training audio data files. Language detector 206 determines the language in which each training audio data file was recorded (in the same manner as described above with reference to fig. 2) and identifies only the plurality of training audio data files that the language detector determined to be recorded in the first language (source language).
The following operations are performed for each of the plurality of training audio data files (operations 606 to 614).
The translator 210 generates a chronological list of translated partial transcripts corresponding to the chronological list of partial transcripts (at 610). In some embodiments, for each partial transcription in the chronological list of partial transcriptions, the translator translates the partial transcription into the target language to obtain a translated partial transcription. This operation is performed in substantially the same manner as operation 308 described with reference to fig. 3.
The following operations (operations 612 and 614) are performed for each translated partial transcription, starting with the first translated partial transcription in the chronological list of translated partial transcriptions and then continuing to each successive translated partial transcription in the chronological list.
Stability metric generator 504 generates a stable value for the translated local transcription that identifies a stable portion of the translated local transcription (at 612). The stable value can be calculated in different ways, each of which may require the use of the translated local transcription and/or the position of a word in the other translated local transcriptions in the chronological list of translated local transcriptions. Several different techniques for calculating the stable value are described below.
One technique for calculating a stable value is based on the calculation of the probability of correctness for each word in the translated partial transcription. The probability of correctness measures the probability that a word at a particular location of a translated partial transcription occurs at the same location in one or more subsequent translated partial transcriptions (i.e., the one or more translated partial transcriptions that follow the translated partial transcription in the chronological list of translated partial transcriptions).
To calculate the correct probability for a word in a translated partial transcription, stability metric generator 504 first determines the position (also referred to as a first position or a particular position) of the word relative to the beginning (or first word) of the translated partial transcription. In some implementations, the stability metric generator 504 counts the number of words from the first word in the translated partial transcription up to the particular word. The stability metric generator 504 then calculates a first value and a second value. The stability metric calculates a first value by determining a number of local translated transcripts that are arranged after a translated local transcript in a time ordered list of translated local transcripts. Stability metric generator 504 calculates the second value by determining the number of times the particular word occurs at the first position in a subsequent translated partial transcription (i.e., in a translated partial transcription subsequent to the translated partial transcription in a chronological list of translated partial transcriptions). The stability metric calculates a probability of correctness for each word by dividing the second value by the first value.
The stability metric generator 504 uses the derived correct probability value for each word in the translated partial transcription to calculate a stable value for the translated partial transcription. In some implementations, the stability metric generator 504 generates an array using the correct probability values for each word in the translated partial transcription. The location/position of such arrays corresponds to the position where words in the translated partial transcript occur, and the data stored at these array positions corresponds to the correct probability values for those words. For example, array position 1 may correspond to and include the correct probability of a first word in the translated partial transcription, array position 2 may correspond to and include the correct probability of a second word in the translated partial transcription, and so on.
In some implementations, a word may be identified as stable in the array (e.g., by assigning the word a label 1) if the word's correct probability meets (e.g., meets or exceeds) a threshold. On the other hand, if the probability of correctness for a word does not satisfy the threshold, the word may be identified in the array as unstable (e.g., by replacing the probability of correctness by 0).
Stability metric generator 504 then determines a stable value for the translated partial transcription by counting the number of stable words in the translated partial transcription until the first unstable word is identified. In some embodiments, this includes: starting at the first position in the array and counting the number of "1" (or another value representing a stable word) until the first "0" (or another value representing an unstable word) is encountered.
Another technique for calculating a stable value is based on the calculation of a change frequency metric that measures the number of times a word at a particular location of a translated local transcription does not appear in the chronological list of translated local transcriptions at a particular location of the translated local transcription that is subsequent to the translated local transcription.
To calculate the change frequency value for a word in a translated local transcription, stability metric generator 504 first determines the location (also referred to as a first location or a particular location) of the word relative to the beginning (or first word) of the translated local transcription (as described above with reference to the correct probability metric). The stability metric generator 504 then calculates a first value and a second value. The stability metric calculates a first value by determining a number of local translated transcripts that are arranged after a translated local transcript in a time ordered list of translated local transcripts. Stability metric generator 504 calculates a second value by determining the number of times a word at a particular location changes in a subsequent translated partial transcription (i.e., appears in the translated partial transcription following the translated partial transcription in a chronological list of translated partial transcriptions). The stability metric calculates a frequency of change for each word by dividing the second value by the first value.
The stability metric generator 504 uses the derived change frequency value for each word in the translated local transcription to calculate a stability value for the translated local transcription. In some implementations, the stability metric generator 504 uses the change frequency values of words in the translated local transcription to generate an array. The location/position of such arrays corresponds to the position where words in the translated partial transcript occur, and the data stored at these array positions corresponds to the varying frequency values for those words. For example, array position 1 may correspond to a first word in the translated partial transcription and include a frequency of change for the first word, array position 2 may correspond to a second word in the translated partial transcription and include a frequency of change for the second word, and so on. In some implementations, a word may be identified as stable in the array (e.g., by assigning the word a label 1) if its varying frequency value meets (e.g., is at or below) a threshold value. On the other hand, if the change frequency value for a word does not satisfy the threshold, the word may be identified in the array as unstable (e.g., by assigning the word a label of 0).
Stability metric generator 504 then determines a stable value for the translated partial transcription by counting the number of stable words in the translated partial transcription until the first unstable word is identified. In some embodiments, this includes: starting at the first position in the array and counting the number of "1" (or another value representing a stable word) until the first "0" (or another value representing an unstable word) is encountered.
Yet another technique for calculating a stable value is based on a last equality metric that identifies whether a word is in the same position in the translated partial transcript as the word is in the last translated partial transcript in the chronological list of translated partial transcripts.
To calculate this last equality measure for a word in the translated partial transcription, stability metric generator 504 first determines the position (also referred to as the first position or a particular position) of the word relative to the beginning (or first word) of the translated partial transcription (as described above with reference to the correct probability measure). The stability metric generator 504 then calculates a first value (also referred to as the last equivalent value of the word) by determining whether the particular word appears at a first/particular location in the "last" translated partial transcript (i.e., the translated partial transcript that appears at the end of the chronological list of translated partial transcripts). The first value of a word indicates whether the word is stable or unstable. In some embodiments, if stability metric generator 504 determines that a particular word occurs at a first position in the "last" translated partial transcript, it assigns a first value of "1" (or another value indicative of a stable word); otherwise, it assigns a "0" to the first value (or another value indicating an unstable word).
Stability metric generator 504 uses the last equivalent value of each word in the translated partial transcription to calculate a stability value for the translated partial transcription. In some implementations, the stability metric generator 504 uses the last equivalent value of a word in a translated partial transcription to generate an array. The location/position of such arrays corresponds to the position where the words in the translated partial transcription occur, and the data stored at these array positions corresponds to the last equivalent values of those words. For example, array position 1 may correspond to a first word in the translated partial transcription and include the last equivalent value of the first word, array position 2 may correspond to a second word in the translated partial transcription and include the last equivalent value of the second word, and so on.
Stability metric generator 504 then determines a stable value for the translated partial transcription by counting the number of stable words in the translated partial transcription until the first unstable word is identified. As described above, in some embodiments, a final equal value of 1 indicates a stable word, and a final equal value of 0 indicates an unstable word. In such embodiments, the stable value of the translated local transcription is determined by: starting at the first position in the array and counting the number of "1" s until the first "0" (or another value representing an unstable word) is encountered.
In some embodiments, stability metric generator 504 may use only one of the techniques described above for calculating a stability value for a translated local transcription. In other embodiments, two or more of these techniques may be used to calculate the stability value, in which case stability metric generator 504 uses each of these techniques to calculate a stability value for the translated local transcription, and then selects one of the stability values (e.g., the lowest stability value or the highest stability value) as the final stability value for training translation stability model 212.
Returning to the process 600, the real-time translator 204 trains (at 614) the translation stability model 212 using the translated local transcription and the stability value determined at operation 612. In some embodiments, training continues until all of the translated partial transcriptions of each training audio data file are completed. Alternatively, training continues until the loss of the translation stabilization model 212 meets (e.g., is at or below) a particular threshold.
Once trained using the process 600, the translation stabilization model 212 may be used to identify stable values of the input translated local transcription in inference mode, which in turn may be used to determine expected/predicted stable translated words for display during real-time translation of the received audio stream (as described with reference to fig. 2-4).
FIG. 7 is a block diagram of an example environment 700 in which an input audio stream in a source language is text-translated in real-time into a target language.
As with the example environment described with reference to fig. 2-4, the example environment 700 provides a system that uses calculated stable values to generate stable real-time text translations of an input audio stream. In fact, all of the components of the real-time translator 204 shown in FIG. 2 (and its associated structure and operations performed by these components, as described in FIG. 3) are identical to the like-named components of the real-time translator 204 shown in FIG. 7, except for the translation stabilization model 212. However, instead of the translation stabilization model 212 shown in FIG. 2, the real-time translator 204 of FIG. 7 includes a translation comparator 702. Although the translation stability model 212 and the translation comparator 702 both generate stable values for the translated local transcription, the translation comparator 702 generates stable values for the translated local transcription in a different manner (as described further below).
To calculate a stable value for the translated partial transcription, translation comparator 702 first calculates a stable value for a word in the translated partial transcription. This is done by using words that appear in one or more previous translated partial transcriptions (i.e., one or more translated partial transcriptions corresponding to audio stream portions that end at an earlier time interval). In some implementations, the translation comparator 702 identifies the location of a word in the translated partial transcription. Thus, for each word, translation comparator 702 calculates a first position value that represents the position of the word in the translated partial transcription (similar to the description of determining word position set forth above with reference to FIG. 6).
Then, for each word in the translated partial transcription, translation comparator 702 determines a stable value for the word by determining whether the word appears in a threshold number (which may be any predetermined number greater than or equal to 1) of first positions in a previous translated partial transcription. In other words, translation comparator 702 determines whether the location of the word in the translated partial transcript matches the location of the word in a threshold number of translated partial transcripts within a set of translated partial transcripts that precede the translated particular partial transcript. If translation comparator 702 determines that a word occurs first in a threshold number of previously translated partial transcriptions, it assigns a "1" to the word (or another value indicating a stable word); otherwise, it assigns a "0" to the word (or another value indicating an unstable word).
Using the calculated stable values of the translated partial transcription, the real-time translator 204 provides a portion of the translated partial transcription for display. In some embodiments, the translation comparator 702 outputs a stable value and provides the value and the corresponding translated partial transcription to the display engine 214. The display engine 214 uses the translated partial transcript and the corresponding stable value to provide for display only the portion of the translated partial transcript identified by the stable value as expected/predicted to be stable. For example, if (1) the translated partial transcription includes 10 words and (2) the stabilization value is 5, which indicates that the first five words of the translated partial transcription are stable, the display engine 214 only provides the first five words of the translated partial transcription for display.
Thus, the technique for calculating the stable value described with reference to fig. 7 is different from the translation stability model 212 establishment method described with reference to fig. 2 to 6. Generally, the translation stability model 212 establishes a stable prediction by comparing the current sequence to future partial results with the goal of minimizing deviations from future results. In contrast, the algorithm described with reference to FIG. 7 uses past translated partial transcriptions with the goal of minimizing deviations from the past. Furthermore, the algorithm described with reference to fig. 7 does not require any model training and development, and therefore it is more computationally resource efficient than the model-based techniques described with reference to fig. 2-6.
FIG. 8 is a block diagram of an example computer system 800 that may be used to perform the operations described above. System 800 includes a processor 810, a memory 820, a storage device 830, and an input/output device 840. Each of the components 810, 820, 830, and 840 may be interconnected, for example, using a system bus 850. The processor 810 is capable of processing instructions for execution within the system 800. In some implementations, the processor 810 is a single-threaded processor. In another implementation, the processor 810 is a multi-threaded processor. The processor 810 is capable of processing instructions stored in the memory 820 or on the storage device 830.
The storage device 830 is capable of providing mass storage for the system 800. In some implementations, the storage device 830 is a computer-readable medium. In various different embodiments, the storage device 830 may comprise, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices (e.g., cloud storage devices) over a network, or some other mass storage device.
Input/output device 840 provides input/output operations for system 800. In some implementations, the input/output devices 840 can include one or more of a network interface device, such as an ethernet card, a serial communication device such as an RS-232 port, and/or a wireless interface device such as an 802.11 card. In another embodiment, the input/output devices may include driver devices configured to receive input data and to send output data to other input/output devices, such as a keyboard, a printer, and a display device 860. However, other implementations may also be used, such as being a mobile computing device, a mobile communications device, a set-top box television client device, and so forth.
Although an example processing system has been described in fig. 8, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on a computer storage medium (or multiple media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage medium may be or be included in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple programmable processors, computers, systems on a chip, or a combination of the foregoing. An apparatus may comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing, and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such devices. Further, the computer may be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example: semiconductor memory devices, such as EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending documents to and receiving documents from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification), or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an internetwork (e.g., the internet), and a peer-to-peer network (e.g., an ad hoc peer-to-peer network).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server sends data (e.g., an HTML page) to the client device (e.g., for purposes of displaying data to a user interacting with the client device and receiving user input from the user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (19)
1. A computer-implemented method, comprising:
obtaining an audio data stream;
determining a first language in which to record audio in the audio data stream;
generating a partial transcription of the audio at each of a plurality of successive time intervals, wherein each partial transcription is of (1) the audio from a start of the audio until a particular time interval, and (2) the first language;
for each partial transcription:
translating the partial transcription into a second language different from the first language;
inputting the translated partial transcription to a model, wherein the model determines whether a portion of the input translated partial transcription is stable, wherein the portion of the input translated partial transcription is stable when the portion of the input translated partial transcription is expected not to change in another translated partial transcription of the recorded audio until a time interval later than the time interval of the input partial transcription;
identifying, by the model and based on the translated partial transcript of the input, a portion of the translated partial transcript as stable; and
in response to identifying the portion of the translated partial transcription as stable, providing the portion of the translated partial transcription for display on a user device and using the identification.
2. The computer-implemented method of claim 1, wherein the model is trained based on translations of transcriptions generated from one or more training audio data files recorded in the first language.
3. The computer-implemented method of claim 2, wherein, for each training audio data file, the transcriptions generated from one or more training data audio files comprise a plurality of partial transcriptions of the audio data file, each partial transcription of a training audio data file being generated at a respective one of a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval, and (2) in the first language.
4. The computer-implemented method of any preceding claim, wherein the model is trained based on a stabilization value that identifies a portion of a stabilization of a respective translated partial transcription of a respective one of the one or more audio data files.
5. The computer-implemented method of claim 4, wherein each stable value is generated using word positions in the respective translated partial transcription and other translated partial transcriptions of a respective one of the one or more audio data files.
6. The computer-implemented method of claim 1, further comprising training the model to identify word sequences in local transcriptions that are expected to be stable, wherein the training comprises:
obtaining a training audio data file;
identifying a plurality of training audio data files from the training audio data files having audio recorded in the first language;
for each training audio data file of the plurality of training audio data files:
generating partial transcriptions of the audio in the training audio data file at a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval and (2) in the first language; and
generating a chronological list of partial transcriptions ordered from earliest to latest with respect to a start of the audio; and
generating a chronological list of translated partial transcriptions corresponding to the chronological list of partial transcriptions, comprising: for each partial transcription in the chronological list of partial transcriptions, translating the partial transcription into a target language;
for each translated partial transcription, starting from a first translated partial transcription in the chronological list of translated partial transcriptions:
generating a stabilization value using word positions in the translated partial transcription and other translated partial transcriptions, the stabilization value identifying a stable portion of the translated partial transcription; and
training the model using the translated local transcription as an input to the model and the stable value as an output of a translation-stable model.
7. The method of claim 2, wherein generating the stable value comprises:
calculating a probability of correctness for each word in the translated partial transcript, wherein the probability of correctness measures the probability that a word at a particular location of the translated partial transcript occurs at the particular location of one or more other translated partial transcripts that occur after the translated partial transcript in the chronological list of translated partial transcripts; and
generating the stable value for the translated partial transcription using the probability of correctness for each word in the translated partial transcription.
8. The computer-implemented method of claim 7, wherein calculating the correct probability for each word in the translated partial transcription comprises:
for each word in the translated partial transcript:
determining a particular location of the word in the translated partial transcript;
calculating a first value, wherein the first value is a number of local translated transcripts after the translated local transcript arranged in a chronological list of the translated local transcripts;
calculating a second value, wherein the second value specifies a number of times the word occurs at a particular location in a translated partial transcription that occurs after the translated partial transcription in a chronological list of the translated partial transcription; and
dividing the second value by the first value to obtain the probability of correctness of the word.
9. The computer-implemented method of any of claims 4 to 8, wherein generating the stable value comprises:
calculating a change frequency metric for each word in the translated local transcription, wherein the change frequency metric measures a number of times a word at a particular location of the translated local transcription changes at the particular location of the translated local transcription, the translated local transcription being arranged after the translated local transcription in a chronological list of translated local transcriptions; and
generating the stable value for the translated local transcription using the measure of frequency of change for each word in the translated local transcription.
10. The computer-implemented method of any of claims 4 to 9, wherein generating the stable value comprises:
calculating a last equality metric for each word in the partial transcription, wherein the last equality metric identifies whether the position of a word in the partial transcription is the same as the position of the word appearing in the last partial transcription in the chronological list of translated partial transcriptions; and
generating the stable value for the translated partial transcription using the last equality measure for each word in the translated partial transcription.
11. A system, comprising:
obtaining an audio data stream;
determining a first language in which to record audio in the audio data stream;
generating local transcriptions of the audio at a plurality of consecutive time intervals, wherein each local transcription is (1) a transcription of the audio from a start of the audio until a particular time interval and (2) in the first language;
for each successive specific partial transcription:
translating the particular partial transcription into a target language; and
for each word of the translated specific partial transcript, calculating a stable value for the word by determining whether the position of the word in the translated specific partial transcript matches the position of the word in a threshold number of translated partial transcripts within a set of translated partial transcripts, the set of translated partial transcripts preceding the translated specific partial transcript;
generating a stable value for the translated particular local transcription using the calculated stable value for the word in the translated particular local transcription, wherein the stable value for the translated particular local transcription identifies a stable portion of the particular translated local transcription;
in response to generating the stable value, providing for display on a user device the portion of the translated particular partial transcription.
12. A system, comprising:
one or more memory devices storing instructions; and
one or more data processing apparatus configured to interact with the one or more memory devices and, when executing the instructions, perform operations comprising:
receiving a content request from a client device;
obtaining an audio data stream;
determining a first language in which to record audio in the audio data stream;
generating a partial transcription of the audio at each of a plurality of successive time intervals, wherein each partial transcription is (1) the audio transcription from the start of the audio until a particular time interval and (2) in the first language;
for each partial transcription:
translating the partial transcription into a second language different from the first language;
inputting the translated partial transcript to a model, wherein the model determines whether a portion of the input translated partial transcript is stable, wherein the portion of the input translated partial transcript is stable when the portion of the input translated partial transcript is expected not to change in another translated partial transcript of the recorded audio until a time interval later than the time interval of the input partial transcript;
identifying, by the model and based on the translated partial transcript of the input, a portion of the translated partial transcript as stable; and
in response to identifying the portion of the translated partial transcription as stable, providing the portion of the translated partial transcription for display on a user device and using the identification.
13. The system of claim 12, wherein:
training the model based on translations of transcriptions generated from one or more training audio data files recorded in the first language,
for each training audio data file, the transcription generated from one or more training data audio files comprises a plurality of partial transcriptions of the audio data file, each partial transcription of a training audio data file being generated at a respective one of a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval, and (2) in the first language.
14. The system of any of claims 11 or 12, wherein the model is trained based on a stabilization value that identifies a stabilized portion of a respective translated partial transcription of a respective one of one or more audio data files, and wherein each stabilization value is generated using word locations in the respective translated partial transcription and other translated partial transcriptions of the respective one of the one or more audio data files.
15. The system of claim 12, wherein the one or more data processing apparatus are configured to perform operations further comprising training the model to identify word sequences in local transcriptions that are expected to be stable, wherein the training comprises:
obtaining a training audio data file;
identifying a plurality of training audio data files from the training audio data files having audio recorded in the first language;
for each training audio data file of the plurality of training audio data files:
generating partial transcriptions of the audio in the training audio data file at a plurality of consecutive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval and (2) in the first language; and
generating a chronological list of partial transcriptions ordered from earliest to latest with respect to a start of the audio; and
generating a chronological list of translated partial transcriptions corresponding to the chronological list of partial transcriptions, comprising: for each partial transcription in the chronological list of partial transcriptions, translating the partial transcription into a target language;
for each translated partial transcription, starting from a first translated partial transcription in the chronological list of translated partial transcriptions:
generating a stable value using word positions in the translated local transcription and other translated local transcriptions, the stable value identifying a stable portion of the translated local transcription; and
training the model using the translated local transcription as an input to the model and the stable value as an output of the translation stabilization model.
16. The system of claim 13, wherein generating the stable value comprises:
calculating a probability of correctness for each word in the translated partial transcript, wherein the probability of correctness measures the probability that a word at a particular location of the translated partial transcript occurs at the particular location of one or more other translated partial transcripts that occur after the translated partial transcript in the chronological list of translated partial transcripts; and
generating the stable value for the translated partial transcription using the probability of correctness for each word in the translated partial transcription.
17. The system of any of claims 12 to 16, wherein generating the stable value comprises:
calculating a change frequency metric for each word in the translated local transcription, wherein the change frequency metric measures a number of times a word at a particular location of the translated local transcription changes at the particular location of the translated local transcription, the translated local transcription being arranged after the translated local transcription in the chronological list of translated local transcriptions; and
generating the stable value for the translated local transcription using the measure of frequency of change for each word in the translated local transcription.
18. The computer-implemented method of any of claims 4 to 9, wherein generating the stable value comprises:
calculating a last equality metric for each word in the partial transcription, wherein the last equality metric identifies whether the position of a word in the partial transcription is the same as the position of the word appearing in the last partial transcription in the chronological list of translated partial transcriptions; and
generating the stable value for the translated partial transcription using the last equality measure for each word in the translated partial transcription.
19. A non-transitory computer-readable medium storing instructions that, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
obtaining an audio data stream;
determining a first language in which to record audio in the audio data stream;
generating a partial transcription of the audio at each of a plurality of successive time intervals, wherein each partial transcription is (1) a transcription of the audio from a start of the audio until a particular time interval and (2) in the first language;
for each partial transcription:
translating the partial transcription into a second language different from the first language;
inputting the translated partial transcript to a model, wherein the model determines whether a portion of the input translated partial transcript is stable, wherein the portion of the input translated partial transcript is stable when the portion of the input translated partial transcript is expected not to change in another translated partial transcript of the recorded audio until a time interval later than the time interval of the input partial transcript;
identifying, by the model and based on the translated partial transcript of the input, a portion of the translated partial transcript as stable; and
in response to identifying the portion of the translated partial transcription as stable, providing the portion of the translated partial transcription for display on a user device and using the identification.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US202062970892P | 2020-02-06 | 2020-02-06 | |
US62/970,892 | 2020-02-06 | ||
PCT/US2020/024277 WO2021158247A1 (en) | 2020-02-06 | 2020-03-23 | Stable real-time translations of audio streams |
Publications (1)
Publication Number | Publication Date |
---|---|
CN113498517A true CN113498517A (en) | 2021-10-12 |
Family
ID=70285993
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080004986.3A Pending CN113498517A (en) | 2020-02-06 | 2020-03-23 | Stable real-time translation of audio streams |
Country Status (6)
Country | Link |
---|---|
US (1) | US11972226B2 (en) |
EP (1) | EP3881218A1 (en) |
JP (1) | JP2023514158A (en) |
KR (1) | KR20220127344A (en) |
CN (1) | CN113498517A (en) |
WO (1) | WO2021158247A1 (en) |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080177786A1 (en) * | 2007-01-19 | 2008-07-24 | International Business Machines Corporation | Method for the semi-automatic editing of timed and annotated data |
US20110248914A1 (en) * | 2010-04-11 | 2011-10-13 | Sherr Alan B | System and Method for Virtual Touch Typing |
US20120035907A1 (en) * | 2010-08-05 | 2012-02-09 | Lebeau Michael J | Translating languages |
CN102880601A (en) * | 2007-02-14 | 2013-01-16 | 谷歌公司 | Machine translation feedback |
CN104115141A (en) * | 2011-11-25 | 2014-10-22 | 谷歌公司 | Providing translation assistance in application localization |
US20140358516A1 (en) * | 2011-09-29 | 2014-12-04 | Google Inc. | Real-time, bi-directional translation |
US20170017642A1 (en) * | 2015-07-17 | 2017-01-19 | Speak Easy Language Learning Incorporated | Second language acquisition systems, methods, and devices |
Family Cites Families (39)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2001117920A (en) | 1999-10-15 | 2001-04-27 | Sony Corp | Device and method for translation and recording medium |
CN101099147B (en) * | 2005-11-11 | 2010-05-19 | 松下电器产业株式会社 | Dialogue supporting apparatus |
US8959011B2 (en) * | 2007-03-22 | 2015-02-17 | Abbyy Infopoisk Llc | Indicating and correcting errors in machine translation systems |
US8594992B2 (en) * | 2008-06-09 | 2013-11-26 | National Research Council Of Canada | Method and system for using alignment means in matching translation |
JPWO2011033834A1 (en) | 2009-09-18 | 2013-02-07 | 日本電気株式会社 | Speech translation system, speech translation method, and recording medium |
US9110882B2 (en) * | 2010-05-14 | 2015-08-18 | Amazon Technologies, Inc. | Extracting structured knowledge from unstructured text |
US9710429B1 (en) * | 2010-11-12 | 2017-07-18 | Google Inc. | Providing text resources updated with translation input from multiple users |
JP6334354B2 (en) | 2014-09-30 | 2018-05-30 | 株式会社東芝 | Machine translation apparatus, method and program |
JP2015201215A (en) | 2015-05-25 | 2015-11-12 | 株式会社東芝 | Machine translation device, method, and program |
CN107170453B (en) * | 2017-05-18 | 2020-11-03 | 百度在线网络技术（北京）有限公司 | Cross-language voice transcription method, equipment and readable medium based on artificial intelligence |
CN107045498A (en) | 2017-05-18 | 2017-08-15 | 深圳双猴科技有限公司 | Synchronous translation equipment, method, device and the electronic equipment of a kind of double-sided display |
KR102457894B1 (en) * | 2017-08-22 | 2022-10-25 | 삼성전자주식회사 | Method and device for translating text displayed on display |
US10685648B2 (en) * | 2017-11-08 | 2020-06-16 | International Business Machines Corporation | Sensor fusion model to enhance machine conversational awareness |
US11016729B2 (en) * | 2017-11-08 | 2021-05-25 | International Business Machines Corporation | Sensor fusion service to enhance human computer interactions |
WO2019099373A1 (en) * | 2017-11-16 | 2019-05-23 | LEVO Oil Infusion, Inc. | Apparatus and method for infusing oils |
EP3669269A4 (en) * | 2017-12-01 | 2021-03-24 | Hewlett-Packard Development Company, L.P. | Collaboration devices |
WO2019199862A1 (en) * | 2018-04-09 | 2019-10-17 | Human, Incorporated | Translation system |
US10878202B2 (en) * | 2018-08-03 | 2020-12-29 | International Business Machines Corporation | Natural language processing contextual translation |
US20200051582A1 (en) * | 2018-08-08 | 2020-02-13 | Comcast Cable Communications, Llc | Generating and/or Displaying Synchronized Captions |
US11315569B1 (en) * | 2019-02-07 | 2022-04-26 | Memoria, Inc. | Transcription and analysis of meeting recordings |
CN113678200A (en) * | 2019-02-21 | 2021-11-19 | 谷歌有限责任公司 | End-to-end voice conversion |
US11202131B2 (en) * | 2019-03-10 | 2021-12-14 | Vidubly Ltd | Maintaining original volume changes of a character in revoiced media stream |
EP3948892A4 (en) * | 2019-03-29 | 2022-12-28 | University Health Network | System and method for remote patient monitoring |
JP7295284B2 (en) * | 2019-07-01 | 2023-06-20 | グーグル エルエルシー | Adaptive diarization model and user interface |
US20220414349A1 (en) * | 2019-07-22 | 2022-12-29 | wordly, Inc. | Systems, methods, and apparatus for determining an official transcription and speaker language from a plurality of transcripts of text in different languages |
US20220405492A1 (en) * | 2019-07-22 | 2022-12-22 | wordly, Inc. | Systems, methods, and apparatus for switching between and displaying translated text and transcribed text in the original spoken language |
US20220286310A1 (en) * | 2019-07-22 | 2022-09-08 | wordly, Inc. | Systems, methods, and apparatus for notifying a transcribing and translating system of switching between spoken languages |
US20230021300A9 (en) * | 2019-08-13 | 2023-01-19 | wordly, Inc. | System and method using cloud structures in real time speech and translation involving multiple languages, context setting, and transcripting features |
US20220277150A1 (en) * | 2019-07-23 | 2022-09-01 | Telefonaktiebolaget Lm Ericsson (Publ) | User Equipment, Network Node and Methods in a Communications Network |
US20210034662A1 (en) * | 2019-07-31 | 2021-02-04 | Rovi Guides, Inc. | Systems and methods for managing voice queries using pronunciation information |
WO2021050080A1 (en) * | 2019-09-13 | 2021-03-18 | Hewlett-Packard Development Company, L.P. | Presentation transcripts |
US11087163B2 (en) * | 2019-11-01 | 2021-08-10 | Vannevar Labs, Inc. | Neural network-based optical character recognition |
US20210158813A1 (en) * | 2019-11-27 | 2021-05-27 | Amazon Technologies, Inc. | Enrichment of customer contact data |
US11301644B2 (en) * | 2019-12-03 | 2022-04-12 | Trint Limited | Generating and editing media |
US11545134B1 (en) * | 2019-12-10 | 2023-01-03 | Amazon Technologies, Inc. | Multilingual speech translation with adaptive speech synthesis and adaptive physiognomy |
US20210183400A1 (en) * | 2019-12-11 | 2021-06-17 | Mayo Foundation For Medical Education And Research | Auditory stylus system |
US11669860B2 (en) * | 2019-12-11 | 2023-06-06 | Google Llc | Methods, systems, and media for automated compliance determination of content items |
US20210224319A1 (en) * | 2019-12-28 | 2021-07-22 | Ben Avi Ingel | Artificially generating audio data from textual information and rhythm information |
US11514948B1 (en) * | 2020-01-09 | 2022-11-29 | Amazon Technologies, Inc. | Model-based dubbing to translate spoken audio in a video |
-
2020
- 2020-03-23 KR KR1020227030216A patent/KR20220127344A/en unknown
- 2020-03-23 JP JP2022548003A patent/JP2023514158A/en active Pending
- 2020-03-23 CN CN202080004986.3A patent/CN113498517A/en active Pending
- 2020-03-23 EP EP20719060.4A patent/EP3881218A1/en active Pending
- 2020-03-23 WO PCT/US2020/024277 patent/WO2021158247A1/en unknown
- 2020-03-23 US US17/269,800 patent/US11972226B2/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080177786A1 (en) * | 2007-01-19 | 2008-07-24 | International Business Machines Corporation | Method for the semi-automatic editing of timed and annotated data |
CN102880601A (en) * | 2007-02-14 | 2013-01-16 | 谷歌公司 | Machine translation feedback |
US20110248914A1 (en) * | 2010-04-11 | 2011-10-13 | Sherr Alan B | System and Method for Virtual Touch Typing |
US20120035907A1 (en) * | 2010-08-05 | 2012-02-09 | Lebeau Michael J | Translating languages |
US20140358516A1 (en) * | 2011-09-29 | 2014-12-04 | Google Inc. | Real-time, bi-directional translation |
CN104115141A (en) * | 2011-11-25 | 2014-10-22 | 谷歌公司 | Providing translation assistance in application localization |
US20170017642A1 (en) * | 2015-07-17 | 2017-01-19 | Speak Easy Language Learning Incorporated | Second language acquisition systems, methods, and devices |
Also Published As
Publication number | Publication date |
---|---|
US20220121827A1 (en) | 2022-04-21 |
KR20220127344A (en) | 2022-09-19 |
JP2023514158A (en) | 2023-04-05 |
WO2021158247A1 (en) | 2021-08-12 |
EP3881218A1 (en) | 2021-09-22 |
US11972226B2 (en) | 2024-04-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10453454B2 (en) | Dialog system with self-learning natural language understanding | |
US11790899B2 (en) | Determining state of automated assistant dialog | |
US9818409B2 (en) | Context-dependent modeling of phonemes | |
US11797772B2 (en) | Word lattice augmentation for automatic speech recognition | |
US11545157B2 (en) | Speaker diartzation using an end-to-end model | |
US8849668B2 (en) | Speech recognition apparatus and method | |
US20110213610A1 (en) | Processor Implemented Systems and Methods for Measuring Syntactic Complexity on Spontaneous Non-Native Speech Data by Using Structural Event Detection | |
US11605377B2 (en) | Dialog device, dialog method, and dialog computer program | |
CN111159364B (en) | Dialogue system, dialogue device, dialogue method, and storage medium | |
WO2020172329A1 (en) | Learning to extract entities from conversations with neural networks | |
JP6370962B1 (en) | Generating device, generating method, and generating program | |
US20230419963A1 (en) | Selectively providing enhanced clarification prompts in automated assistant interactions | |
CN116363250A (en) | Image generation method and system | |
US11972226B2 (en) | Stable real-time translations of audio streams | |
US20220122586A1 (en) | Fast Emit Low-latency Streaming ASR with Sequence-level Emission Regularization | |
US11804225B1 (en) | Dialog management system | |
US11935533B1 (en) | Content-related actions based on context | |
US20240112673A1 (en) | Identifying and correcting automatic speech recognition (asr) misrecognitions in a decentralized manner | |
US20230343332A1 (en) | Joint Segmenting and Automatic Speech Recognition | |
US20240135934A1 (en) | Evaluation-based speaker change detection evaluation metrics | |
JP4084816B2 (en) | Dependent structure information processing apparatus, program thereof, and recording medium | |
CN117121098A (en) | Transient learning of machine learning models |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |