US8254681B1 - Display of document image optimized for reading - Google Patents
Display of document image optimized for reading Download PDFInfo
- Publication number
- US8254681B1 US8254681B1 US12/491,152 US49115209A US8254681B1 US 8254681 B1 US8254681 B1 US 8254681B1 US 49115209 A US49115209 A US 49115209A US 8254681 B1 US8254681 B1 US 8254681B1
- Authority
- US
- United States
- Prior art keywords
- document
- page
- image
- segment
- computer
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000012015 optical character recognition Methods 0.000 claims description 71
- 238000012545 processing Methods 0.000 claims description 47
- 238000000034 method Methods 0.000 claims description 40
- 238000004422 calculation algorithm Methods 0.000 claims description 23
- 238000004590 computer program Methods 0.000 claims description 15
- 238000007373 indentation Methods 0.000 claims description 4
- 238000010801 machine learning Methods 0.000 claims description 3
- 230000000007 visual effect Effects 0.000 claims 3
- 238000009877 rendering Methods 0.000 abstract description 2
- 230000015654 memory Effects 0.000 description 10
- 230000008569 process Effects 0.000 description 9
- 238000010586 diagram Methods 0.000 description 8
- 238000013441 quality evaluation Methods 0.000 description 7
- 238000001514 detection method Methods 0.000 description 6
- 230000008901 benefit Effects 0.000 description 4
- 239000003086 colorant Substances 0.000 description 4
- 230000009466 transformation Effects 0.000 description 3
- 241000272194 Ciconiiformes Species 0.000 description 2
- 238000004458 analytical method Methods 0.000 description 2
- 238000013459 approach Methods 0.000 description 2
- 230000005540 biological transmission Effects 0.000 description 2
- 230000006870 function Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 238000012546 transfer Methods 0.000 description 2
- XOJVVFBFDXDTEG-UHFFFAOYSA-N Norphytane Natural products CC(C)CCCC(C)CCCC(C)CCCC(C)C XOJVVFBFDXDTEG-UHFFFAOYSA-N 0.000 description 1
- 108010001267 Protein Subunits Proteins 0.000 description 1
- 230000032683 aging Effects 0.000 description 1
- 230000001174 ascending effect Effects 0.000 description 1
- 230000009286 beneficial effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 150000001875 compounds Chemical class 0.000 description 1
- 238000010276 construction Methods 0.000 description 1
- 238000002845 discoloration Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000005516 engineering process Methods 0.000 description 1
- 239000000284 extract Substances 0.000 description 1
- 238000003384 imaging method Methods 0.000 description 1
- 230000001788 irregular Effects 0.000 description 1
- 238000007477 logistic regression Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000007781 pre-processing Methods 0.000 description 1
- 238000007619 statistical method Methods 0.000 description 1
- 239000000126 substance Substances 0.000 description 1
- 238000006467 substitution reaction Methods 0.000 description 1
- 230000001502 supplementing effect Effects 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000000844 transformation Methods 0.000 description 1
- XLYOFNOQVPJJNP-UHFFFAOYSA-N water Substances O XLYOFNOQVPJJNP-UHFFFAOYSA-N 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
- G06V30/19—Recognition using electronic means
- G06V30/191—Design or setup of recognition systems or techniques; Extraction of features in feature space; Clustering techniques; Blind source separation
- G06V30/19173—Classification techniques
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/40—Document-oriented image-based pattern recognition
- G06V30/41—Analysis of document content
- G06V30/412—Layout analysis of documents structured with printed lines or input boxes, e.g. business forms or tables
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/40—Document-oriented image-based pattern recognition
- G06V30/41—Analysis of document content
- G06V30/413—Classification of content, e.g. text, photographs or tables
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V30/00—Character recognition; Recognising digital ink; Document-oriented image-based pattern recognition
- G06V30/10—Character recognition
Definitions
- the disclosure generally relates to displaying digital documents, and in particular to processing digital images of printed documents and reformatting them for display on client devices.
- text can be reformatted to be displayed clearly (e.g., using a locally available font) and flexibly (e.g., using a layout adjusted to the computer screen), thereby providing a better reading experience.
- the above advantages are especially beneficial to those users who prefer to read documents on their mobile devices such as mobile phones and music players, which tend to have lower network transfer speeds, less memory, and smaller screens than a typical desktop or laptop computer system, and which would therefore only with difficulty be able to display a digital image of a publication.
- a method, computer, and computer program product that process an image of a document and identify semantically meaningful segments of the image, such as tables of contents, page numbers, footnotes, and the like. These segments form a model of the document image, which may then be rendered differently for different client devices.
- the rendering may be based on a display parameter provided by a client device, such as a display resolution of the client device, or a requested display format.
- a computer-implemented method applies an optical character recognition algorithm to an image of a document to obtain a plurality of document segments, each document segment corresponding to a region of the image of the document and having associated recognized text.
- the method further comprises identifying a semantic component of the document comprised of one or more of the segments, and creating a document representation comprising the document segments and identified semantic components.
- the method further comprises storing the document segments in association with an identifier of the image of the document.
- FIG. 1 is a high-level block diagram of a computing environment according to one embodiment.
- FIG. 2 is a high-level block diagram illustrating an example of a computer for use in the computing environment shown in FIG. 1 according to one embodiment
- FIG. 3 is a high-level block diagram illustrating modules within a document processing system according to one embodiment.
- FIG. 4 is a flow diagram that illustrates the creation of a document representation according to one embodiment.
- FIG. 5 is a flow diagram that illustrates providing a client with a formatted representation of a document.
- the computing environment described herein creates, from a printed document, a digital representation of the document that captures document semantics. It further provides to different client devices, based on the digital representation, a formatted version of the document that is suitable for display on those devices.
- FIG. 1 is a high-level block diagram that illustrates a computing environment 100 for converting printed documents into OCR'ed text and processing the text for enhanced readability on a variety of client devices, according to one embodiment.
- the computing environment 100 includes a scanner 110 , an OCR module 120 , a document processing system 130 , a formatting module 140 , and a client device 150 . Only one of each entity is illustrated in order to simplify and clarify the present description. There can be other entities in the computing environment 100 as well.
- the scanner 110 is a hardware device configured to optically scan printed documents (e.g., books, magazines, newspapers, journals, catalogues, newsletters, etc.) and convert the printed documents to digital source document images.
- the source document images output by the scanner 110 are provided as input to the OCR module 120 and to the document processing system 130 .
- the OCR module 120 converts source document images—e.g. those produced by the scanner 110 —into corresponding textual representations (hereinafter called OCR'ed text), which are then provided as input to the document processing system 130 .
- the textual representations can be embodied in various data structures in different embodiments, such as flat text, or as a tree of document elements such as pages and paragraphs.
- the OCR module 120 generates and outputs positional information describing the location of the OCR'ed text in the source document images. For example, for each segment of text (e.g., paragraph, column, title), the OCR module 120 provides a set of numbers describing a bounding box that uniquely specifies a segment of the source document image containing the text segment.
- the numbers describing the bounding box include two-dimensional coordinates of the upper-left corner of a rectangle on an x-axis and a y-axis, and a width and a height of the rectangle. Therefore, the bounding box uniquely identifies a region of the source document image in the original document for the corresponding text segment.
- the bounding box can specify image segments with non-rectangular shapes.
- the OCR module 120 may also generate confidence levels that measure quality of the OCR'ed text.
- the OCR module 120 may generate other information such as format information (e.g., font, font size, style).
- format information e.g., font, font size, style.
- the OCR module 120 can be implemented by using software such as ABBYY FineReader OCR, ADOBE Acrobat Capture, and MICROSOFT Office Document Imaging.
- the OCR module 120 converts a source document image to text before modules of the document processing system 130 process the document image.
- the actions of the OCR module 120 and the modules of the document processing system 130 can overlap in time, performed either interleaved or in parallel.
- the document processing system 130 can perform some operations, such as initial distinguishing of text and picture data, before the OCR module 120 operates on the identified textual data portions of the document, and then the document processing system 130 can perform the remainder of its operations that rely on the presence of the OCR'ed text.
- the document processing system 130 is a computer system configured to create a digital document representation that captures the document semantics not described by the raw source document images. To create the document representations, the document processing system 130 performs image and text analysis operations on the source document images to identify semantically relevant portions of the document. In one embodiment, such operations include distinguishing image and textual portions, segmenting the text into units, identifying semantically meaningful portions of a page and of the document as a whole, and determining which portions of the document have inaccurate OCR text data. The document processing system 130 produces a document representation as output. An example structure and operation of the document processing system 130 is described in further detail below in relation to FIGS. 3 and 4 .
- the formatting module 140 provides a version of the document to a client device 150 , appropriately formatted based at least in part on display characteristics of the client device.
- providing formatted versions of the document comprises traversing a data structure describing the document representation, determining which portions to display as text and which as image data, determining whether to display the document in scrolling or paginated form, supplementing the document data with additional information, such as internal links, and describing the document in a format useful for the requesting client, such as HTML, ePub, XML, or PDF, and the like.
- the client device 150 is a computer system configured to display the formatted document for viewing by a user.
- the client device 150 can be, for example, a desktop or laptop personal computer, a personal digital assistant (PDA), a mobile phone, a digital television system, and the like.
- Different client devices 150 can have different display characteristics, such as different screen resolutions and varying abilities to display formatted text and images.
- the client device 150 includes an application for reading digital documents, such as a web browser (e.g., Microsoft Internet ExplorerTM, Mozilla FirefoxTM, Google ChromeTM, or Apple SafariTM).
- a user can interact with the client device 150 to retrieve a formatted document from the formatting module 140 and display it for reading.
- the scanner 110 is communicatively connected with the OCR module 120 and the document processing system 130 ; the document processing system 130 is communicatively connected with the formatting module 140 ; and the formatting module 140 is in turn communicatively connected with the client device 150 .
- the connections may be through a wired or wireless network, or they may represent interprocess communications within a single computing device. Examples of the network include the Internet, an intranet, a WiFi network, a WiMAX network, a mobile telephone network, or a combination thereof.
- FIG. 2 is a high-level block diagram illustrating an example computer 200 .
- the computer 200 includes at least one processor 202 coupled to a chipset 204 .
- the chipset 204 includes a memory controller hub 220 and an input/output (I/O) controller hub 222 .
- a memory 206 and a graphics adapter 212 are coupled to the memory controller hub 220 , and a display 218 is coupled to the graphics adapter 212 .
- a storage device 208 , keyboard 210 , pointing device 214 , and network adapter 216 are coupled to the I/O controller hub 222 .
- Other embodiments of the computer 200 have different architectures.
- the storage device 208 is a computer-readable storage medium such as a hard drive, compact disk read-only memory (CD-ROM), DVD, or a solid-state memory device.
- the memory 206 holds instructions and data used by the processor 202 .
- the pointing device 214 is a mouse, track ball, or other type of pointing device, and is used in combination with the keyboard 210 to input data into the computer system 200 .
- the graphics adapter 212 displays images and other information on the display 218 .
- the network adapter 216 couples the computer system 200 to one or more computer networks.
- the computer 200 is adapted to execute computer program modules for providing functionality described herein.
- module refers to computer program logic used to provide the specified functionality.
- a module can be implemented in hardware, firmware, and/or software.
- program modules are stored on the storage device 208 , loaded into the memory 206 , and executed by the processor 202 .
- the types of computers 200 used by the entities of FIG. 1 can vary depending upon the embodiment and the processing power required by the entity.
- the document processing system 130 might comprise multiple blade servers working together to provide the functionality described herein.
- the client device 150 might comprise a mobile telephone with limited processing power.
- the computers 200 can lack some of the components described above, such as keyboards 210 , graphics adapters 212 , and displays 218 .
- FIG. 3 is a high-level block diagram illustrating a detailed view of modules within the document processing system 130 according to one embodiment. Some embodiments of the document processing system 130 have different and/or other modules than the ones described herein. Similarly, the functionality can be distributed among the modules in accordance with other embodiments in a different manner than is described here. As illustrated, the document processing system 130 includes a component identification module 310 , a text quality evaluation module 320 , and a data store 350 .
- the data store 350 stores data used by the document processing system 130 to provide a customized formatted version of a document for viewing on a client device 150 .
- Examples of such data include the OCR'ed text and associated information (e.g., text quality scores, bounding boxes, source document images output by the scanner 110 , and formats), data relating to the semantic document components identified by the component identification module 310 , and the like.
- the data store 350 may be a relational database or any other type of database that stores the data, such as a flat file.
- the data store 350 stores a document representation 355 using a data structure such as a tree, in which semantic units of the document are represented in a hierarchical fashion: e.g., pages contain blocks (sets of related paragraphs, such as in a table), which in turn contain paragraphs, which in turn contain words, which in turn contain characters, and the like.
- a data structure such as a tree, in which semantic units of the document are represented in a hierarchical fashion: e.g., pages contain blocks (sets of related paragraphs, such as in a table), which in turn contain paragraphs, which in turn contain words, which in turn contain characters, and the like.
- a tree may be generated entirely by the document processing system 130 , or an initial tree produced by the OCR module 120 may be supplemented with additional information derived by the document processing system.
- the component identification module 310 performs a number of operations to identify and isolate various semantically meaningful components of the document, such as page numbers, tables of contents, headers, footnotes, and the like.
- the operations include distinguishing image and text portions of the document, segmenting the text into meaningful units such as paragraphs, words, and the like, and identifying components of the document as a whole, such as tables of contents and indexes, and identifying components of individual pages, such as page numbers, footnotes, headers, and the like. These operations are described below in more detail with respect to FIG. 4 .
- the text quality evaluation module 320 generates text quality scores for text segments of the OCR'ed text based on information provided by the OCR module 120 .
- the text quality score is a numeric value that measures an overall quality (accuracy) of the OCR'ed text segment. In one embodiment, the text quality score ranges between 0 and 100, with 0 indicating low text quality and 100 indicating high text quality.
- the text quality evaluation module 320 generates a set of language-conditional character probabilities for each character in the text segment.
- the text quality evaluation module 320 either generates, or has access to, a language model for the language of the document for which the text quality scores are being generated.
- the language model can specify probabilities that particular characters (or, in some embodiments, words) will appear in sequence in the given language, based on statistical analysis of a large number (e.g., tens of thousands, or millions) of documents in that language.
- Each language-conditional character probability thus indicates how well the character and a set of characters that precede the character in the text segment match a language model for the language of the document.
- the set of characters that precede the character is typically limited to a small number (e.g. 4-8 characters) such that characters in compound words and other joint words are given strong probability values based on the model.
- the language-conditional character probabilities may be combined with other indicators of text quality (e.g., the confidence levels provided by the OCR module 120 ) to generate a text quality score for each character in the text segment. The calculation of such a value allows for the location-specific analysis of text quality.
- the text quality evaluation module 320 combines the set of text quality scores associated with the characters in a text segment (e.g., a paragraph) of the OCR'ed text to generate a text quality score that characterizes the quality of the text segment.
- the text quality evaluation module 320 may average the text quality scores associated with the characters in the text segment to generate the text quality score.
- the text quality score for a given text segment can be one factor in determining whether to display the text segment as text, or as a corresponding portion of the source document image.
- FIG. 4 is a flowchart illustrating a method 400 for the document processing system 130 to create a representation of a printed document from which formatted representations suitable for viewing on a variety of client devices can be further created, according to one embodiment. It is appreciated that other embodiments can perform the steps of the method 400 in a different order. Moreover, other embodiments can include different and/or additional steps than the ones described herein. The document processing system 130 can perform multiple instances of the steps of the method 400 in parallel.
- the document processing system 130 receives 410 the source document image from the scanner 110 .
- the document processing system 130 also receives the OCR'ed text and its associated information—such as for each unit of the text, the coordinates of its bounding box, the confidence level of recognition, and format information such as font, style, etc.—from the OCR module 120 . It then proceeds to perform a number of operations to identify and isolate various semantically meaningful components of the document, as now described in more detail.
- One operation is to distinguish 420 picture and text portions of the source document image.
- the portions are distinguished based on image morphology and color values. For example, text tends to be monochromatic (e.g., all black text), and in a Western language tends to be arranged in horizontal rows, with blank regions between the rows.
- a projection profile can be used to examine the frequency of image data of the source document image at various values along a vertical axis; if the image data tend to be clustered at regular vertical intervals, with gaps in between, and if the image data tends to be monochromatic, then it can be estimated with high confidence that the portion represents text.
- the colors and shape of the image data can be examined, with a large number of distinct colors indicating a photo, and image data with irregular shapes not clustered into text-like regular intervals indicating line art.
- Each of these identified portions is then marked as representing its particular type (text or picture) and associated with its location in the document, e.g. as represented by a bounding box with coordinates indicating a page-independent distance from the top of the document.
- Another operation is to perform 430 OCR, e.g. via the OCR module 120 of FIG. 1 . If this operation takes place after the text and picture regions are distinguished 420 , then the OCR module 120 may be configured to analyze only the portions of the document that represent text, thus reducing OCR processing time. In one embodiment, preprocessing operations such as color remapping are performed prior to performing the OCR itself, and are tailored based on whether the region was found to represent text or picture data. For example, if the region was found to represent text, then the background is re-colored to a uniform shade (e.g., white), thus minimizing marks of age such as page discoloration, and the text is sharpened to make OCR more effective. If the region was found to represent picture data, then the colors are remapped to respect the content of the picture while removing the effect of aging on the printed document, for example.
- a uniform shade e.g., white
- the OCR module 120 then converts the document image (either as a whole, or only the regions found to represent text) to text data, representing the OCR'ed text with a data structure made available to the document processing system 130 .
- the OCR engine additionally structures the text into units and sub-units, such as pages, paragraphs, words, and characters, which can be represented hierarchically, e.g. with a tree data structure.
- the data structure can additionally track data associated with the various units of the text, such as the text size or style of a particular word or paragraph.
- the document processing system 130 identifies 440 semantically relevant portions or features of the document, referred to as semantic components, comprised of one or more of the segments. Such semantic components may occur only once for a given document, such as the title page or table of contents, or may occur multiple times on different pages, such as page numbers and page headers.
- semantic components may occur only once for a given document, such as the title page or table of contents, or may occur multiple times on different pages, such as page numbers and page headers.
- Page type detection In which a page identification submodule of the component identification module 310 identifies the type of a page as a whole, such as a copyright page, table of contents, or index.
- Page type detection is accomplished by applying a set of pre-constructed classifiers to a page and determining levels of correspondence between the classifiers and the page, with each classifier producing a binary “yes/no” result for each type of page (e.g., representing whether a given page is a title page or not).
- the document processing system 130 can initially construct the classifiers by using massively parallel logistic regression algorithms to perform machine learning, training each classifier on an input set of documents (for example, 100,000 books) for which the corresponding page or pages have been identified; for example, a classifier for recognizing title pages is trained using documents for which the title page is known.
- the page identification submodule evaluates a page of interest, such as a page near the beginning or the end of the document not expected to represent a typical text page, according to the classifier to determine a probability that the page is of the classifier's type, e.g. a title page. If none of the defined classifiers matches a given page with sufficient probability, then the page identification submodule can queue the page for classification by a human reviewer, for example.
- the component identification module 310 additionally comprises a table of contents identification submodule, which determines whether a given page is a table of contents page.
- a table of contents page includes a set of entries referred to as “line strings” having labels, section numbers, and page numbers, each being a substring of the line string. For example, for the line string “IV. Caring for South African Penguins . . . 24”, “Caring for South African Penguins” is the label, “IV” is the section number, and “24” is the page number. If the labels of the various line strings in a page appear as titles in the main portion of the document text, then the page is considered to represent a table of contents page.
- the table of contents identification submodule extracts a label from each line string on the page and searches for the extracted label within the main textual pages of the document, with each “hit page” (i.e., page where the label occurs) being assigned a score representing the likelihood of the hit page being the “linked title page” (i.e., the target page to which the label points).
- the table of contents identification submodule bases the score on various factors such as text font sizes, page number matching, term frequencies, the characteristics of the hit pages, and the like.
- the table of contents identification submodule selects the best page using, for example, a generalized dynamic programming algorithm. To determine whether the page is actually a table of contents page, the scores of all the linked title pages of the page are averaged, and the average compared to some threshold score; if the score is above the threshold, then the page is considered to be a table of contents page. In one embodiment, to improve the efficiency of this technique, the table of contents identification submodule indexes each line of the textual pages of the document prior to performing the technique in order to increase lookup speeds.
- the component identification module 310 further comprises a section identification submodule, which identifies the beginnings of sections, such as chapters of a book, involves use of data from an identified table of contents page. More specifically, the section identification submodule considers the linked title page for each line string to represent the section beginning for that line string. When a section beginning is located in the text, additional operations may be performed, such as inserting an intra-document link in the table of contents that points to the located label.
- the component identification module 310 further comprises a cover identification submodule, which identifies the front or back cover of the document.
- the document processing system 130 makes the initial assumption—for documents written in left-to-right Western languages, for example—that the first page represents the front cover, and the last page the back cover. This assumption can be verified by performing image processing to look for confirmatory signs, such as the presence of images and multiple colors, and the absence of large amounts of text.
- the component identification module 310 further comprises a first reading page submodule, which identifies a first page to display when presenting the formatted document for reading by a user.
- This page represents the first main page of text in which a user would likely be interested, such as the first page after the table of contents page(s) and having at least some threshold amount of text.
- the component identification module 310 further comprises a number of submodules performing identification actions for every page of the document.
- One such submodule is a page number detection submodule, which identifies the region of the page containing page numbers.
- One algorithm used by the page number detection submodule is based on the assumption that page numbers are consistently located across the pages of a book. The algorithm begins with a prior model of the likely location of page numbers on a page. The model is represented as a 2D function defined over the unit square (x, y in [0, 1]). The function's values range from 0 to 1, where higher values indicate positions more likely to contain page numbers.
- the algorithm can use a different prior model for left-hand and right-hand pages. In one embodiment, the model assigns high weights along the top and bottom edges of a page—the areas where page numbers are most typically located—and moderate weights along the outer edge of each page.
- the algorithm then builds a specific model for the book.
- the first step is to determine a transformation for each page that maps its text region into the same normalized coordinate system used by the spatial model. This is done by first computing the median text bounding rectangle across all pages. This rectangle represents the bounds of a full page of text with high accuracy. Each page's text region is then mapped onto this median rectangle. A full (or essentially full) page of text is translated and scaled to fill the median bounds. Partial pages (such as a few lines at the top of the last page of a chapter, or a half-page of text at the bottom of the first page of a chapter) are detected and handled differently: they are not vertically scaled, but are instead translated to align with the top or bottom of the bounding rectangle, as appropriate.
- the algorithm looks at the OCR words for each page. If a word parses as a valid page number (i.e., representing a typical page number value, such as an integer, a roman numeral, and the like), the center of its bounding box (in normalized coordinates) is used to sample a value from the prior model. This value is then added to the corresponding location in a document-specific model. Once all pages have been processed, the new model is scaled to have a maximum value of 1.
- the algorithm Given a spatial model for the document, the algorithm now makes a second pass through the OCR data. It looks for substrings of the page text that both parse as page numbers and are spatially likely to be page numbers. During this pass, the algorithm performs transformations on the raw OCR text to compensate for typical OCR errors. For example, it can consider removing whitespace, stripping prefix and suffix characters from each word, and performing various likely character substitutions (such as ‘I’ to ‘1’, etc.). The base confidence in a candidate is based on the value of the spatial model, but each transformation has an associated cost factor that reduces the confidence. The result is a list of page number candidates and accompanying confidence values for each page. In one embodiment, the highest-scoring candidate is chosen as representing the page number, presuming that its score is above some minimum threshold. In one embodiment, alleged page numbers are tested by determining whether they are in a numerical sequence with the page numbers of the surrounding pages.
- the component identification module 310 further comprises a submodule which detects headers, footers, and footnotes.
- One geometry-based algorithm used by the submodule for detecting page headers initially normalizes the page locations in a document, so that the pages have the same margins, for example, and thus the data are located consistently across pages.
- the algorithm begins with known possible configurations for the headers, such as paragraphs at locations near the top of the page, containing 1, 2, or 3 parts, with perhaps one or two lines of text. Then, by examining the pages of the document, the algorithm tracks how many times the various possible configurations are matched, and identifies the configuration that most frequently is matched. Each possible header in the document is then compared to the most frequently matched configuration, with those that are sufficiently close being considered to constitute actual headers.
- footers are handled by the same algorithm, with the known possible configurations differing to reflect the different placement of footers compared to headers.
- detection of footnotes incorporates a similar approach. However, since it is more difficult to detect a footnote region using geometry/location information alone, detection of footnotes additionally examines the font size (a small font being expected) and presence of digits at the beginning of a line to verify that a given candidate region is in fact a footnote, as compared to, e.g., a generic footer.
- the component identification module 310 further comprises a submodule that identifies passages of poetry using geometric techniques. More specifically, a series of sequential lines, all aligned vertically, and having a substantial amount of indentation at the beginning of each line, is considered to indicate a poetic passage.
- the component identification module 310 further comprises a submodule that detects a table where there is a group of small paragraphs of words that can be grouped into columns and lines using recursive subdivisions of the horizontal and vertical projection profile.
- the component identification module 310 further comprises a submodule that determines whether to merge a paragraph located at the end of one page with another paragraph located at the beginning of the next page, as representing a single paragraph broken across pages.
- the algorithm for doing so is geometry-based, examining the indent and punctuation characteristics of the beginning of the second paragraph. For example, if the second paragraph lacks indentation and does not begin with a capital letter, then it is not considered to represent its own paragraph, but rather to be a continuation of the prior paragraph. Thus, the two paragraphs are merged into one within the document representation data structure of the data store 350 .
- the document processing system 130 can also identify 450 OCR recognition errors for the textual portions.
- the document processing system 130 calculates a text quality score for each OCR'ed text segment (e.g., through use of the text quality evaluation module 320 as noted above). These scores may later be used to determine whether to include within the formatted document the OCR text, or a corresponding portion of the document image.
- the document processing system 130 then stores 460 a representation 355 of the document in association with an identifier of the image of the document (e.g., a unique file name of the image).
- the representation 355 is based on a tree data structure initially produced by the OCR engine 315 as part of the OCR process.
- the data structure stored in the data store 350 is altered from that initially produced by the OCR engine 315 due to changes by the various operations of FIG. 4 .
- paragraph continuation determination operations may cause originally distinct paragraphs to be joined into a single paragraph within the data structure.
- the information stored for the various text components of the document may also be supplemented with additional information derived by the document processing system 130 , either as part of the process of identifying semantically meaningful components of the document, or as part of the later process of providing a version of the document formatted for a given client device 150 .
- additional information derived by the document processing system 130 either as part of the process of identifying semantically meaningful components of the document, or as part of the later process of providing a version of the document formatted for a given client device 150 .
- a unit for a page within the tree can be marked as being a table of contents page, or a paragraph can be marked as representing a footnote region.
- the formatting module 140 can then use the document representation to provide a client device 150 with a particular formatted representation suited to the device, as depicted in FIG. 5 , and now described in more detail.
- a request is received 510 from the client device 150 to read a document, the request specifying various document display parameters describing how the document should look, in addition to specifying the identity of the document itself.
- the user can request the document via a conventional web browser running on the client device 150 , e.g. by clicking on a link to the document.
- the identity of the document and the document display parameters can be encoded in a uniform resource locator (URL) associated with the link.
- URL uniform resource locator
- One document display parameter that can be specified is the characteristics of the display of the client device 150 , such as the dimensions of the screen in pixels.
- Another document display parameter is the desired data format of the formatted document, e.g. HTML, XML, ePub, or PDF.
- Another display parameter is whether the formatted document should be one single unit without page breaks, or whether it should be paginated with page sizes corresponding to the display of the client device 150 .
- the document representation data structure is traversed 520 .
- the tree is traversed recursively, with display characteristics for the more granular elements being determined first, and then aggregated into display characteristics for higher level elements. For example, the display characteristics for the leaf nodes of the tree, such as individual characters, are determined first, and then those characteristics aggregated for the words containing the characters, and the characteristics of the words in turn being aggregated into characteristics for the paragraphs containing the words.
- statistics are tracked 520 A while the document representation 335 is being traversed, if such statistics were not already calculated during the creation of the document representation or during a prior creation of a corresponding formatted document.
- Such statistics could include, for example, character counts for characters, words, paragraphs, and the like.
- the formatting module 140 applies 520 B formatting rules to decide, based on rules specified for different classes of display characteristics (e.g. screen size, as specified for example in a URL, as noted above) and/or desired format types (e.g. HTML), whether and/or how to display a given text unit.
- a rule for displaying a footnote element on a small mobile device could specify omitting the footnote entirely to aid in readability
- a rule for formatting a footnote on a desktop computer with a large display could specify displaying the footnote in small text, set off from the main text within a left-justified box.
- a rule for displaying a page number could specify omitting the page number entirely when displaying a continuous (non-paginated) view, and displaying it when paginating the document to fit the screen size of the client device.
- the document processing system 130 determines 520 C whether to display a particular unit of text as text or as an image. For example, in one embodiment if the text quality score for a unit such as a paragraph equals or exceeds some threshold indicating sufficient quality, then that unit is output as the OCR'ed text. If the value falls short of the threshold, then a portion of the document image corresponding to the location of the text unit (e.g., the bounding box specified by the OCR engine 315 ) is displayed, instead. This approach ensures that even units of the document for which the OCR may not have produced accurate results are still displayed so as to be legible. In another embodiment, the size of the unit is taken into consideration.
- a paragraph unit covering a very small area for which the text quality score indicates low quality can be entirely discarded, on the assumption that it represents, for example, a mere stain on the page rather than actual text.
- the decision of whether to output a unit as text or image data depends in part on the type and/or display characteristics of the client device 150 .
- the formatting rules for a handheld device could be biased towards providing text in the interests of reducing network transfer times and memory requirements, whereas the formatting rules for a desktop computer with a broadband connection could contain no such bias.
- both text and image versions are provided to the client 150 —either together during an initial transmission, or separately, with the image version being provided only on demand—thus allowing the user to read both versions, as needed. For example, a mouse click on a text unit having a text quality score indicating low OCR quality could lead to the fetching and display of a portion of the document image associated with the text unit.
- each unit of the text is output 520 D in the format requested by the client device 150 , such as HTML, PDF, ePub, XML, and the like.
- the requested format is HTML
- characters and words are aggregated into paragraphs and the resulting paragraphs are displayed via the ⁇ p> tag
- paragraphs are aggregated into blocks and displayed using the ⁇ div> tag
- tables are displayed using the ⁇ table> tag
- images are displayed using the ⁇ img> tag.
- Styling details are specified using cascading style sheets (CSS).
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of computer-readable storage medium suitable for storing electronic instructions, and each coupled to a computer system bus.
- the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
- any reference to “one embodiment” or “an embodiment” means that a particular element, feature, structure, or characteristic described in connection with the embodiment is included in at least one embodiment.
- the appearances of the phrase “in one embodiment” in various places in the specification are not necessarily all referring to the same embodiment.
- Coupled and “connected” along with their derivatives. It should be understood that these terms are not intended as synonyms for each other. For example, some embodiments may be described using the term “connected” to indicate that two or more elements are in direct physical or electrical contact with each other. In another example, some embodiments may be described using the term “coupled” to indicate that two or more elements are in direct physical or electrical contact. The term “coupled,” however, may also mean that two or more elements are not in direct contact with each other, but yet still co-operate or interact with each other. The embodiments are not limited in this context.
- the terms “comprises,” “comprising,” “includes,” “including,” “has,” “having” or any other variation thereof, are intended to cover a non-exclusive inclusion.
- a process, method, article, or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process, method, article, or apparatus.
- “or” refers to an inclusive or and not to an exclusive or. For example, a condition A or B is satisfied by any one of the following: A is true (or present) and B is false (or not present), A is false (or not present) and B is true (or present), and both A and B are true (or present).
Abstract
Description
Claims (22)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/491,152 US8254681B1 (en) | 2009-02-05 | 2009-06-24 | Display of document image optimized for reading |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15029309P | 2009-02-05 | 2009-02-05 | |
US12/491,152 US8254681B1 (en) | 2009-02-05 | 2009-06-24 | Display of document image optimized for reading |
Publications (1)
Publication Number | Publication Date |
---|---|
US8254681B1 true US8254681B1 (en) | 2012-08-28 |
Family
ID=46689833
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/491,152 Active 2031-05-14 US8254681B1 (en) | 2009-02-05 | 2009-06-24 | Display of document image optimized for reading |
Country Status (1)
Country | Link |
---|---|
US (1) | US8254681B1 (en) |
Cited By (30)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110304860A1 (en) * | 2010-06-14 | 2011-12-15 | Samsung Electronics Co., Ltd. | Image forming apparatus and method for producing e-book contents |
US20120042243A1 (en) * | 2010-08-13 | 2012-02-16 | E Ink Holdings Inc. | Electronic system and controlling method thereof |
US20120089938A1 (en) * | 2010-10-08 | 2012-04-12 | Fuminori Homma | Information Processing Apparatus, Information Processing Method, and Program |
US20130163872A1 (en) * | 2011-12-27 | 2013-06-27 | Peking University Founder Group Co., Ltd. | Method, Server, Reading Terminal and System for Processing Electronic Document |
US20140208192A1 (en) * | 2013-01-18 | 2014-07-24 | Microsoft Corporation | Footnote Detection in a Fixed Format Document |
US20140280783A1 (en) * | 2013-03-15 | 2014-09-18 | Haixiang He | Method and Apparatus for Improving Downloading Performance Based on Reading Intent for Digital Magazine |
US20140289274A1 (en) * | 2011-12-09 | 2014-09-25 | Beijing Founder Apabi Technology Limited | Method and device for acquiring structured information in layout file |
US8910037B1 (en) * | 2011-03-11 | 2014-12-09 | Google Inc. | Comparing text pages using image features based on word positions |
US20150278162A1 (en) * | 2014-03-31 | 2015-10-01 | Abbyy Development Llc | Retention of content in converted documents |
US20170187747A1 (en) * | 2015-12-28 | 2017-06-29 | Arbor Networks, Inc. | Using recurrent neural networks to defeat dns denial of service attacks |
US20180011974A1 (en) * | 2010-09-01 | 2018-01-11 | Apixio, Inc. | Systems and methods for improved optical character recognition of health records |
US20180109685A1 (en) * | 2016-10-18 | 2018-04-19 | Conduent Business Services, Llc | Method and system for digitization of document |
US9953008B2 (en) | 2013-01-18 | 2018-04-24 | Microsoft Technology Licensing, Llc | Grouping fixed format document elements to preserve graphical data semantics after reflow by manipulating a bounding box vertically and horizontally |
US9965444B2 (en) | 2012-01-23 | 2018-05-08 | Microsoft Technology Licensing, Llc | Vector graphics classification engine |
US9990347B2 (en) | 2012-01-23 | 2018-06-05 | Microsoft Technology Licensing, Llc | Borderless table detection engine |
US20190066273A1 (en) * | 2013-07-24 | 2019-02-28 | Georgetown University | Enhancing the legibility of images using monochromatic light sources |
CN109657221A (en) * | 2018-12-13 | 2019-04-19 | 北京金山数字娱乐科技有限公司 | A kind of document segment sort method, collator, electronic equipment and storage medium |
US20200320329A1 (en) * | 2017-06-22 | 2020-10-08 | Adobe Inc. | Probabilistic language models for identifying sequential reading order of discontinuous text segments |
US20210056300A1 (en) * | 2019-08-24 | 2021-02-25 | Kira Inc. | Text extraction, in particular table extraction from electronic documents |
CN112686223A (en) * | 2021-03-12 | 2021-04-20 | 腾讯科技（深圳）有限公司 | Table identification method and device and computer readable storage medium |
US11195213B2 (en) | 2010-09-01 | 2021-12-07 | Apixio, Inc. | Method of optimizing patient-related outcomes |
US11205084B2 (en) * | 2020-02-17 | 2021-12-21 | Wipro Limited | Method and system for evaluating an image quality for optical character recognition (OCR) |
US11256913B2 (en) * | 2019-10-10 | 2022-02-22 | Adobe Inc. | Asides detection in documents |
CN114359313A (en) * | 2022-03-18 | 2022-04-15 | 北京点聚信息技术有限公司 | Method for processing large file based on layout file |
US11315353B1 (en) * | 2021-06-10 | 2022-04-26 | Instabase, Inc. | Systems and methods for spatial-aware information extraction from electronic source documents |
US11481411B2 (en) | 2010-09-01 | 2022-10-25 | Apixio, Inc. | Systems and methods for automated generation classifiers |
US11521404B2 (en) * | 2019-09-30 | 2022-12-06 | Fujifilm Business Innovation Corp. | Information processing apparatus and non-transitory computer readable medium for extracting field values from documents using document types and categories |
US11544652B2 (en) | 2010-09-01 | 2023-01-03 | Apixio, Inc. | Systems and methods for enhancing workflow efficiency in a healthcare management system |
US11581097B2 (en) | 2010-09-01 | 2023-02-14 | Apixio, Inc. | Systems and methods for patient retention in network through referral analytics |
US11694239B2 (en) | 2010-09-01 | 2023-07-04 | Apixio, Inc. | Method of optimizing patient-related outcomes |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5325297A (en) * | 1992-06-25 | 1994-06-28 | System Of Multiple-Colored Images For Internationally Listed Estates, Inc. | Computer implemented method and system for storing and retrieving textual data and compressed image data |
US5889897A (en) * | 1997-04-08 | 1999-03-30 | International Patent Holdings Ltd. | Methodology for OCR error checking through text image regeneration |
US20090144605A1 (en) * | 2007-12-03 | 2009-06-04 | Microsoft Corporation | Page classifier engine |
US20100198827A1 (en) * | 2005-07-27 | 2010-08-05 | Hewlett-Packard Development Company, L.P. | Method for finding text reading order in a document |
-
2009
- 2009-06-24 US US12/491,152 patent/US8254681B1/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5325297A (en) * | 1992-06-25 | 1994-06-28 | System Of Multiple-Colored Images For Internationally Listed Estates, Inc. | Computer implemented method and system for storing and retrieving textual data and compressed image data |
US5889897A (en) * | 1997-04-08 | 1999-03-30 | International Patent Holdings Ltd. | Methodology for OCR error checking through text image regeneration |
US20100198827A1 (en) * | 2005-07-27 | 2010-08-05 | Hewlett-Packard Development Company, L.P. | Method for finding text reading order in a document |
US20090144605A1 (en) * | 2007-12-03 | 2009-06-04 | Microsoft Corporation | Page classifier engine |
Cited By (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8970875B2 (en) * | 2010-06-14 | 2015-03-03 | Samsung Electronics Co., Ltd. | Image forming apparatus and method for producing e-book contents |
US20110304860A1 (en) * | 2010-06-14 | 2011-12-15 | Samsung Electronics Co., Ltd. | Image forming apparatus and method for producing e-book contents |
US20120042243A1 (en) * | 2010-08-13 | 2012-02-16 | E Ink Holdings Inc. | Electronic system and controlling method thereof |
US20180011974A1 (en) * | 2010-09-01 | 2018-01-11 | Apixio, Inc. | Systems and methods for improved optical character recognition of health records |
US11195213B2 (en) | 2010-09-01 | 2021-12-07 | Apixio, Inc. | Method of optimizing patient-related outcomes |
US11481411B2 (en) | 2010-09-01 | 2022-10-25 | Apixio, Inc. | Systems and methods for automated generation classifiers |
US11544652B2 (en) | 2010-09-01 | 2023-01-03 | Apixio, Inc. | Systems and methods for enhancing workflow efficiency in a healthcare management system |
US11581097B2 (en) | 2010-09-01 | 2023-02-14 | Apixio, Inc. | Systems and methods for patient retention in network through referral analytics |
US11610653B2 (en) * | 2010-09-01 | 2023-03-21 | Apixio, Inc. | Systems and methods for improved optical character recognition of health records |
US11694239B2 (en) | 2010-09-01 | 2023-07-04 | Apixio, Inc. | Method of optimizing patient-related outcomes |
US20120089938A1 (en) * | 2010-10-08 | 2012-04-12 | Fuminori Homma | Information Processing Apparatus, Information Processing Method, and Program |
US8910037B1 (en) * | 2011-03-11 | 2014-12-09 | Google Inc. | Comparing text pages using image features based on word positions |
US20140289274A1 (en) * | 2011-12-09 | 2014-09-25 | Beijing Founder Apabi Technology Limited | Method and device for acquiring structured information in layout file |
US9773009B2 (en) * | 2011-12-09 | 2017-09-26 | Beijing Founder Apabi Technology Limited | Methods and apparatus for obtaining structured information in fixed layout documents |
US20130163872A1 (en) * | 2011-12-27 | 2013-06-27 | Peking University Founder Group Co., Ltd. | Method, Server, Reading Terminal and System for Processing Electronic Document |
US9965444B2 (en) | 2012-01-23 | 2018-05-08 | Microsoft Technology Licensing, Llc | Vector graphics classification engine |
US9990347B2 (en) | 2012-01-23 | 2018-06-05 | Microsoft Technology Licensing, Llc | Borderless table detection engine |
US9703759B2 (en) * | 2013-01-18 | 2017-07-11 | Microsoft Technology Licensing, Llc | Footnote zone detection in a fixed format document using number of paragraphs in footnote description |
US9953008B2 (en) | 2013-01-18 | 2018-04-24 | Microsoft Technology Licensing, Llc | Grouping fixed format document elements to preserve graphical data semantics after reflow by manipulating a bounding box vertically and horizontally |
US20140208192A1 (en) * | 2013-01-18 | 2014-07-24 | Microsoft Corporation | Footnote Detection in a Fixed Format Document |
US20140280783A1 (en) * | 2013-03-15 | 2014-09-18 | Haixiang He | Method and Apparatus for Improving Downloading Performance Based on Reading Intent for Digital Magazine |
US20190066273A1 (en) * | 2013-07-24 | 2019-02-28 | Georgetown University | Enhancing the legibility of images using monochromatic light sources |
US10832384B2 (en) * | 2013-07-24 | 2020-11-10 | Georgetown University | Enhancing the legibility of images using monochromatic light sources |
US11295417B2 (en) * | 2013-07-24 | 2022-04-05 | Georgetown University | Enhancing the legibility of images using monochromatic light sources |
US20150278162A1 (en) * | 2014-03-31 | 2015-10-01 | Abbyy Development Llc | Retention of content in converted documents |
US20170187747A1 (en) * | 2015-12-28 | 2017-06-29 | Arbor Networks, Inc. | Using recurrent neural networks to defeat dns denial of service attacks |
US10044751B2 (en) * | 2015-12-28 | 2018-08-07 | Arbor Networks, Inc. | Using recurrent neural networks to defeat DNS denial of service attacks |
US10135999B2 (en) * | 2016-10-18 | 2018-11-20 | Conduent Business Services, Llc | Method and system for digitization of document |
US20180109685A1 (en) * | 2016-10-18 | 2018-04-19 | Conduent Business Services, Llc | Method and system for digitization of document |
US20200320329A1 (en) * | 2017-06-22 | 2020-10-08 | Adobe Inc. | Probabilistic language models for identifying sequential reading order of discontinuous text segments |
US11769111B2 (en) * | 2017-06-22 | 2023-09-26 | Adobe Inc. | Probabilistic language models for identifying sequential reading order of discontinuous text segments |
CN109657221A (en) * | 2018-12-13 | 2019-04-19 | 北京金山数字娱乐科技有限公司 | A kind of document segment sort method, collator, electronic equipment and storage medium |
US20210056300A1 (en) * | 2019-08-24 | 2021-02-25 | Kira Inc. | Text extraction, in particular table extraction from electronic documents |
US11087123B2 (en) * | 2019-08-24 | 2021-08-10 | Kira Inc. | Text extraction, in particular table extraction from electronic documents |
US11521404B2 (en) * | 2019-09-30 | 2022-12-06 | Fujifilm Business Innovation Corp. | Information processing apparatus and non-transitory computer readable medium for extracting field values from documents using document types and categories |
US11256913B2 (en) * | 2019-10-10 | 2022-02-22 | Adobe Inc. | Asides detection in documents |
US11205084B2 (en) * | 2020-02-17 | 2021-12-21 | Wipro Limited | Method and system for evaluating an image quality for optical character recognition (OCR) |
CN112686223A (en) * | 2021-03-12 | 2021-04-20 | 腾讯科技（深圳）有限公司 | Table identification method and device and computer readable storage medium |
CN112686223B (en) * | 2021-03-12 | 2021-06-18 | 腾讯科技（深圳）有限公司 | Table identification method and device and computer readable storage medium |
US20220398858A1 (en) * | 2021-06-10 | 2022-12-15 | Instabase, Inc. | Systems and methods for spatial-aware information extraction from electronic source documents |
US11315353B1 (en) * | 2021-06-10 | 2022-04-26 | Instabase, Inc. | Systems and methods for spatial-aware information extraction from electronic source documents |
US11715318B2 (en) * | 2021-06-10 | 2023-08-01 | Instabase, Inc. | Systems and methods for spatial-aware information extraction from electronic source documents |
CN114359313B (en) * | 2022-03-18 | 2022-05-27 | 北京点聚信息技术有限公司 | Method for processing large file based on layout file |
CN114359313A (en) * | 2022-03-18 | 2022-04-15 | 北京点聚信息技术有限公司 | Method for processing large file based on layout file |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8254681B1 (en) | Display of document image optimized for reading | |
US10846553B2 (en) | Recognizing typewritten and handwritten characters using end-to-end deep learning | |
US6336124B1 (en) | Conversion data representing a document to other formats for manipulation and display | |
US8849725B2 (en) | Automatic classification of segmented portions of web pages | |
US8255793B2 (en) | Automatic visual segmentation of webpages | |
US8819028B2 (en) | System and method for web content extraction | |
JP3292388B2 (en) | Method and apparatus for summarizing a document without decoding the document image | |
US8335381B2 (en) | Handwritten word spotter using synthesized typed queries | |
US7991709B2 (en) | Method and apparatus for structuring documents utilizing recognition of an ordered sequence of identifiers | |
US20230237040A1 (en) | Automated document processing for detecting, extractng, and analyzing tables and tabular data | |
US7668814B2 (en) | Document management system | |
JP4682284B2 (en) | Document difference detection device | |
US20060285746A1 (en) | Computer assisted document analysis | |
JP5664174B2 (en) | Apparatus and method for extracting circumscribed rectangle of character from portable electronic file | |
US20040202352A1 (en) | Enhanced readability with flowed bitmaps | |
CN112434691A (en) | HS code matching and displaying method and system based on intelligent analysis and identification and storage medium | |
JP2005135041A (en) | Document search/browse method and document search/browse system | |
US9008425B2 (en) | Detection of numbered captions | |
US11763588B2 (en) | Computing system for extraction of textual elements from a document | |
US20210042518A1 (en) | Method and system for human-vision-like scans of unstructured text data to detect information-of-interest | |
US10534846B1 (en) | Page stream segmentation | |
Elanwar et al. | Extracting text from scanned Arabic books: a large-scale benchmark dataset and a fine-tuned Faster-R-CNN model | |
US20240104290A1 (en) | Device dependent rendering of pdf content including multiple articles and a table of contents | |
CN111339457A (en) | Method and apparatus for extracting information from web page and storage medium | |
JP2006309347A (en) | Method, system, and program for extracting keyword from object document |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:PONCIN, GUILLAUME;RATNAKAR, VIRESCH;REEL/FRAME:022881/0652Effective date: 20090623 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: CORRECTIVE ASSIGNMENT TO CORRECT THE SECOND INVENTOR'S FIRST NAME PREVIOUSLY RECORDED ON REEL 022881 FRAME 0652. ASSIGNOR(S) HEREBY CONFIRMS THE INVENTOR'S NAME IS SPELLED VIRESH RATNAKAR;ASSIGNORS:PONCIN, GUILLAUME;RATNAKAR, VIRESH;REEL/FRAME:022967/0677Effective date: 20090623 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |