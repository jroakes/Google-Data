CN103109290A - Encoding a schema version in table names - Google Patents
Encoding a schema version in table names Download PDFInfo
- Publication number
- CN103109290A CN103109290A CN2011800360853A CN201180036085A CN103109290A CN 103109290 A CN103109290 A CN 103109290A CN 2011800360853 A CN2011800360853 A CN 2011800360853A CN 201180036085 A CN201180036085 A CN 201180036085A CN 103109290 A CN103109290 A CN 103109290A
- Authority
- CN
- China
- Prior art keywords
- version
- database
- database schema
- table name
- coding
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F8/00—Arrangements for software engineering
- G06F8/40—Transformation of program code
- G06F8/54—Link editing before load time
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/211—Schema design and management
- G06F16/213—Schema design and management with details for schema evolution support
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/21—Design, administration or maintenance of databases
- G06F16/219—Managing data history or versioning
Abstract
The subject matter of this disclosure can be implemented in, among other things, a device that includes processors, a data repository, and a table version module configured to create a first version of a database within the data repository using a first version of a database schema that defines a set of tables for the database, and receive a result that is responsive to a command, such that when the result indicates a success condition, execution of the command allows access to data contained in the database and verification of the database schema version, wherein the result does not include database schema version information. The device further includes means for executing the command to access the data, wherein the command includes one or more encoded table names, and wherein each of the encoded table names included in the command is generated based on at least a database schema version identifier.
Description
Technical field
The disclosure relates to the database that is stored on computing equipment and/or is used by computing equipment, described computing equipment such as personal computer, flat computer and cell phone.
Background technology
In typical network computing environment, computing equipment can communicate via one or more communication networks and one or more external unit.For example, client device can communicate via wired or wireless network and server.In some cases, network can comprise the Internet, and external unit can comprise web server.
The function that some equipment kept for desk-top computer before the permission user carries out provides portable benefit simultaneously.Yet mobile device generally has the resource more limited than desk-top computer, such as slower processor and memory device.Limited resource may limiting mobile device ability or provide the user of suboptimum to experience.Some mobile devices can access the Internet, carry out application, displaying video and music and the functional of traditional cellular phone is provided.For example, mobile device can provide Web browser to the user of this mobile device, and in this Web browser, the user can input the Web address of website, and from this website downloading contents to present at mobile device.
Some application or website will be used or the copy of the information that use the website is stored in mobile device.The local replica of information can be stored in the table of the database corresponding with the particular version of database schema.Usually, when using starting, use to carry out to inquire about and determine the current database schema version, and if current version is identical with the expectation version, optionally carry out with post command, for example, Structured Query Language (SQL) (SQL) statement.
Summary of the invention
Generally speaking, the disclosure has been described for the table name that the database schema version identifier is encoded to database and has been reduced in the technology that starts the inquiry number that uses when using.For example, when start using, equipment can be carried out initial query immediately from being positioned at the data storing library searching intensional data of this equipment, and at first whether the database schema version of specified data storage vault is identical with the database schema version of expectation.Initial query can comprise that coding has one or more table names of the database schema version of expectation.If mistake is returned in this inquiry, the database schema version of expectation is not with to be used for the database schema version of creation database identical, and the database schema that renewal is installed.Yet if the result except mistake is returned in this inquiry, the database schema version of expectation is with to be used for the database schema version of creation database identical, and other inquiry is optionally carried out in application.
In one example, a kind of coding has the computer-readable recording medium of instruction, and described instruction is used for impelling one or more programmable processors: use the first version that originally created this database as the first published of the database schema of database definition table set; And carry out and access the order that is included in the data in this database, wherein this order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the one or more codings in this order.Described instruction also impels one or more programmable processors to receive the result that this order is responded, make when this result indication success status, execution to this order allows to access the data that are included in this database, and further allow the first version of database schema is verified, wherein this result does not comprise the database schema version information.
In another example, method comprises: use the first version that originally created this database as the first published of the database schema of database definition table set; And carry out and access the order that is included in the data in this database, wherein this order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the one or more codings in this order.The method also comprises: receive the result that this order is responded, make when this result indication success status, execution to this order allows to access the data that are included in this database, and further allow the first version of database schema is verified, wherein this result does not comprise the database schema version information.
In another example, equipment comprises: one or more processors; Data storage bank, it is configured to store data; And table version module, its first published that is configured to usage data storehouse pattern is the first version of creation database in data storage bank originally, wherein the first version of database schema is the set of database definition table, and receive the result that order is responded, make when this result indication success status, execution to this order allows to access the data that are included in this database, and further allow the first version of database schema is verified, wherein this result does not comprise the database schema version information.This equipment also comprises for the device of carrying out the order of accessing the data that are included in this database, wherein this order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the one or more codings in this order.
Technology of the present disclosure can provide some advantages.For example, these technology can make application during starts use individual command using, and for example single query, come the both data of retrieve stored in database, and checking is used for the database schema version of generating database again.That is, these technology can reduce the inquiry number of during starts carrying out for database using, and have reduced to start and have used required time quantum.By execution primary data requesting query, and need not at first carry out clear and definite database schema version checking, when database schema did not change, technology of the present disclosure can provide minimum or potential zero cost solution.In addition, reduce the application start time and increased the response of application, it can cause better user's experience concerning the user.
Set forth in the the accompanying drawings and the following description the details of one or more examples.Other features, purpose and advantage are from description and accompanying drawing and will be apparent from claim.
Description of drawings
Fig. 1 is the block diagram that illustrates the computing environment of networking according to the example of an aspect of the present disclosure, wherein uses to run on client device.
Fig. 2 is that diagram is according to the block diagram of the example client end equipment of an aspect of the present disclosure.
Fig. 3 A and 3B are diagrams according to the concept map of the example of the different editions of an aspect of the present disclosure, database schema that be used for to use.
Fig. 4 is diagram according to an aspect of the present disclosure, is used for the process flow diagram of the exemplary method of load application.
In each accompanying drawing, the identical identical element of reference symbol indication.
Embodiment
Fig. 1 is the block diagram that illustrates the computing system 2 of networking according to the example of an aspect of the present disclosure, wherein uses to run on client device 10.As shown in fig. 1, computing system 2 comprises equipment 10, one or more server 12A-12N(" server 12 ") and network 14.The example of equipment 10 includes but not limited to: portable or mobile device, such as cell phone, PDA(Personal Digital Assistant), laptop computer, portable game device, portable electronic device, E-book reader, wrist-watch; And non-portable set, such as desk-top computer.Only for purpose of explanation, equipment 10 is described as the carry-on portable or mobile device of user in the disclosure, yet does not will be understood that aspect of the present disclosure is limited to portable or mobile device.
Equipment 10 and server 12 are coupled to network 14 via wired and/or Radio Link.Equipment 10 can be via network 14 to server 12 transmission data or from server 12 receive datas.Network 14 can comprise the network of wide area network, Local Area Network, enterprise network or one or more other types such as the Internet.Server 12 can be any some dissimilar network equipments.For example, server 12 can be conventional web server, special-purpose media server, with the personal computer of Peer running or the network equipment of other types.
Equipment 10 can comprise one or more processors 20, memory device 22, battery 24, telemetry module 26, display 28 and user interface 30.Be in cellular example at equipment 10, equipment 10 comprises for the microphone of voice communication and loudspeaker (not shown).Battery 24 provides electric power for all various unit of equipment 10, and can be rechargeable.The example of battery 24 comprises lithium polymer battery, lithium ion battery, nickel-cadmium battery and nickel metal hydride battery.The user of user interface 30 permission equipment 10, for example the user 16, carry out alternately with equipment 10.The example of user interface 30 comprises keypad, keyboard, mouse, spin, the button on the equipment of being embedded in 10 or allows user 16 and equipment 10 to carry out other mutual devices.In some instances, user interface 30 can comprise the microphone that allows user 16 that voice command is provided.
Although being shown as, equipment 10 comprises display 28, yet, not will be understood that aspect of the present disclosure is limited to the example that comprises display 28.In some examples of equipment 10, display 28 can be optional.For example, if equipment 10 comprises music player or wireless device, equipment 10 can not comprise display 28.
In some instances, any application of processor 20 execution may be from the one or more data in server 12.The request that telemetry module 26 transmits data, and the one or more receive datas from server 12.Telemetry module 26 can offer the data that receive processor 20 for further processing.Telemetry module 26 is configured to transmit data/request via network 14 to one or more servers 12, and from one or more server 12 receive data/responses.Telemetry module 26 can be supported wireless or wire communication, and comprises the suitable hardware and software that is used to provide wireless or wire communication.For example, telemetry module 26 other circuit that can comprise antenna, modulator, detuner, amplifier and carry out the communication between one or more in equipment 10 and server 12.
As an example, memory device 22 can be stored the web browser with Google Chrome, for example uses 32A, the application instruction that is associated.User 16 can carry out this web browser alternately with user interface 30 and/or display 28.Then processor 20 is carried out web browser and is used, and impels display 28 to show web browser to user 16.Then user 16 can carry out being input to such as the website of http://www.google.com the web browser of demonstration alternately with user interface 30 and/or display 28.In this example, telemetry module 26 request to the website of request of the one or more transmission in the server 12 via network 14.Then display 28 presents to user 16 web site contents that receives.
In some instances, the website is the mobile E-mail interface for the one or more hosted e-mail applications of server 12, for example is used for the mobile Gmail interface that Google Gmail uses.For simplicity, the server 12A with reference to the trustship e-mail applications describes this example.In other examples, e-mail applications can by in server 12 any one or for example be used in combination cluster or other Distributed Application administrative skills are come trustship by server 12 any.In this example, telemetry module 26 is to the request of server 12A transmission to the mobile E-mail interface, and reception is used for retrieving other information and is used for showing to user 16 via display 28 computer instruction of these information.Can comprise user data from the other information of server 12A retrieval, such as email message, annex and the configuration information of user's 16 transmissions and reception.
The mobile E-mail interface can comprise the instruction that impels equipment 10 storages to be stored in the local replica of the user data in server 12A.For example, the local replica of user data can be stored in the application data storage vault (" application data ") 34 of equipment 10.Application data storage vault 34 can be configured to database, flat file, shows or be stored in other interior data structures of memory device 22 of equipment 10.In some instances, sharing application data storage bank 34 between the application of carrying out on equipment 10.In other examples, be the different application data storage vault 34 of each application configuration that needs data storage bank of carrying out on equipment 10.Each application data storage vault 34 can be configured and be managed by different application, and can store by different way data.
For example, application data storage vault 34 can be configured to comprise the one or more databases with ad hoc structure.Each database can be corresponding to specific website or the application carried out on equipment 10.Generally speaking, the structure of database is by the relation between table, field, table, index and other element definitions.The structure of database typically is called as database schema.As time goes on, the structure of database may change, and causing has the different editions of database schema for same database.Each version of database schema can have uniqueness (unique) version identifier.
During instruction in the local replica of the user data that reception impels web browser to use will to be associated with the mobile E-mail interface is stored in the data storage bank of equipment 10, web browser application (for example, using 32A) use is for example shown version module (" table version module ") 33 and is come creation database.Generally speaking, show the appropriate version that version module 33 is guaranteed at the required database of the interior maintenance application 32A of application data storage vault 34.In some instances, table version module 33 is configured in response to the database that is identified for using 32A based on incorrect database schema version, and a generation in the server 12 is to the request of the database schema that upgrades.
According to technology of the present disclosure, one or more based on from server 12, for example the database schema that receives of server 12A comes creation database.Table name in the database schema that receives can comprise the table name of coding.In one embodiment, the table name of coding comprises the database schema version identifier of essential part and the version of the database schema of the one or more receptions of identification from server 12.In this embodiment, the database schema version identifier is appended to the table name that essential part generates coding.The essential part of table name of coding is the table name part of the coding that typically remains unchanged between the disparate databases schema version.Although can the essential part of table name of coding be changed between the database schema version, yet, the AD HOC version is not indicated in the change of essential part.On the contrary, when each database schema version changed, the database schema version identifier of essential part that appends to the table name of coding changed.For example, if database schema is version two, each essential part of the table name of encoding has " _ 2 " that append to it or for version three, each essential part of table name has " _ 3 " that append to it.The version identifier of essential part that appends to the table name of each coding can be any character string that is associated with particular version.
In another embodiment, the table name of the coding that is used for each table in database schema creates unique Hash and generates by be applied to uncoded table name to major general's database schema version identifier.Hash can be by encoding to create to uncoded table name with key, and wherein this key is the database schema version identifier.The essential part of the table name of the coding of describing in uncoded table name and embodiment in front in some instances, is identical.That is, the AD HOC version is not indicated in any change of uncoded table name.On the contrary, uncoded table name can be identified particular table, and with the database schema version independent.Generally speaking, when programmer's pair database schema that is associated with the mobile E-mail interface upgraded, the programmer also upgraded version identifier.As mentioned above, the version identifier of renewal is used for generating the table name of the corresponding coding of the database schema version identified with version identifier.
In order to show the mobile E-mail interfaces via display 28 to user 16, web browser is used one or more to from server 12, and for example the instruction that receives of server 12A is processed.The instruction that receives can comprise and impels web browser from the instruction of the local replica retrieving information that is stored in the user data in the database that creates for the mobile E-mail interface.Various programming languages can be used for the data of retrieve stored in data storage bank, include but not limited to: Structured Query Language (SQL) (SQL), general polling language (CQL), OQL (OQL), XQuery and XSQL.Being used for can be combined from the one or more different programming languages that are used in web browser application demonstration information from the instruction of data storing database retrieve data.For example can using, HTML(Hypertext Markup Language), JavaScript, PHP hypertext processor, Java, CGI (Common Gateway Interface) (CGI) or Perl encode to the instruction that is used for demonstration mobile E-mail interface.
Idsplay order and the data retrieval packing of orders can be made it possible to dynamically generate the particular data retrieval instruction.For example, instruction " ' SELECT action FROM action_table'+schema_version+'WHERE action=2' " can be the combination of SQL and JavaScript, wherein " schema_version " is when web browser is carried out instruction, substitute the JavaScript variable of a certain value corresponding with the expectation version of database schema, and wherein "+" is for the symbol that connects.The expectation version of database schema is the instruction that receives from server 12A to be programmed and the version of the database schema that equipment 10 uses when processing.In another example, in instruction " ' SELECT action FROM'+action_table_name+'WHERE action=2' ", variable " action_table_name " can substitute the table name of coding, and wherein when web browser was carried out instruction, the table name of coding was unique cryptographic hash.
When the mobile web interface of access, the instruction that receives from server 12A impels web browser that database is inquired about, and whether expectation version or the database of based on database pattern are present in data storage bank and need not at first be identified for the database of mobile E-mail interface.When the programmer upgraded database schema, the programmer also upgraded the version identifier that is included in for the instruction of mobile E-mail interface.As mentioned above, the database schema identifier that is included in the renewal in instruction can be used for dynamically generating table name for each version of database schema.
By this way, web browser is used the instruction that receives that is used for the mobile E-mail interface is processed, and the data storage vault is inquired about, and need not at first check the database schema version.Generally speaking, each application start or website check when being loaded that the present mode version of database has increased the application start time, and have reduced the quality that the user experiences.By do not check the database schema version before carrying out substantive inquiry, can reduce the application start time, and improve the quality that the user experiences.Namely, with check the database schema version with a plurality of orders, then compare from the database retrieval data, for example use the individual command of single query both to come from the database retrieval data, checking is used for that the database schema version of generating database is identical with the desired pattern version can reduce the application start time again.
Substitute and at first to check database schema, technology of the present disclosure by dynamic generation be attached with expectation the database schema version, be included in the table name in inquiry, guarantee that the current database pattern is the database schema of expectation.By the database schema version being appended to the table name in inquiry, if if do not utilize the schema version of expectation to generate for the database of mobile E-mail interface or not yet create the database that is used for the mobile E-mail interface, inquiry will be returned to error condition.If inquiry returns results collection, the database that is used for the mobile E-mail interface both existed, and the expectation version of based on database pattern is generated again.The database schema version is encoded to the mobile E-mail interface can be skipped carry out inquiry checks the database schema version, accelerated to use starting.
When database does not still exist, for example, do not access mobile E-mail interface website before user 16, the mobile E-mail interface is attempted to carry out inquiry first for database, and receives error condition in response to this inquiry.In response to error condition, web browser is used the request that impels telemetry module 26 to send database schema.After the pattern of server 12A receive data storehouse, web browser is used database schema is applied to data storage bank, and the based on database pattern is mobile E-mail interface creation database.
Web browser use to continue the instruction that is used for the mobile E-mail interface that receives from server 12A is processed, and impels telemetry module 26 to send request of data to server 12A, and in response to request of data from server 12A receive data.As example, the data that receive from server 12A can comprise Email, contact details, configuration setting, demonstration information and control information.The subset of the information that receives from server 12A, user data for example is stored in the database that the based on database pattern generates.Other parts of the information that receives from server 12A can be used by web browser and make play up and show the mobile E-mail interface via display 28.
For example, data storage bank can be configured to have the database of the previous version of database schema, and the mobile E-mail interface is configured to come process information based on the database schema that upgrades.The redaction of database schema can comprise the various modifications to the data library structure, such as adding or removing table, add or remove the row in table or be one or more row modification titles or the data type of table.Invalid data retrieval instruction when therefore, web browser is used the version that handled instruction can comprise the data storage bank in being applied to the equipment of being stored in 10.
In order to upgrade local data base, equipment 10 can before the user data that retrieval is upgraded and before showing the mobile E-mail interface fully with display 28, create local data base based on new database schema again.New database schema comprises the new table name with the new database schema version that appends to each table name.In some instances, need to be from the amount of user data of server 12A retrieval with being stored in that migration of subscriber data in the legacy version of database reduces to new database.After new database more, the table name of database comprises the database schema version identifier of expectation, and web browser is used, and for the database that upgrades, inquiry to be processed be the storage of mobile E-mail interface and retrieval relevant user data.
Although be described with reference to the mobile E-mail interface of checking in web browser is used, yet any application that information is stored in local data repository can realize technology of the present disclosure.For example, game is used and can be stored: social network information, such as the information about user 16 " friend "; And game stats, such as " friend " high score that obtains and award that is subject to of user 16 and user 16.During each game application start, it can be connected to one or more social network information and the game stats of downloading about for example user 16 friend's renewal in server 12.When the database schema version changes, also the version identifier that is coded in for the instruction of upgrading the local user who stores and social network information is upgraded.The database schema version identifier is encoded to instruction can be skipped check to be used for create the database schema version of local data base, and alternatively, carry out substantive inquiry first for database.
If inquiry returns results first, be used for generating the database schema of local data base and the expectation version of database schema, namely the current version of realization is identical on server 12 one or more.By skipping the database schema version checking, reduce the inquiry number, and increased the response of using, cause better end-user experience.With at first check the database schema version with a plurality of orders, then compare from the database retrieval data with independent order, by with individual command validation database schema version and reduce the inquiry number from the database retrieval data and can reduce and use the starting time.Yet, not the expectation version if be used for creating the database schema version of local data base, the database schema that upgrades from server 12 retrievals, and apply it to database.
Fig. 2 is that diagram is according to the block diagram of the example client end equipment of an aspect of the present disclosure.As shown in Figure 2, memory device 22 comprises application 32 and application data storage vault (" application data ") 34.Illustrated in Fig. 2, application data storage vault 34 comprises the database (not shown), and it is configured with two databases, and database 35A and 35B(are referred to as " database 35 "), each for example uses the different editions of the database schema of 32A based on one that is used for application 32.Each in database 35 can comprise table, the field in each table and the relation between table.With database 35B based on the database schema version compare, database 35A based on the database schema version comprise the various combination of table, field and/or relation.As example, various combination can comprise different definition or field type, the table of rename or table, field or the relation of field or varying number of different field, table or relation, one or more fields.
Generally speaking, use each management in 32 himself associated databases in application data storage vault 34.When database 35 configures for using 32A, use generation, migration and deletion that the table version module 33 of 32A can management database 35.As example, use 32A for example in response to starting first, at the interior establishment of data storage bank 34 database of database 35A for example.During the initial start of using 32A, the database that table version module 33 is identified for using 32A is not present in application data storage vault 34, and the expectation version that will be used for the database schema of application 32A be applied to data storage bank 34 and come creation database 35A.The expectation version of usage data storehouse pattern comes creation database 35A to impel database 35A to have identical database structure with the expectation version definition of database schema.That is, database 35A comprises the table set, and each has the table name of coding.As example, the table name of each coding can generate cryptographic hash or encode by the essential part that the database schema version identifier is appended to the table name of coding by the database schema version identifier being applied to uncoded table name.When each database schema version changed, the database schema version identifier part of all table names can change.
In time after a while, such as renewal is applied to use 32A after or after the database schema version to a reception from server 12 upgraded, application 32A was applied to inquiry the database 35A of the table name that comprises one or more codings.In one example, the table name of coding based on uncoded table name and identification be used for the version identifier of version of the identical database schema of the version of creation database 35A and generate.Application 32A is reception result in response to inquiry being applied to database 35A.Because database schema version identifier identification is used for the same database schema version of creation database 35A, therefore, this result indication success status.That is, single query allows to access the data that are stored in database 35A, and further allows the validation database schema version, and can not comprise the database schema version in result.
In another example, use the version identifier corresponding with the version of the database schema of the version that is different from creation database 35A that the table name of coding is encoded.In response to inquiry being applied to database 35A, using 32A and receive the non-existent response of indication appointment table.Table version module 33 can check this response, and determines this response misdirection state.The database schema version that error condition can be indicated creation database 35A is no longer the database schema version of expectation.In some instances, use 32A via telemetry module 26 a database schema version that request is upgraded in the server 12 of Fig. 1.In other examples, use the database schema version that 32A comprises renewal.Table version module 33 is used the database schema version that upgrades and is come creation database 35B.The table name of the coding of the table in database 35B comprises the database schema version identifier corresponding with the database schema that upgrades.
After creation database 35B, table version module 33 can will be stored in Data Migration in database 35A to database 35B.For example, if one or more tables of database 35B comprise the same field that has with identical field type in database 35A, showing version module 33 will be from the correspondence table in the data data inserting storehouse 35B of database 35A.In another example, if one or more field type changes, compare with database 35A, in database 35B, remove field or remove table, at least part of of data who is stored in database 35A may successfully do not moved to database 35B.Alternatively, for example, use 32A and can not be migrated to a request in server 12 information of database 35B.After with proper data padding data storehouse 35B, use 32A and can again use previous failed inquiry for database 35B, and receive Query Result.
Fig. 3 A and 3B are diagrams according to the concept map of the example of the different editions of an aspect of the present disclosure, database schema that be used for to use.Fig. 3 A is the example of database schema 40, it is the definition of particular version of database schema 40: table 42A-42C(is referred to as " table 42 "), each has corresponding table name 44A-44C(and is referred to as " table name 44 ") and sets of fields 46A-46C(be referred to as " field 46 "); And concern 48A and 48B between table 42.In this example, table 42A is named as " ItemTbl_v7 ", and table 42B is named as " GroupTbl_v7 ", and table 42C is named as " LinkTbl_v7 ".Each table name comprises the version of illustrated database schema 40 in additional unique identification Fig. 2 A of coming, for example " _ v7 " of version seven.Concern that there is relation in 48 indications between table 42A and 42B and between table 42A and 42C.For example, concern that each in 48 can be multi-to-multi, one-to-many or one-one relationship.
Fig. 3 B is the example of database schema 50.For example, database schema 50 is different editions of illustrated database schema 40 in Fig. 3 A.Database schema 50 definition: table 52A-52D(" table 52 "), each has corresponding table name 54A-54D(and is referred to as " table name 54 ") and sets of fields 56A-56D(be referred to as " field 56 "); And the 58A-58C(that concerns between table 52 is referred to as " concerning 58 ").In this example, table 52A is named as " ItemTbl_v8 ", and table 52B is named as " GroupTbl_v8 ", and table 52C is named as " LinkTbl_v8 " and table 52D is named as " DetailTbl_v8 ".Each table name comprises this version of additional next unique identification database pattern 50, for example " _ v8 " of version eight.Concern that there is relation in 58 indications between table 52A and 52B, table 52B and 52C and table 52B and 52D.For example, concern that each in 58 can be multi-to-multi, one-to-many or one-one relationship.
The database schema 40 of Fig. 3 A and the database schema 50 of Fig. 3 B that can be the subsequent version of database schema 40 are compared, database schema 50 is compared with database schema 40 and is comprised other table, table 52A, its definition is used for storing the other field 56A of other information.Comprise other table although be illustrated as to compare with database schema 40, yet any change that database schema 50 is made can be enough to generate new database schema version, therefore be used for the new table name of this new database schema version.For example, field type or the title of the one or more fields in field 56 are changed, one or more in table name 54 are changed, add fields or remove field or redefine one or more between table 52 from field 56 to the field 56 and concern that 58 can be enough to generate new database schema version.
The database that is used for generating from based on database pattern 40 can be similar in fact with the database storage of based on database pattern 50 generations and the instruction of retrieve data.For example, instruction can comprise the combination of the programming language that makes it possible to carry out the dynamic table naming convention as mentioned above.In one example, instruction comprises the variable of the database schema version number that is defined as storage expectation, for example " schema_version ".Instruction " ' SELECT description, id FROM ItemTbl'+schema_version+'WHERE id=3 ' " be the database schema version of SQL and the combined next expectation based on defining in " schema_version " variable of JavaScript dynamically to be generated an example of the instruction of suitable table name.In this example, when illustrated database schema in Fig. 3 A is the database schema version of expectation, " schema_version " value of being set to " _ v7 ".Similarly, when illustrated database schema in Fig. 3 B is the database schema version of expectation, " schema_version " value of being set to " _ v8 ".
In one example, the user 16 of Fig. 1 starts the Database application of the database schema 40 illustrated structures that need to have Fig. 3 A first.This database generates based on illustrated database schema version seven in Fig. 3 A (for example " _ v7 ").As mentioned above, application can utility command come Query Database, and described order appends to the database schema version of expectation the end of each table name with the variable of the database schema version that is set to current expectation.After user 16 completed the use application, application was withdrawed from.Before the user started this application again, the database schema version of expectation changed, and for example database schema is updated to version eight as illustrated in the database schema 50 of Fig. 3 B (for example, " _ v8 ").For example, application in equipment 10 have been updated to the version that upgrades or because the assembly of the application in the server 12 that resides in Fig. 1 is updated, therefore, database schema can be updated because the user will be stored in.
Start when using after upgrading, the table name that dynamically generates may not be complementary with the table name of existing database, because for example " schema_version " variable has been updated to " _ v8 " from " _ v7 ".In this example, inquiry " ' SELECT description, id FROM ItemTbl'+schema_version+'WHERE id=3 ' " will generate table name " ItemTbl_v8 ", and attempt from having the table search information of title " ItemTbl_v8 ".Yet, for the database of using the still version seven of based on database pattern, therefore, do not comprise table name " ItemTbl_v8 ".Because this table is not present in database, therefore, mistake is returned in inquiry.
In response to this mistake, this uses the redaction of application data base pattern, and for example version eight as illustrated in the database schema 50 of Fig. 3 B, create new database.New database comprises the database schema version identifier of the expectation with the title that appends to each table, for example table of " _ v8 ".After the expectation version of based on database pattern comes creation database, can will be stored in Data Migration in the previous version of database to new database.Illustrated in Fig. 3 A and 3B, the table 52A-52C of Fig. 3 A is identical with corresponding table 52B-52D in Fig. 3 B.Namely, each has the same field that defines table 42A and 52B in field 46A and 56A, each has the same field that defines table 42B and 52C in field 46B and 56C, and table 42C and 52D each have the same field that defines in field 46C and 56D.Therefore, data can be moved to corresponding table 52 in new database from the table 42 database formerly.After Data Migration was completed, application can re-execute inquiry." ItemTbl_v8 " is existing is in database due to table, and therefore, inquiry will no longer be returned to mistake because of invalid table name, and generally with success and return results collection.
Fig. 4 is diagram according to an aspect of the present disclosure, is used for the process flow diagram of the exemplary method of load application.Only for purpose of explanation, the method for Fig. 3 has been described with reference to the computing system 2 of figure 1, yet, can utilize various other systems and/or equipment realize or execution graph 4 shown in method.
Use 32A and then carry out the instruction (62) that generates initial query.As mentioned above, inquiry can comprise the table name of dynamic generation.The table name that generates comprises the essential part that is attached with the table name of reformed database schema version identifier when realizing new database schema version on each one or more in server 12.Additional database schema version identifier is included in the instruction that receives, and corresponding to the database schema version that uses when the instruction that receives is programmed.That is, the database schema version of expectation be the instruction that receives based on the particular data library structure.If be stored in not identical with the database schema version of the expectation structure of database in memory device 22, carry out described instruction and may produce uncertain result and maybe may cause various error conditions.
Using 32A carries out the inquiry (64) that generates and receives from the result (66) of inquiring about.For example, described result can comprise from database retrieval to data, there is no the indication of data matching inquiry or the indication of error condition.Use that 32A processes result and definite result misdirection state (68) whether.If result is misdirection state (68 "No" branches) not, use 32A and continue optionally to inquire about to carry out for database processing the function (74) of using 32A.For example, if result comprises data or there is no the indication of data matching inquiry, result misdirection state not.
If misdirection state (68 "Yes" branches) is as a result used the database schema (70) of the one or more retrieving novels of 32A from server 12.Using 32A impels the one or more transmissions of telemetry module 26 in the server 12 to the request of the version of the database schema corresponding with the database schema version of expectation indicated in the instruction that receives.Telemetry module 26 is the new database schema of one or more receptions from server 12 then, and this new database schema is passed to application 32A.
Then application 32A uses this new database schema and comes to generate new database (72) based on this new database schema.New database comprises the table of the title of the database schema version with the expectation of being attached with.If possible, use Data Migration in the legacy version that 32A will be stored in database to new database (74).If data are successfully moved to new database (74 "Yes" branches), use 32A and can re-execute the data that initial query (76) comes the original request of retrieve application 32A.Re-executing initial query (76) afterwards, using 32A and continue to carry out instruction, and can optionally carry out other inquiry (78) for new database.If data are not migrated to new database (74 "No" branches), using 32A then can be that sky carries out based on the table of new database, for example, use 32A and can carry out inquiry and use from the new database of one or more data stuffings in server 12 for example, and can optionally carry out other inquiry for new database and carry out the various functions (78) of using 32A.
By this way, technology of the present disclosure can provide minimum and even the solution of zero cost basically in some cases, be used to each the application starting between database schema changes, the checking local data base is based on the database schema version identical with the database schema version of expectation.Namely, described technology can make to use to be passed through with individual command validation database schema version and from the database retrieval data, skip when using starting and carry out explicit data storehouse schema version inspection, thereby with at first check the database schema version with a plurality of orders, then compare from the database retrieval data, reduced and used during starts required inquiry number and be convenient to use faster starting.When database schema has changed, be that database structure is corresponding to the database schema version not identical with the database schema version of expectation, compare with common solution, described technology can be transferred to database schema the database schema version of expectation, and need not any other expense.Therefore, can improve the overall efficiency of using starting.
The technology of describing in this article can realize with hardware, software, firmware or its any combination.But the various features of the module of being described to, unit or assembly can be implemented as integrated logical device together or be implemented as respectively discrete interoperable logical device or other hardware devices.In some cases, the various features of electronic circuit may be implemented as one or more integrated circuit (IC)-components, such as integrated circuit (IC) chip or chipset.
If realize with hardware, the disclosure can be for device, such as processor; Or integrated circuit (IC)-components, such as integrated circuit (IC) chip or chipset.As an alternative or additionally, if realize with software or firmware, described technology can at least part of computer-readable data storage medium by comprising instruction realize, described instruction impels one or more in processor execution said method when be performed.For example, computer-readable data storage medium can be stored such instruction and carried out for processor.
Computer-readable medium can form the part of the computer program that can comprise encapsulating material.Computer-readable medium can comprise the computer data storage medium, such as RAM, ROM, NVRAM, EEPROM, flash memory, magnetic or optical data memory etc.Additionally or as an alternative, described technology can be at least part of by being realized by the computer-readable communication media that computer access, the instruction of reading and/or carrying out or data structure form carried or transmitted code.
Code or instruction can be software and/or the firmwares of being carried out by treatment circuit, and this treatment circuit comprises one or more processors, such as one or more DSP, general purpose microprocessor, ASIC, FPGA or other integrated or discrete logic circuitry of equal value.Therefore, can refer to aforementioned structure as the term " processor " that uses in this article or be suitable for implementation in herein any one in any other structure of the technology of describing.In addition, in certain aspects, that describes in can being provided at the disclosure in software module or hardware module is functional.
Various embodiment of the present disclosure has been described.These and other embodiment within the scope of the appended claims.
Claims (20)
1. a coding has the computer-readable recording medium of instruction, and described instruction is used for impelling one or more programmable processors:
Use the original first version that creates described database of first published as the database schema of database definition table set;
Carry out the order that access is included in the data in described database, wherein said order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the described one or more codings in described order; And
The result that reception responds to described order, make when described result indication success status, described execution to described order allows to access the described data that are included in described database, and further allow the described first version of described database schema is verified, wherein said result does not comprise the database schema version information.
2. computer-readable recording medium according to claim 1,
Each table in the described table set of wherein said database comprises the table name of coding, wherein the table name of the described coding of each table generates based on the database schema version identifier of the described first version of uncoded table name and the described database schema of identification, and
When wherein each in the table name of the described one or more codings in being included in described order generates based on one in the described uncoded table name of the described table set described database schema version identifier with the described first version of the described database schema of identification, described result indication success status.
3. computer-readable recording medium according to claim 1, further coding has instruction, and described instruction is used for impelling described one or more programmable processor:
Determine the described state of misdirection as a result, generate based on the database schema version identifier of the second version that uncoded table name and identification are different from the described database schema of described first version comprising each in the table name of the described one or more codings in described order; And
In response to determining the described error condition of described result indication, use original second version that creates described database of second edition of described database schema.
4. computer-readable recording medium according to claim 3,
The described second version definition second table set of wherein said database schema, its each have the table name of coding,
The table name of the described coding of each table in described second version of wherein said database schema comprises first and second portion,
The first of the table name of the described coding of the corresponding table in the described first of the table name of each coding in described second version of wherein said database schema and the described first version of described database schema is identical, and
The described second portion of the table name of each coding in described second version of wherein said database schema comprises the described database schema version identifier of described the second version of identifying described database schema.
5. computer-readable recording medium according to claim 3, further coding has instruction, and described instruction is used for impelling described one or more programmable processor via described second version of network from the described database schema of server retrieves.
6. computer-readable recording medium according to claim 3, further coding has instruction, and the Data Migration in the original described database that creates of described first published that described instruction is used for impelling described one or more programmable processor to be stored in uses described database schema is to the original described database that creates of the described second edition that uses described database schema.
7. computer-readable recording medium according to claim 2, wherein the table name of the described coding of each table creates unique Hash and generates by be applied to described uncoded table name to the described database schema version identifier of major general.
8. computer-readable recording medium according to claim 2, wherein the table name of the described coding of each table comprises first and second portion, wherein the described first of the table name of each coding comprises described uncoded table name, and wherein the described second portion of the table name of each coding comprises described database schema version identifier.
9. computer-readable recording medium according to claim 1, wherein said order are in response to the initial command of the application of using starting and carrying out.
10. method comprises:
Use the original first version that creates described database of first published as the database schema of database definition table set;
Carry out the order that access is included in the data in described database, wherein said order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the described one or more codings in described order; And
The result that reception responds to described order, make when described result indication success status, described execution to described order allows to access the described data that are included in described database, and further allow the described first version of described database schema is verified, wherein said result does not comprise the database schema version information.
11. method according to claim 10,
Each table in the described table set of wherein said database comprises the table name of coding, wherein the table name of the described coding of each table generates based on the database schema version identifier of the described first version of uncoded table name and the described database schema of identification, and
When wherein each in the table name of the described one or more codings in being included in described order generates based on one in the described uncoded table name of the described table set described database schema version identifier with the described first version of the described database schema of identification, described result indication success status.
12. method according to claim 10 further comprises:
Determine the described state of misdirection as a result, generate based on the database schema version identifier of the second version that uncoded table name and identification are different from the described database schema of described first version comprising each in the table name of the described one or more codings in described order; And
In response to determining the described error condition of described result indication, use original second version that creates described database of second edition of described database schema.
13. method according to claim 12,
The described second version definition second table set of wherein said database schema, its each have the table name of coding,
The table name of the described coding of each table in described second version of wherein said database schema comprises first and second portion,
The first of the table name of the described coding of the corresponding table in the described first of the table name of each coding in described second version of wherein said database schema and the described first version of described database schema is identical, and
The described second portion of the table name of each coding in described second version of wherein said database schema comprises the described database schema version identifier of described the second version of identifying described source database pattern.
14. method according to claim 11, wherein the table name of the described coding of each table creates unique Hash and generates by be applied to described uncoded table name to the described database schema version identifier of major general.
15. method according to claim 11, wherein the table name of the described coding of each table comprises first and second portion, wherein the described first of the table name of each coding comprises described uncoded table name, and wherein the described second portion of the table name of each coding comprises described database schema version identifier.
16. method according to claim 10, wherein said order are in response to the initial command of the application of using starting and carrying out.
17. an equipment comprises:
One or more processors;
Data storage bank, it is configured to store data;
Table version module, its first published that is configured to usage data storehouse pattern is the first version of creation database in described data storage bank originally, the described first version of wherein said database schema is the set of described database definition table, and receive the result that order is responded, make when described result indication success status, execution to described order allows to access the data that are included in described database, and further allow the described first version of described database schema is verified, wherein said result does not comprise the database schema version information; And
Be used for carrying out the device of the described order of accessing the described data that are included in described database, wherein said order comprises the table name of one or more codings, and generates based on database schema version identifier at least comprising each in the table name of the described one or more codings in described order.
18. equipment according to claim 17,
Each table in the described table set of wherein said database comprises the table name of coding, wherein the table name of the described coding of each table generates based on the database schema version identifier of the described first version of uncoded table name and the described database schema of identification, and
When wherein each in the table name of the described one or more codings in being included in described order generates based on one in the described uncoded table name of the described table set described database schema version identifier with the described first version of the described database schema of identification, described result indication success status.
19. equipment according to claim 17, wherein said table version module is further configured into: determine the described state of misdirection as a result, generate based on the database schema version identifier of the second version that uncoded table name and identification are different from the described database schema of described first version comprising each in the table name of the described one or more codings in described order, and in response to determining the described error condition of described result indication, use original second version that creates described database of second edition of described database schema.
20. equipment according to claim 19,
The described second version definition second table set of wherein said database schema, its each have the table name of coding,
The table name of the described coding of each table in described second version of wherein said database schema comprises first and second portion,
The described first of the table name of each coding in described second version of wherein said database schema is identical with the first of the table name of the described coding of the corresponding table of the described first version of described database schema, and
The described second portion of the table name of each coding in described second version of wherein said database schema comprises the described database schema version identifier of described the second version of identifying described source database pattern.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/842,771 US8244698B2 (en) | 2010-07-23 | 2010-07-23 | Encoding a schema version in table names |
US12/842,771 | 2010-07-23 | ||
PCT/US2011/044706 WO2012012551A1 (en) | 2010-07-23 | 2011-07-20 | Encoding a schema version in table names |
Publications (2)
Publication Number | Publication Date |
---|---|
CN103109290A true CN103109290A (en) | 2013-05-15 |
CN103109290B CN103109290B (en) | 2016-12-28 |
Family
ID=44546128
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN201180036085.3A Active CN103109290B (en) | 2010-07-23 | 2011-07-20 | Coding mode version in table name |
Country Status (5)
Country | Link |
---|---|
US (3) | US8244698B2 (en) |
EP (1) | EP2596442B1 (en) |
KR (1) | KR101469393B1 (en) |
CN (1) | CN103109290B (en) |
WO (1) | WO2012012551A1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107291790A (en) * | 2016-03-31 | 2017-10-24 | Ls 产电株式会社 | The method of DB between the duplexing EMS Server of management |
CN111198711A (en) * | 2020-01-13 | 2020-05-26 | 陕西心像信息科技有限公司 | Collection version control method and system based on MongoDB |
Families Citing this family (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10016617B2 (en) | 2009-11-11 | 2018-07-10 | The Trustees Of The University Of Pennsylvania | Combination immuno therapy and radiotherapy for the treatment of Her-2-positive cancers |
US8244698B2 (en) | 2010-07-23 | 2012-08-14 | Google Inc. | Encoding a schema version in table names |
JP5720531B2 (en) * | 2011-10-31 | 2015-05-20 | 富士通株式会社 | Help creation support device, help creation support program, and help creation support method |
BR112014022662A2 (en) | 2012-03-12 | 2017-10-03 | Advaxis Inc | INHIBITION OF SUPPRESSOR CELL FUNCTION FOLLOWING LISTERIA VACCINE TREATMENT |
US20140310706A1 (en) * | 2012-12-17 | 2014-10-16 | Unisys Corporation | Method for managing commodity computing |
US9413596B2 (en) * | 2013-01-10 | 2016-08-09 | Webroot Inc. | Managed execution and expiration of agent commands |
US9659040B1 (en) | 2013-09-23 | 2017-05-23 | Amazon Technologies, Inc. | Database fleet schema maintenance |
US9471617B2 (en) | 2013-10-29 | 2016-10-18 | Sap Ag | Schema evolution via transition information |
US10114874B2 (en) * | 2014-02-24 | 2018-10-30 | Red Hat, Inc. | Source query caching as fault prevention for federated queries |
US20150248404A1 (en) * | 2014-02-28 | 2015-09-03 | Red Hat, Inc. | Database schema migration |
US9607037B2 (en) | 2014-06-17 | 2017-03-28 | International Business Machines Corporation | Database schema upgrade as a service |
US11275760B2 (en) * | 2014-10-28 | 2022-03-15 | Microsoft Technology Licensing, Llc | Online schema and data transformations |
US11176106B2 (en) * | 2014-11-19 | 2021-11-16 | Unisys Corporation | Dynamic modification of database schema |
US9535934B1 (en) | 2015-11-17 | 2017-01-03 | International Business Machines Corporation | Schema lifecycle manager |
US10621156B1 (en) * | 2015-12-18 | 2020-04-14 | Amazon Technologies, Inc. | Application schemas for journal-based databases |
US10747743B2 (en) * | 2016-06-30 | 2020-08-18 | International Business Machines Corporation | On-demand database catalog upgrade |
US11537590B2 (en) | 2017-03-28 | 2022-12-27 | Walmart Apollo, Llc | Systems and methods for computer assisted database change documentation |
US11055264B2 (en) * | 2017-05-10 | 2021-07-06 | Dropbox, Inc. | Automatically coordinating application schema changes in a distributed data storage system |
CN109189783B (en) * | 2018-08-03 | 2023-10-03 | 北京涛思数据科技有限公司 | Time sequence database table structure change processing method |
US20220150073A1 (en) * | 2020-11-09 | 2022-05-12 | International Business Machines Corporation | Blockchain based verifiabilty of user status |
US11709808B1 (en) * | 2022-03-25 | 2023-07-25 | Snowflake Inc. | Schema evolution for the serialization of non-primary key columnar data into row-organized byte sequences |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101178684A (en) * | 2006-11-06 | 2008-05-14 | 中兴通讯股份有限公司 | Symbol locating method of embedded system |
CN101438261A (en) * | 2006-05-05 | 2009-05-20 | 微软公司 | Techniques to perform gradual upgrades |
US20100145962A1 (en) * | 2008-12-04 | 2010-06-10 | General Electric Company | Providing processing instructions for updating schema |
Family Cites Families (14)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5787437A (en) * | 1996-10-29 | 1998-07-28 | Hewlett-Packard Company | Method and apparatus for shared management information via a common repository |
US5999947A (en) * | 1997-05-27 | 1999-12-07 | Arkona, Llc | Distributing database differences corresponding to database change events made to a database table located on a server computer |
SE521056C2 (en) * | 1997-07-21 | 2003-09-23 | Ericsson Telefon Ab L M | Method for implementing schema changes in a database |
US7287034B2 (en) * | 2003-05-08 | 2007-10-23 | Oracle International Corporation | On-demand multi-version data dictionary to support distributed applications |
US20050114404A1 (en) * | 2003-11-21 | 2005-05-26 | Bmc Software, Inc. | Database table version upload |
US7546322B2 (en) * | 2005-03-09 | 2009-06-09 | International Business Machines Corporation | Generating unique name/version number pairs when names can be re-used |
US20060294159A1 (en) * | 2005-06-23 | 2006-12-28 | International Business Machines Corporation | Method and process for co-existing versions of standards in an abstract and physical data environment |
US7739680B1 (en) | 2005-07-21 | 2010-06-15 | Sprint Communications Company L.P. | Application server production software upgrading with high availability staging software |
US7970745B2 (en) * | 2006-06-21 | 2011-06-28 | Oracle International Corp | Schema version management for database management |
US9477462B2 (en) * | 2008-01-16 | 2016-10-25 | Oracle International Corporation | System and method for software product versioning packaging, distribution, and patching |
US9275085B2 (en) * | 2008-05-05 | 2016-03-01 | Hewlett Packard Enterprise Development Lp | Data processing system and method |
US8260876B2 (en) * | 2009-04-03 | 2012-09-04 | Google Inc. | System and method for reducing startup cost of a software application |
US8108612B2 (en) * | 2009-05-15 | 2012-01-31 | Microsoft Corporation | Location updates for a distributed data store |
US8244698B2 (en) | 2010-07-23 | 2012-08-14 | Google Inc. | Encoding a schema version in table names |
-
2010
- 2010-07-23 US US12/842,771 patent/US8244698B2/en active Active
-
2011
- 2011-07-20 WO PCT/US2011/044706 patent/WO2012012551A1/en active Application Filing
- 2011-07-20 EP EP11738562.5A patent/EP2596442B1/en active Active
- 2011-07-20 CN CN201180036085.3A patent/CN103109290B/en active Active
- 2011-07-20 KR KR1020137001742A patent/KR101469393B1/en active IP Right Grant
- 2011-09-30 US US13/249,474 patent/US8244699B2/en active Active
-
2012
- 2012-07-31 US US13/563,465 patent/US10067956B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN101438261A (en) * | 2006-05-05 | 2009-05-20 | 微软公司 | Techniques to perform gradual upgrades |
CN101178684A (en) * | 2006-11-06 | 2008-05-14 | 中兴通讯股份有限公司 | Symbol locating method of embedded system |
US20100145962A1 (en) * | 2008-12-04 | 2010-06-10 | General Electric Company | Providing processing instructions for updating schema |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN107291790A (en) * | 2016-03-31 | 2017-10-24 | Ls 产电株式会社 | The method of DB between the duplexing EMS Server of management |
CN107291790B (en) * | 2016-03-31 | 2022-04-15 | Ls 产电株式会社 | Method for managing DB between duplex EMS servers |
CN111198711A (en) * | 2020-01-13 | 2020-05-26 | 陕西心像信息科技有限公司 | Collection version control method and system based on MongoDB |
CN111198711B (en) * | 2020-01-13 | 2023-02-28 | 陕西心像信息科技有限公司 | Collection version control method and system based on MongoDB |
Also Published As
Publication number | Publication date |
---|---|
KR20130054325A (en) | 2013-05-24 |
KR101469393B1 (en) | 2014-12-04 |
US10067956B2 (en) | 2018-09-04 |
CN103109290B (en) | 2016-12-28 |
WO2012012551A1 (en) | 2012-01-26 |
US8244698B2 (en) | 2012-08-14 |
EP2596442B1 (en) | 2019-09-11 |
EP2596442A1 (en) | 2013-05-29 |
US20120023143A1 (en) | 2012-01-26 |
US20120023080A1 (en) | 2012-01-26 |
US8244699B2 (en) | 2012-08-14 |
US20120296884A1 (en) | 2012-11-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
CN103109290A (en) | Encoding a schema version in table names | |
US20210149656A1 (en) | Offline capabilities for live applications in a cloud collaboration platform | |
US10445525B2 (en) | Data privacy management system and method | |
KR101434062B1 (en) | Installing applications based on a seed application from a separate device | |
US10848496B2 (en) | System and method for secure individual identification across multiple disparate entities | |
US20180276304A1 (en) | Advanced computer implementation for crawling and/or detecting related electronically catalogued data using improved metadata processing | |
US20170102925A1 (en) | Automatch process and system for software development kit for application programming interface | |
US7933871B2 (en) | Discovering and updating templates | |
US11064053B2 (en) | Method, apparatus and system for processing data | |
US20090234880A1 (en) | Remote storage and management of binary object data | |
CN105283847B (en) | Versions of data control is locally stored | |
CN112434059B (en) | Data processing method, data processing device, computer equipment and storage medium | |
CN103988200A (en) | Lightweight framework for web applications | |
CN110457311A (en) | Automatically generate method, server and the storage medium of reconciliation file | |
US20130198154A1 (en) | Method and system for managing database applications | |
Jordan | Practical Neo4j | |
US8805901B1 (en) | Geographically distributed file system | |
US20180157686A1 (en) | System and method for datastore management framework | |
US20150162956A1 (en) | Near field communication based data transfer | |
CN114968917A (en) | Method and device for rapidly importing file data | |
US20210035012A1 (en) | Reducing complexity of implementing machine learning models in software systems | |
US20190317976A1 (en) | Geolocation based reusable sign riders | |
US20120016900A1 (en) | Identification of third party pim repositories storing a user's contact information | |
CN112883009B (en) | Method and device for processing data | |
Varanasi et al. | Beginning QuickPoll Application |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
C06 | Publication | ||
PB01 | Publication | ||
C10 | Entry into substantive examination | ||
SE01 | Entry into force of request for substantive examination | ||
C14 | Grant of patent or utility model | ||
GR01 | Patent grant | ||
CP01 | Change in the name or title of a patent holder | ||
CP01 | Change in the name or title of a patent holder |
Address after: American CaliforniaPatentee after: Google limited liability companyAddress before: American CaliforniaPatentee before: Google Inc. |