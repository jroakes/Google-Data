US7359318B2 - Method and systems for ordered dynamic distribution of packet flows over network processing means - Google Patents
Method and systems for ordered dynamic distribution of packet flows over network processing means Download PDFInfo
- Publication number
- US7359318B2 US7359318B2 US10/506,101 US50610104A US7359318B2 US 7359318 B2 US7359318 B2 US 7359318B2 US 50610104 A US50610104 A US 50610104A US 7359318 B2 US7359318 B2 US 7359318B2
- Authority
- US
- United States
- Prior art keywords
- network processor
- packet
- packets
- processed
- identifier
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/12—Avoiding congestion; Recovering from congestion
- H04L47/122—Avoiding congestion; Recovering from congestion by diverting traffic away from congested entities
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
- H04L67/1004—Server selection for load balancing
- H04L67/1008—Server selection for load balancing based on parameters of servers, e.g. available memory or workload
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/12—Avoiding congestion; Recovering from congestion
- H04L47/125—Avoiding congestion; Recovering from congestion by balancing the load, e.g. traffic engineering
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/24—Traffic characterised by specific attributes, e.g. priority or QoS
- H04L47/2441—Traffic characterised by specific attributes, e.g. priority or QoS relying on flow classification, e.g. using integrated services [IntServ]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/24—Traffic characterised by specific attributes, e.g. priority or QoS
- H04L47/2483—Traffic characterised by specific attributes, e.g. priority or QoS involving identification of individual flows
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L47/00—Traffic control in data switching networks
- H04L47/10—Flow control; Congestion control
- H04L47/34—Flow control; Congestion control ensuring sequence integrity, e.g. using sequence numbers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
Definitions
- the present invention relates to the field of network processing where packets traversing a packet switching network are analyzed by network processing means, and more specifically to a method and systems for dynamically distributing packet flows over multiple network processing means and recombining packet flows after processing while keeping packet order, even for traffic wherein an individual flow exceeds the performance capabilities of a single network processing means.
- packets traversing switching network are generally analyzed by network processors that execute functions on the packets including routing, segmentation and re-assembly, filtering and virus scanning, to increase performance, security and service quality.
- network processors that execute functions on the packets including routing, segmentation and re-assembly, filtering and virus scanning, to increase performance, security and service quality.
- network processors may be required to execute on packets, and the increasing rate of bandwidth and packet rate transmission increase in relation to the rate of increase of network processor processing power, it is essential for devices and methods to increase the overall processing performance of network processors accordingly.
- a common method for achieving higher processing performance than a single processor or network processor can provide consists in parallel processing, where multiple processors operate in parallel. Such multiple processors may be considered as a single network processor of higher speed.
- Dynamic load balancing is commonly used in the field of computational parallel processing, dealing with three general computing entities: computations, tasks and data. In these cases, dynamic load balancing tries to find the mapping of computations, tasks or data, to computers that results in each computer having an approximately equal amount of work in order to reduce run time and increase the overall efficiency of a computation.
- U.S. patent application Ser. No. 09/551,049 assigned to IBM Corporation and filed before the United States Patent and Trademark Office on Apr. 18, 2000 describes a real-time load-balancing system for distributing a sequence of incoming data packets emanating from a high speed communication line to a plurality of processing means, each operating at a capacity that is lower than the capacity of the high speed communication line.
- the system comprises parser means capable of extracting a configurable set of classifier bits from the incoming packets for feeding into compression means.
- the compression means are capable of reducing a bit pattern of length K to a bit pattern having a length L which is a fraction of K.
- This system further comprises a pipeline block for delaying incoming packets until a load balancing decision is found, and an inverse demultiplexer for receiving a port identifier output from said compression means as selector and for directing pipelined packets to the appropriate output port.
- FIG. 1 depicts a network processing system illustrating the use of a sequenced load balancer according to the invention.
- FIG. 2 illustrates an architecture example of the system of the invention for dynamically distributing packet flows over network processing means.
- FIG. 3 illustrates the content of balance history memory.
- FIG. 4 describes a network switching system comprising processing systems based on sequenced load balancers according to the invention.
- FIG. 1 depicts a network processing system illustrating the use of a sequenced load balancer according to the invention to distribute the traffic flows of an aggregate high-speed link onto a multiplicity of independent network processing entities.
- the network processing system comprises a sequenced load balancer device 100 according to the invention and four independent network processors A to D, referred to as 110 - 1 to 110 - 4 , respectively.
- sequenced load balancer device 100 may be connected to more or less than four network processors, this system scheme being described for sake of illustration.
- a high-speed link consisting in incoming and outgoing ports (generically referred to as 120 and 130 respectively) transmits/receives packet flows to/from sequenced load balancer device 100 so as to exchange data with a network or a network device such as a switching fabric, not represented for sake of clarity.
- incoming and outgoing ports 120 -i and 130 -j may be connected to different types of networks or network devices depending upon requested data processing, e.g. routing or filtering.
- Network processing system illustrated on FIG. 1 allows to process packet flows of a high-speed link with independent network processors having packet processing rates being less than the packet transmission rate of the high-speed link.
- sequenced load balancer device 100 analyzes the incoming packet flows and dynamically distributes packets to the connected independent network processors. After processing, packets are recombined in sequenced load balancer 100 so as to be transmitted back to the high-speed link, preserving ordering of all packet flows.
- each incoming packet is analyzed so as to determine corresponding flow identifier and a network processing means is assigned to process this incoming packet according to network processing means load.
- a balance history is created per flow to memorize the sequence of used network processing means and the corresponding number of processed packets.
- each processed packet is analyzed so as to determine corresponding flow identifier and the corresponding balance history is used to respect packet ordering.
- Processed packets may be bufferized if earlier packets of the same flow have not been yet processed. After packets have been transmitted back to the high-speed link, balance history is updated and the buffer is released.
- the algorithm that handles processed data comprises the steps of:
- FIG. 2 illustrates the architecture of a sequenced load balancer device 100 for dynamically distributing packet flows over network processing means according to the method described above.
- sequenced load balancer device 100 may be connected to more or less than four network processors, this implementation example being described for sake of illustration.
- the receive side of sequenced load balancer device 100 consists of Time Division Multiplexing (TDM) unit 200 , header parsing unit 205 , hash function unit 210 , balance history memory 215 , demultiplexer unit 220 , pipeline unit 225 , FIFO memory units 230 - 1 to 230 - 4 and current network processor determining unit 235 .
- TDM Time Division Multiplexing
- Each packet is routed to one of the several network processors 110 - 1 to 110 - 4 , based on the packet type, which flow the packet is part of, and the amount of current load on each of the network processors 110 - 1 to 110 - 4 .
- Incoming packet headers are parsed in header parsing unit 205 so as to extract flow identifiers that are transmitted to hash function unit 210 wherein flow identifiers are hashed to generate different identifiers, referred to as flow bucket identifiers.
- Hash function unit 210 ascertains that packets belonging to a same flow are identified with identical flow bucket.
- the hashing function will be configured such that the number of flow bucket identifiers is significantly less than the number of possible flow identifiers, but this is not a requirement of the invention.
- the parser unit 205 should be capable of providing flexibility in terms of number and types of extracted flow identifiers and of ensuring a broad applicability for various protocols.
- a preferred embodiment of the parser unit 205 is a re-configurable finite state machine device.
- Flow buckets are used as indexes in balance history memory 215 wherein a current network processor identifier is assigned to current packet.
- the identifiers of all the network processors having handled packets of a same flow and the associated number of packets processed are stored, in processing time order, with associated flow bucket in balance history memory 215 .
- FIG. 3 illustrates the content of balance history memory 215 wherein each row of the table represents the processing history of a flow.
- First column referred to as 300 , identifies the flows by means of flow buckets as discussed above, while other columns represent network processor identifier and associated number of processed packets, referred to as 305 -i and 310 -i respectively.
- column 305 - 1 represents the last current network processor identifier for each active flow and column 310 - 1 the associated number of processed packets
- column 305 - 2 represents the previous current network processor identifier for each active flow and column 310 - 2 the associated number of processed packets, and so on.
- An active flow bucket is defined as a flow bucket wherein at least one packet has not been transmitted back to the output port 130 .
- 125 packets belonging to flow having a flow bucket equal to 6302 are being processed by current network processor having identifier equal to 1 and 265 packets of this flow bucket have been previously processed by network processor having identifier equal to 2.
- current network processor identifier is transmitted to demultiplexer unit 220 so that current received packet being delayed in pipeline unit 225 is stored in the FIFO memory ( 230 - 1 to 230 - 4 ) corresponding to current network processor identifier, from which it is transmitted to the current network processor.
- Current network processor determining unit 235 set current network processor by determining activity of network processors 110 - 1 to 110 - 4 through load analysis of FIFO memories 230 - 1 to 230 - 4 by means of standard statistical techniques. For example, a network processor may be set as current network processor each time the loading of its associated FIFO memory is less than a predetermined threshold.
- Another example of determining current network processor consists in selecting the network processor that associated FIFO memory is just about to be empty, in such case the sequenced load balancer will not be switching between network processors very often. It is also possible to use flow histories to optimize selection of current network processor.
- sequenced load balancer 100 may be connected to network processors having different processing powers without any modification since even if a network processor having a greater processing power than others empties its associated FIFO memory faster, sequenced load balancer 100 selects it more often as current network processor because current network processor is determined according to FIFO memory loading.
- Another solution requiring modification of sequenced load balancer 100 consists in storing the processing power of each network processor in current network processor determining unit 235 with associated network processor identifier. Processing power and associated network processor identifier are used in conjunction with FIFO memory ( 230 - 1 to 230 - 4 ) load to determine current network processor so as to optimize loading of network processing means.
- the transmit side of sequenced load balancer device 100 consists of multiplexer unit 240 , pipeline unit 245 , demultiplexer unit 250 , packet memory 255 , multiplexer unit 260 and switching unit 285 .
- incoming packets are stored in packet memory 255 or transmitted to multiplexer unit 260 to be outputted through switching unit 285 .
- Switching unit 285 analyzes packet headers to determine outgoing port 130 -j of high-speed link to which packets have to be sent.
- Sequenced load balancer device 100 further comprises a data flow control to recombine packets after processing, comprising header parsing unit 205 , hash function unit 210 , balance history memory 215 , packet queue and dequeue unit 265 , update history unit 270 , update queue pointer unit 275 and queue pointer memory 280 .
- header parsing unit 205 , hash function unit 210 and balance history memory 215 are used to analyze packets before and after processing. After packets have been processed in network processors 110 - 1 to 110 - 4 , they are transmitted to header parsing unit 205 through multiplexer unit 240 . Processed packet headers are parsed so as to extract flow identifiers that are transmitted to hash function unit 210 wherein flow identifiers are hashed to generate flow buckets.
- Flow bucket identifier is used as an index in balance history memory 215 to access balance history that is used by packet queue and dequeue unit 265 to determine whether a processed packet has to be transferred to outgoing port 130 -j or needs to be memorized in packet memory 255 .
- Flow bucket identifier is also used as an index to store packet pointer in queue pointer memory 280 when a processed packet needs to be stored in or retrieved from packet memory 255 .
- Packet queue and dequeue unit 265 analyzes balance history received from balance history memory 215 to compare the identifier of network processor having processed current packet with the one of the earliest network processor of the flow bucket of which current packet is part. If they are not equal, current processed packet is stored in packet memory 255 and corresponding pointer is stored in queue pointer memory 280 according to current processed packet flow bucket and the identifier of the network processor having processed current processed packet. If identifiers are equal, current processed packet is directly transmitted to outgoing port 130 -j and the packet queue and dequeue unit 265 decreases the number of processed packets associated to the earliest network processor identifier through update history unit 270 .
- the identifier of the earliest network processing means is also updated, it is set to the next in the balance history and packets queued in packet memory corresponding to the new earliest network processing means identifier may be transmitted to the high-speed link and then removed from the packet memory.
- Time Division Multiplexing unit 200 is not required.
- switching unit 285 is not required.
- FIG. 4 illustrates the use of several sequenced load balancers 100 , as described above, in a high-end switching or router system 400 .
- Such system typically comprises at least one switching fabric 410 , having a plurality of high-speed links, e.g. 64 ⁇ 64 port switch with each port capable of sustaining a full duplex 40 Gb/s traffic.
- four network processors are required to handle a single half duplex high-speed link, i.e. an incoming or outgoing port.
- switching system 400 comprises as many sequenced load balancers, generically referred to as 100 -r, as half duplex links wherein each sequenced load balancer 100 -r connects four network processors, NP Ar, NP Br, NP Cr and NP Dr.
- the shape of sequenced load balancers is shown in “U” shape in order to simplify the overall drawing and to clarify how the aggregation of sequenced load balancers and network processing means appears to the rest of the system as a single network processing means of higher power.
- Packets of this flow are dynamically distributed over network processors NP A 1 , NP B 1 , NP C 1 and NP D 1 , according to the method of the invention, to be processed. Then, packets are recombined in sequenced load balancer 100 - 1 , keeping packet order, to be transmitted to switching fabric 410 through outgoing port 130 -t. Packets are routed in switching fabric 410 and transmitted, for example, to incoming port 120 -u of sequenced load balancer 100 - 2 .
- packets are dynamically distributed over network processors NP A 2 , NP B 2 , NP C 2 and NP D 2 of sequenced load balancer 100 - 2 , still according to the method of the invention, to be processed before being recombined in sequenced load balancer 100 - 2 , still keeping packet order, to be transmitted to a network or network device (not represented) through outgoing port 130 -v.
Abstract
Description
-
- i) keeping each flow on only one channel and accepting that a single flow cannot use more bandwidth than each channel can support,
- ii) reordering the received packets after mis-ordering and accept the resulting waste of processing bandwidth, and
- iii) splitting packets up into fixed transfer units which the network processing means can process in a predictable period of time.
-
- parsing the header of an incoming packet to extract flow identifier;
- creating a balance history associated to said flow identifier if it does not exist;
- analyzing network processing means loading and setting a current network processing means;
- if the identifier of said current network processing means is different than the one having previously processed at least one packet of the same flow, memorizing said identifier of said current network processing means in said balance history and setting to one the number of packets processed by said current network processing means in said balance history;
- else if the identifier of said current network processing means is the same as the one having previously processed at least one packet of the same flow, increasing the number of packets processed by said current network processing means in said balance history; and,
- routing said incoming packet to said current network processing means,
- and by a method to recombine packets processed by a plurality of network processing means according to the method as described above, comprising the steps of:
- parsing the header of a processed packet to extract flow identifier;
- getting the earliest network processing means identifier and associated number of processed packets from the balance history related to said flow identifier;
- if said processed packet has not been processed by the earliest network processing means, it is stored in a packet memory;
- else if said processed packet has been processed by the earliest network processing means, said processed packet is transmitted to the high-speed link, said associated number of processed packets is decremented and, if said associated number of processed packets reaches zero, earliest network processing means identifier changes to the next in said balance history and packets queued in said packet memory corresponding to the new earliest network processing means identifier may be transmitted to the high-speed link and then removed from said packet memory.
-
- parsing the header of an incoming packet to extract a flow identifier;
- hashing the extracted flow identifier to generate a different identifier, referred to as a flow bucket identifier;
- determining the current network processing identifier by analyzing the load of network processing means;
- if the current network processing identifier is the same as the one having previously processed at least one packet of the same flow, increasing the number of packets being processed by the current network processing means recorded in the balance history memory;
- else if the current network processing identifier is different than the one having previously processed at least one packet of the same flow, memorizing the current network processing identifier in the balance history memory and setting to one the number of packets processed by the current network processing means; and,
- routing packet to the current network processing means.
-
- parsing the header of a processed packet to extract the flow identifier;
- hashing the extracted flow identifier to generate the corresponding flow bucket identifier;
- getting the earliest network processing means identifier and associated number of processed packets for that flow bucket from the balance history memory;
- if packet has not been processed by the earliest network processing means recorded for its flow bucket, it is stored in a packet memory;
- else if packet has been processed by the earliest network processing means, it is transmitted to the high-speed link, the associated number of processed packets is decremented and, if this associated number of processed packets reaches zero, earliest network processing means identifier changes to the next in the balance history and packets queued in packet memory corresponding to the new earliest network processing means identifier may be transmitted to the high-speed link and then removed from the packet memory.
Claims (10)
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP02368023 | 2002-03-05 | ||
EP02368023.4 | 2002-03-05 | ||
PCT/EP2003/003249 WO2003075520A2 (en) | 2002-03-05 | 2003-02-27 | Method and system for ordered dynamic distribution of packet flows over network processors |
Publications (2)
Publication Number | Publication Date |
---|---|
US20050152354A1 US20050152354A1 (en) | 2005-07-14 |
US7359318B2 true US7359318B2 (en) | 2008-04-15 |
Family
ID=27771965
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US10/506,101 Expired - Fee Related US7359318B2 (en) | 2002-03-05 | 2003-02-27 | Method and systems for ordered dynamic distribution of packet flows over network processing means |
Country Status (9)
Country | Link |
---|---|
US (1) | US7359318B2 (en) |
EP (1) | EP1483870B1 (en) |
JP (1) | JP3809873B2 (en) |
KR (1) | KR100570137B1 (en) |
CN (1) | CN100440851C (en) |
AT (1) | ATE308185T1 (en) |
AU (1) | AU2003221530A1 (en) |
DE (1) | DE60302045T2 (en) |
WO (1) | WO2003075520A2 (en) |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080198867A1 (en) * | 2003-10-14 | 2008-08-21 | Broadcom Corporation | Hash and Route Hardware with Parallel Routing Scheme |
US20110286422A1 (en) * | 2005-06-03 | 2011-11-24 | Koninklijke Philips Electronics N.V. | Electronic device and method of communication resource allocation |
US20130188494A1 (en) * | 2012-01-23 | 2013-07-25 | Cisco Technology, Inc. | Dynamic load balancing without packet reordering |
US8830838B2 (en) | 2011-09-14 | 2014-09-09 | Hewlett-Packard Development Company, L.P. | Node interface indicators |
Families Citing this family (22)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7440404B2 (en) * | 2004-02-24 | 2008-10-21 | Lucent Technologies Inc. | Load balancing method and apparatus for ethernet over SONET and other types of networks |
US7369557B1 (en) * | 2004-06-03 | 2008-05-06 | Cisco Technology, Inc. | Distribution of flows in a flow-based multi-processor system |
US7660897B2 (en) * | 2004-08-03 | 2010-02-09 | International Business Machines Corporation | Method, system, and program for distributing application transactions among work servers |
US7840731B2 (en) * | 2004-08-25 | 2010-11-23 | Cisco Technology, Inc. | Accelerated data switching on symmetric multiprocessor systems using port affinity |
CN100393162C (en) * | 2004-10-10 | 2008-06-04 | 中兴通讯股份有限公司 | Method of sector loading balance in time-division group network system |
DE602005018549D1 (en) * | 2005-05-04 | 2010-02-04 | Telecom Italia Spa | METHOD AND SYSTEM FOR PROCESSING PACKAGE FLUIDS AND COMPUTER PROGRAM PRODUCT THEREFOR |
CN100459575C (en) * | 2005-11-10 | 2009-02-04 | 中国科学院计算技术研究所 | A method to maintain in/out sequence of IP packet in network processor |
JP4776412B2 (en) * | 2006-03-23 | 2011-09-21 | エヌ・ティ・ティ・コミュニケーションズ株式会社 | Packet transfer apparatus, packet transfer method, and program |
US7792102B2 (en) * | 2006-03-31 | 2010-09-07 | Intel Corporation | Scaling egress network traffic |
JP4630262B2 (en) * | 2006-11-21 | 2011-02-09 | 日本電信電話株式会社 | Cache system, cache device, packet processing device, cache method, packet processing method, cache program, and packet processing program |
KR100843184B1 (en) * | 2006-12-08 | 2008-07-02 | 한국전자통신연구원 | Apparatus for selecting optimal packet-transmitting path and method therefor |
KR100896784B1 (en) * | 2007-06-05 | 2009-05-11 | 나리넷(주) | High Performance Packet Processing System with SPI Switching among Network Processors |
KR100899526B1 (en) * | 2007-09-07 | 2009-05-27 | 삼성네트웍스 주식회사 | Apparatus and Method for Processing Packet using Multi-Processor |
JP5081847B2 (en) * | 2009-02-20 | 2012-11-28 | 株式会社日立製作所 | Packet processing apparatus and packet processing method using multiprocessor |
JP5325731B2 (en) * | 2009-09-30 | 2013-10-23 | 株式会社日立製作所 | Network relay device |
JP5471581B2 (en) | 2010-02-23 | 2014-04-16 | 富士通株式会社 | Monitoring program, monitoring device, and monitoring method |
US8745264B1 (en) * | 2011-03-31 | 2014-06-03 | Amazon Technologies, Inc. | Random next iteration for data update management |
US8654643B2 (en) * | 2011-07-27 | 2014-02-18 | Ixia | Wide field indexing for packet tracking |
WO2014010156A1 (en) * | 2012-07-13 | 2014-01-16 | 日本電気株式会社 | Aggregated metering device, aggregated metering method, and memory medium containing aggregated metering program |
EP2874362B1 (en) | 2013-11-13 | 2019-10-02 | Napatech A/S | A system and a method of analysing a plurality of data packets |
US9467384B2 (en) * | 2013-12-05 | 2016-10-11 | Mediatek Singapore Pte. Ltd. | Packet forwarding apparatus and method using flow subgroup based path selection for dynamic load balancing |
US10764179B2 (en) * | 2017-07-19 | 2020-09-01 | Corsa Technology Inc. | Look up table based match action processor for data packets |
Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO1999007180A2 (en) | 1997-07-14 | 1999-02-11 | Nokia Networks Oy | Switching fabric arrangement with re-sequencing memory |
WO2001005086A2 (en) | 1999-07-08 | 2001-01-18 | Broadcom Corporation | Distributed processing in a cryptography acceleration chip |
US20020003804A1 (en) * | 1997-01-31 | 2002-01-10 | Gisli Hjalmtysson | Architecture for lightweight signaling in ATM networks |
US20040062246A1 (en) * | 1997-10-14 | 2004-04-01 | Alacritech, Inc. | High performance network interface |
US20040228274A1 (en) * | 1999-06-02 | 2004-11-18 | Hitachi, Ltd. | Bandwidth monitoring method and its device |
US20060159019A1 (en) * | 2001-05-04 | 2006-07-20 | Slt Logic Llc | System and method for policing multiple data flows and multi-protocol data flows |
US20070091893A1 (en) * | 2001-07-02 | 2007-04-26 | Hitachi, Ltd. | Packet forwarding apparatus with packet controlling functions |
US20070110045A1 (en) * | 2000-09-06 | 2007-05-17 | Juniper Networks, Inc. | Packet switching equipment and switching control method |
Family Cites Families (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6661794B1 (en) * | 1999-12-29 | 2003-12-09 | Intel Corporation | Method and apparatus for gigabit packet assignment for multithreaded packet processing |
-
2003
- 2003-02-27 CN CNB038013681A patent/CN100440851C/en not_active Expired - Fee Related
- 2003-02-27 AT AT03717246T patent/ATE308185T1/en not_active IP Right Cessation
- 2003-02-27 DE DE60302045T patent/DE60302045T2/en not_active Expired - Lifetime
- 2003-02-27 JP JP2003573835A patent/JP3809873B2/en not_active Expired - Fee Related
- 2003-02-27 KR KR1020047011870A patent/KR100570137B1/en not_active IP Right Cessation
- 2003-02-27 WO PCT/EP2003/003249 patent/WO2003075520A2/en active IP Right Grant
- 2003-02-27 US US10/506,101 patent/US7359318B2/en not_active Expired - Fee Related
- 2003-02-27 EP EP03717246A patent/EP1483870B1/en not_active Expired - Lifetime
- 2003-02-27 AU AU2003221530A patent/AU2003221530A1/en not_active Abandoned
Patent Citations (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020003804A1 (en) * | 1997-01-31 | 2002-01-10 | Gisli Hjalmtysson | Architecture for lightweight signaling in ATM networks |
WO1999007180A2 (en) | 1997-07-14 | 1999-02-11 | Nokia Networks Oy | Switching fabric arrangement with re-sequencing memory |
US20040062246A1 (en) * | 1997-10-14 | 2004-04-01 | Alacritech, Inc. | High performance network interface |
US20040228274A1 (en) * | 1999-06-02 | 2004-11-18 | Hitachi, Ltd. | Bandwidth monitoring method and its device |
WO2001005086A2 (en) | 1999-07-08 | 2001-01-18 | Broadcom Corporation | Distributed processing in a cryptography acceleration chip |
US20070110045A1 (en) * | 2000-09-06 | 2007-05-17 | Juniper Networks, Inc. | Packet switching equipment and switching control method |
US20060159019A1 (en) * | 2001-05-04 | 2006-07-20 | Slt Logic Llc | System and method for policing multiple data flows and multi-protocol data flows |
US20070091893A1 (en) * | 2001-07-02 | 2007-04-26 | Hitachi, Ltd. | Packet forwarding apparatus with packet controlling functions |
Non-Patent Citations (1)
Title |
---|
Werner Bux, Wolfgang E. Denzel, Ton Engerbersen, Andreas Herkersdorf and Ronald P Luijten, Technologies and Building Blocks for Fast Packet Forwarding, pp. 70-76, IEEE Communications Magazine, Jan. 2001. |
Cited By (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20080198867A1 (en) * | 2003-10-14 | 2008-08-21 | Broadcom Corporation | Hash and Route Hardware with Parallel Routing Scheme |
US20110286422A1 (en) * | 2005-06-03 | 2011-11-24 | Koninklijke Philips Electronics N.V. | Electronic device and method of communication resource allocation |
US8830838B2 (en) | 2011-09-14 | 2014-09-09 | Hewlett-Packard Development Company, L.P. | Node interface indicators |
US20130188494A1 (en) * | 2012-01-23 | 2013-07-25 | Cisco Technology, Inc. | Dynamic load balancing without packet reordering |
US8705366B2 (en) * | 2012-01-23 | 2014-04-22 | Cisco Technology, Inc. | Dynamic load balancing without packet reordering |
Also Published As
Publication number | Publication date |
---|---|
DE60302045T2 (en) | 2006-07-20 |
KR20040086325A (en) | 2004-10-08 |
AU2003221530A1 (en) | 2003-09-16 |
EP1483870B1 (en) | 2005-10-26 |
CN100440851C (en) | 2008-12-03 |
US20050152354A1 (en) | 2005-07-14 |
JP2005519530A (en) | 2005-06-30 |
KR100570137B1 (en) | 2006-04-12 |
WO2003075520A3 (en) | 2004-03-04 |
WO2003075520A2 (en) | 2003-09-12 |
JP3809873B2 (en) | 2006-08-16 |
ATE308185T1 (en) | 2005-11-15 |
DE60302045D1 (en) | 2005-12-01 |
EP1483870A2 (en) | 2004-12-08 |
CN1579075A (en) | 2005-02-09 |
AU2003221530A8 (en) | 2003-09-16 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US7359318B2 (en) | Method and systems for ordered dynamic distribution of packet flows over network processing means | |
US7283538B2 (en) | Load balanced scalable network gateway processor architecture | |
US6768716B1 (en) | Load balancing system, apparatus and method | |
US20050100035A1 (en) | Adaptive source routing and packet processing | |
AU750787B2 (en) | Arbitration method and apparatus for a non-blocking switch | |
US7362761B2 (en) | Packet processing apparatus | |
US7499470B2 (en) | Sequence-preserving deep-packet processing in a multiprocessor system | |
US6922408B2 (en) | Packet communication buffering with dynamic flow control | |
US20030074473A1 (en) | Scalable network gateway processor architecture | |
US6788686B1 (en) | Method of maintaining packet order in multipath transmission systems having non-uniform traffic splitting | |
US7586909B1 (en) | Striping algorithm for switching fabric | |
EP0637152A1 (en) | Method and apparatus to speed up the path selection in a packet switching network | |
US9270601B2 (en) | Path resolution for hierarchical load distribution | |
EP1440545B1 (en) | Method and system for packet ordering for parallel packet transform processing | |
US20140016465A1 (en) | Method and architecture for a scalable application and security switch using multi-level load balancing | |
US7911953B1 (en) | Multilink traffic shaping | |
CN102970142B (en) | A kind of VPN device is adding the method and system of concurrent encryption and decryption under close snap ring border | |
CN103370911A (en) | Flow communication system | |
CN111385217A (en) | Switched fabric data packet flow reordering | |
CN114006863A (en) | Multi-core load balancing cooperative processing method and device and storage medium | |
US7020153B2 (en) | Method and system for processing data packets | |
US20200314014A1 (en) | Advanced load balancing based on bandwidth estimation | |
JP2000083055A (en) | Router | |
JP4252003B2 (en) | Transmission equipment | |
US8625624B1 (en) | Self-adjusting load balancing among multiple fabric ports |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ABEL, FRANCOIS;BENNER, ALAN;DITTMANN, GERO;AND OTHERS;REEL/FRAME:020155/0659;SIGNING DATES FROM 20040920 TO 20040924 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0610Effective date: 20170929 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20200415 |