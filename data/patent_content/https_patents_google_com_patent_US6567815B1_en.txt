US6567815B1 - Technique of clustering and compaction of binary trees - Google Patents
Technique of clustering and compaction of binary trees Download PDFInfo
- Publication number
- US6567815B1 US6567815B1 US09/629,659 US62965900A US6567815B1 US 6567815 B1 US6567815 B1 US 6567815B1 US 62965900 A US62965900 A US 62965900A US 6567815 B1 US6567815 B1 US 6567815B1
- Authority
- US
- United States
- Prior art keywords
- index
- node
- memory
- value
- array
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/901—Indexing; Data structures therefor; Storage structures
- G06F16/9027—Trees
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99932—Access augmentation or optimizing
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99942—Manipulating data structure, e.g. compression, compaction, compilation
Definitions
- This invention relates to a technique for efficient storage of recursive data structures in computer memory. More particularly this invention relates to improvements in the arrangement of binary tree elements in a cache computer memory and improved performance of binary tree operations.
- Binary trees are widely employed data structures in practical computer applications, as they enable the rapid access of keyed data sets. Search binary trees, an example of which is seen in FIG. 1, are particularly useful for rapid localization of data.
- a search binary tree 10 satisfies the following conditions:
- Every node for example node 12 , has a unique key 14 .
- All keys in the left subtree, indicated by the dotted line 16 are smaller than the key 18 in the root 20 .
- the left and right subtrees are also binary search trees.
- Known common operations on binary trees include the insert operation, which inserts a new key into the set, the delete operation, which deletes a key from the set, and the traversal of the tree.
- the traversal operation outputs the keys in a specific order. Forms of traversal are the inorder traversal, preorder traversal, and postorder traversal.
- Another important and relevant operation is the membership operation, which checks if a given key belongs to the set.
- a binary tree is a dynamic data structure, in which nodes are allocated during runtime using the heap-allocation mechanism found in languages like C and C++.
- each node of the binary tree contains a key, and two pointers to descendant nodes.
- two additional pointers are kept in each node: a pointer to the data associated with the key, particularly if the data is large, and a pointer to the ancestor node.
- the memory space occupied by the binary tree can considerably exceed the original memory space needed for the data set itself. For example, if the size of each key and pointer is eight bytes, then the size of each node is 24 bytes—three times as large as the original key. It will be evident that eliminating the pointers saves more than 50% of the memory store for the binary tree.
- cache misses Another alternative to reducing cache misses is to maintain the entire binary tree in the cache during the program lifetime. Cache misses would only occur the first time the tree is accessed. Generally, however, this is not practical. If the tree is large, it will not fit into the cache. Furthermore the availability of the cache to other processes would be reduced, which might decrease the performance of the program itself, and generally degrade the performance of other processes executing on the computer.
- a tree structure in a memory by the steps of: defining a tree data structure, wherein a parent node in the tree has a predetermined number of child nodes; defining an indexed array of data elements for storage thereof in a memory, wherein each element of the array holds a node of the tree; associating a parent node of the tree with a first index of the array, and associating each child node of the parent node with second indices of the array, wherein predefined individual functional relationships exist between the first index and each of the second indices; and mapping the nodes indexed by the first index and by the second indices to a predefined area of a memory which can be efficiently accessed.
- each node of the tree is assigned a unique position or index inside the array. From the functional arrangements existing therebetween, and given the position of any node it is easy to calculate the position of a parent or a child node.
- triplet-tiles formed by a parent and its children are positioned consecutively in the array.
- the memory is a cache memory
- the predefined area of the memory is a cache line.
- the predefined area of the memory is a page.
- the tree is traversed by accessing one of the nodes in the predefined area of the memory according to the index associated therewith, calculating an index of a parent node or a child node of the accessed node according to the functional relationship therebetween, and then accessing the node that is associated with the calculated index.
- the invention provides a method of arranging a binary tree structure in a memory, which is performed by: defining a binary tree data structure which has a plurality of nodes, including at least a parent node, a first child node and a second child node; and defining an indexed array of data elements for storage thereof in a memory, wherein each data element holds a node of the tree; associating a parent node of the tree with a first index of the array; associating a first child node of the parent node with a second index of the array; and associating a second child node of the parent node with a third index of the array.
- Predefined functional relationships exist between the first index and the second index, and between the first index and the third index.
- the nodes associated with the first index, the second index and the third index are mapped to a predefined area of a memory which can be efficiently accessed.
- the predefined area may be a cache line or a memory page.
- the first index has a value j and the predefined functional relationships are: in a first event that the value j modulo three has a value zero, then the second index has a value j+1 and the third index has a value j+2; in a second event that the value j modulo 3 has a value one, then the second index has a value 4j ⁇ 1 and the third index has a value 4j+2; and in a third event that the value j modulo 3 has a value two, then the second index has a value 4j+1 and the third index has a value 4j+4.
- the invention provides a computer software product, which is a computer-readable medium in which computer 7 program instructions are stored, which instructions, when read by a computer, cause the computer to arrange a tree structure in a memory, by executing the steps of: defining a tree data structure, wherein a parent node in the tree has a predetermined number of child nodes; defining an indexed array of data elements for storage thereof in a memory, wherein each element of the array holds a node of the tree; associating a parent node of the tree with a first index of the array; and associating each child node of the parent node with second indices of the array, wherein predefined individual functional relationships exist between the first index and each of the second indices; and mapping the nodes indexed by the first index and by the second indices to a predefined area of a memory which can be efficiently accessed.
- the memory is a cache memory
- the predefined area memory is a cache line
- the predefined area of the memory is a page.
- the computer program instructions further cause the computer to traverse the tree by executing the steps of: accessing one of the nodes in the predefined area of the memory according to the index associated therewith; calculating an index of a parent node or a child node of the accessed node according to the functional relationship therebetween; and then accessing the node that is associated with the calculated index.
- the invention provides a computer software product, which is a computer-readable medium in which computer program instructions are stored, which instructions, when read by a computer, cause the computer to arrange a binary tree structure in a memory by executing the steps of: defining a binary tree data structure having a plurality of data elements, wherein the tree data structure has a parent node, a first child node and a second child node; defining an indexed array of data elements for storage thereof in a memory, wherein each the element represents a node of the tree; associating the parent node of the tree with a first index of the array; associating the first child node of the parent node with a second index of the array; and associating the second child node of the parent node with a third index of the array, wherein predefined individual functional relationships exist between the first index and each of the second indices and third indices.
- the nodes associated with the first index, the second index and the third index are mapped to a predefined area of a memory which can
- the memory is a cache memory
- the predefined area memory is a cache line
- the predefined area of the memory is a page.
- the first index has a value j and the predefined functional relationships are: in a first event that the value j modulo three has a value zero, then the second index is a value j+1 and the third index has a value j+2; in a second event that the value j modulo 3 has a value one, then the second index has a value 4j ⁇ 1 and the third index has a value 4j+2; and in a third event that the value j modulo 3 has a value two, then the second index has a value 4j+1 and the third index has a value 4j+4.
- the invention provides a data retrieval system, including a computer in which computer program instructions are stored, which instructions cause the computer to arrange a binary tree structure in a memory by executing the steps of: defining a binary tree data structure having a plurality of data elements, wherein the tree data structure has a parent node, a first child node and a second child node; defining an indexed array of data elements for storage thereof in a memory, wherein each the element represents a node of the tree; associating the parent node of the tree with a first index of the array; associating the first child node of the parent node with a second index of the array; and associating the second child node of the parent node with a third index of the array, wherein predefined individual functional relationships exist between the first index and each of the second indices and third indices.
- the nodes associated with the first index, the second index and the third index are mapped to a predefined area of a memory which can be efficiently accessed.
- the memory is a cache memory
- the predefined area memory is a cache line
- the predefined area of the memory is a page.
- the first index has a value j and the predefined functional relationships are: in a first event that the value j modulo three has a value zero, then the second index is a value j+1 and the third index has a value j+2; in a second event that the value j modulo 3 has a value one, then the second index has a value 4j ⁇ 1 and the third index has a value 4j+2; and in a third event that the value j modulo 3 has a value two, then the second index has a value 4j+1and the third index has a value 4j+4.
- FIG. 1 is a graphical illustration of a binary tree according to the prior art
- FIG. 2 is a block diagram of a computer system having a hierarchical memory suitable for operations in accordance with the invention on a binary tree;
- FIG. 3 illustrates an arrangement according to an aspect of the invention for storing a binary tree in an array
- FIG. 4 illustrates cache memory having data stored therein in accordance with the invention
- FIG. 5 is another illustration of binary tree storage in an array according to the invention.
- FIG. 6 illustrates a balanced binary tree stored in an array according to the invention.
- FIG. 2 there is schematically shown a computer system 24 , comprising a central processing unit 26 , which operates on data stored in a hierarchical memory 28 , which includes a relatively small cache memory 30 and a larger main memory 32 .
- the cache memory 30 is directly connected to the central processing unit 26 , and has a short access time.
- the cache memory 30 can itself be comprised of a plurality of hierarchical memories. While the embodiment herein is disclosed with reference to a cache memory, the invention can be practiced with other memory structures, such as paged memories.
- the computer system 24 executes programs which operate on binary tree data structures, as will be disclosed in more detail hereinbelow.
- the binary trees are too large to be stored in the cache memory 30 , but can be accommodated in the main memory 32 .
- Those portions of the data structure immediately required by the central processing unit 26 are loaded from the cache memory 30 if available therein. Otherwise the data is first loaded into the cache memory 30 from the main memory 32 in accordance with the memory management policy of the computer system 24 .
- the access time of the main memory 32 is long, it will be evident that the system performance will be improved if the required data can be found in the cache memory 30 .
- memory space required by the pointers of a binary tree is reduced by compaction.
- FIG. 3 which illustrates a binary tree 34
- the memory space required to store the nodes 36 is reduced by the use of an array, represented by table 38 , instead of storing pointers in the nodes of the tree.
- Pointer storage is eliminated by associating an index of the array with each node.
- the value of the index of each child node has a known relationship to the index of its parent node.
- the index 44 corresponding to the data of the left child node 46 has the known value 1
- the index 48 of the right child node 50 has the known value 2.
- the arrangement for positioning the child nodes in the array with respect to their parent is as follows.
- j be the index of a node in the array and denote by j% 3 the remainder of j divided by 3, where “%” is the arithmetic modulo operator.
- indices of the left and right child nodes are respectively 4j ⁇ 1 and 4j ⁇ 2;
- the indices of the left and right child nodes are respectively 4j+1 and 4j+4.
- the index of the parent is (j ⁇ 1)/4
- each node can be regarded as belonging to exactly one triplet, and the binary tree is “tiled” by these triplets.
- the proximity of the indices that are related to the elements of a triplet implies a tendency for the elements to reside inside the same cache line in practical cache implementations.
- FIG. 4 A representation of a cache memory 58 is shown in FIG. 4, wherein the memory is organized into a plurality of cache lines 60 , 62 , and 64 . Data of the triplet defined by the dotted line 52 are clustered on cache line 60 . Similarly the data of the triplets defined by the dotted line 54 and the dotted line 56 are respectively placed on the cache line 62 and the cache line 64 . It can be seen that a traversal of the binary tree 34 can only incur a cache miss when moving from one triplet to another, and in many cases there will be a cache hit, even when accessing different triplets.
- each cache line contains three nodes of the binary tree.
- this size can hold 4 integers in most implementations.
- there are systems with longer cache lines e.g. 128 bytes, and even 256 bytes.
- the technique used for grouping nodes in groups of size 3 can be used in general to group 2 i ⁇ 1 nodes in a group. The case where i is 2 has been described above as a particular preferred embodiment.
- the strategy of cache-aware grouping of the nodes has the potential to reduce the number of cache misses by a factor of (i ⁇ 1)/i, at the price of having at most the last i levels partially filled.
- j% 3 The relatively expensive operation of calculating j% 3 can be avoided by observing that when j% 3 is zero, for example at the root node of a triplet, then, for the left child node, j% 3 will always be one. In the case of the right child node j% 3 will always be 2. Moving to another triplet resets j% 3 back to zero. Simply keeping track of the current position with respect to the root node of the current triplet provides a rapid, computationally inexpensive method of evaluating j% 3.
- binary tree 74 is stored in an array which is represented by table 76 using the scheme described above with respect to FIG. 3 .
- the binary tree 74 has a smaller height than the binary tree 34 (FIG. 3 ), and now the array shown in table 76 is sparse.
- the cells 78 , 80 having indices 4 and 5 of the array respectively are not utilized for storage of the nodes of the binary tree 74 .
Abstract
Description
Claims (32)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/629,659 US6567815B1 (en) | 2000-08-01 | 2000-08-01 | Technique of clustering and compaction of binary trees |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/629,659 US6567815B1 (en) | 2000-08-01 | 2000-08-01 | Technique of clustering and compaction of binary trees |
Publications (1)
Publication Number | Publication Date |
---|---|
US6567815B1 true US6567815B1 (en) | 2003-05-20 |
Family
ID=24523929
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/629,659 Expired - Lifetime US6567815B1 (en) | 2000-08-01 | 2000-08-01 | Technique of clustering and compaction of binary trees |
Country Status (1)
Country | Link |
---|---|
US (1) | US6567815B1 (en) |
Cited By (29)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020087596A1 (en) * | 2000-12-29 | 2002-07-04 | Steve Lewontin | Compact tree representation of markup languages |
US20030123397A1 (en) * | 2000-12-30 | 2003-07-03 | Kang-Bok Lee | Method for generating nodes in multiway search tree and search method using the same |
US6772179B2 (en) * | 2001-12-28 | 2004-08-03 | Lucent Technologies Inc. | System and method for improving index performance through prefetching |
US6978271B1 (en) * | 2000-10-31 | 2005-12-20 | Unisys Corporation | Mechanism for continuable calls to partially traverse a dynamic general tree |
US20060026386A1 (en) * | 2004-07-30 | 2006-02-02 | Microsoft Corporation | System and method for improved prefetching |
US20070130114A1 (en) * | 2005-06-20 | 2007-06-07 | Xiao-Feng Li | Methods and apparatus to optimize processing throughput of data structures in programs |
US20080155229A1 (en) * | 2006-12-21 | 2008-06-26 | Kevin Scott Beyer | System and method for generating a cache-aware bloom filter |
US20080162511A1 (en) * | 2006-12-30 | 2008-07-03 | Theobald Dietmar C | Computer file system traversal |
US20080209137A1 (en) * | 2007-02-23 | 2008-08-28 | Inventec Corporation | Method of specifying access sequence of a storage device |
US20080270435A1 (en) * | 2004-03-16 | 2008-10-30 | Turbo Data Laboratories Inc. | Method for Handling Tree-Type Data Structure, Information Processing Device, and Program |
US20090037805A1 (en) * | 2007-08-03 | 2009-02-05 | Dietmar Theobald | Annotation data filtering of computer files |
US20090182766A1 (en) * | 2008-01-16 | 2009-07-16 | International Business Machines Corporation | Avoiding database related joins with specialized index structures |
US20090193010A1 (en) * | 2008-01-25 | 2009-07-30 | International Business Machines Corporation | Method and system for reducing complex tree structures to simple tree structures based on relevance |
US20090204623A1 (en) * | 2008-02-12 | 2009-08-13 | International Business Machines Corporation | Generating a value associated with one of a plurality of leaf nodes by implicitly randomly climbing an implicit tree having the leaf nodes |
US20090248624A1 (en) * | 2008-03-25 | 2009-10-01 | Microsoft Corporation | Functional updates for tree processing |
US20100082525A1 (en) * | 2008-09-30 | 2010-04-01 | International Business Machines Corporation | Apparatus, system, and method for processing mdx post-order hierarchize expressions |
US20100094903A1 (en) * | 2008-10-10 | 2010-04-15 | International Business Machines Corporation | Representing the allocation of integers |
WO2010048856A1 (en) * | 2008-10-30 | 2010-05-06 | 华为技术有限公司 | Storage method and apparatus |
US20100250540A1 (en) * | 2009-03-24 | 2010-09-30 | Adda Serge | Method for managing a relational database of the sql type |
US20120050289A1 (en) * | 2010-08-26 | 2012-03-01 | Industry-Academic Cooperation Foundation, Yonsei Universtiy | Image processing apparatus and method |
US20120284280A1 (en) * | 2011-05-03 | 2012-11-08 | Space-Time Insight | Space-time-node engine signal structure |
JP2013054512A (en) * | 2011-09-02 | 2013-03-21 | Fuji Xerox Co Ltd | Identification information adding program and identification information adding apparatus |
US8543757B2 (en) | 2010-06-23 | 2013-09-24 | Sandisk Technologies Inc. | Techniques of maintaining logical to physical mapping information in non-volatile memory systems |
US8676743B2 (en) | 2011-05-03 | 2014-03-18 | Space-Time Insight | Space-time-nodal type signal processing |
CN103970739A (en) * | 2013-01-24 | 2014-08-06 | 中兴通讯股份有限公司 | Storage information processing method and device |
US20190384753A1 (en) * | 2005-03-31 | 2019-12-19 | Robert T. and Virginia T. Jenkins as Trustees of the Jenkins Family Trust Dated Feb. 8,2002 | Method and/or system for transforming between trees and arrays |
CN113515517A (en) * | 2020-04-09 | 2021-10-19 | 深圳市华胜软件技术有限公司 | Method for querying data set based on tree structure data and computer equipment |
US11636153B2 (en) * | 2021-05-27 | 2023-04-25 | Western Digital Technologies, Inc. | Storage of tree data structures |
US11687592B2 (en) | 2021-05-27 | 2023-06-27 | Western Digital Technologies, Inc. | Storage of tree data structures |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5530957A (en) * | 1992-08-07 | 1996-06-25 | At&T Corp. | Storing trees in navigable form |
US5848416A (en) * | 1994-06-06 | 1998-12-08 | Nokia Telecommunications Oy | Method and apparatus for storing and retrieving data and a memory arrangement |
US6029170A (en) * | 1997-11-25 | 2000-02-22 | International Business Machines Corporation | Hybrid tree array data structure and method |
US6415279B1 (en) * | 1998-03-12 | 2002-07-02 | Telefonaktiebolaget Lm Ericsson (Publ) | Method and access means for determining the storage address of a data value in a memory device |
-
2000
- 2000-08-01 US US09/629,659 patent/US6567815B1/en not_active Expired - Lifetime
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5530957A (en) * | 1992-08-07 | 1996-06-25 | At&T Corp. | Storing trees in navigable form |
US5848416A (en) * | 1994-06-06 | 1998-12-08 | Nokia Telecommunications Oy | Method and apparatus for storing and retrieving data and a memory arrangement |
US6029170A (en) * | 1997-11-25 | 2000-02-22 | International Business Machines Corporation | Hybrid tree array data structure and method |
US6415279B1 (en) * | 1998-03-12 | 2002-07-02 | Telefonaktiebolaget Lm Ericsson (Publ) | Method and access means for determining the storage address of a data value in a memory device |
Non-Patent Citations (8)
Title |
---|
"Introduction to Algorithms", Cormen, Leiserson and Rivest, 1990, Pp. 94-95, 140-141, 244-245. |
"The Influence of Caches on the Performance of Heaps", Lamarca Anthony, and Landner Richard E. The ACM Journal of Experimental Algorithmics, Jan. 6, 1997. |
Anthony Lamarca, et al., "The Influence of Caches on the Performance of Sorting", Proceedings of the Eighth Annual ACM-SIAM Symposium on Discrete Algorithms, pp. 370-379. 1997. |
Microsoft Press Computer Dictionary Second Edition, 1994, Microsoft Press, PP. 60 and 286.* * |
Richard E. Ladner, et al., "Cache Performance Analysis of Traversals and Random Accesses", Tenth Annual ACM-SIAM Symposium on Discrete Algorithms, 1999. |
Shai Rubin, et al., "Virtual Cache Line: A New Technique to Improve Cache Exploitation for Recursive Data Structures", IBM Research Lab, Haifa, Israel. 1998. |
Torbjorn Granlund, et al., "Division by Invariant Integers Using Multiplication", ACM Sigplan 94-6/94. Orlando, Florida, USA. 1994, Pp. 61-72. |
Trishul M. Chilimby, et al., "Cache-Conscious Structure Layout", Proceedings of the ACM Sigplan '99 Conference on Programming Language Design and Implementation, May 1999. |
Cited By (57)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6978271B1 (en) * | 2000-10-31 | 2005-12-20 | Unisys Corporation | Mechanism for continuable calls to partially traverse a dynamic general tree |
US20020087596A1 (en) * | 2000-12-29 | 2002-07-04 | Steve Lewontin | Compact tree representation of markup languages |
US20030123397A1 (en) * | 2000-12-30 | 2003-07-03 | Kang-Bok Lee | Method for generating nodes in multiway search tree and search method using the same |
US7403494B2 (en) * | 2000-12-30 | 2008-07-22 | Electronics And Telecommunications Research Institute | Method for generating nodes in multiway search tree and search method using the same |
US6772179B2 (en) * | 2001-12-28 | 2004-08-03 | Lucent Technologies Inc. | System and method for improving index performance through prefetching |
US20080270435A1 (en) * | 2004-03-16 | 2008-10-30 | Turbo Data Laboratories Inc. | Method for Handling Tree-Type Data Structure, Information Processing Device, and Program |
US7627604B2 (en) * | 2004-03-16 | 2009-12-01 | Turbo Data Laboratories, Inc. | Method for handling tree-type data structure, information processing device, and program |
US20060026386A1 (en) * | 2004-07-30 | 2006-02-02 | Microsoft Corporation | System and method for improved prefetching |
US7472133B2 (en) * | 2004-07-30 | 2008-12-30 | Microsoft Corporation | System and method for improved prefetching |
US20190384753A1 (en) * | 2005-03-31 | 2019-12-19 | Robert T. and Virginia T. Jenkins as Trustees of the Jenkins Family Trust Dated Feb. 8,2002 | Method and/or system for transforming between trees and arrays |
US20070130114A1 (en) * | 2005-06-20 | 2007-06-07 | Xiao-Feng Li | Methods and apparatus to optimize processing throughput of data structures in programs |
US20080155229A1 (en) * | 2006-12-21 | 2008-06-26 | Kevin Scott Beyer | System and method for generating a cache-aware bloom filter |
US8032732B2 (en) | 2006-12-21 | 2011-10-04 | International Business Machines Corporatio | System and method for generating a cache-aware bloom filter |
US20080243941A1 (en) * | 2006-12-21 | 2008-10-02 | International Business Machines Corporation | System and method for generating a cache-aware bloom filter |
US20080162511A1 (en) * | 2006-12-30 | 2008-07-03 | Theobald Dietmar C | Computer file system traversal |
US9367553B2 (en) * | 2006-12-30 | 2016-06-14 | Sap Se | Computer file system traversal |
US20080209137A1 (en) * | 2007-02-23 | 2008-08-28 | Inventec Corporation | Method of specifying access sequence of a storage device |
US8954840B2 (en) | 2007-08-03 | 2015-02-10 | Sap Se | Annotation processing of computer files |
US20090037459A1 (en) * | 2007-08-03 | 2009-02-05 | Theobald Dietmar C | Annotation data handlers for data stream processing |
US10509854B2 (en) | 2007-08-03 | 2019-12-17 | Sap Se | Annotation processing of computer files |
US20090037805A1 (en) * | 2007-08-03 | 2009-02-05 | Dietmar Theobald | Annotation data filtering of computer files |
US9092408B2 (en) | 2007-08-03 | 2015-07-28 | Sap Se | Data listeners for type dependency processing |
US20090037804A1 (en) * | 2007-08-03 | 2009-02-05 | Dietmar Theobald | Annotation processing of computer files |
US8806324B2 (en) | 2007-08-03 | 2014-08-12 | Sap Ag | Annotation data filtering of computer files |
US20090037577A1 (en) * | 2007-08-03 | 2009-02-05 | Dietmar Theobald | Data listeners for type dependency processing |
US8112388B2 (en) | 2007-08-03 | 2012-02-07 | Sap Ag | Dependency processing of computer files |
US20090182766A1 (en) * | 2008-01-16 | 2009-07-16 | International Business Machines Corporation | Avoiding database related joins with specialized index structures |
US8312050B2 (en) * | 2008-01-16 | 2012-11-13 | International Business Machines Corporation | Avoiding database related joins with specialized index structures |
US20090193010A1 (en) * | 2008-01-25 | 2009-07-30 | International Business Machines Corporation | Method and system for reducing complex tree structures to simple tree structures based on relevance |
US7822773B2 (en) | 2008-01-25 | 2010-10-26 | International Business Machines Corporation | Method and system for reducing complex tree structures to simple tree structures based on relevance of nodes using threshold values |
US7966347B2 (en) | 2008-02-12 | 2011-06-21 | International Business Machines Corporation | Generating a value associated with one of a plurality of leaf nodes by implicitly randomly climbing an implicit tree having the leaf nodes |
US20090204623A1 (en) * | 2008-02-12 | 2009-08-13 | International Business Machines Corporation | Generating a value associated with one of a plurality of leaf nodes by implicitly randomly climbing an implicit tree having the leaf nodes |
US8370391B2 (en) * | 2008-03-25 | 2013-02-05 | Microsoft Corporation | Functional updates for tree processing |
US20090248624A1 (en) * | 2008-03-25 | 2009-10-01 | Microsoft Corporation | Functional updates for tree processing |
US20100082525A1 (en) * | 2008-09-30 | 2010-04-01 | International Business Machines Corporation | Apparatus, system, and method for processing mdx post-order hierarchize expressions |
US8055610B2 (en) * | 2008-09-30 | 2011-11-08 | International Business Machines Corporation | Apparatus, system, and method for processing MDX post-order hierarchize expressions |
US8341183B2 (en) | 2008-10-10 | 2012-12-25 | International Business Machines Corporation | Representing the allocation of integers |
US20100094903A1 (en) * | 2008-10-10 | 2010-04-15 | International Business Machines Corporation | Representing the allocation of integers |
US20110202571A1 (en) * | 2008-10-30 | 2011-08-18 | Huawei Technologies Co., Ltd. | Method and device for storage |
WO2010048856A1 (en) * | 2008-10-30 | 2010-05-06 | 华为技术有限公司 | Storage method and apparatus |
US8341187B2 (en) | 2008-10-30 | 2012-12-25 | Huawei Technologies Co., Ltd. | Method and device for storage |
US9069823B2 (en) * | 2009-03-24 | 2015-06-30 | Infovista Sa | Method for managing a relational database of the SQL type |
US20100250540A1 (en) * | 2009-03-24 | 2010-09-30 | Adda Serge | Method for managing a relational database of the sql type |
US8543757B2 (en) | 2010-06-23 | 2013-09-24 | Sandisk Technologies Inc. | Techniques of maintaining logical to physical mapping information in non-volatile memory systems |
US20120050289A1 (en) * | 2010-08-26 | 2012-03-01 | Industry-Academic Cooperation Foundation, Yonsei Universtiy | Image processing apparatus and method |
US9355491B2 (en) * | 2010-08-26 | 2016-05-31 | Samsung Electronics Co., Ltd. | Ray tracing apparatus and method |
US9047353B2 (en) | 2011-05-03 | 2015-06-02 | Space-Time Insight | Space-time-node engine signal structure |
US8768873B2 (en) * | 2011-05-03 | 2014-07-01 | Space-Time Insight | Space-time-node engine signal structure |
US8676743B2 (en) | 2011-05-03 | 2014-03-18 | Space-Time Insight | Space-time-nodal type signal processing |
US9495099B2 (en) | 2011-05-03 | 2016-11-15 | Space Time Insight, Inc. | Space-time-node engine signal structure |
US20120284280A1 (en) * | 2011-05-03 | 2012-11-08 | Space-Time Insight | Space-time-node engine signal structure |
JP2013054512A (en) * | 2011-09-02 | 2013-03-21 | Fuji Xerox Co Ltd | Identification information adding program and identification information adding apparatus |
CN103970739A (en) * | 2013-01-24 | 2014-08-06 | 中兴通讯股份有限公司 | Storage information processing method and device |
CN103970739B (en) * | 2013-01-24 | 2017-04-26 | 中兴通讯股份有限公司 | Storage information processing method and device |
CN113515517A (en) * | 2020-04-09 | 2021-10-19 | 深圳市华胜软件技术有限公司 | Method for querying data set based on tree structure data and computer equipment |
US11636153B2 (en) * | 2021-05-27 | 2023-04-25 | Western Digital Technologies, Inc. | Storage of tree data structures |
US11687592B2 (en) | 2021-05-27 | 2023-06-27 | Western Digital Technologies, Inc. | Storage of tree data structures |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6567815B1 (en) | Technique of clustering and compaction of binary trees | |
US10282122B2 (en) | Methods and systems of a memory controller for hierarchical immutable content-addressable memory processor | |
Bender et al. | Cache-oblivious B-trees | |
US7085911B2 (en) | Resizable cache sensitive hash table | |
US7937419B2 (en) | Garbage collection via multiobjects | |
Bender et al. | Cache-oblivious B-trees | |
KR100384905B1 (en) | Relation-based ordering of objects in an object heap | |
Appel et al. | Hash-consing garbage collection | |
WO2009156558A1 (en) | Copying entire subgraphs of objects without traversing individual objects | |
Ashkiani et al. | GPU LSM: A dynamic dictionary data structure for the GPU | |
KR20000027489A (en) | Method of inserting higher dimension index structure | |
CN103124959A (en) | Composition of data objects | |
Rahman et al. | Optimised predecessor data structures for internal memory | |
Gil et al. | How to pack trees | |
US8185693B2 (en) | Cache-line aware collection for runtime environments | |
US20100281082A1 (en) | Subordinate Multiobjects | |
Chen et al. | Design and implementation of skiplist-based key-value store on non-volatile memory | |
Fent et al. | Start—self-tuning adaptive radix tree | |
US20220269675A1 (en) | Hash-based data structure | |
Otoo et al. | Chunked extendible dense arrays for scientific data storage | |
Lavinsky et al. | PM-Rtree: a highly-efficient crash-consistent R-tree for persistent memory | |
Liao et al. | An efficient external-memory implementation of region query with application to area routing | |
Luan et al. | Prefetching j+-tree: a cache-optimized main memory database index structure | |
Wu et al. | No bits left behind | |
Honishi et al. | An index structure for parallel database processing |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:RUBIN, SHAI;ZAKS, AYAL;REEL/FRAME:010985/0925;SIGNING DATES FROM 20000709 TO 20000724 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |