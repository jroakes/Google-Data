US8249361B1 - Interdependent learning of template map and similarity metric for object identification - Google Patents
Interdependent learning of template map and similarity metric for object identification Download PDFInfo
- Publication number
- US8249361B1 US8249361B1 US12/765,728 US76572810A US8249361B1 US 8249361 B1 US8249361 B1 US 8249361B1 US 76572810 A US76572810 A US 76572810A US 8249361 B1 US8249361 B1 US 8249361B1
- Authority
- US
- United States
- Prior art keywords
- template
- map
- metric
- similarity
- candidate
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
- 238000000034 method Methods 0.000 claims abstract description 45
- 230000008569 process Effects 0.000 claims abstract description 19
- 230000006870 function Effects 0.000 claims description 57
- 230000002829 reductive effect Effects 0.000 claims description 47
- 239000013598 vector Substances 0.000 claims description 47
- 239000011159 matrix material Substances 0.000 claims description 42
- 238000012549 training Methods 0.000 claims description 33
- 230000015654 memory Effects 0.000 claims description 13
- 230000000007 visual effect Effects 0.000 claims description 11
- 238000004590 computer program Methods 0.000 claims description 5
- 230000009471 action Effects 0.000 claims description 2
- 230000009466 transformation Effects 0.000 abstract description 33
- 210000000887 face Anatomy 0.000 description 15
- 238000007781 pre-processing Methods 0.000 description 10
- 238000013459 approach Methods 0.000 description 9
- 238000004422 calculation algorithm Methods 0.000 description 9
- 230000001815 facial effect Effects 0.000 description 9
- 238000002360 preparation method Methods 0.000 description 7
- 238000013139 quantization Methods 0.000 description 7
- 238000004458 analytical method Methods 0.000 description 5
- 230000003190 augmentative effect Effects 0.000 description 4
- 206010028980 Neoplasm Diseases 0.000 description 3
- 238000009795 derivation Methods 0.000 description 3
- 238000012545 processing Methods 0.000 description 3
- 230000003068 static effect Effects 0.000 description 3
- 238000007792 addition Methods 0.000 description 2
- 238000004364 calculation method Methods 0.000 description 2
- 238000013461 design Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 230000008921 facial expression Effects 0.000 description 2
- 230000003287 optical effect Effects 0.000 description 2
- 230000004044 response Effects 0.000 description 2
- 238000000844 transformation Methods 0.000 description 2
- 230000007704 transition Effects 0.000 description 2
- 230000006978 adaptation Effects 0.000 description 1
- 239000000654 additive Substances 0.000 description 1
- 230000000996 additive effect Effects 0.000 description 1
- 230000005540 biological transmission Effects 0.000 description 1
- 230000015556 catabolic process Effects 0.000 description 1
- 238000006243 chemical reaction Methods 0.000 description 1
- 239000002131 composite material Substances 0.000 description 1
- 230000001186 cumulative effect Effects 0.000 description 1
- 238000013144 data compression Methods 0.000 description 1
- 238000013479 data entry Methods 0.000 description 1
- 238000000354 decomposition reaction Methods 0.000 description 1
- 230000003247 decreasing effect Effects 0.000 description 1
- 238000006731 degradation reaction Methods 0.000 description 1
- 230000001419 dependent effect Effects 0.000 description 1
- 238000011496 digital image analysis Methods 0.000 description 1
- 230000000694 effects Effects 0.000 description 1
- 238000002474 experimental method Methods 0.000 description 1
- 230000005484 gravity Effects 0.000 description 1
- 238000010191 image analysis Methods 0.000 description 1
- 238000002955 isolation Methods 0.000 description 1
- 238000002372 labelling Methods 0.000 description 1
- 230000000670 limiting effect Effects 0.000 description 1
- 238000007726 management method Methods 0.000 description 1
- 238000013507 mapping Methods 0.000 description 1
- 230000007246 mechanism Effects 0.000 description 1
- 210000001747 pupil Anatomy 0.000 description 1
- 230000009467 reduction Effects 0.000 description 1
- 230000000717 retained effect Effects 0.000 description 1
- 239000000126 substance Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/74—Image or video pattern matching; Proximity measures in feature spaces
- G06V10/75—Organisation of the matching processes, e.g. simultaneous or sequential comparisons of image or video features; Coarse-fine approaches, e.g. multi-scale approaches; using context analysis; Selection of dictionaries
- G06V10/751—Comparing pixel values or logical combinations thereof, or feature values having positional relevance, e.g. template matching
- G06V10/7515—Shifting the patterns to accommodate for positional errors
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/21—Design or setup of recognition systems or techniques; Extraction of features in feature space; Blind source separation
- G06F18/214—Generating training patterns; Bootstrap methods, e.g. bagging or boosting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F18/00—Pattern recognition
- G06F18/20—Analysing
- G06F18/22—Matching criteria, e.g. proximity measures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/74—Image or video pattern matching; Proximity measures in feature spaces
- G06V10/761—Proximity, similarity or dissimilarity measures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V10/00—Arrangements for image or video recognition or understanding
- G06V10/70—Arrangements for image or video recognition or understanding using pattern recognition or machine learning
- G06V10/77—Processing image or video features in feature spaces; using data integration or data reduction, e.g. principal component analysis [PCA] or independent component analysis [ICA] or self-organising maps [SOM]; Blind source separation
- G06V10/774—Generating sets of training patterns; Bootstrap methods, e.g. bagging or boosting
Definitions
- the present invention generally relates to the field of digital image analysis, and more specifically, to methods of learning image transformations and similarity metrics used to perform identification of objects in digital images.
- Object recognition systems determine whether a given image contains an object of a particular category, such as a human face, a license plate, or other known object. Object identification systems determine whether an object that has been recognized matches a previously recognized object—such as a particular human face, or a particular type of cancerous tumor—based on some measure of similarity between the images.
- a second type of object identification system instead identifies an object within a digital image using an image transformation and a similarity function.
- the image transformation takes as input the raw image pixels of the object and produces as output a standardized representation of the object (e.g., a vector of real numbers).
- the similarity function takes as input the standardized representations of a pair of objects and produces as output an indicator, e.g., a floating point number, quantifying the degree of similarity of the objects.
- the representations produced by the image transformation can be stored considerably more compactly than the original pixel representation of the object, and the similarity metric operating on these compact representations can in turn be computed more quickly than can direct pixel comparisons.
- one corpus may contain very standardized pictures of faces in a given pose and lighting condition (e.g., standard photos of employees, such as for identification badges), a second corpus may contain informal pictures of people in very different poses and lighting conditions (e.g., pictures from a family photo album), and a third may contain images of patients' bodies produced by medical devices.
- the first and second corpuses might both be used for identification of faces, but given the different conditions (such as lighting, pose, distance, etc.) a single image transformation and similarity metric would be unlikely to be equally effective for both.
- the third corpus might be used by a hospital radiology department for identification of cancerous tumors, and the image transformation and similarity metric used in the facial identification systems would be ineffective for such radiology images.
- manual experimentation to determine an image transformation and similarity metric effective for every existing corpus would be an unduly burdensome task.
- An object identification system iteratively and automatically learns both a template map used to transform a template describing an object in an image, and a related similarity metric used in comparing one transformed object template to another.
- the template map comprises a set of data, such as matrix data, that when applied to the object template (e.g., a vector), produces the transformation that transforms the template to a form that is more compact and serves to better discriminate among different objects.
- the similarity metric comprises data, such as matrix data, that is applied to the transformed object templates to produce a measure of similarity.
- the automatic learning eliminates the need to manually devise a transformation and metric that are effective for a given image corpus.
- the template map and the similarity metric are learned together, such that the components to be added to the template map during the learning process are based at least in part on the components of the similarity metric, and vice-versa.
- the learning process proceeds iteratively, with components being added to the template map and the similarity metric at each iteration.
- a set of candidate map components is selected at each iteration for potential inclusion in the template map, and a similarity metric component best minimizing a loss function is derived for each candidate map component.
- These candidate map and metric components are evaluated with respect to the loss function to determine an associated measure of accuracy, with the pair resulting in the best accuracy (e.g., least loss) being selected for addition to the template map and similarity metric.
- the template map and similarity metric are designed to have a number of properties useful for purposes of iterative learning, such as being composed of incremental portions (i.e., the components added at each iteration) such that a loss function for the incremental portion can be expressed with a closed form solution.
- the template map and similarity metric can be applied to identify objects, such as faces.
- the learned template map can be applied to transform raw template vectors representing images of faces into corresponding reduced templates of reduced size and increased ability to usefully describe a face.
- the similarity metric can then compare a pair of the reduced templates, producing a score quantifying a degree of similarity between their corresponding faces.
- FIG. 1A is a data flow diagram illustrating the use of an image transformation and a similarity metric within a transformation-based object identification system.
- FIG. 1B depicts the operations of a linear map and a quantizer function that make up a template map of FIG. 1A , according to one embodiment.
- FIG. 1C depicts a set of matrices used in the computation of the similarity metric of FIG. 1A , according to one embodiment.
- FIG. 2 illustrates an object identification system for learning a template map and a similarity metric, as well as for performing object identification based on the learned map and metric, according to one embodiment.
- FIG. 3 is a flowchart illustrating a high-level view of the operations performed to create the template map and the similarity metric, according to one embodiment.
- FIG. 4 is a flowchart illustrating in more detail the operations performed iteratively by the learning module 250 when learning the components of the template map 110 and the similarity metric 120 in step 320 of FIG. 3 , according to one embodiment.
- FIG. 5 is a flowchart illustrating in more detail the operations performed when computing a loss value for given candidate components, according to one embodiment.
- FIG. 1A is a data flow diagram illustrating the use of an image transformation 106 and a similarity metric 120 within a transformation-based object identification system, in which two images are compared to determine a degree of visual similarity between them.
- object images 105 A and 105 B represent an image containing a particular type of object, such as a human face.
- Each object image 105 is provided as input to the image transformation 106 , which performs one or more operations to produce a reduced, reduced representation of the object.
- the reduced representation is “reduced” in the sense that the amount of data used to store the reduced representation requires less data than needed to store the image itself, e.g., 1 kilobyte or less, rather than 10 kilobytes.
- the image transformation 106 comprises a preprocessing transformation 107 and a template map 110 .
- the preprocessing transformation 107 performs initial operations to map the image pixel data to an initial feature-based representation of the face.
- the preprocessing transformation 107 could first detect the boundary of a face within an image 105 .
- the preprocessing transformation 107 could then detect facial features within the boundary of the face, such as points at the pupil of the eye, the inside corner of the eye, the corners of the mouth, the tip of the nose, and the like, and extract a quantitative (numerical) description of those facial features using techniques such as Gabor wavelets, eigenfaces and eigenfeatures, Fisher faces and features, and the like.
- the result is a raw template 108 , such as a concatenated set, or vector, of facial feature descriptions, where each facial feature description comprises a set of real numbers describing visual characteristics of the facial feature such as color intensity, luminosity, texture, edges, wavelet or other transforms, etc., where these feature values are distinct from the underlying pixel values in the image.
- the template map 110 then transforms the raw template 108 into a reduced template 115 that optimizes its use for discrimination among faces by a similarity metric 120 , including reducing the amount of data used the represent the template.
- the similarity metric 120 accepts as input the reduced templates 115 A and 115 B for the two faces and outputs a similarity score 130 that quantifies the similarity of the faces.
- the template map 110 and the similarity metric 120 may be represented by many different kinds and numbers of data structures in different embodiments.
- the template map 110 employs a linear map matrix and a quantizer function that together reduce an n-dimensional raw template 108 containing real numbers to an m-dimensional vector of integers (for some m ⁇ n), and the similarity metric 120 comprises a set of m matrices, values of which are selected and summed as a function of the reduced face templates to determine the similarity value of the faces.
- the linear map, quantizer, and set of matrices are referred to throughout the remainder of the specification as the data structures (or “object identification data structures”) employed in one example embodiment, though other data structures could likewise be employed.
- the template map 110 and the similarity metric 120 may be implemented in various manners in different embodiments.
- the template map 110 comprises a linear map matrix and a quantizer function.
- FIG. 1B depicts an example of the operations of the linear map 111 and quantizer function 112 , according to one embodiment.
- a raw template, v is a vector of n elements (e.g., real numbers), v 1 through v n , which together describe certain visual features or characteristics of the image of an object.
- the linear map 111 is an (m ⁇ n) matrix, also referred to hereinafter as A, that maps the n-dimensional raw template vector v to an m-dimensional intermediate template, p, via matrix multiplication.
- the quantizer function 112 maps (quantizes) each real-number-valued element of p to an integer equivalent in the resulting reduced template, thereby reducing the amount of memory required to represent p.
- the quantizer function T comprises m sets of ranges, each set ⁇ i having q ranges. The union of the q ranges for each set ⁇ i covers all real numbers from ⁇ to + ⁇ .
- the first range g 0 for one set ⁇ j could represent the interval from ⁇ to ⁇ 10,000 (inclusive); the next range g 1 the interval from ⁇ 10,000 (exclusive) to ⁇ 3,922 (inclusive); the next range g 2 the interval from ⁇ 3,922 (exclusive) to ⁇ 2,218 (inclusive); and so forth, to the last range g q extending from some integer m to + ⁇ .
- Each set of ranges maps a real number to an integer representing the index of the range containing the real number.
- the quantizer function 112 may be understood to convert each real number element p m to an integer index value i representing the index corresponding to range r which contains p m within a corresponding set of ranges ⁇ i .
- the dimension n of A is designed to match the number of items n (e.g., 10,000) in the raw template vectors produced by the preprocessing transformation 107 .
- the dimension m of A and T is the number of iterations (e.g., 2000) performed by a learning process that learns the template map 110 and the similarity metric 120 —with one row being added to the matrix A and one set of ranges to T at each iteration. This learning process is described further below with respect to FIG. 4 .
- FIG. 1C depicts a set of m matrices used in the computation of the similarity metric 120 of FIG. 1A , according to one embodiment.
- the m matrices are also referred to hereinafter as ⁇ , each matrix of dimension (q ⁇ q), q being the same as the number of ranges within one of the sets ⁇ i of the quantizer function T.
- the similarity metric 120 of two reduced templates 115 , d and d′ is computed by summing, for each matrix ⁇ i in ⁇ , the element at row d i and column d′ i , where d i and d′ i are the i th elements in d and d′, respectively.
- the dimension q can be set by a system designer to any convenient value, such as a power of 2 (e.g., 16). That is, similarity metric S is defined as:
- the matrix A serves as a linear transformation of a raw template 108 —which tends to contain redundant information or be otherwise mis-aligned—into an optimized vector space.
- the quantizer T provides any non-linearity that can further optimize the results of the similarity metric S 120 , and additionally increases the speed of the computation of S by mapping real numbered values of the intermediate template of FIG. 1B to integer values that can be used to look up the entries of the matrices ⁇ i in ⁇ . It is appreciated that the use of A, T, and ⁇ as the object identification data structures that implement the template map 110 and the similarity metric 120 is a design choice, and that other data structures could equally be used.
- the data flow of FIG. 1A still depends on knowledge of the values for the template map 110 and the similarity metric 120 .
- the present invention provides a means for determining these values automatically by analysis of the images in a corpus, thus eliminating the need for substantial trial and error attempts by the system designer to select the appropriate values.
- FIG. 2 illustrates an object identification system 200 for learning a template map 110 and a similarity metric 120 that work well together for a given corpus of images, according to one embodiment.
- the system 200 Once the system 200 has learned the map 110 and the metric 120 , it (or another system) can use them to perform object identification based on the learned map and metric, e.g., using the process depicted in FIG. 1A .
- the object identification system 200 of FIG. 2 comprises an image corpus 205 , a derived identification data repository 207 , a data preparation module 230 , and, in some embodiments, an object comparison module 260 and an image gallery 265 .
- the term “module” refers to executable logic for providing the specified functionality.
- a module is implemented in hardware, firmware, and/or software, the choice of which is an implementation decision depending on the system requirements.
- modules described herein are implemented as software, a module can be implemented as a standalone program, but can also be implemented through other means, for example as part of a larger program, as a plurality of separate programs, or as one or more statically or dynamically linked libraries; in each of these embodiments, the modules are persistently stored on a computer readable storage device (e.g., hard disk), loaded into the memory, and executed by one or more processors included as part of the system to provide the specified functionality.
- a computer readable storage device e.g., hard disk
- inventions may lack certain ones of modules described herein and/or distribute the described functionality among the modules in a different manner. Additionally, the functionalities attributed to more than one module can be incorporated into a single module. Further, hardware or software modules may be stored elsewhere within the object identification system 200 .
- the object identification system 200 includes hardware elements necessary for the operations described here, including one or more processors, high speed memory, hard disk storage and backup, network interfaces and protocols, input devices for data entry, and output devices for display, printing, or other presentations of data. The operations of the object identification system 200 and its modules will be further described below with respect to FIG. 2 and the remaining figures.
- the training set 205 comprises a set of r images containing faces (or other objects in the domain of interest) of a set of people (e.g., hundreds of people). Based on the training set 205 , general discriminating facial characteristics that are learned and can be later applied by the object comparison module 260 to recognize faces.
- Each image represents a distinct person and has as associated metadata a unique identifier of the person, such as an ID number assigned by a human manually labeling the people within each of the r images.
- a person may be represented with multiple images in the training set 205 , each image of the person with its own pose, lighting, facial expression, distance, and the like, but all sharing the same identifier.
- the number of images associated with each person can vary (e.g., 15 images for one person, 8 for a second person, and so on) with variation in terms of content or format.
- different images can provide different content, such as a variety of facial expressions (e.g. smile, frown), lighting conditions, cropping, color tone, and the like.
- the images of the training set 205 could be drawn from any source of digital images, such as online photo albums, or images of people retrieved (e.g., crawled) from the Internet, as well as or in addition to a set of uniform images produced specifically for use in facial identification.
- the training set 205 additionally stores an associated matrix of values that specifies whether any given pair of images represents the same person.
- same ij This matrix is hereinafter referred to for simplicity as same ij , representing whether the i th and j th images of the set of r images represent the same person.
- the values of same ij can be derived by comparing the unique identifiers of the i th and j th images, setting same ij to a value indicating sameness (e.g., to 1) if the identifiers are the same, and to a value indicating difference (e.g., to ⁇ 1) otherwise.
- the image gallery 265 like the training set 205 , stores images of faces (or other objects to be recognized).
- the image gallery 265 represents the set of people that can be recognized by the object comparison module 260 , and in one embodiment has a single representative image of each person to be recognized.
- the training set 205 serves as input for the data preparation module 230 , which processes the images in the corpus and stores the resulting data (i.e., the raw templates 108 , the values for the template map 110 and the similarity metric 120 , and the reduced templates 115 ) in the derived identification data repository 207 .
- the derived identification data repository 207 stores the raw templates 108 and the reduced templates 115 , as well as the template map 110 and the similarity metric 120 depicted in FIG. 1A .
- a preprocessing module 240 of the data preparation module 230 preprocesses the images in the training set 205 as described above with respect to the preprocessing transformation 107 of FIG. 1A , outputting the raw image templates 108 .
- a learning module 250 of the data preparation module 230 takes as input the raw image templates 108 output by the preprocessing module 240 and learns the template map 110 and the similarity metric 120 , storing them in the derived identification data repository 207 .
- the data preparation module 230 can further apply the learned template maps 110 to the images in the image gallery 265 , obtaining a reduced template 115 for each image and storing the reduced templates in association with (or instead of) the images from which they were derived.
- each reduced template 115 can be stored within one kilobyte of memory or less.
- the object comparison module 260 uses the template map 110 and the similarity metric 120 stored in the derived identification data repository 207 to compute a similarity score 130 , as described above with respect to FIG. 1A . For example, when comparing a new image of a face to a facial image already stored in the image gallery 265 —e.g., to identify a new image as being of a person already known in the image gallery—the object comparison module 260 performs the preprocessing transformation 107 on the new image and applies the template map 110 to extract a new reduced template 115 .
- the object comparison module 260 then compares the new reduced template to one or more existing reduced templates 115 , corresponding to images from the image gallery 265 , that are already stored in the derived identification data repository 207 , and computes similarity scores 130 .
- the comparison that results in the best similarity score 130 indicates a match between the new image and the image associated with the matching template.
- the object identification system 100 depicted in FIG. 1A need not be a single physical computer system, such as a single server, but may comprise multiple distinct servers or other computer systems coupled together over a network.
- the data preparation module 230 resides on a different physical system than the object comparison module 260 , as depicted in FIG. 1A .
- both the data preparation module 230 and the object comparison module 260 may be replicated on multiple distinct systems, each having its own copy of the derived identification data repository 207 .
- FIG. 3 is a flowchart illustrating a high-level view of the operations performed by the learning module 250 of FIG. 2 to create the template map 110 and similarity metric 120 , according to one embodiment.
- the learning module 250 initializes 310 the template map 110 and similarity metric 120 .
- the initialization 310 comprises setting the object identification data structures for A, T, and ⁇ to empty, reflecting that no components have yet been determined.
- components denotes the various portions of data within the object identification data structures—such as the individual row vectors a of A, the distinct sets of ranges ⁇ of T, and the q ⁇ q matrices ⁇ of the set ⁇ —that are added to the data structures as they are learned.
- the learning module 250 learns 320 the template map 110 and similarity metric 120 . In one embodiment, this involves performing a number of iterations, appending one entry to each of A, T, and ⁇ at each iteration, as described in more detail with respect to FIG. 4 , below.
- the learning module 250 stores them—that is, stores the values representing their various elements—into the portions 110 and 120 of the derived identification data repository 207 .
- the object comparison module 260 may then apply them when computing the similarity of a new image of an object to images of the object already present in the image gallery 265 .
- the template map 110 and similarity metric 120 are iteratively learned based on the images of the training set 205 (or, more specifically, on the raw templates 108 representing the images).
- the map 110 and metric 120 when used as part of a process such as that of FIG. 1A , act as a face identification system with some measurable degree of accuracy, and as more learned data is added to the map and metric at each iteration, that accuracy continually improves. This learning process is now described in more detail.
- FIG. 4 is a flowchart illustrating in more detail the operations performed iteratively by the learning module 250 when learning the components of the template map 110 and similarity metric 120 in step 320 of FIG. 3 , according to one embodiment.
- the learning module 250 operates in an iterative fashion, continually identifying components to add to the template map 110 and the similarity metric 120 (e.g., A, T, and ⁇ ). At each iteration, components are selected to optimize object comparison accuracy, such as by minimizing the error resulting from application of the map 110 and metric 120 created by adding the selected components to the object identification data structures produced by the prior iteration.
- the learning of the template map 110 and the similarity function 120 is interdependent, in that minimization of the error involves selecting components for the map and metric that produce good results when used together, as described further below with respect to FIG. 5 .
- the learning module 250 dynamically builds an interdependent map 110 and metric 120 that produce accurate results when used together within an object identification system, the accuracy tending to increase at each iteration.
- the learning module 250 initially specifies 410 a pool of candidates from which the components to add are selected at each iteration.
- the candidates need not be specified with utmost precision, since later stages of the iteration will select the optimal ones of the candidates.
- the candidates are the n-dimensional row vectors a of the linear map A, the q-dimensional sets of ranges ⁇ of the quantizer T, and the (q ⁇ q) matrices ⁇ , where a pair from a and ⁇ can be together viewed as a map component potentially to be added to the template map, and a matrix of ⁇ as a metric component potentially to be added to the similarity metric.
- ⁇ is derived as a function of a
- ⁇ is similarly derived from a by minimizing a loss function, as described further below, and thus only the row vectors a need be selected as candidates for the pool.
- the pool is static throughout the training, i.e., is the same at every iteration.
- static selection of candidates for a include selecting the components of the entire training set, selecting the basis of a vector-space describing the training set distribution (e.g., using principle component analysis (PCA) to identify the principle components of the training set), or selecting the row-vectors from a discrimination-improving matrix (e.g., using Fisher's multiclass linear discriminant analysis (LDA) or a similar technique). This pool of selected components is then used at every iteration.
- PCA principle component analysis
- LDA discrimination-improving matrix
- the pool is recomputed, either at every iteration or only during certain iterations (e.g., every fifth iteration, or in iterations in which some predetermined condition is met).
- One example of pool recomputation is choosing a random subset of the training set of raw object templates 108 at each iteration as the candidates for a.
- optimal candidates are then selected 420 from that set.
- the optimal candidates are determined by computing 422 the values of a given loss function that result when the various candidates are provisionally incorporated into the template map 110 and the similarity metric 120 .
- the loss from using that a i is computed, and the row vector a i , resulting in the minimal loss is selected as the optimal candidate .
- the computation of the loss function is described in more detail below with respect to FIG. 5 .
- the optimal candidate components selected in step 420 are then added 430 to the data structures embodying the template map 110 and similarity metric 120 , such as A (and T) and ⁇ , e.g. by appending a i as a new row vector to A, ⁇ i as a new set of ranges to T, and ⁇ j as a new matrix to ⁇ .
- the augmented state of the map 110 and metric 120 is then used during the next iteration, where the additional information provided by the additional components results in greater identification accuracy than in the prior iteration.
- a termination condition it is determined 440 whether a termination condition has been reached. If so, the iteration terminates, and the latest states of the object identification data structures representing the template map 110 and similarity metric 120 and are stored in the derived identification data repository 207 of FIG. 2 , where they can later be read by the object comparison module 260 when determining the similarity of various objects. If not, then the next iteration is begun—at step 420 in embodiments in which the candidate pool is static, and at step 410 in embodiments in which it is dynamically specified at each iteration—and the map 110 and similarity metric 120 are further augmented by the new optimal candidates for that next iteration.
- a termination condition occurs when some predetermined number of iterations, such as 2,000, has been reached.
- termination can occur when the loss values cease to decrease—that is, when the loss value associated with the optimal candidate components of the current iteration is at least as great as the loss value associated with the optimal component of the prior iteration. Additionally, termination can occur based on some combinations of these conditions, e.g., when either a predetermined number of iterations has been reached or when the loss values stop decreasing.
- A, T, and ⁇ satisfies a number of properties that are desirable for purposes of learning their components, such as compactness of the data structures, ability to decompose the data structures into a template map and a residual similarity metric that can be quickly computed, allowance for non-linearity in the object templates, ability to compose the data structures incrementally with a new portion added at each iteration, and ability to be evaluated by a loss function that can be expressed as closed form solution for the incremental portion. Further details regarding the mathematical background for these properties is provided in Appendix A, below.
- the calculation of a loss value associated with use of a current state of the map 110 and metric 120 is useful for determining how to build up the map and metric. That is, the loss value determines which candidate components are selected at a given iteration for inclusion into the map and metric, and can also determine whether the learning terminates (e.g., in response to the loss value of the optimally augmented map and metric at the end of the current iteration failing to be less than that of the prior iteration).
- FIG. 5 is a flowchart illustrating in more detail the operations performed when computing a loss value for given candidate components a in step 422 of FIG. 4 , according to one embodiment.
- identification errors are summed over all pairs of raw templates 108 in the set of r of raw templates. That is:
- same ij is +1 if the unique identifiers of objects with indexes i and j are the same (i.e., are known to represent the same object), and ⁇ 1 if the identifiers are different (i.e., are known to represent different objects).
- the function E is some suitable error function, such as 1/(1+e x ).
- the below operations 510 - 540 are used to calculate a value of a loss function that is equivalent to L as defined above but less computationally intensive to compute.
- the candidate components are provisionally incorporated 515 into the object identification data structures. That is, a (and ⁇ and ⁇ ) are temporarily appended to A (and T and ⁇ ), and then calculations are performed to assess the identification accuracy of the resulting data structures.
- the candidate components are later removed, and other candidate components substituted in their place, and are thus ultimately retained only if they are determined to be the optimal candidate components for the current iteration.
- Weighting values are computed as a function of the current template map 110 and the current similarity metric 120 , “current” referring to the provisional inclusion of the candidate components.
- Weight matrices are then computed 530 based on the computed weighting values, the weight matrices acting as the weights used in the boosted learning algorithm.
- W + and W ⁇ are computed only across a random subset of index pairs ⁇ i, j>, rather than across all pairs ⁇ i, j>.
- a loss value L 2 is a function of the computed weights, i.e.:
- the loss value is computed with some variation of L 2 produced by a strictly monotonic function. That is, the loss value is ⁇ (L 2 ) for some strictly monotonic function ⁇ .
- the loss function can be expressed in closed form.
- the computed loss value is then compared to loss values produced by other candidate components a (and ⁇ and ⁇ ) in order to select optimal candidate components, as described above with respect to step 420 of FIG. 4 . That is, the candidate component a having the lowest associated loss value is selected and appended (along with the range set ⁇ and matrix ⁇ that depend on a) to A (and T and ⁇ ), and the learning process of FIG. 4 can continue to the next iteration (or terminate, if applicable). Note that since a and ⁇ are evaluated together in order to produce a minimal loss value, this effectively learns the A and ⁇ that they make up (and in turn, the template map 110 and the similarity function 120 that they respectively represent) in an interdependent manner.
- the map 110 and metric 120 are not learned in isolation of each other, such as the map being learned first, and the metric being learned afterward, or even both being learned in parallel but independent of the other; rather, at each iteration the values added to the map 110 help to determine the values added to the metric 120 , and vice-versa.
- the comparison module 260 can use the learned map 110 and metric 120 to compare an object with an object already in the image gallery 265 .
- Appendix A A detailed mathematical derivation of the foregoing operations is set forth in Appendix A. For example, the basis of the identification of the components minimizing of the loss function is explained in more detail in equations (12)-(16) and the accompanying text.
- the present invention learns both the template map 110 and the similarity metric 120 based on the given training set 205 .
- the comparison module 260 can apply map 110 and metric 120 in a process similar to that depicted in FIG. 1 to obtain a similarity score 130 that quantifies a degree of similarity between two object images 105 .
- the map 110 and metric 120 work effectively together when performing object identification.
- the learning algorithm very efficiently selects and fuses features with different properties (e.g. Gabor magnitudes and phase). It also provides a way to create highly compressed templates.
- Raw feature space denotes a vector space carrying composite raw data (pixel values, gabor magnitudes, gabor phases).
- the function ⁇ : 2 ⁇ is typically non-linear.
- E(x,y) is a suitable loss function: e.g. e ⁇ yx (exp loss), ln(1+e ⁇ yx ) (log loss), . . . .
- the approach employs a weak learner that provides ⁇ k for a given projector a k .
- the boosting algorithm scans a pool of projectors for the best fitting a k at given training set. Below we describe how the weak learner is constructed and what the projector pool looks like.
- Each quantization function responds ‘1’ in a dedicated interval and ‘0’ outside.
- Intervals are chosen to cover the value range and cause equal distributed responses of all functions on the training data.
- the weak learner's purpose is to specify ⁇ k for a given projector a k .
- the approach does so analytically through minimizing the exponential loss function.
- Quantization additionally provides an effective method of data compression: We store not the actual values a k ⁇ v into the template but the associated quantum state, which indicates which of the quantum functions responds ‘1’. Current modules use 16 quantum functions and correspondingly needs just 4 bits per value (or 2000 values per 1 KByte template).
- ⁇ st ⁇ s ⁇ t ; ⁇ i ⁇ ; i ⁇ 1, . . . , q ⁇
- ⁇ i are the variables to be fixed through minimizing L; we reduced our fitting-flexibility to q degrees of freedom; ⁇ st are no longer independent.
- ⁇ l 1 k ⁇ ⁇ ⁇ l .
- the learning scheme allows exchanging methods for ⁇ -parameter-determination and to apply arbitrary restrictions.
- Equation (16b) is formally identical with (9b) such that the remaining calculus is same as for exp-loss.
- the only relevant algorithmic part to switch between these loss functions is the computation of coefficients w kij in (9a) and (16a).
- the learning algorithm picks from a set of carefully chosen projectors.
- Raw vectors of different feature types are concatenated and the corresponding projector pools combined.
- cg(i) indicates the center of gravity of the class to which index i belongs.
- Low resolution raw vectors are simply normalized image patches containing a face. Of these we apply an LDA algorithm and use the resulting matrix as projector-pool.
- Weights are used to equalize the population of classes (number of images per persons).
- n c ⁇ ( i ) is assigned to each raw vector.
- n c(i) denotes the number of vectors belonging to the class if vector i.
- Weights are also used to manually balance different training databases.
- PCA principle components analysis
- LDA linear discriminant analysis
- Equations (10) and (11) use all r 2 vector combinations. In practice this would be computationally expensive but we don't need all possible combinations for decent convergence and generalization.
- Equations (10) and (11) use all r 2 vector combinations. In practice this would be computationally expensive but we don't need all possible combinations for decent convergence and generalization.
- the probability p(i, j) of selecting pair (i,j) is defined as follows: p ( i,j ) ⁇ square root over ( w i w j ) ⁇ (20)
- Certain aspects of the present invention include process steps and instructions described herein in the form of an algorithm. It should be noted that the process steps and instructions of the present invention could be embodied in software, firmware or hardware, and when embodied in software, could be downloaded to reside on and be operated from different platforms used by real time network operating systems.
- the present invention also relates to an apparatus for performing the operations herein.
- This apparatus may be specially constructed for the required purposes, or it may comprise a general-purpose computer selectively activated or reconfigured by a computer program stored on a computer readable medium that can be accessed by the computer.
- a computer program may be stored in a computer readable storage medium, such as, but is not limited to, any type of disk including floppy disks, optical disks, CD-ROMs, magnetic-optical disks, read-only memories (ROMs), random access memories (RAMs), EPROMs, EEPROMs, magnetic or optical cards, application specific integrated circuits (ASICs), or any type of computer-readable storage medium suitable for storing electronic instructions, and each coupled to a computer system bus.
- the computers referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.
- the present invention is well suited to a wide variety of computer network systems over numerous topologies.
- the configuration and management of large networks comprise storage devices and computers that are communicatively coupled to dissimilar computers and storage devices over a network, such as the Internet.
Abstract
Description
where αid[i]d′[i] represents the di th row and d′i th column of matrix φi. Note that even though Φ has m matrices, each of dimension (q×q), the computation of the similarity
where vi and vj are
ωi,j=1/1+e same[i,j] *Sim(vi,vj)
Alternatively, ωi,j could be defined as a function producing sufficiently approximate values, such as
ωi,j =e −same[i,j]*Sim(vi,vj)
S(u,v)=Φ(A·u,A·v), with A:
where ai are row-vectors of matrix A, referred to as ‘projectors’.
with
y ijε{+1,−1}; particularly: y ij=1 if c i =c j ; y ij=−1 if c i ≠c j (5)
h 1ε{0,1}; (7)
h i(x)h j(x)=0 if i≠j for all xε
w kij:=exp(−y ij S k-1(v i ,v j)) (9a)
and get
and obtain
The Utility of Using Quantum States
which yields a closed form solution similar to that of the ada boost algorithm:
A solution resulting in greater generality applies certain restrictions that we will discuss next.
Eliminating δ
Vector Map+Dot Product (VMDP)
-
- we find that (15a) is just the dot product of u′, v′ plus an irrelevant constant additive shift
ensured convergence-stability.
Polynomial Approach
with independent parameters γ1, . . . , γn and dependent γ0 to ensure
and definition
we plug in (6) as we did above with exp loss:
is assigned to each raw vector. nc(i) denotes the number of vectors belonging to the class if vector i. Using weights in this way provides improved generality of the trained metric.
w kij :=w i w jexp(−y ij S k-1(v i ,v j))—for exp loss (18)
pairs to consider. The current training uses random subsets of these with 105 . . . 106 pairs. The selection is being refreshed every few training cycles.
p(i,j)˜√{square root over (w i w j)} (20)
w kij:=√{square root over (w i w j)}exp(−y ij S k-1(v i ,v j))—(for exp loss) (21)
Claims (21)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/765,728 US8249361B1 (en) | 2010-04-22 | 2010-04-22 | Interdependent learning of template map and similarity metric for object identification |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US12/765,728 US8249361B1 (en) | 2010-04-22 | 2010-04-22 | Interdependent learning of template map and similarity metric for object identification |
Publications (1)
Publication Number | Publication Date |
---|---|
US8249361B1 true US8249361B1 (en) | 2012-08-21 |
Family
ID=46641640
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US12/765,728 Active 2031-01-25 US8249361B1 (en) | 2010-04-22 | 2010-04-22 | Interdependent learning of template map and similarity metric for object identification |
Country Status (1)
Country | Link |
---|---|
US (1) | US8249361B1 (en) |
Cited By (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN103226589A (en) * | 2012-10-15 | 2013-07-31 | 北京大学 | Method for obtaining compact global feature descriptors of image and image retrieval method |
US20140214914A1 (en) * | 2013-01-25 | 2014-07-31 | Cisco Technology, Inc. | System and method for abstracting and orchestrating mobile data networks in a network environment |
US8856541B1 (en) | 2013-01-10 | 2014-10-07 | Google Inc. | Liveness detection |
US8903138B1 (en) | 2011-09-06 | 2014-12-02 | Google Inc. | Face recognition using pre-templates |
WO2015002946A1 (en) * | 2013-07-02 | 2015-01-08 | Snap-On Incorporated | Wheel alignment with target marking for secure logo validation process |
US20150100289A1 (en) * | 2013-10-09 | 2015-04-09 | Technion Research & Development Foundation Limited | Method and system for shapewise comparison |
WO2016021181A1 (en) * | 2014-08-04 | 2016-02-11 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US9270709B2 (en) | 2013-07-05 | 2016-02-23 | Cisco Technology, Inc. | Integrated signaling between mobile data networks and enterprise networks |
US9268793B2 (en) | 2014-03-12 | 2016-02-23 | Google Inc. | Adjustment of facial image search results |
CN105608234A (en) * | 2016-03-18 | 2016-05-25 | 北京京东尚科信息技术有限公司 | Image retrieval method and device |
US9414215B2 (en) | 2013-10-04 | 2016-08-09 | Cisco Technology, Inc. | System and method for orchestrating mobile data networks in a machine-to-machine environment |
US9712634B2 (en) | 2013-03-15 | 2017-07-18 | Cisco Technology, Inc. | Orchestrating mobile data networks in a network environment |
EP3382596A4 (en) * | 2015-11-26 | 2019-08-14 | Tencent Technology (Shenzhen) Company Limited | Human face model matrix training method and apparatus, and storage medium |
US10586118B2 (en) | 2018-01-13 | 2020-03-10 | Toyota Jidosha Kabushiki Kaisha | Localizing traffic situation using multi-vehicle collaboration |
US10616576B2 (en) | 2003-05-12 | 2020-04-07 | Google Llc | Error recovery using alternate reference frame |
US10713585B2 (en) * | 2013-12-16 | 2020-07-14 | Google Llc | Using template exploration for large-scale machine learning |
US10863387B2 (en) | 2013-10-02 | 2020-12-08 | Cisco Technology, Inc. | System and method for orchestrating policy in a mobile environment |
US10916135B2 (en) | 2018-01-13 | 2021-02-09 | Toyota Jidosha Kabushiki Kaisha | Similarity learning and association between observations of multiple connected vehicles |
US10963706B2 (en) | 2018-01-13 | 2021-03-30 | Toyota Jidosha Kabushiki Kaisha | Distributable representation learning for associating observations from multiple vehicles |
US11176706B2 (en) * | 2016-02-03 | 2021-11-16 | Sportlogiq Inc. | Systems and methods for automated camera calibration |
US11887395B2 (en) * | 2020-07-27 | 2024-01-30 | Coupa Software Incorporated | Automatic selection of templates for extraction of data from electronic documents |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6301370B1 (en) | 1998-04-13 | 2001-10-09 | Eyematic Interfaces, Inc. | Face recognition from video images |
US7020337B2 (en) | 2002-07-22 | 2006-03-28 | Mitsubishi Electric Research Laboratories, Inc. | System and method for detecting objects in images |
US7031499B2 (en) | 2002-07-22 | 2006-04-18 | Mitsubishi Electric Research Laboratories, Inc. | Object recognition system |
US7302084B2 (en) * | 2000-02-18 | 2007-11-27 | Microsoft Corporation | Statistically comparing and matching plural sets of digital data |
US7840060B2 (en) * | 2006-06-12 | 2010-11-23 | D&S Consultants, Inc. | System and method for machine learning using a similarity inverse matrix |
-
2010
- 2010-04-22 US US12/765,728 patent/US8249361B1/en active Active
Patent Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6301370B1 (en) | 1998-04-13 | 2001-10-09 | Eyematic Interfaces, Inc. | Face recognition from video images |
US7302084B2 (en) * | 2000-02-18 | 2007-11-27 | Microsoft Corporation | Statistically comparing and matching plural sets of digital data |
US7020337B2 (en) | 2002-07-22 | 2006-03-28 | Mitsubishi Electric Research Laboratories, Inc. | System and method for detecting objects in images |
US7031499B2 (en) | 2002-07-22 | 2006-04-18 | Mitsubishi Electric Research Laboratories, Inc. | Object recognition system |
US7840060B2 (en) * | 2006-06-12 | 2010-11-23 | D&S Consultants, Inc. | System and method for machine learning using a similarity inverse matrix |
Non-Patent Citations (8)
Title |
---|
Collins, M., et al., "Logistic Regression AdaBoost and Bregman Distances," School of Computer Science & Engineering, Hebrew University, Oct. 11, 2000, 26 Pages. |
Freund, Y., et al., "Experiments with a New Boosting Algorithm," AT&T Research, Jan. 22, 1996, 15 Pages. |
Friedman, J., et al., "Additive Logistic Regression: a Statistical View of Boosting," Aug. 20, 1998, 36 Pages. |
Jones, M., et al., Face Recognition Using Boosted Local Features, Mitsubishi Electronic Research Laboratories, Apr. 2003, 10 Pages. |
Li, S., et al., "Illumination Invariant Face Recognition Using Near-Infrared Images," IEEE Transactions on Pattern Analysis and Machine Intelligence, Apr. 2007, pp. 627-639, vol. 29, No. 4. |
Schapire, ., et al., "The Boosting Approach to Machine Learning-An Overview," AT&T Labs-Research Shannon Laboratory, Dec. 19, 2001, 23 Pages. |
Viola, P., et al., "Robust Real-time Object Detection," Second International Workshop on Statistical and Computational Theories of Vision-Modeling, Learning, Computing, and Sampling, Jul. 13, 2001, 25 pages. |
Yang, P., et al., "Face Recognition Using Ada-Boosted Gabor Features," Proceeding of the 6th IEEE International Conference on Automatic Face and Gesture Recognition, May 2004, pp. 356-361. |
Cited By (25)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10616576B2 (en) | 2003-05-12 | 2020-04-07 | Google Llc | Error recovery using alternate reference frame |
US8903138B1 (en) | 2011-09-06 | 2014-12-02 | Google Inc. | Face recognition using pre-templates |
CN103226589A (en) * | 2012-10-15 | 2013-07-31 | 北京大学 | Method for obtaining compact global feature descriptors of image and image retrieval method |
CN103226589B (en) * | 2012-10-15 | 2016-06-15 | 北京大学 | The compact global characteristics obtaining image describes method and the image search method of son |
US8856541B1 (en) | 2013-01-10 | 2014-10-07 | Google Inc. | Liveness detection |
US20140214914A1 (en) * | 2013-01-25 | 2014-07-31 | Cisco Technology, Inc. | System and method for abstracting and orchestrating mobile data networks in a network environment |
US9558043B2 (en) * | 2013-01-25 | 2017-01-31 | Cisco Technology Inc. | System and method for abstracting and orchestrating mobile data networks in a network environment |
US9712634B2 (en) | 2013-03-15 | 2017-07-18 | Cisco Technology, Inc. | Orchestrating mobile data networks in a network environment |
WO2015002946A1 (en) * | 2013-07-02 | 2015-01-08 | Snap-On Incorporated | Wheel alignment with target marking for secure logo validation process |
US9626559B2 (en) | 2013-07-02 | 2017-04-18 | Snap-On Incorporated | Target marking for secure logo validation process |
US9270709B2 (en) | 2013-07-05 | 2016-02-23 | Cisco Technology, Inc. | Integrated signaling between mobile data networks and enterprise networks |
US10863387B2 (en) | 2013-10-02 | 2020-12-08 | Cisco Technology, Inc. | System and method for orchestrating policy in a mobile environment |
US9414215B2 (en) | 2013-10-04 | 2016-08-09 | Cisco Technology, Inc. | System and method for orchestrating mobile data networks in a machine-to-machine environment |
US20150100289A1 (en) * | 2013-10-09 | 2015-04-09 | Technion Research & Development Foundation Limited | Method and system for shapewise comparison |
US10713585B2 (en) * | 2013-12-16 | 2020-07-14 | Google Llc | Using template exploration for large-scale machine learning |
US9268793B2 (en) | 2014-03-12 | 2016-02-23 | Google Inc. | Adjustment of facial image search results |
WO2016021181A1 (en) * | 2014-08-04 | 2016-02-11 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
US9548014B2 (en) | 2014-08-04 | 2017-01-17 | Canon Kabushiki Kaisha | Information processing apparatus and information processing method |
EP3382596A4 (en) * | 2015-11-26 | 2019-08-14 | Tencent Technology (Shenzhen) Company Limited | Human face model matrix training method and apparatus, and storage medium |
US11176706B2 (en) * | 2016-02-03 | 2021-11-16 | Sportlogiq Inc. | Systems and methods for automated camera calibration |
CN105608234A (en) * | 2016-03-18 | 2016-05-25 | 北京京东尚科信息技术有限公司 | Image retrieval method and device |
US10586118B2 (en) | 2018-01-13 | 2020-03-10 | Toyota Jidosha Kabushiki Kaisha | Localizing traffic situation using multi-vehicle collaboration |
US10916135B2 (en) | 2018-01-13 | 2021-02-09 | Toyota Jidosha Kabushiki Kaisha | Similarity learning and association between observations of multiple connected vehicles |
US10963706B2 (en) | 2018-01-13 | 2021-03-30 | Toyota Jidosha Kabushiki Kaisha | Distributable representation learning for associating observations from multiple vehicles |
US11887395B2 (en) * | 2020-07-27 | 2024-01-30 | Coupa Software Incorporated | Automatic selection of templates for extraction of data from electronic documents |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8249361B1 (en) | Interdependent learning of template map and similarity metric for object identification | |
Gao et al. | Learning robust and discriminative low-rank representations for face recognition with occlusion | |
Kodirov et al. | Semantic autoencoder for zero-shot learning | |
US7379627B2 (en) | Integrated solution to digital image similarity searching | |
Avila et al. | Bossa: Extended bow formalism for image classification | |
US8233711B2 (en) | Locality-constrained linear coding systems and methods for image classification | |
US8805653B2 (en) | Supervised nonnegative matrix factorization | |
US20040086185A1 (en) | Method and system for multiple cue integration | |
Ren et al. | Band-reweighed Gabor kernel embedding for face image representation and recognition | |
US20160300118A1 (en) | Discriminative embedding of local color names for object retrieval and classification | |
Fink et al. | Online multiclass learning by interclass hypothesis sharing | |
Lu et al. | Feature fusion with covariance matrix regularization in face recognition | |
CN104050628A (en) | Image processing method and image processing device | |
CN111666976B (en) | Feature fusion method, device and storage medium based on attribute information | |
Cherian et al. | Positive definite matrices: data representation and applications to computer vision | |
Chen et al. | Semi-supervised dictionary learning with label propagation for image classification | |
Zhou et al. | Image-based face recognition under illumination and pose variations | |
Franc et al. | Learning CNNs from weakly annotated facial images | |
US11494431B2 (en) | Generating accurate and natural captions for figures | |
Sharma et al. | A generalized zero-shot quantization of deep convolutional neural networks via learned weights statistics | |
Luo et al. | Hyper-Laplacian regularized multi-view clustering with exclusive L21 regularization and tensor log-determinant minimization approach | |
Berg et al. | Names and faces | |
Liu et al. | Kernel sparse representation on Grassmann manifolds for visual clustering | |
Gál et al. | Multiple kernel learning based modality classification for medical images | |
Stutz | Neural codes for image retrieval |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:STEFFENS, JOHANNES B.;REEL/FRAME:024275/0973Effective date: 20100421 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0405Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 12TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1553); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 12 |