JP2021182402A - Forgetting type access with differential privacy - Google Patents
Forgetting type access with differential privacy Download PDFInfo
- Publication number
- JP2021182402A JP2021182402A JP2021112628A JP2021112628A JP2021182402A JP 2021182402 A JP2021182402 A JP 2021182402A JP 2021112628 A JP2021112628 A JP 2021112628A JP 2021112628 A JP2021112628 A JP 2021112628A JP 2021182402 A JP2021182402 A JP 2021182402A
- Authority
- JP
- Japan
- Prior art keywords
- data
- block
- blocks
- memory
- client device
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/602—Providing cryptographic facilities or services
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/14—Protection against unauthorised use of memory or access to memory
- G06F12/1408—Protection against unauthorised use of memory or access to memory by using cryptography
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2458—Special types of queries, e.g. statistical queries, fuzzy queries or distributed queries
- G06F16/2471—Distributed queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6227—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database where protection concerns the structure of data, e.g. records, types, queries
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0602—Interfaces specially adapted for storage systems specifically adapted to achieve a particular effect
- G06F3/062—Securing storage systems
- G06F3/0623—Securing storage systems in relation to content
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0628—Interfaces specially adapted for storage systems making use of a particular technique
- G06F3/0638—Organizing or formatting or addressing of data
- G06F3/064—Management of blocks
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/06—Digital input from, or digital output to, record carriers, e.g. RAID, emulated record carriers or networked record carriers
- G06F3/0601—Interfaces specially adapted for storage systems
- G06F3/0668—Interfaces specially adapted for storage systems adopting a particular infrastructure
- G06F3/067—Distributed or networked storage systems, e.g. storage area networks [SAN], network attached storage [NAS]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2212/00—Indexing scheme relating to accessing, addressing or allocation within memory systems or architectures
- G06F2212/10—Providing a specific technical effect
- G06F2212/1052—Security improvement
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2221/00—Indexing scheme relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/21—Indexing scheme relating to G06F21/00 and subgroups addressing additional information or applications relating to security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F2221/2123—Dummy operation
Abstract
Description
本開示は、差分プライバシーを備えるメモリ上に記憶されているデータ・ブロックに関連する。 The present disclosure relates to data blocks stored in memory with differential privacy.
企業および個人は、複数のメモリ位置の上にあるメモリ上にデータを記憶するために、分散型のストレージ・システム（すなわち、クラウド・ストレージ・サービス）を使用している。そうした企業および個人の多くは、分散型のストレージ・システムの上にアップロードする前に、自身のデータを暗号化する。クラウド・ストレージ・サービスによって提示される不可欠な機能（記憶されているデータに対し検索クエリを実行することなど）を用いるために、企業は、クラウド・ストレージ・サービスに平文のアクセスを提供することを要求される。結果として、多くの政府および機密に関わる民間部門（健康、金融、および法律など）は、簡便性およびコスト優位性が高まるにもかかわらず、クラウド・ストレージ・サービスを使用したがらない。これに加えて、暗号化単独では、データ・プライバシを保証するには十分でない場合がある。単にデータのアクセス・パターンに関する知識だけでも、そのデータについて有意な量の情報を提供することが可能であり、データを復号する必要は全くないためである。 Businesses and individuals use distributed storage systems (ie, cloud storage services) to store data in memory that is above multiple memory locations. Many of these companies and individuals encrypt their data before uploading it onto a decentralized storage system. To take advantage of the essential features offered by cloud storage services, such as performing search queries on stored data, enterprises are committed to providing plaintext access to cloud storage services. Required. As a result, many government and confidential private sectors (such as health, finance, and law) are reluctant to use cloud storage services, despite increased convenience and cost advantages. In addition, encryption alone may not be sufficient to guarantee data privacy. This is because knowledge of data access patterns alone can provide a significant amount of information about the data, and there is no need to decode the data.
様々な図面における類似の参照符合は類似の要素を示す。
本開示の一態様では、差分プライバシーを有する忘却型アクセスのための方法を提供する。方法は、クライアント装置のデータ処理ハードウェアが、データ・ブロックに対するクエリ（ｑ）を実行するための命令を実行する工程を備える。方法はまた、ダウンロード・フェーズ中、データ処理ハードウェアが、データ・ブロックがクライアント装置に存在するメモリ・ハードウェア上のブロック・スタッシュに記憶されているか否かを判定する工程を備える。データ・ブロックがブロック・スタッシュに記憶されている場合、方法はさらに次を備える：データ処理ハードウェアが、ブロック・スタッシュからデータ・ブロックを除去する工程；データ処理ハードウェアが、データ処理ハードウェアと通信状態にある分散型システムに偽クエリを送信する工程；および、データ処理ハードウェアが、分散型システムから取り出されたランダムなデータ・ブロックを破棄する工程。偽クエリは、分散型システムのメモリに記憶されているランダムなデータ・ブロックを取り出す。オーバライト・フェーズ中、方法は、データ処理ハードウェアが、ブロック・スタッシュから除去されたまたは分散型システムのメモリから取り出されたデータ・ブロックに対する読出または書込動作を実行する工程を備える。方法はさらに、データ処理ハードウェアが、確率に基づいて、データ・ブロックの現在のバージョンを、クライアント装置に存在するメモリ・ハードウェア上のブロック・スタッシュに記憶するか、分散型システムのメモリ上に記憶するかを決定する工程を備える。データ・ブロックがブロック・スタッシュに記憶されている場合、方法はさらに次を備える：データ処理ハードウェアが、分散型システムのメモリに記憶されている別のランダムなデータ・ブロックを取り出すために分散型システムに偽クエリを送信する工程；データ処理ハードウェアが、取り出されたランダムなデータ・ブロックを復号する工程；データ処理ハードウェアが、フレッシュなランダム性でランダムなデータ・ブロックを再暗号化する工程；および、データ処理ハードウェアが、分散型システムのメモリ上へ再暗号化したランダムなデータ・ブロックを再アップロードする工程。
Similar reference marks in various drawings indicate similar elements.
One aspect of the disclosure provides a method for oblivion access with differential privacy. The method comprises a step in which the data processing hardware of the client apparatus executes an instruction for executing a query (q) on the data block. The method also comprises the step of determining whether the data processing hardware is stored in a block stash on the memory hardware present on the client device during the download phase. If the data block is stored in a block stash, the method further comprises: the process by which the data processing hardware removes the data block from the block stash; the data processing hardware is with the data processing hardware. The process of sending a fake query to a distributed system in communication; and the process of data processing hardware discarding random blocks of data retrieved from the distributed system. False queries retrieve a random block of data stored in the memory of a distributed system. During the overwrite phase, the method comprises performing a read or write operation on the data blocks removed from the block stash or removed from the memory of the distributed system by the data processing hardware. The method is further that the data processing hardware stores the current version of the data block in a block stash on the memory hardware present in the client device, or in the memory of the distributed system, based on probability. A step of deciding whether to memorize is provided. If the data block is stored in a block stash, the method further comprises: Data processing hardware is distributed to retrieve another random data block stored in the memory of the distributed system. The process of sending a fake query to the system; the process by which the data processing hardware decrypts the retrieved random data blocks; the process by which the data processing hardware re-encrypts the random data blocks with fresh randomness. And the process by which the data processing hardware re-uploads the re-encrypted random data blocks onto the memory of the distributed system.
本開示の実装は、次の随意の機能のうちの１つ以上を含んでよい。いくつかの実装では、データ・ブロックがダウンロード・フェーズ中にブロック・スタッシュに記憶されていない場合、方法は、データ処理ハードウェアが、分散型システムのメモリからデータ・ブロックを取り出すために、分散型システムに真のクエリを送信する工程を備える。オーバライト・フェーズ中にデータ・ブロックに対する読出または書込動作を実行するとき、方法は、データ・ブロックの新しいバージョンによりデータ・ブロックを更新することによって書込動作を実行する工程も含んでよい。いくつかの構成では、確率は（Ｃ／Ｎ）未満であり、Ｃはブロック・スタッシュのストレージ容量であり、Ｎは分散型システム上の記憶用にデータ処理ハードウェアによってアウトソーシングされるデータ・ブロックの数である。 Implementations of the present disclosure may include one or more of the following optional functions: In some implementations, if the data block is not stored in the block stash during the download phase, the method is distributed because the data processing hardware retrieves the data block from the memory of the distributed system. It has a step of sending a true query to the system. When performing a read or write operation on a data block during the overwrite phase, the method may also include performing the write operation by updating the data block with a newer version of the data block. In some configurations, the probabilities are less than (C / N), C is the storage capacity of the block stash, and N is the data block outsourced by the data processing hardware for storage on a distributed system. It is a number.
いくつかの例では、データ・ブロックの現在のバージョンがオーバライト・フェーズ中にブロック・スタッシュに記憶されていない場合、方法はさらに次も備える：データ処理ハードウェアが、分散型システムのメモリからデータ・ブロックを取り出すために、分散型システムに真のクエリを送信する工程；データ処理ハードウェアが、データ・ブロックの現在のバージョンを暗号化する工程；および、データ処理ハードウェアが、分散型システムのメモリ上へデータ・ブロックの暗号化された現在のバージョンをアップロードする工程。ここで、方法はさらに、分散型システムのメモリから取り出されたデータ・ブロックを破棄する工程も備えてよい。 In some cases, if the current version of the data block is not stored in the block stash during the overwrite phase, the method also includes: Data processing hardware data from the memory of the distributed system. The process of sending a true query to the distributed system to retrieve the block; the process of the data processing hardware encrypting the current version of the data block; and the process of the data processing hardware being the distributed system. The process of uploading an encrypted current version of a data block into memory. Here, the method may further comprise discarding the data blocks retrieved from the memory of the distributed system.
本開示の別の態様では、差分プライバシーを有する忘却型アクセスのための方法を提供する。方法は、クライアント装置のデータ処理ハードウェアが、データ・ブロックに対するクエリ（ｑ）を実行するための命令を実行する工程を備える。ダウンロード・フェーズ中、方法は、データ処理ハードウェアが、データ・ブロックがクライアント装置に存在するメモリ・ハードウェア上のブロック・スタッシュに記憶されているか否かを判定する工程を備える。データ・ブロックがブロック・スタッシュに記憶されている場合、方法は次も備える：データ処理ハードウェアが、ブロック・スタッシュからデータ・ブロックを除去する工程、データ処理ハードウェアが、データ処理ハードウェアと通信状態にある分散型システムに偽クエリを送信する工程、および、データ処理ハードウェアが、分散型システムから取り出されたランダムなデータ・バケツを破棄する工程。偽クエリは、分散型システムのメモリに記憶されている２つのランダムなデータ・バケツをダウンロードし、データ・バケツの各々は複数のデータ・ブロックを含む。オーバライト・フェーズ中、方法はさらに、データ処理ハードウェアが、ブロック・スタッシュから除去されたデータ・ブロックまたは分散型システムのメモリから取り出された対応するデータ・バケツから取得されたデータ・ブロックに対する読出または書込動作を実行する工程を備える。方法はまた、データ処理ハードウェアが、確率に基づいて、データ・ブロックの現在のバージョンを、ブロック・スタッシュに記憶するか、分散型システムのメモリ上に記憶するかを決定する工程も備える。現在のバージョンのデータ・ブロックがブロック・スタッシュに記憶されている場合、方法は次を備える：データ処理ハードウェアが、分散型システムのメモリに記憶されている別の２つのランダムなデータ・バケツをダウンロードするために分散型システムに偽クエリを送信し、各データ・バケツは複数のデータ・ブロックを含む；データ処理ハードウェアが、ランダムなデータ・バケツ内のデータ・ブロックの全てを復号する；データ処理ハードウェアが、フレッシュなランダム性でランダムなデータ・バケツ内のデータ・ブロックを再暗号化する；および、データ処理ハードウェアが、分散型システムのメモリ上へ再暗号化したデータ・ブロックを含むランダムなデータ・バケツを再アップロードする。 Another aspect of the disclosure provides a method for oblivion access with differential privacy. The method comprises a step in which the data processing hardware of the client apparatus executes an instruction for executing a query (q) on the data block. During the download phase, the method comprises the step of determining whether the data processing hardware is stored in a block stash on the memory hardware present on the client device. If the data block is stored in a block stash, the method also includes: the process by which the data processing hardware removes the data block from the block stash, the data processing hardware communicates with the data processing hardware. The process of sending a fake query to a stated distributed system, and the process of data processing hardware discarding a random data bucket retrieved from the distributed system. The fake query downloads two random data buckets stored in the memory of the distributed system, each containing multiple data blocks. During the overwrite phase, the method also reads to the data block that the data processing hardware retrieves from the data block removed from the block stash or from the corresponding data bucket taken from the memory of the distributed system. Alternatively, a step of executing a writing operation is provided. The method also comprises the step of determining whether the data processing hardware stores the current version of the data block in the block stash or in the memory of the distributed system based on probability. If the current version of the data block is stored in the block stash, the method comprises: The data processing hardware has two other random data buckets stored in the memory of the distributed system. Send a fake query to the distributed system for download, each data bucket contains multiple blocks of data; data processing hardware decodes all of the blocks of data in a random data bucket; data The processing hardware re-encrypts the data blocks in a random data bucket with fresh randomness; and the data processing hardware contains the data blocks re-encrypted into the memory of the distributed system. Re-upload a random data bucket.
本開示の実装は、次の随意の特徴のうちの１つ以上を含んでもよい。いくつかの構成では、データ・ブロックがダウンロード・フェーズ中にブロック・スタッシュに記憶されていない場合、方法は、データ処理ハードウェアが、分散型システムのメモリから一対のデータ・バケツをダウンロードするために、分散型システムに真のクエリを送信する工程；データ処理ハードウェアが、２つのデータ・バケツ内のデータ・ブロックの全てを復号する工程；および、データ処理ハードウェアが、２つのデータ・バケツのうちの１つがデータ・ブロックを含むか否かを判定する工程を備える。ここで、真のクエリに応答して分散型システムからダウンロードされるデータ・バケツの各々は、複数のデータ・ブロックと、データ・ブロックの識別子に関連付けられている対応する暗号識別子とを含む。これらの構成では、データ・バケツのうちの１つがデータ・ブロックを含む場合、方法はさらに、データ処理ハードウェアが、対応するデータ・バケツからデータ・ブロックを除去する工程；および、データ処理ハードウェアが、データ・バケツから残りのデータ・ブロックを破棄する工程を備える。 Implementations of the present disclosure may include one or more of the following optional features: In some configurations, if the data block is not stored in the block stash during the download phase, the method is for the data processing hardware to download a pair of data buckets from the memory of the distributed system. The process of sending a true query to a distributed system; the process of data processing hardware decoding all of the data blocks in two data buckets; and the process of data processing hardware of two data buckets. It comprises a step of determining whether one of them contains a data block. Here, each of the data buckets downloaded from the distributed system in response to a true query contains a plurality of data blocks and the corresponding cryptographic identifier associated with the data block identifier. In these configurations, if one of the data buckets contains a data block, the method is further such that the data processing hardware removes the data block from the corresponding data bucket; and the data processing hardware. However, it comprises a step of discarding the remaining data blocks from the data bucket.
いくつかの例では、データ・ブロックの識別子は文字列を含む。オーバライト・フェーズ中にデータ・ブロックに対する読出または書込動作を実行する工程は、データ・ブロックの新しいバージョンによりデータ・ブロックを更新することによって書込動作を実行する工程も含んでよい。確率は（Ｃ／Ｎ）未満であってよく、Ｃはブロック・スタッシュのストレージ容量であり、Ｎは分散型システム上の記憶用にデータ処理ハードウェアによってアウトソーシングされるデータ・ブロックの数である。 In some examples, the data block identifier contains a string. The step of performing a read or write operation on a data block during the overwrite phase may also include performing a write operation by updating the data block with a new version of the data block. The probability may be less than (C / N), where C is the storage capacity of the block stash and N is the number of data blocks outsourced by the data processing hardware for storage on a distributed system.
いくつかの実装では、現在のバージョンのデータ・ブロックがオーバライト・フェーズ中にブロック・スタッシュに記憶されていない場合、方法は、データ処理ハードウェアが、分散型システムのメモリから一対のデータ・バケツをダウンロードするために、分散型システムに真のクエリを送信する工程を備える。ここで、真のクエリに応答して分散型システムからダウンロードされるデータ・バケツの各々は、複数のデータ・ブロックと、データ・ブロックの識別子に関連付けられている対応する暗号識別子とを含む。この実装では、データ・ブロックの現在のバージョンがオーバライト・フェーズ中にブロック・スタッシュに記憶されていない場合、方法は：データ処理ハードウェアが、データ・バケツ内のデータ・ブロックの全てを復号する工程；前記データ処理ハードウェアが、前記データ・バケツのうちの１つ内のデータ・ブロックの以前のバージョンを、データ・ブロックの現在のバージョンで置換する工程；データ処理ハードウェアが、データ・バケツ内のデータ・ブロックの現在のバージョンを含むデータ・ブロックの全てを再暗号化する工程；および、データ処理ハードウェアが、分散型システムのメモリ上へ再暗号化したデータ・ブロックを含むデータ・バケツを再アップロードする工程も備える。 In some implementations, if the current version of the data block is not stored in the block stash during the overwrite phase, the method is that the data processing hardware is a pair of data buckets from the memory of the distributed system. Provide a step of sending a true query to the distributed system to download. Here, each of the data buckets downloaded from the distributed system in response to a true query contains a plurality of data blocks and the corresponding cryptographic identifier associated with the data block identifier. In this implementation, if the current version of the data block is not stored in the block stash during the overwrite phase, the method is: Data processing hardware decrypts all of the data blocks in the data bucket. Step; The data processing hardware replaces the previous version of the data block in one of the data buckets with the current version of the data block; the data processing hardware is the data bucket. The process of re-encrypting all of the data blocks, including the current version of the data blocks in; and the data bucket containing the data blocks that the data processing hardware re-encrypted into the memory of the distributed system. It also has a process to re-upload.
本開示のさらに別の態様では、差分プライバシーを有する忘却型アクセスのための方法を提供する。方法は、クライアント装置のデータ処理ハードウェアが、サーバ上に記憶されているデータ・ブロックに対するクエリ（ｑ）を実行するための命令を実行する工程を備える。方法は、サーバ上に記憶されている、クエリの行われたデータ・ブロック以外のＫ個のブロックに対する第１のダウンロード要求を送信する工程と、クエリの行われたデータ・ブロックおよびＫ−１の他のブロックに対する第２のダウンロード要求を送信する工程とも備える。方法はさらに、サーバ（１１０）から第１のダウンロード要求のＫ個のブロックについて第１のダウンロード・シーケンスを受信する工程と、サーバから第２のダウンロード要求のクエリの行われたデータ・ブロックとＫ−１個の他のブロックとについて、第２のダウンロード・シーケンスを受信する工程と、を備える。 Yet another aspect of the disclosure provides a method for oblivion access with differential privacy. The method comprises a step in which the data processing hardware of the client apparatus executes an instruction for executing a query (q) for a data block stored on the server. The method is to send a first download request for K blocks other than the queried data block stored on the server, and the queried data block and K-1. It also includes a step of transmitting a second download request to another block. The method further comprises the process of receiving the first download sequence from the server (110) for the K blocks of the first download request, and the data blocks and K that have been queried for the second download request from the server. -For one other block, it comprises a step of receiving a second download sequence.
本開示の実装は、次の随意の特徴のうちの１つ以上を含んでもよい。いくつかの例では、サーバは信頼済みでなく、サーバは、暗号化されていない複数の公開利用可能なデータ・ブロックを記憶している。方法は、データ処理ハードウェアが、サーバから受信される第１のダウンロード・シーケンスのうちのＫ個のブロックを破棄する工程を備えてもよい。これに加えてまたはこれに代えて、方法は、データ処理ハードウェアが、サーバから受信される第２のダウンロード・シーケンスのうちのＫ−１個の他のブロックを破棄する工程も含んでよい。Ｋの値は、セキュリティ・パラメータと、０より大きいエラー確率とに基づいてよい。 Implementations of the present disclosure may include one or more of the following optional features: In some examples, the server is untrusted and the server remembers multiple unencrypted publicly available data blocks. The method may include a step in which the data processing hardware discards K blocks of the first download sequence received from the server. In addition to or instead of this, the method may also include the step of the data processing hardware discarding the other K-1 block of the second download sequence received from the server. The value of K may be based on security parameters and error probabilities greater than zero.
忘却型ランダム・アクセス・メモリ（Ｏ−ＲＡＭ）は、クライアントに所有されクライアントに暗号化された、信頼済みでないメモリ上に記憶されているデータに対するクライアントのアクセス・パターンを秘匿することができるものの、Ｏ−ＲＡＭに関連した大きな帯域幅オーバーヘッドおよび／または大きなクライアントストレージの要件のため、Ｏ−ＲＡＭを広範囲に展開することは制限されている。多くのシナリオでは、データ・コンテンツおよびアクセス・パターンが完全に隠されたままであることを保証するというＯ−ＲＡＭの安全保障は、強力すぎる。例えば、他のチャンネル（例えば、データのユーザ／クライアントに関する先験的な知識）を通じて漏れているアクセス・パターンに関する情報を秘匿することは、無意味である場合がある。その場合、クエリの小さな組のみが実際に機密であるときには、アクセス・シーケンス全体を隠すことは不要である。本明細書における実装は、一部の不要なセキュリティ要件を緩和することによって指数関数的に小さな帯域幅オーバーヘッドを達成するために、信頼済みでないメモリ上に記憶されているデータ・ブロックに対し差分プライベート・アクセスを用いることに関する。信頼済みでないメモリは、分散型システム（例えば、クラウド環境）の複数のメモリ位置にわたって存在するストレージ抽象化を生じる場合があり、クライアントは、それら複数のメモリ位置にわたって暗号化されたデータ・ブロックを記憶している場合がある。信頼済みでないメモリはまた、暗号化されていない、公開され知られているデータ・ブロックも記憶している場合がある。それらのシナリオでは、公開され知られている暗号化されていないデータのアクセス・パターンを信頼済みでないメモリから秘匿するために、差分プライベート・アクセスがプライベート情報取出（ＰＩＲ）とともに用いられてもよい。図１Ａおよび図１Ｂには、クライアント１０４によって所有されているＮ個のデータ・ブロック（Ｂ）１０２を分散型システム１４０上に記憶するとともに、クライアント１０４によるデータ・ブロック１０２に対する検索機能を保持しつつ、アクセス・パターンを秘匿するために差分プライベート・アクセスを用いてデータ・ブロック（Ｂ）１０２に対するクエリを忘却的に実行するための一例のシステム１００を示す。クライアント１０４に関連付けられているクライアント装置１２０（例えば、コンピュータ）は、ネットワーク１３０を介して、スケーラブル／エラスティックな非一時的ストレージ抽象化１５０を有する分散型システム１４０と通信する。クライアント装置１２０は、関連するメモリ・ハードウェア１２２および関連するデータ処理ハードウェア１２４も備え得る。ストレージ抽象化１５０（例えば、キー／値ストア、ファイル・システム、データ・ストアなど）は、ストレージ・リソース１１４上にあり、１または複数のクライアント装置１２０によるストレージ・リソース１１４のスケーラブルな使用を可能とする。
Oblivion-type random access memory (O-RAM) can conceal a client's access pattern to data that is owned by the client and encrypted by the client and stored in untrusted memory. Extensive deployment of O-RAM is limited due to the large bandwidth overhead and / or large client storage requirements associated with O-RAM. In many scenarios, the security of O-RAM to ensure that data content and access patterns remain completely hidden is too strong. For example, concealing information about access patterns leaked through other channels (eg, a priori knowledge of data users / clients) can be pointless. In that case, it is not necessary to hide the entire access sequence when only a small set of queries is actually sensitive. Implementations herein are differential private to blocks of data stored in untrusted memory in order to achieve exponentially small bandwidth overhead by mitigating some unnecessary security requirements. -About using access. Untrusted memory can result in storage abstractions that exist across multiple memory locations in a distributed system (eg, a cloud environment), and the client stores encrypted data blocks across those multiple memory locations. May be. Untrusted memory may also store unencrypted, publicly known blocks of data. In those scenarios, differential private access may be used in conjunction with private information retrieval (PIR) to conceal publicly known unencrypted data access patterns from untrusted memory. In FIGS. 1A and 1B, N data blocks (B) 102 owned by the
システム１００は、随意では、公開され知られている暗号化されていないＮ個のデータ・ブロック１０２を１または複数のストレージ・リソース１１４にわたって記憶してもよい。したがって、クライアント装置１２０はデータ・ブロック１０２を所有しなくてもよく、データ・ブロック１０２のコンテンツが複数の構成において公開利用可能である。しかしながら、データ・ブロック１０２が１または複数のストレージ・リソース１１４から取り出される場合、差分プライベート・アクセスの使用によって同様にアクセス・パターンが隠されてもよい。
いくつかの実装では、分散型システム１４０は、ストレージ抽象化１５０に対するアクセスを管理するコンピューティング・デバイス１１２を実行する。例えば、クライアント装置１２０は、データ・ブロック１０２を暗号化してストレージ抽象化１５０上に記憶してもよく、また、ストレージ抽象化１５０からデータ・ブロック１０２を取り出して復号してもよい。示した例では、分散型システム１４０に関連付けられている信頼済みでない側とネットワーク１３０を介して通信状態にあるクライアント装置１２０に関連付けられている信頼済みの側とを有するシステム１００を示しているが、システム１００は、これに代えて、信頼済みのコンピューティング・デバイス（ＣＰＵ）と信頼済みでないデータ・ストレージとを有する大きなイントラネット上に実装されてもよい。分散型システム１４０またはデータ・ストレージに関連付けられている信頼済みでない側は、コンピューティング・デバイス１１２がプロトコルに正直に従うものの、追加の知見を得るために、分散型システム１４０によって漏らされた情報を用いて任意の確率的多項式時間アルゴリズムを実行し得るという点で、「正直だが好奇心に富む（ｈｏｎｅｓｔ−ｂｕｔ−ｃｕｒｉｏｕｓ）」と考えられる。
In some implementations, the distributed
いくつかの実装では、分散型システム１００は、リソース１１０，１１０ａ−ｚを備える。リソース１１０は、ハードウェア・リソースおよびソフトウェア・リソースを含んでよい。ハードウェア・リソース１１０は、コンピューティング・デバイス１１２（データ処理装置およびデータ処理ハードウェアとも呼ばれる）を含んでもよく、非一時的なメモリ１１４（メモリ・ハードウェアおよびストレージ・リソースとも呼ばれる）を含んでもよい。ソフトウェア・リソース１１０は、ソフトウェア・アプリケーション、ソフトウェア・サービス、アプリケーション・プログラム・インタフェース（ＡＰＩ）などを含んでもよい。ソフトウェア・リソース１１０は、ハードウェア・リソース１１０に存在してもよい。例えば、ソフトウェア・リソース１１０がメモリ・ハードウェア１１４に記憶されてもよく、ハードウェア・リソース１１０（例えば、コンピューティング・デバイス１１２）がソフトウェア・リソース１１０を実行していてもよい。
In some implementations, the distributed
ソフトウェア・アプリケーション（すなわち、ソフトウェア・リソース１１０）は、コンピューティング・デバイスにタスクを実行させるコンピュータ・ソフトウェアを指す場合がある。いくつかの例では、ソフトウェア・アプリケーションは、「アプリケーション」、「アプリ（ａｐｐ）」または「プログラム」と呼ばれる場合がある。アプリケーションの例は、次に限定されないが、システム診断アプリケーション、システム管理アプリケーション、システム保守アプリケーション、文書処理アプリケーション、表計算アプリケーション、メッセージング・アプリケーション、メディア・ストリーミング・アプリケーション、ソーシャル・ネットワーキング・アプリケーション、およびゲーム・アプリケーションを含む。 Software application (ie, software resource 110) may refer to computer software that causes a computing device to perform a task. In some examples, software applications may be referred to as "applications," "apps," or "programs." Examples of applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, document processing applications, table computing applications, messaging applications, media streaming applications, social networking applications, and game applications. Includes applications.
メモリ・ハードウェア１１４，１２２は、コンピューティング・デバイス１１２および／またはクライアント装置１２０（すなわち、クライアント装置１２０のデータ処理ハードウェア１２４）による使用のため、プログラム（例えば、命令のシーケンス）またはデータ（例えば、プログラム状態情報）を一時的にまたは永続的に記憶するために用いられる物理デバイスであってよい。メモリ・ハードウェア１１４，１２２は、揮発性および／または不揮発性のアドレス可能な半導体メモリであってよい。不揮発性のメモリの例は、次に限定されないが、フラッシュ・メモリおよび読出専用メモリ（ＲＯＭ）／プログラマブル読出専用メモリ（ＰＲＯＭ）／消去可能プログラマブル読出専用メモリ（ＥＰＲＯＭ）／電子的に消去可能なプログラマブル読出専用メモリ（ＥＥＰＲＯＭ）（例えば、ブート・プログラムなど典型的にはファームウェアに用いられる）を含む。揮発性メモリの例は、次に限定されないが、ランダム・アクセス・メモリ（ＲＡＭ）、忘却型ランダム・アクセス・メモリ（ＯＲＡＭ）、ダイナミック・ランダム・アクセス・メモリ（ＤＲＡＭ）、スタティック・ランダム・アクセス・メモリ（ＳＲＡＭ）、相変化メモリ（ＰＣＭ）、およびディスクまたはテープを含む。
The
ネットワーク１３０は、ローカル・エリア・ネットワーク（ＬＡＮ）、ワイド・エリア・ネットワーク（ＷＡＮ）、および／またはインターネットなど、様々な種類のネットワークを含んでよい。ネットワーク１３０は、長距離（ｌｏｎｇ ｒａｎｇｅ）ネットワーク（例えば、インターネットまたはＷＡＮ）を表わす場合もあるが、いくつかの実装では、ネットワーク１３０は、ローカル・エリア・ネットワーク（ＬＡＮ）など、より短い距離のネットワークを含む。いくつかの実装では、ネットワーク１３０は、標準的な通信技術および／またはプロトコルを用いる。したがって、ネットワーク１３０は、イーサネット（登録商標）、ＷｉＦｉ（Ｗｉｒｅｌｅｓｓ Ｆｉｄｅｌｉｔｙ）（例えば、８０２．１１）、ＷｉＭＡＸ（ｗｏｒｌｄｗｉｄｅ ｉｎｔｅｒｏｐｅｒａｂｉｌｉｔｙ ｆｏｒ
ｍｉｃｒｏｗａｖｅ ａｃｃｅｓｓ）、３Ｇ、ＬＴＥ（Ｌｏｎｇ Ｔｅｒｍ Ｅｖｏｌｕｔｉｏｎ）、デジタル加入者線（ＤＳＬ）、非同期転送モード（ＡＴＭ）、インフィニバンド（ＩｎｆｉｎｉＢａｎｄ）、ＰＣＩエクスプレス・アドバンスド・スイッチ（ＰＣＩ Ｅｘｐｒｅｓｓ Ａｄｖａｎｃｅｄ Ｓｗｉｔｃｈｉｎｇ）、ＢＬＥ（Ｂｌｕｅｔｏｏｔｈ（登録商標） Ｌｏｗ Ｅｎｅｒｇｙ）などの技術を用いるリンクを含む。同様に、ネットワーク１３０上において用いられるネットワーク・プロトコルは、ＭＰＬＳ（ｍｕｌｔｉｐｒｏｔｏｃｏｌ ｌａｂｅｌ ｓｗｉｔｃｈｉｎｇ）、ＴＣＰ／ＩＰ（ｔｒａｎｓｍｉｓｓｉｏｎ ｃｏｎｔｒｏｌ ｐｒｏｔｏｃｏｌ／Ｉｎｔｅｒｎｅｔ ｐｒｏｔｏｃｏｌ）、ＵＤＰ（Ｕｓｅｒ Ｄａｔａｇｒａｍ Ｐｒｏｔｏｃｏｌ）、ＨＴＴＰ（ｈｙｐｅｒｔｅｘｔ ｔｒａｎｓｐｏｒｔ ｐｒｏｔｏｃｏｌ）、ＳＭＴＰ（ｓｉｍｐｌｅ
ｍａｉｌ ｔｒａｎｓｆｅｒ ｐｒｏｔｏｃｏｌ）、ＦＴＰ（ｆｉｌｅ ｔｒａｎｓｆｅｒ ｐｒｏｔｏｃｏｌ）などを含むことが可能である。ネットワーク１３０上において交換されるデータは、ＨＴＭＬ（ｈｙｐｅｒｔｅｘｔ ｍａｒｋｕｐ ｌａｎｇｕａｇｅ）、ＸＭＬ（ｅｘｔｅｎｓｉｂｌｅ ｍａｒｋｕｐ ｌａｎｇｕａｇｅ）を含む技術および／またはフォーマットを用いて表現されることが可能である。加えて、それらのリンクの全部または一部は、ＳＳＬ（ｓｅｃｕｒｅ ｓｏｃｋｅｔｓ ｌａｙｅｒ）、ＴＬＳ（ｔｒａｎｓｐｏｒｔ ｌａｙｅｒ ｓｅｃｕｒｉｔｙ）、ＶＰＮ（ｖｉｒｔｕａｌ ｐｒｉｖａｔｅ ｎｅｔｗｏｒｋ）、ＩＰｓｅｃ（Ｉｎｔｅｒｎｅｔ Ｐｒｏｔｏｃｏｌ ｓｅｃｕｒｉｔｙ）など、従来の暗号化技術を用いて暗号化されることが可能である。他の例では、ネットワーク１３０は、上述のものに代えてまたは加えて、カスタマイズされたおよび／または専用のデータ通信技術を用いる。
The
microwave access, 3G, LTE (Long Term Evolution), Digital Subscriber Line (DSL), Asynchronous Transfer Mode (ATM), InfiniBand, PCI Express Advanced Switch (PCI Express Advanced Switch), (Registered Trademark) Includes links using technologies such as Low Energy). Similarly, the network protocols used on the
It is possible to include mail transfer protocol), FTP (file transfer protocol) and the like. The data exchanged on the
データ・ブロック１０２はアトム単位のデータに相当し、各々がＢバイト毎のサイズを有する。例えば、分散型システム上のストレージに対する典型的なＢの値は、６４ＫＢ〜２５６Ｂである。表記Ｎは、クライアント１０４に関連付けられており（または個人情報取出においてストレージ・リソース１１４に関連付けられており）忘却型ランダム・アクセス・メモリ（Ｏ−ＲＡＭ）または忘却型ストレージ（ＯＳ）を用いてストレージ抽象化１５０上に記憶されている、データ・ブロック１０２の総数を示す。より詳細に以下に記載するように、ＯＳは、データ・ブロック１０２がＯ−ＲＡＭによって用いられる単純なインデックス識別子の代わりに一意な文字列識別子によって識別されるという自然な拡張をＯＳが考慮することを除き、Ｏ−ＲＡＭと同じフレームワーク（すなわち、トランスクリプトおよびセキュリティ定義）を用いることができる。したがって、Ｎは、ストレージ抽象化１５０上のＯ−ＲＡＭまたはＯＳの容量を意味する場合がある。Ｎ個のデータ・ブロック１０２の各々は、メモリ・ハードウェア１１４にわたって存在するストレージ抽象化１５０の対応するメモリ位置１１８，１１８Ａ−Ｎ（図１Ｂ）において記憶される。いくつかの実装では、Ｎ個のデータ・ブロック１０２は個人情報取出（ＰＩＲ）ストレージに関連付けられ、その場合、そのＮ個のデータ・ブロック１０２は、１または複数のストレージ・リソース１１４上に記憶されており、暗号化されておらず、公開利用可能である。
The data block 102 corresponds to data in atom units, each having a size of B bytes. For example, a typical B value for storage on a distributed system is 64KB-256B. Notation N is associated with the client 104 (or associated with the
従来の暗号化スキームによって機密性が提供される一方、従来の暗号化スキームは、機密性の高い情報を信頼済みでない分散型システム１４０に対し暴露し得るデータ・アクセス・パターンを隠すには有効でない。さらに、従来の暗号化スキームでは、分散型システム１４０上に記憶されている暗号化されたデータ１０２を検索することがクライアント１０４に可能となるのは、クライアント１０４が分散型システム１４０にデータ１０２に対する平文のアクセスを提供した場合のみである。データ１０２がクライアント装置１２０に由来するので、クライアント装置１２０は信頼済みであると見なされる。
While traditional cryptographic schemes provide confidentiality, traditional cryptographic schemes are not effective in concealing data access patterns that can expose sensitive information to untrusted distributed
いくつかの実装では、クライアント装置１２０および分散型システム１４０は、暗号化されたデータ・ブロック１０２をストレージ抽象化１５０において忘却的に移動させてデータ・アクセス・パターン（それらのデータ・ブロック１０２の読出／書込が行われた）を分散型システム１４０から完全に隠すために、忘却型転字ルーチン４５０を実行する。例えば、忘却型転字ルーチン４５０は、分散型システム１４０に、アレイＡに配置された、再転字されたＮ個のデータ・ブロック１０２を記憶するためのストレージ抽象化１５０の新しいメモリ位置１１８を割り当てさせてもよく、ストレージ抽象化１５０を複数のデータ・バケツ３５０へと編成、分割、区分させてもよく、その両方であってもよい。いくつかの実装では、忘却型転字ルーチン４５０は、各データ・バケツ３５０が１または複数の真のデータ・ブロック１０２と１または複数のダミーのデータ・ブロック１０３との両方を記憶することが可能であるように、ストレージ抽象化１５０を、θ（ｌｏｇ（ｌｏｇＮ））個のメモリ位置１１８を各々含むＮ個のデータ・バケツ３５０へと編成する。これらの実装では、ストレージ抽象化１５０は、θ（Ｎ×ｌｏｇ（ｌｏｇＮ））に等しい総容量を有する。
In some implementations, the
信頼済みの側において、クライアント装置１２０は、忘却型転字ルーチン４５０を実行する一方、一対の擬似ランダム関数Ｆ１，Ｆ２および対応する識別子ｉｄを用いて、一度に２個のデータ・バケツ３５０を分散型システム１４０から反復的にダウンロードし、メモリ・ハードウェア１２２に対しブロック・スタッシュ３７０を割り当てることができる。受信される各データ・バケツ３５０について、クライアント装置１２０は、転字されたデータ・ブロックを生成するために、ランダムな転字を復号し、対応するデータ・バケツ３５０内のデータ・ブロック１０２に対し適用するとともに、各々の転字されたデータ・ブロック１０２に対する対応するバッファ・バケツ３６０を決定する。ストレージ抽象化１５０において暗号化されたデータ・ブロック１０２を忘却的に移動させるための忘却型転字ルーチンを実行する追加の詳細は、２０１７年４月２７日に出願した米国特許出願６２／４９０，８０４（その全体を引用によって本明細書に援用する）に見出される。いくつかの実装では、さらにクライアント装置１２０は、バケツ３５０の対からデータ・ブロック１０２をダウンロードすることによってローカルメモリ・ハードウェア１２２における忘却型シャッフルを初期化するとともに、新しく選択される擬似ランダム関数Ｆ’１，Ｆ’２を用いる新しいランダムに選択される転字に対しそれにしたがって再暗号化されたデータ・ブロック１０２をシャッフルする前にデータ・ブロック１０２を復号／再暗号化する。その後、クライアント装置１２０は、新しく選択された擬似ランダム関数Ｆ’１，Ｆ’２に基づいて、再転字されたデータ・ブロック１０２を対応するバッファ・バケツ３６０にアップロードする。古いバケツ３５０は、シャッフルが完了した後、削除されてもよい。この忘却型シャッフルは、忘却型転字ルーチン４５０をクライアント装置１２０および分散型システム１４０上で実行する時に生じてもよい。ストレージ抽象化１５０においてＮ個のデータ・ブロック１０２を忘却的にシャッフルする追加の詳細は、２０１７年５月１９日に出願した、米国特許出願６２／５０８，５２３（その全体を引用によって本明細書に援用する）に見出される。
In trusted side, the
いくつかの実装では、クライアント装置１２０がストレージ抽象化１５０上に記憶されている暗号化されたデータ・ブロック１０２にアクセス（読出／書込）する必要がある場合、クライアント装置１２０のデータ処理ハードウェア１２４は、データ・ブロック１０２に対するクエリ（ｑ）を実行するために命令３００，４００を実行する。命令３００，４００を実行することによって、クライアント装置１２０は、データ・ブロック１０２のコンテンツやクライアント装置１２０によって実行されるクエリ（ｑ）のシーケンスを分散型システム１４０に暴露することなく、データ・ブロック１０２を取り出すことができる。クエリ（ｑ）は、２つのフェーズ、すなわち、（１）ダウンロード・フェーズと、（２）オーバライト・フェーズとからなるので、分散型システム１４０は対応する動作が読出であるか書込であるかを意識しない。さらに、命令３００，４００の実行は、いずれのデータ・ブロック１０２が分散型システム１４０から読出／書込を行われたかを不要とする。命令３００，４００の実行には、クライアント装置１２０がデータ・ブロック１０２に対する対応するクエリ（ｑ）を実行する場合、クライアント装置１２０と分散型システム１４０との間の２回のラウンドトリップが必要である。例えば、各クエリ（ｑ）がダウンロード・フェーズとオーバライト・フェーズとを含むので、書込動作に関連付けられているオーバライト・ブロックのコンテンツは、ダウンロード・フェーズ中のダウンロードされるブロックのコンテンツに依存しない。したがって、２つのブロックは、１回のラウンドトリップを用いて要求されることが可能であり、２回目のラウンドトリップは、ストレージ抽象化１５０にオーバライト・ブロックをアップロードするために用いられることができる。
In some implementations, if the
図１Ｂを参照すると、いくつかの実装では、分散型のストレージ・システム１４０は、疎結合メモリ・ホスト１１０，１１０ａ−ｚ（例えば、コンピュータまたはサーバ）を備え、各メモリ・ホストは、データをキャッシュするために用いられ得るストレージ・リソース１１４（例えば、メモリ・ハードウェア、メモリ・ハードウェア、フラッシュ・メモリ、ダイナミック・ランダム・アクセス・メモリ（ＤＲＡＭ）、相変化メモリ（ＰＣＭ）、および／またはディスク）と通信状態にある、コンピューティング・リソース１１２（例えば、１または複数のプロセッサまたは中央処理装置（ＣＰＵ））を有する。ストレージ・リソース１１４上にあるストレージ抽象化１５０は、１または複数のクライアント装置１２０，１２０ａ−ｎによるストレージ・リソース１１４のスケーラブルな使用を可能とする。クライアント装置１２０は、ネットワーク１３０を通じて（例えば、リモート・プロシージャ・コール（ＲＰＣ）を介して）メモリ・ホスト１１０と通信してもよい。
Referring to FIG. 1B, in some implementations, the distributed
いくつかの実装では、分散型のストレージ・システム１４０は「シングル・サイド型（ｓｉｎｇｌｅ−ｓｉｄｅｄ）」であり、クライアント装置１２０がデータ・ブロック１０２に対するクエリ（ｑ）を実行するための命令３００，４００を実行するときに、クライアント装置１２０からの真のクエリ３０２，４０２および／または偽クエリ３０４，４０４に応答してストレージ抽象化１５０からデータ・ブロック１０２および／またはダミーのデータ・ブロック１０３を取り出すための、サーバ・ジョブの必要が除かれる。「シングル・サイド型」とは、メモリ・ホスト１１０に対する要求処理のほとんどが、メモリ・ホスト１１０のＣＰＵ１１２上でのソフトウェアによってではなく、ハードウェアにおいて行われ得る方法を指す。シングル・サイド型の分散型キャッシング・システムに関連する追加の概念および特徴は、米国特許９，１６４，７０２（その全体を引用によって本明細書に援用する）に見出される。
In some implementations, the distributed
分散型システム１４０は、リモート・メモリ・ホスト１１０（例えば、ストレージ抽象化２００）のストレージ・リソース１１４（例えば、メモリ・ハードウェア）においてデータ・ブロック１０２を忘却的に移動させるとともに、ＲＰＣを介して、またはリモート・ダイレクト・メモリ・アクセス（ＲＤＭＡ）可能なネットワーク・インタフェース・コントローラ（ＮＩＣ）１１６を介して、リモート・メモリ・ホスト１１０からデータ・ブロック１０２を得ることができる。ネットワーク・インタフェース・コントローラ１１６（ネットワーク・インタフェース・カード、ネットワーク・アダプタ、またはＬＡＮアダプタとしても知られている）は、ネットワーク１３０にコンピューティング・デバイス／リソース１１２を接続するコンピュータ・ハードウェア・コンポーネントであってもよい。メモリ・ホスト１１０ａ−ｚおよびクライアント装置１２０の両方は、各々、ネットワーク通信用のネットワーク・インタフェース・コントローラ１１６を有してもよい。命令３００，４００および／またはハードウェア・リソース１１０の物理的なプロセッサ１１２上で実行する忘却型転字ルーチン４５０は、メモリ１１４の１組のリモート・ダイレクト・メモリ・アクセス可能な領域／位置１１８Ａ−Ｎをネットワーク・インタフェース・コントローラ１１６に登録する。各メモリ位置１１８は、対応するデータ・ブロック１０２を記憶するように構成されている。
The distributed
いくつかの実装では、クライアント装置１２０がデータ・ブロック１０２に対するクエリ（ｑ）を実行するために命令３００，４００を実行し、クライアント装置１２０のメモリ・ハードウェア１２２におけるブロック・スタッシュ３７０上にデータ・ブロック１０２がローカルに記憶されていると判定する場合、クライアント装置１２０は、ブロック・スタッシュ３７０からデータ・ブロック１０２を取り出すとともに、ローカルメモリ・ハードウェア１２２におけるブロック・スタッシュ３７０からのデータ・ブロック１０２の取出を秘匿するべく、ランダムなブロック１０２（または、真のブロックおよび／または偽ブロック１０２，１０３を含むランダムなデータ・バケツ３５０）を取り出すために偽クエリ３０４，４０４をＮＩＣ１１６に送信する。クライアント装置１２０は、偽クエリ３０４，４０４によりダウンロードされるランダムなブロック１０２を破棄してもよい。一方、データ・ブロック１０２がストレージ抽象化１５０上に記憶されているとクライアント装置１２０が判定する場合、クライアント装置１２０は、ストレージ抽象化１５０から対応するデータ・ブロック１０２を取り出すために、ＮＩＣ１１６に真のクエリ３０２，４０２を送信してもよい。
In some implementations, the
図２Ａおよび図２Ｂは、１または複数の談合（ｃｏｌｌｕｄｉｎｇ）ストレージ・リソース１１４（図２Ａ）または非談合複数のストレージ・リソースのうちの１つ（図２Ｂ）上に記憶されているデータ・ブロック１０２に対するダウンロード要求２０２，２０４を実行するためにクライアント装置１２０上において実行する、差分プライベート情報の情報取出（ＤＰ−ＩＲ）命令の一例を提供するＯ−ＲＡＭおよびＯＳとは異なり、Ｎ個のデータ・ブロック１０２のコンテンツが任意の敵対者を含む全てのパーティによって知られていると仮定される。この場合、信頼済みでないサーバは、クライアント装置１２０に対するアクセスを提供する前に、Ｎ個のデータ・ブロックを生成する。通常、ＰＩＲクライアント装置１２０は、データ・ブロック１０２が暗号化されておらず、それらのメモリ位置が公開利用可能であるので、ステートレスである。
2A and 2B are
Ｎ個のデータ・ブロック１０２を生成および記憶する単一のサーバ１１０（例えば、１つのストレージ・リソース１１４）について、図２Ａには、ストレージ・リソース１１４ａからブロックＢ３（１０２）をダウンロードするためにＤＰ−ＩＲ命令２００を実行するクライアント装置１２０を示す。ここで、ブロックＢ３は、１つのストレージ・リソース１１４ａ上に記憶されている９個のＮブロックＢ１−Ｂ９のうちの１つに相当する。クライアント装置１２０は、クエリされたブロック１０２に関連付けられているインデックスｉ（例えば、ｉ＝１，２，３．．．、または９）を呼び出してもよい。ＤＰ−ＩＲ命令２００は、下限に向かって漸近的に密になる一定なエラー確率（α）に対するセキュリティ・パラメータεを有する差分プライバシーを含む。セキュリティ・パラメータεは０以上であってよく、エラー確率αは０より大きくてよい。ダウンロードされたブロックＢ３に対するアクセス・パターンを秘匿するために、ＤＰ−ＰＩＲ命令２００は、ブロックＢ３以外のＫ個のブロックに対する確率αのダウンロード要求２０２と、ブロックＢ３およびＫ−１個の他のブロックに対する確率１−αの別のダウンロード要求２０４とを実行することによって、真のクエリを偽装する。従って、各ダウンロード要求２０２，２０４は、ストレージ・リソース１１４上に記憶されているＮ個のデータ・ブロック１０２のあいだの帯域幅のちょうどＫ個のブロックを要求する。ダウンロード要求２０２，２０４は、ブロックＢ３が、クライアント装置１２０がダウンロードすることを望むブロックＢ３に対し実際にクエリされるものである、という事実を秘匿する任意の順番で生じてよい。Ｋの値は、セキュリティ・パラメータεと、エラー確率（α）とに基づく。例えば、Ｋは以下のように表現されてもよい。
Single server 110 (e.g., a single storage resource 114) for generating and storing the N data blocks 102 for, in FIG. 2A, in order to download the block B 3 (102) from the
単一のサーバの例では、クライアント装置１２０は、エラー確率αに関連付けられており、クエリされたブロックＢ３以外のＫ個のブロックＢ１，Ｂ２，Ｂ５を返す第１のダウンロード・シーケンス２１２と、エラー確率１−αに関連付けられており、ブロックＢ３およびＫ−１個の他のブロックＢ６，Ｂ９に対する第２のダウンロード・シーケンス２１４とを受信する。第２のダウンロード・シーケンス２１４は、クライアント装置１２０によって、第１のダウンロード・シーケンス２１２を受信する前に受信されてもよく、後に受信されてもよい。エラー確率αに関連付けられている第１のダウンロード・シーケンス２１２において返されるＫ個のブロックＢ１，Ｂ２，Ｂ５と、エラー確率１−αに関連付けられている第２のダウンロード・シーケンス２１４において返されるＫ−１個の他のブロックＢ６，Ｂ９とは、クライアント装置１２０上において実行するＤＰ−ＩＲ命令２００によって、各々一様ランダムに選択されてよい。
In the single server example, the
いくつかの実装では、複数のサーバ１１０，１１０ａ−ｎを運用するエンティティまたは組織（例えば、それぞれのサーバ１１０に関連付けられている２つ以上のストレージ・リソース１１４，１１４ａ−ｎ）は、複数のサーバのうちのフラクションｔのコラプションを生じる該複数のサーバのうちの１つを含む。互いに談合する様々なストレージ・リソース１１４ａ−ｎからデータ・ブロック１０２をダウンロードする場合にクライアント装置１２０によるアクセス・パターンを秘匿するこのシナリオにおいて、図２Ａには、談合するストレージ・リソース１１４ａ−ｎの全てを分けて均等にブロックＢ３を要求するのではなく、一様ランダムに選択されたストレージ・リソース１１４にダウンロード要求２０２，２０４を送信することによって、ブロックＢ３（または別のブロックＢｉ）をダウンロードするためにＤＰ−ＩＲ命令２００を実行するクライアント装置１２０を示す。したがって、複数の談合するサーバの設定においてダウンロードされたブロックＢ３に対するアクセス・パターンを秘匿するために、ＤＰ−ＰＩＲ命令２００は、ブロックＢ３以外のＫ個のブロックに対する確率αを有するダウンロード要求２０２とブロックＢ３およびＫ−１個の他のブロックに対する確率１−αを有する他のダウンロード要求２０４とを実行することによって、一様ランダムに選択されたストレージ・リソース１１４に対し送信される真のクエリを偽装する。クライアント装置からのダウンロード要求２０２，２０４の各々を受信することに応じて、一様ランダムに選択されたストレージ・リソース１１４は、単一のサーバの設定に関連して上述したのと同じようにして、クエリされたブロックＢ３以外のＫ個のブロックＢ１，Ｂ２，Ｂ５に対するエラー確率αに関連付けられている対応するダウンロード・シーケンス２１２と、ブロックＢ３およびＫ−１個の他のブロックＢ６，Ｂ９に対するエラー確率１−αに関連付けられている対応するダウンロード・シーケンス２１４とを返す。
In some implementations, an entity or organization operating
図２Ｂを参照すると、クライアント装置１２０は、複数の非談合サーバ１１０（相互に信頼済みでなく、したがって、互いに情報を共有しない）のうちの１つ（例えば、２つ以上のストレージ・リソース１１４）からのデータ・ブロックＢｑ（１０２）をクエリする。例えば、非談合サーバ１１０は、クライアント装置１２０に対しアクセス可能であるが、契約上の義務または他の理由のために互いに情報を共有しない、別個のエンティティによって所有され得る。各非談合サーバ１１０は、各サーバ１１０がその対応するストレージ・リソース１１４上において実行されるメモリ・アクセス・パターンを全て監視できるように、対話しない敵対者に関連付けられてもよい。ダウンロードされたブロックＢｑに対するアクセス・パターンを秘匿するために、ＤＰ−ＰＩＲ命令２００は、談合しないストレージ・リソース１１４の各々に対し送信される対応するダウンロード要求２２４（各ストレージ・リソース１１４から帯域幅のちょうどｃ個のランダムなブロックをダウンロードすることを要求する）を実行することによって、真のクエリを偽装する。クエリされたブロックＢｑを記憶するストレージ・リソース１１４について、対応するダウンロード要求２２４は、クエリされたブロックＢｑと、ｃ−１個の他のブロックとに対するものである。残りのストレージ・リソース１１４について、各対応するダウンロード要求２２４は、クエリされたブロックＢｑ以外のｃ個のブロックに対するものである。各談合しないストレージ・リソース１１４に対するｃの値は、セキュリティ・パラメータεと、非談合サーバの総数Ｄと、各ストレージ・リソース１１４上に記憶されているＮ個のデータ・ブロック１０２の対応する数とに基づく。例えば、各談合しないストレージ・リソース１１４については、ｃは次のように表現されてよい。
Referring to FIG. 2B, the
いくつかの実装では、Ｏ−ＲＡＭは、クライアント装置１２０が、クライアントに所有されクライアントに暗号化されたデータ・ブロック１０２を、分散型システム１４０のストレージ抽象化１５０にわたって対応するメモリ位置１１８上にプライベートで記憶することを可能とする。図２Ａおよび図２ＢのＤＰ−ＩＲの例とは対照的に、Ｏ−ＲＡＭに記憶されているデータ・ブロック１０２は、クライアント装置１２０によってプライベート・キーを用いて暗号化されており、各データ・ブロック１０２に関連付けられているメモリ位置１１８は、信頼済みでない分散型システム１４０から隠される。図３Ａ〜図３Ｄには、分散型システム１４０にデータ・ブロック１０２のコンテンツやクライアント装置１２０によって実行されるクエリ（ｑ）のシーケンスを暴露することなく、一例のクライアント装置１２０上において実行するストレージ抽象化１５０上に記憶されている暗号化されたデータ・ブロック１０２にアクセス（読出／書込）するクエリ（ｑ）を実行するための差分プライベート−忘却型ランダム・アクセス・メモリ（ＤＰ−ＯＲＡＭ）命令３００を示す。クエリ（ｑ）は、２つのフェーズ、すなわち、（１）ダウンロード・フェーズと、（２）オーバライト・フェーズとからなるので、分散型システム１４０は対応する動作が読出であるか書込であるかを意識せず、またクエリされたデータ・ブロックＢｉが存在しない場合のミスを暴露する。クライアント装置１２０（例えば、データ処理ハードウェア１２４上）において実行するＤＰ−ＯＲＡＭ命令３００は、最初に暗号化モジュール３０５を用いて長さｋのプライベート・キーＫ，Ｋ１，Ｋ２を生成し、Ｎ個の空のブロック・スロット（例えば、空のメモリ位置１１８）からなるストレージ抽象化１５０上のアレイＡを初期化し、クライアント装置１２０のメモリ・ハードウェア１２２上のブロック・スタッシュ３７０を初期化してもよい。アレイＡの各々の空のブロック・スロットは、対応するインデックスＡｉを含んでよい。各々の空のブロック・スロットは、随意では、ダミーのブロック（例えば、０に等しい暗号化を有するブロック）で最初に満たされてもよい。
In some implementations, the O-RAM is such that the
いくつかの例では、クライアント装置１２０および分散型システム１４０は、忘却型転字ルーチン４５０を実行して、分散型システム１４０に、転字されたデータ・ブロック１０２または再転字されたデータ・ブロックの記憶のためにストレージ抽象化１５０の新しいメモリ位置１１８を割り当てさせ、ストレージ抽象化１５０を複数のＭ個のデータ・バケツ３５０，３５０ａ−ｎへと編成、分割、区分させる。各データ・バケツ３５０は、Ｎ個のデータ・ブロック１０２のうちの指定された数を記憶してもよい。いくつかの例では、データ・ブロック１０２は、Ｍ個のデータ・バケツ３５０へのストレージ抽象化１５０の分割が信頼済みでない分散型システム１４０に不明瞭／忘却型であるように、以前の忘却型転字ルーチン４５０中にクライアント装置１２０において実行された擬似ランダムな転字πによって各データ・バケツ３５０に対しランダムに割り当てられる。より小さなデータ・バケツ３５０によって、分散型システム１４０およびクライアント装置１２０が忘却型転字ルーチン４５０および命令３００の実行中に転字動作を実行している時、帯域幅を増加させるためにストレージ抽象化１５０のＯ−ＲＡＭがさらに分割される。分散型システム１４０において初期化されるＭ個のデータ・バケツ３５０の数は、セキュリティおよび／または帯域幅の要件に基づいて調整可能である。
In some examples, the
ブロック・スタッシュ３７０は、クライアント装置１２０のメモリ・ハードウェア１２２上にＣと等しいスペース／サイズ／容量を占有し、各データ・ブロック１０２は、ブロック・スタッシュ３７０（ストレージ抽象化１５０に加えて）に記憶される確率ｐを有する。ブロック・スタッシュ３７０の容量Ｃは、セキュリティおよび／または帯域幅の要件に基づいて調整可能である。例えば、ブロック・スタッシュ３７０の容量Ｃを増加させることによって、増加した帯域幅を犠牲にしてセキュリティが増大する。ブロック・スタッシュ３７０に記憶されているデータ・ブロックの確率ｐは、次のように表現されてよい。
The
ＤＰ−ＯＲＡＭ命令３００は、各暗号化されたデータ・ブロック１０２の実際の位置が分散型システム１４０から隠されるように、クライアント装置１２０に、プライベート・キーＫを用いて各データ・ブロック１０２を暗号化させるとともに、転字πに基づき、各暗号化されたデータ・ブロックＢｉ（１０２）をストレージ抽象化１５０上の対応するランダムに選択された空のブロック・スロットＡｉに反復的にアップロードさせる。さらに、データ・ブロック１０２が、クライアントに所有されたプライベート・キーＫを用いてクライアント装置１２０によって信頼済みの側において暗号化されるので、ストレージ抽象化１５０上に記憶されているＮ個のデータ・ブロック１０２のコンテンツは、分散型システム１５０にも知られない。クライアント装置１２０は、要求されたデータ・ブロック１０２に関連付けられている対応するインデックスｉとともに転字πを適用することによって、ストレージ抽象化１５０上に記憶されている対応するデータ・ブロック１０２に単純にアクセスしてもよい。
The DP-
図３Ａを参照すると、データ・ブロック（Ｂｉ）１０２がクライアント装置１２０のメモリ・ハードウェア１２２上のブロック・スタッシュ３７０に記憶されている場合、データ処理ハードウェア１２４は、ダウンロード・フェーズ中にデータ・ブロック（Ｂｉ）１０２に対するクエリ（ｑ）を実行する。Ｂｉは、暗号化されてストレージ抽象化１５０のアレイＡの上に記憶されているＮ個のデータ・ブロック１−１６のうちのいずれにも相当し得る。データ・ブロックＢｉ（１０２）は確率ｐでブロック・スタッシュ３７０に記憶されているので、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されている何らかのランダムなデータ・ブロック１０２をダウンロードしてブロック・スタッシュ３７０からのデータ・ブロック（Ｂｉ）の取出を難読化するために、ブロック・スタッシュ３７０から、要求されたデータ・ブロック（Ｂｉ）１０２を除去し、信頼済みでない分散型システム１４０に偽クエリ３０４を送信する。示した例では、偽クエリ３０４は、ストレージ抽象化１５０上に記憶されているＮ個のブロック１０２からなるアレイＡの第３のデータ・バケツ３５０ｃから、ブロック１１をランダムに選択し、ダウンロードする。ここで、偽クエリ３０４は、ストレージ抽象化１５０にＡ［ｊ］を要求し、ここで、ｊ（例えば、示した例ではｊは「１１」に等しい）は一様ランダムに選択される。ダウンロードされたデータ・ブロック（例えば、ブロック１１）を偽クエリ３０４により受信すると、データ処理ハードウェア１２４は、クライアント装置１２０が単にランダムにブロックをダウンロードしてブロック・スタッシュ３７０からデータ・ブロック（Ｂｉ）の実際の読出を難読化することがあるので、単純にデータ・ブロック１０２を破棄してもよい。したがって、信頼済みでない分散型システム１４０は、取り出されたブロック（例えば、ブロック１１）が真のクエリ３０２に応じてダウンロードされたか、偽クエリ３０４に応じてダウンロードされたかを、意識しない。データ処理ハードウェア１２４は、ブロック・スタッシュ３７０から取り出されたデータ・ブロック（Ｂｉ）に対し、読出動作または書込動作を実行するとともに、オーバライト・フェーズ中、確率ｐでブロック・スタッシュ３７０に、またはストレージ抽象化１５０に現在のバージョンのデータ・ブロック（Ｂｉ）を記憶してもよい。
Referring to FIG. 3A, if the data block ( Bi ) 102 is stored in the
一方、図３Ｂには、データ・ブロック（Ｂｉ）１０２がクライアント装置１２０のメモリ・ハードウェア１２２上のブロック・スタッシュ３７０にローカルに記憶されていない場合、データ処理ハードウェア１２４が、ダウンロード・フェーズ中にデータ・ブロック（Ｂｉ）１０２に対するクエリ（ｑ）を実行することを示す。データ・ブロックＢｉ（１０２）がブロック・スタッシュ３７０に記憶されていないので、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されているデータ・ブロックＢｉをダウンロードするために、信頼済みでない分散型システム１４０に真のクエリ３０２を送信する。示した例では、Ｂｉは、ストレージ抽象化１５０の第２のデータ・バケツ３５０ｂにおけるブロック６に対応する。ここで、真のクエリ３０２は、ストレージ抽象化１５０にＡ［ｉ］を要求し、ｉ（例えば、示した例ではｉは「６」に等しい）はクライアント装置１２０がアクセスを望むデータ・ブロック（Ｂｉ）１０２のインデックス／識別子に対応する。真のクエリ３０２によりデータ・ブロックＢｉ（１０２）を取り出す／ダウンロードすることに応じて、データ処理ハードウェア１２４はブロックＢｉを復号する。例えば、データ処理ハードウェア１２４は、ブロック６のコンテンツを復号するために、暗号化モジュール３０５上にローカルに記憶されているプライベート・キーＫにアクセスしてもよい。クライアント装置１２０は、取り出したブロックＢｉ（例えば、ブロック６）を保持してもよい（例えば、メモリ・ハードウェア１２２に）。
On the other hand, in FIG. 3B, if the data block ( Bi ) 102 is not locally stored in the
図３Ｃを参照すると、データ処理ハードウェア１２４は、オーバライト・フェーズ中、確率ｐでブロック・スタッシュ３７０における現在のバージョンのデータ・ブロック（Ｂｉ’）をクライアント装置１２０のメモリ・ハードウェア１２２上に記憶する。オーバライト・フェーズは、対応するダウンロード・フェーズ（ブロック・スタッシュ３７０（図３Ａ）から、またはストレージ抽象化１５０（図３Ｂ）から以前のバージョンのデータ・ブロック（Ｂｉ）を取り出した）に続く。いくつかの例では、クライアント装置１２０は、新しいバージョン（Ｂｉ’）によりデータ・ブロックを更新するために、ダウンロード・フェーズ中に取り出されたデータ・ブロック（Ｂｉ）に対し書込動作を実行する。本明細書で用いられるところでは、新しいバージョンＢｉ’により以前のバージョンＢｉを更新することは、新しいバージョンＢｉ’により以前のバージョンＢｉを置換して破棄することを含む。それらの例では、更新された新しいバージョン（Ｂｉ’）は、オーバライト・フェーズ中、確率ｐでブロック・スタッシュ３７０上に記憶される。他の例では、クライアント装置１２０は、ダウンロード・フェーズ中に取り出されたデータ・ブロック（Ｂｉ）に対する読出動作を単純に実行する。これらの例では、ブロック・スタッシュ３７０において記憶されている現在のバージョンは、ダウンロード・フェーズ中に取り出されたバージョンから変化していない。
Referring to FIG. 3C, the
信頼済みでない分散型システム１４０から確率ｐでブロック・スタッシュ３７０における現在のバージョンのデータ・ブロック（Ｂｉ’）を記憶することを難読化するために、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されている何らかのランダムなデータ・ブロック１０２をダウンロードするべく、信頼済みでない分散型システム１４０に別の偽クエリ３０４を送信する。示した例では、偽クエリ３０４は、ストレージ抽象化１５０上に記憶されているＮ個のブロック１０２からなるアレイＡの第２のデータ・バケツ３５０ｂから、ブロック８をランダムに選択し、ダウンロードする。ここで、偽クエリ３０４は、ストレージ抽象化１５０にＡ［ｊ］を要求し、ここで、ｊ（例えば、示した例ではｊは「８」に等しい）は一様ランダムに選択される。偽クエリ３０４によりダウンロードされたデータ・ブロック（例えば、ブロック８）を受信すると、データ処理ハードウェア１２４は、ランダムなフレッシュ性によりブロックを復号および再暗号化し、次いで、分散型システム１４０のストレージ抽象化１５０上へ、再暗号化されたデータ・ブロック（例えば、ブロック８）をアップロードして戻す。ここで、データ処理ハードウェア１２４は、ブロックが読出／書込アクセスについて偽クエリ３０４に応じてアップロードされたか真のクエリ３０２に応じてアップロードされたかを分散型システム１４０が意識しないように、コンテンツを変化させることなく、データ・ブロック（例えば、ブロック８）を単純に再暗号化する。別の言い方をすると、データ処理ハードウェア１２４には、再暗号化されたデータ・ブロック１０２がオーバライトの結果として更新されたコンテンツを含むのか否かを、またはコンテンツが変化しているのか否かを知る方法がない。
To obfuscate the storage of the current version of the data block (Bi ') in the
対して、現在のバージョンのデータ・ブロック（Ｂｉ’）がブロック・スタッシュ３７０に記憶されていない場合、図３Ｄには、クライアント装置１２０が現在のバージョンのデータ・ブロック（Ｂｉ’）を保持する（例えば、メモリ・ハードウェア１２２に）一方、データ処理ハードウェア１２４が、ストレージ抽象化１５０から対応するデータ・ブロック（Ｂｉ）（例えば、ブロック６）を取り出すために、信頼済みでない分散型システム１４０に真のクエリ３０２を送信することを示す。その後、データ処理ハードウェア１２４は、ストレージ抽象化１５０上のストレージ用に分散型システム１４０に現在のバージョンのデータ・ブロック（Ｂｉ’）を暗号化してアップロードするとともに、真のクエリ３０２により取り出された対応する以前のバージョンのデータ・ブロック（Ｂｉ）を破棄する。いくつかの例では、現在のバージョンのデータ・ブロック（Ｂｉ’）は、ダウンロード・フェーズ中に取り出された以前のバージョンのデータ・ブロック（Ｂｉ）に対する書込動作を実行した後にクライアント装置１２０によって更新されたブロック６の新しいバージョンに相当する。他の例では、クライアント装置１２０がダウンロード・フェーズ中に取り出されたデータ・ブロック（Ｂｉ）に対する読出動作しか実行しない場合、分散型システム１４０に対しアップロードされた現在のバージョンのデータ・ブロック（Ｂｉ’）（例えば、ブロック６）は、フレッシュに計算された暗号文（例えば、異なる暗号化）を有することを除き、対応する破棄されたデータ・ブロックＢｉから変化していない場合がある。したがって、信頼済みでない分散型システム１４０は、クライアント装置１２０がプライベート・キーを用いてローカルにデータ・ブロック（Ｂｉ’）をフレッシュに暗号化したので、アップロードされた現在のバージョンのデータ・ブロック（Ｂｉ’）のコンテンツが変化しているか否かを意識しない。
In contrast, if the current version of the data block (B i ') is not stored in the
図３Ａ〜図３ＤのＯ−ＲＡＭの構築には、クライアント１０４によってアウトソーシングされたＮ個のデータ・ブロック１０２の各々が一意なブロック識別子ｉを有する必要があるものの、この忘却型ストレージ（ＯＳ）の構築により、データ・ブロック１０２が文字列によって識別されることが可能となる。さらに、ＯＳプロトコルは、動作がストレージ抽象化１５０上の現在記憶されているデータ・ブロック１０２を参照するか存在していないデータ・ブロックを参照する（すなわち、ブロック・ミス）かを敵対者が学習することが不可能であるように、現在記憶されているいずれのブロックにも対応しない識別子を参照する動作（読出／書込）を扱う必要がある。いくつかの実装では、このＤＰ−ＯＲＡＭ構築／プロトコルでは、クライアント装置１２０に対する位置マップ（一意なインデックス［Ｎ］をＮ個のブロックの各々に割り付ける）を（例えば、メモリ・ハードウェア１２２に）記憶することによって、ＤＰ−ＯＳ構築／プロトコルに変換される。ここで、位置マップは、各ブロック識別子を対応するインデックスに翻訳し、以前に説明したＤＰ−ＯＲＡＭのように、クエリの残りの部分が正確に続くことを可能とする。これらの実装は、しかしながら、位置マップを記憶するのに大量のクライアント側ストレージが必要であるため、実用的でないことがある。対応するインデックスに対するブロック識別子（例えば、文字列）の１対１の位置マップをクライアントが記憶することを緩和するために、ここでの実装は、擬似ランダム関数（ＰＲＦ）を用いてブロック識別子を小さな領域からのインデックスに翻訳することに向けられる。ＰＲＦが単一キーのストレージを必要とするので、クライアントのストレージ要件は、位置マップを記憶することと比較して、著しく低減される。
In order to construct the O-RAM of FIGS. 3A to 3D, each of the N data blocks 102 outsourced by the
図４Ａ〜図４Ｃには、ストレージ抽象化１５０上に暗号化された形式によりＮ個のデータ・ブロック１０２を記憶するべくクライアント装置１２０および分散型システム１４０を初期化するためにクライアント装置１２０上において実行する、一例の差分プライベート−忘却型ストレージ（ＤＰ−ＯＳ）命令４００を示す。図５Ａ〜図５Ｄには、データ・ブロック１０２のコンテンツやクライアント装置１２０によって実行されるクエリ（ｑ）のシーケンスを分散型システム１４０に暴露することなく、ストレージ抽象化１５０上に記憶されている暗号化されたデータ・ブロック１０２のうちの１つにアクセス（読出／書込）するクエリ（ｑ）を実行するために、ＤＰ−ＯＳ命令４００を実行するクライアント装置１２０を示す。
4A-4C show on the
図４Ａを参照すると、データ処理ハードウェア１２４によるＤＰ−ＯＳ命令４００の実行によって、クライアント装置１２０に、暗号化モジュール３０５から取得された１または複数のプライベート・キーを用いてＮ個のデータ・ブロック１０２の各々を暗号化させ、クライアント装置１２０のメモリ・ハードウェア１２２上のブロック・スタッシュ３７０を初期化させ、確率ｐで、暗号化されたデータ・ブロック１０２のサブセットをブロック・スタッシュ３７０に記憶させる。確率ｐは、上述の式（３）を用いて表現されてよい。ＯＲＡＭの場合のように、クライアント装置１２０におけるブロック・スタッシュ３７０は、セキュリティおよび帯域幅の要件に基づいて調整可能であるＯ（Ｃ）個のブロックのストレージの容量を有する。クライアント装置１２０（例えば、データ処理ハードウェア１２４）は、命令４００を実行する場合、追加で、ブロック・スタッシュ３７０に記憶されている各データ・ブロック１０２に対応する一意な文字列識別子ｉｄを記憶するために識別子スタッシュ３７２を初期化する。
Referring to FIG. 4A, the execution of the DP-
各データ・ブロック１０２は、文字列として表現される対応する識別子ｉｄを含む。ＤＰ−ＯＳの初期化中、命令４００がクライアント装置１２０にさらにＰＲＦ（Ｆ１，Ｆ２）をランダムに生成させる一方、分散型システム１４０は、対応する暗号化されたブロック１０２，１０３を記憶するために、ちょうどｍ個のメモリ・スロットを各々有しラベル１−Ｎを有するＮ個のバケツ３５０，３５０Ａ−Ｎを初期化する。示した例では、各バケツ３５０のメモリ・スロットｍの数は次のように表現される。
Each data block 102 contains a corresponding identifier id represented as a string. During the initialization of the DP-OS, the
したがって、対応するバケツ３５０における各メモリ・スロットｍは、暗号化された形式により真のデータ・ブロック１０２を記憶するか、または暗号化された形式によりダミーのデータ・ブロック１０３を記憶する。Ｎ個のバケツ３５０が初期化される場合、各バケツ３５０は、最初にダミーのブロック１０３で満たされてもよい。各ブロック１０２，１０３のメタデータおよびコンテンツは一緒に記憶されるので、各ブロック１０２，１０３は、そのブロックが真であるか偽（すなわち、ダミー）であるかを示す対応するタグを含んでもよい。分散型システム１４０は、Ｎ対のバケツ識別子の位置マップ３５５を記憶し、第ｉ番目の対としてＰｏｓＭａｐ［ｉ］を示してもよい。
Thus, each memory slot m in the
クライアント装置１２０は、データ・ブロック１０２や追加のキーＫ１，Ｋ２のストレージを各々必要とするＰＲＦ（Ｆ１，Ｆ２）を暗号化／復号するための暗号キーを記憶するように、さらに構成されている。簡便のため、Ｆ１（Ｋ１，ｘ）およびＦ２（Ｋ２，ｘ）を用いることに代えて、キーのパラメータが省かれてもよい。明白であろうように、クライアント装置１２０によって生成されクライアント装置１２０上に記憶されるＰＲＦ（Ｆ１，Ｆ２）の使用によって、識別子ｉｄｉを有するデータ・ブロックＢｉが、Ｆ１（ｉｄｉ）およびＦ２（ｉｄｉ）のラベルを有するかまたはブロック・スタッシュ３７０に記憶されている２個のバケツのうちの１個に常にあることが保証される。本明細書では、簡便のため、Ｆ（ｉｄｉ）によって、（Ｆ１（ｉｄｉ），Ｆ２（ｉｄｉ））の対を表す。
The
ブロックを暗号化し、Ｎ個のバケツ３５０Ａ−Ｎを初期化し、ＰＲＦ（Ｆ１，Ｆ２）をランダムに生成した後、命令４００によって、分散型システム１４０のストレージ抽象化１５０上の忘却型ストレージのため、データ処理ハードウェア１２４にＮ個のデータ・ブロック１０２の各々を通じて反復させる。データ・ブロック（Ｂｉ）の配置に対応する現在の反復について、図４Ｂには、インデックスｓ１＝Ｆ１（ｉｄｉ）およびｓ２＝Ｆ２（ｉｄｉ）を有する１対のデータ・バケツ３５０を返す／ダウンロードするためにＰＲＦ（Ｆ１，Ｆ２）を用いるとともに、次いで、２個のバケツのいずれのロードが最少であるかを判定するために、ダウンロードされたデータ・バケツｓ１，ｓ２内のブロック１０２，１０３の全てを復号するデータ処理ハードウェア１２４を示す。本明細書で用いられるところでは、ロードが最少のバケツは、最少量の真のデータ・ブロック１０２を有するデータ・バケツを指す。示した例では、データ・バケツｓ１はより大きな数の真のデータ・ブロック１０２を含むので、データ・バケツｓ２のロードが最少である（例えば、データ・バケツｓ１は１個の真のデータ・ブロック１０２を含み、データ・バケツｓ２は０個の真のデータ・ブロック１０２を含む）。したがって、データ処理ハードウェア１２４は、ロードが最少のバケツｓ２からのダミーのブロック１０３のうちの１つを、現在の反復のデータ・ブロック（Ｂｉ）で置換する。置換されたダミーのブロック１０３は破棄されてもよい。一方、ダウンロードされたデータ・バケツｓ１，ｓ２の各々が等しい数のダミーのブロック１０３を含む場合、クライアント装置１２０は、データ・ブロック（Ｂｉ）１０２の入力のために一方のバケツをランダムに選んでもよい。
The block encrypting, N number of buckets 350A-N to initialize, after generating PRF to (F 1, F 2) at random, by the
いくつかのシナリオでは、また特にデータ・バケツ３５０が真のデータ・ブロック１０２で一杯になっている後の方の反復では、現在の反復の２つのバケツｓ１＝Ｆ１（ｉｄｉ）およびｓ２＝Ｆ２（ｉｄｉ）は、ダミーのブロック１０３を含んでおらず、それによって、バケツを完全に一杯にするとともに、バケツに真のデータ・ブロック１０２を均等にロードする。これらのシナリオでは、命令４００は単純に失敗し、現在処理されているデータ・ブロック（Ｂｉ）を入力するためのロードが最少のバケツを識別するために２個の新しいバケツがダウンロードされるように、中断される。
In some scenarios, and especially in later iterations where the
図４Ｃには、ダウンロードされたバケツｓ１，ｓ２内のブロック１０２，１０３の全てをフレッシュなランダム性で再暗号化し、次いで、バケツｓ１，ｓ２をストレージ抽象化１５０内の同じ位置において分散型システム１４０へ再アップロードして戻すデータ処理ハードウェア１２４を示す。確率ｐで、Ｂｉがブロック・スタッシュ３７０に記憶され得る。残りの確率（すなわち、１−（Ｃ／Ｎ））では、Ｂｉは破棄される。分散型システム１４０はさらに、位置マップＰｏｓＭａｐ［ｉ］をＦ（ｉｄｉ）と等しく設定してもよく、ここで、Ｆ（ｉｄｉ）は（Ｆ１（ｉｄｉ），Ｆ２（ｉｄｉ））の対を表す。
In FIG. 4C, all of the blocks 102, 103 in the downloaded buckets s 1 , s 2 are re-encrypted with fresh randomness, and then the buckets s 1 , s 2 are placed at the same location in the
ストレージ抽象化１５０上に暗号化された形式によりＮ個のデータ・ブロック１０２を忘却的に記憶し、確率ｐでブロック・スタッシュ３７０にデータ・ブロック１０２のサブセットを記憶することによって、ＤＰ−ＯＳを初期化した後、図５Ａには、データ・ブロック（Ｂｉ）１０２がクライアント装置１２０のメモリ・ハードウェア１２２上のブロック・スタッシュ３７０に記憶されている場合、データ処理ハードウェア１２４がダウンロード・フェーズ中にデータ・ブロック（Ｂｉ）１０２に対するクエリ（ｑ）を実行することを示す。クエリ（ｑ）は、ブロックＢｉに対する識別子ｉｄと、そのブロックに対する動作（読出／書込）とを含む。現在のバージョンを表す新しいブロックも、動作が書込動作である場合、クエリ（ｑ）に含まれてよい。ここで、データ処理ハードウェア１２４は、データ・ブロックＢｉ（１０２）がブロック・スタッシュ３７０に記憶されているかを判定するためにブロック・スタッシュ３７０をクエリするか、データ処理ハードウェア１２４は、データ・ブロックＢｉ（１０２）に関連付けられている対応する識別子ｉｄ（例えば、文字列）を特定するために識別子スタッシュ３７２をクエリする。データ処理ハードウェア１２４は、ブロック・スタッシュ３７０からデータ・ブロックＢｉ（１０２）を除去する。確率ｐでデータ・ブロックＢｉ（１０２）がブロック・スタッシュ３７０に記憶されている（および／またはｉｄが識別子スタッシュ３７２に記憶されている）ので、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されている２個のランダムなデータ・バケツ３５０をダウンロードしてブロック・スタッシュ３７０からのデータ・ブロック（Ｂｉ）の取出を難読化するために、信頼済みでない分散型システム１４０に偽クエリ４０４を送信する。示した例では、偽クエリ４０４はバケツ１とバケツ３とをランダムにダウンロードする。クライアント装置１２０は、２個のランダムにダウンロードされたバケツ３５０（例えば、バケツ１およびバケツ３）およびそれぞれのコンテンツを単純に破棄してもよい。
The DP-OS is stored by oblivionally storing N data blocks 102 in an encrypted format on the
一方、図５Ｂには、データ・ブロック（Ｂｉ）がローカルのブロック・スタッシュ３７０に記憶されておらず、また、対応する識別子ｉｄがクライアント装置１２０の識別子スタッシュ３７２にない場合、データ処理ハードウェア１２４がダウンロード・フェーズ中にデータ・ブロック（Ｂｉ）１０２に対するクエリ（ｑ）を実行することを示す。データ・ブロックＢｉ（１０２）がブロック・スタッシュ３７０に記憶されていない（また、識別子ｉｄが識別子スタッシュ３７２にない）ので、データ処理ハードウェア１２４は、インデックスｓ１＝Ｆ１（ｉｄｉ）およびｓ２＝Ｆ２（ｉｄｉ）を有するデータ・バケツ３５０の対をダウンロードするために信頼済みでない分散型システム１４０に真のクエリ４０２を送信し、次いで、データ・ブロック（Ｂｉ）がバケツｓ１，ｓ２のうちの１つに記憶されているか否かを判定するために、ダウンロードされたデータ・バケツｓ１，ｓ２内のブロック１０２，１０３の全てを復号する。データ処理ハードウェア１２４は、暗号化モジュール３０５上にローカルに記憶されているプライベート・キーにアクセスすることによって、バケツの各々内のブロック１０２，１０３の全てを復号してもよい。示した例では、データ処理ハードウェア１２４は、ダウンロードされたバケツｓ１からデータ・ブロック（Ｂｉ）を発見して除去する。除去されたデータ・ブロック（Ｂｉ）はメモリ・ハードウェア１２２におけるクライアント装置１２０上に一時的に記憶されてよく、各ダウンロードされたバケツｓ１，ｓ２からの残りのブロック１０２，１０３が破棄されてもよい。いくつかのシナリオ（示していない）では、ブロック（Ｂｉ）に対するクエリ４０２によって、ブロック（Ｂｉ）が返されたバケツｓ１，ｓ２に発見されない場合、ミスとなる。それらのシナリオでは、オーバライト・フェーズは、存在しないブロック（Ｂｉ）に関するミスをクライアント装置１２０が信頼済みでない分散型システム１４０に暴露しないように、クライアント装置１２０が２個のランダムに選択されたバケツに対し偽のオーバライトを実行することを含む。
On the other hand, FIG. 5B, the data blocks (B i) is not stored in the
図５Ｃを参照すると、いくつかの実装では、図５Ｂのダウンロード・フェーズ中のブロック（Ｂｉ）に対するクエリ４０２によってミス（ブロック（Ｂｉ）が存在しないことを示す）となる場合、データ処理ハードウェア１２４は、このミスに関連付けられている識別子ｉｄを識別子スタッシュ３７２に追加する。識別子スタッシュ３７２に対する識別子ｉｄの追加を難読化するとともに、ブロック（Ｂｉ）のミスを信頼済みでない分散型システム１４０に暴露しないために、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されている２個のランダムなデータ・バケツ３５０（例えば、バケツ１およびバケツ３）をダウンロードするべく、信頼済みでない分散型システム１４０に偽クエリ４０４を送信する。データ処理ハードウェア１２４は、次いで、ストレージ抽象化１５０内の同じ位置において分散型システム１４０にバケツ（例えば、バケツ１およびバケツ３）をアップロードする前に、ランダムにダウンロードされたバケツ内のブロック１０２，１０３の全てを復号し、フレッシュなランダム性で再暗号化する。２個のランダムなバケツに対するダウンロード、復号、および再暗号化は、ランダムにダウンロードされたバケツ（例えば、バケツ１およびバケツ３）のコンテンツが変化していない（フレッシュに計算された暗号文（例えば、異なる暗号化）を有することを除いて）ので、分散型システム１４０からブロック・ミスを秘匿するための偽のオーバライトと呼ばれる。したがって、信頼済みでない分散型システム１４０は、取り出されたデータ・バケツ（例えば、バケツ１およびバケツ３）が真のクエリ４０２に応じてダウンロードされたか偽クエリ４０４に応じてダウンロードされたか否かを、意識しない。
Referring to FIG. 5C, in some implementations, if the
他の実装では、データ・ブロック（Ｂｉ）が存在する場合、図５Ｃには、データ処理ハードウェア１２４が、オーバライト・フェーズ中、確率ｐでブロック・スタッシュ３７０における現在のバージョンのデータ・ブロック（Ｂｉ）をクライアント装置１２０のメモリ・ハードウェア１２２上に記憶することを示す。オーバライト・フェーズは、対応するダウンロード・フェーズ（ブロック・スタッシュ３７０（図５Ａ）から、またはストレージ抽象化１５０（図５Ｂ）からデータ・ブロック（Ｂｉ）を取り出した）に続く。いくつかの例では、クライアント装置１２０は、データ・ブロックの新しいバージョン（Ｂｉ’）によりデータ・ブロック（Ｂｉ）を更新するために、ダウンロード・フェーズ中に取り出されたデータ・ブロック（Ｂｉ）に対し書込動作を実行する。それらの例では、更新された新しいバージョンのデータ・ブロック（Ｂｉ’）は、オーバライト・フェーズ中、確率ｐでブロック・スタッシュ３７０上に記憶される。他の例では、クライアント装置１２０は、ダウンロード・フェーズ中に取り出されたデータ・ブロック（Ｂｉ）に対する読出動作を単純に実行する。これらの例では、ブロック・スタッシュ３７０において記憶されている現在のバージョンは、ダウンロード・フェーズ中に取り出されたバージョンから変化していない。
In other implementations, if a data block ( Bi ) is present, FIG. 5C shows that the
信頼済みでない分散型システム１４０から確率ｐでブロック・スタッシュ３７０における現在のバージョンのデータ・ブロック（Ｂｉ’）を記憶することを難読化するために、データ処理ハードウェア１２４は、ストレージ抽象化１５０上に記憶されている２つのランダムなデータ・バケツ３５０（例えば、バケツ１およびバケツ３）をダウンロードするべく、信頼済みでない分散型システム１４０に偽クエリ４０４を送信する。データ処理ハードウェア１２４は、バケツ（例えば、バケツ１およびバケツ３）をストレージ抽象化１５０内の同じ位置において分散型システム１４０へアップロードして戻す前に、ランダムにダウンロードされたバケツ内のブロック１０２，１０３の全てを復号し、フレッシュなランダム性で再暗号化する。２個のランダムなバケツに対するダウンロード、復号、および再暗号化は、ランダムにダウンロードされたバケツ（例えば、バケツ１およびバケツ３）のコンテンツが変化していない（フレッシュに計算された暗号文（例えば、異なる暗号化）を有することを除いて）ので、現在のバージョンのデータ・ブロック（Ｂｉ’）をブロック・スタッシュ３７０に記憶することを分散型システム１４０から秘匿するための偽のオーバライトと呼ばれる。したがって、信頼済みでない分散型システム１４０は、取り出されたデータ・バケツ（例えば、バケツ１およびバケツ３）が真のクエリ４０２に応じてダウンロードされたか偽クエリ４０４に応じてダウンロードされたか否かを、意識しない。
To obfuscate the storage of the current version of the data block (Bi ') in the
対して、残りの確率１−（Ｃ／Ｎ）で現在のバージョンのデータ・ブロック（Ｂｉ’）がブロック・スタッシュ３７０に記憶されていない場合、図５Ｄには、クライアント装置１２０が現在のバージョンのデータ・ブロック（Ｂｉ’）を保持する（例えば、メモリ・ハードウェア１２２に）一方、データ処理ハードウェア１２４がインデックスｓ１＝Ｆ１（ｉｄｉ）およびｓ２＝Ｆ２（ｉｄｉ）を有するデータ・バケツ３５０の対をダウンロードするために信頼済みでない分散型システム１４０に真のクエリ４０２を送信することを示す。データ・バケツｓ１，ｓ２を受信すると、データ処理ハードウェア１２４は、ブロック１０２，１０３の全てを復号し、バケツｓ１，ｓ２のうちの対応する１つにおける以前のバージョンのデータ・ブロック（Ｂｉ）を新しいバージョンのデータ・ブロック（Ｂｉ’）で置換し、データ・バケツｓ１，ｓ２内の新しいバージョンのデータ・ブロック（Ｂｉ’）を含むブロック１０２，１０３の全てをフレッシュなランダム性で再暗号化する。データ処理ハードウェア１２４は、次いで、ストレージ抽象化１５０内の同じ位置において分散型システム１４０にバケツｓ１，ｓ２を再アップロードして戻す。
In contrast, if the remaining probability 1- (C / N) in the current version of the data block (B i ') is not stored in the
ブロック・スタッシュ３７０のサイズを小さくしておくために、ＤＰ−ＯＳ命令４００がθ（Ｎ×ｌｏｇＮ）個のクエリ（ｑ）を実行した後、命令４００は、新しいシード（Ｋ’１，Ｋ’２）をランダムに選択すること（すなわち、新しいＰＲＦ（Ｆ’１，Ｆ’２）を生成して識別子スタッシュ３７２をリセットすること）および新しいシードに基づいてブロック１０２をバッファ・バケツ３６０に再び割り当てることによってシステムをリフレッシュするべくブロック・シャッフル（例えば、忘却型転字ルーチン４５０を実行することによって）を用いてもよい。ここで、分散型システム１４０は、各データ・ブロック１０２に関連付けられているキーのリストを維持する。したがって、各キーについて、キー（Ｋ１，Ｋ２）に関連付けられている２個のバケツ３５０がダウンロードされ、ブロック１０２，１０３は対応するデータ・ブロック１０２を特定して再暗号化するために復号される。その後、キー（Ｋ’１，Ｋ’２）に関連付けられている２個のバッファ・バケツ３６０がダウンロードされて復号され、２個のバケツ３５０を再暗号化して分散型システム１４０に再アップロードして戻す前に、データ・ブロック１０２が２個のバケツ３５０のうちロードが最少のものに追加される。したがって、命令４００がＮ個のクエリ（ｑ）を実行した後、シャッフル・バッファによって、新しいブロックおよび識別子スタッシュ３７０，３７２が初期化され、新しいＰＲＦ（Ｆ’１，Ｆ’２）に基づいて古いバケツ３５０から新しいデータ・バケツ３６０へデータ・ブロック１０２が全て移動され、古いデータ・バケツ３５０が削除される。クライアント装置１２０は、シャッフル・バッファを実行する時、データ処理ハードウェア１２４上に記憶されているＰｏｓＭａｐを用いてもよい。
To keep reducing the size of the
いくつかの実装では、ＤＰ−ＯＳは、オーバーラップするＬ個のバケツからなるハッシュ・スキーム（Ｎ個のデータ・ブロック１０２の各々が一意な有限の文字列識別子ｋ１−ｋｎに関連付けられており、Ｌ個のバケツのうちの１つへとハッシュされる）を用いる。このＬ個のバケツが信頼済みでない分散型システム１４０に対しアウトソーシングされてもよく、識別子ｋ１−ｋｎの値に関する情報を分散型システム１４０が推測可能でないように、各バケツが同じサイズを有してもよい。ハッシュ・スキームは、データ・ブロック１０２に対する識別子ｋ１−ｋｎの値を隠すように構成される。ハッシュ・スキームは、葉ノードがレベル０を占有して木の根に向かってレベルが増大する、二分木または逆指数関数木を用いてもよい。木の根は、木の最大のレベルを占有する。
In some implementations, DP-OS, each of the hash scheme (N number of data blocks 102 of the L buckets which overlap associated with the string identifier k 1 -k n unique finite And hash to one of the L buckets). May the L number of buckets is outsourced to a trusted non distributed
Ｎ≦Ｌ≦２Ｎ個の葉を有する二分木について、木の各ノードはちょうど１つのブロック１０２を記憶してよい。木は、０の暗号化を有するブロックなど、ダミーのブロック１０３で最初に満たされてもよい。木の葉の番号は左から右に１からＬまで付けられてよく、各葉はＬ個のバケツのうちの１つに対応してよい。ここで、第ｉ番目のバケツは、第ｉ番目の葉から木の根まで一意な経路上のノードに記憶されている全てのブロックを含んでよい。これに加えて、クライアント装置１２０は、随意では、木からオーバフローするブロックを記憶するためにブロック・スタッシュ３７０を維持してもよい。図６には、対応するＬ個のバケツの中へ暗号化された形式によりデータ・ブロック１０２を入力し、データ・ブロック（Ｂｉ）に対するクエリ（ｑ）を実行することにより、二分木を初期化する一例のアルゴリズム６００を提供する。
For a binary tree with N ≦ L ≦ 2N leaves, each node of the tree may store exactly one
逆指数関数木は、記憶されているデータ・ブロックの数Ｎおよび選択の数Ｄによってパラメータ化されてもよい。図７には、Ｎ＝７個のデータ・ブロックおよびＤ＝２個の選択を有する一例の逆指数関数木７００を示す。各レベルにおける子の数は、木を上ってゆくとき、２倍に指数関数的に増加する。Ｌ個のレベルについて、全てのノードはレベル１において最大Ｃ１：＝Ｄ個の子を有し、全てのノードはレベル２において最大Ｃ２＝（Ｃ１）２：＝Ｄ２個の子を有する。レベルｉにおいて、全てのノードは最大Ｃｉ＝（Ｃｉ−１）２：＝（Ｄ２）ｉ−１を有する。レベル０において、葉のノードは存在しない。０より大きな全てのレベルは次のように表現できる。
The inverse exponential tree may be parameterized by the number N of stored data blocks and the number D of selections. FIG. 7 shows an example inverse
木は、各レベルがちょうど１つのノードを有する後に停止してよく、これは、レベル［ｌｏｇ２（ｌｏｇＤＮ）］において生じる。レベルｉの各ノードには、左から右に１からＮｉまでのラベルが付される。１以上のレベルｉにおいて、ノードｊ∈｛１，．．．．，Ｎｉ｝は、レベルｉ＋１において（ｊ−１）・Ｃｉ＋１からｊ・Ｃｉのラベルが付されたＣｉ個の子ノードを有することになる。０以上の各レベルｉの各ノードＮｉは、丸めのためＣｉ個未満の子しか有しない場合がある。逆指数関数木は、Ｎ個のバケツ（第ｉ番目のバケツ（１≦ｉ≦Ｎ）が、根からｉのラベルが付けられた葉ノードまでの一意な経路上の全てのノードを含む）をさらに有する。クライアント装置１２０は、随意では、オーバフロー・ブロック１０２を記憶するためにブロック・スタッシュ３７０を記憶してもよい。図８は、対応するＮ個のバケツの中へ暗号化された形式によりデータ・ブロック１０２を入力し、データ・ブロック（Ｂｉ）に対するクエリ（ｑ）を実行することにより、逆指数関数木を初期化する一例のアルゴリズム８００を提供する。
Trees may be stopped after each level just have one node, which occurs at the level [log 2 (log D N) ]. Each node in level i, labels from 1 from left to right until N i is assigned. At level i of 1 or higher, node j ∈ {1,. .. .. .. , N i} will have at level i + 1 a (j-1) · C from i +1 of j · C i label attached C i-number of child nodes. 0 or more nodes N i of each level i may have only C i fewer than children for rounding. The inverse exponential tree contains N buckets (the i-th bucket (1 ≤ i ≤ N) includes all nodes on a unique path from the root to the leaf node labeled i). Have more. The
図９は、本明細書に記載のシステムおよび方法を実装するために用いられ得る一例のコンピューティング・デバイス（例えば、データ処理ハードウェア）の概略図である。コンピューティング・デバイス９００は、ラップトップ、デスクトップ、ワークステーション、携帯情報端末、サーバ、ブレードサーバ、メインフレーム、および他の適切なコンピュータなど、様々な形態のデジタル・コンピュータを表すことが意図される。ここに示したコンポーネント、それらの接続および関係、ならびにそれらの機能は、例示的な意味でしかなく、本開示において記載され特許を請求される発明の実装を限定することを意味するものではない。
FIG. 9 is a schematic diagram of an example computing device (eg, data processing hardware) that can be used to implement the systems and methods described herein. The
コンピューティング・デバイス９００は、プロセッサ９１０、メモリ９２０、ストレージ・デバイス９３０、メモリ９２０および高速拡張ポート９５０に接続する高速インタフェース／コントローラ９４０、ならびに低速バス９７０およびストレージ・デバイス９３０に接続する低速インタフェース／コントローラ９６０を備える。コンポーネント９１０，９２０，９３０，９４０，９５０、および９６０の各々は、様々なバスを用いて相互接続されており、共通のマザーボード上に、または他の適切な手法により、取り付けられてよい。プロセッサ９１０は、高速インタフェース９４０に結合されているディスプレイ９８０などの外部入力／出力装置上にグラフィカル・ユーザ・インタフェース（ＧＵＩ）用のグラフィック情報を表示するためにメモリ９２０にまたはストレージ・デバイス９３０上に記憶されている命令を含む、コンピューティング・デバイス９００内における実行用の命令を処理することが可能である。他の実装では、複数のメモリおよびメモリ種類に加えて、適切であるように複数のプロセッサおよび／または複数のバスが用いられてよい。また、各デバイスが必要な動作の一部分を提供する複数のコンピューティング・デバイス９００が接続されてもよい（例えば、サーバ・バンク、ブレードサーバのグループ、またはマルチプロセッサ・システムとして）。
The
メモリ９２０は、コンピューティング・デバイス９００内に情報を非一時的に記憶する。メモリ９２０は、コンピュータ可読媒体、揮発性メモリユニット、または不揮発性メモリユニットであってよい。非一時的なメモリ９２０は、コンピューティング・デバイス９００による使用のため、プログラム（例えば、命令のシーケンス）またはデータ（例えば、プログラム状態情報）を一時的にまたは永続的に記憶するために用いられる物理デバイスであってよい。不揮発性のメモリの例は、次に限定されないが、フラッシュ・メモリおよび読出専用メモリ（ＲＯＭ）／プログラマブル読出専用メモリ（ＰＲＯＭ）／消去可能プログラマブル読出専用メモリ（ＥＰＲＯＭ）／電子的に消去可能なプログラマブル読出専用メモリ（ＥＥＰＲＯＭ）（例えば、ブート・プログラムなど典型的にはファームウェアに用いられる）を含む。揮発性メモリの例は、次に限定されないが、ランダム・アクセス・メモリ（ＲＡＭ）、ダイナミック・ランダム・アクセス・メモリ（ＤＲＡＭ）、スタティック・ランダム・アクセス・メモリ（ＳＲＡＭ）、相変化メモリ（ＰＣＭ）、およびディスクまたはテープを含む。
The
ストレージ・デバイス９３０（例えば、メモリ・ハードウェア）は、コンピューティング・デバイス９００にマス・ストレージを提供することができる。いくつかの実装では、ストレージ・デバイス９３０はコンピュータ可読媒体である。様々な異なる実装では、ストレージ・デバイス９３０は、フロッピー（登録商標）ディスク装置、ハードディスク装置、光学ディスク装置、もしくはテープ装置、フラッシュ・メモリまたは他の同様のソリッド・ステート・メモリ装置、またはストレージ・エリア・ネットワークもしくは他の構成における装置を含む装置のアレイであってよい。追加の実装では、コンピュータ・プログラム製品は情報キャリアにより有形に具体化される。コンピュータ・プログラム製品は、実行時に上述のものなど１または複数の方法を実行する、命令を含む。情報キャリアは、メモリ９２０、ストレージ・デバイス９３０、またはプロセッサ９１０上のメモリなど、コンピュータ可読媒体または機械可読媒体である。
The storage device 930 (eg, memory hardware) can provide mass storage to the
高速コントローラ９４０がコンピューティング・デバイス９００用の帯域幅集約的な動作を管理する一方、低速コントローラ９６０は、より帯域幅集約的でない動作を管理する。そのような役割の割当は単に例示に過ぎない。いくつかの実装では、高速コントローラ９４０は、メモリ９２０、ディスプレイ９８０（例えば、グラフィックス・プロセッサまたはアクセラレータを通じて）、および高速拡張ポート９５０（様々な拡張カード（示していない）を受け入れることができる）に結合されている。いくつかの実装では、低速コントローラ９６０は、ストレージ・デバイス９３０および低速拡張ポート９７０に結合されている。低速拡張ポート９７０（様々な通信ポート（例えば、ＵＳＢ、Ｂｌｕｅｔｏｏｔｈ（登録商標）、イーサネット（登録商標）、無線イーサネット（登録商標））を含んでよい）は、１または複数の入力／出力デバイス（キーボード、ポインティング・デバイス、スキャナなど）またはネットワーク・デバイス（スイッチもしくはルーターなど）に対し、結合されてよい（例えば、ネットワーク・アダプタを通じて）。
The
コンピューティング・デバイス９００は、図に示すように、多くの異なる形態により実装されてよい。例えば、１つの標準的なサーバ９００ａとして実装されてもよく、そのようなサーバ９００ａのグループにより複数回実装されてもよく、ラップトップ・コンピュータ９００ｂとして、またはラック・サーバ・システム９００ｃの一部として実装されてもよい。
The
ソフトウェア・アプリケーション（すなわち、ソフトウェア・リソース）は、コンピューティング・デバイスにタスクを実行させるコンピュータ・ソフトウェアを指す場合がある。いくつかの例では、ソフトウェア・アプリケーションは、「アプリケーション」、「アプリ（ａｐｐ）」または「プログラム」と呼ばれる場合がある。アプリケーションの例は、次に限定されないが、システム診断アプリケーション、システム管理アプリケーション、システム保守アプリケーション、文書処理アプリケーション、表計算アプリケーション、メッセージング・アプリケーション、メディア・ストリーミング・アプリケーション、ソーシャル・ネットワーキング・アプリケーション、およびゲーム・アプリケーションを含む。 Software applications (ie, software resources) may refer to computer software that causes computing devices to perform tasks. In some examples, software applications may be referred to as "applications," "apps," or "programs." Examples of applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, document processing applications, table computing applications, messaging applications, media streaming applications, social networking applications, and game applications. Includes applications.
非一時的なメモリは、コンピューティング・デバイスによる使用のため、プログラム（例えば、命令のシーケンス）またはデータ（例えば、プログラム状態情報）を一時的にまたは永続的に記憶するために用いられる物理デバイスであってよい。非一時的なメモリは、揮発性および／または不揮発性のアドレス可能な半導体メモリであってよい。不揮発性のメモリの例は、次に限定されないが、フラッシュ・メモリおよび読出専用メモリ（ＲＯＭ）／プログラマブル読出専用メモリ（ＰＲＯＭ）／消去可能プログラマブル読出専用メモリ（ＥＰＲＯＭ）／電子的に消去可能なプログラマブル読出専用メモリ（ＥＥＰＲＯＭ）（例えば、ブート・プログラムなど典型的にはファームウェアに用いられる）を含む。揮発性メモリの例は、次に限定されないが、ランダム・アクセス・メモリ（ＲＡＭ）、ダイナミック・ランダム・アクセス・メモリ（ＤＲＡＭ）、スタティック・ランダム・アクセス・メモリ（ＳＲＡＭ）、相変化メモリ（ＰＣＭ）、およびディスクまたはテープを含む。 Non-temporary memory is a physical device used to temporarily or permanently store a program (eg, a sequence of instructions) or data (eg, program state information) for use by a computing device. It may be there. The non-temporary memory may be a volatile and / or non-volatile addressable semiconductor memory. Examples of non-volatile memory are, but are not limited to, flash memory and read-only memory (ROM) / programmable read-only memory (PROM) / erasable programmable read-only memory (EPROM) / electronically erasable programmable. Includes Read-Only Memory (EEPROM) (typically used for firmware such as boot programs). Examples of volatile memory are, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM). , And includes discs or tapes.
本明細書に記載のシステムおよび技術の様々な実装は、デジタルな電子回路および／または光回路、集積回路、特別に設計されたＡＳＩＣ（特定用途向けＩＣ）、コンピュータ・ハードウェア、ファームウェア、ソフトウェア、および／またはそれらの組み合わせにより実現可能である。それらの様々な実装は、ストレージ・システム、１つ以上の入力装置、および１つ以上の出力装置との間でデータおよび命令を送受信するように結合されている、１つ以上のプログラム可能な（専用または汎用の）プロセッサを備えるプログラム可能なコンピュータ上において実行可能および／または解釈可能である、１または複数のコンピュータ・プログラムによる実装を含むことが可能である。 Various implementations of the systems and technologies described herein include digital electronic and / or optical circuits, integrated circuits, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and more. And / or a combination thereof is feasible. Their various implementations are coupled to send and receive data and instructions to and from a storage system, one or more input devices, and one or more output devices. It can include implementations by one or more computer programs that are executable and / or interpretable on a programmable computer with a dedicated or general purpose processor.
それらのコンピュータ・プログラム（プログラム、ソフトウェア、ソフトウェア・アプリケーション、またはコードとしても知られている）は、プログラム可能なプロセッサ用の機械命令を含み、高レベルの手続的および／またはオブジェクト指向のプログラミング言語により、アセンブリ／機械語により、またはそのバケツにより実装されることが可能である。本明細書で用いられるところでは、用語「機械可読媒体」および「コンピュータ可読媒体」は、機械可読信号として機械命令を受信する機械可読媒体を含め、プログラム可能なプロセッサに機械命令および／またはデータを提供するために用いられる、任意のコンピュータ・プログラム製品、非一時的なコンピュータ可読媒体、装置、および／またはデバイス（例えば、磁気ディスク、光ディスク、メモリ、プログラム可能論理回路（ＰＬＤ））を指す。用語「機械可読信号」は、プログラム可能なプロセッサに機械命令および／またはデータを提供するために用いられる任意の信号を指す。 Their computer programs (also known as programs, software, software applications, or code) include machine instructions for programmable processors and are by a high-level procedural and / or object-oriented programming language. Can be implemented by assembly / machine language, or by its bucket. As used herein, the terms "machine-readable medium" and "computer-readable medium" refer to machine instructions and / or data to a programmable processor, including machine-readable media that receive machine instructions as machine-readable signals. Refers to any computer program product, non-transient computer-readable medium, device, and / or device (eg, magnetic disk, disk, memory, programmable logic circuit (PLD)) used to provide. The term "machine readable signal" refers to any signal used to provide machine instructions and / or data to a programmable processor.
本明細書に記載の処理および論理フローは、入力データに対する演算と出力の生成とによって機能を実行するように１または複数のコンピュータ・プログラムを実行する１または複数のプログラム可能なプロセッサによって実行されることが可能である。処理および論理フローは、専用の論理回路（例えば、ＦＰＧＡ（ｆｉｅｌｄ ｐｒｏｇｒａｍｍａｂｌｅ ｇａｔｅ ａｒｒａｙ）またはＡＳＩＣ（特定用途向けＩＣ））によって実行されることが可能である。コンピュータ・プログラムの実行に適切なプロセッサは、例として、汎用および専用のマイクロプロセッサ、および任意の種類のデジタル・コンピュータの１または複数のプロセッサの両方を含む。一般に、プロセッサは、読出専用メモリ、ランダム・アクセス・メモリ、またはその両方から命令およびデータを受け取るであろう。コンピュータの必須要素は、命令を実行するためのプロセッサと、命令およびデータを記憶するための１または複数のメモリ・デバイスとである。一般に、コンピュータは、データを記憶するための１または複数のマス・ストレージ（例えば、磁気、光磁気ディスク、または光ディスク）を備えるか、データの受信、データの送信、またはその両方を行うように、該マス・ストレージに対し動作可能に結合されている。しかしながら、コンピュータがそのようなデバイスを備える必要はない。コンピュータ・プログラム命令およびデータを記憶するために適切なコンピュータ可読媒体は、例として、半導体メモリ・デバイス（例えば、ＥＰＲＯＭ、ＥＥＰＲＯＭおよび、フラッシュメモリ・デバイス）、磁気ディスク（例えば、内部ハードディスクまたはリムーバブル・ディスク）、光磁気ディスク、ならびにＣＤ−ＲＯＭおよびＤＶＤ−ＲＯＭディスクを含む、全ての形式の不揮発性メモリ、メディア、およびメモリ・デバイスを含む。プロセッサおよびメモリは、専用論理回路によって補足されるか、専用論理回路に組み込まれることが可能である。 The processes and logical flows described herein are performed by one or more programmable processors that execute one or more computer programs to perform functions by performing operations on input data and generating outputs. It is possible. The processing and logic flow can be performed by a dedicated logic circuit (eg FPGA (field programgable gate array) or ASIC (application specific integrated circuit)). Suitable processors for running computer programs include, for example, general purpose and dedicated microprocessors, and one or more processors of any type of digital computer. In general, the processor will receive instructions and data from read-only memory, random access memory, or both. Essential elements of a computer are a processor for executing instructions and one or more memory devices for storing instructions and data. In general, a computer may include one or more mass storages (eg, magnetic, magneto-optical disk, or optical disk) for storing data, receive data, transmit data, or both. It is operably coupled to the mass storage. However, the computer does not have to be equipped with such a device. Suitable computer-readable media for storing computer program instructions and data include, for example, semiconductor memory devices (eg, EPROM, EEPROM and flash memory devices), magnetic disks (eg, internal hard disks or removable disks). ), Magneto-optical discs, and all types of non-volatile memory, media, and memory devices, including CD-ROM and DVD-ROM discs. The processor and memory can be supplemented by dedicated logic circuits or incorporated into dedicated logic circuits.
ユーザとの対話を提供するため、本開示の１または複数の態様は、ユーザに情報を表示するためのディスプレイ・デバイス（例えば、ＣＲＴ（陰極線管）、ＬＣＤ（液晶ディスプレイ）モニタ、またはタッチ・スクリーン）を有する、また随意では、それによってユーザがコンピュータに入力を提供可能であるキーボードおよびポインティング・デバイス（例えば、マウスまたはトラックボール）を有する、コンピュータ上に実装されることが可能である。他の種類のデバイスもユーザとの対話を提供するために用いられることが可能である。例えば、ユーザに対し提供されるフィードバックは、任意の形態の感覚フィードバック（例えば、視覚フィードバック、聴覚フィードバック、または触覚フィードバック）であることが可能であり、ユーザからの入力は、音響、音声、または触覚の入力を含む、任意の形態により受信されることが可能である。加えて、コンピュータは、ユーザによって用いられるデバイスとの間でドキュメントを送受信することによって（例えば、ウェブ・ブラウザから受信される要求に応じてユーザのクライアント装置上のウェブ・ブラウザにウェブ・ページを送信することによって）、ユーザと対話することが可能である。 To provide user interaction, one or more aspects of the disclosure are display devices for displaying information to the user (eg, a CRT (cathode tube), LCD (liquid crystal display) monitor, or touch screen. ), And optionally, it can be implemented on a computer having a keyboard and a pointing device (eg, a mouse or trackball) capable of providing input to the computer. Other types of devices can also be used to provide dialogue with the user. For example, the feedback provided to the user can be any form of sensory feedback (eg, visual feedback, auditory feedback, or tactile feedback) and the input from the user can be acoustic, audio, or tactile. It can be received in any form, including the input of. In addition, the computer sends a web page to the web browser on the user's client device by sending and receiving documents to and from the device used by the user (eg, in response to a request received from the web browser). By doing so), it is possible to interact with the user.
多くの実装について記載した。しかしながら、様々な変更が本開示の精神および範囲から逸脱することなくなされ得ることが理解されるであろう。したがって、他の実装は添付の特許請求の範囲内にある。 Many implementations have been described. However, it will be appreciated that various changes can be made without departing from the spirit and scope of the present disclosure. Therefore, other implementations are within the claims of the attachment.
Claims (6)
前記サーバ（１１０）上に記憶されているＫ個のブロック（１０２）について、前記データ処理ハードウェア（１２４）から第１のダウンロード要求（２０２）を送信する工程であって、前記Ｋ個のブロックは、クエリの行われた前記データ・ブロック（１０２）を含まない、工程と、
クエリの行われた前記データ・ブロック（１０２）とＫ−１個の他のブロック（１０２）とについて、前記データ処理ハードウェア（１２４）から第２のダウンロード要求（２０４）を送信する工程と、
前記サーバ（１１０）から前記第１のダウンロード要求（２０２）の前記Ｋ個のブロック（１０２）について、第１のダウンロード・シーケンス（２１２）を受信する工程と、
前記サーバ（１１０）から前記第２のダウンロード要求（２０４）のクエリの行われた前記データ・ブロック（１０２）と前記Ｋ−１個の他のブロック（１０２）とについて、第２のダウンロード・シーケンス（２１４）を受信する工程と、を備える方法。 A step in which the data processing hardware (124) of the client device (120) executes an instruction (200) for executing a query (q) for a data block (102) stored on the server (110). ,
A step of transmitting a first download request (202) from the data processing hardware (124) for the K blocks (102) stored on the server (110), wherein the K blocks are transmitted. Does not include the queryed data block (102).
A step of transmitting a second download request (204) from the data processing hardware (124) for the queryed data block (102) and K-1 other blocks (102).
A step of receiving a first download sequence (212) from the server (110) for the K blocks (102) of the first download request (202).
A second download sequence for the data block (102) queried by the server (110) for the second download request (204) and the other K-1 blocks (102). A method comprising, and a step of receiving (214).
データ処理ハードウェアと、
前記データ処理ハードウェアと通信するメモリ・ハードウェアと、を備え、前記メモリ・ハードウェアは、前記データ処理ハードウェア上で実行されたときに前記データ処理ハードウェアに請求項１〜５のいずれか一項に記載の方法を含む動作を実行させる命令を記憶する、システム。 It ’s a system,
Data processing hardware and
A memory hardware that communicates with the data processing hardware, the memory hardware comprising any of claims 1-5 to the data processing hardware when executed on the data processing hardware. A system that stores instructions to perform an operation, including the method described in paragraph 1.
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201762597781P | 2017-12-12 | 2017-12-12 | |
US62/597,781 | 2017-12-12 | ||
JP2019567324A JP6911158B2 (en) | 2017-12-12 | 2018-01-12 | Failure-oblivious access with differential privacy |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2019567324A Division JP6911158B2 (en) | 2017-12-12 | 2018-01-12 | Failure-oblivious access with differential privacy |
Publications (2)
Publication Number | Publication Date |
---|---|
JP2021182402A true JP2021182402A (en) | 2021-11-25 |
JP7124182B2 JP7124182B2 (en) | 2022-08-23 |
Family
ID=61074615
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2019567324A Active JP6911158B2 (en) | 2017-12-12 | 2018-01-12 | Failure-oblivious access with differential privacy |
JP2021112628A Active JP7124182B2 (en) | 2017-12-12 | 2021-07-07 | Forgetful access with differential privacy |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2019567324A Active JP6911158B2 (en) | 2017-12-12 | 2018-01-12 | Failure-oblivious access with differential privacy |
Country Status (6)
Country | Link |
---|---|
US (1) | US11727124B2 (en) |
EP (2) | EP3619637B1 (en) |
JP (2) | JP6911158B2 (en) |
KR (1) | KR102323549B1 (en) |
CN (1) | CN110709846B (en) |
WO (1) | WO2019117978A1 (en) |
Families Citing this family (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CA3086236A1 (en) * | 2017-12-18 | 2019-06-27 | Beijing Sankuai Online Technology Co., Ltd | Encrypted storage of data |
US11113296B1 (en) * | 2020-04-14 | 2021-09-07 | Google Llc | Metadata management for a transactional storage system |
JP7384740B2 (en) | 2020-04-27 | 2023-11-21 | 株式会社日立製作所 | Search system, search device, and search method |
CN112667712B (en) * | 2020-12-31 | 2023-03-17 | 安徽工业大学 | Grouped accurate histogram data publishing method based on differential privacy |
US11308226B1 (en) * | 2021-02-22 | 2022-04-19 | CipherMode Labs, Inc. | Secure collaborative processing of private inputs |
CN114039990B (en) * | 2021-11-01 | 2022-07-29 | 上海交通大学 | Inadvertent access to storage systems |
CN114584294B (en) * | 2022-02-28 | 2024-04-16 | 淘宝（中国）软件有限公司 | Method and device for carelessly dispersing and arranging |
Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2011013490A1 (en) * | 2009-07-28 | 2011-02-03 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Information processing device, information processing method, program and web system |
JP2014044551A (en) * | 2012-08-27 | 2014-03-13 | Sharp Corp | Content acquisition device, content acquisition system, content acquisition method and content acquisition program for terminal |
JP2016081522A (en) * | 2014-10-10 | 2016-05-16 | ザ・ボーイング・カンパニーＴｈｅ Ｂｏｅｉｎｇ Ｃｏｍｐａｎｙ | System and method for reducing information leakage from memory |
Family Cites Families (13)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5123045A (en) | 1989-08-18 | 1992-06-16 | Massachusetts Institute Of Technology | Comprehensive software protection system |
US6553409B1 (en) * | 1999-07-09 | 2003-04-22 | Microsoft Corporation | Background cache synchronization |
US6952737B1 (en) * | 2000-03-03 | 2005-10-04 | Intel Corporation | Method and apparatus for accessing remote storage in a distributed storage cluster architecture |
US9098519B2 (en) * | 2008-09-16 | 2015-08-04 | File System Labs Llc | Methods and apparatus for distributed data storage |
US9804928B2 (en) * | 2011-11-14 | 2017-10-31 | Panzura, Inc. | Restoring an archived file in a distributed filesystem |
JP2013156798A (en) * | 2012-01-30 | 2013-08-15 | Kddi Corp | Storage device, method for concealing access pattern, and program |
US9015853B2 (en) | 2012-06-15 | 2015-04-21 | The Regents Of The University Of California | Concealing access patterns to electronic data storage for privacy |
US9164702B1 (en) | 2012-09-07 | 2015-10-20 | Google Inc. | Single-sided distributed cache system |
US9747456B2 (en) | 2013-03-15 | 2017-08-29 | Microsoft Technology Licensing, Llc | Secure query processing over encrypted data |
WO2016179525A1 (en) * | 2015-05-07 | 2016-11-10 | ZeroDB, Inc. | Zero-knowledge databases |
CN105610793B (en) * | 2015-12-18 | 2018-10-26 | 江苏大学 | A kind of outsourcing data encryption storage and cryptogram search system and its application process |
US10229068B2 (en) * | 2015-12-29 | 2019-03-12 | The Trustees Of Princeton University | Tunable oblivious RAM |
US10210323B2 (en) | 2016-05-06 | 2019-02-19 | The Boeing Company | Information assurance system for secure program execution |
-
2018
- 2018-01-12 EP EP18702034.2A patent/EP3619637B1/en active Active
- 2018-01-12 WO PCT/US2018/013469 patent/WO2019117978A1/en unknown
- 2018-01-12 EP EP21152404.6A patent/EP3825888B1/en active Active
- 2018-01-12 CN CN201880037200.0A patent/CN110709846B/en active Active
- 2018-01-12 JP JP2019567324A patent/JP6911158B2/en active Active
- 2018-01-12 US US16/623,311 patent/US11727124B2/en active Active
- 2018-01-12 KR KR1020197036113A patent/KR102323549B1/en active IP Right Grant
-
2021
- 2021-07-07 JP JP2021112628A patent/JP7124182B2/en active Active
Patent Citations (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
WO2011013490A1 (en) * | 2009-07-28 | 2011-02-03 | インターナショナル・ビジネス・マシーンズ・コーポレーション | Information processing device, information processing method, program and web system |
JP2014044551A (en) * | 2012-08-27 | 2014-03-13 | Sharp Corp | Content acquisition device, content acquisition system, content acquisition method and content acquisition program for terminal |
JP2016081522A (en) * | 2014-10-10 | 2016-05-16 | ザ・ボーイング・カンパニーＴｈｅ Ｂｏｅｉｎｇ Ｃｏｍｐａｎｙ | System and method for reducing information leakage from memory |
Also Published As
Publication number | Publication date |
---|---|
CN110709846B (en) | 2023-06-20 |
EP3825888A1 (en) | 2021-05-26 |
JP2020527772A (en) | 2020-09-10 |
EP3619637A1 (en) | 2020-03-11 |
US11727124B2 (en) | 2023-08-15 |
JP7124182B2 (en) | 2022-08-23 |
KR102323549B1 (en) | 2021-11-08 |
US20200387615A1 (en) | 2020-12-10 |
CN110709846A (en) | 2020-01-17 |
KR20200005603A (en) | 2020-01-15 |
WO2019117978A1 (en) | 2019-06-20 |
EP3825888B1 (en) | 2023-04-26 |
JP6911158B2 (en) | 2021-07-28 |
EP3619637B1 (en) | 2021-03-03 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6911158B2 (en) | Failure-oblivious access with differential privacy | |
US11574073B2 (en) | Encrypted search cloud service with cryptographic sharing | |
EP3586260B1 (en) | Encrypting data records and processing encrypted records without exposing plaintext | |
US10275611B1 (en) | Methods and apparatus for sharing and searching encrypted data | |
US20230185960A1 (en) | Private Information Retrieval with Sublinear Public-Key Operations | |
CN110622142B (en) | Efficient casual cloud storage | |
EP3616068B1 (en) | Efficient oblivious permutation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20210707 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20220530 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20220614 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20220713 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20220726 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20220810 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 7124182Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |