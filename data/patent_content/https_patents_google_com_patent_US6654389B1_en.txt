US6654389B1 - System and method for searching patterns in real-time over a shared media - Google Patents
System and method for searching patterns in real-time over a shared media Download PDFInfo
- Publication number
- US6654389B1 US6654389B1 US09/447,633 US44763399A US6654389B1 US 6654389 B1 US6654389 B1 US 6654389B1 US 44763399 A US44763399 A US 44763399A US 6654389 B1 US6654389 B1 US 6654389B1
- Authority
- US
- United States
- Prior art keywords
- data stream
- search
- bit pattern
- real
- data
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/80—Generation or processing of content or additional data by content creator independently of the distribution process; Content per se
- H04N21/81—Monomedia components thereof
- H04N21/8126—Monomedia components thereof involving additional data, e.g. news, sports, stocks, weather forecasts
- H04N21/8133—Monomedia components thereof involving additional data, e.g. news, sports, stocks, weather forecasts specifically related to the content, e.g. biography of the actors in a movie, detailed information about an article seen in a video program
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06V—IMAGE OR VIDEO RECOGNITION OR UNDERSTANDING
- G06V20/00—Scenes; Scene-specific elements
- G06V20/40—Scenes; Scene-specific elements in video content
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/20—Servers specifically adapted for the distribution of content, e.g. VOD servers; Operations thereof
- H04N21/23—Processing of content or additional data; Elementary server operations; Server middleware
- H04N21/235—Processing of additional data, e.g. scrambling of additional data or processing content descriptors
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/40—Client devices specifically adapted for the reception of or interaction with content, e.g. set-top-box [STB]; Operations thereof
- H04N21/43—Processing of content or additional data, e.g. demultiplexing additional data from a digital video stream; Elementary client operations, e.g. monitoring of home network or synchronising decoder's clock; Client middleware
- H04N21/435—Processing of additional data, e.g. decrypting of additional data, reconstructing software from modules extracted from the transport stream
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N21/00—Selective content distribution, e.g. interactive television or video on demand [VOD]
- H04N21/80—Generation or processing of content or additional data by content creator independently of the distribution process; Content per se
- H04N21/83—Generation or processing of protective or descriptive data associated with content; Content structuring
- H04N21/84—Generation or processing of descriptive data, e.g. content descriptors
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04N—PICTORIAL COMMUNICATION, e.g. TELEVISION
- H04N19/00—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals
- H04N19/70—Methods or arrangements for coding, decoding, compressing or decompressing digital video signals characterised by syntax aspects related to video coding, e.g. related to compression standards
Definitions
- the present invention relates generally to systems and methods for multiplexing data streams, and particularly, to a system and method enabling simultaneous real-time pattern searching of multiple logical streams communicated over a shared media.
- the MPEG-2 Generic Coding of Moving Pictures and Associated Audio defines the mechanisms for combining, or multiplexing, several types of multimedia information into one program stream.
- This standard uses a known method of multiplexing, called packet multiplexing, where data, video and audio packets, etc. are interleaved one after other onto a single MPEG-2 transport stream (TS).
- the individual streams comprising the data, video and audio packets absent system or timing data are called elementary streams.
- the Packetized Elementary Streams (PES's) are elementary streams comprising all the header and data required to enable decoding of the elementary stream associated with a programs and may be up to 64 kbytes in length.
- Transport Streams are defined for transmission networks and allow for the multiplexing of many Packetized Elementary Streams which are packetized into smaller fixed length size, e.g., 188 bytes. These TS's additionally may suffer from occasional transmission errors.
- Each TS packet consists of a TS Header, followed optionally by ancillary data called Adaptation Field, followed typically by some or all the data from one PES packet.
- the TS Header consists of a>Sync 13 byte (0 ⁇ 47), flags, indicators, a Packet Identifier (PID), plus other information used for error detection, timing, etc.
- the semantics for the MPEG-2 TS header are as follows:
- Sync_byte (8-bits) a fixed value 0 ⁇ 47.
- Transport_error_indicator (1-bit) Indicates an uncorrectable bit error exists in the current TS packet.
- Payload unit 13 start 13 indicator (1-bit) indicates the presence of a new PES packet or a new TS-PSI Section.
- PSI Program Specific Information.
- Transport_priority (1-bit) indicates a higher priority than other packets.
- PID (13-bits) Values 0 and 1 are pre-assigned, while values 2 to 15 are reserved. Values 0 ⁇ 0010 to 0 ⁇ 1 FFE, may be assigned by the Program Specific Information (PSI). Value 0 ⁇ 1 FFF is used for Null packets.
- PSI Program Specific Information
- Transport 13 scrambling control (2-bits) indicates the scrambling mode of the packet payload.
- Adaptation_field_control (2-bits) indicates the presence of adaptation field or payload.
- Continuity_counter (4-bits) One continuity counter per PID. It increments with each non-repeated TS packet having the correspondent PID.
- Each MPEG-2 program stream may be characterized as a data stream that is encapsulated using MPEG-2 TS packets, with each packet containing a header field with a packet identifier (PID).
- PID packet identifier
- the PID field is particularly used by an MPEG-2 transport demultiplexor (“Demux”) to tune to a particular set of PID's that correspond to a given program stream.
- a typical MPEG-2 transport stream multiplexer For a typical MPEG-2 transport stream multiplexer, several program streams, originating from different sources (e.g., network interface, or local storage sub-system), are routed over a shared data bus (i.e., a local bus) and stored in a local packet memory. Finally, packets are removed from the packet memory and transmitted over the output channel.
- sources e.g., network interface, or local storage sub-system
- U.S. Pat. No. 5,734,429 describes an apparatus for detecting start code for bit stream of compressed image according to the MPEG-standard. The disclosed apparatus however, can only handle the case where only one bit stream is present. Similarly, U.S. Pat. No. 5,727,036 describes a method for searching start code for high bit rate but only covers the case where only one bit stream is present.
- buffer burst-basis
- a system and method for providing real-time searching and indexing of patterns included in packets of a packet stream over a time-domain multiplexed shared media e.g., local bus, local area network, etc
- a time-domain multiplexed shared media e.g., local bus, local area network, etc
- a data stream is characterized as a set of linked buffers (initially stored in a Packet Memory ( 30 ), for example, using a linked list data structure, and associated with a program stream using a unique identifier called the Queue Identifier (QID)), with each buffer capable of being transferred in blocks of variable block sizes over a shared media using a time-domain multiplexing (TDM) technique (e.g., one block from data stream(i) is transmitted, then one block from data stream(j) is transmitted, and so forth), the real-time search engine is enabled to: capture each individual data transfer; parse the higher level protocol that encapsulates the payload; remove the transport layer header, and perform the pattern searching in the data stream payload. In the event of a pattern being found, the Real-Time Search Engine ( 100 ) generates a special status message containing the offset within the packet payload, the location within the associated buffer, and the contents of the packet following the location of the search pattern.
- TDM time-domain multiplexing
- This search is performed in real-time (as the blocks traverse the media), and the search results are reported to a host processor using one or more pre-defined messages. Additionally, as a pattern can cross a buffer boundary, i.e., the starting part of the pattern may reside in one buffer and the remainder part may reside in the subsequent buffer, additional complexity is introduced.
- the Real-Time Search Engine addresses this complexity by performing a context switching operation which includes: capturing each individual data transfer; mapping a start data transfer address and a data stream identifier (QID) using a buffer number as the key; saving the current contents of a Context Register into an SRAM Context Storage ( 107 ); fetching the context corresponding to the new data stream (using the Buffer number as the key); and, copying its contents into the Context Register ( 105 ). Once the appropriate context is fetched, the Real-Time Search Engine continues parsing the data stream.
- a context switching operation which includes: capturing each individual data transfer; mapping a start data transfer address and a data stream identifier (QID) using a buffer number as the key; saving the current contents of a Context Register into an SRAM Context Storage ( 107 ); fetching the context corresponding to the new data stream (using the Buffer number as the key); and, copying its contents into the Context Register ( 105 ).
- the real-time pattern searching method and system of the invention may be implemented in any transport packet scheme, e.g., IP, ATM, where one or more a data streams are transmitted over a shared media using a time domain multiplexing technique.
- transport packet scheme e.g., IP, ATM
- FIG. 1 is a diagram illustrating the connection of the Real-Time Search Engine ( 100 ) with the Host Sub-System;
- FIG. 2 illustrates an example of several data stream ( 70 ) transfers over a shared bus and the segmentation of an MPEG-2 transport packet;
- FIG. 3 illustrates the linked list data structure ( 81 ) used to store the data streams in the Packet Memory ( 30 );
- FIG. 4 is a high-level block diagram illustrating the Real-Time Search Engine ( 100 ) and its connection with the Host Sub-System Local Bus ( 60 );
- FIG. 5 is a detailed block diagram of the Real-Time Search Engine ( 100 ) according to the preferred embodiment of the invention.
- FIG. 6 illustrates the syntax for commands used to control the Real-time Search Engine ( 100 );
- FIG, 7 illustrates the data format of the dynamic context switching registers ( 105 ).
- FIG. 8 illustrates the data format of the Result Register ( 104 ).
- FIG. 1 is a block diagram illustrating a preferred implementation of the Real-time Pattern Searching System ( 9 ) of the invention.
- MPEG-2 program streams may be originated from a network connection ( 10 ) or from a local storage device ( 50 ).
- the streams contents are transmitted in blocks which are written into a Packet Memory ( 30 ) in a manner that facilitates re-assembly of the original MPEG-2 program stream contents.
- an input channel ( 11 ) from where an MPEG-2 Program Stream originates via a Network Interface Module ( 10 ) that processes and generates the MPEG-2 data streams for temporary storage in the Packet Memory storage device ( 30 ).
- an MPEG-2 Transport stream demultiplexor (Demux) block which demultiplexes individual MPEG-2 program streams for temporary storage in a Packet Memory storage device as shown and described in commonly-owned, co-pending U.S. patent application Ser. No. 09/448,333, the contents and disclosure of which is incorporated by reference as if fully set forth herein.
- an MPEG-2 program stream may originate from a Local Storage device ( 50 ), where it is received by a Local Storage Interface ( 40 ), for processing and storage in the Packet Memory ( 30 ).
- the Packet Memory ( 30 ) is used to cache both incoming and outgoing program streams. Buffers from individual program streams are stored in the Packet Memory ( 30 ) as will be described in greater detail herein.
- a Real-time Search and Indexing Engine ( 100 ) is provided that is MPEG-2 aware, and supports multiple MPEG-2 program streams that are transferred over a non-multiplexed Local Bus ( 60 ).
- the Real-Time Search and Indexing Engine ( 100 ) particularly monitors the data transfers into the Packet Memory device ( 30 ), (i.e., the write operations), capturing them into a Bus Interface and Caching mechanism ( 101 ), shown and described herein with respect to FIG. 2, and generates the proper indexing in the manner to be described in greater detail.
- a Host Processor ( 20 ) is attached to the Local Bus ( 60 ), for controlling the operation of each of the modules connected to the Local Bus ( 60 ). That is, the Host Processor ( 20 ) attached to the local bus ( 60 ), controls the various system data flows which include: 1 ) data flow from the From Network Interface Module ( 10 ) to the Packet Memory ( 30 ); 2 ) data flow from the Local Storage Interface ( 40 ) to the Packet Memory ( 30 ); and, 3 ) data flow including Host Processor ( 20 ) commands to the Real-Time Search Engine ( 100 ).
- FIG. 2 illustrates a logical diagram for the data flows from the individual program streams ( 70 ) that are multiplexed into a single shared transport media ( 71 ) using Time Division Multiplexing (TDM).
- TDM Time Division Multiplexing
- the TDM slots ( 73 ) on the shared transport media may have variable sizes, depending on the burst size supported by the shared media ( 71 ).
- the information residing in the header field ( 72 ) includes a “start of transfer address” (hereinafter ADDR) that suffices to associate the data transfer block with its source (QID).
- ADDR start of transfer address
- the TS packet ( 75 ) includes a header ( 75 a ) having a packet identifier (PID), flags, indicators, error detection and timing information, in addition to its associated MPEG content payload ( 75 b ).
- PID packet identifier
- each data burst associated with a QID may comprise a whole or partial TS packet ( 75 ), in the case of segmentation.
- a program stream is considered a sequence of buffers ( 80 ) identifiable by an buffer id. These buffers are stored in the Packet Memory ( 30 ) using a linked list data structure ( 81 ) such as illustrated in FIG. 3 and manageable by the Host Processor ( 20 ).
- This buffer management scheme is advantageous as it improves memory utilization by eliminating fragmentation.
- FIG. 4 is a high-level block diagram illustrating the Real-Time Search Engine ( 100 ) and its connection with the Host Sub-System Local Bus ( 60 ).
- the Real-Time Search Engine ( 100 ) includes a local Bus Interface and Caching,( 101 ) mechanism that captures each block written into the Packet Memory ( 30 ) via the Local Bus ( 60 ); and, a field programmable gate array ( 110 ) including: an Input Register ( 102 ) for receiving captured information routed over an INPUT bus ( 102 ′) from the Bus Interface and Caching unit ( 101 ); a DEL Register ( 103 ) for receiving delimeters (DEL) used to signal start of transfer, data and control fields generated by the Bus Interface and Caching unit ( 101 ) and routed over a DEL bus ( 103 ′); a Decoder and Finite State Machine block ( 120 ) for performing all decoding and context handling functions; a Result Register ( 104 ) for reporting data/address results to the Hos
- the Local Bus Interface and Caching block ( 101 ) outputs include: information carried over an INPUT bus ( 102 ′) for input to the Input Register ( 102 ); and, the Delimiter information having ⁇ “address”, “command”, or “data”> values indicating the type of information that is carried on the INPUT ( 102 ′) bus via the DEL (delimiter) bus ( 103 ′).
- the Host Processor ( 20 ) controls the operation of the Real-Time Search Engine ( 100 ) by sending commands over the Local Bus ( 60 ) at a pre-defined address range. These commands include “Clear_Buffer”, “Start_Buffer” and “Chain_Buffer” which are decoded and processed by the Decoder and Finite State Machines ( 120 ) block. Particularly, before starting the transfer of a new MPEG-2 program stream, the Host Processor ( 20 ) issues a command (“Start_Buffer”) to start the Real-Time Search Engine 100 ). This command assigns the buffer number for the first buffer, and the Packet Identifier (PID) for which the search is to be performed.
- PID Packet Identifier
- the Real-Time Search Engine ( 100 ) initializes the Context Register ( 105 ) corresponding to the new program stream, enabling the capture of data transfers associated with this program stream. For the subsequent buffers belonging to this program stream, the Host Processor ( 20 ) must issue a “Chain_Buffer” command linking the current buffer with the following buffer before data transfers associated with the next buffer start. It is understood that the “Chain_Buffer” command may be initiated any time following the “Start_Buffer” command.
- a data transfer block When a data transfer block first accesses a new buffer (one that has not been previously accessed), as it switches from the current to the next buffer, it automatically performs a “chain buffer” operation, by copying the context corresponding to the current buffer into an area in SRAM Context Storage ( 107 ) associated with the context of the next buffer. It also resets an “enable_context” flag that indicates a pending request for context switching.
- the MPEG-2 aware Real-Time Search and Indexing Engine ( 100 ) has been architected with the following capabilities: 1 ) capability to search a given pattern inside the MPEG-2 payload field for any given MPEG-2 program stream. Once the pattern is found, the Real-time Search Engine ( 100 ) reports the pattern location (buffer number, buffer offset, and byte position inside the MPEG-2 Transport Stream packet); 2 ) the capability to handle multiple program streams, dynamically switching context (each program stream has its own context), on a block (smallest transfer unit in the local bus) basis. Context switching is performed whenever a new data block is transferred from a buffer that is not the current buffer.
- the search engine keeps the entire context stored locally (e.g., SRAM); and, 3 ) the capability to report the search results by writing one or more specialized data blocks into a pre-allocated shared memory region, and utilizing a direct mapping scheme to associate the report with the buffer where the pattern was found.
- the Real-Time Search Engine ( 100 ) finds the search pattern, it reports the byte immediately following the search pattern by writing a special data transfer block containing the contents of a “Result Register” into the Packet Memory ( 30 ) as described herein with respect to FIGS. 5 and 8.
- the maximum number of reports per buffer is pre-assigned, however, this number may be altered by increasing the shared memory region used for reporting the search results.
- the search engine ( 100 ) is implemented using FPGA's to enable system modifications without extensive re-design.
- FIG. 5 is a further detailed block diagram of the Real-Time Search Engine ( 100 ) and particularly, the Decode and Finite State Machine Block ( 120 ).
- the DEL (delimiter) bus ( 103 ′) carries DEL information ( 103 ′′) for input to a DECODER block ( 114 ) which decodes the DEL parameter information to enable routing of the INPUT information ( 102 ′′) into the appropriate register: ADDR REG ( 111 ), CMD REG ( 112 ), or DATA REG ( 113 ) under actual control of the corresponding control lines: ( 111 ′), ( 112 ′), and ( 113 ′).
- these DEL values signal the following types of information: Address—indicating the starting address of the data transfer; Command—indicating the command issued by the Host Processor ( 20 ); and, Data—indicating the data transfer payload.
- the ADDR REG ( 111 ) is connected to a CONTEXT SWITCHING HANDLER ( 115 ), which is a Finite State Machine that checks the contents of the ADDR REG ( 111 ), and compares it with the current buffer number stored at the Context Register ( 105 ). If the contents of the ADDR_REG ( 111 ) match the current buffer number, (indicating that the data transfer belongs to current buffer), no context switch is performed.
- FIG. 7 illustrates the dynamic contents of the Context Register ( 105 ) as comprising a first context word ( 122 ) and a second context word ( 123 ).
- the first context word ( 122 ) format is as follows:
- Bit 31 “pid_match” (indicating a PID match for current packet)
- Bits 28 - 16 “pid_video” (a 13-bit value)
- Bits 7 - 0 “byte_count” (an 8-bit value)
- the second context word ( 123 ) format is as follows:
- Bits 18 - 16 “search_status” (a 3-bit value)
- the dynamic context mechanism implemented for an example buffer transmission scheme is employed as follows: given an example transfer of a 100 megabyte file from a local storage to a MPEG-2 multiplexer unit (not shown), instead of transferring the whole 100 megabytes as one unit, it may be segmented into units, (e.g. PDU units) of 64 Kbytes, for example.
- units e.g. PDU units
- 64 K cannot be divided into an integral number of 188 byte MPEG-2 packets
- the segmented file splits a packet, i.e., does not end perfectly at a MPEG-2 packet boundary.
- the dynamic context to store the packet offset for the position in the packet so that when the PDU boundary is crossed it may be accurately tracked.
- the dynamic context mechanism described herein handles that situation of crossing a buffer boundary when the packet does not necessarily end at the boundary.
- the dynamic context mechanism includes a “pid_video” field (13-bits) field in the first context word ( 122 ) which indicates the PID that carries the video in the current program.
- Bit 31 of the first context word ( 122 ) is the “pid_match” field which indicates that when a packet header is parsed and the PID therein matches the PID indicated in the “pid_video” field of the current context register ( 105 ), then the packet will be further parsed as it is a video packet.
- Bit 30 of the first context word is the “adapt_field_flag” which is provided in the MPEG-2 header field indicating the presence or not of the adaptation field following the header (not part of the packet payload).
- this flag is set, additional parsing is necessary to remove the adaptation field: first by retrieving the adaptation field count whose value is placed in the 8-bit field indicated as “adapt_field_count,” and then, corresponding to the value of the “adapt_field_count” discarding the adaptation field data from the packet in byte increments.
- the “adapt_field_count” field count is decremented by 1 until it reaches 0 indicating full removal of the adaptation field. Only upon reaching this point, will the “adapt field_flag” be cleared, thus, indicating only the remaining presence of packet payload.
- the packet payload is additionally parsed in a similar fashion. That is, every time a payload byte is processed, the 8-bit “byte_count” field is incremented so that the position is kept within the packet.
- the second context word ( 123 ) is used for linking and returning information.
- the “enable_processing” control bit 31 indicates whether or not a particular packet is to be processed, i.e., if a data stream is sent and not a video stream, then this flag indicates that the Real-Time Search Engine ( 100 ) is to be disabled for this particular type of data.
- the (6-bit) field “result_pointer” includes a value associated with a QID, i.e., up to 64 entries (2 6 ), that can be used to facilitate reporting of data back to the Host Processor ( 20 ). Thus, every time a pattern is found, the “result_pointer” is incremented and a write is performed to the buffer.
- the “search_parallel” Bit 20 is a mechanism indicating a search optimization feature that enables the processing of four words (four bytes) at a time or one byte at a time depending upon certain conditions. That is, the “search_parallel” bit indicates whether a parallel search (32 bits at a time) is being performed or, if a single search (8 bits at a time), is being performed.
- the 3-Bit “search_status” field basically indicates the status of a search, i.e., where a particular search is.
- a “search_status” value of 0 means that nothing has been found; a value of 1 indicates that a single “0” has been found; a value of 2 indicates that a pattern of two consecutive 0's have been found; a value of 3 indicates that a pattern of “0 ⁇ 000001” has been found, and a value of 4 indicates that the result has been found.
- the “previous_buffer” number field is the linking pointer information that indicates when a buffer is transmitted, the Host Processor ( 20 ) knows the next buffer to be transmitted, e.g. buffer X. Thus, the “Chain_Buffer” opcode transmitted indicates that buffer X is linked to the number indicated at the “previous_buffer” field.
- the Real-Time Search Engine ( 100 ) uses this information so that when it detects that for the first time there is a transition on the buffer, i.e., from a previous buffer to the next buffer, and the “enable_context” flag (Bit 30 ) is set indicating that this is a first time transition, a “Chain Buffer” operation is performed and context associated with previous buffer is copied to the location corresponding to the next buffer, buffer X, for example. Once this transition has been made, then the “enable_context” flag is reset indicating that copying of context is not necessary as the new buffer is now being processed.
- the CMD REG ( 112 ) is connected to a COMMAND DECODER unit ( 116 ) which is another Finite State Machine that decodes the command opcode field comprising the “Clear_Buffer,” “Start_Buffer,” and “Chain_Buffer” control commands generated by the Host Processor ( 20 ) for the Real-time Search Engine ( 100 ) operation.
- FIG. 6 particularly illustrates the syntax and format of the commands issued by the Host Processor ( 20 ) for controlling the Real-time Search Engine. As shown in FIG.
- the command ( 121 ) includes a unique opcode field, e.g., 4 bits, having values corresponding to the “Clear_Buffer,” “Start_Buffer,” and “Chain_Buffer” control function, an Enable_Search (ES) field, e.g., 1 bit, an Enable_Process (EP) field, e.g., 1 bit, and, first and second parameter fields.
- ES Enable_Search
- EP Enable_Process
- first parameter indicates the buffer number
- the second parameter indicates a NULL value.
- COMMAND DECODER unit ( 116 ) saves the current context (as described above), updates the Context Register ( 105 ) with the command parameters (e.g., buffer number, PID number), and, saves its contents in the CONTEXT STORAGE ( 107 ). All subsequent buffers must be preceded by a “Chain_Buffer”, which command may be issued at anytime while the current buffer is being consumed.
- the “Chain_Buffer” command includes a first parameter indicating the previous buffer number.
- the COMMAND DECODER unit ( 116 ) saves the current context (as described above), updates the Context Register ( 105 ) with the command parameters (previous buffer number, following buffer number), and saves its contents in the CONTEXT STORAGE ( 107 ).
- the DATA REG ( 113 ) is connected to an MPEG PARSER AND PATTERN SEARCH unit ( 117 ) which is a Finite State Machine that parses the MPEG-2 transport layer, particularly, starting with the packet header ( 75 a ) and performing the following steps: checking for the presence of the Sync_byte (e.g., a fixed value of 0 ⁇ 47) and for PID matching (if the PID of the current packet matches the value of the PID to be searched); and, if no match occurs, simply discarding the remainder 184 bytes belonging to this packet; otherwise, when a match occurs, continuing parsing of the remainder fields of the packet header, parsing the 2 bits that indicate the presence of “adaptation field”.
- Sync_byte e.g., a fixed value of 0 ⁇ 47
- PID matching if the PID of the current packet matches the value of the PID to be searched
- the MPEG PARSER AND PATTERN SEARCH unit ( 117 ) then reads the “adaptation_field_length” field, skipping the entire “adaptation field”, and continues the search at the transport packet payload field.
- the MPEG PARSER AND PATTERN SEARCH unit ( 117 ) additionally searches for the first 24-bits of the “start code”, e.g., “0 ⁇ 000001” pattern and reports the byte that follows it. In the preferred embodiment, as the Local Bus ( 60 ) (FIG. 4) is 32-bits wide, the search is optimized to discard 32-bit words that do not contain the search pattern.
- the Real-Time Search Engine 100 if the search pattern is the first 24-bits of an MPEG-2 start code (“0 ⁇ 000001”), the Real-Time Search Engine ( 100 ) will discard any 32-bit word that does not contain at least one byte equals to “0 ⁇ 00”. Other conditions may be implemented to additionally cause a discarding (e.g., a byte equal to “0 ⁇ 00” followed by a byte that is different from “0 ⁇ 01”).
- the MPEG PARSER AND PATTERN SEARCH unit ( 117 ) When the searched pattern is found, the MPEG PARSER AND PATTERN SEARCH unit ( 117 ) finally requests the RESULT REGISTER ( 104 ) to generate a data transfer into the Packet Memory ( 30 ) with contents including the result of the search, i.e., the offset within the buffer, the offset within the particular packet, and the byte following the pattern. Particularly, the MPEG PARSER AND PATTERN SEARCH ( 117 ) updates the following fields belonging to the Context Register 105 : “pid_match”, “adapt_field flag”, “adapt_field_count”, “byte_count”, “result_pointer”, “search_parallel”, and “search_status”.
- search_status When the search pattern is found, it updates the “search_status” field to “0 ⁇ 4”, copies the contents of the byte following the pattern in the payload field into the Result Register ( 104 ) “search_pattern” field, and then generates a data transfer block containing the contents of the Result Register ( 104 ). Once the transfer is complete, the “search_status” field in the Context Register ( 105 ) is cleared, the “result_pointer” field is incremented, and the pattern search resumes from the following byte.
- FIG. 8 illustrates the format ( 125 ) of the “Result Register” ( 104 ) which contains the indexing information generated by the Real-Time Search Engine ( 100 ) and returns the searched pattern.
- the indexing information includes the following fields: “buffer 13 offset” (offset within the current buffer), the “byte_count” (byte offset within the current MPEG Transport Stream packet), and the “search_pattern” (the byte that immediately followed the searched pattern).
- the Real-Time Search and Indexing Engine ( 100 ) reports the presence of MPEG Transport Stream packets containing “adaptation field”, which may be used by the Host Processor ( 20 ) for identifying which packets carry the Program Clock Reference (PCR) information, since PCR can only be presented on packets that contain the “adaptation field”. Furthermore, the Real-Time Search and Indexing Engine ( 100 ) may additionally report the presence of MPEG Transport Stream packets containing a “payload_unit 13 start_indicator” flag set, which may be useful for applications, e.g., a real-time splicing application, that need to identify the start of a Program Elementary Stream (PES) packet (audio or video steams).
- PES Program Elementary Stream
- the Real-Time Search and Indexing Engine ( 100 ) may be particularly employed as part of the real time splicing/spot insertion system as shown and described in commonly-owned, co-pending U.S. patent application Ser. No. 09/448,335 entitled SEAMLESS SPLICING/SPOT-INSERTION FOR MPEG-2 DIGITAL VIDEO/AUDIO STREAM, the contents and disclosure of which is incorporated by reference as if fully set forth herein.
Abstract
Description
Claims (25)
Priority Applications (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/447,633 US6654389B1 (en) | 1999-11-23 | 1999-11-23 | System and method for searching patterns in real-time over a shared media |
GB0028316A GB2362789B (en) | 1999-11-23 | 2000-11-21 | System and method for searching patterns in real-time over a shared medium |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/447,633 US6654389B1 (en) | 1999-11-23 | 1999-11-23 | System and method for searching patterns in real-time over a shared media |
Publications (1)
Publication Number | Publication Date |
---|---|
US6654389B1 true US6654389B1 (en) | 2003-11-25 |
Family
ID=23777128
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/447,633 Expired - Lifetime US6654389B1 (en) | 1999-11-23 | 1999-11-23 | System and method for searching patterns in real-time over a shared media |
Country Status (2)
Country | Link |
---|---|
US (1) | US6654389B1 (en) |
GB (1) | GB2362789B (en) |
Cited By (60)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020083433A1 (en) * | 2000-03-24 | 2002-06-27 | Yasuhiro Yamanaka | Information processing apparatus, information delivery system, information processing method, and recording medium |
US20020141399A1 (en) * | 2001-03-30 | 2002-10-03 | Brown David A. | External device transmission system and a fast pattern processor employing the same |
US20020166006A1 (en) * | 2001-05-03 | 2002-11-07 | Williams Robert Alan | Multiple buffers for removing unwanted header information from received data packets |
US20030016669A1 (en) * | 2001-07-12 | 2003-01-23 | International Business Machines Corporation | Full transmission control protocol off-load |
US20030026251A1 (en) * | 2001-07-31 | 2003-02-06 | Morris Jerry David | Method and apparatus for protocol pattern identification in protocol data units |
US20030046686A1 (en) * | 2001-06-06 | 2003-03-06 | Candelore Brant L. | Time division partial encryption |
US20030096644A1 (en) * | 2001-09-28 | 2003-05-22 | David Lark | Gaming apparatus with novel display technique |
US20030123447A1 (en) * | 2001-12-31 | 2003-07-03 | Tippingpoint Technologies, Inc. | System and method for classifying network packets with packet content |
US20030156718A1 (en) * | 2002-01-02 | 2003-08-21 | Candelore Brant L. | Progressive video refresh slice detection |
US20030174736A1 (en) * | 2002-03-15 | 2003-09-18 | Broadcom Corporation | Method and apparatus utilizing a tail bus to solve back-to-back data burst problems |
US20050122974A1 (en) * | 2003-11-25 | 2005-06-09 | Friedemann Hubler | Method and apparatus for storage or relocation of defined positions in a data stream |
US20050185719A1 (en) * | 1999-07-19 | 2005-08-25 | Miska Hannuksela | Video coding |
US20050216752A1 (en) * | 2004-03-26 | 2005-09-29 | Microsoft Corporation | Common scrambling |
US20060036551A1 (en) * | 2004-03-26 | 2006-02-16 | Microsoft Corporation | Protecting elementary stream content |
US20060045142A1 (en) * | 2004-08-25 | 2006-03-02 | Matsushita Electric Industrial Co., Ltd. | Demultiplexer |
US7024685B1 (en) * | 2000-09-13 | 2006-04-04 | International Business Machines Corporation | Transport demultiplexor with bit maskable filter |
US20060136981A1 (en) * | 2004-12-21 | 2006-06-22 | Dmitrii Loukianov | Transport stream demultiplexor with content indexing capability |
US20060184790A1 (en) * | 2004-03-26 | 2006-08-17 | Microsoft Corporation | Protecting elementary stream content |
US20070011344A1 (en) * | 2005-07-07 | 2007-01-11 | Microsoft Corporation | Carrying protected content using a control protocol for streaming and a transport protocol |
US20070014413A1 (en) * | 2005-07-12 | 2007-01-18 | Microsoft Corporation | Delivering policy updates for protected content |
US20070039058A1 (en) * | 2005-08-11 | 2007-02-15 | Microsoft Corporation | Revocation information management |
US20070086481A1 (en) * | 2005-10-13 | 2007-04-19 | Microsoft Corporation | RTP Payload Format For VC-1 |
US20070244889A1 (en) * | 2006-03-30 | 2007-10-18 | Kabushiki Kaisha Toshiba | Byte string searching apparatus and searching method |
US7292690B2 (en) | 2002-01-02 | 2007-11-06 | Sony Corporation | Video scene change detection |
US20080019368A1 (en) * | 2006-07-21 | 2008-01-24 | Storlink Semiconductors, Inc. | Apparatus and method for layer-2 to layer-7 search engine for high speed network application |
US20080033986A1 (en) * | 2006-07-07 | 2008-02-07 | Phonetic Search, Inc. | Search engine for audio data |
US7401057B2 (en) | 2002-12-10 | 2008-07-15 | Asset Trust, Inc. | Entity centric computer system |
US20080215772A1 (en) * | 2001-04-06 | 2008-09-04 | International Business Machines Corporation | System method structure in network processor that indicates last data buffer of frame packet by last flag bit that is either in first or second position |
US7426499B2 (en) | 2004-11-08 | 2008-09-16 | Asset Trust, Inc. | Search ranking system |
US7483532B2 (en) | 2003-07-03 | 2009-01-27 | Microsoft Corporation | RTP payload format |
US7486680B1 (en) * | 2002-03-21 | 2009-02-03 | Ji Zhang | Packet schedule timestamp for a compressed bitstream |
US20090097493A1 (en) * | 2007-10-12 | 2009-04-16 | Gururaja Patil | Queuing mixed messages for configurable searching |
US20090144527A1 (en) * | 2007-11-29 | 2009-06-04 | Hiroaki Nakata | Stream processing apparatus, method for stream processing and data processing system |
US7711115B2 (en) | 2002-11-05 | 2010-05-04 | Sony Corporation | Descrambler |
US7730300B2 (en) | 1999-03-30 | 2010-06-01 | Sony Corporation | Method and apparatus for protecting the transfer of data |
US7730063B2 (en) | 2002-12-10 | 2010-06-01 | Asset Trust, Inc. | Personalized medicine service |
US7747853B2 (en) | 2001-06-06 | 2010-06-29 | Sony Corporation | IP delivery of secure digital content |
US7765567B2 (en) | 2002-01-02 | 2010-07-27 | Sony Corporation | Content replacement by PID mapping |
US7823174B2 (en) | 2002-01-02 | 2010-10-26 | Sony Corporation | Macro-block based content replacement by PID mapping |
US7853980B2 (en) | 2003-10-31 | 2010-12-14 | Sony Corporation | Bi-directional indices for trick mode video-on-demand |
US7895617B2 (en) | 2004-12-15 | 2011-02-22 | Sony Corporation | Content substitution editor |
US7895616B2 (en) | 2001-06-06 | 2011-02-22 | Sony Corporation | Reconstitution of program streams split across multiple packet identifiers |
US7925016B2 (en) | 1999-03-30 | 2011-04-12 | Sony Corporation | Method and apparatus for descrambling content |
US20110221961A1 (en) * | 2010-03-09 | 2011-09-15 | Kabushiki Kaisha Toshiba | Synchronization data detection apparatus, synchronization data detection method, and recording medium |
US8041190B2 (en) | 2004-12-15 | 2011-10-18 | Sony Corporation | System and method for the creation, synchronization and delivery of alternate content |
US8185921B2 (en) | 2006-02-28 | 2012-05-22 | Sony Corporation | Parental control of displayed content using closed captioning |
US8321690B2 (en) | 2005-08-11 | 2012-11-27 | Microsoft Corporation | Protecting digital media of various content types |
US8325916B2 (en) | 2005-05-27 | 2012-12-04 | Microsoft Corporation | Encryption scheme for streamed multimedia content protected by rights management system |
US8438645B2 (en) | 2005-04-27 | 2013-05-07 | Microsoft Corporation | Secure clock with grace periods |
US8488788B2 (en) | 1999-11-09 | 2013-07-16 | Sony Corporation | Method for simulcrypting scrambled data to a plurality of conditional access devices |
US8572408B2 (en) | 2002-11-05 | 2013-10-29 | Sony Corporation | Digital rights management of a digital device |
US8645988B2 (en) | 2002-12-13 | 2014-02-04 | Sony Corporation | Content personalization for digital content |
US8667525B2 (en) | 2002-12-13 | 2014-03-04 | Sony Corporation | Targeted advertisement selection from a digital stream |
US8694455B2 (en) | 2000-10-17 | 2014-04-08 | Asset Reliance, Inc. | Automated risk transfer system |
US8700535B2 (en) | 2003-02-25 | 2014-04-15 | Microsoft Corporation | Issuing a publisher use license off-line in a digital rights management (DRM) system |
US8713025B2 (en) | 2005-03-31 | 2014-04-29 | Square Halt Solutions, Limited Liability Company | Complete context search system |
US8725646B2 (en) | 2005-04-15 | 2014-05-13 | Microsoft Corporation | Output protection levels |
US8781969B2 (en) | 2005-05-20 | 2014-07-15 | Microsoft Corporation | Extensible media rights |
US8818896B2 (en) | 2002-09-09 | 2014-08-26 | Sony Corporation | Selective encryption with coverage encryption |
US10346926B2 (en) | 2002-09-09 | 2019-07-09 | Xenogenic Development Llc | Context search system |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP7383273B2 (en) * | 2018-10-02 | 2023-11-20 | 大学共同利用機関法人情報・システム研究機構 | Information processing device, information processing circuit, information processing system, and information processing method |
US11537415B2 (en) * | 2018-10-02 | 2022-12-27 | Inter-University Research Institute Corporation Research Organization Of Information And Systems | Information processing apparatus, information processing circuit, information processing system, and information processing method |
Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5727036A (en) | 1995-11-22 | 1998-03-10 | Mitsubishi Semiconductor America, Inc. | High bit rate start code searching and detecting circuit and method |
US5734429A (en) | 1994-12-30 | 1998-03-31 | Samsung Electronics Co., Ltd. | Start code detecting apparatus for bit stream of compressed image |
US5742361A (en) * | 1995-11-30 | 1998-04-21 | Hitachi, Ltd. | Data demultiplexer |
US5841472A (en) * | 1994-11-23 | 1998-11-24 | Lg Electronics Inc. | MPEG2 transport decoder |
US5856973A (en) * | 1996-09-10 | 1999-01-05 | Thompson; Kenneth M. | Data multiplexing in MPEG server to decoder systems |
US6157673A (en) * | 1996-12-26 | 2000-12-05 | Philips Electronics North America Corp. | Fast extraction of program specific information from multiple transport streams |
US6275507B1 (en) * | 1997-09-26 | 2001-08-14 | International Business Machines Corporation | Transport demultiplexor for an MPEG-2 compliant data stream |
US6373898B1 (en) * | 1999-04-06 | 2002-04-16 | Ravisent Technologies, Inc. | High-speed start code scanner for MPEG-2 data streams |
US6434170B1 (en) * | 1998-12-04 | 2002-08-13 | Koninklijke Philips Electronics N.V. | Memory-based circular queue with local descriptive information to implement a storage area for filtering mpeg-2 packets that are distributed and/or processed under the control of a host microprocessor by a direct memory access mechanism |
Family Cites Families (3)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5517250A (en) * | 1995-02-28 | 1996-05-14 | General Instrument Corporation Of Delaware | Acquisition of desired data from a packetized data stream and synchronization thereto |
JP2848326B2 (en) * | 1996-03-28 | 1999-01-20 | 日本電気株式会社 | MPEG encoded image decoding device |
US5841762A (en) * | 1996-03-29 | 1998-11-24 | British Telecommunications Public Limited Company | Monitoring a synchronous digital hierarchy transmission path |
-
1999
- 1999-11-23 US US09/447,633 patent/US6654389B1/en not_active Expired - Lifetime
-
2000
- 2000-11-21 GB GB0028316A patent/GB2362789B/en not_active Expired - Fee Related
Patent Citations (9)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5841472A (en) * | 1994-11-23 | 1998-11-24 | Lg Electronics Inc. | MPEG2 transport decoder |
US5734429A (en) | 1994-12-30 | 1998-03-31 | Samsung Electronics Co., Ltd. | Start code detecting apparatus for bit stream of compressed image |
US5727036A (en) | 1995-11-22 | 1998-03-10 | Mitsubishi Semiconductor America, Inc. | High bit rate start code searching and detecting circuit and method |
US5742361A (en) * | 1995-11-30 | 1998-04-21 | Hitachi, Ltd. | Data demultiplexer |
US5856973A (en) * | 1996-09-10 | 1999-01-05 | Thompson; Kenneth M. | Data multiplexing in MPEG server to decoder systems |
US6157673A (en) * | 1996-12-26 | 2000-12-05 | Philips Electronics North America Corp. | Fast extraction of program specific information from multiple transport streams |
US6275507B1 (en) * | 1997-09-26 | 2001-08-14 | International Business Machines Corporation | Transport demultiplexor for an MPEG-2 compliant data stream |
US6434170B1 (en) * | 1998-12-04 | 2002-08-13 | Koninklijke Philips Electronics N.V. | Memory-based circular queue with local descriptive information to implement a storage area for filtering mpeg-2 packets that are distributed and/or processed under the control of a host microprocessor by a direct memory access mechanism |
US6373898B1 (en) * | 1999-04-06 | 2002-04-16 | Ravisent Technologies, Inc. | High-speed start code scanner for MPEG-2 data streams |
Cited By (90)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US7925016B2 (en) | 1999-03-30 | 2011-04-12 | Sony Corporation | Method and apparatus for descrambling content |
US7730300B2 (en) | 1999-03-30 | 2010-06-01 | Sony Corporation | Method and apparatus for protecting the transfer of data |
US8401089B2 (en) | 1999-07-19 | 2013-03-19 | Nokia Corporation | Video coding |
US20050185719A1 (en) * | 1999-07-19 | 2005-08-25 | Miska Hannuksela | Video coding |
US8654863B2 (en) * | 1999-07-19 | 2014-02-18 | Nokia Oy | Video coding |
US20070171986A1 (en) * | 1999-07-19 | 2007-07-26 | Nokia Corporation | Video coding |
US8488788B2 (en) | 1999-11-09 | 2013-07-16 | Sony Corporation | Method for simulcrypting scrambled data to a plurality of conditional access devices |
US20020083433A1 (en) * | 2000-03-24 | 2002-06-27 | Yasuhiro Yamanaka | Information processing apparatus, information delivery system, information processing method, and recording medium |
US20060059203A1 (en) * | 2000-03-24 | 2006-03-16 | Yasuhiro Yamanaka | Information processing apparatus, information delivery system, information processing method, and recording medium |
US7433867B2 (en) * | 2000-03-24 | 2008-10-07 | Sony Corporation | Information processing apparatus, information delivery system, information processing method, and recording medium |
US6993536B2 (en) * | 2000-03-24 | 2006-01-31 | Sony Corporation | Information processing apparatus, information delivery system, information processing method, and recording medium |
US20060080110A1 (en) * | 2000-09-13 | 2006-04-13 | International Business Machines Corporation | Transport demultiplexor with bit maskable filter |
US7024685B1 (en) * | 2000-09-13 | 2006-04-04 | International Business Machines Corporation | Transport demultiplexor with bit maskable filter |
US7675876B2 (en) | 2000-09-13 | 2010-03-09 | International Business Machines Corporation | Transport demultiplexor with bit maskable filter |
US8694455B2 (en) | 2000-10-17 | 2014-04-08 | Asset Reliance, Inc. | Automated risk transfer system |
US6918026B2 (en) * | 2001-03-30 | 2005-07-12 | Agere Systems Inc. | External device transmission system and a fast pattern processor employing the same |
US20020141399A1 (en) * | 2001-03-30 | 2002-10-03 | Brown David A. | External device transmission system and a fast pattern processor employing the same |
US7904617B2 (en) * | 2001-04-06 | 2011-03-08 | International Business Mahines Corporation | Indicating data buffer by last bit flag |
US20080215772A1 (en) * | 2001-04-06 | 2008-09-04 | International Business Machines Corporation | System method structure in network processor that indicates last data buffer of frame packet by last flag bit that is either in first or second position |
US20020166006A1 (en) * | 2001-05-03 | 2002-11-07 | Williams Robert Alan | Multiple buffers for removing unwanted header information from received data packets |
US7747853B2 (en) | 2001-06-06 | 2010-06-29 | Sony Corporation | IP delivery of secure digital content |
US7751560B2 (en) | 2001-06-06 | 2010-07-06 | Sony Corporation | Time division partial encryption |
US7895616B2 (en) | 2001-06-06 | 2011-02-22 | Sony Corporation | Reconstitution of program streams split across multiple packet identifiers |
US7139398B2 (en) | 2001-06-06 | 2006-11-21 | Sony Corporation | Time division partial encryption |
US20030046686A1 (en) * | 2001-06-06 | 2003-03-06 | Candelore Brant L. | Time division partial encryption |
US6980551B2 (en) * | 2001-07-12 | 2005-12-27 | International Business Machines Corporation | Full transmission control protocol off-load |
US20030016669A1 (en) * | 2001-07-12 | 2003-01-23 | International Business Machines Corporation | Full transmission control protocol off-load |
US6895020B2 (en) * | 2001-07-31 | 2005-05-17 | Agilent Technologies, Inc. | Method and apparatus for protocol pattern identification in protocol data units |
US20030026251A1 (en) * | 2001-07-31 | 2003-02-06 | Morris Jerry David | Method and apparatus for protocol pattern identification in protocol data units |
US20030096644A1 (en) * | 2001-09-28 | 2003-05-22 | David Lark | Gaming apparatus with novel display technique |
US7180895B2 (en) * | 2001-12-31 | 2007-02-20 | 3Com Corporation | System and method for classifying network packets with packet content |
US20030123447A1 (en) * | 2001-12-31 | 2003-07-03 | Tippingpoint Technologies, Inc. | System and method for classifying network packets with packet content |
US7765567B2 (en) | 2002-01-02 | 2010-07-27 | Sony Corporation | Content replacement by PID mapping |
US7292690B2 (en) | 2002-01-02 | 2007-11-06 | Sony Corporation | Video scene change detection |
US20030156718A1 (en) * | 2002-01-02 | 2003-08-21 | Candelore Brant L. | Progressive video refresh slice detection |
US7823174B2 (en) | 2002-01-02 | 2010-10-26 | Sony Corporation | Macro-block based content replacement by PID mapping |
US20030174736A1 (en) * | 2002-03-15 | 2003-09-18 | Broadcom Corporation | Method and apparatus utilizing a tail bus to solve back-to-back data burst problems |
US7970962B2 (en) * | 2002-03-15 | 2011-06-28 | Broadcom Corporation | Method and apparatus utilizing a tail bus to solve back-to-back data burst problems |
US8483230B1 (en) | 2002-03-21 | 2013-07-09 | Software Site Applications, Limited Liability Company | Packet schedule timestamp for a compressed bitstream |
US7486680B1 (en) * | 2002-03-21 | 2009-02-03 | Ji Zhang | Packet schedule timestamp for a compressed bitstream |
US8135020B1 (en) | 2002-03-21 | 2012-03-13 | Software Site Applications, Limited Liability Company | Packet schedule timestamp for a compressed bitstream |
US10346926B2 (en) | 2002-09-09 | 2019-07-09 | Xenogenic Development Llc | Context search system |
US10719888B2 (en) | 2002-09-09 | 2020-07-21 | Xenogenic Development Limited Liability Company | Context search system |
US8818896B2 (en) | 2002-09-09 | 2014-08-26 | Sony Corporation | Selective encryption with coverage encryption |
US8572408B2 (en) | 2002-11-05 | 2013-10-29 | Sony Corporation | Digital rights management of a digital device |
US7724907B2 (en) | 2002-11-05 | 2010-05-25 | Sony Corporation | Mechanism for protecting the transfer of digital content |
US7711115B2 (en) | 2002-11-05 | 2010-05-04 | Sony Corporation | Descrambler |
US7730063B2 (en) | 2002-12-10 | 2010-06-01 | Asset Trust, Inc. | Personalized medicine service |
US7401057B2 (en) | 2002-12-10 | 2008-07-15 | Asset Trust, Inc. | Entity centric computer system |
US8645988B2 (en) | 2002-12-13 | 2014-02-04 | Sony Corporation | Content personalization for digital content |
US8667525B2 (en) | 2002-12-13 | 2014-03-04 | Sony Corporation | Targeted advertisement selection from a digital stream |
US8719171B2 (en) | 2003-02-25 | 2014-05-06 | Microsoft Corporation | Issuing a publisher use license off-line in a digital rights management (DRM) system |
US8700535B2 (en) | 2003-02-25 | 2014-04-15 | Microsoft Corporation | Issuing a publisher use license off-line in a digital rights management (DRM) system |
US20090135849A1 (en) * | 2003-07-03 | 2009-05-28 | Microsoft Corporation | RTP Payload Format |
US7483532B2 (en) | 2003-07-03 | 2009-01-27 | Microsoft Corporation | RTP payload format |
US7876896B2 (en) | 2003-07-03 | 2011-01-25 | Microsoft Corporation | RTP payload format |
US7853980B2 (en) | 2003-10-31 | 2010-12-14 | Sony Corporation | Bi-directional indices for trick mode video-on-demand |
US7664105B2 (en) * | 2003-11-25 | 2010-02-16 | Thomson Licensing | Method and apparatus for storage or relocation of defined positions in a data stream |
US20050122974A1 (en) * | 2003-11-25 | 2005-06-09 | Friedemann Hubler | Method and apparatus for storage or relocation of defined positions in a data stream |
US20060184790A1 (en) * | 2004-03-26 | 2006-08-17 | Microsoft Corporation | Protecting elementary stream content |
US20050216752A1 (en) * | 2004-03-26 | 2005-09-29 | Microsoft Corporation | Common scrambling |
US20060036551A1 (en) * | 2004-03-26 | 2006-02-16 | Microsoft Corporation | Protecting elementary stream content |
US20060045142A1 (en) * | 2004-08-25 | 2006-03-02 | Matsushita Electric Industrial Co., Ltd. | Demultiplexer |
US7899080B2 (en) * | 2004-08-25 | 2011-03-01 | Panasonic Corporation | Demultiplexer |
US7426499B2 (en) | 2004-11-08 | 2008-09-16 | Asset Trust, Inc. | Search ranking system |
US7895617B2 (en) | 2004-12-15 | 2011-02-22 | Sony Corporation | Content substitution editor |
US8041190B2 (en) | 2004-12-15 | 2011-10-18 | Sony Corporation | System and method for the creation, synchronization and delivery of alternate content |
US20060136981A1 (en) * | 2004-12-21 | 2006-06-22 | Dmitrii Loukianov | Transport stream demultiplexor with content indexing capability |
US8713025B2 (en) | 2005-03-31 | 2014-04-29 | Square Halt Solutions, Limited Liability Company | Complete context search system |
US8725646B2 (en) | 2005-04-15 | 2014-05-13 | Microsoft Corporation | Output protection levels |
US8438645B2 (en) | 2005-04-27 | 2013-05-07 | Microsoft Corporation | Secure clock with grace periods |
US8781969B2 (en) | 2005-05-20 | 2014-07-15 | Microsoft Corporation | Extensible media rights |
US8325916B2 (en) | 2005-05-27 | 2012-12-04 | Microsoft Corporation | Encryption scheme for streamed multimedia content protected by rights management system |
US7769880B2 (en) | 2005-07-07 | 2010-08-03 | Microsoft Corporation | Carrying protected content using a control protocol for streaming and a transport protocol |
US20070011344A1 (en) * | 2005-07-07 | 2007-01-11 | Microsoft Corporation | Carrying protected content using a control protocol for streaming and a transport protocol |
US20070014413A1 (en) * | 2005-07-12 | 2007-01-18 | Microsoft Corporation | Delivering policy updates for protected content |
US7561696B2 (en) | 2005-07-12 | 2009-07-14 | Microsoft Corporation | Delivering policy updates for protected content |
US20070039058A1 (en) * | 2005-08-11 | 2007-02-15 | Microsoft Corporation | Revocation information management |
US8321690B2 (en) | 2005-08-11 | 2012-11-27 | Microsoft Corporation | Protecting digital media of various content types |
US7634816B2 (en) | 2005-08-11 | 2009-12-15 | Microsoft Corporation | Revocation information management |
US20070086481A1 (en) * | 2005-10-13 | 2007-04-19 | Microsoft Corporation | RTP Payload Format For VC-1 |
US7720096B2 (en) | 2005-10-13 | 2010-05-18 | Microsoft Corporation | RTP payload format for VC-1 |
US8185921B2 (en) | 2006-02-28 | 2012-05-22 | Sony Corporation | Parental control of displayed content using closed captioning |
US20070244889A1 (en) * | 2006-03-30 | 2007-10-18 | Kabushiki Kaisha Toshiba | Byte string searching apparatus and searching method |
US20080033986A1 (en) * | 2006-07-07 | 2008-02-07 | Phonetic Search, Inc. | Search engine for audio data |
US20080019368A1 (en) * | 2006-07-21 | 2008-01-24 | Storlink Semiconductors, Inc. | Apparatus and method for layer-2 to layer-7 search engine for high speed network application |
US7852843B2 (en) * | 2006-07-21 | 2010-12-14 | Cortina Systems, Inc. | Apparatus and method for layer-2 to layer-7 search engine for high speed network application |
US20090097493A1 (en) * | 2007-10-12 | 2009-04-16 | Gururaja Patil | Queuing mixed messages for configurable searching |
US20090144527A1 (en) * | 2007-11-29 | 2009-06-04 | Hiroaki Nakata | Stream processing apparatus, method for stream processing and data processing system |
US20110221961A1 (en) * | 2010-03-09 | 2011-09-15 | Kabushiki Kaisha Toshiba | Synchronization data detection apparatus, synchronization data detection method, and recording medium |
Also Published As
Publication number | Publication date |
---|---|
GB0028316D0 (en) | 2001-01-03 |
GB2362789B (en) | 2004-03-24 |
GB2362789A (en) | 2001-11-28 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6654389B1 (en) | System and method for searching patterns in real-time over a shared media | |
US6463059B1 (en) | Direct memory access execution engine with indirect addressing of circular queues in addition to direct memory addressing | |
US5828416A (en) | System and method for interfacing a transport decoder to a elementary stream video decorder | |
US6643298B1 (en) | Method and apparatus for MPEG-2 program ID re-mapping for multiplexing several programs into a single transport stream | |
US6434170B1 (en) | Memory-based circular queue with local descriptive information to implement a storage area for filtering mpeg-2 packets that are distributed and/or processed under the control of a host microprocessor by a direct memory access mechanism | |
JP4049863B2 (en) | MPEG2 transport stream packet parser system | |
EP0798932B1 (en) | MPEG-2 transport decoder | |
US6763390B1 (en) | Method and system for receiving and framing packetized data | |
US6999424B1 (en) | Method for displaying data | |
JP3641336B2 (en) | Data separator | |
KR100378791B1 (en) | Packet identifier section filter | |
US7304999B2 (en) | Methods and apparatus for processing packets including distributing packets across multiple packet processing engines and gathering the processed packets from the processing engines | |
JP3919860B2 (en) | Demultiplexer | |
KR100798926B1 (en) | Apparatus and method for forwarding packet in packet switch system | |
US5812976A (en) | System and method for interfacing a transport decoder to a bitrate-constrained audio recorder | |
US8284845B1 (en) | Method and system for handling data | |
US7404015B2 (en) | Methods and apparatus for processing packets including accessing one or more resources shared among processing engines | |
US7113546B1 (en) | System for handling compressed video data and method thereof | |
US6088357A (en) | Auxiliary transport assist processor especially for an MPEG-2 compliant decoder | |
US6111924A (en) | Error-correction-code synchronization in a videoconferencing gateway | |
US5675654A (en) | System and method for interfacing a transport decoder to a national renewable security systems (NRSS) smart card | |
US7526427B2 (en) | System and method for reception, processing and transmission of digital audio stream | |
US6778533B1 (en) | Method and system for accessing packetized elementary stream data | |
US6804266B1 (en) | Method and apparatus for handling private data from transport stream packets | |
US6621817B1 (en) | Transport packet parser |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ANZICK, WILLIAM J.;BRUNHEROTO, JOSE R.;LAEMEN, FRANS;AND OTHERS;REEL/FRAME:010417/0373Effective date: 19991122 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
REMI | Maintenance fee reminder mailed | ||
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026894/0001Effective date: 20110817 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
SULP | Surcharge for late payment |
Year of fee payment: 7 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |