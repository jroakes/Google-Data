JP7457654B2 - Steps for implementing source-based routing within an interconnect fabric on a system-on-chip - Google Patents
Steps for implementing source-based routing within an interconnect fabric on a system-on-chip Download PDFInfo
- Publication number
- JP7457654B2 JP7457654B2 JP2020552300A JP2020552300A JP7457654B2 JP 7457654 B2 JP7457654 B2 JP 7457654B2 JP 2020552300 A JP2020552300 A JP 2020552300A JP 2020552300 A JP2020552300 A JP 2020552300A JP 7457654 B2 JP7457654 B2 JP 7457654B2
- Authority
- JP
- Japan
- Prior art keywords
- transaction
- agents
- soc
- destination
- fabric
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 239000004744 fabric Substances 0.000 title claims description 83
- 230000004044 response Effects 0.000 claims description 36
- 230000005540 biological transmission Effects 0.000 claims description 10
- 239000003795 chemical substances by application Substances 0.000 description 155
- 239000000872 buffer Substances 0.000 description 28
- 230000006870 function Effects 0.000 description 21
- 238000010586 diagram Methods 0.000 description 20
- 238000000034 method Methods 0.000 description 19
- 101150060512 SPATA6 gene Proteins 0.000 description 13
- 230000008569 process Effects 0.000 description 11
- 239000013598 vector Substances 0.000 description 8
- 238000011144 upstream manufacturing Methods 0.000 description 7
- 230000008901 benefit Effects 0.000 description 5
- 238000007596 consolidation process Methods 0.000 description 5
- 241001522296 Erithacus rubecula Species 0.000 description 4
- 230000008859 change Effects 0.000 description 4
- 238000012545 processing Methods 0.000 description 4
- 238000013459 approach Methods 0.000 description 3
- 238000013473 artificial intelligence Methods 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 3
- 238000013461 design Methods 0.000 description 3
- 238000010801 machine learning Methods 0.000 description 3
- 230000010354 integration Effects 0.000 description 2
- 230000002093 peripheral effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- 102100027266 Ubiquitin-like protein ISG15 Human genes 0.000 description 1
- 101710087750 Ubiquitin-like protein ISG15 Proteins 0.000 description 1
- 230000003321 amplification Effects 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 230000002457 bidirectional effect Effects 0.000 description 1
- 238000004891 communication Methods 0.000 description 1
- 230000000295 complement effect Effects 0.000 description 1
- 238000012790 confirmation Methods 0.000 description 1
- 230000001934 delay Effects 0.000 description 1
- 230000003111 delayed effect Effects 0.000 description 1
- 238000011161 development Methods 0.000 description 1
- 230000010339 dilation Effects 0.000 description 1
- 230000002349 favourable effect Effects 0.000 description 1
- 238000007429 general method Methods 0.000 description 1
- 238000003384 imaging method Methods 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 238000012544 monitoring process Methods 0.000 description 1
- 238000003199 nucleic acid amplification method Methods 0.000 description 1
- 230000002441 reversible effect Effects 0.000 description 1
- 238000013341 scale-up Methods 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000011664 signaling Effects 0.000 description 1
- 229910052710 silicon Inorganic materials 0.000 description 1
- 239000010703 silicon Substances 0.000 description 1
- 239000002699 waste material Substances 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs
- G06F15/163—Interprocessor communication
- G06F15/173—Interprocessor communication using an interconnection network, e.g. matrix, shuffle, pyramid, star, snowflake
- G06F15/17306—Intercommunication techniques
- G06F15/17325—Synchronisation; Hardware support therefor
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F13/00—Interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F13/14—Handling requests for interconnection or transfer
- G06F13/36—Handling requests for interconnection or transfer for access to common bus or bus system
- G06F13/362—Handling requests for interconnection or transfer for access to common bus or bus system with centralised access control
- G06F13/366—Handling requests for interconnection or transfer for access to common bus or bus system with centralised access control using a centralised polling arbiter
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F13/00—Interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F13/14—Handling requests for interconnection or transfer
- G06F13/20—Handling requests for interconnection or transfer for access to input/output bus
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F13/00—Interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F13/14—Handling requests for interconnection or transfer
- G06F13/36—Handling requests for interconnection or transfer for access to common bus or bus system
- G06F13/362—Handling requests for interconnection or transfer for access to common bus or bus system with centralised access control
- G06F13/3625—Handling requests for interconnection or transfer for access to common bus or bus system with centralised access control using a time dependent access
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F13/00—Interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F13/38—Information transfer, e.g. on bus
- G06F13/40—Bus structure
- G06F13/4004—Coupling between buses
- G06F13/4022—Coupling between buses using switching circuits, e.g. switching matrix, connection or expansion network
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/76—Architectures of general purpose stored program computers
- G06F15/78—Architectures of general purpose stored program computers comprising a single central processing unit
- G06F15/7807—System on chip, i.e. computer system on a single chip; System in package, i.e. computer system on one or more chips in a single package
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/466—Transaction processing
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/48—Program initiating; Program switching, e.g. by interrupt
- G06F9/4806—Task transfer initiation or dispatching
- G06F9/4843—Task transfer initiation or dispatching by program, e.g. task dispatcher, supervisor, operating system
- G06F9/4881—Scheduling strategies for dispatcher, e.g. round robin, multi-level priority queues
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/16—Multipoint routing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/34—Source routing
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L49/00—Packet switching elements
- H04L49/10—Packet switching elements characterised by the switching fabric construction
- H04L49/109—Integrated on microchip, e.g. switch-on-chip
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2213/00—Indexing scheme relating to interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F2213/0024—Peripheral component interconnect [PCI]
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2213/00—Indexing scheme relating to interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F2213/0026—PCI express
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F2213/00—Indexing scheme relating to interconnection of, or transfer of information or other signals between, memories, input/output devices or central processing units
- G06F2213/0062—Bandwidth consumption reduction during transfers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/74—Address processing for routing
- H04L45/745—Address table lookup; Address filtering
- H04L45/7453—Address table lookup; Address filtering using hashing
Description
関連出願への相互参照
本願は、２０１８年３月３０日出願の米国仮特許出願第６２／６５０，５８９ （ＰＲＴＩＰ００１Ｐ）号および２０１９年２月４日出願の米国仮出願第６２／８００，８９７ （ＰＲＴ１Ｐ００３Ｐ）号に基づく優先権を主張する。これら優先権主張基礎出願の各々は、すべての目的のためにその全体が参照によって本明細書に組み込まれる。
Cross-references to related applications This application is incorporated by reference to U.S. Provisional Patent Application No. 62/650,589 (PRTIP001P) filed March 30, 2018 and U.S. Provisional Patent Application No. 62/800,897 (filed February 4, 2019). PRT1P003P). Each of these priority underlying applications is incorporated herein by reference in its entirety for all purposes.
本願は、共有リソースへのアクセスをアービトレートすることに関し、特に、複数のトランザクションの部分の間でアービトレートして、クロックサイクルごとに相互接続に関連付けられている複数の仮想チャネルの１つを介して勝利部分を送信することに関する。 This application relates to arbitrating access to a shared resource, and in particular to arbitrating between portions of multiple transactions and transmitting the winning portion over one of multiple virtual channels associated with an interconnect every clock cycle.
システムオンチップ（「ＳｏＣ」）は、複数のサブシステムを備える集積回路であり、しばしば、知的財産（「ＩＰ」）エージェントまたはコアと呼ばれる。ＩＰエージェントは、典型的には、特定の機能を実装または実行するように設計された回路の「再利用可能な」ブロックである。ＳｏＣの開発者は、典型的には、複数のＩＰエージェントが互いに通信するように、チップ上にそれらのＩＰエージェントをレイアウトして相互接続する。ＩＰエージェントを用いることにより、複雑なＳｏＣを開発する時間およびコストを大幅に削減できる。 A system-on-a-chip (“SoC”) is an integrated circuit that includes multiple subsystems, often referred to as an intellectual property (“IP”) agent or core. IP agents are typically "reusable" blocks of circuitry designed to implement or perform a specific function. SoC developers typically lay out and interconnect multiple IP agents on a chip so that they communicate with each other. Using IP agents can significantly reduce the time and cost of developing complex SoCs.
ＳｏＣの開発者が直面する課題の１つは、様々なＩＰエージェントが相互に動作するように、それらをチップ上で相互接続することである。この問題に対処するために、半導体業界では、相互接続規格を適応させてきた。 One of the challenges faced by SoC developers is interconnecting various IP agents on a chip so that they work with each other. To address this problem, the semiconductor industry has adapted interconnect standards.
１つのかかる規格は、英国ケンブリッジにあるＡＲＭ社によって開発および普及されたアドバンスト・マイクロコントローラ・バス・アーキテクチャ（ＡＭＢＡ）である。ＡＭＢＡは、ＳｏＣ上の機能ＩＰエージェントの接続および管理のために幅広く利用されているバス相互接続規格である。 One such standard is the Advanced Microcontroller Bus Architecture (AMBA), developed and popularized by ARM Ltd. of Cambridge, England. AMBA is a widely used bus interconnect standard for connecting and managing functional IP agents on SoCs.
ＡＭＢＡでは、トランザクションが、要求を定義し、別個の応答トランザクションを要求する。書き込みトランザクションでは、送信元が、リモート宛先にデータを書き込むことを要求する。書き込み動作が実行されると、宛先は、確認応答トランザクションを送信元に送り返す。書き込み動作は、応答トランザクションが送信元によって受信された時にのみ完了したと見なされる。読み出しトランザクションでは、送信元が、リモートロケーションを読み出すためにアクセスを要求する。読み出しトランザクションは、応答トランザクション（すなわち、アクセスされたコンテンツ）が送信元に返された時にのみ完了する。 In AMBA, a transaction defines a request and requires a separate response transaction. In a write transaction, a source requests to write data to a remote destination. Once the write operation is performed, the destination sends an acknowledgment transaction back to the source. A write operation is considered complete only when a response transaction is received by the sender. In a read transaction, a source requests access to read a remote location. A read transaction is only completed when the response transaction (ie, the accessed content) is returned to the source.
ＡＭＢＡでは、アービトレーション処理が、複数の競合トランザクションの間の相互接続バスへのアクセスを許可するために用いられる。所与のアービトレーションサイクル中に、競合トランザクションの１つが、勝者として選択される。次いで、相互接続バスは、勝利トランザクションのデータ部の持続期間にわたって制御される。次のアービトレーションサイクルは、現在のトランザクションのためのデータすべてが完了した後にのみ開始する。この処理は、相互接続へのアクセスを巡って競合する複数の未処理のトランザクションがあるという条件で、連続的に繰り返される。 In AMBA, arbitration processing is used to grant access to an interconnect bus between multiple competing transactions. During a given arbitration cycle, one of the competing transactions is selected as the winner. The interconnect bus is then controlled for the duration of the data portion of the winning transaction. The next arbitration cycle begins only after all data for the current transaction is completed. This process is repeated continuously provided there are multiple outstanding transactions competing for access to the interconnect.
ＡＭＢＡ規格の１つの問題は、待ち時間である。バス相互接続は、トランザクションごとにアービトレートされる。トランザクションの任意の部分の間に、トランザクションが読み出し、書き込み、または、応答のいずれであるかに関わらず、バスは、トランザクション全体に対して制御される。トランザクションが開始すると、中断できない。例えば、トランザクションのデータ部が４サイクル長である場合、別のトランザクションがバスへアクセスできる前に、すべての４サイクルが完了する必要がある。結果として、（１）トランザクションは、クロックサイクルごとにはアービトレートできず、（２）すべての非勝利競合トランザクションは、現在のトランザクションのデータ部が完了するまで待機する必要がある。これらの要因の両方が、相互接続の効率およびＳｏＣの全体パフォーマンスを下げる傾向がある。 One problem with the AMBA standard is latency. The bus interconnect is arbitrated on a transaction-by-transaction basis. During any part of a transaction, whether the transaction is a read, write, or response, the bus is controlled for the entire transaction. Once a transaction has started, it cannot be interrupted. For example, if the data portion of a transaction is four cycles long, all four cycles must complete before another transaction can access the bus. As a result, (1) transactions cannot be arbitrated every clock cycle, and (2) all non-winning conflicting transactions must wait until the data portion of the current transaction is complete. Both of these factors tend to reduce the efficiency of the interconnect and the overall performance of the SoC.
システムオンチップすなわちＳｏＣ上の複数のサブシステムの間で共有相互接続へのアクセスをアービトレートするためのアービトレーションシステムおよび方法が開示されている。アービトレーションシステムおよび方法は、クロックサイクルごとに、（１）複数のサブシステムによって生成された複数のトランザクションの部分の間でアービトレートし、（２）複数のトランザクションの部分の中から勝利部分を選択し、（３）相互接続に関連付けられている複数の仮想チャネルの１つを介して勝利部分を伝送するよう構成されているアービトレーション要素を備える。 Arbitration systems and methods are disclosed for arbitrating access to shared interconnects among multiple subsystems on a system-on-chip or SoC. Arbitration systems and methods each clock cycle: (1) arbitrate between portions of multiple transactions generated by multiple subsystems; (2) select a winning portion among the portions of multiple transactions; (3) comprising an arbitration element configured to transmit the winning portion via one of a plurality of virtual channels associated with the interconnect;
（１）～（３）を繰り返し実行することにより、複数の勝利部分が、それぞれ、複数のクロックサイクルにわたってインターリーブされて複数の仮想チャネルを介して伝送される。クロックサイクルごとに複数の仮想チャネルを介して複数のトランザクション部分のアービトレーションを行うことで、待ち時間の削減、ならびに、相互接続の効率および利用率の上昇など、多くの利点が得られる。これらの属性により、本明細書に開示されたアービトレーションシステムおよび方法は、システムオンチップ（ＳｏＣ）上での相互接続へのアクセスをアービトレートするのに非常に適切になる。 By repeatedly performing (1)-(3), multiple winning portions are transmitted over multiple virtual channels, each interleaved over multiple clock cycles. Arbitrating multiple transaction parts over multiple virtual channels every clock cycle provides many benefits, including reduced latency and increased interconnect efficiency and utilization. These attributes make the arbitration system and method disclosed herein well suited for arbitrating access to interconnects on a system-on-chip (SoC).
本願およびその利点については、添付の図面に関連して行う以下の説明を参照することによって最も良く理解できる。 The present application and its advantages are best understood by reference to the following description taken in conjunction with the accompanying drawings.
図面において、同様の構造要素を指定するために、同様の符号が用いられることがある。また、図中の描写は、図式的なものであり、必ずしも縮尺通りではないことを理解されたい。 Like symbols may be used in the drawings to designate like structural elements. It should also be understood that the depictions in the figures are schematic and are not necessarily to scale.
以下では、添付図面に例示された、いくつかの非排他的な実施形態を参照しつつ、本願の詳細な説明を行う。以下の説明では、本開示の完全な理解を促すために、数多くの具体的な詳細事項が示されている。しかしながら、当業者にとって明らかなように、本開示は、これらの具体的な詳細事項の一部または全てがなくとも実施することが可能である。また、本開示が不必要に不明瞭となるのを避けるため、周知の処理工程および／または構造については、詳細な説明を省略した。 The present application is described in detail below with reference to several non-exclusive embodiments illustrated in the accompanying drawings. In the following description, numerous specific details are set forth to facilitate a thorough understanding of the present disclosure. However, it will be apparent to one of ordinary skill in the art that the present disclosure may be practiced without some or all of these specific details. Additionally, detailed descriptions of well-known process steps and/or structures have been omitted to avoid unnecessarily obscuring the present disclosure.
現在開発中の集積回路の多くは、非常に複雑である。結果として、多くのチップ設計者は、システムオンチップすなわち「ＳｏＣ」アプローチを用いて、単一のシリコン上に複数のサブシステムまたはＩＰエージェントを相互接続してきた。消費者デバイス（例えば、ハンドヘルド、携帯電話、タブレットコンピュータ、ラップトップおよびデスクトップコンピュータ、メデイア処理など）、仮想または拡張現実（例えば、ロボット工学、自律走行車、航空機など）、医療機器（例えば、イメージングなど）、工業、ホームオートメーション、工業（例えば、スマート家電、家庭用監視機器、など）およびデータセンター用途（例えば、ネットワークスイッチ、接続型ストレージデバイス、など）など、様々な用途のためのＳｏＣが、現在利用可能であるかまたは開発されている。 Many of the integrated circuits currently being developed are highly complex. As a result, many chip designers have used a system-on-chip or "SoC" approach to interconnect multiple subsystems or IP agents on a single silicon. Consumer devices (e.g., handhelds, mobile phones, tablet computers, laptop and desktop computers, media processing, etc.), virtual or augmented reality (e.g., robotics, autonomous vehicles, aircraft, etc.), medical equipment (e.g., imaging, etc.) ), industrial home automation, industrial (e.g. smart home appliances, home monitoring equipment, etc.) and data center applications (e.g. network switches, connected storage devices, etc.) available or being developed.
本願は、共有リソースへのアクセスをアービトレートするためのアービトレーションシステムおよび方法をおおむね対象にしている。かかる共有リソースは、例えば、バス相互接続、メモリリソース、処理リソース、または、複数の競争パーティの間で共有されたほぼ任意のその他のリソースでありうる。説明の便宜上、以下で詳述する共有リソースは、システムオンチップすなわち「ＳｏＣ」上の複数のサブシステムによって共有される相互接続であるとする。 The present application is generally directed to arbitration systems and methods for arbitrating access to shared resources. Such shared resources may be, for example, bus interconnects, memory resources, processing resources, or nearly any other resource shared among multiple competing parties. For purposes of explanation, the shared resources detailed below are interconnects shared by multiple subsystems on a system-on-chip or "SoC."
ＳｏＣでは、後に詳述するように、トランザクションの形態で互いにトラフィックをやり取りする複数のサブシステムがあり、共有リソースは、物理的な相互接続であり、様々なトランザクションまたはその部分が、共有相互接続に関連する複数の仮想チャネルを介して伝送され、複数の異なるアービトレーションスキームおよび／または優先度の１つが、サブファンクションの間のトランザクションの伝送に向けた共有相互接続へのアクセスをアービトレートするために用いられてよい。 In a SoC, as described in more detail below, there are multiple subsystems that exchange traffic with each other in the form of transactions, the shared resource is a physical interconnect, various transactions or portions thereof are transmitted over multiple virtual channels associated with the shared interconnect, and one of multiple different arbitration schemes and/or priorities may be used to arbitrate access to the shared interconnect for transmission of transactions between subfunctions.
トランザクションクラス
ＳｏＣに用いられる上述の共有相互接続内には、Ｐｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）を含む少なくとも３つのタイプまたはクラスのトランザクションが存在する。各々の簡単な定義を以下の表１に提供する。
Ｐｏｓｔｅｄトランザクション（書き込みなど）は、応答トランザクションを求めない。送信元がデータを指定された宛先に書き込むと、トランザクションが終了する。Ｎｏｎ－ｐｏｓｔｅｄトランザクション（読み出しまたは書き出しのいずれかなど）では、応答が求められる。しかしながら、応答は、別個のＣｏｍｐｌｅｔｉｏｎトランザクションとして分岐される。換言すると、読み出しでは、最初のトランザクションが読み出し動作のために用いられ、別個であるが関連するＣｏｍｐｌｅｔｉｏｎトランザクションが読み出しコンテンツを返すために用いられる。Ｎｏｎ－ｐｏｓｔｅｄ書き込みでは、最初のトランザクションが書き込みのために用いられ、一方、書き込みが完了すると、第２関連Ｃｏｍｐｌｅｔｉｏｎトランザクションが確認のために求められる。 Posted transactions (such as writes) do not require a response transaction. Once the source writes the data to the specified destination, the transaction is complete. Non-posted transactions (such as either reads or writes) do require a response. However, the response is forked as a separate Completion transaction. In other words, for a read, an initial transaction is used for the read operation and a separate but related Completion transaction is used to return the read contents. For a non-posted write, an initial transaction is used for the write, while once the write is complete, a second related Completion transaction is required for confirmation.
トランザクションは、タイプに関わらず、１以上のパケットによって表すことができる。いくつかの状況では、トランザクションは、単一のパケットによって表されうる。別の状況においては、複数のパケットが、トランザクション全体を表すために必要とされうる。 A transaction, regardless of type, can be represented by one or more packets. In some situations, a transaction may be represented by a single packet. In other situations, multiple packets may be required to represent the entire transaction.
ビートは、クロックサイクルあたりに共有相互接続を介して伝送できるデータの量である。例えば、共有相互接続が物理的に１２８ビット幅である場合、１２８ビットが、各ビートまたはクロックサイクルに伝送されうる。 A beat is the amount of data that can be transmitted over a shared interconnect per clock cycle. For example, if the shared interconnect is physically 128 bits wide, 128 bits may be transmitted in each beat or clock cycle.
いくつかの状況において、トランザクションは、伝送のために複数の部分に分割される必要がありうる。５１２ビット（６４バイト）であるペイロードを有する単一のパケットを有するトランザクションを考える。共有相互接続が１２８ビット幅（１６バイト）のみである場合、トランザクションは、４つの部分（例えば、４×１２８＝５１２）に分割され、４つのクロックサイクルまたはビートで伝送される必要がある。一方、トランザクションが１２８ビット幅未満である単一パケットのみである場合、トランザクション全体が、１つのクロックサイクルまたはビートで送信されうる。同じトランザクションがさらなるパケットをたまたま含む場合、さらなるクロックサイクルまたはビートが必要とされうる。 In some situations, a transaction may need to be split into multiple parts for transmission. Consider a transaction that has a single packet with a payload that is 512 bits (64 bytes). If the shared interconnect is only 128 bits wide (16 bytes), then the transaction needs to be split into four parts (e.g., 4 x 128 = 512) and transmitted in four clock cycles or beats. On the other hand, if the transaction is only a single packet that is less than 128 bits wide, the entire transaction may be sent in one clock cycle or beat. If the same transaction happens to include additional packets, additional clock cycles or beats may be required.
したがって、トランザクションの「部分」という用語は、所与のクロックサイクルまたはビート中に共有相互接続を介して転送できるデータの量である。部分のサイズは、共有相互接続の物理的な幅に応じて変わりうる。例えば、共有相互接続が物理的に６４データビット幅である場合、任意の１サイクルまたはビート中に転送できる最大ビット数は６４ビットである。所与のトランザクションが６４ビット以下のペイロードを有する場合、トランザクション全体が、単一部分で共有相互接続を介して送信されうる。一方、ペイロードがより大きい場合、パケットは、複数の部分で共有相互接続を介して送信されなければならない。１２８、２５６、または、５１２ビットのペイロードを有するトランザクションは、それぞれ、２、４、および、８の部分を必要とする。このように、「部分」という用語は、任意の所与のクロックサイクルまたはビート中に共有相互接続を介して送信されうるトランザクションの一部または全体のいずれかを意味すると広く解釈されるべきである。 Thus, the term "portion" of a transaction is the amount of data that can be transferred across a shared interconnect during a given clock cycle or beat. The size of the portion may vary depending on the physical width of the shared interconnect. For example, if the shared interconnect is physically 64 data bits wide, then the maximum number of bits that can be transferred during any one cycle or beat is 64 bits. If a given transaction has a payload of 64 bits or less, the entire transaction may be sent over the shared interconnect in a single part. On the other hand, if the payload is larger, the packet must be sent over the shared interconnect in multiple parts. Transactions with payloads of 128, 256, or 512 bits require 2, 4, and 8 parts, respectively. As such, the term "part" should be broadly interpreted to mean either part or the entire transaction that may be sent over a shared interconnect during any given clock cycle or beat. .
ストリーム
ストリームは、仮想チャネルおよびトランザクションクラスのペアリングとして定義される。例えば、４つの仮想チャネル（例えば、ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）、ならびに、３つのトランザクションクラス（Ｐ、ＮＰ、Ｃ）があった場合、最大で１２の異なる可能なストリームがある。仮想チャネルおよびトランザクションクラスの様々な組み合わせを、以下の表２で詳述する。
上述したトランザクションクラスの数は、単に例示であり、限定として解釈すべきではないことに注意されたい。逆に、任意の数の仮想チャネルおよび／またはトランザクションクラスが用いられてよい。 Note that the number of transaction classes described above is merely illustrative and should not be construed as limiting. Conversely, any number of virtual channels and/or transaction classes may be used.
共有相互接続の仮想チャネルでのアービトレーション
図１を参照すると、アービトレーションシステム１０のブロック図が示されている。非排他的実施形態において、アービトレーションシステムは、アップストリームサブファンクション１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）へトランザクションを送信しようと試みる複数のサブファンクション１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）による共有相互接続１２へのアクセスをアービトレートするために用いられる。
Arbitration on Virtual Channels of a Shared Interconnect Referring now to Figure 1, there is shown a block diagram of an
共有相互接続１２は、Ｎデータビット幅でありＭ個の制御ビットを含む物理的な相互接続である。また、共有相互接続１２は一方向性であり、これは、送信元（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）から宛先（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）への方向にのみトラフィックを扱うことを意味する。
Shared
様々な代替例において、Ｎデータビットの数は、任意の整数であってよいが、典型的には、それぞれ、２のべき乗のビット幅である（例えば、２１、２２、２３、２４、２５、２６、２７、２８、２９など）または（２、４、６、８、１６、３２、６４、１２８、２５６など）。最も現実的な応用例では、Ｎビットの数は、３２、６４、１２８、２５６、または、５１２のいずれかである。ただし、これらの幅は、単に例示であり、どのようにも限定するものとして解釈すべきではないことを理解されたい。 In various alternatives, the number of N data bits may be any integer number, but are typically each a power of two bit wide (e.g., 21, 22, 23, 24, 25, 26, 27, 28, 29, etc.) or (2, 4, 6, 8, 16, 32, 64, 128, 256, etc.). In most practical applications, the number of N bits is either 32, 64, 128, 256, or 512. However, it is to be understood that these widths are merely illustrative and should not be construed as limiting in any way.
制御ビットの数Ｍも、様々であり、任意の数であってよい。 The number M of control bits also varies and may be any number.
１以上の論理チャネル（図示せず）（以降、「仮想チャネル」すなわち「ＶＣ」と呼ぶ）が、共有相互接続１２に関連付けられている。各仮想チャネルは、独立している。各仮想チャネルは、複数の独立ストリームに関連付けられてよい。仮想チャネルの数は、広く変化してよい。例えば、３２以上の数までの仮想チャネルが、規定されるか、または、共有相互接続１２に関連付けられてよい。
One or more logical channels (not shown) (hereinafter referred to as “virtual channels” or “VCs”) are associated with shared
様々な代替実施形態において、各仮想チャネルは、異なる優先度を割り当てられてよい。１以上の仮想チャネルに、より高い優先度が割り当てられてよく、一方、１以上のその他の仮想チャネルに、より低い優先度が割り当てられてよい。高い優先度のチャネルは、低い優先度の仮想チャネルよりも高い共有相互接続１２へのアクセス権を与えられるまたはアービトレートされる。別の実施形態では、仮想チャネルの各々に、同じ優先度が与えられてもよく、その場合、共有相互接続１２へのアクセス権を与えるまたはアービトレートする時に、或る仮想チャネルを別の仮想チャネルより優先することがない。さらに別の実施形態において、仮想チャネルの内の１以上に割り当てられた優先度は、動的に変化してもよい。例えば、第１セットの状況において、仮想チャネルすべてに、同じ優先度が割り当てられてよいが、第２セットの状況において、特定の仮想チャネルに、その他の仮想チャネルよりも高い優先度が割り当てられてもよい。したがって、状況が変化するにつれて、仮想チャネルの間で用いられる優先度スキームは、現在の動作条件に最もよく合うように変更されうる。
In various alternative embodiments, each virtual channel may be assigned a different priority. One or more virtual channels may be assigned a higher priority, while one or more other virtual channels may be assigned a lower priority. High priority channels are given or arbitrated more access to the shared
サブシステム１４の各々は、典型的には、「再利用可能な」回路またはロジックのブロックであり、一般に、ＩＰコアまたはエージェントと呼ばれる。ほとんどのＩＰエージェントは、特定の機能を実行するよう設計され、例えば、イーサネットポート、ディスプレイドライバ、ＳＤＲＡＭインターフェース、ＵＳＢポートなどの周辺デバイスのためのコントローラである。かかるＩＰエージェントは、一般に、特定用途向け集積回路（ＡＳＩＣ）またはフィールドプログラマブルゲートアレイ（ＦＰＧＡ）などの集積回路（ＩＣ）上に提供された複雑なシステムの設計全体の中で必要なサブシステム機能を提供する「ビルディングブロック（構成要素）」として用いられる。利用可能なＩＰエージェントのライブラリを用いることにより、チップ設計者は、より複雑な集積回路の設計において様々なロジック機能を容易に「ボルト締め」することができるので、設計時間を削減すると共に開発コストを節約することができる。サブシステムエージェント１４は、専用ＩＰコアに関して上述したが、これは、必要条件ではないことを理解されたい。逆に、サブシステム１４は、単一のポート２０に接続されたまたはそれを共有するＩＰ機能のコレクションであってもよい。したがって、「エージェント」という用語は、サブシステムが単一の機能を実行するか、複数の機能を実行するかに関わらず、ポート２０に接続された任意のタイプのサブシステムとして広く解釈されるべきである。
Each of the
一対のスイッチ１６および１８が、それぞれ、専用アクセスポート２０を介してサブシステムエージェント１４の各々と共有相互接続１２との間のアクセスを提供する。図の例示的実施形態では、
（１）サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、それぞれ、アクセスＰｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２を介してスイッチ１６と接続する。
（２）サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６は、それぞれ、Ｐｏｒｔ３、Ｐｏｒｔ４、および、Ｐｏｒｔ５を介してスイッチ１８と接続する。
（３）さらに、アクセスポート２２が、相互接続１２を介して、全体としてスイッチ１６へのサブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６のアクセスを提供する。
A pair of
(1) Subsystem agents IP1, IP2, and IP3 are connected to the
(2) Subsystem agents IP4, IP5, and IP6 are connected to the
(3) Additionally,
スイッチ１６および１８は、多重化および逆多重化機能を実行する。スイッチ１６は、サブシステムエージェントＩＰ１、ＩＰ２、および／または、ＩＰ３によって生成されたアップストリームトラフィックを選択し、共有相互接続１２を介してトラフィックをダウンストリームに送信する。スイッチ１８では、逆多重化動作が実行され、トラフィックは、目標サブシステムエージェント（すなわち、ＩＰ４、ＩＰ５、または、ＩＰ６のいずれか）へ提供される。
各アクセスポート２０は、一意ポート識別子（ＩＤ）を有しており、各サブシステムエージェント１４の専用アクセスをスイッチ１６または１８のいずれかへ提供する。例えば、サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、それぞれ、アクセスポートＰｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２に割り当てられる。同様に、サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６は、それぞれ、アクセスポートＰｏｒｔ３、Ｐｏｒｔ４、および、Ｐｏｒｔ５に割り当てられる。
Each
スイッチ１６、１８への／からの入口ポイントおよび出口ポイントを提供するのに加えて、一意ポートＩＤ２０は、サブシステムエージェント１４の間のトラフィックをアドレッシングするために用いられる。各ポート２０は、システムメモリ２４内に、特定の量の割り当てられたアドレス可能空間を有する。
In addition to providing entry and exit points to/from
いくつかの非排他的な実施形態において、アクセスポート２０の全部または一部に、一意ポートＩＤだけでなく、「グローバル」ポート識別子が割り当てられてもよい。トランザクションおよびその他のトラフィックが、グローバルポート識別子に割り当てられたアクセスポートの全部または一部に送信されうる。したがって、グローバル識別子を用いれば、トランザクションおよびその他のトラフィックが、アクセスポート２０の全部または一部へ広く発信またはブロードキャストすることができ、一意識別子を用いて各アクセスポート２０へ個別にアドレッシングする必要性を排除できる。
In some non-exclusive embodiments, all or some of the
スイッチ１６は、さらに、アービトレーション要素２６、アドレス解決ロジック（ＡＲＬ）２８、および、アドレス解決ルックアップテーブル（ＬＵＴ）３０を備える。
動作中、サブシステムエージェントＩＰ１、ＩＰ２、および、ＩＰ３は、トランザクションを生成する。各トランザクションが生成されると、送信側サブシステム１４によってパケット化され、次いで、パケット化されたトランザクションは、対応するポート２０を介してローカルスイッチ１６へ投入される。例えば、ＩＰ１、ＩＰ２、および、ＩＰ３によって生成されたトランザクションの部分は、それぞれ、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２を介してスイッチ１６に提供される。
During operation, subsystem agents IP1, IP2, and IP3 generate transactions. As each transaction is generated, it is packetized by the sending
ポート２０は各々、相互接続チャネル１２に関連付けられている仮想チャネルの各々に対して、複数の先入れ先出しバッファ（図示せず）を備える。非排他的実施形態において、４つの仮想チャネルが存在する。その場合、各仮想チャネルに対して１つで、各ポート２０は、４つのバッファを備える。再び、ポート２０に含まれる仮想チャネルおよびバッファの数は、様々であってよく、４に限定されないことを理解されたい。逆に、仮想チャネルおよびバッファの数は、４より多くても少なくてもよい。
Each
所与のトランザクションが２つ（以上）の部分で表される場合、それらの部分は、同じバッファ内に維持される。例えば、相互接続１２が１２８データビット幅であり、トランザクションが５１２ビットのペイロードを含むパケットによって表される場合、トランザクションは、４クロックサイクルまたはビートで伝送される４つの部分に分割される必要がある。一方、トランザクションが６４ビットのペイロードを有する単一パケットによって表されうる場合、単一の部分は、１クロックサイクルまたはビートで伝送されうる。所与のトランザクションのすべての部分を同じバッファ内に維持することにより、仮想チャネルは、論理的に独立したままになる。換言すると、所与のトランザクションに関連するトラフィックすべてが、常に、ストリームと同じ仮想チャネルで送信され、複数の仮想チャネルを介して分岐されることがない。
If a given transaction is represented in two (or more) parts, those parts are maintained in the same buffer. For example, if
アービトレーション要素２６は、様々なアクセスポート２０によって維持されたトランザクションの競合するバッファされた部分の間でアービトレートすることを担う。非排他的実施形態において、複数の競合トランザクションが利用可能であれば、アービトレーション要素２６は、クロックサイクルごとにアービトレーションを実行する。サイクルごとのアービトレーション勝者は、相互接続１２へのアクセスが認められて相互接続１２を介して伝送されるトランザクションの部分を、サブシステムＩＰ１、ＩＰ２、および、ＩＰ３の内の１つから生成する。
トランザクションを生成する時、送信元サブシステムＩＰ１、ＩＰ２、および、ＩＰ３は、通常、可能な宛先サブシステムエージェントＩＰ４、ＩＰ５、および、ＩＰ６についてアドレス空間内のアドレスを知っているが、宛先にトランザクションをルーティングするために必要な情報（例えば、ポートＩＤ２０および／または２２）を知らない。一実施形態において、ローカルアドレス解決ロジック（ＡＲＬ）２８は、既知の宛先アドレスを必要なルーティング情報に解決するために用いられる。換言すると、送信元サブエージェント１４は、システムメモリ２４内の所与のアドレスにアクセスしたいことを単に知りうる。したがって、ＡＲＬ２８は、ＬＵＴ３０へアクセスするタスクを課せられ、指定されたアドレスに対応する最終的な宛先への配信パスに沿ってポート２０／２２のアドレスルックアップを実行する。ポート２０／２２が知られると、この情報は、トランザクションのパケット内の宛先フィールドに挿入される。結果として、パケットは、配信パスに沿ってポート２０／２２へ配信される。原則として、要求された配信情報がすでに知られており、パケットの宛先フィールドに含まれているので、配信パスに沿ったダウンストリームノードが、さらなるルックアップを実行する必要はない。後に詳述するようにソースベースルーティング（ＳＢＲ）と呼ばれる他のタイプのトランザクションで、送信元Ｐエージェントは、宛先ポートアドレスを知る。結果として、ＡＲＬ２８によって実行されるルックアップは、典型的には、実行される必要がない。
When generating a transaction, the source subsystems IP1, IP2, and IP3 typically know the addresses in the address space for possible destination subsystem agents IP4, IP5, and IP6, but do not send the transaction to the destination. It does not know the information needed to route (eg,
代替実施形態において、相互接続内のすべてのノードがＡＲＬ２８およびＬＵＴ３０を必要とするわけではない。これらの要素を持たないノードについては、必要なルーティング情報のないトランザクションが、デフォルトノードへ転送されうる。デフォルトノードでは、ＡＲＬ２８およびＬＵＴ３０がアクセスされ、次いで、必要なルーティング情報が、トランザクションのパケットのヘッダに挿入されうる。デフォルトノードは、典型的には、ＡＲＬ２８およびＬＵＴ３０を持たないノードよりアップストリームにある。ただし、これは、決して必須ではない。１または複数のデフォルトノードは、ＳｏＣ上のどこに配置されてもよい。ＡＲＬ２８およびＬＵＴ３０をいくつかのノードから排除することにより、ノードの複雑さを低減できる。
In alternative embodiments, not all nodes in the interconnect require
ＡＲＬ２８は、トランザクションの勝利部分のための転送先のデコードに加えて、各仮想チャネル内のトランザクションの勝利部分のための順序を規定するので、「順序付けポイント」と呼ばれてもよい。各アービトレーションが解決されると、ＡＲＬ２８がアドレスポートルックアップを実行するために用いられるか否かに関わらず、トランザクションの勝利部分が各仮想チャネルに提供される先入れ先出しキューに挿入される。次いで、トランザクションの勝利部分は、バッファ内で相互接続１２を介した伝送の順番を待つ。
また、ＡＲＬ２８は、「アップストリーム」および「ダウンストリーム」トラフィックを規定するために用いられる。換言すると、スイッチ１６に関連付けられているＩＰエージェント１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）によって生成された任意のトランザクションは、ＡＲＬ２８に対してアップストリームにあると見なされる。ＡＲＬ２８後の（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６に伝送される）すべてのトランザクションが、ダウンストリームトラフィックと見なされる。
スイッチ１６に関連付けられているＩＰエージェント１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）は、直接的または間接的のいずれかで、互いに通信してトランザクションを互いに送信してよい。直接的な通信（しばしば、ソースベースルーティング（ＳＢＲ）と呼ばれる）により、ＩＰエージェント１４は、ピアツーピアモデルで互いにトランザクションを送信できる。このモデルでは、送信元ＩＰエージェトは、そのピアＩＰエージェント１４の一意ポートＩＤが知っており、ＬＵＴ３０にアクセスするためにＡＲＬ２８を用いる必要性を無くす。あるいは、スイッチ１６に関連付けられているＩＰエージェントの間のトランザクションは、ＡＲＬ２８を用いてルーティングされてもよい。このモデルでは、上述したのと同様に、送信元ＩＰエージェントは、宛先ＩＰエージェント１４のアドレスのみを知り、ルーティングに必要な情報は知らない。次いで、ＡＲＬ２８は、ＬＵＴ３０にアクセスし、対応するポートＩＤを見つけるために用いられ、その後、ポートＩＤは、トランザクションのパケットの宛先フィールドに挿入される。
IP agents 14 (ie, IP1, IP2, and IP3) associated with
パケットフォーマット
ＩＰエージェント１４は、トランザクションを生成して、相互接続１２に関連付けられている仮想チャネルを通じて処理する。各トランザクションは、典型的には、１以上のパケットで構成される。各パケットは、典型的には、固定ヘッダサイズおよびフォーマットを有する。いくつかの例において、各パケットは、固定サイズペイロードを有してよい。別の例において、パケットペイロードは、大から小まで様々なサイズであってよく、または、ペイロードが全く無くてもよい。
Packet
図２を参照すると、パケットの例３２が示されている。パケット３２は、ヘッダ３４およびペイロード３６を備える。この特定の実施形態において、ヘッダ３４は、１６バイトのサイズである。このサイズは例示であり、より大きいサイズ（例えば、より多いバイト数）または小さいサイズ（例えば、より少ないバイト数）のパケットが用いられてもよいことを理解されたい。パケット３２のヘッダ３４は、必ずしもすべてが同じサイズである必要がないことも理解されたい。代替実施形態において、ＳｏＣにおけるパケットヘッダのサイズは、可変であってもよい。
With reference to FIG. 2, an
ヘッダ３４は、宛先識別子（ＤＳＴ＿ＩＤ）、送信元識別子（ＳＲＣ＿ＩＤ）、ペイロードサイズインジケータ（ＰＬＤ＿ＳＺ）、予備フィールド（ＲＳＶＤ）、コマンドフィールド（ＣＭＤ）、ＴＡＧフィールド、ステータス（ＳＴＳ）、トランザクションＩＤフィールド（ＴＡＧ）、アドレスすなわちＡＤＤＲフィールド、ＵＳＤＲ／コンパクトペイロードフィールド、トランザクションクラスすなわちＴＣフィールド、フォーマットＦＭＴフィールド、および、バイトイネーブル（ＢＥ）フィールドなど、複数のフィールドを含む。ヘッダ３４の様々なフィールドについて、以下の表３で簡単に説明する。
ペイロード３６は、パケットのコンテンツを含む。ペイロードのサイズは、様々であってよい。いくつかの例において、ペイロードは大きくてよい。その他の例において、ペイロードは小さくてもよい。さらに別の例において、コンテンツが非常に小さいすなわち「コンパクト」である場合、ヘッダ３４のＵＳＲＤフィールド内で運ぶことができる。
トランザクションのタイプは、しばしば、トランザクションを表すために用いられる１以上のパケットがペイロードを持つか否かを示す。例えば、ＰｏｓｔｅｄまたはＮｏｎ－ｐｏｓｔｅｄ読み出しのどちらでも、パケットは、アクセスされるロケーションアドレスを指定するが、典型的には、ペイロードを持たない。しかしながら、関連するＣｏｍｐｌｅｔｉｏｎトランザクションのパケットは、読み出しコンテンツを含むペイロードを含む。ＰｏｓｔｅｄおよびＮｏｎ－ｐｏｓｔｅｄ書き込みトランザクションの両方で、パケットは、宛先に書き込まれるデータを含むペイロードを含む。Ｎｏｎ－ｐｏｓｔｅｄバージョンの書き込みでは、Ｃｏｍｐｌｅｔｉｏｎトランザクションのパケットは、通常、ペイロードを定義しない。しかしながら、一部の状況では、Ｃｏｍｐｌｅｔｉｏｎトランザクションが、ペイロードを規定する。 The type of transaction often indicates whether one or more packets used to represent the transaction have a payload. For example, for either Posted or Non-posted reads, the packet specifies the location address to be accessed, but typically has no payload. However, the associated Completion transaction packet includes a payload containing read content. In both Posted and Non-posted write transactions, the packet includes a payload containing the data to be written to the destination. In non-posted versions of writes, the Completion transaction's packet typically does not define a payload. However, in some situations, the Completion transaction specifies the payload.
パケットの例および上述の説明は、パケットに含まれうる基本的なフィールドの多くを網羅している。さらなるフィールドが削除または追加されてもよいことを理解されたい。例えば、送信元および宛先がプライベートメッセージを共有できるように、プライベートシグナリングフィールドが用いられてもよい。 The example packet and description above covers many of the basic fields that may be included in a packet. It should be understood that additional fields may be removed or added. For example, private signaling fields may be used so that the source and destination can share private messages.
アービトレーション
図３Ａを参照すると、ペリフェラルコンポーネントインターコネクト（ＰＣＩ）順位付けでアービトレーション要素２６によって実行されるアービトレーションロジックを示す論理図が示されている。
Arbitration Referring to FIG. 3A, a logic diagram illustrating arbitration logic performed by
ＰＣＩ順位付けでは、各ポート２０は、各仮想チャネルおよびトランザクションクラス（Ｐ、ＮＰ、および、Ｃ）の組み合わせのための別個のバッファを備える。例えば、４つの仮想チャネル（ＶＣ０、ＶＣ０１、ＶＣ２、および、ＶＣ３）がある場合、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２は各々、１２の先入れ先出しバッファを有する。換言すると、各ポート２０について、バッファが、各トランザクションクラス（Ｐ、ＮＰ、および、Ｃ）ならびに仮想チャネル（ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３０）の組み合わせに対して提供される。
In PCI ranking, each
各ＩＰエージェント１４（例えば、ＩＰ１、ＩＰ２、および、ＩＰ３）がトランザクションを生成すると、結果として得られるパケットが、それぞれ、対応するポート（例えば、ポート０、ポート１、および、ポート２）内で、トランザクションタイプに基づいて、適切なバッファに配置される。例えば、ＩＰ１によって生成されたＰｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションが、それぞれ、ポート０内で、割り当てられた仮想チャネルのためのＰｏｓｔｅｄ、Ｎｏｎ－ｐｏｓｔｅｄ、および、Ｃｏｍｐｌｅｔｉｏｎバッファに配置される。ＩＰ２およびＩＰ３によって生成されたトランザクションは、同様の方法でポート１およびポート２内で、割り当てられた仮想チャネルのためのＰｏｓｔｅｄ、Ｎｏｎ－ｐｏｓｔｅｄ、および、Ｃｏｍｐｌｅｔｉｏｎバッファに同様に配置される。
When each IP agent 14 (e.g., IP1, IP2, and IP3) generates a transaction, the resulting packet is sent to the corresponding port (e.g.,
所与のトランザクションが複数のパケットによって表される場合、そのトランザクションのパケットすべてが、同じバッファ内に挿入される。結果として、トランザクションのパケットすべてが、最終的に同じ仮想チャネルを介して伝送される。このポリシーでは、仮想チャネルは独立したままであり、これは、同じトランザクションに関連する複数のパケットの伝送には、異なる仮想チャネルが用いられないことを意味する。 If a given transaction is represented by multiple packets, all packets for that transaction are inserted into the same buffer. As a result, all packets of a transaction are ultimately transmitted over the same virtual channel. In this policy, the virtual channels remain independent, meaning that different virtual channels are not used for the transmission of multiple packets related to the same transaction.
各ポート２０内で、多くの異なる方法で所与の仮想チャネルにパケットを割り当てることができる。例えば、割り当ては、無作為であってよい。あるいは、割り当ては、各仮想チャネルに対する作業負荷と未処理のトラフィックの量とに基づいてもよい。或るチャネルが非常にビジーであり、その他のチャネルがビジーではない場合、ポート２０は、しばしば、負荷のバランスを取ろうと試み、新たに生成されたトランザクショントラフィックを利用率の低い仮想チャネルに割り当てる。結果として、ルーティング効率が改善される。さらに別の代替例において、トランザクショントラフィックは、緊急性、セキュリティ、または、それら両方の組み合わせに基づいて、特定の仮想チャネルに割り当てられてもよい。特定の仮想チャネルが、他の仮想チャネルよりも高い優先度および／またはセキュリティを与えられた場合、高い優先度および／または安全なトラフィックが、より高い優先度の仮想チャネルに割り当てられる。さらに別の実施形態において、ポート２０は、ハードコードされてもよく、これは、ポート２０が、１つだけの仮想チャネルを有し、ポート２０によって生成されたすべてのトラフィックが、その１つの仮想チャネルを介して伝送されることを意味する。
Within each
さらに別の実施形態において、仮想チャネルの割り当ては、送信元ＩＰエージェント１４によって、単独で、または、それに対応するポート２０と連携して、実施されてもよい。例えば、送信元ＩＰエージェント１４が、対応するポート２０への制御信号を生成して、所与のトランザクションのパケットが特定の仮想チャネルに割り当てられることを要求することができる。ＩＰエージェント１４も、上述のように、無作為である、ハードコードされる、または、すべての仮想チャネルにわたってバランスの取れた利用、セキュリティ、緊急性などに基づいた割り当て決定をなすことができる。
In yet another embodiment, virtual channel assignment may be performed by
アービトレーション勝者の選択において、アービトレーション要素２６は、サイクルごとに複数のアービトレーション工程を実行する。これらのアービトレーション工程は、以下を含む。
（１）ポートを選択する工程、
（２）仮想チャネルを選択する工程、および
（３）トランザクションクラスを選択する工程。
In selecting an arbitration winner,
(1) The process of selecting a port,
(2) selecting a virtual channel; and (3) selecting a transaction class.
上述の順序（１）、（２）、および、（３）は、固定ではない。逆に、上述の３つの工程は、任意の順序で完了されてよい。どの順序が用いられるかに関わらず、単一のアービトレーション勝者が各サイクルで選択される。次いで、勝利トランザクションは、相互接続１２に関連付けられている対応する仮想チャネルを介して伝送される。
The above orders (1), (2), and (3) are not fixed. Conversely, the three steps described above may be completed in any order. Regardless of which order is used, a single arbitration winner is selected each cycle. The winning transaction is then transmitted via the corresponding virtual channel associated with
アービトレーション要素２６によって実行される各アービトレーション（１）、（２）、および、（３）のために、複数のアービトレーションスキームまたはルールセットが用いられてよい。かかるアービトレーションスキームは、厳密または絶対優先度、４つの仮想チャネルの各々が特定の割合のトランザクショントラフックを割り当てられる重み付き優先度、もしくは、トランザクションが所定の順序で仮想チャネルに割り当てられるラウンドロビンスキーム、を含みうる。さらなる実施形態において、その他の優先度スキームが用いられてもよい。また、アービトレーション要素２６は、異なるアービトレーションスキームの間で時々動的に切り替えを行ってもよい、および／または、（１）、（２）、および、（３）アービトレーションの各々に対して同じまたは異なるアービトレーションスキームをそれぞれ用いてもよいことを理解されたい。
Multiple arbitration schemes or rulesets may be used for each arbitration (1), (2), and (3) performed by
任意選択的な実施形態において、所与のアービトレーションサイクル中に考慮された未処理のトランザクションによって定義された宛先ポート２０の利用可能性が考慮される。宛先ポート２０に内のバッファが、所与のトランザクションを処理するために利用可能なリソースを持たない場合、対応する仮想チャネルは利用可能ではない。結果として、当該トランザクションは、アービトレーションで競合せず、むしろ、目標リソースが利用可能になる後続のアービトレーションサイクルまで待機する。一方、目標リソースが利用可能である場合、対応するトランザクションは、アービトレートされ、相互接続１２へのアクセスのために競合する。
In an optional embodiment, the availability of
宛先ポート２０の利用可能性は、上述した複数のアービトレーション工程（１）、（２）、および、（３）に関して、異なる時にチェックされてよい。例えば、利用可能性チェックは、アービトレーションサイクルの前に（すなわち、工程（１）、（２）、および、（３）のいずれかの完了の前に）実行できる。結果として、利用可能な宛先リソースを規定するトランザクションのみが、後続のアービトレーション中に考慮される。あるいは、アービトレーションチェックは、アービトレーション工程が実行される順序に関わらず、３つのアービトレーション工程（１）、（２）、および、（３）のいずれかの間に実行されてもよい。
The availability of the
アービトレーション処理中の早くまたは遅くに、宛先リソース利用可能性チェックを実行することには利点および不利点がある。早くチェックを実行することにより、トランザクションの競合の可能性のある部分は、それらの宛先が利用可能でない場合に競合から潜在的に排除されうる。しかしながら、利用可能性を早く知ることは、システムリソースへのかなりの量のオーバーヘッドを生み出しうる。結果として、状況に応じて、所与のアービトレーションサイクル中に利用可能性チェックをより遅く実行するのが、より実際的でありうる。 There are advantages and disadvantages to performing destination resource availability checks early or late during the arbitration process. By performing the check early, potentially conflicting portions of transactions can potentially be eliminated from conflict if their destination is not available. However, early knowledge of availability can create a significant amount of overhead to system resources. As a result, depending on the circumstances, it may be more practical to perform availability checks later during a given arbitration cycle.
トランザクションクラスの選択を含むアービトレーション工程に対して、複数のルールが、Ｎ、ＮＰ、および、Ｃトランザクションの競合部分の間でアービトレートするために規定される。これらのルールは、以下を含む。
Ｐｏｓｔｅｄ（Ｐ）トランザクションに対して、
－Ｐｏｓｔｅｄトランザクション部分は、別のＰｏｓｔｅｄトランザクション部分を追い越しえない。
－Ｐｏｓｔｅｄトランザクション部分は、デッドロックを避けるためにＮｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越すことができなければならない。
－Ｐｏｓｔｅｄトランザクション部分は、両方が強順序（ｓｔｒｏｎｇ ｏｒｄｅｒ）モードにある場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことができなければならない。換言すると、強モードでは、トランザクションは、ルールに従って厳密に実行される必要があり、ルールは緩めることができない。
－Ｐｏｓｔｅｄ要求は、任意のトランザクション部分がそれの緩和順序（Ｒｅｌａｘｅｄ Ｏｒｄｅｒ：ＲＯ）ビットセットを有する場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことを許されるが、追い越しは必須ではない。緩和順序では、一般にルールが守られるが、例外が認められうる。
Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）トランザクションに対して、
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、Ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、別のＮｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、両方が強順序モードにある場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越してはならない。
－Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分は、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｃｏｍｐｌｅｔｉｏｎを追い越すことを許されるが、必須でない。
Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションに対して、
－Ｃｏｍｐｌｅｔｉｏｎは、両方が強順序モードにある場合には、Ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｃｏｍｐｌｅｔｉｏｎは、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｐｏｓｔｅｄトランザクション部分を追い越すことを許可されるが、必須ではない。
－Ｃｏｍｐｌｅｔｉｏｎは、両方が強順序モードにある場合には、Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越してはならない。
－Ｃｏｍｐｌｅｔｉｏｎは、任意のトランザクション部分がそれのＲＯビットセットを有する場合には、Ｎｏｎ－ｐｏｓｔｅｄトランザクション部分を追い越すことを許可されるが、必須ではない。
－Ｃｏｍｐｌｅｔｉｏｎは、別のＣｏｍｐｌｅｔｉｏｎを追い越すことを許可されない。
For the arbitration process, which involves the selection of a transaction class, several rules are defined for arbitrating between the competing portions of N, NP, and C transactions. These rules include the following:
For a Posted (P) transaction,
- A Posted transaction part cannot overtake another Posted transaction part.
- Posted transaction parts must be able to overtake Non-posted transaction parts to avoid deadlocks.
- A Posted transaction part must be able to overtake a Completion if both are in strong order mode. In other words, in strong mode, transactions must be executed strictly according to the rules, and the rules cannot be relaxed.
- A Posted request is allowed, but not required, to overtake a Completion if any transaction part has its Relaxed Order (RO) bit set. Relaxed Order generally follows the rules, but exceptions can be made.
For Non-posted (NP) transactions,
- Non-posted transaction parts must not overtake posted transaction parts.
- A non-posted transaction part must not overtake another non-posted transaction part.
- A Non-posted transaction part must not pass a Completion if both are in strongly ordered mode.
- Non-posted transaction parts are allowed to pass a Completion if any transaction part has its RO bit set, but are not required to.
For a Completion (C) transaction,
- A Completion must not overtake a Posted transaction portion if both are in strongly ordered mode.
- Completion is permitted, but not required, to overtake a Posted transaction part if any transaction part has its RO bit set.
- Completion must not overtake a Non-posted transaction part if both are in strongly ordered mode.
- Completions are permitted, but not required, to overtake Non-posted transaction parts if any transaction part has its RO bit set.
- A Completion is not allowed to overtake another Completion.
以下の表４は、ＰＣＩ順序付けルールの概要を提供する。（ａ）および（ｂ）の選択肢のないボックスでは、厳密順序付けルールが従われる必要はない。（ａ）および（ｂ）の選択肢を有する表のボックスでは、ＲＯビットがリセットされるか設定されるかに依存して、それぞれ、厳密順序（ａ）ルールまたは緩和順序（ｂ）ルールのいずれかが適用されてよい。様々な代替実施形態において、ＲＯビットは、グローバルに、または、パケットレベルで個々に、設定または再設定されうる。
アービトレーション要素２６は、特定の順序なしに、それぞれ、競合ポート２０、仮想チャネル、および、トランザクションクラスのアービトレーションを実行することによって、最終的な勝利トランザクション部分を選択する。サイクルあたりの勝利部分は、共有相互接続１２にアクセスし、対応する仮想チャネルを介して伝送される。
The
図３Ｂを参照すると、デバイス順位付けでアービトレーション要素２６によって実行されるアービトレーションロジックを示す論理図が示されている。アービトレーション処理、および、おそらくは利用可能な宛先リソースの考慮は、２つの違いを除けは、上述したのと基本的に同じである。
Referring now to FIG. 3B, a logic diagram is shown illustrating the arbitration logic performed by
第１に、デバイス順序付けでは、（ａ）すべての要求に対する応答が求められるＮｏｎ－ｐｏｓｔｅｄ読み出しまたは書き込みトランザクションと、（ｂ）要求された応答を規定したＣｏｍｐｌｅｔｉｏｎトランザクションとを含め、２つトランザクションクラスだけが定義される。トランザクションクラスが２つだけなので、各ポート２０において仮想チャネルごとに２つのバッファだけがある。例えば、４つの仮想チャネル（ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）がある場合、各ポート２０（例えば、Ｐｏｒｔ０、Ｐｏｒｔ１、および、Ｐｏｒｔ２）は、合計で８つのバッファを有する。
First, device ordering allows for only two classes of transactions, including (a) non-posted read or write transactions that require a response to every request, and (b) a Completion transaction that specifies the requested response. defined. Since there are only two transaction classes, there are only two buffers per virtual channel at each
第２に、デバイス順序付けのトランザクションを選択するためのルールも、ＰＣＩ順序付けとは異なる。デバイス順序付けでは、オーバークラスを超える１つのクラスの選択に適用される厳密なルールは存在しない。逆に、いずれかのトランザクションクラスが任意に選択されうる。しかしながら、一般的な方法では、典型的には、Ｃｏｍｐｌｅｔｉｏｎトランザクションが解決するまで利用可能になりえないリソースを解放するように、好都合なＣｏｍｐｌｅｔｉｏｎトランザクションに要求する。 Second, the rules for selecting transactions for device ordering are also different from PCI ordering. In device ordering, there are no strict rules that apply to the selection of one class over its overclass. Conversely, any transaction class may be selected arbitrarily. However, the general method typically requires a favorable Completion transaction to release resources that cannot be made available until the Completion transaction is resolved.
それ以外の点では、デバイス順序付けのためのアービトレーション処理は、基本的に上述したものと同じである。換言すると、各アービトレーションサイクルに対して、アービトレーション勝者を選択するために、アービトレーション工程（１）、（２）、および、（３）が、任意の特定の順で実行される。トランザクションクラスアービトレーションが実行される時、ＰＣＩ順序ルールよりはむしろデバイス順序が利用される。さらに、宛先リソースおよび／または仮想チャネルの利用可能性が、アービトレーション工程（１）、（２）、および、（３）のいずれかの前または間に考慮されてもよい。 Otherwise, the arbitration process for device ordering is essentially the same as described above. In other words, arbitration steps (1), (2), and (3) are performed in any particular order to select an arbitration winner for each arbitration cycle. When transaction class arbitration is performed, device ordering is utilized rather than PCI ordering rules. Additionally, destination resource and/or virtual channel availability may be considered before or during any of arbitration steps (1), (2), and (3).
動作フローチャート
先述したように、上述のアービトレーションスキームは、任意の共有リソースへのアクセスを共有するために利用されてよく、共有相互接続との利用だけに限定されない。かかる他の共有リソースは、ＡＲＬ２８、処理リソース、メモリリソース（ＬＵＴ３０など）、または、アクセスをめぐって競い合う複数のパーティの間で共有されるほぼ任意のその他のタイプのリソースを含みうる。
Operational Flowchart As previously discussed, the arbitration scheme described above may be utilized to share access to any shared resource and is not limited to use with shared interconnects. Such other shared resources may include
図４を参照すると、共有リソースへのアクセスをアービトレートするための動作工程を示すフローチャート４０が示されている。
Referring to FIG. 4, a
工程４２において、様々な送信元サブシステムエージェント１４が、トランザクションを生成する。トランザクションは、Ｐｏｓｔｅｄ（Ｐ）、Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）、および、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）を含む３つのクラスのいずれかでありうる。
At
工程４４において、送信元サブシステムエージェント１４によって生成されたトランザクションの各々は、パケット化される。先述したように、所与のトランザクションのパケット化は、１以上のパケットをもたらしうる。パケットは、サイズが様々であってよく、一部のパケットは大きいペイロードを持ち、他のパケットは小さいペイロードを持つかまたは全く持たない。トランザクションが、相互接続１２の幅よりも小さいデータペイロード３６を有する単一のパケットによって表される状況では、トランザクションは、単一の部分によって表されうる。トランザクションが、共有リソースのアクセス幅よりも大きいデータペイロード３６を備えた複数のパケットまたは単一のパケットによって表される状況では、複数の部分が、トランザクションを表すために必要とされる。
At
工程４６において、サブシステムエージェント１４の各々によって生成されたパケット化トランザクションの部分は、対応するポート２０を介してローカルスイッチ１６に投入される。ポート２０内で、各トランザクションのパケットは、仮想チャネルに割り当てられる。先述したように、割り当ては、無作為であるか、ハードコードされるか、または、すべての仮想チャネルにわたってバランスの取れた利用、セキュリティ、緊急性などに基づいてよい。
At
工程４８において、サブシステムエージェント１４の各々によって生成されたパケット化トランザクションの部分は、それぞれ、両方のトランザクションクラスによっておよびそれらに割り当てられた仮想チャネル（例えば、ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）によって、適切な先入れ先出しバッファに格納される。先に述べたように、仮想チャネルは、厳密または絶対優先度、ラウンドロビン、重み付き優先度、最長時間未サービス（ｌｅａｓｔ ｒｅｃｅｎｔｌｙ ｓｅｒｖｉｃｅｄ）など、多くの異なる優先度スキームの１つによって割り当てられてよい。所与のトランザクションが複数の部分を有する場合、各部分は、同じバッファ内に格納される。結果として、所与のトランザクションの複数の部分は、相互接続１２に関連付けられている同じ仮想チャネルで伝送される。トランザクション部分が投入されると、各バッファ内のコンテンツアイテム数を追跡するための対応するカウンタがデクリメントされる。特定のバッファが満たされた場合、そのカウンタはゼロにデクリメントされ、これは、バッファがさらなるコンテンツをもはや受け入れることができないことを意味する。
At
工程５０、５２、および、５４において、第１、第２、および、第３レベルアービトレーションが実行される。先述したように、ポート２０、仮想チャネル、および、トランザクションクラスの選択は、任意の順序で実行されてよい。
At
要素５６が、第１、第２、および、第３レベルのアービトレーションの実行に用いられるルールを維持するために用いられてよい。各ケースにおいて、要素５６は、アービトレーションレベルの各々を解決するのに必要に応じて用いられる。例えば、要素５６は、ＰＣＩおよび／またはデバイス順序付けルールを維持してよい。要素５６は、いくつかの優先度スキーム（厳密または絶対優先度、重み付き優先度、ラウンドロビンなど）を実行するためのルールと、所与のアービトレーションサイクルでどれを用いるかを決定するためのロジックまたはインテリジェンスと、を備えてもよい。
工程５８において、アービトレーションの勝者が決定される。工程６０において、勝利部分は、共有リソースにアクセスするために用いられるバッファ内に配置され、バッファに関連付けられているカウンタがデクリメントされる。
At
工程６２において、勝利部分に関連するバッファは、勝利部分がもはやバッファ内にはないのでインクリメントされる。
At
工程６４において、勝利部分は、共有リソースへアクセスする。アクセスが完了すると、共有リソースのためのバッファがインクリメントされる。
At
工程４２～６４は、それぞれ、連続するクロックサイクル中に連続的に繰り返される。異なる勝利部分として、各々が共有リソースへアクセスする。 Steps 42-64 are each repeated continuously during successive clock cycles. As different winning parts, each gets access to shared resources.
インターリービング－例１
トランザクションは、いくつかのモードの内の１つで相互接続１２を介して伝送されうる。
Interleaving - Example 1
Transactions may be transmitted over
「ヘッダインライン（ｈｅａｄｅｒ ｉｎ－ｌｉｎｅ）」モードと呼ばれる１つのモードでは、トランザクションのパケット３２のヘッダ３４は、常に、それぞれ、別個の部分またはビートでペイロード３６の前に最初に伝送される。ヘッダインラインモードは、相互接続１２のデータビット数Ｎに対するヘッダ３４および／またはペイロード３６の相対サイズに応じて、相互接続１２で利用可能なビットを浪費する場合としない場合がある。例えば、５１２ビット幅（Ｎ＝５１２）である相互接続１２と、１２８ビットのヘッダおよび２５６ビットのペイロードを有するパケットと、を考える。このシナリオでは、１２８ビットのヘッダが第１部分またはビートで伝送され、相互接続１２の残りの３８４ビットの帯域幅は利用されない。第２部分またはビートでは、２５６ビットのペイロード３６が伝送され、相互接続１２の残りの２５６ビットは利用されない。この例では、相互接続の帯域幅のかなりの割合が、２つのビート中に利用されない。一方、トランザクションのパケットのほとんどが相互接続以上のサイズである場合、浪費される帯域幅の程度は、削減されるかあるいは解消される。例えば、３８４または５１２ビットであるヘッダおよび／またはペイロードでは、浪費の量は、大幅に削減されるか（例えば、３８４ビット）または全く解消される（例えば、５１２ビット）。
In one mode, called "header in-line" mode, the
「ヘッダオンサイドバンド（ｈｅａｄｅｒ ｏｎ ｓｉｄｅ－ｂａｎｄ）」と呼ばれる別のモードでは、パケットのヘッダ３４は、データの「サイドで」伝送され、これは、ペイロード３６が相互接続１２のＮデータビットで伝送される間に、制御ビットＭを利用することを意味する。ヘッダオンサイドバンドモードでは、パケット３２のペイロード３６のビット数またはサイズは、所与の相互接続１２でパケットを伝送するのに必要なビート数を決定する。例えば、６４、１２８、２５６、または、５１２ビットのペイロード３６を有するパケット３２、ならびに、１２８データビット（Ｎ＝１２８）を有する相互接続１２の場合、パケットは、それぞれ、１、１、２、および、４ビートを必要とする。ビートの各々の伝送では、ヘッダ情報は、相互接続１２のＮデータビットでペイロードのデータと共にまたはその「サイドで」制御ビットＭで伝送される。
In another mode, called "header on side-band," the
さらに別のモードにおいて、パケット３２のヘッダ３４は、ペイロードと同じように伝送されるが、ヘッダ３４およびペイロード３６が別個の部分またはビートで伝送されなければならない要件はない。パケット３２が、１２８ビットのヘッダ３４および１２８ビットのペイロード３６を有する場合、合計サイズは、２５６ビット（１２８＋１２８）である。相互接続１２のＮデータビットが、６４、１２８、２５６、および、５１２ビット幅である場合、２５６ビットのパケットは、それぞれ、４、２、１、および、１ビートで伝送される。別の例において、パケット３２は、１２８ビットのヘッダおよび２５６ビットのペイロード３６、すなわち、３８４ビット（１２８＋２５６）の合計パケットサイズを有する。６４、１２８、２５６、または、５１２幅のＮデータビットの同じ相互接続１２では、パケットは、それぞれ、６、３、２，または、１ビートで伝送される。このモードは、常に、上述のヘッダインラインモードと少なくとも同等以上の効率である。
In yet another mode, the
図５を参照すると、複数の仮想チャネル上での異なるトランザクションの部分のインターリービングの第１例が図示されている。この例では、簡単のために、２つのトランザクションのみが示されている。２つのトランザクションは、この例では、１２８データビット幅（Ｎ＝１２８）である共有相互接続１２へのアクセスをめぐって競合している。２つのトランザクションの詳細は、以下を含む。
（１）トランザクション１（Ｔ１）：時刻Ｔ１に生成され、仮想チャネルＶＣ２に割り当てられている。Ｔ１のサイズは、４ビートであり、それらのビートは、Ｔ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄとして指定されている。
（２）トランザクション２（Ｔ２）：時刻Ｔ２（時刻Ｔ１の後）に生成され、仮想チャネルＶＣ０に割り当てられている。Ｔ２のサイズは、単一の部分またはビートである。
Referring to FIG. 5, a first example of interleaving portions of different transactions over multiple virtual channels is illustrated. In this example, only two transactions are shown for simplicity. Two transactions are competing for access to shared
(1) Transaction 1 (T1): Generated at time T1 and assigned to virtual channel VC2. The size of T1 is 4 beats, and the beats are designated as T1A, T1B, T1C, and T1D.
(2) Transaction 2 (T2): Generated at time T2 (after time T1) and assigned to virtual channel VC0. The size of T2 is a single portion or beat.
この例では、ＶＣＯに絶対または厳密優先度が割り当てられている。複数のサイクルにわたって、２つのトランザクションＴ１およびＴ２の部分が、以下に従って、図５に示すように、共有相互接続で伝送される。
サイクル１：Ｔ１のビートＴ１Ａは、唯一の利用可能なトランザクションであるので、ＶＣ２で伝送される。
サイクル２：Ｔ１のビートＴ１ＢおよびＴ２の単一部分は、相互接続１２へのアクセスをめぐって競合する。ＶＣＯは厳密優先度を有するので、Ｔ２が自動的に勝利する。したがって、Ｔ２のビートは、ＶＣ０で伝送される。
サイクル３：競合するトランザクションがないので、Ｔ１のビートＴ１ＢがＶＣ２で伝送される。
サイクル４：競合するトランザクションがないので、Ｔ１のビートＴ１ＣがＶＣ２で伝送される。
サイクル５：競合するトランザクションがないので、Ｔ１のビートＴ１ＤがＶＣ２で伝送される。
In this example, the VCO is assigned an absolute or strict priority. Over a number of cycles, parts of two transactions T1 and T2 are transmitted on the shared interconnect, as shown in FIG. 5, according to the following.
Cycle 1: Beat T1A of T1 is transmitted on VC2 because it is the only available transaction.
Cycle 2: Beat T1B and a single portion of T2 compete for access to
Cycle 3: Beat T1B of T1 is transmitted on VC2 since there are no conflicting transactions.
Cycle 4: Beat T1C of T1 is transmitted on VC2 since there are no conflicting transactions.
Cycle 5: Since there are no conflicting transactions, beat T1D of T1 is transmitted on VC2.
この例は、以下を示す。（１）絶対優先度を有する仮想チャネルでは、他のトラフィックが先に待っていたか否かに関わらず、トラフィックが利用可能になればいつでも、共有相互接続１２へのアクセス権が即座に与えられること、ならびに、（２）異なるトランザクションの勝利部分またはビートは、相互接続１２に関連付けられている異なる仮想チャネルでインターリーブされて伝送されること。この例において、仮想チャネルＶＣＯは、絶対優先度を与えられている。絶対または厳密優先度スキームでは、仮想チャネルのいずれかが、最高優先度を割り当てられてよいことを理解されたい。
This example shows: (1) In a virtual channel with absolute priority, traffic is immediately granted access to the shared
インターリービング－例２
図６を参照すると、複数の仮想チャネル上での異なるトランザクションの部分のインターリービングの第２例が図示されている。
Interleaving - Example 2
Referring to FIG. 6, a second example of interleaving portions of different transactions over multiple virtual channels is illustrated.
この例において、相互接続１２へのアクセスのための優先度スキームは重み付けされており、これは、ＶＣＯが（４０％）の確率でアクセス権を与えられ、ＶＣ１～ＶＣ３が各々（２０％）の確率でアクセス権を与えられることを意味する。また、相互接続は、１２８ビット幅である。 In this example, the priority scheme for access to interconnect 12 is weighted, meaning that VCO is given access with a probability of (40%) and VC1-VC3 are each given access with a probability of (20%). Also, the interconnect is 128 bits wide.
さらに、この例においては、４つの競合するトランザクションＴ１、Ｔ２、Ｔ３、および、Ｔ４が存在する。
－Ｔ１は、ＶＣ０に割り当てられ、４つの部分またはビートＴ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄを含む。
－Ｔ２は、ＶＣ１に割り当てられ、２つの部分またはビートＴ２ＡおよびＴ２Ｂを含む。
－Ｔ３は、ＶＣ２に割り当てられ、２つの部分またはビートＴ３ＡおよびＴ３Ｂを含む。
－Ｔ４は、ＶＣ３に割り当てられ、２つの部分またはビートＴ４ＡおよびＴ４Ｂを含む。
Furthermore, in this example, there are four conflicting transactions T1, T2, T3, and T4.
-T1 is assigned to VC0 and includes four parts or beats T1A, T1B, T1C and T1D.
-T2 is assigned to VC1 and includes two parts or beats T2A and T2B.
-T3 is assigned to VC2 and includes two parts or beats T3A and T3B.
-T4 is assigned to VC3 and includes two parts or beats T4A and T4B.
この例では、優先度スキームは重み付けされる。結果として、各仮想チャネルは、その重みの比率に従って勝利する。換言すると、１０サイクルの間に、ＶＣ０は、４回勝利し、ＶＣ１、ＶＣ２、および、ＶＣ３は各々、２回勝利する。例えば、図６に示すように、
－Ｔ１の４つの部分またはビートＴ１Ａ、Ｔ１Ｂ、Ｔ１Ｃ、および、Ｔ１Ｄは、１０サイクルのうちの４サイクル（４０％）（すなわち、サイクル１、４、７、および、１０）でＶＣＯを介して伝送され、
－Ｔ２の２つの部分またはビートＴ２ＡおよびＴ２Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル２およびサイクル６）でＶＣ１を介して伝送され、
－Ｔ３の２つの部分またはビートＴ３ＡおよびＴ３Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル５およびサイクル９）でＶＣ２を介して伝送され、
－Ｔ４の２つの部分またはビートＴ４ＡおよびＴ４Ｂは、１０サイクルのうちの２サイクル（２０％）（すなわち、サイクル３およびサイクル８）でＶＣ３を介して伝送される。
In this example, the priority scheme is weighted. As a result, each virtual channel wins according to its weight ratio. In other words, during 10 cycles, VC0 wins 4 times and VC1, VC2, and VC3 each
- The four parts of T1 or beats T1A, T1B, T1C and T1D are transmitted through the VCO in 4 out of 10 cycles (40%) (i.e. cycles 1, 4, 7 and 10) is,
- two parts of T2 or beats T2A and T2B are transmitted over VC1 in 2 out of 10 cycles (20%) (i.e.
- two parts of T3 or beats T3A and T3B are transmitted over VC2 in 2 out of 10 cycles (20%) (i.e.
- The two parts of T4 or beats T4A and T4B are transmitted over VC3 in 2 out of 10 cycles (20%) (ie,
したがって、この例は、以下を示す。（１）各仮想チャネルが所定の比率に基づいて相互接続１２へのアクセス権を与えられる重み付き優先度スキーム、ならびに、（２）異なるトランザクションの勝利部分が相互接続１２に関連付けられている異なる仮想チャネルでインターリーブされて伝送される別の例。
Thus, this example illustrates: (1) a weighted priority scheme in which each virtual channel is given access to
この重み付けの例では、重み付け比率に従って様々な仮想チャネルにトランザクションの部分を割り当てられるのに十分なトラフィックがあることを理解されたい。その一方でトラフィックの量が不十分である場合、重み付け比率は、厳密に実施できる場合も厳密に実施できない場合もある。例えば、仮想チャネルＶＣ３に大きいトラフィックがあり、その他の仮想チャネルＶＣ０、ＶＣ１、および、ＶＣ２ではトラフィックが限られているか全くない場合、ＶＣ３は、重み付け比率が厳密に実施されれば、トラフィックの全部または大部分を運ぶことになる。しかしながら、結果として、すべてのクロックサイクルまたはビートでトランザクションの部分を送信できるわけではないので、相互接続１２は、十分に利用されえない。一方、重み付け比率が厳密に実施されない場合、相互接続の利用率をあげるために、トランザクショントラフィックを再割り当てすることが可能である（例えば、トラフィックが、より多い数のサイクルまたはビートで送信される）。
It should be appreciated that in this weighting example, there is enough traffic to allow portions of transactions to be assigned to the various virtual channels according to the weighting ratios. On the other hand, if the amount of traffic is insufficient, the weighting ratios may or may not be strictly enforced. For example, if there is a large amount of traffic on virtual channel VC3 and limited or no traffic on the other virtual channels VC0, VC1, and VC2, then VC3 will carry all or most of the traffic if the weighting ratios are strictly enforced. However, as a result, the
上記の２つの例は、上述した伝送モードのどれが利用されるかに関わらず適用可能である。トランザクションが部分またはビートに分割されると、それらは、本明細書で規定したアービトレーションスキームのいずれかを用いて共有相互接続１２でインターリーブされて伝送されうる。
The above two examples are applicable regardless of which of the transmission modes described above is utilized. Once transactions are divided into parts or beats, they may be interleaved and transmitted on the shared
上述したアービトレーションスキームは、ほんの数例である。その他の例では、低ジッタ、重み付け、厳密、ラウンドロビン、または、ほぼ任意のその他のアービトレーションスキームが用いられてもよい。したがって、本明細書に列挙または記載されたアービトレーションスキームは、例示であり、どのようにも限定と見なされるべきではない。 The arbitration schemes described above are just a few examples. In other examples, low jitter, weighted, strict, round robin, or nearly any other arbitration scheme may be used. Accordingly, the arbitration schemes listed or described herein are illustrative and should not be considered limiting in any way.
複数の同時アービトレーション
ここまで、簡単のために、単一のアービトレーションのみを記載していた。しかしながら、現実的な応用例（ＳｏＣ上など）では、複数のアービトレーションが同時に行われうることを理解されたい。
Multiple Simultaneous Arbitrations So far, only a single arbitration has been described for simplicity. However, it should be understood that in practical applications (such as on a SoC), multiple arbitrations may occur simultaneously.
図７を参照すると、スイッチ１６、１８の間において２方向でトラフィックを処理するための２つの共有相互接続１２および１２Ｚのブロック図が示されている。上述したように、スイッチ１６は、共有相互接続１２を介して送信元サブファンクション１４（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）から宛先サブファンクション１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）へトランザクショントラフィックを方向付ける。逆方向のトランザクショントラフィックを扱うために、スイッチ１８は、アービトレーション要素２６Ｚと、任意選択的にＡＲＬ２８Ｚと、を備える。動作中、要素２６ＺおよびＡＲＬ２８Ｚは、上述した動作と相補的に動作し、これは、送信元ＩＰエージェント１４（すなわち、ＩＰ４、ＩＰ５、および、ＩＰ６）によって生成されたトランザクショントラフィックがアービトレートされて、共有相互接続１２Ｚを介して宛先ＩＰエージェント（すなわち、ＩＰ１、ＩＰ２、および、ＩＰ３）へ送信されることを意味する。あるいは、アービトレーションは、ＡＲＬ２８Ｚなしに実行されてもよく、これは、アービトレーションが、単に競合ポート２０（例えば、Ｐｏｒｔ３、Ｐｏｒｔ３またはＰｏｒｔ５）の間で決定を行い、勝利ポートに関連するトランザクションの部分が、その部分の最終的な宛先に関わらず、相互接続１２で伝送されることを意味する。要素１２Ｚ、２６Ｚ、および、２８Ｚについては、すでに記載したので、簡単のために詳細な説明は、ここでは提供しない。
7, there is shown a block diagram of two shared
ＳｏＣには、複数レベルのサブファンクション１４および複数の共有相互接続１２が存在しうる。各々で、上述のアービトレーションスキームを用いて、様々なサブファンクションの間で相互接続１２を介して送信されるトランザクションの間のアービトレーションを同時に行うことができる。
There may be multiple levels of
相互接続ファブリック
図８を参照すると、ＳｏＣの例１００が示されている。ＳｏＣ１００は、複数のＩＰエージェント１４（ＩＰ１、ＩＰ２、ＩＰ３、．．．ＩＰＮ）を備える。各ＩＰエージェント１４は、いくつかのノード１０２の内の１つに接続されている。共有相互接続１２、１２Ｚは、逆方向であり、様々なノード１０２の間に提供されている。この構成では、トランザクションが、例えば、図７に関して上述したように、ノード１０２の各ペアの間で両方向に流れうる。
Interconnect Fabric Referring to FIG. 8, an
非排他的な実施形態において、各ノード１０２は、様々なスイッチ１６、１８と、ローカルＩＰエージェント１４に接続するためのアクセスポート２０と、共有相互接続１２、１２Ｚに接続するためのアクセスポート２２と、アービトレーション要素２６と、任意選択的なＡＲＬ２８と、任意選択的なＬＵＴ３０と、を備える。代替実施形態において、ノードは、アービトレーション要素２６および／またはＡＲＬ２８を備えなくてもよい。これらの要素を持たないノード１０２については、必要なルーティング情報のないトランザクションが、上述のようにデフォルトノードへ転送されうる。これらの要素の各々については、図１に関して上述したので、簡単のために詳細な説明は、ここでは提供しない。
In a non-exclusive embodiment, each
集合的に、様々なノード１０２および双方向相互接続１２、１２Ｚは、ＳｏＣ１００のための相互接続ファブリック１０６を規定する。図に示した相互接続ファブリック１０６は、簡潔にするために比較的単純である。実際の実施形態においては、ＳｏＣ１００上の相互接続ファブリックは、数百または数千ものＩＰエージェント１４、複数レベルのノード１０２を備え、それらすべてが多数の相互接続１２、１２Ｚによって相互接続され、非常に複雑でありうることを理解されたい。
Collectively, the
ブロードキャスト、マルチキャスト、および、エニーキャスト
機械学習または人工知能など、いくつかの応用例では、１つのＩＰエージェント１４によって生成されたトランザクションが、ＳｏＣ１００上の複数のＩＰエージェント１４に広く発信されるのが普通である。複数のＩＰエージェント１４へ広く発信されるトランザクションは、ブロードキャスト、マルチキャスト、または、エニーキャストによって実施されうる。所与のＳｏＣ１００上で、ブロードキャスト、マルチキャスト、および／または、エニーキャストが各々、独自に実施されてもよいし、一緒に実施されてもよい。これらのタイプのトランザクションの各々の簡単な定義を以下に提供する。
・ブロードキャストは、ＳｏＣ１００上のすべてのＩＰエージェントに送信されるトランザクションである。例えば、図８に示したＳｏＣ１００において、ＩＰ１によってブロードキャストが送信された結果として、ＩＰ２～ＩＰＮが各々、トランザクションを受信することになる。
・マルチキャストは、ＳｏＣ上のＩＰエージェントの内の２以上（潜在的には全部を含む）へ送信されるトランザクションである。例えば、ＩＰ１がＩＰ５、ＩＰ７、および、ＩＰ９を指定するマルチキャストトランザクションを生成した場合、これらのエージェント１４はトランザクションを受信するが、ＳｏＣ１００上の残りのＩＰエージェント１４は受信しない。マルチキャストがＩＰエージェント１４すべてに送信された場合、基本的にはブロードキャストと同じである。
・読み出し応答マルチキャストは、上述したマルチキャストトランザクションの変形例である。読み出し応答マルチキャストでは、単一のＩＰエージェント１４が、メモリロケーションのコンテンツを読み出してよい。開始ＩＰエージェント１４だけがコンテンツを受信するのではなく、多数の宛先ＩＰエージェント１４がコンテンツを受信する。読み出し結果を受信するＩＰエージェント１４は、２以上のＩＰエージェント１４からＳｏＣ１００上のすべてのＩＰエージェント１４までの範囲であってよい。
・エニーキャストは、ＩＰエージェント１４によって生成されるトランザクションである。しかしながら、送信側ＩＰエージェント１４は、目標ＩＰエージェント１４を全く指定しない。その代わり、相互接続ファブリック１０６（すなわち、ノード１０２の内の１以上）が、受信側ＩＰエージェント１４を決定する。例えば、ＩＰ１がエニーキャストトランザクションを生成した場合、ノード１０２の内の１以上のノードが、他のエージェントＩＰ２～ＩＰＮのどれがトランザクションを受信するかを決定する。エニーキャストトランザクションの様々な実施例において、ＳｏＣ上のＩＰエージェント１４の内の１つ、複数、または、全部が、エニーキャストトランザクションを受信してよい。
In some applications, such as broadcast, multicast, and anycast machine learning or artificial intelligence, transactions generated by one
- A broadcast is a transaction sent to all IP agents on the
- Multicast is a transaction sent to two or more (potentially all) of the IP agents on the SoC. For example, if IP1 generates a multicast transaction specifying IP5, IP7, and IP9, these
- Read response multicast is a modification of the multicast transaction described above. With read response multicast, a
- Anycast is a transaction generated by
所与のトランザクションが、いくつかの方法で、ブロードキャスト、読み出し応答マルチキャストを含むマルチキャスト、または、エニーキャストとして開始されうる。簡単のために、以下では、これらのトランザクションを集合的に「ＢＭＡ」トランザクションと呼ぶこととし、これは、ブロードキャスト、マルチキャスト（読み出し応答マルチキャストを含む）、または、エニーキャストトランザクションを意味する。 A given transaction may be initiated in several ways: as a broadcast, a multicast (including a read response multicast), or an anycast. For simplicity, hereafter, these transactions are collectively referred to as "BMA" transactions, which means broadcast, multicast (including a read response multicast), or anycast transactions.
一実施形態において、ＩＰエージェント１４は、トランザクションを表すパケット３２のヘッダ３４のコマンドフィールドＣＭＤに挿入されたコード化されたコマンドを用いて、ＢＭＡトランザクションを開始してよい。コード化されたコマンドにより、ＳｏＣ１００の相互接続ファブリック１０６は、トランザクションが、１つの送信元および１つの宛先ＩＰエージェント１４を指定する通常のトランザクションではなく、ＢＭＡトランザクションであることを認識または理解する。例えば、ビットの独自の組み合せが、それぞれ、ブロードキャスト、マルチキャスト、読み出し応答マルチキャスト、または、エニーキャストのいずれかとして、所与のトランザクションを規定しうる。
In one embodiment, an
別の実施形態において、ＢＭＡトランザクションは、トランザクションを表すパケット３２のヘッダ３４のＡＤＤＲフィールドに規定されたＢＭＡアドレスを有する読み出しまたは書き込みしトランザクションを発行することによって実施されうる。ＢＭＡアドレスは、ブロードキャスト、マルチキャスト、または、エニーキャストトランザクションの内の１つを示すものとして、ＳｏＣ１００のシステム内で指定される。結果として、ＢＭＡアドレスは、相互接続ファブリック１０６によって認識され、トランザクションは、ブロードキャスト、マルチキャスト、または、エニーキャストとして扱われる。
In another embodiment, a BMA transaction may be implemented by issuing a read or write transaction with the BMA address specified in the ADDR field of the
さらに別の実施形態において、コマンドおよびＢＭＡアドレスは両方とも、ブロードキャスト、マルチキャスト、または、エニーキャストトランザクションを指定するために利用できる。 In yet another embodiment, both the command and the BMA address can be used to specify a broadcast, multicast, or anycast transaction.
エニーキャストは、典型的には、送信元ＩＰエージェント１４が複数の宛先にトランザクションを送信したいが、１以上の好ましいまたは理想的な宛先ＩＰエージェント１４を選択するのに役立つ要素に気づかない状況で用いられる。例えば、送信元ＩＰエージェント１４は、各々がアクセラレータ機能を実装する複数のＩＰエージェントにトランザクションを送信しようとしうる。そのトランザクションをエニーキャストとして指定することにより、ノード１０２の内の１以上が、宛先ＩＰエージェント１４の選択に関与する。様々な実施形態において、選択基準は、幅広く変化してよく、混雑状態（ビジーであるＩＰエージェント対アイドル状態すなわちビジーではないＩＰエージェント）、ランダム選択関数、ハードワイヤロジック関数、ハッシュ関数、最長時間未使用の関数、電力消費の考慮、もしくは、任意のその他の決定関数または基準に基づいてよい。したがって、宛先ＩＰエージェント１４を選択する責任は、ノード１０２にシフトされ、ノード１０２は、送信元エージェント１４よりも良好なルーティング決定を行うために、より多くの情報を有しうる。
Anycast is typically used in situations where a
図９Ａを参照すると、ＢＭＡアドレッシングをサポートするためのノード１０２のロジックを示す図９０が示されている。ロジック９０は、ＬＵＴ３０と、相互接続ファブリックＩＤ（ＩＦＩＤ）テーブル１２４と、任意選択的な物理リンクセレクタ１２６と、を備える。任意選択的な物理リンクセレクタ１２６は、後に詳述する単一の論理識別子を共有する２つ（以上）の重複物理リソースがある場合（トランキング状況など）に用いられる。
Referring to FIG. 9A, a diagram 90 is shown illustrating logic of
ＩＦＩＤテーブルは、各ＩＰエージェント１４について、（ａ）ＳｏＣ１００内の各ＩＰエージェント１４を論理的に識別するための対応する論理ＩＰ ＩＤと、（ｂ）対応するＩＰエージェント１４がノード１０２にローカルである場合のポート２０もしくは（ｃ）対応するＩＰエージェント１４への配信パスに沿って次のノード１０２につながる適切な相互接続１２または１２Ｚへのアクセスポート２２のいずれかと、を含む。この構成では、各ノードは、ＳｏＣ１００内の各ＩＰエージェント１４へトランザクションを配信するのに必要な物理ポート２０および／または２２のアイデンティティにアクセスできる。
The IFID table includes, for each
ファブリック１０６内の各ノード１０２のためのＩＦＩＤテーブル１２４は、相対的（すなわち、一意的）である。換言すると、各ＩＦＩＤテーブル１２４は、（１）そのローカルＩＰエージェント１４または（２）ノード１２０へローカルに接続されていないＳｏＣ内の他のＩＰエージェント１４への配信パスに沿った他のノード１０２への共有相互接続１２、１２Ｚ、のいずれかへトランザクションを配信するために必要なポート２０および／または２２のリストだけを含む。この構成では、各ノード１０２は、（１）宛先として指定されたそのローカルＩＰエージェント１４へトランザクションを配信するか、または、（２）別のノード１０２へ相互接続１２、１２Ｚを介してトランザクションを転送するか、のいずれかである。次のノードで、上述の処理が繰り返される。各ノード１０２でトランザクションをローカルに配信するかまたは転送することにより、最終的に、所与のトランザクションが、ＳｏＣ１００のための相互接続ファブリック１０６内の指定された宛先ＩＰエージェント１４すべてに配信される。
IFID table 124 for each
ＬＵＴ３０は、従来のトランザクション（すなわち、単一の宛先ＩＰエージェント１４に送信されるトランザクション）のルーティングに用いられる第１部分１２０である。従来のトランザクションが生成されると、送信元ＩＰエージェント１４は、トランザクションを表すパケットヘッダのＡＤＤＲフィールド内にシステムメモリ２４内の宛先アドレスを規定する。次いで、トランザクションは、ルーティングのためにローカルノード１０２へ提供される。それに応じて、ＡＲＬ２８は、ＬＵＴ３０の第１部分１２０にアクセスして、宛先アドレスに対応する論理ＩＰ ＩＤを見つける。次いで、ＩＦＩＤテーブル１２４は、（ａ）宛先ＩＰエージェント１４がノード１０２にローカルである場合のポート２０もしくは（ｂ）宛先ＩＰエージェント１４への配信パスに沿って次のノード１０２につながる適切な相互接続１２または１２Ｚへのアクセスポート２２、のいずれかを規定するために、アクセスされる。ＩＰ ＩＤは、適切なポート２０または２２に沿って送信される前に、パケット３２のヘッダ３４のＤＳＴフィールドに配置される。
ブロードキャスト、マルチキャスト、または、エニーキャストトランザクションについて、ＬＵＴ３０の第２部分１２２は、複数のＢＭＡアドレス（例えば、ＢＭＡ １～ＢＭＡ Ｎ、ここで、Ｎは、必要に応じてまたは適切に選択されうる任意の数）と、各ＢＭＡアドレスに対応する情報と、を含む。様々な実施形態において、対応する情報は、以下でありうる。
（１）１以上の固有ＩＰ ＩＤ（例えば、ＢＭＡアドレス１に対してＩＰ４およびＩＰ７、ＢＭＡアドレス２に対してＩＰ５、ＩＰ１２、および、ＩＰ２４）。
（２）一意的なコード（例えば、ＢＭＡアドレス１０および１１に対してコード１およびコード２）。
（３）ビットベクトル（例えば、ＢＭＡアドレス２０および２１のためのビットベクトル）。
For broadcast, multicast, or anycast transactions, the
(1) One or more unique IP IDs (eg, IP4 and IP7 for
(2) Unique codes (eg,
(3) Bit vector (eg, bit vector for BMA addresses 20 and 21).
各コードは、宛先ＩＰエージェントの異なるセットを一意的に識別する。例えば、第１コードは、宛先ＩＰエージェントの第１セット（例えば、ＩＰ１、ＩＰ１３、および、ＩＰ２１）を指定するために利用でき、第２コードは、宛先エージェントの別のセット（例えば、ＩＰ４、ＩＰ９、および、ＩＰ１７）を指定するために利用できる。 Each code uniquely identifies a different set of destination IP agents. For example, a first code can be utilized to specify a first set of destination IP agents (e.g., IP1, IP13, and IP21), and a second code can be used to specify another set of destination IP agents (e.g., IP4, IP9 , and IP17).
ビットベクトルでは、各ビット位置が、ＳｏＣ１００上のＩＰエージェント１４に対応する。所与のビット位置が設定されたか再設定されたかに応じて、対応するＩＰエージェント１４は、それぞれ、宛先であるとしてまたは宛先ではないとして指定される。例として、（１０１０１１．．．１）のビットベクトルは、対応するＩＰエージェント１４（ＩＰ１、ＩＰ３、ＩＰ５、ＩＰ６、および、ＩＰＮ）が設定され、残りが再設定されることを示す。
In the bit vector, each bit position corresponds to an
上述の実施形態の各々では、１以上の論理ＩＰ ＩＤが、所与のトランザクションの宛先ＩＰエージェントとして識別される。ＩＦＩＤテーブル１２４は、論理識別子ＩＰ ＩＤ値を、トランザクションをそれらの宛先にルーティングするのに必要な物理アクセスポート２０および／または２２に変換するために用いられる。ＢＭＡアドレスの場合、正しい物理アクセスポート２０および／または２２が必要とされることを決定するために、一意的なコードまたはビットベクトルが、ＩＰ ＩＤ値の代わりに用いられてよい。
In each of the above embodiments, one or more logical IP IDs are identified as the destination IP agents for a given transaction. The IFID table 124 is used to translate the logical identifier IP ID values to the
コードおよびビットベクトルは両方とも、多数の宛先ＩＰエージェント１４を指定するために利用できる。ビットベクトルは、トランザクションを表すパケット３２のヘッダ３４の宛先フィールドＤＳＴの幅によっておそらくは制限されうる。例えば、宛先フィールドＤＳＴが、３２，６４、１２８、または、２５８ビット幅である場合、ＩＰエージェント１４の最大数は、それぞれ、３２、６４、１２８、および、２５６に制限される。所与のＳｏＣ上のＩＰエージェント１４の数が、宛先フィールドＤＳＴの幅によって特定されうる可能なＩＰエージェントの数をたまたま超えた場合、ヘッダ３４内のその他のフィールドが場合によっては用いられてよく、もしくは、ＤＳＴフィールドが拡張されてもよい。しかしながら、非常に複雑なＳｏＣ１００では、ＩＰエージェント１４の数は、ビットベクトル内で実際的に利用できる利用可能ビット数を超える場合がある。コードでは、任意の数の宛先ＩＰエージェントが指定されてよいので、この問題は回避される。
Both codes and bit vectors can be used to specify multiple
図９Ａに関して提供された例は、本質的に例示であり、どのようにも限定を意図しないことを理解されたい。実際の実施形態において、ＳｏＣ１００で利用できるＢＭＡアドレスの数は、１から多数まで幅広く変化してよい。
It is to be understood that the example provided with respect to FIG. 9A is illustrative in nature and is not intended to be limiting in any way. In actual embodiments, the number of BMA addresses available on
ソースベースルーティング（ＳＢＲ）
ソースベースルーティング（ＳＢＲ）は、以下の点で従来のルーティングとは異なる。
（１）送信元ＩＰエージェント１４は、トランザクションの発行時に、相互接続ファブリック１０６に与える何らかの知識または指示を有する。例えば、送信元ＩＰエージェント１４は、それがトランザクションを送信したい宛先ＩＰエージェント１４のＩＰ ＩＤを知っている。
（２）送信元ＩＰエージェント１４は、トランザクションのパケット３２のパケットヘッダ３４のＡＤＤＲフィールドに通常は提供されるシステムメモリ２４内のアドレスに関心がないおよび／またはそれを知らない。
（３）相互接続ファブリック１０６内のノード１０２は、パケットのヘッダ３４のＡＤＤＲフィールド内のアドレスを単一の宛先ＩＰエージェントのための単一のＩＰ ＩＤへ単に変換することとは異なる何かを実行することを知っている。
Source-Based Routing (SBR)
Source-based routing (SBR) differs from conventional routing in the following ways:
(1) The
(2)
(3)
ブロードキャストおよびマルチキャストは両方とも、おそらくＳＢＲトランザクションでありうるが必ずしもそうではないトランザクションの例である。送信元が、トランザクションのパケット３２のヘッダ３４内で（ａ）ブロードキャストおよび／またはマルチキャストコードおよび（ｂ）宛先ＩＰエージェント１４のいずれかを指定するブロードキャストまたはマルチキャストを発行する場合、トランザクションは、送信元ＩＰエージェントが宛先ＩＰエージェントを指定しているので、ソースベースであると見なされる。一方、送信元が、宛先の具体的な知識を全く持たずにＢＭＡアドレスを用いてブロードキャストまたはマルチキャストトランザクションを開始する場合、トランザクションは、非ソースベースであると見なされる。エニーキャストトランザクションは、宛先ＩＰエージェント１４を規定しないので、ソースベースとは見なされない。
Broadcasts and multicasts are both examples of transactions that could possibly, but are not necessarily, SBR transactions. If a source issues a broadcast or multicast that specifies either (a) a broadcast and/or multicast code and (b) a
ハッシング
ハッシングでは、ハッシュ関数が、宛先または宛先までのルートを規定するために用いられる。いくつかの実施例において、ハッシング関数が、複数の宛先および／または複数の宛先までの複数のルートを丁寧に規定してよい。
Hashing In hashing, a hash function is used to define a destination or a route to a destination. In some embodiments, the hashing function may carefully define multiple destinations and/or multiple routes to multiple destinations.
図９Ｂを参照すると、ルーティング決定を実施するためのハッシュ関数の利用を説明する図１４０が示されている。この実施形態において、ハッシュ値１４２が、トランザクションを表すパケット３２のヘッダ３４の任意の数のフィールド内に提供される。例えば、アドレスビット、コマンド、送信元エージェントＩＰ、または、ヘッダ３４に含まれる情報またはデータの任意の可能な組合せのサブセットが、ハッシュ値を規定するために用いられてよい。対応するローカルノード１０２内またはＳｏＣ１００上のどこかで、ハッシュ関数１４４が、ハッシュ値１４２に適用される。ハッシュ関数１４４に応答して、ルーティング決定がなされうる。例えば、宛先エージェント１４の１以上のＩＰ ＩＤが規定されてよい。異なるハッシュ値を提供することにより、異なるルーティング決定が規定されてよい。ハッシングは、ＳｏＣ内での多くの他の用途に用いられてもよいことを理解されたい。１つのかかる用途は、トランキングのためのハッシュ関数の利用である。トランキングでは、単一の論理識別子を共有する２つ（以上）の重複物理リソースが存在する。後に詳述するように、ハッシュ関数は、重複物理リソースの中から選択するために利用できる。
Referring to FIG. 9B, a diagram 140 is shown illustrating the use of hash functions to make routing decisions. In this embodiment, a
トランザクショントラフィックの最適化
機械学習、人工知能、データセンターなど、ＳｏＣのいくつかの応用例は、トランザクション集約的でありうる。これらのタイプの応用例は、ブロードキャスト、マルチキャスト、および、エニーキャストに依存する傾向にあり、それにより、トランザクショントラフィックをさらに増大させうる。
Optimizing Transaction Traffic Some applications of SoCs can be transaction intensive, such as machine learning, artificial intelligence, and data centers. These types of applications tend to rely on broadcast, multicast, and anycast, which can further increase transaction traffic.
ブロードキャストトランザクションは、相互接続ファブリック１０６を介して送信されるトラフィックの量を著しく増大させうる。
Broadcast transactions can significantly increase the amount of traffic sent over
ボトルネックの発生を低減するために、トランザクショントラフィックを削減する多くの手順が提案されている。かかる手順は、（１）ＳｏＣ１００の相互接続ファブリック１０６のノード１０２でトランザクションを拡大し、応答を統合すること、（２）それぞれ、ペアになった仮想チャネルトランザクションクラスの組み合せによって規定されるストリームで２以上のトランザクションをストリーム内でインターリービングすること、（３）ならびに、共通の論理リンクを共有するＩＰエージェントの間の２以上の物理リンクまたは共通の論理アドレスを共有する２以上の同一のＩＰエージェントを「トランキング」すること、を含む。
Many procedures have been proposed to reduce transaction traffic in order to reduce the occurrence of bottlenecks. Such steps include (1) expanding transactions and consolidating responses at
トランザクションの拡大および応答の統合
ブロードキャスティング、マルチキャスティング、読み出し応答マルチキャスティング、および、エニーキャスティングは各々、ＳｏＣ１００上のＩＰエージェント１４の間のトランザクショントラフィックの量を著しく増大させうる。
Transaction amplification and response integration Broadcasting, multicasting, read response multicasting, and anycasting can each significantly increase the amount of transaction traffic between
ＳｏＣ１００が２５のＩＰエージェントを有し、ＩＰエージェントの１つがブロードキャストトランザクションを生成する場合、最高２４までの個々のトランザクションが、典型的には、その他のＩＰエージェント１４へ相互接続ファブリックを介して送信される。Ｎｏｎ－ｐｏｓｔｅｄ（ＮＰ）トランザクションは、Ｃｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションの形態の応答を求める。２４のＩＰエージェントへブロードキャストされるトランザクションがＮｏｎ－ｐｏｓｔｅｄである場合、別の２４のＣｏｍｐｌｅｔｉｏｎ（Ｃ）トランザクションが同様に生成される。この簡単な例で示すように、ブロードキャストは、相互接続ファブリック１０６で伝送されるトラフィックの量を急速に増大させうる。
If the
マルチキャストおよびエニーキャストトランザクションも、トラフィックの量を急速に拡大しうる。これらのトランザクションタイプの各々では、複数の受信側が指定されてよく、これは、複数のトランザクションが送信され、おそらくは、複数の完了応答トランザクションが相互接続ファブリック１０６を介して受信されることを意味する。読み出し応答マルチキャストトランザクションでも、読み出されたコンテンツは、複数の宛先ＩＰエージェント１４に送信されうる。結果として、トランザクション量は、これらのタイプのトランザクションでも著しく増大しうる。
Multicast and anycast transactions can also rapidly scale up the amount of traffic. For each of these transaction types, multiple receivers may be specified, meaning that multiple transactions are sent and possibly multiple completed response transactions are received via
相互接続ファブリック１０６をより効果的に動作させるために、ノード１０２でのトランザクションを拡大して統合する技術を用いて、トラフィックの量を削減する。
To make
図１０Ａおよび図１０Ｂを参照すると、ＳｏＣの一例を説明する図が示されている。この例において、ＳｏＣは、５個の相互接続されたノード１０２Ａ～１０２Ｅおよび１０個のＩＰエージェント１４（ＩＰ１～ＩＰ１０）を備えた相互接続ファブリック１０６を備える。
Referring to FIGS. 10A and 10B, diagrams illustrating an example of a SoC are shown. In this example, the SoC comprises an
図１０Ａを参照すると、ＩＰ１は、Ｎｏｎ－ｐｏｓｔｅｄ書き込みトランザクションをその他のＩＰエージェントＩＰ２～ＩＰ１０へブロードキャストする。拡大を用いることにより、単一のトランザクションだけが、各共有相互接続１２で送信される。各ダウンストリームノード１０２Ｂ～１０２Ｅでは、ノードは、（１）トランザクションを任意のローカルＩＰエージェント１４へ提供し、（２）トランザクションを任意のアップストリームノード１０２へ転送する。したがって、この例では、
・ノード１０２Ｂは、トランザクションをＩＰ２に提供し、トランザクションの単一のインスタンス化をそれぞれノード１０２Ｃおよび１０２Ｄへ転送する。
・ノード１０２Ｃでは、トランザクションは、ローカルエージェントＩＰ３、ＩＰ４、および、ＩＰ５へ提供される。
・ノード１０２Ｄは、トランザクションをＩＰ７へ提供する。さらに、ノード１０２Ｄも、トランザクションの単一のインスタンス化をノード１０２Ｅへ転送する。
・ノード１０２Ｅで、トランザクションは、ＩＰ８、ＩＰ９、および、ＩＰ１０へ提供される。
Referring to FIG. 10A, IP1 broadcasts non-posted write transactions to other IP agents IP2-IP10. By using extensions, only a single transaction is sent on each shared
-
- At
-
- At
上記の例では、単一のトランザクションだけが、送信側ＩＰエージェント１４の下流にあるＩＰエージェント１の数に関わらず、各共有相互接続１２で送信される。
In the above example, only a single transaction is sent on each shared
図１０Ｂを参照して、応答トランザクションの統合について説明する。ブロードキャストトランザクションは、Ｎｏｎ－ｐｏｓｔｅｄ書き込みであったので、各宛先エージェントＩＰ２～ＩＰ１０は、完了トランザクションを返す必要がある。統合では、各ノード１０２Ｂ～１０２Ｅは、そのローカルＩＰエージェント１４から受信した完了トランザクションを統合し、その後、ノード１０２Ａへ向かって上流へ単一の完了トランザクションのみを送信する。換言すると、
・ノード１０２Ｅは、ＩＰ８～ＩＰ１０から受信した完了トランザクションを統合し、単一の完了トランザクションをノード１０２Ｄへ返す。
・ノード１０２Ｄでは、ＩＰ７およびノード１０２Ｅから受信した完了トランザクションが統合され、１つの完了トランザクションがノード１０２Ｂへ返される。
・同様に、ノード１０２Ｃは、ＩＰ３、ＩＰ４、および、ＩＰ５について単一の統合されたトランザクションを返す。
・最後に、ノード１０２Ｂは、ノード１０２Ｃ、１０２Ｄ、および、ＩＰ２から受信した完了トランザクションを統合し、単一の完了トランザクションをノード１０２ＡおよびＩＰ１へ返す。
Integration of response transactions will be described with reference to FIG. 10B. Since the broadcast transaction was a non-posted write, each destination agent IP2-IP10 needs to return a completed transaction. In consolidation, each
-
- At
Similarly,
- Finally,
上記の例は、拡大および統合の効率を説明する。拡大がなければ、９個の別個のトランザクション（エージェントＩＰ２～ＩＰ１０の各々に対して１つずつ）が、相互接続ファブリック１０６を介して伝送される必要がある。しかし、拡大を用いることにより、様々な共有相互接続１２を介して伝送されるトランザクションの数は、４まで削減される。合計９の完了トランザクションも、４つに統合される。
The above example illustrates the efficiency of expansion and consolidation. Without expansion, nine separate transactions (one for each of agents IP2-IP10) would need to be transmitted across
時々、エラーが発生する可能性があり、完了トランザクションが、受信側ＩＰエージェントＩＰ２～ＩＰ１０の１以上によって生成されない。エラーは、多くの異なる方法で対処することができる。例えば、成功した完了だけを統合することができ、一方、エラー応答を組み合わせるおよび／または別個に送信することができる。さらに別の代替例において、成功した完了およびエラー完了の両方が統合されてもよいが、成功応答または失敗応答のいずれかを示すように、各々にフラグが付される。 Sometimes an error may occur and a completed transaction is not generated by one or more of the receiving IP agents IP2-IP10. Errors can be handled in many different ways. For example, only successful completions can be integrated, while error responses can be combined and/or sent separately. In yet another alternative, both successful and error completions may be combined, but each is flagged to indicate either a successful response or a failed response.
上記の記載はブロードキャストの文脈で提供されているが、トランザクションの拡大および統合は、マルチキャスティング、読み出し応答マルチキャスティング、および／または、エニーキャスティングで実施されてもよいことを理解されたい。 Although the above description is provided in the context of broadcasting, it is to be understood that transaction expansion and consolidation may be implemented with multicasting, read response multicasting, and/or anycasting.
ブロードキャスト、マルチキャスト、および、エニーキャストトランザクションが一般的である機械学習、人工知能、データセンターなどのトランザクション集約的な応用例において、拡大および統合することができれば、相互接続ファブリック１０６上のトランザクショントラフィックの量を大幅に削減して、ボトルネックを排除または低減すると共にシステム効率およびパフォーマンスを改善することができる。
The amount of transaction traffic on
トランキング
ＳｏＣ１００の相互接続ファブリック１０６は、典型的には、各方向に対して、（ａ）ＩＰエージェント１４とローカルノード１０２との間、および、（ｂ）複数のノード１０２の間に、単一の物理リンクを備える。単一のリンクのみがある場合、物理リンクと、その物理リンクのためのアクセスポート２０または２２との間には、一対一の対応関係がある。同様に、ほとんどの相互接続ファブリック１０６で、物理ＩＰエージェント１４と、そのＩＰエージェント１４にアクセスするために用いられる論理ＩＰ ＩＤとの間にも、一対一の対応関係がある。
The
高パフォーマンスの応用例においては、トランキングと呼ばれる技術を用いることが有利でありうる。トランキングでは、単一の論理識別子を共有する２つ（以上）の重複物理リソースが存在する。物理リソースを重複させることにより、ボトルネックを回避することができ、システムの効率およびパフォーマスを向上させることができる。例えば、１つの物理リソースが、ビジーであるか、電源オフであるか、または、利用不可能である場合、重複リソースの１つが利用されうる。トランキングは、信頼性も改善できる。１つの物理リソース（例えば、相互接続またはＩＰエージェントなど）がダウンし、利用不可能になるか、または、何らかの理由で利用できない場合、その他の物理リソースが利用されうる。同じ論理識別子を用いて重複リソースをアドレッシングすることにより、ＳｏＣ１００上で利用される論理アドレッシングシステムを変更する必要なしに、重複物理リソースの利点を実現させることができる。しかしながら、重複物理リソースの内のどれを利用するのかを選択して追跡するのかが課題である。
In high performance applications, it may be advantageous to use a technique called trunking. In trunking, there are two (or more) duplicated physical resources that share a single logical identifier. By duplicating physical resources, bottlenecks can be avoided and system efficiency and performance can be improved. For example, if one physical resource is busy, powered off, or unavailable, one of the duplicated resources can be utilized. Trunking can also improve reliability. If one physical resource (e.g., an interconnect or IP agent) goes down, becomes unavailable, or is unavailable for any reason, the other physical resource can be utilized. By addressing the duplicated resources with the same logical identifier, the benefits of duplicated physical resources can be realized without having to change the logical addressing system utilized on the
図１１Ａを参照すると、いくつかのトランキングの例を含むＳｏＣ１００の相互接続ファブリック１０６が示されている。この例において、相互接続ファブリック１０６は、３つのノード１０２Ａ、１０２Ｂ、および、１０２Ｃを備える。ノード１０２Ａは、２つのＩＰエージェント１４ｉおよび１４２を備える。ノード１０２Ｂは、２つのＩＰエージェント１４３および１４４を備える。ノード１０２Ｃは、１つのＩＰエージェント１４ｓを備える。相互接続ファブリック１０６は、以下のトランキングの例を含む。
・ノード１０２ＡとＩＰエージェント１４２との間の物理的な「トランク」ラインのペア。
・ノード１０２Ａから１０２Ｃの同方向の物理的な「トランク」相互接続１２（１）および１２（２）のペア。
・同一のＩＰエージェント１４ｓのペア。
11A, an
A pair of physical "trunk" lines between
A pair of unidirectional physical "trunk"
A pair of identical IP agents 14s.
これらの例の各々では、論理識別子と物理リソースとの間に一対一の対応関係はない。逆に、２つの利用可能な物理リソースがあるので、どちらの物理リソースを利用するか選択を行う必要がある。 In each of these examples, there is no one-to-one correspondence between logical identifiers and physical resources. Conversely, since there are two available physical resources, it is necessary to select which physical resource to use.
図１１Ｂを参照すると、（図９Ａの）任意選択的な物理リンクセレクタ１２６を示す図が示されている。上述のように、トランキングでは、単一の論理識別子を共有する２つ（以上）の重複物理リソースが存在する。ＩＦＩＤテーブル１２４が、トランキング状況などで、重複物理リソースを有する論理ＩＰ ＩＤを識別した時はいつでも、任意選択的な物理リンクセレクタ１２６が、選択を行うために用いられる。物理リンクセレクタ１２６は、物理リソースの利用可能性（またはその欠如）、混雑状態、負荷バランシング、ハッシュ関数、ランダム選択、最長時間未使用の選択、電力条件など、１以上の決定要素を用いて、その選択を行ってよい。例えば、或る物理リソースがビジーである、混雑している、および／または、利用不可能である場合、他の物理リソースが選択される。あるいは、或るリソースが電力消費を削減するために電源オフされている場合、他のリソースが選択されてよい。どのようになされるかに関わらず、選択は、選択された物理リソースにアクセスするために用いられる物理ポート２０または２２の識別につながる。
11B, a diagram illustrating the optional physical link selector 126 (of FIG. 9A) is shown. As mentioned above, in trunking, there are two (or more) overlapping physical resources that share a single logical identifier. Whenever the IFID table 124 identifies a logical IP ID with overlapping physical resources, such as in a trunking situation, the optional
非排他的実施形態において、物理リソースの選択は、動作が完了するまで利用されることが好ましい。一連の関連トランザクションが、送信元ＩＰエージェント１４と、宛先ＩＰエージェントの重複ペア（例えば、図１１Ａの２つのＩＰエージェントＩＰ５）との間で送信される場合、すべてのトランザクションが、動作の完了まで同じ宛先ＩＰエージェントに送信される。そうでなければ、データの破損またはその他の問題が発生しうる。重複物理リソースが相互接続である場合、典型的には、同様のアプローチが好ましい。応答（読み出しなど）を求めるトランザクションでは、読み出し要求トランザクションおよび結果応答の両方が、同じ相互接続を介して送信されることが好ましい。さらに、トランザクションのパケットの破損を避けるために、トランザクション全体、および、トランザクションのパケットが、同じパスで同じ宛先へルーティングされることが好ましい。パケットは、リンクを通るために数ビートを必要とし、おそらくは、他の仮想チャネルとインターリーブされうるので、パケットの終了までポートまたはリンクを変えないことが重要である。そうでなければ、パケットの複数のビートは、パケットの部分がシステムを通して移動する時に順序がばらばらになりうるので、それにより情報が破損しうる。要求と同じパスを介して応答をルーティングすることが通常は望ましいが、必須ではない。
In non-exclusive embodiments, the selection of physical resources is preferably utilized until the operation is complete. If a series of related transactions are sent between a
いくつかの非排他的実施形態において、各ビートと共に送信された順序付け情報を用いて、順不同でまたは異なるリソースから受信されたトランザクションのビートを再順序付けする機能を、宛先ＩＰエージェントに提供することが有利でありうる。例えば、制御ビットＭは、パケットの各ビートに対する固有の「ビートカウント数」を特定するために用いられてよい。次いで、パケットのビートは、各ビートと共に送信された固有のビートカウント数を用いて、正確な番号順で宛先ＩＰエージェントによって組み立てられうる。各ビートと共に送信されるビートカウント数を提供することにより、破損に関する上述の問題の多くが解決されうる。 In some non-exclusive embodiments, it is advantageous to provide a destination IP agent with the ability to reorder transactional beats received out of order or from different resources using ordering information sent with each beat. It can be. For example, control bit M may be used to specify a unique "beat count" for each beat of a packet. The beats of packets can then be assembled by the destination IP agent in precise numerical order, with a unique beat count number sent with each beat. By providing a beat count number that is sent with each beat, many of the above-mentioned problems with corruption may be resolved.
ストリーム内インターリービング
前述したように、ストリームは、仮想チャネルおよびトランザクションクラスのペアリングとして定義される。４つの仮想チャネル（例えば、ＶＣ０、ＶＣ１、ＶＣ２、および、ＶＣ３）、ならびに、３つのトランザクションクラス（Ｐ、ＮＰ、Ｃ）があった場合、最大で１２の異なる可能なストリームがある。１２のストリームは、完全に独立している。ストリームは、独立しているので、例えば、相互接続ワイヤ１２および１２Ｚなどの共有リソース上でインターリーブされうる。各アービトレーション工程で、仮想チャネルのストリームが選択され、対応するポート２２は、そのトランザクションの残りに対してそのトランザクションにロックされる。別の仮想チャネルを選択して、トランザクションの伝送の完了前に同じポート上でインターリーブすることもできるが、トランザクションが完了するまでは、同じ仮想チャネルの別のストリームを選択することはできない。
Intra-Stream Interleaving As mentioned above, a stream is defined as a pairing of a virtual channel and a transaction class. If there were four virtual channels (eg, VC0, VC1, VC2, and VC3) and three transaction classes (P, NP, C), there are at most 12 different possible streams. The 12 streams are completely independent. Since the streams are independent, they can be interleaved on shared resources, such as
ストリーム内インターリービングは、２つのトランザクションが互いに独立しているという条件では、同じストリームを共有する２以上のトランザクションのインターリービングである。独立したトランザクションの例は、（１）２つの異なるＩＰエージェント１４が、同じストリームを共有するトランザクションを生成すること、および、（２）同じＩＰエージェント１４が、同じストリームを共有する２つのトランザクションを生成するが、生成するＩＰエージェント１４が２つのトランザクションを独立するものとしてマークすること、を含む。トランザクションを独立するものとしてマークすることにより、トランザクションを再順序付けして、インターリービングを用いて配信できることを意味する。ストリーム内インターリービングによれば、トランザクションが完了するまで仮想チャネルのストリームをポートにロックする上述の制約を緩和または排除することができる。ストリーム内インターリービングによれば、（１）２以上の独立したトランザクションをストリーム上でインターリーブすることができ、（２）同じ仮想チャネルに関連する異なるストリームもインターリーブできる。
Intra-stream interleaving is the interleaving of two or more transactions that share the same stream, provided that the two transactions are independent of each other. Examples of independent transactions are (1) two
ストリーム内インターリービングでは、同じストリーム上でインターリーブされうる２つ（以上）の独立したトランザクションを示すために、さらなる情報が必要である。様々な実施形態において、これは、多くの異なる方法で達成されてよい。一実施形態において、独立したトランザクションのパケットのヘッダ３４は、一意的なトランザクション識別子すなわちＩＤを割り当てられる。一意的なトランザクション識別子を用いることにより、各トランザクションの各ビートは、独立するものとしてフラグを付される。各トランザクションに対する一意的なトランザクションＩＤを用いることにより、様々なノード１０２は、同じストリーム上でインターリーブされる複数の独立したトランザクションのビートを追跡する。
Intra-stream interleaving requires additional information to indicate two (or more) independent transactions that can be interleaved on the same stream. In various embodiments, this may be accomplished in many different ways. In one embodiment, the
インターリーブされたトランザクションの所与のペアについて、仮想チャネルおよびトランザクションクラスを指定するビットは同じであるが、各々のためのトランザクションＩＤを表すビットは異なる。 For a given pair of interleaved transactions, the bits specifying the virtual channel and transaction class are the same, but the bits representing the transaction ID for each are different.
したがって、制御ビットＭに含まれるさらなるトランザクションＩＤ情報は、送信元および宛先ＩＰエージェント１４の両方および相互接続ファブリック１０６が、同じストリーム上でインターリーブされた時に、或るトランザクションを他のトランザクションに対して認識または区別することを可能にする。
Therefore, the additional transaction ID information contained in control bit M allows both source and
同期配信対非同期配信
ブロードキャスティング、マルチキャスティング、読み出し応答マルチキャスティング、および、エニーキャスティングでは、同じトランザクションの複数のインスタンス化が、相互接続ファブリック１０６で伝送されてよい。目標となる宛先およびそれらの宛先までのパスの各々が利用可能である場合、各宛先ＩＰエージェント１４は、ネットワーク上で通常の待ち時間だけ遅延して、やがてトランザクションを受信する。一方、パスまたは宛先のいずれかが利用できない（例えば、リソースバッファが満杯である）場合、１以上の利用可能な宛先が、利用できない宛先の前にトランザクションを受信してよい。かかる状況下での異なる到達時間は、２つの異なる実施例の可能性を提起する。
In synchronous vs. asynchronous delivery broadcasting, multicasting, read response multicasting, and anycasting, multiple instantiations of the same transaction may be transmitted on
第１同期または「ブロッキング」実施形態においては、各宛先がほぼ同時にトランザクションを受信することを保証する努力がなされる。換言すると、利用不可能なリソースが利用可能になるまで、利用可能なリソースへのトランザクションの配信が、遅延すなわち「ブロック」されてよい。結果として、指定された受信側の各々によるトランザクションの受信が同期される。この実施形態は、ほぼ同時にトランザクションを受信することが受信側にとって重要である応用例で用いられてよい。 In a first synchronization or "blocking" embodiment, an effort is made to ensure that each destination receives transactions at approximately the same time. In other words, delivery of transactions to available resources may be delayed or "blocked" until the unavailable resources become available. As a result, reception of transactions by each of the designated receivers is synchronized. This embodiment may be used in applications where it is important to the receiver to receive transactions at approximately the same time.
第２非同期的または非ブロッキング実施形態においては、利用可能な宛先へのトランザクションの配信を遅延させるためのブロッキングの努力がなされない。その代わり、トランザクションの各インスタンス化が、利用可能性に基づいて配信され、これは、利用可能なリソースがトランザクションをすぐに受信する一方で、利用不可能なリソースは、利用可能になった時にトランザクションを受信することを意味する。結果として、非同期的すなわち異なる時間に配信が起こりうる。このアプローチの利点は、利用可能な宛先ＩＰエージェント１４が、すぐにトランザクションを処理でき、他のＩＰエージェントと同期するのを待ってブロックされることがないことである。結果として、遅延が回避される。
In a second asynchronous or non-blocking embodiment, no blocking efforts are made to delay delivery of the transaction to available destinations. Instead, each instantiation of the transaction is delivered based on availability, meaning that available resources receive the transaction immediately, while unavailable resources receive the transaction when it becomes available. As a result, delivery can occur asynchronously, i.e. at different times. The advantage of this approach is that available
いくつかの実施形態についてのみ詳細に説明したが、ここに提供した本開示の精神や範囲を逸脱することなしに多くの他の形態で本願を実施できることを理解されたい。したがって、これらの実施形態は、例示的なものであって、限定的なものではないとみなされ、本明細書に示した詳細に限定されず、添付の特許請求の範囲および等価物の範囲内で変形されてもよい。 Although only certain embodiments have been described in detail, it will be appreciated that the present application may be practiced in many other forms without departing from the spirit or scope of the disclosure provided herein. Accordingly, these embodiments are to be considered illustrative and not restrictive, and are not limited to the details set forth herein, but within the scope of the appended claims and equivalents. It may be transformed by
Claims (13)
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記ＳＢＲトランザクションは、アドレスを前記トランザクションのヘッダ内に提供することによって、前記１以上の宛先ＩＰエージェントを特定し、前記アドレスは、前記ＳｏＣ上の２以上の宛先ＩＰエージェントを識別するために、前記相互接続ファブリックによって解決される、ＳｏＣ。 1. A system on chip (SoC), comprising:
an interconnection fabric;
a plurality of IP agents interconnected by the interconnection fabric, the plurality of IP agents being configured to be sources and destinations of transaction traffic transmitted between the IP agents over the interconnection fabric;
Equipped with
a first IP agent configured to generate and transmit a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
the interconnect fabric is configured to make routing decisions regarding how to route and deliver the SBR transaction over the interconnect fabric to the one or more destination IP agents among the plurality of IP agents on the SoC ;
The SBR transaction identifies the one or more destination IP agents by providing an address in a header of the transaction, the address being resolved by the interconnect fabric to identify two or more destination IP agents on the SoC.
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、前記相互接続ファブリックの２つのノードの間で共有相互接続を介して前記ＳＢＲトランザクションの１つのインスタンス化を統合して送信することによって、前記相互接続ファブリックを介して送信されるトランザクショントラフィックを削減するように、前記ルーティング決定を行うよう構成されており、前記共有相互接続は、配信パスに沿って２以上の宛先ＩＰエージェントに至る、ＳｏＣ。 A system-on-chip (SoC),
an interconnect fabric;
a plurality of IP agents interconnected by the interconnection fabric and configured to be a source and destination of transaction traffic transmitted between the IP agents through the interconnection fabric; an IP agent,
Equipped with
a first IP agent configured to generate and send a source-based routing (SBR) transaction identifying one or more destination IP agents among the plurality of IP agents on the SoC;
The interconnection fabric makes routing decisions regarding how to route and deliver the SBR transaction via the interconnection fabric to the one or more destination IP agents among the plurality of IP agents on the SoC. configured to do
The interconnection fabric is transmitted through the interconnection fabric by consolidating and sending one instantiation of the SBR transaction over a shared interconnect between two nodes of the interconnection fabric. The SoC is configured to make the routing decisions to reduce transaction traffic, wherein the shared interconnect leads to two or more destination IP agents along a delivery path .
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、前記ＳＢＲトランザクションに応答して生成された複数の受信済みの応答トランザクションを統合して、前記相互接続ファブリックのノードの間で共有相互接続を介して前記応答トランザクションの１つのインスタンス化を転送することによって、前記相互接続ファブリックを介して送信されるトランザクショントラフィックを削減するように、前記ルーティング決定を行うよう構成されており、前記共有相互接続は、応答配信パスに沿って前記応答トランザクションの目標に至る、ＳｏＣ。 A system-on-chip (SoC),
an interconnect fabric;
a plurality of IP agents interconnected by the interconnection fabric and configured to be a source and destination of transaction traffic transmitted between the IP agents through the interconnection fabric; an IP agent,
Equipped with
a first IP agent configured to generate and send a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
The interconnection fabric makes routing decisions about how to route and deliver the SBR transaction via the interconnection fabric to the one or more destination IP agents among the plurality of IP agents on the SoC. configured to do
The interconnection fabric aggregates multiple received response transactions generated in response to the SBR transaction into one instance of the response transaction via a shared interconnect between nodes of the interconnection fabric. the shared interconnect is configured to make the routing decision to reduce transaction traffic sent through the interconnect fabric by forwarding the responses along a response delivery path; SoC to reach transaction goals .
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、さらに、共有相互接続に関連付けられている複数のストリーム上で複数のトランザクションの伝送をインターリーブするように、前記ルーティング決定を行うよう構成されており、（ａ）前記複数のストリームの各々は、仮想チャネルおよびトランザクションタイプの一意的な組み合わせによって規定され、（ｂ）同じトランザクションの１以上の部分が、同じストリームを介して伝送される、ＳｏＣ。 A system-on-chip (SoC),
an interconnect fabric;
a plurality of IP agents interconnected by the interconnection fabric and configured to be a source and destination of transaction traffic transmitted between the IP agents through the interconnection fabric; an IP agent of
Equipped with
a first IP agent configured to generate and send a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
The interconnection fabric makes routing decisions regarding how to route and deliver the SBR transaction via the interconnection fabric to the one or more destination IP agents among the plurality of IP agents on the SoC. configured to do
The interconnection fabric is further configured to make the routing decision to interleave transmission of multiple transactions on multiple streams associated with a shared interconnection, the interconnection fabric being further configured to: (a) (b) each of the SoCs is defined by a unique combination of virtual channels and transaction types, and (b) one or more parts of the same transaction are transmitted over the same stream .
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、さらに、共有相互接続に関連付けられている複数のストリームの中の同じストリームを介して２以上の独立したトランザクションをルーティングするように、前記ルーティング決定を行うよう構成されており、前記複数のストリームの各々は、仮想チャネルおよびトランザクションタイプの一意的な組み合わせによって規定される、ＳｏＣ。 1. A system on chip (SoC), comprising:
an interconnection fabric;
a plurality of IP agents interconnected by the interconnection fabric, the plurality of IP agents being configured to be sources and destinations of transaction traffic transmitted between the IP agents over the interconnection fabric;
Equipped with
a first IP agent configured to generate and transmit a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
the interconnect fabric is configured to make routing decisions regarding how to route and deliver the SBR transaction over the interconnect fabric to the one or more destination IP agents among the plurality of IP agents on the SoC ;
The SoC, wherein the interconnect fabric is further configured to make the routing decision to route two or more independent transactions through a same stream among a plurality of streams associated with a shared interconnect, each of the plurality of streams defined by a unique combination of a virtual channel and a transaction type.
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、共通の論理識別子を共有する重複物理リソースを備え、前記ルーティング決定は、（ａ）前記重複物理リソースの１つを選択すること、（ｂ）前記重複物理リソースの前記選択された１つを用いて前記トランザクションをルーティングすること、とを含む、ＳｏＣ。 A system-on-chip (SoC),
an interconnect fabric;
a plurality of IP agents interconnected by the interconnection fabric and configured to be a source and destination of transactional traffic transmitted between the IP agents through the interconnection fabric; an IP agent of
Equipped with
a first IP agent configured to generate and send a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
The interconnection fabric makes routing decisions about how to route and deliver the SBR transaction via the interconnection fabric to the one or more destination IP agents among the plurality of IP agents on the SoC. configured to do
The interconnection fabric comprises redundant physical resources sharing a common logical identifier, and the routing decision includes (a) selecting one of the redundant physical resources; (b) selecting one of the redundant physical resources; and routing the transaction using one of the SoCs.
（ａ）前記重複物理リソースの利用可能性、
（ｂ）前記重複物理リソースの間の相対的な混在状態、
（ｃ）前記重複物理リソースの間の負荷バランシング、
（ｄ）前記重複物理リソースの間のランダム選択、
（ｅ）前記重複物理リソースの間の最長時間未使用選択、
（ｆ）前記重複物理リソースの間の相対的な電力消費、
（ｇ）前記重複物理リソースの間で選択を行うためのハッシュ関数の利用、または、
（ｈ）（ａ）～（ｇ）の任意の組み合わせ、の内の１つに基づく、ＳｏＣ。 7. The SoC of claim 6 , wherein the routing decision comprises:
(a) availability of said redundant physical resources;
(b) a relative mixed state between the overlapping physical resources;
(c) load balancing between the overlapping physical resources;
(d) random selection between said overlapping physical resources;
(e) longest time unused selection between said overlapping physical resources;
(f) relative power consumption between the overlapping physical resources;
(g) utilizing a hash function to select between said overlapping physical resources; or
(h) an SoC based on any combination of (a) to (g);
相互接続ファブリックと、
前記相互接続ファブリックによって相互接続されている複数のＩＰエージェントであって、前記ＩＰエージェントの間で前記相互接続ファブリックを介して伝送されるトランザクショントラフィックの送信元および宛先になるよう構成されている、複数のＩＰエージェントと、
を備え、
第１ＩＰエージェントは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の１以上の宛先ＩＰエージェントを特定するソースベースルーティング（ＳＢＲ）トランザクションを生成して送信するよう構成されており、
前記相互接続ファブリックは、前記ＳｏＣ上の前記複数のＩＰエージェントの中の前記１以上の宛先ＩＰエージェントへ前記相互接続ファブリックを介して前記ＳＢＲトランザクションをどのようにルーティングして配信するかについてルーティング決定を行うよう構成され、
前記相互接続ファブリックは、さらに、２以上の独立したトランザクションを同じストリームを介してル－ティングするように、前記ルーティング決定を行うよう構成されており、前記２以上の独立したトランザクションは各々、前記２以上の独立したトランザクションが前記同じストリームを介してルーティングされうるように、前記２以上の独立したトランザクションの各々のビートを前記相互接続ファブリックが追跡することを可能にする一意的なトランザクション識別子を割り当てられる、ＳｏＣ。 1. A system on chip (SoC), comprising:
an interconnection fabric;
a plurality of IP agents interconnected by the interconnection fabric, the plurality of IP agents being configured to be sources and destinations of transaction traffic transmitted between the IP agents over the interconnection fabric;
Equipped with
a first IP agent configured to generate and transmit a source-based routing (SBR) transaction that identifies one or more destination IP agents among the plurality of IP agents on the SoC;
the interconnect fabric is configured to make routing decisions regarding how to route and deliver the SBR transaction over the interconnect fabric to the one or more destination IP agents among the plurality of IP agents on the SoC ;
The interconnect fabric is further configured to make the routing decision to route two or more independent transactions over a same stream, wherein the two or more independent transactions are each assigned a unique transaction identifier that enables the interconnect fabric to track each beat of the two or more independent transactions so that the two or more independent transactions may be routed over the same stream.
Applications Claiming Priority (5)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201862650589P | 2018-03-30 | 2018-03-30 | |
US62/650,589 | 2018-03-30 | ||
US201962800897P | 2019-02-04 | 2019-02-04 | |
US62/800,897 | 2019-02-04 | ||
PCT/US2019/023001 WO2019190827A1 (en) | 2018-03-30 | 2019-03-19 | Arbitrating portions of transactions over virtual channels associated with an interconnect |
Publications (3)
Publication Number | Publication Date |
---|---|
JP2021519464A JP2021519464A (en) | 2021-08-10 |
JPWO2019190827A5 JPWO2019190827A5 (en) | 2022-02-04 |
JP7457654B2 true JP7457654B2 (en) | 2024-03-28 |
Family
ID=68054357
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
JP2020552300A Active JP7457654B2 (en) | 2018-03-30 | 2019-03-19 | Steps for implementing source-based routing within an interconnect fabric on a system-on-chip |
Country Status (6)
Country | Link |
---|---|
US (5) | US10853282B2 (en) |
EP (2) | EP4216062A1 (en) |
JP (1) | JP7457654B2 (en) |
KR (1) | KR20200135780A (en) |
IL (1) | IL277566A (en) |
WO (1) | WO2019190827A1 (en) |
Families Citing this family (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10243848B2 (en) | 2015-06-27 | 2019-03-26 | Nicira, Inc. | Provisioning logical entities in a multi-datacenter environment |
KR20200135780A (en) | 2018-03-30 | 2020-12-03 | 프로비노 테크놀로지스, 아이엔씨. | Mediating parts of a transaction through a virtual channel associated with the interconnect |
US20190303777A1 (en) | 2018-03-30 | 2019-10-03 | Provino Technologies, Inc. | Protocol level control for system on a chip (soc) agent reset and power management |
US11088902B1 (en) | 2020-04-06 | 2021-08-10 | Vmware, Inc. | Synchronization of logical network state between global and local managers |
US11088919B1 (en) | 2020-04-06 | 2021-08-10 | Vmware, Inc. | Data structure for defining multi-site logical network |
US11777793B2 (en) | 2020-04-06 | 2023-10-03 | Vmware, Inc. | Location criteria for security groups |
US11394634B2 (en) | 2020-04-06 | 2022-07-19 | Vmware, Inc. | Architecture for stretching logical switches between multiple datacenters |
US11374817B2 (en) | 2020-04-06 | 2022-06-28 | Vmware, Inc. | Determining span of logical network element |
US20200280526A1 (en) * | 2020-05-18 | 2020-09-03 | Intel Corporation | Routing traffics having primary and secondary destinations in communication networks |
US11392527B2 (en) * | 2020-08-31 | 2022-07-19 | Micron Technology, Inc. | Ordered delivery of data packets based on type of path information in each packet |
US11658922B2 (en) | 2020-08-31 | 2023-05-23 | Micron Technology, Inc. | Optional path ordering in packet-based network |
US11343283B2 (en) | 2020-09-28 | 2022-05-24 | Vmware, Inc. | Multi-tenant network virtualization infrastructure |
US11675722B2 (en) * | 2021-04-16 | 2023-06-13 | Apple Inc. | Multiple independent on-chip interconnect |
CN113517942B (en) * | 2021-07-14 | 2022-09-02 | 重庆邮电大学 | Emergency communication-oriented transmitting baseband system of multi-channel digital short-wave transmitter SoC |
US11573918B1 (en) * | 2021-07-20 | 2023-02-07 | Arm Limited | Methods and apparatus for communicating between node devices |
US20220114131A1 (en) * | 2021-12-22 | 2022-04-14 | Intel Corporation | System, method, apparatus and architecture for dynamically configuring device fabrics |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2007115252A (en) | 2005-10-17 | 2007-05-10 | Samsung Electronics Co Ltd | NoC ROUTER AND NI EMPLOYING AXI, AND NoC SYSTEM AND ITS INTERLEAVING METHOD |
WO2010022767A1 (en) | 2008-08-26 | 2010-03-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Packet forwarding in a network |
WO2010137572A1 (en) | 2009-05-25 | 2010-12-02 | 日本電気株式会社 | Network-on-chip, network routing method, and system |
US20130083794A1 (en) | 2011-09-29 | 2013-04-04 | Sridhar Lakshmanamurthy | Aggregating Completion Messages In A Sideband Interface |
JP2014209764A (en) | 2014-06-17 | 2014-11-06 | 株式会社東芝 | On-chip router and multicore system using the same |
JP2017502421A (en) | 2014-01-10 | 2017-01-19 | クアルコム，インコーポレイテッド | System and method for resolving DRAM page contention based on memory access patterns |
US20170289064A1 (en) | 2016-04-01 | 2017-10-05 | Electronics And Telecommunications Research Institute | On-chip network device capable of networking in dual swithching network modes and operation method thereof |
Family Cites Families (66)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6850521B1 (en) | 1999-03-17 | 2005-02-01 | Broadcom Corporation | Network switch |
US6604159B1 (en) * | 1999-08-12 | 2003-08-05 | Mips Technologies, Inc. | Data release to reduce latency in on-chip system bus |
US6829666B1 (en) * | 1999-09-29 | 2004-12-07 | Silicon Graphics, Incorporated | Modular computing architecture having common communication interface |
US6654896B1 (en) | 2000-05-16 | 2003-11-25 | Hewlett-Packard Development Company, L.P. | Handling of multiple compliant and non-compliant wake-up sources in a computer system |
US6678767B1 (en) * | 2000-10-06 | 2004-01-13 | Broadcom Corp | Bus sampling on one edge of a clock signal and driving on another edge |
TW513635B (en) * | 2000-11-24 | 2002-12-11 | Ibm | Method and structure for variable-length frame support in a shared memory switch |
US20020161978A1 (en) * | 2001-02-28 | 2002-10-31 | George Apostol | Multi-service system-on-chip including on-chip memory with multiple access path |
US7174467B1 (en) | 2001-07-18 | 2007-02-06 | Advanced Micro Devices, Inc. | Message based power management in a multi-processor system |
US7577857B1 (en) | 2001-08-29 | 2009-08-18 | 3Com Corporation | High speed network interface with automatic power management with auto-negotiation |
US6976134B1 (en) | 2001-09-28 | 2005-12-13 | Emc Corporation | Pooling and provisioning storage resources in a storage network |
US7664018B2 (en) * | 2002-07-02 | 2010-02-16 | Emulex Design & Manufacturing Corporation | Methods and apparatus for switching fibre channel arbitrated loop devices |
US7283944B2 (en) * | 2003-12-15 | 2007-10-16 | Springsoft, Inc. | Circuit simulation bus transaction analysis |
US7260688B1 (en) * | 2004-04-15 | 2007-08-21 | Xilinx, Inc. | Method and apparatus for controlling access to memory circuitry |
US7500066B2 (en) * | 2005-04-30 | 2009-03-03 | Tellabs Operations, Inc. | Method and apparatus for sharing instruction memory among a plurality of processors |
US20070130344A1 (en) | 2005-11-14 | 2007-06-07 | Pepper Timothy C | Using load balancing to assign paths to hosts in a network |
EP1785811B1 (en) | 2005-11-14 | 2018-12-05 | Texas Instruments Incorporated | Memory information transfer power management |
US7912075B1 (en) * | 2006-05-26 | 2011-03-22 | Avaya Inc. | Mechanisms and algorithms for arbitrating between and synchronizing state of duplicated media processing components |
US20110022754A1 (en) * | 2007-12-06 | 2011-01-27 | Technion Research & Development Foundation Ltd | Bus enhanced network on chip |
US20090245257A1 (en) | 2008-04-01 | 2009-10-01 | International Business Machines Corporation | Network On Chip |
WO2010069398A1 (en) * | 2008-12-19 | 2010-06-24 | Telefonaktiebolaget L M Ericsson (Publ) | Resolving contention between data bursts |
US20100158005A1 (en) | 2008-12-23 | 2010-06-24 | Suvhasis Mukhopadhyay | System-On-a-Chip and Multi-Chip Systems Supporting Advanced Telecommunication Functions |
US8775544B2 (en) | 2009-02-04 | 2014-07-08 | Citrix Systems, Inc. | Methods and systems for dynamically switching between communications protocols |
US9514074B2 (en) * | 2009-02-13 | 2016-12-06 | The Regents Of The University Of Michigan | Single cycle arbitration within an interconnect |
US8448001B1 (en) | 2009-03-02 | 2013-05-21 | Marvell International Ltd. | System having a first device and second device in which the main power management module is configured to selectively supply a power and clock signal to change the power state of each device independently of the other device |
US20110320706A1 (en) | 2009-03-12 | 2011-12-29 | Hitachi, Ltd. | Storage apparatus and method for controlling the same |
US8831666B2 (en) | 2009-06-30 | 2014-09-09 | Intel Corporation | Link power savings with state retention |
CN101651625B (en) | 2009-09-03 | 2011-09-21 | 中兴通讯股份有限公司 | Route selecting device and route selecting method of multi-service restoration |
US8850250B2 (en) | 2010-06-01 | 2014-09-30 | Intel Corporation | Integration of processor and input/output hub |
US8782456B2 (en) | 2010-06-01 | 2014-07-15 | Intel Corporation | Dynamic and idle power reduction sequence using recombinant clock and power gating |
US8904115B2 (en) * | 2010-09-28 | 2014-12-02 | Texas Instruments Incorporated | Cache with multiple access pipelines |
KR101762779B1 (en) * | 2011-08-22 | 2017-07-28 | 인텔 코포레이션 | Method for data throughput improvement in open core protocol based interconnection networks using dynamically selectable redundant shared link physical paths |
US8711867B2 (en) | 2011-08-26 | 2014-04-29 | Sonics, Inc. | Credit flow control scheme in a router with flexible link widths utilizing minimal storage |
US8868941B2 (en) | 2011-09-19 | 2014-10-21 | Sonics, Inc. | Apparatus and methods for an interconnect power manager |
US8713234B2 (en) * | 2011-09-29 | 2014-04-29 | Intel Corporation | Supporting multiple channels of a single interface |
EP2761386B1 (en) | 2011-09-30 | 2017-09-06 | Intel Corporation | Managing sideband segments in on-die system fabric |
US9053251B2 (en) | 2011-11-29 | 2015-06-09 | Intel Corporation | Providing a sideband message interface for system on a chip (SoC) |
WO2013105967A1 (en) | 2012-01-13 | 2013-07-18 | Intel Corporation | Efficient peer-to-peer communication support in soc fabrics |
US8924779B2 (en) | 2012-03-30 | 2014-12-30 | Lsi Corporation | Proxy responder for handling anomalies in a hardware system |
US9436623B2 (en) | 2012-09-20 | 2016-09-06 | Intel Corporation | Run-time fabric reconfiguration |
US9612652B2 (en) | 2012-09-29 | 2017-04-04 | Intel Corporation | Controlling power consumption by power management link |
US9355058B2 (en) | 2012-10-22 | 2016-05-31 | Intel Corporation | High performance interconnect physical layer |
US9258234B1 (en) | 2012-12-28 | 2016-02-09 | Juniper Networks, Inc. | Dynamically adjusting liveliness detection intervals for periodic network communications |
US9223668B2 (en) | 2013-03-13 | 2015-12-29 | Intel Corporation | Method and apparatus to trigger and trace on-chip system fabric transactions within the primary scalable fabric |
US9471521B2 (en) * | 2013-05-15 | 2016-10-18 | Stmicroelectronics S.R.L. | Communication system for interfacing a plurality of transmission circuits with an interconnection network, and corresponding integrated circuit |
US20150026494A1 (en) | 2013-07-19 | 2015-01-22 | Sonics, Inc. | Intelligent mesochronous synchronizer |
US9473388B2 (en) * | 2013-08-07 | 2016-10-18 | Netspeed Systems | Supporting multicast in NOC interconnect |
US9742630B2 (en) * | 2014-09-22 | 2017-08-22 | Netspeed Systems | Configurable router for a network on chip (NoC) |
US9727114B2 (en) | 2014-09-25 | 2017-08-08 | Telefonaktiebolaget L M Ericsson (Publ) | HW-controlled power domains with automatic power-on request |
US9971397B2 (en) | 2014-10-08 | 2018-05-15 | Apple Inc. | Methods and apparatus for managing power with an inter-processor communication link between independently operable processors |
TWI536267B (en) | 2014-11-07 | 2016-06-01 | 瑞昱半導體股份有限公司 | Control method applied to operating-mode finite-state-machine and computer readable media |
US10210120B2 (en) * | 2015-03-26 | 2019-02-19 | Intel Corporation | Method, apparatus and system to implement secondary bus functionality via a reconfigurable virtual switch |
GB2537855B (en) | 2015-04-28 | 2018-10-24 | Advanced Risc Mach Ltd | Controlling transitions of devices between normal state and quiescent state |
US10157160B2 (en) | 2015-06-04 | 2018-12-18 | Intel Corporation | Handling a partition reset in a multi-root system |
US9733689B2 (en) | 2015-06-27 | 2017-08-15 | Intel Corporation | Hardware apparatuses and methods to perform transactional power management |
US10353747B2 (en) * | 2015-07-13 | 2019-07-16 | Futurewei Technologies, Inc. | Shared memory controller and method of using same |
US10209734B2 (en) | 2016-01-25 | 2019-02-19 | Samsung Electronics Co., Ltd. | Semiconductor device, semiconductor system, and method of operating the semiconductor device |
US10133341B2 (en) | 2016-06-06 | 2018-11-20 | Arm Limited | Delegating component power control |
US10452124B2 (en) | 2016-09-12 | 2019-10-22 | Netspeed Systems, Inc. | Systems and methods for facilitating low power on a network-on-chip |
US10223128B2 (en) | 2016-09-23 | 2019-03-05 | Apple Inc. | Booting and power management |
US10775871B2 (en) | 2016-11-10 | 2020-09-15 | Apple Inc. | Methods and apparatus for providing individualized power control for peripheral sub-systems |
US10725955B2 (en) | 2017-12-08 | 2020-07-28 | Arm Limited | Power control of inter-domain transaction bridge |
US10642341B2 (en) | 2018-03-23 | 2020-05-05 | Juniper Networks, Inc. | Selective modification of power states based on conditions |
US10739836B2 (en) | 2018-03-27 | 2020-08-11 | Intel Corporation | System, apparatus and method for handshaking protocol for low power state transitions |
US20190303777A1 (en) | 2018-03-30 | 2019-10-03 | Provino Technologies, Inc. | Protocol level control for system on a chip (soc) agent reset and power management |
KR20200135780A (en) | 2018-03-30 | 2020-12-03 | 프로비노 테크놀로지스, 아이엔씨. | Mediating parts of a transaction through a virtual channel associated with the interconnect |
US11294850B2 (en) | 2019-03-29 | 2022-04-05 | Intel Corporation | System, apparatus and method for increasing bandwidth of edge-located agents of an integrated circuit |
-
2019
- 2019-03-19 KR KR1020207026419A patent/KR20200135780A/en unknown
- 2019-03-19 JP JP2020552300A patent/JP7457654B2/en active Active
- 2019-03-19 EP EP23160394.5A patent/EP4216062A1/en active Pending
- 2019-03-19 WO PCT/US2019/023001 patent/WO2019190827A1/en active Application Filing
- 2019-03-19 EP EP19775361.9A patent/EP3776231B1/en active Active
- 2019-03-28 US US16/368,358 patent/US10853282B2/en active Active
- 2019-03-28 US US16/368,287 patent/US10838891B2/en active Active
- 2019-03-29 US US16/369,612 patent/US10585825B2/en active Active
- 2019-03-29 US US16/369,599 patent/US11003604B2/en active Active
-
2020
- 2020-09-23 IL IL277566A patent/IL277566A/en unknown
-
2021
- 2021-04-12 US US17/228,529 patent/US11640362B2/en active Active
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP2007115252A (en) | 2005-10-17 | 2007-05-10 | Samsung Electronics Co Ltd | NoC ROUTER AND NI EMPLOYING AXI, AND NoC SYSTEM AND ITS INTERLEAVING METHOD |
WO2010022767A1 (en) | 2008-08-26 | 2010-03-04 | Telefonaktiebolaget Lm Ericsson (Publ) | Packet forwarding in a network |
WO2010137572A1 (en) | 2009-05-25 | 2010-12-02 | 日本電気株式会社 | Network-on-chip, network routing method, and system |
US20130083794A1 (en) | 2011-09-29 | 2013-04-04 | Sridhar Lakshmanamurthy | Aggregating Completion Messages In A Sideband Interface |
JP2017502421A (en) | 2014-01-10 | 2017-01-19 | クアルコム，インコーポレイテッド | System and method for resolving DRAM page contention based on memory access patterns |
JP2014209764A (en) | 2014-06-17 | 2014-11-06 | 株式会社東芝 | On-chip router and multicore system using the same |
US20170289064A1 (en) | 2016-04-01 | 2017-10-05 | Electronics And Telecommunications Research Institute | On-chip network device capable of networking in dual swithching network modes and operation method thereof |
Also Published As
Publication number | Publication date |
---|---|
US11003604B2 (en) | 2021-05-11 |
EP3776231A4 (en) | 2022-01-26 |
KR20200135780A (en) | 2020-12-03 |
US10585825B2 (en) | 2020-03-10 |
EP4216062A1 (en) | 2023-07-26 |
US20210294762A1 (en) | 2021-09-23 |
US11640362B2 (en) | 2023-05-02 |
US20190303320A1 (en) | 2019-10-03 |
US20190303326A1 (en) | 2019-10-03 |
EP3776231A1 (en) | 2021-02-17 |
US10838891B2 (en) | 2020-11-17 |
US20190303217A1 (en) | 2019-10-03 |
JP2021519464A (en) | 2021-08-10 |
US10853282B2 (en) | 2020-12-01 |
EP3776231B1 (en) | 2023-05-03 |
US20190303325A1 (en) | 2019-10-03 |
WO2019190827A1 (en) | 2019-10-03 |
IL277566A (en) | 2020-11-30 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP7457654B2 (en) | Steps for implementing source-based routing within an interconnect fabric on a system-on-chip | |
US9742630B2 (en) | Configurable router for a network on chip (NoC) | |
JP6556450B2 (en) | Matrix of on-chip routers interconnecting multiple processing engines and routing method using the same | |
US7940666B2 (en) | Communication node architecture in a globally asynchronous network on chip system | |
US5835491A (en) | Method for supporting multicast capabilities in switching networks with a reservation ring | |
US6839794B1 (en) | Method and system to map a service level associated with a packet to one of a number of data streams at an interconnect device | |
US7773616B2 (en) | System and method for communicating on a richly connected multi-processor computer system using a pool of buffers for dynamic association with a virtual channel | |
US7643477B2 (en) | Buffering data packets according to multiple flow control schemes | |
US7773618B2 (en) | System and method for preventing deadlock in richly-connected multi-processor computer system using dynamic assignment of virtual channels | |
US20060101178A1 (en) | Arbitration in a multi-protocol environment | |
US7058053B1 (en) | Method and system to process a multicast request pertaining to a packet received at an interconnect device | |
US7065580B1 (en) | Method and apparatus for a pipelined network | |
US20140177648A1 (en) | Tagging and synchronization for fairness in noc interconnects | |
JP2005518578A (en) | Tagging and arbitration mechanisms at the input / output nodes of computer systems | |
JPS63501663A (en) | multiprocessor communication device | |
JP2005505855A (en) | I / O node of computer system | |
US7773617B2 (en) | System and method for arbitration for virtual channels to prevent livelock in a richly-connected multi-processor computer system | |
US20230370392A1 (en) | Network-on-chip architecture for handling different data sizes | |
WO2008057821A2 (en) | System and method for preventing deadlock in richly-connected multi-processor computer system | |
CN116686269A (en) | Router and system on chip | |
Kim | Energy-Aware On-Chip Networks | |
Gaizauskas et al. | Formation of multiple filaments in transparent solids | |
Wang et al. | An Effective Approach for Multicast on Multi-core Architecture |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
A711 | Notification of change in applicant |
Free format text: JAPANESE INTERMEDIATE CODE: A711Effective date: 20211210 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20211223 |
|
A621 | Written request for application examination |
Free format text: JAPANESE INTERMEDIATE CODE: A621Effective date: 20211223 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20220114 |
|
A977 | Report on retrieval |
Free format text: JAPANESE INTERMEDIATE CODE: A971007Effective date: 20221227 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20230131 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20230426 |
|
A131 | Notification of reasons for refusal |
Free format text: JAPANESE INTERMEDIATE CODE: A131Effective date: 20230808 |
|
A521 | Request for written amendment filed |
Free format text: JAPANESE INTERMEDIATE CODE: A523Effective date: 20231018 |
|
TRDD | Decision of grant or rejection written | ||
A01 | Written decision to grant a patent or to grant a registration (utility model) |
Free format text: JAPANESE INTERMEDIATE CODE: A01Effective date: 20240116 |
|
A601 | Written request for extension of time |
Free format text: JAPANESE INTERMEDIATE CODE: A601Effective date: 20240206 |
|
A61 | First payment of annual fees (during grant procedure) |
Free format text: JAPANESE INTERMEDIATE CODE: A61Effective date: 20240315 |
|
R150 | Certificate of patent or registration of utility model |
Ref document number: 7457654Country of ref document: JPFree format text: JAPANESE INTERMEDIATE CODE: R150 |