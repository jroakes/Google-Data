US7308657B2 - Method for generating hints for program analysis - Google Patents
Method for generating hints for program analysis Download PDFInfo
- Publication number
- US7308657B2 US7308657B2 US11/010,002 US1000204A US7308657B2 US 7308657 B2 US7308657 B2 US 7308657B2 US 1000204 A US1000204 A US 1000204A US 7308657 B2 US7308657 B2 US 7308657B2
- Authority
- US
- United States
- Prior art keywords
- program
- conditional
- statement
- statements
- hint
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F30/00—Computer-aided design [CAD]
- G06F30/30—Circuit design
- G06F30/32—Circuit design at the digital level
- G06F30/33—Design verification, e.g. functional simulation or model checking
- G06F30/3323—Design verification, e.g. functional simulation or model checking using formal methods, e.g. equivalence checking or property checking
Definitions
- This invention relates to program analysis techniques, and in particular generating hints for use in program analysis, for example, a program which relates to an integrated circuit design.
- HDLs hardware description languages
- designers and verification engineers whose job it is to assure that the design functions appropriately conduct analysis of the device being designed to evaluate the quality of the design and to hopefully find and eliminate any inadequacies potentially leading to future problems such as impossibility or inaccuracy in performance of the device.
- state explosion occurs when an input to the design, intended to permit analysis of the response of the device to a particular input, generates such a large number of possible output or intermediate states as to overrun any memory used in supporting the analysis.
- Hints are expressed as constraints on the primary inputs and states of a circuit modeled as a Finite State Machine (FSM) and can often be found with the help of simple heuristics by someone who understands the circuit well enough to devise simulation stimuli or verification properties for it.
- FSM Finite State Machine
- the ease of finding good hints is limited by the size and complexity of the design, and extending their applicability to larger designs is a key issue.
- hints are used to guide the exploration of the state space.
- hints are classified into those that depend on the invariants being checked (proving properties that should hold in all reachable states of a system) and those that capture knowledge of the design.
- Hints are applied by constraining the transition relation of the system; the constrained traversal of the state space proceeds much faster than the unconstrained system (original transition relation).
- This method obtained orders-of-magnitude reductions in time and space requirements during the exploration of the state space. Hints can often be found by someone who understands the design well enough to devise simulation stimuli or verification properties for it.
- identifying good hints can be a labor-intensive process requiring many attempts, and in most cases does not avoid the state space explosion problem. Acceptance of this method by designers and verification engineers will certainly benefit from a more efficient technique to devise good hints from a system being verified.
- the step of partitioning the original program is an important step in controlling the number and quality of the candidate hints produced, and the problem of partitioning the original program is addressed by the present invention.
- the present invention provides a method comprising: identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program; for each conditional statement in the set identifying the values of the external inputs required for each possible condition in the statement to be met; and forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the present invention provides a data processing apparatus comprising: a first identifier for identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; a determiner for determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program; a second identifier for identifying the values of the external inputs required for each possible condition in each conditional statement in the set to be met; and a former for forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the present invention provides an article of manufacture comprising a program storage medium readable by a computer, the medium tangibly embodying one or more programs of instructions executable by a computer to perform a method comprising: identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program; for each conditional statement in the set identifying the values of the external inputs required for each possible condition in the statement to be met; and forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the present invention enables a reduced set of hints to be formed for a program, and which may be used, for example, for performing reach-ability analysis on the program.
- the reduced set is obtained by considering only external inputs which are used in conditional statements for the purpose of forming the hints.
- the set of hints are further reduced by not considering external inputs used in conditional statements if one of the alternative paths defined by the conditional statement does not set a value which is used after the alternative paths re-join.
- Such a dependency on a value set in one statement and used by another statement is known as a data dependency from the statement which sets the value to the statement which used the value. Removing these external inputs from consideration is achieved by identifying data dependencies between statements in the program; and removing a conditional statement from the set of conditional statements, if the statements of at least one alternative path defined by the conditional statement do not have a data dependency to another statement of the program.
- the present invention provides a method comprising: identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; identifying data dependencies between statements in the program; determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program and for which each alternative path defined by the condition statement has at least one statement which has a data dependency to another statement of the program; for each conditional statement in the set identifying the values of the external inputs required for each possible condition in the statement to be met; and forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the present invention provides a data processing apparatus comprising: a first identifier for identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; a second identifier for identifying data dependencies between statements in the program; a determiner for determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program and for which each alternative path defined by the condition statement has at least one statement which has a data dependency to another statement of the program; a third identifier for identifying the values of the external inputs required for each possible condition in each conditional statement in the set to be met; and a former for forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the present invention provides an article of manufacture comprising a program storage medium readable by a computer, the medium tangibly embodying one or more programs of instructions executable by a computer to perform a method comprising: identifying a plurality of conditional statements in a program each conditional statement defining two alternative computational paths of the program; identifying data dependencies between statements in the program; and determining a set from the identified conditional statements, the set comprising the conditional statements which are dependant on external inputs to the program and for which each alternative path defined by the condition statement has at least one statement which has a data dependency to another statement of the program; for each conditional statement in the set identifying the values of the external inputs required for each possible condition in the statement to be met; and forming at least one hint, each hint comprising values of the external inputs which would cause a particular condition in each conditional statement in the set to be met thereby defining a computational path of the program.
- the method further comprises: identifying a statement which comprises access to an array variable where an external input is used as an index into the array; and adding to the set of conditional statements at least one conditional statement which is conditional on a value of the external variable and which defines a computational path in which the array is accessed using the value as an index. Accordingly access to the array can be defined in a deterministic manner which enables the order in which the array is accessed to be controlled by ordering of hints.
- a control flow graph is used and the method further comprises: creating a control flow graph to represent the program, the control flow graph comprising decision nodes each of which represent a conditional statement of the program, statement nodes which represent other statements in the program, and arcs which join the nodes based on the program logic; wherein the step of forming a set of identified conditional statements comprises serializing flows from decision nodes which represent conditional statements which are dependant only on internal variables such that the set of identified conditional statements comprise the remaining non-serialized decision nodes of the control flow graph.
- control flow graph if a control flow graph is used, preferably a sub-graph is used to represent a hint.
- the method further comprises: dividing the control flow graph into a set of sub-graphs based on the remaining non-serialized decision nodes, each sub-graph representing a computational path through the program as defined by a hint.
- the method further comprises discarding hints which do not meet a pre-determined criteria.
- the pre-determined criteria can specify a number of states which a hint must cause to be reached by the computational path which the hint defines.
- the pre-determined criteria can be based on the complexity of the representation of the program which is required for performing reach-ability analysis. For example if a binary decision diagram is used the pre-determined criteria can specify a size of a binary decision diagram which represents the computational path defined by a hint.
- a reach-ability analysis of the program is performed using the formed hints.
- program could be of any size and could be part of a larger program or sub-program. Further the invention is not restricted by the function which the program performs.
- program could be a programmatic representation of a hardware circuit such as an integrated circuit design.
- FIG. 1 is a sample program which is used to describe the preferred embodiment of the present invention
- FIG. 2 is a state table for the program of FIG. 1 ;
- FIG. 3 a is a representation of a control flow graph of the program of FIG. 1 ;
- FIG. 3 b is a representation of a serialized polar version of the control flow graph of FIG. 3 a;
- FIG. 4 is a representation of a set of sub-graphs generated from the serialized polar control flow graph of FIG. 3 b;
- FIG. 5 is a state table for the sub-graphs of FIG. 4 ;
- FIG. 6 is a representation of a data dependency graph for the program of FIG. 1 .
- FIG. 7 is representation of a modified version of the serialized polar control flow graph of FIG. 3 b in which additional serialization has been applied based on data dependencies.
- FIG. 8 is a representation of a set of sub-graphs generated from the serialized polar control flow graph of FIG. 7 .
- FIG. 9 is a state table for the sub-graphs of FIG. 8 .
- FIGS. 10 a, b and c are respectively: a sub-section of the program of FIG. 1 ; a representation of a control flow graph of the program section of FIG. 10 a ; and a state table for the program section of FIG. 10 a;
- FIGS. 11 a, b and c are respectively: a modified version of the program section of FIG. 11 a ; a representation of a control flow graph of the program section of FIG. 11 a ; and a state table for the program section of FIG. 10 a ; and
- FIG. 12 is a flow diagram of the method of the preferred embodiment of the present invention.
- Co-pending patent application Ser. No. 10/966492 discloses a program analysis technique which uses a control flow graph (CFG) and program dependence graph (PDG) in order to generate hints to be used to perform reach-ability analysis.
- CFG control flow graph
- PDG program dependence graph
- program partitioning/slicing is used to identify sub-programs from which the hints are generated.
- the present invention discloses methods which may be used to perform such program partitioning in a way which reduces the number of candidate hints which are identified using such a process.
- FIG. 1 is a simple example program 100 which will be used to illustrate aspects of the preferred embodiment of the present invention.
- the program 100 is split into sequentially numbered lines which are prefixed with “S” for statements and “P” for predicates (conditional statements). Predicates involve decisions, based on the value of one or more decision variables, which control the flow to the statements.
- Predicates involve decisions, based on the value of one or more decision variables, which control the flow to the statements.
- P 2 , P 4 and P 6 there are three predicate lines/nodes, P 2 , P 4 and P 6 .
- program illustrated is not intended to adhere to any particular language syntax or to perform any particular useful function, but is merely a program which can be used to demonstrate the present invention. Accordingly a skilled person will realize that the invention could equally be applied to programs other languages and for performing other functions. Further such a program could be, for example, a programmatic representation of a hardware circuit or system such as an integrated circuit design.
- FIG. 2 shows a state table diagram for program 100 of FIG. 1 .
- the first 3 columns 201 show the decision variables and the second 5 columns 202 show the states achieved by other variables in the routine if a particular computation path of the program is executed.
- the program can reach 12 sets of states each set corresponding a row in the table, each of which represent a different computational path of the program which is defined by a specific combination of the possible values of the decision variables.
- a hint is to constrain the decision variables in order to exercise a given computational path in reach-ability analysis, and accordingly from FIG. 2 there are 12 different hints possible.
- FIG. 3 a is a control flow graph of program 100 of FIG. 1 in which each node corresponds to a line from the program.
- the nodes in the control flow graph are joined by arcs which define the flow through the nodes and correspond to the logic of the program 100 .
- a node can represent a plurality of statements, for example a single node can represent all of the statements between two conditional statements.
- the flow graph is then modified and partitioned in order to leave a set of sub-higraphs from which hints are generated. Partitioning is based on internal decision nodes.
- a variable is an internal decision variable if it does not depend on external inputs. For example, abstract interpretation can be used to identify internal decision variables.
- a decision node of a control flow graph CFG is an internal decision node if all variables appearing in the predicate attached to the node are internal decision variables.
- a hint should not constrain internal decision variables, because this may contribute to very few states being reached in reach-ability analysis. Consider, for instance, an internal decision variable that is incremented modulo n at each iteration through the control flow graph.
- a hint which specifies a value for this variable will allow only one iteration of reach-ability analysis before reaching a fixpoint because as soon as the variable is incremented, all transitions are disabled. In this sense a fixpoint occurs when all states have been reached for a given hint.
- predicates P 2 and P 6 are predicated on variables p 2 and p 6 , respectively, which were read as inputs at statement S 1 .
- p 2 and p 6 are termed external decision variables because their values are determined externally to the program.
- predicate P 4 is predicated on variable count which is set within the program at step S 1 , and as a result count is termed an internal decision variable. Accordingly, in terms of the control flow graph nodes P 2 and P 6 are external decision nodes and P 4 is an internal decision node, and a hint should not be used to constrain count, the internal decision variable of internal decision node P 4 .
- a reduced set of hints is obtained by simplifying the control flow graph and then splitting the simplified flow graph into sub-graphs, each sub-graph corresponding to a potential hint and a computational path of the program.
- the control flow graph is first simplified by removing all back arcs (note that a back arc is an arc which returns the flow from a node to a previously executed node) to produce a polar graph.
- the polar graph is then simplified by serializing flows from internal decision nodes to produce a serialized polar graph. For example let V be an internal decision node with children V 0 and V 1 and U be the corresponding join node with parents U 0 and U 1 .
- V 0 is a descendant V 0 and U 1 is a descendant of V 1 .
- serialization of V replaces its predicate with true; makes V 0 the only child of V, makes V 1 the successor of U 0 , and U 1 the only parent of U. Which of the two children of V is considered V 0 is immaterial.
- the effect of serialization is to merge paths that should be kept in the same block of the partition into a single path.
- FIG. 3 b Simplification of the control flow graph of FIG. 3 a into a serialized polar graph is shown in FIG. 3 b .
- the back arc 301 and arc 302 of FIG. 3 a have been removed and new arc 311 added, thus serializing P 4 , S 5 and S 6 .
- P 4 no longer appears as a decision node in the control flow graph and is no longer a predicate from which a candidate hint will be generated.
- a decision node uses both an internal decision variable and an external decision variable is not an internal decision node and not suitable as a basis for serialization.
- the internal decision variables are existentially qualified from the predicate associated with the node before the predicate is used to generate a hint such that the hint does not specify a value for the internal decision variable.
- the next step in the preferred embodiment of the present invention is to repeatedly split the control flow graph into a set of sub-graphs. This is achieved by considering a first decision node and creating two sub-graphs, one for each path which follows from the first decision node. This gives a set of two sub-graphs. Next a second decision node is considered, and two sub-graphs are created for each sub-graph in the set, one for each path which follows from the second decision node. This now gives a set of 4 sub-graphs and these steps can be repeated for each decision node in the original control flow graph. Accordingly this produces 2 n sub-graphs where n is the number of decision nodes present in the control flow graph and each of the sub-graph represents a computational path through the program.
- FIG. 4 The sub-graphs of the control flow graph of FIG. 3 b is shown in FIG. 4 .
- FIG. 3 b contains 2 decision nodes, P 2 and P 6 , and as a result
- FIG. 4 shows 4 sub-graphs which represent each possible computational path through the program defined by the serialized polar control flow graph.
- FIG. 5 shows an updated state table, compared to that of FIG. 2 , with one row for each sub-graph of FIG. 4 .
- the columns 501 represent the external decision variables which may be used to form a hint
- the 5 right hand columns 502 represent the states achieved by other variables in the routine.
- BDD Binary Decision Diagram
- Additional techniques may be used to further reduce the number of candidate hints and to further simplify the BDDs which correspond to the hints.
- One of these techniques which involves merging paths based on data dependencies, is illustrated with reference to FIGS. 6 and 7 .
- FIG. 6 is a data dependency graph of the program 100 of FIG. 1 .
- the figures shows the control flow graph of FIG. 3 a , but with the arcs replaced with data dependency links.
- a link from a first node to a second node shows that the second node uses a variable for which the value is set in the first node.
- the states which are reachable for the sub-graph of 801 are completely specified, each being an integer value
- the states reachable for sub-graph 802 are not as well specified, the value of b[x] and c, depending on x which is an input variable.
- the BDD for sub-graph 802 is relatively more complex than that of sub-graph 801 and accordingly it can be desirable to produce more hints with simpler BDD's. How this may be done is shown with reference to FIGS. 10 a, b , and c , and 11 a, b and c.
- FIG. 10 a shows the elements of program 100 of FIG. 1 which relate to the setting of b[x] on lines S 7 and S 8
- FIG. 10 b shows the associated control flow graph for these elements
- FIG. 10 c shows the table of states based on the possible hints of p 6 equal to true and false. Accordingly it can be seen when p 6 is true the element of b[] which is set is non-deterministic and when p 6 is false both this and the value to which the element is set is non-deterministic.
- the program of FIG. 10 a can be replaced with the code shown in FIG.
- FIG. 12 is a flow chart for generating hints from a program according to the preferred embodiment of the present invention.
- a control flow graph of the program to be analyzed is created and from this graph, at step 1202 , any back arcs are removed to create a polar graph.
- internal decision nodes are identified and at step 1204 the flows from the identified internal decision nodes are serialized to create a serialized polar graph.
- data dependencies are identified between the nodes of the control flow graph and a step 1206 flows are serialized from decision nodes to nodes without conflicting data dependencies.
- step 1207 access to array elements based on use of an external variable as an index into the array are identified and at step 1208 this access is modifed to an appropriate set of decision and statement nodes.
- step 1206 may be repeated for the decision nodes added.
- This process results in a modified version of the control flow graph created at step 1201 and this modified version is split into sub-graphs at step 1209 by splitting paths from remaining decision nodes. If there are n such remaining decision nodes this will result in 2 n sub-graphs. From these sub-graphs, at step 1210 , a set of hints are generated, each of which define a computational path through the program and each of which can be used with an appropriate BDD for performing reach-ability analysis for the program under consideration.
- step 1302 back arcs are removed from the control flow graph in another embodiment this may be a logical step which simply means that back arcs will be ignored in subsequent processing.
- step 1302 could be moved to after step 1304 and steps 1307 and 1308 could be moved to before step 1305 .
- steps 1305 to 1308 could be omitted.
- program could apply to any of these units, and whichever unit is under consideration the external variables are those which are set external to the unit.
- reach-ability analysis can involve hints and associated BDDS from the other programs, such hints and BDD's being organized into a hierarchy based on the hierarchy of the larger program or set of programs.
- each hint has an associated BDD which is used in reach-ability analysis
- the BDD could be replaced with, for example, a boolean function or a truth table.
- the method described with reference to FIG. 12 could be implemented in a variety of programming languages, for example, JavaTM, C, and C++ (Java is a registered trademark of Sun Microsystems, Inc. in the United States, other countries, or both). Further a skilled person will realize that once implemented the methods can be stored in a computer program product comprising one or more programs, in source or executable form, on a media, such as floppy disk, CD, and DVD, suitable for loading onto a data processing host and causing the data processing host to carry out the methods. Further a skilled person will realize that the method described with reference to 12 could be embodied in a data processing apparatus which comprises elements each of which carry out one or more of the method steps.
- the present invention provides a method, apparatus and article of manufacture for generating hints for use when performing reach-ability analysis of a program such as programmatic representations of hardware circuits.
- the hints are generated from external inputs to the program which are used in conditional statements of the program. Further such an external input may be excluded from the hints if none of the statements of at least one of the alternative paths following from the conditional statement in which it is used have a data dependency to another statement of the program.
Abstract
Description
Claims (36)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/010,002 US7308657B2 (en) | 2004-12-10 | 2004-12-10 | Method for generating hints for program analysis |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US11/010,002 US7308657B2 (en) | 2004-12-10 | 2004-12-10 | Method for generating hints for program analysis |
Publications (2)
Publication Number | Publication Date |
---|---|
US20060129956A1 US20060129956A1 (en) | 2006-06-15 |
US7308657B2 true US7308657B2 (en) | 2007-12-11 |
Family
ID=36585523
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US11/010,002 Expired - Fee Related US7308657B2 (en) | 2004-12-10 | 2004-12-10 | Method for generating hints for program analysis |
Country Status (1)
Country | Link |
---|---|
US (1) | US7308657B2 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070089075A1 (en) * | 2005-10-14 | 2007-04-19 | David Ward | Method for optimizing integrated circuit device design and service |
US20110016441A1 (en) * | 2009-05-30 | 2011-01-20 | International Business Machines Corporation | Method and system for dynamic automated hint generation for enhanced reachability analysis |
Families Citing this family (8)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8171438B2 (en) * | 2006-08-25 | 2012-05-01 | International Business Machines Corporation | Verification of a program partitioned according to the control flow information of the program |
US8412548B2 (en) * | 2007-11-27 | 2013-04-02 | International Business Machines Corporation | Linked decision nodes in a business process model |
US8438536B2 (en) * | 2009-10-28 | 2013-05-07 | Oracle America, Inc. | Encoding switch on ordered universes with binary decision diagrams |
US8468512B2 (en) * | 2009-10-30 | 2013-06-18 | International Business Machines Corporation | Abstracting benefit rules from computer code |
US10311229B1 (en) * | 2015-05-18 | 2019-06-04 | Amazon Technologies, Inc. | Mitigating timing side-channel attacks by obscuring alternatives in code |
US10868665B1 (en) * | 2015-05-18 | 2020-12-15 | Amazon Technologies, Inc. | Mitigating timing side-channel attacks by obscuring accesses to sensitive data |
CN111367669B (en) * | 2020-03-02 | 2023-08-15 | 北京小米松果电子有限公司 | Method, device and medium for determining optimal operation path |
US11599079B2 (en) * | 2021-03-25 | 2023-03-07 | International Business Machines Corporation | Static safety analysis for control-flow linearization |
Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6484134B1 (en) * | 1999-06-20 | 2002-11-19 | Intel Corporation | Property coverage in formal verification |
-
2004
- 2004-12-10 US US11/010,002 patent/US7308657B2/en not_active Expired - Fee Related
Patent Citations (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6484134B1 (en) * | 1999-06-20 | 2002-11-19 | Intel Corporation | Property coverage in formal verification |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20070089075A1 (en) * | 2005-10-14 | 2007-04-19 | David Ward | Method for optimizing integrated circuit device design and service |
US7788646B2 (en) * | 2005-10-14 | 2010-08-31 | International Business Machines Corporation | Method for optimizing integrated circuit device design and service |
US20110016441A1 (en) * | 2009-05-30 | 2011-01-20 | International Business Machines Corporation | Method and system for dynamic automated hint generation for enhanced reachability analysis |
US8201118B2 (en) | 2009-05-30 | 2012-06-12 | International Business Machines Corporation | Method and system for dynamic automated hint generation for enhanced reachability analysis |
Also Published As
Publication number | Publication date |
---|---|
US20060129956A1 (en) | 2006-06-15 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6086626A (en) | Method for verification of combinational circuits using a filtering oriented approach | |
US6904578B2 (en) | System and method for verifying a plurality of states associated with a target circuit | |
US7694253B2 (en) | Automatically generating an input sequence for a circuit design using mutant-based verification | |
US6163876A (en) | Method for verification of RTL generated from scheduled behavior in a high-level synthesis flow | |
US6745160B1 (en) | Verification of scheduling in the presence of loops using uninterpreted symbolic simulation | |
EP1769407B1 (en) | Loop manipulation in a behavioral synthesis tool | |
US7890901B2 (en) | Method and system for verifying the equivalence of digital circuits | |
US20050091025A1 (en) | Methods and systems for improved integrated circuit functional simulation | |
JPH11219378A (en) | Method for verification and representation of hardware by decomposition and division | |
Xie et al. | Symbolic techniques for performance analysis of timed systems based on average time separation of events | |
US7308657B2 (en) | Method for generating hints for program analysis | |
US8903699B2 (en) | Determining large-scale finite state machines using constraint relaxation | |
US5796621A (en) | Circuit delay abstraction tool | |
Jain et al. | Word-level predicate-abstraction and refinement techniques for verifying RTL Verilog | |
Cabodi et al. | BDD-based hardware verification | |
Foster | Techniques for higher-performance Boolean equivalence verification | |
Bauch et al. | Control Explicit--Data Symbolic Model Checking | |
Mishchenko et al. | A theory of nondeterministic networks | |
Mishchenko et al. | Fraigs: Functionally reduced and-inv graphs | |
Sarkar | Register transfer operation analysis during data path verification | |
Aziz et al. | Efficient control state-space search | |
Mets | Formal verification of sequential circuits using implicit state enumeration | |
Mendias et al. | Efficient verification of scheduling, allocation and binding in high-level synthesis | |
DE MICHELI | Extending Boolean Methods for Scalable Logic Synthesis | |
Dumitrescu et al. | Identification of non-redundant memorizing elements in VHDL synchronous designs for formal verification tools |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:WARD, DAVID;REEL/FRAME:016156/0312Effective date: 20050309 |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
REMI | Maintenance fee reminder mailed | ||
LAPS | Lapse for failure to pay maintenance fees | ||
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20151211 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044142/0357Effective date: 20170929 |