US20160275946A1 - Speech recognition using log-linear model - Google Patents
Speech recognition using log-linear model Download PDFInfo
- Publication number
- US20160275946A1 US20160275946A1 US14/708,465 US201514708465A US2016275946A1 US 20160275946 A1 US20160275946 A1 US 20160275946A1 US 201514708465 A US201514708465 A US 201514708465A US 2016275946 A1 US2016275946 A1 US 2016275946A1
- Authority
- US
- United States
- Prior art keywords
- gram
- language model
- log
- features
- backoff
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/18—Speech classification or search using natural language modelling
- G10L15/183—Speech classification or search using natural language modelling using context dependencies, e.g. language models
- G10L15/19—Grammatical context, e.g. disambiguation of the recognition hypotheses based on word sequence rules
- G10L15/197—Probabilistic grammars, e.g. word n-grams
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F40/00—Handling natural language data
- G06F40/20—Natural language analysis
- G06F40/205—Parsing
- G06F40/216—Parsing using statistical methods
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/26—Speech to text systems
Definitions
- This specification generally relates to speech recognition systems.
- An n-gram language model may be trained using a corpus of training data to indicate likelihoods of word sequences.
- the n-gram model may be used to recognize utterances spoken by users of a speech recognition system.
- a log-linear language model may be used in the speech recognition system as an alternative to the n-gram language model, and doing so can provide various advantages.
- training log-linear language models on a large amount of training data, using convex optimization methods is known to be computationally expensive.
- a model-transformation technique for initializing a log-linear language model given an already trained backoff n-gram model may be used to speed up training and to improve the perplexity on a held out test set.
- a log-linear model may be trained based on the n-gram parameters of the n-gram model to yield performance that is as good as or superior to the n-gram model.
- additional linguistic and/or non-linguistic features may be defined in the log-linear model to further improve the performance of the log-linear model.
- implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- a system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions.
- One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Implementations may include one or more of the following features.
- the n-gram language model may be configured to assign, to an n-gram that does not have a corresponding parameter value in the n-gram language model, a score based on a parameter value in the n-gram language model for a sub-sequence of words within the n-gram.
- the corresponding parameter value may indicate a conditional probability of an occurrence of a last word in the n-gram given an occurrence of one or more words that precede the last word in the n-gram.
- the log-linear language model may be generated to indicate, for one or more n-grams, likelihoods of occurrence that equal to likelihoods of occurrence indicated by the n-gram language model for the one or more n-grams.
- an n-gram feature that represents an occurrence of a particular word in a particular context including one or more words may be determined.
- each of the n-grams corresponding to the n-gram parameter values derived from the n-gram language model may be identified, the n-gram features may be determined to include a feature corresponding to each identified n-gram.
- Backoff parameter values derived from the n-gram language model may be obtained, the backoff parameter values representing n-gram backoffs from one order of n-gram to a lower order of n-gram.
- Backoff features for the log-linear language model that represent the backoffs of the n-grams in the n-gram language model may be determined.
- a weight for each backoff feature in the determined backoff features may be determined, where each of the weights for the determined backoff features may be respectively determined based on a backoff parameter value derived from the n-gram language model.
- the log-linear language model may be generated to have the backoff features and corresponding weights that are initialized based on the determined weights for the backoff features.
- the weights for the backoff features in the log-linear language model may each represent a probability adjustment equivalent to the adjustment represented by a corresponding backoff parameter value in the n-gram language model.
- the weights for the backoff features may be re-trained based on the determined weights for the backoff features.
- a backoff parameter value from the n-gram language model may be incorporated in the weight determination.
- the log-linear language model may include non-linguistic features corresponding to one or more aspects of non-linguistic context, the non-linguistic features including features indicative of a user characteristic, a time, a geographic location, an application, or an input field.
- the log-linear language model may be trained to adjust the weights.
- the log-linear language model may be trained using stochastic gradient descent training and using a set of training data that is different from a set of training data used to train the n-gram language model.
- Training a log-linear model using n-gram parameters from an n-gram model can produce a log-linear model that is at least as accurate as the n-gram model.
- the training of a log-linear model can be faster because the training of n-gram features derived from an n-gram model is often faster than the training of n-gram features from scratch.
- other linguistic or non-linguistic features can be added to a log-linear model to further improve the performance of the log-linear model.
- a log-linear model converted from a backoff n-gram model may perform better with uncommon phrases (e.g., potential language sequences at the tail of a probability distribution) when compared to traditional training.
- Using explicit backoff features in the log-linear model provides flexibility and better performance because the log-linear model may be iteratively trained to provide better backoff features.
- Using implicit backoff features in the log-linear model can provide a reduced model size because the log-linear model does not need to include weights for backoff features corresponding to n-gram features.
- implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- a system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions.
- One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- FIG. 1 is a diagram that illustrates an example of a system for generating a log-linear language model based on an n-gram model.
- FIG. 2 is a diagram that illustrates another example of a system for generating a log-linear language model based on an n-gram model.
- FIG. 3 is a diagram that illustrates an example of a system for speech recognition with a log-linear language model.
- FIG. 4 is a flow diagram that illustrates an example of a process for generating a log-linear language model based on an n-gram model.
- FIG. 5 is a schematic diagram that shows an example of a computing device and a mobile computing device.
- log-linear based language models are powerful models that allow the incorporation of multiple knowledge sources as features in a unified framework.
- the log-linear based language models may be extremely flexible but require computationally expensive iterative training algorithms.
- a feature may be n-grams, a local sequence of n words.
- a backoff n-gram model may be converted into n-gram feature parameters for a log-linear language model.
- the resulting log-linear language model may be equivalent to the original ML model after the conversion.
- the log-linear model may be augmented with additional features and then be retrained or adapted, leading to a faster training of log-linear models, while keeping flexibility and power.
- the log-linear model converted from a backoff n-gram model may perform better on the tail of the distribution when compared to traditional training.
- x i may be the word at position i in the string X
- P may be a probability estimate assigned to seen n-grams by the specific smoothing method.
- a backoff n-gram language model formulation may be as follows:
- P ng ⁇ ( x i ⁇ x i - k i - 1 ) ⁇ P _ ( x i ⁇ x i - k i - 1 if ⁇ ⁇ c ⁇ ( x i - k i ) > 0 ⁇ ⁇ ( x i - k i - 1 ) ⁇ P ⁇ ( x i ⁇ x i - k + 1 i - 1 ) otherwise ( 1 )
- a recursive smoothing formulation has two kinds of parameters: n-gram probabilities P (x i
- a log-linear model may be specified as a set of binary features f j (x i ,x 0 i ⁇ 1 ) with associated weights
- a standard backoff n-gram language model may be estimated directly from counts c(x i ⁇ k i ), using closed form analytical formulas.
- a log-linear model may be trained using iterative numerical techniques based on some form of gradient descent, which may be expensive.
- initialization of the bias feature weights with the relative frequency of the target may be used as a machine learning technique that can be seen as initializing a log-linear model with a 1-gram maximum likelihood model.
- the initializing of the log-linear model may be done with n-gram of arbitrary order.
- MDI Minimum Discrimination Information
- an MDI adapted version of the original model Q may be obtained by allowing an n-gram prior Q to be encoded directly in a subset of the log-linear model features, if these features are kept fixed while the other are retrained.
- a standard backoff n-gram language model may be converted to an equivalent log-linear model as follows.
- a log-linear language model containing n-grams features may have the following structure:
- the resulting model may not be intrinsically sparse and may require an implementation with support for backoff features shared between all non-observed n-grams in a given x i ⁇ k i ⁇ 1 .
- these features may be initialized with log ⁇ (x i ⁇ k i ⁇ 1 ).
- this feature may be removed by dividing both the numerator and denominator of equation 8 by ⁇ (x i ⁇ k i ⁇ 1 ), leading to the following sparse conversion equation:
- weights w for n-grams not included in the original model P may be zero and the corresponding features removed from the model.
- more features may be added by scaling all bootstrapped weights by a constant 0 ⁇ 1. This can be seen as the log linear interpolation of the bootstrapped model with an uniform model, and has the effect of flattening the distribution of w i in each context, while preserving the rank of predictions in that context.
- FIG. 1 is a block diagram that illustrates an example of a computing system 100 for generating a log-linear model based on an n-gram model.
- the functions performed by the computing system 100 can be performed by one or more individual computer systems or can be distributed across multiple computer systems.
- an n-gram language model may be trained using a corpus of training data to indicate likelihoods of word sequences.
- the n-gram model may be used to recognize utterances spoken by users of a speech recognition system.
- the speech recognition system may be configured to use the n-gram model to recognize a word spoken by a user based on preceding words that have been spoken by the user.
- the n-gram model may be trained by the computing system 100 .
- the n-gram model may be trained by one or more other computing systems not included in FIG. 1 .
- a log-linear language model may be used in the speech recognition system as an alternative to the n-gram language model, and doing so can provide various advantages.
- the log-linear model may be trained based on the n-gram parameters of the n-gram model to yield performance that is as good as or superior to the n-gram model.
- additional linguistic and/or non-linguistic features may be defined in the log-linear model to further improve the performance of the log-linear model.
- the log-linear model may explicitly include backoff features to evaluate words in n-grams that are not included in the n-gram model.
- FIG. 1 shows stages (A) to (E) which illustrate a flow of data.
- the computing system 100 obtains n-gram parameters 110 of an n-gram language model.
- an n-gram language model includes n-gram parameters that have been generated to represent likelihoods of words presented in n-grams.
- the n-gram model may be a maximum likelihood (ML) n-gram model.
- the computing system 100 may obtain an n-gram model trained by another computing system to obtain the n-gram parameters 110 .
- the computing system 100 may train the n-gram model using training data to obtain the n-gram parameters 110 .
- the computing system 100 may obtain n-gram parameters 110 directly from another computing system or a data storage.
- an n-gram parameter may be a probability of an occurrence of a word given the occurrence of preceding n ⁇ 1 words. This probability may be determined based on a set of the training data, where the training data may be a corpus of documents, a corpus of transcribed utterances, spoken utterances from one or more training users, or any other types of training data.
- “I have a”) represents a conditional probability of an occurrence of the word “car” given the preceding three words “I have a,” where the probability is determined according to the frequency that this sequence occurs in the training data.
- a trigram parameter 110 b P ng (“car”
- a bigram parameter 110 c P ng (“car”
- a unigram parameter 110 d P ng (“car”) represents a probability of occurrence of the word “car,” where the probability is also determined according to the training data.
- the n-gram parameters 110 may be used by a speech recognition system to transcribe utterances spoken by users.
- “I have a”) may be used to represent the probability that a user has spoken the word “car” given that the user has spoken the words “I have a.”
- “have a”) may be used to represent the probability that a user has spoken the word “car” given that the user has spoken the words “have a.”
- x 1 . . . x n ⁇ 1 ) represents the probability that a user has spoken the word “x n ” given that the user has spoken the words “x 1 . . . x n ⁇ 1 ” in the n-gram X
- x 1 . . . x n ⁇ 1 ) represents the corresponding n-gram parameter that is in the n-gram model.
- P represents a probability generally, which may not be necessarily stored as a parameter of the n-gram model.
- a user may sometimes speak an utterance that includes an n-gram that is not in the n-gram model.
- an n-gram language model is considered to “include” an n-gram when it has a parameter value, such as a conditional probability of occurrence, corresponding to the n-gram.
- backoff parameters 120 in an n-gram model may be used to determine the probability of occurrence of a word when the n-gram is not included in the n-gram model.
- a backoff parameter represents an adjustment to the probability given a particular n-gram is not included in an n-gram model.
- the probability that a user has spoken the word “truck” given that the user has spoken the words “I have a” may be represented by a product between the backoff parameter 120 a and the probability that a user has spoken the word “truck” given that the user has spoken the words “have a” as:
- Equation (11) may be represented by a product between the backoff parameter 120 a and the trigram parameter 110 b as:
- x 1 . . . x n ⁇ 1 ) represents the probability that a user has spoken the word “x n ” given that the user has spoken the words “x 1 . . . x n ⁇ 1 ” in the n-gram X
- b ng (x 1 . . . x n ⁇ 1 ) represents the backoff parameter for the preceding words in the n-gram model
- x 2 . . . x n ⁇ 1 ) represents the probability that a user has spoken the word “x n ” given that the user has spoken the words “x 2 . . . x n ⁇ 1 ”.
- the backoff parameters 120 may be values that have been manually assigned by a developer of the n-gram model. In some other implementations, the backoff parameters 120 may be values that have been automatically assigned during the n-gram model training. In some implementations, the backoff parameters 120 may be a predetermined value for all n-grams. In some implementations, a single backoff value can be used for each length of n-gram. For example, a single four-gram backoff parameter may be used for any instance when a four-gram not in the model is encountered. A trigram backoff parameter, which may have a different value from the four-gram backoff parameter, may be used when evaluating any trigram not in the model.
- the model includes different backoff parameters for backoffs involving different n-grams of the same length.
- the parameter that the model designates for backoff from a four-gram to the trigram “I have a” may be different from the parameter the model designates for backoff from a four-gram to the trigram “I am a.”
- the model may include appropriate backoff parameters to be able to evaluate any potential n-gram that the model may encounter.
- the n-gram parameters and the backoff parameters may be formulated as expressed in Equation (1).
- the computing system 100 determines n-gram features 130 for a log-linear language model based on the n-gram language model.
- a speech recognition system can use a log-linear language model that includes the n-gram features 130 and/or other linguistic and/or non-linguistic features to recognize spoken utterances.
- a log-linear model may be formulated as expressed in Equation (2), Equation (4), or Equation (5) above.
- the n-gram features 130 may be determined based on the n-grams included in an n-gram model.
- the n-gram model includes a four-gram “I have a car”, corresponding trigrams “I have a” and “have a car”, corresponding bigrams “I have”, “have a”, and “a car”, and corresponding unigrams “I”, “have”, “a”, “car.”
- An n-gram feature 130 of the log-linear model may be defined for each of these different n-grams.
- an n-gram feature 130 of the log-linear model may be defined for each n-gram parameter 110 of the n-gram model.
- the computing system 100 may determine n-gram features ⁇ “x 1 . . . x n ⁇ 1 ”
- “x n ”> corresponding to n-grams X x 1 . . . x n , where each n-gram feature represents the occurrence of the word x n given the preceding words x 1 to x n ⁇ 1 in an n-gram.
- the n-gram features 130 may include a four-gram feature 130 a ⁇ “I have a”, “car”> to represent the occurrence of the word “car” given the preceding words “I have a” in a four-gram.
- the n-gram features 130 may include a trigram feature 130 b ⁇ “have a”, “car”> to represent the occurrence of the word “car” given the preceding words “have a” in a trigram.
- the n-gram features 130 may include a bigram feature 130 c ⁇ “a”, “car”> to represent the occurrence of the word “car” given the preceding word “a” in a bigram.
- the n-gram features 130 may include a unigram feature 130 d ⁇ “______”, “car”> to represent the occurrence of the word “car” in a unigram.
- the computing system 100 may determine backoff features 140 for a log-linear model based on the n-gram model.
- the backoff features 140 may be used by a speech recognition system to determine a last word in an n-gram spoken by the user, where the n-gram is not included in the log-linear model.
- the backoff features 140 may be determined based on the n-grams included in an n-gram model.
- the backoff features 140 may include a backoff feature 140 a ⁇ “I have a”, BO> to represent an absence of a four-gram in the n-gram model, where the preceding trigram “I have a” is included in the n-gram model.
- the backoff features 140 may include a backoff feature 140 b ⁇ “have a”, BO> to represent an absence of the trigram in the n-gram model, where the preceding bigram “have a” is included in the n-gram model.
- the backoff features 140 may include a backoff feature 140 c ⁇ “a”, BO> to represent an absence of the bigram in the n-gram model, where the preceding unigram “a” is included in the n-gram model.
- the backoff features defined for the log-linear model correspond to the backoff parameters of the n-gram model.
- the log-linear model can have a backoff feature 140 for each backoff parameter 120 of the n-gram model.
- the computing system 100 determines weights 150 or scores for the n-gram features 130 in the log-linear model.
- Each n-gram feature can be individually assigned a weight 150 .
- the weights can be used to determine probabilities of a sequence of words. For example, given that the user has spoken the words “I have a”, a speech recognition system based on a log-linear model may determine the probability of the word “car” being spoken by a user based on n-gram features “ ⁇ ”I have a”, “car”>”, “ ⁇ ”have a”, “car”>”, “ ⁇ ”a”, “car”>”, and “ ⁇ ”______”, “car”>”, and the respective weight associated with each n-gram feature.
- the computing system 100 may initialize weights of n-gram features such that the probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model.
- the weights may be set so that the log-linear model produces the same probabilities as the n-gram model. This weight initialization provides an advantage that the log-linear model would perform at least as well as the n-gram model.
- the computing system 100 may be configured to determine weights w c4 150 a , w c3 150 b , w c2 150 c , and w c1 150 d for the four-gram feature 130 a “ ⁇ ”I have a”, “car>”, the trigram feature 130 b “ ⁇ ”have a”, “car>”, the bigram feature 130 c “ ⁇ ”a”, “car>”, and the unigram feature 130 d “ ⁇ ”______”, “car>”, respectively.
- the computing system 100 may initialize w c4 150 a , w c3 150 b , w c2 150 c , and w c1 150 d of the log-linear model based on the n-gram parameters 110 a to 110 d from the n-gram model as:
- the probability P LL as determined by the log-linear model, of the word “car” being spoken may be formulated as:
- Z is a normalization factor that represents an exponential of weights of all the words ⁇ in the n-gram features ⁇ “I have a”, “ ⁇ ”>, ⁇ ”have a”, “ ⁇ ”>, ⁇ “a”, ⁇ “>, and ⁇ ______, “ ⁇ ”> in the log-linear model.
- the normalization factor Z may include weights of n-gram features 130 a ⁇ “I have a”, “car”>, 130 b ⁇ “have a”, “car”>, 130 c ⁇ “a”, “car”>, 130 d ⁇ ______, “car”>, 132 a ⁇ “have a”, “truck”>, 132 b ⁇ “a”, “truck”>, and 132 c ⁇ ______, “truck”>.
- the normalization factor may be the one expressed in Equation (3) or Equation (6).
- the normalization factor is 1.
- the normalization factor may be manually assigned.
- the computing system 100 may initialize weights of backoff features such that for n-grams that are not included in the n-gram model, the probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model.
- the probabilities of word occurrences generated by the log-linear model may be correlated to the corresponding probabilities generated by the n-gram model when the probability determined by the log-linear model equals the probability determined by the n-gram model scaled by a normalization factor.
- a speech recognition system based on a log-linear model may determine the probability of the word “truck” being spoken by a user based on n-gram features “ ⁇ ”have a”, “truck”>” 132 a , “ ⁇ ”a”, “truck”>” 132 b , and “ ⁇ ”_____”, “truck”>” 132 c , the backoff feature 140 a ⁇ “I have a”, BO>, and the respective weight associated with each feature.
- the computing system 100 may determine weights w t3 152 a , w t2 152 b , and w t1 152 c for the trigram feature 132 a “ ⁇ ”have a”, “truck>”, the bigram feature 132 b “ ⁇ ”a”, “truck>”, and the unigram feature 132 c “ ⁇ ”______”, “truck>”, respectively.
- the computing system 100 may initialize w t3 152 a , w t2 152 b , and w t1 152 c of the log-linear model based on the n-gram parameters 112 a to 112 c from the n-gram model as:
- each backoff feature 140 of the log-linear model may be derived from a corresponding backoff parameter 120 of the n-gram model.
- the computing system 100 may initialize the weight w BO3 160 a associated with the backoff feature 140 a ⁇ “I have a”, BO> of the log-linear model based on the backoff parameters 120 a of the n-gram model as:
- the probability of the word “truck” being spoken by a user in a log-linear model may then be formulated as:
- weights 150 of n-gram features 130 and weights 160 of backoff features 140 may be formulated as expressed in Equations (7) and (8).
- the computing system 100 is uses the determined features and weights to generate a log-linear model.
- using n-gram weights 150 and optionally backoff weights 160 provides a log-linear model performance that is at least as accurate as the n-gram model.
- the computing system 100 may use the n-gram features 130 and the respective weights 150 as initial parameters to generate a log-linear model.
- the computing system 100 may additionally use the backoff features 140 and the respective weights 160 as initial parameters to generate the log-linear model.
- the computing system 100 may additionally use other linguistic and/or non-linguistic features and the respective weights as initial parameters to generate a log-linear model.
- the computing system 100 may apply one or more scaling factors to one or more weights to generate a log-linear model. For example, instead of associating the unigram feature 130 d ⁇ ______, “car”> with the weight w c1 150 d as log(P ng (“car”)), the computing system 100 may associate the unigram feature 130 d ⁇ ______, “car”> with a weight ( ⁇ log(Png(“car”))), where ⁇ is a scaling factor.
- the scaling factor may help with the training of the log-linear model to converge to a globally-optimal model when other features that are not n-gram features from an n-gram model are also added to the log-linear model.
- weights When the weights are derived directly from a trained n-gram model, then further training of the log-linear model may not produce many changes to the weights, since the entire probability distribution is fully allocated to the features derived from the n-gram model.
- the weights may tend to remain very close to the initial values set based on the n-gram model
- a scaling factor of less than 1, e.g., 0.9, 0.7, 0.5, etc., can be applied to decrease the weights, causing the total probability distribution represented by the initial weights to be less than 1. Leaving unallocated space within the probability distribution allows room to allocate probability to new features that are different from the n-gram features and backoff features derived from the n-gram model.
- weights for features that are derived from the n-gram model.
- Different scaling factors can be applied to weights of different n-gram features. For example, scaling factors can be assigned based on the order of the n-gram. Weights for four-gram features can be determined using one scaling factor, weights for three-gram features can be determined using a different scaling factor, and so on. Similarly, the scaling factors used to determine weights for n-gram features can vary according to the frequency or probability of occurrence indicated by the n-gram model.
- the computing system 100 can optionally train the log-linear model. Because the initial weights are derived from the n-gram model, the log-linear model inherits, in part or in its entirety, the training state of the n-gram model. This can be advantageous because the training process for an ML n-gram language model can be faster and less computationally expensive than the training process for a log-linear language model. After initialization, further training of the log-linear model can refine the log-linear model and adjust the weights. Further training can also allow the log-linear model to incorporate additional features that do not directly correspond to the n-gram parameters and backoff parameters of the n-gram model. In particular, the log-linear model can define non-linguistic features that represent non-linguistic context elements, such as a geographical location, a gender of a user, a time, and so on, and further training can allow appropriate weights to be generated for these features.
- training data used to train the n-gram model is used to train the log-linear model.
- other training data is used to train the log-linear model.
- additional training data 170 is used to train the log-linear model.
- the additional training data 170 may include non-linguistic data associated with a unigram such as the location of a user device, a gender of the user, the time when the utterance is spoken, etc.
- one or more of the n-gram weights 150 may change as a result of training.
- one or more of the backoff weights 160 may change as a result of training. When other features are included in the log-linear model, those weights for those features may also change as a result of training.
- FIG. 2 is a block diagram that illustrates an example of a computing system 200 for generating a log-linear model based on an n-gram model, where backoff features are implicitly incorporated in the n-gram features.
- the system 200 of FIG. 2 accounts for backoffs without including explicit backoff features or backoff weights.
- the functions performed by the computing system 200 can be performed by one or more individual computer systems or can be distributed across multiple computer systems.
- a backoff feature may be included in an n-gram feature during an initialization of a log-linear model to produce a model having a smaller size, as the log-linear model does not explicitly store the backoff features.
- FIG. 2 shows stages (A) to (E) which illustrate a flow of data.
- the computing system 200 obtains n-gram parameters 210 from an n-gram model, similar to the descriptions in FIG. 1 .
- the computing system 200 may be configured to obtain backoff parameters 220 from the n-gram model.
- the backoff parameters 220 may be values that have been manually assigned by a developer of the n-gram model.
- the backoff parameters 220 may be values that have been automatically assigned during the n-gram model training.
- the backoff parameters 220 may be a predetermined value for all n-grams.
- the computing system 200 determines n-gram features 230 for a log-linear model based on the n-gram model, similar to the descriptions in FIG. 1 .
- an n-gram feature 230 is defined for each of the n-grams of the n-gram model.
- the n-gram model includes a four-gram “I have a car”, corresponding trigrams “I have a” and “have a car”, corresponding bigrams “I have”, “have a”, and “a car”, and corresponding unigrams “I”, “have”, “a”, “car.”
- the computing system 200 may determine n-gram features ⁇ “x 1 . . . x n ⁇ 1 ”
- “x n ”> corresponding to n-grams X x 1 . . .
- each n-gram feature represents a presence of the word x n given the preceding words x 1 to x n ⁇ 1 in an n-gram.
- the n-gram features 230 may include a four-gram feature 230 a ⁇ “I have a”, “car”> to represent a presence of the word “car” given the preceding words “I have a” in a four-gram.
- the n-gram features 230 may include a trigram feature 230 b ⁇ “have a”, “car”> to represent a presence of the word “car” given the preceding words “have a” in a trigram.
- the n-gram features 230 may include a bigram feature 230 c ⁇ “a”, “car”> to represent a presence of the word “car” given the preceding word “a” in a bigram.
- the n-gram features 230 may include a unigram feature 230 d ⁇ ”______”, “car”> to represent a presence of the word “car” in a unigram.
- the computing system 200 does not determine backoff features for a log-linear model based on the n-gram model because the backoff features are incorporated in the weights of the n-gram features, as described below.
- the computing system 200 determines weights 250 of the n-gram features 230 in the log-linear model.
- the computing system 100 may initialize weights of n-gram features such that the weights incorporate backoff features.
- the probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model.
- the probabilities of word occurrences generated by the log-linear model may be correlated to the corresponding probabilities generated by the n-gram model when the probability determined by the log-linear model equals the probability determined by the n-gram model scaled by a normalization factor.
- the computing system 200 may be configured to determine weights w c4 250 a , w c3 250 b , w c2 250 c , and w c1 250 d for the four-gram feature 130 a “ ⁇ ”I have a”, “car>”, the trigram feature 130 b “ ⁇ ”have a”, “car>”, the bigram feature 130 c “ ⁇ ”a”, “car>”, and the unigram feature 130 d “ ⁇ ”______”, “car>” as follows.
- Several of the weight calculations include terms based on n-gram backoff features b bng :
- w c4 log( P ng (“car
- the probability of the word “car” being spoken by a user in a log-linear model may be formulated as:
- Z is a normalization factor that represents an exponential of weights of all the words ⁇ in the n-gram features ⁇ “I have a”, “ ⁇ ”>, ⁇ “have a”, “ ⁇ ”>, ⁇ “a”, ⁇ ” ⁇ , and ⁇ ______, “ ⁇ ”> in the log-linear model, as described in FIG. 1 .
- the normalization factor Z may include weights of n-gram features 230 a ⁇ ”I have a”, “car”>, 230 b ⁇ “have a”, “car”>, 230 c ⁇ “a”, “car”>, 230 d ⁇ ______, “car”>, 232 a ⁇ “have a”, “truck”>, 232 b ⁇ “a”, “truck”>, and 232 c ⁇ ______, “truck”>.
- the weights of backoff features are zero, such that the log-linear model does not need to store backoff features and respective weights.
- the computing system 200 may be configured to determine weights w t3 252 a , w t2 252 b , and w t1 252 c for the trigram feature 232 a “ ⁇ ”have a”, “truck>”, the bigram feature 232 b “ ⁇ ”a”, “truck>”, and the unigram feature 232 c “ ⁇ ”______”, “truck>”, respectively.
- the computing system 200 may initialize w t3 252 a , w t2 252 b , and w t1 252 c of the log-linear model based on the n-gram parameters 212 a to 212 c from the n-gram model as:
- the weight may be formulated as:
- the probability determined by the log-linear model for the occurrence of the word “truck” may then be formulated as:
- Z is a normalization factor as described above. Since the weights of the n-gram features 232 a ⁇ “have a”, “truck”> and 232 b ⁇ “a”, “truck”> are included in both the numerator and the denominator of the normalization factor Z, the implicit backoff parameters b bng (“have a”) and b bng (“a”) cancel. Moreover, the normalization factor Z additionally includes a weight 250 a w c4 for the four-gram feature 230 a ⁇ “I have a”, “car”>, where the weight 250 a includes a term ⁇ log(b bng (“I have a”)) in the denominator but not the numerator.
- the computing system 200 uses the determined features and weights to generate a log-linear model.
- the computing system 100 may use the n-gram features 230 and the respective weights 250 as initial parameters to generate a log-linear model, where the backoff features are incorporated in the weights of the n-gram features.
- the computing system 200 may apply one or more scaling factors to one or more weights to generate a log-linear model.
- the computing system 200 may associate the unigram feature 230 d ⁇ ______, “car”> with a weight ( ⁇ log(Png(“car”))), where ⁇ is a scaling factor.
- the scaling factor may help with the training of the log-linear model to converge to a globally-optimal model when other features that are not n-gram features from an n-gram model are also added to the log-linear model.
- the computing system 200 can optionally train the log-linear model.
- training data used to train the n-gram model is used to train the log-linear model.
- other training data is used to train the log-linear model.
- additional training data 270 is used to train the log-linear model.
- FIG. 3 is a diagram that illustrates an example of a system 300 for speech recognition using a log-linear model.
- the system 300 includes a client device 310 , a computing system 320 , and a network 318 .
- the computing system 320 receives audio data 312 and, in some implementations, linguistic context data 314 and/or non-linguistic context data 316 from the client device 310 .
- the computing system 320 provides scores determined from the non-linguistic context data 316 to a language model 350 , which provides output that the computing system 320 uses to determine a transcription for the audio data 312 .
- the figure shows stages (A) to (H) which illustrate a flow of data.
- the client device 310 can be, for example, a desktop computer, a laptop computer, a cellular phone, a smart phone, a tablet computer, a music player, an e-book reader, a wearable computer, a navigation system, or other device.
- the functions performed by the computing system 320 can be performed by individual computer systems or can be distributed across multiple computer systems, e.g., one or more server systems.
- the network 318 can be wired or wireless or a combination of both, and may include private networks and/or public networks, such as the Internet.
- a system receives audio data indicating characteristics of an utterance and context data indicating non-linguistic context of the utterance. Scores for one or more non-linguistic features can be generated based on the context data. The scores can be provided to a language model trained to estimate likelihoods based at least in part on scores for non-linguistic features. Output of the language model can be received and used to determine a transcription for the utterance.
- the language model is a log-linear model or maximum entropy model.
- the language model comprises a support vector machine model, a neural network, a set of classifiers, or another type of model.
- a user 302 speaks and the client device 310 detects the utterance 304 of the user 302 .
- the client device 310 may record the utterance 304 using a microphone.
- the user 302 may provide the utterance 304 as voice input to any of a variety of applications, including, for example, an e-mail application, a calendar application, a mapping or navigation application, and so on.
- the utterance 304 may represent any of a variety of types of input, for example, a query, a message recipient, the body of a message, a voice command, an address, a phone number, and so on.
- the user 302 is dictating the contents of an e-mail message while a “Mail” application is running on the client device 310 .
- the user 302 previously entered the text “Let's meet at the” as part of the message, and the utterance 304 includes the word “beach” as further input to add to the message.
- the client device 310 collects information and sends information to the computing system 320 over the network 318 .
- the information may be sent with, for example, a request for a transcription of the utterance.
- the client device 302 sends audio data 312 for the utterance 304 to the computing system 320 .
- the audio data 312 may be, for example, a recording of the utterance 304 , or information derived from the detected utterance 304 , such as filterbank energy values, mel-frequency cepstral coefficients (MFCCs), or scores for other acoustic features.
- MFCCs mel-frequency cepstral coefficients
- the client device 310 may also send linguistic context data 314 that indicates a linguistic context for the utterance 304 .
- the client device 310 may provide data that indicates the words that the utterance 304 follows.
- the linguistic context data 314 indicates the words “Let's meet at the” that immediately precede the utterance 304 .
- the linguistic context data 314 provides a specific amount of text, for example, the previous one, two, three, five, or ten words, or the text recognized within a predetermined amount of time.
- the linguistic context may include words that were previously spoken by the user and are recognized, and/or text that was entered or accessed in another manner. For example, a user could open a text file, place a cursor at a particular position in the text, and begin speaking to insert additional text. Some amount of text before the cursor may be provided as linguistic context, regardless of how the text in the file was entered.
- the client device 310 may also determine and send non-linguistic context data 316 to indicate a non-linguistic context for the utterance 304 .
- the non-linguistic context data may indicate, for example, characteristics of the environment in which the utterance 304 is spoken.
- the non-linguistic context data 314 can indicate factors related to the physical environment of the user 302 or client device 310 , such as geographical location, time, temperature, weather, or ambient noise.
- the non-linguistic context data 314 can provide information about the physical state of the client device 310 , for example, whether the device 310 is moving or stationary, the speed of movement of the device 310 , whether the device 310 is being held or not, a pose or orientation of the device 310 , whether or not the device 310 is connected to a docking station, and/or the type of docking station to which the client device 310 is connected.
- the non-linguistic context data 314 can provide information about the operating state of the client device 310 , for example, an identifier for an application running on the client device 310 , or a category or classification for the application to which that the utterance 304 was provided as input.
- the non-linguistic context data can indicate a particular input field, input field label, an input text format for a field, an identifier for a web page or Internet domain, or other information.
- the non-linguistic context data 314 can also indicate information about the user 302 that spoke the utterance, for example, a user identifier, whether the user is male or female, or other information from a user profile for the user.
- the client device 310 determines its location, for example, using a global positioning system (GPS) module or other techniques, and determines that the client device 310 is located in the city of Los Angeles. The client device 310 also determines that the utterance 304 was recorded as input to a mail application running on the client device 310 . The client device 310 provides data indicating the location, e.g., “Los Angeles,” and the active application, e.g., the “Mail” application, to the computing system 320 as non-linguistic context data 316 . The client device also provides the audio data 312 and the linguistic context data 314 to the computing system.
- GPS global positioning system
- the computing system 320 uses a speech recognizer module 330 to determine candidate transcriptions 335 for the utterance 304 .
- the candidate transcriptions 335 may be provided as, for example, a list, a word lattice, or in other forms.
- the candidate transcriptions 335 may be scored or ranked to indicate which candidate transcriptions 335 the speech recognizer module 330 estimates to be most likely to be correct transcriptions.
- the candidate transcriptions 335 represent a set of highest ranking or most likely transcriptions, as estimated by the speech recognizer 330 . This set can be an n-best list, including, for example, the top 3, 5, 30, 25, or other integer number of candidate transcriptions.
- the speech recognizer module 330 uses an acoustic model and a language model to identify the candidate transcriptions 335 .
- the models used by the speech recognizer module 330 may or may not use non-linguistic context data to determine candidate transcriptions. Accordingly, in some instances, the candidate transcriptions 335 may be determined based on the audio data 312 and the linguistic context data 314 , without being influenced by the non-linguistic context data 316 .
- Another language model may use information about the non-linguistic context to re-score or re-rank the candidate transcriptions 335 to improve accuracy.
- the speech recognizer module 330 may use the non-linguistic context data 316 to identify and/or score the candidate transcriptions 335 .
- the computing system 320 uses a feature extraction module 340 to determine feature scores 345 for various different features.
- the set of features that feature scores 345 are determined for is the set of features defined in a language model 350 that will receive the feature scores 345 as input.
- the feature extraction module 340 can determine which n-gram features and backoff features should be set as active, and which should be set as inactive. For example, the computing system 320 can evaluate each candidate transcription to determine a likelihood of occurrence of the candidate transcription given the context.
- the computing system 320 may compare n-grams comprising a candidate transcription and at least a portion of the context to n-grams in an n-gram feature dictionary for a language model 350 . For the candidate transcription “beach,” the computing system 320 can determine whether the n-gram “Let's meet at the beach” matches any of the 5-grams in the n-gram feature dictionary.
- the matching n-gram feature is given a feature score of “1,” and all other n-gram features for 5-grams are given a feature score of “0.” Similarly, since the 5-gram was found to have a corresponding n-gram feature, none of the backoff features are activated (e.g., all are given a value of “0”) By contrast, if none of the n-gram features match “Let's meet at the beach,” then one or more backoff features will be activated.
- each of the following prefix backoff features may be activated if they are defined as part of the model 150 : “ ⁇ backoff-5>,” ⁇ backoff-4, beach>,” “ ⁇ backoff-3, the beach>,” “ ⁇ backoff-2, at the beach>,” “ ⁇ backoff-1, meet at the beach>.”
- Suffix backoff features e.g., “ ⁇ Let's meet at the, backoff-1>,” and other backoff features may also be activated based on the context. All other backoff features that do not correspond to the n-gram under evaluation, e.g., “ ⁇ backoff-4, house>” or “ ⁇ backoff-3, the roof>,” would be assigned a value of “0.”
- the evaluation of candidate transcription “beach” would also involve determination of feature scores for features corresponding to n-grams with lower values of n. For example, feature scores n-gram features and backoff features representing 4-grams would be determined with respect to the 4-gram “meet at the beach,” feature scores for features representing 3-grams would be determined with respect to the 3-gram “at the beach,” and so on.
- the feature scores 345 are provided as input to the language model 350 .
- the language model 350 Based on the feature scores 345 , the language model 350 provides a set of output values 355 , which may indicate likelihoods that one or more words will occur in the current context.
- the language model 350 can be a model that has been trained to estimate the likelihood of a word or phrase occurring based on scores for linguistic and/or non-linguistic features.
- the language model 350 can determine a posterior probability of a current word, e.g., the first word of the utterance 304 , given information about the context for the utterance 304 , which may include linguistic context, e.g., the prior words “Let's meet at the,” and/or non-linguistic context, e.g., location, device state, application, user characteristics, etc.
- the feature scores 345 are determined in stage (D) for the features that the language model 350 was trained to be able to process and use to determine word likelihoods.
- the language model 350 may include a set of internal weights that represent the training state of the language model 350 . These weights may indicate how various aspects of context make words more or less likely to occur. Typically, the weights in the language model 350 are set during training of the language model 350 and do not change during use of the language model. However, the weights are trained using examples of input from a variety of different users and different environments, so the language model 350 is able to estimate likelihoods of words occurring given many different types of linguistic and non-linguistic contexts.
- the language model 350 is a log-linear model.
- Log-linear models may effectively take into account scores from large numbers of features and scores for features of multiple different types.
- a log-linear model may be used to combine word n-gram feature scores with feature scores indicating physical environment, user characteristics, and other factors.
- log-linear models may provide greater efficiency or smaller storage requirements than, for example, hidden Markov models (HMMs) or other statistical models.
- HMMs hidden Markov models
- the language model 350 may be a log-linear model or other maximum entropy model.
- Other types of models and other training techniques may additionally or alternatively be used.
- support vector machines, neural networks, classifiers, and other types of models may be used to process various contextual features, including linguistic feature scores, non-linguistic feature scores, and/or other types of information.
- an integrated circuit or other device could implement a neural network to serve as a language model.
- a set of multiple classifiers could each be trained to process one or more feature scores, and a system could combine the outputs of the classifiers to indicate a probability of occurrence of a word or other lexical item.
- any appropriate model may be used, where the model receives values for contextual features and provides output indicative of a likelihood of occurrence of a word based on the received values.
- the output values 355 provided by the language model 350 may be, for example, scores indicating likelihoods of occurrence of different words given the context indicated by the feature scores 345 .
- the language model 350 may indicate a posterior probability P(y
- the language model 350 may be used to obtain a score for each of multiple different words within a particular candidate transcription.
- the techniques described above can be used to determine an output of the language model 350 for a first word of a candidate transcription. Then, using an assumption that the first word of the candidate transcription is correct, the same techniques may be used to determine an output of the language model 350 for the second word in the candidate transcription. For this second word, the linguistic context has changed, e.g., by the inclusion of the first word of the candidate transcription.
- the computing system 320 may use the feature extraction module 340 to determine a new set of feature scores that are appropriate for the new context. In this manner, the computing system 320 may use the language model 350 to determine a score for each of the words in each of the candidate transcriptions 335 , based on the particular sequence of words that each word follows.
- the computing system 320 uses a re-scoring module 360 to determine scores 365 for the different candidate transcriptions 335 . If a candidate transcription includes multiple words, the outputs from the language model 350 for each of the different words of the candidate transcription can be used by the re-scoring module 360 to determine a score 365 indicating a likelihood of occurrence of each candidate transcription as a whole, given the context in which the utterance was spoken.
- the computing system 320 selects a transcription for the utterance 304 based on the scores 365 . For example, the computing system 320 may select the candidate transcription 335 having the score 365 that indicates the highest likelihood of occurrence.
- the computing system 320 provides the selected transcription to the client device 302 .
- the client device 302 may insert the transcription in the application that is running, to complete the user's intended phrase, “Let's meet at the beach.”
- non-linguistic context data is used to re-score candidate transcriptions 335 that were determined without taking into account non-linguistic context data.
- the speech recognizer 330 may use a language model, such as the language model 350 , that uses non-linguistic context data to select and rank the candidate transcriptions. In these implementations, a separate re-scoring process may not be needed.
- the input to the language model 350 may include only feature scores for non-linguistic features.
- feature scores may be provided for both linguistic and non-linguistic features.
- a language model that determines likelihoods using both linguistic and non-linguistic features may have better accuracy than a language model that provides scores based on only linguistic features or only non-linguistic features.
- the backoff features may include backoff features corresponding to elements of non-linguistic context.
- some standard features or n-gram features may represent the occurrence of a word or other outcome with a context that includes a particular time, e.g., time of day, day of the week, date, year, etc., or range of time, a particular geographical location, e.g., country, state, city, zip code, etc., or a particular user characteristic, e.g., a user's gender, age, educational level, primary language spoken, etc.
- backoff features may be used to represent the occurrence of a city and word combination that has no specific feature in the model 350 .
- a backoff feature may represent any of multiple cities, e.g., “ ⁇ city_backoff; cheese steak>”, which can represent the occurrence of the term “cheese steak” in an unknown city or any city that does not have a specific feature in the model 350 for the occurrence of “cheese steak” in that city.
- Further backoffs can be defined, such as “ ⁇ city_backoff; cheese backoff-1>” or “ ⁇ city_backoff; backoff-2>,” with each feature represents different combinations of words and cities.
- features of a model may ask a question about the domain of the input.
- the feature may include a component indicating whether the input was entered for a particular domain.
- Examples of different domains may be different types of searches, e.g., web search, image search, movie library search, etc.
- different domains may represent different categories of applications or tasks, e.g., voice search, e-mail, shopping, voice commands, navigation, and so on.
- Backoff features can correspond to instances where a combination of words or phrases with a domain does not have a corresponding feature in the model, e.g., “ ⁇ domain_backoff; who>” or “ ⁇ domain_backoff; main street>.” For example, if a user speaks the word “who” for a navigation application, and there is no corresponding feature for that word in that specific context, the backoff feature “ ⁇ domain_backoff; who>” can be activated. This indicates that, the domain component had to be omitted or backed off since the combination did not have a corresponding feature in the model.
- the language model 350 may indicate the likelihood of occurrence of sequences of language units other than words.
- the language model 350 may predict n-grams of characters, phonemes, or other language units.
- the language model 350 has n-gram features and backoff features based on for n-grams of the type of language unit used. For example, when the language units for a language model are phonemes, each n-gram feature represents a specific n-gram of phonemes, and each backoff feature represents a set of n-grams that include the same number of phonemes (e.g., the same order or n-gram length) and that do not have a corresponding n-gram feature in the model 350 .
- FIG. 4 is a flow diagram that illustrates an example of a process 400 for generating a log-linear language model based on an n-gram model.
- the process 400 may be performed by one or more systems, such as the computing system 100 , the computing system 200 , or the computing system 320 .
- the system obtains n-gram parameter values derived from an n-gram language model, where the n-gram parameter values include n-gram parameter values for n-grams that include multiple words ( 402 ).
- the n-gram parameters 110 in FIG. 1 include parameter values for respective n-grams in an n-gram model.
- the corresponding parameter value may indicate a conditional probability of an occurrence of a last word in the n-gram given an occurrence of one or more words that precede the last word in the n-gram.
- the n-gram parameters 110 in FIG. 1 represents the probability that a user has spoken the word “x n ” given that the user has spoken the words “x 1 . . . x n ⁇ 1 ” in the n-gram X, as described in Equation (10).
- the n-gram language model may be configured to assign, to an n-gram that does not have a corresponding parameter value in the n-gram language model, a score based on a parameter value in the n-gram language model for a sub-sequence of words within the n-gram.
- the n-gram model in FIG. 1 includes backoff parameters 120 that are used to calculate a parameter value (e.g., P(“truck”
- the system determines n-gram features for a log-linear language model based on the n-grams corresponding to the obtained n-gram parameter values ( 404 ). For example, the system 100 in FIG. 1 may determine the n-gram features 130 based on the n-grams in the n-gram model. In some implementations, for each n-gram parameter in the n-gram language model, the system may determine an n-gram feature that represents an occurrence of a particular word in a particular context comprising one or more words. For example, in FIG. 1 , the n-gram feature 130 a ⁇ “I have a”, “car”> represents an occurrence of the word “car” in the particular context “I have a”.
- the system may identify each of the n-grams corresponding to the n-gram parameter values derived from the n-gram language model. The system may then determine the n-gram features to include a feature corresponding to each identified n-gram. For example, the computing system 100 in FIG. 1 may identify a four-gram “I have a car”, trigrams “I have a” and “have a car”, bigrams “I have”, “have a”, “a car”, and unigrams “I”, “have”, “a”, and “car” from the four-gram “I have a car” in the n-gram model.
- the system determines a weight for each of the determined n-gram features ( 406 ).
- the computing system 100 may determine n-gram weights 150 corresponding to the n-gram features 130 .
- the weight is respectively determined based on (i) an n-gram parameter value that is derived from the n-gram language model and that corresponds to a particular n-gram of multiple words, and (ii) an n-gram parameter value that is derived from the n-gram language model and that corresponds to an n-gram that is a sub-sequence within the particular n-gram.
- the computing system 100 may initialize w c4 150 a of the log-linear model based on the n-gram parameter 110 a from the n-gram model as formulated in Equation (14).
- the system generates a log-linear language model ( 408 ).
- the log-linear language model has the determined n-gram features, and the determined n-gram features in the log-linear language model having weights that are initialized based on the determined weights.
- the computing system 100 in FIG. 1 may generate a log-linear model based on n-gram features 130 and n-gram weights 150 .
- the log-linear language model may be generated to indicate, for one or more n-grams, likelihoods of occurrence that equal to likelihoods of occurrence indicated by the n-gram language model for the one or more n-grams.
- Equation (18) by summing the weights 150 a to 150 d associated with n-gram features 130 a to 130 d , most of the terms in the weights cancel with each other, and the probability determined by the log-linear model correlates to the probability determined by the n-gram model (e.g., element 110 a ) scaled by a normalization factor.
- the system may obtain backoff parameter values derived from the n-gram language model, the backoff parameter values representing n-gram backoffs from one order of n-gram to a lower order of n-gram.
- the computing system 100 in FIG. 1 may obtain backoff parameters 120 derived from the n-gram model.
- the system may determine backoff features for the log-linear language model that represent the backoffs of the n-grams in the n-gram language model.
- the computing system 100 may determine backoff features 140 for the log-linear model.
- the system may determine a weight for each backoff feature in the determined backoff features, wherein each of the weights for the determined backoff features is respectively determined based on a backoff parameter value derived from the n-gram language model.
- the computing system 100 may determine weights 160 for the backoff features 140 based on the backoff parameters 120 in the n-gram model.
- the system may generate the log-linear language model to have the backoff features and corresponding weights that are initialized based on the determined weights for the backoff features.
- the computing system 100 may generate a log-linear model based on backoff features 140 and backoff weights 160 in addition to n-gram features 130 and n-gram weights 150 .
- the weights for the backoff features in the log-linear language model each represents a probability adjustment equivalent to the adjustment represented by a corresponding backoff parameter value in the n-gram language model. For example, referring to Equation (12), by summing the weights 152 a to 152 c associated with n-gram features 132 a to 132 c and the weight 160 a associated with the backoff feature 140 a , many terms cancel with each other, and the probability determined by the log-linear model correlates to the probability determined by the n-gram model scaled by a normalization factor.
- the system may, for at least some of the weights, incorporate a backoff parameter value from the n-gram language model in the weight determination.
- the computing system 200 in FIG. 2 may implicitly incorporate a backoff feature in the determination of the n-gram weights 250 .
- the system may train the log-linear language model to adjust the weights. For example, the system may train the log-linear language model using stochastic gradient descent training and using a set of training data that is different from a set of training data used to train the n-gram language model. In some implementations, the system may re-train the weights for the backoff features based on the determined weights for the backoff features. For example, one or more backoff weights of the backoff weights 160 associated with the backoff feature 140 may change after re-training.
- the log-linear language model may include non-linguistic features corresponding to one or more aspects of non-linguistic context.
- the non-linguistic features may include features indicative of a user characteristic, a time, a geographic location, an application, or an input field.
- the system uses the log-linear language model to determine a transcription for an utterance ( 410 ).
- the computing system 320 in FIG. 3 may use a log-linear model to transcribe spoken utterances “Let's meet at the beach” from a user of a client device 310 .
- the system provides the transcription for the utterance ( 412 ).
- the computing system 320 in FIG. 3 may provide the transcribed spoken utterances “beach” back to the client device 310 .
- FIG. 5 shows an example of a computing device 500 and an example of a mobile computing device 550 that can be used to implement the techniques described above.
- the computing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- the mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
- the computing device 500 includes a processor 502 , a memory 504 , a storage device 506 , a high-speed interface 508 connecting to the memory 504 and multiple high-speed expansion ports 510 , and a low-speed interface 512 connecting to a low-speed expansion port 514 and the storage device 506 .
- Each of the processor 502 , the memory 504 , the storage device 506 , the high-speed interface 508 , the high-speed expansion ports 510 , and the low-speed interface 512 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 502 can process instructions for execution within the computing device 500 , including instructions stored in the memory 504 or on the storage device 506 to display graphical information for a GUI on an external input/output device, such as a display 516 coupled to the high-speed interface 508 .
- an external input/output device such as a display 516 coupled to the high-speed interface 508 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 504 stores information within the computing device 500 .
- the memory 504 is a volatile memory unit or units.
- the memory 504 is a non-volatile memory unit or units.
- the memory 504 may also be another form of computer-readable medium, such as a magnetic or optical disk.
- the storage device 506 is capable of providing mass storage for the computing device 500 .
- the storage device 506 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product can be tangibly embodied in an information carrier.
- the computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as the memory 504 , the storage device 506 , or memory on the processor 502 .
- the high-speed interface 508 manages bandwidth-intensive operations for the computing device 500 , while the low-speed interface 512 manages lower bandwidth-intensive operations.
- the high-speed interface 508 is coupled to the memory 504 , the display 516 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 510 , which may accept various expansion cards (not shown).
- the low-speed interface 512 is coupled to the storage device 506 and the low-speed expansion port 514 .
- the low-speed expansion port 514 which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 520 , or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as a laptop computer 522 . It may also be implemented as part of a rack server system 524 . Alternatively, components from the computing device 500 may be combined with other components in a mobile device (not shown), such as a mobile computing device 550 . Each of such devices may contain one or more of the computing device 500 and the mobile computing device 550 , and an entire system may be made up of multiple computing devices communicating with each other.
- the mobile computing device 550 includes a processor 552 , a memory 564 , an input/output device such as a display 554 , a communication interface 566 , and a transceiver 568 , among other components.
- the mobile computing device 550 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage.
- a storage device such as a micro-drive or other device, to provide additional storage.
- Each of the processor 552 , the memory 564 , the display 554 , the communication interface 566 , and the transceiver 568 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 552 can execute instructions within the mobile computing device 550 , including instructions stored in the memory 564 .
- the processor 552 may be implemented as a chipset of chips that include separate and multiple analog and digital processors.
- the processor 552 may provide, for example, for coordination of the other components of the mobile computing device 550 , such as control of user interfaces, applications run by the mobile computing device 550 , and wireless communication by the mobile computing device 550 .
- the processor 552 may communicate with a user through a control interface 558 and a display interface 556 coupled to the display 554 .
- the display 554 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology.
- the display interface 556 may comprise appropriate circuitry for driving the display 554 to present graphical and other information to a user.
- the control interface 558 may receive commands from a user and convert them for submission to the processor 552 .
- an external interface 562 may provide communication with the processor 552 , so as to enable near area communication of the mobile computing device 550 with other devices.
- the external interface 562 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used.
- the memory 564 stores information within the mobile computing device 550 .
- the memory 564 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units.
- An expansion memory 574 may also be provided and connected to the mobile computing device 550 through an expansion interface 572 , which may include, for example, a SIMM (Single In Line Memory Module) card interface.
- SIMM Single In Line Memory Module
- the expansion memory 574 may provide extra storage space for the mobile computing device 550 , or may also store applications or other information for the mobile computing device 550 .
- the expansion memory 574 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- the expansion memory 574 may be provide as a security module for the mobile computing device 550 , and may be programmed with instructions that permit secure use of the mobile computing device 550 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below.
- NVRAM memory non-volatile random access memory
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the computer program product can be a computer- or machine-readable medium, such as the memory 564 , the expansion memory 574 , or memory on the processor 552 .
- the computer program product can be received in a propagated signal, for example, over the transceiver 568 or the external interface 562 .
- the mobile computing device 550 may communicate wirelessly through the communication interface 566 , which may include digital signal processing circuitry where necessary.
- the communication interface 566 may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others.
- GSM voice calls Global System for Mobile communications
- SMS Short Message Service
- EMS Enhanced Messaging Service
- MMS messaging Multimedia Messaging Service
- CDMA code division multiple access
- TDMA time division multiple access
- PDC Personal Digital Cellular
- WCDMA Wideband Code Division Multiple Access
- CDMA2000 Code Division Multiple Access
- GPRS General Packet Radio Service
- a GPS (Global Positioning System) receiver module 570 may provide additional navigation- and location-related wireless data to the mobile computing device 550 , which may be used as appropriate by applications running on the mobile computing device 550 .
- the mobile computing device 550 may also communicate audibly using an audio codec 560 , which may receive spoken information from a user and convert it to usable digital information.
- the audio codec 560 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of the mobile computing device 550 .
- Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on the mobile computing device 550 .
- the mobile computing device 550 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 580 . It may also be implemented as part of a smart-phone 582 , personal digital assistant, tablet computer, wearable computer, or other similar mobile device.
- implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components.
- the components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system may include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This application claims the benefit of U.S. Provisional Application Ser. No. 62/136,083, filed on Mar. 20, 2015, which is incorporated by reference.
- This specification generally relates to speech recognition systems.
- The use of speech recognition is becoming more and more common. As technology has advanced, users of computing devices have gained increased access to speech recognition functionality. Many users rely on speech recognition in their professions and in other aspects of daily life.
- An n-gram language model may be trained using a corpus of training data to indicate likelihoods of word sequences. The n-gram model may be used to recognize utterances spoken by users of a speech recognition system. A log-linear language model may be used in the speech recognition system as an alternative to the n-gram language model, and doing so can provide various advantages. However, training log-linear language models on a large amount of training data, using convex optimization methods, is known to be computationally expensive. In some implementations, a model-transformation technique for initializing a log-linear language model given an already trained backoff n-gram model may be used to speed up training and to improve the perplexity on a held out test set. For example, a log-linear model may be trained based on the n-gram parameters of the n-gram model to yield performance that is as good as or superior to the n-gram model. Moreover, additional linguistic and/or non-linguistic features may be defined in the log-linear model to further improve the performance of the log-linear model.
- In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of
- Other implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Implementations may include one or more of the following features. For example, the n-gram language model may be configured to assign, to an n-gram that does not have a corresponding parameter value in the n-gram language model, a score based on a parameter value in the n-gram language model for a sub-sequence of words within the n-gram. For each of the n-grams that includes multiple words, the corresponding parameter value may indicate a conditional probability of an occurrence of a last word in the n-gram given an occurrence of one or more words that precede the last word in the n-gram.
- To generate the log-linear language model, the log-linear language model may be generated to indicate, for one or more n-grams, likelihoods of occurrence that equal to likelihoods of occurrence indicated by the n-gram language model for the one or more n-grams. To determine the n-gram features for the log-linear language model, for each n-gram parameter value in the n-gram language model, an n-gram feature that represents an occurrence of a particular word in a particular context including one or more words may be determined.
- To determine the n-gram features for the log-linear language model, each of the n-grams corresponding to the n-gram parameter values derived from the n-gram language model may be identified, the n-gram features may be determined to include a feature corresponding to each identified n-gram.
- Backoff parameter values derived from the n-gram language model may be obtained, the backoff parameter values representing n-gram backoffs from one order of n-gram to a lower order of n-gram. Backoff features for the log-linear language model that represent the backoffs of the n-grams in the n-gram language model may be determined. A weight for each backoff feature in the determined backoff features may be determined, where each of the weights for the determined backoff features may be respectively determined based on a backoff parameter value derived from the n-gram language model. To generate the log-linear language model, the log-linear language model may be generated to have the backoff features and corresponding weights that are initialized based on the determined weights for the backoff features. The weights for the backoff features in the log-linear language model may each represent a probability adjustment equivalent to the adjustment represented by a corresponding backoff parameter value in the n-gram language model. To generate the log-linear language model, the weights for the backoff features may be re-trained based on the determined weights for the backoff features.
- To determine the weight for each n-gram feature, for at least some of the weights, a backoff parameter value from the n-gram language model may be incorporated in the weight determination. The log-linear language model may include non-linguistic features corresponding to one or more aspects of non-linguistic context, the non-linguistic features including features indicative of a user characteristic, a time, a geographic location, an application, or an input field.
- After generating the log-linear language model, the log-linear language model may be trained to adjust the weights. To train the log-linear language model, the log-linear language model may be trained using stochastic gradient descent training and using a set of training data that is different from a set of training data used to train the n-gram language model.
- Advantageous implementations may include one or more of the following features. Training a log-linear model using n-gram parameters from an n-gram model can produce a log-linear model that is at least as accurate as the n-gram model. The training of a log-linear model can be faster because the training of n-gram features derived from an n-gram model is often faster than the training of n-gram features from scratch. In addition to n-gram features, other linguistic or non-linguistic features can be added to a log-linear model to further improve the performance of the log-linear model. A log-linear model converted from a backoff n-gram model may perform better with uncommon phrases (e.g., potential language sequences at the tail of a probability distribution) when compared to traditional training. Using explicit backoff features in the log-linear model provides flexibility and better performance because the log-linear model may be iteratively trained to provide better backoff features. Using implicit backoff features in the log-linear model can provide a reduced model size because the log-linear model does not need to include weights for backoff features corresponding to n-gram features.
- Other implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other potential features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is a diagram that illustrates an example of a system for generating a log-linear language model based on an n-gram model. -
FIG. 2 is a diagram that illustrates another example of a system for generating a log-linear language model based on an n-gram model. -
FIG. 3 is a diagram that illustrates an example of a system for speech recognition with a log-linear language model. -
FIG. 4 is a flow diagram that illustrates an example of a process for generating a log-linear language model based on an n-gram model. -
FIG. 5 is a schematic diagram that shows an example of a computing device and a mobile computing device. - Like reference numbers and designations in the various drawings indicate like elements.
- In general, log-linear based language models are powerful models that allow the incorporation of multiple knowledge sources as features in a unified framework. The log-linear based language models may be extremely flexible but require computationally expensive iterative training algorithms. In some implementations, a feature may be n-grams, a local sequence of n words.
- In general, backoff n-gram Maximum Likelihood (ML) models use only n-gram features, yet can be estimated very efficiently. In some implementations, a backoff n-gram model may be converted into n-gram feature parameters for a log-linear language model. For example, the resulting log-linear language model may be equivalent to the original ML model after the conversion. In some implementations, the log-linear model may be augmented with additional features and then be retrained or adapted, leading to a faster training of log-linear models, while keeping flexibility and power. In some implementations, the log-linear model converted from a backoff n-gram model may perform better on the tail of the distribution when compared to traditional training.
- In some implementations, xi may be the word at position i in the string X, xi−k i−1=xi−k . . . xi−1 may be the prefix history of the string prior to xi, and
P may be a probability estimate assigned to seen n-grams by the specific smoothing method. A backoff n-gram language model formulation may be as follows: -
- In some implementations, a recursive smoothing formulation has two kinds of parameters: n-gram probabilities
P (xi|xi−k i−1) and backoff weights α(xi−k i−1) used to normalize the model when backing off to lower order n-grams. - In some implementations, a log-linear model may be specified as a set of binary features fj(xi,x0 i−1) with associated weights
-
- A standard backoff n-gram language model may be estimated directly from counts c(xi−k i), using closed form analytical formulas. A log-linear model may be trained using iterative numerical techniques based on some form of gradient descent, which may be expensive.
- In some implementations, initialization of the bias feature weights with the relative frequency of the target may be used as a machine learning technique that can be seen as initializing a log-linear model with a 1-gram maximum likelihood model. In some implementations, the initializing of the log-linear model may be done with n-gram of arbitrary order.
- The technique may be seen as generalizing Minimum Discrimination Information (MDI) modeling. In MDI, the log-linear objective function may be augmented with a prior model Q that can be a traditional backoff n-gram or any other language model.
-
- In some implementations, an MDI adapted version of the original model Q may be obtained by allowing an n-gram prior Q to be encoded directly in a subset of the log-linear model features, if these features are kept fixed while the other are retrained.
- In some implementations, a standard backoff n-gram language model may be converted to an equivalent log-linear model as follows. A log-linear language model containing n-grams features may have the following structure:
-
- where wk is simplified notation for the weight of a given n-gram feature of order k. In some implementations, by converting the original n-gram probabilities to the logarithmic domain and by using the nesting structure of n-grams to cancel lower order n-gram scores by higher ones, the following conversion equations may be obtained:
-
- In some implementations, the resulting model may not be intrinsically sparse and may require an implementation with support for backoff features shared between all non-observed n-grams in a given xi−k i−1. In some implementations, these features may be initialized with log α(xi−k i−1).
- In some implementations, this feature may be removed by dividing both the numerator and denominator of equation 8 by α(xi−k i−1), leading to the following sparse conversion equation:
-
w k(x i ,x i−k i−1)=wk(x i ,x i−k i−1)−log α(x i−k i−1) (9) - In some implementations, weights
w for n-grams not included in the original modelP may be zero and the corresponding features removed from the model. - In some implementations, more features may be added by scaling all bootstrapped weights by a constant 0≦λ≦1. This can be seen as the log linear interpolation of the bootstrapped model with an uniform model, and has the effect of flattening the distribution of wi in each context, while preserving the rank of predictions in that context.
-
FIG. 1 is a block diagram that illustrates an example of a computing system 100 for generating a log-linear model based on an n-gram model. The functions performed by the computing system 100 can be performed by one or more individual computer systems or can be distributed across multiple computer systems. - In general, an n-gram language model may be trained using a corpus of training data to indicate likelihoods of word sequences. The n-gram model may be used to recognize utterances spoken by users of a speech recognition system. For example, the speech recognition system may be configured to use the n-gram model to recognize a word spoken by a user based on preceding words that have been spoken by the user. In some implementations, the n-gram model may be trained by the computing system 100. In some other implementations, the n-gram model may be trained by one or more other computing systems not included in
FIG. 1 . - A log-linear language model may be used in the speech recognition system as an alternative to the n-gram language model, and doing so can provide various advantages. In some implementations, the log-linear model may be trained based on the n-gram parameters of the n-gram model to yield performance that is as good as or superior to the n-gram model. In some implementations, additional linguistic and/or non-linguistic features may be defined in the log-linear model to further improve the performance of the log-linear model. For example, the log-linear model may explicitly include backoff features to evaluate words in n-grams that are not included in the n-gram model.
- In the example of
FIG. 1 , a computing system 100 generates a log-linear language model based on parameters of an n-gram language model.FIG. 1 shows stages (A) to (E) which illustrate a flow of data. - During stage (A), the computing system 100 obtains n-
gram parameters 110 of an n-gram language model. In general, an n-gram language model includes n-gram parameters that have been generated to represent likelihoods of words presented in n-grams. In some implementations, the n-gram model may be a maximum likelihood (ML) n-gram model. In some implementations, the computing system 100 may obtain an n-gram model trained by another computing system to obtain the n-gram parameters 110. In some other implementations, the computing system 100 may train the n-gram model using training data to obtain the n-gram parameters 110. In some other implementations, the computing system 100 may obtain n-gram parameters 110 directly from another computing system or a data storage. - In some implementations, an n-gram parameter may be a probability of an occurrence of a word given the occurrence of preceding n−1 words. This probability may be determined based on a set of the training data, where the training data may be a corpus of documents, a corpus of transcribed utterances, spoken utterances from one or more training users, or any other types of training data. For example, a four-
gram parameter 110 a Png(“car”|“I have a”) represents a conditional probability of an occurrence of the word “car” given the preceding three words “I have a,” where the probability is determined according to the frequency that this sequence occurs in the training data. As another example, atrigram parameter 110 b Png(“car”|“have a”) represents a conditional probability of an occurrence of the word “car” given the preceding two words “have a,” where the probability reflects a frequency of occurrence of the sequence in the training data. As another example, abigram parameter 110 c Png(“car”|“a”) represents a conditional probability of an occurrence of the word “car” given the preceding word “a,” where the probability reflects a frequency of occurrence of the sequence in the training data. As another example, aunigram parameter 110 d Png(“car”) represents a probability of occurrence of the word “car,” where the probability is also determined according to the training data. - In some implementations, the n-
gram parameters 110 may be used by a speech recognition system to transcribe utterances spoken by users. For example, the four-gram parameter 110 a Png(“car”|“I have a”) may be used to represent the probability that a user has spoken the word “car” given that the user has spoken the words “I have a.” Similarly, thetrigram parameter 110 b Png(“car”|“have a”) may be used to represent the probability that a user has spoken the word “car” given that the user has spoken the words “have a.” In some implementations, a generalized formulation of the probability for an n-gram X=x1 . . . xn that is in the n-gram model may be formulated as: -
P(x n |x 1 . . . x n−1)=P ng(x n |x 1 . . . x n−1) (10), - where P(xn|x1 . . . xn−1) represents the probability that a user has spoken the word “xn” given that the user has spoken the words “x1 . . . xn−1” in the n-gram X, and Png (xn|x1 . . . xn−1) represents the corresponding n-gram parameter that is in the n-gram model. As described throughout the application, P represents a probability generally, which may not be necessarily stored as a parameter of the n-gram model.
- In general, a user may sometimes speak an utterance that includes an n-gram that is not in the n-gram model. As used herein, an n-gram language model is considered to “include” an n-gram when it has a parameter value, such as a conditional probability of occurrence, corresponding to the n-gram. In some implementations,
backoff parameters 120 in an n-gram model may be used to determine the probability of occurrence of a word when the n-gram is not included in the n-gram model. A backoff parameter represents an adjustment to the probability given a particular n-gram is not included in an n-gram model. For example, if the n-gram model does not have a parameter corresponding to the four-gram “I have a truck”, the probability that a user has spoken the word “truck” given that the user has spoken the words “I have a” may be represented by a product between thebackoff parameter 120 a and the probability that a user has spoken the word “truck” given that the user has spoken the words “have a” as: -
P(“truck”|“I have a”)=b ng(“I have a”)×P(“truck”|“have a”) (11). - If the tri-gram “have a truck” is included in the n-gram model, as represented by the n-gram parameter 112 a, the probability in Equation (11) may be represented by a product between the
backoff parameter 120 a and thetrigram parameter 110 b as: -
P(“truck”|“I have a”)=b ng(“I have a”)×P ng(“truck”|“have a”) (12). - A generalized formulation of the probability for an n-gram X=x1 . . . xn that is not in the n-gram model may be formulated as:
-
P(x n |x 1 . . . x n−1)=b ng(x 1 . . . x n−1)×P(x n |x 2 . . . x n−1) (13), - where P(xn|x1 . . . xn−1) represents the probability that a user has spoken the word “xn” given that the user has spoken the words “x1 . . . xn−1” in the n-gram X, bng(x1 . . . xn−1) represents the backoff parameter for the preceding words in the n-gram model, and P(xn|x2 . . . xn−1) represents the probability that a user has spoken the word “xn” given that the user has spoken the words “x2 . . . xn−1”. In some implementations, the
backoff parameters 120 may be values that have been manually assigned by a developer of the n-gram model. In some other implementations, thebackoff parameters 120 may be values that have been automatically assigned during the n-gram model training. In some implementations, thebackoff parameters 120 may be a predetermined value for all n-grams. In some implementations, a single backoff value can be used for each length of n-gram. For example, a single four-gram backoff parameter may be used for any instance when a four-gram not in the model is encountered. A trigram backoff parameter, which may have a different value from the four-gram backoff parameter, may be used when evaluating any trigram not in the model. - In some implementations, the model includes different backoff parameters for backoffs involving different n-grams of the same length. For example, the parameter that the model designates for backoff from a four-gram to the trigram “I have a” may be different from the parameter the model designates for backoff from a four-gram to the trigram “I am a.” The model may include appropriate backoff parameters to be able to evaluate any potential n-gram that the model may encounter. In some implementations, the n-gram parameters and the backoff parameters may be formulated as expressed in Equation (1).
- During stage (B), the computing system 100 determines n-gram features 130 for a log-linear language model based on the n-gram language model. In general, a speech recognition system can use a log-linear language model that includes the n-gram features 130 and/or other linguistic and/or non-linguistic features to recognize spoken utterances. In some implementations, a log-linear model may be formulated as expressed in Equation (2), Equation (4), or Equation (5) above.
- In some implementations, the n-gram features 130 may be determined based on the n-grams included in an n-gram model. For example, the n-gram model includes a four-gram “I have a car”, corresponding trigrams “I have a” and “have a car”, corresponding bigrams “I have”, “have a”, and “a car”, and corresponding unigrams “I”, “have”, “a”, “car.” An n-
gram feature 130 of the log-linear model may be defined for each of these different n-grams. In general, an n-gram feature 130 of the log-linear model may be defined for each n-gram parameter 110 of the n-gram model. In some implementations, based on these n-grams in the n-gram model, the computing system 100 may determine n-gram features <“x1 . . . xn−1”|“xn”> corresponding to n-grams X=x1 . . . xn, where each n-gram feature represents the occurrence of the word xn given the preceding words x1 to xn−1 in an n-gram. For example, the n-gram features 130 may include a four-gram feature 130 a <“I have a”, “car”> to represent the occurrence of the word “car” given the preceding words “I have a” in a four-gram. As another example, the n-gram features 130 may include atrigram feature 130 b <“have a”, “car”> to represent the occurrence of the word “car” given the preceding words “have a” in a trigram. As another example, the n-gram features 130 may include abigram feature 130 c <“a”, “car”> to represent the occurrence of the word “car” given the preceding word “a” in a bigram. As another example, the n-gram features 130 may include aunigram feature 130 d <“______”, “car”> to represent the occurrence of the word “car” in a unigram. - In some implementations, the computing system 100 may determine backoff features 140 for a log-linear model based on the n-gram model. The backoff features 140 may be used by a speech recognition system to determine a last word in an n-gram spoken by the user, where the n-gram is not included in the log-linear model. In some implementations, the backoff features 140 may be determined based on the n-grams included in an n-gram model. For example, the backoff features 140 may include a
backoff feature 140 a <“I have a”, BO> to represent an absence of a four-gram in the n-gram model, where the preceding trigram “I have a” is included in the n-gram model. As another example, the backoff features 140 may include abackoff feature 140 b <“have a”, BO> to represent an absence of the trigram in the n-gram model, where the preceding bigram “have a” is included in the n-gram model. As another example, the backoff features 140 may include abackoff feature 140 c <“a”, BO> to represent an absence of the bigram in the n-gram model, where the preceding unigram “a” is included in the n-gram model. In some implementations, the backoff features defined for the log-linear model correspond to the backoff parameters of the n-gram model. The log-linear model can have abackoff feature 140 for eachbackoff parameter 120 of the n-gram model. - During stage (C), the computing system 100 determines
weights 150 or scores for the n-gram features 130 in the log-linear model. Each n-gram feature can be individually assigned aweight 150. The weights can be used to determine probabilities of a sequence of words. For example, given that the user has spoken the words “I have a”, a speech recognition system based on a log-linear model may determine the probability of the word “car” being spoken by a user based on n-gram features “<”I have a”, “car”>”, “<”have a”, “car”>”, “<”a”, “car”>”, and “<”______”, “car”>”, and the respective weight associated with each n-gram feature. - In some implementations, the computing system 100 may initialize weights of n-gram features such that the probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model. For example, the weights may be set so that the log-linear model produces the same probabilities as the n-gram model. This weight initialization provides an advantage that the log-linear model would perform at least as well as the n-gram model. For example, the computing system 100 may be configured to determine weights wc4 150 a, wc3 150 b, wc2 150 c, and
w c1 150 d for the four-gram feature 130 a “<”I have a”, “car>”, thetrigram feature 130 b “<”have a”, “car>”, thebigram feature 130 c “<”a”, “car>”, and theunigram feature 130 d “<”______”, “car>”, respectively. The computing system 100 may initialize wc4 150 a, wc3 150 b, wc2 150 c, andw c1 150 d of the log-linear model based on the n-gram parameters 110 a to 110 d from the n-gram model as: -
w c4=log(P ng(“car|“I have a”))−log(P ng(“car”|“have a”)) (14), -
w c3=log(P ng(“car|“have a”))−log(P ng(“car”|“a”)) (15), -
w c2=log(P ng(“car|“a”))−log(P ng(“car”)) (16), and -
w c1=log(P ng(“car”)) (17). - In some implementations, given that the user has spoken the words “I have a”, the probability PLL, as determined by the log-linear model, of the word “car” being spoken may be formulated as:
-
- where Z is a normalization factor that represents an exponential of weights of all the words μ in the n-gram features <“I have a”, “μ”>, <”have a”, “μ”>, <“a”, μ“>, and <______, “μ”> in the log-linear model. For example, the normalization factor Z may include weights of n-gram features 130 a <“I have a”, “car”>, 130 b <“have a”, “car”>, 130 c <“a”, “car”>, 130 d <______, “car”>, 132 a <“have a”, “truck”>, 132 b <“a”, “truck”>, and 132 c <______, “truck”>. In some implementations, the normalization factor may be the one expressed in Equation (3) or Equation (6). In some implementations, the normalization factor is 1. In some implementations, the normalization factor may be manually assigned. By summing the weights 150 a to 150 d associated with n-gram features 130 a to 130 d, most of the terms cancel with each other, and the probability determined by the log-linear model is equal to the probability determined by the n-gram model (e.g.,
element 110 a) scaled by a normalization factor. This formulation is applicable to all n-grams that are included in the n-gram model. - In some implementations, the computing system 100 may initialize weights of backoff features such that for n-grams that are not included in the n-gram model, the probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model. The probabilities of word occurrences generated by the log-linear model may be correlated to the corresponding probabilities generated by the n-gram model when the probability determined by the log-linear model equals the probability determined by the n-gram model scaled by a normalization factor. For example, if the four-gram “I have a truck” is not included in the n-gram model, given that the user has spoken the words “I have a”, a speech recognition system based on a log-linear model may determine the probability of the word “truck” being spoken by a user based on n-gram features “<”have a”, “truck”>” 132 a, “<”a”, “truck”>” 132 b, and “<”______”, “truck”>” 132 c, the backoff feature 140 a <“I have a”, BO>, and the respective weight associated with each feature.
- For example, the computing system 100 may determine weights wt3 152 a, wt2 152 b, and wt1 152 c for the
trigram feature 132 a “<”have a”, “truck>”, thebigram feature 132 b “<”a”, “truck>”, and theunigram feature 132 c “<”______”, “truck>”, respectively. The computing system 100 may initialize w t3 152 a, wt2 152 b, and wt1 152 c of the log-linear model based on the n-gram parameters 112 a to 112 c from the n-gram model as: -
w t3=log(P ng(“truck|“have a”))−log(P ng(“truck”|“a”)) (19), -
w t2=log(P ng(“truck|“a”))−log(P ng(“truck”)) (20), and -
w t1=log(P ng(“truck”)) (21). - Moreover, the value of each backoff feature 140 of the log-linear model may be derived from a
corresponding backoff parameter 120 of the n-gram model. The computing system 100 may initialize the weight wBO3 160 a associated with the backoff feature 140 a <“I have a”, BO> of the log-linear model based on thebackoff parameters 120 a of the n-gram model as: -
w BO3=log(b ng(“I have a”)) (22) - In some implementations, given that the user has spoken the words “I have a”, the probability of the word “truck” being spoken by a user in a log-linear model may then be formulated as:
-
- where Z is a normalization factor as described above. By summing the weights 152 a to 152 c associated with n-gram features 132 a to 132 c and the weight 160 a associated with the backoff feature 140 a, many terms cancel with each other, and the probability determined by the log-linear model correlates to the probability determined by the n-gram model (e.g., Equation (12)) scaled by a normalization factor. This formulation is applicable to all backoff parameters included in the n-gram model. In some implementations,
weights 150 of n-gram features 130 andweights 160 of backoff features 140 may be formulated as expressed in Equations (7) and (8). - During stage (D), the computing system 100 is uses the determined features and weights to generate a log-linear model. In general, using n-
gram weights 150 and optionallybackoff weights 160 provides a log-linear model performance that is at least as accurate as the n-gram model. In some implementations, the computing system 100 may use the n-gram features 130 and therespective weights 150 as initial parameters to generate a log-linear model. The computing system 100 may additionally use the backoff features 140 and therespective weights 160 as initial parameters to generate the log-linear model. In some implementations, the computing system 100 may additionally use other linguistic and/or non-linguistic features and the respective weights as initial parameters to generate a log-linear model. - In some implementations, the computing system 100 may apply one or more scaling factors to one or more weights to generate a log-linear model. For example, instead of associating the
unigram feature 130 d <______, “car”> with theweight w c1 150 d as log(Png(“car”)), the computing system 100 may associate theunigram feature 130 d <______, “car”> with a weight (β×log(Png(“car”))), where β is a scaling factor. The scaling factor may help with the training of the log-linear model to converge to a globally-optimal model when other features that are not n-gram features from an n-gram model are also added to the log-linear model. - When the weights are derived directly from a trained n-gram model, then further training of the log-linear model may not produce many changes to the weights, since the entire probability distribution is fully allocated to the features derived from the n-gram model. The weights may tend to remain very close to the initial values set based on the n-gram model A scaling factor of less than 1, e.g., 0.9, 0.7, 0.5, etc., can be applied to decrease the weights, causing the total probability distribution represented by the initial weights to be less than 1. Leaving unallocated space within the probability distribution allows room to allocate probability to new features that are different from the n-gram features and backoff features derived from the n-gram model. It also increases the potential for adjusting the values of weights for features that are derived from the n-gram model. Different scaling factors can be applied to weights of different n-gram features. For example, scaling factors can be assigned based on the order of the n-gram. Weights for four-gram features can be determined using one scaling factor, weights for three-gram features can be determined using a different scaling factor, and so on. Similarly, the scaling factors used to determine weights for n-gram features can vary according to the frequency or probability of occurrence indicated by the n-gram model.
- During stage (E), the computing system 100 can optionally train the log-linear model. Because the initial weights are derived from the n-gram model, the log-linear model inherits, in part or in its entirety, the training state of the n-gram model. This can be advantageous because the training process for an ML n-gram language model can be faster and less computationally expensive than the training process for a log-linear language model. After initialization, further training of the log-linear model can refine the log-linear model and adjust the weights. Further training can also allow the log-linear model to incorporate additional features that do not directly correspond to the n-gram parameters and backoff parameters of the n-gram model. In particular, the log-linear model can define non-linguistic features that represent non-linguistic context elements, such as a geographical location, a gender of a user, a time, and so on, and further training can allow appropriate weights to be generated for these features.
- In some implementations, training data used to train the n-gram model is used to train the log-linear model. In some implementations, other training data is used to train the log-linear model. In some implementations,
additional training data 170 is used to train the log-linear model. For example, theadditional training data 170 may include non-linguistic data associated with a unigram such as the location of a user device, a gender of the user, the time when the utterance is spoken, etc. In some implementations, one or more of the n-gram weights 150 may change as a result of training. In some implementations, one or more of thebackoff weights 160 may change as a result of training. When other features are included in the log-linear model, those weights for those features may also change as a result of training. -
FIG. 2 is a block diagram that illustrates an example of a computing system 200 for generating a log-linear model based on an n-gram model, where backoff features are implicitly incorporated in the n-gram features. Unlike the system 100 ofFIG. 1 , which includes explicit backoff features 140 andcorresponding weights 160, the system 200 ofFIG. 2 accounts for backoffs without including explicit backoff features or backoff weights. The functions performed by the computing system 200 can be performed by one or more individual computer systems or can be distributed across multiple computer systems. In general, a backoff feature may be included in an n-gram feature during an initialization of a log-linear model to produce a model having a smaller size, as the log-linear model does not explicitly store the backoff features.FIG. 2 shows stages (A) to (E) which illustrate a flow of data. - During stage (A), the computing system 200 obtains n-
gram parameters 210 from an n-gram model, similar to the descriptions inFIG. 1 . In some implementations, the computing system 200 may be configured to obtainbackoff parameters 220 from the n-gram model. In some implementations, thebackoff parameters 220 may be values that have been manually assigned by a developer of the n-gram model. In some other implementations, thebackoff parameters 220 may be values that have been automatically assigned during the n-gram model training. In some implementations, thebackoff parameters 220 may be a predetermined value for all n-grams. - During stage (B), the computing system 200 determines n-gram features 230 for a log-linear model based on the n-gram model, similar to the descriptions in
FIG. 1 . For example, an n-gram feature 230 is defined for each of the n-grams of the n-gram model. For example, the n-gram model includes a four-gram “I have a car”, corresponding trigrams “I have a” and “have a car”, corresponding bigrams “I have”, “have a”, and “a car”, and corresponding unigrams “I”, “have”, “a”, “car.” In some implementations, based on these n-grams in the n-gram model, the computing system 200 may determine n-gram features <“x1 . . . xn−1”|“xn”> corresponding to n-grams X=x1 . . . xn, where each n-gram feature represents a presence of the word xn given the preceding words x1 to xn−1 in an n-gram. For example, the n-gram features 230 may include a four-gram feature 230 a <“I have a”, “car”> to represent a presence of the word “car” given the preceding words “I have a” in a four-gram. As another example, the n-gram features 230 may include atrigram feature 230 b <“have a”, “car”> to represent a presence of the word “car” given the preceding words “have a” in a trigram. As another example, the n-gram features 230 may include abigram feature 230 c <“a”, “car”> to represent a presence of the word “car” given the preceding word “a” in a bigram. As another example, the n-gram features 230 may include aunigram feature 230 d <”______”, “car”> to represent a presence of the word “car” in a unigram. In the implicit backoff feature formulation, the computing system 200 does not determine backoff features for a log-linear model based on the n-gram model because the backoff features are incorporated in the weights of the n-gram features, as described below. - During stage (C), the computing system 200 determines
weights 250 of the n-gram features 230 in the log-linear model. In some implementations, the computing system 100 may initialize weights of n-gram features such that the weights incorporate backoff features. The probabilities of word occurrences generated by the log-linear model are correlated to the corresponding probabilities generated by the n-gram model. The probabilities of word occurrences generated by the log-linear model may be correlated to the corresponding probabilities generated by the n-gram model when the probability determined by the log-linear model equals the probability determined by the n-gram model scaled by a normalization factor. For example, the computing system 200 may be configured to determine weights wc4 250 a, wc3 250 b, wc2 250 c, and wc1 250 d for the four-gram feature 130 a “<”I have a”, “car>”, thetrigram feature 130 b “<”have a”, “car>”, thebigram feature 130 c “<”a”, “car>”, and theunigram feature 130 d “<”______”, “car>” as follows. Several of the weight calculations include terms based on n-gram backoff features bbng: -
w c4=log(P ng(“car|“I have a”))−log(P ng(“car”|“have a”))−log(b bng(“I have a”)) (24), -
w c3=log(P ng(“car|“have a”))−log(P ng(“car”|“a”))−log(b bng(“have a”)) (25), -
w c2=log(P ng(“car|“a”))−log(P ng(“car”))−log(b bng(“a”)) (26), and -
w c1=log(P ng(“car”)) (27). - In some implementations, given that the user has spoken the words “I have a”, the probability of the word “car” being spoken by a user in a log-linear model may be formulated as:
-
- where Z is a normalization factor that represents an exponential of weights of all the words μ in the n-gram features <“I have a”, “μ”>, <“have a”, “μ”>, <“a”, μ”¢, and <______, “μ”> in the log-linear model, as described in
FIG. 1 . For example, the normalization factor Z may include weights of n-gram features 230 a <”I have a”, “car”>, 230 b <“have a”, “car”>, 230 c <“a”, “car”>, 230 d <______, “car”>, 232 a <“have a”, “truck”>, 232 b <“a”, “truck”>, and 232 c <______, “truck”>. Since the weights of the n-gram features 230 a <“I have a”, “car”>, 230 b <“have a”, “car”>, 230 c <“a”, “car”>, and 230 d <______, “car”> are included in both the numerator and the denominator of the normalization factor Z, the implicit backoff parameters b bng(“I have a”), bbng(“have a”), and bbng(“a”) are canceled, and PLL(“car”|“I have a”) in the log-linear model is correlated to Png(“car”|“I have a”) in the n-gram model. - In some implementations, the weights of backoff features are zero, such that the log-linear model does not need to store backoff features and respective weights. For example, if the four-gram “I have a truck” is not included in the n-gram model, the computing system 200 may be configured to determine weights wt3 252 a, wt2 252 b, and wt1 252 c for the
trigram feature 232 a “<”have a”, “truck>”, thebigram feature 232 b “<”a”, “truck>”, and the unigram feature 232 c “<”______”, “truck>”, respectively. The computing system 200 may initialize w t3 252 a, wt2 252 b, and wt1 252 c of the log-linear model based on the n-gram parameters 212 a to 212 c from the n-gram model as: -
w t3=log(P ng(“truck|“have a”))−log(P ng(“truck”|“a”))−log(b bng(“have a”)) (29), -
w t2=log(P ng(“truck|“a”))−log(P ng(“truck”))−log(b bng(“a”)) (30), and -
w t1=log(P ng(“truck”)) (31). - For the backoff feature <“I have a”, BO>, the weight may be formulated as:
-
- Under this formulation, when a backoff feature is triggered in the log-linear model, the corresponding weight is zero. Accordingly, the log-linear model does not need to store backoff features and respective weights.
- In some implementations, given that the user has spoken the words “I have a”, the probability determined by the log-linear model for the occurrence of the word “truck” may then be formulated as:
-
- where Z is a normalization factor as described above. Since the weights of the n-gram features 232 a <“have a”, “truck”> and 232 b <“a”, “truck”> are included in both the numerator and the denominator of the normalization factor Z, the implicit backoff parameters bbng(“have a”) and bbng(“a”) cancel. Moreover, the normalization factor Z additionally includes a weight 250 a wc4 for the four-
gram feature 230 a <“I have a”, “car”>, where the weight 250 a includes a term −log(bbng(“I have a”)) in the denominator but not the numerator. By multiplying both the denominator and the numerator by the term bbng(“I have a”) and knowing that in an n-gram model the probability that a user has spoken the word “truck” given that the user has spoken the words “have a” can be expressed as P(“truck”|“I have a”)=bng(“I have a”)×Png (“truck”|“have a”) (e.g., Equation (12)), it can be derived that the probability determined by the log-linear model equals the probability determined by the n-gram model scaled by a normalization factor. This formulation can be used to generate a probability for any n-gram that does not have a corresponding feature in the log-linear model. - During stage (D), the computing system 200 uses the determined features and weights to generate a log-linear model. In some implementations, the computing system 100 may use the n-gram features 230 and the
respective weights 250 as initial parameters to generate a log-linear model, where the backoff features are incorporated in the weights of the n-gram features. In some implementations, the computing system 200 may apply one or more scaling factors to one or more weights to generate a log-linear model. For example, instead of associating theunigram feature 230 d <______, “car”> with the weight w c1 250 d as log(Png(“car”)), the computing system 200 may associate theunigram feature 230 d <______, “car”> with a weight (β×log(Png(“car”))), where β is a scaling factor. The scaling factor may help with the training of the log-linear model to converge to a globally-optimal model when other features that are not n-gram features from an n-gram model are also added to the log-linear model. - During stage (E), the computing system 200 can optionally train the log-linear model. In some implementations, training data used to train the n-gram model is used to train the log-linear model. In some implementations, other training data is used to train the log-linear model. In some implementations,
additional training data 270 is used to train the log-linear model. -
FIG. 3 is a diagram that illustrates an example of asystem 300 for speech recognition using a log-linear model. Thesystem 300 includes aclient device 310, acomputing system 320, and anetwork 318. Thecomputing system 320 receivesaudio data 312 and, in some implementations,linguistic context data 314 and/ornon-linguistic context data 316 from theclient device 310. Thecomputing system 320 provides scores determined from thenon-linguistic context data 316 to a language model 350, which provides output that thecomputing system 320 uses to determine a transcription for theaudio data 312. The figure shows stages (A) to (H) which illustrate a flow of data. - The
client device 310 can be, for example, a desktop computer, a laptop computer, a cellular phone, a smart phone, a tablet computer, a music player, an e-book reader, a wearable computer, a navigation system, or other device. The functions performed by thecomputing system 320 can be performed by individual computer systems or can be distributed across multiple computer systems, e.g., one or more server systems. Thenetwork 318 can be wired or wireless or a combination of both, and may include private networks and/or public networks, such as the Internet. - In some implementations, a system receives audio data indicating characteristics of an utterance and context data indicating non-linguistic context of the utterance. Scores for one or more non-linguistic features can be generated based on the context data. The scores can be provided to a language model trained to estimate likelihoods based at least in part on scores for non-linguistic features. Output of the language model can be received and used to determine a transcription for the utterance. In some implementations, the language model is a log-linear model or maximum entropy model. In some implementations, the language model comprises a support vector machine model, a neural network, a set of classifiers, or another type of model.
- In the example of
FIG. 3 , during stage (A), a user 302 speaks and theclient device 310 detects theutterance 304 of the user 302. For example, theclient device 310 may record theutterance 304 using a microphone. The user 302 may provide theutterance 304 as voice input to any of a variety of applications, including, for example, an e-mail application, a calendar application, a mapping or navigation application, and so on. Thus, theutterance 304 may represent any of a variety of types of input, for example, a query, a message recipient, the body of a message, a voice command, an address, a phone number, and so on. - In the illustrated example, the user 302 is dictating the contents of an e-mail message while a “Mail” application is running on the
client device 310. The user 302 previously entered the text “Let's meet at the” as part of the message, and theutterance 304 includes the word “beach” as further input to add to the message. - During stage (B), the
client device 310 collects information and sends information to thecomputing system 320 over thenetwork 318. The information may be sent with, for example, a request for a transcription of the utterance. For example, the client device 302 sendsaudio data 312 for theutterance 304 to thecomputing system 320. Theaudio data 312 may be, for example, a recording of theutterance 304, or information derived from the detectedutterance 304, such as filterbank energy values, mel-frequency cepstral coefficients (MFCCs), or scores for other acoustic features. - The
client device 310 may also sendlinguistic context data 314 that indicates a linguistic context for theutterance 304. For example, theclient device 310 may provide data that indicates the words that theutterance 304 follows. In the illustrated example, thelinguistic context data 314 indicates the words “Let's meet at the” that immediately precede theutterance 304. In some implementations, thelinguistic context data 314 provides a specific amount of text, for example, the previous one, two, three, five, or ten words, or the text recognized within a predetermined amount of time. The linguistic context may include words that were previously spoken by the user and are recognized, and/or text that was entered or accessed in another manner. For example, a user could open a text file, place a cursor at a particular position in the text, and begin speaking to insert additional text. Some amount of text before the cursor may be provided as linguistic context, regardless of how the text in the file was entered. - The
client device 310 may also determine and sendnon-linguistic context data 316 to indicate a non-linguistic context for theutterance 304. The non-linguistic context data may indicate, for example, characteristics of the environment in which theutterance 304 is spoken. Thenon-linguistic context data 314 can indicate factors related to the physical environment of the user 302 orclient device 310, such as geographical location, time, temperature, weather, or ambient noise. Thenon-linguistic context data 314 can provide information about the physical state of theclient device 310, for example, whether thedevice 310 is moving or stationary, the speed of movement of thedevice 310, whether thedevice 310 is being held or not, a pose or orientation of thedevice 310, whether or not thedevice 310 is connected to a docking station, and/or the type of docking station to which theclient device 310 is connected. Thenon-linguistic context data 314 can provide information about the operating state of theclient device 310, for example, an identifier for an application running on theclient device 310, or a category or classification for the application to which that theutterance 304 was provided as input. Similarly, the non-linguistic context data can indicate a particular input field, input field label, an input text format for a field, an identifier for a web page or Internet domain, or other information. Thenon-linguistic context data 314 can also indicate information about the user 302 that spoke the utterance, for example, a user identifier, whether the user is male or female, or other information from a user profile for the user. - In the illustrated example, the
client device 310 determines its location, for example, using a global positioning system (GPS) module or other techniques, and determines that theclient device 310 is located in the city of Los Angeles. Theclient device 310 also determines that theutterance 304 was recorded as input to a mail application running on theclient device 310. Theclient device 310 provides data indicating the location, e.g., “Los Angeles,” and the active application, e.g., the “Mail” application, to thecomputing system 320 asnon-linguistic context data 316. The client device also provides theaudio data 312 and thelinguistic context data 314 to the computing system. - During stage (C), the
computing system 320 uses aspeech recognizer module 330 to determinecandidate transcriptions 335 for theutterance 304. The candidate transcriptions 335 may be provided as, for example, a list, a word lattice, or in other forms. The candidate transcriptions 335 may be scored or ranked to indicate which candidate transcriptions 335 thespeech recognizer module 330 estimates to be most likely to be correct transcriptions. In the illustrated example, thecandidate transcriptions 335 represent a set of highest ranking or most likely transcriptions, as estimated by thespeech recognizer 330. This set can be an n-best list, including, for example, the top 3, 5, 30, 25, or other integer number of candidate transcriptions. - In some implementations, the
speech recognizer module 330 uses an acoustic model and a language model to identify thecandidate transcriptions 335. The models used by thespeech recognizer module 330 may or may not use non-linguistic context data to determine candidate transcriptions. Accordingly, in some instances, thecandidate transcriptions 335 may be determined based on theaudio data 312 and thelinguistic context data 314, without being influenced by thenon-linguistic context data 316. Another language model may use information about the non-linguistic context to re-score or re-rank thecandidate transcriptions 335 to improve accuracy. In some implementations, thespeech recognizer module 330 may use thenon-linguistic context data 316 to identify and/or score thecandidate transcriptions 335. - During stage (D), the
computing system 320 uses a feature extraction module 340 to determinefeature scores 345 for various different features. The set of features that featurescores 345 are determined for is the set of features defined in a language model 350 that will receive the feature scores 345 as input. The feature extraction module 340 can determine which n-gram features and backoff features should be set as active, and which should be set as inactive. For example, thecomputing system 320 can evaluate each candidate transcription to determine a likelihood of occurrence of the candidate transcription given the context. - To determine which features to set as active by assigning a feature score of “1,” the
computing system 320 may compare n-grams comprising a candidate transcription and at least a portion of the context to n-grams in an n-gram feature dictionary for a language model 350. For the candidate transcription “beach,” thecomputing system 320 can determine whether the n-gram “Let's meet at the beach” matches any of the 5-grams in the n-gram feature dictionary. If there is a matching 5-gram, the matching n-gram feature is given a feature score of “1,” and all other n-gram features for 5-grams are given a feature score of “0.” Similarly, since the 5-gram was found to have a corresponding n-gram feature, none of the backoff features are activated (e.g., all are given a value of “0”) By contrast, if none of the n-gram features match “Let's meet at the beach,” then one or more backoff features will be activated. For example, each of the following prefix backoff features may be activated if they are defined as part of the model 150: “<backoff-5>,”<backoff-4, beach>,” “<backoff-3, the beach>,” “<backoff-2, at the beach>,” “<backoff-1, meet at the beach>.” Suffix backoff features, e.g., “<Let's meet at the, backoff-1>,” and other backoff features may also be activated based on the context. All other backoff features that do not correspond to the n-gram under evaluation, e.g., “<backoff-4, house>” or “<backoff-3, the roof>,” would be assigned a value of “0.” - In a similar manner, the evaluation of candidate transcription “beach” would also involve determination of feature scores for features corresponding to n-grams with lower values of n. For example, feature scores n-gram features and backoff features representing 4-grams would be determined with respect to the 4-gram “meet at the beach,” feature scores for features representing 3-grams would be determined with respect to the 3-gram “at the beach,” and so on.
- During stage (E), the feature scores 345 are provided as input to the language model 350. Based on the feature scores 345, the language model 350 provides a set of
output values 355, which may indicate likelihoods that one or more words will occur in the current context. The language model 350 can be a model that has been trained to estimate the likelihood of a word or phrase occurring based on scores for linguistic and/or non-linguistic features. For example, the language model 350 can determine a posterior probability of a current word, e.g., the first word of theutterance 304, given information about the context for theutterance 304, which may include linguistic context, e.g., the prior words “Let's meet at the,” and/or non-linguistic context, e.g., location, device state, application, user characteristics, etc. The feature scores 345 are determined in stage (D) for the features that the language model 350 was trained to be able to process and use to determine word likelihoods. - The language model 350 may include a set of internal weights that represent the training state of the language model 350. These weights may indicate how various aspects of context make words more or less likely to occur. Typically, the weights in the language model 350 are set during training of the language model 350 and do not change during use of the language model. However, the weights are trained using examples of input from a variety of different users and different environments, so the language model 350 is able to estimate likelihoods of words occurring given many different types of linguistic and non-linguistic contexts.
- In some implementations, the language model 350 is a log-linear model. Log-linear models may effectively take into account scores from large numbers of features and scores for features of multiple different types. For example, a log-linear model may be used to combine word n-gram feature scores with feature scores indicating physical environment, user characteristics, and other factors. In some implementations, log-linear models may provide greater efficiency or smaller storage requirements than, for example, hidden Markov models (HMMs) or other statistical models.
- In some implementations, the language model 350 may be a log-linear model or other maximum entropy model. Other types of models and other training techniques may additionally or alternatively be used. For example, support vector machines, neural networks, classifiers, and other types of models may be used to process various contextual features, including linguistic feature scores, non-linguistic feature scores, and/or other types of information. As an example, an integrated circuit or other device could implement a neural network to serve as a language model. As another example, a set of multiple classifiers could each be trained to process one or more feature scores, and a system could combine the outputs of the classifiers to indicate a probability of occurrence of a word or other lexical item. In general, any appropriate model may be used, where the model receives values for contextual features and provides output indicative of a likelihood of occurrence of a word based on the received values.
- The output values 355 provided by the language model 350 may be, for example, scores indicating likelihoods of occurrence of different words given the context indicated by the feature scores 345. For example, the language model 350 may indicate a posterior probability P(y|X), or values from which the probability may be determined, where y represents a lexical item, such as a word, number, URL, or other lexical item, and X is a vector including the feature scores 345.
- In some implementations, the language model 350 may be used to obtain a score for each of multiple different words within a particular candidate transcription. For example, the techniques described above can be used to determine an output of the language model 350 for a first word of a candidate transcription. Then, using an assumption that the first word of the candidate transcription is correct, the same techniques may be used to determine an output of the language model 350 for the second word in the candidate transcription. For this second word, the linguistic context has changed, e.g., by the inclusion of the first word of the candidate transcription. To reflect the updated linguistic context, the
computing system 320 may use the feature extraction module 340 to determine a new set of feature scores that are appropriate for the new context. In this manner, thecomputing system 320 may use the language model 350 to determine a score for each of the words in each of thecandidate transcriptions 335, based on the particular sequence of words that each word follows. - During stage (F), the
computing system 320 uses are-scoring module 360 to determinescores 365 for thedifferent candidate transcriptions 335. If a candidate transcription includes multiple words, the outputs from the language model 350 for each of the different words of the candidate transcription can be used by there-scoring module 360 to determine ascore 365 indicating a likelihood of occurrence of each candidate transcription as a whole, given the context in which the utterance was spoken. - During stage (G), the
computing system 320 selects a transcription for theutterance 304 based on thescores 365. For example, thecomputing system 320 may select thecandidate transcription 335 having thescore 365 that indicates the highest likelihood of occurrence. - During stage (H), the
computing system 320 provides the selected transcription to the client device 302. The client device 302 may insert the transcription in the application that is running, to complete the user's intended phrase, “Let's meet at the beach.” - In the example shown in
FIG. 3 , non-linguistic context data is used to re-scorecandidate transcriptions 335 that were determined without taking into account non-linguistic context data. In some implementations, thespeech recognizer 330 may use a language model, such as the language model 350, that uses non-linguistic context data to select and rank the candidate transcriptions. In these implementations, a separate re-scoring process may not be needed. - In some implementations, the input to the language model 350 may include only feature scores for non-linguistic features. In other implementations, feature scores may be provided for both linguistic and non-linguistic features. In some implementations, a language model that determines likelihoods using both linguistic and non-linguistic features may have better accuracy than a language model that provides scores based on only linguistic features or only non-linguistic features.
- In some implementations, the backoff features may include backoff features corresponding to elements of non-linguistic context. For example, some standard features or n-gram features may represent the occurrence of a word or other outcome with a context that includes a particular time, e.g., time of day, day of the week, date, year, etc., or range of time, a particular geographical location, e.g., country, state, city, zip code, etc., or a particular user characteristic, e.g., a user's gender, age, educational level, primary language spoken, etc. A feature may be defined with respect to multiple different types of context, e.g., “<user=male; city=Los Angeles; day=Saturday; weather>” to represent a male user in Los Angeles using the word “weather” on a Saturday.
- Examples include features representing the occurrence of specific words in different cities, such as features (i) “<city=Philadelphia; cheese steak>” representing the phrase “cheese steak” being used in Philadelphia, and (ii) “<city=New York City; cheesecake>” representing the word “cheesecake” being used in New York City. For this example, backoff features may be used to represent the occurrence of a city and word combination that has no specific feature in the model 350. For example, backoff feature “<city=Philadelphia; backoff-1>” can correspond to the occurrence of any word at the location of Philadelphia, where the model 350 does not have a feature for that word in Philadelphia. In addition, or as an alternative, a backoff feature may represent any of multiple cities, e.g., “<city_backoff; cheese steak>”, which can represent the occurrence of the term “cheese steak” in an unknown city or any city that does not have a specific feature in the model 350 for the occurrence of “cheese steak” in that city. Further backoffs can be defined, such as “<city_backoff; cheese backoff-1>” or “<city_backoff; backoff-2>,” with each feature represents different combinations of words and cities.
- As another example, features of a model may ask a question about the domain of the input. For example, the feature may include a component indicating whether the input was entered for a particular domain. Examples of different domains may be different types of searches, e.g., web search, image search, movie library search, etc. As additional examples, different domains may represent different categories of applications or tasks, e.g., voice search, e-mail, shopping, voice commands, navigation, and so on. Features may represent a question as to whether a specific word or phrase occurs in a specific domain, e.g., “<domain=VoiceSearch; who>” which calls for a binary input indicating whether the word “who” occurred in the context of a voice search domain. Backoff features can correspond to instances where a combination of words or phrases with a domain does not have a corresponding feature in the model, e.g., “<domain_backoff; who>” or “<domain_backoff; main street>.” For example, if a user speaks the word “who” for a navigation application, and there is no corresponding feature for that word in that specific context, the backoff feature “<domain_backoff; who>” can be activated. This indicates that, the domain component had to be omitted or backed off since the combination did not have a corresponding feature in the model.
- In some implementations, the language model 350 may indicate the likelihood of occurrence of sequences of language units other than words. For example, the language model 350 may predict n-grams of characters, phonemes, or other language units. In such implementations, the language model 350 has n-gram features and backoff features based on for n-grams of the type of language unit used. For example, when the language units for a language model are phonemes, each n-gram feature represents a specific n-gram of phonemes, and each backoff feature represents a set of n-grams that include the same number of phonemes (e.g., the same order or n-gram length) and that do not have a corresponding n-gram feature in the model 350.
-
FIG. 4 is a flow diagram that illustrates an example of a process 400 for generating a log-linear language model based on an n-gram model. The process 400 may be performed by one or more systems, such as the computing system 100, the computing system 200, or thecomputing system 320. - The system obtains n-gram parameter values derived from an n-gram language model, where the n-gram parameter values include n-gram parameter values for n-grams that include multiple words (402). For example, the n-
gram parameters 110 inFIG. 1 include parameter values for respective n-grams in an n-gram model. In some implementations, for each of the n-grams that includes multiple words, the corresponding parameter value may indicate a conditional probability of an occurrence of a last word in the n-gram given an occurrence of one or more words that precede the last word in the n-gram. For example, the n-gram parameters 110 inFIG. 1 represents the probability that a user has spoken the word “xn” given that the user has spoken the words “x1 . . . xn−1” in the n-gram X, as described in Equation (10). - In some implementations, the n-gram language model may be configured to assign, to an n-gram that does not have a corresponding parameter value in the n-gram language model, a score based on a parameter value in the n-gram language model for a sub-sequence of words within the n-gram. For example, the n-gram model in
FIG. 1 includesbackoff parameters 120 that are used to calculate a parameter value (e.g., P(“truck”|“I have a”) in Equation (11)) for an n-gram that is not in the n-gram model (e.g., “I have a truck”). - The system determines n-gram features for a log-linear language model based on the n-grams corresponding to the obtained n-gram parameter values (404). For example, the system 100 in
FIG. 1 may determine the n-gram features 130 based on the n-grams in the n-gram model. In some implementations, for each n-gram parameter in the n-gram language model, the system may determine an n-gram feature that represents an occurrence of a particular word in a particular context comprising one or more words. For example, inFIG. 1 , the n-gram feature 130 a <“I have a”, “car”> represents an occurrence of the word “car” in the particular context “I have a”. - In some implementations, the system may identify each of the n-grams corresponding to the n-gram parameter values derived from the n-gram language model. The system may then determine the n-gram features to include a feature corresponding to each identified n-gram. For example, the computing system 100 in
FIG. 1 may identify a four-gram “I have a car”, trigrams “I have a” and “have a car”, bigrams “I have”, “have a”, “a car”, and unigrams “I”, “have”, “a”, and “car” from the four-gram “I have a car” in the n-gram model. - The system determines a weight for each of the determined n-gram features (406). For example, the computing system 100 may determine n-
gram weights 150 corresponding to the n-gram features 130. In some implementations, for at least some of the n-gram feature, the weight is respectively determined based on (i) an n-gram parameter value that is derived from the n-gram language model and that corresponds to a particular n-gram of multiple words, and (ii) an n-gram parameter value that is derived from the n-gram language model and that corresponds to an n-gram that is a sub-sequence within the particular n-gram. For example, the computing system 100 may initialize wc4 150 a of the log-linear model based on the n-gram parameter 110 a from the n-gram model as formulated in Equation (14). - The system generates a log-linear language model (408). In some implementations, the log-linear language model has the determined n-gram features, and the determined n-gram features in the log-linear language model having weights that are initialized based on the determined weights. For example, the computing system 100 in
FIG. 1 may generate a log-linear model based on n-gram features 130 and n-gram weights 150. In some implementations, the log-linear language model may be generated to indicate, for one or more n-grams, likelihoods of occurrence that equal to likelihoods of occurrence indicated by the n-gram language model for the one or more n-grams. For example, referring to Equation (18), by summing the weights 150 a to 150 d associated with n-gram features 130 a to 130 d, most of the terms in the weights cancel with each other, and the probability determined by the log-linear model correlates to the probability determined by the n-gram model (e.g.,element 110 a) scaled by a normalization factor. - In some implementations, the system may obtain backoff parameter values derived from the n-gram language model, the backoff parameter values representing n-gram backoffs from one order of n-gram to a lower order of n-gram. For example, the computing system 100 in
FIG. 1 may obtainbackoff parameters 120 derived from the n-gram model. The system may determine backoff features for the log-linear language model that represent the backoffs of the n-grams in the n-gram language model. For example, the computing system 100 may determine backoff features 140 for the log-linear model. The system may determine a weight for each backoff feature in the determined backoff features, wherein each of the weights for the determined backoff features is respectively determined based on a backoff parameter value derived from the n-gram language model. For example, the computing system 100 may determineweights 160 for the backoff features 140 based on thebackoff parameters 120 in the n-gram model. The system may generate the log-linear language model to have the backoff features and corresponding weights that are initialized based on the determined weights for the backoff features. For example, the computing system 100 may generate a log-linear model based on backoff features 140 andbackoff weights 160 in addition to n-gram features 130 and n-gram weights 150. In some implementations, the weights for the backoff features in the log-linear language model each represents a probability adjustment equivalent to the adjustment represented by a corresponding backoff parameter value in the n-gram language model. For example, referring to Equation (12), by summing the weights 152 a to 152 c associated with n-gram features 132 a to 132 c and the weight 160 a associated with the backoff feature 140 a, many terms cancel with each other, and the probability determined by the log-linear model correlates to the probability determined by the n-gram model scaled by a normalization factor. - In some implementations, the system may, for at least some of the weights, incorporate a backoff parameter value from the n-gram language model in the weight determination. For example, the computing system 200 in
FIG. 2 may implicitly incorporate a backoff feature in the determination of the n-gram weights 250. - In some implementations, after generating the log-linear language model, the system may train the log-linear language model to adjust the weights. For example, the system may train the log-linear language model using stochastic gradient descent training and using a set of training data that is different from a set of training data used to train the n-gram language model. In some implementations, the system may re-train the weights for the backoff features based on the determined weights for the backoff features. For example, one or more backoff weights of the
backoff weights 160 associated with the backoff feature 140 may change after re-training. - In some implementations, the log-linear language model may include non-linguistic features corresponding to one or more aspects of non-linguistic context. For example, the non-linguistic features may include features indicative of a user characteristic, a time, a geographic location, an application, or an input field.
- The system uses the log-linear language model to determine a transcription for an utterance (410). For example, the
computing system 320 inFIG. 3 may use a log-linear model to transcribe spoken utterances “Let's meet at the beach” from a user of aclient device 310. The system provides the transcription for the utterance (412). For example, thecomputing system 320 inFIG. 3 may provide the transcribed spoken utterances “beach” back to theclient device 310. -
FIG. 5 shows an example of acomputing device 500 and an example of amobile computing device 550 that can be used to implement the techniques described above. Thecomputing device 500 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The mobile computing device is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smart-phones, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document. - The
computing device 500 includes aprocessor 502, amemory 504, astorage device 506, a high-speed interface 508 connecting to thememory 504 and multiple high-speed expansion ports 510, and a low-speed interface 512 connecting to a low-speed expansion port 514 and thestorage device 506. Each of theprocessor 502, thememory 504, thestorage device 506, the high-speed interface 508, the high-speed expansion ports 510, and the low-speed interface 512, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. Theprocessor 502 can process instructions for execution within thecomputing device 500, including instructions stored in thememory 504 or on thestorage device 506 to display graphical information for a GUI on an external input/output device, such as adisplay 516 coupled to the high-speed interface 508. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 504 stores information within thecomputing device 500. In some implementations, thememory 504 is a volatile memory unit or units. In some implementations, thememory 504 is a non-volatile memory unit or units. Thememory 504 may also be another form of computer-readable medium, such as a magnetic or optical disk. - The
storage device 506 is capable of providing mass storage for thecomputing device 500. In some implementations, thestorage device 506 may be or contain a computer-readable medium, such as a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. A computer program product can be tangibly embodied in an information carrier. The computer program product may also contain instructions that, when executed, perform one or more methods, such as those described above. The computer program product can also be tangibly embodied in a computer- or machine-readable medium, such as thememory 504, thestorage device 506, or memory on theprocessor 502. - The high-
speed interface 508 manages bandwidth-intensive operations for thecomputing device 500, while the low-speed interface 512 manages lower bandwidth-intensive operations. Such allocation of functions is exemplary only. In some implementations, the high-speed interface 508 is coupled to thememory 504, the display 516 (e.g., through a graphics processor or accelerator), and to the high-speed expansion ports 510, which may accept various expansion cards (not shown). In the implementation, the low-speed interface 512 is coupled to thestorage device 506 and the low-speed expansion port 514. The low-speed expansion port 514, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 500 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 520, or multiple times in a group of such servers. In addition, it may be implemented in a personal computer such as alaptop computer 522. It may also be implemented as part of arack server system 524. Alternatively, components from thecomputing device 500 may be combined with other components in a mobile device (not shown), such as amobile computing device 550. Each of such devices may contain one or more of thecomputing device 500 and themobile computing device 550, and an entire system may be made up of multiple computing devices communicating with each other. - The
mobile computing device 550 includes aprocessor 552, amemory 564, an input/output device such as adisplay 554, acommunication interface 566, and atransceiver 568, among other components. Themobile computing device 550 may also be provided with a storage device, such as a micro-drive or other device, to provide additional storage. Each of theprocessor 552, thememory 564, thedisplay 554, thecommunication interface 566, and thetransceiver 568, are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate. - The
processor 552 can execute instructions within themobile computing device 550, including instructions stored in thememory 564. Theprocessor 552 may be implemented as a chipset of chips that include separate and multiple analog and digital processors. Theprocessor 552 may provide, for example, for coordination of the other components of themobile computing device 550, such as control of user interfaces, applications run by themobile computing device 550, and wireless communication by themobile computing device 550. - The
processor 552 may communicate with a user through acontrol interface 558 and adisplay interface 556 coupled to thedisplay 554. Thedisplay 554 may be, for example, a TFT (Thin-Film-Transistor Liquid Crystal Display) display or an OLED (Organic Light Emitting Diode) display, or other appropriate display technology. Thedisplay interface 556 may comprise appropriate circuitry for driving thedisplay 554 to present graphical and other information to a user. Thecontrol interface 558 may receive commands from a user and convert them for submission to theprocessor 552. In addition, anexternal interface 562 may provide communication with theprocessor 552, so as to enable near area communication of themobile computing device 550 with other devices. Theexternal interface 562 may provide, for example, for wired communication in some implementations, or for wireless communication in other implementations, and multiple interfaces may also be used. - The
memory 564 stores information within themobile computing device 550. Thememory 564 can be implemented as one or more of a computer-readable medium or media, a volatile memory unit or units, or a non-volatile memory unit or units. Anexpansion memory 574 may also be provided and connected to themobile computing device 550 through anexpansion interface 572, which may include, for example, a SIMM (Single In Line Memory Module) card interface. Theexpansion memory 574 may provide extra storage space for themobile computing device 550, or may also store applications or other information for themobile computing device 550. Specifically, theexpansion memory 574 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example, theexpansion memory 574 may be provide as a security module for themobile computing device 550, and may be programmed with instructions that permit secure use of themobile computing device 550. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include, for example, flash memory and/or NVRAM memory (non-volatile random access memory), as discussed below. In some implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The computer program product can be a computer- or machine-readable medium, such as the
memory 564, theexpansion memory 574, or memory on theprocessor 552. In some implementations, the computer program product can be received in a propagated signal, for example, over thetransceiver 568 or theexternal interface 562. - The
mobile computing device 550 may communicate wirelessly through thecommunication interface 566, which may include digital signal processing circuitry where necessary. Thecommunication interface 566 may provide for communications under various modes or protocols, such as GSM voice calls (Global System for Mobile communications), SMS (Short Message Service), EMS (Enhanced Messaging Service), or MMS messaging (Multimedia Messaging Service), CDMA (code division multiple access), TDMA (time division multiple access), PDC (Personal Digital Cellular), WCDMA (Wideband Code Division Multiple Access), CDMA2000, or GPRS (General Packet Radio Service), among others. Such communication may occur, for example, through thetransceiver 568 using a radio-frequency. In addition, short-range communication may occur, such as using a Bluetooth, Wi-Fi, or other such transceiver (not shown). In addition, a GPS (Global Positioning System)receiver module 570 may provide additional navigation- and location-related wireless data to themobile computing device 550, which may be used as appropriate by applications running on themobile computing device 550. - The
mobile computing device 550 may also communicate audibly using anaudio codec 560, which may receive spoken information from a user and convert it to usable digital information. Theaudio codec 560 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of themobile computing device 550. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on themobile computing device 550. - The
mobile computing device 550 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 580. It may also be implemented as part of a smart-phone 582, personal digital assistant, tablet computer, wearable computer, or other similar mobile device. - Various implementations of the systems and techniques described here may be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations may include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and may be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” and “computer-readable medium” refer to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here may be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user may provide input to the computer. Other kinds of devices may be used to provide for interaction with a user as well; for example, feedback provided to the user may be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user may be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here may be implemented in a computing system that includes a back end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front end component (e.g., a client computer having a graphical user interface or a Web browser through which a user may interact with an implementation of the systems and techniques described here), or any combination of such back end, middleware, or front end components. The components of the system may be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. In addition, the logic flows depicted in the figures do not require the particular order shown, or sequential order, to achieve desirable results. In addition, other steps may be provided, or steps may be eliminated, from the described flows, and other components may be added to, or removed from, the described systems. Accordingly, other embodiments are within the scope of the following claims.
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US14/708,465 US10134394B2 (en) | 2015-03-20 | 2015-05-11 | Speech recognition using log-linear model |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201562136083P | 2015-03-20 | 2015-03-20 | |
US14/708,465 US10134394B2 (en) | 2015-03-20 | 2015-05-11 | Speech recognition using log-linear model |
Publications (2)
Publication Number | Publication Date |
---|---|
US20160275946A1 true US20160275946A1 (en) | 2016-09-22 |
US10134394B2 US10134394B2 (en) | 2018-11-20 |
Family
ID=56924072
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US14/708,465 Active 2035-08-13 US10134394B2 (en) | 2015-03-20 | 2015-05-11 | Speech recognition using log-linear model |
Country Status (1)
Country | Link |
---|---|
US (1) | US10134394B2 (en) |
Cited By (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20180053502A1 (en) * | 2016-08-19 | 2018-02-22 | Google Inc. | Language models using domain-specific model components |
US20190096396A1 (en) * | 2016-06-16 | 2019-03-28 | Baidu Online Network Technology (Beijing) Co., Ltd. | Multiple Voice Recognition Model Switching Method And Apparatus, And Storage Medium |
US20190155907A1 (en) * | 2017-11-20 | 2019-05-23 | Minds Lab., Inc. | System for generating learning sentence and method for generating similar sentence using same |
US10311860B2 (en) * | 2017-02-14 | 2019-06-04 | Google Llc | Language model biasing system |
CN112882997A (en) * | 2021-02-19 | 2021-06-01 | 武汉大学 | System log analysis method based on N-gram and frequent pattern mining |
US11043215B2 (en) * | 2019-03-25 | 2021-06-22 | Yandex Europe Ag | Method and system for generating textual representation of user spoken utterance |
US11120351B2 (en) * | 2015-09-21 | 2021-09-14 | International Business Machines Corporation | Generic term weighting based on query performance prediction |
US11262909B2 (en) * | 2016-06-02 | 2022-03-01 | Myscript | System and method for input recognition linguistic resource management |
US20220382973A1 (en) * | 2021-05-28 | 2022-12-01 | Microsoft Technology Licensing, Llc | Word Prediction Using Alternative N-gram Contexts |
US11531834B2 (en) * | 2016-03-22 | 2022-12-20 | Utopia Analytic Oy | Moderator tool for moderating acceptable and unacceptable contents and training of moderator model |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
CN105740244A (en) * | 2014-12-08 | 2016-07-06 | 阿里巴巴集团控股有限公司 | Method and equipment for providing rapid conversation information |
US9973887B2 (en) * | 2016-01-21 | 2018-05-15 | Google Llc | Sharing navigation data among co-located computing devices |
Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060053015A1 (en) * | 2001-04-03 | 2006-03-09 | Chunrong Lai | Method, apparatus and system for building a compact language model for large vocabulary continous speech recognition (lvcsr) system |
US20080243481A1 (en) * | 2007-03-26 | 2008-10-02 | Thorsten Brants | Large Language Models in Machine Translation |
US20090192781A1 (en) * | 2008-01-30 | 2009-07-30 | At&T Labs | System and method of providing machine translation from a source language to a target language |
US20100169094A1 (en) * | 2008-12-25 | 2010-07-01 | Kabushiki Kaisha Toshiba | Speaker adaptation apparatus and program thereof |
Family Cites Families (150)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4820059A (en) | 1985-10-30 | 1989-04-11 | Central Institute For The Deaf | Speech processing apparatus and methods |
US5477451A (en) | 1991-07-25 | 1995-12-19 | International Business Machines Corp. | Method and system for natural language translation |
US5267345A (en) | 1992-02-10 | 1993-11-30 | International Business Machines Corporation | Speech recognition apparatus which predicts word classes from context and words from word classes |
DE69326431T2 (en) | 1992-12-28 | 2000-02-03 | Toshiba Kawasaki Kk | Voice recognition interface system that can be used as a window system and voice mail system |
TW323364B (en) | 1993-11-24 | 1997-12-21 | At & T Corp | |
US5638487A (en) | 1994-12-30 | 1997-06-10 | Purespeech, Inc. | Automatic speech recognition |
US5715367A (en) | 1995-01-23 | 1998-02-03 | Dragon Systems, Inc. | Apparatuses and methods for developing and using models for speech recognition |
DE19533541C1 (en) | 1995-09-11 | 1997-03-27 | Daimler Benz Aerospace Ag | Method for the automatic control of one or more devices by voice commands or by voice dialog in real time and device for executing the method |
US6397180B1 (en) | 1996-05-22 | 2002-05-28 | Qwest Communications International Inc. | Method and system for performing speech recognition based on best-word scoring of repeated speech attempts |
US6021403A (en) | 1996-07-19 | 2000-02-01 | Microsoft Corporation | Intelligent user assistance facility |
US5822730A (en) | 1996-08-22 | 1998-10-13 | Dragon Systems, Inc. | Lexical tree pre-filtering in speech recognition |
US6167377A (en) | 1997-03-28 | 2000-12-26 | Dragon Systems, Inc. | Speech recognition language models |
US6119186A (en) | 1997-05-30 | 2000-09-12 | Texas Instruments Incorporated | Computer system with environmental manager for detecting and responding to changing environmental conditions |
US6182038B1 (en) | 1997-12-01 | 2001-01-30 | Motorola, Inc. | Context dependent phoneme networks for encoding speech information |
EP0960417B1 (en) | 1997-12-12 | 2003-05-28 | Koninklijke Philips Electronics N.V. | Method of determining model-specific factors for pattern recognition, in particular for speech patterns |
US6317712B1 (en) | 1998-02-03 | 2001-11-13 | Texas Instruments Incorporated | Method of phonetic modeling using acoustic decision tree |
US6418431B1 (en) | 1998-03-30 | 2002-07-09 | Microsoft Corporation | Information retrieval and speech recognition based on language models |
US8938688B2 (en) | 1998-12-04 | 2015-01-20 | Nuance Communications, Inc. | Contextual prediction of user words and user actions |
US7881936B2 (en) | 1998-12-04 | 2011-02-01 | Tegic Communications, Inc. | Multimodal disambiguation of speech recognition |
US6922669B2 (en) | 1998-12-29 | 2005-07-26 | Koninklijke Philips Electronics N.V. | Knowledge-based strategies applied to N-best lists in automatic speech recognition systems |
US6912499B1 (en) | 1999-08-31 | 2005-06-28 | Nortel Networks Limited | Method and apparatus for training a multilingual speech model set |
JP4292646B2 (en) | 1999-09-16 | 2009-07-08 | 株式会社デンソー | User interface device, navigation system, information processing device, and recording medium |
US6789231B1 (en) | 1999-10-05 | 2004-09-07 | Microsoft Corporation | Method and system for providing alternatives for text derived from stochastic input sources |
US6581033B1 (en) | 1999-10-19 | 2003-06-17 | Microsoft Corporation | System and method for correction of speech recognition mode errors |
US6778959B1 (en) | 1999-10-21 | 2004-08-17 | Sony Corporation | System and method for speech verification using out-of-vocabulary models |
US6446041B1 (en) | 1999-10-27 | 2002-09-03 | Microsoft Corporation | Method and system for providing audio playback of a multi-source document |
US20020111990A1 (en) | 1999-11-01 | 2002-08-15 | Wood Christopher Noah | Internet based message management system |
US7403888B1 (en) | 1999-11-05 | 2008-07-22 | Microsoft Corporation | Language input user interface |
AU4869601A (en) | 2000-03-20 | 2001-10-03 | Robert J. Freeman | Natural-language processing system using a large corpus |
US6678415B1 (en) | 2000-05-12 | 2004-01-13 | Xerox Corporation | Document image decoding using an integrated stochastic language model |
US6539358B1 (en) | 2000-05-24 | 2003-03-25 | Delphi Technologies, Inc. | Voice-interactive docking station for a portable computing device |
US7149970B1 (en) | 2000-06-23 | 2006-12-12 | Microsoft Corporation | Method and system for filtering and selecting from a candidate list generated by a stochastic input method |
US7623648B1 (en) | 2004-12-01 | 2009-11-24 | Tellme Networks, Inc. | Method and system of generating reference variations for directory assistance data |
US20020078091A1 (en) | 2000-07-25 | 2002-06-20 | Sonny Vu | Automatic summarization of a document |
US7043422B2 (en) | 2000-10-13 | 2006-05-09 | Microsoft Corporation | Method and apparatus for distribution-based language model adaptation |
US7219058B1 (en) | 2000-10-13 | 2007-05-15 | At&T Corp. | System and method for processing speech recognition results |
US7457750B2 (en) | 2000-10-13 | 2008-11-25 | At&T Corp. | Systems and methods for dynamic re-configurable speech recognition |
US6876966B1 (en) | 2000-10-16 | 2005-04-05 | Microsoft Corporation | Pattern recognition training method and apparatus using inserted noise followed by noise reduction |
ATE297588T1 (en) | 2000-11-14 | 2005-06-15 | Ibm | ADJUSTING PHONETIC CONTEXT TO IMPROVE SPEECH RECOGNITION |
ATE391986T1 (en) | 2000-11-23 | 2008-04-15 | Ibm | VOICE NAVIGATION IN WEB APPLICATIONS |
US6915262B2 (en) | 2000-11-30 | 2005-07-05 | Telesector Resources Group, Inc. | Methods and apparatus for performing speech recognition and using speech recognition results |
US20020087309A1 (en) | 2000-12-29 | 2002-07-04 | Lee Victor Wai Leung | Computer-implemented speech expectation-based probability method and system |
DE10100725C1 (en) | 2001-01-10 | 2002-01-24 | Philips Corp Intellectual Pty | Automatic dialogue system for speech interrogation of databank entries uses speech recognition system assisted by speech model obtained before beginning of dialogue |
US7027987B1 (en) | 2001-02-07 | 2006-04-11 | Google Inc. | Voice interface for a search engine |
WO2002073331A2 (en) | 2001-02-20 | 2002-09-19 | Semantic Edge Gmbh | Natural language context-sensitive and knowledge-based interaction environment for dynamic and flexible product, service and information search and presentation applications |
US7778816B2 (en) | 2001-04-24 | 2010-08-17 | Microsoft Corporation | Method and system for applying input mode bias |
US6714778B2 (en) | 2001-05-15 | 2004-03-30 | Nokia Corporation | Context sensitive web services |
US20030008680A1 (en) | 2001-05-24 | 2003-01-09 | Huh Stephen S. | Using identification information obtained from a portable phone |
US7225130B2 (en) | 2001-09-05 | 2007-05-29 | Voice Signal Technologies, Inc. | Methods, systems, and programming for performing speech recognition |
US7526431B2 (en) | 2001-09-05 | 2009-04-28 | Voice Signal Technologies, Inc. | Speech recognition using ambiguous or phone key spelling and/or filtering |
US6901364B2 (en) | 2001-09-13 | 2005-05-31 | Matsushita Electric Industrial Co., Ltd. | Focused language models for improved speech input of structured documents |
US6959276B2 (en) | 2001-09-27 | 2005-10-25 | Microsoft Corporation | Including the category of environmental noise when processing speech signals |
US6950796B2 (en) | 2001-11-05 | 2005-09-27 | Motorola, Inc. | Speech recognition by dynamical noise model adaptation |
US6999931B2 (en) | 2002-02-01 | 2006-02-14 | Intel Corporation | Spoken dialog system using a best-fit language model and best-fit grammar |
US7174288B2 (en) | 2002-05-08 | 2007-02-06 | Microsoft Corporation | Multi-modal entry of ideogrammatic languages |
US7403890B2 (en) | 2002-05-13 | 2008-07-22 | Roushar Joseph C | Multi-dimensional method and apparatus for automated language interpretation |
US7224981B2 (en) | 2002-06-20 | 2007-05-29 | Intel Corporation | Speech recognition of mobile devices |
US7570943B2 (en) | 2002-08-29 | 2009-08-04 | Nokia Corporation | System and method for providing context sensitive recommendations to digital services |
JP4109063B2 (en) | 2002-09-18 | 2008-06-25 | パイオニア株式会社 | Speech recognition apparatus and speech recognition method |
JP4352790B2 (en) | 2002-10-31 | 2009-10-28 | セイコーエプソン株式会社 | Acoustic model creation method, speech recognition device, and vehicle having speech recognition device |
US7149688B2 (en) | 2002-11-04 | 2006-12-12 | Speechworks International, Inc. | Multi-lingual speech recognition with cross-language context modeling |
US6993615B2 (en) | 2002-11-15 | 2006-01-31 | Microsoft Corporation | Portable computing device-integrated appliance |
US7457745B2 (en) | 2002-12-03 | 2008-11-25 | Hrl Laboratories, Llc | Method and apparatus for fast on-line automatic speaker/environment adaptation for speech/speaker recognition in the presence of changing environments |
WO2004053836A1 (en) | 2002-12-10 | 2004-06-24 | Kirusa, Inc. | Techniques for disambiguating speech input using multimodal interfaces |
US7373300B1 (en) | 2002-12-18 | 2008-05-13 | At&T Corp. | System and method of providing a spoken dialog interface to a website |
US7698136B1 (en) | 2003-01-28 | 2010-04-13 | Voxify, Inc. | Methods and apparatus for flexible speech recognition |
US7805299B2 (en) | 2004-03-01 | 2010-09-28 | Coifman Robert E | Method and apparatus for improving the transcription accuracy of speech recognition software |
CA2428821C (en) | 2003-05-15 | 2009-03-17 | Ibm Canada Limited - Ibm Canada Limitee | Accessing a platform independent input method editor from an underlying operating system |
US20040243415A1 (en) | 2003-06-02 | 2004-12-02 | International Business Machines Corporation | Architecture for a speech input method editor for handheld portable devices |
US7392188B2 (en) | 2003-07-31 | 2008-06-24 | Telefonaktiebolaget Lm Ericsson (Publ) | System and method enabling acoustic barge-in |
JP4548646B2 (en) | 2003-09-12 | 2010-09-22 | 株式会社エヌ・ティ・ティ・ドコモ | Noise model noise adaptation system, noise adaptation method, and speech recognition noise adaptation program |
US7634720B2 (en) | 2003-10-24 | 2009-12-15 | Microsoft Corporation | System and method for providing context to an input method |
FI20031566A (en) | 2003-10-27 | 2005-04-28 | Nokia Corp | Select a language for word recognition |
CA2486128C (en) | 2003-10-30 | 2011-08-23 | At&T Corp. | System and method for using meta-data dependent language modeling for automatic speech recognition |
US20050114474A1 (en) | 2003-11-20 | 2005-05-26 | International Business Machines Corporation | Automatic configuration of the network devices via connection to specific switch ports |
US7634095B2 (en) | 2004-02-23 | 2009-12-15 | General Motors Company | Dynamic tuning of hands-free algorithm for noise and driving conditions |
US7400878B2 (en) | 2004-02-26 | 2008-07-15 | Research In Motion Limited | Computing device with environment aware features |
US20050246325A1 (en) | 2004-04-30 | 2005-11-03 | Microsoft Corporation | Method and system for recording and accessing usage of an item in a computer system |
JP3923513B2 (en) | 2004-06-08 | 2007-06-06 | 松下電器産業株式会社 | Speech recognition apparatus and speech recognition method |
US7299181B2 (en) | 2004-06-30 | 2007-11-20 | Microsoft Corporation | Homonym processing in the context of voice-activated command systems |
US7562069B1 (en) | 2004-07-01 | 2009-07-14 | Aol Llc | Query disambiguation |
US20060009974A1 (en) | 2004-07-09 | 2006-01-12 | Matsushita Electric Industrial Co., Ltd. | Hands-free voice dialing for portable and remote devices |
US7580363B2 (en) | 2004-08-16 | 2009-08-25 | Nokia Corporation | Apparatus and method for facilitating contact selection in communication devices |
KR101130457B1 (en) | 2004-11-04 | 2012-03-28 | 마이크로소프트 코포레이션 | Extracting treelet translation pairs |
US7698124B2 (en) | 2004-11-04 | 2010-04-13 | Microsoft Corporaiton | Machine translation system incorporating syntactic dependency treelets into a statistical framework |
JP3955880B2 (en) | 2004-11-30 | 2007-08-08 | 松下電器産業株式会社 | Voice recognition device |
US8009678B2 (en) | 2005-03-17 | 2011-08-30 | Microsoft Corporation | System and method for generating a dynamic prioritized contact list |
US7739286B2 (en) | 2005-03-17 | 2010-06-15 | University Of Southern California | Topic specific language models built from large numbers of documents |
EP1894125A4 (en) | 2005-06-17 | 2015-12-02 | Nat Res Council Canada | Means and method for adapted language translation |
US20070060114A1 (en) | 2005-09-14 | 2007-03-15 | Jorey Ramer | Predictive text completion for a mobile communication facility |
US7672833B2 (en) | 2005-09-22 | 2010-03-02 | Fair Isaac Corporation | Method and apparatus for automatic entity disambiguation |
US7599893B2 (en) | 2005-10-13 | 2009-10-06 | Aureon Laboratories, Inc. | Methods and systems for feature selection in machine learning based on feature contribution and model fitness |
EP1791114B1 (en) | 2005-11-25 | 2009-08-12 | Swisscom AG | A method for personalization of a service |
JP4961755B2 (en) | 2006-01-23 | 2012-06-27 | 富士ゼロックス株式会社 | Word alignment device, word alignment method, word alignment program |
JP5218052B2 (en) | 2006-06-26 | 2013-06-26 | 日本電気株式会社 | Language model generation system, language model generation method, and language model generation program |
US8001130B2 (en) | 2006-07-25 | 2011-08-16 | Microsoft Corporation | Web object retrieval based on a language model |
US7907705B1 (en) | 2006-10-10 | 2011-03-15 | Intuit Inc. | Speech to text for assisted form completion |
US8041568B2 (en) | 2006-10-13 | 2011-10-18 | Google Inc. | Business listing search |
US7890326B2 (en) | 2006-10-13 | 2011-02-15 | Google Inc. | Business listing search |
US8073681B2 (en) | 2006-10-16 | 2011-12-06 | Voicebox Technologies, Inc. | System and method for a cooperative conversational voice user interface |
WO2008067562A2 (en) | 2006-11-30 | 2008-06-05 | Rao Ashwin P | Multimodal speech recognition system |
US20080131851A1 (en) | 2006-12-04 | 2008-06-05 | Dimitri Kanevsky | Context-sensitive language learning |
US20080162117A1 (en) | 2006-12-28 | 2008-07-03 | Srinivas Bangalore | Discriminative training of models for sequence classification |
US7941189B2 (en) | 2007-02-07 | 2011-05-10 | Denso Corporation | Communicating road noise control system, in-vehicle road noise controller, and server |
US20100325109A1 (en) | 2007-02-09 | 2010-12-23 | Agency For Science, Technology And Rearch | Keyword classification and determination in language modelling |
US20080221901A1 (en) | 2007-03-07 | 2008-09-11 | Joseph Cerra | Mobile general search environment speech processing facility |
US8838457B2 (en) | 2007-03-07 | 2014-09-16 | Vlingo Corporation | Using results of unstructured language model based speech recognition to control a system-level function of a mobile communications facility |
US20090030687A1 (en) | 2007-03-07 | 2009-01-29 | Cerra Joseph P | Adapting an unstructured language model speech recognition system based on usage |
US8060373B2 (en) | 2007-03-21 | 2011-11-15 | At&T Intellectual Property I, L.P. | System and method of identifying contact information |
US7895177B2 (en) | 2007-05-29 | 2011-02-22 | Yahoo! Inc. | Enabling searching of user ratings and reviews using user profile location, and social networks |
US7831427B2 (en) | 2007-06-20 | 2010-11-09 | Microsoft Corporation | Concept monitoring in spoken-word audio |
US8321219B2 (en) | 2007-10-05 | 2012-11-27 | Sensory, Inc. | Systems and methods of performing speech recognition using gestures |
US7953692B2 (en) | 2007-12-07 | 2011-05-31 | Microsoft Corporation | Predicting candidates using information sources |
US8423362B2 (en) | 2007-12-21 | 2013-04-16 | General Motors Llc | In-vehicle circumstantial speech recognition |
US8583416B2 (en) | 2007-12-27 | 2013-11-12 | Fluential, Llc | Robust information extraction from utterances |
US8473276B2 (en) | 2008-02-19 | 2013-06-25 | Google Inc. | Universal language input |
US8121837B2 (en) | 2008-04-24 | 2012-02-21 | Nuance Communications, Inc. | Adjusting a speech engine for a mobile computing device based on background noise |
US8090738B2 (en) | 2008-05-14 | 2012-01-03 | Microsoft Corporation | Multi-modal search wildcards |
US8364481B2 (en) | 2008-07-02 | 2013-01-29 | Google Inc. | Speech recognition with parallel recognition tasks |
US8027973B2 (en) | 2008-08-04 | 2011-09-27 | Microsoft Corporation | Searching questions based on topic and focus |
US8407236B2 (en) | 2008-10-03 | 2013-03-26 | Microsoft Corp. | Mining new words from a query log for input method editors |
GB2477653B (en) | 2008-10-10 | 2012-11-14 | Nuance Communications Inc | Generating and processing forms for receiving speech data |
US9798720B2 (en) | 2008-10-24 | 2017-10-24 | Ebay Inc. | Hybrid machine translation |
US9043209B2 (en) | 2008-11-28 | 2015-05-26 | Nec Corporation | Language model creation device |
US8352321B2 (en) | 2008-12-12 | 2013-01-08 | Microsoft Corporation | In-text embedded advertising |
US20110213655A1 (en) | 2009-01-24 | 2011-09-01 | Kontera Technologies, Inc. | Hybrid contextual advertising and related content analysis and display techniques |
US8509398B2 (en) | 2009-04-02 | 2013-08-13 | Microsoft Corporation | Voice scratchpad |
US20100318531A1 (en) | 2009-06-10 | 2010-12-16 | Microsoft Corporation | Smoothing clickthrough data for web search ranking |
US9892730B2 (en) | 2009-07-01 | 2018-02-13 | Comcast Interactive Media, Llc | Generating topic-specific language models |
US8364612B2 (en) | 2009-09-15 | 2013-01-29 | Microsoft Corporation | Machine learning using relational databases |
US8255217B2 (en) | 2009-10-16 | 2012-08-28 | At&T Intellectual Property I, Lp | Systems and methods for creating and using geo-centric language models |
US8589163B2 (en) | 2009-12-04 | 2013-11-19 | At&T Intellectual Property I, L.P. | Adapting language models with a bit mask for a subset of related words |
US8909514B2 (en) | 2009-12-15 | 2014-12-09 | Microsoft Corporation | Unsupervised learning using global features, including for log-linear model word segmentation |
US20110162035A1 (en) | 2009-12-31 | 2011-06-30 | Apple Inc. | Location-based dock for a computing device |
US8265928B2 (en) | 2010-04-14 | 2012-09-11 | Google Inc. | Geotagged environmental audio for enhanced speech recognition accuracy |
US8694313B2 (en) | 2010-05-19 | 2014-04-08 | Google Inc. | Disambiguation of contact information using historical data |
US8468012B2 (en) | 2010-05-26 | 2013-06-18 | Google Inc. | Acoustic model adaptation using geographic information |
US8521526B1 (en) | 2010-07-28 | 2013-08-27 | Google Inc. | Disambiguation of a spoken query term |
US8473289B2 (en) | 2010-08-06 | 2013-06-25 | Google Inc. | Disambiguating input based on context |
US8532994B2 (en) | 2010-08-27 | 2013-09-10 | Cisco Technology, Inc. | Speech recognition using a personal vocabulary and language model |
US8566260B2 (en) | 2010-09-30 | 2013-10-22 | Nippon Telegraph And Telephone Corporation | Structured prediction model learning apparatus, method, program, and recording medium |
US8352245B1 (en) | 2010-12-30 | 2013-01-08 | Google Inc. | Adjusting language models |
US8296142B2 (en) | 2011-01-21 | 2012-10-23 | Google Inc. | Speech recognition using dock context |
US8798984B2 (en) | 2011-04-27 | 2014-08-05 | Xerox Corporation | Method and system for confidence-weighted learning of factored discriminative language models |
WO2012170817A1 (en) | 2011-06-10 | 2012-12-13 | Google Inc. | Augmenting statistical machine translation with linguistic knowledge |
US8938391B2 (en) | 2011-06-12 | 2015-01-20 | Microsoft Corporation | Dynamically adding personalization features to language models for voice search |
US20130110491A1 (en) | 2011-10-28 | 2013-05-02 | Microsoft Corporation | Discriminative learning of feature functions of generative type in speech translation |
WO2013083132A1 (en) | 2011-12-05 | 2013-06-13 | Copenhagen Business School | Translation method and computer programme for assisting the same |
US9043205B2 (en) | 2012-06-21 | 2015-05-26 | Google Inc. | Dynamic language model |
US9235567B2 (en) | 2013-01-14 | 2016-01-12 | Xerox Corporation | Multi-domain machine translation model adaptation |
-
2015
- 2015-05-11 US US14/708,465 patent/US10134394B2/en active Active
Patent Citations (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060053015A1 (en) * | 2001-04-03 | 2006-03-09 | Chunrong Lai | Method, apparatus and system for building a compact language model for large vocabulary continous speech recognition (lvcsr) system |
US20080243481A1 (en) * | 2007-03-26 | 2008-10-02 | Thorsten Brants | Large Language Models in Machine Translation |
US20090192781A1 (en) * | 2008-01-30 | 2009-07-30 | At&T Labs | System and method of providing machine translation from a source language to a target language |
US20100169094A1 (en) * | 2008-12-25 | 2010-07-01 | Kabushiki Kaisha Toshiba | Speaker adaptation apparatus and program thereof |
Non-Patent Citations (3)
Title |
---|
Tsuruoka Yoshimasa (stochastic gradient Descent training for L1-regularized Log-Linear Model with Cumulative penalty Aug. 2-7, 2009. * |
Tsuruoka Yoshimasa (stochastic gradient Descent training for LI -regularized Log-Linear Model with Cumulative penalty Aug. 2-7, 2009. * |
Tsuruoka, et al., " Stochastic Gradient Descent Training for L1-regularized Log-linear Models with Cumulative Penalty", Retrieved at <<http://www.aclweb.org/anthology/P/P09/P09-1054.pdf>>, Proceedings of the 47th Annual Meeting of the ACL and the 4th IJCNLP of the AFNLP, Aug. 2-7, 2009, pp. 477-485. cited by applicant * |
Cited By (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US11120351B2 (en) * | 2015-09-21 | 2021-09-14 | International Business Machines Corporation | Generic term weighting based on query performance prediction |
US11531834B2 (en) * | 2016-03-22 | 2022-12-20 | Utopia Analytic Oy | Moderator tool for moderating acceptable and unacceptable contents and training of moderator model |
US11262909B2 (en) * | 2016-06-02 | 2022-03-01 | Myscript | System and method for input recognition linguistic resource management |
US10847146B2 (en) * | 2016-06-16 | 2020-11-24 | Baidu Online Network Technology (Beijing) Co., Ltd. | Multiple voice recognition model switching method and apparatus, and storage medium |
US20190096396A1 (en) * | 2016-06-16 | 2019-03-28 | Baidu Online Network Technology (Beijing) Co., Ltd. | Multiple Voice Recognition Model Switching Method And Apparatus, And Storage Medium |
US10832664B2 (en) * | 2016-08-19 | 2020-11-10 | Google Llc | Automated speech recognition using language models that selectively use domain-specific model components |
US20180053502A1 (en) * | 2016-08-19 | 2018-02-22 | Google Inc. | Language models using domain-specific model components |
US11557289B2 (en) | 2016-08-19 | 2023-01-17 | Google Llc | Language models using domain-specific model components |
US11875789B2 (en) | 2016-08-19 | 2024-01-16 | Google Llc | Language models using domain-specific model components |
US11037551B2 (en) | 2017-02-14 | 2021-06-15 | Google Llc | Language model biasing system |
US10311860B2 (en) * | 2017-02-14 | 2019-06-04 | Google Llc | Language model biasing system |
US11682383B2 (en) | 2017-02-14 | 2023-06-20 | Google Llc | Language model biasing system |
US20190155907A1 (en) * | 2017-11-20 | 2019-05-23 | Minds Lab., Inc. | System for generating learning sentence and method for generating similar sentence using same |
US11043215B2 (en) * | 2019-03-25 | 2021-06-22 | Yandex Europe Ag | Method and system for generating textual representation of user spoken utterance |
CN112882997A (en) * | 2021-02-19 | 2021-06-01 | 武汉大学 | System log analysis method based on N-gram and frequent pattern mining |
US20220382973A1 (en) * | 2021-05-28 | 2022-12-01 | Microsoft Technology Licensing, Llc | Word Prediction Using Alternative N-gram Contexts |
Also Published As
Publication number | Publication date |
---|---|
US10134394B2 (en) | 2018-11-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US10134394B2 (en) | Speech recognition using log-linear model | |
US11875789B2 (en) | Language models using domain-specific model components | |
US9805713B2 (en) | Addressing missing features in models | |
US9412365B2 (en) | Enhanced maximum entropy models | |
US9842592B2 (en) | Language models using non-linguistic context | |
Coucke et al. | Snips voice platform: an embedded spoken language understanding system for private-by-design voice interfaces | |
US10121468B2 (en) | System and method for combining geographic metadata in automatic speech recognition language and acoustic models | |
US10957312B2 (en) | Scalable dynamic class language modeling | |
US9558743B2 (en) | Integration of semantic context information | |
US9293136B2 (en) | Multiple recognizer speech recognition | |
US20160092434A1 (en) | Integrated word n-gram and class m-gram language models | |
CN113692616B (en) | Phoneme-based contextualization for cross-language speech recognition in an end-to-end model | |
CN107533841B (en) | Speech recognition for keywords | |
US11437025B2 (en) | Cross-lingual speech recognition | |
Lane et al. | Out-of-domain utterance detection using classification confidences of multiple topics | |
US20140149119A1 (en) | Speech transcription including written text | |
Ghai et al. | Using gaussian mixtures on triphone acoustic modelling-based punjabi continuous speech recognition | |
US11568863B1 (en) | Skill shortlister for natural language processing | |
US10096317B2 (en) | Hierarchical speech recognition decoder | |
Abdou et al. | Arabic speech recognition: Challenges and state of the art | |
Kakouros et al. | Analyzing the contribution of top-down lexical and bottom-up acoustic cues in the detection of sentence prominence | |
AT&T | ||
JP2006107353A (en) | Information processor, information processing method, recording medium and program | |
US20230186898A1 (en) | Lattice Speech Corrections | |
Sajjan et al. | Kannada speech recognition using decision tree based clustering |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CASEIRO, DIAMANTINO ANTONIO;BIADSY, FADI;SIGNING DATES FROM 20150509 TO 20150511;REEL/FRAME:036391/0842 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044129/0001Effective date: 20170929 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |