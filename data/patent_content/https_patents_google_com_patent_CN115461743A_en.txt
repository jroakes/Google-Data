CN115461743A - System and method for delegated analytics collection - Google Patents
System and method for delegated analytics collection Download PDFInfo
- Publication number
- CN115461743A CN115461743A CN202080100173.4A CN202080100173A CN115461743A CN 115461743 A CN115461743 A CN 115461743A CN 202080100173 A CN202080100173 A CN 202080100173A CN 115461743 A CN115461743 A CN 115461743A
- Authority
- CN
- China
- Prior art keywords
- data
- interaction
- computing device
- interaction data
- event
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/30—Monitoring
- G06F11/34—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment
- G06F11/3438—Recording or statistical evaluation of computer activity, e.g. of down time, of input/output operation ; Recording or statistical evaluation of user activity, e.g. usability assessment monitoring of user actions
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
- G06F21/6254—Protecting personal data, e.g. for financial or medical purposes by anonymising data, e.g. decorrelating personal data from the owner's identification
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/50—Monitoring users, programs or devices to maintain the integrity of platforms, e.g. of processors, firmware or operating systems
- G06F21/55—Detecting local intrusion or implementing counter-measures
- G06F21/552—Detecting local intrusion or implementing counter-measures involving long-term monitoring or reporting
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/64—Protecting data integrity, e.g. using checksums, certificates or signatures
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/54—Interprogram communication
- G06F9/542—Event management; Broadcasting; Multicasting; Notifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0242—Determining effectiveness of advertisements
- G06Q30/0244—Optimization
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06Q—INFORMATION AND COMMUNICATION TECHNOLOGY [ICT] SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES; SYSTEMS OR METHODS SPECIALLY ADAPTED FOR ADMINISTRATIVE, COMMERCIAL, FINANCIAL, MANAGERIAL OR SUPERVISORY PURPOSES, NOT OTHERWISE PROVIDED FOR
- G06Q30/00—Commerce
- G06Q30/02—Marketing; Price estimation or determination; Fundraising
- G06Q30/0241—Advertisements
- G06Q30/0251—Targeted advertisements
Abstract
One method comprises the following steps: responsive to a user interacting with a feature of a mobile application on a mobile device, tagging the feature of the mobile application as an event generator; generating an event having an event type; requesting, by an interaction measurement Software Development Kit (SDK), interaction data associated with a user interaction with a mobile application from the mobile application based on an event type; and securely transmitting, by the interaction measurement SDK, the interaction data to the first computing device indicated by the interaction measurement SDK.
Description
Background
It is helpful for the analytics system to be able to determine information about data from the client device, such as how many devices interacted with a particular content item. To do so, data is typically collected at the aggregator and then forwarded to the analytics service. However, forwarding data from the client device to the aggregator to the analytics service introduces time delays. Further, if the aggregator becomes unavailable (e.g., the client device is unable to send data to the aggregator), the analytics service will not receive the data and will not produce a result.
Disclosure of Invention
One implementation of the present disclosure is directed to a method comprising: responsive to a user interacting with a feature of a mobile application on a mobile device, tagging the feature of the mobile application as an event generator; generating an event having an event type; requesting, by an interaction measurement Software Development Kit (SDK), interaction data associated with a user's interaction with a mobile application from the mobile application based on an event type; and securely transmitting, by the interaction measurement SDK, the interaction data to the first computing device indicated by the interaction measurement SDK.
In some implementations, the interaction measurement SDK bundles interaction data from a number of events and transmits the bundled interaction data in response to a threshold. In some implementations, the threshold is a threshold time period or a threshold number of events. In some implementations, the interaction SDK generates a signature of the interaction data using a hashing algorithm, and wherein the first computing device uses the signature to verify the authenticity of the interaction data. In some implementations, the method further includes securely transmitting the interaction data to a second computing device associated with the mobile application, and wherein the interaction SDK removes the personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device. In some implementations, the interaction data includes an intermediate identifier, and wherein the method further includes identifying, by the second computing device, the supplemental data using the intermediate identifier, transmitting, by the second computing device, the supplemental data to the first computing device, and correlating, by the first computing device, the interaction data with the supplemental data. In some implementations, the first computing device does not have access to personally identifying information. In some implementations, the method further includes analyzing, by the first computing device, at least the interaction data to generate data describing, in real-time, usage of the mobile application. In some implementations, analyzing at least the interaction data includes identifying prior interactions of the user that were not performed using the mobile application.
Another implementation of the present disclosure is directed to a system for correlating data from different entities, the different entities including a client device, a first computing device, and a second computing device, wherein the client device includes processing circuitry having one or more processors and memory having instructions stored thereon, the instructions, when executed by the one or more processors, cause the processing circuitry to mark a feature in a mobile application as an event generator in response to a user interacting with the feature of the mobile application, generate an event having an event type, request interaction data associated with the user's interaction with the mobile application based on the event type, and securely transmit the interaction data to the first computing device, and wherein the instructions constitute a Software Development Kit (SDK).
In some implementations, the instructions cause the one or more processors to bundle interaction data from a number of events, and transmit the bundled interaction data in response to a threshold. In some implementations, the threshold is a threshold time period or a threshold number of events. In some implementations, the instructions cause the one or more processors to generate a signature of the interaction data using a hashing algorithm, and wherein the first computing device verifies authenticity of the interaction data using the signature. In some implementations, the instructions further cause the one or more processors to securely transmit the interaction data to the second computing device, and remove the personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device. In some implementations, wherein the interaction data includes an intermediate identifier, wherein the second computing device identifies the supplemental data using the intermediate identifier, wherein the second computing device transmits the supplemental data to the first computing device, and wherein the first computing device correlates the interaction data with the supplemental data. In some implementations, the first computing device does not have access to personally identifying information. In some implementations, the first computing device analyzes at least the interaction data to generate data describing, in real-time, the usage of the mobile application. In some implementations, analyzing at least the interaction data includes identifying prior interactions of the user that were not performed using the mobile application.
Another implementation of the present disclosure is directed to a computer-readable medium having stored thereon instructions that make up a Software Development Kit (SDK) for a mobile device, the instructions, when executed by one or more processors, cause the one or more processors to, in response to a user interacting with a feature of a mobile application on a mobile device, mark the feature of the mobile application as an event generator, generate an event having an event type, request interaction data associated with the user's interaction with the mobile application from the mobile device based on the event type, and securely transmit the interaction data to a first computing device.
In some implementations, wherein the SDK binds the interaction data from a number of events, and the bound interaction data is transmitted in response to a threshold, wherein the threshold is a threshold period of time or a threshold number of events, wherein the interaction SDK generates a signature of the interaction data using a hashing algorithm, and wherein the first computing device uses the signature to verify the authenticity of the interaction data. In some implementations, the instructions further cause the one or more processors to securely transmit the interaction data to the second computing device, and remove the personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device.
Various aspects and implementations may be combined where appropriate.
Drawings
FIG. 1 is a diagram showing various entities interacting across a network in accordance with an illustrative implementation.
Fig. 2 is a diagram illustrating an architecture for data transfer and correlation, according to one implementation.
FIG. 3 is a flow diagram showing a method of generating and transmitting event data using the architecture of FIG. 2 in accordance with an illustrative implementation.
FIG. 4 is a flow diagram showing a method of determining supplemental data using the architecture of FIG. 2 in accordance with an illustrative implementation.
FIG. 5 is a flow diagram showing a method for generating analysis results using the architecture of FIG. 2 in accordance with an illustrative implementation.
FIG. 6 is a block diagram of a computing system in accordance with an illustrative implementation.
Detailed Description
The following is a more detailed description of various related concepts and implementations related to methods, apparatus and systems for collecting event data in a timely and redundant manner while preserving privacy. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways, as the described concepts are not limited to any particular implementation.
In many fields, it may be desirable to collect event data from mobile devices. For example, in the event of a failure (e.g., a software crash, a hardware failure, etc.), it is often desirable to collect event data such as device settings, operating parameters, etc. in order to diagnose and repair the failure. In other fields, it may be desirable for a provider of third party content to determine the rate of interaction with the third party content.
The systems and methods of the present disclosure generally relate to reporting mobile device event data. More particularly, the systems and methods of the present disclosure relate to unique Software Development Kits (SDKs) and computer architecture methods that collect and correlate event data from mobile devices.
Typically, event data from a mobile device is sent to a single endpoint (e.g., aggregator, etc.) and then forwarded to an analytics system for analysis (e.g., correlation, etc.). For example, event data generated by the first mobile application may be transmitted to a server controlled by a developer of the first mobile application, which may collect the data and forward it to an analytics system that determines aggregate statistics associated with the event data. However, a single endpoint may not always be available. For example, an endpoint may experience unexpected failures or routine maintenance that renders it unable to receive data from a mobile device and/or forward data to an analysis system. It is desirable to have a robust architecture that facilitates event data analysis even if the first endpoint becomes unavailable. Therefore, a unique SDK and computer architecture approach is needed to facilitate the transfer of event data directly to an analytics system.
As described above, event data from a mobile device is typically sent to a single endpoint (e.g., aggregator, etc.) and then forwarded to an analytics system for analysis. For example, a developer may receive event data and send the event data to a third party for analysis (e.g., because analyzing the event data is extremely difficult, complex, and/or expensive for the developer, etc.). However, transmitting event data from the client device to the aggregator and then to the analytics system introduces time delays. Introducing a time delay may be undesirable. For example, an analysis system may be used to identify defects in the application 12, such as link failures. The time delay introduced by forwarding data from the client device to the aggregator and then to the analytics system may use additional system and network resources that may be more efficiently deployed elsewhere, and may increase the amount of time it takes to identify defects in the application 12. For example, the analysis system may detect a failed hyperlink a few days after failure (e.g., cessation of normal operation, etc.). Therefore, there is a need for a unique SDK and computer architecture approach to facilitate timely analysis of application events.
Aspects of the present disclosure provide improved data reporting and analysis paths and computer architectures. These paths and architectures can be used to report and analyze mobile device event data in a robust and timely manner that prevents exposure of PII to third parties.
To ensure robustness against endpoint failures, the systems and methods of the present disclosure introduce an SDK that facilitates sending data to the second endpoint. One non-limiting example implementation is as follows: a user using a desktop device may view the first content item. The first computing system may register that the user viewed the first content item. A user using the mobile application may then interact with the second content item, causing the mobile application to transmit event data associated with the interaction to the first computing device. The SDK embedded in the mobile application may register that the user interacted with the second content item and may prepare event data associated with the interaction for transmission. For example, the event data may include a content item, a time, and a source of the content item (e.g., a website, etc.). The SDK may remove any personal identifiers, such as mobile device identifiers, from the event data. The SDK may then securely transmit the event data to the second computing device. The first computing device may identify the user and prepare supplemental data associated with the user's interaction with the second content item. For example, the first computing device may identify data corresponding to a user interaction with the first content item. The first computing device may remove any personal identifiers from the supplemental data and transmit the supplemental data to the second computing device. The second computing device may correlate the event data with the supplemental data to determine a result.
In various embodiments, the SDK of the present disclosure removes the identifier from the event data prior to transmitting the event data to the analytics system. In various embodiments, the SDK of the present disclosure facilitates correlation of data through an intermediate identifier. For example, the SDK of the present disclosure may transmit event data with an intermediate identifier (e.g., event identifier, etc.) to a first endpoint (e.g., aggregator, etc.) and an analytics system. The first endpoint may be associated with an application (e.g., a server maintained by a developer of the application, etc.). In some implementations, the first endpoint may independently maintain user information, such as an account balance associated with a user account of the application. The first endpoint may identify supplemental data. For example, the first endpoint may maintain a database with interaction data, and may search the database for interaction data associated with the user. The supplemental data may include an intermediate identifier. The first endpoint may transmit the supplemental data to the analytics system, which may correlate the supplemental data with the event data using the intermediate identifier, thereby protecting the PII.
Referring now to FIG. 1, a system 100 for collecting event data from a mobile device is shown in accordance with an illustrative implementation. System 100 includes a client device 10, a first data processing system 200, and a second data processing system 300. In various implementations, the components of system 100 communicate over a network 60. The network 60 may include a computer network such as the internet, a local area network, a wide area network, a metropolitan area network, or other local area network, an intranet, a satellite network, other computer networks such as voice or data mobile telephone communication networks, combinations thereof, or any other type of electronic communication network. The network 60 may include or constitute a display network (e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system or that are eligible to include third-party content items as part of a content item placement campaign). In various implementations, the network 60 facilitates secure communications between components of the system 100. By way of non-limiting example, the network 60 may implement Transport Layer Security (TLS), secure Sockets Layer (SSL), secure hypertext transfer protocol (HTTPS), and/or any other secure communication protocol.
The client device 10 may be a mobile computing device, a smartphone, a tablet, or any other device configured to facilitate receiving, displaying, and interacting with content (e.g., web pages, mobile applications, etc.). The client device 10 may include an application 20 to receive and display online content, and to receive user interactions with online content. For example, the application 20 may be a web browser. Additionally or alternatively, the application 20 may be a mobile application associated with a particular merchant.
In various implementations, the application 20 interacts with a content publisher to receive online content. For example, the application 20 may receive information resources from a content publisher. The information resources may include web-based content items, such as web pages or other online documents. The information resources may include instructions (e.g., scripts, executable code, etc.) that, when interpreted by the application 20, cause the application 20 to display a graphical user interface, such as an interactable web page, to the user.
The application 20 is shown to include a software development kit 20 having an event circuit 22, a binding circuit 24, an encryption circuit 26, and a reporting circuit 28. The Software Development Kit (SDK) 20 may include a collection of software development tools contained in a package. The SDK20 may include an Application Programming Interface (API). In some implementations, the SDK20 includes one or more libraries having reusable functionality that interfaces with particular system software (e.g., iOS, android, etc.). The SDK20 may facilitate embedding functionality in the application 12. For example, a developer may use the SDK20 to automatically transmit event data whenever a particular type of event occurs on the application 12. As a further example, the SDK20 may include reusable functionality configured to collect and report device analytics, and the developer may insert the reusable functionality into the instructions of the application 12 to cause the reusable functionality to be invoked during a particular action of the application 12. In some implementations, the event circuitry 22, the build circuitry 24, the encryption circuitry 26, and/or the reporting circuitry 28 are functionality (e.g., reusable functionality, etc.) provided by the SDK 20.
The event circuitry 22 may detect events within the application 12. In various implementations, the event circuit 22 may be configured to trigger other functionality based on detecting a particular event (e.g., a transaction, an in-app purchase, reaching a particular level in an in-app game, performing a particular number of actions, spending a particular amount of time interacting with an application, etc.). For example, the event circuit 22 may trigger the binding circuit 24 upon detecting an event within the application 12. In various implementations, the SDK20 includes functionality embedded in the application 12 to trigger the event circuit 22. For example, the developer may include the functionality of the SKD 20 in the transaction validation functionality of the application 12 that causes the event circuitry 22 to detect the validated transaction. It should be understood that events may include any action within an application that is important to a developer and are not limited to the examples explicitly contemplated herein. In various implementations, the event circuitry 22 is configured to distinguish between different types of events. For example, the event circuitry 22 may trigger a first set of actions based on a first type of detected event and may trigger a second set of actions based on a second type of detected event. In various implementations, the event circuitry 22 is configured to collect event data associated with the detected events and transmit the collected event data to the bundling circuitry 24.
The bundling circuitry 24 may bundle (e.g., aggregate, etc.) the event data. In various implementations, the bundling circuit 24 receives event data associated with the detected event from the event circuit 22. The bundling circuitry 24 may collect event data from one or more events and bundle the event data for transmission. For example, the bundling circuitry 24 may collect event data from ten events and combine the event data into a single bundle. The event data may include a timestamp of the event, a name of the event, and/or parameters of the event (e.g., purchased terms, price, currency, discounts, subscription information, etc.). In some implementations, the bundling circuit 24 transmits the bundles to the encryption circuit 26. Additionally or alternatively, the bundling circuitry 24 may transmit the bundling to the reporting circuitry 28. In various implementations, bundling circuitry 24 generates data bundles. The data binding may include a binding index, a binding timestamp, binding data, and a binding signature. In various implementations, the binding signature is generated by the encryption circuit 26, as described below. In some implementations, the bundle index specifies the location of particular event data in the bundle data. For example, the binding data may include an array of bytes and the binding index may include an index to the array of bytes.
The encryption circuit 26 may encrypt data to produce encrypted data. For example, the encryption circuit 26 may encrypt the bundled event data. Additionally or alternatively, the encryption circuit 26 may perform various deletion functions on the received data. For example, the encryption circuit 26 may remove identifiers (e.g., IP addresses, device identifiers, etc.), segment event data, add noise, or perform other functions to anonymize the data. In various implementations, the encryption circuit 26 implements asymmetric encryption. For example, the encryption circuit 26 may implement a Rivest-Shamir-Adleman (RSA) cryptographic system. In various implementations, the encryption circuit 26 may receive a public key from the first data processing system 200 and encrypt the received data using the public key. Additionally or alternatively, the encryption circuit 26 may generate a signature associated with the received data. For example, the encryption circuit 26 may generate a hash of the bundled event data received from the bundling circuit 24. One or more hash functions may be used. For example, the encryption circuit 26 may implement SHA-2, scrypt, ballon, and/or Argon2 hashing functions.
The reporting circuitry 28 may transmit the bundled event data to the first data processing system 200 and/or the second data processing system 300. In various implementations, the reporting circuitry 28 transmits data over the network 60. The reporting circuitry 28 may acknowledge the transmission of the data. For example, the reporting circuitry 28 may transmit the bundled event data to the first data processing system 200 and receive an acknowledgement that the bundled event data was successfully received. In some implementations, the reporting circuitry 28 first attempts to transmit the bundled event data to the first data processing system 200 and, if it fails, attempts to transmit the bundled event data to the second data processing system 300. Additionally or alternatively, the reporting circuitry 28 may transmit data to the first data processing system 200 and the second data processing system 300 in parallel. In some implementations, reporting circuitry 28 transmits different data to first data processing system 200 and second data processing system 300. For example, the reporting circuitry 28 may transmit encrypted event data with a device identifier to the first data processing system 200 and may transmit unencrypted event data without a device identifier to the second data processing system 300. Additionally or alternatively, the reporting circuit 28 may transmit the same data to the first data processing system 200 and the second data processing system 300.
In various implementations, the reporting circuit 28 transmits data periodically. For example, the reporting circuit 28 may transmit data at predetermined times. As another example, the reporting circuitry 28 may transmit data at certain intervals (e.g., every ten minutes, every ten hours, etc.). Additionally or alternatively, the reporting circuitry 28 may transmit data in response to a threshold. For example, the reporting circuit 28 may transmit data in response to the bundling circuit receiving a threshold amount of event data (e.g., ten events, one hundred events, etc.) from an event. In some implementations, the reporting circuitry 28 transmits data dynamically. For example, the reporting circuitry 28 may transmit data in response to the client device 10 being connected to a charging source. As another example, reporting circuitry 28 may transmit data in response to transmission bundling reaching a specified data size.
In various implementations, the reporting circuitry 28 reports the metrics. For example, reporting circuitry 28 may transmit metrics with each data bundle. The metrics may include a size of the data bundle, a timestamp of transmission and/or generation of the data bundle, a data bundle index, an SDK identifier, and/or a signature of the data bundle. In various implementations, the SDK identifier includes information associated with the SDK 20. For example, the SDK identifier may include a version number of the SDK 20. As discussed above with reference to encryption circuitry 26, the signature of the data bundle may include a hash of the data bundle contents.
The first data processing system 200 may receive event data from the SDK20 and/or generate supplemental data. In various implementations, the first data processing system 200 receives the data bundle from the SDK20, identifies supplemental data based on the content of the data bundle, and transmits the supplemental data to the second data processing system 300. In some implementations, the first data processing system 200 anonymizes the supplemental data prior to transmission to the second data processing system 300. For example, the first data processing system 200 may remove the personal identifier from the supplemental data prior to transmission to the second data processing system 300. The first data processing system 200 may be a server, a distributed processing cluster, a cloud processing system, or any other computing device. The first data processing system 200 may include or execute at least one computer program or at least one script. In some implementations, the first data processing system 200 includes a combination of software and hardware, such as one or more processors configured to execute one or more scripts.
First data processing system 200 is shown to include a database 210 and a processing circuit 220. The database 210 may store supplemental data. For example, database 210 may include information associated with previous content interactions. As a further example, a user using a desktop computer may navigate to a website and interact with a content item. The first data processing system 200 may receive information associated with a user's interaction with a content item and store the information in the database 210. The supplemental data may include a content identifier, a device identifier, a user identifier, a click stream, and the like. Database 210 may include one or more storage media. The storage medium may include, but is not limited to, magnetic storage, optical storage, flash memory, and/or RAM. First data processing system 200 may implement or facilitate various APIs to perform database functions (i.e., manage data stored in database 210). The API may be, but is not limited to, SQL, ODBC, JDBC, and/or any other data storage and manipulation API.
The processing circuit 220 may include a processor 222 and a memory 224. The memory 224 may have stored thereon instructions that, when executed by the processor 222, cause the processing circuit 220 to perform the various operations described herein. The operations described herein may be implemented using software, hardware, or a combination thereof. The processor 222 may comprise a microprocessor, ASIC, FPGA, the like, or combinations thereof. In many implementations, processor 222 may be a multi-core processor or processor array. Memory 224 may include, but is not limited to, an electronic, optical, magnetic, or any other storage device capable of providing program instructions to processor 222. Memory 224 may include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, a ROM, a RAM, an EEPROM, an EPROM, a flash memory, an optical medium, or any other suitable memory from which processor 222 may read instructions. The instructions may include code from any suitable computer programming language, such as, but not limited to, C + +, C #, java, javaScript, perl, HTML, XML, python, and Visual Basic.
The memory 224 may include a data aggregation circuit 226. The data aggregation circuit 226 may identify supplemental data from the database 210. In various embodiments, the data aggregation circuit 226 receives the data bundle from the SDK20 and analyzes the content of the data bundle to identify supplemental data. For example, the aggregation circuit 226 may receive a data bundle that includes an event associated with a first device identifier, may identify supplemental data that includes a previous content interaction associated with the device identifier, and may transmit the supplemental data to the second data processing system 300. In various implementations, the supplemental data is associated with the content of the data bundle. For example, the supplemental data may be related to event data of an event included in the bundle of data by an intermediate identifier. In some implementations, the data aggregation circuit 226 verifies the contents of the received data bundle. For example, the data aggregation circuit 226 may verify a signature included in the bundle of data. Additionally or alternatively, the data aggregation circuit 226 may decrypt the content of the data bundle. For example, data aggregation circuit 226 may receive an asymmetrically encrypted bundle of data and decrypt the asymmetrically encrypted bundle of data using a private key.
The second data processing system 300 may receive event data from the SDK20 and facilitate performing analysis on the received data to generate information. For example, the second data processing system 300 may receive a data bundle including event data from the SDK20 and supplemental data from the first data processing system 200 and securely correlate the received data to generate information. As another example, the second data processing system 300 may receive first data associated with the transaction from the SDK20 and second data associated with the user's interaction with the content item from the first data processing system 200 and correlate the first data and the second data.
In various embodiments, the second data processing system 300 generates aggregated information. For example, the second data processing system 300 may determine how many users completed the transaction after interacting with the content item. The aggregation information may describe the number or grouping of online interactions (e.g., interactions with a certain number of content items). Additionally or alternatively, the aggregated information may describe separate online interactions (e.g., a single interaction with a single content item). The aggregated information may include a unique identifier. In some implementations, the identifier identifies a marketing campaign. Additionally or alternatively, the identifier may uniquely identify each online interaction. In some implementations, the aggregation information describes one or more interactions associated with the content item. For example, the aggregated information may include the time, date, and/or location of the online interaction. Interactions described by the anonymous interaction data may include viewing the content item (e.g., navigating to a web page presenting the content item and/or determining that the item or a portion of the item is presented within a viewport of a device in which the web page is viewed, etc.), selecting/clicking on the content item, hovering over the content item, and/or other interactions with the content item.
The second data processing system 300 may be a server, a distributed processing cluster, a cloud processing system, or any other computing device. The second data processing system 300 may comprise or execute at least one computer program or at least one script. In some implementations, the second data processing system 300 includes a combination of software and hardware, such as one or more processors configured to execute one or more scripts.
The second data processing system 300 is shown to include a database 310 and a processing circuit 320. The database 310 may store the received data. For example, the database 310 may store event data received from the SDK20 and/or supplemental data received from the first data processing system 200. In some implementations, the database 310 stores identifiers. For example, the database 310 may store event data and supplemental data that share intermediate identifiers. The identifier may later be used for correlation of anonymous interaction data. Database 310 may include one or more storage media. The storage medium may include, but is not limited to, magnetic storage, optical storage, flash memory, and/or RAM. Second data processing system 300 may implement or facilitate various APIs to perform database functions (i.e., manage data stored in database 310). The API can be, but is not limited to, SQL, ODBC, JDBC, and/or any other data storage device and manipulation API.
The processing circuit 320 includes a processor 322 and a memory 324. The memory 324 may have stored thereon instructions that, when executed by the processor 322, cause the processing circuit 320 to perform the various operations described herein. The operations described herein may be implemented using software, hardware, or a combination thereof. The processor 322 may include a microprocessor, ASIC, FPGA, or the like or a combination thereof. In many implementations, processor 322 may be a multi-core processor or an array of processors. Memory 324 may include, but is not limited to, an electronic, optical, magnetic storage device, or any other storage device capable of providing program instructions to processor 322. Memory 324 may include a floppy disk, a CD-ROM, a DVD, a magnetic disk, a memory chip, a ROM, a RAM, an EEPROM, an EPROM, a flash memory, an optical medium, or any other suitable memory from which processor 322 may read instructions. The instructions may include code from any suitable computer programming language, such as, but not limited to, C + +, C #, java, javaScript, perl, HTML, XML, python, and Visual Basic.
The analysis circuit 328 may receive the data and generate information about the data. In various implementations, the analysis circuit 328 performs statistical operations on the received data to generate statistical measures that describe the received data. For example, the analysis circuitry 328 may determine an interaction rate associated with the marketing campaign. In some implementations, the analysis circuitry 328 generates demographic information (e.g., user distribution, etc.), geographic results (e.g., location distribution, etc.), and/or audiences (e.g., target user groups based on one or more parameters, such as users who purchased more than a threshold amount, etc.). In some implementations, the analysis circuit 328 correlates the event data with the supplemental data. For example, the analysis circuitry 328 may correlate event data associated with the event with supplemental data associated with the content interaction using the intermediate identifier to determine the impact of the content interaction on the evoked event. In various implementations, the analysis circuit 328 generates information. This information may include interaction rates, data describing the operation of the application 12, and so forth.
Referring now to FIG. 2, an improved computer architecture for securely transferring and associating data from a mobile device is shown in accordance with an illustrative implementation. In short, the developer may utilize the reusable functionality of the SDK20 to generate and transmit event data from the client device 10 to the first data processing system 200 and the second data processing system 300 in response to an event. For example, the functionality of the SDK20 embedded in a mobile application (e.g., application 12, etc.) may cause the client device 10 to collect and transmit data associated with the client device 10 in response to the user confirming a transaction, selecting a menu option, viewing a content item, etc. In response to detecting the event, the SDK20 may collect, bundle, and transmit data to the first data processing system 200 and the second data processing system 300 for analysis.
In various implementations, the first data processing system 200 may store additional or supplemental data. For example, the first data processing system 200 may store data (e.g., user preferences, etc.) associated with past customers. As a further example, the first data processing system 200 may store data associated with previous user interactions with content. The first data processing system 200 may identify supplemental data based on the data received from the client device 10 and may transmit the supplemental data to the second data processing system 300. The supplemental data may include previous user interactions (e.g., a recording of a user viewing a content item such as a video, previous transactions, etc.), user demographic information, user preferences, and/or any other data. It should be understood that the supplemental data may include any data associated with the user that the developer may access and is not limited to the specific examples explicitly contemplated herein. In various implementations, the second data processing system 300 correlates data from the client device and the first data processing system 200 to determine a result. Additionally or alternatively, the second data processing system 300 may analyze data received from the client device 10 to determine a result. As a non-limiting example, a user presented with a video may click on the video. A content provider (e.g., first data processing system 200, etc.) that provides a video may wish to know how many users clicked on the video. In some implementations, the user may interact with other content provided by the content provider as a result of the user interacting with the first content item. For example, a user presented with a video may later access a website maintained by a content provider to purchase an item presented in the video. In some implementations, the interaction is or is associated with an online transition. The SDK20 can facilitate robust reporting and analysis of user interactions with online content while protecting PII.
Fig. 2 shows a system 110 for transmitting and analyzing event data from a mobile device. In various implementations, the client device 10 implements the SDK20 to facilitate the collection and transmission of event data. For example, a developer may embed reusable functionality of the SDK20 into the application 12 on the client device 10 to cause the client device 10 to transmit data related to a particular event. In various implementations, the SDK20 facilitates redundancy in reporting event data. For example, the SDK20 may enable a fallback path to report event data. In various implementations, the application 12 may report the application data locally to the first data processing system 200. The SDK20 may facilitate the transmission of event data to the second data processing system 300 redundantly and/or in parallel.
In various implementations, the SDK20 embedded in the application 12 on the client device 10 generates event data. For example, a user using the application 12 may update notification preferences, and the SDK20 may detect changes in the preferences and generate event data. Event data may include device settings (e.g., software version, hardware settings, configuration, etc.), user account settings (e.g., preferences, activities, etc.), action sequences (e.g., click streams, etc.), data related to a particular event, such as changed notification preferences, etc. In some implementations, the event data describes a series of actions (e.g., clicks) made by the user that caused the purchase, as well as information about the purchase itself (e.g., price, item purchased, etc.). In various implementations, the SDK20 bundles event data from a certain number of events. For example, the SDK20 may bundle event data from 10 events to reduce power consumption associated with individually transmitting each event.
At step 404, the SDK20 and/or the application 12 may transmit the bundled event data to the first data processing system 200. In some implementations, the event data transmitted to the first data processing system 200 includes an identifier. In various implementations, the event data transmitted to the first data processing system 200 is encrypted (e.g., asymmetrically encrypted, etc.). In some implementations, the SDK20 can determine whether the first data processing system 200 successfully received the bundled event data. In some implementations, if the SDK20 determines that the first data processing system 200 did not successfully receive the bundled event data, the SDK20 transmits the bundled event data to the second data processing system 300. Additionally or alternatively, the SDK20 may transmit the bundled event data to the second data processing system 300 in parallel (step 402). In various implementations, the SDK20 removes the personal identifier from the bundled event data prior to transmission to the second data processing system 300. For example, the SDK20 may remove the device identifier and/or the user identifier prior to transmitting the bundled event data to the second data processing system 300.
In various implementations, the first data processing system 200 identifies supplemental data based on the received bundled event data. For example, the first data processing system 200 may identify previous interaction data associated with a user identified by a user identifier included in the bundled event data. At step 406, the first data processing system 200 may transmit the supplemental data to the second data processing system 300. In various implementations, the first data processing system 200 removes the personal identifier before transmitting the supplemental data to the second data processing system 300. For example, the first data processing system 200 may remove the device identifier and/or the user identifier before transmitting the supplemental data to the second data processing system 300.
The second data processing system 300 may receive event data from the client device 10 (e.g., via the SDK20, etc.) and/or supplemental data from the first data processing system 200. In various implementations, the second data processing system 300 analyzes the event data and/or the supplemental data (e.g., performs various correlation and/or statistical operations thereon, etc.) to generate results. For example, the second data processing system 300 may use the intermediate identifier to associate the previous interaction data included in the supplemental data with the transaction included in the event data to determine the conversion rate.
Referring now to FIG. 3, a method 500 of reporting event data is shown, according to one implementation. Briefly, the SDK20 and/or the application 12 generates event data in response to an interaction associated with a user (e.g., an in-application interaction, etc.) and the SDK20 reports the event data to an endpoint. In various implementations, the SDK20 performs the method 500. At step 502, the SDK20 determines that a connection to the first data processing system 200 is not available. For example, SDK20 may ping first data processing system 200 to determine if it is online. In some implementations, the SDK20 determines whether the first data processing system 200 acknowledges receipt of a data packet (e.g., previous event data, etc.). In some implementations, step 502 is optional.
At step 504, the sdk20 detects an event. The SDK20 may include various reusable functions that are embedded into the application 12 by a developer. When the application 12 performs a particular operation, a reusable function of the SDK20 may be invoked, thereby causing the SDK20 to perform various actions. For example, reusable functionality of the SDK20 may be embedded in a checkout process of the application 12, and upon completion of the checkout, may cause the SDK20 to report event data (e.g., data associated with a transaction, etc.). Additionally or alternatively, the SDK20 may detect events by listening for various indications from the application 12. For example, when an application event occurs, the application 12 may generate a flag, and the SDK20 may detect the flag to identify the occurrence of the event.
At step 506, the sdk20 may collect event data from the application 12 and/or the client device 10. For example, the SDK20 may collect data related to transactions associated with the event. At step 508, the SDK20 bundles the event data. Step 508 may include combining event data from a number of events into a single data packet. For example, event data from 100 events may be combined into bundled event data. In some implementations, the SDK20 bundles event data from events that occur within a specified time period. For example, the SDK20 may bundle events from each day (e.g., 24 hour period, etc.). It should be understood that various bundling techniques are possible, and that the SDK20 is not limited to the specific techniques explicitly enumerated herein. In various implementations, the SDK20 tags event data. For example, the SDK20 may tag the event data with an event type. The event type may correspond to a source of the event data. For example, the SDK20 may determine that the first event data corresponding to the in-application transaction is of the "transaction" type and the second event data corresponding to the accessed web page is of the "content interaction" type. In various implementations, the SDK20 generates different event data based on the event type. For example, the SDK20 may generate event data including item prices and quantities for "transaction" events, and may generate event data including content identifiers for "content interaction" type data. It should be understood that many event types are possible and are not limited to the types explicitly contemplated herein.
At step 510, the sdk20 may prepare and encrypt event data. In various implementations, step 510 includes removing the identifier. For example, the SDK20 may remove a personal identifier (e.g., device identifier, user identifier, etc.) from the bundled event data. Additionally or alternatively, the SDK20 may encrypt the bundled event data. For example, the SDK20 may asymmetrically encrypt the bundled event data using the public key received from the first data processing system 200. In some implementations, the SDK20 removes the identifier from the bundled event data transmitted to the second data processing system 300. In some implementations, the SDK20 encrypts the bundled event data for transmission to the first data processing system 200. In some implementations, step 510 includes generating a signature of the bundled event data. For example, the SDK20 may generate a signature by hashing the bundled event data. In some implementations, step 510 is optional.
At step 512, the SDK20 securely transmits the event data to the second data processing system 300. In some implementations, in response to determining that the first data processing system 200 is unavailable (e.g., based on step 502, etc.), the SDK20 transmits the event data to the second data processing system 300. In various implementations, the SDK20 transmits event data without a personal identifier to the second data processing system 300, thereby protecting the PII. In some implementations, the SDK20 transmits the bundled event data to the second data processing system 300 in response to a threshold. For example, the SDK20 may transmit the bundled event data to the second data processing system 300 in response to a threshold number of events being included in the event data package. In various implementations, the SDK20 facilitates specifying a destination (e.g., the second data processing system 300, etc.). For example, the SDK20 may facilitate receiving a URL and/or IP address of the second data processing system 300 that specifies where to transmit the event data.
The sdk20 may securely transmit the encrypted event data to the first data processing system 300 at step 514. In various implementations, the SDK20 transmits the encrypted event data including the one or more identifiers to the first data processing system 200. In some implementations, step 514 is optional.
Referring now to FIG. 4, a method 600 of identifying supplemental data is illustrated, according to one implementation. In some implementations, the first data processing system 200 performs the method 600. In some implementations, the first data processing system 200 performs the method 600 in response to receiving event data from the client device 10 and/or the SDK 20. At step 602, the first data processing system 200 receives event data from the client device 10. In various implementations, the first data processing system 200 receives event data that includes an identifier. For example, the first data processing system 200 may receive event data that includes a device identifier. Additionally or alternatively, the first data processing system 200 may receive encrypted event data.
At step 602, the first data processing system 200 may decrypt the event data. In various implementations, step 602 includes asymmetrically decrypting the event data using a private key held by the first data processing system 200 to produce unencrypted event data. At step 606, the first data processing system 200 may use the event data to select supplemental data from the stored data. In various implementations, step 606 includes identifying the supplemental data using an identifier included in the event data. In various implementations, the first data processing system 200 searches the database 210. Database 210 may include data associated with previous content interactions. For example, the first data processing system 200 may identify a previous content interaction associated with the user. As a further example, the first data processing system 200 may identify a video previously viewed by the user.
At step 608, the first data processing system 200 may prepare the supplemental data. For example, the first data processing system 200 may remove the personal identifier associated with the supplemental data. In some implementations, the first data processing system 200 removes the IP address, user identifier, and/or device identifier associated with the supplemental data. Additionally or alternatively, the first data processing system 200 may perform various deletion functions on the supplemental data. For example, the first data processing system 200 may segment the supplemental data, add noise, or perform other functions to anonymize the data. At step 610, the first data processing system 200 may securely transmit the supplemental data to the second data processing system 300. In some implementations, the first data processing system 200 transmits the supplemental data to the second data processing system 300 in response to the signal. For example, the second data processing system 300 may send a request for supplemental data to the first data processing system 200.
Referring now to FIG. 5, a method 700 of analyzing event data and/or supplemental data is illustrated, according to one implementation. In various implementations, the second data processing system 300 performs the method 700. In some implementations, the second data processing system 300 performs the method 700 in response to receiving data from the client device 10. Additionally or alternatively, the second data processing system 300 may perform the method 700 in response to receiving a request for results from an external system (e.g., the first data processing system 200, etc.).
At step 702, the second data processing system 300 may receive event data from the client device 10 (e.g., via the SDK20, etc.). In various implementations, the event data is bundled event data. In various implementations, the event data does not include a personal identifier. At step 704, the second data processing system 300 may validate the received event data. In various implementations, the event data includes a signature. The second data processing system 300 may use the signature to verify the event data. For example, the second data processing system 300 may generate a hash of the received event data and compare the generated hash with a signature included in the event data. In some implementations, step 704 is optional.
At step 706, the second data processing system 300 may receive supplemental data from the first data processing system 200. In some implementations, the second data processing system 300 receives supplemental data from other sources. In various implementations, the supplemental data includes interaction data associated with the event data. For example, the supplemental data may include content interactions that share an intermediate identifier with events of the event data. As another example, the supplemental data may include a content item identifier that may be related to a transaction included in the event data. In some implementations, step 706 is optional. For example, in some implementations, the first data processing system 200 does not transmit supplemental data to the second data processing system 300.
At step 708, the second data processing system 300 may correlate the event data with the supplemental data. For example, the second data processing system 300 may match an identifier of the content item with an intermediate identifier of the event data to determine that the user has interacted with the content item. As a further example, the second data processing system 300 may determine that the URL of the content item matches a website URL included in the event data. In some implementations, step 708 is optional. For example, the second data processing system 300 may not receive supplemental data corresponding to each event in the event data.
At step 710, the second data processing system 300 may analyze the data to generate a result. In various implementations, the second data processing system 300 analyzes the event data. Additionally or alternatively, the second data processing system 300 may analyze the supplemental data. In various implementations, the second data processing system 300 performs various analysis operations to produce results. In various implementations, the result includes a count of a number of interactions and/or event data sharing the first characteristic. Additionally or alternatively, the results may include a sum of interactions (e.g., transactions, clicks, phone calls, etc.), a sum of values associated with each interaction (e.g., dollar amounts), and/or metadata. In various implementations, the result is aggregated information. For example, the results may include statistical information associated with event data from a certain number of events. In some implementations, the results are stored in the database 310. In various implementations, the results include data describing the usage of the application 12 in real-time. For example, the results may include a count of the number of users currently viewing a particular content item. Additionally or alternatively, the second data processing system 300 may identify previous interactions (e.g., cross-platform properties, etc.) of the user that were not performed using the application 12. For example, the second data processing system 300 may correlate content interactions included in the supplemental data with the event data to determine that the user previously interacted with the content on a device other than the client device 10.
At step 712, the second data processing system 300 may securely transmit the results to the first data processing system 200. Additionally or alternatively, the second data processing system 300 may securely transmit the results to a different destination. In some implementations, step 712 is optional.
Fig. 6 shows a depiction of a computing system 800, which computing system 800 may be used, for example, to implement any of the illustrative systems (e.g., system 110, etc.) described in this disclosure. Computing system 800 includes a bus 805 or other communication component for communicating information, and a processor 810 coupled with bus 805 for processing information. Computing system 800 also includes a main memory 815, such as a random access memory ("RAM") or other dynamic storage device, coupled to bus 805 for storing information and instructions to be executed by processor 810. Main memory 815 also may be used for storing location information, temporary variables, or other intermediate information during execution of instructions by processor 810. Computing system 800 may also include a read only memory ("ROM") 820 or other static storage device coupled to bus 805 for storing static information and instructions for processor 810. A storage device 825, such as a solid state device, magnetic disk or optical disk, is coupled to bus 805 for persistently storing information and instructions.
In some implementations, computing system 800 may include a communications adapter 840, such as a networking adapter. A communications adapter 840 may be coupled to bus 805 and may be configured to enable communications with a computing or communications network 845 and/or other computing systems. In various illustrative implementations, any type of networking configuration may be implemented using the communication adapter 840, such as wired (e.g., via ethernet), wireless (e.g., via WiFi, bluetooth, etc.), pre-configured, ad hoc, LAN, WAN, etc.
According to various implementations, the processes for implementing the illustrative implementations described herein may be implemented by the computing system 800 in response to the processor 810 executing an arrangement of instructions contained in main memory 815. Such instructions may be read into main memory 815 from another computer-readable medium, such as storage device 825. Execution of the arrangement of instructions contained in main memory 815 causes the computing system 800 to perform the illustrative processes described herein. One or more processors in a multi-processing arrangement may also be employed to execute the instructions contained in main memory 815. In alternative implementations, hard-wired circuitry may be used in place of or in combination with software instructions to implement the illustrative implementations. Thus, implementations are not limited to any specific combination of hardware circuitry and software.
Although an example processing system has been described in fig. 6, implementations of the subject matter and the functional operations described in this specification can be implemented using other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
In addition to the above, a user may be provided with controls that allow the user to select whether and when the systems, programs, or features described herein are capable of collecting user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current location), and whether to send content or communications from a server to the user. In addition, certain data may be processed in one or more ways to delete personal identity information before it is stored or used. For example, the identity of the user may be processed such that no personally identifiable information can be determined for the user, or the geographic location of the user (such as at a city, ZIP, or state level) may be summarized where location information is obtained such that no particular location of the user can be determined. Thus, the user may have control over what information is collected about the user, how the information is used, and what information is provided to the user. Where the system described herein collects or utilizes personal information about a user or an application installed on a user device, the user is provided with an opportunity to control whether programs or features collect user information (e.g., information about the user's social network, social actions or activities, profession, user preferences, or the user's current location). Additionally or alternatively, certain data may be processed in one or more ways before it is stored or used, thereby removing personal information.
The system and method of the present disclosure provide a number of benefits over existing systems. Typically, data from client device applications is collected by an aggregator, such as a server associated with the operation of the application, before being forwarded to an analytics system for analysis. However, the connection between the client device and the aggregator is not always reliable. For example, the client device may not be able to transmit data to the aggregator and/or the aggregator may become unavailable (e.g., offline for maintenance, etc.). The novel SDK and computer architecture described herein facilitate redundant paths for reporting event data. In particular, the SDK of the present disclosure facilitates the transmission of event data to individual endpoints in response to a failure to transmit the data to an aggregator. Accordingly, the SDK of the present disclosure improves upon existing systems by facilitating redundant reporting of event data and thereby reducing lost data.
In addition, conventional systems introduce a time delay between the time the client device generates the event data and the time the analysis system receives the event data. As previously described, typically the client device transmits event data to the aggregator, which forwards the data to the analytics system. However, there may be a time delay between when the aggregator receives the data and when the analysis system receives the data. Such time delays may reduce the responsiveness of the application to changes. For example, if an application has a software bug that causes a transaction to fail prematurely, conventional systems may require some time to detect the software bug. However, the novel SDK and computer architecture described herein facilitates the transmission of event data directly to an analytics system. In particular, the SDK of the present disclosure facilitates improving the responsiveness of application events (e.g., crashes, bugs, etc.) by reducing the time delay between the generation of data by the client device and the receipt of the data by the analytics system.
In addition, systems that correlate data from different entities typically use identifiers to match the data. For example, the system may use the user identifier to match the user's interaction with the user's transaction. The novel SDK and computer architecture described herein facilitates correlation of data from different entities without revealing PII. In particular, the SDK and computer architecture of the present disclosure facilitate correlating data from different entities using intermediate identifiers that do not expose PII. Further, content providers (e.g., application developers, etc.) can improve analysis results without having to transmit sensitive data to the analysis system. For example, content providers may identify supplemental data from their own databases and remove sensitive identifiers (e.g., personal identifiers, etc.) before transmitting the data to an analysis system.
Implementations of the subject matter and the operations described in this specification can be implemented using digital electronic circuitry, or in computer software embodied in tangible media, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer readable storage medium may be or be included in a computer readable storage device, a computer readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Furthermore, although a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). Computer storage media may be tangible and/or non-transitory.
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" or "computing device" encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a combination of multiple or the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment may implement a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). As used herein, circuitry may be implemented using hardware circuitry (e.g., FPGAs, ASICs, etc.), software (instructions stored on one or more computer-readable storage media and executable by one or more processors), or any combination thereof.
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer need not have such a device. Moreover, a computer may be embedded in another device, e.g., a mobile telephone, a personal digital assistant ("PDA"), a mobile audio or video player, a game console, a global positioning system ("GPS") receiver, or a portable storage device (e.g., a universal serial bus ("USB") flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and a CD-ROM core DVD-ROM disk. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, implementations of the subject matter described in this specification can be implemented using a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other types of devices may also be used to provide for interaction with a user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user may be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; for example, by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Implementations of the subject matter described in this specification can be implemented with a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include local area networks ("LANs") and wide area networks ("WANs"), the internet (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, the server transmits data (e.g., HTML pages) to the client device (e.g., for displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination or in a single implementation. Conversely, various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination. Furthermore, features described with respect to particular headings may be with respect to and/or used in connection with illustrative implementations described under other headings; headings (if provided) are included for readability purposes only, and should not be construed as limiting any features provided in relation to such headings.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the implementations described above should not be understood as requiring such separation in all implementations, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products implemented on tangible media.
Thus, particular implementations of the subject matter have been described. Other implementations are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some implementations, multitasking and parallel processing may be advantageous.
Claims (21)
1. A method, comprising:
tagging a feature of the mobile application as an event generator;
generating an event having an event type in response to a user interacting with the feature of the mobile application on a mobile device;
requesting, by an interaction measurement Software Development Kit (SDK), interaction data associated with the user interaction with the mobile application from the mobile application based on the event type; and
securely transmitting, by the interaction measurement SDK, the interaction data to a first computing device indicated by the interaction measurement SDK.
2. The method of claim 1, wherein the interaction measurement SDK bundles interaction data from a number of events and transmits the bundled interaction data in response to a threshold.
3. The method of claim 2, wherein the threshold is a threshold time period or a threshold number of events.
4. The method of any preceding claim, wherein the interaction SDK generates a signature of the interaction data using a hashing algorithm, and wherein the first computing device verifies the authenticity of the interaction data using the signature.
5. The method of any preceding claim, further comprising: securely transmitting the interaction data to a second computing device associated with the mobile application, and wherein the interaction SDK removes a personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device.
6. The method of claim 5, wherein the interaction data comprises an intermediate identifier, and wherein the method further comprises:
identifying, by the second computing device, supplemental data using the intermediate identifier;
transmitting, by the second computing device, the supplemental data to the first computing device; and
correlating, by the first computing device, the interaction data with the supplemental data.
7. The method of claim 6, wherein the first computing device does not have access to personally identifying information.
8. The method of any preceding claim, further comprising: analyzing, by the first computing device, at least the interaction data to generate data describing, in real-time, usage of the mobile application.
9. The method of claim 8, wherein analyzing at least the interaction data comprises: identifying a previous interaction of the user that was not performed using the mobile application.
10. A system for correlating data from different entities, comprising:
a client device comprising processing circuitry having one or more processors and a memory having instructions stored thereon that, when executed by the one or more processors, cause the processing circuitry to:
marking a feature in the mobile application as an event generator;
generating an event having an event type in response to a user interacting with the feature of the mobile application;
requesting interaction data associated with the user interaction with the mobile application based on the event type; and
securely transmitting the interaction data to a first computing device; and
wherein the instructions constitute a software development kit, SDK.
11. The system of claim 10, wherein the instructions cause the one or more processors to bundle interaction data from a number of events and transmit the bundled interaction data in response to a threshold.
12. The system of claim 11, wherein the threshold is a threshold time period or a threshold number of events.
13. The system of any one of claims 10 to 12, further comprising the first computing device, wherein the instructions cause the one or more processors to generate a signature of the interaction data using a hashing algorithm, and wherein the first computing device verifies authenticity of the interaction data using the signature.
14. The system of any one of claims 10 to 13, wherein the instructions further cause the one or more processors to securely transmit the interaction data to a second computing device and remove a personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device.
15. The system of claim 14, further comprising the first computing device and the second computing device, wherein the interaction data comprises an intermediate identifier, wherein the second computing device identifies supplemental data using the intermediate identifier;
wherein the second computing device transmits the supplemental data to the first computing device; and is provided with
Wherein the first computing device correlates the interaction data with the supplemental data.
16. The system of claim 15, wherein the first computing device does not have access to personally identifying information.
17. The system of any of claims 10 to 16, further comprising the first computing device, wherein the first computing device analyzes at least the interaction data to generate data describing usage of the mobile application in real-time.
18. The system of claim 17, wherein analyzing at least the interaction data comprises: identifying a previous interaction of the user that was not performed using the mobile application.
19. A computer-readable medium having stored instructions that constitute a software development kit, SDK, for a mobile device, which when executed by one or more processors causes the one or more processors to:
tagging a feature of the mobile application as an event generator;
generating an event having an event type in response to a user interacting with a feature of the mobile application on a mobile device;
requesting interaction data associated with the user interaction with the mobile application from the mobile device based on the event type; and
securely transmitting the interaction data to a first computing device.
20. The non-transitory computer-readable medium of claim 19, wherein the SDK bundles interaction data from a number of events and transmits the bundled interaction data in response to a threshold, wherein the threshold is a threshold period of time or a threshold number of events, wherein the interaction SDK generates a signature of the interaction data using a hashing algorithm.
21. The non-transitory computer-readable medium of claim 19, wherein the instructions further cause the one or more processors to securely transmit the interaction data to a second computing device and remove a personal identifier from the interaction data prior to securely transmitting the interaction data to the first computing device.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2020/042007 WO2022015295A1 (en) | 2020-07-14 | 2020-07-14 | Systems and methods of delegated analytics collection |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115461743A true CN115461743A (en) | 2022-12-09 |
Family
ID=71895283
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202080100173.4A Pending CN115461743A (en) | 2020-07-14 | 2020-07-14 | System and method for delegated analytics collection |
Country Status (5)
Country | Link |
---|---|
US (1) | US20230115547A1 (en) |
EP (1) | EP4104084A1 (en) |
KR (1) | KR20220165265A (en) |
CN (1) | CN115461743A (en) |
WO (1) | WO2022015295A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JP7447204B1 (en) | 2022-08-31 | 2024-03-11 | 楽天グループ株式会社 | Information management system, information management method and program |
Family Cites Families (11)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20090094525A1 (en) * | 2007-10-05 | 2009-04-09 | Triggit, Inc. | System and method for dynamic media integration into web pages |
US20150088635A1 (en) * | 2013-09-23 | 2015-03-26 | Umbel Corporation | Systems and methods of measurement and modification of advertisements and content |
US9729327B2 (en) * | 2013-10-29 | 2017-08-08 | International Business Machines Corporation | Computer-based optimization of digital signature generation for records based on eventual selection criteria for products and services |
US9582680B2 (en) * | 2014-01-30 | 2017-02-28 | Microsoft Technology Licensing, Llc | Scrubbe to remove personally identifiable information |
US20150220888A1 (en) * | 2014-02-06 | 2015-08-06 | Zeeplanner Llc | System and method of scheduling meetings, appointments and events using multiple identities |
US10063585B2 (en) * | 2015-03-18 | 2018-08-28 | Qualcomm Incorporated | Methods and systems for automated anonymous crowdsourcing of characterized device behaviors |
US10490039B2 (en) * | 2017-12-21 | 2019-11-26 | At&T Intellectual Property I, L.P. | Sensors for detecting and monitoring user interaction with a device or product and systems for analyzing sensor data |
JP2022507702A (en) * | 2018-11-15 | 2022-01-18 | ラヴェル テクノロジーズ エスアーエールエル | Zero-knowledge cryptic anonymization for advertising methods, devices, and systems |
US11212117B2 (en) * | 2018-12-03 | 2021-12-28 | T-Mobile Usa, Inc. | Tamper-resistant software development lifecycle provenance |
TWI684131B (en) * | 2019-02-26 | 2020-02-01 | 華碩電腦股份有限公司 | Data transmission device, data transmission method and non-transitory computer readable medium |
US11663607B2 (en) * | 2019-09-04 | 2023-05-30 | Optum, Inc. | Machine-learning based systems and methods for generating an ordered listing of objects for a particular user |
-
2020
- 2020-07-14 KR KR1020227038623A patent/KR20220165265A/en unknown
- 2020-07-14 WO PCT/US2020/042007 patent/WO2022015295A1/en unknown
- 2020-07-14 EP EP20750114.9A patent/EP4104084A1/en active Pending
- 2020-07-14 CN CN202080100173.4A patent/CN115461743A/en active Pending
- 2020-07-14 US US17/911,356 patent/US20230115547A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4104084A1 (en) | 2022-12-21 |
US20230115547A1 (en) | 2023-04-13 |
JP2023524936A (en) | 2023-06-14 |
KR20220165265A (en) | 2022-12-14 |
WO2022015295A1 (en) | 2022-01-20 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
JP6694018B2 (en) | Method and apparatus for collecting distributed user information for media impressions and search terms | |
US11962687B2 (en) | Methods for protecting privacy | |
JP7201848B2 (en) | Generating sequences of network data while preventing acquisition or manipulation of time data | |
JP7155437B2 (en) | Aggregation of Encrypted Network Values | |
US20230115547A1 (en) | Systems and Methods of Delegated Analytic Collection | |
WO2022039717A1 (en) | Systems and methods for identifying events that share a characteristic | |
JP7485777B2 (en) | Delegated analytics collection system and method - Patents.com | |
US20240095364A1 (en) | Privacy-preserving and secure application install attribution | |
US20220405407A1 (en) | Privacy preserving cross-domain machine learning | |
US20220122121A1 (en) | Combating false information with crowdsourcing | |
JP2022177209A (en) | Preventing data manipulation by using multiple aggregation servers | |
JP7157258B2 (en) | Fraud Prevention in Aggregated Network Measurements | |
US20220138077A1 (en) | Systems And Methods Of Debugging Delivery Of Content Items |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |