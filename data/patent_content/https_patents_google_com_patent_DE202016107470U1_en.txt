Gebiet der ErfindungField of the invention
Das Gebiet der Erfindung betrifft im Allgemeinen die Bildverarbeitung und insbesondere eine Makro-E/A-Einheit für einen Grafikprozessor.The field of the invention relates generally to image processing, and more particularly to a macro I / O unit for a graphics processor.
Hintergrundbackground
Die Bildverarbeitung beinhaltet in der Regel die Verarbeitung von Bildpunktwerten, die in einer Matrix gegliedert sind. Hierbei erfasst eine räumlich gegliederte zweidimensionale Matrix die zweidimensionale Natur von Bildern (zusätzliche Dimensionen können unter anderem Zeit (z. B. eine Sequenz von zweidimensionalen Bildern) und Datentyp (z. B. Farben) einschließen. In einem typischen Szenario werden die geordneten Bildpunktwerte von einer Kamera bereitgestellt, die ein Standbild oder eine Folge von Frames erzeugt hat, um die Bewegung in Bildern zu erfassen. Herkömmliche Grafikprozessoren fallen in der Regel auf eine Seite von zwei Extremen.The image processing usually involves the processing of pixel values, which are arranged in a matrix. Here, a spatially structured two-dimensional matrix captures the two-dimensional nature of images (additional dimensions may include, but are not limited to, time (eg, a sequence of two-dimensional images) and data type (eg, colors).) In a typical scenario, the ordered pixel values of of a camera that has created a still image or series of frames to capture the motion in images Conventional graphics processors typically fall on one side of two extremes.
Ein erstes Extrem führt Bildverarbeitungsschritte als Softwareprogramme aus, die auf einem Universalprozessor oder einem universell verwendbaren Prozessor (z. B. einem Universalprozessor mit Vektorbefehlserweiterungen) ausgeführt werden. Obwohl das erste Extrem in der Regel eine vielseitig einsetzbare Anwendungs-Software-Entwicklungsplattform bereitstellt, resultiert dessen Verwendung feinerer Datenstrukturen, die mit den zugehörigen Verwaltungsdaten kombiniert werden (z. B. Befehlsabruf und -dekodierung, Handhabung von chipinternen und chipexternen Daten, spekulative Ausführung) letztendlich in einen Verbrauch größerer Energiemengen pro Dateneinheit während der Ausführung der Programmcodes.A first extreme executes image processing steps as software programs executing on a general purpose processor or a general purpose processor (eg, a general purpose processor with vector instruction extensions). Although the first extreme typically provides a versatile application software development platform, its use results in finer data structures combined with associated management data (e.g., instruction fetching and decoding, on-chip and off-chip data handling, speculative execution). ultimately consuming more power per unit of data during execution of the program codes.
Ein zweites, entgegengesetztes Extrem wendet stationäre, fest verdrahtete Schaltkreise auf viel größere Datenblöcke an. Die Verwendung von größeren (im Gegensatz zu feineren) Datenblöcken, die direkt auf benutzerdefinierte Schaltkreise angewendet werden, verringert den Energieverbrauch pro Dateneinheit erheblich. Jedoch führt die Verwendung von benutzerdefinierten stationären Funktionsschaltkreise im Allgemeinen zu einer begrenzten Menge von Arbeitsschritten, die der Prozessor ausführen kann. Dementsprechend fehlt im zweiten Extrem die vielseitige Programmierumgebung (die mit dem ersten Extrem verbunden ist).A second, opposite extreme applies stationary, hardwired circuitry to much larger data blocks. Using larger (as opposed to finer) blocks of data directly applied to custom circuits significantly reduces energy consumption per unit of data. However, the use of custom stationary functional circuitry generally results in a limited amount of work that the processor can perform. Accordingly, the second extreme lacks the versatile programming environment (which is associated with the first extreme).
Eine Technologieplattform, die sowohl vielseitige Anwendungssoftware-Entwicklungsmöglichkeiten als auch eine verbesserte Energieeffizienz pro Dateneinheit bietet, bleibt eine wünschenswerte und dennoch fehlende Lösung.A technology platform that offers both versatile application software development opportunities and improved energy per unit of data remains a desirable yet missing solution.
KurzdarstellungSummary
Ein Grafikprozessor wird beschrieben. Der Grafikprozessor beinhaltet eine E/A-Einheit zum Einlesen von Eingangsbilddaten aus einem externen Speicher, welche von dem Grafikprozessor verarbeitet und als Ausgabebilddaten von dem Grafikprozessor in den externen Speicher geschrieben werden. Die E/A-Einheit beinhaltet mehrere logische Kanaleinheiten. Jede logische Kanaleinheit dient dazu, einen logischen Kanal zwischen dem externen Speicher und einer jeweiligen Erzeuger- oder Abnehmerkomponente innerhalb des Grafikprozessors zu bilden. Jede logische Kanaleinheit ist dafür ausgelegt, eine Umformatierungs- und eine Adressierungsschaltung zu verwenden. Die Adressierungsschaltung dient zum Steuern von Adressierungsschemata, die auf den externen Speicher angewendet werden, und zum Umformatieren von Bilddaten zwischen dem externen Speicher und der jeweiligen Erzeuger- oder Abnehmerkomponente. Die Umformatierungsschaltung dient zur Durchführung der Umformatierung.A graphics processor is described. The graphics processor includes an I / O unit for reading in input image data from external memory which is processed by the graphics processor and written as output image data from the graphics processor to the external memory. The I / O unit contains several logical channel units. Each logical channel unit serves to form a logical channel between the external memory and a respective generator or consumer component within the graphics processor. Each logical channel unit is designed to use a reformatting and addressing circuit. The addressing circuit is for controlling addressing schemes applied to the external memory and for reformatting image data between the external memory and the respective producer or pickup component. The reformatting circuit is used to perform the reformatting.
Eine Vorrichtung wird beschrieben. Die Vorrichtung beinhaltet ein Instrument, die eine logische Verbindung zu einer Abnehmerkomponente innerhalb eines Grafikprozessors ermöglicht. Die Vorrichtung beinhaltet zudem ein Instrument zum Einlesen einer Reihe von Bildbereichen mit begrenzter Breite aus einem Frame von Bilddaten, wobei jeder der Bildbereiche gemäß einem RGB-Format formatiert ist. Die Vorrichtung beinhaltet außerdem Instrumente zum Umformatieren der Reihe von Bildbereichen mit begrenzter Breite in Bilddatenblöcke mit derselben Farbe. Die Vorrichtung beinhaltet darüber hinaus ein Instrument zum Weiterleiten der Bilddatenblöcke, die dieselbe Farbe aufweisen, an die Abnehmerkomponente.A device will be described. The apparatus includes an instrument that provides a logical connection to a pickup component within a graphics processor. The apparatus also includes an instrument for reading a series of limited width image areas from a frame of image data, each of the image areas being formatted according to an RGB format. The apparatus also includes instruments for reformatting the series of limited width image areas into image data blocks of the same color. The apparatus further includes an instrument for forwarding the image data blocks having the same color to the pickup component.
FigurenverzeichnisFigure directory
Die folgende Beschreibung und begleitenden Zeichnungen dienen dazu, Ausführungsformen der Erfindung zu veranschaulichen. Für die Zeichnungen gilt:The following description and accompanying drawings serve to illustrate embodiments of the invention. For the drawings:
1 zeigt verschiedene Komponenten einer Technologieplattform; 1 shows various components of a technology platform;
2a zeigt eine Ausführungsform einer Anwendungssoftware, die mit Systemkernen aufgebaut ist; 2a shows an embodiment of application software built with system cores;
2b zeigt eine Ausführungsform der Struktur eines Systemkerns; 2 B shows an embodiment of the structure of a system kernel;
3 zeigt eine Ausführungsform des Betriebs eines Systemkerns; 3 shows an embodiment of the operation of a kernel;
4 zeigt eine Ausführungsform einer Grafikprozessor-Hardwarearchitektur; 4 shows an embodiment of a graphics processor hardware architecture;
5a, 5b, 5c, 5d und 5e zeigen das Parsen von Bilddaten in eine Zeilengruppe, das Parsen einer Zeilengruppe in ein Datenblatt und die an einem Datenblatt mit überlappenden Schablonen durchgeführte Operation; 5a . 5b . 5c . 5d and 5e show the parsing of image data into a stanza, the parsing of a stanza into a datasheet, and the operation performed on an overlapping template datasheet;
6 zeigt eine Ausführungsform eines Schablonenprozessors; 6 shows an embodiment of a template processor;
7 zeigt eine Ausführungsform der Konfiguration und Programmierung eines Grafikprozessors 7 shows an embodiment of the configuration and programming of a graphics processor
8 zeigt ein aus Zeilengruppen bestehendes Frame; 8th shows a frame consisting of stanzas;
9a, 9b und 9c zeigen Konstruktions- und Ausführungsformen einer Zeilenpuffereinheit; 9a . 9b and 9c show construction and embodiments of a row buffer unit;
9d und 9e zeigen Ausführungsformen eines programmierbaren Registerbereichs eines Grafikprozessors; 9d and 9e show embodiments of a programmable register area of a graphics processor;
10a und 10b zeigen eine virtuell schlanke Betriebsart; 10a and 10b show a virtually lean mode of operation;
11a und 11b zeigen Ausführungsformen der Makro-E/A-Einheiten; 11a and 11b show embodiments of the macro I / O units;
12a und 12b zeigen eine erste Fähigkeit einer Ausführungsform einer Makro-E/A-Einheit; 12a and 12b show a first capability of one embodiment of a macro I / O unit;
13 zeigt eine zweite Fähigkeit einer Ausführungsform einer Makro-E/A-Einheit; 13 shows a second capability of one embodiment of a macro I / O unit;
14 zeigt eine Methodik, die mithilfe einer Ausführungsform einer Makro-E/A-Einheit durchgeführt wird; 14 shows a methodology performed by means of an embodiment of a macro I / O unit;
15 zeigt eine Ausführungsform eines Rechensystems. 15 shows an embodiment of a computing system.
Ausführliche BeschreibungDetailed description
i. Einführungi. introduction
Die nachfolgende Beschreibung beschreibt zahlreiche Ausführungsformen, die eine neue Bildverarbeitungstechnologieplattform betreffen, welche eine vielseitig einsetzbare Anwendungssoftware-Entwicklungsumgebung bereitstellt, die größere Datenblöcke (z. B. Zeilengruppen und Arbeitsblätter, wie weiter unten beschrieben) verwendet, um für eine verbesserte Energieeffizienz zu sorgen.The following description describes numerous embodiments relating to a new image processing technology platform that provides a versatile application software development environment that uses larger data blocks (eg, stanzas and worksheets, as described below) to provide improved energy efficiency.
1.0 Anwendungssoftware-Entwicklungsumgebung1.0 application software development environment
a. Anwendung und Struktur der Kernsystemea. Application and structure of core systems
1 zeigt eine umfassende Ansicht einer Grafikprozessortechnologieplattform, die eine virtuelle Bildverarbeitungsumgebung 101, die eigentliche Bildverarbeitungshardware 103 und einen Compiler 102 beinhaltet, um einen übergeordneten für die virtuelle Verarbeitungsumgebung 101 geschriebenen Code in Objektcode übersetzt, welcher von der eigentlichen Hardware 103 physisch ausgeführt wird. Wie nachfolgend näher beschrieben wird, ist die virtuelle Verarbeitungsumgebung 101 in Bezug auf die Anwendungen, die entwickelt werden können, vielseitig und für eine einfache Visualisierung der Prozesse einer Anwendung zugeschnitten. Nach Beendigung des Programmcode-Entwicklungsaufwands durch den Entwickler 104 übersetzt der Compiler 102 den Code, der in die virtuelle Verarbeitungsumgebung 101 geschrieben wurde, in einen Objektcode, der für die eigentliche Hardware 103 ausgerichtet ist. 1 shows a comprehensive view of a graphics processor technology platform that provides a virtual imaging environment 101 , the actual image processing hardware 103 and a compiler 102 includes to a parent for the virtual processing environment 101 written code translated into object code, which is the actual hardware 103 physically executed. As will be described in more detail below, the virtual processing environment is 101 in terms of the applications that can be developed, versatile and tailored for easy visualization of the processes of an application. Upon completion of the program code development effort by the developer 104 the compiler translates 102 the code in the virtual processing environment 101 was written in an object code that represents the actual hardware 103 is aligned.
2a zeigt eine exemplarische Ausführungsform der Struktur und Form, welche die Anwendungssoftware, die in die virtuelle Umgebung geschrieben wird, annehmen kann. Wie in 2a dargestellt, kann erwartet werden, dass der Programmcode ein oder mehrere Frames der Eingangsbilddaten 201 verarbeitet, um eine Gesamttransformation an den Eingangsbilddaten 201 zu bewirken. Die Transformation wird mit dem Betrieb eines oder mehrerer Kernsysteme des Programmcodes 202 realisiert, die an den Eingangsbilddaten in einer abgestimmten Sequenz arbeiten, welche von dem Entwickler gebildet wird. 2a FIG. 12 shows an exemplary embodiment of the structure and form that the application software written to the virtual environment may take. As in 2a can be expected that the program code one or more frames of the input image data 201 processed to a total transformation on the input image data 201 to effect. The transformation involves the operation of one or more core systems of the program code 202 which operate on the input image data in a tuned sequence formed by the developer.
Wie in 2a erkennbar, wird die Gesamttransformation durch eine erste Verarbeitung der jeweiligen Eingangsbilder mit einem ersten Kernsystem K1 beeinflusst. An den vom Kernsystem K1 erzeugten Ausgabebildern arbeitet dann das Kernsystem K2. An jedem der vom Kernsystem K2 erzeugten Ausgabebilder arbeitet dann das Kernsystem K3_1 oder K3_2 gearbeitet. An den vom bzw. von den Kernsystem(en) K3_1/K3_2 erzeugten Ausgabebildern arbeitet dann das Kernsystem K4. Die Kernsysteme K3_1 und K3_2 können identische Kernsysteme sein, die so beschaffen sind, dass sie die Gesamtverarbeitung beschleunigen, indem sie eine Parallelverarbeitung in der K3-Stufe auferlegen, oder können unterschiedliche Kernsysteme sein (z. B. wird das Kernsystem K3_1 auf Eingabebildern eines ersten spezifischen Typs und das Kernsystem K3_2 auf Eingabebildern eines zweiten, unterschiedlichen Typs betrieben).As in 2a recognizable, the overall transformation is influenced by a first processing of the respective input images with a first core system K1. The core system K2 then operates on the output images generated by the core system K1. The core system K3_1 or K3_2 then works on each of the output images generated by the core system K2. The core system K4 then operates on the output images generated by the core system (s) K3_1 / K3_2. The core systems K3_1 and K3_2 may be identical core systems that are designed to accelerate overall processing by imposing parallel processing at the K3 stage, or may be different core systems (eg, the core system K3_1 will be based on input images of a first specific type and the core system K3_2 operated on input images of a second, different type).
Daher kann die größere Gesamtbildverarbeitungssequenz die Form einer Bildverarbeitungspipeline oder eines gerichteten azyklischen Graphen (DAG) annehmen und die Entwicklungsumgebung kann dafür ausgestattet sein, dem Entwickler eine tatsächliche Darstellung des entwickelten Programmcodes anzuzeigen. Kernsysteme können von einem Entwickler einzeln entwickelt und/oder von einer Einheit, die eine darunterliegende Technologie (wie z. B. die eigentliche Signalprozessor-Hardware und/oder eine Konstruktion derselben) und/oder durch einen Dritten (z. B. eine für die Entwicklungsumgebung geschriebene Kernsystem-Software) bereitgestellt werden. Dementsprechend wird davon ausgegangen, dass eine nominale Entwicklungsumgebung eine „Bibliothek” von Kernsystemen einschließt, die von Entwicklern in verschiedenen Weisen „verbunden” werden können, um den Gesamtablauf ihres größeren Entwicklungsaufwands herbeizuführen. Einige grundlegende Kernsysteme, von denen erwartet wird, dass sie Teil einer solchen Bibliothek sind, können Kernsysteme beinhalten, um eine oder mehrere der folgenden grundlegenden Bildverarbeitungsschritte bereitzustellen: Querwindungen, Entrauschung, Farbraumumwandlungen, Kanten- und Eckenerfassung, Schärfung, Weißabgleich, Gammakorrektur, Tonwertumsetzung, Matrix-Multiplikation, Bildregistrierung, Pyramidenbau, Wavelet-Transformation, blockweise diskrete Kosinus- und Fourier-Transformationen.Therefore, the larger overall image processing sequence may take the form of an image processing pipeline or a directed acyclic graph (DAG), and the development environment may be configured to display to the developer an actual representation of the developed program code. Core systems may be individually developed by a developer and / or by a device including underlying technology (such as the actual signal processor hardware and / or a construction thereof) and / or by a third party (eg, one for the Development system written core system software) are provided. Accordingly, it is believed that a nominal development environment includes a "library" of core systems that developers can "connect" to in various ways to accomplish the overall process of their greater development effort. Some basic core systems that are expected to be part of such a library may include core systems to provide one or more of the following basic image processing steps: cross windings, de-noise, color space conversions, edge and corner detection, sharpening, white balance, gamma correction, tone mapping, Matrix multiplication, image registration, pyramid construction, wavelet transform, blockwise discrete cosine and fourier transforms.
2b zeigt eine exemplarische Darstellung der Struktur eines Kernsystems 203, das von einem Entwickler in Betracht gezogen werden kann. Wie in 2b dargestellt, kann das Kernsystem 203 als eine Anzahl von parallelen Strängen von Programmcode („Threads”) 204 betrachtet werden, die jeweils auf einem entsprechenden zugrunde liegenden Prozessor 205 arbeiten, wobei jeder Prozessor 205 auf eine bestimmte Position in einem Ausgabefeld 206 (z. B. als eine bestimmte Bildpunktposition in dem von dem Kernsystem erzeugten Ausgabebild) ausgerichtet ist. Der Einfachheit halber sind in 2b nur drei Prozessoren und entsprechende Threads dargestellt. In verschiedenen Ausführungsformen weist jede dargestellte Ausgabefeldposition einen eigenen fest zugeordneten Prozessor und einen entsprechenden Thread auf. Das heißt, dass für jeden Bildpunkt im Ausgabefeld ein separater Prozessor und Thread zugewiesen werden kann. 2 B shows an exemplary representation of the structure of a core system 203 that can be considered by a developer. As in 2 B represented, the core system 203 as a number of parallel strands of program code ("threads") 204 are considered, each on a corresponding underlying processor 205 work, with each processor 205 to a specific position in an output field 206 (eg, as a particular pixel position in the output image generated by the core system). For the sake of simplicity, in 2 B only three processors and corresponding threads are shown. In various embodiments, each output field position shown has its own dedicated processor and thread. This means that a separate processor and thread can be assigned for each pixel in the output field.
Wie nachstehend näher beschrieben, arbeiten eine Matrix von Ausführungsbahnen und entsprechenden Threads in der tatsächlichen zugrunde liegenden Hardware in verschiedenen Ausführungsformen im Gleichklang (z. B. bei der Datenverarbeitung durch gleichzeitiges Anwenden eines einzigen Befehls auf mehrere Daten), um für einen Teil einer „Zeilengruppe” des gerade verarbeiteten Frames Bildausgabedaten zu erzeugen. Eine Zeilengruppe ist ein zusammenhängender, beträchtlicher Abschnitt eines Frames. In verschiedenen Ausführungsformen kann sich der Entwickler im Klaren darüber sein, dass die Hardware auf Zeilengruppen arbeitet, oder die Entwicklungsumgebung eine Abstraktion darstellen kann, in der es einen separaten Prozessor und einen Thread für beispielsweise jeden Bildpunkt in dem Ausgabeframe (z. B. jeden durch einen eigenen fest zugeordneten Prozessor und Thread in einem Ausgabeframe erzeugten Bildpunkt) geben kann. Unabhängig davon versteht der Entwickler, dass das Kernsystem in verschiedenen Ausführungsformen einen einzelnen Thread für jeden Ausgabebildpunkt beinhaltet (unabhängig davon, ob das Ausgabefeld als vollständiger Ausgabeframe oder Abschnitt desselben visualisiert wird).As described in more detail below, a matrix of execution lanes and corresponding threads in the actual underlying hardware in different embodiments operate in unison (e.g., in data processing by simultaneously applying a single instruction to multiple data) to a portion of a "stanza "Of the currently processed frame to produce image output data. A stanza is a contiguous, substantial portion of a frame. In various embodiments, the developer may be aware that the hardware is working on stanzas, or the development environment may represent an abstraction in which there is a separate processor and thread for, for example, each pixel in the output frame (e.g. a dedicated dedicated processor and thread in an output frame generated pixel). Regardless, the developer understands that in various embodiments, the core system includes a single thread for each output pixel (regardless of whether the output field is visualized as a complete output frame or portion thereof).
Wie nachfolgend näher beschrieben wird, weisen die Prozessoren 205, die dem Entwickler in der virtuellen Umgebung präsentiert werden, eine Befehlssatzarchitektur (ISA) auf, die nicht nur Standard-(z. B. RISC)Maschinenbefehle unterstützt, sondern auch speziell formatierte Datenzugriffsbefehle beinhaltet, die es dem Entwickler ermöglichen, die durchgeführte Bildpunktverarbeitung leicht zu visualisieren. Die Fähigkeit, eine beliebige Eingangsmatrixposition in Kombination mit einer vollständigen Befehlssatzarchitektur herkömmlicher mathematischer und programmgesteuerter Maschinenbefehle leicht zu definieren/zu visualisieren, ermöglicht eine extrem vielseitige Programmierumgebung, die es einem Anwendungsprogrammentwickler im Wesentlichen ermöglicht, im Idealfall jede gewünschte Funktion, die ausgeführt werden soll, auf einer beliebig großen Bildfläche zu definieren. Zum Beispiel kann im Idealfall jede mathematische Operation leicht programmiert und auf jede Schablonengröße angewendet werden.As will be described in more detail below, the processors have 205 presented to the developer in the virtual environment, an instruction set architecture (ISA) that not only supports standard (e.g., RISC) machine instructions, but also includes specially formatted data access instructions that enable the developer to easily perform the pixel processing performed to visualize. The ability to easily define / visualize any input array position in combination with a complete instruction set architecture of conventional mathematical and program-controlled machine instructions allows for an extremely versatile programming environment that substantially enables an application program developer, ideally any desired function to be performed to define an arbitrarily large image area. For example, ideally, any mathematical operation can be easily programmed and applied to any template size.
Hinsichtlich der Datenzugriffsbefehle beinhaltet die Befehlssatzarchitektur der virtuellen Prozessoren („virtuelle ISA”) in einer Ausführungsform einen speziellen Datenladebefehl und einen speziellen Datenspeicherbefehl. Der Datenladebefehl ist in der Lage, jede Position innerhalb eines Eingangsfeldes von Bilddaten einzulesen. Der Datenspeicherbefehl kann an eine beliebige Stelle innerhalb des Ausgabefeldes von Bilddaten schreiben. Der letztgenannte Befehl ermöglicht es, mehrere Instanzen desselben Prozessors problemlos verschiedenen Ausgabebildpunktpositionen zuzuordnen (jeder Prozessor schreibt in einen anderen Bildpunkt in dem Ausgabefeld). Dementsprechend kann beispielsweise die Schablonengröße selbst (z. B. als Bildpunktbreite und Bildpunkthöhe ausgedrückt) zu einem leicht programmierbaren Merkmal gemacht werden. Die Visualisierung der Verarbeitungsvorgänge wird weiter vereinfacht, wobei jede der speziellen Lade- und Speicherbefehle ein spezielles Befehlsformat aufweist, wodurch Zielfeldpositionen vereinfacht als X- und Y-Koordinaten angegeben werden.With regard to the data access instructions, in one embodiment, the virtual processor instruction set architecture ("virtual ISA") includes a special data load instruction and a special data store instruction. The data load command is capable of reading in every position within an input field of image data. The data store command may write anywhere within the output field of image data. The latter command allows multiple instances of the same processor to be easily assigned to different output pixel positions (each processor writes to another pixel in the output field). Accordingly, for example, the template size itself (eg, expressed as pixel width and pixel height) can be made into a readily programmable feature. The visualization of the processing operations is further simplified, with each of the special load and store instructions having a special instruction format, which simply indicates target field positions as X and Y coordinates.
Unabhängig davon, können durch Instanziieren eines getrennten Prozessors für jede der Positionen in dem Ausgabefeld die Prozessoren ihre jeweiligen Threads parallel ausführen, so dass z. B. die jeweiligen Werte für alle Positionen in dem Ausgabefeld gleichzeitig erzeugt werden. Es ist zu beachten, dass viele Bildverarbeitungsroutinen in der Regel die gleichen Vorgänge an verschiedenen Bildpunkten des gleichen Ausgabebildes ausführen. Dementsprechend wird in einer Ausführungsform der Entwicklungsumgebung davon ausgegangen, dass jeder Prozessor identisch ist und denselben Thread-Programmcode ausführt. Somit kann die virtualisierte Umgebung als eine Art zweidimensionaler (2D) SIMD-Prozessor betrachtet werden, der aus einer 2D-Matrix von z. B. identischen Prozessoren besteht, die jeweils identischen Code im Sperrschritt ausführen. Regardless, by instantiating a separate processor for each of the positions in the output field, the processors can execute their respective threads in parallel, such that e.g. For example, the respective values for all positions in the output field are generated simultaneously. It should be noted that many image processing routines typically perform the same operations on different pixels of the same output image. Accordingly, in one embodiment of the development environment, it is assumed that each processor is identical and executes the same thread program code. Thus, the virtualized environment may be considered as a type of two-dimensional (2D) SIMD processor consisting of a 2D matrix of e.g. B. identical processors, each executing identical code in the blocking step.
3 zeigt eine ausführlichere exemplarische Ausführungsform der Verarbeitungsumgebung für zwei virtuelle Prozessoren, die identischen Code für zwei unterschiedliche Bildpunktpositionen in einem Ausgabefeld verarbeiten. 3 zeigt eine Ausgabematrix 304, die einem erzeugten Ausgabebild entspricht. Hier verarbeitet ein erster virtueller Prozessor den Code des Threads 301, um einen Ausgabewert an der Position X1 der Ausgabematrix 304 zu erzeugen, und ein zweiter virtueller Prozessor verarbeitet den Code des Threads 302, um einen Ausgabewert am Ort X2 der Ausgabematrix zu erzeugen 304. In verschiedenen Ausführungsformen würde der Entwickler wiederum verstehen, dass es einen separaten Prozessor und Thread für jede Bildpunktposition in der Ausgabematrix 304 gibt (der Einfachheit halber werden in 3 lediglich zwei derselben dargestellt). Jedoch muss der Entwickler (aufgrund der SIMD-ähnlichen Beschaffenheit der Maschine) in verschiedenen Ausführungsformen nur Code für einen Prozessor und einen Thread entwickeln. 3 Figure 12 shows a more detailed exemplary embodiment of the processing environment for two virtual processors processing identical code for two different pixel positions in an output field. 3 shows an output matrix 304 that corresponds to a generated output image. Here a first virtual processor processes the code of the thread 301 to obtain an output value at position X1 of the output matrix 304 and a second virtual processor processes the code of the thread 302 to generate an output value at location X2 of the output matrix 304 , In various embodiments, the developer would again understand that there is a separate processor and thread for each pixel location in the output matrix 304 gives (for the sake of simplicity be in 3 only two of them are shown). However, in various embodiments, the developer (due to the SIMD-like nature of the machine) only needs to develop code for a processor and a thread.
Wie auf dem Fachgebiet bekannt ist, wird ein Ausgabebildpunktwert oft durch die Verarbeitung der Bildpunkte einer Eingangsmatrix bestimmt, die die entsprechende Ausgabebildpunktposition beinhaltet und umgibt. Beispielsweise entspricht, wie aus 3 ersichtlich, die Position X1 der Ausgabematrix 304 der Position E der Eingangsmatrix 303. Die Schablone der zu verarbeitenden Eingangsmatrix 303-Bildpunktwerte, um den Ausgabewert X1 zu bestimmen, würde daher den Eingangswerten ABCDEFGHI entsprechen. Ähnlich würde die Schablone der zu verarbeitenden Eingangsmatrixbildpunkte, um den Ausgabewert X2 zu bestimmen, den Eingangswerten DEFGHIJKL entsprechen.As is known in the art, an output pixel value is often determined by the processing of the pixels of an input matrix that includes and surrounds the corresponding output pixel position. For example, like, out 3 can be seen, the position X1 of the output matrix 304 the position E of the input matrix 303 , The template of the input matrix to be processed 303 Pixel values to determine the output value X1 would therefore correspond to the input values ABCDEFGHI. Similarly, the template of the input matrix pixels to be processed to determine the output value X2 would correspond to the input values DEFGHIJKL.
3 zeigt eine exemplarische Ausführungsform eines entsprechenden virtuellen Umgebungsprogrammcodes für ein Thread-Paar 301, 302, das verwendet werden könnte, um die Ausgabewerte X1 bzw. X2 zu berechnen. In der exemplarischen Ausführungsform von 3 sind beide Code-Paare identisch und entsprechen durchschnittlich einer Schablone von neun Eingangsmatrixwerten, um einen entsprechenden Ausgabewert zu bestimmen. Der einzige Unterschied zwischen den beiden Threads sind die Variablen, die aus der Eingabematrix und der Position der zu beschreibenden Ausgabematrix aufgerufen werden. Insbesondere arbeitet der Thread, der die Ausgabeposition X1 schreibt, auf der Schablone ABCDEFGHI und der Thread, der die Ausgabeposition X2 schreibt, auf der Schablone DEFGHIJKL. 3 shows an exemplary embodiment of a corresponding virtual environment program code for a thread pair 301 . 302 which could be used to calculate the output values X1 and X2, respectively. In the exemplary embodiment of 3 Both code pairs are identical and correspond on average to a template of nine input matrix values to determine a corresponding output value. The only difference between the two threads is the variables called from the input matrix and the position of the output matrix to be described. Specifically, the thread that writes the issue position X1 works on the template ABCDEFGHI and the thread that writes the issue position X2 on the template DEFGHIJKL.
Wie aus dem jeweiligen Programmcode aus dem Thread-Paar 301, 302 ersichtlich, beinhaltet jeder virtuelle Prozessor zumindest die internen Register R1 und R2 und unterstützt zumindest folgende Befehle: 1) einen LADE-Befehl aus der Eingangsmatrix in R1; 2) einen LADE-Befehl aus dem Eingangsfeld in R2; 3) einen ADDIER-Befehl, der den Inhalt von R1 und R2 addiert und das Ergebnis in R2 einfügt; 4) einen DIVIDIER-Befehl, der den Wert innerhalb R2 durch den unmittelbaren Operanden 9 teilt; und, 5) ein SPEICHER-Befehl, der den Inhalt von R2 in die Ausgabematrixposition speichert, für die der Thread bestimmt ist. Obwohl in 3 nur zwei Ausgabematrixpositionen und nur zwei Threads und entsprechende Prozessoren dargestellt sind, könnte jeder Position in der Ausgabematrix durchaus ein virtueller Prozessor und ein entsprechender Thread zugewiesen werden, der diese Funktionen ausführt. In verschiedenen Ausführungsformen werden die Mehrfach-Threads im Einklang mit der SIMD-artigen Beschaffenheit der Verarbeitungsumgebung isoliert voneinander ausgeführt. Das heißt, es gibt keine Thread-Thread-Kommunikation zwischen virtuellen Prozessoren (ein SIMD-Kanal verhindert den Übergang in einen anderen SIMD-Kanal).As from the respective program code from the thread pair 301 . 302 As can be seen, each virtual processor includes at least the internal registers R1 and R2 and supports at least the following instructions: 1) a LOAD instruction from the input matrix in R1; 2) a LOAD command from the input field in R2; 3) an ADD command that adds the contents of R1 and R2 and inserts the result in R2; 4) a DIVIDIER instruction which divides the value within R2 by the immediate operand 9; and, 5) a STORE command that stores the contents of R2 in the output array location for which the thread is destined. Although in 3 If only two output matrix locations and only two threads and corresponding processors are shown, then each position in the output matrix could well be assigned a virtual processor and a corresponding thread performing these functions. In various embodiments, the multiple threads are executed in isolation in accordance with the SIMD-like nature of the processing environment. That is, there is no thread-thread communication between virtual processors (one SIMD channel prevents transition to another SIMD channel).
b. Virtuelles Prozessorspeichermodellb. Virtual processor memory model
In verschiedenen Ausführungsformen ist ein wichtiges Merkmal der virtuellen Prozessoren ihr Speichermodell. Wie auf dem Fachgebiet bekannt ist, liest ein Prozessor Daten aus dem Speicher, arbeitet an diesen Daten und schreibt neue Daten in den Speicher zurück. Ein Speichermodell ist die Perspektive oder Ansicht, die ein Prozessor von der Art und Weise hat, in der die Daten im Speicher gegliedert sind. In einer Ausführungsform beinhaltet das Speichermodell der virtuellen Prozessoren sowohl Eingangs- als auch Ausgabematrixbereiche. Eingabebildpunktwerte für Threads werden in dem Eingangsmatrixbereich gespeichert, und Ausgabebildpunktwerte, die durch Threads erzeugt werden, werden in dem Ausgabematrixbereich gespeichert.In various embodiments, an important feature of the virtual processors is their memory model. As is known in the art, a processor reads data from memory, works on that data, and writes new data back into memory. A storage model is the perspective or view that a processor has of the manner in which the data is organized in memory. In one embodiment, the storage model of the virtual processors includes both input and output array areas. Threshold input pixel values are stored in the input array area, and output pixel values generated by threads are stored in the output matrix area.
In einer Ausführungsform wird ein neuartiges Speicheradressierschema verwendet, um zu definieren, welche bestimmten Eingangswerte von einem Eingangsmatrixbereich des Speichermodells des virtuellen Prozessors aufgerufen werden sollen. Genauer gesagt, wird ein „positionsbezogenes” Adressierungsschema verwendet, das die gewünschten Eingangsdaten anstatt einer herkömmlichen linearen Speicheradresse mit X-, Y-Koordinaten definiert. Dementsprechend beinhaltet der Ladebefehl der Befehlssatzarchitektur der virtuellen Prozessoren ein Befehlsformat, das eine spezifische Speicherposition innerhalb der Eingangsmatrix mit einer X-Komponente und einer Y-Komponente identifiziert. Daher wird ein zweidimensionales Koordinatensystem verwendet, um Speicher für Eingangswerte zu adressieren, die aus der Eingangsmatrix eingelesen werden.In one embodiment, a novel memory addressing scheme is used to define which particular input values from a Input matrix area of the storage model of the virtual processor to be called. More specifically, a "positional" addressing scheme is used which defines the desired input data rather than a conventional linear memory address having X, Y coordinates. Accordingly, the load instruction of the instruction set architecture of the virtual processors includes an instruction format that identifies a specific memory location within the input array having an X component and a Y component. Therefore, a two-dimensional coordinate system is used to address memory for input values read from the input matrix.
Die Verwendung eines positionsbezogenen Speicheradressierungsansatzes ermöglicht es, dass der Bereich eines Bildes, an dem ein virtueller Prozessor arbeitet, für einen Entwickler leichter identifizierbar ist. Wie oben erwähnt, ermöglicht die Fähigkeit, eine beliebige Eingangsmatrixposition in Kombination mit einer gesamten Befehlssatzarchitektur von herkömmlichen mathematischen und programmgesteuerten Maschinenbefehlen leicht zu definieren/sichtbar zu machen, eine extrem vielseitige Programmierumgebung, die es im Wesentlichen ermöglicht, dass ein Anwendungsprogrammentwickler im Idealfall beliebig jede gewünschte Funktion definieren kann, die auf einer beliebigen Größe der Bildfläche durchgeführt werden soll. Verschiedene Befehlsformat-Ausführungsformen für Befehle, die ein positionsbezogenes Adressierungsschema übernehmen, sowie Ausführungsformen anderer Merkmale der unterstützten Befehlssatzarchitektur werden nachfolgend näher beschrieben.The use of a positional memory addressing approach allows the area of an image on which a virtual processor operates to be more easily identifiable to a developer. As mentioned above, the ability to easily define / visualize any input array position in combination with an entire instruction set architecture of conventional mathematical and program-controlled machine instructions allows for an extremely versatile programming environment that essentially allows an application program developer ideally to have any desired one Define function that should be performed on any size of the image area. Various instruction format embodiments for instructions that adopt a positional addressing scheme, as well as embodiments of other features of the supported instruction set architecture, are described in more detail below.
Die Ausgabematrix enthält die Ausgabebilddaten, für deren Generierung die Threads verantwortlich sind. Die ausgegebenen Bilddaten können endgültige Bilddaten, wie z. B. die tatsächlichen Bilddaten, sein, die auf einem Display dargestellt werden, das der Gesamtbildverarbeitungssequenz folgt, oder es können Zwischenbilddaten sein, die ein nachfolgendes Kernsystem der Gesamtbildverarbeitungssequenz als Eingangsbilddateninformationen verwendet. Virtuelle Prozessoren konkurrieren in der Regel jedoch nicht für dieselben Ausgabedatenelemente, da sie während desselben Zyklus auf verschiedene Bildpunktpositionen der ausgegebenen Bilddaten schreiben.The output matrix contains the output image data that the threads are responsible for generating. The output image data may be final image data such as. For example, the actual image data may be displayed on a display following the overall image processing sequence, or it may be inter-image data that a subsequent core system of the overall image processing sequence uses as input image data information. However, virtual processors generally do not compete for the same output data items because they write to different pixel locations of the output image data during the same cycle.
In einer Ausführungsform wird das positionsbezogene Adressierungsschema auch für Schreibvorgänge in die Ausgabematrix verwendet. Dementsprechend beinhaltet die Befehlssatzarchitektur für jeden virtuellen Prozessor einen Speicherbefehl, dessen Befehlsformat anstelle einer herkömmlichen Speicherung mit wahlfreiem Zugriff eine zielgerichtete Schreibposition im Speicher als eine zweidimensionale XY-Koordinate definiert.In one embodiment, the positional addressing scheme is also used for writes to the output matrix. Accordingly, the instruction set architecture for each virtual processor includes a store instruction whose instruction format, rather than conventional random access storage, defines a targeted write position in memory as a two-dimensional XY coordinate.
2.0 Hardwarearchitektur-Ausführungsformen2.0 Hardware Architecture Embodiments
a. Grafikprozessor-Hardware-Architektur und -Betrieba. Graphics processor hardware architecture and operation
4 zeigt eine Ausführungsform einer Architektur 400 für einen in der Hardware implementierten Grafikprozessor. Der Grafikprozessor kann z. B. von einem Compiler angesteuert werden, der den Programmcode, der für einen virtuellen Prozessor geschrieben wurde, in einer simulierten Umgebung in Programmcode umwandelt, der von dem Hardwareprozessor tatsächlich ausgeführt wird. Wie in 4 dargestellt, beinhaltet die Architektur 400 eine Vielzahl von Zeilenpuffereinheiten 401_1 bis 401_M, die mit einer Vielzahl von Schablonenprozessoreinheiten 402_1 bis 402_N und entsprechenden Datenblattgeneratoreinheiten 403_1 bis 403_N über ein Netzwerk 404 (z. B. ein Netzwerk auf Chip (NOC), unter anderem auch ein Chip-Switch-Netzwerk, ein On-Chip-Ring-Netzwerk oder einer anderen Art von Netzwerk) verbunden ist. In einer Ausführungsform kann eine Zeilenpuffereinheit mit einem Datenblattgenerator und einem entsprechenden Schablonenprozessor über das Netzwerk 404 verbunden sein. 4 shows an embodiment of an architecture 400 for a graphics processor implemented in hardware. The graphics processor can, for. B. be driven by a compiler, which converts the program code written for a virtual processor in a simulated environment into program code that is actually executed by the hardware processor. As in 4 represented, includes the architecture 400 a variety of line buffer units 401_1 to 401_M Using a variety of template processor units 402_1 to 402_N and corresponding data sheet generator units 403_1 to 403_N over a network 404 (For example, a network on chip (NOC), including a chip switch network, an on-chip ring network or other type of network) is connected. In one embodiment, a row buffer unit may include a data sheet generator and a corresponding template processor over the network 404 be connected.
In einer Ausführungsform wird der Programmcode kompiliert und auf einen entsprechenden Schablonenprozessor 402 geladen, um die zuvor von einem Softwareentwickler definierten Bildverarbeitungsvorgänge auszuführen (der Programmcode kann je nach Konzipierung und Implementierung auch auf den zugehörigen Datenblattgenerator des Schablonenprozessors geladen werden 403). In zumindest einigen Fällen kann eine Bildverarbeitungsleitung realisiert werden, indem ein erstes Kernprogramm für eine erste Pipelinephase in einen ersten Schablonenprozessor 402_1 geladen, ein zweites Kernprogramm für eine zweite Pipelinephase in einen zweiten Schablonenprozessor 402_2, usw. geladen wird, wobei das erste Kernsystem die Funktionen der ersten Leitungsphase durchführt, das zweite Kernsystem die Funktionen der zweiten Pipelinephase usw. ausführt, und zusätzliche Steuerflussverfahren installiert werden, um Ausgabebilddaten von einer Pipelinephase zu der nächsten Leitungsphase zu leiten.In one embodiment, the program code is compiled and dispatched to a corresponding template processor 402 loaded to execute the image processing operations previously defined by a software developer (the program code may also be loaded onto the corresponding template processor datasheet generator, depending on design and implementation 403 ). In at least some cases, an image processing line may be realized by placing a first core program for a first pipeline phase into a first template processor 402_1 loaded, a second core program for a second pipeline phase into a second template processor 402_2 , etc., wherein the first core system performs the functions of the first conduction phase, the second core system performs the functions of the second pipeline phase, etc., and additional control flow methods are installed to pass output image data from one pipeline phase to the next conduction phase.
In anderen Konfigurationen kann der Grafikprozessor als eine parallele Maschine realisiert sein, die zwei oder mehr Schablonenprozessoren 402_1, 402_2 aufweist, die auf demselben Kernsystemprogrammcode betrieben werden. Zum Beispiel kann ein hochgradig dichter und hoher Datenratenstrom von Bilddaten verarbeitet werden, indem Frames über mehrere Schablonenprozessoren verteilt werden, von denen jeder dieselbe Funktion ausführt.In other configurations, the graphics processor may be implemented as a parallel machine having two or more template processors 402_1 . 402_2 which operate on the same core system program code. For example, a high density and high data rate stream of image data may be processed by distributing frames across multiple template processors, each of which performs the same function.
In noch anderen Konfigurationen kann im Wesentlichen jeder DAG von Kernsystemen auf den Hardwareprozessor geladen werden, indem jeweilige Schablonenprozessoren mit deren eigenen jeweiligen Kernsystemprogrammcodes konfiguriert und geeignete Ablaufsteuerungs-Hooks in die Hardware konfiguriert werden, um Ausgabebilder von einem Kernsystem an den Eingang eines nächsten Kernsystems in der DAG-Konstruktion zu leiten.In still other configurations, essentially every DAG of core systems may be based on the Hardware processors are loaded by configuring respective template processors with their own respective core system program codes and configuring appropriate scheduling hooks into the hardware to route output images from a core system to the input of a next core system in the DAG design.
Bei einem allgemeinen Ablauf werden die Frames der Bilddaten von einer Makro-E/A-Einheit 405 empfangen und zu einer oder mehreren der Zeilenpuffereinheiten 401 auf einer Frame-per-Frame-Basis weitergeleitet. Eine bestimmte Zeilenpuffereinheit parst ihren Frame aus Bilddaten in einen kleineren Bereich von Bilddaten, der als „Zeilengruppe” bezeichnet wird, und führt dann die Zeilengruppe durch das Netzwerk 404 zu einem bestimmten Datenblattgenerator. Eine vollständige oder „volle” singuläre Zeilengruppe kann sich beispielsweise aus den Daten mehrerer zusammenhängender vollständiger Zeilen oder Spalten eines Frames zusammensetzen (der Einfachheit halber bezieht sich die vorliegende Beschreibung hauptsächlich auf zusammenhängende Zeilen). Der Datenblattgenerator parst des Weiteren die Zeilengruppe von Bilddaten in einen kleineren Bereich von Bilddaten, der als „Datenblatt” bezeichnet wird, und präsentiert das Datenblatt seinem entsprechenden Schablonenprozessor.In a general process, the frames of the image data are from a macro I / O unit 405 received and to one or more of the line buffer units 401 forwarded on a frame-by-frame basis. A particular line buffer unit parses its frame of image data into a smaller range of image data called a "stanza" and then routes the stanza through the network 404 to a specific data sheet generator. For example, a full or "full" singular stanza may be composed of the data of several contiguous complete rows or columns of a frame (for simplicity, the present description will mainly refer to contiguous rows). The datasheet generator further parses the stanza of image data into a smaller range of image data, referred to as a "datasheet," and presents the datasheet to its corresponding template processor.
Im Falle einer Bildverarbeitungspipeline oder eines DAG-Ablaufs mit einem einzigen Eingang werden im Allgemeinen Eingangsframes an die gleiche Zeilenpuffereinheit 401_1 geleitet, die die Bilddaten in Zeilengruppen parst und die Zeilengruppen zu dem Datenblattgenerator leitet 403_1, dessen entsprechender Schablonenprozessor 402_1 den Code des ersten Kernsystems in der Leitung/dem DAG ausführt. Nach Beendigung der Vorgänge an den durch den Schablonenprozessor 402_1 verarbeiteten Zeilengruppen sendet der Datenblattgenerator 403_1 Ausgabezeilengruppen an eine „nachgeschaltete” Zeilenpuffereinheit 401_2 (in manchen Anwendungsfällen kann die Ausgabezeilengruppe zurück an die gleiche Zeilenpuffereinheit 401_1 gesendet werden, die zuvor die Eingabezeilengruppen gesendet hatte).In the case of an image processing pipeline or DAG single-input flow, input frames are generally sent to the same row buffer unit 401_1 which parses the image data into stanzas and routes the stanzas to the datasheet generator 403_1 , its corresponding template processor 402_1 executes the code of the first core system in the line / DAG. After completion of the operations to the by the template processor 402_1 Processed stanzas are sent by the datasheet generator 403_1 Output line groups to a "downstream" line buffer unit 401_2 (In some cases, the output row group can go back to the same row buffer unit 401_1 sent, which had previously sent the input line groups).
Ein oder mehrere „Abnehmerkernsysteme”, die die nächste Phase/den nächsten Vorgang in der Leitung/dem DAG darstellen, die auf deren eigenen anderen Datenblattgenerator und Schablonenprozessor (z. B. Datenblattgenerator 403_2 und Schablonenprozessor 402_2) ausführt werden, empfangen anschließend die von dem ersten Schablonenprozessor 402_1 erzeugten Bilddaten von der nachgelagerten Zeilenpuffereinheit 401_2. Auf diese Weise werden die Ausgabedaten eines „Erzeugerkernsystems”, das auf einem ersten Schablonenprozessor betrieben wird, an ein „Abnehmerkernsystem” weitergeleitet, das auf einem zweiten Schablonenprozessor betrieben wird, wobei das Abnehmerkernsystem nach dem Erzeugerkernsystem den nächsten Satz von Arbeitsschritten gemäß der Konzipierung der gesamten Pipeline oder des DAGs ausführt.One or more "customer core systems" that represent the next phase / operation in the pipe / DAG on their own other data sheet generator and stencil processor (eg, datasheet generator 403_2 and template processor 402_2 ), then receive those from the first template processor 402_1 generated image data from the downstream line buffer unit 401_2 , In this way, the output data of a "producer core system" operating on a first template processor is forwarded to a "customer core system" operating on a second template processor, the customer core system after the producer core system the next set of operations in accordance with the design of the entire Pipeline or DAG.
Ein Schablonenprozessor 402 ist dafür ausgelegt, gleichzeitig an mehreren überlappenden Schablonen von Bilddaten zu arbeiten. Die mehreren überlappenden Schablonen und die interne Hardwareverarbeitungskapazität des Schablonenprozessors bestimmen effektiv die Größe eines Datenblattes. Hier arbeiten innerhalb eines Schablonenprozessors 402 Matrizen von Ausführungsbahnen zusammen, um gleichzeitig den Bilddatenoberflächenbereich zu bearbeiten, der von den mehreren überlappenden Schablonen bedeckt ist.A template processor 402 is designed to work simultaneously on multiple overlapping templates of image data. The multiple overlapping templates and the internal hardware processing capacity of the template processor effectively determine the size of a datasheet. Here work inside a template processor 402 Matrices of execution paths to simultaneously process the image data surface area covered by the plurality of overlapping templates.
Wie nachstehend näher beschrieben, werden in verschiedenen Ausführungsformen Datenblätter von Bilddaten in eine zweidimensionale Registermatrixstruktur innerhalb des Schablonenprozessors 402 geladen. Es wird davon ausgegangen, dass die Verwendung von Datenblättern und die zweidimensionale Registermatrixstruktur für effektive Energieverbrauchsverbesserungen sorgen, indem eine große Datenmenge in einen großen Registerbereich verschoben wird, so wird beispielsweise eine einzelne Ladeoperation mit direkt an den Daten ausgeführten Verarbeitungsschritten unmittelbar danach durch eine Ausführungsbahnmatrix verschoben. Zudem stellt die Verwendung einer Ausführungsbahnmatrix und einer entsprechenden Registermatrix verschiedene Schablonengrößen bereit, die leicht programmierbar/konfigurierbar sind.As described in more detail below, in various embodiments, data sheets of image data become a two-dimensional register array structure within the template processor 402 loaded. It is believed that the use of datasheets and the two-dimensional register array structure provide for effective power consumption improvements by shifting a large amount of data into a large register area, for example, a single load operation with processing steps executed directly on the data is immediately postponed through an execution path matrix. In addition, the use of an execution path matrix and a corresponding register matrix provide various template sizes that are easily programmable / configurable.
5a bis 5e veranschaulichen umfassend Ausführungsformen sowohl der Parsing-Aktivität einer Zeilenpuffereinheit 401 als auch der feineren Parsing-Aktivität einer Datenblattgeneratoreinheit 403, sowie der Schablonenverarbeitungsaktivität des Schablonenprozessors 402, der mit der Datenblatt-Erzeugereinheit 403 gekoppelt ist. 5a to 5e Illustratively, embodiments illustrate both the parsing activity of a row buffer unit 401 as well as the finer parsing activity of a datasheet generator unit 403 , as well as the template processing activity of the template processor 402 , with the datasheet generator unit 403 is coupled.
5a zeigt eine Ausführungsform eines Eingabeframes der Bilddaten 501. 5a zeigt zudem einen Umriss drei überlappender Schablonen 502 (die jeweils eine Dimension von 3 Pixeln×3 Pixeln aufweisen), die ein Schablonenprozessor ausgelegt ist, zu bedienen. Der Ausgabebildpunkt, für den jede Schablone die jeweiligen Ausgabebilddaten erzeugt, wird in schwarzer Farbe hervorgehoben. Der Einfachheit halber sind die drei überlappenden Schablonen 502 nur in vertikaler Richtung überlappend dargestellt. Es ist relevant, zu erkennen, dass ein Schablonenprozessor in Wirklichkeit so ausgestaltet sein kann, dass dieser sowohl in vertikaler als auch in horizontaler Richtung überlappende Schablonen aufweist. 5a shows an embodiment of an input frame of the image data 501 , 5a also shows an outline of three overlapping stencils 502 (each having a dimension of 3 pixels × 3 pixels) that a template processor is designed to serve. The output pixel for which each template produces the respective output image data is highlighted in black. For simplicity, the three overlapping templates 502 only overlapping in the vertical direction. It is relevant to recognize that a template processor may in fact be designed to have overlapping templates in both the vertical and horizontal directions.
Aufgrund der vertikalen überlappenden Schablonen 502 innerhalb des Schablonenprozessors, wie in 5a dargestellt, gibt es ein breites Band von Bilddaten innerhalb des Frames, das ein einzelner Schablonenprozessor bedienen kann. Wie nachfolgend näher beschrieben, verarbeiten die Schablonenprozessoren innerhalb ihrer überlappenden Schablonen Daten von links nach rechts quer durch die Bilddaten (und wiederholen den Vorgang dann für die nächste Gruppe von Zeilen in der Reihenfolge von oben nach unten). Somit wird, da die Schablonenprozessoren mit ihrem Betrieb fortfahren, die Anzahl der schwarzen Ausgabebildpunktblöcke horizontal nach rechts zunehmen. Wie oben erwähnt, ist eine Zeilenpuffereinheit 401 für das Parsen einer Zeilengruppe von Eingangsbilddaten aus einem eingehenden Frame verantwortlich, der für die Schablonenprozessoren ausreichend ist, um eine erweiterte Anzahl anstehender Zyklen zu bedienen. Eine exemplarische Darstellung einer Zeilengruppe ist als schattierter Bereich 503 dargestellt. In einer weiter unten beschriebenen Ausführungsform kann die Zeilenpuffereinheit 401 unterschiedliche Dynamiken zum Senden/Empfangen einer Zeilengruppe an einen/von einem Datenblattgenerator umfassen. Beispielsweise werden gemäß einem Modus, der als „vollständige Gruppe” bezeichnet wird, die gesamten Bilddatenzeilen mit voller Breite zwischen einer Zeilenpuffereinheit und einem Datenblattgenerator übermittelt. Gemäß einem zweiten Modus, der als „virtuell schlank” bezeichnet wird, wird eine Zeilengruppe zunächst mit einer Untermenge von Zeilen mit voller Breite übermittelt. Die verbleibenden Zeilen werden dann nacheinander in kleineren Stücken (mit weniger als voller Breite) übermittelt. Due to the vertical overlapping stencils 502 within the template processor, as in 5a As shown, there is a broad band of image data within the frame that can serve a single template processor. As described in more detail below, the template processors within their overlapping templates process data from left to right across the image data (and then repeat the process for the next group of lines in top-to-bottom order). Thus, as the template processors continue to operate, the number of black output pixel blocks will increase horizontally to the right. As mentioned above, a line buffer unit is 401 is responsible for parsing a stanza of input image data from an incoming frame that is sufficient for the template processors to service an extended number of pending cycles. An exemplary representation of a stanza is as a shaded area 503 shown. In an embodiment described below, the line buffer unit 401 different dynamics for sending / receiving a stanza to / from a data sheet generator include. For example, according to a mode called "full group", all the full-width image data lines are communicated between a line buffer unit and a data sheet generator. According to a second mode, called "virtually lean," a stanza is first submitted with a subset of full-width rows. The remaining lines are then successively transmitted in smaller pieces (less than full width).
Wenn die Zeilengruppe 503 der Eingabebilddaten durch die Zeilenpuffereinheit definiert und an die Datenblattgeneratoreinheit übermittelt worden ist, parst die Datenblattgeneratoreinheit die Zeilengruppe weiter in feinere Datenblätter, die an die Hardwarebeschränkungen des Schablonenprozessors präziser angepasst sind. Insbesondere wird in einer Ausführungsform, wie nachfolgend näher beschrieben, jeder Schablonenprozessor aus einer zweidimensionalen Schieberegistermatrix gebildet. Die zweidimensionale Schieberegistermatrix verschiebt im wesentlichen Bilddaten „unterhalb” einer Matrix von Ausführungsbahnen, wobei das Muster der Verschiebung bewirkt, dass jede Ausführungsbahn an Daten innerhalb ihrer eigenen Schablone arbeitet (d. h. jede Ausführungsbahn ihre eigene Schablone von Informationen verarbeitet, um eine Ausgabe für diese Schablone zu erzeugen). In einer Ausführungsform sind Datenblätter Oberflächenbereiche von Eingabebilddaten, die die zweidimensionale Schieberegistermatrix „ausfüllen” oder anderweitig in dieselbe geladen werden.If the stanza 503 the input image data has been defined by the line buffer unit and transmitted to the data sheet generator unit, the data sheet generator unit further parses the stanza into finer data sheets that are more precisely matched to the hardware limitations of the template processor. In particular, in one embodiment, as described in more detail below, each template processor is formed from a two-dimensional shift register matrix. The two-dimensional shift register matrix essentially shifts image data "below" a matrix of execution lanes, the pattern of displacement causing each execution lane to work on data within its own template (ie, each execution lane processing its own template of information to provide output for that template produce). In one embodiment, data sheets are surface areas of input image data that "populate" or otherwise load the two-dimensional shift register matrix.
Wie in 5b dargestellt, parst der Datenblattgenerator ein Anfangsblatt 504 von der Zeilengruppe 503 und stellt es dem Schablonenprozessor zur Verfügung (hier entspricht das Datenblatt dem schattierten Bereich, der im Allgemeinen mit dem Bezugszeichen 504 gekennzeichnet ist). Wie in den 5c und 5d dargestellt, arbeitet der Schablonenprozessor an dem Datenblatt der eingegebenen Bilddaten durch effektives Bewegen der überlappenden Schablonen 502 von links nach rechts über dem Datenblatt. Wie in 5d ist die Anzahl der Bildpunkte, für die ein Ausgabewert aus den Daten innerhalb des Datenblattes berechnet werden könnte, erschöpft (keine anderen Bildpunktpositionen können einen Ausgabewert haben, der aus den Informationen innerhalb des Datenblattes bestimmt wird). Zur Vereinfachung wurden die Randbereiche des Bildes ignoriert.As in 5b the data sheet generator parses a starting sheet 504 from the stanza 503 and provides it to the template processor (here, the datasheet corresponds to the shaded area, generally designated by the reference numeral 504 is marked). As in the 5c and 5d As shown, the stencil processor operates on the data sheet of the input image data by effectively moving the overlapping stencils 502 from left to right above the datasheet. As in 5d the number of pixels for which an output value could be calculated from the data within the datasheet is exhausted (no other pixel positions can have an output value determined from the information within the datasheet). For simplicity, the fringes of the image have been ignored.
Wie in 5e dargestellt, liefert der Datenblattgenerator dann ein nächstes Datenblatt 505 für den Schablonenprozessor, um die Vorgänge fortzusetzen. Zu beachten ist, dass die Anfangspositionen der Schablonen, wenn sie mit der Bearbeitung an dem nächsten Datenblatt beginnen, der nächsten Progression (wie zuvor in 5d dargestellt) vom Erschöpfungspunkt nach rechts auf dem ersten Datenblatt entsprechen. Mit dem neuen Datenblatt 505 bewegen sich die Schablonen einfach weiter nach rechts, sofern der Schablonenprozessor auf dem neuen Datenblatt auf die gleiche Weise arbeitet wie bei der Verarbeitung des ersten Datenblattes.As in 5e the datasheet generator then returns a next datasheet 505 for the template processor to continue operations. Note that the starting positions of the templates, when starting to process on the next datasheet, are the next progression (as previously described in FIG 5d shown) from the exhaustion point to the right on the first data sheet. With the new data sheet 505 The templates simply move farther to the right, as long as the template processor works on the new datasheet in the same way as when processing the first datasheet.
Zu beachten ist, dass zwischen den Daten des ersten Datenblattes 504 und den Daten des zweiten Datenblattes 505 aufgrund der Randbereiche der Schablonen, die eine Ausgabebildpunktposition umgeben, eine gewisse Überlappung vorliegt. Die Überlappung könnte einfach gehandhabt werden, indem der Datenblattgenerator die überlappenden Daten zweimal überträgt. In alternativen Implementierungen kann, um dem Schablonenprozessor ein nächstes Datenblatt zuzuführen, der Datenblattgenerator damit fortfahren, ausschließlich neue Daten an den Schablonenprozessor zu senden, während der Schablonenprozessor die überlappenden Daten aus dem vorhergehenden Datenblatt verwendet.It should be noted that between the data of the first data sheet 504 and the data of the second data sheet 505 there is some overlap due to the margins of the stencils surrounding an output pixel position. The overlap could be handled easily by the datasheet generator transferring the overlapping data twice. In alternative implementations, to supply a next datasheet to the template processor, the datasheet generator may continue to send only new data to the template processor while the template processor uses the overlapping data from the previous datasheet.
b. Schablonenprozessorarchitektur und -betriebb. Template processor architecture and operation
6 zeigt eine Ausführungsform einer Schablonenprozessorarchitektur 600. Wie in 6 dargestellt, beinhaltet der Schablonenprozessor eine Datenberechnungseinheit 601, einen Skalarprozessor 602 und einen zugehörigen Speicher 603, sowie eine E-/A-Einheit 604. Die Datenberechnungseinheit 601 beinhaltet eine Matrix von Ausführungsbahnen 605, eine zweidimensionale Verschiebungsfeldstruktur 606 und getrennte Speicher mit wahlfreiem Zugriff 607, die mit bestimmten Zeilen oder Spalten der Matrix assoziiert sind. 6 shows an embodiment of a template processor architecture 600 , As in 6 As shown, the template processor includes a data calculation unit 601 , a scalar processor 602 and an associated memory 603 , as well as an I / O unit 604 , The data calculation unit 601 includes a matrix of trajectories 605 , a two-dimensional displacement field structure 606 and separate random access memory 607 that are associated with particular rows or columns of the matrix.
Die E-/A-Einheit 604 ist verantwortlich für das Einladen der „eingegebenen” Datenblätter, die von dem Datenblattgenerator empfangen werden, in die Datenberechnungseinheit 601, sowie das Speichern der von dem Schablonenprozessor in den Datenblattgenerator „ausgegebenen” Datenblätter. In einer Ausführungsform beinhaltet das Einladen von Blattdaten in die Datenberechnungseinheit 601 das Parsen eines empfangenen Datenblattes in die Zeilen/Spalten der Bilddaten, sowie das Einladen der Zeilen/Spalten der Bilddaten in die zweidimensionale Schieberegisterstruktur 606 oder in die jeweiligen Speicher mit wahlfreiem Zugriff 607 der Zeilen/Spalten der Ausführungsbahnmatrix (wie nachfolgend näher beschrieben). Wird das Datenblatt anfänglich in die Speicher 607 geladen, können die einzelnen Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605 dann die Blattdaten, sofern geeignet (z. B. als Ladebefehl kurz vor der Bearbeitung der Blattdaten) in die zweidimensionale Schieberegisterstruktur 606 der Speicher mit wahlfreiem Zugriff 607 einladen. Nach Beendigung des Einladens eines Datenblattes in die Registerstruktur 606 (ob direkt aus einem Datenblattgenerator oder aus den Speichern 607) arbeiten die Ausführungsbahnen der Ausführungsbahnmatrix 605 an den Daten und schreiben letztendlich die fertigen Daten als ein Blatt direkt „zurück” in den Datenblattgenerator oder in die Speicher mit wahlfreiem Zugriff 607. Im letzteren Fall ruft die E/A-Einheit 604 die Daten aus den Speichern mit wahlfreiem Zugriff 607 ab, um ein Ausgabeblatt zu bilden, das dann an den Datenblattgenerator weitergeleitet wird.The I / O unit 604 is responsible for loading the "input" data sheets received from the data sheet generator into the data calculation unit 601 , as well as storing the datasheets "output" from the template processor into the datasheet generator. In one embodiment, the loading of sheet data into the data computation unit 601 parsing a received datasheet into the rows / columns of the image data, and loading the rows / columns of the image data into the two-dimensional shift register structure 606 or in the respective random access memory 607 the lines / columns of the execution path matrix (as described in more detail below). Is the datasheet initially in memory 607 loaded, the individual runways within the runway matrix can 605 then the sheet data, if appropriate (e.g., as a load instruction just prior to processing the sheet data) into the two-dimensional shift register structure 606 the random access memory 607 invite. After completing the loading of a data sheet into the register structure 606 (whether directly from a data sheet generator or from the memories 607 ) the execution lanes of the execution lane matrix work 605 on the data and ultimately write the finished data as a sheet directly "back" into the datasheet generator or into the random access memory 607 , In the latter case, the I / O unit calls 604 the data from the random access memories 607 to form an output sheet, which is then forwarded to the datasheet generator.
Der Skalarprozessor 602 beinhaltet einen Programmcontroller 609, der die Befehle des Programmcodes des Schablonenprozessors aus dem Skalarspeicher 603 liest und die Befehle an die Ausführungsbahnen in der Ausführungsbahnmatrix 605 ausgibt. In einer Ausführungsform wird ein einzelner Befehl auf alle Ausführungsbahnen innerhalb der Matrix 605 übertragen, um ein SIMD-ähnliches Verhalten der Datenberechnungseinheit 601 zu bewirken. In einer Ausführungsform, beinhaltet das Befehlsformat der Anweisungen, die aus dem Skalarspeicher 603 gelesen und an die Ausführungsbahnen der Ausführungsbahnmatrix 605 ausgegeben werden, ein sehr langes Befehlswortformat (VLIW), welches mehr als einen Maschinenbefehl pro Anweisung beinhaltet. In einer weiteren Ausführungsform beinhaltet das VLIW-Format sowohl einen ALU-Maschinenbefehl, der eine mathematische Funktion ausführt, die von der ALU einer Ausführungsbahn ausgeführt wird (wie nachstehend beschrieben, kann in einer Ausführungsform mehr als ein herkömmlicher ALU-Vorgang angegeben sein) als auch einen Speichermaschinenbefehl (der einen Speichervorgang für eine spezifische Ausführungsbahn oder eine Gruppe von Ausführungsbahnen steuert).The scalar processor 602 includes a program controller 609 containing the commands of the program code of the template processor from the scalar memory 603 reads and commands to the execution lanes in the execution lane matrix 605 outputs. In one embodiment, a single command is applied to all execution lanes within the matrix 605 transmitted to a SIMD-like behavior of the data calculation unit 601 to effect. In one embodiment, the instruction format includes instructions derived from the scalar memory 603 read and to the execution lanes of the execution path matrix 605 a very long instruction word format (VLIW) containing more than one machine instruction per instruction. In another embodiment, the VLIW format includes both an ALU machine instruction that performs a mathematical function performed by the ALU of an execution trajectory (as described below, more than one conventional ALU operation may be specified in one embodiment) as well a memory engine command (which controls a save operation for a specific run or group of execution lanes).
Der Begriff „Ausführungsbahn” bezieht sich auf eine Gruppe von einer oder mehreren Ausführungseinheiten, die einen Befehl ausführen können (z. B. eine Logikschaltung, die einen Befehl ausführen kann). Eine Ausführungsbahn kann in verschiedenen Ausführungsformen jedoch mehr Prozessor-ähnliche Funktionalität als nur Ausführungseinheiten beinhalten. Beispielsweise kann eine Ausführungsbahn neben einer oder mehreren Ausführungseinheiten auch Logikschaltungen beinhalten, die einen empfangenen Befehl dekodieren, oder für den Fall MIMD-ähnlicherer Architekturen eine Logikschaltung, die einen Befehl abruft und dekodiert. In Bezug auf MIMD-ähnliche Ansätze kann, obwohl ein zentraler Programmsteuerungsansatz hier weitgehend beschrieben wurde, auch ein verteilterer Ansatz in verschiedenen alternativen Ausführungsformen (z. B. unter anderem auch Programmcode und ein Programmcontroller innerhalb jeder Ausführungsbahn der Matrix 605) implementiert werden.The term "execution lane" refers to a group of one or more execution units that can execute a command (eg, a logic circuit that can execute a command). However, in various embodiments, an execution lane may include more processor-like functionality than just execution units. For example, an execution lane may include, in addition to one or more execution units, logic circuits that decode a received instruction, or in the case of MIMD-like architectures, a logic circuit that fetches and decodes an instruction. With respect to MIMD-like approaches, although a centralized program control approach has been broadly described herein, a more distributed approach may also be used in various alternative embodiments (e.g., including program code and a program controller within each execution path of the matrix 605 ).
Die Kombination einer Ausführungsbahnmatrix 605, eines Programmcontrollers 609 und einer zweidimensionalen Schieberegisterstruktur 606 stellt eine weitgehend anpassbare/konfigurierbare Hardware-Plattform für ein breites Spektrum programmierbarer Funktionen bereit. Beispielsweise können Anwendungssoftwareentwickler in der Lage sein, Kernsysteme mit einem breiten Spektrum unterschiedlicher Funktionsfähigkeiten sowie Dimensionen (z. B. Schablonengrößen) zu programmieren, da die einzelnen Ausführungsbahnen in der Lage sind, eine breite Palette von Funktionen auszuführen und ohne Weiteres auf Eingabebilddaten in der Nähe einer beliebigen Ausgabefeldposition zuzugreifen.The combination of an execution trajectory matrix 605 , a program controller 609 and a two-dimensional shift register structure 606 provides a highly customizable / configurable hardware platform for a wide range of programmable functions. For example, application software developers may be able to program core systems with a wide variety of functional capabilities as well as dimensions (eg, stencil sizes) because the individual execution paths are capable of performing a wide range of functions and readily on input image data in the vicinity to access any output field position.
Abgesehen davon, dass dieselben als Datenspeicher für Bilddaten genutzt werden, die durch die Ausführungsbahnmatrix 605 bedient werden, können die Speicher mit wahlfreiem Zugriff 607 zudem eine oder mehrere Nachschlagetabellen beibehalten. In verschiedenen Ausführungsformen können eine oder mehrere skalare Nachschlagetabellen auch innerhalb des skalaren Speichers 603 instanziiert werden.Apart from being used as data storage for image data passing through the runway matrix 605 can be served, the random access memory 607 also retain one or more lookup tables. In various embodiments, one or more scalar lookup tables may also be within the scalar memory 603 to be instantiated.
Ein skalarer Suchvorgang beinhaltet das Übermitteln desselben Datenwerts aus der gleichen Nachschlagtabelle von demselben Index an sämtliche Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605. In verschiedenen Ausführungsformen wird das oben beschriebene VLIW-Befehlsformat erweitert, um auch einen skalaren Maschinenbefehl einzuschließen, der eine vom Skalarprozessor ausgeführte Nachschlageoperation in eine skalare Nachschlagetabelle leitet. Der für die Verwendung mit dem Maschinenbefehl angegebene Index kann ein unmittelbarer Operand sein oder von einem anderen Datenspeicherort abgerufen werden. Unabhängig davon umfasst in einer Ausführungsform ein Suchvorgang in einer skalaren Nachschlagetabelle innerhalb des skalaren Speichers im Wesentlichen das Senden des gleichen Datenwertes an alle Ausführungsbahnen innerhalb der Ausführungsbahnmatrix 605 während a des gleichen Taktzyklus.A scalar search involves transmitting the same data value from the same lookup table from the same index to all execution lanes within the execution lane matrix 605 , In various embodiments, the VLIW instruction format described above is extended to also include a scalar machine instruction that directs a lookup operation performed by the scalar processor into a scalar lookup table. The index specified for use with the machine command can be an immediate operand or retrieved from another data location. Regardless, in one embodiment, a search in a scalar look-up table within the scalar memory essentially involves sending the same data value to all execution lanes within the execution lane array 605 during a of the same clock cycle.
3.0 Zeilenpuffereinheit-Ausführungsformen3.0 Line Buffer Unit Embodiments
a. Zeilenpuffereinheit-Übersichta. Line buffer unit index
Aus der obigen Beschreibung in Abschnitt 1.0 wird entnommen, dass in verschiedenen Ausführungsformen der für die Hardwareplattform geschriebene Programmcode unter Verwendung eines einzigartigen virtuellen Codes geschrieben wird, der einen Befehlssatz mit Lade- und Speicherbefehlen beinhaltet, deren Befehlsformat die Eingabe- und Ausgabefeldpositionen z. B. als X-, Y-Koordinaten kennzeichnet. In verschiedenen Implementierungen können die X-, Y-Koordinateninformationen tatsächlich in die Hardwareplattform programmiert werden und von verschiedenen ihrer Komponenten erkannt/verstanden werden. Dies unterscheidet sich beispielsweise von der Übersetzung der X-, Y-Koordination (z. B. innerhalb des Compilers) in unterschiedliche Informationen. Im Fall der zweidimensionalen Schieberegisterstruktur innerhalb des Schablonenprozessors werden die X-, Y-Koordinateninformationen beispielsweise in Registerverschiebungsbewegungen übersetzt. Im Gegensatz dazu können andere Teile der Hardwareplattform die ursprünglich auf der höheren virtuellen Codeebene ausgedrückten X-, Y-Koordinateninformationen empfangen und verstehen.From the above description in section 1.0, it will be appreciated that in various embodiments, the program code written for the hardware platform is written using a unique virtual code that includes an instruction set with load and store instructions whose instruction format includes the input and output field positions, e.g. B. as X, Y coordinates. In various implementations, the X, Y coordinate information may actually be programmed into the hardware platform and recognized / understood by various of its components. This differs, for example, from the translation of the X, Y coordination (eg within the compiler) into different information. For example, in the case of the two-dimensional shift register structure within the template processor, the X, Y coordinate information is translated into register shift motions. In contrast, other parts of the hardware platform may receive and understand the X, Y coordinate information originally expressed at the higher virtual code level.
Wie in 7 dargestellt und in Abschnitt 1.0 beschrieben, drückt ein Programmcode-Entwickler Datenpositionen als X-, Y-Koordinaten mit dem speziellen Befehlsformat auf der virtuellen Codeebene 710 aus. Während der Kompilierungsphase wird der virtuelle Code in Programmcode übersetzt, der genau genommen durch die Hardware (den Objektcode) und entsprechende Konfigurationsinformationen, die in den Hardwarekonfigurationsbereich (z. B. Registerregister) geladen werden, verarbeitet wird. Wie in 7 dargestellt, wird in einer Ausführungsform der Objektcode für ein bestimmtes Kernsystem in den Programmbereich des Skalarprozessors 705 des Schablonenprozessors geladen.As in 7 and described in Section 1.0, a program code developer pushes data locations as X, Y coordinates with the special instruction format at the virtual code level 710 out. During the compilation phase, the virtual code is translated into program code which, strictly speaking, is processed by the hardware (the object code) and corresponding configuration information loaded into the hardware configuration area (eg register register). As in 7 In one embodiment, the object code for a particular core system is shown in the program area of the scalar processor 705 of the template processor.
Im Rahmen des Konfigurationsprozesses lädt die auf dem Skalarprozessor 705 ausgeführte Konfigurationssoftware die entsprechenden Konfigurationsinformationen 711, 712 sowohl in die an den Schablonenprozessor 702 gekoppelte Datenblattgeneratoreinheit 703, als auch an die Zeilenpuffereinheit 701, die neue Datenblätter für den Schablonenprozessor 702 erzeugt, um an den von dem Schablonenprozessor 702 erzeugten Datenblättern zu arbeiten oder diese zu empfangen. Im Allgemeinen können die hierin genannten Datenblätter in Form von X-, Y-Koordinaten eines Gesamtbildes betrachtet werden. Das heißt, sobald ein Bild oder Frame (z. B. in Form einer Anzahl von Bildpunkten pro Zeile, Anzahl von Zeilen, Anzahl von Bildpunkten pro Spalte und Anzahl von Spalten) definiert ist, kann auf jeden Abschnitt bzw. jede Position des Bildes weiterhin mit X, Y-Koordinaten verwiesen werden.As part of the configuration process loads the on the scalar processor 705 The configuration software that was executed contains the corresponding configuration information 711 . 712 both in the template processor 702 coupled data sheet generator unit 703 , as well as to the line buffer unit 701 , the new data sheets for the template processor 702 generated to that of the template processor 702 to work or receive generated datasheets. In general, the data sheets referred to herein may be considered in the form of X, Y coordinates of an overall image. That is, once an image or frame (e.g., in the form of a number of pixels per line, number of lines, number of pixels per column, and number of columns) is defined, each section or position of the image may continue be referenced with X, Y coordinates.
Dementsprechend sind in verschiedenen Ausführungsformen entweder die Datenblattgeneratoreinheit 703 oder die Zeilenpuffereinheit 701 mit Informationen 711, 712 in ihrem jeweiligen Konfigurationsbereich 706, 707 konfiguriert, die eine Informationsplattform bilden, von der aus bestimmte Positionen und/oder Bereiche (z. B. Zeilengruppen, Datenblätter) eines Bildes oder Frames mit X-, Y-Koordinaten identifiziert werden. In verschiedenen Implementierungen/Anwendungen können die X, Y-Koordinaten dieselben X, Y-Koordinaten sein, die auf der Ebene des virtuellen Codes ausgedrückt werden.Accordingly, in various embodiments, either the data sheet generator unit 703 or the line buffer unit 701 with information 711 . 712 in their respective configuration area 706 . 707 which form an information platform from which certain positions and / or areas (eg, stanzas, datasheets) of an image or frame with X, Y coordinates are identified. In various implementations / applications, the X, Y coordinates may be the same X, Y coordinates that are expressed at the virtual code level.
Zu Beispielen für derartige Informationen zählen z. B. die Anzahl aktiver Zeilengruppen in der Zeilenpuffereinheit, die Bildgröße für jede Zeilengruppe (z. B. als eine Menge von vier X-, Y-Koordinaten (eine für jede Ecke) oder ein Paar von Zeilenpaaren X-, Y-Koordinaten (eine für eine untere näher gelegene Ecke und eine für eine obere weiter entfernte Ecke)), die absolute Bildbreite und Bildhöhe, die Schablonengröße (als X-, Y-Werte ausgedrückt, die die Größe einer einzelnen Schablone und/oder des Bereichs der überlappenden Schablonen des Schablonenprozessors definieren), die Datenblatt- und/oder Zeilengruppengröße (z. B. genauso angegeben wie eine Bildgröße, jedoch mit kleineren Abmessungen) usw. darüber hinaus kann zumindest die Zeilenpuffereinheit 701 mit zusätzlichen Konfigurationsinformationen, wie beispielsweise der Anzahl der Erzeugerkernsystem-Schreibvorgänge und der Anzahl der Abnehmerkernsysteme, die die von der Zeilenpuffereinheit 701 verwalteten Zeilengruppen einlesen, programmiert werden. Die Anzahl der Kanäle und/oder die den Bilddaten zugeordneten Abmessungen sind in der Regel auch als Konfigurationsinformationen enthalten.Examples of such information include e.g. For example, the number of active stanzas in the line buffer unit, the image size for each stanza (eg, as a set of four X, Y coordinates (one for each corner) or a pair of line pairs, X, Y coordinates (a for a lower near corner and an upper farthest corner)), the absolute image width and height, the stencil size (expressed as X, Y values, which is the size of a single stencil and / or the overlapping template area of the stencil) In addition, at least the row buffer unit may define the datasheet and / or stanza size (eg, given the same as an image size, but with smaller dimensions), and so forth 701 with additional configuration information, such as the number of host core system writes and the number of customer core systems, that are from the line buffer unit 701 read in managed stanzas, be programmed. The number of channels and / or the dimensions associated with the image data are usually also included as configuration information.
8 zeigt die Verwendung von X-, Y-Koordinaten, um, nur um ein Beispiel anzuführen, Liniengruppen innerhalb eines Bildes zu definieren. Hierbei sind die N-Zeilengruppen 801_1, 801_2, ... 801_N innerhalb eines Bildes 801 erkennbar. Wie aus 8 ersichtlich, kann jede Zeilengruppe leicht durch Bezugnahme auf X-, Y-Koordinaten innerhalb des Bildes definiert werden, die z. B. einen oder mehrere Eckpunkte einer Zeilengruppe definieren. Somit kann in verschiedenen Ausführungsformen der Name einer Zeilengruppe oder eine andere Datenstruktur, die verwendet wird, um eine bestimmte Zeilengruppe zu definieren, X-, Y-Koordinatenpositionen beinhalten, die mit der Zeilengruppe verbunden sind, um speziell diese zu identifizieren. 8th shows the use of X, Y coordinates to, just to give an example, define line groups within an image. Here are the N-stanzas 801_1 . 801_2 , ... 801_N within a picture 801 recognizable. How out 8th As can be seen, each row group can be easily defined by referring to X, Y coordinates within the image, e.g. B. define one or more vertices of a stanza. Thus, in various embodiments, the name of a stanza or other data structure, the is used to define a particular stanza, X, Y coordinate positions associated with the stanza to specifically identify them.
Unter Bezugnahme auf 7 ist zu beachten, dass 7 zeigt, dass ein Datenblattgenerator 703 während der Laufzeit beispielsweise durch X-, Y-Koordinateninformationen, die den gewünschten Datenbereich definieren, von der Zeilenpuffereinheit 701 eine „nächste” Zeilengruppe (oder einen Teil einer Zeilengruppe) anfordern kann. 8 zeigt nominelle Zeilengruppen „mit voller Breite”, die nur aus vollständigen Reihen von Bilddaten bestehen. In einer alternativen als „virtuell schlank” bezeichneten Konfiguration, die weiter unten näher beschrieben wird, leitet die Zeilenpuffereinheit 701 anfänglich nur einen ersten oberen Abschnitt einer Zeilengruppe als Reihen mit voller Breite von Bilddaten durch. Die nachfolgenden unteren Reihen der Zeilengruppe werden dann vom Datenblattgenerator in zusammenhängenden Blöcken, die kleiner als eine Reihe mit voller Breite sind, speziell und gesondert angefordert. Daher werden Mehrfachanforderungen durch den Datenblattgenerator durchgeführt, um die vollständige Liniengruppe zu erhalten. Hier kann jede derartige Anforderung einen nächstniedrigeren Abschnitt durch X-, Y-Koordinaten definieren, die dem nächsten unteren Abschnitt zuzuordnen sind. Die gestrichelte Linie 721 veranschaulicht z. B.: Virtueller Programmcode, der Daten ausdrückt, die als X-, Y-Koordinatenwerte innerhalb eines Bildes 710 bedient werden sollen. Die gestrichelte Linie 722 veranschaulicht z. B., dass während der Laufzeit der Datenblattgenerator „nächste” Zeilengruppen anfordert durch Angabe ihrer X-, Y-Koordinaten 713. Die Ellipse 723 sagt z. B. aus: Vor der Laufzeit wird die Datenblattgeneratoreinheit mit z. B. der Bildgröße, der Zeilengruppengröße und/oder der Schablonengröße in XY-Koordinaten usw. 711 programmiert. Der Pfeil 724 sagt z. B. aus: Vor der Laufzeit wird die Zeilenpuffereinheit mit z. B. Informationen über eine der folgenden Funktionen programmiert: Bildgröße, Schablonengröße in XY-Koordinaten, Zeilengruppengröße in XY-Koordinaten 712 usw.With reference to 7 it should be noted that 7 shows that a datasheet generator 703 at runtime, for example, by X, Y coordinate information defining the desired data area from the row buffer unit 701 request a "next" stanza (or part of a stanza). 8th shows full-width nominal stanzas consisting of only complete sets of image data. In an alternative configuration called "virtually lean," described in more detail below, the row buffer unit forwards 701 initially only a first top portion of a row group as rows of full width image data. The subsequent lower rows of the stanza are then specifically and separately requested by the spreadsheet generator in contiguous blocks smaller than a full width row. Therefore, multiple requests are made by the datasheet generator to obtain the complete line group. Here, each such request may define a next lower portion by X, Y coordinates to be assigned to the next lower portion. The dashed line 721 illustrates z. B: Virtual program code that expresses data as X, Y coordinate values within an image 710 should be served. The dashed line 722 illustrates z. For example, at runtime, the datasheet generator requests "next" stanzas by specifying their X, Y coordinates 713 , The ellipse 723 says z. Example: Before the runtime, the data sheet generator unit with z. As the image size, the stanza size and / or the stencil size in XY coordinates, etc. 711 programmed. The arrow 724 says z. B. from: Before the runtime, the line buffer unit with z. For example, information about one of the following functions is programmed: image size, template size in XY coordinates, stanza size in XY coordinates 712 etc.
9a bis 9c zeigen verschiedene Merkmale einer Zeilenpuffereinheit-Ausführungsform 900. Wie in 9a dargestellt, beinhaltet eine Zeilenpuffereinheit einen Speicher 902, in dem Zeilengruppen 903_1 bis 903_N gespeichert sind (z. B. statischer oder dynamischer Direktzugriffsspeicher (SRAM oder DRAM)). 9a zeigt die Aktivität zwischen den verschiedenen Kernsystemen, die die Zeilengruppen 903_1 bis 903_N für ein bestimmtes Bild/einen bestimmten Frame innerhalb des Speichers 902 erzeugen und abnehmen. 9a to 9c show various features of a row buffer unit embodiment 900 , As in 9a As shown, a line buffer unit includes a memory 902 in which stanzas 903_1 to 903_N stored (eg static or dynamic random access memory (SRAM or DRAM)). 9a shows the activity between the different core systems that make up the stanzas 903_1 to 903_N for a specific image / frame within the memory 902 produce and lose weight.
Wie in 9a dargestellt, sendet ein Erzeugerkernsystem K1 über getrennte Zeitinstanzen P1, P2 bis PN neue Zeilengruppen an den Speicher 902. Das Erzeugerkernsystem K1 wird auf einem Schablonenprozessor ausgeführt, der neue Datenblätter erzeugt. Der Datenblattgenerator, der mit dem Schablonenprozessor gekoppelt ist, akkumuliert Datenblätter, um Zeilengruppen zu bilden, und leitet die Zeilengruppen an den Speicher 902 weiter.As in 9a 1, a producer core system K1 sends new stanzas to the memory via separate time instances P1, P2 to PN 902 , The producer core system K1 is executed on a template processor which generates new data sheets. The datasheet generator, which is coupled to the template processor, accumulates datasheets to form stanzas and routes the stanzas to memory 902 further.
Wie auch in 9a dargestellt, gibt es zwei Abnehmerkernsysteme K2, K3, die an den vom Abnehmerkernsystem K1 erzeugten Zeilengruppen 903_1 bis 903_N arbeiten. Hier empfangen die Abnehmerkernsysteme K2 und K3 die erste Zeilengruppe 903_1 zu den Zeitinstanzen C21 bzw. C31. Natürlich treten die Zeitinstanzen C21 und C31 nach der Zeitinstanz P1 auf. Andere Einschränkungen sind ggf. nicht vorhanden. Beispielsweise können C21 und/oder C31 vor oder nach einer der Zeitinstanzen P2 bis PN auftreten. Dabei fordern die jeweiligen Datenblattgeneratoren für die Kernsysteme K2 und K3 eine nächste Zeilengruppe zu einer Zeitinstanz an, die für deren jeweiliges Kernsystem geeignet ist. Wenn irgendeines der Kernsysteme K2, K3 die Zeilengruppe 903_1 vor der Zeitinstanz P1 anfordert, liegt die Anforderung im Leerlauf, bis die Zeilengruppe 903_1 tatsächlich in den Speicher 902 geschrieben ist. In vielen Implementierungen wird ein Erzeugerkernsystem auf einem anderen Schablonenprozessor betrieben als ein Abnehmerkernsystem.As well as in 9a As shown, there are two customer core systems K2, K3 attached to the stanzas generated by the customer core system K1 903_1 to 903_N work. Here, the customer core systems K2 and K3 receive the first stanza 903_1 to the time instances C21 or C31. Of course, the time instances C21 and C31 occur after the time instance P1. Other restrictions may not exist. For example, C21 and / or C31 may occur before or after any of the time instances P2 through PN. In this case, the respective data sheet generators for the core systems K2 and K3 request a next stanza at a time instance which is suitable for their respective core system. If any of the core systems K2, K3 are the stanza 903_1 before the time instance requests P1, the request is idle until the stanza 903_1 actually in the store 902 is written. In many implementations, a generator core system operates on a different template processor than a customer core system.
Denkbar ist, dass Anforderungen von einem oder beiden der Kernsysteme K2 und K3 für alle Zeilengruppen 903_1 bis 903_N vor der Zeitinstanz P1 eintreffen können. Somit können von Abnehmerkernsystemen jederzeit Zeilengruppen angefordert werden. Die Zeilengruppen werden an die Abnehmerkernsysteme weitergeleitet, während diese von denselben angefordert werden, jedoch nur so schnell, wie das Erzeugerkernsystem K1 diese erzeugen kann. In verschiedenen Ausführungsformen erfordern Abnehmerkernsysteme Sequenzgruppen in Folge und empfangen diese ebenfalls in Folge (Kernsystem K2 empfängt Zeilengruppen 902_2 bis 902_N zu Zeitinstanzen C22 bis C2N in Folge). Der Einfachheit halber wird für eine spezielle Zeilengruppe nur ein Erzeugerkernsystem dargestellt. Es ist denkbar, dass verschiedene Ausführungsformen entworfen werden können, um es verschiedenen Erzeugern zu ermöglichen, auf eine gleiche Zeilengruppe zu schreiben (z. B. dann, wenn Erzeuger nicht gewartet werden dürfen, bis alle Erzeuger in die Zeilengruppe geschrieben haben).It is conceivable that requirements of one or both of the core systems K2 and K3 for all stanzas 903_1 to 903_N before the time instance P1 can arrive. Thus, customer core systems can always request stanzas. The stanzas are forwarded to the customer core systems while they are requested by them, but only as fast as the producer core system K1 can generate them. In various embodiments, customer core systems require sequence groups in sequence and also receive them in sequence (core system K2 receives stanzas 902_2 to 902_N to time instances C22 to C2N in sequence). For the sake of simplicity, only one producer core system will be represented for a particular stanza. It is conceivable that various embodiments may be designed to allow different generators to write to a same stanza (eg, if generators are not allowed to wait until all generators have written to the stanza).
In Fällen, in denen es kein Erzeugerkernsystem gibt (weil der oder die Abnehmerkernsysteme die ersten Kernsysteme im DAG-Prozessablauf des Prozessors sind), können die Frames der Bilddaten (beispielsweise über einen direkten Speicherzugriff (DMA) oder von einer Kamera) in den Speicher 902 übertragen und in Zeilengruppen geparst werden. In Fällen, in denen es kein(e) Abnehmerkernsystem(e) gibt (weil das Erzeugerkernsystem das letzte Kernsystem im gesamten Programmablauf des Prozessors ist), können resultierende Zeilengruppen kombiniert werden, um Ausgabeframes zu bilden.In cases where there is no producer core system (because the customer core system (s) are the first core systems in the DAG process flow of the processor), the frames of the image data (for example, direct memory access (DMA) or from a camera) may be stored in memory 902 transferred and parsed into stanzas. In In cases where there is no customer core system (s) (because the host core system is the last core system in the entire program flow of the processor), resulting stanzas can be combined to form output frames.
9b zeigt eine detailliertere Ausführungsform einer gesamten Zeilenpuffereinheit 900. Zum Zwecke der Erklärung wird die Zeilenpuffereinheit 900 aus 9b mit der Aktivität aus 9a überlagert. Wie aus 9b ersichtlich, beinhaltet eine Zeilenpuffereinheit 900 einen Speicher 902, der mit der Zeilenpufferschaltkreiseinheit 901 gekoppelt ist. Die Zeilenpufferschaltkreiseinheit 901 kann beispielsweise mit einer speziell dafür vorgesehenen Logikschaltung ausgestattet sein. Innerhalb der Zeilenpufferschaltkreiseinheit 901 ist eine Zeilenpuffer-Schnittstelleneinheit 904_1 bis 904_N für jede Zeilengruppe 903_1 bis 903_N innerhalb des Speichers 902 reserviert. In verschiedenen Ausführungsformen gibt es eine feste Anzahl von Zeilenpuffer-Schnittstelleneinheiten 904_1 bis 904_N, die eine Obergrenze für die Anzahl von Zeilengruppen festlegt, die eine Zeilenpuffereinheit zu jeder Zeitinstanz verwalten kann (sind weniger als N Zeilengruppen aktiv, wird eine entsprechende kleinere Anzahl von Schnittstellen der Zeilenpuffereinheit aktiviert und zu einem beliebigen Zeitpunkt in Betrieb genommen). 9b shows a more detailed embodiment of an entire row buffer unit 900 , For the purpose of explanation, the line buffer unit 900 out 9b with the activity off 9a superimposed. How out 9b can be seen, includes a line buffer unit 900 a memory 902 connected to the line buffer circuit unit 901 is coupled. The line buffer circuit unit 901 For example, it can be equipped with a dedicated logic circuit. Within the line buffer circuit unit 901 is a line buffer interface unit 904_1 to 904_N for each stanza 903_1 to 903_N inside the store 902 reserved. In various embodiments, there are a fixed number of line buffer interface units 904_1 to 904_N that sets an upper limit on the number of stanzas a row buffer unit can manage at each instance of time (if less than N stanzas are active, a corresponding smaller number of line buffer unit interfaces will be activated and put into service at any one time).
Wie in 9b dargestellt, bearbeitet die Zeilenpuffereinheit 900 mit einer Gesamtanzahl von N Zeilenpuffer-Schnittstelleneinheiten 904 innerhalb der Zeilenpufferschaltkreiseinheit 901 eine maximale Anzahl von Zeilengruppen. Darüber hinaus kann bei einer größten zulässigen Zeilengruppengröße (bei der die Zeilengruppengröße ein konfigurierbarer Parameter ist) eine ungefähre Größe für den Speicher 902 bestimmt werden (um Hardware-Effizienz zu ermöglichen, kann natürlich ein kleinerer Speicherbedarf instanziiert werden, wobei N Zeilengruppen mit maximaler Größe nicht gleichzeitig zugelassen werden können).As in 9b represented, processes the line buffer unit 900 with a total of N line buffer interface units 904 within the line buffer circuit unit 901 a maximum number of stanzas. In addition, with a maximum allowed stanza size (where the stanza size is a configurable parameter), an approximate size for the store may be 902 (to allow for hardware efficiency, of course, a smaller amount of memory can be instantiated, whereby N maximum size stanzas can not be allowed at the same time).
Jede Zeilenpuffer-Schnittstelleneinheit 904_1 bis 904_N ist verantwortlich für die Verarbeitung der Erzeuger- und Abnehmeranforderungen für eine spezielle ihr zugewiesene Zeilengruppe. Beispielsweise verarbeitet die Zeilenpuffer-Schnittstelleneinheit 904_1 die Anfrage von dem Erzeuger K1 zu der Zeitinstanz P1, um die Zeilengruppe 903_1 zu speichern, und verarbeitet die Anforderungen von den Abnehmerkernsystemen K2 und K3 für die Zeilengruppe 903_1. In Reaktion auf den ersteren schreibt die Zeilenpuffer-Schnittstelleneinheit 904_1 die Zeilengruppe 903_1 in den Speicher 902. In Reaktion auf die letzteren führt die Zeilenpuffer-Schnittstelleneinheit 904_1 jeweilige Lesevorgänge der Zeilengruppe 903_1 aus dem Speicher 902 aus und leitet die Zeilengruppe 903_1 K3 jeweils zu den Zeitinstanzen C21 bzw. C31 an die Abnehmer K2 weiter.Each line buffer interface unit 904_1 to 904_N is responsible for processing the producer and buyer requests for a specific stanza assigned to it. For example, the line buffer interface unit processes 904_1 the request from the producer K1 to the time instance P1 to the stanza 903_1 and processes the requests from customer core systems K2 and K3 for the stanza 903_1 , In response to the former, the line buffer interface unit writes 904_1 the stanza 903_1 in the store 902 , In response to the latter, the line buffer interface unit performs 904_1 respective readings of the stanza 903_1 from the store 902 and directs the stanza 903_1 K3 in each case to the time instances C21 and C31 to the customer K2 on.
Nachdem alle Abnehmer einer Zeilengruppe ihre Kopie der Zeilengruppe weitergeleitet haben, ist die Zeilenpuffer-Schnittstelleneinheit „frei” und kann einer anderen Zeilengruppe zugeordnet werden. Wenn beispielsweise die Zeilengruppe 903_1 die erste Zeilengruppe innerhalb eines ersten Bildframes einer Folge von Frames darstellt, kann nach dem Weiterleiten der Zeilengruppe 903_1 an die Abnehmer K2 und K3 zu den Zeitinstanzen C21 und C31 die Zeilenpuffer-Schnittstelleneinheit 904_1 als nächstes zugeordnet werden, um die erste Zeilengruppe innerhalb des nächsten, zweiten Bildframes der Folge von Frames zu verarbeiten. Auf diese Weise kann die Zeilenpufferschaltkreiseinheit 901 als einen „Pool” von Zeilenpuffer-Schnittstelleneinheiten 904 betrachtet werden, wobei jeder Schnittstelleneinheit eine neue Zeilengruppe zugewiesen wird, die zu verwalten ist, nachdem ihre unmittelbar vorangehende Zeilengruppe an ihren letzten Abnehmer geliefert wurde. Somit gibt es eine Rotation von Schnittstelleneinheiten, während diese wiederholt eintreffen und aus einem „freien Pool” von Zeilenpuffer-Schnittstelleneinheiten, die ihren letzten Abnehmer bedient haben und auf ihre nächste Zeilengruppe warten, entfernt werden.After all recipients of a stanza have passed their copy of the stanza, the line buffer interface unit is "free" and can be assigned to a different stanza. For example, if the stanza 903_1 The first stanza within a first frame of a sequence of frames may be after forwarding the stanza 903_1 to the customers K2 and K3 at the time instances C21 and C31, the line buffer interface unit 904_1 next to process the first stanza within the next, second frame of the sequence of frames. In this way, the line buffer circuit unit 901 as a "pool" of line buffer interface units 904 Each interface unit is assigned a new stanza to be managed after its immediately preceding stanza has been delivered to its last customer. Thus, there is rotation of interface units as they repeatedly arrive and are removed from a "free pool" of line buffer interface units that have serviced their last customer and are waiting for their next stanza.
9c zeigt eine Ausführungsform der Rotation im Detail. Wie in 9c dargestellt, wird eine verfügbare Zeilenpuffer-Schnittstelleneinheit aus einem freien Pool von Zeilenpuffer-Schnittstelleneinheiten innerhalb der Zeilenpufferschaltkreiseinheit 910 ausgewählt. Die Zeilenpuffer-Schnittstelleneinheit wird dann mit geeigneten Konfigurationsinformationen 911 (z. B. X-, Y-Positionsdaten der neuen Zeilengruppe oder eines linearen Speicheradressenäquivalents) konfiguriert. Hier in 9b ist zu beachten, dass jede Zeilenpuffer-Schnittstelleneinheit einen Konfigurationsregisterbereich 905 aufweisen kann, in dem die besagten Konfigurationsinformationen aufbewahrt werden. 9c shows an embodiment of the rotation in detail. As in 9c 1, an available line buffer interface unit becomes a free pool of line buffer interface units within the line buffer circuit unit 910 selected. The line buffer interface unit is then provided with appropriate configuration information 911 (for example, X, Y position data of the new stanza, or a Linear Memory Address Equivalent). Here in 9b Note that each line buffer interface unit has a configuration register area 905 in which the said configuration information is kept.
Die Zeilenpuffer-Schnittstelleneinheit fährt dann damit fort, Erzeuger- und Abnehmeranforderungen für ihre neu zugewiesene Zeilengruppe 912 zu verarbeiten. Nachdem der letzte Erzeuger in die Zeilengruppe geschrieben hat (in verschiedenen Ausführungsformen gibt es nur einen Erzeuger pro Zeilengruppe) und nachdem der letzte Abnehmer mit der Version der Zeilengruppe versehen wurde, die von ihrem bzw. ihren Erzeuger(n) geschrieben wurde, wird die Zeilenpuffer-Schnittstelleneinheit in den freien Pool zurückgeführt, und der Prozess 910 für eine nächste Zeilengruppe wiederholt. Die Steuerlogikschaltung innerhalb der Zeilenpufferschaltkreiseinheit 901, die den Steuerablauf von 9c überwacht, ist der Einfachheit halber in 9b nicht dargestellt.The line buffer interface unit then proceeds to generate and receive requests for its newly assigned stanza 912 to process. After the last creator has written to the stanza (in various embodiments, there is only one creator per stanza) and after the last taker has been provided with the version of the stanza written by his or her creator (s), the line buffer becomes Interface unit returned to the free pool, and the process 910 repeated for a next stanza. The control logic circuit within the line buffer circuit unit 901 that control the flow of 9c is monitored, for simplicity's sake 9b not shown.
b. programmierbare Registerbereichsausführungen b. programmable register area designs
In Bezug auf die aktualisierte Konfigurationsinformationen 911, die im Rahmen der Zuweisung einer nächsten Zeilengruppe an einer Zeilenpuffer-Schnittstelleneinheit vorgesehen ist, verarbeitet die Zeilenpuffereinheit 900 selbst im Normalfall eine statische Anordnung von z. B. nur einem festen Erzeuger, der eine feste Gruppe von einem oder mehreren Abnehmern speist. In diesem Fall sind die primären Konfigurationsinformationen (z. B. die Zeilengruppengröße, die Anzahl der Abnehmer usw.) ebenfalls geeignet, statisch zu sein und werden sich von Zeilengruppe zu Zeilengruppe nicht ändern. Stattdessen identifizieren die an eine Zeilenpuffer-Schnittstelleneinheit gelieferten neuen Konfigurationsinformationen hauptsächlich die neue Zeilengruppe (z. B. die Position der Zeilengruppe im Speicher usw.). Kompliziertere potentielle Anordnungen/Entwürfe sind jedoch möglich. Einige davon werden nachfolgend näher beschrieben.Regarding the updated configuration information 911 that is provided in the context of assigning a next stanza to a line buffer interface unit, processes the line buffer unit 900 even in the normal case, a static arrangement of z. For example, only one fixed producer who feeds a fixed group of one or more customers. In this case, the primary configuration information (eg, the stanza size, the number of customers, etc.) is also suitable for being static and will not change from stanza to stanza. Instead, the new configuration information provided to a line buffer interface unit mainly identifies the new stanza (e.g., the location of the stanza in memory, etc.). However, more complicated potential arrangements / designs are possible. Some of these are described in more detail below.
9d zeigt eine Ausführungsform des Inhalts des Registerbereichs einer Zeilenpuffer-Schnittstelleneinheit (z. B. des Inhalts des Registerbereichs 905_1 aus 9b). Eine Beschreibung einiger der Registerfelder folgt unmittelbar. 9d Fig. 11 shows an embodiment of the contents of the register area of a line buffer interface unit (eg, the contents of the register area 905_1 out 9b ). A description of some of the register fields follows immediately.
Das LB_Enable-Feld 921 aktiviert im Wesentlichen eine Zeilenpuffer-Schnittstelleneinheit und wird im Rahmen des Prozesses der Entnahme der Zeilenpuffer-Schnittstelleneinheit aus dem freien Pool „eingestellt”. Das Num_Channels-Feld 922 definiert die Anzahl der Kanäle innerhalb der Bilddaten der Zeilengruppe. In einer Ausführungsform kann das Num_Channels-Feld 922 verwendet werden, um die Gesamtmenge an Daten pro Zeilengruppe zu bestimmen. Beispielsweise beinhaltet ein Videostrom häufig eine Framesequenz aus roten (R) Bildpunkten, einer Framesequenz aus blauen (B) Bildpunkten und einer Framesequenz aus grünen (G) Bildpunkten. Somit gibt es für jede Zeilengruppe tatsächlich drei Zeilengruppen von Informationen (R, G und B).The LB_Enable field 921 essentially activates a line buffer interface unit and is "set" from the free pool as part of the process of extracting the line buffer interface unit. The Num_Channels field 922 defines the number of channels within the image data of the stanza. In one embodiment, the Num_Channels field 922 used to determine the total amount of data per stanza. For example, a video stream often includes a frame sequence of red (R) pixels, a frame sequence of blue (B) pixels, and a frame sequence of green (G) pixels. Thus, for each stanza, there are actually three stanzas of information (R, G and B).
Das Num_Consumers-Feld 923 beschreibt die Anzahl der Abnehmer, von denen die Zeilengruppe angefordert wird. In einer Ausführungsform wird die Zeilenpuffer-Schnittstelleneinheit in den freien Pool eingegeben, nachdem eine Zeilengruppeninstanz, die dem Wert in dem Num_Consumers-Feld 923 entspricht, einige Male geliefert wurde.The Num_Consumers field 923 describes the number of customers from which the stanza is requested. In one embodiment, the line buffer interface unit is entered into the free pool after a stanza instance equal to the value in the num_consumers field 923 corresponds, was delivered several times.
Das Row_Width-Feld 924 definiert die Breite einer Gruppe mit voller Zeile (z. B. in einer Anzahl von Bildpunkten). Zu beachten ist, dass der Wert „Row_Width 924” als X-Koordinatenwert ausgedrückt werden kann, der vom Compiler bereitgestellt wird. Das FB_Rows-Feld 926 definiert die Höhe einer Gruppe mit voller Zeile (z. B. in einer Anzahl von Bildpunkten). Zu beachten ist, dass das FB_Rows-Feld 924 als ein Y-Koordinatenwert ausgedrückt werden kann, der von dem Compiler bereitgestellt wird.The Row_Width field 924 defines the width of a group with full line (eg in a number of pixels). Note that the value Row_Width 924 Can be expressed as an X coordinate value provided by the compiler. The FB_Rows field 926 defines the height of a group with full line (eg in a number of pixels). Note that the FB_Rows field 924 can be expressed as a Y coordinate value provided by the compiler.
Das Feld FB_Base_Address 930 definiert die Position der Zeilengruppe im Speicher der Zeilenpuffereinheit. In einem als „vollen” Zeilengruppenmodus bezeichneten ersten Betriebsmodus wird im Speicher auf eine Zeilengruppe voller Größe zugegriffen (Zeilengruppen werden von den Erzeugern empfangen und mit der gesamten Menge ihrer jeweiligen Daten an die Abnehmer geliefert). Im vollen Zeilengruppenmodus können das Num_Channels-Feld 922, das Row_Width-Feld 924 und das FB_Rows-Feld 926 mit dem FB_Address-Feld 930 verwendet werden, um den Bereich von Adressen zu bestimmen, die auf den Speicher angewendet werden sollen, um auf eine volle Zeilengruppe vollständig zugreifen zu können. Zusätzlich können dieselben Parameter verwendet werden, um eine Anforderung von einem Datenblattgenerator zu „übersetzen”, der die Zeilengruppe in X-, Y-Koordinaten in eine lineare Speicheradresse angefordert hat.The field FB_Base_Address 930 defines the position of the stanza in the memory of the row buffer unit. In a first mode of operation, termed a "full" stanza mode, a full size stanza is accessed in memory (stanzas are received by the generators and delivered to the customers with the entire amount of their respective data). In full stanza mode, the Num_Channels field can be used 922 , the Row_Width field 924 and the FB_Rows field 926 with the FB_Address field 930 used to determine the range of addresses to be applied to memory in order to fully access a full stanza. In addition, the same parameters can be used to "translate" a request from a datasheet generator that has requested the X, Y coordinate stanza into a linear memory address.
Die VB_Enable-, VB_Rows-, VB_Cols-, Num_Reuse_Rows- und VB_Base_Address-Felder 925, 927, 928, 931 werden in einem anderen Betriebsmodus verwendet, der als der „virtuell schlanke” Zeilengruppenmodus bezeichnet und weiter unten näher beschrieben wird.The VB_Enable, VB_Rows, VB_Cols, Num_Reuse_Rows, and VB_Base_Address fields 925 . 927 . 928 . 931 are used in another mode of operation, referred to as the "lean virtual" stanza mode, and described in more detail below.
Während 9d den Konfigurationsregisterbereich 905 für eine Einzelzeilenpuffer-Schnittstelleneinheit darstellte, zeigt 9e im Gegensatz dazu eine Ausführungsform des Inhalts des globalen Konfigurationsregisterbereichs 907 für die gesamte Zeilenpufferschaltkreiseinheit 901. Während der Puffer-Schnittstelleneinheit-Registerbereich pro Zeile von 9d auf eine bestimmte Zeilengruppe fokussiert ist, ist der globale Registerraum 907 aus 9e im Gegensatz dazu auf das Verständnis des Parsens verschiedener Zeilengruppen aus dem gleichen Bild, sowie anderer Informationen fokussiert, die für die Erzeuger-/Abnehmer-Kombination spezifisch und mit der Verarbeitung des Bildes verbunden sind.While 9d the configuration register area 905 for a single line buffer interface unit 9e in contrast, an embodiment of the contents of the global configuration register area 907 for the entire line buffer circuit unit 901 , During the buffer interface unit register area per line of 9d focused on a particular stanza, is the global register space 907 out 9e in contrast, focused on understanding the parsing of different stanzas from the same image, as well as other information specific to the producer / purchaser combination and associated with the processing of the image.
Wie in 9e dargestellt, beinhaltet eine Ausführungsform des globalen Registerbereichs die Anzahl der Kanäle 932 und die Anzahl der Abnehmer 933 für ein bestimmtes Bild. Der Einfachheit halber wird in dem Registerbereich von 9e nur ein Bild mit einer Gruppe von Erzeugern und Abnehmern (z. B. nur einen einzigen Videostream und einen einzigen Punkt in einem DAG) betrachtet. Denkbar ist, dass mehrere Instanzen des Registerbereichs von 9e zugewiesen werden, um der Zeilenpufferschaltkreiseinheit ein effektives Multitasking zu ermöglichen.As in 9e 1, one embodiment of the global register area includes the number of channels 932 and the number of customers 933 for a specific picture. For the sake of simplicity, in the register area of 9e looking at just one picture with a group of producers and customers (eg just a single video stream and a single point in a DAG). It is conceivable that multiple instances of the register area of 9e to allow the line buffer circuit unit to effectively multitask.
Eine erste Form von Multitasking befindet sich innerhalb einer DAG- oder Software-Pipeline, die auf dem Grafikprozessor implementiert ist. Hier könnte die gleiche Zeilenpuffereinheit dafür konfiguriert sein, die Zeilengruppierung für zwei verschiedene Knoten innerhalb des DAG oder für zwei verschiedene Phasen der Pipeline zu behandeln (das heißt, eine einzelne Zeilenpuffereinheit könnte mehr als einen Schablonenprozessor unterstützen). Die verschiedenen Knoten/Phasen könnten leicht unterschiedliche Anzahlen von Abnehmern haben, in vielen Fällen sind jedoch die gleichen Bild- und Schablonengrößencharakteristiken wahrscheinlich. Eine zweite Form von Multitasking läuft über mehrere verschiedene DAGs und/oder mehrere unterschiedliche Pipelines, die auf der gleichen Grafikprozessor-Hardware implementiert sind. Beispielsweise könnte ein Grafikprozessor mit vier Schablonenprozessoren gleichzeitig zwei völlig unterschiedliche zweistufige Pipelines ausführen, die jeweils völlig unterschiedliche Bildgrößen mit völlig unterschiedlichen Schablonenabmessungen verarbeiten. A first form of multitasking resides within a DAG or software pipeline implemented on the graphics processor. Here, the same row buffer unit could be configured to handle the row grouping for two different nodes within the DAG or for two different phases of the pipeline (that is, a single row buffer unit could support more than one template processor). The various nodes / phases could easily have different numbers of customers, but in many cases the same image and template size characteristics are likely. A second form of multitasking is over several different DAGs and / or several different pipelines implemented on the same graphics processor hardware. For example, a graphics processor with four template processors could simultaneously execute two completely different two-stage pipelines, each processing completely different image sizes with completely different template dimensions.
Unter erneuter Bezugnahme auf die spezielle Ausführungsform von 9e ist zu beachten, dass ein bestimmter Knoten in einem DAG oder zwischen Pipeline-Phasen durch die Anzahl von Kanälen im Bild, die Bildgröße, die Abmessungen der anwendbaren Schablone und die Anzahl der Abnehmer der Zeilengruppen umfassend charakterisiert werden kann (9e geht wiederum von einen Erzeuger pro Zeilengruppe aus, es können jedoch mehr als ein Erzeuger in eine einzige Zeilengruppe schreiben, wobei in diesem Fall der globale Registerbereich aus 9e auch ein Feld für die Anzahl der Erzeuger beinhalten würde). Die Felder Num_Channels und Num_Consumers 932, 933 sind im Wesentlichen die gleichen wie die entsprechenden Felder 922, 923 aus 9c.Referring again to the specific embodiment of FIG 9e It should be noted that a particular node in a DAG or between pipeline phases may be characterized by the number of channels in the image, the image size, the dimensions of the applicable template and the number of users of the stanzas ( 9e again assumes one producer per stanza, but more than one generator can write to a single stanza, in which case the global register area is off 9e would also include a field for the number of producers). The Num_Channels and Num_Consumers fields 932 . 933 are essentially the same as the corresponding fields 922 . 923 out 9c ,
Die Bildfelder 934, 935 für Image_Size und Stencil_Dimension beschreiben im Wesentlichen die Abmessungen des zu bearbeitenden Bildes und die Abmessungen der Schablone, die auf den Zeilengruppen arbeiten, die aus dem Bild geschnitzt werden sollen. Zu beachten ist, dass beide Felder 934, 935 in Form von X-, Y-Koordinatenwerten ausgedrückt und vom Compiler bereitgestellt werden können. Darüber hinaus verwendet in einer Ausführungsform die Steuerlogikschaltung innerhalb der Zeilenpufferschaltkreiseinheit (in 9b nicht dargestellt) die Image_Size- und Stencil_Dimension-Felder 934, 935, um die Row_Width- 924, FR_Rows- 926 und FR_Base_Address-Werte 930 zu bestimmen, die in einen Registerbereich einer Zeilenpuffer-Schnittstelle geladen werden, wenn die Zeilenpuffer-Schnittstelleneinheit zugeordnet ist, um Zeilengruppen von der Erzeuger-/Abnehmergruppe zu verarbeiten, auf die sich die globalen Informationen beziehen. In einer alternativen oder weiteren Ausführungsform wird die Bildgröße als zwei getrennte Werte, image_width und image_height ausgedrückt, die einen eigenen separat adressierbaren Registerbereich haben können. Ebenso kann die Schablonengröße als zwei getrennte Werte, stencil_width und stencil_height ausgedrückt werden, die einen eigenen separat adressierbaren Registerbereich haben können.The picture fields 934 . 935 for Image_Size and Stencil_Dimension essentially describe the dimensions of the image to be edited and the dimensions of the stencil that work on the stanzas to be carved out of the image. It should be noted that both fields 934 . 935 in the form of X, Y coordinate values and can be provided by the compiler. Moreover, in one embodiment, the control logic circuitry within the line buffer circuit unit (in FIG 9b not shown) the Image_Size and Stencil_Dimension fields 934 . 935 to retrieve the Row_Width 924 , FR_Rows- 926 and FR_Base_Address values 930 which are loaded into a register area of a line buffer interface when the line buffer interface unit is allocated to process stanzas from the producer / customer group to which the global information relates. In an alternative or further embodiment, the image size is expressed as two separate values, image_width and image_height, which may have their own separately addressable register area. Similarly, the template size may be expressed as two separate values, stencil_width and stencil_height, which may have their own separately addressable register area.
Row_Width 924 ist direkt aus den Informationen der Image_Size 934 erhältlich. Wenn beispielsweise Image_Size als das X-, Y-Koordinatenpaar am entferntesten Bildpunkt vom Bildursprung (obere rechte Ecke, wenn sich der Ursprung an der unteren linken Ecke befindet) ausgedrückt wird, kann Row_Width als der X-Koordinatenwert bestimmt werden.Row_Width 924 is directly from the information of Image_Size 934 available. For example, if Image_Size is expressed as the X, Y coordinate pair at the farthest pixel from the image origin (upper right corner when the origin is at the lower left corner), Row_Width may be determined as the X coordinate value.
Die Felder FB_Rows und FB_Base_Address 926, 930 können aus den Image_Size- und Stencil_Dimension-Feldern 934, 935 ermittelt werden. Hier kann insbesondere die Höhe jeder Zeilengruppe (FB_Rows 926) aus der Höhe des Bildes (Y-Koordinatenwert von Image_Size 934) und der Schablonenhöhe (Y-Koordinatenwert der Stencil_Dimension 935) berechnet werden. Sobald die Höhe der Zeilengruppen bekannt ist, kann auch die Anzahl der zu parsenden Zeilengruppen aus dem Bild und die Startlinearadresse für jede der besagten Zeilengruppen im Speicher (FB_Base_Adresse 930) bestimmt werden.The fields FB_Rows and FB_Base_Address 926 . 930 can from the Image_Size and Stencil_Dimension fields 934 . 935 be determined. In particular, the height of each stanza (FB_Rows 926 ) from the height of the image (Y coordinate value of Image_Size 934 ) and the template height (Y coordinate value of the Stencil_Dimension 935 ) be calculated. Once the height of the stanzas is known, the number of stanzas to be parsed from the image and the starting linear address for each of the stanzas in memory (FB_Base_Adresse 930 ).
Wenn also in einer Ausführungsform eine Zeilenpuffereinheit damit beauftragt ist, eine Zeilengruppe für eine bestimmte Erzeuger-/Abnehmer-Kombination zu verarbeiten, deren globaler Registerbereich durch die Registerfelder von 9e gekennzeichnet ist, werden die oben beschriebenen Bestimmungen gleichzeitig berechnet und die jeweiligen FB_Width- 924, FB_Rows- 926, Base_Address-Werte 934 zusammen mit den direkt kopierten Num_Channels 922 und Num_Consumers 923 in den spezifischen Registerbereich der Zeilenpuffer-Schnittstelleneinheit geladen. Logikschaltungen und Datenpfade können daher zwischen dem globalen Registerbereich und jeder Instanz des Registerbereichs der Zeilenpuffer-Schnittstelleneinheit vorhanden sein, um die besagten Bestimmungen und Datenübertragungen auszuführen.Thus, in one embodiment, when a line buffer unit is tasked with processing a stanza for a particular producer / user combination, its global register area is passed through the register fields of 9e marked, the provisions described above are calculated simultaneously and the respective FB_Width 924 , FB_Rows- 926 , Base_Address values 934 together with the directly copied Num_Channels 922 and Num_Consumers 923 loaded in the specific register area of the line buffer interface unit. Logic circuits and data paths may therefore exist between the global register area and each instance of the register area of the line buffer interface unit to carry out said determinations and data transfers.
In einer alternativen Ausführungsform führt der Compiler die jeweiligen Berechnungen durch, wodurch ein Großteil, wenn nicht gar der gesamte globale Registerbereich beseitigt wird. Hier kann beispielsweise der Compiler für jede Zeilengruppe den Base_Address-Wert ermitteln und die Werte in eine Nachschlagetabelle innerhalb der Zeilenpufferschaltkreiseinheit einladen. Die Werte werden aus der Nachschlagetabelle abgerufen und, sobald die entsprechenden Zeilengruppen konfiguriert sind, in einen Registerbereich der Zeilenpuffer-Schnittstelleneinheit geladen. Es können auch verschiedene Kombinationen zwischen diesen beiden Extremen (Hardware-improvisiert und statisch von einem Compiler ermittelt) implementiert werden.In an alternative embodiment, the compiler performs the respective computations, thereby eliminating much, if not all, of the global register area. Here, for example, the compiler may determine the base_address value for each stanza and load the values into a lookup table within the line buffer circuit unit. The values are retrieved from the lookup table and, once the corresponding stanzas are configured, loaded into a register area of the line buffer interface unit. There are also different combinations between these two extremes ( Hardware-improvised and statically determined by a compiler).
Obwohl die obigen Ausführungsformen das Aufbewahren der Konfigurationsinformationen in der Registerschaltung (dem „Registerbereich”) hervorgehoben haben, können in anderen oder kombinierten Ausführungsformen Konfigurationsinformationen im Speicher (wie z. B. einem Pufferspeicher) oder in anderen Speichern oder Informationsaufbewahrungsschaltkreis aufbewahrt werden.Although the above embodiments have highlighted storing the configuration information in the register circuit (the "register area"), in other or combined embodiments, configuration information may be stored in memory (such as a buffer memory) or other memory or information storage circuit.
c. Vollzeilen-Gruppen-Modus vs. virtuell schlanker Modusc. Full-line group mode vs. virtually lean mode
Die obigen Erklärungen sind weitgehend auf den Modus „Vollzeilengruppe” gerichtet, bei dem Zeilengruppen zwischen den Datenblattgeneratoren und der Zeilenpuffereinheit als vollständige, ganze Zeilengruppen bezeichnet und übermittelt werden. In einem anderen als „virtuell schlank” bezeichneten Modus werden Zeilengruppen zwischen den Datenblattgeneratoren als oberer Abschnitt mit voller Breite und unterer Abschnitt, der in getrennten, diskreten Segmenten vervollständigt wird, bezeichnet und übermittelt.The above explanations are largely directed to the "full-line group" mode in which stanzas between the datasheet generators and the row buffer unit are referred to as complete, whole stanzas and transmitted. In another mode, called "virtually lean", stanzas between the sheet generators are referred to as the upper full-width portion and lower portion completed in separate, discrete segments.
10a und 10b zeigen eine Darstellung einer exemplarischen, virtuell schlanken Modus-Sequenz. Wie in 10a dargestellt, ist eine Zeilengruppe anfänglich als ein oberer Abschnitt 1003 von Reihen mit voller Breite und ein erster unterer Abschnitt 1004_1 mit nur einem ersten, kürzeren Breitensegment ausgebildet. Die anfängliche Bildung einer Zeilengruppe kann durch einen Erzeuger-Datenblattgenerator an eine Zeilenpuffereinheit oder durch eine Zeilenpuffereinheit an einen Abnehmer-Datenblattgenerator geliefert werden. 10a and 10b show a representation of an exemplary, virtually lean mode sequence. As in 10a As shown, a row group is initially as an upper portion 1003 full width rows and a first lower portion 1004_1 formed with only a first, shorter width segment. The initial formation of a stanza may be provided by a generator datasheet generator to a row buffer unit or by a row buffer unit to a customer datasheet generator.
Im Fall eines Erzeugers wird die Zeilengruppe gebildet, nachdem die Schablonen 1002 über dem unteren Abschnitt 1004_1 die Verarbeitung abgeschlossen haben (die ungefähre Schablonenpositionierung ist in 10b zu sehen). Nachdem der Erzeuger-Schablonenprozessor über dem unteren Abschnitt 1004_1 die Verarbeitung abgeschlossen hat, fahren die Schablonen horizontal weiter nach rechts. Letztendlich werden diese über einem nächsten unteren Abschnitt 1004_2 die Verarbeitung fortsetzen. Nach Beendigung des nächstniedrigeren Abschnitts 1004_2 wird der nächste untere Abschnitt 1004_2 von dem Datenblattgenerator an die Zeilenpuffereinheit gesendet, die diesen in dem Speicher an der richtigen Position, z. B. „neben” dem ersten unteren Abschnitt 1004_1, speichert. Der Vorgang wird fortgesetzt, bis die Zeilengruppe vollständig in den Zeilenpufferspeicher geschrieben ist.In the case of a producer, the stanza is formed after the templates 1002 above the lower section 1004_1 finished processing (the approximate template positioning is in 10b to see). After the Producer Template processor above the lower section 1004_1 When the processing has finished, the stencils continue horizontally to the right. Eventually these will be over a next lower section 1004_2 continue processing. After completion of the next lower section 1004_2 will be the next lower section 1004_2 sent from the datasheet generator to the line buffer unit which stores it in memory at the correct location, e.g. B. "next to" the first lower section 1004_1 stores. The process continues until the stanza is completely written to the line buffer.
Im Fall von Abnehmern wird die Zeilengruppe anfänglich, wie in 10a dargestellt, an den Datenblattgenerator geliefert. Der Schablonenprozessor arbeitet über dem ersten Abschnitt 1004_1 der Zeilengruppe. Nach Beendigung der Verarbeitung des ersten Abschnitts 1004_1 fordert der Datenblattgenerator den nächsten unteren Abschnitt 1004_2 an, der aus dem Speicher abgerufen und von der Zeilenpuffereinheit geliefert wird. Der Vorgang wird fortgesetzt, bis die Zeilengruppe vollständig verarbeitet ist.In the case of customers, the stanza becomes initial, as in 10a shown, delivered to the data sheet generator. The template processor works over the first section 1004_1 the stanza. After finishing the processing of the first section 1004_1 the datasheet generator asks for the next lower section 1004_2 which is retrieved from memory and provided by the row buffer unit. The process continues until the stanza is completely processed.
Zu beachten ist, dass sowohl für Erzeuger als auch für Abnehmer niedrigere Abschnitte durch den Datenblattgenerator spezifisch identifiziert werden. Das heißt, sowohl im Erzeugerfall als auch im Abnehmerfall wird der untere Abschnitt 1004_2 durch den Datenblattgenerator spezifisch identifiziert, während die Zeilenpuffereinheit speziell auf den Speicher zugreift, um den unteren Abschnitt 1004_2 zu speichern/abzurufen. In einer Ausführungsform identifiziert der Datenblattgenerator den unteren Abschnitt 1004_2 durch X-, Y-Koordinatenwerte, die basierend auf den vom Compiler bereitgestellten Informationen betrachtet werden (beispielsweise eine der Ecken des unteren Abschnitts 1004_2, alle vier Ecken des unteren Abschnitts 1004_2, nur ein X-Koordinatenwert usw.).It should be noted that for both growers and customers, lower sections are specifically identified by the data sheet generator. That is, both in the case of the producer and in the case of the customer becomes the lower section 1004_2 specifically identified by the datasheet generator, while the line buffer unit accesses the memory specifically to the lower portion 1004_2 to store / retrieve. In one embodiment, the datasheet generator identifies the lower portion 1004_2 by X, Y coordinate values which are considered based on the information provided by the compiler (for example, one of the corners of the lower portion 1004_2 , all four corners of the lower section 1004_2 , just an X coordinate value, etc.).
4.0-Makro-E/A-Ausführungsformen4.0 Macro-I / O embodiments
Wie aus der Erklärung von 4 hervorgeht, leitet eine Makro-E-/A-Einheit 405 Frames der Bilddaten an eine Zeilenpuffereinheit 401, um dem Grafikprozessor Eingabebilddaten zuzuführen. Ebenso werden verarbeitete Ausgabeframes der Bilddaten von einer Zeilenpuffereinheit 401 an die Makro-E-/A-Einheit 405 übertragen, um von dem Grafikprozessor verarbeitete Bilddaten an jene Systemressource zu liefern, die von dem Grafikprozessor (z. B. einem Anwendungssoftwareprogramm, einem Display, einer Kamera usw.) Gebrauch macht.As from the explanation of 4 indicates, heads a macro I / O unit 405 Frames the image data to a line buffer unit 401 to supply input image data to the graphics processor. Likewise, processed output frames of the image data are received from a line buffer unit 401 to the macro I / O unit 405 to provide image data processed by the graphics processor to the system resource that makes use of the graphics processor (eg, an application software program, a display, a camera, etc.).
11a zeigt eine Ausführungsform der Makro-E-/A-Einheit 1105 im Detail. Wie in 11a dargestellt, ist die Makro-E-/A-Einheit 1105 gemäß einer Ausführungsform mit dem Speicher 1106 gekoppelt, der sich außerhalb des Grafikprozessors 1101 befindet. Beispielsweise kann es sich bei dem externen Speicher 1106 um den Systemspeicher eines Computersystems, den lokalen Speicher für eine Kamera, einen Grafikprozessor, einen Beschleuniger und/oder einen Coprozessor handeln, bei dem der Grafikprozessor 1101 ein Bestandteil ist oder anderweitig zugeordnet ist. Als externer Speicher 1106 wird ein beliebiger Speicher verstanden, der von der Logik des Grafikprozessors 1101 selbst extern ist und sich daher von dem internen Speicher des Grafikprozessors unterscheidet (wie beispielsweise der Speicher, der gegenüber den Zeilenpuffereinheiten 401 oder den Datenblattgeneratoren 403 lokal ist). 11a shows an embodiment of the macro I / O unit 1105 in detail. As in 11a is the macro I / O unit 1105 according to an embodiment with the memory 1106 coupled, which is outside the graphics processor 1101 located. For example, the external memory 1106 may be the system memory of a computer system, the local memory for a camera, a graphics processor, an accelerator, and / or a coprocessor in which the graphics processor 1101 is a component or otherwise assigned. As external storage 1106 Any memory understood by the logic of the graphics processor 1101 itself is external and therefore different from the internal memory of the graphics processor (such as the memory opposite the line buffer units) 401 or the datasheet generators 403 is local).
Während des nominalen Betriebs werden von dem Grafikprozessor 1101 zu verarbeitende Eingabeframes von Bilddaten zunächst in den externen Speicher 1106 geschrieben. Die Makro-E-/A-Einheit 1105 liest dann die Bildframes aus dem externen Speicher 1106 und speist sie in den Grafikprozessor 1101. Nachdem der Grafikprozessor 1101 die Verarbeitung von ausreichenden Abschnitten eines oder mehrerer Frames abgeschlossen hat, schreibt die Makro-E-/A-Einheit die verarbeiteten Abschnitte als Ausgabe des Grafikprozessors in den externen Speicher 1006. Zu beachten ist, dass Abschnitte eines Frames in den externen Speicher geschrieben werden können, bevor der Frame vollständig verarbeitet wird. During nominal operation, the graphics processor will 1101 input frames of image data to be processed first into the external memory 1106 written. The macro I / O unit 1105 then reads the image frames from the external memory 1106 and feeds it into the graphics processor 1101 , After the graphics processor 1101 has completed the processing of sufficient portions of one or more frames, the macro I / O unit writes the processed portions as output of the graphics processor into the external memory 1006 , Note that sections of a frame can be written to external memory before the frame is fully processed.
11a zeigt eine umfassende Darstellung einer Ausführungsform der Makro-E-/A-Einheit 1105. Wie in 11a dargestellt, ist die Makro-E-/A-Einheit 1105 so ausgelegt, dass sie eine Anzahl von logischen Kanaleinheiten 1110_1 bis 1110_N beinhaltet, die jeweils für die Einrichtung eines logischen Kanals zwischen dem externen Speicher 1106 und einem internen Abnehmer der aus dem externen Speicher zu lesenden Bilddaten, die durch den Grafikprozessor verarbeitet werden, oder für die Einrichtung eines internen Erzeugers von Ausgabebilddaten verantwortlich ist, die aus dem Grafikprozessor in den externen Speicher 1106 geschrieben werden müssen. 11a shows a comprehensive illustration of one embodiment of the macro I / O unit 1105 , As in 11a is the macro I / O unit 1105 designed to contain a number of logical channel units 1110_1 to 1110_N includes, respectively, for the establishment of a logical channel between the external memory 1106 and an internal customer of the image data to be read from the external memory, processed by the graphics processor, or responsible for establishing an internal producer of output image data sent from the graphics processor to the external memory 1106 must be written.
In verschiedenen Ausführungsformen kann es sich bei den besagten Abnehmern oder Erzeugern um eine Zeilenpuffereinheit oder den Datenblattgenerator eines Schablonenprozessors handeln. Unter erneuter Bezugnahme auf 4, ist zu erkennen, dass die Makro-E-/A-Einheit 405 in einer Ausführungsform direkt mit dem Netzwerk 404 gekoppelt ist, um eine Kommunikation nicht nur mit den Zeilenpuffereinheiten 401, sondern auch mit einem Datenblattgenerator 403 eines speziellen Schablonenprozessors zu ermöglichen 402. In verschiedenen anderen Ausführungsformen ist das Netzwerk 404 in dem Sinne globaler, dass die Makro-E-/A-Einheit 405 mit den Zeilenpuffereinheiten 401 über das Netzwerk 404 anstatt, wie in 4 erklärt, direkt mit den Zeilenpuffereinheiten 401 kommuniziert.In various embodiments, said customers or producers may be a row buffer unit or the template generator of a template processor. Referring again to 4 , it can be seen that the macro I / O unit 405 in one embodiment, directly to the network 404 is coupled to communication not only with the line buffer units 401 but also with a datasheet generator 403 to enable a special template processor 402 , In various other embodiments, the network is 404 in the sense of global, that the macro I / O unit 405 with the line buffer units 401 over the network 404 instead, as in 4 explained, directly with the line buffer units 401 communicated.
11b zeigt eine Ausführungsform des Logikschaltungsentwurfs für eine logische Kanaleinheit 1110. Wie in 11b dargestellt, beinhaltet die logische Kanaleinheit 1110 eine Zustandsmaschinen-Logikschaltung 1111, einen Kontextregisterbereich 1112, eine Umformatierungslogik 1113, eine Eingabewarteschlange 1114, eine Ausgabewarteschlange 1115 und einen Kommunikationskanal mit anderen logischen Kanaleinheiten 1116. Zu beachten ist, dass in alternativen Ausführungsformen die Umformatierungslogik 1113 als ein einziger zentralisierter Block implementiert sein kann, der von mehreren logischen Kanaleinheiten gemeinsam genutzt wird, anstatt, dass, wie in 11b erklärt, jeder Kanal seine eigene dedizierte Umformatierungslogik aufweist. Der Einfachheit halber wird der Rest der Erklärung davon ausgehen, dass Umformatierungslogikblöcke pro Kanal implementiert worden sind, anstatt eine zentrale Umformatierung durchzuführen. 11b shows an embodiment of the logic circuit design for a logical channel unit 1110 , As in 11b shown, includes the logical channel unit 1110 a state machine logic circuit 1111 , a context register area 1112 , a reformatting logic 1113 , an input queue 1114 , an output queue 1115 and a communication channel with other logical channel units 1116 , It should be noted that in alternative embodiments, the reformatting logic 1113 may be implemented as a single centralized block shared by multiple logical channel units, rather than, as in 11b explains that each channel has its own dedicated reformatting logic. For the sake of simplicity, the remainder of the explanation will assume that reformatting logic blocks have been implemented per channel, rather than central reformatting.
Bilddaten, die von der logischen Kanaleinheit 1110 empfangen werden, werden in der Eingabewarteschlange 1114 empfangen. Die in der Eingabewarteschlange 1114 residenten Bildpunkte der Eingabedaten werden durch Umformatieren der Logik 1113 oft selektiv ausgewählt, wodurch Einheiten von Ausgabedaten in der Ausgabewarteschlange 1115 gemäß einem anderen Format aufgebaut werden, das sich von dem Format unterscheidet, gemäß dem die Eingabebildpunkte in der Eingabewarteschlange 1114 formatiert werden. Das heißt, die Bildpunkte der Ausgabedaten werden in der Regel in der Ausgabewarteschlange 1115 gemäß einer anderen Formatstruktur angeordnet als die Eingabebildpunkte in der Eingabewarteschlange 1114.Image data taken from the logical channel unit 1110 are received in the input queue 1114 receive. The in the input queue 1114 resident pixels of the input data are obtained by reformatting the logic 1113 often selectively selected, thereby reducing units of output data in the output queue 1115 according to another format that differs from the format according to which the input pixels in the input queue 1114 be formatted. That is, the pixels of the output data are usually in the output queue 1115 arranged according to a different format structure than the input pixels in the input queue 1114 ,
Beispielsweise können im Fall, dass dem Grafikprozessor Eingabedaten aus dem externen Speicher zugeführt werden, die in dem externen Speicher residenten Eingangsbilddaten gemäß RGB-, RGB-, RGB-, Bildpunktdatenformat angeordnet werden. Der (die) Schablonenprozessor(en) kann (können) jedoch auf Datenblättern von Bildpunktdaten arbeiten, die dieselbe Farbe haben. Das heißt, der (die) Schablonenprozessor(en) kann (können) separat auf Datenblättern von R-Bildpunkten, Datenblättern von G-Bildpunkten und Datenblättern von B-Bildpunkten arbeiten. Um die eingegebenen Bilddaten aus ihrem Format in einem externen Speicher auf das von den Schablonenprozessoren verwendete Format vorzubereiten, wird die Umformatierungslogik 1113, z. B. R-Bildpunkte aus der Eingabewarteschlange 1114 auswählen, um Blöcke von R-Bildpunkten in der Ausgabewarteschlange 1115 zu erzeugen. Sobald ein Block von R-Bildpunkten von ausreichender Größe in der Ausgabewarteschlange 1115 erstellt worden ist, wird der Block an eine Zeilenpuffereinheit oder einen Datenblattgenerator eines Schablonenprozessors weitergeleitet.For example, in the case where input data is supplied to the graphics processor from the external memory, the input image data resident in the external memory may be arranged according to RGB, RGB, RGB, pixel data format. However, the template processor (s) may operate on data sheets of pixel data having the same color. That is, the template processor (s) may operate separately on data sheets of R pixels, data sheets of G pixels, and data sheets of B pixels. To prepare the input image data from its format in an external memory to the format used by the template processors, the reformatting logic becomes 1113 , z. B. R pixels from the input queue 1114 to select blocks of R pixels in the output queue 1115 to create. Once a block of R pixels of sufficient size in the output queue 1115 has been created, the block is forwarded to a row buffer unit or a data sheet generator of a template processor.
Nachdem beispielsweise eine Einspeisung von R-Bildpunkten erschöpft ist und tiefer in den Grafikprozessor weitergeleitet wurde, kann die Umformatierungslogik 1113 nur G-Bildpunkte aus der Eingabewarteschlange 1114 auswählen, um Blöcke von G-Bildpunkten in der Ausgabewarteschlange 1115 zu erstellen. Wiederum wird, nachdem eine Einspeisung von G-Bildpunkten erschöpft ist und weitergeleitet wurde, die Umformatierungslogik 1113 B-Bildpunkte aus der Eingabewarteschlange 1114 auswählen, um Blöcke von B-Bildpunkten in der Ausgabewarteschlange 1105 zu erstellen und tiefer in den Grafikprozessor weiterzuleiten.For example, after an injection of R pixels is depleted and passed deeper into the graphics processor, the reformatting logic 1113 only G pixels from the input queue 1114 select to block G pixels in the output queue 1115 to create. Again, after an injection of G pixels is depleted and forwarded, the reformatting logic 1113 B pixels from the input queue 1114 select to block blocks of B pixels in the output queue 1105 to create and deeper into the graphics processor forward.
Gegenläufig werden in der umgekehrten Richtung, in der die Logikkanaleinheit 1110 verwendet wird, um das Schreiben von Ausgabebildern aus dem Grafikprozessor in einen externen Speicher zu unterstützen, Blöcke derselben Bildpunkttypen in die Eingabewarteschlange 1114 geladen. Das heißt, dass z. B. Blöcke von R-Bildpunkten, G-Bildpunkten und B-Bildpunkten an einer Eingabewarteschlange 1114 von einer Zeilenpuffereinheit oder einem Datenblattgenerator eines Schablonenprozessors empfangen werden. Die Umformatierungslogik 1113 wählt dann bestimmte dieser Bildpunkteaus, um Ausgabeblöcke mit der ursprünglichen RGB-, RGB-Formatstruktur in der Ausgabewarteschlange 1115 zu bilden und diese in den externen Speicher zu schreiben. Counteracted in the reverse direction, in which the logic channel unit 1110 is used to support the writing of output images from the graphics processor to external memory, blocks of the same pixel types into the input queue 1114 loaded. This means that z. For example, blocks of R pixels, G pixels, and B pixels on an input queue 1114 from a line buffer unit or a datasheet generator of a template processor. The reformatting logic 1113 then selects certain of these pixels to output blocks with the original RGB, RGB format structure in the output queue 1115 and to write these into the external memory.
Die Zustandsmaschinenlogik 1111 steuert das Umformatierungsverhalten der Umformatierungslogik 1113, bestimmt, welche Adressen und/oder Adressierungsschemata beim Zugriff auf den externen Speicher zu verwenden sind, und versteht zudem, mit welcher Zeilenpuffereinheit oder welchem Datenblattgenerator diese bei der Bildung eines logischen Verbindungskanals mit dem externen Speicher kommuniziert.The state machine logic 1111 Controls the reformatting behavior of the reformatting logic 1113 , determines which addresses and / or addressing schemes to use when accessing the external memory, and also understands which row buffer unit or which data-sheet generator it is communicating with the external memory in forming a logical connection channel.
In verschiedenen Ausführungsformen sind die Zustandsmaschinenlogik 1111 und die Umformatierungslogik 1113 mit einer dedizierten Logikschaltung implementiert. In anderen Ausführungsformen können die Zustandsmaschinenlogik 1111 und/oder die Umformatierungslogik 1113 als ein Mikrocontroller implementiert sein, der einen Programmcode ausführt, um die Zustandsmaschinen-/Umformatierungsfunktionen zu implementieren. In noch anderen Ausführungsformen kann die Zustandsmaschinenlogik 1111/Umformatierungslogik 1113 als eine Kombination aus programmierter und dedizierter Logikschaltung implementiert sein. Die dedizierte Logikschaltung kann als festverdrahtete und/oder programmierbare logische Schaltung (z. B. als programmierbare logische Schaltung, Universalschaltkreis (PLD) (FPGA) oder programmierbare logische Schaltung (PLAs) exemplarisch für letztere) implementiert sein.In various embodiments, the state machine logic 1111 and the reformatting logic 1113 implemented with a dedicated logic circuit. In other embodiments, the state machine logic 1111 and / or the reformatting logic 1113 be implemented as a microcontroller executing a program code to implement the state machine / reformatting functions. In still other embodiments, the state machine logic 1111 / Umformatierungslogik 1113 be implemented as a combination of programmed and dedicated logic circuitry. The dedicated logic circuit may be implemented as a hardwired and / or programmable logic circuit (eg, as a programmable logic circuit, general purpose circuit (PLD) (FPGA) or programmable logic circuit (PLAs) exemplified by the latter).
Die Informationseinheit, auf die sich die Zustandsmaschine bezieht, um ihre verschiedenen Zuständigkeiten zu verstehen, wird in dem Kontextregisterbereich 1112 aufbewahrt, der anfänglich mit den entsprechenden Kontextinformationen für einen bestimmten DAG oder eine bestimmte Pipeline geladen wird, wenn z. B. der Grafikprozessor dafür konfiguriert ist, den DAG oder die Pipeline auszuführen. Nachfolgende Aktualisierungen des Registerbereichs 1112 während der Ausführung des DAG oder der Pipeline können durch die Zustandsmaschinenlogik 1111, anderweitiger Intelligenz innerhalb des Grafikprozessors (wie etwa den skalaren Prozessor innerhalb eines Schablonenprozessors und/oder das System, (z. B. Computer, Kamera usw.)) vorgenommen werden.The information unit referred to by the state machine to understand its various responsibilities is placed in the context register area 1112 initially loaded with the appropriate context information for a particular DAG or pipeline, e.g. For example, the graphics processor is configured to execute the DAG or the pipeline. Subsequent updates to the register area 1112 during the execution of the DAG or the pipeline can be determined by the state machine logic 1111 , other intelligence within the graphics processor (such as the scalar processor within a template processor and / or the system (e.g., computer, camera, etc.)).
In einer Ausführungsform enthält der Kontextregisterbereich 1112 die folgenden Informationen: 1) die Basis-externe Speicheradresse des Frames von Bilddaten, die, für den Fall, dass dem Grafikprozessor Eingabedaten zugeführt werden, aus dem externen Speicher eingelesen werden soll, oder, für den Fall, dass Ausgabedaten aus dem Grafikprozessor geschrieben werden, in den externen Speicher geschrieben werden soll; 2) die Größe des Bildframes (z. B. in Form von Breite und Gewicht in Einheiten von Bildpunkten); 3) das Format der Daten im externen Speicher; 4) das Format der Daten, die innerhalb des Grafikprozessors verwendet werden; und 5) die Identität des jeweiligen Datenblattgenerators, Schablonenprozessors oder der Zeilenpuffereinheit, den bzw. die der Kanal mit dem externen Speicher logisch koppelt. In verschiedenen Ausführungsformen beinhalten unterstützte Bilddatenformate in beiden Richtungen RGB, alle eine Farbe und unter anderem gepackte RAW.In one embodiment, the context register area includes 1112 the following information: 1) the base-external memory address of the frame of image data to be read from the external memory in the event that input data is supplied to the graphics processor or, in the case where output data is written from the graphics processor to be written to the external memory; 2) the size of the image frame (eg in the form of width and weight in units of pixels); 3) the format of the data in the external memory; 4) the format of the data used within the graphics processor; and 5) the identity of each datasheet generator, template processor or row buffer unit that the channel logically couples to the external memory. In various embodiments, supported image data formats include RGB in both directions, all one color and, among other things, packed RAW.
Wie in 11 dargestellt, beinhaltet die logische Kanaleinheit 1110 zudem eine Kommunikationsverbindung 1116, sodass sie den Zustand anderer logischer Kanäle verstehen und eine Koordination zwischen mehreren logischen Kanälen bewirken kann. Ein logischer Kanal, der dem Grafikprozessor Eingabedaten zuführt, kann beispielsweise dafür konfiguriert werden, nach anfänglichem Einladen der Bilddaten in den Grafikprozessor auf das Einladen eines nächsten Frames der Eingabebilddaten in den Grafikprozessor aus dem externen Speicher zu verzichten, bis ein nächster Ausgabebildframe aus dem Grafikprozessor in den externen Speicher geschrieben wurde. Ohne eine die besagte Koordination könnten die internen Speicherressourcen des Grafikprozessors beispielsweise für einige DAG- oder Pipeline-Entwürfe überfordert werden.As in 11 shown, includes the logical channel unit 1110 also a communication connection 1116 so that they understand the state of other logical channels and can effect coordination between multiple logical channels. For example, a logical channel that provides input data to the graphics processor may be configured to dispense with loading a next frame of input image data into the graphics processor from the external memory after initially loading the image data into the graphics processor until a next output frame from the graphics processor the external memory was written. For example, without such coordination, the graphics processor's internal memory resources might become overwhelmed for some DAG or pipeline designs.
12a, b und 13 erläutern noch ein paar relevante Merkmale der Verarbeitungsvorgangsarten, die die Zustandsmaschine 1111 eines logischen Kanals bewirken kann. 12a und 12b betreffen spezielle Adressierungsverfahren des externen Speichers, die durch eine logische Kanaleinheit ausgeführt werden können, sodass eine logische Puffereinheit effizienter arbeiten kann. 12a , Federation 13 explain a few more relevant features of the processing types that the state machine 1111 a logical channel. 12a and 12b relate to special addressing methods of the external memory that can be executed by a logical channel unit, so that a logical buffer unit can operate more efficiently.
Wie aus der Erklärung der 10a und 10b hervorging, kann eine Zeilenpuffereinheit gemäß einem „virtuell schlanken” Modus arbeiten, bei dem zwei sich nicht über die gesamte Vollbildbreite erstreckende zweidimensionale Bildbereiche 1004_1, 1004_2 von einem Zeilenpuffer an einen Datenblattgenerator in Folge übermittelt werden, anstatt Zeilenpuffer mit voller Breite oder zu übermitteln oder die gesamte Framebreite per Rasterverfahren abzutasten, wobei die Daten aus einer nächsten Zeile nicht weitergeleitet werden, bis alle Daten aus einer vorherigen Zeile vollständig weitergeleitet worden sind.As from the explanation of 10a and 10b A line buffer unit may operate according to a "virtually slim" mode, in which two two-dimensional image areas not extending over the full frame width 1004_1 . 1004_2 from a line buffer to a data sheet generator in sequence rather than full line buffer or to transmit or the entire frame width by rasterization sample, with the data from a next line not being forwarded until all data from a previous line has been completely forwarded.
12a und 12b zeigen ein Speicheradressierungsschema, das die Zustandsmaschinenlogik 1111 einer logischen Kanaleinheit 1110 implementieren kann, um die Weiterleitung der Daten an einen Datenblattgenerator gemäß einer Methode, wie z. B. „der virtuell schlanken”, an eine logische Puffereinheit zu ergänzen, wobei die Daten aus den nächsten Zeilen weitergeleitet werden, bevor alle Daten aus einer vorhergehenden Zeile vollständig weitergeleitet wurden. In 12a kann der Bildbereich 1201 beispielsweise als die Bilddaten, die die Bilddaten 1004_1 aus 10a beinhalten, gesehen werden. 12a and 12b show a memory addressing scheme that the state machine logic 1111 a logical channel unit 1110 can implement to forward the data to a data sheet generator according to a method such. "Virtually lean", to a logical buffer unit, where the data is forwarded from the next lines before all the data from a previous line has been fully forwarded. In 12a can the picture area 1201 for example, as the image data representing the image data 1004_1 out 10a include, be seen.
Hier werden die Bilddaten 1201 innerhalb des Bildframes 1220 aus dem externen Speicher eingelesen und an die Zeilenpuffereinheit weitergeleitet, bevor die Zeilenpuffereinheit die Bilddaten 1004_1 an einen Datenblattgenerator weiterleitet. Um die Bilddaten 1201 an die Zeilenpuffereinheit weiterzuleiten, sollte beachtet werden, dass die Speicheradressierung auf das Einlesen über eine gesamte Datenzeile des Bildframes 1220 verzichten sollte und stattdessen eine begrenzte Ausdehnung einer Zeile 1210 einlesen und dann „nach unten rutschen” sollte, um eine nächste begrenzte Ausdehnung einer nächstniedrigeren Reihe 1211 einzulesen.Here are the image data 1201 within the image frame 1220 read from the external memory and forwarded to the line buffer unit before the line buffer unit, the image data 1004_1 to a datasheet generator. To the image data 1201 to forward to the line buffer unit, it should be noted that memory addressing is based on reading over an entire data line of the picture frame 1220 and should instead dispense with a limited extent of a line 1210 and then "slide down" to a next limited extent of a next lower row 1211 read.
Der Vorgang wird fortgesetzt, bis der gesamte Bereich 1201 aus dem externen Speicher eingelesen wird (der z. B. nach dem Einlesen der Zeile mit der begrenzten Ausdehnung 1212 abgeschlossen ist), sodass dieser an die Zeilenpuffereinheit übermittelt werden kann. Nachdem der Bildbereich 1201 an die Zeilenpuffereinheit übermittelt wurde, ist die Zeilenpuffereinheit in der Lage, die Bilddaten 1004_1 an einen Datenblattgenerator weiterzuleiten.The process continues until the entire area 1201 is read from the external memory (for example, after reading the line with the limited extent 1212 is completed) so that it can be transmitted to the line buffer unit. After the image area 1201 has been transmitted to the line buffer unit, the line buffer unit is capable of storing the image data 1004_1 to forward to a data sheet generator.
Mit dem gleichen Ansatz wie in 12b wird gemäß der gleichen Adressierungsmethode 1210, 1211 ... 1212, wie weiter oben mit Bezug auf 12a und dem Bildbereich 1201 beschrieben, ein nächster Bildbereich 1202 aus dem externen Speicher eingelesen. Nachdem der Bildbereich 1202 gemäß dem speziellen Speicheradressierungsansatz aus dem externen Speicher eingelesen wurde, kann der Bildbereich 1202 an die Zeilenpuffereinheit weitergeleitet werden, wodurch diese in der Lage ist, die Bilddaten 1004_2 aus 10b an denselben Datenblattgenerator weiterzuleiten.With the same approach as in 12b is according to the same addressing method 1210 . 1211 ... 1212 as above with respect to 12a and the image area 1201 described, a next image area 1202 read from the external memory. After the image area 1202 has been read from the external memory according to the special memory addressing approach, the image area 1202 be forwarded to the line buffer unit, whereby it is capable of the image data 1004_2 out 10b forward to the same datasheet generator.
Dementsprechend kann die logische Kanaleinheit, die zwischen dem externen Speicher und der logischen Puffereinheit liegt, die Daten an die Zeilenpuffereinheit in einer Weise weiterleiten, die der Weise ähnelt, in der die Zeilenpuffereinheit die Bilddaten an einen Datenblattgenerator weiterleitet. Dadurch, dass die Eingabedaten der Logikpuffereinheit in einer Weise zugeführt werden, die der Weise ähnelt, in der die Zeilenpuffereinheit die Eingabedaten einem Datenblattgenerator zuführt, wird der Gesamtdurchsatz und die Effizienz der Zeilenpuffereinheit verbessert. Zu beachten ist, dass die logische Kanaleinheit darüber hinaus zwischen dem Einlesen der Eingabedaten aus dem externen Speicher und der Weiterleitung derselben an die Zeilenpuffereinheit die zuvor erwähnte Umformatierung (zum Beispiel RGB in ausschließlich R, ausschließlich G und ausschließlich B) durchführen kann.Accordingly, the logical channel unit located between the external memory and the logical buffer unit may forward the data to the row buffer unit in a manner similar to the manner in which the row buffer unit forwards the image data to a data sheet generator. By providing the input data to the logic buffer unit in a manner similar to the manner in which the row buffer unit supplies the input data to a data sheet generator, the overall throughput and efficiency of the row buffer unit is improved. Note that, in addition, between reading the input data from the external memory and forwarding it to the line buffer unit, the logical channel unit may perform the aforementioned reformatting (for example, RGB in all R, excluding G and only B).
Der spezielle Adressierungsmodus der 12a und 12b kann zudem in der Schreibrichtung der Ausgabedaten aus dem Grafikprozessor in den externen Speicher angewendet werden. Hier kann ein Datenblattgenerator im „virtuellen Zahlen”-Modus verarbeitete Ausgabebilddaten an einen Zeilenpuffer übermitteln, wodurch eine Zeilenpuffereinheit wiederum dazu veranlasst wird, Bilddatenbereiche mit begrenzter Ausdehnung ähnlich den Bereichen 1201, 1202 aus 12 an die logische Kanaleinheit weiterzuleiten. Als Reaktion darauf schreibt die logische Kanaleinheit gemäß demselben speziellen Adressierungsansatz 1210, 1211 ... 1212 die Daten in den externen Speicher. Wiederum kann zwischen dem Empfang der Ausgabebilddaten aus einer Zeilenpuffereinheit und dem Schreiben derselben in den externen Speicher eine Umformatierung durch den logischen Kanal durchgeführt werden.The special addressing mode of the 12a and 12b can also be applied in the writing direction of the output data from the graphics processor in the external memory. Here, a data sheet generator may transmit output image data processed in the "virtual number" mode to a line buffer, thereby causing a line buffer unit to have limited-area image data areas similar to the areas 1201 . 1202 out 12 to forward to the logical channel unit. In response, the logical channel unit writes according to the same special addressing approach 1210 . 1211 ... 1212 the data in the external memory. Again, between the reception of the output image data from a line buffer unit and the writing thereof into the external memory, a reformatting by the logical channel can be performed.
13 bezieht sich auf einen anderen speziellen Adressierungsansatz, bei dem z. B. ein auf einem Schablonenprozessor ausgeführtes Kernsystem besonders individuelle Oberflächenbereiche anfordert, die sich mehr zufällig oder ad hoc an ihrer Position innerhalb des Eingabeframes befinden, anstatt in Reihenfolge geordnet oder ausgerichtet zu werden. Beispielsweise kann, wie in 13 dargestellt, ein Schablonenprozessor die Bildbereiche 1301, 1302, 1303 und 1304 nacheinander anfordern, anstatt Daten in einem geordneten sequentiellen Modus auf der gesamten Breite des Eingabeframes (ob Zeilengruppe, virtuell schlank oder anderweitig) anzufordern. Hier wird jeder Bereich 1301 bis 1304 unter Verwendung des Adressierungsansatzes mit begrenzter Ausdehnung 1210, 1211 ... 1212 der 12a, b, jedoch innerhalb der Begrenzungen der Ad-hoc-Bildbereiche 1301 bis 1304 eingelesen. Dementsprechend ist die Form des externen Speicherabrufbereichs konfigurierbar. 13 refers to another special addressing approach where z. For example, a core system executing on a template processor may request particularly individual surface areas that are more random or ad hoc in position within the input frame, rather than being ordered or aligned in order. For example, as in 13 a template processor displays the image areas 1301 . 1302 . 1303 and 1304 instead of requesting data in an ordered sequential mode across the entire width of the input frame (whether stanza, virtually lean or otherwise). Here is every area 1301 to 1304 using the limited-extent addressing approach 1210 . 1211 ... 1212 of the 12a , b, however, within the boundaries of ad hoc image areas 1301 to 1304 read. Accordingly, the shape of the external memory recall area is configurable.
Die Verarbeitung von Bildbereichen in einer ad hoc anstatt einer geordneten Sequenz kann beispielsweise für Bewegungskompensationsroutinen (bei denen sich ein Merkmal in einem Bildstrom bewegt), für geometrische Verzerrungsroutinen (z. B. zum Kompensieren der Linse oder anderer Bildaufnahmen) für Mängel, bei denen der gesammelte Frame der Bilddaten verzerrt ist) und für Matrixmehrfach- oder Transponierungsoperationen nützlich sein.The processing of image areas in an ad hoc rather than ordered sequence can be used, for example, for motion compensation routines (in which a feature moves in a picture stream), for geometric distortion routines (e.g. For compensating for the lens or other image recordings) for defects in which the collected frame of the image data is distorted) and useful for multi-matrix or transpose operations.
In einer Ausführungsform verbraucht die Ad-hoc-Adressierung zwei logische Kanaleinheiten 1110 innerhalb der Makro-E-/A-Einheit 1105. Eine erste logische Kanaleinheit empfängt Basiskoordinatenwerte von jedem Ad-hoc-Bildbereich, die der Schablonenprozessor anfordert. Beispielsweise kann ein gewünschter Bildbereich durch den Schablonenprozessor spezifiziert werden, der die Höhe und Breite des Bereichs zusammen mit der Adresse der unteren linken Ecke des Bereichs identifiziert.In one embodiment, the ad hoc addressing consumes two logical channel units 1110 within the macro I / O unit 1105 , A first logical channel unit receives base coordinate values from each ad hoc image area requested by the template processor. For example, a desired image area may be specified by the template processor identifying the height and width of the area along with the address of the lower left corner of the area.
Unter der Annahme, dass der nominale Betrieb jeden gewünschten Bereich mit der gleichen Breite und Höhe aufweist, kann eine Sequenz von Ad-hoc-Bildbereichen identifiziert werden, indem die Koordinatenwerte der unteren linken Ecke jedes gewünschten Bereiches an die erste logische Kanaleinheit weitergeleitet werden (z. B. werden zunächst die Koordinatenwerte der unteren linken Ecke des Bereichs 1301 an die erste logische Kanaleinheit gesendet, und anschließend werden die Koordinatenwerte der unteren linken Ecke des Bereichs 1302 an die erste logische Kanaleinheit gesendet usw.). Die erste logische Kanaleinheit leitet dann die empfangenen Koordinatenwerte zu einer zweiten logischen Kanaleinheit (z. B. über einen Kommunikationskanal 1106 von 11a), der die gewünschten Bereiche aus dem externen Speicher einliest, umformatiert und diese dann an den anfordernden Schablonenprozessor weiterleitet. Zu beachten ist, dass die Möglichkeit besteht, dass die Ad-hoc-Bildbereiche einer Sequenz untereinander eine beträchtliche Überlappung aufweisen. Das heißt, dass ein erster Bildbereich viel von demselben Bildbereich verbrauchen kann, den ein zweiter Bildbereich ebenfalls verbraucht. In einer Ausführungsform ist ein Cache zwischen dem externen Speicher und den logischen Kanälen implementiert, um die Überlappung der Bilddaten zwischen mehreren Bildbereichen aufrechtzuerhalten, sodass mehrere Speicherzugriffe für dieselben Daten vermieden werden können.Assuming that the nominal operation has any desired area of the same width and height, a sequence of ad hoc image areas can be identified by forwarding the coordinate values of the lower left corner of each desired area to the first logical channel unit (e.g. B. First, the coordinate values of the lower left corner of the area 1301 sent to the first logical channel unit, and then the coordinate values of the lower left corner of the area 1302 sent to the first logical channel unit, etc.). The first logical channel unit then routes the received coordinate values to a second logical channel unit (eg via a communication channel 1106 from 11a ), which reads in the desired areas from the external memory, reformats and then forwards them to the requesting template processor. It should be noted that there is a possibility that the ad hoc image areas of a sequence may overlap one another considerably. That is, a first image area can consume much of the same image area that a second image area also consumes. In one embodiment, a cache is implemented between the external memory and the logical channels to maintain the overlap of the image data between multiple image areas so that multiple memory accesses for the same data can be avoided.
14 zeigt eine Methodik, die, wie oben beschrieben, durch eine logische Kanaleinheit ausgeführt werden kann. Wie in 14 dargestellt, beinhaltet die Methodik das Ermöglichen einer logischen Verbindung mit einer Abnehmerkomponente innerhalb eines Grafikprozessors 1401. Das Verfahren beinhaltet zudem das Einlesen einer Reihe von Bildbereichen mit begrenzter Breite aus einem Frame von Bilddaten, wobei jeder der Bildbereiche gemäß einem RGB-Format 1402 formatiert ist. Darüber hinaus beinhaltet das Verfahren das Umformatieren der Serie von Bildbereichen mit begrenzter Breite in Bilddatenblöcke, die die gleiche Farbkomponente 1403 aufweisen. Außerdem beinhaltet das Verfahren das Weiterleiten der Bilddatenblöcke, die die gleiche Farbkomponente aufweisen, wie die Abnehmerkomponente 1404. 14 shows a methodology that can be performed by a logical channel unit as described above. As in 14 As shown, the methodology includes enabling a logical connection with a customer component within a graphics processor 1401 , The method also includes reading in a series of limited width image areas from a frame of image data, each of the image areas being in accordance with an RGB format 1402 is formatted. In addition, the method includes reformatting the series of limited width image areas into image data blocks having the same color component 1403 exhibit. In addition, the method includes forwarding the image data blocks having the same color component as the customer component 1404 ,
e. Implementierungsausführungsformene. Implementation embodiments
Es ist wichtig, darauf hinzuweisen, dass die oben beschriebenen verschiedenen Merkmale der Grafikprozessorarchitektur nicht zwangsläufig auf die Bildverarbeitung im herkömmlichen Sinne beschränkt sind und daher auf andere Anwendungen angewendet werden können, die ggf. veranlassen, dass der Grafikprozessor neu charakterisiert wird oder auch nicht. Wenn beispielsweise eines der vorstehend beschriebenen verschiedenen Merkmale der Grafikprozessorarchitektur bei der Erstellung und/oder Erzeugung und/oder Wiedergabe von Animationen anstatt bei der Verarbeitung von tatsächlichen Kamerabildern verwendet werden soll, kann der Grafikprozessor als grafische Verarbeitungseinheit charakterisiert sein. Zudem können die oben beschriebenen Architekturmerkmale des Grafikprozessors in anderen technischen Anwendungen, wie in der Videoverarbeitung, Bildverarbeitung, Bilderkennung und/oder dem maschinellen Lernen, angewendet werden. Auf diese Weise kann der Grafikprozessor (z. B. als Coprozessor) in einen allgemeineren Universalprozessor (z. B. als Teil eines CPUs des Computersystems) mit integriert werden oder ein eigenständiger Prozessor innerhalb eines Computersystems sein.It is important to note that the various features of the graphics processor architecture described above are not necessarily limited to image processing in the conventional sense and therefore may be applied to other applications that may or may not cause the graphics processor to be re-characterized. For example, if one of the various graphics processor architecture features described above is to be used in creating and / or generating and / or rendering animations rather than processing actual camera images, the graphics processor may be characterized as a graphics processing unit. In addition, the graphics processor architecture features described above may be used in other technical applications, such as video processing, image processing, image recognition, and / or machine learning. In this way, the graphics processor (eg, as a coprocessor) may be integrated into a more general purpose general purpose processor (eg, as part of a CPU of the computer system) or may be a stand-alone processor within a computer system.
Die oben beschriebenen Hardware-Ausführungsformen können in einem Halbleiterchip und/oder als Beschreibung eines Schaltkreisentwurfs zur letztendlichen Ausrichtung auf ein Halbleiterherstellungsverfahren enthalten sein. Im Falle des Letzteren können derartige Schaltkreisbeschreibungen die Form einer (z. B. VHDL oder Verilog) Beschreibung einer Registerüberleitungsschaltung (RTL), einer Torschaltung, einer Transistorschaltung oder einer Maske oder verschiedener Kombinationen derselben annehmen. Schaltungsbeschreibungen sind in der Regel auf einem computerlesbaren Speichermedium (wie z. B. einer CD-ROM oder einer anderen Art von Speichertechnologie) enthalten.The hardware embodiments described above may be included in a semiconductor chip and / or as a description of a circuit design for eventual alignment with a semiconductor manufacturing process. In the case of the latter, such circuit descriptions may take the form of a (e.g., VHDL or Verilog) description of a register transfer circuit (RTL), gate, transistor circuit, or mask, or various combinations thereof. Circuit descriptions are typically included on a computer-readable storage medium (such as a CD-ROM or other type of storage technology).
Aus den vorangehenden Abschnitten ist zu erkennen, dass ein Grafikprozessor, wie oben beschrieben, in der Hardware auf einem Computersystem (z. B. als Teil eines Handgerätsystems an Chip (SOC), das Daten von der Kamera des Handgerätes verarbeitet) enthalten sein kann. In Fällen, in denen der Grafikprozessor als Hardware-Schaltung ausgebildet ist, ist zu beachten, dass die Bilddaten, die von dem Grafikprozessor verarbeitet werden, direkt von einer Kamera empfangen werden können. Hier kann der Grafikprozessor Teil einer diskreten Kamera oder Teil eines Computersystems mit einer integrierten Kamera sein. In dem Fall des Letzteren können die Bilddaten direkt von der Kamera oder aus dem Systemspeicher des Computersystems empfangen werden (z. B. sendet die Kamera ihre Bilddaten anstatt an den Grafikprozessor an den Systemspeicher). Zu beachten ist auch, dass viele der in den vorangehenden Abschnitten beschriebenen Merkmale auf eine Grafikprozessoreinheit (zur Darstellung von Animationen) anwendbar sind.From the foregoing sections, it will be appreciated that a graphics processor as described above may be included in hardware on a computer system (eg, as part of a handheld device system on chip (SOC) that processes data from the camera of the handset). In cases where the graphics processor is implemented as a hardware circuit, it should be noted that the image data processed by the graphics processor can be received directly from a camera. Here, the graphics processor can be part of a discrete camera or part of a computer system with a be integrated camera. In the latter case, the image data may be received directly from the camera or system memory of the computer system (e.g., the camera sends its image data to the system memory rather than to the graphics processor). It should also be noted that many of the features described in the preceding paragraphs are applicable to a graphics processing unit (for rendering animations).
15 zeigt eine exemplarische Darstellung eines Computersystems. Viele der Komponenten des nachstehend beschriebenen Computersystems sind auf ein Computersystem mit einer integrierten Kamera und einem zugehörigen Grafikprozessor (z. B. einem Handgerät, wie etwa einem Smartphone oder Tablet-Computer) anwendbar. Durchschnittliche Fachleute auf dem Gebiet werden leicht zwischen beiden unterscheiden können. 15 shows an exemplary representation of a computer system. Many of the components of the computer system described below are applicable to a computer system having an integrated camera and associated graphics processor (eg, a handheld device such as a smartphone or tablet computer). Average professionals in the field will be able to easily distinguish between the two.
Wie in 15 dargestellt, kann das grundlegende Computersystem eine zentrale Verarbeitungseinheit 1501 (die beispielsweise eine Vielzahl von Universal-Verarbeitungskernsystemen 1515_1 bis 1515_N und einen auf einem Multikernprozessor oder einem Anwendungsprozessor angeordneten Hauptspeichercontroller 1517 enthalten kann), Systemspeicher 1502, ein Display 1503 (z. B. Touchscreen, Flachbildschirm), eine lokal verdrahtete Punkt-zu-Punkt-Verbindung (z. B. eine USB-Schnittstelle) 1504, verschiedene Netzwerk-E-/A-Funktionen 1505 (wie z. B. eine Ethernet-Schnittstelle und/oder ein Mobilfunkmodem-Teilsystem), ein drahtloses lokales Netzwerk (z. B. WLAN) 1506, eine drahtlose Punkt-zu-Punkt-Verbindung (z. B. Bluetooth-Schnittstelle) 1507 und eine globale Positionierungssystemschnittstelle 1508, verschiedene Sensoren 1509_1 bis 1509_N, eine oder mehrere Kameras 1510, eine Batterie 1511, eine Energieverwaltungssteuereinheit 1512, einen Lautsprecher und ein Mikrofon 1513, sowie einen Audio-Kodierer/Dekodierer 1514 beinhalten.As in 15 As shown, the basic computer system may be a central processing unit 1501 (For example, a variety of general purpose processing kernel systems 1515_1 to 1515_N and a main memory controller arranged on a multi-core processor or an application processor 1517 can contain), system memory 1502 , a display 1503 (eg touchscreen, flat screen), a locally wired point-to-point connection (eg a USB interface) 1504 , various network I / O functions 1505 (such as an Ethernet interface and / or a cellular modem subsystem), a wireless local area network (eg, WLAN) 1506 , a wireless point-to-point connection (eg Bluetooth interface) 1507 and a global positioning system interface 1508 , different sensors 1509_1 to 1509_N , one or more cameras 1510 , a battery 1511 , an energy management control unit 1512 , a speaker and a microphone 1513 , as well as an audio encoder / decoder 1514 include.
Ein Anwendungsprozessor oder Multikernprozessor 1550 kann einen oder mehrere Universalprozessorkerne 1515 innerhalb seiner CPU 1501, eine oder mehrere grafische Verarbeitungseinheiten 1516, eine Speicherverwaltungsfunktion 1517 (z. B. einen Speichercontroller), eine E-/A-Steuerfunktion 1518 und eine Bildverarbeitungseinheit 1519 beinhalten. Die Universalverarbeitungskerne 1515 führen in der Regel das Betriebssystem und die Anwendungssoftware des Computersystems aus. Die Grafikverarbeitungseinheiten 1516 führen in der Regel grafikintensive Funktionen aus, um z. B. Grafikdaten zu erzeugen, die auf dem Display 1503 dargestellt werden. Die Speichersteuerfunktion 1517 ist mit dem Systemspeicher 1502 verbunden, um Daten in den Systemspeicher 1502 zu schreiben bzw. aus demselben einzulesen. Die Leistungsverwaltungssteuereinheit 1512 steuert im Allgemeinen den Leistungsverbrauch des Systems 1500.An application processor or multi-core processor 1550 can be one or more universal processor cores 1515 within his cpu 1501 , one or more graphical processing units 1516 , a memory management function 1517 (eg, a memory controller), an I / O control function 1518 and an image processing unit 1519 include. The universal processing cores 1515 usually run the operating system and the application software of the computer system. The graphics processing units 1516 usually perform graphics intensive functions to B. to generate graphics data on the display 1503 being represented. The memory control function 1517 is with the system memory 1502 connected to data in the system memory 1502 to write or read from the same. The performance management control unit 1512 generally controls the power consumption of the system 1500 ,
Die Bildverarbeitungseinheit 1519 kann gemäß einer der oben in den vorangehenden Abschnitten beschriebenen Ausführungsformen der Bildverarbeitungseinheit implementiert sein. Alternativ dazu oder in Kombination kann die IPU 1519 mit einer oder beiden der GPU 1516 und der CPU 1501 als Coprozessor derselben gekoppelt sein. Darüber hinaus kann in verschiedenen Ausführungsformen die GPU 1516 mit einem der oben beschriebenen Prozessormerkmale implementiert sein.The image processing unit 1519 may be implemented according to one of the embodiments of the image processing unit described above in the preceding sections. Alternatively, or in combination, the IPU 1519 with one or both of the GPU 1516 and the CPU 1501 be coupled as coprocessor of the same. In addition, in various embodiments, the GPU 1516 be implemented with one of the processor features described above.
Das Touchscreen-Display 1503, die Kommunikationsschnittstellen 1504–1507, die GPS-Schnittstelle 1508, die Sensoren 1509, die Kamera 1510 und der Lautsprecher/Mikrofon-Codec 1513, 1514 können allesamt als unterschiedliche Formen von E/A (Eingabe und/oder Ausgabe) in Bezug auf das gesamte Rechensystem betrachtet werden, darunter auch gegebenenfalls ein integriertes Peripheriegerät (z. B. der einen oder mehreren Kameras 1510). Je nach Implementierung können verschiedene dieser E-/A-Komponenten auf dem Anwendungsprozessor/Multikernprozessor 1550 integriert sein oder sich außerhalb des Chips oder außerhalb des Pakets des Anwendungsprozessors/Multikernprozessors 1550 befinden.The touch screen display 1503 , the communication interfaces 1504 - 1507 , the GPS interface 1508 , the sensors 1509 , the camera 1510 and the speaker / microphone codec 1513 . 1514 may all be viewed as different forms of I / O (input and / or output) with respect to the entire computing system, including, if appropriate, an integrated peripheral device (eg, the one or more cameras 1510 ). Depending on the implementation, several of these I / O components may be on the application processor / multi-core processor 1550 be integrated or external to the chip or outside the application processor / multi-core processor package 1550 are located.
In einer Ausführungsform beinhalten eine oder mehrere Kameras 1510 eine Tiefenkamera, die in der Lage ist, die Tiefe zwischen der Kamera und einem Objekt in seinem Sichtfeld zu messen. Anwendungssoftware, Betriebssystemsoftware, Gerätetreibersoftware und/oder Firmware, die auf einem universellen CPU-Kern (oder einem anderen Funktionsblock mit einer Befehlsausführungspipeline zum Ausführen eines Programmcodes) eines Anwendungsprozessors oder eines anderen Prozessors ausgeführt werden, können sämtliche der oben beschriebenen Funktionen ausführen.In one embodiment, one or more cameras include 1510 a depth camera capable of measuring the depth between the camera and an object in its field of view. Application software, operating system software, device driver software and / or firmware executing on a universal CPU core (or other functional block having an instruction execution pipeline for executing program code) of an application processor or other processor can perform all of the functions described above.
Ausführungsformen der Erfindung können, wie oben dargelegt, verschiedene Verfahren beinhalten. Die Prozesse können in maschinenausführbaren Anweisungen enthalten sein. Die Anweisungen können dazu verwendet werden, einen Universalprozessor oder Spezialprozessor dazu zu veranlassen, bestimmte Prozesse auszuführen. Alternativ dazu können die besagten Prozesse von spezifischen Hardwarekomponenten ausgeführt werden, die eine fest verdrahtete Logik zum Ausführen der Prozesse oder eine beliebige Kombination von programmierten Computerkomponenten und benutzerdefinierten Hardwarekomponenten enthalten.Embodiments of the invention may include various methods as set forth above. The processes may be included in machine-executable instructions. The instructions can be used to cause a general purpose processor or special processor to execute certain processes. Alternatively, said processes may be performed by specific hardware components that include hard-wired logic for executing the processes or any combination of programmed computer components and custom hardware components.
Elemente der vorliegenden Erfindung können darüber hinaus als maschinenlesbares Medium zum Speichern der maschinenausführbaren Befehle bereitgestellt sein. Das maschinenlesbare Medium kann unter anderem Floppy-Disketten, optische Platten, CD-ROMs und magneto-optische Platten, FLASH-Speicher, ROMs, RAMs, EPROMs, EEPROMs, magnetische oder optische Karten, Ausbreitungsmedien oder andere Arten von Medien/maschinenlesbaren Medien, geeignet für die Speicherung von elektronischen Befehlen einschließen. Die vorliegende Erfindung kann beispielsweise als ein Computerprogramm heruntergeladen werden, das von einem dezentralen Computer (z. B. einem Server) mittels eines in einer Trägerwelle oder einer anderen Ausbreitungsmedium enthaltenen Datensignals an einen anfordernden Computer (z. B. einen Client) über eine Kommunikationsverbindung (z. B. ein Modem oder eine Netzwerkverbindung) übertragen werden kann.Elements of the present invention may also be provided as a machine-readable medium for storing the machine-executable instructions. The machine readable medium may include floppy disks, optical disks, CD-ROMs and magneto-optical disks, FLASH memories, ROMs, RAMs, EPROMs, EEPROMs, magnetic or optical cards, propagation media, or other types of media / machine-readable media for storing electronic commands. For example, the present invention may be downloaded as a computer program transmitted from a remote computer (eg, a server) to a requesting computer (eg, a client) via a communications link via a data signal contained in a carrier wave or other propagation medium (eg a modem or network connection).
In der vorstehenden Beschreibung wurde die Erfindung unter Bezugnahme auf spezifische exemplarische Ausführungsformen derselben beschrieben. Es ist jedoch offensichtlich, dass verschiedene Modifikationen und Änderungen daran vorgenommen werden können, ohne von den in den beigefügten Ansprüchen dargelegten Erfindungsgedanken und Schutzumfang der Erfindung abzuweichen. Die Beschreibung und die Zeichnungen sind daher in einem veranschaulichenden und nicht in einem einschränkenden Sinne zu betrachten.In the foregoing description, the invention has been described with reference to specific exemplary embodiments thereof. It will, however, be evident that various modifications and changes may be made thereto without departing from the spirit and scope of the invention as set forth in the appended claims. The description and drawings are therefore to be considered in an illustrative rather than a limiting sense.