US6654747B1 - Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions - Google Patents
Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions Download PDFInfo
- Publication number
- US6654747B1 US6654747B1 US09/320,963 US32096399A US6654747B1 US 6654747 B1 US6654747 B1 US 6654747B1 US 32096399 A US32096399 A US 32096399A US 6654747 B1 US6654747 B1 US 6654747B1
- Authority
- US
- United States
- Prior art keywords
- data
- control repository
- dms
- repository
- control
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/25—Integrating or interfacing systems involving database management systems
- G06F16/252—Integrating or interfacing systems involving database management systems between a Database Management System and a front-end application
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99931—Database or file accessing
- Y10S707/99938—Concurrency, e.g. lock management in shared database
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
Definitions
- This invention is related to data management systems and managing data objects in a client/server environment where elements of the system may exist on a homogenous computer platform or the elements may be dispersed among a plurality of platforms in a distributed computing environment.
- Our data management system is particularly useful for use in specialized business solutions which employ our processes and methods, such as for hardware design, software development, inventory tracking, manufacturing, project management, and any related field which necessitates the sharing and tracking of multiple iterations of data objects in a quality controlled environment.
- MVS Multiple Virtual Storage
- Management of a data aggregation may include creating the aggregation, adding or deleting data objects, moving the aggregation through a hierarchical, multi-tiered data management system and tracking the status of the data aggregation in real-time while maintaining the coherence of the data aggregation. Creation of a data aggregation or the addition of a data object to an existing data aggregate may need to be accomplished within the data management system or via data objects imported into the data management system through application program interfaces for the data management system.
- U.S. Pat. No. 5,201,047 to Maki et al. (issued Apr. 6, 1993) teaches an attribute based classification and retrieval system wherein it is unnecessary to implement an artificial code for indexing classifications.
- the patent teaches a method for defining unique, user-determined attributes for storing data which are capable of being readily augmented without necessitating the modification of the underlying query used for retrieval thereof.
- the Maki et al. patent requires that the data items being grouped share at least one common attribute to enable the grouping and, therefore, fails to address the problems of managing data aggregates formed from disparate and unrelated data objects.
- Chapman et al. do not permit the creation of aggregates without foreknowledge of the process that requires the resource.
- Chapman et al. require that a relationship between the elements exist prior to the formation of the Bill of Resources grouping.
- unrelated DMS systems are known which are used for hardware implementations which enable related data in a computer memory, storage, or I/O subsystem to be physically grouped in proximity to other such data so as to improve hardware performance, application performance, and/or to solve memory management issues that 35 are known.
- Our invention provides a data management system usable in a distributed environment worldwide to enable the simultaneous access, modification, and sharing of data objects either by people or processes operating in a concurrent manner.
- the system we employ uses a data management control program tangibly embodying a program of instructions executable by a supporting machine environment for performing method steps by a data management system having a library organization which receives a request of a user initiated from said displayed client screen and fulfills the request by providing a result via our data management system.
- This data management system has a plurality of data managers and is provided with a plurality of data managers in one or more layers of a layered architecture.
- the system performs with a data manager and with a user input via an API a plurality of processes on data residing in heterogeneous data repositories of said computer system including promotion, check-in, check-out, locking, library searching, setting and viewing process results, tracking aggregations, and managing parts, releases and problem fix data under management control of a virtual control repository having one or more physical heterogeneous repositories.
- the system provides for storing, accessing, tracking data residing in said one or more data repositories managed by the virtual control repository.
- Our invention provides user interfaces for a combination of command line, scripts, GUI, Menu, Web Browser and other interactive means which maps of the user's view to a PFVL paradigm.
- FIG. 1 shows an overview of the preferred embodiment through the use of an architectural block diagram.
- FIG. 2A shows a symbolic representation of the PFVL Paradigm for both a single Package and a grouping of hierarchical Packages.
- FIG. 2B shows how the PFVL Paradigm can be adapted to multiple real life applications.
- FIGS. 3A and 3B depict a complex Data Repository illustrating various means in which data can physically reside in the Data Management System.
- FIG. 4 shows a detailed diagram of the DMS Application Layer introduced in FIG. 1 .
- FIGS. 5A and 5B illustrate an alternative method to implementing DMS Applications using State Tables.
- FIG. 6 depicts the operation of the Command Translators introduced in FIG. 1 .
- FIG. 7 describes the detailed architecture of the Client/Server Interface layer.
- FIG. 8A depicts a simple DMS application and the associated Control Repository Access function.
- FIG. 8B illustrates examples of virtual Control Repository tables.
- FIG. 9A depicts a physical implementation of a virtual Control Repository in a heterogeneous environment.
- FIG. 9B describes the detailed operation of the Command Translators.
- FIGURES may be separated in parts and as a convention we place the top of the FIGURE as the first sheet, with subsequent sheets proceeding down and across when viewing the FIGURE, in the event that multiple sheets are used.
- the present invention employs a novel, layered architecture which permits the DMS to be constructed and maintained in a modular fashion. Additionally, this approach also allows the DMS to be easily scaled from a low-end client-only system to a large, high-end globally distributed enterprise wide data management system.
- a Data Management System has a plurality of data managers and is provided with a plurality of data managers in one or more layers of a layered architecture.
- the system performs with a data manager and with a user input via an API a plurality of processes on data residing in heterogeneous data repositories of said computer system including promotion, check-in, check-out, locking, library searching, setting and viewing process results, tracking aggregations, and managing parts, releases and problem fix data under management control of a virtual control repository having one or more physical heterogeneous repositories.
- the system provides for storing, accessing, tracking data residing in said one or more data repositories managed by the virtual control repository.
- User Interfaces provide a combination of command line, scripts, GUI, Menu, Web Browser and other interactive means which maps the user's view to a PFVL paradigm.
- Configurable Managers include a query control repository for existence of peer managers and provide logic switches to dynamically interact with peers.
- a control repository access layer provides a common process interface across all managers, which utilizes a virtual table paradigm to standardize communication with the control repository.
- Command translators map the standardized control repository accesses into the appropriate format for interfacing with the underlying physical embodiment of the control repository. For example, control repository accesses can be mapped into SQL queries for a relational database, a set of FILE I/O's with appropriate inter I/O processing for table formatted files, Meta data API calls with appropriate inter I/O processing for Meta Data repositories, or any other manner by which data may be physically stored and tracked.
- DMS functions and utilities include an API, and a complete set of functions based on a PFVL paradigm.
- PFVL paradigm calls are mapped into Data Manager(s)/Control Repository calls.
- the client/server interface is a common interface to a enterprise Client/server network, and may be reduced in size for acting for a co-resident client/server.
- the data repository is an aggregation of disparate data storage engines.
- a package manager tailors the control repository and provides methodology customization with package, variance, filetype, level granularity.
- Adaptation of the DMS to a user environment is accomplished through a single architectural layer. This allows the architectural core, including all the transactions and functions encompassed therein to remain methodology and environmentally independent.
- Our DMS allows applications to remain methodology independent through the use of a standardized application program interface.
- User interfaces can be constructed to customize the same DMS application several different ways to conform to user methodologies.
- our invention teaches an alternative method for implementing applications using easily customizable state tables.
- Our Client/Server Interface allows the elements of the DMS to interact locally in a client-only environment or via a client/server connection.
- the client/server implementation can be achieved in a Local Area Network, Wide Area Network or a globally distributed environment such as the internet.
- Scalability of the DMS is achieved through the use of configurable Managers which can be switched on or off depending on the needs of the users. Since all the Managers conform to the PFVL Paradigm and follow a standardized application program interface, new Managers can be added to the system without the need to reconstruct or alter the existing DMS.
- the physical implementation of the DMS is described in two sections which deal with the Data and Control Repositories separately.
- the Data Repository may be implemented using-a plurality of means ranging from simple file systems to commercially available Product Data Management (PDM) systems such as RCS, Sherpa, MetaPhase, etc.
- PDM Product Data Management
- the data can be physically located in a single storage medium such as a hard disk, local file system, or server, or distributed throughout a plethora of storage media scattered geographically.
- the centralized Control Repository can be implemented using several approaches, including but not limited to, relational or object oriented databases, flat files, meta data files or table formatted files.
- This disclosure describes the use of Command Translators which map generic Control Repository transactions to the appropriate access method corresponding to the physical implementation. This approach permits the information in the Control Repository to be migrated between different physical implementations. It even allows multiple physical implementations to act as a single logical Control Repository.
- FIG. 1 depicts the overall architecture of the preferred embodiment.
- the entire DMS architecture is based on the PFVL paradigm, illustrated in FIG. 2, which allows the DMS to be environment and methodology independent. All interfaces into the DMS use a standard PFVL based API which provides the flexibility to use a common DMS across several similar or disparate user groups. For example, this system could be used to manage the data for both the electrical and mechanical components in an automobile company.
- FIG. 2A illustrates the PFVL paradigm through the use of a multidimensional symbol such as a cube.
- the present invention teaches the notion that all objects resides in a Data Management System can be classified according to five basic attributes:
- Package An arbitrary grouping of data objects that has some relationship or common bond with each other. Each package contains one or more variances.
- Variance One or more objects within a package that, when combined with the remaining objects in the same Variance or from one or more dependent Variances, comprise a coherent and meaningful collection of objects Level A collection of objects, within a Variance, that have achieved some arbitrary degree of quality.
- Filetype A collection of objects sharing the same data type or format. Version An iteration of a data object.
- FIG. 2A depicts Package “A” ( 20 ) comprised of two Variances. Within each Variance are one or more data objects ( 21 ) of a given Filetype, residing at one or more Levels, with one or more Versions of the object. In the simplest case, a single Version of a single Filetype exists at a single Level within a single Variance of a single Package. Our invention achieves tremendous flexibility by allowing any of these attributes to be expanded n ways. By varying the dimensions of the cube, and the number of cubes in the Package, one can create a DMS capable of managing data in almost any environment.
- the present invention also permits Packages to be arranged hierarchically. This is illustrated at the bottom of FIG. 2A where Package “A” ( 20 ) is embedded within a higher level Package ( 22 ).
- the higher level Package may also contain its own data objects ( 21 ) as shown in the figure. This is possible because each Package in the hierarchy has its own set of PFVL attributes.
- a printed circuit board could be considered a high level Package comprised of various ASICs, resistors, capacitors and connectors.
- the ASICs on the board could be considered Packages themselves, where each ASIC Package is comprised of the underlying circuit designs.
- FIG. 2B contemplates two examples of how the:PFVL Paradigm can be implemented in actual applications.
- the first table ( 23 ) demonstrates a typical electrical engineering design environment comprised of design objects dispersed in the DMS.
- the primary design object is an MPEG design consisting of multiple versions of a schematic residing in the “dsgn_lib” design library.
- This library also contains a VHDL object for the MPEG design.
- the dsgn_lib library contains two Levels, Test and Prod. Versions of the MPEG schematic simultaneously exist at both Levels. Most of the objects are classified under the Universal Serial Bus (USB) Variance, except for a PCI Variant of the MPEG schematic.
- USB Universal Serial Bus
- the second DMS Table ( 24 ) in FIG. 2B shows how the same PFVL paradigm can be used to track objects and sub-assemblies in an automotive environment.
- Packages are used to denote the Cooling and Engine sub-assemblies as well as the Electro-Mechanical main assembly.
- Within each sub-assembly are one or more components described in the form of schematics, layouts and VHDL, and residing at quality levels QA 1 , and QA 2 . Also, some components exist under distinct Variances in order to accommodate two different automobile models.
- the top layer is the User Interface Layer ( 10 ).
- This layer makes possible such scenarios as sharing electrical and mechanical design information by acting as an environmental adapter.
- An example of such an adaptation is present in a large electronic design organization where several design groups need to share data among several libraries.
- a common DMS application in this scenario would be a Check-In operation which allows data to enter the DMS from a user's private work space. Since the DMS accommodates several design groups using numerous libraries, the DMS Check-In application's API requires one of the invocation parameters to be the Package.
- the User Interface Layer may employ a local “wrapper” or user utility which only requires the user to enter the name and type of design object being checked in. This wrapper then passes this information to the DMS Check-In application. It also supplies the sole library name as the Package as well as a hard-coded Level and Variance.
- the User Interface Layer can employ several methods such as, but not restricted to, wrappers, shell scripts, batch files, command line interfaces, graphical user interfaces, web browsers, menus, or voice activated systems, which would be customized to the user's environment or methodology.
- wrappers shell scripts
- batch files command line interfaces
- graphical user interfaces graphical user interfaces
- web browsers web browsers
- menus or voice activated systems
- our preferred embodiment contemplates the use of several layers which comprise the core architecture of the DMS. Spanning three of the layers are the DMS Managers ( 11 ). These are comprised of a plurality of functions, some of which belong to the DMS Application, Client/Server and Control Repository Access layers. By grouping these functions into isolated Managers with standardized interfaces, a great deal of modularity is achieved. Furthermore, these functions can be combined to form larger, more complex, applications. Consider the following portion of an example promotion application which illustrates one way to deploy a modular DMS:
- Manager functions are invoked to perform the necessary DMS operations. By combining these functions together in an algorithmic way, one can achieve highly complex DMS applications. Furthermore, one can see how modularity can be achieved using the if statements to test the Control Repository for existence of a particular Manager. This permits Managers to be installed or configured in a “plug-n-play” manner simply by setting switches in the Control Repository.
- a DMS vendor or supplier could then construct customized DM systems based on the customer's needs, simply by linking together the required modules. For example, customer “A” may only require basic data management services so the DMS provider would only link the object code from the Library, Package and Lock Managers into a “lite” version of the DMS. Customer “B”, on the other hand, may require use of applications involving aggregations (configurations) and Library Processing. This customer's DMS would link the object code from the Library, Package, Lock, Aggregation and Process Managers. Regardless of the implementation method, one skilled in the art can clearly envision the advantages afforded by such a system since enhancements or changes to functions in one Manager don't require the entire DMS to be recompiled, or redistributed.
- FIG. 1 also depicts the DMS Applications layer ( 12 ) which contains all the standard utilities that a user needs in order to interact with the DMS. This includes things like Check-In, Check-Out, Promotion, Locking, Library Searching, creating and tracking an aggregation or configuration, and setting or viewing process results. These utilities are described further is this disclosure as either functions residing within a particular Manager, or applications which consist of one or more functions, confined to a single Manager or involving a plurality of Managers. All functions and applications within this layer follow a consistent, standardized Application Program Interface which allows them to remain isolated from any user environment or methodology. This feature of the invention allows a single DMS to be deployed through several user groups performing similar or disparate work, yet having the need to share data between them.
- DMS Applications layer 12
- This feature of the invention allows a single DMS to be deployed through several user groups performing similar or disparate work, yet having the need to share data between them.
- All functions and applications communicate with the Control and Data Repositories through the Client/Server Interface ( 13 ) layer.
- This is an expandable or contractible layer designed to allow either communication between the various layers in a client-only environment or between clients and one or more servers existing anywhere in a global enterprise.
- the same set of Manager functions, DMS applications and Control Repository Access routines are utilized regardless of the client/server topology.
- Control Repository Access Layer consists of one or more “transactions” which perform simple or complex operations against the Control Repository (CR) itself. These can typically be categorized as adding information to the CR, modifying existing information in the CR, deleting information from the CR, or extracting (and potentially filtering) information out of the CR. Regardless of the type of operation, all transactions in this layer are written as if the Control Repository is a single virtual repository consisting of tables organized around the PFVL paradigm. This approach allows different physical implementations of the Control Repository. It even permits a plurality of physically different implementations to appear as a single virtual Control Repository.
- Our invention further contemplates a virtual Data Repository ( 15 ) comprised of one or more physical repositories.
- the underlying repositories can be a simple file management system such as the Distributed File System (DFS) or a simple directory structure organized on a hard or floppy disk.
- the data repository could be constructed using proprietary or commercially available storage engines or PDM products such as RCS, Sherpa, MetaPhase, SCCS, CMVC, and ClearCase.
- the present invention permits Automated Library Machines to be employed as Data Repositories. As shown in FIG. 1, all communication with the Data Repository is performed through the Client/Server Interface layer, which permits the Data Repository to be locally accessible to the client, or distributed anywhere in the global enterprise on a remotely accessible server.
- FIG. 3 depicts a complex Data Repository comprised of Data Repository “A” ( 30 ) which is a simple unix directory where the files in the DMS may reside.
- Data Repository “A” 30
- A Data Repository “A”
- B Data Repository “ 31 ) which is a commercially available PDM such as RCS or Sherpa.
- the operation can be accomplished by checking the data out of the old storage engine, checking it into the new one, and updating the associated Control Repository table which maps the File Reference number into a revision number. Since all information associated with the object is tracked by PFVL and File Reference number, the information is kept completely in tact even if the old and new storage engines use completely different revision control methods.
- revision number of the commercial storage engine plays the role of the File Reference number.
- Data Repository “C” ( 32 ) could be a physical location on a server accessible via a Universal Resource Locator (URL) on the World Wide Web (WWW).
- URL Universal Resource Locator
- WWW World Wide Web
- the PFVL Paradigm serves as the common storage model such that any client ( 33 ) can interact with the data.
- data is directed to the appropriate Data Repository through the use of the Data Repository Table ( 34 ). It clearly illustrates how the PFVL attributes can be used in any combination to segregate the data into one or more physical repositories.
- Repository “B” represents one of the commercial revision control engines such as RCS or Sherpa.
- Control Repository ( 17 ) which can be implemented using a multitude of methods, including, but not limited to, Table Formatted Files, Relational or Object Oriented Databases, or Meta-Data files in any format.
- Our invention also permits one or more of the above implementations to be used simultaneously to comprise a single virtual Control Repository. Regardless of the physical implementation of the Control Repository, all information is organized under the PFVL paradigm such that any entry in the repository directly or indirectly maps to one or more PFVLs. This permits users to access information about any object residing in any Package or library, at any Level or Variance regardless of whether that piece of information exists in a relational database, a simple ASCII file or a binary encoded MetaData file. Information can be freely reorganized or transplanted between different Control Repository implementations without the need to modify any DMS Applications, Manager functions or Control Repository Access transactions. Tables support underlying Manager functions and DMS Applications.
- a key player in enabling the aforementioned feature are the Conunand Translators ( 16 ) which interface between the Control Repository Access Layer and the Control Repository ( 17 ).
- Each physical implementation of the Control Repository would employ a unique Command Translator to map the generic Control Repository Access transactions into the appropriate command to satisfy the physical repository.
- Our invention contemplates the use of any syntax structure for the Control Repository Access (CRA) transactions.
- the syntax can be chosen to accommodate the physical embodiment of the DMS. The only requirement is that the syntax adheres to the PFVL paradigm. For example, in an homogenous environment where the entire Control Repository is implemented as a relational database, the CR Access transaction syntax might be structured in a manner similar to SQL commands. Thus, only a minor translation may be required prior to interfacing with the relational database.
- a heterogeneous environment with several physical implementations of the Control Repository may employ a much more generic CRA syntax based on a flexible programming structure more adept to multiple translations.
- this approach also enables a great deal of flexibility in upgrading the Control Repositories or permitting data from disparate sources to appear as one logical repository.
- a SQL database may be employed as the primary Control Repository which includes all information necessary to track each object in the DMS by File Reference, PFVL, physical location, etc.
- This repository may also contain a Part Number table for all the manufactured pieces of a product.
- PFVL File Reference
- This repository may also contain a Part Number table for all the manufactured pieces of a product.
- a Lotus Notes database containing service call or defect repair information organized by Part Number for the same product.
- Our invention would allow Control Repository Access transactions to be written, using an identical generic syntax, to extract design information about the part from the SQL database and repair actions from the Lotus Note database.
- the Command Translators would be responsible for mapping the generic transactions for the design information into a true SQL query, and the repair action transaction into a Notes extraction.
- Our invention contemplates an architectural layer dedicated to the various DMS Functions and Utilities that a user invokes to manipulate the Data Management System.
- Common functions found in this layer include, but aren't limited to, Check-In, Check-Out, Promote, Setting Locks, Checking authorities, etc.
- API application program interface
- FIG. 4 conveys the preferred embodiment of this layer.
- the DMS Applications Layer ( 41 ) is comprised of all the applications that enable a user to interact directly with the DMS.
- Each application consists of one or more application modules ( 42 ) which may or may not interact with the various Managers ( 44 ).
- FIG. 4 depicts various scenarios involving the interaction with the application modules:
- Non-Manager Interaction An application may desire to interface directly to the Control Repository ( 46 ) without the need to interact with any Managers.
- An example might be a function which extracts project management data from the Control Repository and displays it in a formatted report.
- An application may only need to interface with a single Manager in order to execute all the steps in the application's algorithm. For example, an application which associates an object to a problem fix number only requires functions within the Problem Fix/EC/PN Manager.
- a promotion algorithm may interface with the Authority Manager to determine if the user has the proper promote authorization. Next, it may execute Process Manager functions to determine if the object meets the necessary promotion criteria. Finally, it may interface with the Library Manager to perform the actual promotion to the next level.
- Control Repository Coupled with Manager Interaction Any combination of the above methods may be used to construct an application which interacts with one or more Managers in addition to the Control Repository. For instance, an application may query the Control Repository to see which Managers are currently installed in a user environment, and use that information to branch through various parts of the algorithm which interface with the Managers.
- FIG. 4 depicts one or more Manager Functions ( 43 ) which combine to form a library of utilities upon which applications can be constructed.
- Manager Functions 43
- FIG. 4 depicts one or more Manager Functions ( 43 ) which combine to form a library of utilities upon which applications can be constructed.
- the Problem Fix/EC/PN Manager contains:
- FIG. 4 also depicts an Application Program Interface ( 40 ) common to all applications and functions in the DMS Application Layer.
- the API is based on the PFVL paradigm. By requiring all the functions to conform to the PFVL paradigm they remain methodology independent while retaining the flexibility to be adapted to any user environment through the use of the User Interface Layer.
- Our preferred embodiment requires all functions in this layer to be invoked by passing Package, Filetype, Variance, and Level as the minimum amount of information. Additional information such as filename, iteration, or run-time options may also be supplied.
- Our embodiment also permits the wildcard character (*) to be used on any combination of PFVL attributes.
- a wildcard is passed in place of the Level, then all information matching the remaining PFVL attributes at all levels is accessable.
- the wildcard can be combined with a partial PFVL attribute in a similar manner.
- a level attribute of prod* would access all information matching the remaining PFVLs at any level beginning with prod.
- a placeholder such as the percent (%) character can be used to ignore any attribute.
- Certain DMS applications may not require information regarding all the PFVL attributes, so use of the % character allows every DMS application to use an identical API to facilitate interaction with the user environment. For example, the following API could be used to interface with all DMS applications regardless of their underlying function:
- the user interface layer can suppress or hard-code them prior to invoking the underlying DMS application.
- a user environment may exist such that variances aren't applicable and data only resides in two levels of a single package (library).
- the current process only permits users to check data into the DMS at the lowest level.
- the corresponding user interface may be a simple menu where the only two fields the user enters are the file name and file type.
- the underlying user interface code would automatically pass the sole package and level, and hard-code or suppress the variance to the DMS check-in API.
- the advantage to the present invention is in the event the use model changes to allow users to perform additional actions, such as checking data into the second level, only the user interface needs to be updated. Neither the underlying DMS applications nor the information in the Control Repository need to be updated.
- Our invention permits any combination of these functions, or any other functions in this or any other Manager, to be referenced by any application or by other functions in this or any other Manager.
- the modularity afforded by this approach results in novel implementation techniques.
- the present invention allows the various steps of our promotion algorithm to be broken down into modular pieces of code whereby some constitute Manager Functions while others comprise the promotion application.
- the Manager Functions tend to be small enough to lend themselves to conventional procedural programming techniques, the application code itself may or may not.
- FIGS. 5A and 5B describe an alternative method using state tables.
- FIG. 5A shows an example promotion algorithm implemented using State Table ( 51 ) which is comprised of 12 steps. This table illustrates a full promotion where each step interacts with one or more Manager functions, including steps 6 , 7 and 9 which interact with the Process Manager to invoke Library Processing. Each step has 2 Next State columns associated with it.
- the primary Next State column (labeled GOOD), indicates the next step which should be undertaken if the result of the present step is successful.
- the secondary Next State column (labeled BAD) indicates the state transition if the present step results in an unacceptable result.
- State Table ( 52 ) illustrates the ease by which the promotion application can be updated to eliminate the Library Processing. This is accomplished by simply changing the Next State columns for steps 4 , 5 and 8 . to bypass steps 6 , 7 and 9 .
- State Table ( 53 ) in FIG. 5B, demonstrates how the DMS application can be modified to completely omit steps 6 , 7 & 9 and renumber the remaining steps for simplicity.
- the present invention contemplates the use of a Client/Server Interface embedded between the DMS Application and Control Repository Access layers. All communication between the DMS applications and the Control Repository functions is performed through special interface routines. These routines are responsible for locating the proper Control Repository, making the connection, and passing the appropriate information to the underlying Control Repository Access function. This feature allows a completely scalable DMS ranging from a low-end DMS where the Control Repository is directly accessible from the user's client to a high-end enterprise DMS where the Control Repository can be literally spread across a plurality of worldwide servers. For the low-end implementation, the client/server routines simply pass the required information from the DMS application to the CR Access function, much like a parent module invoking an external function or subroutine. In the high-end scenario, the routine would locate the server where the appropriate CR resides, make the appropriate connection and pass the information to the CR function.
- the client/server interface In addition to controlling the interface between the DMS applications and Control Repository, the client/server interface also controls access to the Data Repository.
- a low-end system may exist whereby the data resides in a file system directly updateable by the user's client. For example, during a Check-In process, the client would physically copy the data from the source location to the actual data repository. This could be accomplished by providing write access to the data repository for all users, or writing a client/server routine which utilizes techniques such as Unix setuid bits to ensure that data can only be written to the repository via the proper DMS applications.
- the client/server routines could establish a connection with the server where the data repository resides, and employ the server to perform the appropriate file operation. This implementation lends itself to a more secure DMS since access to the data repository can be very tightly controlled, and user clients can not directly update the data repository outside of the DMS either intentionally or accidentally.
- the DMS applications( 12 ) and the Various Managers( 11 ) all communicate with the Data Repository( 15 ) and the Control Repository( 17 ) via the Client/Server Interface( 13 ).
- This interface is depicted in FIG. 7, where the DMS applications, the various Mangers and the CR interface layer is shown( 71 ).
- the respective Communications Services( 72 ) are invoked. These services support a variety of protocols including but not limited to those depicted in the ( 73 ) layer. Some of these services communicated either directly to the Data Servers( 75 ), through the network and or the severs depicted at the server layer ( 74 ).
- Automated Library Machines are employed in a “batch” environment which permits a large number of DMS operations to be queued and processed by these virtual machines.
- the Client/Server routines are responsible for creating work requests on the user's client and transmitting them to the appropriate ALM for processing.
- Use of ALMs also provides the advantage of breaking up large complex DMS applications into foreground and background pieces.
- the foreground portion runs on the user's client, then a work request is created and transmitted to the ALM through the Client/Server Interface.
- the ALM processes the background portion of the DMS operation, including all file manipulations. Since the foreground portion tends to comprise a series of checks as opposed to intensive computing, improved client throughput can be achieved by offloading the more compute intensive portions of the DMS application to the ALM.
- Control Repository Access Layer comprised of a library of functions or transactions which extract, add, modify or delete information from the Control Repository.
- DMS Application Layer There are two main advantages to separating this code from the functions comprising the DMS Application Layer:
- Control Repository can be replaced with a different physical embodiment without the need to alter any of the DMS applications or underlying Control Repository Access transactions.
- the administrator of the Control Repository need only update the command translation code to reflect the new physical embodiment.
- FIG. 6 illustrates an example whereby our invention employs command translators in a heterogeneous environment with two disparate physical Control Repositories which together comprise a single virtual Control Repository.
- the virtual Control Repository contains an authorization table and a financial results table.
- the Get_Auth ( 61 ) transaction is used to query information from the authorization table.
- the Get_Rslt ( 62 ) transaction is used to query financial results.
- PFVL Package, Filetype, Variance, Level
- the Get_Auth ( 61 ) transaction is then processed through Command Translator “A” ( 63 ) which performs a relatively simple remap of the authorization query into the appropriate SQL queries ( 64 ) to interface with the Relational Database ( 65 ) where the authority table resides.
- the Get_Rslt ( 62 ) transaction is processed through Command Translator “B” ( 66 ).
- the financial results table may reside in an extremely secure physical Control Repository such as cryptographic data storage product.
- Command Translator “B” would need to locate the proper Meta Data file, perform the necessary file read operation, decrypt the data, format it properly and return it to the calling application.
- One of the key advantages contemplated by this invention is that the DMS application writer only needs to reference the available transactions and their parameter lists. Once the application is written, it can remain intact, even if the underlying physical Control Repositories are further distributed, combined or in any other way reorganized.
- the aforementioned example also demonstrates another advantage of the present invention.
- the users would obtain authorization to query financial data by manually entering their employee identification.
- a pervasive device such as a badge reader or biomedical device such as retina or iris scanner.
- a generic API for the Control Repository Access functions one could appreciate how much easier it would be to interface with nontraditional devices such as badge readers or retina scanners since they only need to provide information to be passed to the Command Translator. Since the device doesn't directly communicate with the Control Repository it can employ a relatively simple protocol such as TCP/IP or RS232, and doesn't need to generate complex commands such as SQL queries.
- FIGS. 8A and 8B illustrate how the various architectural layers can be used to achieve greater overall processing efficiency. In this example, it necessitates the use of a single Control Repository Access transaction to perform multiple repository accesses.
- Step 80 displays the File Lock menu which can be any type of text based or graphical menu in which the user enters the necessary Package, Filetype, Variance, Level and Filename of the object they wish to update.
- This step could utilize code similar to that previously disclosed to test for the existence of various Managers and tailor the menu accordingly.
- Step 81 sets up a File Loop to perform the desired action for each file.
- Step 82 represents the Control Repository Access transaction for setting an ownership lock.
- Step 83 displays the results of the lock setting operation back to the user.
- the example employs a client/server implementation such that the DMS application submits the lockset CRA transaction through one of the client/server interface means described in FIG. 7 .
- the example methodology requires that only authorized users of the DMS may establish ownership locks.
- the layered architecture disclosed in the present invention permits a very efficient implementation of such an example environment.
- the right side of FIG. 8A ( 84 ) depicts the internal steps comprising the CRA lockset transaction ( 82 ).
- Our invention contemplates the use of several different types of locks on data objects in the DMS, therefore the Lock Menu ( 80 ) may offer the user a choice of locks. Therefore, the first step in the internal lockset transaction ( 84 ) is Step 85 which tests to see if the type of lock desired is an ownership lock (file check-out).
- Step 86 queries the Authority table to ensure the user is authorized to update the requested file.
- the virtual Authority table ( 88 ) is shown in FIG. 8 B.
- Step 87 then performs the necessary updates to the Lock table ( 89 ) also shown in FIG. 8 B. Since steps 86 and 87 are both required for all File Check Out operations, it's more efficient to combine them into a single Control Repository Access transaction. This way, all the overhead associated with the client/server communication is only
- both tables are structured identically, but this does not imply they reside in the same physical Control Repository. In fact, it's not possible using FIG. 8B to discern how these tables are physically organized, nor if they reside in the same or separate physical embodiments.
- the present invention permits the data comprising a virtual Control Repository to be organized in any physical arrangement desirable, and furthermore, one or more of these physical Control Repositories can be accessed from the same CR access transaction. Conversely, multiple CR access transactions can access data from the same physical Control Repository.
- the existence of Command Translators in our invention permits any conceivable arrangement of Control Repository Access transactions to interact with any organization of one or more physical Control Repositories.
- this example demonstrates a further advantage of having the DMS applications architecturally segregated from the CRA transactions. If the user desires to set ownership locks on all the files of a given Type in a given Level and Variance of a particular Package, then the File Loop ( 81 ) could recognize this and rather than initiating a multitude of CRA transactions for each selected file, it could generate a single transaction substituting a * for the Filename.
- the aforementioned example shows how a single CRA transaction may require a plurality of control repository accesses.
- our invention does not mandate the quantitative relationship between accesses and the underlying command translators.
- the authority check in Step 86 and the lock table update in Step 87 will both employ command translators, but said translation code can be implemented in any desirable embodiment.
- Each step may call an independent translator implemented as an independent entity, or both translators could be embodied together within the same entity.
- Our invention even permits the translation code to be incorporated directly into the Control Repository Access transaction code as subroutines, methods, etc.
- FIG. 9A the illustration depicts a heterogeneous physical Control Repository comprised of an Authorization table physically stored on a server ( 91 ) using a conventional database application such as DB/2, Oracle, Access, Notes, or even a flat file.
- a conventional database application such as DB/2, Oracle, Access, Notes, or even a flat file.
- the Lock table is physically implemented as a plurality of .LCK files resident in a directory structure ( 92 ) mapped to the PFVL architecture.
- the MPEG.LCK file denotes the existence of a lock on this particular file.
- the contents of the MPEG.LCK file contain other information such as the identity of the lock owner, and the type of lock.
- a virtual Lock table such as the one depicted in FIG. 8 B.
- FIG. 9B depicts an example Control Repository Access transaction ( 93 ).
- the syntax of the transaction is purely arbitrary and can be chosen to accommodate the environment.
- the Perl code Command Translator ( 94 ) on the left side of FIG. 9B shows how CR Access transaction ( 93 ), which treats the information as if it's located in rows and fields of a table, is translated into the file I/O routines necessary to manifest the physical embodiment depicted in the PFVL-based directory structure ( 92 ) of FIG. 9 A.
- the PFVL portion of the argument list is used to construct the path down to the file being locked.
- the third step takes into account the possibility that a PFVL attribute (such as the Variance) may be absent in the physical embodiment of the DMS. As stated earlier in this disclosure, absence of a PFVL attribute is denoted with a key character such as “%”. In the event a “%” is passed in it means the directory corresponding to that PFVL attribute is missing.
- the fourth step writes the LCK file containing the type of lock and identity of the owner.
- Perl code could be easily implemented in virtually any programming language such as C, Java, Basic, Rexx, Pascal, etc. and it should be noted that Perl was selected for illustration purposes only.
- One of the key advantages of the present invention is the ability to easily replace the physical embodiment of the Lock table shown in the PFVL-based directory structure ( 92 ) with a more centralized physical embodiment such as the traditional database server ( 91 ) managing the Authority table. This is accomplished by simply replacing the Perl Command Translator ( 93 ) with the appropriate database translator such as the SQL Translator ( 95 ) shown on the right side of FIG. 9 B.
- the SQL Translator ( 95 ) performs the same function as the Perl Translator ( 93 ) by using three steps. The first two are combined into an atomic database operation which updates the reference ID of the Lock Table by incrementing the last known reference ID and returning the newly incremented value into the ref variable.
- the third SQL statement uses this ref variable to insert the PFVL, owner and lock type information into the newly created row of the table.
- the syntax resembles a typical subroutine or function call where the information is passed as a series of arguments or parameters where the order of the parameters is determined in advance.
- this same transaction could use any other imaginable syntax including but not limited to the following examples:
- the present invention affords the opportunity to select the syntax of the Control Repository Access transactions to best accommodate the implementation of the DMS. For example, a DMS which is predominantly implemented as SQL databases would likely choose a different syntax from a DMS largely constructed out of C code. Furthermore, our invention doesn't mandate that all Control Repository Access transactions follow the same syntax. Although the preferred embodiment demonstrates the advantages of using a single syntax to create a uniformity and consistency across the entire DMS, our invention recognizes where there may be circumstances that warrant use of a plurality of syntaxes for different groups of CR access functions.
- the virtual Control Repository is comprised of three physical repositories such that some of the information is stored in a relational database, some of it is organized as simple ASCII files in a file system and the remainder resides on a web server.
- our invention permits the administrator to have three sets of CR access transactions. The first could use a “SQL-like” syntax, the second a simple parameterized list, and the third might use Extensive Markup Language (XML).
- XML Extensive Markup Language
- the disadvantage to this approach is it requires the DMS application developers to use a multitude of CR access syntaxes. However, this may not be a major concern if the DMS applications tend to access data only within a particular physical Control Repository. On the other hand a considerable performance advantage may be obtained by simplifying the Command Translation code. As previously stated, the present invention simply requires that whatever syntax is used permits any and all PFVL attributes to be expressed.
Abstract
Description
Package | An arbitrary grouping of data objects that has some | ||
relationship or common bond with each other. Each | |||
package contains one or more variances. | |||
Variance | One or more objects within a package that, when | ||
combined with the remaining objects in the same | |||
Variance or from one or more dependent Variances, | |||
comprise a coherent and meaningful collection of | |||
objects | |||
Level | A collection of objects, within a Variance, that have | ||
achieved some arbitrary degree of quality. | |||
Filetype | A collection of objects sharing the same data type or | ||
format. | |||
Version | An iteration of a data object. | ||
Claims (3)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/320,963 US6654747B1 (en) | 1997-12-02 | 1999-05-27 | Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/982,724 US5966707A (en) | 1997-12-02 | 1997-12-02 | Method for managing a plurality of data processes residing in heterogeneous data repositories |
US09/320,963 US6654747B1 (en) | 1997-12-02 | 1999-05-27 | Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/982,724 Continuation-In-Part US5966707A (en) | 1997-12-02 | 1997-12-02 | Method for managing a plurality of data processes residing in heterogeneous data repositories |
Publications (1)
Publication Number | Publication Date |
---|---|
US6654747B1 true US6654747B1 (en) | 2003-11-25 |
Family
ID=46279458
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/320,963 Expired - Lifetime US6654747B1 (en) | 1997-12-02 | 1999-05-27 | Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions |
Country Status (1)
Country | Link |
---|---|
US (1) | US6654747B1 (en) |
Cited By (96)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020040289A1 (en) * | 2000-10-02 | 2002-04-04 | Tadashi Ohashi | Method and system for retrieving information, and computer product |
US20020088114A1 (en) * | 2001-01-11 | 2002-07-11 | Jessup Richard J. | Automation apparatus for installing and removing a metal finishing barrel locking cover |
US20020095429A1 (en) * | 2001-01-12 | 2002-07-18 | Lg Electronics Inc. | Method of generating digital item for an electronic commerce activities |
US20020184214A1 (en) * | 2001-03-14 | 2002-12-05 | Microsoft Corporation | Accessing heterogeneous data in a standardized manner |
US20030004935A1 (en) * | 2001-06-29 | 2003-01-02 | Wilmot Gerald Johann | Method and system for long-term update and edit control in a database system |
US20030065662A1 (en) * | 2001-08-13 | 2003-04-03 | Jasmin Cosic | Universal data management interface |
US20030074358A1 (en) * | 2001-09-24 | 2003-04-17 | Siamak Sarbaz | Integration, management and processing of network data from disparate sources |
US20030084056A1 (en) * | 2001-10-26 | 2003-05-01 | Deanna Robert | System for development, management and operation of distributed clients and servers |
US20030091057A1 (en) * | 2001-11-09 | 2003-05-15 | Takuya Miyashita | Method and system for transmitting data in two steps by using data storage provided in data transmission equipment in network |
US20030233249A1 (en) * | 2002-03-25 | 2003-12-18 | Walsh John G. | Method and system for enterprise business process management |
US6738781B1 (en) * | 2000-06-28 | 2004-05-18 | Cisco Technology, Inc. | Generic command interface for multiple executable routines having character-based command tree |
US6792475B1 (en) * | 2000-06-23 | 2004-09-14 | Microsoft Corporation | System and method for facilitating the design of a website |
US20040205066A1 (en) * | 2003-04-08 | 2004-10-14 | International Business Machines Corporation | System and method for a multi-level locking hierarchy in a database with multi-dimensional clustering |
US20040210854A1 (en) * | 2001-12-10 | 2004-10-21 | Mentor Graphics Corporation | Parellel electronic design automation: shared simultaneous editing |
US20040225988A1 (en) * | 2001-12-10 | 2004-11-11 | Mentor Graphics Corporation | Protection boundaries in a parallel printed circuit board design environment |
US20040230557A1 (en) * | 2003-02-28 | 2004-11-18 | Bales Christopher E. | Systems and methods for context-sensitive editing |
US20040230917A1 (en) * | 2003-02-28 | 2004-11-18 | Bales Christopher E. | Systems and methods for navigating a graphical hierarchy |
US20050044518A1 (en) * | 2001-12-10 | 2005-02-24 | Mentor Graphics Corporation | Reservation of design elements in a parallel printed circuit board design environment |
US20050065922A1 (en) * | 2000-04-27 | 2005-03-24 | Todd Miller | Method and system for retrieving search results from multiple disparate databases |
US20050108316A1 (en) * | 2003-11-18 | 2005-05-19 | Sbc Knowledge Ventures, L.P. | Methods and systems for organizing related communications |
US20050114201A1 (en) * | 2002-03-25 | 2005-05-26 | Technology Center | Method and system for managing a plurality of enterprise business systems |
US20050114821A1 (en) * | 2003-11-21 | 2005-05-26 | Mentor Graphics Corporation | Distributed autorouting of conductive paths |
US20050114865A1 (en) * | 2003-11-21 | 2005-05-26 | Mentor Graphics Corporation | Integrating multiple electronic design applications |
US20050125794A1 (en) * | 2003-12-08 | 2005-06-09 | De Groot Erik | Ensure a consistent control system configuration methodolgy through an enforceable user defined development life cycle |
US20050187978A1 (en) * | 2001-10-24 | 2005-08-25 | Bea Systems, Inc. | System and method for portal rendering |
US20050201532A1 (en) * | 2004-03-09 | 2005-09-15 | Sbc Knowledge Ventures, L.P. | Network-based voice activated auto-attendant service with B2B connectors |
US20050228816A1 (en) * | 2004-04-13 | 2005-10-13 | Bea Systems, Inc. | System and method for content type versions |
US20050251505A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for information lifecycle workflow integration |
US20050251504A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for custom content lifecycles |
US20050251502A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for virtual content repository entitlements |
US20050257247A1 (en) * | 1998-10-28 | 2005-11-17 | Bea Systems, Inc. | System and method for maintaining security in a distributed computer network |
US6980996B1 (en) * | 2000-06-28 | 2005-12-27 | Cisco Technology, Inc. | Generic command interface for multiple executable routines having character-based command tree |
US20060020646A1 (en) * | 2004-07-26 | 2006-01-26 | Philip Tee | Method and system for managing data |
US20060020641A1 (en) * | 2002-03-25 | 2006-01-26 | Data Quality Solutions | Business process management system and method |
WO2006024223A1 (en) * | 2004-08-31 | 2006-03-09 | China Unionpay | A new type bankcard transaction exchange system |
US20060095882A1 (en) * | 2004-09-08 | 2006-05-04 | Mentor Graphics Corporation | Distributed electronic design automation environment |
US20060101368A1 (en) * | 2004-09-08 | 2006-05-11 | Mentor Graphics Corporation | Distributed electronic design automation environment |
US20060206494A1 (en) * | 2001-09-07 | 2006-09-14 | Rahim Ibrahim | Compensating for unavailability in a storage virtualization system |
US7178153B1 (en) * | 2002-05-10 | 2007-02-13 | Oracle International Corporation | Method and mechanism for implementing an access interface infrastructure |
US7194538B1 (en) | 2002-06-04 | 2007-03-20 | Veritas Operating Corporation | Storage area network (SAN) management system for discovering SAN components using a SAN management server |
US20070073809A1 (en) * | 2005-09-13 | 2007-03-29 | Mentor Graphics Corporation | Distributed electronic design automation architecture |
US7240076B2 (en) | 2004-04-13 | 2007-07-03 | Bea Systems, Inc. | System and method for providing a lifecycle for information in a virtual content repository |
US7246138B2 (en) | 2004-04-13 | 2007-07-17 | Bea Systems, Inc. | System and method for content lifecycles in a virtual content repository that integrates a plurality of content repositories |
US20070198457A1 (en) * | 2006-02-06 | 2007-08-23 | Microsoft Corporation | Accessing and manipulating data in a data flow graph |
US7284271B2 (en) | 2001-03-14 | 2007-10-16 | Microsoft Corporation | Authorizing a requesting entity to operate upon data structures |
US7296027B2 (en) | 2003-08-06 | 2007-11-13 | Sbc Knowledge Ventures, L.P. | Rhetorical content management with tone and audience profiles |
US20080059952A1 (en) * | 2006-08-29 | 2008-03-06 | International Business Machines Corporation | Method for Replicating and Synchronizing a Plurality of Physical Instances with a Logical Master |
US20080154975A1 (en) * | 2004-06-25 | 2008-06-26 | International Business Machines Corporation | Automated data model extension through data crawler approach |
US7401338B1 (en) * | 2002-09-27 | 2008-07-15 | Symantec Operating Corporation | System and method for an access layer application programming interface for managing heterogeneous components of a storage area network |
US7403987B1 (en) | 2001-06-29 | 2008-07-22 | Symantec Operating Corporation | Transactional SAN management |
US7426548B2 (en) | 2002-05-01 | 2008-09-16 | Bea Systems, Inc. | Enterprise application platform |
US20080301641A1 (en) * | 2007-05-30 | 2008-12-04 | Karunakar Bojjireddy | Management of Heterogeneous Software Artifacts Through a Common Representation |
US7487207B2 (en) | 2000-09-28 | 2009-02-03 | Bea Systems, Inc. | System and method for determining the functionality of a software application based on nodes within the software application and transitions between the nodes |
US20090077478A1 (en) * | 2007-09-18 | 2009-03-19 | International Business Machines Corporation | Arrangements for managing processing components using a graphical user interface |
US20090073896A1 (en) * | 2007-09-18 | 2009-03-19 | International Business Machines Corporation | Arrangements for auto-merging and auto-partitioning processing components |
US20090094114A1 (en) * | 2007-10-03 | 2009-04-09 | Rice Daniel J | Systems and methods for optimized addressable advertising |
US7539747B2 (en) | 2001-03-14 | 2009-05-26 | Microsoft Corporation | Schema-based context service |
US20090138524A1 (en) * | 2002-09-13 | 2009-05-28 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US7577639B2 (en) | 2005-12-12 | 2009-08-18 | At&T Intellectual Property I, L.P. | Method for analyzing, deconstructing, reconstructing, and repurposing rhetorical content |
US20090210387A1 (en) * | 2008-02-20 | 2009-08-20 | International Business Machines Corporation | System and method for providing a common instruction table |
US7653930B2 (en) | 2003-02-14 | 2010-01-26 | Bea Systems, Inc. | Method for role and resource policy management optimization |
US20100050147A1 (en) * | 2006-12-14 | 2010-02-25 | Satin Ip Technologies | Method and device providing integrated circuit design assistance |
US7673323B1 (en) | 1998-10-28 | 2010-03-02 | Bea Systems, Inc. | System and method for maintaining security in a distributed computer network |
US20100058277A1 (en) * | 2008-08-28 | 2010-03-04 | Srinath Anantharaman | Method and system for organizing data generated by electronic design automation tools |
US7725560B2 (en) | 2002-05-01 | 2010-05-25 | Bea Systems Inc. | Web service-enabled portlet wizard |
US7752205B2 (en) | 2005-09-26 | 2010-07-06 | Bea Systems, Inc. | Method and system for interacting with a virtual content repository |
US7774601B2 (en) | 2004-04-06 | 2010-08-10 | Bea Systems, Inc. | Method for delegated administration |
US7810036B2 (en) | 2003-02-28 | 2010-10-05 | Bea Systems, Inc. | Systems and methods for personalizing a portal |
US7818344B2 (en) | 2005-09-26 | 2010-10-19 | Bea Systems, Inc. | System and method for providing nested types for content management |
US7840614B2 (en) | 2003-02-20 | 2010-11-23 | Bea Systems, Inc. | Virtual content repository application program interface |
US7885256B1 (en) | 2003-05-30 | 2011-02-08 | Symantec Operating Corporation | SAN fabric discovery |
US7886031B1 (en) | 2002-06-04 | 2011-02-08 | Symantec Operating Corporation | SAN configuration utility |
US7917537B2 (en) | 2005-09-26 | 2011-03-29 | Oracle International Corporation | System and method for providing link property types for content management |
US7925758B1 (en) | 2006-11-09 | 2011-04-12 | Symantec Operating Corporation | Fibre accelerated pipe data transport |
US7925246B2 (en) | 2002-12-11 | 2011-04-12 | Leader Technologies, Inc. | Radio/telephony interoperability system |
US7953734B2 (en) | 2005-09-26 | 2011-05-31 | Oracle International Corporation | System and method for providing SPI extensions for content management system |
US7992189B2 (en) | 2003-02-14 | 2011-08-02 | Oracle International Corporation | System and method for hierarchical role-based entitlements |
US20110208553A1 (en) * | 1998-12-18 | 2011-08-25 | Richard Frankland | Integrated change management unit |
US8019849B1 (en) | 2002-09-13 | 2011-09-13 | Symantec Operating Corporation | Server-side storage area network management interface |
US20110238638A1 (en) * | 2010-03-29 | 2011-09-29 | International Business Machines Corporation | Methods and systems for obtaining and correcting an index record for a virtual storage access method keyed sequential data set |
US8060630B1 (en) | 2002-11-27 | 2011-11-15 | Symantec Operating Corporation | Creating and configuring virtual fabrics in storage area networks |
US8099779B2 (en) | 2003-02-20 | 2012-01-17 | Oracle International Corporation | Federated management of content repositories |
US8195714B2 (en) | 2002-12-11 | 2012-06-05 | Leaper Technologies, Inc. | Context instantiated application protocol |
CN102890810A (en) * | 2004-08-31 | 2013-01-23 | 中国银联股份有限公司 | Novel bank card transaction exchange system |
US8463852B2 (en) | 2006-10-06 | 2013-06-11 | Oracle International Corporation | Groupware portlets for integrating a portal with groupware systems |
US8572576B2 (en) | 2001-03-14 | 2013-10-29 | Microsoft Corporation | Executing dynamically assigned functions while providing services |
US8711864B1 (en) | 2010-03-30 | 2014-04-29 | Chengdu Huawei Symantec Technologies Co., Ltd. | System and method for supporting fibre channel over ethernet communication |
US9092825B2 (en) | 2000-06-28 | 2015-07-28 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US20150286974A1 (en) * | 2014-04-02 | 2015-10-08 | Prosperoware, LLC | Methods and System for Verb-Based Project Management |
US9460421B2 (en) | 2001-03-14 | 2016-10-04 | Microsoft Technology Licensing, Llc | Distributing notifications to multiple recipients via a broadcast list |
US9542701B2 (en) | 2000-05-18 | 2017-01-10 | S. Aqua Semiconductor, Llc | Providing commercial enterprise data with map data |
US9804788B2 (en) | 2001-09-07 | 2017-10-31 | Netapp, Inc. | Method and apparatus for transferring information between different streaming protocols at wire speed |
US9886309B2 (en) | 2002-06-28 | 2018-02-06 | Microsoft Technology Licensing, Llc | Identity-based distributed computing for device resources |
US20190026000A1 (en) * | 2014-04-02 | 2019-01-24 | Prosperoware Llc | Management of ordered lists of data objects |
US11055310B2 (en) | 2017-12-04 | 2021-07-06 | Bank Of America Corporation | SQL server integration services (SSIS) package analyzer |
US20220171781A1 (en) * | 2004-06-18 | 2022-06-02 | Google Llc | System And Method For Analyzing Data Records |
Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5191534A (en) * | 1990-08-21 | 1993-03-02 | International Business Machines Corporation | Engineering and manufacturing change control mechanism |
US5201047A (en) * | 1989-12-21 | 1993-04-06 | International Business Machines Corporation | Attribute-based classification and retrieval system |
US5216612A (en) * | 1990-07-16 | 1993-06-01 | R. J. Reynolds Tobacco Company | Intelligent computer integrated maintenance system and method |
US5295222A (en) * | 1989-11-30 | 1994-03-15 | Seer Technologies, Inc. | Computer-aided software engineering facility |
US5317729A (en) * | 1990-10-24 | 1994-05-31 | International Business Machines Corporation | Method for the storage of multi-versioned data with retrieval based on searched query |
US5321605A (en) * | 1990-06-01 | 1994-06-14 | Motorola, Inc. | Process flow information management system |
US5333316A (en) * | 1991-08-16 | 1994-07-26 | International Business Machines Corporation | Locking and row by row modification of a database stored in a single master table and multiple virtual tables of a plurality of concurrent users |
US5333312A (en) * | 1990-06-21 | 1994-07-26 | International Business Machines Corp. | Synchronous and asynchronous copying of a document into a folder in a target library |
US5333315A (en) * | 1991-06-27 | 1994-07-26 | Digital Equipment Corporation | System of device independent file directories using a tag between the directories and file descriptors that migrate with the files |
US5418949A (en) * | 1992-09-30 | 1995-05-23 | Fujitsu Limited | Page map, metamap, and relation group file management supervised by operation means for allocating, storing, and searching friendly and exclusive data items |
US5463555A (en) * | 1993-09-28 | 1995-10-31 | The Dow Chemical Company | System and method for integrating a business environment with a process control environment |
US5473608A (en) * | 1991-04-11 | 1995-12-05 | Galileo International Partnership | Method and apparatus for managing and facilitating communications in a distributed heterogeneous network |
US5530857A (en) * | 1987-07-02 | 1996-06-25 | Bull, S.A. | Automated shop floor control system and method of operation thereof |
US5535322A (en) * | 1992-10-27 | 1996-07-09 | International Business Machines Corporation | Data processing system with improved work flow system and method |
US5544051A (en) * | 1993-09-17 | 1996-08-06 | Digital Equipment Corporation | Document management system using multiple threaded processes and having asynchronous repository responses and no busy cursor |
US5586039A (en) * | 1993-03-29 | 1996-12-17 | Texas Instruments Incorporated | Computer-aided manufacturing support method and system for specifying relationships and dependencies between process type components |
US5668958A (en) * | 1995-09-12 | 1997-09-16 | International Business Machines Corporation | Heterogeneous filing system with common API and reconciled file management rules |
US5752247A (en) * | 1996-07-30 | 1998-05-12 | Hewlett-Packard Company | Log access interface between a network and repositories |
US5787437A (en) * | 1996-10-29 | 1998-07-28 | Hewlett-Packard Company | Method and apparatus for shared management information via a common repository |
US5805899A (en) * | 1995-07-06 | 1998-09-08 | Sun Microsystems, Inc. | Method and apparatus for internal versioning of objects using a mapfile |
US5809497A (en) * | 1995-05-26 | 1998-09-15 | Starfish Software, Inc. | Databank system with methods for efficiently storing non uniforms data records |
-
1999
- 1999-05-27 US US09/320,963 patent/US6654747B1/en not_active Expired - Lifetime
Patent Citations (21)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5530857A (en) * | 1987-07-02 | 1996-06-25 | Bull, S.A. | Automated shop floor control system and method of operation thereof |
US5295222A (en) * | 1989-11-30 | 1994-03-15 | Seer Technologies, Inc. | Computer-aided software engineering facility |
US5201047A (en) * | 1989-12-21 | 1993-04-06 | International Business Machines Corporation | Attribute-based classification and retrieval system |
US5321605A (en) * | 1990-06-01 | 1994-06-14 | Motorola, Inc. | Process flow information management system |
US5333312A (en) * | 1990-06-21 | 1994-07-26 | International Business Machines Corp. | Synchronous and asynchronous copying of a document into a folder in a target library |
US5216612A (en) * | 1990-07-16 | 1993-06-01 | R. J. Reynolds Tobacco Company | Intelligent computer integrated maintenance system and method |
US5191534A (en) * | 1990-08-21 | 1993-03-02 | International Business Machines Corporation | Engineering and manufacturing change control mechanism |
US5317729A (en) * | 1990-10-24 | 1994-05-31 | International Business Machines Corporation | Method for the storage of multi-versioned data with retrieval based on searched query |
US5473608A (en) * | 1991-04-11 | 1995-12-05 | Galileo International Partnership | Method and apparatus for managing and facilitating communications in a distributed heterogeneous network |
US5333315A (en) * | 1991-06-27 | 1994-07-26 | Digital Equipment Corporation | System of device independent file directories using a tag between the directories and file descriptors that migrate with the files |
US5333316A (en) * | 1991-08-16 | 1994-07-26 | International Business Machines Corporation | Locking and row by row modification of a database stored in a single master table and multiple virtual tables of a plurality of concurrent users |
US5418949A (en) * | 1992-09-30 | 1995-05-23 | Fujitsu Limited | Page map, metamap, and relation group file management supervised by operation means for allocating, storing, and searching friendly and exclusive data items |
US5535322A (en) * | 1992-10-27 | 1996-07-09 | International Business Machines Corporation | Data processing system with improved work flow system and method |
US5586039A (en) * | 1993-03-29 | 1996-12-17 | Texas Instruments Incorporated | Computer-aided manufacturing support method and system for specifying relationships and dependencies between process type components |
US5544051A (en) * | 1993-09-17 | 1996-08-06 | Digital Equipment Corporation | Document management system using multiple threaded processes and having asynchronous repository responses and no busy cursor |
US5463555A (en) * | 1993-09-28 | 1995-10-31 | The Dow Chemical Company | System and method for integrating a business environment with a process control environment |
US5809497A (en) * | 1995-05-26 | 1998-09-15 | Starfish Software, Inc. | Databank system with methods for efficiently storing non uniforms data records |
US5805899A (en) * | 1995-07-06 | 1998-09-08 | Sun Microsystems, Inc. | Method and apparatus for internal versioning of objects using a mapfile |
US5668958A (en) * | 1995-09-12 | 1997-09-16 | International Business Machines Corporation | Heterogeneous filing system with common API and reconciled file management rules |
US5752247A (en) * | 1996-07-30 | 1998-05-12 | Hewlett-Packard Company | Log access interface between a network and repositories |
US5787437A (en) * | 1996-10-29 | 1998-07-28 | Hewlett-Packard Company | Method and apparatus for shared management information via a common repository |
Cited By (183)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20060031237A1 (en) * | 1998-03-30 | 2006-02-09 | Deanna Robert | System for development, management and operation of distributed clients and servers |
US7529767B2 (en) * | 1998-03-30 | 2009-05-05 | Zeosoft Technology Group, Inc. | System for development, management and operation of distributed clients and servers |
US7318237B2 (en) | 1998-10-28 | 2008-01-08 | Bea Systems, Inc. | System and method for maintaining security in a distributed computer network |
US20050257247A1 (en) * | 1998-10-28 | 2005-11-17 | Bea Systems, Inc. | System and method for maintaining security in a distributed computer network |
US7673323B1 (en) | 1998-10-28 | 2010-03-02 | Bea Systems, Inc. | System and method for maintaining security in a distributed computer network |
US9542686B2 (en) | 1998-12-18 | 2017-01-10 | Applications In Internet Time, Llc | Integrated change management unit |
US20110208553A1 (en) * | 1998-12-18 | 2011-08-25 | Richard Frankland | Integrated change management unit |
US8484111B2 (en) | 1998-12-18 | 2013-07-09 | Applications In Internet Time, Llc | Integrated change management unit |
US10616286B2 (en) | 1998-12-18 | 2020-04-07 | Applications In Internet Time LLC | Integrated change management unit |
US20050065922A1 (en) * | 2000-04-27 | 2005-03-24 | Todd Miller | Method and system for retrieving search results from multiple disparate databases |
US9542701B2 (en) | 2000-05-18 | 2017-01-10 | S. Aqua Semiconductor, Llc | Providing commercial enterprise data with map data |
US6792475B1 (en) * | 2000-06-23 | 2004-09-14 | Microsoft Corporation | System and method for facilitating the design of a website |
US7287215B2 (en) | 2000-06-23 | 2007-10-23 | Microsoft Corporation | System and method for facilitating the design of a website |
US20050028081A1 (en) * | 2000-06-23 | 2005-02-03 | Microsoft Corporation | System and method for facilitating the design of a website |
US10290008B2 (en) | 2000-06-28 | 2019-05-14 | Buymetrics, Inc. | Automated system for adapting market data and producing metric values |
US7047526B1 (en) * | 2000-06-28 | 2006-05-16 | Cisco Technology, Inc. | Generic command interface for multiple executable routines |
US9710856B2 (en) | 2000-06-28 | 2017-07-18 | Buymetrics, Inc. | System and method for adapting market data and evaluating unequal offers |
US9092825B2 (en) | 2000-06-28 | 2015-07-28 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US9418371B2 (en) | 2000-06-28 | 2016-08-16 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US6738781B1 (en) * | 2000-06-28 | 2004-05-18 | Cisco Technology, Inc. | Generic command interface for multiple executable routines having character-based command tree |
US10262307B2 (en) | 2000-06-28 | 2019-04-16 | Buymetrics, Inc. | Automated system for adapting market data for transaction cost analysis |
US9754244B2 (en) | 2000-06-28 | 2017-09-05 | Buymetrics, Inc. | System and method for adapting market data and evaluating the market value of transactions |
US10055719B2 (en) | 2000-06-28 | 2018-08-21 | Buymetrics, Inc. | Automated system and method for adapting market data and evaluating user-specified configurations |
US9412117B2 (en) | 2000-06-28 | 2016-08-09 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US9904913B2 (en) | 2000-06-28 | 2018-02-27 | Buymetrics, Inc. | Automated system for adapting metric data for use in a transaction-specific analysis or evaluation |
US9524495B1 (en) | 2000-06-28 | 2016-12-20 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US9576296B2 (en) | 2000-06-28 | 2017-02-21 | Buymetrics, Inc. | Automated system for adapting market data and evaluating performance in transactions |
US9542689B2 (en) | 2000-06-28 | 2017-01-10 | Buymetrics, Inc. | Automated system for adapting market data and evaluating the market value of items |
US6980996B1 (en) * | 2000-06-28 | 2005-12-27 | Cisco Technology, Inc. | Generic command interface for multiple executable routines having character-based command tree |
US7487207B2 (en) | 2000-09-28 | 2009-02-03 | Bea Systems, Inc. | System and method for determining the functionality of a software application based on nodes within the software application and transitions between the nodes |
US20020040289A1 (en) * | 2000-10-02 | 2002-04-04 | Tadashi Ohashi | Method and system for retrieving information, and computer product |
US7225221B2 (en) * | 2000-10-02 | 2007-05-29 | Fujitsu Limited | Method and system for retrieving information, and computer product |
US20020088114A1 (en) * | 2001-01-11 | 2002-07-11 | Jessup Richard J. | Automation apparatus for installing and removing a metal finishing barrel locking cover |
US20020095429A1 (en) * | 2001-01-12 | 2002-07-18 | Lg Electronics Inc. | Method of generating digital item for an electronic commerce activities |
US8572576B2 (en) | 2001-03-14 | 2013-10-29 | Microsoft Corporation | Executing dynamically assigned functions while providing services |
US7136859B2 (en) * | 2001-03-14 | 2006-11-14 | Microsoft Corporation | Accessing heterogeneous data in a standardized manner |
US20020184214A1 (en) * | 2001-03-14 | 2002-12-05 | Microsoft Corporation | Accessing heterogeneous data in a standardized manner |
US7539747B2 (en) | 2001-03-14 | 2009-05-26 | Microsoft Corporation | Schema-based context service |
US7284271B2 (en) | 2001-03-14 | 2007-10-16 | Microsoft Corporation | Authorizing a requesting entity to operate upon data structures |
US9413817B2 (en) | 2001-03-14 | 2016-08-09 | Microsoft Technology Licensing, Llc | Executing dynamically assigned functions while providing services |
US9460421B2 (en) | 2001-03-14 | 2016-10-04 | Microsoft Technology Licensing, Llc | Distributing notifications to multiple recipients via a broadcast list |
US20030004935A1 (en) * | 2001-06-29 | 2003-01-02 | Wilmot Gerald Johann | Method and system for long-term update and edit control in a database system |
US7685261B1 (en) | 2001-06-29 | 2010-03-23 | Symantec Operating Corporation | Extensible architecture for the centralized discovery and management of heterogeneous SAN components |
US7506040B1 (en) | 2001-06-29 | 2009-03-17 | Symantec Operating Corporation | System and method for storage area network management |
US7403987B1 (en) | 2001-06-29 | 2008-07-22 | Symantec Operating Corporation | Transactional SAN management |
US8180872B1 (en) | 2001-06-29 | 2012-05-15 | Symantec Operating Corporation | Common data model for heterogeneous SAN components |
US7054862B2 (en) * | 2001-06-29 | 2006-05-30 | International Business Machines Corporation | Method and system for long-term update and edit control in a database system |
US8655900B2 (en) | 2001-08-13 | 2014-02-18 | Crucial Apex Communications Llc | Universal data management interface |
US9298749B2 (en) | 2001-08-13 | 2016-03-29 | S. Aqua Semiconductor, Llc | Universal data management interface |
US7117225B2 (en) | 2001-08-13 | 2006-10-03 | Jasmin Cosic | Universal data management interface |
US7113946B2 (en) * | 2001-08-13 | 2006-09-26 | Jasmin Cosic | Universal data management interface |
US8417740B2 (en) | 2001-08-13 | 2013-04-09 | Crucial Apex Communications Llc | Universal data management interface |
US8335805B2 (en) | 2001-08-13 | 2012-12-18 | Crucial Apex Communications Llc | Universal data management interface |
US9928256B2 (en) | 2001-08-13 | 2018-03-27 | S. Aqua Semiconductor, Llc | Universal data management interface |
US20050289105A1 (en) * | 2001-08-13 | 2005-12-29 | Jasmin Cosic | Universal data management interface |
US8572035B2 (en) | 2001-08-13 | 2013-10-29 | Crucial Apex Communications Llc | Universal data management interface |
US11216422B2 (en) | 2001-08-13 | 2022-01-04 | S. Aqua Semiconductor, Llc | Universal data management interface |
US20050149542A1 (en) * | 2001-08-13 | 2005-07-07 | Jasmin Cosic | Universal data management interface |
US20050149517A1 (en) * | 2001-08-13 | 2005-07-07 | Jasmin Cosic | Universal data management interface |
US20030065662A1 (en) * | 2001-08-13 | 2003-04-03 | Jasmin Cosic | Universal data management interface |
US20100023541A1 (en) * | 2001-08-13 | 2010-01-28 | Crucial Apex Communications Llc | Universal Data Management Interface |
US9047324B2 (en) | 2001-08-13 | 2015-06-02 | Crucial Apex Communications Llc | Universal data management interface |
US9804788B2 (en) | 2001-09-07 | 2017-10-31 | Netapp, Inc. | Method and apparatus for transferring information between different streaming protocols at wire speed |
US7617252B2 (en) * | 2001-09-07 | 2009-11-10 | Netapp, Inc. | Compensating for unavailability in a storage virtualization system |
US20060206494A1 (en) * | 2001-09-07 | 2006-09-14 | Rahim Ibrahim | Compensating for unavailability in a storage virtualization system |
US20030074358A1 (en) * | 2001-09-24 | 2003-04-17 | Siamak Sarbaz | Integration, management and processing of network data from disparate sources |
US20050187978A1 (en) * | 2001-10-24 | 2005-08-25 | Bea Systems, Inc. | System and method for portal rendering |
US20030084056A1 (en) * | 2001-10-26 | 2003-05-01 | Deanna Robert | System for development, management and operation of distributed clients and servers |
US6947943B2 (en) * | 2001-10-26 | 2005-09-20 | Zeosoft Technology Group, Inc. | System for development, management and operation of distributed clients and servers |
US20030091057A1 (en) * | 2001-11-09 | 2003-05-15 | Takuya Miyashita | Method and system for transmitting data in two steps by using data storage provided in data transmission equipment in network |
US7388876B2 (en) * | 2001-11-09 | 2008-06-17 | Fujitsu Limited | Method and system for transmitting data in two steps by using data storage provided in data transmission equipment in network |
US20080059932A1 (en) * | 2001-12-10 | 2008-03-06 | Mentor Graphics Corporation | Parallel Electronic Design Automation: Shared Simultaneous Editing |
US7516435B2 (en) | 2001-12-10 | 2009-04-07 | Mentor Graphics Corporation | Reservation of design elements in a parallel printed circuit board design environment |
US7587695B2 (en) * | 2001-12-10 | 2009-09-08 | Mentor Graphics Corporation | Protection boundaries in a parallel printed circuit board design environment |
US20040210854A1 (en) * | 2001-12-10 | 2004-10-21 | Mentor Graphics Corporation | Parellel electronic design automation: shared simultaneous editing |
US20040225988A1 (en) * | 2001-12-10 | 2004-11-11 | Mentor Graphics Corporation | Protection boundaries in a parallel printed circuit board design environment |
US20050044518A1 (en) * | 2001-12-10 | 2005-02-24 | Mentor Graphics Corporation | Reservation of design elements in a parallel printed circuit board design environment |
US7949990B2 (en) | 2001-12-10 | 2011-05-24 | Mentor Graphics Corporation | Parallel electronic design automation: shared simultaneous editing |
US7320016B2 (en) | 2002-03-25 | 2008-01-15 | Data Quality Solutions, Inc. | Method for visually programming instruction set for process |
US20060020641A1 (en) * | 2002-03-25 | 2006-01-26 | Data Quality Solutions | Business process management system and method |
US20050197880A1 (en) * | 2002-03-25 | 2005-09-08 | Walsh John G. | Method for visually programming instruction set for process |
US6920474B2 (en) * | 2002-03-25 | 2005-07-19 | Data Quality Solutions, Inc. | Method and system for enterprise business process management |
US20030233249A1 (en) * | 2002-03-25 | 2003-12-18 | Walsh John G. | Method and system for enterprise business process management |
US7246144B2 (en) * | 2002-03-25 | 2007-07-17 | Data Quality Solutions | Method and system for managing a plurality of enterprise business systems |
US20050114201A1 (en) * | 2002-03-25 | 2005-05-26 | Technology Center | Method and system for managing a plurality of enterprise business systems |
US7725560B2 (en) | 2002-05-01 | 2010-05-25 | Bea Systems Inc. | Web service-enabled portlet wizard |
US7426548B2 (en) | 2002-05-01 | 2008-09-16 | Bea Systems, Inc. | Enterprise application platform |
US7178153B1 (en) * | 2002-05-10 | 2007-02-13 | Oracle International Corporation | Method and mechanism for implementing an access interface infrastructure |
US7886031B1 (en) | 2002-06-04 | 2011-02-08 | Symantec Operating Corporation | SAN configuration utility |
US7194538B1 (en) | 2002-06-04 | 2007-03-20 | Veritas Operating Corporation | Storage area network (SAN) management system for discovering SAN components using a SAN management server |
US9886309B2 (en) | 2002-06-28 | 2018-02-06 | Microsoft Technology Licensing, Llc | Identity-based distributed computing for device resources |
US20090138519A1 (en) * | 2002-09-13 | 2009-05-28 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US7937418B2 (en) | 2002-09-13 | 2011-05-03 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US7836102B2 (en) | 2002-09-13 | 2010-11-16 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US7797353B1 (en) * | 2002-09-13 | 2010-09-14 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US20090138524A1 (en) * | 2002-09-13 | 2009-05-28 | Cadence Design Systems, Inc. | Method and system for enhancing software documentation and help systems |
US8019849B1 (en) | 2002-09-13 | 2011-09-13 | Symantec Operating Corporation | Server-side storage area network management interface |
US7401338B1 (en) * | 2002-09-27 | 2008-07-15 | Symantec Operating Corporation | System and method for an access layer application programming interface for managing heterogeneous components of a storage area network |
US8060630B1 (en) | 2002-11-27 | 2011-11-15 | Symantec Operating Corporation | Creating and configuring virtual fabrics in storage area networks |
US7925246B2 (en) | 2002-12-11 | 2011-04-12 | Leader Technologies, Inc. | Radio/telephony interoperability system |
US8195714B2 (en) | 2002-12-11 | 2012-06-05 | Leaper Technologies, Inc. | Context instantiated application protocol |
US7992189B2 (en) | 2003-02-14 | 2011-08-02 | Oracle International Corporation | System and method for hierarchical role-based entitlements |
US7653930B2 (en) | 2003-02-14 | 2010-01-26 | Bea Systems, Inc. | Method for role and resource policy management optimization |
US8099779B2 (en) | 2003-02-20 | 2012-01-17 | Oracle International Corporation | Federated management of content repositories |
US7840614B2 (en) | 2003-02-20 | 2010-11-23 | Bea Systems, Inc. | Virtual content repository application program interface |
US7810036B2 (en) | 2003-02-28 | 2010-10-05 | Bea Systems, Inc. | Systems and methods for personalizing a portal |
US20040230917A1 (en) * | 2003-02-28 | 2004-11-18 | Bales Christopher E. | Systems and methods for navigating a graphical hierarchy |
US20040230557A1 (en) * | 2003-02-28 | 2004-11-18 | Bales Christopher E. | Systems and methods for context-sensitive editing |
US20040205066A1 (en) * | 2003-04-08 | 2004-10-14 | International Business Machines Corporation | System and method for a multi-level locking hierarchy in a database with multi-dimensional clustering |
US7236974B2 (en) * | 2003-04-08 | 2007-06-26 | International Business Machines Corporation | System and method for a multi-level locking hierarchy in a database with multi-dimensional clustering |
US7885256B1 (en) | 2003-05-30 | 2011-02-08 | Symantec Operating Corporation | SAN fabric discovery |
US7904451B2 (en) | 2003-08-06 | 2011-03-08 | At&T Intellectual Property I, L.P. | Rhetorical content management with tone and audience profiles |
US7296027B2 (en) | 2003-08-06 | 2007-11-13 | Sbc Knowledge Ventures, L.P. | Rhetorical content management with tone and audience profiles |
US20050108316A1 (en) * | 2003-11-18 | 2005-05-19 | Sbc Knowledge Ventures, L.P. | Methods and systems for organizing related communications |
US20080034342A1 (en) * | 2003-11-21 | 2008-02-07 | Mentor Graphics Corporation | Distributed Autorouting of Conductive Paths |
US7305648B2 (en) | 2003-11-21 | 2007-12-04 | Mentor Graphics Corporation | Distributed autorouting of conductive paths in printed circuit boards |
US7788622B2 (en) | 2003-11-21 | 2010-08-31 | Mentor Graphics Corporation | Distributed autorouting of conductive paths |
US20050114821A1 (en) * | 2003-11-21 | 2005-05-26 | Mentor Graphics Corporation | Distributed autorouting of conductive paths |
US20050114865A1 (en) * | 2003-11-21 | 2005-05-26 | Mentor Graphics Corporation | Integrating multiple electronic design applications |
US7590963B2 (en) | 2003-11-21 | 2009-09-15 | Mentor Graphics Corporation | Integrating multiple electronic design applications |
US20050125794A1 (en) * | 2003-12-08 | 2005-06-09 | De Groot Erik | Ensure a consistent control system configuration methodolgy through an enforceable user defined development life cycle |
US7634757B2 (en) * | 2003-12-08 | 2009-12-15 | Honeywell International Inc. | Ensure a consistent control system configuration methodology through an enforceable user defined development life cycle |
US7415106B2 (en) | 2004-03-09 | 2008-08-19 | Sbc Knowledge Ventures, Lp | Network-based voice activated auto-attendant service with B2B connectors |
US7848509B2 (en) | 2004-03-09 | 2010-12-07 | At&T Intellectual Property I, L.P. | Network-based voice activated auto-attendant service with B2B connectors |
US20080275708A1 (en) * | 2004-03-09 | 2008-11-06 | Sbc Knowledge Ventures, L.P. | Network-based voice activated auto-attendant service with b2b connectors |
US20050201532A1 (en) * | 2004-03-09 | 2005-09-15 | Sbc Knowledge Ventures, L.P. | Network-based voice activated auto-attendant service with B2B connectors |
US7774601B2 (en) | 2004-04-06 | 2010-08-10 | Bea Systems, Inc. | Method for delegated administration |
US7236990B2 (en) * | 2004-04-13 | 2007-06-26 | Bea Systems, Inc. | System and method for information lifecycle workflow integration |
US20050251505A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for information lifecycle workflow integration |
US20050228816A1 (en) * | 2004-04-13 | 2005-10-13 | Bea Systems, Inc. | System and method for content type versions |
US20050251502A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for virtual content repository entitlements |
US7246138B2 (en) | 2004-04-13 | 2007-07-17 | Bea Systems, Inc. | System and method for content lifecycles in a virtual content repository that integrates a plurality of content repositories |
US7236989B2 (en) * | 2004-04-13 | 2007-06-26 | Bea Systems, Inc. | System and method for providing lifecycles for custom content in a virtual content repository |
US7240076B2 (en) | 2004-04-13 | 2007-07-03 | Bea Systems, Inc. | System and method for providing a lifecycle for information in a virtual content repository |
US7236975B2 (en) * | 2004-04-13 | 2007-06-26 | Bea Systems, Inc. | System and method for controlling access to anode in a virtual content repository that integrates a plurality of content repositories |
US20050251504A1 (en) * | 2004-04-13 | 2005-11-10 | Bea Systems, Inc. | System and method for custom content lifecycles |
US20220171781A1 (en) * | 2004-06-18 | 2022-06-02 | Google Llc | System And Method For Analyzing Data Records |
US8165989B2 (en) * | 2004-06-25 | 2012-04-24 | International Business Machines Corporation | Automated data model extension through data crawler approach |
US20080154975A1 (en) * | 2004-06-25 | 2008-06-26 | International Business Machines Corporation | Automated data model extension through data crawler approach |
US20060020646A1 (en) * | 2004-07-26 | 2006-01-26 | Philip Tee | Method and system for managing data |
US8412685B2 (en) | 2004-07-26 | 2013-04-02 | Riverbed Technology, Inc. | Method and system for managing data |
CN102890810B (en) * | 2004-08-31 | 2017-03-01 | 中国银联股份有限公司 | A kind of Novel bank card transaction exchange system |
US7617152B2 (en) | 2004-08-31 | 2009-11-10 | China Unionpay Co., Ltd. | Bankcard transaction exchange system |
WO2006024223A1 (en) * | 2004-08-31 | 2006-03-09 | China Unionpay | A new type bankcard transaction exchange system |
US20080098393A1 (en) * | 2004-08-31 | 2008-04-24 | Hongfeng Chai | Novel Bankcard Transaction Exchange System |
CN102890810A (en) * | 2004-08-31 | 2013-01-23 | 中国银联股份有限公司 | Novel bank card transaction exchange system |
US20060095882A1 (en) * | 2004-09-08 | 2006-05-04 | Mentor Graphics Corporation | Distributed electronic design automation environment |
US7546571B2 (en) | 2004-09-08 | 2009-06-09 | Mentor Graphics Corporation | Distributed electronic design automation environment |
US20060101368A1 (en) * | 2004-09-08 | 2006-05-11 | Mentor Graphics Corporation | Distributed electronic design automation environment |
US8326926B2 (en) | 2005-09-13 | 2012-12-04 | Mentor Graphics Corporation | Distributed electronic design automation architecture |
US20070073809A1 (en) * | 2005-09-13 | 2007-03-29 | Mentor Graphics Corporation | Distributed electronic design automation architecture |
US7917537B2 (en) | 2005-09-26 | 2011-03-29 | Oracle International Corporation | System and method for providing link property types for content management |
US7953734B2 (en) | 2005-09-26 | 2011-05-31 | Oracle International Corporation | System and method for providing SPI extensions for content management system |
US8316025B2 (en) | 2005-09-26 | 2012-11-20 | Oracle International Corporation | System and method for providing SPI extensions for content management system |
US7752205B2 (en) | 2005-09-26 | 2010-07-06 | Bea Systems, Inc. | Method and system for interacting with a virtual content repository |
US7818344B2 (en) | 2005-09-26 | 2010-10-19 | Bea Systems, Inc. | System and method for providing nested types for content management |
US20090276397A1 (en) * | 2005-12-12 | 2009-11-05 | At&T Intellectual Property I, L.P. | Method for analyzing, deconstructing, reconstructing, and repurposing rhetorical content |
US7577639B2 (en) | 2005-12-12 | 2009-08-18 | At&T Intellectual Property I, L.P. | Method for analyzing, deconstructing, reconstructing, and repurposing rhetorical content |
US7917510B2 (en) | 2005-12-12 | 2011-03-29 | At&T Intellectual Property I, L.P. | Method for analyzing, deconstructing, reconstructing, and repurposing rhetorical content |
US7761586B2 (en) | 2006-02-06 | 2010-07-20 | Microsoft Corporation | Accessing and manipulating data in a data flow graph |
US20070198457A1 (en) * | 2006-02-06 | 2007-08-23 | Microsoft Corporation | Accessing and manipulating data in a data flow graph |
US20080059952A1 (en) * | 2006-08-29 | 2008-03-06 | International Business Machines Corporation | Method for Replicating and Synchronizing a Plurality of Physical Instances with a Logical Master |
US7735051B2 (en) | 2006-08-29 | 2010-06-08 | International Business Machines Corporation | Method for replicating and synchronizing a plurality of physical instances with a logical master |
US8463852B2 (en) | 2006-10-06 | 2013-06-11 | Oracle International Corporation | Groupware portlets for integrating a portal with groupware systems |
US7925758B1 (en) | 2006-11-09 | 2011-04-12 | Symantec Operating Corporation | Fibre accelerated pipe data transport |
US20100050147A1 (en) * | 2006-12-14 | 2010-02-25 | Satin Ip Technologies | Method and device providing integrated circuit design assistance |
US20080301641A1 (en) * | 2007-05-30 | 2008-12-04 | Karunakar Bojjireddy | Management of Heterogeneous Software Artifacts Through a Common Representation |
US8161456B2 (en) * | 2007-05-30 | 2012-04-17 | International Business Machines Corporation | Management of heterogeneous software artifacts through a common representation |
US8161393B2 (en) | 2007-09-18 | 2012-04-17 | International Business Machines Corporation | Arrangements for managing processing components using a graphical user interface |
US8023434B2 (en) | 2007-09-18 | 2011-09-20 | International Business Machines Corporation | Arrangements for auto-merging and auto-partitioning processing components |
US20090077478A1 (en) * | 2007-09-18 | 2009-03-19 | International Business Machines Corporation | Arrangements for managing processing components using a graphical user interface |
US20090073896A1 (en) * | 2007-09-18 | 2009-03-19 | International Business Machines Corporation | Arrangements for auto-merging and auto-partitioning processing components |
US20090094114A1 (en) * | 2007-10-03 | 2009-04-09 | Rice Daniel J | Systems and methods for optimized addressable advertising |
US20090210387A1 (en) * | 2008-02-20 | 2009-08-20 | International Business Machines Corporation | System and method for providing a common instruction table |
US7895538B2 (en) * | 2008-02-20 | 2011-02-22 | International Business Machines Corporation | System and method for providing a common instruction table |
US7975247B2 (en) * | 2008-08-28 | 2011-07-05 | Cliosoft Inc. | Method and system for organizing data generated by electronic design automation tools |
US20100058277A1 (en) * | 2008-08-28 | 2010-03-04 | Srinath Anantharaman | Method and system for organizing data generated by electronic design automation tools |
US20110238638A1 (en) * | 2010-03-29 | 2011-09-29 | International Business Machines Corporation | Methods and systems for obtaining and correcting an index record for a virtual storage access method keyed sequential data set |
US8527481B2 (en) | 2010-03-29 | 2013-09-03 | International Business Machines Corporation | Methods and systems for obtaining and correcting an index record for a virtual storage access method keyed sequential data set |
US8711864B1 (en) | 2010-03-30 | 2014-04-29 | Chengdu Huawei Symantec Technologies Co., Ltd. | System and method for supporting fibre channel over ethernet communication |
US20190026000A1 (en) * | 2014-04-02 | 2019-01-24 | Prosperoware Llc | Management of ordered lists of data objects |
US20150286974A1 (en) * | 2014-04-02 | 2015-10-08 | Prosperoware, LLC | Methods and System for Verb-Based Project Management |
US11055310B2 (en) | 2017-12-04 | 2021-07-06 | Bank Of America Corporation | SQL server integration services (SSIS) package analyzer |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6654747B1 (en) | Modular scalable system for managing data in a heterogeneous environment with generic structure for control repository access transactions | |
US5966707A (en) | Method for managing a plurality of data processes residing in heterogeneous data repositories | |
US6484177B1 (en) | Data management interoperability methods for heterogeneous directory structures | |
US5857197A (en) | System and method for accessing data stores as objects | |
US7765239B2 (en) | System and method for storing and retrieving a field of a user defined type outside of a database store in which the type is defined | |
US6999956B2 (en) | Dynamic object-driven database manipulation and mapping system | |
AU2006200230B2 (en) | Platform for data services across disparate application frameworks | |
US7149730B2 (en) | Dynamic class inheritance and distributed caching with object relational mapping and cartesian model support in a database manipulation and mapping system | |
US6523036B1 (en) | Internet database system | |
US7194480B2 (en) | System and method for invoking methods on place objects in a distributed environment | |
EP1622046A2 (en) | System and method for delayed fetching of designated members of a user defined type | |
WO2004010319A2 (en) | Dynamic object- driven database manipulation and mapping system | |
Do et al. | On metadata interoperability in data warehouses | |
US20060242167A1 (en) | Object based test library for WinFS data model | |
Sung et al. | A component-based product data management system | |
Kleissner | Enterprise objects framework: a second generation object-relational enabler | |
US7181462B2 (en) | System and method for multi server place data representation | |
WO2004107162A1 (en) | Dynamic object-driven database manipulation and mapping system | |
Leff et al. | A classification of transaction processing systems | |
WO2002041187A1 (en) | Dynamic object-driven database manipulation and mapping system | |
Jaganathan et al. | Model based information access | |
Leser et al. | Design Issues of Database Access in a CORBA Environment. | |
Wade | Hitting the relational Wall | |
Brown | Distributed component database management systems | |
Rivers | Object-oriented Data Management for Digital Electronics CAD Systems |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW YFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:VAN HUBEN, GARY A.;MUELLER, JOSEPH L.;REEL/FRAME:010003/0346Effective date: 19990527 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |