US6026474A - Shared client-side web caching using globally addressable memory - Google Patents
Shared client-side web caching using globally addressable memory Download PDFInfo
- Publication number
- US6026474A US6026474A US08/848,971 US84897197A US6026474A US 6026474 A US6026474 A US 6026474A US 84897197 A US84897197 A US 84897197A US 6026474 A US6026474 A US 6026474A
- Authority
- US
- United States
- Prior art keywords
- data
- memory
- directory
- nodes
- file
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F9/00—Arrangements for program control, e.g. control units
- G06F9/06—Arrangements for program control, e.g. control units using stored programs, i.e. using an internal store of processing equipment to receive or retain programs
- G06F9/46—Multiprogramming arrangements
- G06F9/50—Allocation of resources, e.g. of the central processing unit [CPU]
- G06F9/5005—Allocation of resources, e.g. of the central processing unit [CPU] to service a request
- G06F9/5011—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resources being hardware resources other than CPUs, Servers and Terminals
- G06F9/5016—Allocation of resources, e.g. of the central processing unit [CPU] to service a request the resources being hardware resources other than CPUs, Servers and Terminals the resource being the memory
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0706—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment
- G06F11/0721—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment within a central processing unit [CPU]
- G06F11/0724—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation the processing taking place on a specific hardware platform or in a specific software environment within a central processing unit [CPU] in a multiprocessor or a multi-core unit
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/0703—Error or fault processing not based on redundancy, i.e. by taking additional measures to deal with the error or fault not making use of redundancy in operation, in hardware, or in data representation
- G06F11/0751—Error or fault detection not based on redundancy
- G06F11/0754—Error or fault detection not based on redundancy by exceeding limits
- G06F11/0757—Error or fault detection not based on redundancy by exceeding limits by exceeding a time limit, i.e. time-out, e.g. watchdogs
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1415—Saving, restoring, recovering or retrying at system level
- G06F11/142—Reconfiguring to eliminate the error
- G06F11/1425—Reconfiguring to eliminate the error by reconfiguration of node membership
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/14—Error detection or correction of the data by redundancy in operation
- G06F11/1402—Saving, restoring, recovering or retrying
- G06F11/1415—Saving, restoring, recovering or retrying at system level
- G06F11/1435—Saving, restoring, recovering or retrying at system level using file system or storage system metadata
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/18—Error detection or correction of the data by redundancy in hardware using passive fault-masking of the redundant circuits
- G06F11/182—Error detection or correction of the data by redundancy in hardware using passive fault-masking of the redundant circuits based on mutual exchange of the output between redundant processing components
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/07—Responding to the occurrence of a fault, e.g. fault tolerance
- G06F11/16—Error detection or correction of the data by redundancy in hardware
- G06F11/20—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements
- G06F11/2053—Error detection or correction of the data by redundancy in hardware using active fault-masking, e.g. by switching out faulty elements or by switching in spare elements where persistent mass storage functionality or persistent mass storage control functionality is redundant
- G06F11/2094—Redundant storage or storage space
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/0802—Addressing of a memory level in which the access to the desired data or data block requires associative addressing means, e.g. caches
- G06F12/0806—Multiuser, multiprocessor or multiprocessing cache systems
- G06F12/0813—Multiuser, multiprocessor or multiprocessing cache systems with a network or matrix configuration
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F12/00—Accessing, addressing or allocating within memory systems or architectures
- G06F12/02—Addressing or allocation; Relocation
- G06F12/08—Addressing or allocation; Relocation in hierarchically structured memory systems, e.g. virtual memory systems
- G06F12/10—Address translation
- G06F12/1072—Decentralised address translation, e.g. in distributed shared memory systems
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F15/00—Digital computers in general; Data processing equipment in general
- G06F15/16—Combinations of two or more digital computers each having at least an arithmetic unit, a program unit and a register, e.g. for a simultaneous processing of several programs
- G06F15/163—Interprocessor communication
- G06F15/167—Interprocessor communication using a common memory, e.g. mailbox
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/90—Details of database functions independent of the retrieved data types
- G06F16/95—Retrieval from the web
- G06F16/957—Browsing optimisation, e.g. caching or content distillation
- G06F16/9574—Browsing optimisation, e.g. caching or content distillation of access to content, e.g. by caching
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/02—Protocols based on web technology, e.g. hypertext transfer protocol [HTTP]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1001—Protocols in which an application is distributed across nodes in the network for accessing one among a plurality of replicated servers
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/75—Indicating network or usage conditions on the user display
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/30—Definitions, standards or architectural aspects of layered protocol stacks
- H04L69/32—Architecture of open systems interconnection [OSI] 7-layer type protocol stacks, e.g. the interfaces between the data link level and the physical level
- H04L69/322—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions
- H04L69/329—Intralayer communication protocols among peer entities or protocol data unit [PDU] definitions in the application layer [OSI layer 7]
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/40—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass for recovering from a failure of a protocol instance or entity, e.g. service redundancy protocols, protocol state redundancy or protocol service redirection
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L69/00—Network arrangements, protocols or services independent of the application payload and not provided for in the other groups of this subclass
- H04L69/24—Negotiation of communication capabilities
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/964—Database arrangement
- Y10S707/966—Distributed
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99943—Generating database or data structure, e.g. via user interface
-
- Y—GENERAL TAGGING OF NEW TECHNOLOGICAL DEVELOPMENTS; GENERAL TAGGING OF CROSS-SECTIONAL TECHNOLOGIES SPANNING OVER SEVERAL SECTIONS OF THE IPC; TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10—TECHNICAL SUBJECTS COVERED BY FORMER USPC
- Y10S—TECHNICAL SUBJECTS COVERED BY FORMER USPC CROSS-REFERENCE ART COLLECTIONS [XRACs] AND DIGESTS
- Y10S707/00—Data processing: database and file management or data structures
- Y10S707/99941—Database schema or data structure
- Y10S707/99944—Object-oriented database structure
- Y10S707/99945—Object-oriented database structure processing
Definitions
- the present invention relates in general to a shared client-side Web cache and, more specifically, to a shared client-side Web cache maintained within a globally addressable memory.
- Computer based structured storage systems such as computer file systems and database systems, have been remarkably successful at providing users with quick and facile access to enormous amounts of data.
- the importance of these structured storage systems in today's commerce is difficult to exaggerate.
- structured storage systems have allowed businesses to generate and maintain enormous stores of persistent data that the company can modify and update over the course of years.
- this persistent data is a valuable capital asset that is employed each day to perform the company's core operations.
- the data can be, for example, computer files (e.g., source code, wordprocessing documents, etc.), database records and information (e.g., information on employees, customers, and/or products), or information and data downloaded from the Internet.
- a typical computer-based structured storage system for data downloaded from the Internet is simply a file system on a user's terminal, that is, the user's PC, PC-Compatible, Apple Macintosh, or other workstation on which the user executes a program allowing access to the Internet.
- downloaded data is cached in the file system on the terminal. While this eliminates delays for the user when retrieving data previously accessed by the user, users do not benefit from the caches of other users.
- a central server commonly referred to as a proxy server
- the proxy server provides a degree of sharing between individual users caches, because the proxy server caches data accessed by the entire group of users.
- Stored data may include cached copies of Web pages, image files, JAVA applets, and ActiveX controls.
- the proxy server manages each user's Internet connection and, as mentioned above, provides a degree of data caching between users of the system, since the proxy server may cache data downloaded by a first user. If that data remains in the proxy server's cache when a second user requests it, the proxy server can supply the data to the second user.
- the centralized cache technique suffers from several drawbacks.
- the first is that providing a centralized cache having storage capability equal to the sum of each user's individual Web cache is expensive.
- Another drawback from which centralized Web caches suffer stems, to some extent, from the first drawback mentioned above.
- the size of a centralized Web cache is generally smaller than the size of the sum of all of the individual users' Web caches, data may be swapped out of the centralized Web cache even though it is cached locally in an individual user's Web cache. This can lead to situations in which a second user accesses, for example, a Web page previously accessed by a first user. Although the Web page still resides in the first user's Web cache, it has been removed from the centralized Web cache due to space constraints. As a result, the second user must then fetch the Web page over the Internet, incurring delays associated with the Internet transfer.
- the proxy server introduces additional delays due to processing constraints. That is, if the proxy server is fetching data for a first user, a data fetch for a second user must wait for the proxy server to complete the data fetch for the first user. Also, any failure of the proxy server to maintain proper operation, such as a power failure, hardware failure, or other such system failure, will disable the individual user's ability to access the Internet or cause the shared data to be lost.
- Another attempt to optimize Web access involves prefetching Web pages. For example, when a user downloads a Web page, the system may also download Web pages which are linked to that page. Should the user traverse a link to one of the prefetched Web pages, the system is able to display the new page to the user with little or no delay.
- These systems do not allow users to share Web caches and have an additional drawback that network traffic is increased. For example, these systems must prefetch multiple pages to provide an end-user with quick access to only one page, and the user may select a page that is not linked to the previous page viewed by the user that, therefore, has not been prefetched.
- the present invention relates to a system and method that provides a shared client-side Web cache.
- the Web cache is shared by a particular group of users.
- the shared Web cache is stored in a globally addressable data store that allows each user to access the shared Web cache as if it were accessing a traditional, local Web cache. Since the globally addressable data store is distributed over each user's terminal, the size of the cache can increase with each user that is added to the system. Also, since data is replicated on a user's local terminal whenever the user accesses it, data cached in the shared Web cache is automatically replicated, providing a degree of fault tolerance and also insuring that data is stored on the nodes most likely to use the data.
- the shared cache benefits client users by allowing them to access cached Web pages regardless of whether the pages were cached by one or more different users, and regardless of the method used to load the page into a cache, i.e. whether the page was prefetched or cached in a traditional manner.
- the invention relates to a method for locally caching and sharing downloaded data between a plurality of client nodes.
- the method begins by providing a number of client nodes that are interconnected by a network.
- Each node hosts a control program, in some embodiments as an Internet browser or file transfer program, that stores and retrieves cached data.
- Each control program accesses a globally addressable data store which provides persistent storage of data, and each instance of the control program employs the data store as a memory device for storing and retrieving cached data.
- the data cached by the control program instantiations can include any type of downloaded data.
- the downloaded data represents HTML files, fragments of HTML files, ActiveX controls, JAVA applets, or image files.
- the globally addressable data store is a distributed shared memory system.
- the invention in another aspect, relates to a system for caching and sharing downloaded data.
- the system includes one or more client nodes and a network.
- the client nodes are each connected to the network and each client node includes a control program that manipulates caches of downloaded data.
- Each instance of the control program accesses a globally addressable data store formed by the memory elements present on each individual node.
- Each node stores and retrieves data from the globally addressable data store.
- FIG. 1 is a conceptual block diagram of a distributed addressable shared memory structured data storage system according to the invention.
- FIG. 2 is a diagram of one possible embodiment of the system of FIG. 1, namely a distributed addressable shared memory file system providing storage for computer files such as source code files, wordprocessing documents files, etc.
- FIG. 3 is a graphical representation of the organization of directory entries and associated file descriptors (also known as "Inodes”), suitable for use with the file system of FIG. 2.
- FIG. 4 is a diagram of an Inode suitable for use with the file system of FIG. 2.
- FIG. 5 illustrates a distributed shared memory computer network.
- FIG. 6 is a functional block diagram that illustrates in more detail one distributed shared memory computer network of the type shown in FIG. 5.
- FIG. 7 illustrates in more detail a shared memory subsystem suitable for practice with the network illustrated in FIG. 6.
- FIG. 8 is a functional block diagram of one shared memory subsystem according to the invention.
- FIG. 9 illustrates a directory page that can be provided by a shared memory subsystem of the type depicted in FIG. 8.
- FIG. 10 illustrates a directory that can be distributed within a shared memory and formed of directory pages of the type illustrated in FIG. 9.
- FIG. 11 illustrates in functional block diagram form a system that employs a directory according to FIG. 10 for tracking portions of a distributed shared memory.
- FIG. 12 depicts a typical system for accessing data using the Internet.
- a network system 10 includes a plurality of network nodes that access a memory space storing a structured store of data, such as a structured file system or a database.
- Each of the nodes includes at least a data control program which accesses and manages the structured store of data.
- the structured store of data may be stored in an addressable shared memory or the structured store may be stored in a more traditional fashion.
- each node may be responsible for storing a particular element or elements of the structured store of data.
- the data control program can access a desired portion of the structured store using a globally unique identifier.
- the underlying system would translate the identifier into one or more commands for accessing the desired data, including network transfer commands.
- the structured store of data is stored in an addressable shared memory space, which allows the nodes to transparently access portions of the structured store using standard memory access commands.
- the system 10 can be a file system, a database system, a Web server, an object repository system, or any other structured storage system that maintains an organized set of data.
- the system 10 is a file system that maintains various computer files.
- this is just one embodiment of the invention that is provided for illustrative purposes.
- the invention can be employed to provide any one of a plurality of structured storage systems (e.g., database system, Web page system, Intranet, etc.).
- the invention is not to be limited to the file system or other particular embodiments described herein.
- a network system 10 includes a plurality of network nodes 12a-12d and an addressable shared memory space 20 that has a portion 22 for storing a structured store of data 28.
- Each of the nodes 12a-12d can include several sub-elements.
- node 12a includes a processor 30a, a data control program 32a, and a shared memory subsystem 34a.
- two of the nodes, 12a and 12c include monitors that provide displays 40 and 42 graphically depicting the structured store of data 28 within the addressable shared memory space 20.
- the addressable shared memory space 20 interconnects each of the network nodes 12a-12d and provides each node 12a-12d with access to the structured store of data 28 contained within the addressable shared memory space 20.
- a system 10 can provide, among other things, each network node 12a-12d with shared control over the structured store of data 28 and, therefore, the system 10 can distribute control of the data store across the nodes of the network.
- each node of the system 10 such as node 12a, includes a data control program 32a that interfaces to a shared memory subsystem 34a.
- the data control program 32a can operate as a structured storage system, such as a file system, that is adapted to maintain a structured store of data and to employ the shared memory system as an addressable memory device that can store a structured store of data.
- the shared memory subsystem 34a can access and store data within the addressable shared memory space 20.
- the invention can provide computer networks with distributively controlled and readily scaled file systems, database systems, Web page systems, object repositories, data caching systems, or any other structured storage system.
- the system 10 of the invention maintains within the addressable shared memory space 20 a structured store of data 28.
- Each of the nodes 12a-12d can access the addressable shared memory space 20 through the shared memory subsystems 34a-34d.
- Each of the shared memory subsystems 34a-34d provides its node with access to the addressable shared memory space 20.
- the shared memory subsystems 34a-34d coordinate each of the respective node's memory access operations to provide access to the desired data and maintain data coherency within the addressable shared memory space 20. This allows the interconnected nodes 12a-12d to employ the addressable shared memory space 20 as a space for storing and retrieving data.
- FIG. 1 illustrates that systems of the invention have shared memory subsystems providing the network nodes with access to an addressable shared memory space, wherein at least a portion of that space is assigned to at least a portion of one or more of the persistent storage memory devices (e.g., hard disks) to allow the nodes addressably to store and retrieve data to and from the one or more persistent storage memory devices.
- the persistent storage memory devices e.g., hard disks
- each of the nodes 12a-12d can employ its respective shared memory subsystem as a memory device that provides persistent data storage.
- Each of the data control programs 32a-32d is a software module that couples to the respective shared memory subsystem 34a-34d in a way that operates similarly to an interface between a conventional data storage program and a local memory device.
- the data control program 32a can stream data to, and collect data from, the shared memory subsystem 34a. Because the shared memory subsystems coordinate the memory accesses to the addressable shared memory space 20, each of the data control programs is relieved from having to manage and coordinate its activities with the other data control programs on the network or from having to manage and coordinate its activities with one or more central servers.
- each of the data control programs 32a-32d can be a peer incarnation (i.e., an instance) residing on a different one of the network nodes 12a-12d and can treat the respective shared memory subsystem 34a-34d as a local memory device such as a local hard disk.
- One or more of the data control programs 32a-32d can provide a graphical user interface 42 that graphically depicts the structured store of data 28 contained within the addressable shared memory space 20.
- the graphical user interface 42 allows a user at a node, for example at node 12a, to insert data objects graphically within the structured store of data 28.
- the data control program 32a can generate a set of commands that will present a stream of data to the shared memory subsystem 34a and the shared memory subsystem 34a will employ the data stream to store an object within the structured store of data 28.
- the other shared memory subsystems 34b-34d can provide information to their respective nodes that is indicative of this change to the structured store of data 28. Accordingly, as shown depicted in FIG.
- node 12c that node (which includes a graphical user interface 40) reflects the change to the structured store of data 28 affected by the data control program 32a of the node 12a.
- the graphical user interface 40 of the node 12c can depict to a user that an object is being placed within the structured store of data 28.
- the addressable shared memory space 20 also contains the data objects 50a-50c which can be placed within the structured data store 28 to become part of that structured data store.
- a system user at node 12a can direct object 50a to be inserted at a set location within the data store 28.
- the data control program 32a then directs the shared memory subsystem 34a to place the object 50a within the data store 28 at the proper location.
- the shared memory subsystem 34c on node 12c detects the change within the data store 28 and reflects that change within the graphical user interface 40.
- a structured file system 60 is a particular embodiment according to the invention that employs the properties of the addressable shared memory space 20 to implement what looks to all network nodes like a coherent, single file system when in fact it spans all network nodes coupled to the addressable shared memory space 20.
- the file system 60 of FIG. 2 differs from known physical and distributed file systems in a variety of ways.
- the file system 60 manages the mapping of a directory and file structure onto a distributed addressable shared memory system 20 which has at least a portion of its addressable space mapped or assigned to at least a portion of one or more persistent storage devices (e.g., hard disks) on the network.
- the file system 60 of the invention employs peer nodes, each of which have an incarnation or instance of the same data control program.
- the file system 60 of the invention maintains data coherence among network nodes; automatically replicates data for redundancy and fault tolerance; automatically and dynamically migrates data to account for varying network usage and traffic patterns; and provides a variety of other advantages and advances, some of which are disclosed in the commonly-owned U.S. patent application Ser. No. 08/754,481 filed Nov. 22, 1996, and incorporated by reference above.
- the file system 60 resides in part within the addressable shared memory space 20, and includes a structured store of data 62, a super root 64, file sets 66-74, directory entry 80, and file or document 82.
- Two network nodes 84 and 86 are shown accessing the addressable shared memory space 20 (in the manner described previously with reference to FIG. 1) via the logical drives 90 and 94.
- Application programs 92 and 96 executing on the nodes interact with the data control programs (not shown in FIG. 2 but shown in FIG. 1 as 32a-32d) and cause the data control programs in the nodes to access the logical drives 90 and 94.
- the logical drives are DOS devices that "connect to" the fileset directories via Installable File System drivers associated with the file system 60.
- the file system 60 supports one global file system per addressable shared memory space 20 shared by all of the network nodes. This global file system is organized into one or more independent collections of files, depicted as the filesets 66-74.
- a fileset can be thought as logically equivalent to a traditional file system partition. It is a collection of files organized hierarchically as a directory tree structure rooted in a root directory. The non-leaf nodes in the tree are the directories 80, and the leaves in the tree are regular files 82 or empty directories. Sub-directory trees within a fileset can overlap by linking a file to multiple directories.
- a benefit of breaking up the file system 60 into filesets 66-74 is that it provides more flexible file system management for users of the system 60.
- the file system 60 grows into very large sizes (e.g., hundreds of nodes with thousands of gigabits of storage), it is desirable to have the files organized into groups of management entities such that management actions can be independently applied to individual groups without affecting the operation of the others.
- the filesets in the addressable shared memory space 20 are described and enumerated in a common structure, the root 64 of which provides the starting point to locate the filesets in the addressable shared memory space 20.
- the root 64 can be stored in a static and well-known memory location in the addressable shared memory space 20, and it can be accessed via a distributed shared memory system program interface.
- a node When a node is accessing a fileset for the first time, it first looks up the root 64 to determine the identifier associated with the fileset, e.g., the shared memory address used to access the fileset. Once it has determined the identifier, the node can access the root directory of the fileset. From the root directory, it then can traverse the entire fileset directory tree to locate the desired file.
- Filesets used by the file system 60 are described in greater detail below under the heading "Fileset.”
- a directory 126 (such as the directory 80 of FIG. 2) is accessed by starting at a directory Inode or descriptor 128 containing an address that points to a directory entries stream descriptor 130.
- This descriptor 130 is a pointer to a block of data containing directory entries for files File 1 through File 3.
- the directory entry for File 1 has a number of entries; one of the entries is a string containing the name of the file and another entry is the address of the Inodes and stream descriptors 132.
- the stream descriptors for File 1 are used to locate and retrieve the various 4 kilobyte pages in the addressable shared memory space 20 that constitute File 1. Other files are retrieved and constructed from the addressable shared memory space 20 in the same fashion.
- the directories used by the file system 60 are described in greater detail below under the heading "Directory.”
- a file 98 (such as the file 82 of FIG. 2) is represented by one or more shared pages of data 100, 102, 104, 106, and 108 in the addressable shared memory space 20.
- Each file 98 has a file Inode or descriptor 110 that includes various file attributes 112.
- the file descriptor 110 contains an address that points to a data stream descriptor 114, and the data stream itself includes one or more addresses 116, 118, 120, 122, and 124 that point to particular pages in the virtual addressable shared memory space 20.
- a page is the atomic unit in the addressable shared memory space 20, and it contains up to 4 kilobytes of data. Even if the entire 4 kbytes is not needed, an entire page is used. This is illustrated by the page 108 that only contains about 2 kbytes of data.
- the files used by the file system 60 are described in greater detail below under the heading "Files.”
- the filesets are the basic unit for the file system 60. Each fileset is identified with a name having up to 255 characters.
- the file system 60 exports a set of fileset level operations that allow an administrator to manage the filesets through the following type of actions.
- This operation creates a new fileset.
- the fileset is initially created with one file, the empty root directory.
- a default fileset is created automatically at the initialization of the addressable shared memory space 20.
- This operation deletes a fileset. All files in the fileset are removed, and all shared memory space allocated to the files in the fileset is discarded and the backing physical storage freed for new storage.
- the file system 60 will only allow deletion of a fileset until there are no open handles to file data stream in the fileset. In order to ready a fileset for deletion, the fileset must be "shutdown" by putting it off-line.
- This operation enumerates a specific fileset, or all the filesets, in the addressable shared memory space 20.
- This operation performs fileset level control routines such as setting fileset attributes.
- Directory are attached to local devices, i.e. "mounted” using parameters stored in the Windows NT registry, or some other similar central storage area for such information.
- the data control program 60 accesses the central storage and determines which filesets should be mounted.
- the data control program creates a file object representing each fileset identified by the entries in the central storage.
- an API may be provided which allows the data control program 60 to dynamically mount and unmount filesets by making appropriate API calls.
- the users of the file system 60 are not aware of the shared memory "logical volume,” but rather view each fileset as a volume (or partition in the sense of a traditional physical file system).
- the Win32 GetVolumeInformation is used to get information on the fileset (more precisely, on the logical device on which the fileset is attached to). Because all the filesets share the same pool of the storage in the addressable shared memory space 20, the total volume size returned to the user for each fileset is the current aggregate storage capacity in the addressable shared memory space 20. The same approach is taken for the total free space information, and the aggregate value of the addressable shared memory space 20 is returned for each fileset.
- Directory entry scanning is one of the most frequently performed operations by user applications. It is also may be the most visible operation in terms of performance. Consequently, much attention is directed to making the directory scan efficient and the WindowsNT Files System (NTFS) duplicates sufficient file Inode information in the directory entry such that a read directory operation can be satisfied by scanning and reading the directory entries without going out to read the information from the file Inodes.
- NTFS WindowsNT Files System
- the problem with this scheme is that the doubly stored file metadata, such as the file time stamps and file size, can be updated quite frequently, making the metadata update more expensive. However, this overhead is considered acceptable in face of the performance gained in directory scan operations.
- the file system 60 adopts the same philosophy of providing efficient directory scanning by duplicating file Inode information in directory entries. Each directory entry contains sufficient information to satisfy the Win32 query file information requests.
- the file Inode is stored with the file stream descriptors on a separate page. The Inode is located via a pointer in the directory entry.
- the file system's directory entries are stored in the directory file's directory entry data stream. To maximize space utilization, each directory entry is allocated on the first available free space in a page that can hold the entire entry. The length of the entry varies depending on the length of the file's primary name. The following information is part of the directory entry: creation time; change time; last write time; last accessed time; pointers to stream descriptor; pointer to parent directory Inode; MS-DOS type file attributes; and MS-DOS style file name (8.3 naming convention). For average file name lengths, a page contains up to about 30 entries. All the file information in the directory entry is also contained in the file Inode, except for the file primary name and MS-DOS file name. The file primary names and associated short names are only stored in the directory entries. This makes the Inode size fixed.
- the Inode When a file information is modified (except for file names), the Inode is updated in the context of the update transaction and therefore always contains the most up-to-date information.
- the associated directory entry change is lazily flushed to reduce the cost of double updating. This means the Inode updates are either flushed or recoverable, but not the corresponding directory entry updates. If the directory entry gets out of synch with the Inode (when the Inode change is successfully flushed but not the directory change), the entry is updated the next time the Inode is updated.
- the directory entries Inodes
- FIG. 3 illustrates the organization of directory entries and associated Inodes.
- a file of the file system 60 comprises streams of data and the file system metadata to describe the file.
- Files are described in the file system 60 by objects called Inodes.
- the Inode is a data structure that stores the file metadata. It represents the file in the file system 60.
- a data stream is a logically contiguous stream of bytes. It can be the data stored by applications or the internal information stored by the file system 60.
- the data streams are mapped onto pages allocated from the addressable shared memory space 20 for storage.
- the file system 60 segments a data stream into a sequence of 4 kilobyte segments, each segment corresponding to a page.
- the file system 60 maintains two pieces of size information per data stream: the number of bytes in the data stream, and the allocation size in number of pages.
- the byte-stream to segment/page mapping information is part of the file metadata and is stored in a structure called data stream descriptor. See FIG. 4.
- Users' requests for data are specified in terms of range of bytes and the position of the starting byte measured by its offset from the beginning of the data stream, byte position zero.
- the file system 60 maps the offset into the page containing the starting byte and the intra-page offset from the beginning of the page.
- Every file of the file system 60 has at least two data streams: the default data stream; and the Access Control List (ACL) stream. Each file may optionally have other data streams.
- the ACL stream is used to store the security Access Control Lists set on the file.
- Each data stream is individually named so that the user can create or open access to a specific data stream.
- the name of the default data stream is assumed to be the primary name of the file.
- To access a data stream, the user of the file system 60 must first open a file handle to the desired data stream by name. If the file name is used then the handle to the default data stream is opened. This open file handle represents the data stream in all the file system services that operates on the data stream.
- the file system 60 exports a set of services to operate at the file level.
- the input to the services are the file object handle (Inode) or the data stream object handle, and the operation specific parameters, including the desired portions of the data stream in byte positions.
- Open files are represented by data stream objects (or just file objects). Users access files using these file objects, identified to the users through file handles.
- a file handle is a 32-bit entity representing an instance of an open file stream. For example, WindowsNT creates the file object and returns a file handle to the users in response to the user request for file creation or file open.
- the file system 60 initializes a pointer to a file control block. Multiple file objects point to the same file control block and each file control block maintains separate stream objects for each open context. Externally, the file handle is opaque to the users. Multiple opens can be issued against the same file. When the user closes a file, the file object and the associated file handle is removed.
- the file system 60 maps file streams into sequences of segments which become progressively larger; each segment corresponds to one or more pages.
- the file system 60 attempts to reserve contiguous pages for data streams but only allocates real backing storage on an as needed basis, usually as a result of a file extension requested by writing beyond the data stream allocation size.
- the file system 60 rounds the extension size in number of bytes up to a multiple of 4 kilobytes to make it an integer number of pages, and requests pages for actual allocation.
- the number of 4 kilobyte pages allocated by the file system depends on the number of file extension requests made.
- the file system 60 allocate one 4 kilobyte page for the first extension request, two 4 kilobyte pages for the second request, four 4 kilobyte pages for the third extension request, and so on.
- the newly allocated pages are zero filled.
- the file system 60 can reduce the amount of bookkeeping information on the byte offset to page mapping.
- the file system 60 reserves (sometimes much) larger than requested memory space for a file, and substantiates the storage by allocating backing storage page by page.
- a 4 kilobyte segment also maps naturally to a page, simplifying the data stream segment to page mapping.
- an analogy could be made with the NTFS's allocation policy of 4 kilobyte clusters (segment) size for large disks to speed up allocation and reduce fragmentation, such analogy is not completely valid because the actual on-disk allocation segment size depends greatly on the local disk size and the physical file systems.
- the file system 60 Similar to the NTFS, which controls the allocation of each disk partition and therefore can quickly determine the free volume space available for allocation, the file system 60 requests the total available space information and uses this information to quickly determine whether to proceed with the allocation processing. If the total available space is less than the required allocation size, the request is denied immediately. Otherwise, the file system 60 will proceed to allocate the pages to satisfy the request. The fact that the file system 60 can proceed with the allocation does not guarantee that the allocation will succeed, because the actual total available space may change constantly.
- the file system 60 takes advantage of the page level replication capability of the underlying distributed addressable shared memory system 20 disclosed in the U.S. patent application incorporated by reference above.
- Page level replication allows the system to provide file replication.
- the data streams of a replicated file are backed by pages, which are themselves replicated. In this way, data streams are replicated automatically without intervention of the file system 60.
- the extra space consumed by the multiple replicas is not reflected in the file (data stream) sizes.
- the stream allocation size still reports the total allocation size in pages required for one replica.
- the pages backing temporary files, however, are not replicated.
- the shared memory provides the distribution mechanism for resource sharing among peer nodes running the file system 60 software.
- Each instance of the file system 60 on each network node views the shared memory resources (i.e., pages) as being shared with other local or remote threads.
- the file system 60 needs a way to implement high level, file system locks to provide consistent resource sharing. Any concurrency control structure can be used to implement locks, such as lock objects or semaphores. In database applications, locking may also be achieved by implementing concurrency control structures associated with database indices or keys. In file system applications access to files or directories may be controlled. Another example of file system locks is Byte Range Locking, which provides the users the ability to coordinate shared access to files.
- a byte range lock is a lock set on a range of bytes of a file.
- Coordinated shared access to a file can be accomplished by taking locks on the desired byte ranges.
- the high level file system lock works in the following fashion: (a) a file system resource is to be shared by each file system 60 instance, and the access to the resource is coordinated by a locking protocol using a lock object data structure that represents the high level lock to coordinate the shared resource, and it is the value of the data structure that represents the current state of the lock; (b) to access the resource, the instance at each node must be able to look at the state (or value) of the lock data structure, and if it is "free,” modify it so that it becomes “busy,” but if it is "busy,” then it has to wait to become “free,” and there could be intermediate states between “free” and “busy” (i.e., more than two lock states), but in any event, in this byte range locking example, a lock is a description of a certain byte range being shared/exclusively locked by some thread of the file system 60, and a conflicting new byte range
- the engine can also be used to coordinate access to resources, but in the case of complex high level resource locking such as Byte Range Locking, using the engine's locking features and capabilities directly to provide locks may be too costly for the following reasons: (a) each byte range lock would require a page representing the lock, and since the number of byte range locks can be large, the cost in terms of page consumption may be too high; and (b) the engine locks only provide two lock states (i.e., shared and exclusive), and high level file system locks may require more lock states.
- the file system 60 of the invention implements the file system locking using the engine locking as a primitive to provide serialization to access and update the lock data structures.
- the file system 60 takes a shared lock on the data structure's page using the engine locking features and capabilities before it reads the page to prevent the data structure being modified.
- To modify the lock structure it sets a exclusive lock on the page. The page lock is taken and released as soon as the lock structure value is read or modified.
- the file system 60 implements the high level locks in the following way: (a) to take a file system lock (FS lock), the file system 60 sets a shared lock on the FS lock page and reads the page and then examines the lock structure; (b) if the lock structure indicates the resource is unlocked or locked in compatible lock mode, then the file system 60 requests to exclusively lock the page, and this guarantees only one file system 60 node instance can modify the lock data structure, and if the request succeeds then the file system 60 write maps the lock page and then changes the lock structure to set the lock and unlocks the page and sets page access to none; and (c) if the resource is locked in incompatible lock mode, the file system 60 unlocks the page but retains the page read mapped, and it then puts itself (the current thread) in a queue and waits for a system event notifying that the lock value has changed, and when the lock value does change then the file system 60 thread gets notified and repeats the step (a) above.
- FS lock file system lock
- the file system 60 sets a
- the file system 60 implements the notification using a signal primitive.
- the file system 60 threads waiting for a lock are blocked on a system event.
- a signal is sent to each blocked file system 60 thread.
- Each blocked file system 60 threads then wakes up and repeats step (a).
- FS locks are stored in volatile pages.
- Byte Range Locking is a file system locking service exported to the users through the Win32 LockFile() and LockFileEx() API. It allows simultaneous access to different non-overlapping regions of a file data stream by multiple users. To access the data stream, the user locks the region (byte range) of the file to gain exclusive or shared read access to the region.
- the file system 60 supports byte range locking for each individual data stream of the file.
- the following Win32-style byte range locking behavior is supported: (a) locking a region of a file is used to acquire shared or exclusive access to the specified region of the file, and the file system 60 will track byte range locks by file handle, therefore file handles provide a way to identify uniquely the owner of the lock; (b) locking a region that goes beyond the current end-of-file position is not an error; (c) locking a portion of a file for exclusive access denies all other processes both read and write access to the specified region of the file, and locking a portion of a file for shared access denies all other processes write access to the specified region of the file but allows other processes to read the locked region, and this means that the file system 60 must check byte range locks set on the data stream not only for lock requests but for every read or write access; (d) if an exclusive lock is requested for a region that is already locked either shared or exclusively by other threads, the request blocks or fails immediately depending on the calling option specified
- the file system 60 For each byte range lock, the file system 60 creates a byte range lock record to represent the lock.
- the record contains the following information: (a) byte range; (b) lock mode (shared or exclusive); (c) process identification; and (d) a Win32 lock key value.
- the file system 60 regards the file byte ranges as resources with controlled access. For each byte range lock record, the file system 60 creates a file system lock (as discussed above) to coordinate the access to the byte range "resource.” A compatible byte range lock request (share lock) translates into taking read lock on the file system lock associated with the byte range record. An exclusive byte range lock request is mapped to taking write lock on the file system lock.
- lock requests waiting on the page containing the desired byte range will be notified when the page content changes.
- the addressable shared memory system disclosed in the U.S. patent application incorporated by reference is an "engine" that can create and manage a virtual memory space that can be shared by each computer on a network and can span the storage space of each memory device connected to the network. Accordingly, all data stored on the network can be stored within the virtual memory space and the actual physical location of the data can be in any of the memory devices connected to the network.
- the engine or system can create or receive, a global address signal that represents a portion, for example 4k bytes, of the virtual memory space.
- the global address signal can be decoupled from, i.e. unrelated to, the physical and virtual address spaces of the underlying computer hardware, to provide support for a memory space large enough to span each volatile and persistent memory device connected to the system.
- systems of the invention can operate on 32-bit computers, but can employ global address signals that can be 128 bits wide.
- the virtual memory space spans 2 128 bytes, which is much larger than the 2 32 address space supported by the underlying computer hardware.
- Such an address space can be large enough to provide a separate address for every byte of data storage on the network, including all RAM, disk and tape storage.
- the system includes a directory manager that tracks those portions of the virtual memory space that are in use.
- the system provides physical memory storage for each portion of the virtual memory space in use by mapping each such portion to a physical memory device, such as a RAM memory or a hard-drive.
- the mapping includes a level of indirection that facilitates data migration, fault-tolerant operation, and load balancing.
- each computer can share the memory space. This allows the networked computers to appear to have a single memory, and therefore can allow application programs running on different computers to communicate using techniques currently employed to communicate between applications running on the same machine.
- the invention of the above-identified, incorporated-by-reference U.S. patent application can be understood to include computer systems having a addressable shared memory space.
- the systems can comprise a data network that carries data signals representative of computer readable information a persistent memory device that couples to the data network and that provides persistent data storage, and plural computers that each have an interface that couples to the data network, for accessing the data network to exchange data signals therewith.
- each of the computers can include a shared memory subsystem for mapping a portion of the addressable memory space to a portion of the persistent storage to provide addressable persistent storage for data signals.
- the persistent memory device will be understood to include a plurality of local persistent memory devices that each couple to a respective one of the plural computers.
- the system can also include a distributor for mapping portions of the addressable memory space across the plurality of local persistent memory devices and a disk directory manager for tracking the mapped portions of the addressable memory space to provide information representative of the local persistent memory device that stores that portion of the addressable memory space mapped thereon.
- the systems can also include a cache system for operating one of the local persistent memory devices as a cache memory for cache storing data signals associated with recently accessed portions of the addressable memory space.
- the system can include a migration controller for selectively moving portions of the addressable memory space between the local persistent memory devices of the plural computers.
- the migration controller can determine and respond to data access patterns, resource demands or any other criteria or heuristic suitable for practice with the invention. Accordingly, the migration controller can balance the loads on the network, and move data to nodes from which it is commonly accessed.
- the cache controller can be a software program running on a host computer to provide a software managed RAM and disk cache.
- the RAM can be any volatile memory including SRAM, DRAM or any other volatile memory.
- the disk can be any persistent memory including any disk, RAID, tape or other device that provides persistent data storage.
- the systems can also include a coherent replication controller for generating a copy, or select number of copies, of a portion of the addressable memory space maintained in the local persistent memory device of a first computer and for storing the copy in the local persistent memory device of a second computer.
- the coherent replication controller can maintain the coherency of the copies to provide coherent data replication.
- the systems can also be understood to provide integrated control of data stored in volatile memory and in persistent memory.
- a volatile memory device has volatile storage for data signals
- the shared memory subsystem includes an element, typically a software module, for mapping a portion of the addressable memory space to a portion of the volatile storage.
- the volatile memory device can be comprised of a plurality of local volatile memory devices each coupled to a respective one of the plural computers
- the persistent memory device can be comprised of a plurality of local persistent memory devices each coupled to a respective one of the plural computers.
- a directory manager can track the mapped portions of the addressable memory space, and can include two sub-components; a disk directory manager for tracking portions of the addressable memory space mapped to the local persistent memory devices, and a RAM directory manager for tracking portions of the addressable memory space mapped to the local volatile memory devices.
- a RAM cache system can operate one of the local volatile memory devices as a cache memory for cache storing data signals associated with recently accessed portions of the addressable memory space.
- the systems can include additional elements including a paging element for remapping a portion of the addressable memory space between one of the local volatile memory devices and one of the local persistent memory devices; a policy controller for determining a resource available signal representative of storage available on each of the plural computers and, a paging element that remaps the portion of addressable memory space from a memory device of a first computer to a memory device of a second computer, responsive to the resource available signal; and a migration controller for moving portions of addressable memory space between the local volatile memory devices of the plural computers.
- a paging element for remapping a portion of the addressable memory space between one of the local volatile memory devices and one of the local persistent memory devices
- a policy controller for determining a resource available signal representative of storage available on each of the plural computers and, a paging element that remaps the portion of addressable memory space from a memory device of a first computer to a memory device of a second computer, responsive to the resource available signal
- the systems can include a hierarchy manager for organizing the plural computers into a set of hierarchical groups wherein each group includes at least one of the plural computers.
- Each the group can include a group memory manager for migrating portions of addressable memory space as a function of the hierarchical groups.
- the system can maintain coherency between copied portions of the memory space by including a coherent replication controller for generating a coherent copy of a portion of addressable memory space.
- the system can generate or receive global address signals.
- the systems can include an address generator for generating a global address signal representative of a portion of addressable memory space.
- the address generator can include a spanning unit for generating global address signals as a function of a storage capacity associated with the persistent memory devices, to provide global address signals capable of logically addressing the storage capacity of the persistent memory devices.
- the directory manager can be a distributed directory manager for storing within the distributed memory space, a directory signal representative of a storage location of a portion of the addressable memory space.
- the distributed directory manager can include a directory page generator for allocating a portion of the addressable memory space and for storing therein an entry signal representative of a portion of the directory signal.
- the directory page generator optionally includes a range generator for generating a range signal representative of a portion of the addressable memory space, and for generating the entry signal responsive to the range signal, to provide an entry signal representative of a portion of the directory signal that corresponds to the portion of the addressable memory space.
- the distributed directory manager can include a linking system for linking the directory pages to form a hierarchical data structure of the linked directory pages as well as a range linking system for linking the directory pages, as a function of the range signal, to form a hierarchical data structure of linked directory pages.
- a computer system can include a directory page generator that has a node selector for generating a responsible node signal representative of a select one of the plural computers having location information for a portion of the shared address space. This provides a level of indirection that decouples the directory from the physical storage location of the data. Accordingly, the directory needs only to identify the node, or other device, that tracks the physical location of the data. This way, each time data migrates between physical storage locations, the directory does not have to be updated, since the node tracking the location of the data has not changed and still provides the physical location information.
- the system can include page generators that generate directory pages that carry information representative of a location monitor, such as a responsible computer node, that tracks a data storage location, to provide a directory structure for tracking homeless data.
- a location monitor such as a responsible computer node
- the directory itself can be stored as pages within the virtual memory space. Therefore, the data storage location can store information representative of a directory page, to store the directory structure as pages of homeless data.
- the invention of the above-identified, incorporated-by-reference U.S. patent application can be understood as methods for providing a computer system having a addressable shared memory space.
- the method can include the steps of providing a network for carrying data signals representative of computer readable information, providing a hard-disk, coupled to the network, and having persistent storage for data signals, providing plural computers, each having an interface, coupled to the data network, for exchanging data signals between the plural computers, and assigning a portion of the addressable memory space to a portion of the persistent storage of the hard disk to provide addressable persistent storage for data signals.
- FIG. 5 illustrates a computer network 10 that provides a shared memory that spans the memory space of each node of the depicted computer network 210.
- FIG. 5 illustrates a computer network 210 that includes a plurality of nodes 212a-212c, each having a CPU 214, an operating system 216, an optional private memory device 218, and a shared memory subsystem 220.
- each node 212a-212c connects via the shared memory subsystem 220 to a virtual shared memory 222.
- the computer network 210 enables network nodes 212a-212c to communicate and share functionality using the same techniques employed by applications when communicating between applications running on the same machine. These techniques can employ object linking and embedding, dynamic link libraries, class registering, and other such techniques.
- the nodes 212 can employ the virtual shared memory 222 to exchange data and objects between application programs running on the different nodes 212 of the network 210.
- each node 212 can be a conventional computer system such as a commercially available IBM PC compatible computer system.
- the processor 214 can be any processor unit suitable for performing the data processing for that computer system.
- the operating system 216 can be any commercially available or proprietary operating system that includes, or can access, functions for accessing the local memory of the computer system and networking.
- the private memory device 218 can be any computer memory device suitable for storing data signals representative of computer readable information.
- the private memory provides the node with local storage that can be kept inaccessible to the other nodes on the network.
- the private memory device 218 includes a RAM, or a portion of a RAM memory, for temporarily storing data and application programs and for providing the processor 214 with memory storage for executing programs.
- the private memory device 18 can also include persistent memory storage, typically a hard disk unit or a portion of a hard disk unit, for the persistent storage of data.
- the shared memory subsystem 220 depicted in FIG. 5 is an embodiment of the invention that couples between the operating system 216 and the virtual shared memory 222 and forms an interface between the operating system 216 and the virtual shared memory to allow the operating system 216 to access the virtual shared memory 222.
- the depicted shared memory subsystem 220 is a software module that operates as a stand-alone distributed shared memory engine.
- the depicted system is illustrative and other systems of the invention can be realized as shared memory subsystems that can be embedded into an application program, or be implemented as an embedded code of a hardware device. Other such applications can be practiced without departing from the scope of the invention.
- the depicted virtual shared memory 222 illustrates a virtual shared memory that is accessible by each of the nodes 212a-212c via the shared memory subsystem 220.
- the virtual shared memory 222 can map to devices that provide physical storage for computer readable data, depicted in FIG. 5 as a plurality of pages 224a-224d.
- the pages form portions of the shared memory space and divide the address space of the shared memory into page addressable memory spaces.
- the address space can be paged into 4K byte sections.
- alternative granularity can be employed to manager the shared memory space.
- Each node 212a-212c through the shared memory subsystem 220 can access each page 224a-224d stored in the virtual shared memory 222.
- Each page 224a-224d represents a unique entry of computer data stored within the virtual shared memory 222.
- Each page 224a-224d is accessible to each one of the nodes 212a-212c, and alternatively, each node can store additional pages of data within the virtual shared memory 222. Each newly stored page of data can be accessible to each of the other nodes 212a-212c.
- the virtual shared memory 222 provides a system for sharing and communicating data between each node 212 of the computer network 210.
- FIG. 6 illustrates in functional block diagram form a computer network 230 that has a distributed shared memory.
- each node 212a-212c has a memory subsystem 232 that connects between the operating system 216 and the two local memory devices, the RAM 234 and the disk 236, and that further couples to a network 238 that couples to each of the depicted nodes 212a, 212b and 212c and to a network memory device 226.
- FIG. 6 illustrates a distributed shared memory network 30 that includes a plurality of nodes 212a-212c, each including a processing unit 214, an operating system 216, a memory subsystem 232, a RAM 234, and a disk 236.
- FIG. 6 further depicts a computer network system 38 that connects between the nodes 212a-212c and the network memory device 226.
- the network 238 provides a network communication system across these elements.
- the illustrated memory subsystems 232a-232c that connect between the operating system 216a-216c, the memory elements 234a-234c, 236a-236c, and the network 238, encapsulate the local memories of each of the nodes to provide an abstraction of a shared virtual memory system that spans across each of the nodes 212a-212c on the network 238.
- the memory subsystems 232a-232c can be software modules that act as distributors to map portions of the addressable memory space across the depicted memory devices.
- the memory subsystems further track the data stored in the local memory of each node 212 and further operate network connections with network 238 for transferring data between the nodes 212a-212c.
- the memory subsystems 232a-232c access and control each memory element on the network 238 to perform memory access operations that are transparent to the operating system 216. Accordingly, the operating system 216 interfaces with the memory subsystem 232 as an interface to a global memory space that spans each node 212a-212c on the network 238.
- FIG. 6 further depicts that the system 230 provides a distributed shared memory that includes persistent storage for portions of the distributed memory.
- the depicted embodiment includes a memory subsystem, such as subsystem 232a, that interfaces to a persistent memory device, depicted as the disk 236a.
- the subsystem 232a can operate the persistent memory device to provide persistent storage for portions of the distributed shared memory space.
- each persistent memory device 236 depicted in FIG. 6 has a portion of the addressable memory space mapped onto it.
- device 236a has the portions of the addressable memory space, C o , C d , C g , mapped onto it, and provides persistent storage for data signals stored in those ranges of addresses.
- the subsystem 232a can provide integrated control of persistent storage devices and electronic memory to allow the distributed shared memory space to span across both types of storage devices, and to allow portions of the distributed shared memory to move between persistent and electronic memory depending on predetermined conditions, such as recent usage.
- the nodes of the network are organized into a hierarchy of groups.
- the memory subsystems 232a-232c can include a hierarchy manager that provides hierarchical control for the distribution of data. This includes controlling the migration controller, and policy controller, which are discussed in detail below, to perform hierarchical data migration and load balancing, such that data migrates primarily between computers of the same group, and passes to other groups in hierarchical order. Resource distribution is similarly managed.
- FIG. 7 illustrates in more detail one shared memory subsystem 240 according to the invention.
- FIG. 7 depicts a shared memory subsystem 240, that includes an interface 242, a DSM directory manager 244, a memory controller 246, a local disk cache controller 248, and a local RAM cache controller 250.
- FIG. 7 further depicts the network 254, an optional consumer of the DSM system, depicted as the service 258, the operating system 216, a disk driver 260, a disk element 262 and a RAM element 264.
- the shared memory subsystem 240 depicted in FIG. 7 can encapsulate the memory management operations of the network node 212 to provide a virtual shared memory that can span across each node that connects into the network 254. Accordingly, each local node 212 views the network as a set of nodes that are each connected to a large shared computer memory.
- the depicted interface 242 provides an entry point for the local node to access the shared memory space of the computer network.
- the interface 242 can couple directly to the operating system 216, to a distributed service utility such as the depicted DSM file system 258, to a distributed user-level service utility, or alternatively to any combination thereof.
- the depicted interface 242 provides an API that is a memory oriented API.
- the illustrated interface 242 can export a set of interfaces that provide low-level control of the distributed memory.
- the interface 242 exports the API to the operating system 216 or to the optional DSM service 258.
- the operating system 216 or the service employs the interface 242 to request standard memory management techniques, such as reading and writing from portions of the memory space.
- These portions of the memory space can be the pages as described above which can be 4K byte portions of the shared memory space, or other units of memory, such as objects or segments.
- Each page can be located within the shared memory space which is designated by a global address signal for that page of memory.
- the system can receive address signals from an application program or, optionally, can include a global address generator that generates the address signals.
- the address generator can include a spanming module that generates address signals for a memory space that spans the storage capacity of the network.
- the interface 242 receives requests to manipulate pages of the shared memory space.
- the interface 242 can comprise a software module that includes a library of functions that can be called by services, the OS 216, or other caller, or device.
- the function calls provide the OS 216 with an API of high level memory oriented services, such as read data, write data, and allocate memory.
- the implementation of the functions can include a set of calls to controls that operate the directory manager 244, and the local memory controller 246.
- the interface 242 can be a set of high level memory function calls to interface to the low-level functional elements of shared memory subsystem 240.
- FIG. 7 further depicts a DSM directory manager 244 that couples to the interface 242.
- the interface 242 passes request signals that represent requests to implement memory operations such as allocating a portion of memory, locking a portion of memory, mapping a portion of memory, or some other such memory function.
- the directory manager 244 manages a directory that can include mappings than can span across each memory device connected to the network 238 depicted in FIG. 6, including each RAM and disk element accessible by the network.
- the directory manager 244 stores a global directory structure that provides a map of the global address space. In one embodiment as will be explained in greater detail hereinafter, the directory manager 244 provides a global directory that maps between global address signals and responsible nodes on the network. A responsible node stores information regarding the location and attributes of data associated with a respective global address, and optionally stores a copy of that page's data. Consequently, the directory manager 244 tracks information for accessing any address location within the virtual address space.
- the control of the distributed shared memory can be coordinated by the directory manager 244 and the memory controller 246.
- the directory manager 244 maintains a directory structure that can operate on a global address received from the interface 242 and identify, for that address, a node on the network that is responsible for maintaining the page associated with that address of the shared memory space. Once the directory manager 244 identifies which node is responsible for maintaining a particular address, the directory manager 244 can identify a node that stores information for locating a copy of the page, and make the call to the memory controller 246 of that node and pass to that node's memory controller the memory request provided by the memory interface 242.
- the depicted directory manager 244 is responsible for managing a directory structure that identifies for each page of the shared memory space a responsible node that tracks the physical location of the data stored in the respective page.
- the directory rather than directly providing the location of the page, can optionally identify a responsible node, or other device, that tracks the location of the page. This indirection facilitates maintenance of the directory as pages migrate between nodes.
- the memory controller 246 performs the low level memory access functions that physically store data within the memory elements connected to the network.
- the directory manager 244 of a first node can pass a memory access request through the interface 242, to the network module of the OS 216, and across the network 254 to a second node that the directory manager 244 identifies as the responsible node for the given address.
- the directory manager 244 can then query the responsible node to determine the attributes and the current owner node of the memory page that is associated with the respective global address.
- the owner of the respective page is the network node that has control over the memory storage element on which the data of the associated page is stored.
- the memory controller 246 of the owner can access, through the OS 216 of that node or through any interface, the memory of the owner node to access the data of the page that is physically stored on that owner node.
- the directory manager 244 couples to the network module 252 which couples to the network 254.
- the directory manager can transmit to the network module 252 a command and associated data that directs the network interface 252 to pass a data signal to the owner node.
- the owner node receives the memory request across network 254 and through network module 252 that passes the memory request to the interface 242 of that owner node.
- the interface 242 couples to the memory controller 246 and can pass the memory request to the local memory controller of that owner node for operating the local storage elements, such as the disk or RAM elements, to perform the requested memory operation.
- the memory subsystem 240 of the owner node can then transfer the page of data, or a copy of the page of data, via the network 254 to the node that originally requested access to that portion of the shared memory.
- the page of data is transferred via the network 254 to the network module 252 of the requesting node and the shared memory subsystem 240 operates the memory controller 246 to store in the local memory of the requesting node a copy of the accessed data.
- the directory manager 244 identifies a node that has a copy of the data stored in that page and moves a copy of that data into the local memory of the requesting node.
- the local memory storage, both volatile and persistent, of the requesting node therefore becomes a cache for pages that have been requested by that local node.
- FIG. 7 depicts a memory controller that has a local disk cache controller 248 and a local RAM cache controller 250. Both of these local cache controllers can provide to the operating system 216, or other consumer pages of the shared memory space that are cache stored in the local memory of the node, including local persistent memory and local volatile memory.
- the shared memory subsystem can include a coherent replication controller that maintains coherency between cached pages by employing a coherence through invalidation process, a coherence through migration process or other coherence process suitable for practice with the present invention.
- the coherent replication controller can automatically generate a copy of the data stored in each page and can store the copy in a memory device that is separate from the memory device of the original copy. This provides for fault tolerant operation, as the failure of any one memory device will not result in the loss of data.
- the coherent replication controller can be a software model that monitors all copies of pages kept in volatile memory and made available for writing.
- the controller can employ any of the coherency techniques named above, and can store tables of location information that identifies the location information for all generated copies.
- FIG. 8 illustrates in greater detail one embodiment of a shared memory subsystem according to the invention.
- the shared memory subsystem 270 depicted in FIG. 8 includes a remote operations element 274, a local RAM cache 276, a RAM copyset 278, a global RAM directory 280, a disk copyset 282, a global disk directory 284, a configuration manager 288, a policy element 290, and a local disk cache 94.
- FIG. 8 further depicts a network element 304, a physical memory 300, shared data element 302, a physical file system 298, which is part of the operating system 216, a configuration service 308, a diagnostic service 310, and a memory access request 312.
- the depicted subsystem 270 can be a computer program that couples to the physical memory, file system, and network system of the host node, or can be electrical circuit card assemblies that interface to the host node, or can be a combination of programs and circuit card assemblies.
- the flow scheduler 272 depicted in FIG. 8 can orchestrate the controls provided by an API of the subsystem 270.
- the flow scheduler 272 can be a state machine that monitors and responds to the requests 312 and remote requests through network 304 which can be instructions for memory operations and which can include signals representative of the global addresses being operated on.
- These memory operation requests 312 can act as op-codes for primitive operations on one or more global addresses. They can be read and write requests, or other memory operations.
- the flow scheduler 272 can be a program, such as an interpreter, that provides an execution environment and can map these op-codes into control flow programs called applets.
- the applets can be independent executable programs that employ both environment services, such as threading, synchronization, and buffer management, and the elements depicted in FIG. 8.
- the API is capable of being called from both external clients, like a distributed shared memory file system, as well as recursively by the applets and the other elements 274-294 of the subsystem 270.
- Each element can provide a level of encapsulation to the management of a particular resource or aspect of the system.
- each element can export an API consisting of functions to be employed by the applets. This structure is illustrated in FIG. 8. Accordingly, the flow scheduler 272 can provide an environment to load and execute applets.
- the applets are dispatched by the flow scheduler 272 on a per op-code basis and can perform the control flow for sequential or parallel execution of an element to implement the op-code on the specified global address, such as a read or write operation.
- the flow scheduler 272 can include an element to change dynamically the applet at run time as well as execute applets in parallel and in interpreted mode.
- the depicted shared memory subsystem 270 includes a bifurcated directory manager that includes the global RAM directory 280 and the global disk directory 284.
- the global RAM directory 280 is a directory manager that tracks information that can provide the location of pages that are stored in the volatile memory, typically RAM, of the network nodes.
- the global disk directory 284 is a global disk directory manager that manages a directory structure that tracks information that can provide the location of pages that are stored on persistent memory devices. Together, the global RAM directory 280 and the global disk directory 284 provide the shared memory subsystem 270 with integrated directory management for pages that are stored in persistent storage and volatile memory.
- a paging element can operate the RAM and disk directory managers to remap portions of the addressable memory space between one of the volatile memories and one of the persistent memories.
- this allows the paging element to remap pages from the volatile memory of one node to a disk memory of another node.
- the RAM directory manager passes control of that page to the disk directory manager which can then treat the page as any other page of data. This allows for improved load balancing, by removing data from RAM memory, and storing it in the disk devices, under the control of the disk directory manager.
- the local memory controller of the subsystem 270 is provided by the local RAM cache 276 and the local disk cache 294.
- the local RAM cache 276 which couples to the physical memory 300 of the local node can access, as described above, the virtual memory space of the local node to access data that is physically stored within the RAM memory 300.
- the local disk cache 294 couples to the persistent storage device 298 and can access a physical location that maintains in the local persistent storage data of the distributed shared memory.
- FIG. 8 also depicts a remote operations element 274 that couples between the network 304 and the flow scheduler 272.
- the remote operations element 274 negotiates the transfer of data across the network 304 for moving portions of the data stored in the shared memory space between the nodes of the network.
- the remote operations element 274 can also request services from remote peers, i.e. invalidate to help maintain coherency or for other reasons.
- FIG. 8 also depicts a policy element 290 that can be a software module that acts as a controller to determine the availability of resources, such as printer capabilities, hard-disk space, available RAM and other such resources.
- the policy controller can employ any of the suitable heuristics to direct the elements, such as the paging controller, disk directory manager, and other elements to dynamically distribute the available resources.
- FIG. 8 further depicts a memory subsystem 270 that includes a RAM copyset 278 and a disk copyset 282.
- the disk copyset 282 can maintain information on copies of pages that are stored in the local disk cache, which can be the local persistent memory.
- the RAM copyset 278 can maintain information on copies of pages that are stored in the local RAM cache which can be the local RAM.
- These copysets encapsulate indexing and storage of copyset data that can be employed by applets or other executing code for purposes of maintaining the coherency of data stored in the shared memory space.
- the copyset elements can maintain copyset data that identifies the pages cached by the host node.
- the copyset can identify the other nodes on the network that maintain a copy of that page, and can further identify for each page which of these nodes is the owner node, wherein the owner node can be a node which has write privileges to the page being accessed.
- the copysets themselves can be stored in pages of the distributed shared memory space.
- the local RAM cache 276 provides storage for memory pages and their attributes.
- the local RAM cache 276 provides a global address index for accessing the cached pages of the distributed memory and the attributes based on that page.
- the local ram cache 276 provides the index by storing in memory a list of each global address cached in the local RAM. With each listed global address, the index provides a pointer into a buffer memory and to the location of the page data.
- the index can further provide attribute information including a version tag representative of the version of the data, a dirty bit representative of whether the RAM cached data is a copy of the data held on disk, or whether the RAM cached data has been modified but not yet flushed to disk, a volatile bit to indicate if the page is backed by backing store in persistent memory, and other such attribute information useful for managing the coherency of the stored data.
- attribute information including a version tag representative of the version of the data, a dirty bit representative of whether the RAM cached data is a copy of the data held on disk, or whether the RAM cached data has been modified but not yet flushed to disk, a volatile bit to indicate if the page is backed by backing store in persistent memory, and other such attribute information useful for managing the coherency of the stored data.
- the memory subsystem 270 provides the node access to the distributed memory space by the coordinated operation of the directory manager that includes the global RAM directory 280 and the global disk directory 284, the cache controller that includes the local RAM cache and the local disk cache elements 276 and 294, and the copyset elements which include the RAM copyset 278 and the disk copyset 282.
- the directory manager provides a directory structure that indexes the shared address space. Continuing with the example of a paged shared address space, the directory manager of the subsystem 270 allows the host node to access, by global addresses, pages of the shared memory space.
- FIGS. 9 and 10 illustrate one example of a directory structure that provides access to the shared memory space.
- FIG. 9 depicts a directory page 320 that includes a page header 322, directory entries 324 and 326, wherein each directory entry includes a range field 330, a responsible node field 332, and an address field 334.
- the directory pages can be generated by a directory page generator that can be a software module controlled by the directory manager. It will be understood that the directory manager can generate multiple directories, including one for the Global disk and one for the Global RAM directories.
- the depicted directory page 320 can be a page of the global address space, such as a 4K byte portion of the shared address space. Therefore, the directory page can be stored in the distributed shared memory space just as the other pages to which the directory pages provide access.
- each directory page 120 includes a page header 322 that includes attribute information for that page header, which is typically metadata for the directory page, and further includes directory entries such as the depicted directory entries, 324 and 326, which provide an index into a portion of the shared address space wherein that portion can be one or more pages, including all the pages of the distributed shared memory space.
- the depicted directory page 320 includes directory entries that index a selected range of global addresses of the shared memory space.
- the directory generator can include a range generator so that each directory entry can include a range field 330 that describes the start of a range of addresses that that entry locates.
- each directory page 320 can include a plurality of directory entries, such as entries 324 and 326, that can subdivide the address space into a subset of address ranges.
- the depicted directory page 320 includes two directory entries 324 and 326.
- the directory entries 324 and 326 can, for example, subdivide the address space into two sub-portions.
- the start address range of the directory entry 324 could be the base address of the address space
- the start address range of the directory entry 326 could be the address for the upper half of the memory space.
- the directory entry 324 provides an index for pages stored in the address space between the base address and up to the mid-point of the memory space and, in complement thereto, the directory entry 326 provides an index to pages stored in the address space that ranges from the mid-point of the address space to the highest address.
- FIG. 9 further depicts a directory page 320 that includes, in each directory entry, a responsible node field 332 and the child page global address field 334. These fields 332, 334 provide further location information for the data stored in pages within the address range identified in field 330.
- FIG. 10 depicts a directory 340 formed from directory pages similar to those depicted in FIG. 9.
- FIG. 10 depicts that the directory 340 includes directory pages 342, 350-354, and 360-366.
- FIG. 10 further depicts that the directory 340 provides location information to the pages of the distributed shared memory space depicted in FIG. 10 as pages 370-384.
- the directory page 342 depicted in FIG. 10 acts like a root directory page and can be located at a static address that is known to each node coupled to the distributed address space.
- the root directory page 342 includes three directory entries 344, 346, and 348.
- Each directory entry depicted in FIG. 10 has directory entries similar to those depicted in FIG. 9.
- directory entry 344 includes a variable Co which represents the address range field 330, a variable Nj representative of the field 332, and a variable Cs representative of the field 334.
- the depicted root directory page 342 subdivides the address space into three ranges illustrated as an address range that extends between the address Co and Cd, a second address range that extends between the address Cd and Cg, and a third address range that extends between Cg and the highest memory location of the address space.
- each directory entry 344, 346, and 348 points to a subordinate directory page, depicted as directory pages 350, 352, and 354, each of which further subdivides the address range index by the associated directory entry of the root directory 342.
- this subdivision process continues as each of the directory pages 350, 352, and 354 each again have directory entries that locate subordinate directory pages including the depicted examples of directory pages 360, 362, 364, and 366.
- the depicted example of directory pages 360, 362, 364, and 366 are each leaf entries.
- the leaf entries contain directory entries such as the directory entries 356 and 358 of the leaf entry 360, that store a range field 330 and the responsible node field 332. These leaf entries identify an address and a responsible node for the page in the distributed memory space that is being accessed, such as the depicted pages 370-384.
- the leaf entry 356 points to the page 370 that corresponds to the range field 330 of the leaf entry 356, which for a leaf entry is the page being accessed.
- the directory structure 340 provides location information for pages stored in the distributed address space.
- a node selector can select a responsible node for each page, as described above, so that the leaf entry 356 provides information of the address and responsible node of the page being located. Accordingly, this directory tracks ownership and responsibility for data, to provide a level of indirection between the directory and the physical location of the data.
- the memory subsystem 270 passes to the responsible node indicated in the leaf entry 356 the address of the page being accessed.
- the shared memory subsystem of that node can identify a node that stores a copy of the page being accessed, including the owner node. This identification of a node having a copy can be performed by the RAM copyset or disk copyset of the responsible node.
- the node having a copy stored in its local physical memory can employ its local cache elements, including the local RAM cache and local disk cache to the identify from the global address signal a physical location of the data stored in the page being accessed.
- the cache element can employ the operating system of the owner node to access the memory device that maintains that physical location in order that the data stored in the page can be accessed.
- the data read from the physical memory of the owner node can be passed via the network to the memory subsystem of the node requesting the read and subsequently stored into the virtual memory space of the requesting node for use by that node.
- the depicted directory structure 340 comprises a hierarchical structure.
- the directory structure 340 provides a structure that continually subdivides the memory space into smaller and smaller sections. Further, each section is represented by directory pages of the same structure, but indexes address spaces of different sizes.
- a linker inserts or deletes the pages from the directory.
- the linker is a software module for linking data structures. The linker can operate responsive to the address ranges to provide the depicted hierarchical structure. Accordingly, the depicted directory 340 provides a scaleable directory for the shared address space.
- the directory pages are stored in the distributed address space and maintained by the distributed shared memory system.
- a root for the directory can be stored in known locations to allow for bootstrap of the system. Consequently, commonly used pages are copied and distributed, and rarely used pages are shuffled off to disk. Similarly, directory pages will migrate to those nodes that access them most, providing a degree of self-organization that reduces network traffic.
- FIG. 11 depicts the directory of FIG. 10 being employed by a system according to the invention.
- FIG. 11 depicts a system 400 that includes two nodes, 406a and 406b, a directory structure 340, and a pair of local memories having volatile memory devices 264a and 264b, and persistent memory devices 262a and 262b.
- Depicted node 406a includes an address consumer 408a, a global address 410a, and interface 242a, a directory manager 244a and a memory controller 246a.
- Node 406b has corresponding elements.
- the nodes are connected by the network 254.
- the directory 340 has a root page, directory pages A-F, and pages 1-5.
- Each node 406a and 406b operates as discussed above.
- the depicted address consumers 408a and 408b can be an application program, file system, hardware device or any other such element that requests access to the virtual memory.
- the address consumers 408a and 408b request an address, or range of addresses, and the directory manager can include a global address generator that provides the consumer with the requested address, or a pointer to the requested address.
- the respective directory managers 244a and 244b generate directory pages and store the pages in the directory structure 340.
- the directory structure 340 tracks the portions of the address space being employed by the system 400, and physical storage for each page is provided within the local memories.
- the data associated with the directory pages are distributively stored across the two local memories and duplicate copies can exist.
- the data can move between different local memories and also move, or page, between volatile and persistent storage.
- the data movement can be responsive to data requests made by memory users like application programs, or by operation of the migration controller described above.
- the movement of data between different memory locations can occur without requiring changes to the directory 340. This is achieved by providing a directory 340 that is decoupled from the physical location of the data by employing a pointer to a responsible node that tracks the data storage location. Accordingly, although the data storage location can change, the responsible node can remain constant, thereby avoiding any need to change the directory 340.
- the distributed, structured file system described above provides a number of advantages that are not readily apparent.
- the file system 60 may be used to provide an efficient, shared client-side Web cache.
- FIG. 12 shows a typical embodiment of a system for accessing the global information network commonly known as the Internet.
- the user generally uses a terminal 400 to interact with the network.
- the terminal 400 may be a UNIX workstation, an Apple Macintosh, an IBM PC or PC clone, or any other hardware device capable of running a browser program such as Netscape Navigator or Microsoft Internet Explorer.
- the user requests data from a variety of other computers connected to the global information network.
- One particular type of file that may be requested is a file written in Hypertext Markup Language (HTML), commonly referred to as "Web" pages.
- HTML Hypertext Markup Language
- HTML files generally include "tags" that indicate to the browser application executing on the terminal 400 that special action should be taken.
- a tag may indicate to the browser: that a graphics file should be displayed at a particular point in the document (typical formats include GIF, JPEG, MPEG, and MOV files); that certain text should be centered, bolded, or otherwise formatted before it is displayed on the screen of the terminal 400; that the background of a document should be shaded or have a particular pattern when displayed on the screen of the terminal 400; or that a different HTML file should be loaded in place of the HTML file the browser is currently displaying.
- the user's terminal 400 is usually connected to a mass storage device 408.
- the mass storage device 408 may be a hard disk drive, random access memory, or any other media that allows data to be written to it.
- the browser program executing on the terminal 400 uses the mass storage device 408 to store recently accessed Web pages.
- the cache provides a mapping between Uniform Resource Locator addresses and locally cached files.
- Internet Explorer manufactured by Microsoft Corporation of Redmond, Washington, caches downloaded ActiveX objects, Web pages, Web page fragments, JAVA applets, image files, and other downloaded data.
- the cache is instantiated as a COM Name Space extension object. This object supports the OLE IPERSIST API for storage access and provides a mapping between URL addresses and locally cached files.
- Netscape Navigator manufactured by Netscape Communications Corporation of Mountain View, Calif., which also caches Web pages, Web page fragments, JAVA applets, image files, and other downloaded data within a directory which is specified as a parameter in the browser.
- the browser stores downloaded data as separate files in the directory and the file names are browser generated handles that are unique per client.
- the distributed file system 60 described above allows user 400 and user 420 to share their Internet browser caches. This is particularly advantageous if user 400 and user 420 are employees of the same corporation or have some other close working relationship that is facilitated by sharing their Internet Web caches. For example, if user 400 has accessed a Web page 402 or Web site that user 420 subsequently needs to access, the Web page 402 or Web site will appear to be cached by the browser application used by user 420. This eliminates the delay associated with retrieving the Web page 402 or Web site over the network. Also, the distributed file system 60 allows the size of the shared Web cache to increase as the number of users sharing the cache increases. This results from the distributed file system 60 utilizing local memory on each of the users' terminals. Accordingly, much larger Web cache sizes can be achieved than with traditional methods such as proxy servers.
- the browser application caches are files that are stored by the browsers, it is clear from the above description that files stored in the distributed file system described above can be shared between both users; however, the browser application used by each user must be directed to cache downloaded data in the same cache file.
- an object may be provided which redirects a users cache read or cache right to or from its local cache to the shared cache file.
- the user of terminal 400 loads data from Web server.
- the data can be any form of data accessible over a network, and, in particular, HTML files, HTML file fragments, JAVA applets, ActiveX controls, or image files.
- the user of terminal 400 experiences some delay while the HTML file is transmitted by the Web server to the user's terminal 400.
- the browser application caches the downloaded HTML page on the mass storage device 408 associated with the terminal 400 by writing the downloaded data representing the Web page 402 to a file.
- the client-side Web cache i.e., the caches on mass storage devices 408, 428
- the client-side Web cache i.e., the caches on mass storage devices 408, 428
- a cache file is created in the distributed file system 60.
- the browser application executing on terminal 400 retrieves the Web page 402 from its cache file instead of fetching the Web page 402 from the Web server.
- the browser application executing on the terminal 420 accesses the cache file created by its browser. Because the cache file is shared between the users, the browser application executing on terminal 420 will find the Web page 402 in the cache file and display it without requiring the Web server to transmit it a second time.
- Internet Explorer uses two distinct client-side caches. Both caches are stored in folders visible within the system root. One cache stores ActiveX controls, and this cache is a standard file system directory. The second cache is for Web pages, Web page fragments, and other downloaded data. Since Internet explorer stores downloaded data using the data's file name, the browser application executing on terminal 400 and terminal 420 will each attempt to access the same file in the same directory. The directories and the files are shared by terminal 400 and terminal 420 for systems using the shared file system 60 described above, the browser applications executing on those terminals share their caches.
- Netscape Navigator uses a directory specified within the browser as its cache, but file names within the cache file are browser generated handles which are unique for each browser. That is, the same file may be named differently depending on whether the browser application executing on terminal 400 stored the file or the browser application executing on terminal 420 stored the file. This problem may be solved by providing a translation between stored file handles and files to redirect file handle requests to the appropriate file. Such a translation can be effected by, in one embodiment, a table mapping browser file handles to URL addresses.
- the distributed file system 60 need not be implemented using a distributed shared memory.
- the underlying memory may be unstructured.
- the mass storage devices 408, 428 may be connected by a physical bus and appropriate hardware may be implemented that insures the data written to one of the mass storage devices is replicated on the other.
Abstract
Description
Claims (14)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/848,971 US6026474A (en) | 1996-11-22 | 1997-05-02 | Shared client-side web caching using globally addressable memory |
AU73034/98A AU7303498A (en) | 1996-11-22 | 1997-11-21 | Shared client-side web caching using globally addressable memory |
PCT/US1997/021459 WO1998022891A1 (en) | 1996-11-22 | 1997-11-21 | Shared client-side web caching using globally addressable memory |
Applications Claiming Priority (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US08/754,481 US6148377A (en) | 1996-11-22 | 1996-11-22 | Shared memory computer networks |
US08/827,534 US5918229A (en) | 1996-11-22 | 1997-03-28 | Structured data storage using globally addressable memory |
US08/848,971 US6026474A (en) | 1996-11-22 | 1997-05-02 | Shared client-side web caching using globally addressable memory |
Related Parent Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/754,481 Continuation-In-Part US6148377A (en) | 1996-11-22 | 1996-11-22 | Shared memory computer networks |
US08/827,534 Continuation-In-Part US5918229A (en) | 1996-11-22 | 1997-03-28 | Structured data storage using globally addressable memory |
Publications (1)
Publication Number | Publication Date |
---|---|
US6026474A true US6026474A (en) | 2000-02-15 |
Family
ID=27419464
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US08/848,971 Expired - Lifetime US6026474A (en) | 1996-11-22 | 1997-05-02 | Shared client-side web caching using globally addressable memory |
Country Status (3)
Country | Link |
---|---|
US (1) | US6026474A (en) |
AU (1) | AU7303498A (en) |
WO (1) | WO1998022891A1 (en) |
Cited By (255)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
JPH11212886A (en) * | 1998-01-27 | 1999-08-06 | Sharp Corp | File object relay method, distributed file system, computer readable recording medium recording program of the relay method and gateway computer |
WO2000036490A2 (en) * | 1998-12-16 | 2000-06-22 | Rstar Corporation | A method and apparatus for supporting a multicast response to a unicast request for a document |
US6167430A (en) * | 1998-05-12 | 2000-12-26 | Unisys Corporation | Multicomputer with distributed directory and operating system |
US6173413B1 (en) * | 1998-05-12 | 2001-01-09 | Sun Microsystems, Inc. | Mechanism for maintaining constant permissions for multiple instances of a device within a cluster |
WO2001025930A1 (en) * | 1999-10-01 | 2001-04-12 | Infraworks Corporation | Shared memory blocking method and system |
US6223180B1 (en) * | 1998-10-30 | 2001-04-24 | Unisys Corp. | System and computer-implemented method for transforming existing host-based screen applications into components useful in developing integrated business-centric applications |
US6226648B1 (en) * | 1997-02-07 | 2001-05-01 | About.Com, Inc. | System and method for modification of included files used in a automatic web page generation system |
US6256740B1 (en) * | 1998-02-06 | 2001-07-03 | Ncr Corporation | Name service for multinode system segmented into I/O and compute nodes, generating guid at I/O node and exporting guid to compute nodes via interconnect fabric |
US6282618B1 (en) * | 1997-11-28 | 2001-08-28 | International Business Machines Corporation | Secure variable storage for internet applications |
US20010027467A1 (en) * | 2000-03-30 | 2001-10-04 | Anderson David P. | Massively distributed database system and associated method |
US6324623B1 (en) * | 1997-05-30 | 2001-11-27 | Oracle Corporation | Computing system for implementing a shared cache |
US6330565B1 (en) * | 1998-04-28 | 2001-12-11 | Xerox Corporation | Database management system and method for storing persistent and non-persistent attributes |
US6330572B1 (en) * | 1998-07-15 | 2001-12-11 | Imation Corp. | Hierarchical data storage management |
US6330567B1 (en) * | 1998-08-13 | 2001-12-11 | Tornado Technologies Co., Ltd | Searching system for searching files stored in a hard disk of a personal computer |
US20010051979A1 (en) * | 1999-09-10 | 2001-12-13 | Avantgo, Inc. | System, method, and computer program product for placement of channels on a mobile device |
US6341316B1 (en) | 1999-09-10 | 2002-01-22 | Avantgo, Inc. | System, method, and computer program product for synchronizing content between a server and a client based on state information |
US6360299B1 (en) | 1999-06-30 | 2002-03-19 | International Business Machines Corporation | Extended cache state with prefetched stream ID information |
US6370552B1 (en) * | 1997-05-14 | 2002-04-09 | Citrix Systems, Inc. | Apparatus and method for displaying application output in an HTML document |
US6370584B1 (en) * | 1998-01-13 | 2002-04-09 | Trustees Of Boston University | Distributed routing |
US20020052781A1 (en) * | 1999-09-10 | 2002-05-02 | Avantgo, Inc. | Interactive advertisement mechanism on a mobile device |
US6393528B1 (en) | 1999-06-30 | 2002-05-21 | International Business Machines Corporation | Optimized cache allocation algorithm for multiple speculative requests |
US6393526B1 (en) * | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
US6405217B1 (en) * | 1998-09-21 | 2002-06-11 | Microsoft Corporation | State-based implementation of transactions on a file system |
US20020073047A1 (en) * | 2000-12-08 | 2002-06-13 | Morrison Michael C. | Method and system for conducting a transaction over a network |
US20020078445A1 (en) * | 2000-07-11 | 2002-06-20 | Imran Sharif | Internet appliance for interactive audio/video display using a remote control unit for user input |
US20020087672A1 (en) * | 2000-06-19 | 2002-07-04 | Storage Technology Corporation | Self-defining data units |
US20020091792A1 (en) * | 2001-01-09 | 2002-07-11 | International Business Machines Corporation | Method and apparatus for client sharing of cached content |
US20020092026A1 (en) * | 2001-01-09 | 2002-07-11 | International Business Machines Corporation | Method and apparatus for broadcast delivery of content to a client-side cache based on user preferences |
US6421762B1 (en) * | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Cache allocation policy based on speculative request history |
US6421763B1 (en) | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Method for instruction extensions for a tightly coupled speculative request unit |
US20020095528A1 (en) * | 2000-09-29 | 2002-07-18 | International Business Machines Corporation | Method and system for operating a client in a client/server system |
US20020095590A1 (en) * | 2001-01-17 | 2002-07-18 | Douceur John R. | Exclusive encryption |
US20020095556A1 (en) * | 2000-12-11 | 2002-07-18 | Yuko Kubooka | Memory management apparatus, memory management method, memory management program and computer readable storage medium therein |
US6427187B2 (en) | 1998-07-31 | 2002-07-30 | Cache Flow, Inc. | Multiple cache communication |
US20020101620A1 (en) * | 2000-07-11 | 2002-08-01 | Imran Sharif | Fax-compatible Internet appliance |
US6430570B1 (en) * | 1999-03-01 | 2002-08-06 | Hewlett-Packard Company | Java application manager for embedded device |
US20020107934A1 (en) * | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for dynamic distributed data caching |
US20020107935A1 (en) * | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US20020112083A1 (en) * | 2000-07-10 | 2002-08-15 | Joshi Vrinda S. | Cache flushing |
US6438652B1 (en) * | 1998-10-09 | 2002-08-20 | International Business Machines Corporation | Load balancing cooperating cache servers by shifting forwarded request |
US20020116517A1 (en) * | 2001-01-17 | 2002-08-22 | Hudson Michael D. | Virtual program streaming multi-media system |
US20020120599A1 (en) * | 2000-07-10 | 2002-08-29 | Knouse Charles W. | Post data processing |
US6446111B1 (en) * | 1999-06-18 | 2002-09-03 | Epicrealm Operating Inc. | Method and apparatus for client-server communication using a limited capability client over a low-speed communications link |
US20020124072A1 (en) * | 2001-02-16 | 2002-09-05 | Alexander Tormasov | Virtual computing environment |
US20020133537A1 (en) * | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20020138555A1 (en) * | 2001-03-23 | 2002-09-26 | Yu Allen Kai-Lang | Client enhanced server-side cache system |
EP1246061A2 (en) * | 2001-03-26 | 2002-10-02 | Microsoft Corporation | A serverless distributed file system |
US6467011B2 (en) * | 1999-03-19 | 2002-10-15 | Times N Systems, Inc. | Shared memory apparatus and method for multiprocessor systems |
US20020154628A1 (en) * | 2001-03-27 | 2002-10-24 | Seiko Epson Corporation | Server for gathering and providing information |
WO2002084939A1 (en) * | 2001-04-10 | 2002-10-24 | Mark Zielinski | System and method for securely executing a executable to preserve the integrity of files from unauthorized access for network security |
US20020165960A1 (en) * | 2000-07-10 | 2002-11-07 | Chan Christine Wai Han | Access tester |
US6484185B1 (en) * | 1999-04-05 | 2002-11-19 | Microsoft Corporation | Atomic operations on data structures |
US6496921B1 (en) | 1999-06-30 | 2002-12-17 | International Business Machines Corporation | Layered speculative request unit with instruction optimized and storage hierarchy optimized partitions |
US20030009528A1 (en) * | 2001-07-08 | 2003-01-09 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US6510494B1 (en) | 1999-06-30 | 2003-01-21 | International Business Machines Corporation | Time based mechanism for cached speculative data deallocation |
US6516342B1 (en) * | 1998-07-17 | 2003-02-04 | International Business Machines Corporation | Method and apparatus for extending memory using a memory server |
US20030033543A1 (en) * | 2000-03-30 | 2003-02-13 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US20030037022A1 (en) * | 2001-06-06 | 2003-02-20 | Atul Adya | Locating potentially identical objects across multiple computers |
US20030037094A1 (en) * | 2001-06-06 | 2003-02-20 | Douceur John R. | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20030037148A1 (en) * | 1997-05-14 | 2003-02-20 | Citrix Systems, Inc. | System and method for transmitting data from a server application to more than one client node |
US6532521B1 (en) | 1999-06-30 | 2003-03-11 | International Business Machines Corporation | Mechanism for high performance transfer of speculative request data between levels of cache hierarchy |
US20030051042A1 (en) * | 2001-09-13 | 2003-03-13 | International Business Machines Corporation | Load balancing method and system for allocation of service requests on a network |
WO2003025801A1 (en) * | 2001-09-21 | 2003-03-27 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US20030065796A1 (en) * | 1997-12-05 | 2003-04-03 | Network Appliance, Inc. | Enforcing uniform file-locking for diverse file-locking protocols |
US20030065737A1 (en) * | 2000-04-03 | 2003-04-03 | Jannes Aasman | Method and a system for retrieving data of a data network |
US6546404B1 (en) * | 2000-01-29 | 2003-04-08 | International Business Machines Corporation | Data migration tool |
US20030074580A1 (en) * | 2001-03-21 | 2003-04-17 | Knouse Charles W. | Access system interface |
US6553409B1 (en) * | 1999-07-09 | 2003-04-22 | Microsoft Corporation | Background cache synchronization |
US6553466B1 (en) | 1999-10-01 | 2003-04-22 | Infraworks Corporation | Shared memory blocking method and system |
US20030105862A1 (en) * | 2001-11-30 | 2003-06-05 | Villavicencio Francisco J. | Impersonation in an access system |
US20030115167A1 (en) * | 2000-07-11 | 2003-06-19 | Imran Sharif | Web browser implemented in an Internet appliance |
US20030115186A1 (en) * | 2001-12-14 | 2003-06-19 | Wilkinson Francis M. | System for controlling access to and generation of localized application values |
US6584495B1 (en) * | 1998-01-30 | 2003-06-24 | Microsoft Corporation | Unshared scratch space |
FR2834104A1 (en) * | 2001-12-20 | 2003-06-27 | France Telecom | virtual reality object data system manages client cache using relevance list |
US20030126118A1 (en) * | 2002-01-02 | 2003-07-03 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US6594664B1 (en) * | 2000-01-04 | 2003-07-15 | International Business Machines Corporation | System and method for online/offline uninterrupted updating of rooms in collaboration space |
US6601090B1 (en) * | 1999-06-25 | 2003-07-29 | Nortel Networks Limited | System and method for servicing internet object accessess from a coupled intranet |
US20030149765A1 (en) * | 2000-03-30 | 2003-08-07 | Hubbard Edward A. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20030163543A1 (en) * | 2002-02-28 | 2003-08-28 | Silicon Graphics, Inc. | Method and system for cache coherence in DSM multiprocessor system without growth of the sharing vector |
US20030167327A1 (en) * | 2001-10-05 | 2003-09-04 | Baldwin Duane Mark | Storage area network methods and apparatus for topology rendering |
US20030172089A1 (en) * | 2002-03-07 | 2003-09-11 | Douceur John R. | File availability in distributed file storage systems |
US6625596B1 (en) | 2000-07-24 | 2003-09-23 | Centor Software Corporation | Docubase indexing, searching and data retrieval |
US20030182357A1 (en) * | 2002-03-01 | 2003-09-25 | Brian Chess | Client-side caching of pages with changing content |
US6629201B2 (en) | 2000-05-15 | 2003-09-30 | Superspeed Software, Inc. | System and method for high-speed substitute cache |
US20030188039A1 (en) * | 2002-03-26 | 2003-10-02 | Liu James C. | Method and apparatus for web service aggregation |
US6654783B1 (en) | 2000-03-30 | 2003-11-25 | Ethergent Corporation | Network site content indexing method and associated system |
US6654737B1 (en) | 2000-05-23 | 2003-11-25 | Centor Software Corp. | Hypertext-based database architecture |
US20030225998A1 (en) * | 2002-01-31 | 2003-12-04 | Khan Mohammed Noshad | Configurable data processor with multi-length instruction set architecture |
US6665777B2 (en) * | 2000-07-26 | 2003-12-16 | Tns Holdings, Inc. | Method, apparatus, network, and kit for multiple block sequential memory management |
US6665704B1 (en) * | 1999-06-18 | 2003-12-16 | Sun Microsystems, Inc. | Bounding delays and reducing threading overheads in caching |
US20040006565A1 (en) * | 2002-07-08 | 2004-01-08 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US6678795B1 (en) * | 2000-08-15 | 2004-01-13 | International Business Machines Corporation | Method and apparatus for memory prefetching based on intra-page usage history |
US6687711B1 (en) | 2000-12-04 | 2004-02-03 | Centor Software Corporation | Keyword and methods for using a keyword |
US20040039810A1 (en) * | 2002-07-05 | 2004-02-26 | Canon Kabushiki Kaisha | Method and device for data processing in a communication network |
US20040049700A1 (en) * | 2002-09-11 | 2004-03-11 | Fuji Xerox Co., Ltd. | Distributive storage controller and method |
US20040059866A1 (en) * | 2001-06-25 | 2004-03-25 | Kayuri Patel | System and method for representing named data streams within an on-disk structure of a file system |
US20040103139A1 (en) * | 2000-03-30 | 2004-05-27 | United Devices, Inc. | Distributed processing system having sensor based data collection and associated method |
US20040117594A1 (en) * | 2002-12-13 | 2004-06-17 | Vanderspek Julius | Memory management method |
US6757706B1 (en) * | 1999-01-28 | 2004-06-29 | International Business Machines Corporation | Method and apparatus for providing responses for requests of off-line clients |
US6760756B1 (en) * | 1999-06-23 | 2004-07-06 | Mangosoft Corporation | Distributed virtual web cache implemented entirely in software |
US20040133444A1 (en) * | 2002-09-20 | 2004-07-08 | Florence Defaix | Version control system for software development |
US20040148336A1 (en) * | 2000-03-30 | 2004-07-29 | Hubbard Edward A | Massively distributed processing system architecture, scheduling, unique device identification and associated methods |
US20040162886A1 (en) * | 2003-02-19 | 2004-08-19 | International Business Machines Corporation | Non-invasive technique for enabling distributed computing applications to exploit distributed fragment caching and assembly |
US20040172451A1 (en) * | 2003-02-27 | 2004-09-02 | Nigel Biggs | System and method for sharing digital images |
US20040215829A1 (en) * | 2000-03-30 | 2004-10-28 | United Devices, Inc. | Data conversion services and associated distributed processing system |
US20040225742A1 (en) * | 2003-05-09 | 2004-11-11 | Oracle International Corporation | Using local locks for global synchronization in multi-node systems |
US6823377B1 (en) * | 2000-01-28 | 2004-11-23 | International Business Machines Corporation | Arrangements and methods for latency-sensitive hashing for collaborative web caching |
US6826555B2 (en) | 2000-07-24 | 2004-11-30 | Centor Software Corporation | Open format for file storage system indexing, searching and data retrieval |
US20040267919A1 (en) * | 2003-06-30 | 2004-12-30 | International Business Machines Corporation | Method and system for providing server management peripheral caching using a shared bus |
US20040267712A1 (en) * | 2003-06-23 | 2004-12-30 | Khachatur Papanyan | Method and apparatus for web cache using database triggers |
US6842784B1 (en) * | 2000-06-27 | 2005-01-11 | Emc Corporation | Use of global logical volume identifiers to access logical volumes stored among a plurality of storage elements in a computer storage system |
US20050010664A1 (en) * | 2000-03-30 | 2005-01-13 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
US6845430B2 (en) | 1997-05-30 | 2005-01-18 | Oracle International Corporation | System for maintaining a buffer pool |
US6847995B1 (en) | 2000-03-30 | 2005-01-25 | United Devices, Inc. | Security architecture for distributed processing systems and associated method |
US20050018152A1 (en) * | 2003-07-22 | 2005-01-27 | Ting Edison Lao | Isolated ordered regions (ior) prefetching and page replacement |
US20050027746A1 (en) * | 2001-06-18 | 2005-02-03 | Microsoft Corporation | Selective file purging for delete or rename |
US20050044280A1 (en) * | 1994-05-31 | 2005-02-24 | Teleshuttle Technologies, Llc | Software and method that enables selection of one of a plurality of online service providers |
US20050044301A1 (en) * | 2003-08-20 | 2005-02-24 | Vasilevsky Alexander David | Method and apparatus for providing virtual computing services |
US6862599B2 (en) * | 1999-11-13 | 2005-03-01 | Kevin D. King | Software-based methodology for the storage and retrieval of diverse information |
US6862607B1 (en) * | 1999-10-28 | 2005-03-01 | Alcatel | Method to provide information in an internet telecommunication network |
US20050050452A1 (en) * | 2003-08-27 | 2005-03-03 | Weitzel Wade D. | Systems and methods for generating an electronically publishable document |
US20050065907A1 (en) * | 1998-11-24 | 2005-03-24 | Oracle Corporation | Managing checkpoint queues in a multiple node system |
US20050070259A1 (en) * | 2003-09-30 | 2005-03-31 | David Kloba | Method and system for accessing applications and data, and for tracking of key indicators on mobile handheld devices |
US20050080982A1 (en) * | 2003-08-20 | 2005-04-14 | Vasilevsky Alexander D. | Virtual host bus adapter and method |
US20050080791A1 (en) * | 2003-10-09 | 2005-04-14 | Ghatare Sanjay P. | Translating data access requests |
US20050080792A1 (en) * | 2003-10-09 | 2005-04-14 | Ghatare Sanjay P. | Support for RDBMS in LDAP system |
US6883020B1 (en) * | 1997-06-26 | 2005-04-19 | Hewlett-Packard Development Company, L.P. | Apparatus and method for filtering downloaded network sites |
US20050086213A1 (en) * | 2003-10-16 | 2005-04-21 | Fuji Xerox Co., Ltd. | Server apparatus, information providing method and program product therefor |
US20050091226A1 (en) * | 2003-10-23 | 2005-04-28 | Yun Lin | Persistent caching directory level support |
US20050097318A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US6891802B1 (en) | 2000-03-30 | 2005-05-10 | United Devices, Inc. | Network site testing method and associated system |
US20050114381A1 (en) * | 2003-11-26 | 2005-05-26 | Veritas Operating Corporation | System and method for generating extensible file system metadata |
US20050114406A1 (en) * | 2003-11-26 | 2005-05-26 | Veritas Operating Corporation | System and method for detecting and storing file content access information within a file system |
US20050120189A1 (en) * | 2000-06-27 | 2005-06-02 | David Black | Method and apparatus for moving logical entities among storage elements in a computer storage system |
US20050120173A1 (en) * | 2003-11-27 | 2005-06-02 | Nobuyuki Minowa | Device and method for performing information processing using plurality of processors |
US20050120160A1 (en) * | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US20050132185A1 (en) * | 2003-12-15 | 2005-06-16 | Reed Benjamin C. | Method and system of accessing at least one target file in a computer system with an operating system with file locking implemented with byte-range locking |
EP1550962A1 (en) * | 2004-06-01 | 2005-07-06 | France Telecom | Computerised system and method of loading data |
US20050149532A1 (en) * | 2000-03-30 | 2005-07-07 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US6920605B1 (en) * | 1999-04-01 | 2005-07-19 | International Business Machines Corporation | Method and system for rapid publishing and censoring information |
US20050165815A1 (en) * | 2000-06-06 | 2005-07-28 | Groove Networks, Inc. | Method and apparatus for efficient management of XML documents |
US20050172076A1 (en) * | 2004-01-30 | 2005-08-04 | Gateway Inc. | System for managing distributed cache resources on a computing grid |
US20050188369A1 (en) * | 2004-02-23 | 2005-08-25 | Evers Richard T. | System and method for secure installation and operation of software |
US20050198010A1 (en) * | 2004-03-04 | 2005-09-08 | Veritas Operating Corporation | System and method for efficient file content searching within a file system |
US20050198676A1 (en) * | 2003-12-22 | 2005-09-08 | Canon Kabushiki Kaisha | Method and device for the continuous transmission of a video in a communication network |
US20050198116A1 (en) * | 1997-02-07 | 2005-09-08 | About, Inc. | Collaborative internet data mining system |
US20050278525A1 (en) * | 2001-03-26 | 2005-12-15 | Microsoft Corporation | Encrypted key cache |
US20050289354A1 (en) * | 2004-06-28 | 2005-12-29 | Veritas Operating Corporation | System and method for applying a file system security model to a query system |
US20060004759A1 (en) * | 2004-06-07 | 2006-01-05 | Veritas Operating Corporation | System and method for file system content processing |
US20060010173A1 (en) * | 2004-06-30 | 2006-01-12 | Kilday Roger W | Methods and systems for client-side, on-disk caching |
US7003547B1 (en) | 2000-03-30 | 2006-02-21 | United Devices, Inc. | Distributed parallel processing system having capability-based incentives and associated method |
US20060041638A1 (en) * | 2004-08-23 | 2006-02-23 | Ianywhere Solutions, Inc. | Method, system, and computer program product for offline advertisement servicing and cycling |
US20060041593A1 (en) * | 2004-08-17 | 2006-02-23 | Veritas Operating Corporation | System and method for communicating file system events using a publish-subscribe model |
US20060059171A1 (en) * | 2004-08-25 | 2006-03-16 | Dhrubajyoti Borthakur | System and method for chunk-based indexing of file system content |
US20060064470A1 (en) * | 2004-09-23 | 2006-03-23 | Sargent Antony J | Method, system, and computer program product for improved synchronization efficiency for mobile devices, including database hashing and caching of web access errors |
US7020678B1 (en) | 2000-03-30 | 2006-03-28 | United Devices, Inc. | Machine generated sweepstakes entry model and associated distributed processing system |
US20060075019A1 (en) * | 2004-09-17 | 2006-04-06 | About, Inc. | Method and system for providing content to users based on frequency of interaction |
US20060074912A1 (en) * | 2004-09-28 | 2006-04-06 | Veritas Operating Corporation | System and method for determining file system content relevance |
US7031954B1 (en) * | 1997-09-10 | 2006-04-18 | Google, Inc. | Document retrieval system with access control |
US7058773B1 (en) | 2003-01-16 | 2006-06-06 | Cisco Technology, Inc. | System and method for managing data in a distributed system |
US7058696B1 (en) | 1996-11-22 | 2006-06-06 | Mangosoft Corporation | Internet-based shared file service with native PC client access and semantics |
US20060129627A1 (en) * | 1996-11-22 | 2006-06-15 | Mangosoft Corp. | Internet-based shared file service with native PC client access and semantics and distributed version control |
US7065610B1 (en) | 2000-06-27 | 2006-06-20 | Emc Corporation | Method and apparatus for maintaining inventory of logical volumes stored on storage elements |
US20060136571A1 (en) * | 1999-09-10 | 2006-06-22 | Ianywhere Solutions, Inc. | System, method, and computer program product for executing scripts on mobile devices |
US7076633B2 (en) * | 2001-03-28 | 2006-07-11 | Swsoft Holdings, Ltd. | Hosting service providing platform system and method |
US7082474B1 (en) | 2000-03-30 | 2006-07-25 | United Devices, Inc. | Data sharing and file distribution method and associated distributed processing system |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US7103714B1 (en) * | 2001-08-04 | 2006-09-05 | Oracle International Corp. | System and method for serving one set of cached data for differing data requests |
US20060212573A1 (en) * | 2003-05-09 | 2006-09-21 | Oracle International Corporation | Efficient locking of shared data that is accessed for reads in a cluster database |
US20060253540A1 (en) * | 1999-06-10 | 2006-11-09 | Ec Enabler, Ltd. (A New York Corporation) | Method and system for transferring information |
US7162476B1 (en) * | 2003-09-11 | 2007-01-09 | Cisco Technology, Inc | System and method for sharing global data within distributed computing systems |
US20070011130A1 (en) * | 2003-06-03 | 2007-01-11 | Shinji Yamabuchi | Method for browsing contents using page storing file |
US7185011B1 (en) | 1998-04-10 | 2007-02-27 | Microsoft Corporation | Method and system for directory balancing |
US7194764B2 (en) | 2000-07-10 | 2007-03-20 | Oracle International Corporation | User authentication |
US7221369B1 (en) * | 2004-07-29 | 2007-05-22 | Nvidia Corporation | Apparatus, system, and method for delivering data to multiple memory clients via a unitary buffer |
US7225191B1 (en) | 2000-06-27 | 2007-05-29 | Emc Corporation | Method and apparatus for verifying storage access requests in a computer storage system with multiple storage elements |
US20070126750A1 (en) * | 2005-10-25 | 2007-06-07 | Holt John M | Replication of object graphs |
US7231661B1 (en) | 2001-06-21 | 2007-06-12 | Oracle International Corporation | Authorization services with external authentication |
US7237002B1 (en) * | 2000-01-04 | 2007-06-26 | International Business Machines Corporation | System and method for dynamic browser management of web site |
US20070162581A1 (en) * | 2006-01-11 | 2007-07-12 | Oracle International Corporation | Using identity/resource profile and directory enablers to support identity management |
US7245291B2 (en) | 2000-07-11 | 2007-07-17 | Imran Sharif | System and method for internet appliance data entry and navigation |
US20070168319A1 (en) * | 1998-02-13 | 2007-07-19 | Oracle International Corporation | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US20070174541A1 (en) * | 1998-02-13 | 2007-07-26 | Sashikanth Chandrasekaran | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US20070192444A1 (en) * | 2002-09-16 | 2007-08-16 | Emmanuel Ackaouy | Apparatus and method for a proxy cache |
US20070282847A1 (en) * | 2006-05-30 | 2007-12-06 | Microsoft Corporation | Resource Locators for Widely Distributed Systems |
US20070288494A1 (en) * | 2000-09-12 | 2007-12-13 | Ibrix, Inc. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US20080005529A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, Systems, and Computer Program Products for Providing Access to Addressable Entities Using a Non-Sequential Virtual Address Space |
US20080005728A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for enabling cross language access to an addressable entity in an execution environment |
US20080005752A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for generating application processes by linking applications |
US20080005727A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for enabling cross language access to an addressable entity |
US20080005719A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, systems, and computer program products for providing a program execution environment |
US20080005528A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, Systems, and Computer Program Products for Using a Structured Data Storage System to Provide Access to Addressable Entities in Virtual Address Space |
US20080082533A1 (en) * | 2006-09-28 | 2008-04-03 | Tak Fung Wang | Persistent locks/resources for concurrency control |
US20080086620A1 (en) * | 2006-10-06 | 2008-04-10 | Morris Robert P | Method and system for using a distributable virtual address space |
US20080127220A1 (en) * | 2006-06-30 | 2008-05-29 | Robert Paul Morris | Methods, systems, and computer program products for creating an input-value-specific loadable instance of an application |
US20080141064A1 (en) * | 2006-12-11 | 2008-06-12 | International Business Machines Corporation | System and methods for on-demand document provisioning using ad hoc networking |
US20080172446A1 (en) * | 2007-01-12 | 2008-07-17 | About, Inc. | Method and system for managing content submission and publication of content |
US20080215672A1 (en) * | 1999-09-10 | 2008-09-04 | Sybase 365, Inc. | System, Method, and Computer Program Product for a Scalable, Configurable, Client/Server, Cross-Platform Browser for Mobile Devices |
US20080295110A1 (en) * | 2007-05-23 | 2008-11-27 | Fabrizio Muscarella | Framework for Startup of Local Instance of Remote Application |
US20080320459A1 (en) * | 2007-06-22 | 2008-12-25 | Morris Robert P | Method And Systems For Providing Concurrency Control For Addressable Entities |
US20080320282A1 (en) * | 2007-06-22 | 2008-12-25 | Morris Robert P | Method And Systems For Providing Transaction Support For Executable Program Components |
US7478243B2 (en) | 2001-03-21 | 2009-01-13 | Microsoft Corporation | On-disk file format for serverless distributed file system with signed manifest of file modifications |
US20090043971A1 (en) * | 2003-09-26 | 2009-02-12 | Ximeta Technology, Inc. | Data integrity for data storage devices shared by multiple hosts via a network |
US20090098620A1 (en) * | 2007-10-16 | 2009-04-16 | Shiu Nan Chen | Production method for solid Cultured active mushroom mycelium and fruit-body metabolites (AMFM) products thereof |
US20090132649A1 (en) * | 2000-03-30 | 2009-05-21 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US20090222508A1 (en) * | 2000-03-30 | 2009-09-03 | Hubbard Edward A | Network Site Testing |
US7630974B2 (en) | 2004-09-28 | 2009-12-08 | Oracle International Corporation | Multi-language support for enterprise identity and access management |
US20100036723A1 (en) * | 2000-03-30 | 2010-02-11 | Hubbard Edward A | Sweepstakes Incentive Model and Associated System |
US20100057847A1 (en) * | 2008-09-04 | 2010-03-04 | Alibaba Group Holding Limited | Method, Device, and system for acquiring a web page |
US20100157358A1 (en) * | 2008-12-23 | 2010-06-24 | Nenad Rijavec | Distributed Global Object Cache |
US20100185817A1 (en) * | 2009-01-20 | 2010-07-22 | Oracle International Corporation | Methods and Systems for Implementing Transcendent Page Caching |
US20100186011A1 (en) * | 2009-01-20 | 2010-07-22 | Oracle International Corporation | Methods and systems for implementing transcendent page caching |
US20100260067A1 (en) * | 2007-11-08 | 2010-10-14 | Nokia Corporation | Connectivity architecture for service discovery |
US7831642B1 (en) * | 2004-09-30 | 2010-11-09 | Symantec Operating Corporation | Page cache management for a shared file |
US7836017B1 (en) * | 2000-09-12 | 2010-11-16 | Hewlett-Packard Development Company, L.P. | File replication in a distributed segmented file system |
US20100333096A1 (en) * | 2009-06-26 | 2010-12-30 | David Dice | Transactional Locking with Read-Write Locks in Transactional Memory Systems |
US20100333095A1 (en) * | 2009-06-26 | 2010-12-30 | Shavit Nir N | Bulk Synchronization in Transactional Memory Systems |
USRE42153E1 (en) * | 2000-03-30 | 2011-02-15 | Hubbard Edward A | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20110099205A1 (en) * | 2008-06-20 | 2011-04-28 | Technion Research & Development Foundation Ltd. | Incremental clustering of indexed xml data |
US20110106778A1 (en) * | 2009-11-05 | 2011-05-05 | Oracle International Corporation | Lock manager on disk |
US20110125974A1 (en) * | 2009-11-13 | 2011-05-26 | Anderson Richard S | Distributed symmetric multiprocessing computing architecture |
US7987420B1 (en) | 1999-09-10 | 2011-07-26 | Ianywhere Solutions, Inc. | System, method, and computer program product for a scalable, configurable, client/server, cross-platform browser for mobile devices |
US20110208737A1 (en) * | 2008-05-19 | 2011-08-25 | Technion Research & Development Foundation Ltd. | Apparatus and method for incremental physical data clustering |
US20110231481A1 (en) * | 2010-03-16 | 2011-09-22 | Saleforce.com, inc. | System, method and computer program product for communicating data between a database and a cache |
US8086579B1 (en) | 2002-01-22 | 2011-12-27 | Oracle International Corporation | Semantic response to lock requests to reduce coherence overhead in multi-node systems |
US20120036161A1 (en) * | 2002-11-01 | 2012-02-09 | Bluearc Uk Limited | Distributed File System and Method |
US20120222052A1 (en) * | 2011-02-25 | 2012-08-30 | Oracle International Corporation | Peer-to-peer transcendent memory |
US8306991B2 (en) | 2004-06-07 | 2012-11-06 | Symantec Operating Corporation | System and method for providing a programming-language-independent interface for querying file system content |
US8595308B1 (en) | 1999-09-10 | 2013-11-26 | Ianywhere Solutions, Inc. | System, method, and computer program product for server side processing in a mobile device environment |
US8706701B1 (en) * | 2010-11-18 | 2014-04-22 | Emc Corporation | Scalable cloud file system with efficient integrity checks |
US8805672B2 (en) | 2011-06-30 | 2014-08-12 | International Business Machines Corporation | Translation cache prediction |
US8805950B1 (en) * | 2007-09-12 | 2014-08-12 | Aol Inc. | Client web cache |
US20140280669A1 (en) * | 2013-03-15 | 2014-09-18 | Microsoft Corporation | Memory Sharing Over A Network |
US20140324881A1 (en) * | 2005-12-29 | 2014-10-30 | Amazon Technologies, Inc. | Method and apparatus for stress management in a searchable data service |
US20140365960A1 (en) * | 2013-06-05 | 2014-12-11 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for page view switching |
US8935307B1 (en) | 2000-09-12 | 2015-01-13 | Hewlett-Packard Development Company, L.P. | Independent data access in a segmented file system |
US9087020B1 (en) * | 2012-07-05 | 2015-07-21 | A9.Com, Inc. | Managing and retrieving content from a shared storage |
USRE45729E1 (en) * | 2005-12-12 | 2015-10-06 | Electronics And Telecommunications Research Institute | Apparatus and method for managing application context |
US9251152B1 (en) * | 2010-09-15 | 2016-02-02 | Symantec Corporation | Efficient method for relocating shared memory |
WO2016025267A1 (en) * | 2014-08-15 | 2016-02-18 | Interdigital Patent Holdings, Inc. | Methods and apparatus for content delivery via browser cache extension |
US9369406B2 (en) * | 2014-07-03 | 2016-06-14 | Sas Institute Inc. | Resource server providing a rapidly changing resource |
US20160373544A1 (en) * | 2015-06-17 | 2016-12-22 | Fastly, Inc. | Expedited sub-resource loading |
US9547665B2 (en) | 2011-10-27 | 2017-01-17 | Microsoft Technology Licensing, Llc | Techniques to determine network storage for sharing media files |
US20170286445A1 (en) * | 2016-03-29 | 2017-10-05 | Red Hat, Inc. | Migrating lock data within a distributed file system |
WO2018007828A3 (en) * | 2016-07-08 | 2018-02-15 | Kalypton International Limited | Distributed transaction processing and authentication system |
US10235451B2 (en) | 2012-12-18 | 2019-03-19 | Empire Technology Development Llc | Data caching based on social characteristics of users |
US10459810B2 (en) | 2017-07-06 | 2019-10-29 | Oracle International Corporation | Technique for higher availability in a multi-node system using replicated lock information to determine a set of data blocks for recovery |
US10635828B2 (en) | 2016-09-23 | 2020-04-28 | Microsoft Technology Licensing, Llc | Tokenized links with granular permissions |
US10733151B2 (en) | 2011-10-27 | 2020-08-04 | Microsoft Technology Licensing, Llc | Techniques to share media files |
US10754767B2 (en) | 2015-05-19 | 2020-08-25 | Guangzhou Ucweb Computer Technology Co., Ltd. | Method and apparatus for loading a resource in a web page on a device |
US10802973B1 (en) | 2019-07-01 | 2020-10-13 | Bank Of America Corporation | Data access tool |
US20220083621A1 (en) * | 2020-09-12 | 2022-03-17 | HCL America, Inc. | Method and system for component level data management in web applications |
US11323535B2 (en) | 2016-03-01 | 2022-05-03 | Fastly, Inc. | Management of edge dictionaries in a content delivery network |
US11451441B2 (en) * | 2016-01-12 | 2022-09-20 | Fastly, Inc. | Management of edge dictionary containers in content nodes of a content delivery network |
US11809888B2 (en) * | 2019-04-29 | 2023-11-07 | Red Hat, Inc. | Virtual machine memory migration facilitated by persistent memory devices |
Families Citing this family (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
GB2366965A (en) * | 2000-09-01 | 2002-03-20 | Ncr Int Inc | Downloading data to a requesting client form the local cache of another client |
WO2002056182A2 (en) * | 2001-01-12 | 2002-07-18 | Epicrealm Operating Inc | Method and system for community data caching |
Citations (39)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4426688A (en) * | 1981-08-03 | 1984-01-17 | Ncr Corporation | Memory system having an alternate memory |
US4710926A (en) * | 1985-12-27 | 1987-12-01 | American Telephone And Telegraph Company, At&T Bell Laboratories | Fault recovery in a distributed processing system |
EP0288636A2 (en) * | 1987-04-24 | 1988-11-02 | Network Systems Corporation | Network communications adapter |
US4868738A (en) * | 1985-08-15 | 1989-09-19 | Lanier Business Products, Inc. | Operating system independent virtual memory computer system |
US4934764A (en) * | 1989-03-31 | 1990-06-19 | Kendall Square Research Corporation | Computer system module assembly |
US5055999A (en) * | 1987-12-22 | 1991-10-08 | Kendall Square Research Corporation | Multiprocessor digital data processing system |
US5077736A (en) * | 1988-06-28 | 1991-12-31 | Storage Technology Corporation | Disk drive memory |
US5117350A (en) * | 1988-12-15 | 1992-05-26 | Flashpoint Computer Corporation | Memory address mechanism in a distributed memory architecture |
US5119481A (en) * | 1987-12-22 | 1992-06-02 | Kendall Square Research Corporation | Register bus multiprocessor system with shift |
GB2257273A (en) * | 1991-06-27 | 1993-01-06 | Digital Equipment Corp | Data storage system with device independent file directories |
US5226039A (en) * | 1987-12-22 | 1993-07-06 | Kendall Square Research Corporation | Packet routing switch |
US5245563A (en) * | 1991-09-20 | 1993-09-14 | Kendall Square Research Corporation | Fast control for round unit |
US5247673A (en) * | 1989-12-04 | 1993-09-21 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic global data replication |
US5251308A (en) * | 1987-12-22 | 1993-10-05 | Kendall Square Research Corporation | Shared memory multiprocessor with data hiding and post-store |
US5274789A (en) * | 1990-03-19 | 1993-12-28 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic and selective global data replication |
US5282201A (en) * | 1987-12-22 | 1994-01-25 | Kendall Square Research Corporation | Dynamic packet routing network |
US5313647A (en) * | 1991-09-20 | 1994-05-17 | Kendall Square Research Corporation | Digital data processor with improved checkpointing and forking |
US5335325A (en) * | 1987-12-22 | 1994-08-02 | Kendall Square Research Corporation | High-speed packet switching apparatus and method |
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
WO1995002307A1 (en) * | 1993-07-05 | 1995-01-19 | Nokia Telecommunications Oy | Time division multiple access radio system, method for intracell capacity allocation, and method for performing an intra-cell handover |
US5390326A (en) * | 1993-04-30 | 1995-02-14 | The Foxboro Company | Local area network with fault detection and recovery |
US5394555A (en) * | 1992-12-23 | 1995-02-28 | Bull Hn Information Systems Inc. | Multi-node cluster computer system incorporating an external coherency unit at each node to insure integrity of information stored in a shared, distributed memory |
WO1995014279A1 (en) * | 1993-11-15 | 1995-05-26 | Conner Peripherals, Inc. | Network management system having virtual catalog overview of files distributively stored across network domain |
US5423037A (en) * | 1992-03-17 | 1995-06-06 | Teleserve Transaction Technology As | Continuously available database server having multiple groups of nodes, each group maintaining a database copy with fragments stored on multiple nodes |
EP0661651A1 (en) * | 1993-12-29 | 1995-07-05 | Microsoft Corporation | Unification of directory service with file system services |
WO1995022111A1 (en) * | 1994-02-08 | 1995-08-17 | Telefonaktiebolaget Lm Ericsson | Distributed data base system |
US5452447A (en) * | 1992-12-21 | 1995-09-19 | Sun Microsystems, Inc. | Method and apparatus for a caching file server |
WO1995025306A2 (en) * | 1994-03-14 | 1995-09-21 | Stanford University | Distributed shared-cache for multi-processors |
US5493728A (en) * | 1993-02-19 | 1996-02-20 | Borland International, Inc. | System and methods for optimized access in a multi-user environment |
US5513314A (en) * | 1995-01-27 | 1996-04-30 | Auspex Systems, Inc. | Fault tolerant NFS server system and mirroring protocol |
WO1996023268A1 (en) * | 1995-01-23 | 1996-08-01 | Tandem Computers Incorporated | Reconstructing directory pathnames from file handles in a computer system |
US5560027A (en) * | 1993-12-15 | 1996-09-24 | Convex Computer Corporation | Scalable parallel processing systems wherein each hypernode has plural processing modules interconnected by crossbar and each processing module has SCI circuitry for forming multi-dimensional network with other hypernodes |
WO1996030847A1 (en) * | 1995-03-17 | 1996-10-03 | Tele-Communications, Inc. | Method and apparatus for transaction processing in a distributed database system |
US5634004A (en) * | 1994-05-16 | 1997-05-27 | Network Programs, Inc. | Directly programmable distribution element |
US5692183A (en) * | 1995-03-31 | 1997-11-25 | Sun Microsystems, Inc. | Methods and apparatus for providing transparent persistence in a distributed object operating environment |
US5692193A (en) * | 1994-03-31 | 1997-11-25 | Nec Research Institute, Inc. | Software architecture for control of highly parallel computer systems |
US5727203A (en) * | 1995-03-31 | 1998-03-10 | Sun Microsystems, Inc. | Methods and apparatus for managing a database in a distributed object operating environment using persistent and transient cache |
US5815710A (en) * | 1995-03-22 | 1998-09-29 | Sun Microsystems, Inc. | Method and apparatus for managing relationships among objects in a distributed object environment |
US5832514A (en) * | 1996-06-26 | 1998-11-03 | Microsoft Corporation | System and method for discovery based data recovery in a store and forward replication process |
-
1997
- 1997-05-02 US US08/848,971 patent/US6026474A/en not_active Expired - Lifetime
- 1997-11-21 WO PCT/US1997/021459 patent/WO1998022891A1/en active Application Filing
- 1997-11-21 AU AU73034/98A patent/AU7303498A/en not_active Abandoned
Patent Citations (44)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4426688A (en) * | 1981-08-03 | 1984-01-17 | Ncr Corporation | Memory system having an alternate memory |
US4868738A (en) * | 1985-08-15 | 1989-09-19 | Lanier Business Products, Inc. | Operating system independent virtual memory computer system |
US4710926A (en) * | 1985-12-27 | 1987-12-01 | American Telephone And Telegraph Company, At&T Bell Laboratories | Fault recovery in a distributed processing system |
EP0288636A2 (en) * | 1987-04-24 | 1988-11-02 | Network Systems Corporation | Network communications adapter |
US5226039A (en) * | 1987-12-22 | 1993-07-06 | Kendall Square Research Corporation | Packet routing switch |
US5335325A (en) * | 1987-12-22 | 1994-08-02 | Kendall Square Research Corporation | High-speed packet switching apparatus and method |
US5119481A (en) * | 1987-12-22 | 1992-06-02 | Kendall Square Research Corporation | Register bus multiprocessor system with shift |
US5055999A (en) * | 1987-12-22 | 1991-10-08 | Kendall Square Research Corporation | Multiprocessor digital data processing system |
US5341483A (en) * | 1987-12-22 | 1994-08-23 | Kendall Square Research Corporation | Dynamic hierarchial associative memory |
US5251308A (en) * | 1987-12-22 | 1993-10-05 | Kendall Square Research Corporation | Shared memory multiprocessor with data hiding and post-store |
US5282201A (en) * | 1987-12-22 | 1994-01-25 | Kendall Square Research Corporation | Dynamic packet routing network |
US5297265A (en) * | 1987-12-22 | 1994-03-22 | Kendall Square Research Corporation | Shared memory multiprocessor system and method of operation thereof |
US5077736A (en) * | 1988-06-28 | 1991-12-31 | Storage Technology Corporation | Disk drive memory |
US5117350A (en) * | 1988-12-15 | 1992-05-26 | Flashpoint Computer Corporation | Memory address mechanism in a distributed memory architecture |
US4934764A (en) * | 1989-03-31 | 1990-06-19 | Kendall Square Research Corporation | Computer system module assembly |
US5247673A (en) * | 1989-12-04 | 1993-09-21 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic global data replication |
US5274789A (en) * | 1990-03-19 | 1993-12-28 | Bull Hn Information Systems Italia S.P.A. | Multiprocessor system having distributed shared resources and dynamic and selective global data replication |
GB2257273A (en) * | 1991-06-27 | 1993-01-06 | Digital Equipment Corp | Data storage system with device independent file directories |
US5313647A (en) * | 1991-09-20 | 1994-05-17 | Kendall Square Research Corporation | Digital data processor with improved checkpointing and forking |
US5245563A (en) * | 1991-09-20 | 1993-09-14 | Kendall Square Research Corporation | Fast control for round unit |
US5423037A (en) * | 1992-03-17 | 1995-06-06 | Teleserve Transaction Technology As | Continuously available database server having multiple groups of nodes, each group maintaining a database copy with fragments stored on multiple nodes |
US5452447A (en) * | 1992-12-21 | 1995-09-19 | Sun Microsystems, Inc. | Method and apparatus for a caching file server |
US5394555A (en) * | 1992-12-23 | 1995-02-28 | Bull Hn Information Systems Inc. | Multi-node cluster computer system incorporating an external coherency unit at each node to insure integrity of information stored in a shared, distributed memory |
US5493728A (en) * | 1993-02-19 | 1996-02-20 | Borland International, Inc. | System and methods for optimized access in a multi-user environment |
US5390326A (en) * | 1993-04-30 | 1995-02-14 | The Foxboro Company | Local area network with fault detection and recovery |
WO1995002307A1 (en) * | 1993-07-05 | 1995-01-19 | Nokia Telecommunications Oy | Time division multiple access radio system, method for intracell capacity allocation, and method for performing an intra-cell handover |
WO1995014279A1 (en) * | 1993-11-15 | 1995-05-26 | Conner Peripherals, Inc. | Network management system having virtual catalog overview of files distributively stored across network domain |
US5560027A (en) * | 1993-12-15 | 1996-09-24 | Convex Computer Corporation | Scalable parallel processing systems wherein each hypernode has plural processing modules interconnected by crossbar and each processing module has SCI circuitry for forming multi-dimensional network with other hypernodes |
EP0661651A1 (en) * | 1993-12-29 | 1995-07-05 | Microsoft Corporation | Unification of directory service with file system services |
US5649194A (en) * | 1993-12-29 | 1997-07-15 | Microsoft Corporation | Unification of directory service with file system services |
US5675787A (en) * | 1993-12-29 | 1997-10-07 | Microsoft Corporation | Unification of directory service with file system services |
US5689700A (en) * | 1993-12-29 | 1997-11-18 | Microsoft Corporation | Unification of directory service with file system services |
WO1995022111A1 (en) * | 1994-02-08 | 1995-08-17 | Telefonaktiebolaget Lm Ericsson | Distributed data base system |
WO1995025306A2 (en) * | 1994-03-14 | 1995-09-21 | Stanford University | Distributed shared-cache for multi-processors |
US5692193A (en) * | 1994-03-31 | 1997-11-25 | Nec Research Institute, Inc. | Software architecture for control of highly parallel computer systems |
US5634004A (en) * | 1994-05-16 | 1997-05-27 | Network Programs, Inc. | Directly programmable distribution element |
WO1996023268A1 (en) * | 1995-01-23 | 1996-08-01 | Tandem Computers Incorporated | Reconstructing directory pathnames from file handles in a computer system |
US5513314A (en) * | 1995-01-27 | 1996-04-30 | Auspex Systems, Inc. | Fault tolerant NFS server system and mirroring protocol |
WO1996030847A1 (en) * | 1995-03-17 | 1996-10-03 | Tele-Communications, Inc. | Method and apparatus for transaction processing in a distributed database system |
US5815710A (en) * | 1995-03-22 | 1998-09-29 | Sun Microsystems, Inc. | Method and apparatus for managing relationships among objects in a distributed object environment |
US5692183A (en) * | 1995-03-31 | 1997-11-25 | Sun Microsystems, Inc. | Methods and apparatus for providing transparent persistence in a distributed object operating environment |
US5727203A (en) * | 1995-03-31 | 1998-03-10 | Sun Microsystems, Inc. | Methods and apparatus for managing a database in a distributed object operating environment using persistent and transient cache |
US5848419A (en) * | 1995-03-31 | 1998-12-08 | Sun Microsystems, Inc. | Methods and apparatus for providing transparent persistence in a distributed object operating environment |
US5832514A (en) * | 1996-06-26 | 1998-11-03 | Microsoft Corporation | System and method for discovery based data recovery in a store and forward replication process |
Non-Patent Citations (77)
Title |
---|
"Java Dynamic Class Loader," IBM Technical Disclosure Bulletin, vol. 39, No. 11, Nov. 1996, pp. 107-108. |
"Software Agents," Genesereth et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 48-53. |
"Support for Collaborative Design: Agents and Emergence, Edmonds et al.," Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 41-47. |
Amaral et al. "A Model for Persistent Shared Memory Addressing in Distributed Systems," Object Orientation in Operating Systems, 1992, IEEE, pp. 2-11. |
Amaral et al. A Model for Persistent Shared Memory Addressing in Distributed Systems, Object Orientation in Operating Systems, 1992, IEEE, pp. 2 11. * |
Anderson, T., et al. "Serverless Network File Systems," Operating Systems Review (SIGOPS), vol. 29, No. 5, Dec. 1, 1995, pp. 109-126. |
Anderson, T., et al. Serverless Network File Systems, Operating Systems Review ( SIGOPS ), vol. 29, No. 5, Dec. 1, 1995, pp. 109 126. * |
Carter J.B. et als., "Techniques for Reducing Consistency-Related Communication in Distributed Shared Memory Systems," ACM Transactions on Computer Systems, pp. 205-243, Vol. 13, No. 3 (Aug., 1995). |
Carter J.B. et als., Techniques for Reducing Consistency Related Communication in Distributed Shared Memory Systems, ACM Transactions on Computer Systems, pp. 205 243, Vol. 13, No. 3 (Aug., 1995). * |
Carter, J., et al. "Network Multicomputing Using Recoverable Distributed Shared Memory," Proceedings of the Spring Computer Society International Conference (COMPCON), San Francisco, Feb. 22-26, 1993, pp. 519-527. |
Carter, J., et al. Network Multicomputing Using Recoverable Distributed Shared Memory, Proceedings of the Spring Computer Society International Conference (COMPCON), San Francisco, Feb. 22 26, 1993, pp. 519 527. * |
Carter, J.B. et al., "Optimistic Implementation of Bulk Data Transfer Protocols," In Proceedings of the 1989 Signetrics Conference, pp. 61-69 (May, 1989). |
Carter, J.B. et al., Optimistic Implementation of Bulk Data Transfer Protocols, In Proceedings of the 1989 Signetrics Conference, pp. 61 69 (May, 1989). * |
Carter, J.B. et als., "Distributed Operating Systems Based on a Protected Global Virtual Address Space," In the Proceedings of the Third Workshop on Workstation Operating Systems (WWOS) (May, 1992). |
Carter, J.B. et als., "Flex: A Tool for Building Efficient and Flexible Systems," In the Proceedings of the Fourth Workshop on Workstation Operating Systems ((WWOS) (Oct., 1993). |
Carter, J.B. et als., "Reducing Consistency Traffic and Cache Misses in the Avalanche Multiprocessor," University of Utah technical report. |
Carter, J.B. et als., Distributed Operating Systems Based on a Protected Global Virtual Address Space, In the Proceedings of the Third Workshop on Workstation Operating Systems (WWOS) (May, 1992). * |
Carter, J.B. et als., Flex: A Tool for Building Efficient and Flexible Systems, In the Proceedings of the Fourth Workshop on Workstation Operating Systems ((WWOS) (Oct., 1993). * |
Carter, J.B. et als., Reducing Consistency Traffic and Cache Misses in the Avalanche Multiprocessor, University of Utah technical report. * |
Carter, John B., "Design of the Munin Distributed Shared memory System," To appear in the special issue of the Journal of Parallel and Distributed Computing on distributed shared memory (1995). |
Carter, John B., Design of the Munin Distributed Shared memory System, To appear in the special issue of the Journal of Parallel and Distributed Computing on distributed shared memory (1995). * |
Dryden, P. "Users throwing cache at networks delays" Computerworld, Oct. 7, 1996, http://ww.computerworld.com/search/AT-html/9610/961007SL41cacheb.html, printed on May 22, 1997. |
Dryden, P. Users throwing cache at networks delays Computerworld, Oct. 7, 1996, http://ww.computerworld.com/search/AT html/9610/961007SL41cacheb.html, printed on May 22, 1997. * |
Enterprise Networking Web Page, http://www.lancache.com/enad1.html, printed on May 22, 1997. * |
European Patent Office, European Search Report, Application No. EP 97 30 9471, mailed on Apr. 23, 1998, 3 pages. * |
Henskens et al. "Course and Fine Grain Objects in a Distributed Persistent Store," Object Orientation in Operating Systems, 1993, IEEE, pp. 116-123. |
Henskens et al. Course and Fine Grain Objects in a Distributed Persistent Store, Object Orientation in Operating Systems, 1993, IEEE, pp. 116 123. * |
Huber, J., et al. "PPFS: A High Performance Portable Parallel File System," Proceedings of the International Conference on Supercomputing, Barcelona, Jul. 3-7, 1995, pp. 385-394. |
Huber, J., et al. PPFS: A High Performance Portable Parallel File System, Proceedings of the International Conference on Supercomputing, Barcelona, Jul. 3 7, 1995, pp. 385 394. * |
Irelenbusch et al. "Towards a Resilient Shared Memory Concept for Distributed Persistent Object Systems," Proceedings of the 28th Annual Hawaii Intl. Conference on System Sciences, 1995, IEEE, pp. 675-684. |
Irelenbusch et al. Towards a Resilient Shared Memory Concept for Distributed Persistent Object Systems, Proceedings of the 28th Annual Hawaii Intl. Conference on System Sciences, 1995, IEEE, pp. 675 684. * |
Java Dynamic Class Loader, IBM Technical Disclosure Bulletin, vol. 39, No. 11, Nov. 1996, pp. 107 108. * |
Lea et al. "Cool: System Support for Distributed Programming," Communications of the ACM, vol. 36, No. 9, pp. 37-46. |
Lea et al. Cool: System Support for Distributed Programming, Communications of the ACM, vol. 36, No. 9, pp. 37 46. * |
Lee, E., et al. "Petal: Distributed Virtual Disks," 7th International Conference on Architectural Support for Programming Languages and Operation Systems, Cambridge, MA, Oct. 1-5, 1996, pp. 84-92. |
Lee, E., et al. Petal: Distributed Virtual Disks, 7th International Conference on Architectural Support for Programming Languages and Operation Systems, Cambridge, MA, Oct. 1 5, 1996, pp. 84 92. * |
Li, Kai, "Shared Virtual Memory on Loosely Coupled Multiprocessors," Yale University , Department of Computer Science, (Sep., 1986). |
Li, Kai, Shared Virtual Memory on Loosely Coupled Multiprocessors, Yale University , Department of Computer Science, (Sep., 1986). * |
Measurement Techniques Inc. Web Page, http://www.lancache.com/pr1 4.html, printed on May 22, 1997. * |
Measurement Techniques Inc. Web Page, http://www.lancache.com/pr1-- 4.html, printed on May 22, 1997. |
Measurement Techniques, Inc. Web Page, http://www.lancache.com/slc.html, printed on May 22, 1997. * |
Neal, D. "The Harvest Object Cache in New Zealand," Computer Networks and ISDN Systems, vol. 11, No. 28, May 1996, pp. 1415-1430. |
Neal, D. The Harvest Object Cache in New Zealand, Computer Networks and ISDN Systems, vol. 11, No. 28, May 1996, pp. 1415 1430. * |
Network Appliance, Inc. Web Page, http,//www.netapp.com/news/level3b/news rel 970421.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http,//www.netapp.com/news/level3b/news-- rel-- 970421.html, printed on May 22, 1997. |
Network Appliance, Inc. Web Page, http://ww.netapp.com/products/level3/netcache/datasheet.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/nfs.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/ontap.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/webfiler.html, printed on May 22, 1997. * |
Network Appliance, Inc. Web Page, http://www.netapp.com/products/level3/windows.html, printed on May 22, 1997. * |
Ng, T. "The Design and Implementation of a Reliable Distributed Operating System--Rose," Proceedings of the Symposium on Reliable Distributed Systems, Huntsville, Oct. 9-11, 1990, pp. 2-11. |
Ng, T. The Design and Implementation of a Reliable Distributed Operating System Rose, Proceedings of the Symposium on Reliable Distributed Systems, Huntsville, Oct. 9 11, 1990, pp. 2 11. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21457, mailed on Apr. 23, 1998, 4 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21458, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21459, mailed on Apr. 23, 1998, 4 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21460, mailed on Apr. 23, 1998, 5 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21466, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21733, mailed on Apr. 23, 1998, 3 pages. * |
Patent Cooperation Treaty, International Search Report, International Application No. PCT/US 97/21734, mailed on Apr. 23, 1998, 4 pages. * |
Peak Technologies, Inc. Web Page, http://www.peak media.com/PeakJet/quick.html, printed on May 22, 1997. * |
Peak Technologies, Inc. Web Page, http://www.peakJet/PeakJet.html, printed on May 22, 1997. * |
Peak Technologies, Inc. Web Page, http://www.peak-media.com/PeakJet/quick.html, printed on May 22, 1997. |
Raghavan, G. "A Domain Model of WWW Browsers," Proceeding of Southeastcon, Bringing Together Education, Science and Technology, Tampa, Apr. 11-14, 1996, pp. 436-439. |
Raghavan, G. A Domain Model of WWW Browsers, Proceeding of Southeastcon, Bringing Together Education, Science and Technology, Tampa, Apr. 11 14, 1996, pp. 436 439. * |
Relay Web Page, http://www.relay.com/product/gold.html, printed on May 22, 1997. * |
Relay Web Page, http://www.relay.com/product/otg.html, printed on May 22, 1997. * |
Sequel Technology Web Page, http://www.sequeltech.com/product/netPIM/prodinfo.html, printed on May 22, 1997. * |
Software Agents, Genesereth et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 48 53. * |
Support for Collaborative Design: Agents and Emergence, Edmonds et al., Communications of the ACM, Jul. 1994, vol. 37, No. 7, pp. 41 47. * |
Tricord Systems, Inc. Web Page, http://www.tricord.com/2/10 3 96.html, printed on May 22, 1997. * |
Tricord Systems, Inc. Web Page, http://www.tricord.com/2/10-3-96.html, printed on May 22, 1997. |
Wilson, Andrew W., "Hierachial Cache/Bus Architecture for Shared Memory Multiprocessors," ACM, pp. 244-252 (1987). |
Wilson, Andrew W., "Organization and Statistical Simulation of Hierarchical Multiprocessors," UMI Dissertation Information Service (1985). |
Wilson, Andrew W., Hierachial Cache/Bus Architecture for Shared Memory Multiprocessors, ACM, pp. 244 252 (1987). * |
Wilson, Andrew W., Organization and Statistical Simulation of Hierarchical Multiprocessors, UMI Dissertation Information Service (1985). * |
Yeung, D., et al. "MGS" A Multigrain Shared Memory System, Computer Architecture News, vol. 24, No. 2, May 1, 1996, pp. 44-55. |
Yeung, D., et al. MGS A Multigrain Shared Memory System, Computer Architecture News, vol. 24, No. 2, May 1, 1996, pp. 44 55. * |
Cited By (544)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20110016013A1 (en) * | 1994-05-31 | 2011-01-20 | Twintech E.U., Limited Liability Company | Providing services from a remote computer system to a user station over a communications network |
US20050044280A1 (en) * | 1994-05-31 | 2005-02-24 | Teleshuttle Technologies, Llc | Software and method that enables selection of one of a plurality of online service providers |
US8812620B2 (en) | 1994-05-31 | 2014-08-19 | Intellectual Property I LLC | Software and method that enables selection of one of a plurality of online service providers |
US20090271499A1 (en) * | 1994-05-31 | 2009-10-29 | Twintech E.U., Limited Liability Company | Software and Method for Monitoring A Data Stream and for Capturing Desired Data Within the Data Stream |
US9484078B2 (en) | 1994-05-31 | 2016-11-01 | Intellectual Ventures I Llc | Providing services from a remote computer system to a user station over a communications network |
US8321499B2 (en) | 1994-05-31 | 2012-11-27 | Intellectual Ventures I Llc | Method for distributing content to a user station |
US9484077B2 (en) | 1994-05-31 | 2016-11-01 | Intellectual Ventures I Llc | Providing services from a remote computer system to a user station over a communications network |
US8719339B2 (en) * | 1994-05-31 | 2014-05-06 | Intellectual Ventures I Llc | Software and method that enables selection of one of a plurality of online service providers |
US20080235106A1 (en) * | 1994-05-31 | 2008-09-25 | Twintech E.U., Limited Liability Company | Software and Method That Enables Selection of One of A Plurality of Online Service Providers |
US20110016192A1 (en) * | 1994-05-31 | 2011-01-20 | Twintech E.U., Limited Liability Company | Providing services from a remote computer system to a user station over a communications network |
US8407682B2 (en) | 1994-05-31 | 2013-03-26 | Intellectual Ventures I Llc | Software and method that enables selection of one of a plurality of online service providers |
US8499030B1 (en) | 1994-05-31 | 2013-07-30 | Intellectual Ventures I Llc | Software and method that enables selection of one of a plurality of network communications service providers |
US20100287155A1 (en) * | 1994-05-31 | 2010-11-11 | Twintech E.U., Limited Liability Company | Software And Method That Enables Selection Of One Of A Plurality Of Online Service Providers |
US20090144398A1 (en) * | 1994-05-31 | 2009-06-04 | Twintech E.U., Limited Liability Company | Content Distribution Over A Network |
US20070073845A1 (en) * | 1994-05-31 | 2007-03-29 | Twintech E.U., Limited Liability Company | Content distribution over a network |
US9111604B2 (en) | 1994-05-31 | 2015-08-18 | Intellectual Ventures I Llc | Software and method that enables selection of on-line content from one of a plurality of network content service providers in a single action |
US20100042478A1 (en) * | 1994-05-31 | 2010-02-18 | Twintech E.U., Limited Liability Company | Providing Services From A Remote Computer System To A User Station Over A Communications Network |
US8635272B2 (en) | 1994-05-31 | 2014-01-21 | Intellectual Ventures I Llc | Method for distributing a list of updated content to a user station from a distribution server wherein the user station may defer installing the update |
US20070220106A1 (en) * | 1994-05-31 | 2007-09-20 | Twintech E.U., Limited Liability Company | Method for Distributing Content to a User Station |
US8825872B2 (en) | 1994-05-31 | 2014-09-02 | Intellectual Ventures I Llc | Software and method for monitoring a data stream and for capturing desired data within the data stream |
US20060129627A1 (en) * | 1996-11-22 | 2006-06-15 | Mangosoft Corp. | Internet-based shared file service with native PC client access and semantics and distributed version control |
US7058696B1 (en) | 1996-11-22 | 2006-06-06 | Mangosoft Corporation | Internet-based shared file service with native PC client access and semantics |
US7136903B1 (en) | 1996-11-22 | 2006-11-14 | Mangosoft Intellectual Property, Inc. | Internet-based shared file service with native PC client access and semantics and distributed access control |
US6336132B2 (en) | 1997-02-07 | 2002-01-01 | About.Com, Inc. | Internet resource location system with identified and approved human guides assigned to specific topics to provide content related to the topic |
US20050198116A1 (en) * | 1997-02-07 | 2005-09-08 | About, Inc. | Collaborative internet data mining system |
US9195770B1 (en) | 1997-02-07 | 2015-11-24 | About, Inc. | System and method for identifying content using content templates for distribution to internet users |
US6226648B1 (en) * | 1997-02-07 | 2001-05-01 | About.Com, Inc. | System and method for modification of included files used in a automatic web page generation system |
US8719333B2 (en) | 1997-02-07 | 2014-05-06 | About, Inc. | System and method for collecting content using templates for distribution to internet users |
US20090106432A1 (en) * | 1997-05-14 | 2009-04-23 | Pedersen Bradley J | System and Method for Transmitting Data from a Server Application to More Than One Client Node |
US20030037148A1 (en) * | 1997-05-14 | 2003-02-20 | Citrix Systems, Inc. | System and method for transmitting data from a server application to more than one client node |
US6370552B1 (en) * | 1997-05-14 | 2002-04-09 | Citrix Systems, Inc. | Apparatus and method for displaying application output in an HTML document |
US8296446B2 (en) | 1997-05-14 | 2012-10-23 | Citrix Systems, Inc. | System and method for transmitting data from a server application to more than one client node |
US6324623B1 (en) * | 1997-05-30 | 2001-11-27 | Oracle Corporation | Computing system for implementing a shared cache |
US6845430B2 (en) | 1997-05-30 | 2005-01-18 | Oracle International Corporation | System for maintaining a buffer pool |
US6886080B1 (en) * | 1997-05-30 | 2005-04-26 | Oracle International Corporation | Computing system for implementing a shared cache |
US6883020B1 (en) * | 1997-06-26 | 2005-04-19 | Hewlett-Packard Development Company, L.P. | Apparatus and method for filtering downloaded network sites |
US7031954B1 (en) * | 1997-09-10 | 2006-04-18 | Google, Inc. | Document retrieval system with access control |
US6442651B2 (en) * | 1997-10-28 | 2002-08-27 | Cacheflow, Inc. | Shared cache parsing and pre-fetch |
US6393526B1 (en) * | 1997-10-28 | 2002-05-21 | Cache Plan, Inc. | Shared cache parsing and pre-fetch |
US6282618B1 (en) * | 1997-11-28 | 2001-08-28 | International Business Machines Corporation | Secure variable storage for internet applications |
US20030065796A1 (en) * | 1997-12-05 | 2003-04-03 | Network Appliance, Inc. | Enforcing uniform file-locking for diverse file-locking protocols |
US7293097B2 (en) * | 1997-12-05 | 2007-11-06 | Network Appliance, Inc. | Enforcing uniform file-locking for diverse file-locking protocols |
US6370584B1 (en) * | 1998-01-13 | 2002-04-09 | Trustees Of Boston University | Distributed routing |
US6389422B1 (en) * | 1998-01-27 | 2002-05-14 | Sharp Kabushiki Kaisha | Method of relaying file object, distributed file system, computer readable medium recording a program of file object relay method and gateway computer, allowing reference of one same file object among networks |
JPH11212886A (en) * | 1998-01-27 | 1999-08-06 | Sharp Corp | File object relay method, distributed file system, computer readable recording medium recording program of the relay method and gateway computer |
US6584495B1 (en) * | 1998-01-30 | 2003-06-24 | Microsoft Corporation | Unshared scratch space |
US6256740B1 (en) * | 1998-02-06 | 2001-07-03 | Ncr Corporation | Name service for multinode system segmented into I/O and compute nodes, generating guid at I/O node and exporting guid to compute nodes via interconnect fabric |
US7930278B2 (en) | 1998-02-13 | 2011-04-19 | Oracle International Corporation | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US20070174541A1 (en) * | 1998-02-13 | 2007-07-26 | Sashikanth Chandrasekaran | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US9519589B2 (en) | 1998-02-13 | 2016-12-13 | Oracle International Corporation | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US20070168319A1 (en) * | 1998-02-13 | 2007-07-19 | Oracle International Corporation | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US8051046B2 (en) * | 1998-02-13 | 2011-11-01 | Oracle International Corporation | Methods to perform disk writes in a distributed shared disk system needing consistency across failures |
US7185011B1 (en) | 1998-04-10 | 2007-02-27 | Microsoft Corporation | Method and system for directory balancing |
US6330565B1 (en) * | 1998-04-28 | 2001-12-11 | Xerox Corporation | Database management system and method for storing persistent and non-persistent attributes |
US6393459B1 (en) * | 1998-05-12 | 2002-05-21 | Unisys Corporation | Multicomputer with distributed directory and operating system |
US6173413B1 (en) * | 1998-05-12 | 2001-01-09 | Sun Microsystems, Inc. | Mechanism for maintaining constant permissions for multiple instances of a device within a cluster |
US6167430A (en) * | 1998-05-12 | 2000-12-26 | Unisys Corporation | Multicomputer with distributed directory and operating system |
US7103794B2 (en) | 1998-06-08 | 2006-09-05 | Cacheflow, Inc. | Network object cache engine |
US6330572B1 (en) * | 1998-07-15 | 2001-12-11 | Imation Corp. | Hierarchical data storage management |
US6516342B1 (en) * | 1998-07-17 | 2003-02-04 | International Business Machines Corporation | Method and apparatus for extending memory using a memory server |
US6427187B2 (en) | 1998-07-31 | 2002-07-30 | Cache Flow, Inc. | Multiple cache communication |
US6330567B1 (en) * | 1998-08-13 | 2001-12-11 | Tornado Technologies Co., Ltd | Searching system for searching files stored in a hard disk of a personal computer |
US6405217B1 (en) * | 1998-09-21 | 2002-06-11 | Microsoft Corporation | State-based implementation of transactions on a file system |
US6438652B1 (en) * | 1998-10-09 | 2002-08-20 | International Business Machines Corporation | Load balancing cooperating cache servers by shifting forwarded request |
US6223180B1 (en) * | 1998-10-30 | 2001-04-24 | Unisys Corp. | System and computer-implemented method for transforming existing host-based screen applications into components useful in developing integrated business-centric applications |
US7577690B2 (en) | 1998-11-24 | 2009-08-18 | Oracle International Corporation | Managing checkpoint queues in a multiple node system |
US20050065907A1 (en) * | 1998-11-24 | 2005-03-24 | Oracle Corporation | Managing checkpoint queues in a multiple node system |
US7296039B2 (en) * | 1998-11-24 | 2007-11-13 | Oracle International Corporation | Managing checkpoint queues in a multiple node system |
WO2000036490A2 (en) * | 1998-12-16 | 2000-06-22 | Rstar Corporation | A method and apparatus for supporting a multicast response to a unicast request for a document |
WO2000036490A3 (en) * | 1998-12-16 | 2000-10-26 | Zap Me & Excl | A method and apparatus for supporting a multicast response to a unicast request for a document |
US6757706B1 (en) * | 1999-01-28 | 2004-06-29 | International Business Machines Corporation | Method and apparatus for providing responses for requests of off-line clients |
US6430570B1 (en) * | 1999-03-01 | 2002-08-06 | Hewlett-Packard Company | Java application manager for embedded device |
US6467011B2 (en) * | 1999-03-19 | 2002-10-15 | Times N Systems, Inc. | Shared memory apparatus and method for multiprocessor systems |
US6920605B1 (en) * | 1999-04-01 | 2005-07-19 | International Business Machines Corporation | Method and system for rapid publishing and censoring information |
USRE40989E1 (en) * | 1999-04-05 | 2009-11-17 | Microsoft Corporation | Atomic operations on data structures |
US6484185B1 (en) * | 1999-04-05 | 2002-11-19 | Microsoft Corporation | Atomic operations on data structures |
US8484379B2 (en) * | 1999-06-10 | 2013-07-09 | E C Enabler, Ltd | Method and system for transferring information |
US20060253540A1 (en) * | 1999-06-10 | 2006-11-09 | Ec Enabler, Ltd. (A New York Corporation) | Method and system for transferring information |
US6665704B1 (en) * | 1999-06-18 | 2003-12-16 | Sun Microsystems, Inc. | Bounding delays and reducing threading overheads in caching |
US6446111B1 (en) * | 1999-06-18 | 2002-09-03 | Epicrealm Operating Inc. | Method and apparatus for client-server communication using a limited capability client over a low-speed communications link |
US6760756B1 (en) * | 1999-06-23 | 2004-07-06 | Mangosoft Corporation | Distributed virtual web cache implemented entirely in software |
US6601090B1 (en) * | 1999-06-25 | 2003-07-29 | Nortel Networks Limited | System and method for servicing internet object accessess from a coupled intranet |
US6360299B1 (en) | 1999-06-30 | 2002-03-19 | International Business Machines Corporation | Extended cache state with prefetched stream ID information |
US6421762B1 (en) * | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Cache allocation policy based on speculative request history |
US6532521B1 (en) | 1999-06-30 | 2003-03-11 | International Business Machines Corporation | Mechanism for high performance transfer of speculative request data between levels of cache hierarchy |
US6510494B1 (en) | 1999-06-30 | 2003-01-21 | International Business Machines Corporation | Time based mechanism for cached speculative data deallocation |
US6496921B1 (en) | 1999-06-30 | 2002-12-17 | International Business Machines Corporation | Layered speculative request unit with instruction optimized and storage hierarchy optimized partitions |
US6393528B1 (en) | 1999-06-30 | 2002-05-21 | International Business Machines Corporation | Optimized cache allocation algorithm for multiple speculative requests |
US6421763B1 (en) | 1999-06-30 | 2002-07-16 | International Business Machines Corporation | Method for instruction extensions for a tightly coupled speculative request unit |
US6553409B1 (en) * | 1999-07-09 | 2003-04-22 | Microsoft Corporation | Background cache synchronization |
US6839744B1 (en) | 1999-09-10 | 2005-01-04 | Ianywhere Solutions, Inc. | System, method, and computer program product for administering channels, content, and data for mobile devices |
US20060036495A1 (en) * | 1999-09-10 | 2006-02-16 | Ianywhere Solutions, Inc. | Interactive advertisement mechanism on a mobile device |
US6421717B1 (en) | 1999-09-10 | 2002-07-16 | Avantgo, Inc. | System, method, and computer program product for customizing channels, content, and data for mobile devices |
US20060036494A1 (en) * | 1999-09-10 | 2006-02-16 | Ianywhere Solutions, Inc. | Interactive advertisement mechanism on a mobile device |
US7987420B1 (en) | 1999-09-10 | 2011-07-26 | Ianywhere Solutions, Inc. | System, method, and computer program product for a scalable, configurable, client/server, cross-platform browser for mobile devices |
US20080120184A1 (en) * | 1999-09-10 | 2008-05-22 | Sybase 365, Inc. | Interactive Advertisement Mechanism on a Mobile Device |
US20060036493A1 (en) * | 1999-09-10 | 2006-02-16 | Ianywhere Solutions, Inc. | Interactive advertisement mechanism on a mobile device |
US20080215672A1 (en) * | 1999-09-10 | 2008-09-04 | Sybase 365, Inc. | System, Method, and Computer Program Product for a Scalable, Configurable, Client/Server, Cross-Platform Browser for Mobile Devices |
US7392308B2 (en) | 1999-09-10 | 2008-06-24 | Ianywhere Solutions, Inc. | System, method, and computer program product for placement of channels on a mobile device |
US20060136571A1 (en) * | 1999-09-10 | 2006-06-22 | Ianywhere Solutions, Inc. | System, method, and computer program product for executing scripts on mobile devices |
US7263547B2 (en) | 1999-09-10 | 2007-08-28 | Ianywhere Solutions, Inc. | System, method, and computer program product for customizing channels, content, and data for mobile devices |
US6779042B1 (en) | 1999-09-10 | 2004-08-17 | Ianywhere Solutions, Inc. | System, method, and computer program product for enabling on-device servers, offline forms, and dynamic ad tracking on mobile devices |
US6553412B1 (en) | 1999-09-10 | 2003-04-22 | Avantgo, Inc. | System, method, and computer program product for web content aggregation and development, and web content delivery to clients |
US20020052916A1 (en) * | 1999-09-10 | 2002-05-02 | Avantgo, Inc. | System, Method, and computer program product for customizing channels, content, and data for mobile devices |
US20020052781A1 (en) * | 1999-09-10 | 2002-05-02 | Avantgo, Inc. | Interactive advertisement mechanism on a mobile device |
US7840647B2 (en) | 1999-09-10 | 2010-11-23 | Ianywhere Solutions, Inc. | System, method, and computer program product for executing scripts on mobile devices |
US20080134031A1 (en) * | 1999-09-10 | 2008-06-05 | Sybase 365, Inc. | System, Method, and Computer Program Product for Placement of Channels on a Mobile Device |
US6341316B1 (en) | 1999-09-10 | 2002-01-22 | Avantgo, Inc. | System, method, and computer program product for synchronizing content between a server and a client based on state information |
US8595308B1 (en) | 1999-09-10 | 2013-11-26 | Ianywhere Solutions, Inc. | System, method, and computer program product for server side processing in a mobile device environment |
US20010051979A1 (en) * | 1999-09-10 | 2001-12-13 | Avantgo, Inc. | System, method, and computer program product for placement of channels on a mobile device |
WO2001025930A1 (en) * | 1999-10-01 | 2001-04-12 | Infraworks Corporation | Shared memory blocking method and system |
US6553466B1 (en) | 1999-10-01 | 2003-04-22 | Infraworks Corporation | Shared memory blocking method and system |
US6862607B1 (en) * | 1999-10-28 | 2005-03-01 | Alcatel | Method to provide information in an internet telecommunication network |
US6862599B2 (en) * | 1999-11-13 | 2005-03-01 | Kevin D. King | Software-based methodology for the storage and retrieval of diverse information |
US9456048B2 (en) | 1999-12-30 | 2016-09-27 | Ianywhere Solutions, Inc. | System, method, and computer program product for server side processing in a mobile device environment |
US7237002B1 (en) * | 2000-01-04 | 2007-06-26 | International Business Machines Corporation | System and method for dynamic browser management of web site |
US6594664B1 (en) * | 2000-01-04 | 2003-07-15 | International Business Machines Corporation | System and method for online/offline uninterrupted updating of rooms in collaboration space |
US6823377B1 (en) * | 2000-01-28 | 2004-11-23 | International Business Machines Corporation | Arrangements and methods for latency-sensitive hashing for collaborative web caching |
US6546404B1 (en) * | 2000-01-29 | 2003-04-08 | International Business Machines Corporation | Data migration tool |
US8010703B2 (en) | 2000-03-30 | 2011-08-30 | Prashtama Wireless Llc | Data conversion services and associated distributed processing system |
US6847995B1 (en) | 2000-03-30 | 2005-01-25 | United Devices, Inc. | Security architecture for distributed processing systems and associated method |
US10269025B2 (en) | 2000-03-30 | 2019-04-23 | Intellectual Ventures Ii Llc | Monetizing network connected user bases utilizing distributed processing systems |
US20040103139A1 (en) * | 2000-03-30 | 2004-05-27 | United Devices, Inc. | Distributed processing system having sensor based data collection and associated method |
US20010027467A1 (en) * | 2000-03-30 | 2001-10-04 | Anderson David P. | Massively distributed database system and associated method |
US7003547B1 (en) | 2000-03-30 | 2006-02-21 | United Devices, Inc. | Distributed parallel processing system having capability-based incentives and associated method |
US20040215829A1 (en) * | 2000-03-30 | 2004-10-28 | United Devices, Inc. | Data conversion services and associated distributed processing system |
US8275827B2 (en) | 2000-03-30 | 2012-09-25 | Niration Network Group, L.L.C. | Software-based network attached storage services hosted on massively distributed parallel computing networks |
US20100036723A1 (en) * | 2000-03-30 | 2010-02-11 | Hubbard Edward A | Sweepstakes Incentive Model and Associated System |
US20030033543A1 (en) * | 2000-03-30 | 2003-02-13 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US7020678B1 (en) | 2000-03-30 | 2006-03-28 | United Devices, Inc. | Machine generated sweepstakes entry model and associated distributed processing system |
US8249940B2 (en) | 2000-03-30 | 2012-08-21 | Niration Network Group, LLC | Capability based distributed processing |
US6963897B1 (en) | 2000-03-30 | 2005-11-08 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US20090222508A1 (en) * | 2000-03-30 | 2009-09-03 | Hubbard Edward A | Network Site Testing |
US20050010664A1 (en) * | 2000-03-30 | 2005-01-13 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
US7039670B2 (en) | 2000-03-30 | 2006-05-02 | United Devices, Inc. | Massively distributed processing system with modular client agent and associated method |
US20090216649A1 (en) * | 2000-03-30 | 2009-08-27 | Hubbard Edward A | Capability Based Distributed Processing |
US20040148336A1 (en) * | 2000-03-30 | 2004-07-29 | Hubbard Edward A | Massively distributed processing system architecture, scheduling, unique device identification and associated methods |
US20030149765A1 (en) * | 2000-03-30 | 2003-08-07 | Hubbard Edward A. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20090132649A1 (en) * | 2000-03-30 | 2009-05-21 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US20090138551A1 (en) * | 2000-03-30 | 2009-05-28 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US7254607B2 (en) | 2000-03-30 | 2007-08-07 | United Devices, Inc. | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20050149532A1 (en) * | 2000-03-30 | 2005-07-07 | United Devices, Inc. | Customer services and advertising based upon device attributes and associated distributed processing system |
US6654783B1 (en) | 2000-03-30 | 2003-11-25 | Ethergent Corporation | Network site content indexing method and associated system |
US7082474B1 (en) | 2000-03-30 | 2006-07-25 | United Devices, Inc. | Data sharing and file distribution method and associated distributed processing system |
US7092985B2 (en) | 2000-03-30 | 2006-08-15 | United Devices, Inc. | Method of managing workloads and associated distributed processing system |
USRE42153E1 (en) * | 2000-03-30 | 2011-02-15 | Hubbard Edward A | Dynamic coordination and control of network connected devices for large-scale network site testing and associated architectures |
US20090164533A1 (en) * | 2000-03-30 | 2009-06-25 | Niration Network Group, L.L.C. | Method of Managing Workloads and Associated Distributed Processing System |
US6891802B1 (en) | 2000-03-30 | 2005-05-10 | United Devices, Inc. | Network site testing method and associated system |
US7281028B2 (en) * | 2000-04-03 | 2007-10-09 | Nederlandse Organisatie Voor Toegepast-Natuurwetenschappelijk Onderzoek Tno | Method and a system for retrieving data of a data network |
US20030065737A1 (en) * | 2000-04-03 | 2003-04-03 | Jannes Aasman | Method and a system for retrieving data of a data network |
US6629201B2 (en) | 2000-05-15 | 2003-09-30 | Superspeed Software, Inc. | System and method for high-speed substitute cache |
US6654737B1 (en) | 2000-05-23 | 2003-11-25 | Centor Software Corp. | Hypertext-based database architecture |
US7721194B2 (en) * | 2000-06-06 | 2010-05-18 | Groove Networks, Inc. | Method and apparatus for efficient management of XML documents |
US20050165815A1 (en) * | 2000-06-06 | 2005-07-28 | Groove Networks, Inc. | Method and apparatus for efficient management of XML documents |
US20020087672A1 (en) * | 2000-06-19 | 2002-07-04 | Storage Technology Corporation | Self-defining data units |
US6973556B2 (en) * | 2000-06-19 | 2005-12-06 | Storage Technology Corporation | Data element including metadata that includes data management information for managing the data element |
US7065610B1 (en) | 2000-06-27 | 2006-06-20 | Emc Corporation | Method and apparatus for maintaining inventory of logical volumes stored on storage elements |
US6978324B1 (en) | 2000-06-27 | 2005-12-20 | Emc Corporation | Method and apparatus for controlling read and write accesses to a logical entity |
US6842784B1 (en) * | 2000-06-27 | 2005-01-11 | Emc Corporation | Use of global logical volume identifiers to access logical volumes stored among a plurality of storage elements in a computer storage system |
US20050120189A1 (en) * | 2000-06-27 | 2005-06-02 | David Black | Method and apparatus for moving logical entities among storage elements in a computer storage system |
US7899933B1 (en) | 2000-06-27 | 2011-03-01 | Emc Corporation | Use of global logical volume identifiers to access logical volumes stored among a plurality of storage elements in a computer storage system |
US7225191B1 (en) | 2000-06-27 | 2007-05-29 | Emc Corporation | Method and apparatus for verifying storage access requests in a computer storage system with multiple storage elements |
US7428604B2 (en) | 2000-06-27 | 2008-09-23 | Emc Corporation | Method and apparatus for moving logical entities among storage elements in a computer storage system |
US20070027986A1 (en) * | 2000-07-10 | 2007-02-01 | Oracle International Corporation | Selective cache flushing in identity and access management systems |
US20020165960A1 (en) * | 2000-07-10 | 2002-11-07 | Chan Christine Wai Han | Access tester |
US20070174905A1 (en) * | 2000-07-10 | 2007-07-26 | Oracle Ineternational Corporation | User authentication |
US7398311B2 (en) | 2000-07-10 | 2008-07-08 | Oracle International Corporation | Selective cache flushing in identity and access management systems |
US20020112083A1 (en) * | 2000-07-10 | 2002-08-15 | Joshi Vrinda S. | Cache flushing |
US20020120599A1 (en) * | 2000-07-10 | 2002-08-29 | Knouse Charles W. | Post data processing |
US7814536B2 (en) | 2000-07-10 | 2010-10-12 | Oracle International Corporation | User authentication |
US7194764B2 (en) | 2000-07-10 | 2007-03-20 | Oracle International Corporation | User authentication |
US7124203B2 (en) * | 2000-07-10 | 2006-10-17 | Oracle International Corporation | Selective cache flushing in identity and access management systems |
US7249369B2 (en) | 2000-07-10 | 2007-07-24 | Oracle International Corporation | Post data processing |
US7464162B2 (en) | 2000-07-10 | 2008-12-09 | Oracle International Corporation | Systems and methods for testing whether access to a resource is authorized based on access information |
US6980313B2 (en) | 2000-07-11 | 2005-12-27 | Imran Sharif | Fax-compatible internet appliance |
US7245291B2 (en) | 2000-07-11 | 2007-07-17 | Imran Sharif | System and method for internet appliance data entry and navigation |
US20020078445A1 (en) * | 2000-07-11 | 2002-06-20 | Imran Sharif | Internet appliance for interactive audio/video display using a remote control unit for user input |
US20020101620A1 (en) * | 2000-07-11 | 2002-08-01 | Imran Sharif | Fax-compatible Internet appliance |
US20030115167A1 (en) * | 2000-07-11 | 2003-06-19 | Imran Sharif | Web browser implemented in an Internet appliance |
US6981002B2 (en) | 2000-07-24 | 2005-12-27 | Mattixone, Inc. | Docubase indexing, searching and data retrieval |
US6826555B2 (en) | 2000-07-24 | 2004-11-30 | Centor Software Corporation | Open format for file storage system indexing, searching and data retrieval |
US6625596B1 (en) | 2000-07-24 | 2003-09-23 | Centor Software Corporation | Docubase indexing, searching and data retrieval |
US20040117362A1 (en) * | 2000-07-24 | 2004-06-17 | Chris Nunez | Docubase indexing, searching and data retrieval |
US6665777B2 (en) * | 2000-07-26 | 2003-12-16 | Tns Holdings, Inc. | Method, apparatus, network, and kit for multiple block sequential memory management |
US6678795B1 (en) * | 2000-08-15 | 2004-01-13 | International Business Machines Corporation | Method and apparatus for memory prefetching based on intra-page usage history |
US20070288494A1 (en) * | 2000-09-12 | 2007-12-13 | Ibrix, Inc. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US8977659B2 (en) | 2000-09-12 | 2015-03-10 | Hewlett-Packard Development Company, L.P. | Distributing files across multiple, permissibly heterogeneous, storage devices |
US7836017B1 (en) * | 2000-09-12 | 2010-11-16 | Hewlett-Packard Development Company, L.P. | File replication in a distributed segmented file system |
US8935307B1 (en) | 2000-09-12 | 2015-01-13 | Hewlett-Packard Development Company, L.P. | Independent data access in a segmented file system |
US20020095528A1 (en) * | 2000-09-29 | 2002-07-18 | International Business Machines Corporation | Method and system for operating a client in a client/server system |
US6687711B1 (en) | 2000-12-04 | 2004-02-03 | Centor Software Corporation | Keyword and methods for using a keyword |
US20050251534A1 (en) * | 2000-12-04 | 2005-11-10 | Chris Nunez | Parameterized keyword and methods for searching, indexing and storage |
US7426506B2 (en) * | 2000-12-04 | 2008-09-16 | Dassault Systemes | Parameterized keyword and methods for searching, indexing and storage |
US7085744B2 (en) | 2000-12-08 | 2006-08-01 | International Business Machines Corporation | Method and system for conducting a transaction over a network |
US20020073047A1 (en) * | 2000-12-08 | 2002-06-13 | Morrison Michael C. | Method and system for conducting a transaction over a network |
EP1359505A1 (en) * | 2000-12-11 | 2003-11-05 | Matsushita Electric Industrial Co., Ltd. | A memory management apparatus and method |
US20020095556A1 (en) * | 2000-12-11 | 2002-07-18 | Yuko Kubooka | Memory management apparatus, memory management method, memory management program and computer readable storage medium therein |
US6934821B2 (en) | 2000-12-11 | 2005-08-23 | Matsushita Electric Industrial Co., Ltd. | Memory management apparatus, memory management method, memory management program and computer readable storage medium therein |
US20020092026A1 (en) * | 2001-01-09 | 2002-07-11 | International Business Machines Corporation | Method and apparatus for broadcast delivery of content to a client-side cache based on user preferences |
US20020091792A1 (en) * | 2001-01-09 | 2002-07-11 | International Business Machines Corporation | Method and apparatus for client sharing of cached content |
US7519677B2 (en) | 2001-01-12 | 2009-04-14 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US20020107935A1 (en) * | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for community data caching |
US7730262B2 (en) | 2001-01-12 | 2010-06-01 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US8504663B2 (en) | 2001-01-12 | 2013-08-06 | Parallel Networks, Llc | Method and system for community data caching |
US8572326B2 (en) | 2001-01-12 | 2013-10-29 | Parallel Networks, Llc | Method and system for dynamic distributed data caching when a source of data is not available |
US20100185745A1 (en) * | 2001-01-12 | 2010-07-22 | Parallel Networks, Llc | Method and System for Community Data Caching |
US7694076B2 (en) | 2001-01-12 | 2010-04-06 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US7689661B2 (en) | 2001-01-12 | 2010-03-30 | Parallel Networks, Llc | Method and system for community data caching |
US7188145B2 (en) | 2001-01-12 | 2007-03-06 | Epicrealm Licensing Llc | Method and system for dynamic distributed data caching |
US7409433B2 (en) | 2001-01-12 | 2008-08-05 | Parallel Networks, Llc | Method and system for community data caching |
US8271628B2 (en) | 2001-01-12 | 2012-09-18 | Parallel Networks, Llc | Method and system for community data caching |
US20150189037A1 (en) * | 2001-01-12 | 2015-07-02 | Parallel Networks, Llc | Method and System for Dynamic Distributed Data Caching |
US8205044B2 (en) | 2001-01-12 | 2012-06-19 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US9369540B2 (en) * | 2001-01-12 | 2016-06-14 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US8135812B2 (en) | 2001-01-12 | 2012-03-13 | Parallel Networks, Llc | Method and system for community data caching |
US20080294745A1 (en) * | 2001-01-12 | 2008-11-27 | Parallel Networks, Llc | Method and System for Community Data Caching |
US7035911B2 (en) | 2001-01-12 | 2006-04-25 | Epicrealm, Licensing Llc | Method and system for community data caching |
US9602618B2 (en) | 2001-01-12 | 2017-03-21 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US20110161421A1 (en) * | 2001-01-12 | 2011-06-30 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US7975032B2 (en) | 2001-01-12 | 2011-07-05 | Parallel Networks, Llc | Method and system for community data caching |
US20020107934A1 (en) * | 2001-01-12 | 2002-08-08 | Epicrealm Inc. | Method and system for dynamic distributed data caching |
US20060190607A1 (en) * | 2001-01-12 | 2006-08-24 | Lowery Keith A | Method and System for Community Data Caching |
US20100241810A1 (en) * | 2001-01-12 | 2010-09-23 | Parallel Networks, Llc | Method and System for Dynamic Distributed Data Caching |
US7890701B2 (en) | 2001-01-12 | 2011-02-15 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US20070150577A1 (en) * | 2001-01-12 | 2007-06-28 | Epicrealm Operating Inc. | Method and System for Dynamic Distributed Data Caching |
US9210236B2 (en) | 2001-01-12 | 2015-12-08 | Parallel Networks, Llc | Method and system for dynamic distributed data caching |
US20070150575A1 (en) * | 2001-01-12 | 2007-06-28 | Epicrealm Operating Inc. | Method and System for Dynamic Distributed Data Caching |
US20050066184A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US7047420B2 (en) | 2001-01-17 | 2006-05-16 | Microsoft Corporation | Exclusive encryption |
US7685415B2 (en) | 2001-01-17 | 2010-03-23 | Microsoft Corporation | Exclusive encryption |
US20020095590A1 (en) * | 2001-01-17 | 2002-07-18 | Douceur John R. | Exclusive encryption |
US7475258B2 (en) | 2001-01-17 | 2009-01-06 | Microsoft Corporation | Exclusive encryption |
US20020116517A1 (en) * | 2001-01-17 | 2002-08-22 | Hudson Michael D. | Virtual program streaming multi-media system |
US20050066185A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US7770023B2 (en) | 2001-01-17 | 2010-08-03 | Microsoft Corporation | Exclusive encryption |
US20060107048A1 (en) * | 2001-01-17 | 2006-05-18 | Microsoft Corporation | Exclusive Encryption |
US20070076881A1 (en) * | 2001-01-17 | 2007-04-05 | Microsoft Corporation | Exclusive Encryption |
US20050066183A1 (en) * | 2001-01-17 | 2005-03-24 | Microsoft Corporation | Exclusive encryption |
US7555656B2 (en) | 2001-01-17 | 2009-06-30 | Microsoft Corporation | Exclusive encryption |
US7571327B2 (en) | 2001-01-17 | 2009-08-04 | Microsoft Corporation | Exclusive encryption |
US20020124072A1 (en) * | 2001-02-16 | 2002-09-05 | Alexander Tormasov | Virtual computing environment |
US7426565B1 (en) | 2001-02-16 | 2008-09-16 | Swsoft Holdings, Ltd. | Virtual computing environment |
US7099948B2 (en) | 2001-02-16 | 2006-08-29 | Swsoft Holdings, Ltd. | Virtual computing environment |
US20090106433A1 (en) * | 2001-02-26 | 2009-04-23 | Oracle International Corporation | Access system interface |
US8935418B2 (en) | 2001-02-26 | 2015-01-13 | Oracle International Corporation | Access system interface |
US20110173169A1 (en) * | 2001-03-07 | 2011-07-14 | Oracle International Corporation | Methods To Perform Disk Writes In A Distributed Shared Disk System Needing Consistency Across Failures |
US20020133537A1 (en) * | 2001-03-12 | 2002-09-19 | Whizz Technology Ltd. | Server cluster and server-side cooperative caching method for use with same |
US20050097077A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7401220B2 (en) | 2001-03-21 | 2008-07-15 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20050097313A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7539867B2 (en) | 2001-03-21 | 2009-05-26 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20070044144A1 (en) * | 2001-03-21 | 2007-02-22 | Oracle International Corporation | Access system interface |
US7185364B2 (en) | 2001-03-21 | 2007-02-27 | Oracle International Corporation | Access system interface |
US20050108240A1 (en) * | 2001-03-21 | 2005-05-19 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7478243B2 (en) | 2001-03-21 | 2009-01-13 | Microsoft Corporation | On-disk file format for serverless distributed file system with signed manifest of file modifications |
US7415608B2 (en) | 2001-03-21 | 2008-08-19 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7454612B2 (en) | 2001-03-21 | 2008-11-18 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20050097318A1 (en) * | 2001-03-21 | 2005-05-05 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US7458096B2 (en) | 2001-03-21 | 2008-11-25 | Oracle International Corpration | Access system interface |
US7043637B2 (en) | 2001-03-21 | 2006-05-09 | Microsoft Corporation | On-disk file format for a serverless distributed file system |
US20030074580A1 (en) * | 2001-03-21 | 2003-04-17 | Knouse Charles W. | Access system interface |
US20020138555A1 (en) * | 2001-03-23 | 2002-09-26 | Yu Allen Kai-Lang | Client enhanced server-side cache system |
US7062490B2 (en) * | 2001-03-26 | 2006-06-13 | Microsoft Corporation | Serverless distributed file system |
US20050044092A1 (en) * | 2001-03-26 | 2005-02-24 | Microsoft Corporation | Serverless distributed file system |
EP1830272A2 (en) * | 2001-03-26 | 2007-09-05 | Microsoft Corporation | A serverless distributed file system |
US7346774B2 (en) | 2001-03-26 | 2008-03-18 | Microsoft Corporation | Encrypted key cache |
EP1830272A3 (en) * | 2001-03-26 | 2008-03-12 | Microsoft Corporation | A serverless distributed file system |
US6981138B2 (en) | 2001-03-26 | 2005-12-27 | Microsoft Corporation | Encrypted key cache |
US20050278525A1 (en) * | 2001-03-26 | 2005-12-15 | Microsoft Corporation | Encrypted key cache |
US7886364B2 (en) | 2001-03-26 | 2011-02-08 | Microsoft Corporation | Encrypted key cache |
US20050102268A1 (en) * | 2001-03-26 | 2005-05-12 | Microsoft Corporation | Serverless distributed file system |
US7505970B2 (en) | 2001-03-26 | 2009-03-17 | Microsoft Corporation | Serverless distributed file system |
US7240060B2 (en) * | 2001-03-26 | 2007-07-03 | Microsoft Corporation | Serverless distributed file system |
EP2085884A2 (en) | 2001-03-26 | 2009-08-05 | Microsoft Corporation | Serverless distributed file system |
EP1246061A2 (en) * | 2001-03-26 | 2002-10-02 | Microsoft Corporation | A serverless distributed file system |
EP2085884A3 (en) * | 2001-03-26 | 2009-09-02 | Microsoft Corporation | Serverless distributed file system |
US20090132552A1 (en) * | 2001-03-26 | 2009-05-21 | Microsoft Corporation | Serverless Distributed File System |
US20020188605A1 (en) * | 2001-03-26 | 2002-12-12 | Atul Adya | Serverless distributed file system |
EP1246061A3 (en) * | 2001-03-26 | 2007-12-05 | Microsoft Corporation | A serverless distributed file system |
US8112452B2 (en) | 2001-03-26 | 2012-02-07 | Microsoft Corporation | Serverless distributed file system |
US20020154628A1 (en) * | 2001-03-27 | 2002-10-24 | Seiko Epson Corporation | Server for gathering and providing information |
US7076633B2 (en) * | 2001-03-28 | 2006-07-11 | Swsoft Holdings, Ltd. | Hosting service providing platform system and method |
US7552310B1 (en) | 2001-03-28 | 2009-06-23 | Swsoft Holdings, Ltd. | Virtualization and hosting service platform system and method |
US7469323B1 (en) | 2001-03-28 | 2008-12-23 | Swsoft Holdings, Ltd. | Hosting service platform system and method |
WO2002084939A1 (en) * | 2001-04-10 | 2002-10-24 | Mark Zielinski | System and method for securely executing a executable to preserve the integrity of files from unauthorized access for network security |
US20050097148A1 (en) * | 2001-06-06 | 2005-05-05 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7487245B2 (en) | 2001-06-06 | 2009-02-03 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7272630B2 (en) | 2001-06-06 | 2007-09-18 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20030037094A1 (en) * | 2001-06-06 | 2003-02-20 | Douceur John R. | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7519623B2 (en) | 2001-06-06 | 2009-04-14 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071315A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071330A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071339A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050216538A1 (en) * | 2001-06-06 | 2005-09-29 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7310644B2 (en) | 2001-06-06 | 2007-12-18 | Microsoft Corporation | Locating potentially identical objects across multiple computers |
US7359937B2 (en) | 2001-06-06 | 2008-04-15 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20030037022A1 (en) * | 2001-06-06 | 2003-02-20 | Atul Adya | Locating potentially identical objects across multiple computers |
US7444387B2 (en) | 2001-06-06 | 2008-10-28 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050071340A1 (en) * | 2001-06-06 | 2005-03-31 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US6988124B2 (en) | 2001-06-06 | 2006-01-17 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7509423B2 (en) | 2001-06-06 | 2009-03-24 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US7571186B2 (en) | 2001-06-06 | 2009-08-04 | Microsoft Corporation | Locating potentially identical objects across multiple computers based on stochastic partitioning of workload |
US20050027746A1 (en) * | 2001-06-18 | 2005-02-03 | Microsoft Corporation | Selective file purging for delete or rename |
US7895249B2 (en) * | 2001-06-18 | 2011-02-22 | Microsoft Corporation | Selective file purging for delete or rename |
US7231661B1 (en) | 2001-06-21 | 2007-06-12 | Oracle International Corporation | Authorization services with external authentication |
US8010503B1 (en) | 2001-06-25 | 2011-08-30 | Netapp, Inc. | System and method for restoring a single data stream file from a snapshot |
US7162486B2 (en) * | 2001-06-25 | 2007-01-09 | Network Appliance, Inc. | System and method for representing named data streams within an on-disk structure of a file system |
US20040059866A1 (en) * | 2001-06-25 | 2004-03-25 | Kayuri Patel | System and method for representing named data streams within an on-disk structure of a file system |
US20030009528A1 (en) * | 2001-07-08 | 2003-01-09 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US7194513B2 (en) | 2001-07-08 | 2007-03-20 | Imran Sharif | System and method for using an internet appliance to send/receive digital content files as E-mail attachments |
US7103714B1 (en) * | 2001-08-04 | 2006-09-05 | Oracle International Corp. | System and method for serving one set of cached data for differing data requests |
US20030051042A1 (en) * | 2001-09-13 | 2003-03-13 | International Business Machines Corporation | Load balancing method and system for allocation of service requests on a network |
US20050015640A1 (en) * | 2001-09-21 | 2005-01-20 | Polyserve, Inc. | System and method for journal recovery for multinode environments |
US20040202013A1 (en) * | 2001-09-21 | 2004-10-14 | Polyserve, Inc. | System and method for collaborative caching in a multinode system |
US7496646B2 (en) | 2001-09-21 | 2009-02-24 | Hewlett-Packard Development Company, L.P. | System and method for management of a storage area network |
US20030065672A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US7111197B2 (en) | 2001-09-21 | 2006-09-19 | Polyserve, Inc. | System and method for journal recovery for multinode environments |
US20030065760A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc | System and method for management of a storage area network |
CN1320483C (en) * | 2001-09-21 | 2007-06-06 | 泛伺服公司 | System and method for implementing journaling in a multi-node environment |
US7437386B2 (en) | 2001-09-21 | 2008-10-14 | Hewlett-Packard Development Company, L.P. | System and method for a multi-node environment with shared storage |
US20030079155A1 (en) * | 2001-09-21 | 2003-04-24 | Polyserve, Inc. | System and method for efficient lock recovery |
WO2003025801A1 (en) * | 2001-09-21 | 2003-03-27 | Polyserve, Inc. | System and method for implementing journaling in a multi-node environment |
US7240057B2 (en) | 2001-09-21 | 2007-07-03 | Kingsbury Brent A | System and method for implementing journaling in a multi-node environment |
US7266722B2 (en) | 2001-09-21 | 2007-09-04 | Hewlett-Packard Development Company, L.P. | System and method for efficient lock recovery |
US7149853B2 (en) | 2001-09-21 | 2006-12-12 | Polyserve, Inc. | System and method for synchronization for enforcing mutual exclusion among multiple negotiators |
US20030065896A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for synchronization for enforcing mutual exclusion among multiple negotiators |
US20030065686A1 (en) * | 2001-09-21 | 2003-04-03 | Polyserve, Inc. | System and method for a multi-node environment with shared storage |
US20030167327A1 (en) * | 2001-10-05 | 2003-09-04 | Baldwin Duane Mark | Storage area network methods and apparatus for topology rendering |
US7430593B2 (en) | 2001-10-05 | 2008-09-30 | International Business Machines Corporation | Storage area network for topology rendering |
US7225256B2 (en) | 2001-11-30 | 2007-05-29 | Oracle International Corporation | Impersonation in an access system |
US7765298B2 (en) | 2001-11-30 | 2010-07-27 | Oracle International Corporation | Impersonation in an access system |
US20070089167A1 (en) * | 2001-11-30 | 2007-04-19 | Oracle International Corporation | Impersonation in an access system |
US20030105862A1 (en) * | 2001-11-30 | 2003-06-05 | Villavicencio Francisco J. | Impersonation in an access system |
US7007026B2 (en) * | 2001-12-14 | 2006-02-28 | Sun Microsystems, Inc. | System for controlling access to and generation of localized application values |
US20030115186A1 (en) * | 2001-12-14 | 2003-06-19 | Wilkinson Francis M. | System for controlling access to and generation of localized application values |
WO2003055141A2 (en) * | 2001-12-20 | 2003-07-03 | France Telecom | Method for transmitting objects between a server and a client terminal using cache management |
WO2003055141A3 (en) * | 2001-12-20 | 2003-12-24 | France Telecom | Method for transmitting objects between a server and a client terminal using cache management |
FR2834104A1 (en) * | 2001-12-20 | 2003-06-27 | France Telecom | virtual reality object data system manages client cache using relevance list |
CN100505741C (en) * | 2001-12-20 | 2009-06-24 | 法国电信公司 | Method for transmitting objects between a server and a client terminal using cache management, corresponding transmission, server and terminal |
US20030126118A1 (en) * | 2002-01-02 | 2003-07-03 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US20070112787A1 (en) * | 2002-01-02 | 2007-05-17 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US7177868B2 (en) | 2002-01-02 | 2007-02-13 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US8682928B2 (en) | 2002-01-02 | 2014-03-25 | International Business Machines Corporation | Method, system and program for direct client file access in a data management system |
US8086579B1 (en) | 2002-01-22 | 2011-12-27 | Oracle International Corporation | Semantic response to lock requests to reduce coherence overhead in multi-node systems |
US20030225998A1 (en) * | 2002-01-31 | 2003-12-04 | Khan Mohammed Noshad | Configurable data processor with multi-length instruction set architecture |
US20030163543A1 (en) * | 2002-02-28 | 2003-08-28 | Silicon Graphics, Inc. | Method and system for cache coherence in DSM multiprocessor system without growth of the sharing vector |
WO2003075162A1 (en) * | 2002-02-28 | 2003-09-12 | Silicon Graphics, Inc. | Method and system for cache coherence in dsm multiprocessor system without growth of the sharing vector |
US6877030B2 (en) | 2002-02-28 | 2005-04-05 | Silicon Graphics, Inc. | Method and system for cache coherence in DSM multiprocessor system without growth of the sharing vector |
US20030182357A1 (en) * | 2002-03-01 | 2003-09-25 | Brian Chess | Client-side caching of pages with changing content |
US8082299B2 (en) | 2002-03-01 | 2011-12-20 | NetSuite Inc. | Methods and systems of client-side caching of pages with changing content |
US7970816B2 (en) * | 2002-03-01 | 2011-06-28 | NetSuite Inc. | Client-side caching of pages with changing content |
US20110238746A1 (en) * | 2002-03-01 | 2011-09-29 | Brian Chess | Methods and systems of client-side caching of pages with changing content |
US20030172089A1 (en) * | 2002-03-07 | 2003-09-11 | Douceur John R. | File availability in distributed file storage systems |
US20060112154A1 (en) * | 2002-03-07 | 2006-05-25 | Microsoft Corporation | File Availability in Distributed File Storage Systems |
US20060106882A1 (en) * | 2002-03-07 | 2006-05-18 | Microsoft Corporation | File Availability in Distributed File Storage Systems |
US7020665B2 (en) | 2002-03-07 | 2006-03-28 | Microsoft Corporation | File availability in distributed file storage systems |
US7299250B2 (en) | 2002-03-07 | 2007-11-20 | Microsoft Corporation | File availability in distributed file storage systems |
US7200618B2 (en) | 2002-03-07 | 2007-04-03 | Microsoft Corporation | File availability in distributed file storage systems |
US20030188039A1 (en) * | 2002-03-26 | 2003-10-02 | Liu James C. | Method and apparatus for web service aggregation |
US20040039810A1 (en) * | 2002-07-05 | 2004-02-26 | Canon Kabushiki Kaisha | Method and device for data processing in a communication network |
US7467184B2 (en) * | 2002-07-05 | 2008-12-16 | Canon Kabushiki Kaisha | Method and device for data processing in a communication network |
US6980994B2 (en) | 2002-07-08 | 2005-12-27 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US20040006565A1 (en) * | 2002-07-08 | 2004-01-08 | International Business Machines Corporation | Method, apparatus and computer program product for mapping file handles |
US7337331B2 (en) * | 2002-09-11 | 2008-02-26 | Fuji Xerox Co., Ltd. | Distributive storage controller and method |
US20040049700A1 (en) * | 2002-09-11 | 2004-03-11 | Fuji Xerox Co., Ltd. | Distributive storage controller and method |
US7631078B2 (en) * | 2002-09-16 | 2009-12-08 | Netapp, Inc. | Network caching device including translation mechanism to provide indirection between client-side object handles and server-side object handles |
US20070192444A1 (en) * | 2002-09-16 | 2007-08-16 | Emmanuel Ackaouy | Apparatus and method for a proxy cache |
US7680932B2 (en) * | 2002-09-20 | 2010-03-16 | Mks Inc. | Version control system for software development |
US20040133444A1 (en) * | 2002-09-20 | 2004-07-08 | Florence Defaix | Version control system for software development |
US20120036161A1 (en) * | 2002-11-01 | 2012-02-09 | Bluearc Uk Limited | Distributed File System and Method |
US8788530B2 (en) * | 2002-11-01 | 2014-07-22 | Hitachi Data Systems Engineering UK Limited | Distributed file system and method |
US20040117594A1 (en) * | 2002-12-13 | 2004-06-17 | Vanderspek Julius | Memory management method |
US7058773B1 (en) | 2003-01-16 | 2006-06-06 | Cisco Technology, Inc. | System and method for managing data in a distributed system |
US7177900B2 (en) * | 2003-02-19 | 2007-02-13 | International Business Machines Corporation | Non-invasive technique for enabling distributed computing applications to exploit distributed fragment caching and assembly |
US20040162886A1 (en) * | 2003-02-19 | 2004-08-19 | International Business Machines Corporation | Non-invasive technique for enabling distributed computing applications to exploit distributed fragment caching and assembly |
US20040172451A1 (en) * | 2003-02-27 | 2004-09-02 | Nigel Biggs | System and method for sharing digital images |
US20060212573A1 (en) * | 2003-05-09 | 2006-09-21 | Oracle International Corporation | Efficient locking of shared data that is accessed for reads in a cluster database |
US8224977B2 (en) | 2003-05-09 | 2012-07-17 | Oracle International Corporation | Using local locks for global synchronization in multi-node systems |
US20040225742A1 (en) * | 2003-05-09 | 2004-11-11 | Oracle International Corporation | Using local locks for global synchronization in multi-node systems |
US7376744B2 (en) | 2003-05-09 | 2008-05-20 | Oracle International Corporation | Using local locks for global synchronization in multi-node systems |
US7447786B2 (en) | 2003-05-09 | 2008-11-04 | Oracle International Corporation | Efficient locking of shared data that is accessed for reads in a cluster database |
US20070011130A1 (en) * | 2003-06-03 | 2007-01-11 | Shinji Yamabuchi | Method for browsing contents using page storing file |
US20040267712A1 (en) * | 2003-06-23 | 2004-12-30 | Khachatur Papanyan | Method and apparatus for web cache using database triggers |
US7765196B2 (en) * | 2003-06-23 | 2010-07-27 | Dell Products L.P. | Method and apparatus for web cache using database triggers |
US20040267919A1 (en) * | 2003-06-30 | 2004-12-30 | International Business Machines Corporation | Method and system for providing server management peripheral caching using a shared bus |
US20050018152A1 (en) * | 2003-07-22 | 2005-01-27 | Ting Edison Lao | Isolated ordered regions (ior) prefetching and page replacement |
US7165147B2 (en) | 2003-07-22 | 2007-01-16 | International Business Machines Corporation | Isolated ordered regions (IOR) prefetching and page replacement |
US20050120160A1 (en) * | 2003-08-20 | 2005-06-02 | Jerry Plouffe | System and method for managing virtual servers |
US8776050B2 (en) | 2003-08-20 | 2014-07-08 | Oracle International Corporation | Distributed virtual machine monitor for managing multiple virtual resources across multiple physical nodes |
US20050080982A1 (en) * | 2003-08-20 | 2005-04-14 | Vasilevsky Alexander D. | Virtual host bus adapter and method |
US20050044301A1 (en) * | 2003-08-20 | 2005-02-24 | Vasilevsky Alexander David | Method and apparatus for providing virtual computing services |
US20050050452A1 (en) * | 2003-08-27 | 2005-03-03 | Weitzel Wade D. | Systems and methods for generating an electronically publishable document |
US7162476B1 (en) * | 2003-09-11 | 2007-01-09 | Cisco Technology, Inc | System and method for sharing global data within distributed computing systems |
US20090043971A1 (en) * | 2003-09-26 | 2009-02-12 | Ximeta Technology, Inc. | Data integrity for data storage devices shared by multiple hosts via a network |
US7873353B2 (en) | 2003-09-30 | 2011-01-18 | Ianywhere Solutions, Inc. | Method and system for accessing applications and data, and for tracking of key indicators on mobile handheld devices |
US20050070259A1 (en) * | 2003-09-30 | 2005-03-31 | David Kloba | Method and system for accessing applications and data, and for tracking of key indicators on mobile handheld devices |
US20050080791A1 (en) * | 2003-10-09 | 2005-04-14 | Ghatare Sanjay P. | Translating data access requests |
US20050080792A1 (en) * | 2003-10-09 | 2005-04-14 | Ghatare Sanjay P. | Support for RDBMS in LDAP system |
US7904487B2 (en) | 2003-10-09 | 2011-03-08 | Oracle International Corporation | Translating data access requests |
US7882132B2 (en) | 2003-10-09 | 2011-02-01 | Oracle International Corporation | Support for RDBMS in LDAP system |
US20050086213A1 (en) * | 2003-10-16 | 2005-04-21 | Fuji Xerox Co., Ltd. | Server apparatus, information providing method and program product therefor |
US20050165735A1 (en) * | 2003-10-23 | 2005-07-28 | Microsoft Corporation | Persistent caching directory level support |
US20050091226A1 (en) * | 2003-10-23 | 2005-04-28 | Yun Lin | Persistent caching directory level support |
US20050160096A1 (en) * | 2003-10-23 | 2005-07-21 | Microsoft Corporation | Persistent caching directory level support |
US7698376B2 (en) | 2003-10-23 | 2010-04-13 | Microsoft Corporation | Persistent caching directory level support |
US7702745B2 (en) | 2003-10-23 | 2010-04-20 | Yun Lin | Persistent caching directory level support |
US20050114363A1 (en) * | 2003-11-26 | 2005-05-26 | Veritas Operating Corporation | System and method for detecting and storing file identity change information within a file system |
US20050114381A1 (en) * | 2003-11-26 | 2005-05-26 | Veritas Operating Corporation | System and method for generating extensible file system metadata |
US8484257B2 (en) * | 2003-11-26 | 2013-07-09 | Symantec Operating Corporation | System and method for generating extensible file system metadata |
US7328217B2 (en) | 2003-11-26 | 2008-02-05 | Symantec Operating Corporation | System and method for detecting and storing file identity change information within a file system |
US20080126374A1 (en) * | 2003-11-26 | 2008-05-29 | Dhrubajyoti Borthakur | System and method for detecting and storing file identity change information within a file system |
US20050114406A1 (en) * | 2003-11-26 | 2005-05-26 | Veritas Operating Corporation | System and method for detecting and storing file content access information within a file system |
US7272606B2 (en) | 2003-11-26 | 2007-09-18 | Veritas Operating Corporation | System and method for detecting and storing file content access information within a file system |
US7653647B2 (en) | 2003-11-26 | 2010-01-26 | Symantec Operating Corporation | System and method for determining file system data integrity |
US7912866B2 (en) | 2003-11-26 | 2011-03-22 | Symantec Operating Corporation | System and method for detecting and storing file identity change information within a file system |
US7111119B2 (en) | 2003-11-27 | 2006-09-19 | Hitachi, Ltd. | Device and method for performing information processing using plurality of processors |
US20050120173A1 (en) * | 2003-11-27 | 2005-06-02 | Nobuyuki Minowa | Device and method for performing information processing using plurality of processors |
US20050132185A1 (en) * | 2003-12-15 | 2005-06-16 | Reed Benjamin C. | Method and system of accessing at least one target file in a computer system with an operating system with file locking implemented with byte-range locking |
US7380246B2 (en) * | 2003-12-15 | 2008-05-27 | Lenovo (Singapore) Pte. Ltd. | Method and system of accessing at least one target file in a computer system with an operating system with file locking implemented with byte-range locking |
US20050198676A1 (en) * | 2003-12-22 | 2005-09-08 | Canon Kabushiki Kaisha | Method and device for the continuous transmission of a video in a communication network |
US8397265B2 (en) * | 2003-12-22 | 2013-03-12 | Canon Kabushiki Kaisha | Method and device for the continuous transmission of a video in a communication network |
US20050172076A1 (en) * | 2004-01-30 | 2005-08-04 | Gateway Inc. | System for managing distributed cache resources on a computing grid |
US7376947B2 (en) * | 2004-02-23 | 2008-05-20 | Research In Motion Limited | Computer system and method for secure installation and operation of software |
US20080184223A1 (en) * | 2004-02-23 | 2008-07-31 | Evers Richard T | Computer system and method for secure installation and operation of software |
US8069442B2 (en) | 2004-02-23 | 2011-11-29 | Research In Motion Limited | Computer system and method for secure installation and operation of software |
US20050188369A1 (en) * | 2004-02-23 | 2005-08-25 | Evers Richard T. | System and method for secure installation and operation of software |
US20050198010A1 (en) * | 2004-03-04 | 2005-09-08 | Veritas Operating Corporation | System and method for efficient file content searching within a file system |
US7636710B2 (en) | 2004-03-04 | 2009-12-22 | Symantec Operating Corporation | System and method for efficient file content searching within a file system |
EP1550962A1 (en) * | 2004-06-01 | 2005-07-06 | France Telecom | Computerised system and method of loading data |
US8306991B2 (en) | 2004-06-07 | 2012-11-06 | Symantec Operating Corporation | System and method for providing a programming-language-independent interface for querying file system content |
US20060004759A1 (en) * | 2004-06-07 | 2006-01-05 | Veritas Operating Corporation | System and method for file system content processing |
US7657530B2 (en) * | 2004-06-07 | 2010-02-02 | Symantec Operating Corporation | System and method for file system content processing |
US20050289354A1 (en) * | 2004-06-28 | 2005-12-29 | Veritas Operating Corporation | System and method for applying a file system security model to a query system |
US7562216B2 (en) | 2004-06-28 | 2009-07-14 | Symantec Operating Corporation | System and method for applying a file system security model to a query system |
US20060010173A1 (en) * | 2004-06-30 | 2006-01-12 | Kilday Roger W | Methods and systems for client-side, on-disk caching |
US7369132B1 (en) * | 2004-07-29 | 2008-05-06 | Nvidia Corporation | Apparatus, system, and method for delivering data to multiple memory clients via a unitary buffer |
US7221369B1 (en) * | 2004-07-29 | 2007-05-22 | Nvidia Corporation | Apparatus, system, and method for delivering data to multiple memory clients via a unitary buffer |
US7437375B2 (en) | 2004-08-17 | 2008-10-14 | Symantec Operating Corporation | System and method for communicating file system events using a publish-subscribe model |
US20060041593A1 (en) * | 2004-08-17 | 2006-02-23 | Veritas Operating Corporation | System and method for communicating file system events using a publish-subscribe model |
US20080154732A1 (en) * | 2004-08-23 | 2008-06-26 | Thomas Whittaker | Method, System, and Computer Program Product for Offline Advertisement Servicing and Cycling |
US8145728B2 (en) | 2004-08-23 | 2012-03-27 | Ianywhere Solutions, Inc. | Method, system, and computer program product for offline advertisement servicing and cycling |
US8135803B2 (en) | 2004-08-23 | 2012-03-13 | Ianywhere Solutions, Inc. | Method, system, and computer program product for offline advertisement servicing and cycling |
US20060041638A1 (en) * | 2004-08-23 | 2006-02-23 | Ianywhere Solutions, Inc. | Method, system, and computer program product for offline advertisement servicing and cycling |
US20060059171A1 (en) * | 2004-08-25 | 2006-03-16 | Dhrubajyoti Borthakur | System and method for chunk-based indexing of file system content |
US7487138B2 (en) | 2004-08-25 | 2009-02-03 | Symantec Operating Corporation | System and method for chunk-based indexing of file system content |
US20060075019A1 (en) * | 2004-09-17 | 2006-04-06 | About, Inc. | Method and system for providing content to users based on frequency of interaction |
US10296521B2 (en) | 2004-09-17 | 2019-05-21 | About, Inc. | Method and system for providing content to users based on frequency of interaction |
US9143572B2 (en) | 2004-09-17 | 2015-09-22 | About, Inc. | Method and system for providing content to users based on frequency of interaction |
US20060064470A1 (en) * | 2004-09-23 | 2006-03-23 | Sargent Antony J | Method, system, and computer program product for improved synchronization efficiency for mobile devices, including database hashing and caching of web access errors |
US7630974B2 (en) | 2004-09-28 | 2009-12-08 | Oracle International Corporation | Multi-language support for enterprise identity and access management |
US20060074912A1 (en) * | 2004-09-28 | 2006-04-06 | Veritas Operating Corporation | System and method for determining file system content relevance |
US7831642B1 (en) * | 2004-09-30 | 2010-11-09 | Symantec Operating Corporation | Page cache management for a shared file |
US8015236B2 (en) * | 2005-10-25 | 2011-09-06 | Waratek Pty. Ltd. | Replication of objects having non-primitive fields, especially addresses |
US20070126750A1 (en) * | 2005-10-25 | 2007-06-07 | Holt John M | Replication of object graphs |
USRE45729E1 (en) * | 2005-12-12 | 2015-10-06 | Electronics And Telecommunications Research Institute | Apparatus and method for managing application context |
US10664478B2 (en) * | 2005-12-29 | 2020-05-26 | Amazon Technologies, Inc. | Method and apparatus for stress management in a searchable data service |
US20140324881A1 (en) * | 2005-12-29 | 2014-10-30 | Amazon Technologies, Inc. | Method and apparatus for stress management in a searchable data service |
US20070162581A1 (en) * | 2006-01-11 | 2007-07-12 | Oracle International Corporation | Using identity/resource profile and directory enablers to support identity management |
US8688813B2 (en) | 2006-01-11 | 2014-04-01 | Oracle International Corporation | Using identity/resource profile and directory enablers to support identity management |
US9674180B2 (en) | 2006-01-11 | 2017-06-06 | Oracle International Corporation | Using identity/resource profile and directory enablers to support identity management |
US20110087750A1 (en) * | 2006-05-30 | 2011-04-14 | Microsoft Corporation | Resource Locators for Widely Distributed Systems |
US7882095B2 (en) | 2006-05-30 | 2011-02-01 | Microsoft Corporation | Resource locators for widely distributed systems |
US20070282847A1 (en) * | 2006-05-30 | 2007-12-06 | Microsoft Corporation | Resource Locators for Widely Distributed Systems |
US20080005528A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, Systems, and Computer Program Products for Using a Structured Data Storage System to Provide Access to Addressable Entities in Virtual Address Space |
US20080005752A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for generating application processes by linking applications |
US20080005529A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, Systems, and Computer Program Products for Providing Access to Addressable Entities Using a Non-Sequential Virtual Address Space |
US20080005727A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for enabling cross language access to an addressable entity |
US20080005719A1 (en) * | 2006-06-30 | 2008-01-03 | Morris Robert P | Methods, systems, and computer program products for providing a program execution environment |
US20080005728A1 (en) * | 2006-06-30 | 2008-01-03 | Robert Paul Morris | Methods, systems, and computer program products for enabling cross language access to an addressable entity in an execution environment |
US20080127220A1 (en) * | 2006-06-30 | 2008-05-29 | Robert Paul Morris | Methods, systems, and computer program products for creating an input-value-specific loadable instance of an application |
US20080082533A1 (en) * | 2006-09-28 | 2008-04-03 | Tak Fung Wang | Persistent locks/resources for concurrency control |
WO2008045740A3 (en) * | 2006-10-06 | 2008-09-25 | Okralabs Llc | Method and system for using a distributable virtual address space |
US20080086620A1 (en) * | 2006-10-06 | 2008-04-10 | Morris Robert P | Method and system for using a distributable virtual address space |
US7734890B2 (en) * | 2006-10-06 | 2010-06-08 | Okralabs Llc | Method and system for using a distributable virtual address space |
WO2008045740A2 (en) * | 2006-10-06 | 2008-04-17 | Okralabs Llc | Method and system for using a distributable virtual address space |
US20080141064A1 (en) * | 2006-12-11 | 2008-06-12 | International Business Machines Corporation | System and methods for on-demand document provisioning using ad hoc networking |
US7860491B2 (en) | 2006-12-11 | 2010-12-28 | International Business Machines Corporation | System and methods for on-demand document provisioning using ad hoc networking |
US8032528B2 (en) | 2007-01-12 | 2011-10-04 | About Inc. | Method and system for managing content submission and publication of content |
US20080172446A1 (en) * | 2007-01-12 | 2008-07-17 | About, Inc. | Method and system for managing content submission and publication of content |
US20080295110A1 (en) * | 2007-05-23 | 2008-11-27 | Fabrizio Muscarella | Framework for Startup of Local Instance of Remote Application |
US20080320282A1 (en) * | 2007-06-22 | 2008-12-25 | Morris Robert P | Method And Systems For Providing Transaction Support For Executable Program Components |
US20080320459A1 (en) * | 2007-06-22 | 2008-12-25 | Morris Robert P | Method And Systems For Providing Concurrency Control For Addressable Entities |
US8805950B1 (en) * | 2007-09-12 | 2014-08-12 | Aol Inc. | Client web cache |
US20090098620A1 (en) * | 2007-10-16 | 2009-04-16 | Shiu Nan Chen | Production method for solid Cultured active mushroom mycelium and fruit-body metabolites (AMFM) products thereof |
US8493888B2 (en) * | 2007-11-08 | 2013-07-23 | Nokia Corporation | Connectivity architecture for service discovery |
US20100260067A1 (en) * | 2007-11-08 | 2010-10-14 | Nokia Corporation | Connectivity architecture for service discovery |
US20110208737A1 (en) * | 2008-05-19 | 2011-08-25 | Technion Research & Development Foundation Ltd. | Apparatus and method for incremental physical data clustering |
US9058373B2 (en) | 2008-05-19 | 2015-06-16 | Technion Research & Development Foundation Limited | Apparatus and method for incremental physical data clustering |
US8572085B2 (en) | 2008-05-19 | 2013-10-29 | Technion Research & Development Foundation Limited | Apparatus and method for incremental physical data clustering |
US20110099205A1 (en) * | 2008-06-20 | 2011-04-28 | Technion Research & Development Foundation Ltd. | Incremental clustering of indexed xml data |
US8930407B2 (en) * | 2008-06-20 | 2015-01-06 | Technion Research & Development Foundation Limited | Incremental clustering of indexed XML data |
US9705960B2 (en) | 2008-09-04 | 2017-07-11 | Alibaba Group Holding Limited | Method, device, and system for acquiring a web page |
US20100057847A1 (en) * | 2008-09-04 | 2010-03-04 | Alibaba Group Holding Limited | Method, Device, and system for acquiring a web page |
US8499033B2 (en) | 2008-09-04 | 2013-07-30 | Alibaba Group Holding Limited | Method, device, and system for acquiring a web page |
US20100157358A1 (en) * | 2008-12-23 | 2010-06-24 | Nenad Rijavec | Distributed Global Object Cache |
US8314949B2 (en) | 2008-12-23 | 2012-11-20 | Infoprint Solutions Company Llc | Distributed global object cache |
US20100186011A1 (en) * | 2009-01-20 | 2010-07-22 | Oracle International Corporation | Methods and systems for implementing transcendent page caching |
US20100185817A1 (en) * | 2009-01-20 | 2010-07-22 | Oracle International Corporation | Methods and Systems for Implementing Transcendent Page Caching |
US9519585B2 (en) | 2009-01-20 | 2016-12-13 | Oracle International Corporation | Methods and systems for implementing transcendent page caching |
US9087021B2 (en) | 2009-01-20 | 2015-07-21 | Oracle International Corporation | Peer-to-peer transcendent memory |
US8769205B2 (en) | 2009-01-20 | 2014-07-01 | Oracle International Corporation | Methods and systems for implementing transcendent page caching |
US8769206B2 (en) | 2009-01-20 | 2014-07-01 | Oracle International Corporation | Methods and systems for implementing transcendent page caching |
US8973004B2 (en) | 2009-06-26 | 2015-03-03 | Oracle America, Inc. | Transactional locking with read-write locks in transactional memory systems |
US8302105B2 (en) * | 2009-06-26 | 2012-10-30 | Oracle America, Inc. | Bulk synchronization in transactional memory systems |
US20100333096A1 (en) * | 2009-06-26 | 2010-12-30 | David Dice | Transactional Locking with Read-Write Locks in Transactional Memory Systems |
US20100333095A1 (en) * | 2009-06-26 | 2010-12-30 | Shavit Nir N | Bulk Synchronization in Transactional Memory Systems |
US20110106778A1 (en) * | 2009-11-05 | 2011-05-05 | Oracle International Corporation | Lock manager on disk |
US8510334B2 (en) | 2009-11-05 | 2013-08-13 | Oracle International Corporation | Lock manager on disk |
US8607004B2 (en) * | 2009-11-13 | 2013-12-10 | Richard S. Anderson | Distributed symmetric multiprocessing computing architecture |
US20110125974A1 (en) * | 2009-11-13 | 2011-05-26 | Anderson Richard S | Distributed symmetric multiprocessing computing architecture |
US20110231481A1 (en) * | 2010-03-16 | 2011-09-22 | Saleforce.com, inc. | System, method and computer program product for communicating data between a database and a cache |
US9111006B2 (en) * | 2010-03-16 | 2015-08-18 | Salesforce.Com, Inc. | System, method and computer program product for communicating data between a database and a cache |
US9251152B1 (en) * | 2010-09-15 | 2016-02-02 | Symantec Corporation | Efficient method for relocating shared memory |
US8706701B1 (en) * | 2010-11-18 | 2014-04-22 | Emc Corporation | Scalable cloud file system with efficient integrity checks |
US8775755B2 (en) * | 2011-02-25 | 2014-07-08 | Oracle International Corporation | Peer-to-peer transcendent memory |
US20120222052A1 (en) * | 2011-02-25 | 2012-08-30 | Oracle International Corporation | Peer-to-peer transcendent memory |
US8805672B2 (en) | 2011-06-30 | 2014-08-12 | International Business Machines Corporation | Translation cache prediction |
US9547665B2 (en) | 2011-10-27 | 2017-01-17 | Microsoft Technology Licensing, Llc | Techniques to determine network storage for sharing media files |
US10733151B2 (en) | 2011-10-27 | 2020-08-04 | Microsoft Technology Licensing, Llc | Techniques to share media files |
US9087020B1 (en) * | 2012-07-05 | 2015-07-21 | A9.Com, Inc. | Managing and retrieving content from a shared storage |
US10235451B2 (en) | 2012-12-18 | 2019-03-19 | Empire Technology Development Llc | Data caching based on social characteristics of users |
US20140280669A1 (en) * | 2013-03-15 | 2014-09-18 | Microsoft Corporation | Memory Sharing Over A Network |
US9880861B2 (en) * | 2013-06-05 | 2018-01-30 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for page view switching |
US20140365960A1 (en) * | 2013-06-05 | 2014-12-11 | Tencent Technology (Shenzhen) Company Limited | Method and apparatus for page view switching |
US9369406B2 (en) * | 2014-07-03 | 2016-06-14 | Sas Institute Inc. | Resource server providing a rapidly changing resource |
US20160248693A1 (en) * | 2014-07-03 | 2016-08-25 | Sas Institute Inc. | Resource server providing a rapidly changing resource |
US9654586B2 (en) * | 2014-07-03 | 2017-05-16 | Sas Institute Inc. | Resource server providing a rapidly changing resource |
US10366137B2 (en) | 2014-08-15 | 2019-07-30 | Interdigital Patent Holdings, Inc. | Methods and apparatus for content delivery via browser cache extension |
WO2016025267A1 (en) * | 2014-08-15 | 2016-02-18 | Interdigital Patent Holdings, Inc. | Methods and apparatus for content delivery via browser cache extension |
US10754767B2 (en) | 2015-05-19 | 2020-08-25 | Guangzhou Ucweb Computer Technology Co., Ltd. | Method and apparatus for loading a resource in a web page on a device |
US11070608B2 (en) * | 2015-06-17 | 2021-07-20 | Fastly, Inc. | Expedited sub-resource loading |
US11445005B2 (en) | 2015-06-17 | 2022-09-13 | Fastly, Inc. | Expedited sub-resource loading |
US20160373544A1 (en) * | 2015-06-17 | 2016-12-22 | Fastly, Inc. | Expedited sub-resource loading |
US11451441B2 (en) * | 2016-01-12 | 2022-09-20 | Fastly, Inc. | Management of edge dictionary containers in content nodes of a content delivery network |
US11323535B2 (en) | 2016-03-01 | 2022-05-03 | Fastly, Inc. | Management of edge dictionaries in a content delivery network |
US20170286445A1 (en) * | 2016-03-29 | 2017-10-05 | Red Hat, Inc. | Migrating lock data within a distributed file system |
US10866930B2 (en) * | 2016-03-29 | 2020-12-15 | Red Hat, Inc. | Migrating lock data within a distributed file system |
WO2018007828A3 (en) * | 2016-07-08 | 2018-02-15 | Kalypton International Limited | Distributed transaction processing and authentication system |
US10635828B2 (en) | 2016-09-23 | 2020-04-28 | Microsoft Technology Licensing, Llc | Tokenized links with granular permissions |
US10459810B2 (en) | 2017-07-06 | 2019-10-29 | Oracle International Corporation | Technique for higher availability in a multi-node system using replicated lock information to determine a set of data blocks for recovery |
US11809888B2 (en) * | 2019-04-29 | 2023-11-07 | Red Hat, Inc. | Virtual machine memory migration facilitated by persistent memory devices |
US10802973B1 (en) | 2019-07-01 | 2020-10-13 | Bank Of America Corporation | Data access tool |
US20220083621A1 (en) * | 2020-09-12 | 2022-03-17 | HCL America, Inc. | Method and system for component level data management in web applications |
US11762940B2 (en) * | 2020-09-12 | 2023-09-19 | HCL America Inc. | Component level data management and state change detection in web applications for data loss protection |
Also Published As
Publication number | Publication date |
---|---|
WO1998022891A1 (en) | 1998-05-28 |
AU7303498A (en) | 1998-06-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6026474A (en) | Shared client-side web caching using globally addressable memory | |
US5918229A (en) | Structured data storage using globally addressable memory | |
US5987506A (en) | Remote access and geographically distributed computers in a globally addressable storage environment | |
EP1008047B1 (en) | System for providing highly available data storage using globally addressable memory | |
EP0976065B1 (en) | Dynamic directory service | |
Gifford et al. | The Cedar file system | |
US6938039B1 (en) | Concurrent file across at a target file server during migration of file systems between file servers using a network file system access protocol | |
US6697846B1 (en) | Shared file system | |
US6029168A (en) | Decentralized file mapping in a striped network file system in a distributed computing environment | |
WO1998022881A9 (en) | Remote access in a globally addressable storage environment | |
US7676526B1 (en) | System, method and computer program product for multi-level file-sharing by concurrent users | |
US20040122917A1 (en) | Distributed storage system for data-sharing among client computers running defferent operating system types | |
WO2008001094A1 (en) | Data processing | |
Roy | Unix File Access and Caching in a Multicomputer Environment1 | |
WO1998022890A1 (en) | System for tracking data | |
Dechamboux et al. | The Arias distributed shared memory: An overview | |
BRIEF | I. THE PATENTS-IN-SUIT | |
Khalidi et al. | Spring File System, The | |
Yih et al. | Persistent immutable shared abstractions | |
Panadiwal | High Performance and Reliable Disk and Basic File Services for a Distributed Environment | |
Scott | An FFS-based object store supporting class fragmentation | |
Susarla et al. | Experience using a globally shared state abstraction to support distributed applications | |
Khalidi et al. | Experience Building a File System on a Highly Modular Operating System | |
Dyade | The Arias Distributed Shared Memory: an Overview | |
Khalidi et al. | For more information about USENIX Association contact |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: MANGOSOFT CORPORATION, MASSACHUSETTSFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CARTER, JOHN B.;DAVIS, SCOTT H.;DIETTERICH, DANIEL J.;AND OTHERS;REEL/FRAME:008799/0903;SIGNING DATES FROM 19970711 TO 19971030 |
|
AS | Assignment |
Owner name: IMPERIAL BANK, CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:009277/0209Effective date: 19980528 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
REFU | Refund |
Free format text: REFUND - SURCHARGE, PETITION TO ACCEPT PYMT AFTER EXP, UNINTENTIONAL (ORIGINAL EVENT CODE: R2551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
SULP | Surcharge for late payment | ||
AS | Assignment |
Owner name: MANGOSOFT INTELLECTUAL PROPERTY, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:018247/0438Effective date: 20060911 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO SMALL (ORIGINAL EVENT CODE: LTOS); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: MANGOSOFT CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:COMERCIA BANK, A TEXAS BANKING ASSOCIATION, SUCCESSOR IN INTEREST TO IMPERIAL BANK;REEL/FRAME:028083/0471Effective date: 20120416 |
|
AS | Assignment |
Owner name: MANGOSOFT INTELLECTUAL PROPERTY, INC., NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT CORPORATION;REEL/FRAME:028089/0846Effective date: 20120423 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MANGOSOFT INTELLECTUAL PROPERTY INC.;REEL/FRAME:028687/0383Effective date: 20120501 |
|
FEPP | Fee payment procedure |
Free format text: PAT HOLDER NO LONGER CLAIMS SMALL ENTITY STATUS, ENTITY STATUS SET TO UNDISCOUNTED (ORIGINAL EVENT CODE: STOL); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044695/0115Effective date: 20170929 |