US6665705B1 - Method and apparatus for proxy replication - Google Patents
Method and apparatus for proxy replication Download PDFInfo
- Publication number
- US6665705B1 US6665705B1 US09/420,473 US42047399A US6665705B1 US 6665705 B1 US6665705 B1 US 6665705B1 US 42047399 A US42047399 A US 42047399A US 6665705 B1 US6665705 B1 US 6665705B1
- Authority
- US
- United States
- Prior art keywords
- proxy
- requests
- responsive
- server
- primary
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Lifetime
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/01—Protocols
- H04L67/10—Protocols in which an application is distributed across nodes in the network
- H04L67/1095—Replication or mirroring of data, e.g. scheduling or transport for data synchronisation between network nodes
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/2866—Architectures; Arrangements
- H04L67/2885—Hierarchically arranged intermediate devices, e.g. for hierarchical caching
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L67/00—Network arrangements or protocols for supporting network services or applications
- H04L67/50—Network services
- H04L67/56—Provisioning of proxy services
- H04L67/568—Storing data temporarily at an intermediate stage, e.g. caching
- H04L67/5682—Policies or rules for updating, deleting or replacing the stored data
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L9/00—Cryptographic mechanisms or cryptographic arrangements for secret or secure communications; Network security protocols
- H04L9/40—Network security protocols
Definitions
- the present invention is related to application entitled METHOD AND APPARATUS FOR SCALING UNIVERSAL PLUG AND PLAY NETWORKS USING ATOMIC PROXY REPLICATION, Ser. No. 09/420,700, now U.S. Pat. No. 6,571,277; which are filed even date hereof, assigned to the same assignee, and incorporated herein by reference.
- the present invention relates generally to an improved distributed data processing system and in particular to a method and apparatus for providing plug and play services in a distributed data processing system. Still more particularly, the present invention provides a method and apparatus for scaling proxy servers providing plug and play services in a distributed data processing system.
- Plug and play in personal computers was brought about by a cooperative multiple-vendor effort to improve the personal computer platform by delivering a zero configuration peripheral connectivity.
- Such a system was first introduced in Microsoft Windows 95, which was offered by Microsoft Corporation.
- Universal plug and play (UPnP) is intended to bring zero-configuration features from plug and play to networks.
- Universal plug and play reuses existing protocols in technology, such as Internet Protocol (IP).
- IP Internet Protocol
- the standards used in universal plug and play are open Internet standards.
- UPnP includes a service discovery mechanism to support spontaneous networking. In other words, devices and software services dynamically avail themselves to the network.
- UPnP network topologies include three categories of network entities. These three categories are services, proxies, and clients. Services may be hardware or software based services. Proxies work like a registry of services that are available. Clients include any network entity, which requires a service.
- the protocol used in UPnP to perform service look up and discovery is Simple Service Discovery Protocol (SSDP).
- SSDP Simple Service Discovery Protocol
- SSDP services announce themselves to the network via ssdp:alive messages.
- the ssdp:alive message defines the service type, unique service name (i.e. uuid), location(s) of the service via universal resource identifiers (URIs), and caching information (i.e. max-age).
- SSDP proxies monitor ssdp:alive messages on the reserved SSDP multicast channel.
- Multicast is a mechanism for sending a single message to multiple recipients. Universal plug and play involves the use of multicast domain name system (DNS) requests. These types of requests allow a machine to see requests for its name and respond to the requests. Multicast DNS is used when a DNS server is unavailable.
- DNS domain name system
- a network cache can be regarded as a dynamic database supporting the service listing facility conveyed by the SSDP proxy.
- SSDP proxies are also SSDP service in that they must first announce their presence on the network and attempt to discover an existing proxy. If a proxy is detected, a proxy election algorithm is applied to resolve the new primary proxy. According to the current SSDP specification, there can be only one primary proxy on any UPnP network.
- UPnP clients must discover the primary proxy in order to use it. Clients use the same mechanism to discover a primary proxy as they use to discover any other service. Clients use the primary proxy to discover the set of services it requires. Clients leverage SSDP search and subscribe messages to locate and monitor services.
- SSDP leverages the Internet group management protocol for IP multicast support.
- Internet Group Management Protocol (IGMP) messages are not forwarded to multiple multicast routers, thus bounding UPnP networks to a single subnet. More information on IGMP may be found in rfc 2236 at http://www.ietf.org maintained by the Internet Engineering Task Force (IETF).
- IETF Internet Engineering Task Force
- UPnP networks support only a single primary proxy per subnet. All other viable proxies behave as “aproxies” sitting idle on the network until such time, as the primary proxy is no longer available. A primary proxy can become unavailable due to network failures, being overrun with client requests, hardware failure, or when the proxy sends an ssdp:byebye message.
- Proxy unavailable is detected like any other service's unavailability when it no longer issues ssdp:alive messages.
- the primary proxy expires the UPnP network reconfigures itself by electing a new proxy from the set of idle “aproxies”. The aproxies challenge one another until a dominant proxy is resolved as the primary proxy. Proxies which failed to satisfy all challenges resume the role of aproxy.
- a newly elected primary proxy must determine the set of services that are available on the network, by issuing a ssdp:notproxyaware SEARCH message. After receiving the ssdp:notproxyaware SEARCH message, services respond with ssdp:alive messages, such that the new primary proxy may initialize its cache. Clients reissue ssdp:discovery and subscribe requests to the newly elected proxy in order to monitor relevant services, all clients must then discover the proxy in which to access services.
- the present invention provides a method in a distributed data processing system for providing proxy services. Requests are processed by a primary proxy, using a shared memory in the distributed data processing system. A challenge from a secondary proxy to the primary proxy is detected. A determination is made as to whether the secondary proxy has priority over the primary proxy. This may be determined using priorities assigned to the proxies. Responsive to determining whether the secondary proxy has priority over the primary proxy, a priority of the secondary proxy is stored. Responsive to the secondary proxy having priority over the primary proxy, the secondary proxy to is allowed access the shared memory. Further, the secondary proxy is then allowed to multi-cast a message to clients indicating the secondary proxy's location. This message indicates that the secondary proxy is now the primary proxy.
- requests are cached by the secondary proxy. These are requests that are processed by the primary proxy. These processed requests are stored by the primary proxy in the shared memory The secondary proxy monitors to see if the secondary proxy is selected to become the primary proxy. Responsive to the secondary proxy being selected to become the primary proxy, the new primary proxy compares cached requests with processed requests in the shared memory to identified unprocessed requests. Requests identified as being unprocessed requests are serviced.
- FIG. 1 depicts a pictorial representation of a distributed data processing system in which the present invention may be implemented
- FIG. 2 is a block diagram depicting a data processing system that may be implemented as a server depicted in accordance with a preferred embodiment of the present invention
- FIG. 3 is a block diagram of components in a server depicted in accordance with a preferred embodiment of the present invention.
- FIG. 4 is a block diagram of a network cache depicted in accordance with a preferred embodiment of the present invention.
- FIG. 5 is a flowchart of a process used by proxies depicted in accordance with a preferred embodiment of the present invention.
- FIG. 6 is a flowchart of a process in an asynchronous prioritized proxy election service (APPES) for handling challenges and proxy failures depicted in accordance with a preferred embodiment of the present invention
- APPES asynchronous prioritized proxy election service
- FIG. 7 is a flowchart of a process for resolving a challenge by an aproxy depicted in accordance with a preferred embodiment of the present invention.
- FIG. 8 is a flowchart of a process used to monitor for failure of a proxy depicted in accordance with a preferred embodiment of the present invention.
- FIG. 9 is a flowchart of a process for resolving a proxy failure depicted in accordance with a preferred embodiment of the present invention.
- FIG. 10 is a flowchart of a process followed by an aproxy depicted in accordance with a preferred embodiment of the present invention.
- FIG. 11 is a flowchart of a process for processing a request for a service from a client depicted in accordance with a preferred embodiment of the present invention
- FIG. 12 is a flowchart of a process for registering services depicted in accordance with a preferred embodiment of the present invention.
- FIG. 13 is a flowchart of a process for managing registered services depicted in accordance with a preferred embodiment of the present invention.
- FIG. 15 is a flowchart of a process for scaling a universal plug and play network through atomic proxy replication depicted in accordance with a preferred embodiment of the present invention.
- FIG. 1 depicts a pictorial representation of a distributed data processing system in which the present invention may be implemented.
- Distributed data processing system 100 is a network of computers in which the present invention may be implemented.
- Distributed data processing system 100 contains a network 102 , which is the medium used to provide communications links between various devices and computers connected together within distributed data processing system 100 .
- Network 102 may include permanent connections, such as wire or fiber optic cables, or temporary connections made through telephone connections.
- Clients 108 , 110 , and 112 are clients to server 104 .
- Distributed data processing system 100 may include additional servers, clients, and other devices not shown.
- distributed data processing system 100 is the Internet with network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- network 102 representing a worldwide collection of networks and gateways that use the TCP/IP suite of protocols to communicate with one another.
- At the heart of the Internet is a backbone of high-speed data communication lines between major nodes or host computers, consisting of thousands of commercial, government, educational and other computer systems that route data and messages.
- distributed data processing system 100 also may be implemented as a number of different types of networks, such as for example, an intranet, a local area network (LAN), or a wide area network (WAN).
- FIG. 1 is intended as an example, and not as an architectural limitation for the present invention.
- FIG. 2 a block diagram depicts a data processing system that may be implemented as a server, such as server 104 in FIG. 1, in accordance with a preferred embodiment of the present invention.
- data processing system 200 may function both as a proxy or as an aproxy in these examples. Additional data processing system 200 may implement or house a service.
- Data processing system 200 may be a symmetric multiprocessor (SMP) system including a plurality of processors 202 and 204 connected to system bus 206 . Alternatively, a single processor system may be employed.
- SMP symmetric multiprocessor
- memory controller/cache 208 Also connected to system bus 206 is memory controller/cache 208 , which provides an interface to local memory 209 .
- I/O bus bridge 210 is connected to system bus 206 and provides an interface to I/O bus 212 . Memory controller/cache 208 and I/O bus bridge 210 may be integrated as depicted.
- Peripheral component interconnect (PCI) bus bridge 214 connected to I/O bus 212 provides an interface to PCI local bus 216 .
- PCI bus 216 A number of modems may be connected to PCI bus 216 .
- Typical PCI bus implementations will support four PCI expansion slots or add-in connectors.
- Communications links to network computers 108 - 112 in FIG. 1 may be provided through modem 218 and network adapter 220 connected to PCI local bus 216 through add-in boards.
- Additional PCI bus bridges 222 and 224 provide interfaces for additional PCI buses 226 and 228 , from which additional modems or network adapters may be supported. In this manner, data processing system 200 allows connections to multiple network computers.
- a memory-mapped graphics adapter 230 and hard disk 232 may also be connected to I/O bus 212 as depicted, either directly or indirectly.
- FIG. 2 may vary.
- other peripheral devices such as optical disk drives and the like, also may be used in addition to or in place of the hardware depicted.
- the depicted example is not meant to imply architectural limitations with respect to the present invention.
- the data processing system depicted in FIG. 2 may be, for example, an IBM RISC/System 6000 system, a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- IBM RISC/System 6000 system a product of International Business Machines Corporation in Armonk, N.Y., running the Advanced Interactive Executive (AIX) operating system.
- AIX Advanced Interactive Executive
- the present invention provides a method, apparatus, and computer implemented instructions for providing proxies in a distributed data processing system.
- the mechanism of the present invention may be triggered by the failure of a primary proxy. This failure induces an atomic replication of the failed primary proxy with a secondary proxy also called an aproxy. This replication is performed in a manner such that the transition is transparent to services and clients.
- the present invention provides a mechanism in which multiple proxies may be provided to service requests and appear as a single proxy to the clients and services. This mechanism includes time slicing in which the proxies providing the service all use the same unique service name (USN) with different locations. The time slicing or transitioning of proxies as a primary proxy is implemented in the examples using the proxy replication mechanism for a failed proxy.
- USN unique service name
- server 300 may either be a proxy or an aproxy.
- Each server includes a TCT/IP layer 302 , which is used to communicate across a network, such as network 102 in FIG. 1 .
- Proxy services 304 is used to provide proxy services to respond to request from clients and to identify and list services.
- Asynchronous priority prioritized proxy election service (APPES) 306 is found in each server and provides processes to handle challenges by new aproxy servers entering a network. When APPES 306 is located in the proxy, as opposed to an aproxy, the APPES is active. When located in an aproxy, APPES 306 is idle and will perform offline caching of SSDP challenges.
- APPES 306 is implemented as a SSDP service residing on the same system as a SSDP proxy service.
- proxy election is shared between distributed proxies and aproxies in these examples.
- APPES 306 when located in the current proxy is responsible for responding to challenges by aproxies attempting to join the UPnP network. This service is responsible for employing a proxy election algorithm when aproxies come online and resolving proxy priorities.
- Network cache 400 is a shared memory system that may be accessed by different servers that become proxy servers. In this manner, creation of a new cache and requiring clients and services to reregister is avoided because a new proxy server may take over the network cache 400 from a prior proxy server.
- Network cache 400 includes a shared memory 402 and a monitor 404 .
- Shared memory 402 may take various forms depending on the implementation. For example, without limitation, shared memory 402 may be in the form of hard disk drives, random access memory, or a combination of the two.
- Monitor 404 serves to provide access to the proxy while blocking access to aproxies. Monitor 404 also provides the primary APPES read/write access while all other APPES services have read-only access.
- Proxy precedence vector 406 represents the aggregation of each proxies respective priority.
- Primary APPES 306 in FIG. 3 generates a unique proxy rank for registered proxies, and updates cached proxy precedence vector 406 to reflect the relative priority of the registered proxies.
- Proxy precedence vector 406 alleviates the need for further proxy challenges by maintaining a logical representation of proxy precedence.
- APPES 306 in FIG. 3 persists proxy precedence vector 406 in network cache 400 , as opposed to a local cache, to circumvent a single point of failure condition, when the primary proxy fails.
- network cache 400 also includes service information 408 and client subscription information 410 .
- Service information 408 contains information about services registered with the proxy. This information is returned to clients in response to requests for services registered with the proxy.
- Client subscription information 410 contains information about clients registered with the proxy. This information may be used to send messages to clients. For example, if a set of clients request a service that is unavailable, these clients may be registered in the client subscription information such that they are sent a multicast message when the service becomes available.
- the primary proxy stores processed requests in network cache 400 .
- Services issue ssdp:alive messages to announce their presence to the network. These ssdp:alive messages are retransmitted intermittently as an indicator that the service has not expired.
- ssdp:alive messages are retransmitted intermittently as an indicator that the service has not expired.
- a service entry is cached which persists the data contained in the ssdp:alive message.
- the cached service entry located in shared memory 402 stores the service type, unique service name, location, alternate locations, and expiration time. The expiration time indicates the time in which the service will be considered expired, barring the reception of a subsequent ssdp:alive message.
- all proxies have a consistent view of time to facilitate atomic replication.
- service expiration is detected by the new primary proxy using a network time service, which provides a consistent view of time to aproxies.
- the network time service may be implemented using various standard time protocols, such as, for example, the network time protocol and Internet clock service.
- Client ssdp:discovery request messages are processed by the proxy.
- the proxy returns ssdp:alive messages on behalf of the requested service when the client subscribes to the discovered service.
- the content of the ssdp:alive message is formatted from the cached service entry.
- the client request is cached, to indicate successful completion of the client ssdp:discovery request.
- the cached request indicates that the primary proxy has successfully processed the request.
- subscribe messages received from a client indicate an interest by the client in receiving service heart beats for a specified service type. These requests are stored in the network cache as client information.
- aproxies no longer sit idle on the network while the primary proxy service requests.
- Aproxies cache all client and service SSDP httpmu (i.e. multicast) messages.
- Aproxies remove locally cached entries which are successfully processed by the proxy. When all aproxies remove the request from their local cache, the network cache entry is removed as well. This data redundancy allows a newly elected proxy to respond to client requests and service updates that were issued prior to the proxy election process.
- proxy election occurs.
- proxy succession is resolved by removing the proxy entry from the new proxy, which is reelected or selected using the proxy precedence vector.
- the newly anointed primary proxy assumes the cached unique service name as its own, and issues a ssdp:alive message where the alternate location header indicates the new primary proxy's universal resource identifier (URI), http: ⁇ primary.proxy2.ibm.com.
- URI universal resource identifier
- SSDP Secure Digital Protocol
- services are uniquely identified by their unique service name, thus the URI may change for the same service.
- This feature allows SSDP services to provide multiple access methods, such as, for example, HTTP and FTP.
- the generation of a new unique service name implies that the proxy cache is not consistent and forces clients and services to reissue ssdp:discover subscribe requests, and ssdp:alive announcements. After completion of this stage, the original proxy has been successfully replicated atomically.
- the final stage of processing is to maintain consistency in the network.
- requests may have been issued by services and clients. All functional aproxies cached these requests as mentioned above.
- services may have issued ssdp:alive or ssdp:byebye messages, services may have expired, clients may have issued ssdp:discover requests, etc.
- the new proxy will process requests, which represent the difference between the local cache and network cache. This feature negates the need for clients and services to reissue any messages, due to a proxy failure.
- the network cache is updated. This update reelects the fact that all outstanding requests have been processed. This update after a proxy failure results in the remaining aproxies removing the corresponding entries from their local cache's.
- FIG. 5 a flowchart of a process used by proxies is depicted in accordance with a preferred embodiment of the present invention.
- the process in FIG. 5 illustrates the initialization of the service as well as the process used after a first proxy has been selected.
- the process begins with a first server issuing a primary proxy challenge (step 500 ). Thereafter, an asynchronous prioritized proxy election service (APPES) is initiated (step 502 ). APPES is used to handle challenges by new aproxies joining the network. Further, APPES also records priorities of each of the servers. In the depicted examples, these priorities are recorded in a vector containing the priority of the server, location, and internal USN.
- the first aproxy issuing the primary proxy challenge wins the contest (step 504 ). This always occurs when the network is initialized because the aproxy is the first one to join. Thereafter, the aproxy becomes the proxy and issues a heartbeat (step 506 ). The proxy generates a heartbeat by multicasting a message including the proxy's unique service name and location (i.e. IP address or URI).
- the proxy receives and processes requests (step 508 ).
- the processed requests are logged (step 510 ) with the process then returning to step 506 as described above.
- FIG. 6 a flowchart of a process in an asynchronous prioritized proxy election service (APPES) for handling challenges and proxy failures is depicted in accordance with a preferred embodiment of the present invention.
- APPES asynchronous prioritized proxy election service
- the process begins with a determination as to whether a new aproxy has joined the network (step 600 ). If a new aproxy has joined the network, a challenge by the aproxy is resolved (step 602 ) with the process returning to step 600 thereafter.
- the APPES will resolve the challenge between the aproxy and the proxy. Step 602 is described in more detail below in FIG. 7 .
- a determination is made as to whether a proxy failure has occurred (step 604 ). This determination is made in these examples by monitoring the “heartbeat” of the proxy. The heartbeat is generated using messages that are periodically multicast by the proxy. This monitoring is performed by a monitor, such as monitor 404 in FIG. 4 . If a proxy failure has occurred, the failure is resolved (step 606 ). Step 606 is described in more detail below in FIG. 9 . The resolution is performed by the monitor includes selecting the new proxy. After resolution of the failure the process returns to step 600 as described above. If a proxy failure is absent, the process also proceeds to step 600 .
- FIG. 7 a flowchart of a process for resolving a challenge by an aproxy is depicted in accordance with a preferred embodiment of the present invention. This process is tightly coupled to the network cache and is handled by the APPES, which is distributed in all servers in these examples.
- the process begins by identifying the challenge from the aproxy (step 700 ). This identification includes identifying the priority and USN of the aproxy. In these examples, the priority is a number between from 0.0 to 1.0. Of course other ranking schemes may be used depending on the implementation.
- a determination is made as to whether the priority of the aproxy is greater than the priority of the primary proxy (step 702 ). If the priority of the aproxy is greater than the proxy, the aproxy becomes the proxy (step 704 ). If both priorities are equivalent a byte comparison of the unique service names for the aproxy and the proxy determines the winner. The unique name service byte comparison, guarantees only one winner.
- the precedence vector is updated (step 706 ) with the process terminating thereafter.
- the update in step 706 records the priority of the new server as well as identification information of the new server. This identification information includes the unique service name and location of the server.
- the unique service name is used by the monitor to identify the calling aproxy.
- the proxy is not replaced and the process proceeds directly to step 706 as described above unless the unique service name has a greater byte value than the current proxy.
- the unique service names are compared only when the priorities are equal.
- FIG. 8 a flowchart of a process used to monitor for failure of a proxy is depicted in accordance with a preferred embodiment of the present invention.
- This process may be implemented in a monitor in the depicted examples.
- the process begins by determining whether a heartbeat message has been received from the proxy (step 800 ). If a heartbeat has not been received, a determination is made as to whether a timeout has occurred (step 802 ). If a timeout has not occurred, the process returns to step 800 . Otherwise, a proxy failure has occurred and the proxy entry for the failed proxy is removed from the proxy precedence vector (step 804 ). Next, the proxy precedence vector is recallabrated (step 806 ) with the process terminating thereafter.
- step 808 if a heartbeat has been received from the proxy, the timeout is reset (step 808 ). The process then returns to step 800 .
- a flowchart of a process for resolving a proxy failure is depicted in accordance with a preferred embodiment of the present invention.
- the process beings by updating the precedence vector (step 900 ).
- the precedence vector is updated to remove the failed proxy.
- an indication may be made in the vector that the proxy has failed.
- the aproxy with the highest priority in the proxy precedence vector is identified (step 902 ). This identified aproxy is set or designated as the new proxy (step 904 ), and the new proxy is unblocked from the monitor (step 906 ) with the process terminating thereafter.
- FIG. 10 a flowchart of a process followed by an aproxy is depicted in accordance with a preferred embodiment of the present invention.
- the process begins with the aproxy caching requests offline (step 1000 ).
- the requests are cached locally for each aproxy in these examples. This caching of requests are those requests that are multicast by clients or services. Requests made directly to the proxy are not cached by the aproxy.
- a determination is made as to whether the proxy succession monitor has unblocked the aproxy (step 1002 ). Unblocking of the aproxy would mean that the aproxy has become the proxy. If the aproxy has not been unblocked, the process returns to step 1000 to cache requests.
- the aproxy becomes the new proxy and the requests cached by the new proxy are compared with the log of process requests in the network cache (step 1004 ).
- This comparison is made to identify requests made by clients and services that were not processes by the prior proxy. These requests, as mentioned above, are those multicast by a client or service. The process does not take into account request made directly by the prior proxy. With a direct connection using HTTP requests, these requests are not accounted for because the client or service will resend the request if the response by the proxy is not received. With multicast requests, the client or service does not expect a response.
- the new proxy checks to see if requests were received that have been unprocessed.
- the unprocessed requests are serviced (step 1006 ).
- Challenge messages are excluded from the unprocessed requests in step 1006 .
- these requests are logged in the network cache (step 1008 ) with the process terminating thereafter.
- FIG. 11 a flowchart of a process for processing a request for a service from a client is depicted in accordance with a preferred embodiment of the present invention.
- the process begins by receiving a message from the client (step 1100 ).
- the message type is identified (step 1102 ).
- the message may be a request message or a subscription message.
- a request message is a request for a service while a subscription message is a request for notification of service types and service heartbeats.
- step 1104 a determination is made as to whether the requested service is present. If the requested service is present, information about the service is returned to the client (step 1106 ). The process request is then logged in the network cache (step 1108 ) with the process terminating thereafter. On the other hand, if the requested service is not present in step 1104 , an error message is returned to the client (step 1110 ) with the process then proceeding to step 1108 .
- step 1112 the client sending the message is added to the subscription list (step 1112 ) with the process then proceeding to step 1108 .
- Clients may issue subscribe messages for specified service types.
- the proxy can inform the client of the availability of the services.
- Subscribe messages are also issued by clients so that proxies will forward service heart beats to interested clients.
- the process begins by receiving an alive message (step 1200 ).
- Service information is stored in the network cache (step 1202 ).
- the service information includes, for example, the service's unique service name, the type of service, the location of the service, and a time out value.
- An expiration time is set based on the time out value (step 1204 ).
- a similar process may be used to register clients with the proxy. Thereafter, a subscription is checked to see if clients have registered to receive messages for this type of service (step 1206 ).
- a multicast message is sent to all clients registered for the service type (step 1208 ) with the process terminating thereafter.
- FIG. 13 a flowchart of a process for managing registered services is depicted in accordance with a preferred embodiment of the present invention.
- the process begins by determining whether the time set by time out value for the service has expired (step 1300 ). If the time has not expired, a determination is made as to whether an alive message has been received from the service (step 1302 ). This alive message is similar to the heartbeat generated by the proxy. If an alive message has been received, the time is reset (step 1304 ) with the process then returning to step 1300 . Otherwise, the process returns directly to step 1300 . With reference again to step 1300 if the time has expired, the entry for the service is removed (step 1306 ) with the process terminating thereafter.
- these replication processes also may be used to enable multiple proxies to service clients and services with the clients and services seeing only a single proxy.
- the presentation of one proxy on the network at a time is extended by the present invention to having one proxy present during a single time slot.
- proxy priorities are a function of time.
- the proxy precedence vector described above acts as a proxy dispatcher, analogous to thread dispatchers common in operating system architectures.
- Each proxy is allowed a “slice” of time to access the network cache and issue a heartbeat.
- the location of the proxies differs, but the unique service name remains the same in the heartbeat or alive messages. All of these proxies are able to respond to requests.
- the clients and services see only a single proxy because all of the proxies issue heartbeat or alive messages using the same unique service name.
- the period of time allocated may be the same or different for each proxy depending on the allocation or arbitration scheme used.
- Network cache 1400 includes a monitor 1402 and a proxy precedence vector 1404 as in FIG. 4 above.
- the service information and client information in this examples grouped by proxies.
- Group 1406 contains proxy information for one proxy while group 1408 contains proxy information for another proxy.
- group 1406 contains client information 1410 , service information 1412 , and address set 1414 .
- group 1408 contains client information 1416 , service information 1418 , and address set 1420 .
- the client information is that of clients registered for each particular proxy.
- the service information is that maintained by each proxy.
- the address set contains the IP address of all clients and services which are managed by the proxy in question.
- the proxy heart beat is issued to this set of addresses.
- a proxy is allowed access only to the information associated or assigned to the proxy.
- FIG. 15 a flowchart of a process for scaling a universal plug and play network through atomic proxy replication is depicted in accordance with a preferred embodiment of the present invention.
- the process begins by defining the time slice (step 1500 ).
- the time slice is equal for each proxy, but unequal time slices may be assigned depending on the implementation.
- the proxy secession monitor is initiated with an appropriate time out based on the defined time slice (step 1502 ).
- Proxy M owns the monitor (step 1504 ).
- M is the identification of the current server that is functioning as the proxy for this time slice.
- a determination is made as to whether proxy secession has timed out (step 1506 ). If the monitor has not timed out, the process returns to step 1504 .
- a proxy precedence function is applied to select the new proxy to be identified as proxy M (step 1508 ) with the process then returning to step 1504 .
- the proxy precedence function is (a+1)mod(x), where a is the current proxy number and x is the number of proxies/aproxies in the system.
- This function is basically a round robin function in which each aproxy is given a turn. Of course other functions such as those providing priorities or weights to selected aproxies may be used.
- proxies may be assigned to different groups of clients and services such that more clients and services may be supported. This type of support may be implemented by having different proxies multicasting heart beats to different sets of clients. For example, one proxy may multicast messages to a first set of clients during its time slice while a second proxy multicast messages to a second set of clients during its time slice. When a proxy does not have a time period, it functions as an aproxy and will locally store requests fro it from clients and services. These requests will be processed when the time slice is received.
- Aproxies also may be present. These aproxies function in the same manner as descrived above. With respect to failed proxies in the case of scaling or time slicing, the new proxy must assume the responsibilities of the failed proxy. The address list of the failed proxy is merged with that of the new proxy.
Abstract
Description
Claims (30)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/420,473 US6665705B1 (en) | 1999-10-19 | 1999-10-19 | Method and apparatus for proxy replication |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US09/420,473 US6665705B1 (en) | 1999-10-19 | 1999-10-19 | Method and apparatus for proxy replication |
Publications (1)
Publication Number | Publication Date |
---|---|
US6665705B1 true US6665705B1 (en) | 2003-12-16 |
Family
ID=29712293
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US09/420,473 Expired - Lifetime US6665705B1 (en) | 1999-10-19 | 1999-10-19 | Method and apparatus for proxy replication |
Country Status (1)
Country | Link |
---|---|
US (1) | US6665705B1 (en) |
Cited By (35)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020040397A1 (en) * | 2000-10-02 | 2002-04-04 | Samsung Electronics Co., Ltd. | IP based network system and networking method thereof |
US20020083143A1 (en) * | 2000-12-13 | 2002-06-27 | Philips Electronics North America Corporation | UPnP architecture for heterogeneous networks of slave devices |
US20030046440A1 (en) * | 2001-08-28 | 2003-03-06 | Aleta Ricciardi | Method for handling transitions in grouped services in a distributed computing application |
US20030154260A1 (en) * | 2002-02-13 | 2003-08-14 | Mebane Cummins Aiken | Computer-implemented data messaging ring |
US20040054748A1 (en) * | 2002-09-16 | 2004-03-18 | Emmanuel Ackaouy | Apparatus and method for processing data in a network |
US20040054777A1 (en) * | 2002-09-16 | 2004-03-18 | Emmanuel Ackaouy | Apparatus and method for a proxy cache |
US20040111494A1 (en) * | 2002-12-06 | 2004-06-10 | Microsoft Corporation | Network location signature for disambiguating multicast messages in dual-IP stack and/or multi-homed network environments |
US20040184427A1 (en) * | 2003-03-20 | 2004-09-23 | Cogency Semiconductor Inc. | Method and apparatus for selecting a responder to enable reliable multicast |
US20050021589A1 (en) * | 2003-07-09 | 2005-01-27 | Southam Blaine R. | Systems and methods for collecting data regarding network service operation |
US20050058066A1 (en) * | 2003-09-16 | 2005-03-17 | Samsung Electronics Co., Ltd. | Network device to support services according to quality of service, network system and method using the same |
US20050188048A1 (en) * | 2004-01-20 | 2005-08-25 | Microsoft Corporation | Systems and methods for processing dynamic content |
US7089324B1 (en) * | 2001-06-14 | 2006-08-08 | Gateway Inc. | Dynamic internet gateway service |
US20060294227A1 (en) * | 2005-06-22 | 2006-12-28 | Canon Kabushiki Kaisha | Communication apparatus and communication method |
US7254636B1 (en) * | 2003-03-14 | 2007-08-07 | Cisco Technology, Inc. | Method and apparatus for transparent distributed network-attached storage with web cache communication protocol/anycast and file handle redundancy |
US20070203976A1 (en) * | 2006-02-15 | 2007-08-30 | Kerstin Bein | Fail-Safe System for Managing of Client-Server Communication |
US7328267B1 (en) * | 2002-01-18 | 2008-02-05 | Cisco Technology, Inc. | TCP proxy connection management in a gigabit environment |
US20090013077A1 (en) * | 2007-07-03 | 2009-01-08 | Samsung Electronics Co., Ltd. | Obje network device service control method and system |
US20090063686A1 (en) * | 2007-08-30 | 2009-03-05 | Schmidt Brian K | Automated service discovery and dynamic connection management |
WO2009069951A2 (en) * | 2007-11-30 | 2009-06-04 | Posdata Co., Ltd. | Apparatus and method for supporting mcbcs proxy selection for mcbcs and macro diversity in wireless communication system |
US7552223B1 (en) | 2002-09-16 | 2009-06-23 | Netapp, Inc. | Apparatus and method for data consistency in a proxy cache |
US7869591B1 (en) | 2001-03-23 | 2011-01-11 | Nagel Robert H | System and method for secure three-party communications |
US20140068025A1 (en) * | 2012-08-29 | 2014-03-06 | Telefonaktiebolaget L M Ericsson (Publ) | Method and Node For Automatically Exchanging Network Service Provider Information |
US20150205722A1 (en) * | 2014-01-20 | 2015-07-23 | International Business Machines Corporation | High availability cache in server cluster |
US20160073146A1 (en) * | 2014-09-10 | 2016-03-10 | Ericsson Television Inc. | Advertisement Targeting Scheme in a Multicast ABR Environment Based on Ad Caching |
US9294587B1 (en) * | 2013-03-11 | 2016-03-22 | Amazon Technologies, Inc. | Enhanced routing and content delivery |
US20170318089A1 (en) * | 2016-04-29 | 2017-11-02 | Netapp Inc. | Cross-platform replication |
US20180176624A1 (en) * | 2016-07-07 | 2018-06-21 | Telefonaktiebolaget Lm Ericsson (Publ) | Bandwidth and ABR Video QoE Management Based On OTT Video Providers and Devices |
US20190182520A1 (en) * | 2016-08-17 | 2019-06-13 | Nec Corporation | Bitrate instruction device, bitrate instruction method, and non-transitory recording medium |
US20200037017A1 (en) * | 2016-09-30 | 2020-01-30 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
CN111064608A (en) * | 2019-12-11 | 2020-04-24 | 北京奇艺世纪科技有限公司 | Master-slave switching method and device of message system, electronic equipment and storage medium |
US10943273B2 (en) | 2003-02-05 | 2021-03-09 | The Hoffberg Family Trust 2004-1 | System and method for determining contingent relevance |
US20220124387A1 (en) * | 2020-01-16 | 2022-04-21 | Beijing Dajia Internet Information Technology Co., Ltd. | Method for training bit rate decision model, and electronic device |
US11317171B2 (en) | 2016-09-30 | 2022-04-26 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
USRE49334E1 (en) | 2005-10-04 | 2022-12-13 | Hoffberg Family Trust 2 | Multifactorial optimization system and method |
US20230247244A1 (en) * | 2020-08-18 | 2023-08-03 | Telefonaktiebolaget Lm Ericsson (Publ) | Estimating video resolution delivered by an encrypted video stream |
Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5325362A (en) | 1993-09-29 | 1994-06-28 | Sun Microsystems, Inc. | Scalable and efficient intra-domain tunneling mobile-IP scheme |
US5740176A (en) | 1994-05-19 | 1998-04-14 | Dagaz Technologies, Inc. | Scalable multimedia network |
US5793965A (en) | 1995-03-22 | 1998-08-11 | Sun Microsystems, Inc. | Method and apparatus for determining the type of an object in a distributed object system |
US5937388A (en) | 1996-12-05 | 1999-08-10 | Hewlett-Packard Company | System and method for performing scalable distribution of process flow activities in a distributed workflow management system |
US6058424A (en) * | 1997-11-17 | 2000-05-02 | International Business Machines Corporation | System and method for transferring a session from one application server to another without losing existing resources |
US6145089A (en) * | 1997-11-10 | 2000-11-07 | Legato Systems, Inc. | Server fail-over system |
US6226684B1 (en) * | 1998-10-26 | 2001-05-01 | Pointcast, Inc. | Method and apparatus for reestablishing network connections in a multi-router network |
-
1999
- 1999-10-19 US US09/420,473 patent/US6665705B1/en not_active Expired - Lifetime
Patent Citations (7)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US5325362A (en) | 1993-09-29 | 1994-06-28 | Sun Microsystems, Inc. | Scalable and efficient intra-domain tunneling mobile-IP scheme |
US5740176A (en) | 1994-05-19 | 1998-04-14 | Dagaz Technologies, Inc. | Scalable multimedia network |
US5793965A (en) | 1995-03-22 | 1998-08-11 | Sun Microsystems, Inc. | Method and apparatus for determining the type of an object in a distributed object system |
US5937388A (en) | 1996-12-05 | 1999-08-10 | Hewlett-Packard Company | System and method for performing scalable distribution of process flow activities in a distributed workflow management system |
US6145089A (en) * | 1997-11-10 | 2000-11-07 | Legato Systems, Inc. | Server fail-over system |
US6058424A (en) * | 1997-11-17 | 2000-05-02 | International Business Machines Corporation | System and method for transferring a session from one application server to another without losing existing resources |
US6226684B1 (en) * | 1998-10-26 | 2001-05-01 | Pointcast, Inc. | Method and apparatus for reestablishing network connections in a multi-router network |
Non-Patent Citations (1)
Title |
---|
Matsuda et al. U.S. Patent Application Publicaton, Pub. No. 2002/0133573. * |
Cited By (75)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20020040397A1 (en) * | 2000-10-02 | 2002-04-04 | Samsung Electronics Co., Ltd. | IP based network system and networking method thereof |
US20020083143A1 (en) * | 2000-12-13 | 2002-06-27 | Philips Electronics North America Corporation | UPnP architecture for heterogeneous networks of slave devices |
US7869591B1 (en) | 2001-03-23 | 2011-01-11 | Nagel Robert H | System and method for secure three-party communications |
US9419951B1 (en) | 2001-03-23 | 2016-08-16 | St. Luke Technologies, Llc | System and method for secure three-party communications |
US8904181B1 (en) | 2001-03-23 | 2014-12-02 | David P. Felsher | System and method for secure three-party communications |
US7089324B1 (en) * | 2001-06-14 | 2006-08-08 | Gateway Inc. | Dynamic internet gateway service |
US20050229180A1 (en) * | 2001-08-28 | 2005-10-13 | Kayak Interactive Corporation | Method for switching group modes in a distributed computing application |
US20030046440A1 (en) * | 2001-08-28 | 2003-03-06 | Aleta Ricciardi | Method for handling transitions in grouped services in a distributed computing application |
US20050228857A1 (en) * | 2001-08-28 | 2005-10-13 | Kayak Interactive Corporation | Method for a group of services to operate in two modes simultaneously |
US6951020B2 (en) * | 2001-08-28 | 2005-09-27 | Kayak Interactive Corporation | Method for handling transitions in grouped services in a distributed computing application |
US7328267B1 (en) * | 2002-01-18 | 2008-02-05 | Cisco Technology, Inc. | TCP proxy connection management in a gigabit environment |
US8090866B1 (en) | 2002-01-18 | 2012-01-03 | Cisco Technology, Inc. | TCP proxy connection management in a gigabit environment |
US7191224B2 (en) * | 2002-02-13 | 2007-03-13 | Sas Institute Inc. | Computer-implemented data messaging ring |
US20030154260A1 (en) * | 2002-02-13 | 2003-08-14 | Mebane Cummins Aiken | Computer-implemented data messaging ring |
US20040054777A1 (en) * | 2002-09-16 | 2004-03-18 | Emmanuel Ackaouy | Apparatus and method for a proxy cache |
US7171469B2 (en) | 2002-09-16 | 2007-01-30 | Network Appliance, Inc. | Apparatus and method for storing data in a proxy cache in a network |
US7552223B1 (en) | 2002-09-16 | 2009-06-23 | Netapp, Inc. | Apparatus and method for data consistency in a proxy cache |
US7191290B1 (en) * | 2002-09-16 | 2007-03-13 | Network Appliance, Inc. | Apparatus and method for tandem operation in a storage network |
US20070192444A1 (en) * | 2002-09-16 | 2007-08-16 | Emmanuel Ackaouy | Apparatus and method for a proxy cache |
US7284030B2 (en) | 2002-09-16 | 2007-10-16 | Network Appliance, Inc. | Apparatus and method for processing data in a network |
US20040054748A1 (en) * | 2002-09-16 | 2004-03-18 | Emmanuel Ackaouy | Apparatus and method for processing data in a network |
US7631078B2 (en) | 2002-09-16 | 2009-12-08 | Netapp, Inc. | Network caching device including translation mechanism to provide indirection between client-side object handles and server-side object handles |
US20040111494A1 (en) * | 2002-12-06 | 2004-06-10 | Microsoft Corporation | Network location signature for disambiguating multicast messages in dual-IP stack and/or multi-homed network environments |
US7069312B2 (en) * | 2002-12-06 | 2006-06-27 | Microsoft Corporation | Network location signature for disambiguating multicast messages in dual-IP stack and/or multi-homed network environments |
US11790413B2 (en) | 2003-02-05 | 2023-10-17 | Hoffberg Family Trust 2 | System and method for communication |
US10943273B2 (en) | 2003-02-05 | 2021-03-09 | The Hoffberg Family Trust 2004-1 | System and method for determining contingent relevance |
US7254636B1 (en) * | 2003-03-14 | 2007-08-07 | Cisco Technology, Inc. | Method and apparatus for transparent distributed network-attached storage with web cache communication protocol/anycast and file handle redundancy |
US8064474B2 (en) * | 2003-03-20 | 2011-11-22 | Qualcomm Atheros, Inc. | Method and apparatus for selecting a responder to enable reliable multicast |
US20040184427A1 (en) * | 2003-03-20 | 2004-09-23 | Cogency Semiconductor Inc. | Method and apparatus for selecting a responder to enable reliable multicast |
US20050021589A1 (en) * | 2003-07-09 | 2005-01-27 | Southam Blaine R. | Systems and methods for collecting data regarding network service operation |
US8352588B2 (en) * | 2003-07-09 | 2013-01-08 | Hewlett-Packard Development Company, L.P. | Systems and methods for collecting data regarding network service operation |
US7693161B2 (en) * | 2003-09-16 | 2010-04-06 | Samsung Electronics Co., Ltd. | Network device to support services according to quality of service, network system and method using the same |
US20050058066A1 (en) * | 2003-09-16 | 2005-03-17 | Samsung Electronics Co., Ltd. | Network device to support services according to quality of service, network system and method using the same |
US20050188048A1 (en) * | 2004-01-20 | 2005-08-25 | Microsoft Corporation | Systems and methods for processing dynamic content |
US7590704B2 (en) | 2004-01-20 | 2009-09-15 | Microsoft Corporation | Systems and methods for processing dynamic content |
US20060294227A1 (en) * | 2005-06-22 | 2006-12-28 | Canon Kabushiki Kaisha | Communication apparatus and communication method |
US8095643B2 (en) * | 2005-06-22 | 2012-01-10 | Canon Kabushiki Kaisha | Communication apparatus and method providing robust service in the presence of deteriorated radio conditions |
USRE49334E1 (en) | 2005-10-04 | 2022-12-13 | Hoffberg Family Trust 2 | Multifactorial optimization system and method |
US20070203976A1 (en) * | 2006-02-15 | 2007-08-30 | Kerstin Bein | Fail-Safe System for Managing of Client-Server Communication |
US8156177B2 (en) * | 2006-02-15 | 2012-04-10 | Software Ag | Fail-safe system for managing of client-server communication |
US20090013077A1 (en) * | 2007-07-03 | 2009-01-08 | Samsung Electronics Co., Ltd. | Obje network device service control method and system |
US8296395B2 (en) * | 2007-07-03 | 2012-10-23 | Samsung Electronics, Ltd. | Obje network device service control method and system |
US20090063686A1 (en) * | 2007-08-30 | 2009-03-05 | Schmidt Brian K | Automated service discovery and dynamic connection management |
US8924509B2 (en) | 2007-08-30 | 2014-12-30 | Silicon Image, Inc. | Automated service discovery and dynamic connection management |
US20100302986A1 (en) * | 2007-11-30 | 2010-12-02 | Posco ICT Co., Ltd. | Apparatus and method for supporting mcbcs proxy selection for mcbcs and macro diversity in wireless communication system |
US8259653B2 (en) * | 2007-11-30 | 2012-09-04 | Seah Networks Co., Ltd. | Apparatus and method for supporting MCBCS proxy selection for MCBCS and macro diversity in wireless communication system |
JP2011505738A (en) * | 2007-11-30 | 2011-02-24 | ポスコ アイシーティー カンパニー リミテッド | Apparatus and method for supporting MCBCS proxy selection for MCBCS and macro diversity in a wireless communication system |
WO2009069951A3 (en) * | 2007-11-30 | 2009-08-06 | Posdata Co Ltd | Apparatus and method for supporting mcbcs proxy selection for mcbcs and macro diversity in wireless communication system |
WO2009069951A2 (en) * | 2007-11-30 | 2009-06-04 | Posdata Co., Ltd. | Apparatus and method for supporting mcbcs proxy selection for mcbcs and macro diversity in wireless communication system |
US20140068025A1 (en) * | 2012-08-29 | 2014-03-06 | Telefonaktiebolaget L M Ericsson (Publ) | Method and Node For Automatically Exchanging Network Service Provider Information |
US9203920B2 (en) * | 2012-08-29 | 2015-12-01 | Telefonaktiebolaget L M Ericsson (Publ) | Method and node for automatically exchanging network service provider information |
US9294587B1 (en) * | 2013-03-11 | 2016-03-22 | Amazon Technologies, Inc. | Enhanced routing and content delivery |
US9213642B2 (en) * | 2014-01-20 | 2015-12-15 | International Business Machines Corporation | High availability cache in server cluster |
US9952949B2 (en) | 2014-01-20 | 2018-04-24 | International Business Machines Corporation | High availability cache in server cluster |
US20150205722A1 (en) * | 2014-01-20 | 2015-07-23 | International Business Machines Corporation | High availability cache in server cluster |
US9756374B2 (en) | 2014-09-10 | 2017-09-05 | Ericsson Ab | Advertisement targeting scheme in a multicast ABR environment based on throttled ad channel streaming |
US9560404B2 (en) * | 2014-09-10 | 2017-01-31 | Ericsson Ab | Advertisement targeting scheme in a multicast ABR environment based on ad caching |
US20160073146A1 (en) * | 2014-09-10 | 2016-03-10 | Ericsson Television Inc. | Advertisement Targeting Scheme in a Multicast ABR Environment Based on Ad Caching |
US9621938B2 (en) | 2014-09-10 | 2017-04-11 | Ericsson Ab | Advertisement targeting scheme in a multicast ABR environment based on switched video |
US11921597B2 (en) | 2016-04-29 | 2024-03-05 | Netapp, Inc. | Cross-platform replication |
US10585768B2 (en) | 2016-04-29 | 2020-03-10 | Netapp Inc. | Cross-platform replication |
US9990260B2 (en) * | 2016-04-29 | 2018-06-05 | Netapp Inc. | Cross-platform replication |
US11347605B2 (en) | 2016-04-29 | 2022-05-31 | Netapp Inc. | Cross-platform replication |
US20170318089A1 (en) * | 2016-04-29 | 2017-11-02 | Netapp Inc. | Cross-platform replication |
US20180176624A1 (en) * | 2016-07-07 | 2018-06-21 | Telefonaktiebolaget Lm Ericsson (Publ) | Bandwidth and ABR Video QoE Management Based On OTT Video Providers and Devices |
US10939153B2 (en) * | 2016-07-07 | 2021-03-02 | Telefonaktiebolaget Lm Ericsson (Publ) | Bandwidth and ABR video QoE management based on OTT video providers and devices |
US10911804B2 (en) * | 2016-08-17 | 2021-02-02 | Nec Corporation | Bitrate instruction device, bitrate instruction method, and non-transitory recording medium |
US20190182520A1 (en) * | 2016-08-17 | 2019-06-13 | Nec Corporation | Bitrate instruction device, bitrate instruction method, and non-transitory recording medium |
US11044507B2 (en) | 2016-09-30 | 2021-06-22 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
US11317171B2 (en) | 2016-09-30 | 2022-04-26 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
US10931993B2 (en) * | 2016-09-30 | 2021-02-23 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
US20200037017A1 (en) * | 2016-09-30 | 2020-01-30 | British Telecommunications Public Limited Company | Viewer importance adaptive bit rate delivery |
CN111064608A (en) * | 2019-12-11 | 2020-04-24 | 北京奇艺世纪科技有限公司 | Master-slave switching method and device of message system, electronic equipment and storage medium |
US20220124387A1 (en) * | 2020-01-16 | 2022-04-21 | Beijing Dajia Internet Information Technology Co., Ltd. | Method for training bit rate decision model, and electronic device |
US20230247244A1 (en) * | 2020-08-18 | 2023-08-03 | Telefonaktiebolaget Lm Ericsson (Publ) | Estimating video resolution delivered by an encrypted video stream |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US6665705B1 (en) | Method and apparatus for proxy replication | |
US6571277B1 (en) | Method and apparatus for scaling universal plug and play networks using atomic proxy replication | |
US7987266B2 (en) | Failover in proxy server networks | |
US7487244B2 (en) | Exactly once data framework method | |
US7921169B2 (en) | System and method for exactly once message store communication | |
US8850056B2 (en) | Method and system for managing client-server affinity | |
US6366558B1 (en) | Method and apparatus for maintaining connection state between a connection manager and a failover device | |
US7409420B2 (en) | Method and apparatus for session replication and failover | |
US5721825A (en) | System and method for global event notification and delivery in a distributed computing environment | |
US7076691B1 (en) | Robust indication processing failure mode handling | |
JP4381655B2 (en) | Storage system, storage device, and information sharing method using the storage device | |
CN103581276B (en) | Cluster management device, system, service customer end and correlation method | |
US20030014526A1 (en) | Hardware load-balancing apparatus for session replication | |
CN107947960A (en) | The method for pushing and system of configuration information, the method for reseptance and system of configuration information | |
US20040049546A1 (en) | Mail processing system | |
US7453865B2 (en) | Communication channels in a storage network | |
US20090290503A1 (en) | Controlling Access to a Destination in a Data Processing Network | |
CN108306941A (en) | A kind of distributed information system | |
CN112671554A (en) | Node fault processing method and related device | |
JP4132738B2 (en) | A computerized method of determining application server availability | |
US7334038B1 (en) | Broadband service control network | |
AU2002332845B2 (en) | Exactly once cache framework | |
AU2002332845A1 (en) | Exactly once cache framework | |
US20020199020A1 (en) | Method and system for resolving names on a network gateway having multiple distinct network interfaces | |
JP2000200245A (en) | System and method for information utilization |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: IBM CORPORATION, NEW YORKFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DANIELS-BARNES, FONDA JONETTE;GRAHAM, STEPHEN GLEN;WESLEY, AJAMU AKINWUNMI;REEL/FRAME:010332/0526Effective date: 19991018 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FEPP | Fee payment procedure |
Free format text: PAYOR NUMBER ASSIGNED (ORIGINAL EVENT CODE: ASPN); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
FPAY | Fee payment |
Year of fee payment: 8 |
|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERNATIONAL BUSINESS MACHINES CORPORATION;REEL/FRAME:026664/0866Effective date: 20110503 |
|
FPAY | Fee payment |
Year of fee payment: 12 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044127/0735Effective date: 20170929 |