CROSS RELATED TO RELATED APPLICATIONS
-
This U.S. Patent Application claims priority under 35 U.S.C. ยง 119(e) to U.S. Provisional Application 63/202,950, filed on Jun. 30, 2021 and U.S. Provisional Application 63/267,142, filed on Jan. 25, 2022. The disclosures of these prior applications are considered part of the disclosure of this application and are hereby incorporated by reference in their entireties.
TECHNICAL FIELD
-
This disclosure relates to advancing the use of text and speech in automatic speech recognition (ASR) pretraining with consistency and contrastive losses.
BACKGROUND
-
Automatic speech recognition (ASR), the process of taking an audio input and transcribing it into text, has greatly been an important technology that is used in mobile devices and other devices. In general, automatic speech recognition attempts to provide accurate transcriptions of what a person has said by taking an audio input (e.g., speech utterance) and transcribing the audio input into text. Modern ASR models continue to improve in both accuracy (e.g. a low word error rate (WER)) and latency (e.g., delay between the user speaking and the transcription) based on the ongoing development of deep neural networks. However, one challenge in developing deep learning-based ASR models is that parameters of the ASR models tend to over fit the training data, thereby resulting in the ASR models having difficulties generalizing unseen data when the training data is not extensive enough. As a result, training ASR models on larger training datasets improves the accuracy of the ASR model. Synthesized speech and/or data-augmented speech can be incorporated to increase the volume of training data used to train the ASR models.
SUMMARY
-
One aspect of the disclosure provides a computer-implemented method that when executed on data processing hardware causes the data processing hardware to perform operations for pre-training and audio encoder to jointly learn shared representations of speech and text. The operations include receiving training data that includes unspoken text utterances, un-transcribed non-synthetic speech utterances, and transcribed non-synthetic speech utterances. Each unspoken text utterance is not paired with any corresponding spoken utterance of non-synthetic speech. Each un-transcribed non-synthetic speech utterance is not paired with a corresponding transcription. Each transcribed non-synthetic speech utterance is paired with a corresponding transcription. The operations also include generating a corresponding synthetic speech representation for each unspoken textual utterance of the received training data using a text-to-speech model. The operations also include pre-training an audio encoder on the synthetic speech representations generated for the unspoken textual utterances, the un-transcribed non-synthetic speech utterances, and the transcribed non-synthetic speech utterances to teach the audio encoder to jointly learn shared speech and text representations.
-
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the audio encoder includes a stack of self-attention layers each including a multi-headed self-attention mechanism. In some examples, pre-training the audio encoder includes: for each un-transcribed non-synthetic speech utterance, generating a corresponding encoded representation of the un-transcribed speech representation and pre-training the audio encoder on a contrastive applied on the corresponding encoded representation of the un-transcribed non-synthetic speech utterance; for each synthetic speech representation, generating a corresponding encoded representation of the synthetic speech representation and pre-training the audio encoder on a contrastive loss applied on the corresponding encoded representation of the synthetic speech representation; and for each transcribed non-synthetic speech utterance, generating a corresponding encoded representation of the transcribed non-synthetic speech utterance and pre-training the audio encoder on a contrastive loss applied on the corresponding encoded representation of the transcribed non-synthetic speech utterance.
-
In some implementations, pre-training the audio encoder includes: at each of a plurality of time steps for each synthetic speech representation, generating a first probability distribution over possible synthetic speech recognition hypotheses for the corresponding synthetic speech representation using an auxiliary decoder, determining a synthetic speech loss term based on the first probability distribution over possible synthetic speech recognition hypotheses and the unspoken textual utterance corresponding to the corresponding synthetic speech representation, and pre-training the audio encoder based on the synthetic speech loss term; and at each of a plurality of time steps for each transcribed non-synthetic speech utterance, generating a second probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance using the auxiliary decoder, determining a non-synthetic speech loss term based on the second probability distribution over possible non-synthetic speech recognition hypotheses and the corresponding transcription paired with the transcribed non-synthetic speech utterance; and pre-training the audio encoder based on the non-synthetic speech loss term. Here, the first probability distribution over possible synthetic speech recognition hypotheses includes one of possible phoneme labels or possible word piece labels and the second probability distribution over possible non-synthetic speech recognition hypotheses includes the one of the possible phoneme labels or the possible word piece labels.
-
In these implementations, pre-training the audio encoder may further include: at each of the plurality of time steps for each synthetic speech representation, generating a third probability distribution over possible synaptic speech recognition hypotheses for the corresponding synthetic speech representation that includes the other one of the possible phoneme labels or the possible word piece labels using another auxiliary decoder, determining another synthetic speech loss term based on the third probability distribution over possible synthetic speech recognition hypotheses and the unspoken textual utterance corresponding to the corresponding synthetic speech representation, and pre-training the audio encoder based on the other synthetic speech loss term; and at each of the plurality of time steps for each transcribed non-synthetic speech utterance, generating a fourth probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance that includes the other one of the possible phoneme labels or the possible word piece labels using the other auxiliary decoder, determining another non-synthetic speech loss term based on the fourth probability distribution over possible non-synthetic speech recognition hypotheses and the corresponding transcription paired with the transcribed non-synthetic speech utterance, and pre-training the audio encoder based on the non-synthetic speech loss term. The auxiliary decoder includes one of a Connection Temporal Classification (CTC) decoder, a Listen Attend Spell (LAS) decoder, or Recurrent Neural Network-Transducer (RNN-T) decoder.
-
In some examples, the operations further include obtaining a set of training utterance pairs each including a corresponding one of the transcribed non-synthetic speech utterances of the received training data and a paired synthetic speech representation of the corresponding transcribed non-synthetic speech utterance generated by the text-to-speech model performing text-to-speech conversion on the corresponding transcription that is paired with the transcribed non-synthetic speech utterance. In these examples, pre-training the audio encoder includes, at each of a plurality of output steps for each training utterance pair in the set of training utterance pairs, generating a first probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance using an auxiliary decoder, generating a second probability distribution over possible synthetic speech recognition hypotheses for the corresponding paired synthetic speech representation using the auxiliary decoder, determining a consistent loss term for the corresponding training utterance pair based on the first probability distribution over possible non-synthetic speech recognition hypotheses and the second probability distribution over possible synthetic speech recognition hypotheses, and pre-training the audio encoder based on the non-synthetic speech loss term. Prior to pre-training the audio encoder on the synthetic speech representations, the operations may further include augmenting one or more of the synthetic speech representations.
-
In some implementations, the unspoken textual utterances are generated and/or selected using one or more language models. In some examples, the unspoken textual utterances are generated using a background language model and an in-domain language model trained on transcribed speech utterances associated with a target domain. After pre-training the audio encoder, the operations may further include fine-tuning the pre-trained encoder on transcribed speech utterances.
-
Another aspect of the disclosure provides a system that includes data processing hardware and memory hardware storing instructions that when executed on the data processing hardware causes the data processing hardware to perform operations. The operations include receiving training data that includes unspoken text utterances, un-transcribed non-synthetic speech utterances, and transcribed non-synthetic speech utterances. Each unspoken text utterance is not paired with any corresponding spoken utterance of non-synthetic speech. Each un-transcribed non-synthetic speech utterance is not paired with a corresponding transcription. Each transcribed non-synthetic speech utterance is paired with a corresponding transcription. The operations also include generating a corresponding synthetic speech representation for each unspoken textual utterance of the received training data using a text-to-speech model. The operations also include pre-training an audio encoder on the synthetic speech representations generated for the unspoken textual utterances, the un-transcribed non-synthetic speech utterances, and the transcribed non-synthetic speech utterances to teach the audio encoder to jointly learn shared speech and text representations.
-
Implementations of the disclosure may include one or more of the following optional features. In some implementations, the audio encoder includes a stack of self-attention layers each including a multi-headed self-attention mechanism. In some examples, pre-training the audio encoder includes for each un-transcribed non-synthetic speech utterance, generating a corresponding encoded representation of the un-transcribed speech representation and pre-training the audio encoder on a contrastive applied on the corresponding encoded representation of the un-transcribed non-synthetic speech utterance; for each synthetic speech representation, generating a corresponding encoded representation of the synthetic speech representation and pre-training the audio encoder on a contrastive loss applied on the corresponding encoded representation of the synthetic speech representation; and for each transcribed non-synthetic speech utterance, generating a corresponding encoded representation of the transcribed non-synthetic speech utterance and pre-training the audio encoder on a contrastive loss applied on the corresponding encoded representation of the transcribed non-synthetic speech utterance.
-
In some implementations, pre-training the audio encoder includes: at each of a plurality of time steps for each synthetic speech representation, generating a first probability distribution over possible synthetic speech recognition hypotheses for the corresponding synthetic speech representation using an auxiliary decoder, determining a synthetic speech loss term based on the first probability distribution over possible synthetic speech recognition hypotheses and the unspoken textual utterance corresponding to the corresponding synthetic speech representation, and pre-training the audio encoder based on the synthetic speech loss term; and at each of a plurality of time steps for each transcribed non-synthetic speech utterance, generating a second probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance using the auxiliary decoder, determining a non-synthetic speech loss term based on the second probability distribution over possible non-synthetic speech recognition hypotheses and the corresponding transcription paired with the transcribed non-synthetic speech utterance; and pre-training the audio encoder based on the non-synthetic speech loss term. Here, the first probability distribution over possible synthetic speech recognition hypotheses includes one of possible phoneme labels or possible word piece labels and the second probability distribution over possible non-synthetic speech recognition hypotheses includes the one of the possible phoneme labels or the possible word piece labels.
-
In these implementations, pre-training the audio encoder may further include at each of the plurality of time steps for each synthetic speech representation, generating a third probability distribution over possible synaptic speech recognition hypotheses for the corresponding synthetic speech representation that includes the other one of the possible phoneme labels or the possible word piece labels using another auxiliary decoder, determining another synthetic speech loss term based on the third probability distribution over possible synthetic speech recognition hypotheses and the unspoken textual utterance corresponding to the corresponding synthetic speech representation, and pre-training the audio encoder based on the other synthetic speech loss term; and at each of the plurality of time steps for each transcribed non-synthetic speech utterance, generating a fourth probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance that includes the other one of the possible phoneme labels or the possible word piece labels using the other auxiliary decoder, determining another non-synthetic speech loss term based on the fourth probability distribution over possible non-synthetic speech recognition hypotheses and the corresponding transcription paired with the transcribed non-synthetic speech utterance, and pre-training the audio encoder based on the non-synthetic speech loss term. The auxiliary decoder includes one of a Connection Temporal Classification (CTC) decoder, a Listen Attend Spell (LAS) decoder, or Recurrent Neural Network-Transducer (RNN-T) decoder.
-
In some examples, the operations further include obtaining a set of training utterance pairs each including a corresponding one of the transcribed non-synthetic speech utterances of the received training data and a paired synthetic speech representation of the corresponding transcribed non-synthetic speech utterance generated by the text-to-speech model performing text-to-speech conversion on the corresponding transcription that is paired with the transcribed non-synthetic speech utterance. In these examples, pre-training the audio encoder includes, at each of a plurality of output steps for each training utterance pair in the set of training utterance pairs, generating a first probability distribution over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance using an auxiliary decoder, generating a second probability distribution over possible synthetic speech recognition hypotheses for the corresponding paired synthetic speech representation using the auxiliary decoder, determining a consistent loss term for the corresponding training utterance pair based on the first probability distribution over possible non-synthetic speech recognition hypotheses and the second probability distribution over possible synthetic speech recognition hypotheses, and pre-training the audio encoder based on the non-synthetic speech loss term. Prior to pre-training the audio encoder on the synthetic speech representations, the operations may further include augmenting one or more of the synthetic speech representations.
-
In some implementations, the unspoken textual utterances are generated and/or selected using one or more language models. In some examples, the unspoken textual utterances are generated using a background language model and an in-domain language model trained on transcribed speech utterances associated with a target domain. After pre-training the audio encoder, the operations may further include fine-tuning the pre-trained encoder on transcribed speech utterances.
-
The details of one or more implementations of the disclosure are set forth in the accompanying drawings and the description below. Other aspects, features, and advantages will be apparent from the description and drawings, and from the claims.
DESCRIPTION OF DRAWINGS
-
FIG. 1 is a schematic view of an example speech recognition system.
-
FIG. 2 is a schematic view of a Recurrent Neural Network-Transducer (RNN-T) model architecture.
-
FIGS. 3A-3C are schematic views of an example training process for pre-training an audio encoder of a speech recognition model.
-
FIG. 4 is a schematic view of an example unspoken text selection process for selecting unspoken textual utterances pertaining to a specific domain.
-
FIG. 5 is an example projection space encoder representations of non-synthetic and synthetic speech.
-
FIG. 6 a flowchart of an example arrangement of operations for a method of pre-training an audio encoder to jointly learn shared representations of speech and text
-
FIG. 7 is a schematic view of an example computing device that may be used to implement the systems and methods described herein.
-
Like reference symbols in the various drawings indicate like elements.
DETAILED DESCRIPTION
-
Automated speech recognition has made tremendous strides with the introduction of sequence to sequence (Seq2Seq) models that map from audio to character sequences. At the same time, text-to-speech (TTS) or speech syntheses systems have successfully applied Seq2Seq models to obtain state of the art natural, realistic sounding synthesized speech that can be indistinguishable to the human ear from human speech.
-
One challenge in developing deep learning-based ASR models is that parameters of the ASR models tend to over fit the training data, thereby resulting in the ASR models having difficulties generalizing unseen data when the training data is not extensive enough. Thus, training ASR models on larger training datasets improves the accuracy of the ASR model. For instance, the use of machine learning or other statistical methods can train ASR models on training data sets that include upwards of 10,000 hours of transcribed speech. Yet, performance of ASR models suffers when a domain associated with the training data is distinct from a domain at which the ASR model will be deployed during inference. For example, training an ASR model on transcribed speech in a domain associated with video meeting would be less effective in recognizing speech related to voice search queries, and vice versa.
-
Synthesized speech has the potential to drastically limit the amount of labeled human speech required to train ASR models, while also providing flexibility in moving the ASR model across different domains. Generally, the use of synthesized speech has shown to impact ASR training differently than human speech, despite instances of state of the art synthesized speech being indistinguishable from human speech. This gap between synthesized speech and human speech is attributed to mismatches in the synthesized speech data from the human speech data that arise from the difficult one-to-many mapping problem that TTS systems are trying to solve. Namely, while the aggregate quality of available synthesized speech is very high, the synthesized speech exhibits much less variation than human speech, as well as minimal speech disfluencies. As a result, training ASR models exclusively on synthesized speech data presents a difficulty for generalizing real speech utterances during inference.
-
Implementations herein are directed toward using synthesized speech for training ASR models to recognize speech to maintain accuracy of the ASR models when large amounts of transcribed speech (e g., non-synthetic speech) in a target domain and/or target language for training the ASR model is not available or less prevalent. More specifically, implementations are directed toward pre-training an audio encoder of the ASR model on training data that includes un-transcribed non-synthetic speech utterances, unspoken textual utterances for generating corresponding synthetic speech representations, and the transcribed non-synthetic speech utterances to jointly learn speech and text representations, and then fine-tuning (e.g., warm-start training) the pre-trained ASR model using the available transcribed non-synthetic speech utterances. As will become apparent, the pre-training of the audio encoder includes updating parameters of the audio encoder based on a combination of contrastive self-supervised losses, supervised losses, and consistency losses derived from the training data.
-
The contrastive self-supervised losses may be derived from latent speech representations generated by the audio encoder from corresponding ones of the un-transcribed non-synthetic speech utterances, the synthetic speech representations, and the transcribed non-synthetic speech utterances to promote linguistic learning. On the other hand, the supervised losses may be derived from speech recognition labels predicted by one or more auxiliary decoders based on the latent speech representations generated by the audio encoder from corresponding ones of the synthetic speech representations and the transcribed non-synthetic speech utterances. Here, the corresponding transcriptions paired with the transcribed non-synthetic speech utterances and the corresponding unspoken textual utterances used to generate the synthetic speech representations serve as ground-truth labels for deriving the supervised losses. Lastly, the consistency losses may be derived from each transcribed non-synthetic speech utterance and a corresponding synthetic speech representation of the same utterance to promote consistent predictions (e.g., latent speech representations) by the audio encoder on both the non-synthetic (e.g., real/human) and synthetic speech representations of the same utterance. In short, consistency losses between human (non-synthetic) and synthetic (synthesized) representations of a same utterance provides an unsupervised training aspect by encouraging the audio encoder to behave consistently on training utterances of human speech and synthesized speech. Notably, a text-to-speech (TTS) model may convert the corresponding transcription that is paired with each transcribed non-synthetic speech utterance into the corresponding synthetic speech representation of the same utterance.
-
Additional implementations include applying data augmentation techniques such as synthesizing diverse realizations of training utterances by varying synthesized speaker characteristics in order to promote robustness to speaker differences. The techniques described herein are especially useful when relatively little transcribed human speech in a target domain and/or target language is available.
-
FIG. 1 illustrates an automated speech recognition (ASR) system 100 implementing an ASR model 200 that resides on a user device 102 of a user 104 and/or on a remote computing device 201 (e.g., one or more servers of a distributed system executing in a cloud-computing environment) in communication with the user device 102. Although the user device 102 is depicted as a mobile computing device (e g., a smart phone), the user device 102 may correspond to any type of computing device such as, without limitation, a tablet device, a laptop/desktop computer, a wearable device, a digital assistant device, a smart speaker/display, a smart appliance, an automotive infotainment system, or an Internet-of-Things (IoT) device, and is equipped with data processing hardware 111 and memory hardware 113.
-
The user device 102 includes an audio subsystem 108 configured to receive an utterance 106 spoken by the user 104 (e.g., the user device 102 may include one or more microphones for recording the spoken utterance 106) and convert the utterance 106 into a corresponding digital format associated with input acoustic frames 110 capable of being processed by the ASR system 100. In the example shown, the user speaks a respective utterance 106 in a natural language of English for the phrase โWhat is the weather in New York City?โ and the audio subsystem 108 converts the utterance 106 into corresponding acoustic frames 110 for input to the ASR system 100. Thereafter, the ASR model 200 receives, as input, the acoustic frames 110 corresponding to the utterance 106, and generates/predicts, as output, a corresponding transcription 120 (e.g., recognition result/hypothesis) of the utterance 106. In the example shown, the user device 102 and/or the remote computing device 201 also executes a user interface generator 107 configured to present a representation of the transcription 120 of the utterance 106 to the user 104 of the user device 102. In some configurations, the transcription 120 output from the ASR system 100 is processed, e.g., by a natural language understanding (NLU) module executing on the user device 102 or the remote computing device 201, to execute a user command. Additionally or alternatively, a text-to-speech system (e.g., executing on any combination of the user device 102 or the remote computing device 201) may convert the transcription into synthesized speech for audible output by another device. For instance, the original utterance 106 may correspond to a message the user 104 is sending to a friend in which the transcription 120 is converted to synthesized speech for audible output to the friend to listen to the message conveyed in the original utterance 106.
-
Referring to
FIG. 2 , an example frame alignment-based transducer model
200 a includes a Recurrent Neural Network-Transducer (RNN-T) model architecture which adheres to latency constrains associated with interactive applications. The use of the RNN-T model architecture is exemplary, and the frame alignment-based
transducer model 200 may include other architectures such as transformer-transducer and conformer-transducer model architectures among others. The RNN-
T model 200 provides a small computational footprint and utilizes less memory requirements than conventional ASR architectures, making the RNN-T model architecture suitable for performing speech recognition entirely on the user device
102 (e.g., no communication with a remote server is required). The RNN-
T model 200 includes an
encoder network 210, a
prediction network 220, and a
joint network 230. The
encoder network 210, which is roughly analogous to an acoustic model (AM) in a traditional ASR system, includes a stack of self-attention layers (e.g., Conformer or Transformer layers) or a recurrent network of stacked Long Short-Terni Memory (LSTM) layers. For instance, the encoder reads a sequence of d-dimensional feature vectors (e.g., acoustic frames
110 (
FIG. 1 ))ร=(x
1, x
2, . . . , x
T), where x
1 โ
d, and produces at each output step a higher-order feature representation. This higher-order feature representation is denoted as h
1 enc, . . . , h
T enc.
-
Similarly, the prediction network 220 is also an LSTM network, which, like a language model (LM), processes the sequence of non-blank symbols output by a final Softmax layer 240 so far, y0, . . . , yuiโ1, into a dense representation pu i . Finally, with the RNN-T model architecture, the representations produced by the encoder and prediction/ decoder networks 210, 220 are combined by the joint network 230. The prediction network 220 may be replaced by an embedding look-up table to improve latency by outputting looked-up sparse embeddings in lieu of processing dense representations. The joint network then predicts P(yi|xt i , y0, . . . , yuiโ1), which is a distribution over the next output symbol. Stated differently, the joint network 230 generates, at each output step (e.g., time step), a probability distribution over possible speech recognition hypotheses. Here, the โpossible speech recognition hypothesesโ correspond to a set of output labels each representing a symbol/character in a specified natural language. For example, when the natural language is English, the set of output labels may include twenty-seven (27) symbols, e.g., one label for each of the 26-letters in the English alphabet and one label designating a space. Accordingly, the joint network 230 may output a set of values indicative of the likelihood of occurrence of each of a predetermined set of output labels. This set of values can be a vector and can indicate a probability distribution over the set of output labels. In some cases, the output labels are graphemes (e.g., individual characters, and potentially punctuation and other symbols), but the set of output labels is not so limited. For example, the set of output labels can include wordpieces and/or entire words, in addition to or instead of graphemes. The output distribution of the joint network 230 can include a posterior probability value for each of the different output labels. Thus, if there are 100 different output labels representing different graphemes or other symbols, the output yi of the joint network 230 can include 100 different probability values, one for each output label. The probability distribution can then be used to select and assign scores to candidate orthgraphic elements (e.g., graphemes, wordpieces, and/or words) in a beam search process (e.g., by the Softmax layer 240) for determining the transcription 120.
-
The Softmax layer 240 may employ any technique to select the output label/symbol with the highest probability in the distribution as the next output symbol predicted by the RNN-T model 200 at the corresponding output step. In this manner, the RNN-T model 200 does not make a conditional independence assumption, rather the prediction of each symbol is conditioned not only on the acoustics but also on the sequence of labels output so far. The RNN-T model 200 does assume an output symbol is independent of future acoustic frames 110, which allows the RNN-T model to be employed in a streaming fashion.
-
In some examples, the encoder network (i.e., audio encoder) 210 of the RNN-T model 200 includes a stack of self-attention layers/blocks, such as conformer blocks. Here, each conformer block includes a series of multi-headed self attention, depth wise convolution and feed-forward layers. The prediction network 220 may have two 2,048-dimensional LSTM layers, each of which is also followed by 640-dimensional projection layer. Alternatively, the prediction network 220 may include a stack of transformer or conformer blocks, or a embedding look-up table in lieu of LSTM layers. Finally, the joint network 230 may also have 640 hidden units. The softmax layer 240 may be composed of a unified word piece or grapheme set that is generated using all unique word pieces or graphemes in a plurality of training data sets.
-
FIGS. 3A-3 illustrate an example training process 300 for pre-training the audio encoder 210 of the ASR model 200 (FIG. 2 ). The training process 300 may pre-train the audio encoder 210 using available training data that includes a set of unspoken textual utterances (Xtext) 320, a set of transcribed non-synthetic speech utterances (Xsup) 304, and un-transcribed non-synthetic speech utterances (Xunsup) 306. Each unspoken training text utterance 320 includes text-only data (i.e., unpaired data) such that each unspoken training text utterance 320 is not paired any corresponding spoken audio representation (speech) of the utterance. Each un-transcribed non-synthetic speech utterance 306 (also referred to as simply โun-transcribed speech utterance 306โ) includes audio-only data (i.e., unpaired data) such that the un-transcribed speech utterance 306 is not paired with any corresponding transcription. On the other hand, each transcribed non-synthetic speech utterance 304 (also referred to as simply โtranscribed speech utterance 304โ) includes a corresponding transcription 302 paired with a corresponding non-synthetic speech representation of the corresponding transcribed non-synthetic speech utterance 304.
-
For simplicity, the training process 300 includes a contrastive self-supervised loss part 300 a (FIG. 3A), a supervised loss part 300 b (FIG. 3B), and a consistency regularization part 300 c (FIG. 3C). The training process 300 pre-trains the audio encoder 210 on a total loss (Ltts4pretrain2) based on: contrastive losses (Lw2v) 316 derived using the contrastive self-supervised loss part 300 a from the unspoken textual utterances (Xtext) 320, a corpus of transcribed non-synthetic speech utterances (Xsup) 304, and un-transcribed non-synthetic speech utterances (Xunsup) 306, supervised losses (Laux) 344 derived using the supervised loss part 300 b from the unspoken textual utterances (Xtext) 320 and the transcribed non-synthetic speech utterances (Xsup) 304, and consistency losses (Lcons) 352 derived using the consistency regularization part 300 c
-
Referring to FIG. 3A, the contrastive self-supervised loss part 300 a of the training process 300 may employ a text-to-speech (TTS) system 330 that is configured to generate, at each of a plurality of output steps, synthesized speech representations (e.g., synthetic speech) 332 for each of a plurality of unspoken training text utterances 320. The unspoken training text utterances 320 (also referred to as simply โunspoken textual utterances 320โ) includes unspoken text that is text-only data, i.e., unpaired data, such that each unspoken textual utterance (e.g., Xtext) 320 is not paired with any synthesized or non-synthesized speech. Accordingly, the TT-S system 330 generates a corresponding synthesized speech representation 332 for each of the unspoken textual utterances 320. Notably, the synthesized speech representations 332 may include mel-frequency spectrogram frames for training the audio encoder 210 thereby eliminating the need for the training process 300 to include a vocoder and/or synthesizer to synhesize the mel-frequency spectrogram frames into synthesized speech.
-
The TTS system 330 may apply a speaker embedding, z, when converting the unspoken textual utterances 320 to generate synthetic speech representations 332 with a specific speaking style and prosody associated with the speaker embedding. The TTS system 330 may apply a multitude of different speaker embeddings z each associated with different speaker characteristics of the resulting utterance of synthesized speech representations 332 being synthesized. Similarly, the TTS system 330 may vary the prosodic and other production qualities of the utterances being synthesized.
-
In some examples, the training process 300 applies data augmentation to at least one of the sample utterances of synthetic speech representations 332. The data augmentation may include, without limitation, adding noise, manipulating timing (e.g., stretching), or adding reverberation to the corresponding speech representation. Data augmentation may add different synthesized recording conditions to the synthesized speech representations 332.
-
This pre-training batch generation process for generating the sample utterances of synthetic speech representations 332 advantageously samples new speaker and prosody conditioning values each time an unspoken textual utterance 320 is observed during training resulting in diverse synthetic utterances on subsequent observations. Thus, each batch contains both synthetic and real (non-synthetic) utterances. The loss contributions may be masked (see Eq. 4 below) using a loss mask a so losses are calculated for the appropriate batch elements.
-
In some examples, the audio encoder 210 includes a stack of self-attention layers that each include a multi-headed self-attention mechanism. For instance, the stack of self-attention layers may include a stack of Conformer layers or Transformer layers. In the examples shown, the audio encoder 210 includes a Conformer encoder including a stack of conformer blocks each of which includes a series of multi-headed self attention, depth wise convolution, and feed-forward layers. The Conformer encoder 210 can naturally be split into a feature encoder, including a convolution subsampling block 212, and a context network, including a linear layer 214 and a stack of Conformer blocks 216. In some implementations, the convolution subsampling block 212 has two two-dimensional-convolution layers, both with strides (2, 2), resulting in a 4ร reduction in the feature sequence length. The convolution subsampling block 212 receives, as input, a sequence of input features/vectors (e g., mel-frequency spectrograms such as the acoustic frames 110 of FIG. 1 ) associated with each synthesized speech representation 332, each transcribed non-synthetic speech utterance 304, and each un-transcribed non-synthetic speech utterance 306, and generates, as output, for each of a plurality of output steps, an encoded feature 211 that corresponds to a respective one of one of the synthesized speech representations 332, one of the transcribed non-synthetic speech utterances 304, or one of the un-transcribed non-synthetic speech utterances 306.
-
The encoded features
211 output from the
convolution subsampling block 212 may be fed to a
masking module 218 where some of the encoded features
211 are randomly chosen and replaced with a trained feature vector shared between all masked time steps to provide corresponding masked encoded
features 211 m. In some examples, the
masking module 218 masks the randomly chosen encoded
features 211 for masking by randomly sampling without replacement a certain proportion p of all time steps to be start indices and then mask the subsequent M consecutive time steps from every sample index, whereby some spans may overlap. After masking is applied, the
linear layer 214 and the Conformer blocks
216 of the context network receives the masked encoded
features 211 m and outputs corresponding
contrastive context vectors 215 from masked encoded
features 211 m. Moreover, a
quantizer 217 receives the encoded features
211, as input, and generates quantized vectors (i.e., target context vectors)
219 as output. Thereafter, a
contrastive loss module 315 derives a contrastive loss (
w2v)
316 between the
contrastive context vectors 215 at the masked positions and the
target context vectors 219 as follows
-
-
where ct is contrastive context vector 215 centered over a masked time step t and qt represents a target context vector 219 at the time step t in a set of K+1 candidate target context vectors 219 which includes qt and K distractors. Distractors may be uniformly sampled from other masked time steps of the same utterance.
-
The contrastive loss 316 is optimized between the contrastive context vectors 215 at the masked positions and the target context vectors 219. After the pre-trained audio encoder 210 converges on the un-transcribed non-synthetic speech utterances 306, the pre-training procedure is repeated on both the synthesized speech representations 332 and the transcribed non-synthetic speech utterances 304. Thus, the contrastive loss 316 is optimized for both real/human (non-synthetic) and synthetic (TTS audio) features, with additional auxiliary losses on the transcribed non-synthetic speech utterances 304 and the synthesized speech representations 332 as described in greater detail below with reference to FIG. 3B. Accordingly, the training process 300 pre-trains the audio encoder 210 on the derived contrastive loss 316 applied on the corresponding encoded features 211 associated with each synthesized speech representation 332, each transcribed non-synthetic speech utterance 304, and each un-transcribed non-synthetic speech utterance 306 provided as input to the audio encoder 210. Pre-training the audio encoder 210 may include updating parameters of the audio encoder based on the contrastive losses.
-
Referring to FIG. 3B, the supervised loss part 300 b of the training process 300 is configured to inject lexical information into the audio encoder 210 during pre-training based on supervised loss terms 342, 344 derived from the transcribed non-synthetic speech utterances 304 and the synthesized speech representations 332 generated by the TTS system 330 for the unspoken textual utterances 320. Notably, the supervised loss part 300 b leverages one or more auxiliary decoders 390 for generating the supervised loss terms 344, 346. The auxiliary decoders 390 may include Connectionist Temporal Classification (CTC) decoders, Listen Attend Spell (LAS) decoders, or RNN-T decoders. These auxiliary decoders 390 may include at least one of a phoneme decoder configured to decode a sequence of phonemes or a wordpiece decoder configured to decode a sequence of word pieces. The auxiliary decoders 390 could also include a grapheme decoder configured to decode a sequence of graphemes. In some examples, the training process 300 applies data augmentation to at least one of the sample utterances of synthetic speech representations 332 to provide one or more lexically-diverse synthetic speech representations 332 for a given unspoken training text utterance 320. The data augmentation may include, without limitation, adding noise, manipulating timing (e g., stretching), or adding reverberation to the corresponding speech representation. Data augmentation may add different synthesized recording conditions to the synthesized speech representations 332.
-
During the supervised loss part 300 b, the audio encoder 210 receives, as input, each synthetic speech representation 332 generated from the unspoken textual utterances 320 as a sequence of features/vectors (e g., mel-frequency spectrograms such as the acoustic frames 110 of FIG. 1 ) and generates, as output, for each of a plurality of time steps, a first encoded representation (etext) 312 that corresponds to the synthetic speech representation 332 at the corresponding time step. The auxiliary decoder 390 including the phoneme decoder or the wordpiece decoder receives, as input, each first encoded representation 312 output from the audio encoder 310 and generates, as output, a first probability distribution 392 over possible synthetic speech recognition hypotheses for the corresponding synthesized speech representation 332 at the corresponding time step. In some examples, the first probability distribution 392 over possible synthetic speech recognition hypotheses includes one of possible phoneme labels or possible word piece labels. Thereafter, a supervised loss module 340 may determine a synthetic speech loss term 342 based on the first probability distribution 392 over possible synthetic speech recognition hypotheses and the corresponding unspoken textual utterance 320. Here, the corresponding unspoken textual utterance 320 in which the synthesized speech representation 332 is generated from also serves as a ground-truth transcription. The supervised loss part 300 b may pre-train the audio encoder 210 on the synthetic speech loss term 342 by updating parameters of the audio encoder 210.
-
Similarly, during the supervised loss part 300 b, the audio encoder 210 receives, as input, each transcribed non-synthetic speech utterance 304 as a sequence of features/vectors (e.g., mel-frequency spectrograms such as the acoustic frames 110 of FIG. 1 ) and generates, as output, for each of a plurality of time steps, a second encoded representation (esup) 314 that corresponds to the transcribed non-synthetic speech utterance 304 at the corresponding time step. The auxiliary decoder 390 including the phoneme decoder or the wordpiece decoder receives, as input, each second encoded representation 314 output from the audio encoder 310 and generates, as output, a second probability distribution 394 over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance 304 at the corresponding time step. In some examples, the second probability distribution 394 over possible synthetic speech recognition hypotheses includes the one of the possible phoneme labels or the possible word piece labels. Thereafter, the supervised loss module 340 may determine a non-synthetic speech loss term 344 based on the second probability distribution 394 over possible non-synthetic speech recognition hypotheses and the corresponding transcription 302 paired with the transcribed non-synthetic speech utterance 304. Here, the corresponding transcription 302 serves as a ground-truth transcription and may include a sequence of target phonemes and/or target word pieces. The supervised loss part 300 b may pre-train the audio encoder 210 on the non-synthetic speech loss term 344 by updating parameters of the audio encoder 210.
-
In some implementations, the supervised loss part 300 b of the training process 300 uses another auxiliary decoder 390 to generate a third probability distribution 393 over possible synthetic speech recognition hypotheses based on the first encoded representation (etext) 312 for the synthetic speech representation 332 at the corresponding time step, whereby the supervised loss module 340 may determine another synthetic speech loss term 342 based on the third probability distribution and the unspoken textual utterance 320 corresponding to the synthetic speech representation. Here, the other auxiliary decoder 390 includes the other one of the phoneme decoder or the word piece decoder and the third probability distribution 393 over possible synthetic speech recognition hypotheses includes the other one of the possible phoneme labels or the possible word piece labels. In these implementations, the other auxiliary decoder 290 also generates a fourth probability distribution 395 over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance 304 at the corresponding time step, whereby the supervised loss module 340 may determine another non-synthetic speech loss term 344 based on the fourth probability distribution 395 and the corresponding transcription 302 that is paired with the transcribed non-synthetic speech utterance 304. Here, the fourth probability distribution 395 over possible non-synthetic speech recognition hypotheses the other one of the possible phoneme labels or the possible word piece labels. The supervised loss part 300 b of the training process 300 may similarly pre-train the audio encoder 210 on the other synthetic speech loss term 342 and the other non-synthetic speech loss term 344.
-
The un-transcribed
non-synthetic speech utterances 306 and the unspoken
textual utterances 320 each correspond to โunpairedโ training data whereby the contrastive loss (L
w2v)
316 (
FIG. 3A) derived from the unspoken textual utterances (X
text)
320 may be combined with the supervised loss
aux associated with the synthetic speech loss term
342 to obtain an unspoken textual loss function,
text, as follows.
-
text=
w2v(
x|ฮธ e)+
aux(
y|x,ฮธ e,ฮธ
d) (2)
-
Likewise, the contrastive loss (L
w2v)
316 (
FIG. 3A) derived from the un-transcribed non-synthetic speech utterances (X
unsup)
306 may be used to express an unsupervised speech loss function,
unsup_speech, as follows.
-
unsup_speech=
w2v(
x*|ฮธ e) (3)
-
During pre-training of the
audio encoder 210, the
synthetic speech representations 332 and the un-transcribed
non-synthetic speech utterances 306 are mixed within each batch. In order to force the
audio encoder 210 to learn representation that are effective for both synthetic and non-synthetic (human/real) speech, the loss mask ฯ is applied when combining the loss functions
text and of Eqs. 2 and 3 to obtain an unpaired data loss function,
unpaired, as follows.
-
unpaired=ฯ
text+(1โฯ)
speech (4)
-
The transcribed
non-synthetic speech utterances 304 corresponds to โpairedโ and โsupervisedโ training data whereby the derived contrastive loss (L
w2v)
316 (
FIG. 3A) and the derived supervised loss
aux associated with the non-synthetic speech loss term
344 may be combined to obtain a paired data loss function,
paired, as follows.
-
paired=
w2v(
x|ฮธ e)+
aux(
y|x,ฮธ e,ฮธ
d) (5)
-
Referring to
FIG. 3C, consistency regularization part
300 c of the
training process 300 is configured to promote the
audio encoder 210 to learn consistent predictions between non-synthetic speech (e g., real/human speech) and synthetic speech by generating a consistent loss term (
cons(ฮธ))
352 between training utterance pairs
301 that each include a corresponding one of the transcribed non-synthetic speech utterances (X
sup)
304 and a paired synthetic speech representation
334 of the same utterance as the corresponding transcribed
non-synthetic speech utterance 304. As such, the transcribed
non-synthetic speech utterance 304 and the paired synthetic speech representation of each training utterance pair is associated with a same ground-truth transcription. In short, the consistent loss term between the non-synthetic and synthetic speech representations of the same training utterance provides an unsupervised training aspect by encouraging the
audio encoder 210 to behave consistently regardless of whether the training utterance belongs to non-synthetic speech or synthetic speech and independent of supervised loss terms between the ground-
truth transcription 302 and each of, non-synthetic speech recognition hypotheses output by the
auxiliary decoder 390; and synthetic speech recognition hypothesis output by the
auxiliary decoder 390.
-
Similar to the synthetic speech representations 332 generated from the unspoken textual utterances 320 in FIG. 3B, the TTS system 330 may generate each paired synthetic speech representation 334 by performing text-to-speech conversion on the corresponding transcription 302 that is paired with the transcribed non-synthetic speech utterance 304. Here, the transcribed non-synthetic speech utterance 304 is associated with synthesized speech generated by the TTS system 330 by converting text associated with the ground-truth transcription 302 into synthesized audio. The TTS system 330 may apply a speaker embedding, z, when converting the ground-truth transcription (y*) 302 to obtain synthesized speech with a specific speaking style and prosody associated with the speaker embedding. Here, the ground-truth transcription (y*) 302 is associated with a source for supervised data augmentation in which the TTS system 330 generates the paired synthetic speech representation 334 that has an expectation of being consistent with the transcribed non-synthetic speech utterance (Xsup) 304 associated with the ground-truth transcription (y*) 302. In some examples, the training process 300 applies data augmentation to at least one of the transcribed non-synthetic speech utterance 304 or the paired synthetic speech representation 334 of at least one of the training utterance pairs 301. The data augmentation may include, without limitation, adding noise, manipulating timing (e g., stretching), or adding reverberation to the corresponding speech representation.
-
During the consistency regularization part 300 c, the audio encoder 210 receives, as input, each paired synthetic speech representation 334 as a sequence of features/vectors (e.g., mel-frequency spectrograms such as the acoustic frames 110 of FIG. 1 ) and generates, as output, for each of a plurality of time steps, an augmented encoded representation (e*sup) 313 that corresponds to the paired synthetic speech representation 334 at the corresponding time step. The auxiliary decoder 390 including the phoneme decoder or the wordpiece decoder receives, as input, each augmented encoded representation 313 output from the audio encoder 210 and generates, as output, a first probability distribution 31I over possible synthetic speech recognition hypotheses for the corresponding paired synthesized speech representation 334 at the corresponding time step. In some examples, the first probability distribution 311 over possible synthetic speech recognition hypotheses includes one of possible phoneme labels or possible word piece labels.
-
Similarly, the audio encoder 210 receives, as input, each transcribed non-synthetic speech utterance 304 as a sequence of features/vectors (e.g., mel-frequency spectrograms such as the acoustic frames 110 of FIG. 1 ) and generates, as output, for each of a plurality of time steps, a non-augmented encoded representation (esup) 314 that corresponds to the transcribed non-synthetic speech utterance 304 at the corresponding time step. The auxiliary decoder 390 including the phoneme decoder or the wordpiece decoder receives, as input, each non-augmented encoded representation 314 output from the audio encoder 310 and generates, as output, a second probability distribution 394 over possible non-synthetic speech recognition hypotheses for the corresponding transcribed non-synthetic speech utterance 304 at the corresponding time step. In some examples, the second probability distribution 394 over possible synthetic speech recognition hypotheses includes the one of the possible phoneme labels or the possible word piece labels.
-
With continued reference to
FIG. 3C, the consistency regularization part
300 c of the
training process 300 further determines, at each of the plurality of time steps for each training utterance pair
301, the consistent loss term (
cons(ฮธ))
352 for the corresponding training utterance pair
301 based on the
first probability distribution 311 over possible non-synthetic speech recognition hypotheses and the
second probability distribution 394 over possible non-synthetic speech recognition hypotheses. For instance, the
training process 300 may employ a consistency
loss term module 350 configured to receive, at each time step, the corresponding non-synthetic speech and synthetic speech recognition results
311,
394 output by the
auxiliary decoder 390, and determine the
consistency loss term 352 for the corresponding training utterance pair
301 at the time step.
-
In some examples, the consistency regularization part 300 c of the training process 300 determines the consistent loss term 352 based on a Kullback-Leibler divergence (DKL) between the first probability distribution 311 over possible synthetic speech recognition hypotheses and the second probability distribution 394 over possible non-synthetic speech recognition hypotheses. The consistent loss term 352 based on DKL may be expressed by the following equation.
-
cons(ฮธ)=
KL(
p {tilde over (ฮธ)}(
y|x)ฮผ
p ฮธ(
y|{circumflex over (x)})) (6)
-
Here, the consistent loss term 352 determined for the training utterance pair 301 at each time step provides an โunsupervisedโ loss term that is independent of the accuracy of the auxiliary decoder 390 (e.g., independent of the supervised loss terms 342, 344 of FIG. 3B), and thus, may be employed to update parameters of the audio encoder 210 for promoting consistency between non-synthetic and synthetic speech representations of same utterances. In batch training, the consistent loss term 352 may correspond to an average loss term obtained for the batch. In other words, the consistent loss term 352 permits the audio encoder 210 to learn to behave the same, e.g., make consistent encoded representation predictions on both non-synthetic speech (e.g., real/human speech) and synthetic speech (e.g., synthesized speech) of a same training utterance, regardless of whether the training utterance belongs to non-synthetic speech or synthetic speech.
-
Lastly, the
training process 300 may combine the unpaired data loss function (
unpaired), the paired data loss function (
paired), and the consistent loss term (
cons) to obtain an overall loss term,
tts4pretrain2, that may be expressed as follows.
-
tts4pretrain2=
unpaired+ฮป
1 paired+ฮป
2 cons (7)
-
where ฮป
1 may be equal to 1.0 and ฮป2 is equal to 0.1. The training process
300 may pre-train the audio encoder
210 using the overall loss term,
tts4pretrain2, by updating parameters of the
audio encoder 210 to effectively teach the
audio encoder 210 to learn shared representations between speech and text. After pre-training the
audio encoder 210, the
training process 300 may fine-tune the pre-trained audio encoder on transcribed speech utterances that may include supervised training samples of both synthetic (e g., synthesized speech) and non-synthetic (e.g., human speech).
-
In some implementations, the training process 300 for pre-training the audio encoder 210 applies encoder consistency regularization. Unlike decoder consistency regularization applied to auxiliary decoder(s) during the consistency regularization part 300 c that requires hypothesized labels (e.g., transcripts 302 and unspoken textual utterances 320), encoder consistency regularization does not require hypothesized labels and therefore has the advantage being allowed to be applied to all the training data 304, 306, 320. Encoder consistency regularization may be applied via Hierarchical Contrastive consistency Regularization (ORCR) techniques where encoder activations e, e* from original/non-augmented and augmented speech are projected through an auziliary network to generate z and z* Thereafter, positive and negative pairs are constructive and a contrastive loss lt,z,z* is calculated as follows.
-
-
Specific to HCCR, a Convolutional Neural Network (CNN) projection network may calculate projections over increasing length segments of encoder activations e (30, 50, 120 ms) to yield 3 views (V) and draw negative examples from the same utterance for short segments, and from other utterances in the batches with 120 ms segments. Accordingly, an HCCR loss may be calculated over the transcribed non-synthetic speech utterances 304 (paired speech), the un-transcribed non-synthetic speech utterances 306 (unpaired speech), and the synthetic speech representations (synthetic speech) generated from the unspoken textual utterances 320 as follows
-
-
The HCCR loss calculated by Eq. 9 may be added to Eq. 7 with a coefficient of 1e-3 as part of the overall loss term,
tts4pretrain2, for use in pre-training the
audio encoder 210.
-
Referring to FIG. 4 , a contrastive unspoken text selection process 400 may select the unspoken textual utterances 320 used for pre-training the audio encoder 210 from a large unspoken text corpus 402, whereby the selected unspoken textual utterances 320 are most similar to a specific domain the audio encoder 210 is being pre-trained to learn. That is, the text selection process 400 is able to identify in-domain and near-domain unspoken text from the unspoken text corpus 402 for inclusion in the unspoken textual utterances 320 for use in pre-training the audio encoder 210. Notably, unspoken textual utterances 320 selected by the text selection process 400 enables the synthesizing of distinct utterances on-the-fly during batch construction such that a new speaker embedding z and latent variable Z may be sampled each time an unspoken textual utterance 320 is in a batch.
-
The corpus of unspoken text 402 includes a multitude of unspoken training text utterances 320, 320 a-n from across a large range of domains, and includes a far greater linguistic diversity than the specific domain in which the audio encoder 210 is being trained to learn. As mentioned previously, the set of transcribed non-synthetic speech utterances 304 may be domain-specific in that they pertain to the specific domain and each transcribed non-synthetic speech utterance 304 is paired with a corresponding transcription 302. The corpus of unspoken text 402 may be stored in the same or different data store 401 as the spoken transcribed non-synthetic speech utterances (i.e., training utterances) 304. The corpus of unspoken text 402 may dynamically change to incorporate new unspoken textual utterances 320. Simply using all unspoken textual utterances 320 in the unspoken text corpus 402 is not feasible for the following reasons: i) for each sentence, the speech modality needs much more memory to be encoded than text, thereby making converting all text in the unspoken text corpus 402 impractical; and ii) the vast amount of difference between the transcriptions 302 paired with the transcribed non-synthetic speech utterances 304 and the unspoken textual utterances 320 in the unspoken text corpus 402 requires intelligent strategies to balance their contributions.
-
The text selection process 400 aims to select a subset of the available unspoken textual utterances 320 from the unspoken text corpus 402 as the data for TTS synthesis resulting in the synthetic speech representations 332 generated for pre-training the audio encoder 210 during the contrastive loss and supervised loss parts 300 a, 300 b of the training process 300 described above with reference to FIGS. 3A and 3B. Stated differently, the text selection process 400 aims to improve the match between the selected subset of the available unspoken textual utterances 320 and the specific domain being targeted, which in turn reduces the computational resources required to exploit a large amount of non-domain-specific data. Accordingly, the text selection process 400 reduces computational and memory costs by selecting unspoken textual utterances 320 that best match the specific domain the audio encoder 210 is being trained to learn.
-
In some examples, the text selection process 400 selects the subset of the available unspoken textual utterances 320 from the unspoken text corpus 402 that best match the specific domain by simply providing a domain identifier (not shown) associated with the specific domain as an input to the background LM 406 previously trained on the entire unspoken text corpus 402. As mentioned previously, the unspoken text corpus 402 spans a multitude of different domains. In these examples, the background LM 406 may include a maximum entropy (MaxEnt LM) capable of optionally accepting the domain identifier as input as described in U.S. Pat. No. 9,842,592, filed on Feb. 12, 2014, the contents of which is incorporated herein by reference in its entirety. Here, the domain identifier associated with the specific domain may allow the MaxEnt LM to output a subset of the available unspoken textual utterances 320 from the unspoken text corpus 402 that are likely to include words and/or phrases pertaining to the specific domain. In some configurations, rather than evaluating likelihood of words, a statistical language model operates in reverse mode to randomly generate a text phrase that matches a statistical distribution of words pertaining to the specific domain.
-
In additional examples, and as depicted in FIG. 4 , the text selection process 400 uses the transcriptions 302 paired with the transcribed non-synthetic speech utterances 304 spoken by human speakers to select the subset of the available unspoken textual utterances 320 from the unspoken text corpus 402 that best match the specific domain. Here, the transcribed non-synthetic speech utterances 304 include words, phrases, and/or other terminology pertaining to the specific domain. Optionally, in addition to, or in lieu of the transcriptions 302 paired with the transcribed non-synthetic speech utterances 304, a set of different transcribed utterances that pertain to the specific domain can be used for selecting the unspoken textual utterances 320. This would provide the advantage of not requiring all the transcribed non-synthetic speech utterances 304 to belong to the specific domain.
-
During a first stage (STAGE A), the unspoken text selection process 400 builds the two language models 404, 406 to enable contrastive selection of the unspoken textual utterances 320. Here, the domain-specific LM 410 is trained on each transcription 302 in the set of transcribed non-synthetic speech utterances 304. The set of transcribed non-synthetic speech utterances 304 is assumed to belong to the specific-domain for which the audio encoder 210 is being trained to learn. On the other hand, the background LM 406 is trained on each unspoken textual utterance 320 in the entire unspoken text corpus 402. As mentioned previously, the unspoken text corpus 402 spans a multitude of different domains. In some examples, the first stage uses n-gram language model training to build the two language models 404, 406. In other examples, the first stage uses neural network language model training to build the two language models 404, 406.
-
During a second state (STAGE B), the unspoken
text selection process 400 uses the two
contrastive LMs 404,
406 to evaluate each unspoken
textual utterance 320 in the unspoken text corpus
402 by determining a first probability, P(w|
), associated with each word in the unspoken
textual utterance 320 appearing in the domain-
specific LM 404 and determining a second probability, P(w|
), associated with each word in the unspoken
textual utterance 320 appearing in in the
background LM 406. Thereafter, for each unspoken
textual utterance 320 in the unspoken text corpus
402, the
text selection process 400 determines, at a
scorer 408, a score, S, based on the first probability, the second probability, and a number of words, #(w), appearing in the corresponding unspoken
textual utterance 320. For example, the score S for each unspoken
textual utterance 320 may be calculated as follows
-
-
After determining the scores, the unspoken text selection process 400 selects the unspoken textual utterances 320 with the N-best scores S as these unspoken textual utterances 320 best match the specific domain. The unspoken text corpus 402 may include billions of unspoken textual utterances 320. The unspoken textual utterances 320 selected by the text selection process 400 can include millions of utterances, and thus, far exceed the number of un-transcribed non-synthetic speech utterances 306 spoken by human speakers. As discussed above, the content of the unspoken textual utterances 320 increases linguistic diversity for the specific domain the audio encoder 210 is being trained to learn, while corresponding synthetic speech representations 332 generated from the unspoken textual utterances 320 increases acoustic/lexical diversity for the speech that the audio encoder 210 is encoding as part of the speech recognition process when the audio encoder 210 is integrated within the ASR model 200.
-
FIG. 5 illustrates an example projected space 500 of encoder representations of synthetic (TTS) and non-synthetic (real/human) speech utterances. After introducing consistency regularization via the consistency regularization part 300 c of FIG. 3C for pre-training the audio encoder, the resulting speech and text encoder representations learned stay much closer to each other compared to the speech and text encoder representations when consistency regularization is not applied. Accordingly, the projected space 500 shows that the use of supervised training data (i.e., the transcribed non-synthetic speech utterances) for pre-training the audio encoder 210 effectively generates improved shared speech and text representations.
-
FIG. 6 is a flowchart of an example arrangement of operations for a method 600 of pre-training an audio encoder 210 to jointly learn shared representations of speech and text. The method 600 may execute on data processing hardware 710 (FIG. 7 ) using instructions stored on memory hardware 720 (FIG. 7 ). The data processing hardware 710 and the memory hardware 720 may reside on the remote computer/server 201 of FIG. 1 corresponding to a computing device 700 (FIG. 7 ).
-
At operation 602, the method 600 includes receiving training data that includes unspoken textual utterances 320, un-transcribed non-synthetic speech utterances 306, and transcribed non-synthetic speech utterances 304. Each unspoken textual utterance 320 is not paired with any corresponding spoken utterance of non-synthetic speech. Each un-transcribed non-synthetic speech utterance 306 is not paired with a corresponding transcription. Each transcribed non-synthetic speech utterance 304 is paired with a corresponding transcription 302.
-
At operation 604, the method 600 also includes generating, using a text-to-speech (TTS) system 330, a corresponding synthetic speech representation 332 for each unspoken textual utterance 320 of the received training data. At operation 606, the method also includes pre-training the audio encoder 210 on the synthetic speech representations 332 generated for the unspoken textual utterances 320, the un-transcribed non-synthetic speech utterances 306, and the transcribed non-synthetic speech utterances 304 to teach the audio encoder 210 to jointly learn shared speech and text representations. The pre-training may include pre-training the audio encoder 210 based on contrastive losses 315 derived from each of the synthetic speech representations 332, the un-transcribed non-synthetic speech utterances 306, and the transcribed non-synthetic speech utterances 304. The pre-training may also include pre-training the audio encoder 210 based on supervised losses 342, 344 (e.g., auxiliary decoder losses) derived from the synthetic speech representations 332 and the transcribed non-synthetic speech utterances 304. Lastly, pre-training may additionally include pre-training the audio encoder 210 based on consistency losses 352 derived from the transcribed non-synthetic speech utterances 304.
-
A software application (i.e., a software resource) may refer to computer software that causes a computing device to perform a task. In some examples, a software application may be referred to as an โapplication,โ an โapp,โ or a โprogramโ Example applications include, but are not limited to, system diagnostic applications, system management applications, system maintenance applications, word processing applications, spreadsheet applications, messaging applications, media streaming applications, social networking applications, and gaming applications.
-
The non-transitory memory may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by a computing device. The non-transitory memory may be volatile and/or non-volatile addressable semiconductor memory. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
-
FIG. 7 is schematic view of an example computing device 700 that may be used to implement the systems and methods described in this document. The computing device 700 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations of the inventions described and/or claimed in this document.
-
The computing device 700 includes a processor 710, memory 720, a storage device 730, a high-speed interface/controller 740 connecting to the memory 720 and high-speed expansion ports 750, and a low speed interface/controller 760 connecting to a low speed bus 770 and a storage device 730. Each of the components 710, 720, 730, 740, 750, and 760, are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate. The processor 710 can process instructions for execution within the computing device 700, including instructions stored in the memory 720 or on the storage device 730 to display graphical information for a graphical user interface (GUI) on an external input/output device, such as display 780 coupled to high speed interface 740. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also, multiple computing devices 700 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
-
The memory 720 stores information non-transitorily within the computing device 700. The memory 720 may be a computer-readable medium, a volatile memory unit(s), or non-volatile memory unit(s). The non-transitory memory 720 may be physical devices used to store programs (e.g., sequences of instructions) or data (e.g., program state information) on a temporary or permanent basis for use by the computing device 700. Examples of non-volatile memory include, but are not limited to, flash memory and read-only memory (ROM)/programmable read-only memory (PROM)/erasable programmable read-only memory (EPROM)/electronically erasable programmable read-only memory (EEPROM) (e.g., typically used for firmware, such as boot programs). Examples of volatile memory include, but are not limited to, random access memory (RAM), dynamic random access memory (DRAM), static random access memory (SRAM), phase change memory (PCM) as well as disks or tapes.
-
The storage device 730 is capable of providing mass storage for the computing device 700. In some implementations, the storage device 730 is a computer-readable medium. In various different implementations, the storage device 730 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In additional implementations, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the memory 720, the storage device 730, or memory on processor 710.
-
The high speed controller 740 manages bandwidth-intensive operations for the computing device 700, while the low speed controller 760 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In some implementations, the high-speed controller 740 is coupled to the memory 720, the display 780 (e g., through a graphics processor or accelerator), and to the high-speed expansion ports 750, which may accept various expansion cards (not shown). In some implementations, the low-speed controller 760 is coupled to the storage device 730 and a low-speed expansion port 790. The low-speed expansion port 790, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet), may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
-
The computing device 700 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 700 a or multiple times in a group of such servers 700 a, as a laptop computer 700 b, or as part of a rack server system 700 c.
-
Various implementations of the systems and techniques described herein can be realized in digital electronic and/or optical circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
-
These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms โmachine-readable mediumโ and โcomputer-readable mediumโ refer to any computer program product, non-transitory computer readable medium, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term โmachine-readable signalโ refers to any signal used to provide machine instructions and/or data to a programmable processor.
-
The processes and logic flows described in this specification can be performed by one or more programmable processors, also referred to as data processing hardware, executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by special purpose logic circuitry, e g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer. Generally, a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto optical disks, or optical disks. However, a computer need not have such devices. Computer readable media suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
-
To provide for interaction with a user, one or more aspects of the disclosure can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube). LCD (liquid crystal display) monitor, or touch screen for displaying information to the user and optionally a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback, e.g., visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. In addition, a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
-
A number of implementations have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly, other implementations are within the scope of the following claims.