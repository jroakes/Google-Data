US8868591B1 - Modifying a user query to improve the results - Google Patents
Modifying a user query to improve the results Download PDFInfo
- Publication number
- US8868591B1 US8868591B1 US13/239,236 US201113239236A US8868591B1 US 8868591 B1 US8868591 B1 US 8868591B1 US 201113239236 A US201113239236 A US 201113239236A US 8868591 B1 US8868591 B1 US 8868591B1
- Authority
- US
- United States
- Prior art keywords
- variants
- given query
- query suggestion
- queries
- selecting
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Expired - Fee Related, expires
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/30—Information retrieval; Database structures therefor; File system structures therefor of unstructured textual data
- G06F16/33—Querying
- G06F16/332—Query formulation
- G06F16/3322—Query formulation using system suggestions
Definitions
- the present invention relates to query formulation. In particular, it relates to identifying variants of search queries which potentially improve search results.
- Information retrieval systems such as Internet search engines, are responsive to a user's query to retrieve information about accessible resources such as Web pages, images, text documents and multimedia content.
- a search engine may use a variety of statistical measures to determine the relevance of the resources to the user's query.
- a user can have difficulty formulating a query that accurately represents the user's information need.
- a user unfamiliar with the language of the resources being searched may use unconventional query terms.
- users may use terms which are too specific or general to yield high quality search results.
- the search engine may return a number of resources which are unrelated to the informational need of the user.
- the user may have to enter a number of different queries about the same topic before reaching resources that are of interest to the user.
- the user's queries may include variations in the query terms, variations in the number of terms, and variations in the order of the terms. Refining the search can be a time-consuming and frustrating experience for the user.
- a search engine may suggest queries to the user.
- Some search engines provide suggested queries to the user as the user is typing the query.
- the search engines typically provide suggested queries which contain the user's query, essentially completing the query by typing ahead for the user.
- a method for selecting at least one variant of a given query suggestion.
- the method includes calculating similarity scores between a given query suggestion and unique queries that do not include the given query suggestion as a prefix.
- the similarity score for a unique query is based at least in part on similarity of terms in the given query suggestion and terms in the unique query.
- the unique queries are past queries submitted to one or more search engines.
- the method further includes selecting one or more of the unique queries as candidate variants of the given query suggestion based at least in part on the similarity scores for the unique queries.
- the method further includes selecting one or more of the candidate variants as selected variants of the given query suggestion using query utility scores for the candidate variants.
- a query utility score for a candidate variant is based on user response to the candidate variant during one or more prior queries.
- the method further includes storing data associating the given query suggestion with the selected variants for use in determining an alternative suggestion for the given query suggestion from among the selected variants.
- implementations may include a non-transitory computer readable storage medium storing instructions executable by a processor to perform a method as described above.
- implementations may include a system including memory and one or more processors operable to execute instructions, stored in the memory, to perform a method as described above.
- Particular embodiments of the subject matter described herein can be implemented for identifying alternative suggestions which potentially improve on a given query suggestion, without being perceived by a user as being offensive different from the user's query.
- the alternative suggestions may for example be different query formulations that relate to the same topic as that of the given query suggestion.
- Selecting the one or more of the candidate variants as selected variants can include selecting candidate variants having query utility scores greater than that of the given query suggestion.
- Calculating the similarity scores for the unique queries can include canonicalizing the given query suggestion and the unique queries into respective canonical representations using canonicalization rules.
- the canonical representation of the given query suggestion can then be compared against that of the unique queries to produce the similarity scores.
- the selection of one or more of the unique queries as candidate variants can include selecting unique queries which have canonical representations identical to that of the given query suggestion.
- Selecting the one or more of the candidate variants as selected variants can include sorting the candidate variants using the query utility scores to create a ranking. One or more unique queries can then be selected as selected variants based at least in part on the ranking.
- the method can be extended by selecting a predetermined number of highest ranked candidate variants as a selected variant. The method can be further extended by the predetermined number being one.
- Selecting the one or more of the unique queries as candidate variants can include selecting unique queries having similarity scores above a threshold.
- the method can further include receiving the given query suggestion.
- One or more of the selected variants can then be sent in response to receiving the given query suggestion.
- the method can further include where the unique queries further do not include the given query suggestion as a substring.
- FIG. 1 illustrates a block diagram of an example environment in which selecting variants for a given query suggestion can be used.
- FIG. 2 is a block diagram of an example computer system.
- FIG. 3 is a block diagram illustrating example modules within the query variant engine in accordance with one embodiment.
- FIG. 4 is a flow chart illustrating an example process for selecting variants of a given query suggestion.
- FIG. 5 is a flow chart illustrating an example process for producing similarity scores.
- FIG. 6 illustrates examples of queries and their canonical forms.
- FIG. 7 illustrates an example of the mapping between queries and suggested query variants.
- FIGS. 8A and 8B illustrate examples of the mapping between query suggestions and selected variants.
- FIGS. 9A and 9B are screen shots illustrating example environments that can be used to provide suggestions to a user.
- the present invention relates to the identification of alternative suggestions which potentially improve on a given query suggestion, without being perceived by a user as being offensively different from the user's query.
- the given query suggestion is a suggestion for a user's query that may be identified using conventional of other techniques.
- the alternative suggestions may for example be different query formulations that relate to the same topic as that of the given query suggestion.
- the technology disclosed uses similarity screening of the given query suggestion against unique queries which do not include the given query suggestion as a prefix, in conjunction with query utility scores based on prior user response to the unique queries.
- At least one variant to suggest as an alternative suggestion to a subsequent computerized process, responsive to a given query suggestion, is selected.
- Selected variants for the given query suggestion will typically be pre-calculated and stored for use by one or more subsequent processes.
- the technology includes processing the given query suggestion against unique queries that do not include the given query suggestion as a prefix, or some other criteria.
- a prefix is a sequence of one or more terms occurring at a beginning of a query.
- a unique query includes the given query suggestion as a prefix if the unique query begins with a sequence that includes all the terms in the given query suggestion, in the same order as the term occur in the given query suggestion.
- the unique queries further do not include the given query suggestion as a substring.
- Query A is a ‘substring’ in query B if query B includes all the terms of query A in the same order as the terms occur in query A, with no additional terms between them.
- query “best pizza dough” is a substring in query “the best pizza dough recipe”. (Extraneous blanks are ignored.)
- query “recipe pizza dough” is not a substring in query “the best pizza dough recipe”.
- Similarity scores are calculated for the unique queries based at least in part on similarity of terms in the given query suggestion and in the unique queries.
- the given query suggestion and the unique queries are canonicalized into respective canonical representations using canonicalization rules. Examples of canonicalization rules are given below.
- the canonical representation of the given query suggestion can then be compared against that of the unique queries to produce the similarity scores.
- other techniques may be used to produce the similarity scores.
- Candidate variants are selected from among the unique queries based, at least in part, on the similarity scores.
- Selected variants for the given query suggestion are then selected from the candidate variants using query utility scores or some other criteria.
- the query utility scores are based on user response to the candidate variants during prior queries.
- the query utility scores may for example be based on the frequency of the queries in the log files.
- Data associating the selected variants with the given query suggestion are then stored for use by a subsequent computerized process in determining an alternative suggestion for the given query suggestion.
- FIG. 1 illustrates a block diagram of an example environment 100 in which selecting variants for a given query suggestion can be used.
- the environment 100 includes client computing devices 110 , 112 and a search engine 150 .
- the environment 100 also includes a communication network 140 that allows for communication between various components of the environment 100 .
- the client computing devices 110 , 112 and the search engine 150 each include memory for storage of data and software applications, a processor for accessing data and executing applications, and components that facilitate communication over the communication network 140 .
- the computing devices 110 , 112 execute applications, such as web browsers (e.g. web browser 120 executing on computing device 110 ), that allow users to formulate queries and submit them to the search engine 150 .
- the search engine 150 receives queries from the computing devices 110 , 112 , and executes the queries against a content database 160 of available resources such as Web pages, images, text documents and multimedia content.
- the search engine 150 identifies content which matches the queries, and responds to the queries by generating search results which are transmitted to the computing devices 110 , 112 in a form that can be presented to the users. For example, in response to a query from the computing device 110 , the search engine 150 may transmit a search results web page to be displayed in the web browser 120 executing on the computing device 110 .
- the search engine 150 maintains log files 135 of user session query data associated with the past queries received from users. It may maintain an anonymous log of queries, not traceable to a particular user, or it may maintain a user specific log for the user's future reference, at the user's request.
- the log files 135 may be collectively stored on one or more computers and/or storage devices.
- the log files 135 may include information such as which results were selected by users after a search was performed on a particular query, and how long each selected result was viewed by a user.
- Past queries that do not appear more than a threshold number of times may be filtered out. Alternatively, queries may be obtained using other techniques.
- the log files 135 are used by a suggestion engine 170 to generate query utility scores of the past queries.
- the suggestion engine 170 includes memory for storage of data and software applications, a processor for accessing data and executing applications, and components that facilitate communication over the communication network 140 .
- the calculation of query utility scores is not part of the technology disclosed. The technology disclosed supposes that query utility scores will be available for the unique queries that are evaluated. The query utility scores may for example be based on the frequency of the queries in the log files 135 .
- the query utility scores are based on user responses to the past queries based on the user behavior, to estimate user satisfaction with the past queries.
- the query utility scores are thus a measure of the search result quality of the associated queries stored in the log files 135 . The expected improvement in search quality of one query over another can then be determined by comparing their respective query utility scores.
- the environment 100 also includes a query variant engine 130 that processes the queries in the log files 135 to identify variants which potentially improve on a given query suggestion using the techniques described herein.
- the query variant engine 130 can be implemented in hardware, firmware, and/or software running on hardware. The query variant engine 130 is described in more detail below and with reference to FIGS. 3 to 8 A- 8 B.
- the search engine 150 may forward the user's query to the suggestion engine 170 .
- the suggestion engine 170 provides one or more query suggestions for the user's query to the query variant engine 130 .
- the suggestion engine 170 may use conventional of other techniques to identify query suggestions for the user's query. These query suggestions may be past queries submitted by prior users and that include the user's query.
- the query suggestions may be based on popularity. In one implementation, popularity is based on frequency with which prior users submitted the query suggestions as search queries.
- the suggestion engine 170 may also use other factors to select query suggestions.
- the query variant engine 130 provides selected variants of the query suggestions to the suggestion engine 170 using the techniques described herein.
- the selected variants represent suggestions that the suggestion engine 170 may provide to users as alternatives to the identified query suggestions.
- One or more of the selected variants can then be chosen by the suggestion engine 170 and provided as final suggestions to a user.
- These final suggested query variants represent queries that the users of the computing devices 110 , 112 may want to submit in addition to, or instead of, the query actually typed or submitted.
- the network 140 facilitates communication between the various components in the environment 100 .
- the network 140 may utilize a combination of dedicated or private communications links and public communication links.
- the network 140 uses standard communications technologies, protocols, and/or inter-process communications techniques.
- the environment 100 can include multiple search engines.
- the environment 100 will also generally include many more computing devices that submit queries to the search engines.
- FIG. 2 is a block diagram of an example computer system.
- Computer system 210 typically includes at least one processor 214 which communicates with a number of peripheral devices via bus subsystem 212 .
- peripheral devices may include a storage subsystem 224 , comprising for example memory devices and a file storage subsystem, user interface input devices 222 , user interface output devices 220 , and a network interface subsystem 216 .
- the input and output devices allow user interaction with computer system 210 .
- Network interface subsystem 216 provides an interface to outside networks, including an interface to communication network 140 , and is coupled via communication network 218 to corresponding interface devices in other computer systems.
- Communication network 218 may comprise many interconnected computer systems and communication links. These communication links may be wireline links, optical links, wireless links, or any other mechanisms for communication of information. While in one embodiment, communication network 218 is the Internet, in other embodiments, communication network 218 may be any suitable computer network.
- User interface input devices 222 may include a keyboard, pointing devices such as a mouse, trackball, touchpad, or graphics tablet, a scanner, a touchscreen incorporated into the display, audio input devices such as voice recognition systems, microphones, and other types of input devices.
- pointing devices such as a mouse, trackball, touchpad, or graphics tablet
- audio input devices such as voice recognition systems, microphones, and other types of input devices.
- use of the term “input device” is intended to include possible types of devices and ways to input information into computer system 210 or onto communication network 218 .
- User interface output devices 220 may include a display subsystem, a printer, a fax machine, or non-visual displays such as audio output devices.
- the display subsystem may include a cathode ray tube (CRT), a flat-panel device such as a liquid crystal display (LCD), a projection device, or some other mechanism for creating a visible image.
- the display subsystem may also provide non-visual display such as via audio output devices.
- output device is intended to include all possible types of devices and ways to output information from computer system 210 to the user or to another machine or computer system.
- Storage subsystem 224 stores programming and data constructs that provide the functionality of some or all of the modules described herein, including the logic to select suggested variants for a given query suggestion according to the processes described herein. These software modules are generally executed by processor 214 alone or in combination with other processors.
- Memory 226 used in the storage subsystem can include a number of memories including a main random access memory (RAM) 232 for storage of instructions and data during program execution and a read only memory (ROM) 230 in which fixed instructions are stored.
- a file storage subsystem 228 can provide persistent storage for program and data files, and may include a hard disk drive, a floppy disk drive along with associated removable media, a CD-ROM drive, an optical drive, or removable media cartridges.
- the modules implementing the functionality of certain embodiments may be stored by file storage subsystem in the storage subsystem 224 , or in other machines accessible by the processor.
- Bus subsystem 212 provides a mechanism for letting the various components and subsystems of computer system 210 communicate with each other as intended. Although bus subsystem 212 is shown schematically as a single bus, alternative embodiments of the bus subsystem may use multiple busses.
- Computer system 210 can be of varying types including a workstation, server, computing cluster, blade server, server farm, or any other data processing system or computing device. Due to the ever-changing nature of computers and networks, the description of computer system 210 depicted in FIG. 2 is intended only as a specific example for purposes of illustrating the preferred embodiments. Many other configurations of computer system 210 are possible having more or less components than the computer system depicted in FIG. 2 .
- FIG. 3 is a block diagram illustrating example modules within the query variant engine 130 in accordance with one embodiment.
- the query variant engine 130 includes a query similarity module 300 and a selection module 310 .
- Some embodiments may have different and/or additional modules than those shown in FIG. 3 .
- the functionalities can be distributed among the modules in a different manner than described herein.
- the query similarity module 300 retrieves unique queries by processing the past queries stored in the log files 135 .
- unique queries can be obtained using other techniques.
- the query similarity module 300 also retrieves a given query suggestion.
- the given query suggestion may be retrieved by processing a suggestion log of past suggestions provided to prior users by the suggestion engine 170 .
- the suggestion log may be maintained by the suggestion engine 170 .
- the suggestion log can include suggestion session information including the past suggestions that were provided to prior users in response to a corresponding user query.
- the query similarity module 300 may retrieve or otherwise obtain a given query suggestion.
- the query similarity module 300 may retrieve the given query suggestion by processing the past queries stored in the log files 135 .
- the query similarity module 300 then processes a given query suggestion against unique queries that do not include the given query suggestion as a prefix to calculate similarity scores for the unique queries. Similarity scores are calculated for the unique queries based at least in part on similarity of terms in the given query suggestion and terms in the unique queries.
- the similarity score for a particular unique query may be low if the given query suggestion is a question and the particular unique query is not a question.
- the similarity score may be low if terms in the particular unique query have opposite meaning to terms in the given query suggestion. For example, “flight to” has the opposite meaning of “flight from”.
- the similarity score may be low if the particular unique query contains a singular form of a word, and the given query suggestion contains a plural form of the same word.
- the similarity score may be low if the particular unique query and the given query suggestion belong to different languages.
- two or more similarity scores may be generated using different similarity criteria. The final similarity score may for example be a weighted average of these two or more similarity scores.
- the selection module 310 selects one or more of the unique queries as candidate variants for the given query suggestion based at least in part on the similarity scores for the unique queries.
- the number of unique queries that are selected as candidate variants for the given query suggestion can vary from embodiment to embodiment.
- a set of unique queries having similarity scores above a threshold are identified.
- the unique queries selected as candidate variants may for example include all the unique queries in the set.
- additional criteria may be applied to the set of unique queries to select the final candidate variants. If none of the unique queries have a similarity score above the threshold, the selection module 310 may flag the given query suggestion as not having a candidate variant.
- the selection module 310 selects one or more of the candidate variants as selected variants for the given query suggestion using the query utility scores for the candidate variants.
- the criteria for selecting the selected variants can vary from embodiment to embodiment.
- the candidate variants are sorted using the query utility scores to create a ranking, and the one or more of the selected variants are selected based on the ranking.
- other criteria may be used.
- the query utility scores of the candidate variants may be compared to a threshold and the ones that satisfy the threshold may be selected.
- the number of candidate variants selected as selected variants can vary from embodiment to embodiment. In one embodiment, only the highest ranked candidate variant is selected as a selected variant. Alternatively, the number of highest ranked candidate variants that are selected may be a predetermined number that is greater than one. For example, the two or three highest ranked candidate variants may be selected. If none of the candidate variants have a query utility score greater than that of the given query suggestion, the selection module 310 may flag the given query suggestion as not having a selected variant. In one embodiment, if the query utility score of the given query suggestion is above a threshold, the selection module 310 may flag the given query suggestion as not having a selected variant.
- the selection module 310 then stores data associating the given query suggestion with the selected variants for use in determining an alternative suggestion for the given query suggestion from among the selected variants.
- FIG. 4 is a flow chart illustrating an example process for selecting variants of a given query suggestion. Other embodiments may perform the steps in different orders and/or perform different or additional steps than the ones illustrated in FIG. 4 .
- FIG. 4 will be described with reference to a system of one or more computers that performs the process.
- the system can be, for example, the query variant engine 130 described above with reference to FIG. 1 .
- the system retrieves a given query suggestion.
- the system also retrieves unique queries that do not include the given query suggestion as a prefix from the log files 135 or using other techniques.
- the system calculates a similarity score between the given query suggestion and each of the unique queries.
- the similarity score for a unique query is based at least in part on similarity of terms in the given query suggestion and terms in the unique query.
- the similarity scores and the range of values can be calculated using the techniques described above.
- the system selects one or more of the unique queries as the candidate variants based at least in part on the similarity scores for the unique queries, for example, as described above with reference to FIG. 3 .
- the system then selects one or more of the candidate variants as selected variants using the query utility scores for the candidate variants, for example, as described above with reference to FIG. 3 .
- the system stores data associating the given query suggestion with the selected variants for use in determining an alternative suggestion for the given query suggestion.
- the steps 400 , 410 , 420 , 430 , 440 can then be repeated until selected variants, if any, for the remaining query suggestions have been selected.
- FIG. 5 is a flow chart illustrating an example process for producing similarity scores in step 410 .
- Other embodiments may perform the steps in different orders and/or perform different or additional steps than the ones illustrated in FIG. 5 .
- FIG. 5 will be described with reference to a system of one or more computers that performs the process.
- the system can be for example, the query variant engine 130 described above with reference to FIG. 1 .
- the system canonicalizes the given query suggestion and the unique queries into canonical representations using canonicalization rules.
- the canonicalization rules can vary from embodiment to embodiment. Examples of canonicalization rules include stemming, stopword removal, word reordering, and removing duplicate terms.
- Canonicalization includes the process of converting the terms in a query into a standard form by replacing the terms with their canonical forms when the terms meet certain canonicalization rules. Canonicalization also includes alphabetical reordering of the canonical forms of the terms and removal of identical terms. With canonicalization, different queries that represent the same or similar user informational intent can be matched, so that suggested query variants can be selected which most likely capture the user's information need.
- the system compares the canonical representation of the given query suggestion to that of the unique queries to produce the similarity scores.
- the similarity score of a particular unique query is assigned the highest value (e.g. ‘1’) if there is an exact match between its canonical form and that of the given query suggestion. Otherwise, the similarity score is assigned the lowest value (e.g. ‘0’).
- the unique queries which will be subsequently selected as candidate variants will have canonical representations identical to that of the given query suggestion.
- the similarity scores may have a value between a range, rather than a discrete value.
- FIG. 6 illustrates examples of queries and their canonical forms.
- the queries are converted into canonical form through the removal of stopwords such as “how” and “best”, stemming, removal of duplicate terms, and the alphabetical reordering of remaining terms.
- FIG. 7 illustrates an example of the mapping between query suggestions and selected variants.
- query Q2 is a selected variant, V, for each of the query suggestions Q1, Q3 and Q4.
- FIGS. 8A and 8B illustrate examples of the mapping between query suggestions and selected variants.
- the query suggestion “dog pictures” is a selected variant of each of the queries “dogs pictures”, “pictures of dogs” and “best dog picture”.
- the query suggestion “pizza dough recipe” is a selected variant of each of the query suggestions shown in the figure.
- data associating the selected variants with the given query suggestion is stored by the query variant engine 130 for use by a subsequent computerized process that determines an alternative suggestion for the given query suggestion from among the selected variants.
- the suggestion engine 170 can then operate in conjunction with the query variant engine 130 to make final suggestions to the user.
- These final suggestions represent queries that the users of the computing devices 110 , 112 may want to submit in addition to, or instead of, the queries actually typed and/or submitted.
- the query variant engine 130 may use additional criteria to determine whether to provide the selected variants at all, and if so, how prominently the selected variants should be placed in comparison to the given query suggestion which may contain the user's query. These additional criteria may include for example, whether the user's query, the given query suggestion and the selected variants have the same prefix. Other criteria may include whether the given query suggestion and the selected variants are equivalent under weaker canonicalization rules, or if a circular shift of size one for the selected variants results in the given query suggestion. These weaker canonicalization rules may include for example punctuation, stemming, url removal and stops words removal. Other criteria may include whether the given query suggestion and the selected variants share at least half of their search results. Other criteria may include whether the term in the selected variants that corresponds to the last term in the given query suggestion is a stop word.
- the final suggestions may for example be embedded by the search engine 150 within a search results web page to be displayed in the web browser 120 executing on the computing device 110 .
- the final suggestions may be displayed within a cascaded drop menu of the search field of an application, such as a web browser, as the user is typing a query.
- FIGS. 9A and 9B are screen shots illustrating example environments that can be used to provide suggestions to a user.
- the partial screen shot includes a search field representation 900 and a search button representation 910 .
- a cascaded drop menu 920 of the search field is displayed which includes selected variants which potentially improve on past query suggestions for the user's query.
- the cascaded drop down menu 920 includes final suggestion “what is the dollar worth” is a selected variant, which does not include the user's query “what the dollar” as a prefix.
- the partial screen shot includes a search field representation 930 and a search button representation 940 .
- a cascaded drop menu 950 of the search field is displayed which includes selected variants which potentially improve on the past query suggestions for user's query.
- the cascaded drop down menu 950 includes final suggestion “what is the dollar worth” is a selected variant, which does not include the user's query “one dollar's” as a prefix.
- the present invention may be embodied in methods for selecting variants for a given query suggestion, systems including logic and resources to select variants for a given query suggestion, systems that take advantage of computer-assisted methods for selecting variants for a given query suggestion, media impressed with logic to select variants for a given query suggestion, data streams impressed with logic to select variants for a given query suggestion, or computer-accessible services that carry out computer-assisted methods for selecting variants for a given query suggestion. It is contemplated that modifications and combinations will readily occur to those skilled in the art, which modifications and combinations will be within the spirit of the invention and the scope of the following claims.
Abstract
Description
Claims (24)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/239,236 US8868591B1 (en) | 2011-06-22 | 2011-09-21 | Modifying a user query to improve the results |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201161499966P | 2011-06-22 | 2011-06-22 | |
US13/239,236 US8868591B1 (en) | 2011-06-22 | 2011-09-21 | Modifying a user query to improve the results |
Publications (1)
Publication Number | Publication Date |
---|---|
US8868591B1 true US8868591B1 (en) | 2014-10-21 |
Family
ID=51702427
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/239,236 Expired - Fee Related US8868591B1 (en) | 2011-06-22 | 2011-09-21 | Modifying a user query to improve the results |
Country Status (1)
Country | Link |
---|---|
US (1) | US8868591B1 (en) |
Cited By (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20140195519A1 (en) * | 2011-07-28 | 2014-07-10 | Lexisnexis, A Division Of Reed Elsevier Inc. | Search Query Generation Using Query Segments and Semantic Suggestions |
US20170316023A1 (en) * | 2016-05-02 | 2017-11-02 | Yahoo! Inc. | Method and system for providing query suggestions |
US20180293235A1 (en) * | 2014-03-29 | 2018-10-11 | Camelot Uk Bidco Limited | Method, system and software for searching, identifying, retrieving and presenting electronic documents |
US10169405B2 (en) * | 2012-09-07 | 2019-01-01 | Splunk Inc. | Data model selection and application based on data sources |
US10331720B2 (en) | 2012-09-07 | 2019-06-25 | Splunk Inc. | Graphical display of field values extracted from machine data |
US10956502B2 (en) | 2018-05-18 | 2021-03-23 | Yandex Europe Ag | Method of and system for recommending fresh search query suggestions on search engine |
Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US6671681B1 (en) * | 2000-05-31 | 2003-12-30 | International Business Machines Corporation | System and technique for suggesting alternate query expressions based on prior user selections and their query strings |
WO2006055120A2 (en) | 2004-11-12 | 2006-05-26 | Google, Inc. | Method and system for autocompletion for languages having ideographs and phonetic characters |
US20070250492A1 (en) * | 2006-04-23 | 2007-10-25 | Mark Angel | Visual search experience editor |
US20070282811A1 (en) * | 2006-01-03 | 2007-12-06 | Musgrove Timothy A | Search system with query refinement and search method |
US20080294609A1 (en) * | 2003-04-04 | 2008-11-27 | Hongche Liu | Canonicalization of terms in a keyword-based presentation system |
US7487145B1 (en) | 2004-06-22 | 2009-02-03 | Google Inc. | Method and system for autocompletion using ranked results |
US7499940B1 (en) | 2004-11-11 | 2009-03-03 | Google Inc. | Method and system for URL autocompletion using ranked results |
US20100094855A1 (en) * | 2008-10-14 | 2010-04-15 | Omid Rouhani-Kalleh | System for transforming queries using object identification |
US7707201B2 (en) * | 2004-12-06 | 2010-04-27 | Yahoo! Inc. | Systems and methods for managing and using multiple concept networks for assisted search processing |
US20100106706A1 (en) * | 2000-05-22 | 2010-04-29 | Yahoo! Inc. | Method and apparatus for identifying related searches in a database search system |
US7756855B2 (en) | 2006-10-11 | 2010-07-13 | Collarity, Inc. | Search phrase refinement by search term replacement |
US7809745B2 (en) * | 2007-08-09 | 2010-10-05 | Yahoo! Inc. | Method for generating structured query results using lexical clustering |
US20100268712A1 (en) * | 2009-04-15 | 2010-10-21 | Yahoo! Inc. | System and method for automatically grouping keywords into ad groups |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US7996488B1 (en) * | 2006-11-27 | 2011-08-09 | Disney Enterprises, Inc. | Systems and methods for interconnecting media applications and services with automated workflow orchestration |
US20110289063A1 (en) * | 2010-05-21 | 2011-11-24 | Microsoft Corporation | Query Intent in Information Retrieval |
US20110295824A1 (en) * | 2010-05-31 | 2011-12-01 | Red Hat, Inc. | Search prediction using context modeling |
US8224689B1 (en) * | 2003-01-10 | 2012-07-17 | Google Inc. | Estimating inventory, user behavior, and/or cost and presentation attributes for an advertisement for use with an advertising system |
US20120233140A1 (en) * | 2011-03-09 | 2012-09-13 | Microsoft Corporation | Context-aware query alteration |
US8423538B1 (en) * | 2009-11-02 | 2013-04-16 | Google Inc. | Clustering query refinements by inferred user intent |
-
2011
- 2011-09-21 US US13/239,236 patent/US8868591B1/en not_active Expired - Fee Related
Patent Citations (20)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20100106706A1 (en) * | 2000-05-22 | 2010-04-29 | Yahoo! Inc. | Method and apparatus for identifying related searches in a database search system |
US6671681B1 (en) * | 2000-05-31 | 2003-12-30 | International Business Machines Corporation | System and technique for suggesting alternate query expressions based on prior user selections and their query strings |
US8224689B1 (en) * | 2003-01-10 | 2012-07-17 | Google Inc. | Estimating inventory, user behavior, and/or cost and presentation attributes for an advertisement for use with an advertising system |
US20080294609A1 (en) * | 2003-04-04 | 2008-11-27 | Hongche Liu | Canonicalization of terms in a keyword-based presentation system |
US7836044B2 (en) | 2004-06-22 | 2010-11-16 | Google Inc. | Anticipated query generation and processing in a search engine |
US7487145B1 (en) | 2004-06-22 | 2009-02-03 | Google Inc. | Method and system for autocompletion using ranked results |
US7499940B1 (en) | 2004-11-11 | 2009-03-03 | Google Inc. | Method and system for URL autocompletion using ranked results |
WO2006055120A2 (en) | 2004-11-12 | 2006-05-26 | Google, Inc. | Method and system for autocompletion for languages having ideographs and phonetic characters |
US7707201B2 (en) * | 2004-12-06 | 2010-04-27 | Yahoo! Inc. | Systems and methods for managing and using multiple concept networks for assisted search processing |
US20070282811A1 (en) * | 2006-01-03 | 2007-12-06 | Musgrove Timothy A | Search system with query refinement and search method |
US20070250492A1 (en) * | 2006-04-23 | 2007-10-25 | Mark Angel | Visual search experience editor |
US7756855B2 (en) | 2006-10-11 | 2010-07-13 | Collarity, Inc. | Search phrase refinement by search term replacement |
US7996488B1 (en) * | 2006-11-27 | 2011-08-09 | Disney Enterprises, Inc. | Systems and methods for interconnecting media applications and services with automated workflow orchestration |
US7809745B2 (en) * | 2007-08-09 | 2010-10-05 | Yahoo! Inc. | Method for generating structured query results using lexical clustering |
US20100094855A1 (en) * | 2008-10-14 | 2010-04-15 | Omid Rouhani-Kalleh | System for transforming queries using object identification |
US20100268712A1 (en) * | 2009-04-15 | 2010-10-21 | Yahoo! Inc. | System and method for automatically grouping keywords into ad groups |
US8423538B1 (en) * | 2009-11-02 | 2013-04-16 | Google Inc. | Clustering query refinements by inferred user intent |
US20110289063A1 (en) * | 2010-05-21 | 2011-11-24 | Microsoft Corporation | Query Intent in Information Retrieval |
US20110295824A1 (en) * | 2010-05-31 | 2011-12-01 | Red Hat, Inc. | Search prediction using context modeling |
US20120233140A1 (en) * | 2011-03-09 | 2012-09-13 | Microsoft Corporation | Context-aware query alteration |
Cited By (15)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9940387B2 (en) * | 2011-07-28 | 2018-04-10 | Lexisnexis, A Division Of Reed Elsevier Inc. | Search query generation using query segments and semantic suggestions |
US20140195519A1 (en) * | 2011-07-28 | 2014-07-10 | Lexisnexis, A Division Of Reed Elsevier Inc. | Search Query Generation Using Query Segments and Semantic Suggestions |
US10810237B2 (en) | 2011-07-28 | 2020-10-20 | RELX Inc. | Search query generation using query segments and semantic suggestions |
US11321311B2 (en) * | 2012-09-07 | 2022-05-03 | Splunk Inc. | Data model selection and application based on data sources |
US11893010B1 (en) | 2012-09-07 | 2024-02-06 | Splunk Inc. | Data model selection and application based on data sources |
US10169405B2 (en) * | 2012-09-07 | 2019-01-01 | Splunk Inc. | Data model selection and application based on data sources |
US10331720B2 (en) | 2012-09-07 | 2019-06-25 | Splunk Inc. | Graphical display of field values extracted from machine data |
US11755634B2 (en) | 2012-09-07 | 2023-09-12 | Splunk Inc. | Generating reports from unstructured data |
US11386133B1 (en) | 2012-09-07 | 2022-07-12 | Splunk Inc. | Graphical display of field values extracted from machine data |
US10977286B2 (en) | 2012-09-07 | 2021-04-13 | Splunk Inc. | Graphical controls for selecting criteria based on fields present in event data |
US20180293235A1 (en) * | 2014-03-29 | 2018-10-11 | Camelot Uk Bidco Limited | Method, system and software for searching, identifying, retrieving and presenting electronic documents |
US11042592B2 (en) * | 2014-03-29 | 2021-06-22 | Camelot Uk Bidco Limited | Method, system and software for searching, identifying, retrieving and presenting electronic documents |
US10467291B2 (en) * | 2016-05-02 | 2019-11-05 | Oath Inc. | Method and system for providing query suggestions |
US20170316023A1 (en) * | 2016-05-02 | 2017-11-02 | Yahoo! Inc. | Method and system for providing query suggestions |
US10956502B2 (en) | 2018-05-18 | 2021-03-23 | Yandex Europe Ag | Method of and system for recommending fresh search query suggestions on search engine |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8417718B1 (en) | Generating word completions based on shared suffix analysis | |
US9342601B1 (en) | Query formulation and search in the context of a displayed document | |
JP4831795B2 (en) | Integration of multiple query modification models | |
US10366093B2 (en) | Query result bottom retrieval method and apparatus | |
US8429173B1 (en) | Method, system, and computer readable medium for identifying result images based on an image query | |
US9477767B1 (en) | Demotion of already observed search query completions | |
US7617205B2 (en) | Estimating confidence for query revision models | |
US11782998B2 (en) | Embedding based retrieval for image search | |
US8891858B1 (en) | Refining image relevance models | |
US9235654B1 (en) | Query rewrites for generating auto-complete suggestions | |
US9679027B1 (en) | Generating related questions for search queries | |
US10783200B2 (en) | Systems and methods of de-duplicating similar news feed items | |
US8661051B1 (en) | Contextual n-gram analysis | |
US9594838B2 (en) | Query simplification | |
US8868591B1 (en) | Modifying a user query to improve the results | |
US8521739B1 (en) | Creation of inferred queries for use as query suggestions | |
US8645409B1 (en) | Contextual search term evaluation | |
US20150370833A1 (en) | Visual refinements in image search | |
US9218366B1 (en) | Query image model | |
US11113732B2 (en) | Controlling use of negative features in a matching operation | |
US11928140B2 (en) | Methods and systems for modifying a search result | |
US9317606B1 (en) | Spell correcting long queries | |
US20150169708A1 (en) | Providing recently selected images | |
US8515985B1 (en) | Search query suggestions | |
US9542491B2 (en) | Utilizing keystroke logging to determine items for presentation |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:FINKELSTEIN, LEV;MYASKOUVSKEY, ARTIOM;MARKOVITCH, SHAUL;AND OTHERS;SIGNING DATES FROM 20110920 TO 20110921;REEL/FRAME:026944/0642 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044277/0001Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551)Year of fee payment: 4 |
|
FEPP | Fee payment procedure |
Free format text: MAINTENANCE FEE REMINDER MAILED (ORIGINAL EVENT CODE: REM.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
LAPS | Lapse for failure to pay maintenance fees |
Free format text: PATENT EXPIRED FOR FAILURE TO PAY MAINTENANCE FEES (ORIGINAL EVENT CODE: EXP.); ENTITY STATUS OF PATENT OWNER: LARGE ENTITY |
|
STCH | Information on status: patent discontinuation |
Free format text: PATENT EXPIRED DUE TO NONPAYMENT OF MAINTENANCE FEES UNDER 37 CFR 1.362 |
|
FP | Lapsed due to failure to pay maintenance fee |
Effective date: 20221021 |