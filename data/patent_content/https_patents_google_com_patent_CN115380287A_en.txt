CN115380287A - Privacy preserving cross-domain machine learning - Google Patents
Privacy preserving cross-domain machine learning Download PDFInfo
- Publication number
- CN115380287A CN115380287A CN202180005537.5A CN202180005537A CN115380287A CN 115380287 A CN115380287 A CN 115380287A CN 202180005537 A CN202180005537 A CN 202180005537A CN 115380287 A CN115380287 A CN 115380287A
- Authority
- CN
- China
- Prior art keywords
- digital component
- user
- digital
- machine learning
- application
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Pending
Links
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/62—Protecting access to data via a platform, e.g. using keys or access control rules
- G06F21/6218—Protecting access to data via a platform, e.g. using keys or access control rules to a system of files or objects, e.g. local or distributed file system or database
- G06F21/6245—Protecting personal data, e.g. for financial or medical purposes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F21/00—Security arrangements for protecting computers, components thereof, programs or data against unauthorised activity
- G06F21/60—Protecting data
- G06F21/606—Protecting data by securing the transmission between two devices or processes
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06N—COMPUTING ARRANGEMENTS BASED ON SPECIFIC COMPUTATIONAL MODELS
- G06N20/00—Machine learning
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L2209/00—Additional information or applications relating to cryptographic mechanisms or cryptographic arrangements for secret or secure communication H04L9/00
- H04L2209/46—Secure multiparty computation, e.g. millionaire problem
Abstract
This document describes a secure machine learning platform. In some aspects, a method includes transmitting, by an application to a machine learning platform, a set of data including a user profile, one or more characteristics of a digital component, a context signal, a model identifier, and data indicating a type of event. The application receives a request generated based on computer readable instructions to upload a user profile of a user of a client device to a machine learning platform. The computer readable instructions initiate the request in response to detecting an occurrence of an event with the digital component. In response to the request, the application may obtain a user profile request data element that includes a model identifier of the machine learning model and one or more characteristics of at least one of the digital component or the first content page.
Description
Technical Field
The specification relates to a privacy preserving machine learning platform that uses secure multi-party computing to train and use machine learning models.
Background
Some machine learning models are trained based on data collected from multiple sources (e.g., across multiple websites and/or native applications). However, this data may include private or sensitive data that should not be shared or allowed to leak to other parties.
Disclosure of Invention
In general, one innovative aspect of the subject matter described in this specification can be embodied in methods that include the following operations: receiving, by a client device, a first content page comprising a digital component, the digital component comprising computer-readable instructions; receiving, by an application running on a client device, a request generated based on computer-readable instructions to upload a user profile of a user of the client device to a machine learning platform, wherein the computer-readable instructions initiate the request in response to detecting an occurrence of an event related to an interaction or non-interaction with a digital component; in response to receiving the request: obtaining, by an application, a user profile request data element comprising a model identifier of a machine learning model and one or more characteristics of at least one of a digital component or a first content page; obtaining, by an application, a user profile of a user of a client device; obtaining, by an application, context signals provided to one or more content platforms for training a machine learning model; and transmitting, by the application and to the machine learning platform, a set of data comprising a user profile, one or more characteristics, a context signal, a model identifier, and data indicating whether the event is an interaction event or a non-interaction event.
Other embodiments of this aspect include corresponding apparatus, systems, and computer programs, encoded on computer storage devices, configured to perform aspects of the methods. These and other embodiments may each optionally include one or more of the following features.
Some aspects include verifying, by the application, the digital signature prior to transmitting the set of data to the machine learning platform.
Some aspects include, in response to detecting the occurrence of the interaction event, accessing, by the client device, a second content page provided by a second content provider different from a first content provider providing the first content page, wherein the second content page includes a tag comprising computer-readable code; receiving a request from a tag for a context signal, one or more characteristics of a digital component, and a user profile; encrypting, by an application, a context signal, one or more characteristics of a digital component, and a user profile; and sending the encrypted context signal, the one or more characteristics of the encrypted digital component, and the encrypted user profile to a content platform that provides the digital component.
Some aspects include detecting, by the computer readable code of the tag, a conversion event; and transmitting, by the computer readable code of the tag, a conversion notification of the conversion event to the content platform.
Some aspects include, for each of the one or more digital components: sending, by an application, an inference request for a digital component to a machine learning platform, wherein the inference request includes one or more of a user profile, a context signal, or a characteristic of a current content page; receiving a predicted performance of the digital component from the machine learning platform, wherein the predicted performance metric is based on the user profile and one or more trained machine learning models trained by the machine learning platform; determining a selection value for the digital component based on the predicted performance; and selecting a given digital component for display at the client device based at least on the selection value for each of the one or more digital components.
Some aspects include receiving, from a first multi-party computing (MPC) computer of a machine learning platform, a first secret share of an inference result of a first digital component; receiving a second secret share of the inferred results of the digital component from each of the one or more second MPC computers of the machine learning platform; determining a predicted performance metric for the digital component represented by the inference result based on the first secret share and each second secret share; selecting a numeric component for display at the client device based on the predicted performance metric; and a display digital component.
In some aspects, the user profile request data element includes a token received from a content platform that provides the digital component. The token may include (i) a set of content including a model identifier, data indicating one or more characteristics, a domain of the content platform, and (ii) a digital signature of the set of content generated using a cryptographic key of the content platform.
The events may include interaction events. The aspects may include storing, at the client device, the context signal, one or more characteristics of the digital component, and the user profile in response to detecting the occurrence of the interaction event.
In some aspects, the inference request for the digital component from the machine learning platform may include one or more characteristics of the digital component, characteristics of the current context page, and a context signal.
In some aspects, the predicted performance may be based on performance of the digital component for k nearest neighbor profiles determined to be the k user profiles most similar to the user profile of the user of the client device based on one or more machine learning models.
In some aspects, the predicted performance may include one of a predicted user interaction rate or a predicted conversion rate of the digital component, or a predicted conversion value of the digital component.
In some aspects, a machine learning platform may include two or more multi-party computing (MPC) computers that use a secure MPC process to train a machine learning model to predict performance metrics for digital components using encrypted context signals, one or more characteristics of encrypted digital components, an encrypted user profile, and data received from client devices of one or more additional users.
In some aspects, two or more MPC computers may train a machine learning model without accessing encrypted context signals, one or more characteristics of encrypted digital components, or an encrypted user profile in clear text.
The subject matter described in this specification can be implemented in particular embodiments to realize one or more of the following advantages. The machine learning techniques described in this document may be used to select digital components for display to a user on a client device while protecting the privacy of the user, e.g., without revealing the user's online activities to any computing system. This may protect user privacy for such platforms and protect the security of data during transmission to or from the platform from being compromised. Encryption techniques such as secure MPC enable a better online user experience by selecting digital components based on a user profile (e.g., online activity of a user in a cross-domain environment) without the use of third-party cookies. This may enable functionality that a user may not otherwise be able to use, as some browsers may not support third-party cookies.
The MPC technique can ensure that as long as one computing system in the MPC cluster is honest and has not been compromised, no user data is available in clear text by either one computing system or the other. Thus, the techniques described in this document allow user data to be identified and transmitted in a secure manner without the need to use third-party cookies or any user identifiers to determine any relationships between user data. By using a trained machine learning model, the efficiency of transmitting data content to a user device is improved, as data content not relevant to a particular user need not be transmitted. In particular, third party cookies are not required, thereby avoiding storage of third party cookies, increasing memory usage, and reducing the amount of bandwidth otherwise consumed by transmitting cookies.
Various features and advantages of the foregoing subject matter are described below with reference to the drawings. Additional features and advantages will be apparent from the description of the subject matter herein and the claims.
Drawings
FIG. 1 is a block diagram of an environment in which a machine learning model is trained and used to select digital components.
FIG. 2 is a swim lane diagram illustrating an example process for training an interactive machine learning model.
FIG. 3 is a swim lane diagram illustrating an example process for training a transformed machine learning model.
FIG. 4 is a swim lane diagram illustrating an example process for inferring and selecting digital components using an interactive and/or translating machine learning model.
Fig. 5 is a flow diagram illustrating an example process of transferring data to a machine learning platform.
FIG. 6 is a block diagram of an example process for training a transformed machine learning model.
Like reference numbers and designations in the various drawings indicate like elements.
Detailed Description
This specification relates to techniques for training machine learning models and using trained machine learning models to select content to distribute to users based on prior user interactions with the content and in a manner that protects the security of the user data. Users connected to the internet may be exposed to various digital content (e.g., search results, web pages, digital components, news articles, social media posts, audio information output by a digital assistant device). Some of these contacts to the content may cause the user to perform a targeted action. For example, a user exposed to a web page about an endangered species may register for a communication intended to help save the endangered species, wherein registering for a communication may be considered a target action. Similarly, a user who contacts a digital component in a web page about a particular type of mobile device may eventually obtain the particular type of mobile device, where the obtaining of the mobile device may be considered a target action. Examples of targeted actions may also include registering a website/service, adding an item to an online shopping cart, downloading a white paper, obtaining a product, or even clicking on (or otherwise selecting) a digital component. When a user performs a target action, the performance of the target action may be referred to as conversion (conversion).
In some cases, a content platform providing digital components to user devices may record information about user conversions (and other user interactions with the digital components) for selecting digital components that are more relevant than other digital components, which improves the user experience and reduces the waste of resources to transfer irrelevant information. In the past, such user conversions and/or interactions required the collection of certain information and the use of third party cookies. However, because third party cookies are being discarded, the solution described in this document may record information about user conversions and interactions with digital components and enable such information to be used to select digital components in a manner that protects the privacy of the user.
In some cases, the digital components may be distributed to the users by assigning the users to groups of users using user profiles generated based on events related to the users, such as based on the users accessing particular resources or performing particular actions at the resources (e.g., interacting with particular items displayed on a web page or adding items to a virtual shopping cart). These user groups are typically created in a privacy-preserving manner, e.g., by creating user profiles at the user's device rather than at the content platform, and each user group includes a sufficient number of users such that individual users cannot be identified. The systems and techniques described herein enable gathering information about user interactions and translations with digital components without identifying individual users, thereby protecting user privacy and anonymity, and without using third party cookies. The techniques also use this data to train a machine learning model that can be used to generate predicted performance metrics for selecting digital components.
These techniques and methods are described with reference to fig. 1-4.
FIG. 1 is a block diagram of an environment 100 in which a machine learning model is trained and used to select digital components. The example environment 100 includes a data communication network 105, such as a Local Area Network (LAN), a Wide Area Network (WAN), the internet, a mobile network, or a combination thereof. The network 105 connects client devices 110, secure MPC cluster 130, publisher 140, website 142, provider platform (SSP) 170, and demand platform (DSP) 150. The SSPs 170 and DSPs 150 are examples of content platforms that manage the selection and distribution of digital components on behalf of the publishers 140 and digital component providers 160.
The client device 110 is an electronic device capable of communicating over the network 105. Example client devices 110 include personal computers, mobile communication devices (e.g., smart phones), and other devices that can send and receive data over the network 105. The client device may also include a digital assistant device that accepts audio input through a microphone and outputs audio output through a speaker. When the digital assistant detects a "hotword" or a "hotphrase" that activates a microphone to accept audio input, the digital assistant may enter a listening mode (e.g., ready to accept audio input). The digital assistant device may also include a camera and/or a display to capture images and visually present information. The digital assistant may be implemented in different forms of hardware devices, including wearable devices (e.g., watches or glasses), smart phones, speaker devices, tablet devices, or other hardware devices. The client device may also include a digital media device, such as a streaming device that plugs into a television or other display to stream video to the television, a gaming system, or a virtual reality system.
Some resources, application pages, or other application content may include a digital component slot for displaying a digital component with the resource 145 or application page. The phrase "digital component" as used throughout this document refers to a discrete unit of digital content or digital information (e.g., a video clip, audio clip, multimedia clip, image, text, or other unit of content). The digital components may be stored electronically in the physical memory device as a single file or collection of files, and the digital components may be in the form of video files, audio files, multimedia files, image files, or text files, and include advertising information, so an advertisement is one type of digital component. For example, the digital component may be content intended to supplement the content of a web page or other resource displayed by the application 112. More particularly, the digital components may include digital content related to resource content (e.g., the digital components may be related to the same subject matter as the web page content, or related to a related subject matter). Thus, the provision of digital components can supplement and generally enhance web page or application content.
When application 112 loads a resource (or application content) that includes one or more digital component slots, application 112 may request a digital component for each slot. In some implementations, the digital component slot can include code (e.g., script) that causes the application 112 to request the digital component from a digital component distribution system that selects the digital component and provides the digital component to the application 112 for display to a user of the client device 110.
Some publishers 140 use the SSP170 to manage the process of obtaining digital components for digital component slots of their resources and/or applications. The SSP170 is a hardware and/or software implemented technology platform that automates the process of obtaining digital components of resources and/or applications. Each publisher 140 may have a corresponding SSP170 or SSPs 170. Some publishers 140 may use the same SSP 170.
The digital component provider 160 can create (or otherwise publish) digital components that are presented in digital component slots of publishers' resources and applications. The digital component provider 160 may use the DSP150 to manage the provision of its digital components for display in the digital component slots. DSP150 is a hardware and/or software implemented technology platform that automates the process of distributing digital components for display with resources and/or applications. The DSP150 may interact with multiple provider platforms SSP on behalf of the digital component provider 160 to provide digital components for display with resources and/or applications of multiple different publishers 140. In general, DSP150 may receive a request for a digital component (e.g., from SSP 170), generate (or select) selection parameters for one or more digital components created by one or more digital component providers based on the request, and provide data related to the digital component (e.g., the digital component itself) and the selection parameters to SSP 170. The SSP170 can then select the digital component for display at the client device 110 and provide the client device 110 with data that causes the client device 110 to display the digital component.
In some cases, it may be beneficial for a user to receive digital components related to web pages, application pages, or other electronic resources that the user previously accessed and/or interacted with. To distribute such digital components to users, users may be assigned to groups of users, such as groups of user interests, groups of similar users, or other group types involving similar user data, when the users access a particular resource or perform a particular action at a resource (e.g., interact with a particular item displayed on a web page or add an item to a virtual shopping cart). The user group may be generated by the digital component provider 160. That is, each digital component provider 160 may assign a user to its group of users when the user accesses the electronic resources of the digital component provider 160.
To protect user privacy, group membership of the user may be maintained at the user's client device 110, e.g., by one of the applications 112 or the operating system of the client device 110, rather than by the digital component provider, the content platform, or another party. In a particular example, a trusted program (e.g., a web browser or operating system) may maintain a list of user group identifiers ("user group list") for a user using the web browser or another application. The user group list may include a group identifier for each user group to which the user has been added. The digital component provider 160 that creates the user group may specify the user group identifier for its user group. The user group identifier of the user group may describe the group (e.g., a gardening group) or a code (e.g., a non-descriptive alphanumeric sequence) representing the group. The user group list of the user may be stored in a secure store at the client device 110 and/or may be encrypted when stored to prevent others from accessing the list.
When the application 112 displays a resource or application content associated with the digital component provider 160 or a web page on the website 142, the resource may request that the application 112 add one or more user group identifiers to the user group list. In response, the application 112 may add one or more user group identifiers to the user group list and securely store the user group list.
The content platform may use the user group membership of the user to select digital components or other content that may be of interest to the user or that may otherwise be beneficial to the user/user device. For example, such digital components or other content may include data that improves the user experience, improves the operation of the user device, or benefits the user or user device in some other manner. However, the user group identifier of the user's user group list may be provided in a manner that prevents the content platform or any other entity from associating the user group identifier with a particular user, thereby protecting user privacy when selecting digital components using the user group membership data.
The application 112 may provide the user group identifier from the user group list to a trusted computing system that interacts with the content platform to select digital components for display at the client device 110 based on the user group membership in a manner that prevents the content platform or any other entity other than the user itself from knowing the full user group membership of the user.
In some implementations, the application 112 can provide a user interface that enables a user to manage the user group to which the user is assigned. For example, the user interface may enable the user to remove the user group identifier, preventing all or a particular resource 145, publisher 140, content platform, digital component provider 160, and/or MPC cluster 130 from adding the user to the user group (e.g., preventing an entity from adding the user group identifier to a list of user group identifiers maintained by application 112). This provides better transparency and control for the user.
In addition to the description throughout this document, a user may be provided with controls (e.g., user interface elements with which the user may interact) allowing the user to make selections as to whether and when the systems, programs, or features described herein are capable of collecting user information (e.g., information about the user's social network, social actions or activities, profession, the user's preferences, or the user's current location) and whether to send content or communications to the user from a server. In addition, certain data may be processed in one or more ways before being stored or used, thereby removing personally identifiable information. For example, the user's identification may be processed such that personally identifiable information for the user cannot be determined, or the user's geographic location may be summarized where location information is obtained (e.g., to a city, zip code, or state level), such that a particular location of the user cannot be determined. Thus, the user may have control over which information is collected about the user, how the information is used, and which information is provided to the user.
There may be many reasons why storing user translated data is beneficial to the user and the content platform. In one case, storing the user translated data may prevent redundant digital components from being selected and transmitted to the client device. For example, assume that a user wishes to purchase a camera. The content platform adds the user to the user group "camera" and selects a digital component that is contextually related to the camera and transmits the selected digital component to the client device for display to the user in the user group. After contacting the selected digital component, the user performs the targeted action of purchasing the camera, resulting in a conversion event. In this case, it is superfluous to continue selecting a contextually relevant digital component of the user group "camera" for display on the client device, since the user has already performed the target action.
In another case, data generated for user translation may be used to train a machine learning model to select digital components that may result in translation when displayed at a client device, thereby avoiding transmission of unnecessary digital components, which may reduce network bandwidth usage and improve user experience. For example, assume that a user wishes to purchase a camera. The content platform may add the user to a user group of "cameras" based on the user's profile, which may represent the user's online activity, which may include accessing web pages with content related to the cameras. The content platform may later select a digital component for the user that is contextually relevant to the camera and transmit the selected digital component to the user's client device for display to the user. While the digital components selected based on the user group "camera" are generally contextually related to the camera, the machine learning model may be used to select a smaller subset of digital components from the plurality of digital components that, when displayed to the user on the client device 110, are more likely to cause the user to perform a target action that may correspond to a conversion event. For example, the machine learning model may be used to generate performance metrics, such as predicted performance metrics, for the digital components. The predicted performance metric may include a predicted user interaction rate, e.g., a predicted click-through rate and/or a predicted conversion rate of the digital component. The predicted performance metric may be used to determine or adjust a selection value of the digital component. The selection value is the amount that the digital component provider 160 is willing to provide for display and/or user interaction with the digital component.
In some implementations, the MPC cluster 130 (also referred to as a machine learning platform) can train a machine learning model (referred to as an interactive machine learning model) that can be suggested or can be used to generate a predicted performance metric that indicates a likelihood that a user will interact with a digital component (e.g., by clicking or selecting) if the digital component is displayed to the user. In some implementations, the MPC cluster 130 may train a machine learning model (referred to as a conversion machine learning model) that may suggest or may be used to generate a predicted performance metric that indicates a likelihood of a user performing a target action corresponding to a conversion. The secure MPC cluster 130 includes two computing systems MPC1 and MPC2 that execute secure MPC techniques to train machine learning models. Although the example MPC cluster 130 includes two computing systems, more computing systems may be used as long as MPC cluster 130 includes more than one computing system.
Computing systems MPC1 and MPC2 may be operated by different entities. In this way, each entity cannot access the full or partial user profile in clear text. Plaintext is text (including binary files) that is uncountable tagged, specially formatted, or written in code or data in a form that can be viewed or used without a key or other decryption device or other decryption process. For example, one of computing systems MPC1 or MPC2 may be operated by a trusted party other than the user, publisher 140, content platform, and digital component provider 160. For example, an industry group, a government group, or a browser developer may maintain and operate one of computing systems MPC1 and MPC2. Another computing system may be operated by a different one of these communities, such that different trusted parties operate each computing system MPC1 and MPC2. Preferably, the different parties operating different computing systems MPC1 and MPC2 have no incentive to collude compromising user privacy. In some embodiments, computing systems MPC1 and MPC2 are architecturally separate and monitored so as not to communicate with each other outside of performing the secure MPC process described in this document.
In some implementations, the MPC cluster 130 trains one or more machine learning models for each content platform and/or each digital component provider 160. For example, each content platform may manage the distribution of digital components for one or more digital component providers 160. The content platform may request the MPC cluster 130 to train the machine learning model for one or more digital component providers 160 for which the content platform manages the distribution of digital components. Each machine learning model of the content platform may have a unique model identifier.
After training the machine learning model for the content platform, the content platform may query, or cause the application 112 of the client device 110 to query, the model to generate predicted performance metrics for one or more digital components available for display on the client device 110.
FIG. 2 is a swim lane diagram illustrating an example process 200 for training an interactive machine learning model. The operations of process 200 may be implemented, for example, by client device 110, MPC cluster 130, one or more DSPs 150, and SSP 170. The operations of process 200 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 200.
The content platform may initiate training and/or updating of one of its machine learning models by requesting that the application 112 running on the client device 110 generate a user profile for its respective user and upload a secret shared and/or encrypted version of the user profile to the MPC cluster 130. For the purposes of this document, secret sharing of a user profile may be considered an encrypted version of the user profile, as secret sharing is not in clear text. In general, each application 112 may store data for a user profile and generate an updated user profile in response to receiving a request from a content platform. Because the content and machine learning models of a user profile are different for different content platforms, an application 112 running on the user's client device 110 can maintain data for multiple user profiles and generate multiple user profiles each specific to a particular content platform.
In this example, a user of client device 110 uses an application 112, such as a web browser or native application, to access an electronic resource (e.g., a web page or application page) that includes a single digital component slot. It should be noted, however, that the techniques and methods may be extended to support more than one digital component slot. After loading the web page including the digital component slots, the application 112 sends a request for a digital component to a digital component provider based on the one or more user groups to which the user of the client device 110 is assigned. In some embodiments, a request for a digital component is sent to SSP 170.
In this example, the SSP170 is an SSP used by a first content provider (e.g., publisher) to manage the process of obtaining digital components of digital component slots of its resources and/or applications and the client device 110 requests content in response to an application of the client device 110 loading an electronic resource (e.g., a web page or native application) of the publisher.
After receiving a request for digital components, the SSP170 can interact with one or more digital component providers 160 and/or one or more DSPs 150. The DSP150 may select one or more digital components based on context data that may include, for example, a resource locator of a resource, such as a global resource locator (URL) of a web page or a global resource identifier (URI) of application content, a language (e.g., a language in which content is displayed by an application presenting the content), and/or coarse geolocation information indicating a coarse location of the client device 110. Other context signals may also be used.
In some implementations, prior to sending the digital component to the application 112 executing on the client device 110, the SSP170 and/or DSP150 can include a script 110 in the digital component that, when executed on the client device, detects the occurrence of an interaction event related to an interaction or non-interaction of the digital component by a user of the client device while the digital component is displayed on the client device 110. Application 112 executing on client device 110 displays the digital component on the client device after receiving the digital component (e.g., presented in a digital component slot). Although scripts are used in this example, the digital components may include other types of computer readable instructions embedded in the content page or digital component, such as native code libraries supporting Software Development Kits (SDKs), tags, tag values, parameters, JSON objects, and the like. The application 112 may parse the request and take action accordingly.
When a user interacts with a digital component that triggers an interaction event (e.g., by pressing his/her finger and/or stylus on a touch-sensitive screen of the client device or otherwise selecting), a script of the digital component executing on the client device 110 detects an interaction signal generated by the user interaction with the digital component. In some implementations, the interaction event can also include a non-interaction with the digital component. For example, based on the user not interacting with the digital component, the script does not detect an interaction signal within a specified time range since the digital component was displayed. In such a case, the script triggers a non-interactive event of the user with the digital component. In some implementations, script-generated interactions and non-interaction events can be characterized using tags and/or features generated based on whether the event is due to an interaction or a non-interaction. For example, an interaction event generated due to interaction with a digital component may cause the value of the feature to be "1" if the user interacts with the digital component, or "0" if the event is a non-interaction event generated due to the user not interacting with the digital component. Other values or data may also be used to indicate whether user interaction with the digital component is detected.
In some implementations, in response to an interactive or non-interactive event, the script may initiate a request to upload a user profile of a user of the client device 110 to the MPC cluster 130 along with one or more additional features related to the digital components and the user interaction to train the interactive machine learning model through the MPC cluster 130.
The application 112 running on the client device 110 builds a user profile of the user of the client device 110 (202). The user profile of the user may include data related to user-initiated events and/or events that may have been initiated by the user with respect to an electronic resource (e.g., a web page or application content). The event may include a view of the electronic resource, a view of the digital component, user interaction or lack of user interaction with the electronic resource or the digital component (e.g., selection of the electronic resource or the digital component), a conversion that occurs after user interaction with the electronic resource, and/or other suitable actions related to the user and the electronic resource.
In some implementations, the user profile of the user may be in the form of a feature vector. For example, the user profile may be an n-dimensional feature vector. Each of the n dimensions may correspond to a particular feature, and the value of each dimension may be the value of the feature for that user. For example, a dimension may be directed to whether a particular digital component is displayed to a user. Another feature may be whether the user has interacted with the digital component or is not. In this example, the value of the feature may be "1" if the user interacts with the digital component, or "0" if the user does not interact with the digital component.
In some implementations, the application 112 can generate different user profiles for different machine learning models owned by the content platform at the request of the content platform. Different machine learning models may require different training data based on design goals. For example, the content platform may create a machine learning model to determine whether to add the user to a group of users. In another example, the content platform may create a machine learning model to generate a group of users based on the users' online activities. In this example, the content platform trains the machine learning model to predict whether the user will interact with a particular digital component if the digital component is displayed to the user in a particular context.
The application 112 generates a user profile P for the user i Is shared (204). In this example, application 112 generates a user profile P i Two shares of, each meter of the MPC cluster 130And sharing the computing systems. Note that each share may itself be a random variable, which itself does not reveal anything about the user profile. Two shares need to be merged to obtain the user profile. If the MPC cluster 130 includes more computing systems participating in machine learning model training, the application 112 will generate more shares, one for each computing system. In some implementations, to protect user privacy, the application 112 may use a pseudo-random function to associate a user profile P with i Split into shares. That is, application 112 may use a pseudo-random function PRF (P) i ) Generating two shares { [ P ] i ,1],[P i ,2]}. The exact split may depend on the secret sharing algorithm and the cryptographic library used by the application 112.
A user of the client device 110 using the application 112 navigates to the electronic resource (206). For example, a user of client device 110 may use a browser to access website 142 by specifying a reference (e.g., a URL). In another example, a user of client device 110 may use a web browser to submit a search query to a search system that identifies websites by crawling and indexing the websites (e.g., indexing based on the crawled content of the websites). In response, the search system identifies the web site in the form of search results and returns the search results to the client device 110 in a search results page. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142. In yet another example, a user may launch a native application requesting content from the publisher 140 of the application.
The request for digital content may be transmitted, for example, over packetized network 105, and the content request itself may be formatted as packetized data with a header and payload data. The header may specify the destination of the packet and the payload data may include any of the information discussed above.
The publisher 140 (e.g., a web server or content server of the publisher 140) responds with content (210). For example, after receiving a request for content from client device 110 (e.g., a request for website 142), the server may respond by transmitting computer-executable instructions and data that may initiate display of a web page at client device 110. The response may include data related to, for example, a web page transmitted over the packetized network 105, and the content itself may be formatted as packetized data.
The client device 110 identifies the tags of the digital components in the electronic resource (212). After receiving the electronic resource or the content of the electronic resource from the publisher 140, the application 112 may identify one or more tags, for example, one or more tags of a digital component slot of the electronic resource. For example, the web browser identifies a digital component slot in web site 142.
The client device 110 transmits a request for a digital component to the SSP170 (214). The client device 110 may send a request to a computing system of the SSP 170. For example, the application 112 may generate one or more requests for digital components based on one or more digital component slots. In a particular example, the web browser can generate a request for a digital component based on the tag and transmit the request to the SSP170 over the network 105.
In some implementations, the request for the digital component can also include additional data, such as context data. The context data may include, for example, a resource locator of the resource, e.g., a Universal Resource Locator (URL) of a web page or a universal resource identifier (URL) of application content, a language (e.g., a language in which content is displayed by an application presenting the content), and/or coarse geographic location information indicating a coarse location of the client device 110. Other context data may also be used.
The request for the digital component may be transmitted, for example, over the packetized network 105, and the component request itself may be formatted as packetized data with a header and payload data. The header may specify the destination of the packet and the payload data may include any of the information discussed above.
SSP170 interacts with one or more DSPs 150 to select digital components (216). As previously described, the digital component provider 160 can use one or more DSPs 150 to automate the process of distributing digital components for display with an application. After receiving the request, SSP170 can interact with one or more DSPs and transmit a corresponding request for digital components, optionally including context data.
The DSP150 may respond to a request for a digital component of the SSP170 by transmitting one or more selected digital components or data identifying the digital component (e.g., a creative element including instructions for displaying the digital component). For each digital component, DSP150 may also generate or select selection parameters for the digital component. DSP150 may then transmit the digital component's selection parameters and data to SSP 170. Each digital component (or data thereof) may include additional data, such as metadata indicating the user group identifier corresponding to the digital component. In some embodiments, DSP150 may also select one or more digital components based on the context data and thus be independent of the user's group membership. These digital components may also be referred to as contextual digital components.
After receiving data for one or more selected digital components from DSP150, SSP170 may examine and select a set of digital components. For example, the SSP170 may examine the content and format of the digital component to ensure that it meets various criteria, e.g., does not include a particular type of content, meets data and/or display size requirements, etc. In some embodiments, SSP170 selects a digital component based at least in part on selection parameters received from DSP150. In such embodiments, SSP170 may select the digital component having the highest selection parameter among the selection parameters received from DSP150.
If the SSP170 approves a digital component, the SSP170 may generate a signed creative element for the digital component. The signed creative element may include a set of content and a digital signature generated based on the set of content. For example, the set of content can include a creative fragment, a digital component provider identifier that uniquely identifies the digital component provider that created and/or published the digital component (which allows the SSP170 to determine the corresponding DSP150 of the digital component), creative metadata, a resource locator of the SSP170, and/or an expiration date of the digital signature (e.g., requiring the DSP to periodically resubmit the digital component for re-verification).
The creative fragment may include the digital component itself (or a resource locator or a link to a server from which the digital component may be downloaded). The creative fragment may also include computer executable code for rendering the digital component, such as a script for downloading the digital component from a server and rendering the digital component in a digital component slot. The creative fragment may also include computer executable code for transmitting information regarding the display of the digital component to the aggregation server, such as a script that causes the client device to transmit the information to the aggregation server.
The resource locator of SSP170 may be the tld +1 of the domain of SSP 170. Tld +1 is the valid top level field (tld) plus one more tag than the common suffix. Example eTLD +1 is "example.com," where ". Com" is the top-level domain.
The metadata may include a set of attributes that enable SSP170 to enforce publisher-defined exclusions on digital components. For example, a publisher may not allow digital components with particular attributes (e.g., having content related to a particular category) to be displayed with its resources. The metadata may include a list of prohibited categories, topics, or other attributes of the digital components that the publisher prohibits. In some implementations, the SSP170 can encrypt each attribute and include each encrypted attribute in the signed creative element. For example, SSP170 may encrypt each attribute using the asymmetric public key of SSP 170. In this manner, only SSP170 can access the plaintext value for each attribute using the asymmetric private key corresponding to the public key. In some embodiments, the SSP170 may encrypt each attribute using a symmetric key that the SSP170 stores in secret.
The SSP170 can create a digital signature by signing the set of content using the asymmetric private key of the SSP 170. The recipient of the signed creative element may verify the digital signature using an asymmetric public key corresponding to the private key used to generate the signature. If any piece of data in the set of content changes after the digital signature is generated, the verification of the digital signature will fail. The SSP170 can send signed creative elements for each digital component to the DSP150 for the digital component providers 160 that create/publish the digital components.
In some implementations, prior to sending the digital component to the application 112 executing on the client device 110, the SSP170 and/or the DSP150 and/or the digital component provider can include a script (e.g., code such as JavaScript) in the digital component that detects the occurrence of an event related to an interaction or non-interaction with the digital component by a user of the client device when the digital component is displayed on the client device 110. Application 112 executing on client device 110 displays the digital component on the client device (e.g., presented in a digital component slot) after receiving the digital component.
SSP170 transmits the digital component to client device 110 (218). For example, the SSP170, after selecting a digital component (e.g., the first K digital components, where K may be any number depending on the particular implementation), transmits the set of digital components (or data of the digital components) to the application 112 executing on the client device 110 over the network 105. In some embodiments, SSP170 may transmit a set of selection parameters with the set of digital components.
In some embodiments, the list of digital components transmitted by SSP170 may be ordered based on a selection parameter. This enables the application 112 to select the digital component without knowing the actual selection parameters. For each digital component, the digital component list may also include data indicating a user group identifier corresponding to the digital component. This enables the application 112 to filter out digital components of user groups of which the user is not a member.
In some implementations, the digital component can be sent to the client device 110 using two separate requests, as described in more detail below. For example, an MPC cluster or another system may select and provide a digital component (or data that may be used to obtain a digital component) selected based on a user's user group membership. In addition, the SSP may select and provide a digital component (or data that may be used to obtain a digital component) selected based on the context data. In this example, the application 112 may select, for each digital component slot, the final digital component displayed in the digital component slot.
A user of the client device interacts with the digital component (222). For example, a user of client device 110, after contacting a digital component displayed by application 112, may interact with the digital component (e.g., by pressing his/her finger and/or stylus on a touch-sensitive screen of the client device).
The script detects the occurrence of an interactive or non-interactive event (224). To detect the interaction, a script within the digital component detects a set of interaction signals generated by the interaction with the digital component. For example, the application 112 may execute scripts to monitor user interactions with the digital components. Examples of such interaction signals detected by the script may include coordinates of a location at which the interaction was detected (e.g., a point of contact on the touch-sensitive screen) and an amount of time that the contact was performed. For example, if a user of the client device interacts with the digital component using a stylus, the script may detect an interaction signal, which may include coordinates including a location at which the stylus made contact and an amount of time the contact was performed, as well as a pressure exerted by the stylus on the touch screen.
In response to detecting the occurrence of the event, the script generates a request to upload the user profile of the user to the machine learning platform (226). In some implementations, and in response to detecting user interaction with the digital component, a script within the digital component generates a request to upload a user profile by passing a user profile request data element to the application 112. The request to upload the user profile may take the form of a Model Identifier, creative Level Signals, click, content Platform Domain, digital Signature. In this form, the parameter "Model Identifier" represents an Identifier of the machine learning Model to be trained using the user profile, the parameter "Creative Level Signals" represents a Creative Level signal for the Digital component, the parameter "Clicked" represents whether the Digital component is Clicked on (or otherwise interacted with), the parameter "Content Platform Domain" represents a Domain of the Content Platform that owns the machine learning Model, and the "Digital Signature" is a Digital Signature of the remaining parameters generated using a private key (e.g., of the application 112 or client device 110). The parameter "Clicked" may be a flag having two values indicating whether a numeric component is Clicked or not Clicked. For example, a value of 1 may indicate that a numeric component is clicked, while a value of 0 may indicate that a numeric component is not clicked. Other values may also be used. These parameters are further described with reference to table 1 below.
The application obtains a user profile request data element from the content platform (228). As previously described, the MPC cluster 130 may create multiple machine learning models for the content platform. These machine learning models may differ from one another based on underlying machine learning techniques, training methods, or design goals. For example, a content platform (e.g., DSP150 or SSP 170) may cause MPC cluster 130 to create a machine learning model to determine whether to add a user to a group of users. In another example, the content platform may cause the MPC cluster 130 to create a machine learning model to generate a group of users based on the online activities of the users. In this example, the MPC cluster 130 trains the interactive machine learning model to predict whether a user will interact with a particular digital component if the digital component is presented to the user in a particular context. In this example, the content platform trains the machine learning model to generate performance metrics for each digital component that indicate a likelihood that the user will interact with the digital component if the digital component is presented to the user in a particular context. In some implementations, the content platform can include the model identifier of the machine learning model and one or more characteristics of the digital component in the digital component, e.g., as metadata, prior to transmitting the digital component to the client device for presentation.
In response to a request to upload a user profile of a user, the application 112 obtains a user request profile data element M upload Including the model identifier of the machine learning model and one or more characteristics of the digital component, such as a creative-level signal used by the SSP and/or the DSP to select the digital component for the application 112, a domain of the content platform, and a digital signature of the content of the token. The content platform may request the data element M with the user profile using the model identifier and one or more characteristics of the digital component upload Is sent to the client device. User profile request data element M upload May have the items described in table 1 below:
TABLE 1
The model identifier identifies a machine-learned model of the content platform identified by the eTLD +1 domain of the content platform for which the user profile is to be used for training or for generating digital component prediction performance metrics prior to display of the digital component by the client device. A digital signature is generated based on the seven items using a private key of the content platform.
In some embodiments, the data element M is requested in order to protect the user profile during transmission upload The content platform is using the data element M upload Encrypting the data element M before sending to the application 112 upload . For example, the content platform may encrypt the user profile request data element M using the public key of the application upload For example PubKeyEnc (M) upload Application _ public _ key), where "application _ public _ key" is the public key of application 112. Application 112 may verify before obtaining and storing the model identifier and one or more characteristics of the digital componentCertificate data element M upload . Application 112 may verify data element M by (i) verifying the digital signature using a public key of the content platform corresponding to a private key of the content platform used to generate the digital signature and (ii) ensuring that the token creation timestamp is not exceeded (e.g., the timestamp indicates a time within a threshold amount of time of the current time at which verification occurred) upload . If the data element M upload Valid, the application 112 may use the data element. If any authentication fails, the application 112 may ignore the upload request.
In yet another example, the content platform may send the model identifier to the application 112 through a script originating from an internally running content platform (or SSP 170), and the application 115 may transmit the model directly through a script API, where the application 115 relies on a web federation (W3C) source-based security model to protect event data and update requests from forgery or leakage.
The application obtains a user profile and context signals provided to one or more content platforms for selecting a digital component (230). Based on the content platform (identified by the content platform domain) and the model identifier, the application 112 can select a corresponding user profile for the machine learning model specified by the model identifier for the content platform. In this example, the application 112 selects a user profile of the user for the machine learning model implemented by the MPC cluster 130 for scoring the digital components.
As previously described, the application 112 also obtains context data (also referred to as context signals) that was previously included in the request for the digital component. The context data may include, for example, a resource locator of the resource, e.g., a Universal Resource Locator (URL) of a web page or a Universal Resource Identifier (URI) of application content, a language (e.g., a language in which content is displayed by an application presenting the content), and/or coarse geolocation information indicating a coarse location of the client device 110. Other context data may also be used.
The application uploads a set of data to the machine learning platform (232). After obtaining the user profile request data element, the user profile, and the context signal, an application 112 executing on the client device 110 uploads secret sharing of the user profile, one or more characteristics of the digital component, the context signal, the model identifier, and data (e.g., a feature and/or flag, such as 0 or 1) indicating whether the event is an interaction event or a non-interaction event. For purposes of explanation, this data is also referred to as a marker of the event.
In some implementations, the application 112 can also split one or more characteristics, context signals, and/or indicia of the digital component (e.g., whether the user interacted with the digital component) into shares. For example, the application 112 may generate a corresponding share ([ contextual _ signals ] of the context signal i,1 ]And [ contextual _ signals i,2 ]) Corresponding sharing of one or more characteristics of the digital component ([ digital _ comp _ char) i,1 ]And [ digital _ comp _ char i,2 ])。
In some implementations, the application 112 generates a user profile P i First share of [ P ] i,1 ]A first share of one or more characteristics of the digital component [ digital _ comp _ char i,1 ]Context signal [ context _ signals ] i,1 ]A composite message C1 of data indicating whether an event is an interactivity event or a non-interactivity event and a model identifier. Application 112 encrypts the composite message using the encryption key of computing system MPC1, which may be the public key of computing system MPC 1. Similarly, application 112 generates user profile P i Second share of [ P ] i,2 ]A second share of one or more characteristics of the digital component [ digital _ comp _ char i,2 ]Second sharing of context signals i,2 ]A composite message C2 of data indicating whether an event is an interaction event or a non-interaction event and a model identifier. Application 112 encrypts the composite message using the encryption key of computing system MPC2, which may be the public key of computing system MPC2. These functions may be represented as PubKeyEncrypt (C1, MPC 1) and PubKeyEncrypt (C2, MPC 2), where PubKeyEncrypt represents a public key encryption algorithm using the corresponding public key of MPC1 or MPC2. Composite messages are generated using a reversible method to synthesize a complex message from multiple simple messages (e.g., javaScript object notation (JSON), compact binary object notation (CBOR), or protocol buffers).
In some embodiments, the order in which application 112 uploads the first encrypted share to computing system MPC1 must match the order in which application 112 uploads the second encrypted share to computing system MPC2. This enables computing systems MPC1 and MPC2 to correctly match two shares of the same secret, e.g. two shares of the same user profile.
In some implementations, the application 112 can explicitly assign the same pseudo-random or sequentially generated identifiers to shares of the same secret to facilitate matching. While some MPC techniques may rely on a random rearrangement of inputs or intermediate results, the MPC techniques described in this document may not include such a random rearrangement, but may rely on an upload order to match.
The machine learning platform generates an interactive machine learning model (234). Computing systems MPC1 and MPC2 may be based on samples S from their respective training data sets i The machine learning model is trained such that each sample from the respective training data set includes its user profile, one or more characteristics of the digital component, a context signal, and an encrypted share of the marker indicating whether the event is an interaction event or a non-interaction event.
Each time a new machine learning model is generated based on user profile data may be referred to as a training session. Computing systems MPC1 and MPC2 may train the machine learning model based on the encrypted sharing of the user profile received from client device 110. For example, computing systems MPC1 and MPC2 may use MPC techniques to train the k-NN model based on the sharing of user profiles.
To minimize or at least reduce cryptographic computations, and thus the computational burden on the computing systems MPC1 and MPC2, to protect user privacy and data during model training and inference, the MPC cluster 130 may use stochastic projection techniques, e.g., simHash, to quantify two samples S quickly, securely, probabilistically i And S j The similarity between them. Two samples S i And S j The similarity between the two samples can be determined by determining the similarity between the two samples S i And S j Is determined by the hamming distance between the two bit vectors, which hamming distance is associated with the two samples with a high probabilityThe cosine distance between them is inversely proportional.
Conceptually, for each training session, m randomly projected hyperplanes U = { U } can be generated 1 ,U 2 …U m }. The random projection hyperplane may also be referred to as a random projection plane. One goal of multi-step computation between computing systems MPC1 and MPC2 is to train each sample S of the k-NN model i Creating a bit vector B of length m i . At the bit vector B i In each bit B i,j One U representing the projection plane j And sample S i I.e. for all j e 1, m]，n i,j ＝sign(U j ⊙S i ) Wherein, a indicates the dot product of two equal length vectors. That is, each bit represents a sample S i Located in plane U j Which side of (a). Bit value 1 represents a positive sign and bit value 0 represents a negative sign.
At the end of the multi-step calculation, each of the two computing systems MPC1 and MPC2 generates an intermediate result comprising the bit vector of each sample in clear text, the share of each sample and the share of the label of each user profile. For example, an intermediate result of the computing system MPC1 may be the data shown in table 2 below. Computing system MPC2 will have similar intermediate results but the sharing of each user profile and each tag will be different. To add additional privacy protection, each of the two servers in MPC cluster 130 can only obtain half of the m-dimensional bit vector in plaintext form, e.g., computing system MPC1 obtains the first m/2 dimensions of all m-dimensional bit vectors and computing system MPC2 obtains the last m/2 dimensions of all m-dimensional bit vectors.
Bit vector in plaintext form | P i MPC1 sharing of | Label (R) i MPC1 ofShare for fun |
… | … | … |
B i | … | … |
Bi+1 | … | … |
… | … | … |
TABLE 2
Two arbitrary samples P of a given unit length i And P j (i ≠ j), two samples P have been demonstrated i And P j Bit vector B of i And B j Hamming distance between with high probability and sample vector P i And P j The cosine distance between them is proportional, assuming that the number m of random projections is sufficiently large.
Based on the intermediate results shown above, and because the bit vectors Bi are in plaintext, each computing system MPC1 and MPC2 may independently create (e.g., by training) a corresponding k-NN model using the k-NN algorithm. Computing systems MPC1 and MPC2 may use the same or different k-NN algorithms. Once the k-NN model is trained, the application 112 may query the k-NN model to determine the predicted behavior of the digital component.
Computing systems MPC1 and MPC2 may then use one of several possible machine learning techniques (e.g., binary classification, multi-class classification, regression, etc.) to determine whether to select a digital component for display to a user on a client device based on the k-NN model. One of the previously discussed methods includes generating a performance metric, e.g., a predicted performance metric, of the digital component. In this example, the predicted performance metric indicates a likelihood that the user interacted with the digital component when the digital component was displayed to the user. Based on the predicted performance metrics, a digital component may be selected by the application 112 on the client device 110. Another method of selecting digital components may include categorizing the digital components into categories. For example, the k-NN model may classify digital components as class A and class B such that digital components classified as class A have a higher probability of being interacted with by a user and digital components classified as class B have a low high probability of being interacted with by a user when displayed on client device 110. Application 112 may then select a numeric component from class a to display to the user. After training the interactive machine learning model, the model may be used to select digital components for display to the user. This will be further explained with reference to fig. 4.
FIG. 3 is a swim lane diagram illustrating an example process 300 for training a transformed machine learning model. The operations of process 300 may be implemented, for example, by client device 110, MPC cluster 130, one or more DSPs 150, and SSP 170. The operations of process 300 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 300.
Similar to process 200, the content platform may initiate training and/or updating the transformed machine learning model by requesting that the application 112 running on the client device 110 generate a user profile for its respective user and upload a secret shared and/or encrypted version of the user profile to the MPC cluster 130.
In this example, a user of client device 110 uses an application 112, such as a web browser or a native application, to access an electronic resource (e.g., a web page or application page) that includes a digital component slot. It should be noted, however, that the techniques and methods can be extended to support more than one digital component slot. After loading the web page 142 that includes the digital component slots, the application 112 sends a request for the digital components to the SSP170 based on the group of one or more users to which the user of the client device 110 is assigned. Assume that application 112 selects a digital component and displays the digital component with web page 142. If the user interacts with the digit triggering the interaction event at the component (e.g., presses his/her finger and/or stylus against the touch-sensitive screen of the client device), the user is redirected to a different resource, such as a web page 144 (also referred to as a second content page). For example, if a digital component on web page 142 is associated with a particular brand X shoe, user interaction with the digital component may redirect the user to brand X web page 144. In some implementations, the second content page can be provided by a second publisher that is different from the publisher that provided the first content page. For example, the second content page can be a landing page for the digital component, e.g., a landing page linked to by the digital component.
It should be noted that scripts within the digital component executing on client device 110 detect interaction signals generated by user interaction with the digital component and trigger interaction events (as described with reference to fig. 3). In response to an interaction event, the script, in response to detecting the occurrence, generates a request that causes uploading of a set of data that includes a user profile, one or more characteristics of the digital component, a context signal, and data indicating whether the event is an interaction event or a non-interaction event.
In some implementations, the script obtains an eTLD +1 field of a second publisher that provides a second content page in response to detecting user interaction with the digital component. For example, if a digital component displayed within website 142 is associated with a particular brand X shoe, and user interaction with the digital component redirects the user to brand X web page 144, the script obtains the eTLD +1 field of brand X web page 144. After obtaining the eTLD +1 field of the second content page, the script interacts with the application 112 (e.g., through an API) and instructs the application to obtain one or more characteristics of the digital component, context signals, and the current user profile of the user of the client device 110. In some implementations, a native code library (e.g., SDK or other computer readable code or instructions) embedded in the application 112 detects user interaction with the digital component and triggers interaction events and performs all actions described above as being performed by the script.
In some implementations, the second content page includes a tag (e.g., a script different from a script within the digital component) that, after being uploaded to the client device 110, generates a request for a context signal, one or more characteristics of the digital component, and a user profile. For example, when the user of client device 110 is redirected to web page 144, which includes the tags, is uploaded to the client device and generates a request for the user's current user profile, context signals, and one or more characteristics of the digital components with which the user of client device 110 interacts. In response to the request, the application 112 generates a secret share of the user profile, the context signal, and one or more characteristics of the digital component, and transmits the secret share to the corresponding DSP150.
In some implementations, when a tag on the second content page detects a user conversion, the tag on the second content page transmits a conversion notification token to DSP150 that includes one or more characteristics describing the user conversion. For example, if the user performs a targeted action to purchase a pair of shoes after being redirected to web page 144 for brand X, the tag on web page 144 transmits to DSP150 a translation notification token that may include the amount of time the user accessed web page 144, the user's action on web page 144, a description of the targeted action performed by the user on web page 144, the amount of the purchase, and so forth.
After receiving the user profile, context signals, sharing of one or more characteristics of the digital components, and the translation notification, DSP150 associates the translation notification with the corresponding sharing of one or more characteristics of the user profile, context signals, digital components to create training samples and transmits them to MPC cluster 130.MPC cluster 130 may generate a transformed machine learning model after receiving training samples from DSP150. During inference, the MPC cluster 130 may be queried for predicted conversion values for the digital components based on the conversion machine learning model, upon which the digital components may be selected for display to the user.
The application 112 running on the client device 110 builds a user profile of the user of the client device 110 (302). Similar to step 202 of process 200, application 112 may generate different user profiles for different machine learning models owned by the content platform at the request of the content platform.
A user of the client device 110 using the application 112 navigates to the electronic resource (306). For example, a user of client device 110 may use a browser to access website 142 by specifying a reference (e.g., a URL), or use a web browser to submit a search query to a search system that identifies the website in the form of search results and returns the search results to client device 110 in a search results page. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142. In yet another example, a user may launch a native application requesting content from the publisher 140 of the application.
The client device 110 generates a request for content and transmits the request to the first publisher over the network 105 (308). For example, after a user of client device 110 clicks on and/or selects a search result corresponding to website 142 or directly specifies website 142 by using a reference (e.g., a URL), application 112 (e.g., a web browser running on client device 110) generates and transmits a request for digital content (e.g., website 142) to a web server over network 105.
The first publisher responds with content (310). For example, after receiving a request for content from the client device 110 (e.g., a request for the website 142), the web server of the publisher 142-1 may respond by transmitting computer-executable instructions and data that initiate display of a web page at the client device 110. The response may include data related to, for example, a web page transmitted over the packetized network 105, and the content itself may be formatted as packetized data.
The client device 110 identifies the label of the digital component in the electronic resource (312). After receiving the electronic resource or the content of the electronic resource from the publisher 140-1, the application 112 may identify one or more tags, for example, one or more tags of a digital component slot of the electronic resource. For example, the web browser identifies a digital component slot in the website 142.
SSP170 interacts with one or more DSPs 150 to select digital components (316). Similar to step 216 of process 200, after receiving the request, SSP170 may interact with one or more DSPs 150 and transmit a corresponding request for digital components optionally including context data. DSP150 may respond to a request for a digital component of SSP170 by transmitting one or more selected digital components or data identifying the digital component. Prior to sending the digital component to the application 112 executing on the client device 110, the SSP170 and/or the DSP150 and/or the digital component provider may include a script (e.g., code such as JavaScript) in the digital component that detects the occurrence of an event related to an interaction or non-interaction with the digital component by a user of the client device when the digital component is displayed on the client device 110.
SSP170 transmits the digital component to client device 110 (318). Similar to step 218 of process 200, ssp170, after selecting a digital component (e.g., the first K digital components, where K may be any number depending on the particular implementation), transmits the set of digital components (or the data of the digital components) to application 112 executing on client device 110 over network 105. In some embodiments, SSP170 may transmit a set of selection parameters with the set of digital components.
The application 112 displays the given numeric component (320). For example, the application 112 may display the selected digital components along with the electronic resources of the publisher 140.
The user interacts with the digital component (322). For example, after a first content page (e.g., web page 142) and digital components are displayed by application 112, a user of client device 110 may interact with the digital components (e.g., by pressing his/her finger and/or stylus on a touch-sensitive screen of the client device). In some cases, the user may also choose not to interact with the digital component. For example, if a user of the client device 110 finds the digital component uninteresting, the user may choose not to interact with the digital component.
The script detects the occurrence of an interactive or non-interactive event (324). To detect the interaction, a script executing within the digital component detects a set of interaction signals generated by the interaction with the digital component. Examples of such interaction signals detected by the script may include coordinates of a location at which the interaction was detected (e.g., a point of contact on the touch-sensitive screen) and an amount of time that the contact was performed. For example, if a user of the client device interacts with the digital component using a stylus, the script may detect an interaction signal, which may include coordinates including a location at which the stylus made contact and an amount of time the contact was performed, as well as a pressure exerted by the stylus on the touch screen. If the script does not detect any interaction signals with the digital component, the script registers the event as a non-interaction event.
The script obtains the domain of the second publisher (326). In response to detecting user interaction with the digital component, the script obtains the eTLD +1 domain of the second publisher that provides the second content page. For example, if a digital component displayed within website 142 is associated with a particular brand X shoe, and user interaction with the digital component redirects the user to brand X web page 144 (e.g., a login page) published by the publisher's 140-2 web server, the script obtains brand X eTLD + field.
The user is redirected to a second content page provided by a second publisher (328). For example, if a digital component on web page 142 is associated with a particular brand X shoe, user interaction with the digital component may redirect the user to brand X web page 144. The second content page may be provided by a second publisher 140-2 that is different from the publisher 140-1 that provided the first content page. An application 112 executing on a client device 110 generates and transmits a request for digital content (e.g., a website 144) to a web server of a publisher 140-2 over the network 105.
The second publisher responds with content (330). For example, after receiving a request for content (e.g., a request for a webpage 144 that includes tags) from a client device 110, a web server hosting a publisher 140-2 of the webpage 144 may respond by transmitting computer-executable instructions and data that initiate display of the webpage at the client device 110. The response may include data related to, for example, a web page transmitted over the packetized network 105, and the content itself may be formatted as packetized data.
The tag on web page 144 generates a request to upload a user profile (332). The tags on the web pages 144 include computer-executable instructions that, when executed on the client device 110, generate a request to upload a user profile and one or more characteristics of the contextual signals, digital components.
In some implementations, the application 112 generates two or more composite messages for each of the two or more computing systems of the MPC cluster 130 such that the composite messages of the computing systems include the respective shares that need to be provided to the computing systems. For example, application 112 generates user profile P i First share of [ P ] i,1 ]A first share of one or more characteristics of the digital component [ digital _ comp _ char i,1 ]First share of context signal [ context _ signals i,1 ]The composite message C1_ conversion. The application 112 encrypts the composite message using the encryption key of the computing system MPC 1. Similarly, application 112 generates user profile P i Second share of [ P ] i,2 ]A second share of one or more characteristics of the digital component [ digital _ comp _ char i,2 ]Second share of context signals i,2 ]Composite message C2_ conversion. Application 112 encrypts the composite message using the encryption key of computing system MPC2.
The application sends the user profile to the DSP150 (336). In some implementations, the application 112 transmits a separate composite message to the DSP150. In other embodiments, the application 112 may transmit the composite message directly to the MPC cluster 130. Note that when the encrypted composite message is transmitted to DSP150, the message in clear text is not visible to DSP150 because the message was encrypted using the encryption key of the computing system of MPC cluster 130.
In some implementations, the order in which the application 112 uploads the first encrypted share to the recipient must match the order in which the application 112 uploads the second encrypted share. This enables the recipient to correctly match two shares of the same secret, e.g., two shares of the same user profile.
In some implementations, the application 112 can explicitly assign the same pseudo-randomly or sequentially generated identifier and a timestamp indicating the time of uploading the share to the same secret share to facilitate matching. While some MPC techniques may rely on a random rearrangement of inputs or intermediate results, the MPC techniques described in this document may not include such a random rearrangement, but may rely on an upload order to match.
The tag on web page 144 detects the user translation (338). For example, after the user is redirected to web page 144, performing a target action specified by web page 144, a tag on web page 144 detects the user translation and obtains one or more characteristics describing the user translation. For example, after the user is redirected to web page 144 for brand X, a target action to purchase a pair of shoes is performed and the tag on web page 144 detects the conversion. The one or more characteristics describing the user conversion may include an amount of time the user accessed the web page 144, a user action on the web page 144, a description of a target action performed by the user on the web page 144, an amount of money purchased if the conversion is a purchase, and so forth.
The tag on web page 144 transmits the translation notification token to DSP150 (340). In some implementations, tags within the second content page generate and transmit a conversion notification token to DSP150 in response to detecting a user conversion. In some implementations, the conversion notification token can include features and/or indicia (referred to as conversion indicia) that indicate whether the user has converted by performing the intended target action. The conversion notification token may optionally include one or more characteristics describing the user conversion.
In some implementations, the tag within the second content page generates a conversion notification token and transmits the notification token to the first publisher even if the tag within the second content page does not detect a user conversion. In such embodiments, the conversion notification token may include a field indicating whether a user conversion is detected.
In some implementations, the tag on the webpage 144 can include in the conversion notification token the same pseudo-randomly or sequentially generated identifiers that are assigned to the same secret shares to facilitate matching and a current timestamp that indicates the time of the user conversion. If the application 112 has previously used the first party cookie of the content platform to identify the same user in the same first party domain, the tag of the web page 144 may include the same first party cookie in the translation notification token.
DSP150 generates training samples (342). Since the timestamp (e.g., associated with the encrypted sharing of the user profile) at which the user selects the digital component and redirects to the second content page may be different from the timestamp of the user conversion, the user profile, the digital component displayed and with which the user interacted, the contextual features, the secret sharing of one or more characteristics of the digital component, and the conversion notification token may have different timestamps because the user may take some time to perform the intended target action. In some implementations, the DSP150 uses the first-party cookie to identify the same user in the same first-party domain. DSP150 also matches different shares and conversion tags from the user conversion tokens using pseudo-random or sequentially generated identifiers and associated timestamps for secret shares and conversion notifications to generate training samples. In some implementations, the allowable time difference between the two timestamps (e.g., the time the user selected the digital component and redirected to the second content page and the time the user translated) may be determined by the designer of the system. In other embodiments, the MPC cluster 130 may infer the allowable time difference based on patterns in the user's online activity, or may predict the allowable time difference using a machine learning model. In some embodiments, if the secret sharing and conversion notification token is transmitted directly to the MPC cluster 130, the MPC cluster 130 may match different sharing and conversion tokens to generate training samples. Note that the secret shares are encrypted using the encryption keys of the computing systems of MPC cluster 130, so DSP150 cannot access these shares in plain text form.
DSP150 transmits the training samples to MPC cluster 130 (344). In some embodiments, DSP150 transmits the training samples in batches to respective computing systems of MPC cluster 130 after generating the training samples to train the transformed machine learning model. In other embodiments, DSP150, after generating the training examples, may simultaneously transmit the training samples to the respective computing systems of MPC cluster 130.
The machine learning platform generates a transformed machine learning model (346). Computing systems MPC1 and MPC2 may train the conversion machine learning model based on training samples that include a user profile, one or more characteristics of the digital components, a context signal, and an encrypted share of a conversion flag indicating whether a user of the client device has converted.
Computing systems MPC1 and MPC2 may be based on samples S from their respective training data sets i The machine learning model is trained such that each sample from the respective training data set includes its user profile, one or more characteristics of the digital component, the context signal, and the encrypted share of the conversion token.
Each time a new machine learning model is generated based on user profile data may be referred to as a training session. Computing systems MPC1 and MPC2 may train the machine learning model based on the encrypted sharing of the user profile received from client device 110. For example, computing systems MPC1 and MPC2 may use MPC techniques to train the k-NN model based on the sharing of user profiles.
The MPC cluster 130 may use a stochastic projection technique, e.g., simHash, to quantize the two samples S quickly, safely, probabilistically i And S j The similarity between them. Two samples S i And S j The similarity between the two samples S can be determined by determining the similarity between the two samples S i And S j Is determined, the hamming distance is inversely proportional with high probability to the cosine distance between the two samples.
Similar to step 232 of process 200, computing systems MPC1 and MPC2 are for each sample S used to train the k-NN model i Creating a bit vector B of length m i . At the bit vector B i In each bit B i,j One U representing the projection plane j And sample S i I.e., for all j ∈ [1,m ]]，B i,j ＝sign(U j ⊙S i ) Where an as indicates the dot product of two equal length vectors. At the end of the multi-step calculation, each of the two computing systems MPC1 and MPC2 generates an intermediate result comprising the bit vector of each sample in clear text, the share of each sample and the share of the translation of each user profile. Each of the two servers in MPC cluster 130 can only obtain half of the m-dimensional bit vector in plaintext form, e.g., computing system MPC1 obtains the first m/2 dimensions of all m-dimensional bit vectors, the computing systemMPC2 obtains the last m/2 dimensions of all m-dimensional bit vectors.
Based on the intermediate results shown above, and because the bit vectors Bi are in plaintext, each computing system MPC1 and MPC2 may independently create (e.g., by training) a corresponding k-NN model using the k-NN algorithm. Computing systems MPC1 and MPC2 may use the same or different k-NN algorithms. Once the k-NN model is trained, the application 112 may query the k-NN model to determine a predicted likelihood of transformation.
Computing systems MPC1 and MPC2 may then use one of several possible machine learning techniques (e.g., binary classification, multi-class classification, regression, etc.) to determine whether to select a digital component for display to a user on a client device based on the k-NN model. One of the previously discussed methods includes generating a performance metric, e.g., a predicted performance metric, of the digital component. In this example, the predicted performance metric indicates a likelihood that the user performed the target action to undergo the conversion. Based on the predicted performance metrics, a digital component may be selected by the application 112 on the client device 110. This will be further explained with reference to fig. 4.
FIG. 4 is a swim lane diagram illustrating an example process 400 for requesting and selecting a numeric component using an interactive and/or translating machine learning model. The operations of process 400 may be implemented, for example, by client device 110, SSP170, one or more DSPs 150, and publisher 140. The operations of process 400 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 400.
In this example, a user of the client device 110 uses an application 112, such as a web browser or native application, to access an electronic resource (e.g., a web page or application page) that includes a digital component slot.
Upon receiving a request for a digital component, the SSP170 can interact with one or more digital component providers and/or one or more DSPs 150 to obtain the digital component for display with an application.
DSP150 selects one or more digital components from a set of available digital components. For subscriber group based requests, the DSP150 may filter out numeric components that do not have a corresponding subscriber group identifier that matches one of the subscriber group identifiers included in the request. The DSP may select a digital component from the filtered set, for example, based on the context data. For a context request, DSP150 may select a digital component based on context data included in the request.
DSP150 may further select a digital component (e.g., the top N digital components) by analyzing and scoring each of the one or more selected digital components. DSP150 then transmits the selected digital component(s), the creative element of the digital component(s), or the data identification or data usable to obtain the digital component(s) to SSP170 (or the MPC cluster or another server). For example, DSP150 may provide digital components to an MPC cluster or another server in response to a user group-based request and to SSP170 for context requests.
After receiving the digital components from the DSP(s) 150, the SSP170 can review and select a set of digital components (e.g., the top K digital components) based on criteria and/or conditions set by the publisher 140 before enabling the digital components to be provided for display on the client device. For example, SSP170 may examine the content and format of a digital component to ensure that it meets various criteria, e.g., does not include a particular type of content, meets data and/or display size requirements, etc. The set of digital components is sent to an application 112 executing on the client device 110.
The application 112 executing on the client device 110, after receiving the set of digital components, may select a subset of the digital components by filtering out one or more digital components from the set of digital components that have the lowest likelihood of being interacted with by the user. To filter one or more digital components from the set of digital components, the application 112 identifies a respective predicted performance metric for each digital component in the set of digital components generated by the interactive machine learning model. After selection, one or more digital components are displayed on the client device (e.g., presented in a digital component slot). In some embodiments, the selection of the digital component is based on more than just the predicted performance metric of the digital component. For example, the application 112 may consider the predicted performance metrics of the digital components as well as contextual attributes of the digital components, protocols or conditions related to the digital components set by the component provider (e.g., values indicating monetary values received by the SSP to display the digital components), or user-defined rules for including or excluding digital components.
A user of the client device 110 using the application 112 navigates to the electronic resource (402). For example, a user of client device 110 may use a browser to access website 142 by specifying a reference (e.g., a URL). In another example, a user of client device 110 may use a web browser to submit a search query to a search system that identifies websites by crawling and indexing the websites (e.g., indexing based on the crawled content of the websites). In response, the search system identifies the web site in the form of search results and returns the search results to the client device 110 in a search results page. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142. In yet another example, a user may launch a native application requesting content from the publisher 140 of the application.
The request for digital content may be transmitted, for example, over the packetized network 105, and the content request itself may be formatted as packetized data with a header and payload data. The header may specify the destination of the packet and the payload data may include any of the information discussed above.
The publisher 140 (e.g., a web server or content server of the publisher 140) responds with content (406). For example, after receiving a request for content from client device 110 (e.g., a request for website 142), the server may respond by transmitting computer-executable instructions and data that may initiate display of a web page at client device 110. The response may include data related to, for example, a web page transmitted over the packetized network 105, and the content itself may be formatted as packetized data.
The client device 110 identifies the label of the digital component in the electronic resource (408). After receiving the electronic resource or the content of the electronic resource from the publisher 140, the application 112 may identify one or more tags, for example, one or more tags of a digital component slot of the electronic resource. For example, the web browser identifies one or more digital component slots in the website 142.
In some implementations, the request for the digital component can include a user group identifier for a user group with which the client device is associated. In some implementations, the request for the digital component can also include additional data, such as context data. The context data may include, for example, a resource locator of a resource, such as a Universal Resource Locator (URL) of a web page or a Universal Resource Identifier (URI) of application content, a language (e.g., a language in which content is displayed by an application presenting the content), and/or coarse geolocation information indicating a coarse location of the client device 110.
The request for the digital component may be transmitted, for example, over the packetized network 105, and the component request itself may be formatted as packetized data with a header and payload data. The header may specify the destination of the packet and the payload data may include any of the information discussed above.
SSP170 transmits a request for digital components to one or more DSPs 150 (412). As previously described, the digital component provider 160 can use one or more DSPs 150 to automate the process of distributing digital components for display with an application. After receiving the request, SSP170 can interact with one or more DSPs and transmit a corresponding request for a digital component that includes the user group identifier and optionally context data. The DSP150 selects one or more digital components from a set of digital components by filtering out digital components that do not have a corresponding subscriber group identifier that matches one of the subscriber group identifiers in the request for digital components. For example, at least a portion of the digital components distributed by the DSP150 may have one or more user group identifiers for user groups associated with the digital components. In a particular example, a digital component having content about a particular pair of shoes may have identifiers for a "shoes" group, a "clothing" group, and a "footwear" group as corresponding user group identifiers.
DSP150 selects the digital component (414). In some implementations, the DSP150 can further select digital components (e.g., the top N digital components) by analyzing and scoring each of the one or more selected digital components. For example, the score may be based on contextual data, expected performance of the digital component, and/or additional information.
DSP150 transmits the data for the one or more selected digital components to SSP170 (416). For example, the DSP150 may respond to a request for a digital component of the SSP170 by transmitting one or more selected digital components or data identifying the digital component (e.g., a creative element including instructions for displaying the digital component). For each digital component, DSP150 may also generate or select selection parameters for the digital component. DSP150 may then transmit the digital components' selection parameters and data to SSP 170. Each digital component (or data thereof) may include additional data, such as metadata indicating the user group identifier corresponding to the digital component.
In some implementations, DSP150 may also select one or more digital components based on context data that is independent of the user's group membership. These digital components may also be referred to as contextual digital components.
SSP170 selects a set of digital components (418). For example, after receiving data for one or more selected digital components from DSP150, SSP170 may examine and select a set of digital components (e.g., the first K digital components). For example, the SSP170 may examine the content and format of the digital component to ensure that it meets various criteria, e.g., does not include a particular type of content, meets data and/or display size requirements, etc. In some embodiments, SSP170 selects a digital component based at least in part on selection parameters received from DSP150. In such embodiments, SSP170 may select the digital component having the highest selection parameter from the selection parameters received from DSP150.
The SSP170 transmits the set of digital components to the client device 110 (420). For example, SSP170, after selecting the set of digital components (e.g., the first K digital components), transmits the set of digital components (or data for the digital components) to application 112 executing on client device 110 over network 105. In some embodiments, SSP170 may transmit a set of selection parameters with the set of digital components.
In some embodiments, the list of digital components transmitted by the SSP170 may be ordered based on a selection parameter. This enables the application 112 to select the digital component without knowing the actual selection parameters. For each digital component, the digital component list may also include data indicating a user group identifier corresponding to the digital component. This enables the application 112 to filter out digital components of user groups of which the user is not a member.
In some implementations, the client device 110 sends multiple requests for digital components for each digital component slot. For example, client device 110 may send a context request to SSP170 using steps 310-320. In this example, the request will not include the user group identifier. Rather, the client device 110 may send one or more user group-based requests to the SSP170, MPC cluster 130, or another server, each request including one or more user group identifiers. For example, using MPC cluster 130 or another server separate from SSP170 and/or DSP150 to manage the selection of digital components based on user group membership may better protect user privacy. In this example, client device 110 may receive a first set of one or more digital components selected based on a user's user group membership (and optionally context data) and a second set of one or more digital components selected based on context data without using user group membership.
In some implementations, the inference request for the digital component can include one or more characteristics of the digital component. The inference request may also include the context signal and a current user profile of the user of the client device 110, an inference parameter k (the number of nearest neighbors to acquire in the case where the machine learning model is a k-NN model), and a model identifier of the machine learning model to be used for the inference. The inference request may also optionally include contextual signals and characteristics of the content page (e.g., website 142) that the user of the client device 110 is currently viewing. Similar to steps 202 and 230 of fig. 2, the application 112 may split one or more characteristics of the digital component and the context signal. For example, the application 112 may generate a corresponding share ([ contextual _ signals ] of the context signal i,1 ]And [ conditional _ signals i,2 ]) A corresponding share of one or more characteristics of the digital component ([ digital _ comp _ chari, 1 ]and digital _ comp _ chari, 2 ])。
the application 112 generates a composite message C1_ offer comprising a first share of one or more characteristics of the digital component digital _ comp _ char i,1 ]First share of context signal of each digital component in the group [ contextual _ signals i,1 ]Current user profile P i First share of [ P ] i,1 ]And a model identifier. The application 112 encrypts the composite message using the encryption key of the computing system MPC 1. Similarly, application 112 generates a second share of one or more characteristics of the digital component [ digital _ comp _ char i,2 ]Second sharing of context signals for each digital component in the group [ contextual _ signals i,2 ]Current user profile P i Second share of [ P ] i,2 ]And a composite message C2_ info of the model identifier. Application 112 encrypts the composite message using the encryption key of computing system MPC2.
The MPC cluster 130 generates an inference (424). The computing systems MPC1 and MPC2 of the MPC cluster 130 may then use one of several possible machine learning techniques (e.g., binary classification, multi-class classification, regression, etc.) to determine a predicted performance metric for each of the one or more digital components based on the interactive machine learning model (e.g., k-NN model). Depending on the machine learning model used, the performance metric may be a predicted interaction rate or a predicted conversion rate.
Similar to step 232 of process 200, computing systems MPC1 and MPC2 reconstruct the bit vectors. After the reconstruction is completed, the computing system MPC1 has a first half of the full-bit vector of the given user profile, while the computing system MPC2 has a second half of the full-bit vector of the given user profile.
Each computing system MPC1 and MPC2 identifies k 'nearest neighbors using its half of the bit vector for a given user profile, one or more characteristics of the digital components and the context signal and its k-NN model, where k' = a × k, where a is empirically determined based on actual production data and statistical analysis. For example, a =3 or other suitable number. The computing system MPC1 may compute the hamming distance between the first half of the full-bit vector and the bit-vector of the k-NN model. The computing system MPC1 then identifies k 'nearest neighbors, e.g. the k' nearest neighbors with the lowest hamming distance, based on the computed hamming distances. In other words, the computing system MPC1 identifies a set of nearest neighbor user profiles, one or more characteristics of digital components and context signals based on the sharing of a given user profile, one or more characteristics of digital components and context signals, and the k-NN model.
The predicted performance metric may be based on the k nearest neighbor profiles and their associated labels. The determination is also based on the aggregation function used and any aggregation parameters for that aggregation function. The aggregation function may be selected based on the nature of the machine learning problem, such as binary classification, regression (e.g., using arithmetic mean or root mean square), multi-class classification, and weighted k-NN. Each way of determining the predicted performance metric may include different interactions between the MPC cluster 130 and the application 112 running on the client 110, as described in more detail below.
For example, if the k-NN model is an interactive machine learning model and the aggregation function counts the number of neighbors that interact with the digital component, the predicted performance may be X/k, where X is the number of neighbors of the k neighbors that interact with the digital component. Similarly, if the k-NN model is a translation machine learning model and the aggregation function counts the number of neighbors translated by performing the target action on the second content page, the predicted performance may be X/k, where X is the number of neighbors translated in k neighbors. Continuing with this current example, the aggregation function may also find an average of the conversion parameters (e.g., the amount the user paid when performing the target action) for the k neighbors, thereby determining an average of the conversion parameters.
If the k-NN model is a regression model, the labels associated with each user profile P will be numeric. For example, the flag may be 0 or 1, indicating an interactive or non-interactive event. Within the k nearest neighbors found, the MPC cluster 130 calculates the average (result) of the token values. In some embodiments, the results may be used as performance metrics or may be used to calculate performance metrics. For example, the results may be used as input parameters to a function that may generate a performance metric based on the results.
If the machine learning model is a conversion model, the steps of the inference process remain unchanged. Similar to the interaction model, the computing systems MPC1 and MPC2 of the MPC cluster 130 may then use one of several possible machine learning techniques (e.g., binary classification, multiclass classification, regression, etc.) to determine a predicted performance metric based on the transformed machine learning model (e.g., k-NN model) that indicates a likelihood of the user transforming after displaying the digital components to the user.
The MPC cluster 130 transmits the inference to the application 112 (426). In this example, computing system MPC1 receiving the query sends the inference result to application 112. The inference results may indicate a predicted performance metric or classification label for each of the one or more digital components. To prevent any MPC system from having full access to the inferences, computing system MPC1 may compute a share of the inferences based on the k-NN model generated using its bit vector share, and computing system MPC2 may compute another share of the inferences based on the k-NN model generated using another share of the bit vector. Computing system MPC2 may provide computing system MPC1 with an encrypted version of its share, where the share is encrypted using the public key of application 112. Computing system MPC1 may provide an encrypted version of its share of inferences to application 112 as well as a share of the user group results of computing system MPC2. Application 112 may decrypt the share of computing system MPC2 and compute an inference from the two shares. For example, application 112 may calculate an inferred result by adding or averaging the results from MPC1 and MPC2, depending on the secret sharing algorithm used. In some embodiments, to prevent computing system MPC1 from forging the results of computing system MPC2, computing system MPC2 digitally signs its results before or after encrypting its results using the public key of application 112. Application 112 verifies the digital signature of computing system MPC2 using the public key of MPC2.
In another example, the application 112 may use the predicted performance metric of the digital component to determine or adjust a selection value of the digital component. The application 112 may then select the digital component having the highest selection value as the given digital component. For example, the application 112 or DSP150 responsible for selecting the digital component may select a monotonic function F parameterized by the predictive performance metrics of the interactive machine learning model and/or the translation machine learning model to calculate the selection value. In some embodiments, the monotonic function F can take the form: f (predicted _ performance _ measure) = X + R predicted _ performance _ measure. In this relationship, the parameter X is a lower limit of the selection value, and the parameter R is a value between 0 and 1 indicating an increase rate of the selection value based on the predicted performance metric.
In some embodiments, the selection of the digital component is based on more than just the predicted performance metric of the digital component. For example, the application 112 may consider the predicted performance metrics of the digital components as well as contextual attributes of the digital components, protocols or conditions related to the digital components set by the component provider (e.g., values indicating monetary values received by the SSP to display the digital components), or user-defined rules for including or excluding digital components.
The application 112 displays the given numeric component (430). For example, the application 112 may display the selected digital components along with the electronic resources of the publisher 140.
FIG. 5 is a flow diagram of an example process 500 for uploading a user profile, one or more characteristics of a digital component, a context signal, a model identifier, and data indicating whether an event is an interaction event or a non-interaction event. The operations of process 500 may be implemented, for example, by client device 110, SSP170, one or more DSPs 150, and publisher 140. The operations of process 500 may also be implemented as instructions stored on one or more computer-readable media, which may be non-transitory, and execution of the instructions by one or more data processing apparatus may cause the one or more data processing apparatus to perform the operations of process 500.
The application 112 receives a first content page that includes digital components and scripts (510). For example, a user of client device 110 may use a browser to access website 142 by specifying a reference (e.g., a URL). In another example, a user of client device 110 may use a web browser to submit a search query to a search system that identifies websites by crawling and indexing the websites (e.g., indexing based on the crawled content of the websites). In response, the search system identifies the web site in the form of search results and returns the search results to the client device 110 in a search results page. After viewing the search results, the user of client device 110 may select and/or click on the search results corresponding to website 142. In yet another example, a user may launch a native application requesting content from the publisher 140 of the application.
The script detects the occurrence of an event (520). For example, the application 112 may execute scripts to monitor user interactions with the digital components. Examples of such interaction signals detected by the script may include coordinates of a location at which the interaction was detected (e.g., a point of contact on the touch-sensitive screen) and an amount of time that the contact was performed.
The application receives a request from the script to upload a user profile (530). For example, in response to detecting user interaction with the digital component, the script of the digital component generates a request to upload the user profile by passing the user profile request data element to the application 112. The request to upload the user profile may be in the form of a Model Identifier, creative Level Signals, click, content Platform Domain, digital Signature.
The application 112 obtains a user profile request data element (540). For example, in response to a request to upload a user profile of a user, application 112 obtains user request profile data element M upload Including a model identifier of the machine learning model and one or more characteristics of the digital component, such as a creative-level signal used by the SSP and/or the DSP to select the digital component for the application 112, one or more characteristics of the first content page, a domain of the content platform, and a digital signature of the token content.
The application 112 obtains a context signal provided to the content platform (560). For example, the application 112 obtains context data (also referred to as a context signal) that was previously included in the request for the digital component. The context data may include, for example, a resource locator of the resource, e.g., a Universal Resource Locator (URL) of a web page or a Universal Resource Identifier (URI) of application content, a language (e.g., a language in which content is displayed by an application presenting the content), and/or coarse geolocation information indicating a coarse location of the client device 110. Other context data may also be used.
The application transmits the data to the machine learning platform (570). For example, application 112 generates user profile P i First share of [ P ] i,1 ]A first share of one or more characteristics of the digital component [ digital _ comp _ char i,1 ]Context signal [ contextual _ signals i,1 ]A composite message C1 of data indicating whether the event is an interactivity event or a non-interactivity event and a model identifier. The application 112 encrypts the composite message using the encryption key of the computing system MPC 1. Similarly, application 112 generates user profile P i Second share of [ P ] i,2 ]A second share of one or more characteristics of the digital component [ digital _ comp _ char i,2 ]Second sharing of context signals i,2 ]A composite message C2 of data indicating whether an event is an interaction event or a non-interaction event and a model identifier. Application 112 encrypts the composite message using the encryption key of computing system MPC2. These functions may be represented as PubKeyEncrypt (C1, MPC 1) and PubKeyEncrypt (C2, MPC 2), where PubKeyEncrypt represents a public key encryption algorithm using the corresponding public key of MPC1 or MPC2.
FIG. 6 is a block diagram of an example computer system 600 that may be used to perform the operations described above. The system 600 includes a processor 610, a memory 620, a storage device 630, and an input/output device 640. Each of the components 610, 620, 630, and 640 can be interconnected, for example, using a system bus 650. The processor 610 is capable of processing instructions for execution within the system 600. In some implementations, the processor 610 is a single-threaded processor. In another implementation, the processor 610 is a multi-threaded processor. The processor 610 is capable of processing instructions stored in the memory 620 or on the storage device 630.
The memory 620 stores information within the system 600. In one implementation, the memory 620 is a computer-readable medium. In some implementations, the memory 620 is a volatile memory unit or units. In another implementation, the memory 620 is a non-volatile memory unit or units.
The storage device 630 is capable of providing mass storage for the system 600. In some implementations, the storage device 630 is a computer-readable medium. In various different implementations, the storage device 630 may comprise, for example, a hard disk device, an optical disk device, a storage device shared by multiple computing devices over a network (e.g., a cloud storage device), or some other mass storage device.
Input/output device 640 provides input/output operations for system 600. In some implementations, the input/output device 640 can include one or more of a network interface device, such as an ethernet card, a serial communication device, such as and RS-232 port, and/or a wireless interface device, such as and 802.11 card. In another embodiment, the input/output devices may include driver devices configured to receive input data and transmit output data to external devices 600 (e.g., keyboard, printer, and display devices). However, other implementations may also be used, such as mobile computing devices, mobile communication devices, set-top box television client devices, and so forth.
Although an example processing system is depicted in FIG. 5, implementations of the subject matter and the functional operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., modules of one or more computer program instructions, encoded on a computer storage medium (or multiple media) for execution by, or to control the operation of, data processing apparatus. Alternatively or additionally, the program instructions may be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by the data processing apparatus. The computer storage media may be or be embodied in a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. Further, although the computer storage medium is not a propagated signal, the computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium may also be or be included in one or more separate physical components or media (e.g., multiple CDs, disks, or other storage devices).
The operations described in this specification may be implemented as operations performed by data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
The term "data processing apparatus" includes all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or a plurality or combination of the foregoing. The apparatus can comprise special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can include, in addition to hardware, code that creates a runtime environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and operating environment may implement a variety of different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
A computer program (also known as a program, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. The computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.
The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
Processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors. Generally, a processor will receive instructions and data from a read-only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with the instructions and one or more memory devices for storing instructions and data. Generally, a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks. However, a computer does not require such a device. Moreover, a computer can be embedded in another device, e.g., a mobile telephone, a Personal Digital Assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a Universal Serial Bus (USB) flash drive), to name a few. Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, such as internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
To provide for interaction with a user, embodiments of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor, for displaying information to the user and a keyboard and a pointing device, e.g., a mouse or a trackball, by which the user can provide input to the computer. Other kinds of devices may also be used to provide for interaction with the user; for example, feedback provided to the user can be any form of sensory feedback, such as visual feedback, auditory feedback, or tactile feedback; and input from the user can be received in any form, including acoustic, speech, or tactile input. Further, the computer may interact with the user by sending and receiving documents to and from the device used by the user; such as by sending a web page to a web browser on the user's client device in response to a request received from the web browser.
Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described is this specification, or any combination of one or more such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an internetwork (e.g., the internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
The computing system may include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some embodiments, the server transmits data (e.g., HTML pages) to the client device (e.g., for the purpose of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) may be received at the server from the client device.
While this specification contains many specific implementation details, these should not be construed as limitations on the scope of any invention or of what may be claimed, but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Furthermore, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous. Moreover, the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
Thus, particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases, the actions recited in the claims can be performed in a different order and still achieve desirable results. Moreover, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some embodiments, multitasking and parallel processing may be advantageous.
Claims (20)
1. A computer-implemented method, comprising:
receiving, by a client device, a first content page comprising a digital component, the digital component comprising computer-readable instructions;
receiving, by an application running on the client device, a request to upload a user profile of a user of the client device to a machine learning platform generated based on the computer-readable instructions, wherein the computer-readable instructions initiate the request in response to detecting an occurrence of an event related to interaction or non-interaction with the digital component; and
in response to receiving the request:
obtaining, by the application, a user profile request data element comprising a model identifier of a machine learning model and one or more characteristics of at least one of the digital component or the first content page;
obtaining, by the application, a user profile of a user of the client device;
obtaining, by the application, context signals provided to one or more content platforms for training the machine learning model; and
transmitting, by the application and to the machine learning platform, a set of data comprising the user profile, the one or more characteristics, the context signal, the model identifier, and data indicating whether the event is an interaction event or a non-interaction event.
2. The computer-implemented method of claim 1, wherein the user profile request data element comprises a token received from a content platform that provides the digital component, the token comprising (i) a set of content comprising the model identifier, the data indicative of the one or more characteristics, a domain of the content platform, and (ii) a digital signature of the set of content generated using an encryption key of the content platform.
3. The computer-implemented method of claim 2, further comprising verifying, by the application, the digital signature prior to transmitting the set of data to the machine learning platform.
4. The computer-implemented method of any preceding claim, wherein the event comprises an interaction event, the method further comprising storing, at the client device, the context signal, the one or more characteristics of the digital component, and the user profile in response to detecting the occurrence of the interaction event.
5. The computer-implemented method of claim 4, further comprising:
in response to detecting the occurrence of the interactivity event, accessing, by the client device, a second content page provided by a second content provider different from a first content provider providing the first content page, wherein the second content page comprises a tag comprising computer readable code;
receiving a request from the tag for the context signal, the one or more characteristics of the digital component, and the user profile;
encrypting, by the application, the context signal, the one or more characteristics of the digital component, and the user profile; and
transmitting the encrypted context signal, the encrypted one or more characteristics of the digital component, and the encrypted user profile to a content platform that provides the digital component.
6. The computer-implemented method of claim 5, further comprising:
detecting, by the computer readable code of the tag, a conversion event; and
transmitting, by the computer readable code of the tag, a conversion notification of the conversion event to the content platform.
7. The computer-implemented method of any preceding claim, further comprising:
for each of the one or more digital components:
sending, by the application, an inference request to the machine learning platform for the digital component, wherein the inference request includes one or more of the user profile, the context signal, or a characteristic of a current content page;
receiving a predicted performance of the digital component from the machine learning platform, wherein a predicted performance metric is based on the user profile and one or more trained machine learning models trained by the machine learning platform;
determining a selection value for the digital component based on the predicted performance; and
selecting a given digital component for display at the client device based at least on the selection value for each of the one or more digital components.
8. The computer-implemented method of claim 7, wherein the inference request for the digital component from the machine learning platform further comprises the one or more characteristics of the digital component, characteristics of the current context page, and the context signal.
9. The computer-implemented method of claim 7 or 8, wherein the predicted performance comprises one of a predicted user interaction rate or a predicted conversion rate of the digital component, or a predicted conversion value of the digital component.
10. The computer-implemented method of claim 7 or 8, wherein the predicted performance is based on performance of the digital component for k nearest neighbor profiles determined based on the one or more machine learning models to be k user profiles that are most similar to the user profile of the user of the client device.
11. The computer-implemented method of any preceding claim, further comprising:
receiving, from a first multi-party computing (MPC) computer of the machine learning platform, a first secret share of an inference result of a first digital component;
receiving a second secret share of the inferred result of the digital component from each of one or more second MPC computers of the machine learning platform;
determining a predicted performance metric for the digital component represented by the inference result based on the first secret share and each second secret share;
selecting the digital component for display at the client device based on the predicted performance metric; and
and displaying the digital component.
12. The computer-implemented method of any preceding claim, wherein the machine learning platform comprises two or more multi-party computing (MPC) computers that use a secure MPC process to train a machine learning model to predict the performance metric of the digital component using the encrypted context signals, the one or more characteristics of the encrypted digital component, the encrypted user profile, and data received from client devices of one or more additional users.
13. The computer-implemented method of any preceding claim, wherein the two or more MPC computers train the machine learning model without accessing the encrypted context signal, one or more characteristics of the encrypted digital component, or the encrypted user profile in clear text.
14. A system, comprising:
one or more processors; and
one or more memories having computer-readable instructions stored thereon that are configured to cause the one or more processors to perform operations comprising:
receiving, by a client device, a first content page comprising a digital component, the digital component comprising computer-readable instructions;
receiving, by an application running on the client device, a request to upload a user profile of a user of the client device to a machine learning platform generated based on the computer-readable instructions, wherein the computer-readable instructions initiate the request in response to detecting an occurrence of an event related to interaction or non-interaction with the digital component; and
in response to receiving the request:
obtaining, by the application, a user profile request data element comprising a model identifier of a machine learning model and one or more characteristics of at least one of the digital component or the first content page;
obtaining, by the application, a user profile of a user of the client device;
obtaining, by the application, context signals provided to one or more content platforms for training the machine learning model; and
transmitting, by the application and to the machine learning platform, a set of data comprising the user profile, the one or more characteristics, the context signal, the model identifier, and data indicating whether the event is an interaction event or a non-interaction event.
15. The system of claim 14, wherein the user profile request data element comprises a token received from a content platform that provides the digital component, the token comprising (i) a set of content comprising the model identifier, the data indicative of the one or more characteristics, a domain of the content platform, and (ii) a digital signature of the set of content generated using an encryption key of the content platform.
16. The system of claim 14 or 15, wherein the event comprises an interaction event, and wherein the operations comprise storing, at the client device, the context signal, the one or more characteristics of the digital component, and the user profile in response to detecting an occurrence of the interaction event.
17. The system of claim 16, wherein the operations comprise:
in response to detecting the occurrence of the interactivity event, accessing, by the client device, a second content page provided by a second content provider different from a first content provider providing the first content page, wherein the second content page comprises a tag comprising computer-readable code;
receiving a request from the tag for the context signal, the one or more characteristics of the digital component, and the user profile;
encrypting, by the application, the context signal, the one or more characteristics of the digital component, and the user profile; and
transmitting the encrypted context signal, the encrypted one or more characteristics of the digital component, and the encrypted user profile to a content platform that provides the digital component.
18. The system of any of claims 14-17, wherein the operations comprise:
for each of the one or more digital components:
sending, by the application, an inference request to the machine learning platform for the digital component, wherein the inference request includes one or more of the user profile, the contextual signal, or a characteristic of a current content page;
receiving a predicted performance of the digital component from the machine learning platform, wherein a predicted performance metric is based on the user profile and one or more trained machine learning models trained by the machine learning platform; and
determining a selection value for the digital component based on the predicted performance; and
selecting a given digital component for display at the client device based at least on the selection value for each of the one or more digital components.
19. The system of any of claims 14-18, wherein the operations comprise:
receiving, from a first multi-party computing (MPC) computer of the machine learning platform, a first secret share of an inference result of a first digital component;
receiving a second secret share of the inferred result of the digital component from each of one or more second MPC computers of the machine learning platform;
determining a predicted performance metric for the digital component represented by the inference result based on the first secret share and each second secret share;
selecting the digital component for display at the client device based on the predicted performance metric; and
and displaying the digital component.
20. A non-transitory computer-readable medium storing instructions that, when executed by one or more data processing apparatus, cause the one or more data processing apparatus to perform operations comprising:
receiving, by a client device, a first content page comprising a digital component, the digital component comprising computer-readable instructions;
receiving, by an application running on the client device, a request to upload a user profile of a user of the client device to a machine learning platform generated based on the computer-readable instructions, wherein the computer-readable instructions initiate the request in response to detecting an occurrence of an event related to interaction or non-interaction with the digital component; and
in response to receiving the request:
obtaining, by the application, a user profile request data element comprising a model identifier of a machine learning model and one or more characteristics of at least one of the digital component or the first content page;
obtaining, by the application, a user profile of a user of the client device;
obtaining, by the application, context signals provided to one or more content platforms for training the machine learning model; and
transmitting, by the application and to the machine learning platform, a set of data comprising the user profile, the one or more characteristics, the context signal, the model identifier, and data indicating whether the event is an interaction event or a non-interaction event.
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2021/023102 WO2022197304A1 (en) | 2021-03-19 | 2021-03-19 | Privacy preserving cross-domain machine learning |
Publications (1)
Publication Number | Publication Date |
---|---|
CN115380287A true CN115380287A (en) | 2022-11-22 |
Family
ID=75478243
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
CN202180005537.5A Pending CN115380287A (en) | 2021-03-19 | 2021-03-19 | Privacy preserving cross-domain machine learning |
Country Status (4)
Country | Link |
---|---|
US (1) | US20220405407A1 (en) |
EP (1) | EP4085365A1 (en) |
CN (1) | CN115380287A (en) |
WO (1) | WO2022197304A1 (en) |
Families Citing this family (1)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20230085466A1 (en) * | 2021-09-16 | 2023-03-16 | Adobe Inc. | Determining user affinities for content generation applications |
Family Cites Families (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
EP4220464A1 (en) * | 2017-03-22 | 2023-08-02 | Visa International Service Association | Privacy-preserving machine learning |
US10198399B1 (en) * | 2018-03-06 | 2019-02-05 | KenSci Inc. | Cryptographically secure machine learning |
JP7284264B2 (en) * | 2019-04-05 | 2023-05-30 | グーグル エルエルシー | Ways to protect your privacy |
US11410081B2 (en) * | 2019-05-20 | 2022-08-09 | International Business Machines Corporation | Machine learning with differently masked data in secure multi-party computing |
-
2021
- 2021-03-19 WO PCT/US2021/023102 patent/WO2022197304A1/en unknown
- 2021-03-19 CN CN202180005537.5A patent/CN115380287A/en active Pending
- 2021-03-19 EP EP21718356.5A patent/EP4085365A1/en active Pending
- 2021-03-19 US US17/638,943 patent/US20220405407A1/en active Pending
Also Published As
Publication number | Publication date |
---|---|
EP4085365A1 (en) | 2022-11-09 |
WO2022197304A1 (en) | 2022-09-22 |
US20220405407A1 (en) | 2022-12-22 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
KR102596445B1 (en) | How to protect your personal information | |
US20230214684A1 (en) | Privacy preserving machine learning using secure multi-party computation | |
US11843672B2 (en) | Privacy preserving centroid models using secure multi-party computation | |
Iordanou et al. | Beyond content analysis: Detecting targeted ads via distributed counting | |
US20230078704A1 (en) | Privacy preserving machine learning labelling | |
US20230274183A1 (en) | Processing of machine learning modeling data to improve accuracy of categorization | |
JP7471445B2 (en) | Privacy-preserving machine learning for content delivery and analytics | |
EP3804221B1 (en) | Improving data integrity with trusted code attestation tokens | |
US20220405407A1 (en) | Privacy preserving cross-domain machine learning | |
US20220122121A1 (en) | Combating false information with crowdsourcing | |
US20230299960A1 (en) | Localized cryptographic techniques for privacy protection | |
JP7354427B2 (en) | Online privacy protection techniques | |
JP7471450B2 (en) | Improving the performance of secure multiparty computation | |
JP7425222B2 (en) | Privacy Preserving Measurements Using Secure Multiparty Computation | |
US20240163341A1 (en) | Privacy preserving centroid models using secure multi-party computation | |
US20220156783A1 (en) | Methods and apparatus to estimate unique audience sizes across multiple intersecting platforms | |
CN114930334A (en) | Additive and subtractive noise for privacy protection | |
EP4127982A1 (en) | Privacy-preserving cross-domain experimental group partitioning and monitoring |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
PB01 | Publication | ||
PB01 | Publication | ||
SE01 | Entry into force of request for substantive examination | ||
SE01 | Entry into force of request for substantive examination |