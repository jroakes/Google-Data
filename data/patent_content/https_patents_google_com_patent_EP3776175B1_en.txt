EP3776175B1 - Action validation for digital assistant-based applications - Google Patents
Action validation for digital assistant-based applications Download PDFInfo
- Publication number
- EP3776175B1 EP3776175B1 EP19740095.5A EP19740095A EP3776175B1 EP 3776175 B1 EP3776175 B1 EP 3776175B1 EP 19740095 A EP19740095 A EP 19740095A EP 3776175 B1 EP3776175 B1 EP 3776175B1
- Authority
- EP
- European Patent Office
- Prior art keywords
- application
- data processing
- processing system
- action
- component
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active
Links
- 230000009471 action Effects 0.000 title claims description 331
- 238000010200 validation analysis Methods 0.000 title description 8
- 238000012545 processing Methods 0.000 claims description 295
- 238000000034 method Methods 0.000 claims description 82
- 230000004044 response Effects 0.000 claims description 69
- 238000004891 communication Methods 0.000 claims description 46
- 230000008569 process Effects 0.000 claims description 44
- 238000004088 simulation Methods 0.000 claims description 4
- 238000004458 analytical method Methods 0.000 claims description 2
- 238000001514 detection method Methods 0.000 claims 1
- 238000003058 natural language processing Methods 0.000 description 59
- 238000007689 inspection Methods 0.000 description 55
- 230000005236 sound signal Effects 0.000 description 32
- 230000015654 memory Effects 0.000 description 22
- 230000000694 effects Effects 0.000 description 13
- 238000012384 transportation and delivery Methods 0.000 description 12
- 238000004590 computer program Methods 0.000 description 11
- 238000012360 testing method Methods 0.000 description 9
- 230000003993 interaction Effects 0.000 description 8
- 238000005108 dry cleaning Methods 0.000 description 7
- 238000010801 machine learning Methods 0.000 description 7
- 238000013507 mapping Methods 0.000 description 6
- 235000013305 food Nutrition 0.000 description 5
- 238000013515 script Methods 0.000 description 5
- 230000000007 visual effect Effects 0.000 description 5
- 230000006870 function Effects 0.000 description 4
- 230000007246 mechanism Effects 0.000 description 4
- 230000003287 optical effect Effects 0.000 description 4
- 244000035744 Hura crepitans Species 0.000 description 3
- 230000005540 biological transmission Effects 0.000 description 3
- 238000006243 chemical reaction Methods 0.000 description 3
- 230000000644 propagated effect Effects 0.000 description 3
- 238000009877 rendering Methods 0.000 description 3
- 230000000903 blocking effect Effects 0.000 description 2
- 239000003795 chemical substances by application Substances 0.000 description 2
- 238000010411 cooking Methods 0.000 description 2
- 238000010586 diagram Methods 0.000 description 2
- 238000005516 engineering process Methods 0.000 description 2
- 230000014509 gene expression Effects 0.000 description 2
- 230000033001 locomotion Effects 0.000 description 2
- 230000007257 malfunction Effects 0.000 description 2
- 238000007726 management method Methods 0.000 description 2
- 230000003068 static effect Effects 0.000 description 2
- 230000001360 synchronised effect Effects 0.000 description 2
- IRLPACMLTUPBCL-KQYNXXCUSA-N 5'-adenylyl sulfate Chemical compound C1=NC=2C(N)=NC=NC=2N1[C@@H]1O[C@H](COP(O)(=O)OS(O)(=O)=O)[C@@H](O)[C@H]1O IRLPACMLTUPBCL-KQYNXXCUSA-N 0.000 description 1
- 238000000342 Monte Carlo simulation Methods 0.000 description 1
- 230000004913 activation Effects 0.000 description 1
- 230000002776 aggregation Effects 0.000 description 1
- 238000004220 aggregation Methods 0.000 description 1
- 238000013528 artificial neural network Methods 0.000 description 1
- 230000003190 augmentative effect Effects 0.000 description 1
- 238000004364 calculation method Methods 0.000 description 1
- 230000001413 cellular effect Effects 0.000 description 1
- 230000008878 coupling Effects 0.000 description 1
- 238000010168 coupling process Methods 0.000 description 1
- 238000005859 coupling reaction Methods 0.000 description 1
- 230000001351 cycling effect Effects 0.000 description 1
- 238000013500 data storage Methods 0.000 description 1
- 238000003066 decision tree Methods 0.000 description 1
- 238000011156 evaluation Methods 0.000 description 1
- 238000001914 filtration Methods 0.000 description 1
- 230000008014 freezing Effects 0.000 description 1
- 238000007710 freezing Methods 0.000 description 1
- 239000000446 fuel Substances 0.000 description 1
- 230000000977 initiatory effect Effects 0.000 description 1
- 239000004973 liquid crystal related substance Substances 0.000 description 1
- 239000011159 matrix material Substances 0.000 description 1
- 238000005259 measurement Methods 0.000 description 1
- 238000010295 mobile communication Methods 0.000 description 1
- 238000012986 modification Methods 0.000 description 1
- 230000004048 modification Effects 0.000 description 1
- 230000000877 morphologic effect Effects 0.000 description 1
- 230000008520 organization Effects 0.000 description 1
- 230000037081 physical activity Effects 0.000 description 1
- 238000013439 planning Methods 0.000 description 1
- 230000000306 recurrent effect Effects 0.000 description 1
- 230000008439 repair process Effects 0.000 description 1
- 230000003252 repetitive effect Effects 0.000 description 1
- 238000012552 review Methods 0.000 description 1
- 230000011218 segmentation Effects 0.000 description 1
- 239000004065 semiconductor Substances 0.000 description 1
- 230000006403 short-term memory Effects 0.000 description 1
- 239000007787 solid Substances 0.000 description 1
- 238000013179 statistical model Methods 0.000 description 1
- 239000000758 substrate Substances 0.000 description 1
- 238000012549 training Methods 0.000 description 1
- 238000012546 transfer Methods 0.000 description 1
- 238000013519 translation Methods 0.000 description 1
- 230000001960 triggered effect Effects 0.000 description 1
Images
Classifications
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/362—Software debugging
- G06F11/366—Software debugging using diagnostics
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F3/00—Input arrangements for transferring data to be processed into a form capable of being handled by the computer; Output arrangements for transferring data from processing unit to output unit, e.g. interface arrangements
- G06F3/16—Sound input; Sound output
- G06F3/167—Audio in a user interface, e.g. using voice commands for navigating, audio feedback
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3664—Environments for testing or debugging software
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3684—Test management for test design, e.g. generating new test cases
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3688—Test management for test execution, e.g. scheduling of test suites
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F11/00—Error detection; Error correction; Monitoring
- G06F11/36—Preventing errors by testing or debugging software
- G06F11/3668—Software testing
- G06F11/3672—Test management
- G06F11/3692—Test management for test results analysis
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/242—Query formulation
- G06F16/243—Natural language query formulation
-
- G—PHYSICS
- G06—COMPUTING; CALCULATING OR COUNTING
- G06F—ELECTRIC DIGITAL DATA PROCESSING
- G06F16/00—Information retrieval; Database structures therefor; File system structures therefor
- G06F16/20—Information retrieval; Database structures therefor; File system structures therefor of structured data, e.g. relational data
- G06F16/24—Querying
- G06F16/245—Query processing
- G06F16/2455—Query execution
- G06F16/24564—Applying rules; Deductive queries
- G06F16/24565—Triggers; Constraints
Definitions
- WO 2016/111881 A1 describes a method for headlessly completing a task of an application in the background of a virtual assistant and US 2018/247654 A1 a test environment for voice queries to a natural language processor.
- This technology is generally directed to validating actions in a digital assistant-based application.
- the technology allows operation of a device under the control of an application to be simulated and for the application to be modified in response to the simulation.
- the modifications may, for example, modify how the application interacts with the device, for example modifying operation of the device under the control of the application.
- An application developer can develop an application.
- the application includes a conversational interface.
- the application can receive commands to perform an action.
- voice-based input can be processed by the conversational interface to identify an action and generate a command.
- voice-based input can be processed by the conversational interface to identify an action and generate a command.
- voice-based input can be processed by the conversational interface to identify an action and generate a command.
- an application may contain errors or bugs that result in faulty execution of the action.
- the application can execute the action but fail to end a process or thread, or deactivate a sensor of the device, upon completion of the action. Due to the large number of applications and various actions configured on each, it can be challenging to efficiently and reliably evaluate each of the actions for each of the applications. Since an action can be triggered by numerous different conversational flows, it can be challenging to test all the different conversational flows to determine whether the actions they trigger are intended actions and are executed properly.
- a data processing system of this technical solution can simulate operation of a device running the application by automatically generating input that corresponds to a voice-based input that is provided to a conversational interface.
- the data processing system can trigger actions of the application, and automate a user interaction with a conversational interface. By doing so, the data processing system can identify errors with the execution of the action by the application and can take steps to modify the application in response to the identified errors.
- the data processing system of the technical solution can provide a scalable platform that allows for the validation of actions executed by applications before the application is delivered to client computing devices for execution or otherwise launched.
- the data processing system can identify a predetermined list of action, items, or functions to test.
- the data processing system can simulate numerous user conversations (e.g., via a Monte Carlo simulation) to test each conversation flow.
- the data processing system can notify the developer of the results to allow the developer to update their application.
- the data processing system of the technical solution can (i) perform pre-launch testing of applications to identify errors before the application is launched; (ii) test unstructured conversational flows by constructing input to drive a conversation; (iii) customize or tailor aspects of the conversation based on the application domain or type of application (e.g., different terms or vocabulary used for a movie ticket application, a navigation application, or a music streaming application); (iv) use a model generated based on historical conversations from actual users in order to simulate the conversation with an application by leveraging historical user conversations in an anonymous manner to generate input with intent; (v) use a classifier to determine a type of an action; and (vi) notify developers of the results of the review process responsive to receiving the application (e.g., within 5 or 10 minutes of receiving the application from the developer or a request from the developer to validate the application).
- the application domain or type of application e.g., different terms or vocabulary used for a movie ticket application, a navigation application, or a music streaming application
- the data processing system can test an action for an application used to provide a flower delivery service.
- the data processing system can generate a simulated voice input that triggers the application to identify and execute an application.
- the data processing system can execute the application to generate a response to the voice input.
- the data processing system can simulate a second voice input requesting to speak with customer service.
- the application can process the second voice input and establish a phone call between a customer service agent and a simulated or virtual user.
- the data processing system can terminate the call, and then determine the state of the application.
- the data processing system can determine whether processes, sub-processes, threads or sensors associated with the execution of the action by the application have been terminated or deactivated.
- the data processing system can determine that the failure of the application to deactivate the sensor after termination of the session is an error or bug in the application.
- the data processing system can resolve the error or bug using one or more techniques, including, for example, applying a patch to the application to deactivate the sensor, blocking the application from delivery to client computing devices, removing the erroneous feature of the application, blocking the application from executing the actions, or notifying the developer of the error.
- FIG. 1 illustrates an example system 100 to validate actions in a digital assistant-based application.
- the system 100 can include content selection infrastructure.
- the system 100 includes a data processing system 102.
- the data processing system 102 communicates with one or more of an application developer device 160 or a computing device 140 via a network 101.
- the network 101 can include computer networks such as the Internet, local, wide, metro, or other area networks, intranets, satellite networks, and other communication networks such as voice or data mobile telephone networks.
- the network 101 can be used to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed on at least one computing device 140, such as a laptop, desktop, tablet, personal digital assistant, smart phone, portable computers, or speaker.
- a user of the computing device 140 can access an application, information or data provided by an application developer device 160.
- the computing device 140 may or may not include a display; for example, the computing device may include limited types of user interfaces, such as a microphone and speaker. In some cases, the primary user interface of the computing device 140 may be a microphone and speaker.
- the network 101 can include or constitute a display network, e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system, or that are eligible to include third party digital components as part of a digital component placement campaign.
- the network 101 can be used by the data processing system 102 to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by the client computing device 140.
- information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by the client computing device 140.
- a user of the client computing device 140 can access information or data provided by the application developer device 160, or other service provider device or content provider device.
- the network 101 may be any type or form of network and may include any of the following: a point-to-point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network.
- the network 101 may include a wireless link, such as an infrared channel or satellite band.
- the topology of the network 101 may include a bus, star, or ring network topology.
- the network may include mobile telephone networks using any protocol or protocols used to communicate among mobile devices, including advanced mobile phone protocol (“AMPS”), time division multiple access (“TDMA”), code-division multiple access (“CDMA”), global system for mobile communication (“GSM”), general packet radio services (“GPRS”) or universal mobile telecommunications system (“UMTS”).
- AMPS advanced mobile phone protocol
- TDMA time division multiple access
- CDMA code-division multiple access
- GSM global system for mobile communication
- GPRS general packet radio services
- UMTS universal mobile telecommunications system
- Different types of data may be transmitted via different protocols, or the same types of data may be transmitted via different protocols.
- the system 100 includes at least one data processing system 102.
- the data processing system 102 includes at least one logic device such as a computing device having a processor to communicate via the network 101, for example with the computing device 140, or the application developer device 160 (or other service provider device or content provider device).
- the data processing system 102 includes at least one computation resource, server, processor or memory.
- the data processing system 102 can include a plurality of computation resources or servers located in at least one data center.
- the data processing system 102 can include multiple, logically-grouped servers and facilitate distributed computing techniques.
- the logical group of servers may be referred to as a data center, server farm or a machine farm.
- the servers can also be geographically dispersed.
- a data center or machine farm may be administered as a single entity, or the machine farm can include a plurality of machine farms.
- the servers within each machine farm can be heterogeneous - one or more of the servers or machines can operate according to one or more type of operating system platform.
- Servers in the machine farm can be stored in high-density rack systems, along with associated storage systems, and located in an enterprise data center. For example, consolidating the servers in this way may improve system manageability, data security, the physical security of the system, and system performance by locating servers and high performance storage systems on localized high performance networks. Centralization of all or some of the data processing system 102 components, including servers and storage systems, and coupling them with advanced system management tools allows more efficient use of server resources, which saves power and processing requirements and reduces bandwidth usage.
- the system 100 can include, access, or otherwise interact with at least one application developer device 160.
- the application developer device 160 can include at least one logic device such as a computing device having a processor to communicate via the network 101, for example with the computing device 140 or the data processing system 102.
- the application developer device 160 can include at least one computation resource, server, processor or memory.
- application developer device 160 can include a plurality of computation resources or servers located in at least one data center.
- the application developer device 160 can include one or more component or functionality of the data processing system 102.
- the application developer device 160 can include a content provider device, or the content provider device can be separate from the application developer device 160.
- the data processing system 102 can communicate with a content provider device.
- the content provider computing device, or application developer device 160 can provide audio based digital components for display by the client computing device 140 as an audio output digital component.
- the digital component can include an offer for a good or service, such as a voice based message that states: "Would you like me to order you a taxi?"
- the application developer device 160 can include memory to store a series of audio digital components that can be provided in response to a voice based query.
- the application developer device 160 can also provide audio based digital components (or other digital components) to the data processing system 102 where they can be stored in the data repository 120.
- the data processing system 102 can select the audio digital components and provide (or instruct the application developer device 160 to provide) the audio digital components to the client computing device 140.
- the audio based digital components can be exclusively audio or can be combined with text, image, or video
- the application developer device 160 can include, interface, or otherwise communicate with a natural language processor component.
- the application developer device 160 can provide an application having a conversational interface 114 that can include one or more component or functionality of the natural language processor component 106.
- the application developer device 160 can execute the conversational interface 114, or aspect thereof.
- the application developer device 160 can include or execute a natural language processor component 106, or aspect thereof.
- the application developer device 160 can include or execute a conversational interface 114, or aspect thereof.
- the application developer device 160 can engage with the client computing device 140 (via the data processing system 102 or bypassing the data processing system 102) to create a back-and-forth real-time voice or audio based conversation (e.g., a session) between the client computing device 140 and the application developer device 160.
- the application developer device 160 can engage with the client computing device 140 via the NLP component 106, conversational interface 114 or other component.
- the application developer device 160 can receive or provide data messages to the direct action API 108 of the data processing system 102.
- the application developer device 160 can create, store, or make available digital components for a car sharing service, and the application developer device 160 (or a separate service provider device) can establish a session with the client computing device 140 to arrange for a delivery of a taxi or car of the car share service to pick up the end user of the client computing device 140.
- the data processing system 102 via the direct action API 108, the NLP component 106 or other components can also establish the session with the client computing device, including or bypassing the application developer device 160, to arrange for example for a delivery of a taxi or car of the car share service.
- the application developer device 160 can include or refer to a provider of an application.
- the application developer device 160 can include or refer to an application developer device.
- the application developer device 160 can be a third-party provider device.
- the computing device 140 can include, interface, or otherwise communicate with at least one sensor 142, transducer 144, audio driver 156, or pre-processor 148.
- the sensor 142 can include, for example, an ambient light sensor, proximity sensor, temperature sensor, accelerometer, gyroscope, motion detector, GPS sensor, location sensor, microphone, or touch sensor.
- the transducer 144 can include a speaker or a microphone.
- the audio driver 146 can provide a software interface to the hardware transducer 144.
- the audio driver can execute the audio file or other instructions provided by the data processing system 102 to control the transducer 144 to generate a corresponding acoustic wave or sound wave.
- the pre-processor 148 can be configured to detect a keyword and perform an action based on the keyword.
- the pre-processor 148 can filter out one or more terms or modify the terms prior to transmitting the terms to the data processing system 102 for further processing.
- the pre-processor 148 can convert the analog audio signals detected by the microphone into a digital audio signal, and transmit one or more data packets carrying the digital audio signal to the data processing system 102 via the network 101.
- the pre-processor 148 can transmit data packets carrying some or all of the input audio signal responsive to detecting an instruction to perform such transmission.
- the instruction can include, for example, a trigger keyword or other keyword or approval to transmit data packets comprising the input audio signal to the data processing system 102.
- the client computing device 140 can be associated with an end user that enters voice queries as audio input into the client computing device 140 (via the sensor 142) and receives audio output in the form of a computer generated voice that can be provided from the data processing system 102 (or the application developer device 160 or the application developer device 160) to the client computing device 140, output from the transducer 144 (e.g., a speaker).
- the computer generated voice can include recordings from a real person or computer generated language.
- the data processing system 102 can include a content placement system having at least one computation resource or server.
- the data processing system 102 can include, interface, or otherwise communicate with at least one interface 104.
- the data processing system 102 can include, interface, or otherwise communicate with at least one natural language processor component 106.
- the data processing system 102 can include, interface, or otherwise communicate with at least one direct action application programming interface ("API") 108.
- API application programming interface
- the data processing system 102 can include, interface, or otherwise communicate with at least one input generation component 110.
- the data processing system 102 can include, interface, or otherwise communicate with at least one application execution component 112.
- the application execution component 112 can include a conversational interface 114.
- the data processing system 102 can include, interface, or otherwise communicate with at least one inspection component 116.
- the data processing system 102 can include, interface, or otherwise communicate with at least one virtualization component 118.
- the data processing system 102 adapted to include, interface, or otherwise communicate with at least one data repository 120.
- the at least one data repository 120 can include or store, in one or more data structures or databases, application data 122, an action repository 124, logs 126, a model 128, state information 130, or error codes 132.
- the application data 122 can include, for example, an executable file for the application, metadata about the application, content of the application, an application package file, transcript file, or other data associated with the application.
- the action repository 124 includes predetermined actions.
- the action repository 124 can include preconfigured or default actions.
- the action repository 124 can include actions that the data processing system 102 (or direct action API 108) is configured to process.
- the action repository 124 can associate actions in a data structure based on a type of application or a domain of an application.
- Types of application can include, for example, lifestyle applications (e.g., fitness, dating, food, music, or travel), social media applications, utility applications (e.g., reminders, calculator, flashlight, weather), games or entertainment applications, productivity applications (e.g., word processing, spreadsheets, pay), or news or information applications.
- a domain of an application can include, for example, music streaming service, ride sharing service, ticket purchasing service, recipes or cooking.
- a domain can be a subset of a type of an applications.
- the action repository 124 can include a mapping of actions to types of applications or domains of applications. For example, an application having a type "music” or domain “music streaming service” can be associated with actions such as “play music”, “pause music”, “search for music by ⁇ artist_name>,” or "play ⁇ song_name> on ⁇ device_name>.”
- the data repository 120 can include logs 126.
- Logs 126 can refer to or include historical network activity associated with one or more applications.
- Historical network activity can refer to or include network activity that occurred in the last 24 hours, 48 hours, 72 hours, 7 days, 30 days, 60 days or more.
- Network activity can include, for example, execution of an application, voice input received by an application, or application output.
- Logs can include voice input provided to one or more applications. Logs can be categorized based on features, such as type of application.
- the data repository 120 can store a model 128.
- a model 128 can refer to a machine learning model that can be used to generate input, such as conversational input.
- the data processing system 102 can train the model 128 using logs 126.
- the model 128 can be used to construct sentences that can be input into the application.
- the model 128 can construct the input based on an action.
- the model 128 can be trained to generate input based on types of actions to be executed by an application, or types of applications.
- the model 128 can be trained using logs 126 to generate input for different types of actions and applications.
- the logs 126 can include historical input for different types of actions or different types of applications.
- the data processing system 102 can train the model 128 using the logs 126 for a type of action or application.
- the model 128 can generate a trigger phrase, query, response, or other input that can be provided to an application to execute an action.
- the data repository 120 can include state information 130.
- State information 130 can refer to or include a state of an application or a status of an application.
- State information 130 can refer to or include a state or status of a process, thread, or sensor associated with or utilized by the application to execute an action or perform a function.
- the state of the application can be active, standby, paused, or terminated.
- the state can further indicate a state within execution of the application, such as an initial screen, launch screen, initialization state, home screen, processing state, action querying state, semantic analyzing state, action lookup state, parameter request state, action execution state, communication session state, termination state, or other state in the application.
- the data repository 120 can include error codes 132.
- the error codes 132 can include an identifier of a type of an error.
- the error codes 132 can include alphanumeric values, text, terms, strings, symbols, or other indications of an error or type of an error.
- an error code 132 can refer to a failure of a sensor to deactivate, failure of an action to be completed, failure of the application to request a value of a parameter used to execute the action, failure of the application to execute the action using the parameter, or failure of the application to deactivate a microphone after termination.
- the interface 104, NLP component 106, direct action API 108, input generation component 110, application execution component 112, conversational interface 114, inspection component 116, or virtualization component 118 can each include at least one processing unit or other logic device such as programmable logic array engine, or module configured to communicate with the database repository 120 or database.
- the interface 104, NLP component 106, direct action API 108, input generation component 110, application execution component 112, conversational interface 114, inspection component 116, virtualization component 118 and data repository 120 can be separate components, a single component, or part of the data processing system 102.
- the system 100 and its components, such as a data processing system 102 can include hardware elements, such as one or more processors, logic devices, or circuits.
- the data processing system 102 can obtain anonymous computer network activity information associated with a plurality of computing devices 140.
- a user of a computing device 140 can affirmatively authorize the data processing system 102 to obtain network activity information corresponding to the user's computing device 140.
- the data processing system 102 can prompt the user of the computing device 140 for consent to obtain one or more types of network activity information.
- the identity of the user of the computing device 140 can remain anonymous and the computing device 140 can be associated with a unique identifier (e.g., a unique identifier for the user or the computing device provided by the data processing system or a user of the computing device).
- the data processing system can associate each observation with a corresponding unique identifier.
- the data processing system 102 can interface with a content provider or content provider device.
- the content provider device can be the application developer device 162.
- the content provider device can be a third party device different from the data processing system 102 and the application developer device 162.
- the content provider can establish an electronic content campaign.
- the electronic content campaign can be stored as content data in data repository 120.
- An electronic content campaign can refer to one or more content groups that correspond to a common theme.
- a content campaign can include a hierarchical data structure that includes content groups, digital component data objects, and content selection criteria. To create a content campaign, a content provider can specify values for campaign level parameters of the content campaign.
- the campaign level parameters can include, for example, a campaign name, a preferred content network for placing digital component objects, a value of resources to be used for the content campaign, start and end dates for the content campaign, a duration for the content campaign, a schedule for digital component object placements, language, geographical locations, type of computing devices on which to provide digital component objects.
- an impression can refer to when a digital component object is fetched from its source (e.g., data processing system 102 or content provider), and is countable.
- robotic activity can be filtered and excluded, as an impression.
- an impression can refer to a measurement of responses from a Web server to a page request from a browser, which is filtered from robotic activity and error codes, and is recorded at a point as close as possible to opportunity to render the digital component object for display on the computing device 140.
- an impression can refer to a viewable or audible impression; e.g., the digital component object is at least partially (e.g., 20%, 30%, 30%, 40%, 50%, 60%, 70%, or more) viewable on a display device 150 of the client computing device 140, or audible via a speaker (e.g., transducer 154) of the computing device 140.
- a click or selection can refer to a user interaction with the digital component object, such as a voice response to an audible impression, a mouse-click, touch interaction, gesture, shake, audio interaction, or keyboard click.
- a conversion can refer to a user taking a desired action with respect to the digital component objection; e.g., purchasing a product or service, completing a survey, visiting a physical store corresponding to the digital component, or completing an electronic transaction.
- the content provider can further establish one or more content groups for a content campaign.
- a content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interest, topic, or vertical.
- Content groups under the same content campaign can share the same campaign level parameters, but may have tailored specifications for particular content group level parameters, such as keywords, negative keywords (e.g., that block placement of the digital component in the presence of the negative keyword on main content), bids for keywords, or parameters associated with the bid or content campaign.
- the content provider can provide values for the content group level parameters of the content group.
- the content group level parameters include, for example, a content group name or content group theme, and bids for different content placement opportunities (e.g., automatic placement or managed placement) or outcomes (e.g., clicks, impressions, or conversions).
- a content group name or content group theme can be one or more terms that the content provider can use to capture a topic or subject matter for which digital component objects of the content group is to be selected for display. For example, a car dealership can create a different content group for each brand of vehicle it carries, and may further create a different content group for each model of vehicle it carries.
- Examples of the content group themes that the car dealership can use include, for example, “Make A sports car” “Make B sports car,” “Make C sedan,” “Make C truck,” “Make C hybrid,” or “Make D hybrid.”
- An example content campaign theme can be “hybrid” and include content groups for both “Make C hybrid” and “Make D hybrid”, for example.
- the content provider can provide one or more keywords and digital component objects to each content group. Keywords can include terms that are relevant to the product or services of associated with or identified by the digital component objects.
- a keyword can include one or more terms or phrases.
- the car dealership can include "sports car,” “V-6 engine,” “four-wheel drive,” “fuel efficiency,” as keywords for a content group or content campaign.
- negative keywords can be specified by the content provider to avoid, prevent, block, or disable content placement on certain terms or keywords.
- the content provider can specify a type of matching, such as exact match, phrase match, or broad match, used to select digital component objects.
- the content provider can provide one or more keywords to be used by the data processing system 102 to select a digital component object provided by the content provider.
- the content provider can identify one or more keywords to bid on, and further provide bid amounts for various keywords.
- the content provider can provide additional content selection criteria to be used by the data processing system 102 to select digital component objects. Multiple content providers can bid on the same or different keywords, and the data processing system 102 can run a content selection process or ad auction responsive to receiving an indication of a keyword of an electronic message.
- the content provider can provide one or more digital component objects for selection by the data processing system 102.
- the data processing system 102 can select the digital component objects when a content placement opportunity becomes available on the application provided by the application developer device 162, or responsive to a request for a digital component object made by the application.
- Different types of digital component objects can be included in a content group, such as a voice digital component, audio digital component, content item, a text digital component, an image digital component, video digital component, multimedia digital component, or digital component link.
- the data processing system 102 can transmit the digital component object for rendering on a computing device 140 or display device 150 of the computing device 140.
- Rendering can include displaying the digital component on a display device 150, or playing the digital component via a speaker of the computing device 140.
- the data processing system 102 can provide instructions to a computing device 140 to render the digital component object.
- the data processing system 102 can instruct the computing device 140, or an audio driver 156 of the computing device 140, to generate audio signals or acoustic waves.
- the data processing system 102 can include an interface 104 (or interface component) designed, configured, constructed, or operational to receive and transmit information using, for example, data packets.
- the interface 104 can receive and transmit information using one or more protocols, such as a network protocol.
- the interface 104 can include a hardware interface, software interface, wired interface, or wireless interface.
- the interface 104 can facilitate translating or formatting data from one format to another format.
- the interface 104 can include an application programming interface that includes definitions for communicating between various components, such as software components.
- the interface 104 can facilitate communicating between one or more components of the data processing system 102.
- the data processing system 102 can include an application, script or program installed at the client computing device 140, such as an app to communicate input audio signals to the interface 104 of the data processing system 102 and to drive components of the client computing device to render output audio signals.
- the data processing system 102 can receive data packets or other signal that includes or identifies an audio input signal.
- the data processing system 102 can execute or run the NLP component 106 to receive or obtain the audio signal and parse the audio signal.
- the NLP component 106 can provide for interactions between a human and a computer.
- the NLP component 106 can be configured with techniques for understanding natural language and allowing the data processing system 102 to derive meaning from human or natural language input.
- the NLP component 106 can include or be configured with technique based on machine learning, such as statistical machine learning.
- the NLP component 106 can utilize decision trees, statistical models, or probabilistic models to parse the input audio signal.
- the NLP component 106 can perform, for example, functions such as named entity recognition (e.g., given a stream of text, determine which items in the text map to proper names, such as people or places, and what the type of each such name is, such as person, location, or organization), natural language generation (e.g., convert information from computer databases or semantic intents into understandable human language), natural language understanding (e.g., convert text into more formal representations such as first-order logic structures that a computer module can manipulate), machine translation (e.g., automatically translate text from one human language to another), morphological segmentation (e.g., separating words into individual morphemes and identify the class of the morphemes, which can be challenging based on the complexity of the morphology or structure of the words of the language being considered), question answering
- the NLP component 106 converts the audio input signal into recognized text by comparing the input signal against a stored, representative set of audio waveforms (e.g., in the data repository 120) and choosing the closest matches.
- the set of audio waveforms can be stored in data repository 120 or other database accessible to the data processing system 102.
- the representative waveforms are generated across a large set of users, and then may be augmented with speech samples from the user.
- the NLP component 106 matches the text to words that are associated, for example via training across users or through manual specification, with actions that the data processing system 102 can serve.
- the audio input signal can be detected by the sensor 142 or transducer 144 (e.g., a microphone) of the client computing device 140. Via the transducer 144, the audio driver 146, or other components the client computing device 140 can provide the audio input signal to the data processing system 102 (e.g., via the network 101) where it can be received (e.g., by the interface 104) and provided to the NLP component 106 or stored in the data repository 120.
- the data processing system 102 e.g., via the network 101
- the NLP component 106 can obtain the input audio signal. From the input audio signal, the NLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request.
- the request can indicate intent or subject matter of the input audio signal.
- the trigger keyword can indicate a type of action likely to be taken. For example, the NLP component 106 can parse the input audio signal to identify at least one request to leave home for the evening to attend dinner and a movie.
- the trigger keyword can include at least one word, phrase, root or partial word, or derivative indicating an action to be taken. For example, the trigger keyword "go" or "to go to" from the input audio signal can indicate a need for transport.
- the input audio signal does not directly express an intent for transport, however the trigger keyword indicates that transport is an ancillary action to at least one other action that is indicated by the request.
- the trigger keyword can refer to or include a wakeup word, activation word or keyword that causes the computing device 140 to begin processing the input audio signal.
- the NLP component 106 can parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and the trigger keyword. For instance, the NLP component 106 can apply a semantic processing technique to the input audio signal to identify the trigger keyword or the request. The NLP component 106 can apply the semantic processing technique to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal can include the sentence "I need someone to do my laundry and my dry cleaning.” The NLP component 106 can apply a semantic processing technique, or other natural language processing technique, to the data packets comprising the sentence to identify trigger phrases "do my laundry" and "do my dry cleaning". The NLP component 106 can further identify multiple trigger keywords, such as laundry, and dry cleaning. For example, the NLP component 106 can determine that the trigger phrase includes the trigger keyword and a second trigger keyword.
- the NLP component 106 can filter the input audio signal to identify the trigger keyword.
- the data packets carrying the input audio signal can include "It would be great if I could get someone that could help me go to the airport", in which case the NLP component 106 can filter out one or more terms as follows: “it”, “would", “be”, “great”, “if', “I”, “could”, “get”, “someone”, “that”, “could”, or “help”. By filtering out these terms, the NLP component 106 may more accurately and reliably identify the trigger keywords, such as "go to the airport” and determine that this is a request for a taxi or a ride sharing service.
- the NLP component can determine that the data packets carrying the input audio signal includes one or more requests.
- the input audio signal can include the sentence "I need someone to do my laundry and my dry cleaning.”
- the NLP component 106 can determine this is a request for a laundry service and a dry cleaning service.
- the NLP component 106 can determine this is a single request for a service provider that can provide both laundry services and dry cleaning services.
- the NLP component 106 can determine that this is two requests; a first request for a service provider that performs laundry services, and a second request for a service provider that provides dry cleaning services.
- the NLP component 106 can combine the multiple determined requests into a single request, and transmit the single request to an application developer device 160.
- the NLP component 106 can transmit the individual requests to respective application developer devices 160 (or service provider devices or other third-party devices that can fulfill or execute an action), or separately transmit both requests to the same application developer device 160.
- the data processing system 102 can include a direct action API 108 designed and constructed to generate, based on the trigger keyword, an action data structure responsive to the request. Processors of the data processing system 102 can invoke the direct action API 108 to execute scripts that generate a data structure to an application developer device 160 to request or order a service or product, such as a car from a car share service.
- the direct action API 108 can obtain data from the data repository 120, as well as data received with end user consent from the client computing device 140 to determine location, time, user accounts, logistical or other information to allow the application developer device 160 to perform an operation, such as reserve a car from the car share service.
- the data processing system 102 can also communicate with the application developer device 160 to complete the conversion by in this example making the car share pick up reservation.
- the direct action API 108 can execute a specified action to satisfy the end user's intention, as determined by the data processing system 102. Depending on the action specified in its inputs, the direct action API 108 can execute code or a dialog script that identifies the parameters required to fulfill a user request. Such code can look-up additional information, e.g., in the data repository 120, such as the name of a home automation service, or it can provide audio output for rendering at the client computing device 140 to ask the end user questions such as the intended destination of a requested taxi. The direct action API 108 can determine necessary parameters and can package the information into an action data structure, which can then be sent to another component such as the application execution component 112 or to the application developer device 160 to be fulfilled.
- the direct action API 108 can receive an instruction or command from the NLP component 106, or other component of the data processing system 102, to generate or construct the action data structure.
- the direct action API 108 can determine a type of action in order to select a template from the template repository 134 stored in the data repository 120.
- Types of actions can include, for example, services, products, reservations, or tickets.
- Types of actions can further include types of services or products.
- types of services can include car share service, food delivery service, laundry service, maid service, repair services, or household services.
- Types of products can include, for example, clothes, shoes, toys, electronics, computers, books, or jewelry.
- Types of reservations can include, for example, dinner reservations or hair salon appointments.
- Types of tickets can include, for example, movie tickets, sports venue tickets, or flight tickets.
- the types of services, products, reservations or tickets can be categorized based on price, location, type of shipping, availability, or other attributes.
- the direct action API 108 upon identifying the type of request, can access the corresponding template from the template repository 134. Templates can include fields in a structured data set that can be populated by the direct action API 108 to further the operation that is requested of the application developer device 160 (such as the operation of sending a taxi to pick up an end user at a pickup location and transport the end user to a destination location).
- the direct action API 108 can perform a lookup in the template repository 132 to select the template that matches one or more characteristic of the trigger keyword and request. For example, if the request corresponds to a request for a car or ride to a destination, the data processing system 102 can select a car sharing service template.
- the car sharing service template can include one or more of the following fields: device identifier, pick up location, destination location, number of passengers, or type of service.
- the direct action API 108 can populate the fields with values. To populate the fields with values, the direct action API 108 can ping, poll or otherwise obtain information from one or more sensors 142 of the computing device 140 or a user interface of the computing device 140. For example, the direct action API 108 can detect the source location using a location sensor, such as a GPS sensor. The direct action API 108 can obtain further information by submitting a survey, prompt, or query to the end of user of the computing device 140.
- the direct action API can submit the survey, prompt, or query via interface 104 of the data processing system 102 and a user interface of the computing device 140 (e.g., audio interface, voice-based user interface, display, or touch screen).
- the direct action API 108 can select a template for the action data structure based on the trigger keyword or the request, populate one or more fields in the template with information detected by one or more sensors 142 or obtained via a user interface, and generate, create or otherwise construct the action data structure to facilitate performance of an operation by the application developer device 160.
- the data processing system 102 can select the template based from the template data structure 134 based on various factors including, for example, one or more of the trigger keyword, request, application developer device 160, type of application developer device 160, a category that the application developer device 160 falls in (e.g., taxi service, laundry service, flower service, or food delivery), location, or other sensor information.
- the trigger keyword e.g., one or more of the trigger keyword, request, application developer device 160, type of application developer device 160, a category that the application developer device 160 falls in (e.g., taxi service, laundry service, flower service, or food delivery), location, or other sensor information.
- the data processing system 102 can perform a look-up or other query operation on the template database 134 using the trigger keyword to identify a template data structure that maps or otherwise corresponds to the trigger keyword.
- each template in the template database 134 can be associated with one or more trigger keywords to indicate that the template is configured to generate an action data structure responsive to the trigger keyword that the application developer device 160 can process to establish a communication session.
- the data processing system 102 can identify an application developer device 160 based on the trigger keyword. To identify the application developer device 160 based on the trigger keyword, the data processing system 102 can perform a lookup in the data repository 120 to identify a application developer device 160 that maps to the trigger keyword. For example, if the trigger keyword includes "ride" or "to go to", then the data processing system 102 (e.g., via direct action API 108) can identify the application developer device 160 as corresponding to Taxi Service Company A. The data processing system 102 can select the template from the template repository 134 (or template database) using the identify application developer device 160.
- the template repository 134 can include a mapping or correlation between third party provider devices (e.g., application developer device) or entities to templates configured to generate an action data structure responsive to the trigger keyword that the application developer device 160 can process to establish a communication session.
- the template can be customized for the application developer device 160 or for a category of application developer device 160.
- the data processing system 102 can generate the action data structure based on the template for the application developer device 160.
- the data processing system 102 can identify one or more fields in the selected template to populate with values.
- the fields can be populated with numerical values, character strings, Unicode values, Boolean logic, binary values, hexadecimal values, identifiers, location coordinates, geographic areas, timestamps, or other values.
- the fields or the data structure itself can be encrypted or masked to maintain data security.
- the data processing system 102 can identify the values for the fields to populate the fields of the template to create the action data structure.
- the data processing system 102 can obtain, retrieve, determine or otherwise identify the values for the fields by performing a look-up or other query operation on the data repository 120.
- the data processing system 102 can determine that the information or values for the fields are absent from the data repository 120.
- the data processing system 102 can determine that the information or values stored in the data repository 120 are out-of-date, stale, or otherwise not suitable for the purpose of constructing the action data structure responsive to the trigger keyword and request identified by the NLP component 106 (e.g., the location of the client computing device 140 may be the old location and not be the current location; an account can be expired; the destination restaurant may have moved to a new location; physical activity information; or mode of transportation).
- the data processing system 102 can acquire the values or information.
- the data processing system 102 can acquire or obtain the information by querying or polling one or more available sensors of the client computing device 140, prompting the end user of the client computing device 140 for the information, or accessing an online web-based resource using an HTTP protocol.
- the data processing system 102 can determine that it does not have the current location of the client computing device 140, which may be a needed field of the template.
- the data processing system 102 can query the client computing device 140 for the location information.
- the data processing system 102 can request the client computing device 140 to provide the location information using one or more location sensors 142, such as a Global Positioning System sensor, WIFI triangulation, cell tower triangulation, Bluetooth beacons, IP address, or other location sensing technique.
- the direct action API 108 can transmit the action data structure to a third party provider device (e.g., application developer device 160) to cause the application developer device 160 to invoke a conversational application programming interface (e.g., service provider NLP component) and establish a communication session between the application developer device 160 and the client computing device 140. Responsive to establishing the communication session between the application developer device 160 and the client computing device 140, the application developer device 160 can transmit data packets directly to the client computing device 140 via network 101. In some cases, the application developer device 160 can transmit data packets to the client computing device 140 via data processing system 102 and network 101.
- a third party provider device e.g., application developer device 160
- a conversational application programming interface e.g., service provider NLP component
- the application developer device 160 can execute at least a portion of a conversational API or NLP component 106 (e.g., conversational interface 114).
- the application developer device 160 can handle certain aspects of the communication session or types of queries.
- the application developer device 160 may leverage the NLP component 106 executed by the data processing system 102 to facilitate processing the audio signals associated with the communication session and generating responses to queries.
- the data processing system 102 can include the conversational interface 114 configured for the application developer device 160.
- the data processing system routes data packets between the client computing device and the third party provider device to establish the communication session.
- the data processing system 102 can receive, from the application developer device 160, an indication that the third party provider device established the communication session with the client device 140.
- the indication can include an identifier of the client computing device 140, timestamp corresponding to when the communication session was established, or other information associated with the communication session, such as the action data structure associated with the communication session.
- the conversational interface 114 can be a second NLP component that includes one or more component or function of the NLP component 106.
- the conversational interface 114 can interact or leverage the NLP component 106.
- the system 100 can include a single NLP component 106 executed by the data processing system 102.
- the single NLP component 106 can support both the data processing system 102 and the third party application developer device 160.
- the direct action API 108 generates or constructs an action data structure to facilitate performing a service
- the conversational API generates responses or queries to further a communication session with an end user or obtain additional information to improve or enhance the end user's experience or performance of the service.
- the data processing system 102 can include, execute, or otherwise communicate with a content selector component to receive the trigger keyword identified by the natural language processor component 106 and select, based on the trigger keyword, a digital component via a real-time content selection process.
- the content selection process can refer to, or include, selecting sponsored digital component objects provided by third party content providers.
- the real-time content selection process can include a service in which digital components provided by multiple content providers are parsed, processed, weighted, or matched in order to select one or more digital components to provide to the computing device 140.
- the data processing system 102 can perform the content selection process in real-time. Performing the content selection process in real-time can refer to performing the content selection process responsive to the request for content received via the client computing device 140.
- the real-time content selection process can be performed (e.g., initiated or completed) within a time interval of receiving the request (e.g., 5 seconds, 10 seconds, 20 seconds, 30 seconds, 1 minute, 2 minutes, 3 minutes, 5 minutes, 10 minutes, or 20 minutes).
- the real-time content selection process can be performed during a communication session with the client computing device 140, or within a time interval after the communication session is terminated.
- the data processing system 102 can select digital components for display in a voice-based environment, the data processing system 102 (e.g., via NLP component 106) can parse the input audio signal to identify keywords (e.g., a trigger keyword), and use the keywords to select a matching digital component based on a broad match, exact match, or phrase match. For example, the data processing system 102 can analyze, parse, or otherwise process subject matter of candidate digital components to determine whether the subject matter of the candidate digital components correspond to the subject matter of the keywords or phrases of the input audio signal detected by the microphone of the client computing device 140.
- keywords e.g., a trigger keyword
- the data processing system 102 can analyze, parse, or otherwise process subject matter of candidate digital components to determine whether the subject matter of the candidate digital components correspond to the subject matter of the keywords or phrases of the input audio signal detected by the microphone of the client computing device 140.
- the data processing system 102 may identify, analyze, or recognize voice, audio, terms, characters, text, symbols, or images of the candidate digital components using an image processing technique, character recognition technique, natural language processing technique, or database lookup.
- the candidate digital components may include metadata indicative of the subject matter of the candidate digital components, in which case the data processing system 102 may process the metadata to determine whether the subject matter of the candidate digital component corresponds to the input audio signal.
- Content providers may provide additional indicators when setting up a content campaign that includes digital components.
- the content provider may provide information at the content campaign or content group level that the data processing system 102 may identify by performing a lookup using information about the candidate digital component.
- the candidate digital component may include a unique identifier, which may map to a content group, content campaign, or content provider.
- the data processing system 102 may determine, based on information stored in content campaign data structure in data repository 120, information about the content provider.
- the data processing system 102 can receive, via a computer network, a request for content for presentation on a computing device 140.
- the data processing system 102 can identify the request by processing an input audio signal detected by a microphone of the client computing device 140.
- the request can include selection criteria of the request, such as the device type, location, and a keyword associated with the request.
- the request can include the action data structure or action data structure.
- the data processing system 102 can select a digital component object from data repository 120 or a database associated with the content provider, and provide the digital component for presentation via the computing device 140 via network 101.
- the digital component object can be provided by a content provider device different from the application developer device 160.
- the digital component can correspond to a type of service different from a type of service of the action data structure (e.g., taxi service versus food delivery service).
- the computing device 140 can interact with the digital component object.
- the computing device 140 can receive an audio response to the digital component.
- the computing device 140 can receive an indication to select a hyperlink or other button associated with the digital component object that causes or allows the computing device 140 to identify a service provider, request a service from the service provider, instruct the service provider to perform a service, transmit information to the service provider, or otherwise query the application developer device 160.
- the data processing system 102 can include, execute, access, or otherwise communicate with an input generation component 110 designed, constructed or operational to generate data packets for input into an application execution component 112.
- the input generation component 110 can include one or more component or functionality of the direct action API 108 or NLP component 106.
- the input generation component 110 can communicate or interface with the NLP component 106 or direct action API 108 to generate data packets, commands, instructions, or other data for input into the application execution component 112.
- the input generation component 110 can identify an application provided by an application developer device 160 via network 101.
- the input generation component 110 can include an interface or port, or communicate via interface 104 of data processing system 102.
- the input generation component 110 can include or provide a graphical user interface for display to the application developer device 160.
- the input generation component 110 can receive a request or indication to generate an input. Responsive to receiving the request, the input generation component 110 can identify an application.
- the input generation component 110 can identify the application with or without receiving a request. For example, the input generation component 110 can determine to proactively identify an application, or identify the application based on a time interval, condition, event, or other process.
- the input generation component 110 can receive a request to validate the application, and proceed with identifying the application or type of the application to generate an input responsive to the request to validate the application.
- the input generation component 110 can determine to validate the application responsive to receiving the application from the application developer device 160.
- the input generation component 110 can determine to validate the application responsive to determining that the application is being submitted to the data processing system 102 for delivery to client computing devices 140.
- the input generation component 110 can determine to validate the application before or prior to delivery of the application to a client computing device 140.
- the input generation component 110 can determine to block or prevent delivery of the application until the data processing system 102 has validated the application.
- the input generation component 110 can identify the application based on an identifier of the application, name of the application, alphanumeric identifier, or other type of identifier.
- the input generation component 110 can identify the application based on an identifier of the application developer device 160. For example, the input generation component 110 can receive a request from the application developer device 160. The input generation component 110 can then perform a lookup in application data 122 in the data repository 120 to identify the application associated with the application developer 160.
- the application identified by the input generation component 110 can include a conversational interface 114.
- the application can be configured to use a conversational interface 114 or execute a conversational interface 114 or interact or communicate with a conversational interface 114.
- the application can include or use, as a user interface, a conversational interface 114.
- the application can obtain input and provide output via the conversational interface 114.
- the conversational interface 114 can include, utilize or otherwise interface with one or more component or functionality of the NLP component 106 or direct action API 108.
- the input generation component 110 can determine the application is configured with, or configured to use, the conversational interface 114.
- the input generation component 110 can determine the application includes or uses a conversational interface 114 based on a flag or tag associated with the application, parsing the application code, an application package file associated with the application, a transcript file, or other indication provided in the application data 122 in data repository 120.
- the input generation component 110 can determine to validate the application.
- the input generation component 110 can determine to validate the application responsive to detecting or determining that the application includes or utilizes a conversational interface 114.
- the input generation component 110 can identify or determine a domain of the application.
- the input generation component 110 can determine a type or domain corresponding to the application. For example, the input generation component 110 can determine a type or domain of the application. The input generation component 110 can determine within which domain or category the application belongs. The input generation component 110 can perform a lookup in the application data 122 to identify information about the application. The input generation component 110 can identify or determine information that facilitates generating input to provide to the application execution component 112. For example, the input generation component 110 can identify or determine a type of the application, domain of the application, historical network activity associated with the application, content of the applications, actions that the application is configured to execute, or inventory accessible by the application.
- Types of application can include, for example, lifestyle applications (e.g., fitness, dating, food, music, or travel), social media applications, utility applications (e.g., reminders, calculator, flashlight, weather), games or entertainment applications, productivity applications (e.g., word processing, spreadsheets, pay), or news or information applications.
- lifestyle applications e.g., fitness, dating, food, music, or travel
- utility applications e.g., reminders, calculator, flashlight, weather
- games or entertainment applications e.g., productivity applications (e.g., word processing, spreadsheets, pay), or news or information applications.
- a domain of an application can include, for example, music streaming service, ride sharing service, ticket purchasing service, recipes or cooking.
- a domain can be a subset of a type of an application.
- the input generation component 110 can determine the type of the application or a domain of the application based on a lookup in the application data 122 repository or data structure.
- the input generation component 110 can determine the type or domain of the application based on parsing or other processing content associated with the application.
- the application data 122 can include keywords, topics, terms, actions, inventory, entities, or other information associated with the application.
- the input generation component 110 can parse the keywords to determine the type or domain of the application.
- the input generation component 110 can be configured with a semantic processing technique that can determine, based on keywords or entities associated with the application, the type of application or domain of the application.
- the input generation component 110 can determine the type or domain of the application based on historical network activity associated with the application or the application developer device 160. For example, the input generation component 110 can determine the type or domain of the application based on historical logs 126 associated with the application developer device 160. Logs 126 can include previous executions of actions or requests associated with the application developer device 160. The data processing system 102 can parse or process the logs 126 using semantic processing or other types of processing to determine a type or domain of the application.
- the input generation component 110 can select an action from the action repository 124 stored in the data repository 120.
- the input generation component 110 can select the action based on the type or domain of the application.
- the input generation component 110 can, for example, perform a lookup in the action repository 124 to identify one or more actions that map to the type or domain of the application.
- the action repository 124 can include or contain a mapping of domains or types to actions.
- the action repository 124 can associate types of applications with types of actions. For example, a ride sharing type of application can be associated with an action to order a ride; a news type of application can be associated with an action to provide latest news headlines for a geographic region; a weather type of application can be associated with an action to provide the weather forecast for a geographic region.
- the input generation component 110 can select a predetermined action from the action repository 124 that maps to the type or domain of the application.
- the action repository 124 can include multiple actions for each type or domain of applications.
- the action repository 124 can rank or order the actions.
- the action repository 124 can include a sequence of actions.
- An action can be associated with or include one or more parameters used to fulfill or execute an action.
- the input generation component 110 can select a default or initial action for a type or domain of application.
- the input generation component 110 can select a first action from the action repository 124 based on the type or domain of the application.
- An initial or default action can be used to generate a trigger phrase for the application. For example, for a ride sharing type of application, an initial, default, or trigger action can include "order a ride"; for a ticket sales type of application an initial, default or trigger action can include "search for tickets for Artist _A.”
- the data processing system 102 can populate or update the action repository 124 based on identifying actions associated with types of applications.
- the data processing system 102 can identify similar applications and actions that the similar applications are configured to perform.
- the data processing system 102 can determine to update the action repository 124 with a mapping of the action to the type of application.
- an administrator of the data processing system 102 can update or modify the action repository 124 to include new actions, or remove actions that are no longer performed by the type of application.
- the input generation component 110 can generate an action without selecting an action stored in the action repository 124.
- the input generation component 110 can receive a list of actions from the application developer device 160.
- the application developer device 160 can provide a list of actions in an application package file or transcript file associated with the application.
- the data processing system 102 can parse the application package file or transcript file to identify actions established for the application.
- the input generation component 110 can select an action from the list of actions provided by the application developer device 160.
- the input generation component 110 generates a trigger phrase for input into the application.
- the input generation component 110 can automatically generate the trigger phrase.
- the data processing system 102 itself can generate the trigger phrase for input into the application.
- the input generation component 110 can generate the trigger phrase using the NLP component 106.
- the input generation component 110 can generate the trigger phrase based on the selected action.
- the input generation component 110 is adapted to generate the trigger phrase to simulate a voice-based input that would be detected by a sensor 142 (e.g., microphone) of the computing device 140.
- the input generation component 110 can generate the trigger phrase to initiate execution of the action.
- the data processing system 102 can include a machine learning component or model 128 trained based on logs 126.
- the data processing system 102 can use the model 128 trained based on logs 126 to generate trigger phrases based on selected actions.
- the logs 126 can include historical trigger phrases detected by sensors 142 of computing devices 140 to initiate execution of an action for the application or other applications having the same type or domain as the application.
- the input generation component 110 can generate a trigger phrase that is configured to initiate execution of the action by the application via the conversational interface 114.
- the input generation component 110 can construct the trigger phrase for input into the application via the conversational interface 114 of the application.
- the input generation component 110 can generate trigger phrases such as: "I would like to get a ride to work,” “I need a ride to the movie theater on Main Street,” “How much is a ride to go home?”
- the input generation component 110 can use natural language processing (e.g., via NLP component 106) to generate various types of trigger phrases to initiate execution of an action for the type of application.
- the input generation component 110 can construct a sentence as the trigger phrase.
- the input generation component 110 using the NLP component 106, can construct a sentence for the selected action.
- the input generation component 110 can construct the sentence with a noun and verb.
- the input generation component 110 can construct the sentence with a request for the action.
- the NLP component 106 can include a natural language generator.
- the input generation component 110 using a natural language generator of the NLP component 106, can generate natural language from structured data such as a knowledge base or a logical form (e.g., linguistics).
- the input generation component 110 can construct terms, phrases or sentences that initiate execution of the action or facilitate execution of fulfillment of the action.
- the sentence or trigger phrase generated by the input generation component 110 can include an indication of the selected action.
- the sentence or trigger phrase generated by the input generation component 110 can include an indication of the application.
- the trigger phrase can include "Use Application _A to play music from playlist Number_1.”
- the input generation component 110 can use one or more natural language generation techniques.
- the input generation component 110 can access a list of predetermined text (e.g., a predetermined response repository) that is copied and pasted, possibly linked with other text.
- the input generation component 110 can generate the phrase in stages of planning and merging of information to allow for the generation of text that looks natural and does not become repetitive.
- the input generation component 110 can generate the trigger phrase or additional phrases based on the action using one or more of the following stages: content determination to identify what information to mention in the phrase; document structuring to organize the information to convey; aggregation to merge similar terms, phrases or sentences to improve readability and naturalness; lexical choice to putting words to the concepts; referring expression generation to create referring expressions that identify objects and regions; and realization to creating the actual text, which can be in accordance with the rules of syntax, morphology, and orthography.
- the input generation component 110 can use machine learning to build a system, without using the separate stages as above.
- the input generation component 110 can use a model trained by a machine learning engine (e.g., an artificial recurrent neural network such as long short-term memory) on a large data set of input data (e.g., logs 126) and corresponding (human-written) output texts.
- a machine learning engine e.g., an artificial recurrent neural network such as long short-term memory
- input data e.g., logs 126) and corresponding (human-written) output texts.
- the input generation component 110 can use one or more techniques to generate a trigger phrase for input into the application based on the selected for the application action.
- the input generation component 110 can determine which technique to use to construct or generate sentences, text, phrases, or responses.
- the input generation component 110 can evaluate a quality of the model 128 to determine whether the model 128 has been sufficiently trained to generate phrases.
- the input generation component 110 can determine a metric of the model 128 which can indicate a quality of the model 128.
- the metric can correspond to an amount of logs 126 used to train the model 128, a confidence score associated with the model 128, a quality of sentences constructed using the model 128, or other quality indicator.
- the inspection component 116 can select one of the model 128 or a predetermined response repository to use to generate queries.
- the input generation component 110 can generate, based on the selection, the response via the one of the model 128 or the predetermined response repository (e.g., stored in the action repository 124, application data 122, or template 134).
- the input generation component 110 can simulate an intent based on a context, such as the action.
- the input generation component 110 can simulate an intent based on a previous context in the conversation. For example, if a previous action was to place an order for an item, then the input generation component 110 can generate a subsequent phrase such as "What is the status of my order?", "Has my order been shipped?", "When will my order arrive?", "How much was my order?"
- the input generation component 110 can establish a conversation with the application 136 via the conversational interface 114.
- the input generation component 110 can determine to omit certain information from the trigger phrase or other sentence or phrase that is to be input into the application 136 executed by the application execution component 112.
- the input generation component 110 can determine to omit values for parameters used to execute the selected action.
- an action to order a ride can include parameters pick up destination and drop off destination.
- the input generation component 110 can generate the trigger phrase by omitting the drop off destination as follows "I would like to order a ride to go somewhere."
- the input generation component 110 can be configured to include values for parameters or omit values for parameters to cause the application 136 executed by the application execution component to generate queries via a conversational interface 114 to request the values for the parameters that were omitted by the input generation component 110.
- the data processing system 102 can include, access or otherwise interface with an application execution component 112.
- the application execution component 112 can be designed, constructed or operational to execute an application 136 provided the application developer device 160.
- the application execution component 112 adapted to execute the application 136 on the data processing system 102.
- the application execution component 112 can execute the application 136 in a sandboxed environment on the data processing system 102.
- a sandboxed environment can refer to executing the application 136 in a computing environment or memory that has restricted access to other memory, components or functionality of the data processing system 102.
- the application 136 executed in the sandboxed environment can be restricted from accessing components or functionality of the data processing system 102 that is external or outside the sandboxed environment.
- the sandbox environment can isolate the application being executed from other components, functionality or resources of the data processing system 102.
- the sandbox environment can provide a secure environment in which to execute the application 136 such that erroneous functionality in the application may not negatively impact other components of the data processing system 102.
- the application execution component 112 can execute the application 136 in a virtual machine.
- the application execution component 112 can invoke a virtual machine that executes the application.
- the application execution component 112 can instantiate a virtual machine or instance of the application executing on the data processing system 102 by a virtual machine.
- the application execution component 112 can configure or establish the virtual machine using one or more configuration parameters.
- the configuration parameters can be stored in the application data 122.
- the application developer device 160 can indicate a software or hardware configuration for the execution of the application.
- the application developer device 160 can indicate the types of software or hardware with which the application is compatible.
- the application execution component 112 can obtain the configuration from the application data 122, and configure the virtual machine based on the configuration information so that the virtual machine can execute the application.
- the virtual machine can be configured with a type of processor (e.g., processor frequency, cores, speed, performance) or amount of memory that is comparable to a computing device 140 that would execute the application 136.
- the application execution component 112 can execute the application 136 with a conversational interface 114.
- the application execution component 112 can use the conversational interface to provide input to the application, and present output from the application.
- the application 136 can access a network (e.g., network 101) to request other input, or transmit output.
- the application execution component 112 can provide the conversational interface 114 to simulate providing voice input generated by the input generation component 110 to the application being executed via the application execution component 112 (e.g., a virtual machine invoked by the application execution component 112).
- the application execution component 112 can receive the trigger phrase generated by the input generation component 110 and provide the trigger phrase to the application 136 executed by the application execution component 112.
- the input generation component 110 can provide the trigger phrase to the interface 104, which can forward the trigger phrase to the conversational interface 114 of the application.
- the conversational interface 114 can be executed by the application 136, or the application 136 can utilize the NLP component 106 to parse and process the trigger phrase.
- the application 136 can parse or process the trigger phrase to identify an action.
- the trigger phrase can refer to an initial phrase or a first phrase or query used to launch or command the application.
- the trigger phrase can include, for example, "Order a ride to Restaurant_A.”
- the application execution component 112 can execute the application in a manner similar to a client computing device 140 executing the application 136.
- the application 136 executed by the application execution component 112 can process the trigger phrase to identify an action.
- the action can be the same or similar action previously selected by the input generation component 110 to generate the trigger phrase.
- the application 136 can identify a parameter used to execute the action.
- the application 136 can access a data repository of the application, or other memory, index, or data file of the application 136 to identify the parameter.
- the application 136 can make a remote procedure call to the data processing system 102, or one or more component thereof, to further process the action.
- the application 136 can make a remote procedure call to the application developer device 160 to further process the action or trigger phrase.
- the application 136 can identify one or more parameters used to execute the action identified in the trigger phrase.
- the application 136 can identify the parameter from the action repository 124.
- the action repository 124 can include a mapping of parameters to actions.
- the action repository 124 can include an association between actions and parameters used to fulfill the action.
- the application developer 160 can establish a data structure for the application 136 that indicates which parameters are used by the application 136 to fulfill the action.
- Parameters can include any type or form of parameter or value that facilitates executing or fulfilling the action.
- parameters for a ride sharing action can include: pick up location, drop off location, number of passengers, pick up time, drop off time, or type of vehicle.
- Parameters for a play music action can include: artist name, song name, album name, playlist name, or radio station name.
- Parameters for an action to purchase a ticket can include: venue name, act, artist, sport, sports teams names, date, number of tickets, price, or seat location.
- the application execution component 112 can execute the application 136 to identify one or more parameters and then generate a query based on the identified parameters. For example, the application 136, responsive to receiving the trigger phrase, can identify the action and parameters used to execute the action. The application 136 can determine that values for the identified one or more parameters are missing, unavailable or otherwise not provided with the trigger phrase.
- the trigger phrase generated by the input generation component 110 may include a request to order a ride, but lack the drop off or pick up location for the ride.
- the application 136 can determine to generate a query to obtain a value for a parameter used to execute the action.
- the application 136 executed by the application execution component 112 of the data processing system 102 (e.g., in a sandbox computing environment of the data processing system 102 or virtual machine), can generate a query based on the parameter.
- the application 136 can generate the query using the conversational interface 114 of the application.
- the conversational interface 114 can be provided by one or more component of the data processing system 102.
- the application 136 can generate the query using the conversational interface 114, which can use the NLP component 106 or input generation component 110.
- the application 136 can generate a query to obtain the value for the parameter in order to facilitate executing the action.
- the application 136 can generate the query in a conversational form in accordance with the conversational interface 114. For example, a value of a parameter used to execute an action can be absent from the trigger phrase or other input phrase.
- the application 136 can generate a query to request the value of the parameter used to execute the action.
- the application 136 can generate a query "Where would you like to go?", "What is the destination?", "Sure, I can request a ride for you. What is the drop off location?”
- the application 136 via the conversational interface 114, can provide the generated query requesting values for parameters used to execute the action.
- the data processing system 102 via input generation component 110, can generate a response to the query.
- the response can include the requested value for the parameter used to execute the action.
- the input generation component 110 can generate the response with the value.
- the input generation component 110 can use a natural language generator to generate the response with the value.
- the input generation component 110 can identify any value in accordance with the parameter.
- the input generation component 110 can access a structured database with entities to select the value.
- the input generation component 110 can access a predetermined list of values for parameters (e.g., in action repository 124 of application data 122).
- the input generation component 110 can identify or select a value for the parameter from logs 126.
- the application 136 can receive the response to the query containing the value for the parameter.
- the application 136 can execute the action using the value for the parameter.
- the application 136 can generate additional queries for additional values for additional parameters.
- the input generation component 110 can generate additional responses with values for the requested parameters.
- the application 136 can provide the queries via conversational interface 114 to a component of the data processing system 102, and receive responses to the queries via the conversational interface 114 from a component of the data processing system 102.
- the application 136 can proceed to execute the action and fulfill the action.
- the application 136 can populate an action data structure (e.g., using a component or functionality of direct action API 108) for the action with one or more values for one or more parameters, and process or transmit the action data structure to fulfill the request for the action.
- an action data structure e.g., using a component or functionality of direct action API 108
- the input generation component 110 can generate one or more responses.
- the input generation component 110 can generate additional responses responsive to additional queries from the application 136.
- the input generation component 110 can generate a second response based on a semantic analysis of a first response, a first query from the application, and a trigger phrase.
- the input generation component 110 can provide the second response for processing by the application 136 executed by the data processing system 102.
- the data processing system 102 can conduct a conversation with multiple responses and queries between the application 136 and one or more components of the data processing system 102.
- the conversation can include the execution of one or more actions.
- the data processing system 102 can include, execute, or otherwise interface with a virtualization component 118.
- the virtualization component 118 can be designed, constructed or operational to simulate interactions between the application 136 executed via the application execution component 112 and a virtual computing device.
- the virtual computing device can emulate or represent a client computing device 140.
- the virtualization component 118 can simulate or emulate an application developer device 160.
- the virtualization component 118 can emulate or simulate a content provider, service provider, or other third party provider device.
- the virtualization component 118 can simulate a client computing device 140.
- the virtualization component 118 can provide an electronic account used to simulate a user of a client computing device 140.
- the virtualization component 118 can provide an electronic account used to simulate a third party service provider.
- the virtualization component 118 can include virtual accounts that include, for example, usernames, identifiers, preferences, location information, financial account information, or other information used by an application 136 to execute an action.
- the virtualization component 118 can allow the application 136 executed by the application execution component 112 to execute the action as if the application 136 was executing the action on a client computing device 140.
- application 136 executed by the application execution component 112 can execute the action with one or more values for one or more parameters.
- the application can execute the action by transmitting an action data structure (e.g., generated using one or more functionality of the direct action API 108).
- the application 136 may attempt to transmit the action (e.g., an action to order a ride) to a third party service provider that provides the ride.
- the application execution component 112 can intercept the request.
- the application execution component 112 can include a hooking component configured to intercept and redirect the request.
- the application execution component 112 can receive data packets corresponding to the action data structure, and modify a destination address of the data packets to prevent the data packets from being sent to a third party service provider.
- the virtualization component 118 can provide a virtual user account and virtual service provider account.
- the virtualization component 118 can allow the application 136 to establish a telecommunication channel between a device associated with the application developer device 160 and a virtual client device provided by the virtualization component 118.
- the virtualization component 118 can provide virtual user account information to the device (e.g., a service provider) associated with the application developer device 160.
- the data processing system 102 e.g., input generation component 110
- using the virtualization component 118 can provide responses to the device associated with the application developer device 160.
- the data processing system can establish a telecommunication channel between a virtual client device and the application or a device associated with the application developer device 160.
- the input generation component 110 can generate input to transmit via the telecommunication channel to the application or the application developer device 160.
- the input can include a response to a query or other input, such as phrases, trigger phrases, or values for parameters to execute an action.
- the telecommunications channel can refer to an audio communication channel, chat communication, SMS text communication, cellular based communication, phone call, or voice over internet protocol.
- the application c136 n include a chat bot, and the input generation component 110 can establish a telecommunication channel with the chat bot of the application.
- the application 136 can determine that the parameter used by the application is an electronic account identifier.
- the application 136 can generate a query with a request for the electronic account identifier.
- the application 136 can generate the query via the conversational interface 114.
- the virtualization component 118 can receive the query.
- the virtualization component 118 (e.g., via the NLP component 106 or the input generation component 110) can generate a response that includes a simulation value for the electronic account identifier.
- the simulation value can refer to a virtual electronic account.
- the virtual electronic account can be a test account or account associated with an administrator of the data processing system 102 or application developer device 160.
- the virtual account may include values for parameters that do not correspond to an actual user of the application 136 or client computing device 140.
- the virtual account can be established by the virtualization component 118, an administrator, or the application developer to facilitate evaluating the application 136.
- the virtualization component 118 can provide a flag, indication, or value for input into the application 136 that is a simulated value or value for a virtual account.
- a simulated value can indicate that the value does not correspond to an actual user.
- the simulated value can indicate to the application execution component 112 that the application 136 cannot execute an aspect of the action.
- the application execution component 112 can determine, based on detected the simulated value or virtual value, to prevent or block the application 136 from executing the action with the simulated value.
- the simulated value may be a financial account identifier and there may not be an actual financial account with funds corresponding to the simulated value.
- the application execution component 112 upon detecting the simulated value, can block or prevent execution of the portion of the action that entails transferring funds from the simulated financial account.
- simulated values for a ride sharing action can include pickup and drop off locations, in which case the application execution component 112 (e.g., via virtualization component 118), can prevent the application 136 from ordering an actual service provider to fulfill the ride request.
- the application execution component 112 can determine that the value provided by the input generation component 110 or virtualization component 118 is a simulated value based on flag, tag, indication or symbol associated with the value. In some cases, the application execution component 112 can determine that certain parameters may have values that are virtual values, and block execution of aspects of actions that utilize such parameters (e.g., financial account identifier, or pickup or drop off locations).
- certain parameters may have values that are virtual values, and block execution of aspects of actions that utilize such parameters (e.g., financial account identifier, or pickup or drop off locations).
- the virtualization component 118 can utilize interface 104 and network 101 to allow the application 136 to establish telecommunication channels, links or sessions with devices external to the data processing system 102.
- the virtualization component 118 can, in some cases, simulate a telecommunication channel, link or session such that the application 136 executed by the application execution component 112 can continue to process and execute the action from the sandboxed computing environment.
- the virtualization component 118 can receive requests from the application 136 and transmit responses to the application 136 via conversational interface 114.
- the virtualization component 118 can utilize one or more component or functionality of the NLP component 106 or input generation component 110 to communicate with application 136 executed by application execution component 112.
- the application 136 may or may not successfully execute the action with the values.
- the application 136 may or may not successfully request values for parameters used to execute the action.
- the application 136 may fail to request a value for a parameter that is used to execute the action.
- the application 136 may proceed to execute the action without the value for the parameter, which may result in erroneous execution of the action, unsuccessful fulfillment of the action, or the application 136 crashing, freezing, or terminating.
- the data processing system 102 can include, execute, or otherwise interface with an inspection component 116.
- the inspection component can be designed, constructed or operational to validate the application 136.
- the inspection component 116 can determine a state of the application 136 executed by the application execution component 112.
- the inspection component 116 can evaluate the state of the application 136.
- the inspection component 116 can identify an error code based on the state of the application 136.
- the inspection component 116 can provide a notification to the application developer device 160 based on the error code.
- the inspection component 116 can validate the application. Validation can refer to or include determining that the application passes certain tests performed by the data processing system 102. Validation can refer to or include determining that the application does not include errors or bugs (e.g., does not crash or freeze during certain actions). Validation can refer to or include confirming that the application can execute an action or fulfill an intent. Validation can refer to or include determining that the application does not consume excessive computing resources (e.g., memory, processor utilization, network bandwidth, remote procedure calls, storage, audio output, or screen display brightness level). The data processing system 102 can validate the application if the application can perform an action without consuming an amount of a computing resource that is greater than or equal to a computing resource threshold.
- a computing resource threshold e.g., memory, processor utilization, network bandwidth, remote procedure calls, storage, audio output, or screen display brightness level.
- the threshold can be a dynamic threshold, percentage, ratio, or absolute threshold.
- the threshold can vary based on the type of application, operating system with which the application is compatible, or device configuration associated with the application. Thus, the data processing system 102 can validate the application based on various factors.
- the inspection component 116 can determine whether the application 136 has crashed or is in a frozen state. The inspection component 116 can determine that the application has crashed if the application 136 has become non-responsive. For example, the inspection component 116 can access a task manager of the application execution component 112 or virtual machine executing the application 136 to determine whether a state of a process associated with the application 136 is running, unresponsive, suspended, or terminated. If the application 136 state is unresponsive, the inspection component 116 can evaluate the unresponsive state to determine that the application 136 failed to execute the action. The inspection component 116 can determine an error code corresponding to failure to execute the action. The error code can include an alphanumeric code, text, terms, phrases, symbol, or other indication of the error. The inspection component 116 can retrieve the error code from the error code repository 132 stored in data repository 120. The error code repository 132 can include an index or mapping of application states or conditions associated with application states to error codes.
- the inspection component 116 can determine the state of the application 136 by evaluating an output of the application 136.
- the inspection component 116 can parse an output of the application 136.
- the inspection component 116 can obtain, receive or identify the output of the application 136 via conversational interface 114.
- the inspection component 116 can obtain the output of the application via the virtualization component 118.
- the application 136 can provide audio or visual output for presentation via a client computing device 140.
- the application execution component 112 can forward the output to the virtualization component 118.
- the inspection component 116 can parse the visual output or analyze the audio output to determine a state of the application 136.
- the visual output can include an error message, such as an error pop-up window, or a blank screen indicating an error.
- the audio output can indicate an error or frozen state of the application 136.
- the visual or audio output of the application 136 can otherwise indicate a state of the application.
- the visual or audio output of the application 136 can indicate that the application 136 successfully executed the application 136.
- the inspection component 116 can determine whether the output of the application indicates that a ride is being requested or ordered. The inspection component 116 can further determine whether the values for the parameters input to the application 136 were properly used to execute the action. The inspection component 116 can parse the output of the application 136 to determine that the pickup location or drop-off location correspond to the values of the parameters that were input into the application 136 via the conversational interface 114.
- the inspection component 116 can determine whether the application 136 requested values for all parameters used to execute the action.
- the inspection component 116 can determine, via action repository 124, the parameters that are used to execute the action.
- the inspection component 116 can validate whether the application 136 generated one or more queries to obtain values for the parameters used to execute the action prior to executing the action. If the inspection component 116 determines that the application 136 failed to request values for parameters used to execute the action, but proceeded to execute the action with missing parameters, the inspection component 116 can determine that the application 136 erred or failed to obtain values for the parameters.
- the inspection component 116 can determine the state of the application to be a failure state or unsuccessful state.
- the inspection component 116 can select an error code for this state that indicates that the application 136 failed to request values for parameters used to perform the action.
- the error code can indicate that the application 136 attempted to execute an action with missing values or partial data.
- the inspection component 116 can determine that executing the action with missing values may not be successful or result in the inefficient execution of the action, thereby consuming excessive computing resources.
- an action to order a ride can include parameters for pick up location, drop off location, and electronic account identifier.
- the application 136 may request values for the pickup and drop off locations, but fail to obtain an electronic account identifier.
- the application 136 can proceed to attempt to execute the action with requested the electronic account identifier.
- this may be inefficient or result in a failure mode because the application 136 may be unable to obtain payment information for the ride, or validate the user.
- the inspection component 116 can evaluate the state by identifying the values for parameters the application 136 requested, the type of action, and the state of the application 136 to determine that the application 136 attempted to execute the action with a missing value.
- the inspection component 116 can evaluate this state of the application to determine an error code that indicates the application 136 failed to request values for parameters used to execute the action.
- the inspection component 116 can evaluate the state prior to execution of the action to determine that a value for a parameter is missing and that the application 136 failed to request the value, and then prevent the application from executing the action.
- the inspection component 116 can evaluate resource consumption of the application 136 of the prior to, during, and subsequent to execution of the action.
- the inspection component 116 can use a task manager or other utility to monitor processor utilization, memory utilization, input/output reads, data storage read/writes, network bandwidth utilization, or other computing resource metrics.
- the inspection component 116 can evaluate this metrics on the virtual machine executing the application 136, or other component or system that executes the application 136.
- the inspection component 116 can evaluate the state of the application 136 based on the computing resource consumption metrics.
- the inspection component 116 can compare the computing resource consumption metrics with a threshold (e.g., a threshold stored in the error code 132 repository) to determine an error code.
- a threshold e.g., a threshold stored in the error code 132 repository
- the inspection component 116 can assign an error code that indicates which resource consumption metric was greater than or equal to the threshold.
- the inspection component 116 can select error codes that can indicate the application 136 consumed excessive computing resources before execution of the action, during execution of the action, or subsequent to execution of the action.
- the inspection component 116 can evaluate the state of the application 136 based on sensor utilization.
- the inspection component 116 can evaluate which sensors the application 136 utilizes to execute the action.
- the inspection component 116 can determine whether the sensor is still active upon completion of the action or termination of the application 136.
- the inspection component 116 can determine whether the application 136 is unnecessarily keeping a sensor active.
- the inspection component 116 can determine whether the application 136 failed to deactivate a sensor.
- the inspection component 116 can determine whether sensors are active or inactive via the virtualization component 118.
- the inspection component 116 can determine whether sensors are being used by the application 136 based on commands or communications provided by the application 136.
- the inspection component 116 can determine what ports the application 136 may be using to communicate with a sensor.
- Example sensors can include sensors 142, such as a microphone, speaker, ambient light sensor, temperature sensor, accelerometer, gyroscope, or other sensor.
- the application 136 can utilize a microphone to establish a voice-based communication channel, such as a telephone call, with a device of the application developer device 160.
- the application 136 can terminate or end the telephone call.
- the inspection component 116 can determine whether the microphone has been deactivated subsequent to termination of the telephone call.
- the inspection component 116 can evaluate the state of the application 136 to determine that the application 136 failed to deactivate the microphone upon termination of the phone call, and then determine an error code that indicates the application 136 failed to deactivate the microphone.
- the data processing system 102 can determine the state of the application is a termination state.
- the data processing system 102 can evaluate the state of the application to determine a resource (e.g., memory, processor, display, speaker, input device) or sensor (e.g., microphone or ambient light sensor) utilized by the application is active.
- the data processing system 102 can generate the error code indicating that the application failed to deactivate the resource or sensor responsive to the termination state.
- the application 136 can establish a telecommunication channel between a device associated with the application developer and a virtual client device (e.g., provided by virtualization component 118).
- the telecommunication channel can be established responsive to a request or response provided by the input generation component 110 via conversational interface 114.
- the input generation component 110 can request to speak with a technical support agent, salesperson, or customer service representative of the application developer.
- the input generation component 110 can automatically generate and provide input to initiate this request.
- the application 136 responsive to the request, can establish the telecommunications channel.
- the inspection component 116 can detect termination of the telecommunication channel.
- the input generation component 110 can provide input to hang up the phone call.
- the inspection component 116 can identify a state (e.g., active or inactive) of a microphone of the virtual client device.
- the data processing system 102 can set an error code based on the state of the microphone of the virtual client device being active.
- the error code can indicate that the application 136 failed to deactivate the microphone upon termination of the telephone call.
- FIG. 2 is an illustration of a method of validating actions in a digital assistant-based application.
- the method 200 can be performed by one or more component or system depicted in FIG. 1 or FIG. 3 , including, for example, a data processing system.
- the data processing system can identify an application.
- the data processing system can identify the application responsive to a request to validate an application.
- the application can be provided by an application developer device of an application developer.
- the application can include or utilize a conversational interface for input or output.
- the data processing system can identify the application based on detecting that the application has not yet been launched (e.g., not yet live on an online application store for delivery to client computing devices).
- the data processing system can identify the application is a new application, or a new version of a previously provided application.
- the data processing system can identify the application has not yet been validated, evaluated, or tested.
- the data processing system can identify that a previous version of the application failed an evaluation or did not pass a validation process.
- the data processing system can determine, based on the previous version failing, to validate the newly submitted version.
- the data processing system can determine a domain of the application.
- the data processing system can determine a type or domain of the application, such as music streaming or ride sharing.
- the data processing system can use various techniques to identify the type or domain of the application, including, for example, parsing metadata associated with the application, accessing an online resource associated with the application developer to parse content available on the online resource, or analyzing historical logs associated with previous versions of the application.
- the data processing system can determine whether an action repository is available for the type or domain of the application determined at 204. If an action repository is available (e.g., a list of actions that can be executed by the type of application), then the data processing system can select an action from the list of actions at 210. However, if a list of actions is not available in an action repository for this type of application, the data processing system can use a brute force trigger mechanism at 208.
- an action repository e.g., a list of actions that can be executed by the type of application
- the data processing system can use a brute force trigger mechanism at 208.
- the brute force trigger mechanism can include selecting an initial or default action.
- the default action may be general or agnostic to types of action, or may have commonality among different types of actions.
- the default action can include a query to the application to determine a type of the application, such as "what type of actions can you execute?"
- the brute force trigger mechanism can include cycling through actions in the action repository for each type of application. For example, there may be 20 different types of applications in the action repository. Each type of application can be associated with one or more actions.
- the brute force trigger mechanism can include the data processing system selecting a first type and a first action of the first type. The data processing system can then proceed to select a second action of the first type if the first action was successful. If the first action was not successful, or the application was not responsive or indicated that it could not execute those types of actions, then the data processing system can select a first action of a second type for processing.
- the data processing system can generate a trigger phrase based on the selected action.
- the data processing system can generate the trigger phrase using a natural language generator and the selected action.
- the data processing system can generate the trigger phrase based on machine learning or a predetermined template of phrases.
- the data processing system can execute the application.
- the data processing system can input the trigger phrase generated at 210 to the application via a conversational interface.
- the application executed by the data processing system can parse or process the trigger phrase.
- the application can be executed by a virtual machine or in a sandboxed computing environment.
- the application can determine, based on the trigger phrase, an action.
- the application can identify, from a template or action repository, parameters used to execute the action.
- the application an determine that the trigger phrase did not include values for parameters used to execute the action.
- the application executed by the data processing system responsive to determining to request a value for a parameter to execute the action, can generate a first query for the value of the parameter.
- the data processing system can receive the query generated by the application.
- the data processing system can determine to provide a response to the query.
- the data processing system can select, at 214, a natural language generation technique to generate the response to the query from the application.
- the data processing system can select natural language processor of the data processing system, a model trained based on historical logs, select a phrase from a historical log, or use a brute force technique (e.g., template response with placeholder fields) to generate the response.
- the data processing system can generate the response using a technique selected at 214.
- the data processing system adapted to generate the response including a value for the requested parameter.
- the value is a simulated value.
- the data processing system adapted to provide the value as input to the application.
- the response adapted to include a request to establish a communication channel, perform another action, ask for help, or any other type of response.
- the response is responsive to the query.
- the data processing system is adapted to evaluate the error handling capabilities of the application. The data processing system can evaluate whether the application generates the same query or an alternate query based on the unresponsive response from the data processing system.
- the application or data processing system can determine whether to establish a communication channel (e.g., a phone call, audio call, chat communication, or text communication).
- the application data processing system can determine to establish the communication channel based on the generated response or a query from the application. If the application determines to establish the communication channel, the data processing system can proceed to establish the communication channel at 220.
- the communication channel can be between a device of the application developer and a virtual computing device provided by the data processing system that simulates a client computing device.
- the input generation component can provide voice input for transmission over the communication channel to the device of the application developer.
- the data processing system determines, at 218, not to establish the communication channel, the data processing system is adapted to proceed to determine the state of the application and generate an error code at 222.
- the data processing system can evaluate the state of the application. The state can indicate whether the application is active, inactive, standby, terminated, or not responding, for example.
- the data processing system is adapted to assign an error code based on the state of the application.
- the data processing system can assign the error code based on one or more factors associated with the state of the application or the execution of the action, including, for example, whether the application successfully executed the action.
- the data processing system can determine whether to terminate execution of the application.
- the data processing system can determine to terminate or end a process, thread, or communication channel associated with the application.
- the data processing system can determine to terminate an aspect of the application based on the type of action, status of executing the action, computing resource consumption metric, sensor activity status, or whether a simulated value was provided for execution. If the data processing system determines to terminate a process or communication channel associated with the application, the data processing system can proceed to act 226 to transmit a termination command. If, however, the data processing system determines not to terminate a process or communication channel (e.g., the processes completed successfully or crashed, or no communication channel was established at 218), then the data processing system can proceed to 228 to provide a notification.
- the data processing system can provide a notification of the error code to the application developer device.
- the data processing system can attempt to apply a patch to resolve issues associated with the application.
- the data processing system can remove the application from the application delivery server.
- the data processing system can prevent the application from being delivered to client computing devices based on the error code. For example, responsive to the error code indicating that the application fails to deactivate a sensor, uses excessive computing resources, or fails to request values for parameters used to execute an action, the data processing system can determine to prevent or block the application from being delivered to client computing device.
- the data processing system can determine to delay launch of the application until the application developer resolves the issues in the application that result in the unsatisfactory error codes.
- the data processing system can validate actions in a digital assistant-based application prior to the application being launched or delivered to client computing device to prevent erroneous or faulty execution of the application on client computing devices.
- FIG. 3 is a block diagram of an example computer system 300.
- the computer system or computing device 300 can include or be used to implement the system 100, or its components such as the data processing system 102.
- the data processing system 102 can include an intelligent personal assistant or voice-based digital assistant.
- the computing system 300 includes a bus 305 or other communication component for communicating information and a processor 310 or processing circuit coupled to the bus 305 for processing information.
- the computing system 300 can also include one or more processors 310 or processing circuits coupled to the bus for processing information.
- the computing system 300 also includes main memory 315, such as a random access memory (RAM) or other dynamic storage device, coupled to the bus 305 for storing information, and instructions to be executed by the processor 310.
- the main memory 315 can be or include the data repository 120.
- the main memory 315 can also be used for storing position information, temporary variables, or other intermediate information during execution of instructions by the processor 310.
- the computing system 300 may further include a read only memory (ROM) 320 or other static storage device coupled to the bus 305 for storing static information and instructions for the processor 310.
- ROM read only memory
- a storage device 325 such as a solid state device, magnetic disk or optical disk, can be coupled to the bus 305 to persistently store information and instructions.
- the storage device 325 can include or be part of the data repository 120.
- the computing system 300 may be coupled via the bus 305 to a display 335, such as a liquid crystal display, or active matrix display, for displaying information to a user.
- a display 335 such as a liquid crystal display, or active matrix display, for displaying information to a user.
- An input device 330 such as a keyboard including alphanumeric and other keys, may be coupled to the bus 305 for communicating information and command selections to the processor 310.
- the input device 330 can include a touch screen display 335.
- the input device 330 can also include a cursor control, such as a mouse, a trackball, or cursor direction keys, for communicating direction information and command selections to the processor 310 and for controlling cursor movement on the display 335.
- the display 335 can be part of the data processing system 102, the client computing device 140 or other component of FIG. 1 , for example.
- the processes, systems and methods described herein can be implemented by the computing system 300 in response to the processor 310 executing an arrangement of instructions contained in main memory 315. Such instructions can be read into main memory 315 from another computer-readable medium, such as the storage device 325. Execution of the arrangement of instructions contained in main memory 315 causes the computing system 300 to perform the illustrative processes described herein. One or more processors in a multiprocessing arrangement may also be employed to execute the instructions contained in main memory 315. Hard-wired circuitry can be used in place of or in combination with software instructions together with the systems and methods described herein. Systems and methods described herein are not limited to any specific combination of hardware circuitry and software.
- FIG. 3 Although an example computing system has been described in FIG. 3 , the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user.
- personal information e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location
- certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters.
- a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined.
- location information such as to a city, postal code, or state level
- the user may have control over how information is collected about him or her and used by the content server.
- the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- the subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatuses.
- the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices).
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- data processing system “computing device” “component” or “data processing apparatus” encompass various apparatuses, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- the direct action API 108 or NLP component 106 and other data processing system 102 components can include or share one or more data processing apparatuses, systems, computing devices, or processors.
- a computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program can correspond to a file in a file system.
- a computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 102) to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks.
- semiconductor memory devices e.g., EPROM, EEPROM, and flash memory devices
- magnetic disks e.g., internal hard disks or removable disks
- magneto optical disks e.g., CD ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- the subject matter described herein can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back end, middleware, or front end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
- the computing system such as system 100 or system 300 can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network (e.g., the network 101).
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- a server transmits data (e.g., data packets representing a digital component) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device).
- Data generated at the client device e.g., a result of the user interaction
- can be received from the client device at the server e.g., received by the data processing system 102 from the computing device 140 or the application developer device 160).
- references to "or” may be construed as inclusive so that any terms described using “or” may indicate any of a single, more than one, and all of the described terms. References to at least one of a conjunctive list of terms may be construed as an inclusive OR to indicate any of a single, more than one, and all of the described terms. For example, a reference to "at least one of 'A' and 'B'” can include only 'A', only 'B', as well as both 'A' and 'B'. Such references used in conjunction with “comprising" or other open terminology can include additional items.
Description
- Applications can be developed by a developer. As applications become increasingly complex due to sophisticated features or multiple interactions, it can be difficult to identify errors or malfunctions, and remedy such errors or malfunctions.
WO 2016/111881 A1 describes a method for headlessly completing a task of an application in the background of a virtual assistant andUS 2018/247654 A1 a test environment for voice queries to a natural language processor. - A system to validate actions in a digital assistant and a corresponding method is set out in the appended claims.
- The accompanying drawings are not intended to be drawn to scale. Like reference numbers and designations in the various drawings indicate like elements. For purposes of clarity, not every component may be labeled in every drawing. In the drawings:
-
FIG. 1 is an illustration of an example system to validate actions in a digital assistant-based application. -
FIG. 2 is an illustration of a method of validating actions in a digital assistant-based application. -
FIG. 3 is a block diagram illustrating a general architecture for a computer system that can be employed to implement elements of the systems and methods described and illustrated herein, including, for example, the system depicted inFIG. 1 , and the method depicted inFIG. 2 . - Following below are more detailed descriptions of various concepts related to, and implementations of, methods, and systems of validating actions in a digital assistant-based application.
- This technology is generally directed to validating actions in a digital assistant-based application. The technology allows operation of a device under the control of an application to be simulated and for the application to be modified in response to the simulation. The modifications may, for example, modify how the application interacts with the device, for example modifying operation of the device under the control of the application. An application developer can develop an application. The application includes a conversational interface. The application can receive commands to perform an action. For example, voice-based input can be processed by the conversational interface to identify an action and generate a command. However, due to the unstructured and varied nature of voice-based input, and the number of different available actions, it can be challenging to determine whether the application is performing the requested action. Further, an application may contain errors or bugs that result in faulty execution of the action. For example, the application can execute the action but fail to end a process or thread, or deactivate a sensor of the device, upon completion of the action. Due to the large number of applications and various actions configured on each, it can be challenging to efficiently and reliably evaluate each of the actions for each of the applications. Since an action can be triggered by numerous different conversational flows, it can be challenging to test all the different conversational flows to determine whether the actions they trigger are intended actions and are executed properly.
- This technical solution is directed to validating or debugging applications with actions before the application is launched. A data processing system of this technical solution can simulate operation of a device running the application by automatically generating input that corresponds to a voice-based input that is provided to a conversational interface. The data processing system can trigger actions of the application, and automate a user interaction with a conversational interface. By doing so, the data processing system can identify errors with the execution of the action by the application and can take steps to modify the application in response to the identified errors.
- The data processing system of the technical solution can provide a scalable platform that allows for the validation of actions executed by applications before the application is delivered to client computing devices for execution or otherwise launched. The data processing system can identify a predetermined list of action, items, or functions to test. The data processing system can simulate numerous user conversations (e.g., via a Monte Carlo simulation) to test each conversation flow. The data processing system can notify the developer of the results to allow the developer to update their application.
- Thus, the data processing system of the technical solution can (i) perform pre-launch testing of applications to identify errors before the application is launched; (ii) test unstructured conversational flows by constructing input to drive a conversation; (iii) customize or tailor aspects of the conversation based on the application domain or type of application (e.g., different terms or vocabulary used for a movie ticket application, a navigation application, or a music streaming application); (iv) use a model generated based on historical conversations from actual users in order to simulate the conversation with an application by leveraging historical user conversations in an anonymous manner to generate input with intent; (v) use a classifier to determine a type of an action; and (vi) notify developers of the results of the review process responsive to receiving the application (e.g., within 5 or 10 minutes of receiving the application from the developer or a request from the developer to validate the application).
- For example, the data processing system can test an action for an application used to provide a flower delivery service. The data processing system can generate a simulated voice input that triggers the application to identify and execute an application. The data processing system can execute the application to generate a response to the voice input. The data processing system can simulate a second voice input requesting to speak with customer service. The application can process the second voice input and establish a phone call between a customer service agent and a simulated or virtual user. The data processing system can terminate the call, and then determine the state of the application. The data processing system can determine whether processes, sub-processes, threads or sensors associated with the execution of the action by the application have been terminated or deactivated. If, for example, a sensor (e.g., a microphone) remained active or used by the application after the communication session was terminated, the data processing system can determine that the failure of the application to deactivate the sensor after termination of the session is an error or bug in the application. The data processing system can resolve the error or bug using one or more techniques, including, for example, applying a patch to the application to deactivate the sensor, blocking the application from delivery to client computing devices, removing the erroneous feature of the application, blocking the application from executing the actions, or notifying the developer of the error.
-
FIG. 1 illustrates anexample system 100 to validate actions in a digital assistant-based application. Thesystem 100 can include content selection infrastructure. Thesystem 100 includes adata processing system 102. Thedata processing system 102 communicates with one or more of anapplication developer device 160 or acomputing device 140 via anetwork 101. Thenetwork 101 can include computer networks such as the Internet, local, wide, metro, or other area networks, intranets, satellite networks, and other communication networks such as voice or data mobile telephone networks. Thenetwork 101 can be used to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed on at least onecomputing device 140, such as a laptop, desktop, tablet, personal digital assistant, smart phone, portable computers, or speaker. For example, via the network 101 a user of thecomputing device 140 can access an application, information or data provided by anapplication developer device 160. Thecomputing device 140 may or may not include a display; for example, the computing device may include limited types of user interfaces, such as a microphone and speaker. In some cases, the primary user interface of thecomputing device 140 may be a microphone and speaker. - The
network 101 can include or constitute a display network, e.g., a subset of information resources available on the internet that are associated with a content placement or search engine results system, or that are eligible to include third party digital components as part of a digital component placement campaign. Thenetwork 101 can be used by thedata processing system 102 to access information resources such as web pages, web sites, domain names, or uniform resource locators that can be presented, output, rendered, or displayed by theclient computing device 140. For example, via the network 101 a user of theclient computing device 140 can access information or data provided by theapplication developer device 160, or other service provider device or content provider device. - The
network 101 may be any type or form of network and may include any of the following: a point-to-point network, a broadcast network, a wide area network, a local area network, a telecommunications network, a data communication network, a computer network, an ATM (Asynchronous Transfer Mode) network, a SONET (Synchronous Optical Network) network, a SDH (Synchronous Digital Hierarchy) network, a wireless network and a wireline network. Thenetwork 101 may include a wireless link, such as an infrared channel or satellite band. The topology of thenetwork 101 may include a bus, star, or ring network topology. The network may include mobile telephone networks using any protocol or protocols used to communicate among mobile devices, including advanced mobile phone protocol ("AMPS"), time division multiple access ("TDMA"), code-division multiple access ("CDMA"), global system for mobile communication ("GSM"), general packet radio services ("GPRS") or universal mobile telecommunications system ("UMTS"). Different types of data may be transmitted via different protocols, or the same types of data may be transmitted via different protocols. - The
system 100 includes at least onedata processing system 102. Thedata processing system 102 includes at least one logic device such as a computing device having a processor to communicate via thenetwork 101, for example with thecomputing device 140, or the application developer device 160 (or other service provider device or content provider device). Thedata processing system 102 includes at least one computation resource, server, processor or memory. For example, thedata processing system 102 can include a plurality of computation resources or servers located in at least one data center. Thedata processing system 102 can include multiple, logically-grouped servers and facilitate distributed computing techniques. The logical group of servers may be referred to as a data center, server farm or a machine farm. The servers can also be geographically dispersed. A data center or machine farm may be administered as a single entity, or the machine farm can include a plurality of machine farms. The servers within each machine farm can be heterogeneous - one or more of the servers or machines can operate according to one or more type of operating system platform. - Servers in the machine farm can be stored in high-density rack systems, along with associated storage systems, and located in an enterprise data center. For example, consolidating the servers in this way may improve system manageability, data security, the physical security of the system, and system performance by locating servers and high performance storage systems on localized high performance networks. Centralization of all or some of the
data processing system 102 components, including servers and storage systems, and coupling them with advanced system management tools allows more efficient use of server resources, which saves power and processing requirements and reduces bandwidth usage. - The
system 100 can include, access, or otherwise interact with at least oneapplication developer device 160. Theapplication developer device 160 can include at least one logic device such as a computing device having a processor to communicate via thenetwork 101, for example with thecomputing device 140 or thedata processing system 102. Theapplication developer device 160 can include at least one computation resource, server, processor or memory. For example,application developer device 160 can include a plurality of computation resources or servers located in at least one data center. Theapplication developer device 160 can include one or more component or functionality of thedata processing system 102. - The
application developer device 160 can include a content provider device, or the content provider device can be separate from theapplication developer device 160. Thedata processing system 102 can communicate with a content provider device. The content provider computing device, orapplication developer device 160, can provide audio based digital components for display by theclient computing device 140 as an audio output digital component. The digital component can include an offer for a good or service, such as a voice based message that states: "Would you like me to order you a taxi?" For example, theapplication developer device 160 can include memory to store a series of audio digital components that can be provided in response to a voice based query. Theapplication developer device 160 can also provide audio based digital components (or other digital components) to thedata processing system 102 where they can be stored in thedata repository 120. Thedata processing system 102 can select the audio digital components and provide (or instruct theapplication developer device 160 to provide) the audio digital components to theclient computing device 140. The audio based digital components can be exclusively audio or can be combined with text, image, or video data. - The
application developer device 160 can include, interface, or otherwise communicate with a natural language processor component. For example, theapplication developer device 160 can provide an application having aconversational interface 114 that can include one or more component or functionality of the naturallanguage processor component 106. Theapplication developer device 160 can execute theconversational interface 114, or aspect thereof. Theapplication developer device 160 can include or execute a naturallanguage processor component 106, or aspect thereof. Theapplication developer device 160 can include or execute aconversational interface 114, or aspect thereof. - The
application developer device 160 can engage with the client computing device 140 (via thedata processing system 102 or bypassing the data processing system 102) to create a back-and-forth real-time voice or audio based conversation (e.g., a session) between theclient computing device 140 and theapplication developer device 160. Theapplication developer device 160 can engage with theclient computing device 140 via theNLP component 106,conversational interface 114 or other component. For example, theapplication developer device 160 can receive or provide data messages to thedirect action API 108 of thedata processing system 102. For example, theapplication developer device 160 can create, store, or make available digital components for a car sharing service, and the application developer device 160 (or a separate service provider device) can establish a session with theclient computing device 140 to arrange for a delivery of a taxi or car of the car share service to pick up the end user of theclient computing device 140. Thedata processing system 102, via thedirect action API 108, theNLP component 106 or other components can also establish the session with the client computing device, including or bypassing theapplication developer device 160, to arrange for example for a delivery of a taxi or car of the car share service. - The
application developer device 160 can include or refer to a provider of an application. Theapplication developer device 160 can include or refer to an application developer device. Theapplication developer device 160 can be a third-party provider device. - The
computing device 140 can include, interface, or otherwise communicate with at least one sensor 142, transducer 144, audio driver 156, or pre-processor 148. The sensor 142 can include, for example, an ambient light sensor, proximity sensor, temperature sensor, accelerometer, gyroscope, motion detector, GPS sensor, location sensor, microphone, or touch sensor. The transducer 144 can include a speaker or a microphone. The audio driver 146 can provide a software interface to the hardware transducer 144. The audio driver can execute the audio file or other instructions provided by thedata processing system 102 to control the transducer 144 to generate a corresponding acoustic wave or sound wave. The pre-processor 148 can be configured to detect a keyword and perform an action based on the keyword. The pre-processor 148 can filter out one or more terms or modify the terms prior to transmitting the terms to thedata processing system 102 for further processing. The pre-processor 148 can convert the analog audio signals detected by the microphone into a digital audio signal, and transmit one or more data packets carrying the digital audio signal to thedata processing system 102 via thenetwork 101. In some cases, the pre-processor 148 can transmit data packets carrying some or all of the input audio signal responsive to detecting an instruction to perform such transmission. The instruction can include, for example, a trigger keyword or other keyword or approval to transmit data packets comprising the input audio signal to thedata processing system 102. - The
client computing device 140 can be associated with an end user that enters voice queries as audio input into the client computing device 140 (via the sensor 142) and receives audio output in the form of a computer generated voice that can be provided from the data processing system 102 (or theapplication developer device 160 or the application developer device 160) to theclient computing device 140, output from the transducer 144 (e.g., a speaker). The computer generated voice can include recordings from a real person or computer generated language. - The
data processing system 102 can include a content placement system having at least one computation resource or server. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneinterface 104. Thedata processing system 102 can include, interface, or otherwise communicate with at least one naturallanguage processor component 106. Thedata processing system 102 can include, interface, or otherwise communicate with at least one direct action application programming interface ("API") 108. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneinput generation component 110. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneapplication execution component 112. Theapplication execution component 112 can include aconversational interface 114. Thedata processing system 102 can include, interface, or otherwise communicate with at least oneinspection component 116. Thedata processing system 102 can include, interface, or otherwise communicate with at least onevirtualization component 118. - The
data processing system 102 adapted to include, interface, or otherwise communicate with at least onedata repository 120. The at least onedata repository 120 can include or store, in one or more data structures or databases,application data 122, anaction repository 124,logs 126, amodel 128,state information 130, orerror codes 132. Theapplication data 122 can include, for example, an executable file for the application, metadata about the application, content of the application, an application package file, transcript file, or other data associated with the application. - The
action repository 124 includes predetermined actions. Theaction repository 124 can include preconfigured or default actions. Theaction repository 124 can include actions that the data processing system 102 (or direct action API 108) is configured to process. Theaction repository 124 can associate actions in a data structure based on a type of application or a domain of an application. Types of application can include, for example, lifestyle applications (e.g., fitness, dating, food, music, or travel), social media applications, utility applications (e.g., reminders, calculator, flashlight, weather), games or entertainment applications, productivity applications (e.g., word processing, spreadsheets, pay), or news or information applications. A domain of an application can include, for example, music streaming service, ride sharing service, ticket purchasing service, recipes or cooking. A domain can be a subset of a type of an applications. Theaction repository 124 can include a mapping of actions to types of applications or domains of applications. For example, an application having a type "music" or domain "music streaming service" can be associated with actions such as "play music", "pause music", "search for music by <artist_name>," or "play <song_name> on <device_name>." - The
data repository 120 can include logs 126.Logs 126 can refer to or include historical network activity associated with one or more applications. Historical network activity can refer to or include network activity that occurred in the last 24 hours, 48 hours, 72 hours, 7 days, 30 days, 60 days or more. Network activity can include, for example, execution of an application, voice input received by an application, or application output. Logs can include voice input provided to one or more applications. Logs can be categorized based on features, such as type of application. - The
data repository 120 can store amodel 128. Amodel 128 can refer to a machine learning model that can be used to generate input, such as conversational input. Thedata processing system 102 can train themodel 128 usinglogs 126. Themodel 128 can be used to construct sentences that can be input into the application. Themodel 128 can construct the input based on an action. For example, themodel 128 can be trained to generate input based on types of actions to be executed by an application, or types of applications. Themodel 128 can be trained usinglogs 126 to generate input for different types of actions and applications. For example, thelogs 126 can include historical input for different types of actions or different types of applications. Thedata processing system 102 can train themodel 128 using thelogs 126 for a type of action or application. Themodel 128 can generate a trigger phrase, query, response, or other input that can be provided to an application to execute an action. - The
data repository 120 can includestate information 130.State information 130 can refer to or include a state of an application or a status of an application.State information 130 can refer to or include a state or status of a process, thread, or sensor associated with or utilized by the application to execute an action or perform a function. For example, the state of the application can be active, standby, paused, or terminated. The state can further indicate a state within execution of the application, such as an initial screen, launch screen, initialization state, home screen, processing state, action querying state, semantic analyzing state, action lookup state, parameter request state, action execution state, communication session state, termination state, or other state in the application. - The
data repository 120 can includeerror codes 132. Theerror codes 132 can include an identifier of a type of an error. Theerror codes 132 can include alphanumeric values, text, terms, strings, symbols, or other indications of an error or type of an error. For example, anerror code 132 can refer to a failure of a sensor to deactivate, failure of an action to be completed, failure of the application to request a value of a parameter used to execute the action, failure of the application to execute the action using the parameter, or failure of the application to deactivate a microphone after termination. - The
interface 104,NLP component 106,direct action API 108,input generation component 110,application execution component 112,conversational interface 114,inspection component 116, orvirtualization component 118 can each include at least one processing unit or other logic device such as programmable logic array engine, or module configured to communicate with thedatabase repository 120 or database. Theinterface 104,NLP component 106,direct action API 108,input generation component 110,application execution component 112,conversational interface 114,inspection component 116,virtualization component 118 anddata repository 120 can be separate components, a single component, or part of thedata processing system 102. Thesystem 100 and its components, such as adata processing system 102, can include hardware elements, such as one or more processors, logic devices, or circuits. - The
data processing system 102 can obtain anonymous computer network activity information associated with a plurality ofcomputing devices 140. A user of acomputing device 140 can affirmatively authorize thedata processing system 102 to obtain network activity information corresponding to the user'scomputing device 140. For example, thedata processing system 102 can prompt the user of thecomputing device 140 for consent to obtain one or more types of network activity information. The identity of the user of thecomputing device 140 can remain anonymous and thecomputing device 140 can be associated with a unique identifier (e.g., a unique identifier for the user or the computing device provided by the data processing system or a user of the computing device). The data processing system can associate each observation with a corresponding unique identifier. - The
data processing system 102 can interface with a content provider or content provider device. The content provider device can be the application developer device 162. The content provider device can be a third party device different from thedata processing system 102 and the application developer device 162. The content provider can establish an electronic content campaign. The electronic content campaign can be stored as content data indata repository 120. An electronic content campaign can refer to one or more content groups that correspond to a common theme. A content campaign can include a hierarchical data structure that includes content groups, digital component data objects, and content selection criteria. To create a content campaign, a content provider can specify values for campaign level parameters of the content campaign. The campaign level parameters can include, for example, a campaign name, a preferred content network for placing digital component objects, a value of resources to be used for the content campaign, start and end dates for the content campaign, a duration for the content campaign, a schedule for digital component object placements, language, geographical locations, type of computing devices on which to provide digital component objects. In some cases, an impression can refer to when a digital component object is fetched from its source (e.g.,data processing system 102 or content provider), and is countable. In some cases, due to the possibility of click fraud, robotic activity can be filtered and excluded, as an impression. Thus, in some cases, an impression can refer to a measurement of responses from a Web server to a page request from a browser, which is filtered from robotic activity and error codes, and is recorded at a point as close as possible to opportunity to render the digital component object for display on thecomputing device 140. In some cases, an impression can refer to a viewable or audible impression; e.g., the digital component object is at least partially (e.g., 20%, 30%, 30%, 40%, 50%, 60%, 70%, or more) viewable on a display device 150 of theclient computing device 140, or audible via a speaker (e.g., transducer 154) of thecomputing device 140. A click or selection can refer to a user interaction with the digital component object, such as a voice response to an audible impression, a mouse-click, touch interaction, gesture, shake, audio interaction, or keyboard click. A conversion can refer to a user taking a desired action with respect to the digital component objection; e.g., purchasing a product or service, completing a survey, visiting a physical store corresponding to the digital component, or completing an electronic transaction. - The content provider can further establish one or more content groups for a content campaign. A content group includes one or more digital component objects and corresponding content selection criteria, such as keywords, words, terms, phrases, geographic locations, type of computing device, time of day, interest, topic, or vertical. Content groups under the same content campaign can share the same campaign level parameters, but may have tailored specifications for particular content group level parameters, such as keywords, negative keywords (e.g., that block placement of the digital component in the presence of the negative keyword on main content), bids for keywords, or parameters associated with the bid or content campaign.
- To create a new content group, the content provider can provide values for the content group level parameters of the content group. The content group level parameters include, for example, a content group name or content group theme, and bids for different content placement opportunities (e.g., automatic placement or managed placement) or outcomes (e.g., clicks, impressions, or conversions). A content group name or content group theme can be one or more terms that the content provider can use to capture a topic or subject matter for which digital component objects of the content group is to be selected for display. For example, a car dealership can create a different content group for each brand of vehicle it carries, and may further create a different content group for each model of vehicle it carries. Examples of the content group themes that the car dealership can use include, for example, "Make A sports car" "Make B sports car," "Make C sedan," "Make C truck," "Make C hybrid," or "Make D hybrid." An example content campaign theme can be "hybrid" and include content groups for both "Make C hybrid" and "Make D hybrid", for example.
- The content provider can provide one or more keywords and digital component objects to each content group. Keywords can include terms that are relevant to the product or services of associated with or identified by the digital component objects. A keyword can include one or more terms or phrases. For example, the car dealership can include "sports car," "V-6 engine," "four-wheel drive," "fuel efficiency," as keywords for a content group or content campaign. In some cases, negative keywords can be specified by the content provider to avoid, prevent, block, or disable content placement on certain terms or keywords. The content provider can specify a type of matching, such as exact match, phrase match, or broad match, used to select digital component objects.
- The content provider can provide one or more keywords to be used by the
data processing system 102 to select a digital component object provided by the content provider. The content provider can identify one or more keywords to bid on, and further provide bid amounts for various keywords. The content provider can provide additional content selection criteria to be used by thedata processing system 102 to select digital component objects. Multiple content providers can bid on the same or different keywords, and thedata processing system 102 can run a content selection process or ad auction responsive to receiving an indication of a keyword of an electronic message. - The content provider can provide one or more digital component objects for selection by the
data processing system 102. Thedata processing system 102 can select the digital component objects when a content placement opportunity becomes available on the application provided by the application developer device 162, or responsive to a request for a digital component object made by the application. Different types of digital component objects can be included in a content group, such as a voice digital component, audio digital component, content item, a text digital component, an image digital component, video digital component, multimedia digital component, or digital component link. Upon selecting a digital component, thedata processing system 102 can transmit the digital component object for rendering on acomputing device 140 or display device 150 of thecomputing device 140. Rendering can include displaying the digital component on a display device 150, or playing the digital component via a speaker of thecomputing device 140. Thedata processing system 102 can provide instructions to acomputing device 140 to render the digital component object. Thedata processing system 102 can instruct thecomputing device 140, or an audio driver 156 of thecomputing device 140, to generate audio signals or acoustic waves. - The
data processing system 102 can include an interface 104 (or interface component) designed, configured, constructed, or operational to receive and transmit information using, for example, data packets. Theinterface 104 can receive and transmit information using one or more protocols, such as a network protocol. Theinterface 104 can include a hardware interface, software interface, wired interface, or wireless interface. Theinterface 104 can facilitate translating or formatting data from one format to another format. For example, theinterface 104 can include an application programming interface that includes definitions for communicating between various components, such as software components. Theinterface 104 can facilitate communicating between one or more components of thedata processing system 102. - The
data processing system 102 can include an application, script or program installed at theclient computing device 140, such as an app to communicate input audio signals to theinterface 104 of thedata processing system 102 and to drive components of the client computing device to render output audio signals. Thedata processing system 102 can receive data packets or other signal that includes or identifies an audio input signal. For example, thedata processing system 102 can execute or run theNLP component 106 to receive or obtain the audio signal and parse the audio signal. For example, theNLP component 106 can provide for interactions between a human and a computer. TheNLP component 106 can be configured with techniques for understanding natural language and allowing thedata processing system 102 to derive meaning from human or natural language input. TheNLP component 106 can include or be configured with technique based on machine learning, such as statistical machine learning. TheNLP component 106 can utilize decision trees, statistical models, or probabilistic models to parse the input audio signal. TheNLP component 106 can perform, for example, functions such as named entity recognition (e.g., given a stream of text, determine which items in the text map to proper names, such as people or places, and what the type of each such name is, such as person, location, or organization), natural language generation (e.g., convert information from computer databases or semantic intents into understandable human language), natural language understanding (e.g., convert text into more formal representations such as first-order logic structures that a computer module can manipulate), machine translation (e.g., automatically translate text from one human language to another), morphological segmentation (e.g., separating words into individual morphemes and identify the class of the morphemes, which can be challenging based on the complexity of the morphology or structure of the words of the language being considered), question answering (e.g., determining an answer to a human-language question, which can be specific or open-ended), semantic processing (e.g., processing that can occur after identifying a word and encoding its meaning in order to relate the identified word to other words with similar meanings). - The
NLP component 106 converts the audio input signal into recognized text by comparing the input signal against a stored, representative set of audio waveforms (e.g., in the data repository 120) and choosing the closest matches. The set of audio waveforms can be stored indata repository 120 or other database accessible to thedata processing system 102. The representative waveforms are generated across a large set of users, and then may be augmented with speech samples from the user. After the audio signal is converted into recognized text, theNLP component 106 matches the text to words that are associated, for example via training across users or through manual specification, with actions that thedata processing system 102 can serve. - The audio input signal can be detected by the sensor 142 or transducer 144 (e.g., a microphone) of the
client computing device 140. Via the transducer 144, the audio driver 146, or other components theclient computing device 140 can provide the audio input signal to the data processing system 102 (e.g., via the network 101) where it can be received (e.g., by the interface 104) and provided to theNLP component 106 or stored in thedata repository 120. - The
NLP component 106 can obtain the input audio signal. From the input audio signal, theNLP component 106 can identify at least one request or at least one trigger keyword corresponding to the request. The request can indicate intent or subject matter of the input audio signal. The trigger keyword can indicate a type of action likely to be taken. For example, theNLP component 106 can parse the input audio signal to identify at least one request to leave home for the evening to attend dinner and a movie. The trigger keyword can include at least one word, phrase, root or partial word, or derivative indicating an action to be taken. For example, the trigger keyword "go" or "to go to" from the input audio signal can indicate a need for transport. In this example, the input audio signal (or the identified request) does not directly express an intent for transport, however the trigger keyword indicates that transport is an ancillary action to at least one other action that is indicated by the request. In some cases, the trigger keyword can refer to or include a wakeup word, activation word or keyword that causes thecomputing device 140 to begin processing the input audio signal. - The
NLP component 106 can parse the input audio signal to identify, determine, retrieve, or otherwise obtain the request and the trigger keyword. For instance, theNLP component 106 can apply a semantic processing technique to the input audio signal to identify the trigger keyword or the request. TheNLP component 106 can apply the semantic processing technique to the input audio signal to identify a trigger phrase that includes one or more trigger keywords, such as a first trigger keyword and a second trigger keyword. For example, the input audio signal can include the sentence "I need someone to do my laundry and my dry cleaning." TheNLP component 106 can apply a semantic processing technique, or other natural language processing technique, to the data packets comprising the sentence to identify trigger phrases "do my laundry" and "do my dry cleaning". TheNLP component 106 can further identify multiple trigger keywords, such as laundry, and dry cleaning. For example, theNLP component 106 can determine that the trigger phrase includes the trigger keyword and a second trigger keyword. - The
NLP component 106 can filter the input audio signal to identify the trigger keyword. For example, the data packets carrying the input audio signal can include "It would be great if I could get someone that could help me go to the airport", in which case theNLP component 106 can filter out one or more terms as follows: "it", "would", "be", "great", "if', "I", "could", "get", "someone", "that", "could", or "help". By filtering out these terms, theNLP component 106 may more accurately and reliably identify the trigger keywords, such as "go to the airport" and determine that this is a request for a taxi or a ride sharing service. - In some cases, the NLP component can determine that the data packets carrying the input audio signal includes one or more requests. For example, the input audio signal can include the sentence "I need someone to do my laundry and my dry cleaning." The
NLP component 106 can determine this is a request for a laundry service and a dry cleaning service. TheNLP component 106 can determine this is a single request for a service provider that can provide both laundry services and dry cleaning services. TheNLP component 106 can determine that this is two requests; a first request for a service provider that performs laundry services, and a second request for a service provider that provides dry cleaning services. In some cases, theNLP component 106 can combine the multiple determined requests into a single request, and transmit the single request to anapplication developer device 160. In some cases, theNLP component 106 can transmit the individual requests to respective application developer devices 160 (or service provider devices or other third-party devices that can fulfill or execute an action), or separately transmit both requests to the sameapplication developer device 160. - The
data processing system 102 can include adirect action API 108 designed and constructed to generate, based on the trigger keyword, an action data structure responsive to the request. Processors of thedata processing system 102 can invoke thedirect action API 108 to execute scripts that generate a data structure to anapplication developer device 160 to request or order a service or product, such as a car from a car share service. Thedirect action API 108 can obtain data from thedata repository 120, as well as data received with end user consent from theclient computing device 140 to determine location, time, user accounts, logistical or other information to allow theapplication developer device 160 to perform an operation, such as reserve a car from the car share service. Using thedirect action API 108, thedata processing system 102 can also communicate with theapplication developer device 160 to complete the conversion by in this example making the car share pick up reservation. - The
direct action API 108 can execute a specified action to satisfy the end user's intention, as determined by thedata processing system 102. Depending on the action specified in its inputs, thedirect action API 108 can execute code or a dialog script that identifies the parameters required to fulfill a user request. Such code can look-up additional information, e.g., in thedata repository 120, such as the name of a home automation service, or it can provide audio output for rendering at theclient computing device 140 to ask the end user questions such as the intended destination of a requested taxi. Thedirect action API 108 can determine necessary parameters and can package the information into an action data structure, which can then be sent to another component such as theapplication execution component 112 or to theapplication developer device 160 to be fulfilled. - The
direct action API 108 can receive an instruction or command from theNLP component 106, or other component of thedata processing system 102, to generate or construct the action data structure. Thedirect action API 108 can determine a type of action in order to select a template from thetemplate repository 134 stored in thedata repository 120. Types of actions can include, for example, services, products, reservations, or tickets. Types of actions can further include types of services or products. For example, types of services can include car share service, food delivery service, laundry service, maid service, repair services, or household services. Types of products can include, for example, clothes, shoes, toys, electronics, computers, books, or jewelry. Types of reservations can include, for example, dinner reservations or hair salon appointments. Types of tickets can include, for example, movie tickets, sports venue tickets, or flight tickets. In some cases, the types of services, products, reservations or tickets can be categorized based on price, location, type of shipping, availability, or other attributes. - The
direct action API 108, upon identifying the type of request, can access the corresponding template from thetemplate repository 134. Templates can include fields in a structured data set that can be populated by thedirect action API 108 to further the operation that is requested of the application developer device 160 (such as the operation of sending a taxi to pick up an end user at a pickup location and transport the end user to a destination location). Thedirect action API 108 can perform a lookup in thetemplate repository 132 to select the template that matches one or more characteristic of the trigger keyword and request. For example, if the request corresponds to a request for a car or ride to a destination, thedata processing system 102 can select a car sharing service template. The car sharing service template can include one or more of the following fields: device identifier, pick up location, destination location, number of passengers, or type of service. Thedirect action API 108 can populate the fields with values. To populate the fields with values, thedirect action API 108 can ping, poll or otherwise obtain information from one or more sensors 142 of thecomputing device 140 or a user interface of thecomputing device 140. For example, thedirect action API 108 can detect the source location using a location sensor, such as a GPS sensor. Thedirect action API 108 can obtain further information by submitting a survey, prompt, or query to the end of user of thecomputing device 140. The direct action API can submit the survey, prompt, or query viainterface 104 of thedata processing system 102 and a user interface of the computing device 140 (e.g., audio interface, voice-based user interface, display, or touch screen). Thus, thedirect action API 108 can select a template for the action data structure based on the trigger keyword or the request, populate one or more fields in the template with information detected by one or more sensors 142 or obtained via a user interface, and generate, create or otherwise construct the action data structure to facilitate performance of an operation by theapplication developer device 160. - The
data processing system 102 can select the template based from thetemplate data structure 134 based on various factors including, for example, one or more of the trigger keyword, request,application developer device 160, type ofapplication developer device 160, a category that theapplication developer device 160 falls in (e.g., taxi service, laundry service, flower service, or food delivery), location, or other sensor information. - To select the template based on the trigger keyword, the data processing system 102 (e.g., via direct action API 108) can perform a look-up or other query operation on the
template database 134 using the trigger keyword to identify a template data structure that maps or otherwise corresponds to the trigger keyword. For example, each template in thetemplate database 134 can be associated with one or more trigger keywords to indicate that the template is configured to generate an action data structure responsive to the trigger keyword that theapplication developer device 160 can process to establish a communication session. - In some cases, the
data processing system 102 can identify anapplication developer device 160 based on the trigger keyword. To identify theapplication developer device 160 based on the trigger keyword, thedata processing system 102 can perform a lookup in thedata repository 120 to identify aapplication developer device 160 that maps to the trigger keyword. For example, if the trigger keyword includes "ride" or "to go to", then the data processing system 102 (e.g., via direct action API 108) can identify theapplication developer device 160 as corresponding to Taxi Service Company A. Thedata processing system 102 can select the template from the template repository 134 (or template database) using the identifyapplication developer device 160. For example, thetemplate repository 134 can include a mapping or correlation between third party provider devices (e.g., application developer device) or entities to templates configured to generate an action data structure responsive to the trigger keyword that theapplication developer device 160 can process to establish a communication session. In some cases, the template can be customized for theapplication developer device 160 or for a category ofapplication developer device 160. Thedata processing system 102 can generate the action data structure based on the template for theapplication developer device 160. - To construct or generate the action data structure, the
data processing system 102 can identify one or more fields in the selected template to populate with values. The fields can be populated with numerical values, character strings, Unicode values, Boolean logic, binary values, hexadecimal values, identifiers, location coordinates, geographic areas, timestamps, or other values. The fields or the data structure itself can be encrypted or masked to maintain data security. - Upon determining the fields in the template, the
data processing system 102 can identify the values for the fields to populate the fields of the template to create the action data structure. Thedata processing system 102 can obtain, retrieve, determine or otherwise identify the values for the fields by performing a look-up or other query operation on thedata repository 120. - In some cases, the
data processing system 102 can determine that the information or values for the fields are absent from thedata repository 120. Thedata processing system 102 can determine that the information or values stored in thedata repository 120 are out-of-date, stale, or otherwise not suitable for the purpose of constructing the action data structure responsive to the trigger keyword and request identified by the NLP component 106 (e.g., the location of theclient computing device 140 may be the old location and not be the current location; an account can be expired; the destination restaurant may have moved to a new location; physical activity information; or mode of transportation). - If the
data processing system 102 determines that it does not currently have access, in memory of thedata processing system 102, to the values or information for the field of the template, thedata processing system 102 can acquire the values or information. Thedata processing system 102 can acquire or obtain the information by querying or polling one or more available sensors of theclient computing device 140, prompting the end user of theclient computing device 140 for the information, or accessing an online web-based resource using an HTTP protocol. For example, thedata processing system 102 can determine that it does not have the current location of theclient computing device 140, which may be a needed field of the template. Thedata processing system 102 can query theclient computing device 140 for the location information. Thedata processing system 102 can request theclient computing device 140 to provide the location information using one or more location sensors 142, such as a Global Positioning System sensor, WIFI triangulation, cell tower triangulation, Bluetooth beacons, IP address, or other location sensing technique. - The
direct action API 108 can transmit the action data structure to a third party provider device (e.g., application developer device 160) to cause theapplication developer device 160 to invoke a conversational application programming interface (e.g., service provider NLP component) and establish a communication session between theapplication developer device 160 and theclient computing device 140. Responsive to establishing the communication session between theapplication developer device 160 and theclient computing device 140, theapplication developer device 160 can transmit data packets directly to theclient computing device 140 vianetwork 101. In some cases, theapplication developer device 160 can transmit data packets to theclient computing device 140 viadata processing system 102 andnetwork 101. - In some cases, the
application developer device 160 can execute at least a portion of a conversational API or NLP component 106 (e.g., conversational interface 114). For example, theapplication developer device 160 can handle certain aspects of the communication session or types of queries. Theapplication developer device 160 may leverage theNLP component 106 executed by thedata processing system 102 to facilitate processing the audio signals associated with the communication session and generating responses to queries. In some cases, thedata processing system 102 can include theconversational interface 114 configured for theapplication developer device 160. In some cases, the data processing system routes data packets between the client computing device and the third party provider device to establish the communication session. Thedata processing system 102 can receive, from theapplication developer device 160, an indication that the third party provider device established the communication session with theclient device 140. The indication can include an identifier of theclient computing device 140, timestamp corresponding to when the communication session was established, or other information associated with the communication session, such as the action data structure associated with the communication session. - In some cases, the
conversational interface 114 can be a second NLP component that includes one or more component or function of theNLP component 106. Theconversational interface 114 can interact or leverage theNLP component 106. In some cases, thesystem 100 can include asingle NLP component 106 executed by thedata processing system 102. Thesingle NLP component 106 can support both thedata processing system 102 and the third partyapplication developer device 160. In some cases, thedirect action API 108 generates or constructs an action data structure to facilitate performing a service, and the conversational API generates responses or queries to further a communication session with an end user or obtain additional information to improve or enhance the end user's experience or performance of the service. - The
data processing system 102 can include, execute, or otherwise communicate with a content selector component to receive the trigger keyword identified by the naturallanguage processor component 106 and select, based on the trigger keyword, a digital component via a real-time content selection process. The content selection process can refer to, or include, selecting sponsored digital component objects provided by third party content providers. The real-time content selection process can include a service in which digital components provided by multiple content providers are parsed, processed, weighted, or matched in order to select one or more digital components to provide to thecomputing device 140. Thedata processing system 102 can perform the content selection process in real-time. Performing the content selection process in real-time can refer to performing the content selection process responsive to the request for content received via theclient computing device 140. The real-time content selection process can be performed (e.g., initiated or completed) within a time interval of receiving the request (e.g., 5 seconds, 10 seconds, 20 seconds, 30 seconds, 1 minute, 2 minutes, 3 minutes, 5 minutes, 10 minutes, or 20 minutes). The real-time content selection process can be performed during a communication session with theclient computing device 140, or within a time interval after the communication session is terminated. - The
data processing system 102 can select digital components for display in a voice-based environment, the data processing system 102 (e.g., via NLP component 106) can parse the input audio signal to identify keywords (e.g., a trigger keyword), and use the keywords to select a matching digital component based on a broad match, exact match, or phrase match. For example, thedata processing system 102 can analyze, parse, or otherwise process subject matter of candidate digital components to determine whether the subject matter of the candidate digital components correspond to the subject matter of the keywords or phrases of the input audio signal detected by the microphone of theclient computing device 140. Thedata processing system 102 may identify, analyze, or recognize voice, audio, terms, characters, text, symbols, or images of the candidate digital components using an image processing technique, character recognition technique, natural language processing technique, or database lookup. The candidate digital components may include metadata indicative of the subject matter of the candidate digital components, in which case thedata processing system 102 may process the metadata to determine whether the subject matter of the candidate digital component corresponds to the input audio signal. - Content providers (e.g.,
application developer devices 160 or other third-party devices) may provide additional indicators when setting up a content campaign that includes digital components. The content provider may provide information at the content campaign or content group level that thedata processing system 102 may identify by performing a lookup using information about the candidate digital component. For example, the candidate digital component may include a unique identifier, which may map to a content group, content campaign, or content provider. Thedata processing system 102 may determine, based on information stored in content campaign data structure indata repository 120, information about the content provider. - The
data processing system 102 can receive, via a computer network, a request for content for presentation on acomputing device 140. Thedata processing system 102 can identify the request by processing an input audio signal detected by a microphone of theclient computing device 140. The request can include selection criteria of the request, such as the device type, location, and a keyword associated with the request. The request can include the action data structure or action data structure. - Responsive to the request, the
data processing system 102 can select a digital component object fromdata repository 120 or a database associated with the content provider, and provide the digital component for presentation via thecomputing device 140 vianetwork 101. The digital component object can be provided by a content provider device different from theapplication developer device 160. The digital component can correspond to a type of service different from a type of service of the action data structure (e.g., taxi service versus food delivery service). Thecomputing device 140 can interact with the digital component object. Thecomputing device 140 can receive an audio response to the digital component. Thecomputing device 140 can receive an indication to select a hyperlink or other button associated with the digital component object that causes or allows thecomputing device 140 to identify a service provider, request a service from the service provider, instruct the service provider to perform a service, transmit information to the service provider, or otherwise query theapplication developer device 160. - The
data processing system 102 can include, execute, access, or otherwise communicate with aninput generation component 110 designed, constructed or operational to generate data packets for input into anapplication execution component 112. Theinput generation component 110 can include one or more component or functionality of thedirect action API 108 orNLP component 106. Theinput generation component 110 can communicate or interface with theNLP component 106 ordirect action API 108 to generate data packets, commands, instructions, or other data for input into theapplication execution component 112. - The
input generation component 110 can identify an application provided by anapplication developer device 160 vianetwork 101. Theinput generation component 110 can include an interface or port, or communicate viainterface 104 ofdata processing system 102. Theinput generation component 110 can include or provide a graphical user interface for display to theapplication developer device 160. Theinput generation component 110 can receive a request or indication to generate an input. Responsive to receiving the request, theinput generation component 110 can identify an application. Theinput generation component 110 can identify the application with or without receiving a request. For example, theinput generation component 110 can determine to proactively identify an application, or identify the application based on a time interval, condition, event, or other process. - The
input generation component 110 can receive a request to validate the application, and proceed with identifying the application or type of the application to generate an input responsive to the request to validate the application. Theinput generation component 110 can determine to validate the application responsive to receiving the application from theapplication developer device 160. Theinput generation component 110 can determine to validate the application responsive to determining that the application is being submitted to thedata processing system 102 for delivery toclient computing devices 140. Theinput generation component 110 can determine to validate the application before or prior to delivery of the application to aclient computing device 140. Theinput generation component 110 can determine to block or prevent delivery of the application until thedata processing system 102 has validated the application. - The
input generation component 110 can identify the application based on an identifier of the application, name of the application, alphanumeric identifier, or other type of identifier. Theinput generation component 110 can identify the application based on an identifier of theapplication developer device 160. For example, theinput generation component 110 can receive a request from theapplication developer device 160. Theinput generation component 110 can then perform a lookup inapplication data 122 in thedata repository 120 to identify the application associated with theapplication developer 160. - The application identified by the
input generation component 110 can include aconversational interface 114. For example, the application can be configured to use aconversational interface 114 or execute aconversational interface 114 or interact or communicate with aconversational interface 114. The application can include or use, as a user interface, aconversational interface 114. The application can obtain input and provide output via theconversational interface 114. Theconversational interface 114 can include, utilize or otherwise interface with one or more component or functionality of theNLP component 106 ordirect action API 108. Theinput generation component 110 can determine the application is configured with, or configured to use, theconversational interface 114. Theinput generation component 110 can determine the application includes or uses aconversational interface 114 based on a flag or tag associated with the application, parsing the application code, an application package file associated with the application, a transcript file, or other indication provided in theapplication data 122 indata repository 120. - The
input generation component 110 can determine to validate the application. Theinput generation component 110 can determine to validate the application responsive to detecting or determining that the application includes or utilizes aconversational interface 114. Theinput generation component 110 can identify or determine a domain of the application. - The
input generation component 110 can determine a type or domain corresponding to the application. For example, theinput generation component 110 can determine a type or domain of the application. Theinput generation component 110 can determine within which domain or category the application belongs. Theinput generation component 110 can perform a lookup in theapplication data 122 to identify information about the application. Theinput generation component 110 can identify or determine information that facilitates generating input to provide to theapplication execution component 112. For example, theinput generation component 110 can identify or determine a type of the application, domain of the application, historical network activity associated with the application, content of the applications, actions that the application is configured to execute, or inventory accessible by the application. - Types of application can include, for example, lifestyle applications (e.g., fitness, dating, food, music, or travel), social media applications, utility applications (e.g., reminders, calculator, flashlight, weather), games or entertainment applications, productivity applications (e.g., word processing, spreadsheets, pay), or news or information applications. A domain of an application can include, for example, music streaming service, ride sharing service, ticket purchasing service, recipes or cooking. A domain can be a subset of a type of an application.
- The
input generation component 110 can determine the type of the application or a domain of the application based on a lookup in theapplication data 122 repository or data structure. Theinput generation component 110 can determine the type or domain of the application based on parsing or other processing content associated with the application. For example, theapplication data 122 can include keywords, topics, terms, actions, inventory, entities, or other information associated with the application. Theinput generation component 110 can parse the keywords to determine the type or domain of the application. Theinput generation component 110 can be configured with a semantic processing technique that can determine, based on keywords or entities associated with the application, the type of application or domain of the application. - The
input generation component 110 can determine the type or domain of the application based on historical network activity associated with the application or theapplication developer device 160. For example, theinput generation component 110 can determine the type or domain of the application based onhistorical logs 126 associated with theapplication developer device 160.Logs 126 can include previous executions of actions or requests associated with theapplication developer device 160. Thedata processing system 102 can parse or process thelogs 126 using semantic processing or other types of processing to determine a type or domain of the application. - The
input generation component 110 can select an action from theaction repository 124 stored in thedata repository 120. Theinput generation component 110 can select the action based on the type or domain of the application. Theinput generation component 110 can, for example, perform a lookup in theaction repository 124 to identify one or more actions that map to the type or domain of the application. Theaction repository 124 can include or contain a mapping of domains or types to actions. Theaction repository 124 can associate types of applications with types of actions. For example, a ride sharing type of application can be associated with an action to order a ride; a news type of application can be associated with an action to provide latest news headlines for a geographic region; a weather type of application can be associated with an action to provide the weather forecast for a geographic region. - The
input generation component 110 can select a predetermined action from theaction repository 124 that maps to the type or domain of the application. For example, theaction repository 124 can include multiple actions for each type or domain of applications. Theaction repository 124 can rank or order the actions. Theaction repository 124 can include a sequence of actions. An action can be associated with or include one or more parameters used to fulfill or execute an action. - The
input generation component 110 can select a default or initial action for a type or domain of application. Theinput generation component 110 can select a first action from theaction repository 124 based on the type or domain of the application. An initial or default action can be used to generate a trigger phrase for the application. For example, for a ride sharing type of application, an initial, default, or trigger action can include "order a ride"; for a ticket sales type of application an initial, default or trigger action can include "search for tickets for Artist _A." - The
data processing system 102 can populate or update theaction repository 124 based on identifying actions associated with types of applications. Thedata processing system 102 can identify similar applications and actions that the similar applications are configured to perform. Upon determining that the application can successfully execute or fulfill the action, thedata processing system 102 can determine to update theaction repository 124 with a mapping of the action to the type of application. In some cases, an administrator of thedata processing system 102 can update or modify theaction repository 124 to include new actions, or remove actions that are no longer performed by the type of application. - In some cases, the
input generation component 110 can generate an action without selecting an action stored in theaction repository 124. Theinput generation component 110 can receive a list of actions from theapplication developer device 160. For example, theapplication developer device 160 can provide a list of actions in an application package file or transcript file associated with the application. Thedata processing system 102 can parse the application package file or transcript file to identify actions established for the application. Theinput generation component 110 can select an action from the list of actions provided by theapplication developer device 160. - The
input generation component 110 generates a trigger phrase for input into the application. Theinput generation component 110 can automatically generate the trigger phrase. For example, thedata processing system 102 itself can generate the trigger phrase for input into the application. Theinput generation component 110 can generate the trigger phrase using theNLP component 106. Theinput generation component 110 can generate the trigger phrase based on the selected action. Theinput generation component 110 is adapted to generate the trigger phrase to simulate a voice-based input that would be detected by a sensor 142 (e.g., microphone) of thecomputing device 140. Theinput generation component 110 can generate the trigger phrase to initiate execution of the action. - The data processing system 102 (e.g., the
input generation component 110 or NLP component 106) can include a machine learning component ormodel 128 trained based onlogs 126. Thedata processing system 102 can use themodel 128 trained based onlogs 126 to generate trigger phrases based on selected actions. Thelogs 126 can include historical trigger phrases detected by sensors 142 ofcomputing devices 140 to initiate execution of an action for the application or other applications having the same type or domain as the application. Theinput generation component 110 can generate a trigger phrase that is configured to initiate execution of the action by the application via theconversational interface 114. Theinput generation component 110 can construct the trigger phrase for input into the application via theconversational interface 114 of the application. - For example, for an action to order a ride for a ride sharing type application, the
input generation component 110 can generate trigger phrases such as: "I would like to get a ride to work," "I need a ride to the movie theater on Main Street," "How much is a ride to go home?" Theinput generation component 110 can use natural language processing (e.g., via NLP component 106) to generate various types of trigger phrases to initiate execution of an action for the type of application. - The
input generation component 110 can construct a sentence as the trigger phrase. Theinput generation component 110, using theNLP component 106, can construct a sentence for the selected action. Theinput generation component 110 can construct the sentence with a noun and verb. Theinput generation component 110 can construct the sentence with a request for the action. For example, theNLP component 106 can include a natural language generator. Theinput generation component 110, using a natural language generator of theNLP component 106, can generate natural language from structured data such as a knowledge base or a logical form (e.g., linguistics). Theinput generation component 110 can construct terms, phrases or sentences that initiate execution of the action or facilitate execution of fulfillment of the action. The sentence or trigger phrase generated by theinput generation component 110 can include an indication of the selected action. The sentence or trigger phrase generated by theinput generation component 110 can include an indication of the application. For example, the trigger phrase can include "Use Application _A to play music from playlist Number_1." - To do so, the
input generation component 110 can use one or more natural language generation techniques. Theinput generation component 110 can access a list of predetermined text (e.g., a predetermined response repository) that is copied and pasted, possibly linked with other text. Theinput generation component 110 can generate the phrase in stages of planning and merging of information to allow for the generation of text that looks natural and does not become repetitive. For example, theinput generation component 110 can generate the trigger phrase or additional phrases based on the action using one or more of the following stages: content determination to identify what information to mention in the phrase; document structuring to organize the information to convey; aggregation to merge similar terms, phrases or sentences to improve readability and naturalness; lexical choice to putting words to the concepts; referring expression generation to create referring expressions that identify objects and regions; and realization to creating the actual text, which can be in accordance with the rules of syntax, morphology, and orthography. - The
input generation component 110 can use machine learning to build a system, without using the separate stages as above. For example, theinput generation component 110 can use a model trained by a machine learning engine (e.g., an artificial recurrent neural network such as long short-term memory) on a large data set of input data (e.g., logs 126) and corresponding (human-written) output texts. Thus, theinput generation component 110 can use one or more techniques to generate a trigger phrase for input into the application based on the selected for the application action. - The
input generation component 110 can determine which technique to use to construct or generate sentences, text, phrases, or responses. Theinput generation component 110 can evaluate a quality of themodel 128 to determine whether themodel 128 has been sufficiently trained to generate phrases. Theinput generation component 110 can determine a metric of themodel 128 which can indicate a quality of themodel 128. The metric can correspond to an amount oflogs 126 used to train themodel 128, a confidence score associated with themodel 128, a quality of sentences constructed using themodel 128, or other quality indicator. Based on the metric associated with the model trained withhistorical logs 126, theinspection component 116 can select one of themodel 128 or a predetermined response repository to use to generate queries. Theinput generation component 110 can generate, based on the selection, the response via the one of themodel 128 or the predetermined response repository (e.g., stored in theaction repository 124,application data 122, or template 134). - The
input generation component 110 can simulate an intent based on a context, such as the action. Theinput generation component 110 can simulate an intent based on a previous context in the conversation. For example, if a previous action was to place an order for an item, then theinput generation component 110 can generate a subsequent phrase such as "What is the status of my order?", "Has my order been shipped?", "When will my order arrive?", "How much was my order?" Theinput generation component 110 can establish a conversation with theapplication 136 via theconversational interface 114. - The
input generation component 110 can determine to omit certain information from the trigger phrase or other sentence or phrase that is to be input into theapplication 136 executed by theapplication execution component 112. Theinput generation component 110 can determine to omit values for parameters used to execute the selected action. For example, an action to order a ride can include parameters pick up destination and drop off destination. Theinput generation component 110 can generate the trigger phrase by omitting the drop off destination as follows "I would like to order a ride to go somewhere." Theinput generation component 110 can be configured to include values for parameters or omit values for parameters to cause theapplication 136 executed by the application execution component to generate queries via aconversational interface 114 to request the values for the parameters that were omitted by theinput generation component 110. - The
data processing system 102 can include, access or otherwise interface with anapplication execution component 112. Theapplication execution component 112 can be designed, constructed or operational to execute anapplication 136 provided theapplication developer device 160. Theapplication execution component 112 adapted to execute theapplication 136 on thedata processing system 102. Theapplication execution component 112 can execute theapplication 136 in a sandboxed environment on thedata processing system 102. A sandboxed environment can refer to executing theapplication 136 in a computing environment or memory that has restricted access to other memory, components or functionality of thedata processing system 102. Theapplication 136 executed in the sandboxed environment can be restricted from accessing components or functionality of thedata processing system 102 that is external or outside the sandboxed environment. The sandbox environment can isolate the application being executed from other components, functionality or resources of thedata processing system 102. The sandbox environment can provide a secure environment in which to execute theapplication 136 such that erroneous functionality in the application may not negatively impact other components of thedata processing system 102. - The
application execution component 112 can execute theapplication 136 in a virtual machine. For example, theapplication execution component 112 can invoke a virtual machine that executes the application. Theapplication execution component 112 can instantiate a virtual machine or instance of the application executing on thedata processing system 102 by a virtual machine. Theapplication execution component 112 can configure or establish the virtual machine using one or more configuration parameters. The configuration parameters can be stored in theapplication data 122. For example, theapplication developer device 160 can indicate a software or hardware configuration for the execution of the application. Theapplication developer device 160 can indicate the types of software or hardware with which the application is compatible. Theapplication execution component 112 can obtain the configuration from theapplication data 122, and configure the virtual machine based on the configuration information so that the virtual machine can execute the application. For example, the virtual machine can be configured with a type of processor (e.g., processor frequency, cores, speed, performance) or amount of memory that is comparable to acomputing device 140 that would execute theapplication 136. - The
application execution component 112 can execute theapplication 136 with aconversational interface 114. Theapplication execution component 112 can use the conversational interface to provide input to the application, and present output from the application. Theapplication 136 can access a network (e.g., network 101) to request other input, or transmit output. Theapplication execution component 112 can provide theconversational interface 114 to simulate providing voice input generated by theinput generation component 110 to the application being executed via the application execution component 112 (e.g., a virtual machine invoked by the application execution component 112). - The
application execution component 112 can receive the trigger phrase generated by theinput generation component 110 and provide the trigger phrase to theapplication 136 executed by theapplication execution component 112. Theinput generation component 110 can provide the trigger phrase to theinterface 104, which can forward the trigger phrase to theconversational interface 114 of the application. Theconversational interface 114 can be executed by theapplication 136, or theapplication 136 can utilize theNLP component 106 to parse and process the trigger phrase. - The
application 136 can parse or process the trigger phrase to identify an action. The trigger phrase can refer to an initial phrase or a first phrase or query used to launch or command the application. The trigger phrase can include, for example, "Order a ride to Restaurant_A." Theapplication execution component 112 can execute the application in a manner similar to aclient computing device 140 executing theapplication 136. For example, theapplication 136, executed by theapplication execution component 112, can process the trigger phrase to identify an action. The action can be the same or similar action previously selected by theinput generation component 110 to generate the trigger phrase. - The
application 136 can identify a parameter used to execute the action. Theapplication 136 can access a data repository of the application, or other memory, index, or data file of theapplication 136 to identify the parameter. In some cases, theapplication 136 can make a remote procedure call to thedata processing system 102, or one or more component thereof, to further process the action. Theapplication 136 can make a remote procedure call to theapplication developer device 160 to further process the action or trigger phrase. - The
application 136 can identify one or more parameters used to execute the action identified in the trigger phrase. Theapplication 136 can identify the parameter from theaction repository 124. For example, theaction repository 124 can include a mapping of parameters to actions. Theaction repository 124 can include an association between actions and parameters used to fulfill the action. Theapplication developer 160 can establish a data structure for theapplication 136 that indicates which parameters are used by theapplication 136 to fulfill the action. Parameters can include any type or form of parameter or value that facilitates executing or fulfilling the action. For example, parameters for a ride sharing action can include: pick up location, drop off location, number of passengers, pick up time, drop off time, or type of vehicle. Parameters for a play music action can include: artist name, song name, album name, playlist name, or radio station name. Parameters for an action to purchase a ticket can include: venue name, act, artist, sport, sports teams names, date, number of tickets, price, or seat location. - The
application execution component 112 can execute theapplication 136 to identify one or more parameters and then generate a query based on the identified parameters. For example, theapplication 136, responsive to receiving the trigger phrase, can identify the action and parameters used to execute the action. Theapplication 136 can determine that values for the identified one or more parameters are missing, unavailable or otherwise not provided with the trigger phrase. For example, the trigger phrase generated by theinput generation component 110 may include a request to order a ride, but lack the drop off or pick up location for the ride. - The
application 136 can determine to generate a query to obtain a value for a parameter used to execute the action. Theapplication 136, executed by theapplication execution component 112 of the data processing system 102 (e.g., in a sandbox computing environment of thedata processing system 102 or virtual machine), can generate a query based on the parameter. Theapplication 136 can generate the query using theconversational interface 114 of the application. Theconversational interface 114 can be provided by one or more component of thedata processing system 102. Theapplication 136 can generate the query using theconversational interface 114, which can use theNLP component 106 orinput generation component 110. - In response to an action to request an action that lacks a value for a parameter used to execute the action, the
application 136 can generate a query to obtain the value for the parameter in order to facilitate executing the action. Theapplication 136 can generate the query in a conversational form in accordance with theconversational interface 114. For example, a value of a parameter used to execute an action can be absent from the trigger phrase or other input phrase. Theapplication 136 can generate a query to request the value of the parameter used to execute the action. For example, if the action is to order a ride and a value for the destination parameter was missing from the trigger phrase or other input phrase, theapplication 136 can generate a query "Where would you like to go?", "What is the destination?", "Sure, I can request a ride for you. What is the drop off location?" - The
application 136, via theconversational interface 114, can provide the generated query requesting values for parameters used to execute the action. Thedata processing system 102, viainput generation component 110, can generate a response to the query. The response can include the requested value for the parameter used to execute the action. Theinput generation component 110 can generate the response with the value. Theinput generation component 110 can use a natural language generator to generate the response with the value. Theinput generation component 110 can identify any value in accordance with the parameter. Theinput generation component 110 can access a structured database with entities to select the value. Theinput generation component 110 can access a predetermined list of values for parameters (e.g., inaction repository 124 of application data 122). Theinput generation component 110 can identify or select a value for the parameter fromlogs 126. - The
application 136 can receive the response to the query containing the value for the parameter. Theapplication 136 can execute the action using the value for the parameter. In some cases, theapplication 136 can generate additional queries for additional values for additional parameters. Theinput generation component 110 can generate additional responses with values for the requested parameters. Theapplication 136 can provide the queries viaconversational interface 114 to a component of thedata processing system 102, and receive responses to the queries via theconversational interface 114 from a component of thedata processing system 102. Theapplication 136 can proceed to execute the action and fulfill the action. Theapplication 136 can populate an action data structure (e.g., using a component or functionality of direct action API 108) for the action with one or more values for one or more parameters, and process or transmit the action data structure to fulfill the request for the action. - The
input generation component 110 can generate one or more responses. Theinput generation component 110 can generate additional responses responsive to additional queries from theapplication 136. Theinput generation component 110 can generate a second response based on a semantic analysis of a first response, a first query from the application, and a trigger phrase. Theinput generation component 110 can provide the second response for processing by theapplication 136 executed by thedata processing system 102. Thus, thedata processing system 102 can conduct a conversation with multiple responses and queries between theapplication 136 and one or more components of thedata processing system 102. The conversation can include the execution of one or more actions. - The
data processing system 102 can include, execute, or otherwise interface with avirtualization component 118. Thevirtualization component 118 can be designed, constructed or operational to simulate interactions between theapplication 136 executed via theapplication execution component 112 and a virtual computing device. The virtual computing device can emulate or represent aclient computing device 140. Thevirtualization component 118 can simulate or emulate anapplication developer device 160. Thevirtualization component 118 can emulate or simulate a content provider, service provider, or other third party provider device. - The
virtualization component 118 can simulate aclient computing device 140. Thevirtualization component 118 can provide an electronic account used to simulate a user of aclient computing device 140. Thevirtualization component 118 can provide an electronic account used to simulate a third party service provider. Thevirtualization component 118 can include virtual accounts that include, for example, usernames, identifiers, preferences, location information, financial account information, or other information used by anapplication 136 to execute an action. Thevirtualization component 118 can allow theapplication 136 executed by theapplication execution component 112 to execute the action as if theapplication 136 was executing the action on aclient computing device 140. - For example,
application 136 executed by theapplication execution component 112 can execute the action with one or more values for one or more parameters. The application can execute the action by transmitting an action data structure (e.g., generated using one or more functionality of the direct action API 108). Theapplication 136 may attempt to transmit the action (e.g., an action to order a ride) to a third party service provider that provides the ride. Theapplication execution component 112 can intercept the request. Theapplication execution component 112 can include a hooking component configured to intercept and redirect the request. Theapplication execution component 112 can receive data packets corresponding to the action data structure, and modify a destination address of the data packets to prevent the data packets from being sent to a third party service provider. - The
virtualization component 118 can provide a virtual user account and virtual service provider account. Thevirtualization component 118 can allow theapplication 136 to establish a telecommunication channel between a device associated with theapplication developer device 160 and a virtual client device provided by thevirtualization component 118. Thevirtualization component 118 can provide virtual user account information to the device (e.g., a service provider) associated with theapplication developer device 160. The data processing system 102 (e.g., input generation component 110), using thevirtualization component 118, can provide responses to the device associated with theapplication developer device 160. - The data processing system can establish a telecommunication channel between a virtual client device and the application or a device associated with the
application developer device 160. Theinput generation component 110 can generate input to transmit via the telecommunication channel to the application or theapplication developer device 160. The input can include a response to a query or other input, such as phrases, trigger phrases, or values for parameters to execute an action. The telecommunications channel can refer to an audio communication channel, chat communication, SMS text communication, cellular based communication, phone call, or voice over internet protocol. For example, the application c136 n include a chat bot, and theinput generation component 110 can establish a telecommunication channel with the chat bot of the application. - For example, the
application 136 can determine that the parameter used by the application is an electronic account identifier. Theapplication 136 can generate a query with a request for the electronic account identifier. Theapplication 136 can generate the query via theconversational interface 114. Thevirtualization component 118 can receive the query. The virtualization component 118 (e.g., via theNLP component 106 or the input generation component 110) can generate a response that includes a simulation value for the electronic account identifier. The simulation value can refer to a virtual electronic account. The virtual electronic account can be a test account or account associated with an administrator of thedata processing system 102 orapplication developer device 160. The virtual account may include values for parameters that do not correspond to an actual user of theapplication 136 orclient computing device 140. The virtual account can be established by thevirtualization component 118, an administrator, or the application developer to facilitate evaluating theapplication 136. - The
virtualization component 118 can provide a flag, indication, or value for input into theapplication 136 that is a simulated value or value for a virtual account. A simulated value can indicate that the value does not correspond to an actual user. The simulated value can indicate to theapplication execution component 112 that theapplication 136 cannot execute an aspect of the action. Theapplication execution component 112 can determine, based on detected the simulated value or virtual value, to prevent or block theapplication 136 from executing the action with the simulated value. For example, the simulated value may be a financial account identifier and there may not be an actual financial account with funds corresponding to the simulated value. Thus, theapplication execution component 112, upon detecting the simulated value, can block or prevent execution of the portion of the action that entails transferring funds from the simulated financial account. In another example, simulated values for a ride sharing action can include pickup and drop off locations, in which case the application execution component 112 (e.g., via virtualization component 118), can prevent theapplication 136 from ordering an actual service provider to fulfill the ride request. - The
application execution component 112 can determine that the value provided by theinput generation component 110 orvirtualization component 118 is a simulated value based on flag, tag, indication or symbol associated with the value. In some cases, theapplication execution component 112 can determine that certain parameters may have values that are virtual values, and block execution of aspects of actions that utilize such parameters (e.g., financial account identifier, or pickup or drop off locations). - The
virtualization component 118 can utilizeinterface 104 andnetwork 101 to allow theapplication 136 to establish telecommunication channels, links or sessions with devices external to thedata processing system 102. Thevirtualization component 118 can, in some cases, simulate a telecommunication channel, link or session such that theapplication 136 executed by theapplication execution component 112 can continue to process and execute the action from the sandboxed computing environment. In some cases, thevirtualization component 118 can receive requests from theapplication 136 and transmit responses to theapplication 136 viaconversational interface 114. For example, thevirtualization component 118 can utilize one or more component or functionality of theNLP component 106 orinput generation component 110 to communicate withapplication 136 executed byapplication execution component 112. - The
application 136 may or may not successfully execute the action with the values. Theapplication 136 may or may not successfully request values for parameters used to execute the action. For example, theapplication 136 may fail to request a value for a parameter that is used to execute the action. Theapplication 136 may proceed to execute the action without the value for the parameter, which may result in erroneous execution of the action, unsuccessful fulfillment of the action, or theapplication 136 crashing, freezing, or terminating. - The
data processing system 102 can include, execute, or otherwise interface with aninspection component 116. The inspection component can be designed, constructed or operational to validate theapplication 136. Theinspection component 116 can determine a state of theapplication 136 executed by theapplication execution component 112. Theinspection component 116 can evaluate the state of theapplication 136. Theinspection component 116 can identify an error code based on the state of theapplication 136. Theinspection component 116 can provide a notification to theapplication developer device 160 based on the error code. - The
inspection component 116 can validate the application. Validation can refer to or include determining that the application passes certain tests performed by thedata processing system 102. Validation can refer to or include determining that the application does not include errors or bugs (e.g., does not crash or freeze during certain actions). Validation can refer to or include confirming that the application can execute an action or fulfill an intent. Validation can refer to or include determining that the application does not consume excessive computing resources (e.g., memory, processor utilization, network bandwidth, remote procedure calls, storage, audio output, or screen display brightness level). Thedata processing system 102 can validate the application if the application can perform an action without consuming an amount of a computing resource that is greater than or equal to a computing resource threshold. The threshold can be a dynamic threshold, percentage, ratio, or absolute threshold. The threshold can vary based on the type of application, operating system with which the application is compatible, or device configuration associated with the application. Thus, thedata processing system 102 can validate the application based on various factors. - The
inspection component 116 can determine whether theapplication 136 has crashed or is in a frozen state. Theinspection component 116 can determine that the application has crashed if theapplication 136 has become non-responsive. For example, theinspection component 116 can access a task manager of theapplication execution component 112 or virtual machine executing theapplication 136 to determine whether a state of a process associated with theapplication 136 is running, unresponsive, suspended, or terminated. If theapplication 136 state is unresponsive, theinspection component 116 can evaluate the unresponsive state to determine that theapplication 136 failed to execute the action. Theinspection component 116 can determine an error code corresponding to failure to execute the action. The error code can include an alphanumeric code, text, terms, phrases, symbol, or other indication of the error. Theinspection component 116 can retrieve the error code from theerror code repository 132 stored indata repository 120. Theerror code repository 132 can include an index or mapping of application states or conditions associated with application states to error codes. - The
inspection component 116 can determine the state of theapplication 136 by evaluating an output of theapplication 136. Theinspection component 116 can parse an output of theapplication 136. Theinspection component 116 can obtain, receive or identify the output of theapplication 136 viaconversational interface 114. Theinspection component 116 can obtain the output of the application via thevirtualization component 118. For example, theapplication 136 can provide audio or visual output for presentation via aclient computing device 140. However, since theapplication 136 can be executed by theapplication execution component 112 for validation purposes, theapplication execution component 112 can forward the output to thevirtualization component 118. Theinspection component 116 can parse the visual output or analyze the audio output to determine a state of theapplication 136. For example, the visual output can include an error message, such as an error pop-up window, or a blank screen indicating an error. The audio output can indicate an error or frozen state of theapplication 136. The visual or audio output of theapplication 136 can otherwise indicate a state of the application. The visual or audio output of theapplication 136 can indicate that theapplication 136 successfully executed theapplication 136. - For example, if the
application 136 is a ride sharing application, theinspection component 116 can determine whether the output of the application indicates that a ride is being requested or ordered. Theinspection component 116 can further determine whether the values for the parameters input to theapplication 136 were properly used to execute the action. Theinspection component 116 can parse the output of theapplication 136 to determine that the pickup location or drop-off location correspond to the values of the parameters that were input into theapplication 136 via theconversational interface 114. - The
inspection component 116 can determine whether theapplication 136 requested values for all parameters used to execute the action. Theinspection component 116 can determine, viaaction repository 124, the parameters that are used to execute the action. Theinspection component 116 can validate whether theapplication 136 generated one or more queries to obtain values for the parameters used to execute the action prior to executing the action. If theinspection component 116 determines that theapplication 136 failed to request values for parameters used to execute the action, but proceeded to execute the action with missing parameters, theinspection component 116 can determine that theapplication 136 erred or failed to obtain values for the parameters. Theinspection component 116 can determine the state of the application to be a failure state or unsuccessful state. Theinspection component 116 can select an error code for this state that indicates that theapplication 136 failed to request values for parameters used to perform the action. The error code can indicate that theapplication 136 attempted to execute an action with missing values or partial data. Theinspection component 116 can determine that executing the action with missing values may not be successful or result in the inefficient execution of the action, thereby consuming excessive computing resources. - For example, an action to order a ride can include parameters for pick up location, drop off location, and electronic account identifier. The
application 136 may request values for the pickup and drop off locations, but fail to obtain an electronic account identifier. Theapplication 136 can proceed to attempt to execute the action with requested the electronic account identifier. However, this may be inefficient or result in a failure mode because theapplication 136 may be unable to obtain payment information for the ride, or validate the user. Accordingly, theinspection component 116 can evaluate the state by identifying the values for parameters theapplication 136 requested, the type of action, and the state of theapplication 136 to determine that theapplication 136 attempted to execute the action with a missing value. Theinspection component 116 can evaluate this state of the application to determine an error code that indicates theapplication 136 failed to request values for parameters used to execute the action. - In some cases, the
inspection component 116 can evaluate the state prior to execution of the action to determine that a value for a parameter is missing and that theapplication 136 failed to request the value, and then prevent the application from executing the action. - The
inspection component 116 can evaluate resource consumption of theapplication 136 of the prior to, during, and subsequent to execution of the action. Theinspection component 116 can use a task manager or other utility to monitor processor utilization, memory utilization, input/output reads, data storage read/writes, network bandwidth utilization, or other computing resource metrics. Theinspection component 116 can evaluate this metrics on the virtual machine executing theapplication 136, or other component or system that executes theapplication 136. Theinspection component 116 can evaluate the state of theapplication 136 based on the computing resource consumption metrics. Theinspection component 116 can compare the computing resource consumption metrics with a threshold (e.g., a threshold stored in theerror code 132 repository) to determine an error code. If a resource consumption metric is greater than or equal to a threshold, theinspection component 116 can assign an error code that indicates which resource consumption metric was greater than or equal to the threshold. Theinspection component 116 can select error codes that can indicate theapplication 136 consumed excessive computing resources before execution of the action, during execution of the action, or subsequent to execution of the action. - The
inspection component 116 can evaluate the state of theapplication 136 based on sensor utilization. Theinspection component 116 can evaluate which sensors theapplication 136 utilizes to execute the action. Theinspection component 116 can determine whether the sensor is still active upon completion of the action or termination of theapplication 136. Theinspection component 116 can determine whether theapplication 136 is unnecessarily keeping a sensor active. Theinspection component 116 can determine whether theapplication 136 failed to deactivate a sensor. Theinspection component 116 can determine whether sensors are active or inactive via thevirtualization component 118. Theinspection component 116 can determine whether sensors are being used by theapplication 136 based on commands or communications provided by theapplication 136. Theinspection component 116 can determine what ports theapplication 136 may be using to communicate with a sensor. Example sensors can include sensors 142, such as a microphone, speaker, ambient light sensor, temperature sensor, accelerometer, gyroscope, or other sensor. - For example, the
application 136 can utilize a microphone to establish a voice-based communication channel, such as a telephone call, with a device of theapplication developer device 160. Theapplication 136 can terminate or end the telephone call. Theinspection component 116 can determine whether the microphone has been deactivated subsequent to termination of the telephone call. Theinspection component 116 can evaluate the state of theapplication 136 to determine that theapplication 136 failed to deactivate the microphone upon termination of the phone call, and then determine an error code that indicates theapplication 136 failed to deactivate the microphone. For example, thedata processing system 102 can determine the state of the application is a termination state. Thedata processing system 102 can evaluate the state of the application to determine a resource (e.g., memory, processor, display, speaker, input device) or sensor (e.g., microphone or ambient light sensor) utilized by the application is active. Thedata processing system 102 can generate the error code indicating that the application failed to deactivate the resource or sensor responsive to the termination state. - For example, the
application 136 can establish a telecommunication channel between a device associated with the application developer and a virtual client device (e.g., provided by virtualization component 118). The telecommunication channel can be established responsive to a request or response provided by theinput generation component 110 viaconversational interface 114. For example, theinput generation component 110 can request to speak with a technical support agent, salesperson, or customer service representative of the application developer. Theinput generation component 110 can automatically generate and provide input to initiate this request. Theapplication 136, responsive to the request, can establish the telecommunications channel. Theinspection component 116 can detect termination of the telecommunication channel. For example, theinput generation component 110 can provide input to hang up the phone call. Responsive to termination of the telecommunication channel, theinspection component 116 can identify a state (e.g., active or inactive) of a microphone of the virtual client device. Thedata processing system 102 can set an error code based on the state of the microphone of the virtual client device being active. The error code can indicate that theapplication 136 failed to deactivate the microphone upon termination of the telephone call. -
FIG. 2 is an illustration of a method of validating actions in a digital assistant-based application. Themethod 200 can be performed by one or more component or system depicted inFIG. 1 orFIG. 3 , including, for example, a data processing system. At 202, the data processing system can identify an application. The data processing system can identify the application responsive to a request to validate an application. The application can be provided by an application developer device of an application developer. The application can include or utilize a conversational interface for input or output. The data processing system can identify the application based on detecting that the application has not yet been launched (e.g., not yet live on an online application store for delivery to client computing devices). The data processing system can identify the application is a new application, or a new version of a previously provided application. The data processing system can identify the application has not yet been validated, evaluated, or tested. The data processing system can identify that a previous version of the application failed an evaluation or did not pass a validation process. The data processing system can determine, based on the previous version failing, to validate the newly submitted version. - At 204, the data processing system can determine a domain of the application. The data processing system can determine a type or domain of the application, such as music streaming or ride sharing. The data processing system can use various techniques to identify the type or domain of the application, including, for example, parsing metadata associated with the application, accessing an online resource associated with the application developer to parse content available on the online resource, or analyzing historical logs associated with previous versions of the application.
- At 206, the data processing system can determine whether an action repository is available for the type or domain of the application determined at 204. If an action repository is available (e.g., a list of actions that can be executed by the type of application), then the data processing system can select an action from the list of actions at 210. However, if a list of actions is not available in an action repository for this type of application, the data processing system can use a brute force trigger mechanism at 208.
- At 208, the brute force trigger mechanism can include selecting an initial or default action. The default action may be general or agnostic to types of action, or may have commonality among different types of actions. The default action can include a query to the application to determine a type of the application, such as "what type of actions can you execute?" The brute force trigger mechanism can include cycling through actions in the action repository for each type of application. For example, there may be 20 different types of applications in the action repository. Each type of application can be associated with one or more actions. The brute force trigger mechanism can include the data processing system selecting a first type and a first action of the first type. The data processing system can then proceed to select a second action of the first type if the first action was successful. If the first action was not successful, or the application was not responsive or indicated that it could not execute those types of actions, then the data processing system can select a first action of a second type for processing.
- At 210, the data processing system can generate a trigger phrase based on the selected action. The data processing system can generate the trigger phrase using a natural language generator and the selected action. The data processing system can generate the trigger phrase based on machine learning or a predetermined template of phrases.
- At 212, the data processing system can execute the application. The data processing system can input the trigger phrase generated at 210 to the application via a conversational interface. The application executed by the data processing system can parse or process the trigger phrase. The application can be executed by a virtual machine or in a sandboxed computing environment. The application can determine, based on the trigger phrase, an action. The application can identify, from a template or action repository, parameters used to execute the action. The application an determine that the trigger phrase did not include values for parameters used to execute the action. The application executed by the data processing system, responsive to determining to request a value for a parameter to execute the action, can generate a first query for the value of the parameter.
- At 214, the data processing system can receive the query generated by the application. The data processing system can determine to provide a response to the query. The data processing system can select, at 214, a natural language generation technique to generate the response to the query from the application. The data processing system can select natural language processor of the data processing system, a model trained based on historical logs, select a phrase from a historical log, or use a brute force technique (e.g., template response with placeholder fields) to generate the response.
- At 216, the data processing system can generate the response using a technique selected at 214. The data processing system adapted to generate the response including a value for the requested parameter. The value is a simulated value. The data processing system adapted to provide the value as input to the application. The response adapted to include a request to establish a communication channel, perform another action, ask for help, or any other type of response. The response is responsive to the query. The data processing system is adapted to evaluate the error handling capabilities of the application. The data processing system can evaluate whether the application generates the same query or an alternate query based on the unresponsive response from the data processing system.
- At 218, the application or data processing system can determine whether to establish a communication channel (e.g., a phone call, audio call, chat communication, or text communication). The application data processing system can determine to establish the communication channel based on the generated response or a query from the application. If the application determines to establish the communication channel, the data processing system can proceed to establish the communication channel at 220. The communication channel can be between a device of the application developer and a virtual computing device provided by the data processing system that simulates a client computing device. The input generation component can provide voice input for transmission over the communication channel to the device of the application developer.
- If the data processing system determines, at 218, not to establish the communication channel, the data processing system is adapted to proceed to determine the state of the application and generate an error code at 222. The data processing system can evaluate the state of the application. The state can indicate whether the application is active, inactive, standby, terminated, or not responding, for example. The data processing system is adapted to assign an error code based on the state of the application. The data processing system can assign the error code based on one or more factors associated with the state of the application or the execution of the action, including, for example, whether the application successfully executed the action.
- At 224, the data processing system can determine whether to terminate execution of the application. The data processing system can determine to terminate or end a process, thread, or communication channel associated with the application. The data processing system can determine to terminate an aspect of the application based on the type of action, status of executing the action, computing resource consumption metric, sensor activity status, or whether a simulated value was provided for execution. If the data processing system determines to terminate a process or communication channel associated with the application, the data processing system can proceed to act 226 to transmit a termination command. If, however, the data processing system determines not to terminate a process or communication channel (e.g., the processes completed successfully or crashed, or no communication channel was established at 218), then the data processing system can proceed to 228 to provide a notification.
- At 228, the data processing system can provide a notification of the error code to the application developer device. The data processing system can attempt to apply a patch to resolve issues associated with the application. The data processing system can remove the application from the application delivery server. The data processing system can prevent the application from being delivered to client computing devices based on the error code. For example, responsive to the error code indicating that the application fails to deactivate a sensor, uses excessive computing resources, or fails to request values for parameters used to execute an action, the data processing system can determine to prevent or block the application from being delivered to client computing device. The data processing system can determine to delay launch of the application until the application developer resolves the issues in the application that result in the unsatisfactory error codes. Thus, the data processing system can validate actions in a digital assistant-based application prior to the application being launched or delivered to client computing device to prevent erroneous or faulty execution of the application on client computing devices.
-
FIG. 3 is a block diagram of anexample computer system 300. The computer system orcomputing device 300 can include or be used to implement thesystem 100, or its components such as thedata processing system 102. Thedata processing system 102 can include an intelligent personal assistant or voice-based digital assistant. Thecomputing system 300 includes a bus 305 or other communication component for communicating information and aprocessor 310 or processing circuit coupled to the bus 305 for processing information. Thecomputing system 300 can also include one ormore processors 310 or processing circuits coupled to the bus for processing information. Thecomputing system 300 also includesmain memory 315, such as a random access memory (RAM) or other dynamic storage device, coupled to the bus 305 for storing information, and instructions to be executed by theprocessor 310. Themain memory 315 can be or include thedata repository 120. Themain memory 315 can also be used for storing position information, temporary variables, or other intermediate information during execution of instructions by theprocessor 310. Thecomputing system 300 may further include a read only memory (ROM) 320 or other static storage device coupled to the bus 305 for storing static information and instructions for theprocessor 310. Astorage device 325, such as a solid state device, magnetic disk or optical disk, can be coupled to the bus 305 to persistently store information and instructions. Thestorage device 325 can include or be part of thedata repository 120. - The
computing system 300 may be coupled via the bus 305 to adisplay 335, such as a liquid crystal display, or active matrix display, for displaying information to a user. An input device 330, such as a keyboard including alphanumeric and other keys, may be coupled to the bus 305 for communicating information and command selections to theprocessor 310. The input device 330 can include atouch screen display 335. The input device 330 can also include a cursor control, such as a mouse, a trackball, or cursor direction keys, for communicating direction information and command selections to theprocessor 310 and for controlling cursor movement on thedisplay 335. Thedisplay 335 can be part of thedata processing system 102, theclient computing device 140 or other component ofFIG. 1 , for example. - The processes, systems and methods described herein can be implemented by the
computing system 300 in response to theprocessor 310 executing an arrangement of instructions contained inmain memory 315. Such instructions can be read intomain memory 315 from another computer-readable medium, such as thestorage device 325. Execution of the arrangement of instructions contained inmain memory 315 causes thecomputing system 300 to perform the illustrative processes described herein. One or more processors in a multiprocessing arrangement may also be employed to execute the instructions contained inmain memory 315. Hard-wired circuitry can be used in place of or in combination with software instructions together with the systems and methods described herein. Systems and methods described herein are not limited to any specific combination of hardware circuitry and software. - Although an example computing system has been described in
FIG. 3 , the subject matter including the operations described in this specification can be implemented in other types of digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. - For situations in which the systems discussed herein collect personal information about users, or may make use of personal information, the users may be provided with an opportunity to control whether programs or features that may collect personal information (e.g., information about a user's social network, social actions or activities, a user's preferences, or a user's location), or to control whether or how to receive content from a content server or other data processing system that may be more relevant to the user. In addition, certain data may be anonymized in one or more ways before it is stored or used, so that personally identifiable information is removed when generating parameters. For example, a user's identity may be anonymized so that no personally identifiable information can be determined for the user, or a user's geographic location may be generalized where location information is obtained (such as to a city, postal code, or state level), so that a particular location of a user cannot be determined. Thus, the user may have control over how information is collected about him or her and used by the content server.
- The subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. The subject matter described in this specification can be implemented as one or more computer programs, e.g., one or more circuits of computer program instructions, encoded on one or more computer storage media for execution by, or to control the operation of, data processing apparatuses. Alternatively or in addition, the program instructions can be encoded on an artificially generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. A computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them. While a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially generated propagated signal. The computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- The terms "data processing system" "computing device" "component" or "data processing apparatus" encompass various apparatuses, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations of the foregoing. The apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). The apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them. The apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures. For example, the
direct action API 108 orNLP component 106 and otherdata processing system 102 components can include or share one or more data processing apparatuses, systems, computing devices, or processors. - A computer program (also known as a program, software, software application, app, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment. A computer program can correspond to a file in a file system. A computer program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub programs, or portions of code). A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs (e.g., components of the data processing system 102) to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatuses can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit). Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto optical disks; and CD ROM and DVD-ROM disks. The processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- The subject matter described herein can be implemented in a computing system that includes a back end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front end component, e.g., a client computer having a graphical user interface or a web browser through which a user can interact with an implementation of the subject matter described in this specification, or a combination of one or more such back end, middleware, or front end components. The components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network. Examples of communication networks include a local area network ("LAN") and a wide area network ("WAN"), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- The computing system such as
system 100 orsystem 300 can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network (e.g., the network 101). The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other. In some implementations, a server transmits data (e.g., data packets representing a digital component) to a client device (e.g., for purposes of displaying data to and receiving user input from a user interacting with the client device). Data generated at the client device (e.g., a result of the user interaction) can be received from the client device at the server (e.g., received by thedata processing system 102 from thecomputing device 140 or the application developer device 160). - Having now described some illustrative implementations, it is apparent that the foregoing is illustrative and not limiting, having been presented by way of example.
- References to "or" may be construed as inclusive so that any terms described using "or" may indicate any of a single, more than one, and all of the described terms. References to at least one of a conjunctive list of terms may be construed as an inclusive OR to indicate any of a single, more than one, and all of the described terms. For example, a reference to "at least one of 'A' and 'B'" can include only 'A', only 'B', as well as both 'A' and 'B'. Such references used in conjunction with "comprising" or other open terminology can include additional items.
- Where technical features in the drawings, detailed description or any claim are followed by reference signs, the reference signs have been included to increase the intelligibility of the drawings, detailed description, and claims.
- The systems and methods described herein may be embodied in other specific forms without departing from the characteristics thereof. The foregoing implementations are illustrative rather than limiting of the described systems and methods. Scope of the systems and methods described herein is thus indicated by the appended claims, rather than the foregoing description.
Claims (14)
- A system (100) to validate actions in a digital assistant-based application, comprising a computing device (140) a data processing system (102) in communication with the computing device, comprising one or more processors to:identify an application provided by an application developer device of an application developer, the application having a conversational interface;select, for the application, an action from an action repository of the data processing system;generate, based on the action and via a natural language processor of the data processing system, a trigger phrase for input into the application, wherein the trigger phrase simulates a voice-based input that would be detected by a sensor of the computing device;execute the application to process the trigger phrase via the conversational interface, and identify an action of the application responsive to the trigger phrase;identify a parameter used by the application to execute the action of the application;generate, based on the parameter and via execution of the conversational interface of the application, a first query responsive to the trigger phrase, wherein the first query comprises a request for a value for the parameter;generate, via the natural language processor, a first response to the first query for input into the application, wherein the first response includes a simulated value for the parameter; determine, based on execution of the application to process the first response, a state of the application;evaluate the state of the application to determine an error code; andprovide, to the application developer device, a notification based on the error code.
- The system of claim 1, comprising the data processing system to:determine the parameter used by the application comprises an electronic account identifier;generate the first query comprising a request for the electronic account identifier; andgenerate, via the natural language processor, the first response comprising a simulation value for the electronic account identifier.
- The system of claim 1 or 2, comprising the data processing system to:
prevent the application from executing the action of the application responsive to a value provided with the first response. - The system of any preceding claim, comprising the data processing system to:determine the state of the application is a termination state;evaluate the state of the application to determine a resource utilized by the application is active; andgenerate the error code indicating that the application failed to deactivate the resource responsive to the termination state.
- The system of any preceding claim, comprising the data processing system to:determine the state of the application is a termination state;detect that a sensor utilized by the application is active; andgenerate the error code indicating that the application failed to deactivate the sensor responsive to the termination state.
- The system of any preceding claim, comprising the data processing system to:
generate the first response based on a model trained with historical logs comprising responses detected by microphones of computing devices. - The system of any preceding claim, comprising the data processing system to:select, based on a metric associated with a model trained with historical logs, one of the model or a predetermined response repository for generation of the first query; andgenerate, based on the selection, the first response via the one of the model or the predetermined response repository.
- The system of any preceding claim, comprising the data processing system to:establish, responsive to the first response, a telecommunication channel between a virtual client device and the application; andprovide, via the virtual client device and through the telecommunication channel, a second response to the application.
- The system of any preceding claim, comprising the data processing system to:establish, responsive to the first response, a telecommunication channel between a device associated with the application developer and a virtual client device; andprovide, via the virtual client device and through the telecommunication channel, a second response to the device associated with the application developer.
- The system of any preceding claim, comprising the data processing system to:establish, responsive to the first response, a telecommunication channel between a device associated with the application developer and a virtual client device;detect termination of the telecommunication channel;identify, responsive to termination of the telecommunication channel, a state of a microphone of the virtual client device; andset the error code based on the state of the microphone of the virtual client device being active.
- The system of any preceding claim, comprising the data processing system to:generate a second response based on a semantic analysis of the first response, the first query, and the trigger phrase; andprovide the second response for processing by the application executed by the data processing system.
- The system of any preceding claim, comprising the data processing system to:identify a virtual client account; andprovide information associated with the virtual client account to the application to process the action of the application responsive to the first response.
- The system of any preceding claim, comprising the data processing system to:identify a virtual client account;provide information associated with the virtual client account to the application to process the action responsive to the first response; andblock, responsive to detection of the virtual client account, execution of the action of the application by the application.
- A method of validating actions in a digital assistant-based application, comprising:identifying, by a data processing system (102) comprising at least one processor, an
application provided by an application developer device of an application developer, the application having a conversational interface;selecting, by the data processing system based on the application, an action from an action repository of the data processing system;generating, via a natural language processor of the data processing system and based on the action and, a trigger phrase for input into the application, wherein the trigger phrase simulates a voice-based input that would be detected by a sensor of a computing device (140) in communication with the data processing system;executing, by the data processing system, the application to process the trigger phrase via the conversational interface;identifying, by the data processing system, an action of the application responsive to the trigger phrase;identifying, by the data processing system, a parameter used by the application to execute the action of the application;generating, by the data processing system, based on the parameter and via execution of the conversational interface of the application, a first query responsive to the trigger phrase, wherein the first query comprises a request for a value for the parameter;generating, by the natural language processor of the data processing system, a first response to the first query for input into the application, wherein the first response includes a simulated value for the parameter;determining, by the data processing system based on execution of the application to process the first response, a state of the application;evaluating, by the data processing system, the state of the application to determine an error code; andproviding, by the data processing system to the application developer device, a notification based on the error code.
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
EP23197070.8A EP4270172A3 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
Applications Claiming Priority (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
PCT/US2019/035616 WO2020246975A1 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
Related Child Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP23197070.8A Division EP4270172A3 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
EP23197070.8A Division-Into EP4270172A3 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
Publications (2)
Publication Number | Publication Date |
---|---|
EP3776175A1 EP3776175A1 (en) | 2021-02-17 |
EP3776175B1 true EP3776175B1 (en) | 2023-10-18 |
Family
ID=67297246
Family Applications (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP23197070.8A Pending EP4270172A3 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
EP19740095.5A Active EP3776175B1 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
Family Applications Before (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
EP23197070.8A Pending EP4270172A3 (en) | 2019-06-05 | 2019-06-05 | Action validation for digital assistant-based applications |
Country Status (4)
Country | Link |
---|---|
US (1) | US11461221B2 (en) |
EP (2) | EP4270172A3 (en) |
CN (1) | CN112334871A (en) |
WO (1) | WO2020246975A1 (en) |
Families Citing this family (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20200388280A1 (en) | 2019-06-05 | 2020-12-10 | Google Llc | Action validation for digital assistant-based applications |
US11256870B2 (en) * | 2019-09-25 | 2022-02-22 | Rovi Guides, Inc. | Systems and methods for inserting dialogue into a query response |
SE2050465A1 (en) * | 2020-04-23 | 2021-10-24 | Checkin Com Group Ab | Method and system for generating a data collection process in a user device |
US20220058042A1 (en) * | 2020-08-24 | 2022-02-24 | Juniper Networks, Inc. | Intent-based telemetry collection service |
US20220075834A1 (en) * | 2020-09-10 | 2022-03-10 | Taboola.Com Ltd. | Semantic meaning association to components of digital content |
US20220245489A1 (en) * | 2021-01-29 | 2022-08-04 | Salesforce.Com, Inc. | Automatic intent generation within a virtual agent platform |
US11579841B1 (en) * | 2021-12-10 | 2023-02-14 | Amazon Technologies, Inc. | Task resumption in a natural understanding system |
US20230281389A1 (en) | 2022-03-02 | 2023-09-07 | Microsoft Technology Licensing, Llc | Topic suggestion in messaging systems |
US11838682B2 (en) * | 2022-03-15 | 2023-12-05 | My Job Matcher, Inc. | Apparatus and method for generating a video record using audio |
US11558580B1 (en) * | 2022-03-15 | 2023-01-17 | My Job Matcher, Inc. | Apparatus and method for generating a video record using audio |
Family Cites Families (33)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US8260617B2 (en) * | 2005-04-18 | 2012-09-04 | Nuance Communications, Inc. | Automating input when testing voice-enabled applications |
US20070168591A1 (en) * | 2005-12-08 | 2007-07-19 | Inter-Tel, Inc. | System and method for validating codec software |
US8768707B2 (en) * | 2011-09-27 | 2014-07-01 | Sensory Incorporated | Background speech recognition assistant using speaker verification |
US10389876B2 (en) * | 2014-02-28 | 2019-08-20 | Ultratec, Inc. | Semiautomated relay method and apparatus |
US9959129B2 (en) * | 2015-01-09 | 2018-05-01 | Microsoft Technology Licensing, Llc | Headless task completion within digital personal assistants |
EP3251116A4 (en) * | 2015-01-30 | 2018-07-25 | DTS, Inc. | System and method for capturing, encoding, distributing, and decoding immersive audio |
US9886953B2 (en) * | 2015-03-08 | 2018-02-06 | Apple Inc. | Virtual assistant activation |
US10200824B2 (en) * | 2015-05-27 | 2019-02-05 | Apple Inc. | Systems and methods for proactively identifying and surfacing relevant content on a touch-sensitive device |
US10049670B2 (en) * | 2016-06-06 | 2018-08-14 | Google Llc | Providing voice action discoverability example for trigger term |
US20180052664A1 (en) * | 2016-08-16 | 2018-02-22 | Rulai, Inc. | Method and system for developing, training, and deploying effective intelligent virtual agent |
US10311856B2 (en) * | 2016-10-03 | 2019-06-04 | Google Llc | Synthesized voice selection for computational agents |
US11024309B2 (en) * | 2016-10-17 | 2021-06-01 | Harman International Industries, Incorporated | Portable audio device with voice capabilities |
US10891152B2 (en) * | 2016-11-23 | 2021-01-12 | Amazon Technologies, Inc. | Back-end task fulfillment for dialog-driven applications |
US10957326B2 (en) * | 2016-12-30 | 2021-03-23 | Google Llc | Device identifier dependent operation processing of packet based data communication |
US10224031B2 (en) * | 2016-12-30 | 2019-03-05 | Google Llc | Generating and transmitting invocation request to appropriate third-party agent |
US10297255B2 (en) * | 2017-01-23 | 2019-05-21 | Bank Of America Corporation | Data processing system with machine learning engine to provide automated collaboration assistance functions |
US10467509B2 (en) * | 2017-02-14 | 2019-11-05 | Microsoft Technology Licensing, Llc | Computationally-efficient human-identifying smart assistant computer |
US11947978B2 (en) * | 2017-02-23 | 2024-04-02 | Ab Initio Technology Llc | Dynamic execution of parameterized applications for the processing of keyed network data streams |
US11301477B2 (en) * | 2017-05-12 | 2022-04-12 | Apple Inc. | Feedback analysis of a digital assistant |
US11056105B2 (en) * | 2017-05-18 | 2021-07-06 | Aiqudo, Inc | Talk back from actions in applications |
US10652170B2 (en) * | 2017-06-09 | 2020-05-12 | Google Llc | Modification of audio-based computer program output |
US11269938B2 (en) * | 2017-06-21 | 2022-03-08 | Salesforce.Com, Inc. | Database systems and methods for conversational database interaction |
US10665234B2 (en) * | 2017-10-18 | 2020-05-26 | Motorola Mobility Llc | Detecting audio trigger phrases for a voice recognition session |
JP7063990B2 (en) * | 2017-10-21 | 2022-05-09 | アップル インコーポレイテッド | Personal domain for virtual assistant system on shared device |
US10853490B2 (en) * | 2017-10-26 | 2020-12-01 | Futurewei Technologies, Inc. | Method and apparatus for managing hardware resource access in an electronic device |
US20190141031A1 (en) * | 2017-11-09 | 2019-05-09 | International Business Machines Corporation | Authenticating a user to a cloud service automatically through a virtual assistant |
US10818288B2 (en) * | 2018-03-26 | 2020-10-27 | Apple Inc. | Natural assistant interaction |
US10884901B2 (en) * | 2018-08-24 | 2021-01-05 | Microsoft Technology Licensing, Llc | System and method for configurable and proactive application diagnostics and recovery |
US11017771B2 (en) * | 2019-01-18 | 2021-05-25 | Adobe Inc. | Voice command matching during testing of voice-assisted application prototypes for languages with non-phonetic alphabets |
US10964322B2 (en) * | 2019-01-23 | 2021-03-30 | Adobe Inc. | Voice interaction tool for voice-assisted application prototypes |
CA3129378A1 (en) * | 2019-02-07 | 2020-08-13 | Thomas Stachura | Privacy device for smart speakers |
US20200304636A1 (en) * | 2019-03-19 | 2020-09-24 | International Business Machines Corporation | Proxy Virtual Agent for Issue Resolution |
US11080490B2 (en) | 2019-03-28 | 2021-08-03 | Servicenow, Inc. | Pre-training of virtual chat interfaces |
-
2019
- 2019-06-05 EP EP23197070.8A patent/EP4270172A3/en active Pending
- 2019-06-05 US US16/482,187 patent/US11461221B2/en active Active
- 2019-06-05 EP EP19740095.5A patent/EP3776175B1/en active Active
- 2019-06-05 CN CN201980002145.6A patent/CN112334871A/en active Pending
- 2019-06-05 WO PCT/US2019/035616 patent/WO2020246975A1/en unknown
Also Published As
Publication number | Publication date |
---|---|
US11461221B2 (en) | 2022-10-04 |
WO2020246975A1 (en) | 2020-12-10 |
US20210294724A1 (en) | 2021-09-23 |
EP4270172A2 (en) | 2023-11-01 |
EP4270172A3 (en) | 2024-01-10 |
EP3776175A1 (en) | 2021-02-17 |
CN112334871A (en) | 2021-02-05 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
EP3776175B1 (en) | Action validation for digital assistant-based applications | |
JP2021089758A (en) | Feedback controller for data transmission | |
US11893993B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11514896B2 (en) | Interfacing with applications via dynamically updating natural language processing | |
US11935536B2 (en) | Action validation for digital assistant-based applications | |
US20230205495A1 (en) | Generating and Updating Voice-Based Software Applications Using Application Templates | |
US11556442B2 (en) | Immersive web-based simulator for digital assistant-based applications | |
US11556454B2 (en) | Immersive web-based simulator for digital assistant-based applications | |
US20220308987A1 (en) | Debugging applications for delivery via an application delivery server | |
EP3729259B1 (en) | Assessing applications for delivery via an application delivery server |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: UNKNOWN |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE INTERNATIONAL PUBLICATION HAS BEEN MADE |
|
PUAI | Public reference made under article 153(3) epc to a published international application that has entered the european phase |
Free format text: ORIGINAL CODE: 0009012 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: REQUEST FOR EXAMINATION WAS MADE |
|
17P | Request for examination filed |
Effective date: 20191030 |
|
AK | Designated contracting states |
Kind code of ref document: A1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
AX | Request for extension of the european patent |
Extension state: BA ME |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: EXAMINATION IS IN PROGRESS |
|
17Q | First examination report despatched |
Effective date: 20220209 |
|
DAV | Request for validation of the european patent (deleted) | ||
DAX | Request for extension of the european patent (deleted) | ||
REG | Reference to a national code |
Ref document number: 602019039602Country of ref document: DERef country code: DERef legal event code: R079Free format text: PREVIOUS MAIN CLASS: G06F0003160000Ipc: G06F0011360000 |
|
GRAP | Despatch of communication of intention to grant a patent |
Free format text: ORIGINAL CODE: EPIDOSNIGR1 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: GRANT OF PATENT IS INTENDED |
|
RIC1 | Information provided on ipc code assigned before grant |
Ipc: G06F 3/16 20060101ALI20230418BHEPIpc: G06F 11/36 20060101AFI20230418BHEP |
|
INTG | Intention to grant announced |
Effective date: 20230503 |
|
RIN1 | Information on inventor provided before grant (corrected) |
Inventor name: RAO, NIKHILInventor name: MUPPALLA, DHARMA |
|
P01 | Opt-out of the competence of the unified patent court (upc) registered |
Effective date: 20230527 |
|
GRAS | Grant fee paid |
Free format text: ORIGINAL CODE: EPIDOSNIGR3 |
|
GRAA | (expected) grant |
Free format text: ORIGINAL CODE: 0009210 |
|
STAA | Information on the status of an ep patent application or granted ep patent |
Free format text: STATUS: THE PATENT HAS BEEN GRANTED |
|
AK | Designated contracting states |
Kind code of ref document: B1Designated state(s): AL AT BE BG CH CY CZ DE DK EE ES FI FR GB GR HR HU IE IS IT LI LT LU LV MC MK MT NL NO PL PT RO RS SE SI SK SM TR |
|
REG | Reference to a national code |
Ref country code: GBRef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: CHRef legal event code: EP |
|
REG | Reference to a national code |
Ref country code: DERef legal event code: R096Ref document number: 602019039602Country of ref document: DE |
|
REG | Reference to a national code |
Ref country code: IERef legal event code: FG4D |
|
REG | Reference to a national code |
Ref country code: LTRef legal event code: MG9D |
|
REG | Reference to a national code |
Ref country code: NLRef legal event code: MPEffective date: 20231018 |
|
REG | Reference to a national code |
Ref country code: ATRef legal event code: MK05Ref document number: 1623060Country of ref document: ATKind code of ref document: TEffective date: 20231018 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: NLFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240119 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240218 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018 |
|
PG25 | Lapsed in a contracting state [announced via postgrant information from national office to epo] |
Ref country code: LTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018Ref country code: ISFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240218Ref country code: GRFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240119Ref country code: ESFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018Ref country code: BGFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240118Ref country code: ATFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20231018Ref country code: PTFree format text: LAPSE BECAUSE OF FAILURE TO SUBMIT A TRANSLATION OF THE DESCRIPTION OR TO PAY THE FEE WITHIN THE PRESCRIBED TIME-LIMITEffective date: 20240219 |