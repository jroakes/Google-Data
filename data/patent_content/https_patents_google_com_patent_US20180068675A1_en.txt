US20180068675A1 - Enhanced multi-channel acoustic models - Google Patents
Enhanced multi-channel acoustic models Download PDFInfo
- Publication number
- US20180068675A1 US20180068675A1 US15/350,293 US201615350293A US2018068675A1 US 20180068675 A1 US20180068675 A1 US 20180068675A1 US 201615350293 A US201615350293 A US 201615350293A US 2018068675 A1 US2018068675 A1 US 2018068675A1
- Authority
- US
- United States
- Prior art keywords
- data
- spatial
- neural network
- filtered output
- output
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Granted
Links
Images
Classifications
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L25/00—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00
- G10L25/27—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique
- G10L25/30—Speech or voice analysis techniques not restricted to a single one of groups G10L15/00 - G10L21/00 characterised by the analysis technique using neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/08—Speech classification or search
- G10L15/16—Speech classification or search using artificial neural networks
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L15/00—Speech recognition
- G10L15/20—Speech recognition techniques specially adapted for robustness in adverse environments, e.g. in noise, of stress induced speech
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L19/00—Speech or audio signals analysis-synthesis techniques for redundancy reduction, e.g. in vocoders; Coding or decoding of speech or audio signals, using source filter models or psychoacoustic analysis
- G10L19/008—Multichannel audio signal coding or decoding using interchannel correlation to reduce redundancy, e.g. joint-stereo, intensity-coding or matrixing
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0272—Voice signal separating
- G10L21/028—Voice signal separating using properties of sound source
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/038—Speech enhancement, e.g. noise reduction or echo cancellation using band spreading techniques
- G10L21/0388—Details of processing therefor
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
- G10L2021/02087—Noise filtering the noise being separate speech, e.g. cocktail party
-
- G—PHYSICS
- G10—MUSICAL INSTRUMENTS; ACOUSTICS
- G10L—SPEECH ANALYSIS OR SYNTHESIS; SPEECH RECOGNITION; SPEECH OR VOICE PROCESSING; SPEECH OR AUDIO CODING OR DECODING
- G10L21/00—Processing of the speech or voice signal to produce another audible or non-audible signal, e.g. visual or tactile, in order to modify its quality or its intelligibility
- G10L21/02—Speech enhancement, e.g. noise reduction or echo cancellation
- G10L21/0208—Noise filtering
- G10L21/0216—Noise filtering characterised by the method used for estimating noise
- G10L2021/02161—Number of inputs available containing the signal or the noise to be suppressed
- G10L2021/02166—Microphone arrays; Beamforming
Definitions
- the present specification is related to acoustic models, including acoustic models that process audio data from multiple microphones.
- speech recognition systems can use a neural network model that performs speech enhancement and acoustic modeling. Some systems process audio data from multiple microphones using a neural network.
- Multichannel neural network models may be trained to perform speech enhancement jointly with acoustic modeling. These models can process raw waveform input signals that are associated with multiple look directions. Although multi-channel models can provide improved accuracy compared to a single-channel model, use of current multi-channel models comes at a large cost in computational complexity.
- the computational complexity is related to the overall quantity of mathematical operations (e.g., multiplications used to carry out convolutions) that are used to perform time-domain signal processing.
- This specification describes systems and methods for reducing the computational complexity of multi-channel acoustic models while maintaining appropriate accuracy.
- Computational complexity can be reduced by incorporating one or more optimizations that include minimizing the number of look directions, modifying certain parameters used in convolution operations (e.g., using an increased stride value) and utilizing frequency domain signal processing rather than time domain processes. For example, operations that typically require convolution in the time domain can be replaced with operations that perform element-wise multiplication (e.g., compute a dot product) of frequency domain data, which significantly reduces the amount of computation required.
- Application of the foregoing optimizations to current multi-channel models may reduce computational complexity of the models with little or no loss in accuracy.
- different parameters or filters can be learned compared to the model that uses time-domain convolution processing. For example, filters can be learned in the frequency domain during training of the model.
- one innovative aspect of the subject matter of this specification includes a computer-implemented method comprising, receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time, and generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data.
- the method also comprises, generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output, and processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices.
- a system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions.
- One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Implementations may include one or more of the following features.
- the method can further include causing a device to perform an action using the predicted sub-word units in response to processing, by the additional layers of the neural network, the spectral filtered output.
- generating, by the spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output comprises: generating filtered data by using an element-wise multiplication of (i) the frequency-domain data representing the spatial filtered output with (ii) frequency-domain representations of multiple filters.
- generating, by the spectral filtering layer of the neural network, the spectral filtered output using the spatial filtered output comprises: performing a complex linear projection (CLP) of the filtered data in the frequency domain to generate a CLP output; and applying an absolute-value function and a log compression to the CLP output.
- CLP complex linear projection
- generating, by the spectral filtering layer of the neural network, the spectral filtered output using the spatial filtered output comprises: performing a linear projection of energy using the filtered data.
- performing the linear projection of energy using the filtered data comprises: determining an energy value for each of multiple time-frequency bins; applying a power compression to the energy values to generate compressed energy values; and linearly projecting the compressed energy values using filters with learned filter parameters.
- generating, by the spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data comprises: performing element-wise multiplications of frequency-domain representations of the first data and the second data with frequency domain representations of filters learned through training of the neural network.
- generating, by the spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data comprises: performing a fast Fourier transform on the first data to obtain a first frequency-domain representation of the first data; performing a fast Fourier transform on the second data to obtain a second frequency-domain representation of the second data; performing an element-wise multiplication of the first frequency-domain representation with a frequency-domain representation of a first set of filters; and performing an element-wise multiplication of the second frequency-domain representation with a frequency-domain representation of a second set of filters.
- generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: filtering the first data and the second data using time convolution filters; and summing the outputs of the time convolution filters.
- the time convolution filters are finite impulse response filters, each finite response filter being trained with a separate set of parameters.
- the time convolution filters comprise multiple filter pairs, each filter pair comprising a first filter and a second filter; wherein filtering the first data and the second data comprises, for each of the multiple filter pairs: convolving the first data with the first filter of the filter pair to generate a first time convolution output for the filter pair; and convolving the second data with the second filter of the filter pair to generate a first time convolution output for the filter pair; wherein summing the outputs of the time convolution filters comprises generating, for each pair of filters, a sum of the first time convolution output for the filter pair and the second time convolution output for the filter pair.
- the time convolution filters comprise a set of filters that have been trained jointly, wherein training the filters causes pairs of the filters to pass audio originating from different spatial directions.
- the spatial filtering layer of the neural network performs both spatial filtering and spectral filtering.
- generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises filtering the first data and the second data using multiple finite impulse response filters.
- generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: generating a first quantity of first samples from the first data; generating a second quantity of second samples from the second data, the second quantity and the first quantity being the same quantity; striding by a number of samples greater than one in time across the first samples to generate first spatial output; and striding by a number of samples greater than one in time across the second samples to generate second spatial output.
- striding by a number of samples greater than one in time across the first samples to generate the first spatial output comprises striding by at least four samples in time across the first samples to generate first spatial output; wherein striding by a number of samples greater than one in time across the second samples to generate the second spatial output comprises striding by at least four samples in time across the second samples to generate the second spatial output.
- generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: summing first values in the first spatial output with corresponding values in the second spatial output to generate an output feature map, wherein the spatial filtered output comprises the output feature map.
- processing, by the one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal comprises: processing, by a long short-term memory deep neural network included of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- another innovative aspect of the subject matter of this specification includes one or more non-transitory computer-readable media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations comprising: receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time.
- the performed operations comprise, generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data, and generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output.
- the performed operations also comprise, processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- another innovative aspect of the subject matter of this specification includes a system comprising, one or more computers; and one or more computer-readable storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform operations comprising: receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time.
- the performed operations further comprise, generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data, and generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output.
- the performed operations also comprise, processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- a speech recognition system that uses a neural network as described below may have a reduced word error rate.
- a speech recognition system may use multi-task learning during a neural network learning process to enhance a received signal, suppress noise, improve the learning process, or a combination of two or more of these.
- a speech recognition system may use a spatial filtering layer and a separate spectral filtering layer to design the spatial filtering layer to be spatially selective, while implementing a frequency decomposition shared across all spectral filters in the spectral filtering layer.
- a spectral filtering layer can learn a decomposition with better frequency resolution than a spatial filtering layer, may be incapable of doing any spatial filtering, or both.
- a speech recognition system may use multi-task learning to de-noise and de-reverberate features from an audio signal while classifying the features.
- FIG. 1 is an example of a multichannel speech recognition system that includes a multichannel spatial filtering convolutional layer and a separate spectral filtering convolutional layer as part of a single neural network.
- FIG. 2 is a flow diagram of a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time.
- FIG. 3 is a flow diagram of a process for training a neural network that includes a spatial filtering convolutional layer and a spectral filtering convolutional layer.
- FIG. 4 is a diagram that illustrates an example of a system for speech recognition using neural networks.
- FIGS. 5 and 6 are diagrams showing examples of multichannel speech recognition systems that operate with reduced computational demands while maintaining appropriate accuracy.
- FIG. 7 is a flow diagram of a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time.
- FIG. 8 is a block diagram of a computing system that can be used in connection with computer-implemented methods described in this document.
- a speech recognition system includes a neural network, e.g., a convolutional long short-term memory deep neural network (CLDNN), with a spatial filtering convolutional layer and a spectral filtering convolutional layer to process audio signals, e.g., raw audio signals.
- the neural network may include the two convolutional layers to process multichannel input, e.g., multiple audio signals from different microphones when each audio signal represents sound from the same period of time.
- the speech recognition system may use the multichannel input to enhance a representation of words spoken by a user, and encoded in the audio signals, compared to other sound, e.g., noise, encoded in an audio signal, and to reduce a word error rate.
- the neural network may use multi-task learning during a learning process.
- the neural network may include two different architectures each with one or more deep neural network layers after a long short-term memory layer and the two convolutional layers to process “clean” and “noisy” audio signals that encode the same words or sub-word units.
- the neural network may include a particular layer or group of layers in both architectures such that the particular layers are trained during processing of both the “clean” and the “noisy” audio signals while other layers are trained during processing of only a single type of audio signal, either clean or noisy but not both.
- the neural network processes the “clean” audio signal using the deep neural network layers and the “noisy” audio signal using other neural network layers, e.g., two long short-term memory layers and a different deep neural network layer, to determine two output values, one for each of the audio signals.
- the neural network determines a difference between the errors of the two output values, or between the gradients for the two output values, and uses the difference to determine a final gradient for a training process.
- the neural network uses the final gradient during backward propagation.
- FIG. 1 is an example of a multichannel speech recognition system 100 that includes a multichannel spatial filtering convolutional layer 102 and a separate spectral filtering convolutional layer 104 as part of a single neural network.
- the multichannel spatial filtering convolutional layer 102 generates a spatial filtered output from multichannel audio input, e.g., two or more audio signals when each audio signal is created by a different microphone for the same period of time.
- the multichannel spatial filtering convolutional layer 102 may include short-duration multichannel time convolution filters which map multichannel inputs down to a single channel.
- the multichannel spatial filtering convolutional layer 102 learns several filters, each of which are used to “look” in different directions in space for a location of a speaker of a word or sub-word unit encoded in the audio signals.
- the spectral filtering convolutional layer 104 receives the spatial filtered output, e.g., the single channel output from each of the filters in the spatial filtering convolutional layer 102 .
- the spectral filtering convolutional layer 104 may have a longer-duration time convolution, compared to the spatial filtering convolutional layer 102 , and may perform finer frequency resolution spectral decomposition, e.g., analogous to a time-domain auditory filterbank.
- the spectral filtering convolutional layer 104 applies a pooling function and a rectified non-linearity function, using layer 106 , to the spatial filtered output to generate a spectral filtered output 108 .
- the spectral filtering convolutional layer 104 provides the spectral filtered output 108 to a frequency convolutional layer 110 .
- the frequency convolutional layer 110 processes the spectral filtered output 108 and provides a frequency convoluted output to another layer in the multichannel speech recognition system 100 , e.g., a long short term memory (LSTM) layer 112 a.
- LSTM long short term memory
- the multichannel spatial filtering convolutional layer 102 may receive two channels of audio signals, x 1 [t] and x 2 [t].
- the multichannel spatial filtering convolutional layer 102 receives each of the channels from a respective microphone c at time t.
- the multichannel spatial filtering convolutional layer 102 receives more than two channels.
- filters p ⁇ Ph c p [n] is the nth tap of the filter p associated with microphone c.
- the output y p [t] of filter p ⁇ P is defined by Equation (1) below for C microphones when N is the order, or size, of the finite impulse response (FIR) filters.
- the multichannel spatial filtering convolutional layer 102 may model Equation (1) and perform a multichannel time-convolution with a FIR spatial filterbank. For instance, the multichannel speech recognition system 100 may select a window of a raw audio signal of length M samples for each channel C, denoted as ⁇ x 1 [t], x 2 [t], . . . , x C [t] ⁇ for t ⁇ 1, . . . , M.
- the multichannel spatial filtering convolutional layer 102 has two or more, e.g., ten, spatial filters. In some examples, the multichannel spatial filtering convolutional layer 102 has more than ten spatial filters.
- the multichannel spatial filtering convolutional layer 102 strides by one in time across M samples and performs a “full” convolution, such that the output, e.g., each feature maps, for each filter p ⁇ P remains length M, e.g., the length of each filter map for the multichannel spatial filtering convolutional layer 102 is the same as the length of the input.
- the multichannel spatial filtering convolutional layer 102 sums the outputs from each channel c ⁇ C to create an output feature map of size y p [t] ⁇ R M ⁇ 1 ⁇ P .
- Dimension M corresponds to time, e.g., sample index
- dimension 1 corresponds to frequency
- dimension P corresponds to look direction, e.g., feature map index.
- the spectral filtering convolutional layer 104 includes longer-duration filters than the multichannel spatial filtering convolutional layer 102 .
- the filters in the spectral filtering convolutional layer 104 are single-channel filters.
- the spectral filtering convolutional layer 104 receives the P feature maps from the multichannel spatial filtering convolutional layer 102 and performs time convolution on each of the P feature maps.
- the spectral filtering convolutional layer 104 may use the same time convolution across all P feature maps.
- the spectral filtering convolutional layer 104 includes filters g ⁇ R L ⁇ F ⁇ 1 , where 1 indicates sharing across the P input feature maps, e.g., sharing of the same time convolution.
- the multichannel speech recognition system 100 pools the filterbank output w[t] in time, e.g., to discard short-time information, over the entire time length of the output signal w[t], to produce an output with dimensions 1 ⁇ F ⁇ P.
- the multichannel speech recognition system 100 applies a rectified non-linearity to the pooled output, and may apply a stabilized logarithm compression, to produce a frame-level feature vector z[t] at time t, e.g., z[t] ⁇ R 1 ⁇ F ⁇ P .
- the spectral filtering convolutional layer 104 includes a pooling and non-linearity layer 106 that pools the output, e.g., to discard short-time phase information, and applies the rectified non-linearity.
- the multichannel speech recognition system 100 may use a small additive offset to truncate the output range and avoid numerical problems with very small inputs. For instance, the multichannel speech recognition system 100 may apply log( ⁇ +0.01) to the pooled output when producing the frame-level feature vector z[t].
- the multichannel speech recognition system 100 may shift a window along the raw audio signal, e.g., by a small frame hop such as 10 milliseconds, and repeat the time convolution to produce a set of time-frequency-direction frames, e.g., at 10 millisecond intervals.
- the multichannel speech recognition system 100 may process another audio signal using the multichannel spatial filtering convolutional layer 102 and the spectral filtering convolutional layer 104 .
- the output out of the spectral filtering convolutional layer 104 produces a frame-level feature, denoted as z[t] ⁇ R 1 ⁇ F ⁇ P .
- the output z[t] of the spectral filtering convolutional layer 104 e.g., the combined output of the multichannel spatial filtering convolutional layer 104 , including the layer 106 , and the spectral filtering convolutional layer 102 , is the Cartesian product of all spatial and spectral filters.
- the multichannel speech recognition system 100 may provide the output z[t] to a convolutional long short-term memory deep neural network (CLDNN) block 116 in the CLDNN.
- the CLDNN block 116 includes a frequency convolutional layer 110 that applies a frequency convolution to z[t].
- the frequency convolutional layer 110 may have two-hundred fifty-six filters of size 1 ⁇ 8 ⁇ 1 in time-frequency-direction.
- the frequency convolutional layer 110 may use pooling, e.g., non-overlapping max pooling, along the frequency axis.
- the frequency convolutional layer may use a pooling size of three.
- the multichannel speech recognition system 100 may provide the output of the frequency convolution layer 110 to a linear low-rank projection layer (not shown) to reduce dimensionality.
- the multichannel speech recognition system 100 may provide the output of the linear low-rank projection layer, or the output of the frequency convolution layer 110 , to three long-short term memory (LSTM) layers 112 a - c.
- LSTM long-short term memory
- Each of the three LSTM layers 112 a - c may have eight-hundred and thirty-two cells and a five-hundred and twelve unit projection layer.
- the multichannel speech recognition system 100 trains the multichannel spatial filtering convolutional layer 102 and the spectral filtering convolutional layer 104 jointly with the rest of the CLDNN, e.g., the with layer 110 and layers 112 a - d in the CLDNN block 116 .
- the multichannel speech recognition system 100 may unroll the raw audio signal CLDNN for twenty time steps for training with truncated backpropagation through time.
- the multichannel speech recognition system 100 may delay the output state label by five frames, e.g., to use information about future frames to improve prediction of the current frame.
- each of the three LSTM layers 112 a - c may include information about the five most recently processed frames when processing a current frame.
- the multichannel speech recognition system 100 may have two outputs during a training process.
- the first output may predict context-dependent states, e.g., from a noisy audio signal
- the second output may predict clean log-mel features, e.g., from a clean audio signal that encodes the same words or sub-word units as the noisy audio signal.
- the multichannel speech recognition system 100 may determine gradients from the layers used to generate each of the two outputs during a backward propagation process.
- the multichannel speech recognition system 100 may combine the multiple gradients using weights.
- the multichannel speech recognition system 100 may use a multi-task learning (MTL) process during the training to generate the two outputs.
- MTL multi-task learning
- the multichannel speech recognition system 100 may use the output that predicts the clean log-mel features during training, and not during run-time, to regularize network parameters.
- the multichannel speech recognition system 100 may include one or more denoising layers, e.g., layers 112 b - d shown in FIG. 1 , and an MTL module, e.g., that includes two deep neural network (DNN) layers 114 a - b.
- the MTL module includes a linear low-rank layer after the two DNN layers 114 a - b to predict clean log-mel features.
- the multichannel speech recognition system 100 does not predict the clean audio signal, e.g., the words or sub-word units encoded in the clean audio signal, and only predicts log-mel features for the clean audio signal.
- the multichannel speech recognition system 100 uses the denoising layers to process noisy audio signals and the MTL module to process clean audio signals. When processing a noisy audio signal, the multichannel speech recognition system 100 uses the denoising layers and does not use the MTL module. When processing a clean audio signal, the multichannel speech recognition system 100 uses the MTL module and does not use the denoising layers, or does not use at least one of the denoising layers depending on a location at which the MTL module is placed in the CLDNN.
- the multichannel speech recognition system 100 uses the first LSTM layer 112 a and the MTL module to process a clean audio signal and does not use the two LSTM layers 112 b - c or the DNN layer 112 d.
- the multichannel speech recognition system 100 uses the first two LSTM layers 112 a - b and the MTL module to process a clean audio signal and does not use the last LSTM layer 112 c or the DNN layer 112 d.
- the multichannel speech recognition system 100 back-propagates the gradients from the context-dependent states and MTL outputs by weighting the gradients by ⁇ and 1 ⁇ , respectively.
- the multichannel speech recognition system 100 may receive a first clean audio signal and a second noisy audio signal that is a “corrupted” version of the first clean audio signal, e.g., to which reverberation, noise, or both, have been added to the underlying clean speech features from the first clean audio signal.
- the multichannel speech recognition system 100 may minimize the squared error between the observed features that are corrupted by reverberation and noise, e.g., in the second noisy audio signal, and the underlying clean speech features, e.g., in the first clean audio signal. For instance, if v represents the observed reverberant and noisy speech feature vectors and w represents the underlying clean speech feature vectors, e.g., ⁇ t represents the clean features from the clean audio signal and w t represents the clean features from the noisy audio signal, the MTL objective function used to train this model may be defined by Equation (2) below.
- v t ) is the primary cross entropy task, e.g., the clean log-mel features determined using the multi-task module
- the second term ( ⁇ t ⁇ w t ) 2 is the secondary feature enhancement task, e.g., the context dependent states determined using the denoising layers
- ⁇ is the weight parameter which determines how much importance the secondary task should get.
- more weight is given to the first term (cross entropy) compared to the second term (secondary feature enhancement). For instance, a may be 0.9.
- the multichannel speech recognition system 100 learns filter parameters. For example, the multichannel speech recognition system 100 may learn filter parameters for the multichannel spatial filtering convolutional layer 102 . In some examples, training of the filter parameters for the multichannel spatial filtering convolutional layer 102 may allow the multichannel spatial filtering convolutional layer 102 to perform some spectral decomposition.
- the output of the multichannel spatial filtering convolutional layer 102 is not directly processed by a non-linear compression, e.g., a rectifier or a log function.
- a non-linear compression e.g., a rectifier or a log function.
- the output of the multichannel spatial filtering convolutional layer 102 may go through other processing to generate intermediate data that is processed by a non-linear compression.
- the output of the multichannel spatial filtering convolutional layer 102 is not pooled.
- the output of the multichannel spatial filtering convolutional layer 102 may go through other processing to generate intermediate data that is pooled.
- a spectral filtering convolutional layer in the neural network generates a spectral filtered output using the spatial filtered output ( 206 ).
- the spectral filtering convolutional layer may generate the spectral filtered output using a second time convolution with a second duration longer than a first duration of the first time convolution used by the spatial filtering convolutional layer.
- the spectral filtered convolutional layer may pool the spatial filtered output in time, e.g., using non-overlapping max pooling with a pooling size of three.
- the spectral filtered convolutional layer may apply a rectified non-linearity to the pooled output.
- One or more additional layers in the neural network process the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal ( 208 ). For instance, one or more long short-term memory layers, e.g., three long short-term memory layers, and a deep neural network layer may process the spectral filtered output.
- the deep neural network may generate a prediction about a sub-word unit encoded in both of the raw audio signals. In some implementations, the deep neural network may generate a prediction about a word encoded in both of the raw audio signals.
- the neural network causes a device to perform an action using the predicted sub-word units in response to processing, by the additional layers in the neural network, the spectral filtered output ( 210 ).
- the neural network provides the predicted words or sub-word units to an application that analyzes the words or sub-word units to determine whether the raw audio signals encoded a command, such as a command for an application or device to launch another application or perform a task associated with an application.
- the neural network may combine multiple sub-word units to generate words and provide the generated words, or data representing the words, to the application.
- the process 200 can include additional steps, fewer steps, or some of the steps can be divided into multiple steps.
- the neural network may perform steps 202 through 208 without performing step 210 .
- FIG. 3 is a flow diagram of a process 300 for training a neural network that includes a spatial filtering convolutional layer and a spectral filtering convolutional layer.
- the process 300 can be used by the multichannel speech recognition system 100 .
- a system predicts clean log-mel features by processing two clean audio signals for the same period of time, each encoding one or more sub-word units, using a spatial filtering convolutional layer, a spectral filtering convolutional layer, and a multi-task module each included in a neural network ( 302 ).
- a neural network may use the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module, e.g., one or more long short-term memory layers and a deep neural network layer, to predict the clean log-mel features.
- the neural network may receive the raw, clean audio signals and pass the raw, clean audio signals to the spatial filtering convolutional layer to generate spatial filtered output.
- the neural network may provide the spatial filtered output to the spectral filtering convolutional layer to generate spectral filtered output.
- the neural network may provide the spectral filtered output to the multi-task module to generate the clean log-mel features.
- the raw, clean audio signal does not include noise, e.g., background noise, or noise above a threshold level.
- the system may receive the two raw, clean audio signals from a single device, e.g., which generated the signals using two microphones, each of which generated one of the raw, clean audio signals.
- the system may retrieve the raw, clean audio signals from a memory when the two raw, clean audio signals were previously generated from two microphones to represent a stereo audio signal.
- the two raw, clean audio signals may be generated using any appropriate method to create stereo audio signals.
- a system predicts context dependent states by processing two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and one or more denoising layers ( 304 ).
- the neural network uses the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the denoising layers to predict the context dependent states.
- the neural network may receive a raw, noisy audio signal and pass the raw, noisy audio signal to the spatial filtering convolutional layer to generate spatial filtered output.
- the neural network may provide the spatial filtered output to the spectral filtering convolutional layer to generate spectral filtered output.
- the neural network may provide the spectral filtered output to the denoising layers, e.g., one or more deep neural network layers different than the deep neural network layer that processed the raw, clean audio signal.
- the denoising layers may generate a prediction of the context dependent states for the raw, noisy audio signal using the spectral filtered output.
- the system may generate the raw, noisy audio signal from the raw, clean audio signal by adding noise to the raw, clean audio signal, e.g., by adding noise above the threshold level to the raw, clean audio signal.
- a system determines a second gradient using a second accuracy of the context dependent states ( 308 ). For instance, the system compares the predicted context dependent states (determined using step 304 ) with expected context dependent states to determine the second accuracy. The system may use any appropriate method to determine the second gradient, the second accuracy, or both. In some examples, the system may select a gradient to minimize the error between the predicted context dependent states and the expected context dependent states.
- a system generates a final gradient by weighting the first gradient, weighting the second gradient, and combining the weighted first gradient and the weighted second gradient ( 310 ).
- the system may determine weights for each of the first gradient and the second gradient using an importance of the corresponding task. In some examples, the system may use Equation (2) above to weight the first gradient and the second gradient.
- a system backward propagates the final gradient to train the neural network ( 312 ). For instance, the system uses gradient descent with the final gradient to train the neural network.
- one or more servers may train the neural network. Once the neural network is trained, at least one of the servers may provide the neural network to a device, e.g., a user device, for use predicting words or sub-word units included in multiple raw audio signals.
- a device e.g., a user device
- a single device may train and use the neural network to predict the words or sub-word units.
- a first device may train the neural network and provide the neural network to a second, different device, for use.
- the techniques discussed with respect to FIGS. 1-3 can be embodied in methods that include the actions of receiving, by a neural network in a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, the first raw audio signal and the second raw audio signal for the same period of time, generating, by a spatial filtering convolutional layer in the neural network, a spatial filtered output the first data and the second data, generating, by a spectral filtering convolutional layer in the neural network, a spectral filtered output using the spatial filtered output, and processing, by one or more additional layers in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include generating a first quantity of first samples from the first data, generating a second quantity of second samples from the second data, the second quantity and the first quantity being the same quantity, striding by one in time across each of the first samples to generate first spatial output, and striding by one in time across each of the second samples to generate second spatial output.
- Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include summing first values in the first spatial output with corresponding values in the second spatial output to generate an output feature map.
- the spatial filtered output may be the output feature map.
- Pooling the spatial filtered output in time to generate the pooled output may include non-overlapping max pooling the spatial filtered output along the frequency axis. Pooling the spatial filtered output in time to generate the pooled output may include using a pooling size of three to generate the pooled output. Generating, by the spectral filtering convolutional layer in the neural network, the spectral filtered output may include generating the spectral filtered output by applying a rectified non-linearity to the pooled output.
- Processing, by the long short-term memory deep neural network included in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal may include processing, by a linear low-rank projection layer in the neural network, the spectral filtered output to generate a first intermediate output, and processing, by a long short-term memory layer in the long short-term memory deep neural network, the first intermediate output to generate a second intermediate output.
- Processing, by the long short-term memory deep neural network included in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal may include processing, by a deep neural network layer in the long short-term memory deep neural network, data from the second intermediate output to predict the sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- the method may include generating each of the noisy audio signals from a respective one of the clean audio signals by adding noise to the respective clean audio signal. Predicting the clean log-mel features by processing the two clean audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module may include generating, by the spatial filtering convolutional layer, a spatial filtered output.
- predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include generating, by the spatial filtering convolutional layer, a spatial filtered output.
- Predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include generating, by the spectral filtering convolutional layer, a spectral filtered output using the spatial filtered output.
- Predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include processing, by the denoising layers, the spectral filtered output to predict dependent states for the noisy audio signal.
- the method may include providing the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module to a device for predicting sub-word units encoded in both a first raw audio signal and a second raw audio signal for the same period of time.
- FIG. 4 is a diagram that illustrates an example of a system 400 for speech recognition using neural networks.
- the system 400 includes a client device 410 , a computing system 420 , and a network 430 .
- the computing system 420 provides information about an utterance and additional information to a neural network acoustic model 440 .
- the computing system 420 uses output from the neural network acoustic model 440 to identify a transcription for the utterance.
- the client device 410 can be, for example, a desktop computer, laptop computer, a tablet computer, a wearable computer, a cellular phone, a smart phone, a music player, an e-book reader, a navigation system, or any other appropriate computing device.
- the functions performed by the computing system 420 can be performed by individual computer systems or can be distributed across multiple computer systems.
- the network 430 can be wired or wireless or a combination of both and can include the Internet.
- a user 402 of the client device 410 speaks an utterance 403 , and the client device 410 records audio that includes the speech.
- the client device 410 obtains multiple channels of audio data for the utterance 403 , for example, recorded data from two or more microphones that are located at different spatial positions with respect to the user 403 .
- the client device 410 transmits the multi-channel audio data 412 to the computing system 420 over the network 430 .
- the multi-channel audio data 412 can include audio waveform data, which may or may not be compressed, for each of multiple audio channels.
- the computing system 420 receives the multichannel audio data 412 and obtains information corresponding to different time periods or windows of the data. For example, the computing system 420 may obtain audio data 422 for a first channel and audio data 426 for a second channel. For each channel, the computing system 420 may divide the data into segments that represent acoustic properties of, for example, a 10 millisecond (ms), 25 ms, or 50 ms portion of the audio signal 412 .
- ms millisecond
- the audio data 422 , 426 is frequency-domain audio data.
- the computing system 420 may perform a Fourier transform on segments of the audio received from the client device 410 , so that the inputs to the neural network acoustic model 440 are frequency-domain representations, e.g., vectors representing frequency-domain characteristics, of portions of the audio that includes the utterance 403 .
- the computing system 420 inputs the audio data 422 , 426 to the neural network acoustic model 440 .
- the neural network acoustic model 440 can be a neural network that has been trained to act as an acoustic model.
- the neural network acoustic model 440 indicates likelihoods that feature vectors correspond to different speech units when the feature vectors and certain types of additional information are provided.
- the neural network acoustic model 440 can represent any of the neural network models or systems 100 , 500 , 600 discussed herein.
- the neural network acoustic model 440 produces outputs 442 in response to the audio data 422 , 426 , and the computing system 420 uses the outputs 442 to identify a transcription 460 for the audio signal 412 .
- the outputs 442 may indicate likelihoods that specific sub-word units, e.g., phones or HMM states of phones, which may be context-dependent or context-independent, describe the audio data in a portion of the utterance.
- the computing system 420 may provide the outputs 442 to, for example, weighted finite state transducers that approximate a hidden Markov model (HMM), which may include information about a lexicon indicating the phonetic units of words, a grammar, and a language model that indicates likely sequences of words.
- HMM hidden Markov model
- the output of the HMM can be a word lattice from which the computing system 420 derives a transcription 460 .
- the computing system 420 then provides the transcription 460 to the client device 410 over the network 430 .
- the client device 410 can then perform an action in response to receiving the transcription 460 .
- the client device 410 may display the transcription 460 , include the text of the transcription 460 in a message or input field, obtain search results using the transcription 460 as a query, perform a voice command indicated by the transcription 460 , open an application identified using the transcription 460 , provide the transcription 460 to an application or another device, or otherwise act in response to receiving the transcription 460 .
- FIG. 4 shows the speech recognition process being performed by a server that uses the neural network acoustic model 440 .
- the client device 410 or another user device stores the neural network acoustic model 440 and performs the speech recognition processing locally, without sending audio data over a network for processing.
- the system 500 generally includes a multichannel spatial filtering convolutional layer 502 , a frequency-processing module 504 , and a long short-term memory deep neural network (LDNN) 512 .
- the LDNN 512 can be a convolutional LDNN.
- the LDNN 512 generally includes three long-short term memory (LSTM) layers 516 a - c, and a deep neural network (DNN) layer 516 d.
- LSTM long-short term memory
- DNN deep neural network
- the system 500 can be used to perform both spatial and spectral filtering in the frequency domain.
- the input to the spatial filtering convolutional layer 502 can be frequency domain data, denoted by X 1 and X 2 .
- the system 600 generally includes several of the same components as the system 500 , except that the system 600 includes a spatial filtering convolutional layer 602 that generates a spatial filtered output from multichannel audio input using time-domain signal processing computations. More particularly, in the system 600 , only the spectral filtering is performed in the frequency domain.
- the input to the spatial filtering convolutional layer 602 can be time domain data, denoted by x 1 and x 2 .
- a Fourier transform process (not shown) may be used to convert the results of spatial filtering before providing the data to the frequency-processing module 504 .
- acoustic model shown in FIG. 5 can be enhanced by reducing the number of look directions and/or increasing the stride size for convolutions in the time domain.
- the time-domain convolution processing for the spatial filtering layer, the spectral filtering layer, or both can be replaced with more efficient frequency domain processing.
- time-domain convolutions in the model of FIG. 1 can be replaced with element-wise multiplication in the frequency domain.
- FIG. 5 shows an example of an acoustic model 500 that uses frequency domain processing instead of time-domain convolution for both spatial filtering and spectral filtering.
- FIG. 6 shows an example of an acoustic model 600 that uses frequency-domain processing instead of time-domain convolution to perform spectral filtering, but retains time-domain processing for spatial filtering.
- the system includes a “factored” raw waveform model, which passes a multichannel waveform signal into a set of short-duration multichannel time convolution filters which map the inputs down to a single channel, with the idea that the network would learn to perform broadband spatial filtering with these filters.
- a “factored” raw waveform model which passes a multichannel waveform signal into a set of short-duration multichannel time convolution filters which map the inputs down to a single channel, with the idea that the network would learn to perform broadband spatial filtering with these filters.
- the single channel waveform output of each spatial filter is passed to a longer-duration time convolution “spectral filtering layer” intended to perform finer frequency resolution spectral decomposition analogous to a time-domain auditory filterbank.
- the output of this spectral filtering layer is passed to a CLDNN acoustic model.
- a model may use around 20M parameters but requires 160M multiplies, with the bulk of the computation occurring in the “spectral filtering layer”.
- the number of filters in this layer is large and the input feature dimension is large compared to the filter size.
- this convolution is performed for each of 10 look directions in some implementations. This specification explores various approaches to speed up this model without affecting accuracy.
- the specification describes speeding up the model in the time domain. Using behavior observed with convolutions, by striding filters and limiting the look directions one is able to reduce the required number of multiplies by a factor of 4.5 with no loss in accuracy.
- the raw waveform factored multichannel network shown in FIG. 5 , factors spatial filtering and filterbank feature extraction into separate layers.
- the motivation for this architecture is to design the first layer to be spatially selective, while implementing a frequency decomposition shared across all spatial filters in the second layer.
- the output of the second layer is the Cartesian product of all spatial and spectral filters.
- the first layer implements Equation 1 and performs a multichannel convolution in time using a FIR spatial filterbank.
- implementing the equation includes taking a small window of the raw waveform of length M samples for each channel C, denoted as ⁇ x 1 [t]; x 2 [t], . . . , xC[t] ⁇ for t ⁇ 1 , . . . , M.
- the convolutional filter can be strided by 1 in time across M samples and perform a “same” convolution, such that the output for each convolutional filter remains length M.
- the outputs from each channel are summed to create an output feature of size y[t] ⁇ M ⁇ 1 ⁇ P where the dimensions correspond to time (sample index), frequency (spatial filter index), and look direction (feature map index), respectively.
- Equation 3 Equation 3, where ‘*’ denotes the convolution operation.
- the second convolution layer consists of longer duration single channel filters.
- This layer is designed to learn a decomposition with better frequency resolution than the first layer but is incapable of performing any spatial filtering since the input contains a single channel.
- This specification includes performing a time convolution on each of these P output signals from the first layer, as in an example single channel time convolution layer.
- the parameters of this time convolution are shared across all P feature maps or “look directions”.
- Other steps include denoting this layer's filters as g ⁇ L ⁇ F ⁇ 1 , where 1 indicates sharing across the P input feature maps.
- the stride S can be set to 1.
- the output of the spectral convolution layer for each look direction p and each filter f is given by Equation 4.
- the filterbank output is then max-pooled in time thereby discarding short-time (i.e. phase) information, over the entire time length of the output signal frame, producing an output of dimension 1 ⁇ F ⁇ P.
- This is followed by a rectifier nonlinearity and stabilized logarithm compression 1 , to produce a frame-level feature vector at frame l: z l ⁇ 1 ⁇ F ⁇ P .
- the input window is shifted by 10 ms and repeat this time convolution to produce a set of time-frequency-direction frames.
- the output out of the time convolutional layer (tConv 2 ) produces a frame-level feature z[l] which is passed to a CLDNN acoustic model, which contains 1 frequency convolution, 3 LSTM and 1 DNN layer.
- Equation 3 the number of multiplications in the spatial convolution layer from Equation 3 can be counted.
- a “same” convolution between filter h of length N, and input xi of length M requires M ⁇ N multiplies.
- Computing this convolution for each channel c in each look direction p results in a total of P ⁇ C ⁇ M ⁇ N multiplies for the first layer.
- the remainder of the CLDNN model uses approximately 20M multiplies, leaving the majority of the computation of the factored model in the spectral filtering layer tConv 2 .
- the factored model can be implemented in the frequency domain in which quadratic-time time-domain convolutions can be implemented much more efficiently as linear-time element-wise products.
- a frequency processing module can be used, at least in part, to implement the factored model in the frequency domain.
- the spatial convolution layer in Equation 3 can be represented by Equation 5 in the frequency domain, where ⁇ denotes element-wise product. The output of this layer can be denoted as Y p [l] ⁇ K for each look direction p:
- Equation 4 Two different methods for implementing the “spectral filtering” layer in the frequency domain can be used.
- the convolution in Equation 4 can be re-written as an element-wise product in frequency, for each filter f and look direction p, where W j p [l] ⁇ K :
- the frequency-domain equivalent to the max-pooling operation in the time domain model would be to take the inverse FFT of W j p [l] and performing the same pooling operation in the time domain, which is computationally expensive to do for each look direction p and filter output f.
- CLP Complex Linear Projection
- the 1-dimensional output for look direction p and filter f is given by:
- the specification also describes an alternative decomposition that is motivated by the log-mel filterbank. Given the complex-valued FFT for each look direction, Y p[l], one can first compute the energy at each time-frequency bin (l, k):
- the projection weights G ⁇ K ⁇ F are shared across all look directions.
- the main difference between the CLP and LPE models is that the former retains phase information when performing the filterbank decomposition with matrix G.
- LPE operates directly on the energy in each frequency band with the assumption that phase not important for computing features.
- the total number of multiplies for the frequency domain spatial layer is 4 ⁇ P ⁇ C ⁇ K, where 4 comes from the complex multiplication operation.
- the total number of multiplies for the CLP spectral layer is be 4 ⁇ P ⁇ F ⁇ K. Since the LPE model operates on real-valued FFT energies, the total number of multiplies for the LPE spectral layer is reduced to P ⁇ F ⁇ K.
- FIG. 5 shows an example system 500 in which both spatial and spectral filtering are performed in the frequency domain.
- FIG. 6 shows an example of a system 600 in which only the spectral filtering is performed in the frequency domain, while the spatial filtering can be performed in the time-domain with enhancements to, e.g., the number of look directions and stride parameters.
- a discrete Fourier transform can be applied to spatial filtering output before processing in the frequency processing module.
- Some example implementations can involve use of approximately 2,000 hours of noisy training data consisting of 3 million English utterances. This data set is created by artificially corrupting clean utterances using a room simulator, adding varying degrees of noise and reverberation.
- the clean utterances are anonymized and hand-transcribed voice search queries, and are representative of Google's voice search traffic.
- Noise signals which include music and ambient noise sampled from YouTube and recordings of “daily life” environments, are added to the clean utterances at SNRs ranging from 0 to 20 dB.
- Reverberation is simulated using an image model—room dimensions and microphone array positions are randomly sampled from 100 possible room configurations with RT60S ranging from 400 to 900 ms.
- the simulation uses a 2-channel linear microphone array, with inter-microphone spacing of 14 cm. Both noise and target speaker locations change between utterances; the distance between the sound source and the microphone array varies between 1 to 4 meters.
- the speech and noise azimuths were uniformly sampled from the range of ⁇ 45 degrees and ⁇ 90 degrees, respectively, for each utterance.
- the evaluation set consists of a separate set of about 30,000 utterances (over 20 hours), and is created by simulating similar SNR and reverberation settings to the training set.
- the room configurations, SNR values, RT60 times, and target speaker and noise positions in the evaluation set differ from those in the training set, although the microphone array geometry between the training and simulated test sets is identical.
- Computational complexity of the raw waveform factored model can be reduced by varying look directions P and stride S.
- Table 3 shows the WER for CE and ST criteria, as well as the total number of multiplication and addition operations (M+A) for different parameter settings. The table shows that the number of operations can be reduced from 157.7M to 88.2M, by reducing the look directions P from 10 to 5, with no loss in accuracy.
- the frequency convolution layer 110 from FIG. 1 may be omitted.
- a 35 ms input requires a 1024-point FFT, and there is no performance difference between 32 ms and 35 ms raw waveform inputs.
- Table 4 shows that the performance of both the CLP and LPE factored models are similar. Furthermore, both models reduce the number of operations by a factor of 1.9 ⁇ over the best waveform model from Table 3, with a small degradation in WER.
- a comparison between learning in time vs. frequency shows some differences in the spatial responses (i.e., beam patterns) for the time and frequency domain spatial layers. Since the LPE and CLP models have the same spatial layer and the beam patterns were found to look similar, only the CLP model is plotted for simplicity.
- the beam patterns show the magnitude response in dB as a function of frequency and direction of arrival, i.e. each horizontal slice of the beam pattern corresponds to the filter's magnitude response for a signal coming from a particular direction. In each frequency band (vertical slice), lighter shades indicate that sounds from those directions are passed through, while darker shades indicate directions whose energy is attenuated.
- the figures show that the spatial filters learned in the time domain are band-limited, unlike those learned in the frequency domain. Furthermore, the peaks and nulls are aligned well across frequencies for the time domain filters.
- time-domain and frequency-domain representations are interchangeable, but they result in networks that are parameterized very differently. Even though the time and frequency models all learn different spatial filters, they all seem to have similar WERs. In addition, even though the spatial layer of the CLP and LPE models are different, they too seem to have similar performance. There are roughly 18M parameters in the CLDNN model that sits above the spatial/spectral layers, which accounts for over 90% of the parameters in the model. Any differences between the spatial layers in time and frequency are likely accounted for in the CLDNN part of the network.
- WER can be improved by increasing the window size (and therefore computational complexity) of the factored models. Specifically, since longer windows typically help with localization, using 64 ms input windows for both models can be explored. By reducing computational complexity in other aspects of the model, room is opened in the computational budget to add processing of larger windows, which can increase accuracy. With a 64 ms input, the frequency models require a 1024-point DFT. Table 5 shows that the frequency models improve the WER over using a smaller 32 ms input, and still perform roughly the same. However, the frequency model now has an even larger computational complexity savings of 2.7 ⁇ savings compared to the time domain model.
- FIG. 7 is a flow diagram that illustrates an example of a process 700 for speech recognition using neural networks. More particularly, the process 700 relates to a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time.
- the process 700 may be performed by a data processing apparatus, such as the computing system 420 described above or another data processing apparatus.
- First data and second data are received by a neural network of a speech recognition system ( 702 ).
- the first data can represent a first raw audio signal and the second data can represent a second raw audio signal.
- the first raw audio signal and the second raw audio signal can each describe audio occurring at a same period of time.
- a spatial filtered output is generated using the first data and the second data ( 704 ).
- the spatial filtered output can be generated by a spatial filtering layer of the neural network.
- generating the spatial filtered output using the first data and the second data can include performing element-wise multiplications of frequency-domain representations of the first data and the second data with frequency domain representations of filters learned through training of the neural network.
- a spectral filtered output is generated by a spectral filtering layer of the neural network ( 706 ).
- Generating the spectral filtered output can comprise processing frequency-domain data representing the spatial filtered output.
- generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can include generating filtered data by using an element-wise multiplication of (i) the frequency-domain data representing the spatial filtered output with (ii) frequency-domain representations of multiple filters.
- generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can include performing a complex linear projection (CLP) of the filtered data in the frequency domain to generate a CLP output, and applying an absolute-value function and a log compression to the CLP output.
- generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can also include performing a linear projection of energy using the filtered data.
- performing the linear projection of energy using the filtered data can include determining an energy value for each of multiple time-frequency bins. Moreover, performing the linear projection of energy using the filtered data can also include applying a power compression to the energy values to generate compressed energy values. Further still, performing the linear projection of energy using the filtered data can also include linearly projecting the compressed energy values using filters with learned filter parameters.
- the spectral filtered output is processed, by one or more additional layers of the neural network, to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal ( 708 ).
- a device In response to processing the spectral filtered output by the additional layers of the neural network, a device can be caused to perform an action using the predicted sub-word units.
- the process 700 can include additional steps, fewer steps, or some of the steps can be divided into multiple steps.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory program carrier for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- the computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers.
- the apparatus can also be or further include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- a computer program which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code.
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- special purpose logic circuitry e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- FIG. 8 is a block diagram of computing devices 800 , 850 that may be used to implement the systems and methods described in this document, as either a client or as a server or plurality of servers.
- Computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.
- Computing device 850 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, smartwatches, head-worn devices, and other similar computing devices.
- the components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations described and/or claimed in this document.
- Computing device 800 includes a processor 802 , memory 804 , a storage device 806 , a high-speed interface 808 connecting to memory 804 and high-speed expansion ports 810 , and a low speed interface 812 connecting to low speed bus 814 and storage device 806 .
- Each of the components 802 , 804 , 806 , 808 , 810 , and 812 are interconnected using various busses, and may be mounted on a common motherboard or in other manners as appropriate.
- the processor 802 can process instructions for execution within the computing device 800 , including instructions stored in the memory 804 or on the storage device 806 to display graphical information for a GUI on an external input/output device, such as display 816 coupled to high speed interface 808 .
- multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory.
- multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system).
- the memory 804 stores information within the computing device 800 .
- the memory 804 is a computer-readable medium.
- the memory 804 is a volatile memory unit or units.
- the memory 804 is a non-volatile memory unit or units.
- the storage device 806 is capable of providing mass storage for the computing device 800 .
- the storage device 806 is a computer-readable medium.
- the storage device 806 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 804 , the storage device 806 , or memory on processor 802 .
- the high speed controller 808 manages bandwidth-intensive operations for the computing device 800 , while the low speed controller 812 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only.
- the high-speed controller 808 is coupled to memory 804 , display 816 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 810 , which may accept various expansion cards (not shown).
- low-speed controller 812 is coupled to storage device 806 and low-speed expansion port 814 .
- the low-speed expansion port which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- input/output devices such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter.
- the computing device 800 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a standard server 820 , or multiple times in a group of such servers. It may also be implemented as part of a rack server system 824 . In addition, it may be implemented in a personal computer such as a laptop computer 822 . Alternatively, components from computing device 800 may be combined with other components in a mobile device (not shown), such as device 850 . Each of such devices may contain one or more of computing device 800 , 850 , and an entire system may be made up of multiple computing devices 800 , 850 communicating with each other.
- Computing device 850 includes a processor 852 , memory 864 , an input/output device such as a display 854 , a communication interface 866 , and a transceiver 868 , among other components.
- the device 850 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage.
- a storage device such as a microdrive or other device, to provide additional storage.
- Each of the components 850 , 852 , 864 , 854 , 866 , and 868 are interconnected using various buses, and several of the components may be mounted on a common motherboard or in other manners as appropriate.
- the processor 852 can process instructions for execution within the computing device 850 , including instructions stored in the memory 864 .
- the processor may also include separate analog and digital processors.
- the processor may provide, for example, for coordination of the other components of the device 850 , such as control of user interfaces, applications run by device 850 , and wireless communication by device 850 .
- Processor 852 may communicate with a user through control interface 858 and display interface 856 coupled to a display 854 .
- the display 854 may be, for example, a TFT LCD display or an OLED display, or other appropriate display technology.
- the display interface 856 may comprise appropriate circuitry for driving the display 854 to present graphical and other information to a user.
- the control interface 858 may receive commands from a user and convert them for submission to the processor 852 .
- an external interface 862 may be provide in communication with processor 852 , so as to enable near area communication of device 850 with other devices. External interface 862 may provide, for example, for wired communication (e.g., via a docking procedure) or for wireless communication (e.g., via Bluetooth or other such technologies).
- the memory 864 stores information within the computing device 850 .
- the memory 864 is a computer-readable medium.
- the memory 864 is a volatile memory unit or units.
- the memory 864 is a non-volatile memory unit or units.
- Expansion memory 874 may also be provided and connected to device 850 through expansion interface 872 , which may include, for example, a SIMM card interface. Such expansion memory 874 may provide extra storage space for device 850 , or may also store applications or other information for device 850 .
- expansion memory 874 may include instructions to carry out or supplement the processes described above, and may include secure information also.
- expansion memory 874 may be provide as a security module for device 850 , and may be programmed with instructions that permit secure use of device 850 .
- secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner.
- the memory may include for example, flash memory and/or MRAM memory, as discussed below.
- a computer program product is tangibly embodied in an information carrier.
- the computer program product contains instructions that, when executed, perform one or more methods, such as those described above.
- the information carrier is a computer- or machine-readable medium, such as the memory 864 , expansion memory 874 , or memory on processor 852 .
- Device 850 may communicate wirelessly through communication interface 866 , which may include digital signal processing circuitry where necessary. Communication interface 866 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 868 . In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition, GPS receiver module 870 may provide additional wireless data to device 850 , which may be used as appropriate by applications running on device 850 .
- GPS receiver module 870 may provide additional wireless data to device 850 , which may be used as appropriate by applications running on device 850 .
- Device 850 may also communicate audibly using audio codec 860 , which may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- Audio codec 860 may receive spoken information from a user and convert it to usable digital information. Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset of device 850 . Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating on device 850 .
- the computing device 850 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as a cellular telephone 880 . It may also be implemented as part of a smartphone 882 , personal digital assistant, or other similar mobile device.
- implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof.
- ASICs application specific integrated circuits
- These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor
- a keyboard and a pointing device e.g., a mouse or a trackball
- Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- the systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- LAN local area network
- WAN wide area network
- the Internet the global information network
- the computing system can include clients and servers.
- a client and server are generally remote from each other and typically interact through a communication network.
- the relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
Abstract
Description
- This application claims the benefit of U.S. Provisional Application No. 62/384,461, filed on Sep. 7, 2016, the contents of which are incorporated herein by reference.
- The present specification is related to acoustic models, including acoustic models that process audio data from multiple microphones.
- In general, speech recognition systems can use a neural network model that performs speech enhancement and acoustic modeling. Some systems process audio data from multiple microphones using a neural network.
- Multichannel neural network models may be trained to perform speech enhancement jointly with acoustic modeling. These models can process raw waveform input signals that are associated with multiple look directions. Although multi-channel models can provide improved accuracy compared to a single-channel model, use of current multi-channel models comes at a large cost in computational complexity. The computational complexity is related to the overall quantity of mathematical operations (e.g., multiplications used to carry out convolutions) that are used to perform time-domain signal processing.
- This specification describes systems and methods for reducing the computational complexity of multi-channel acoustic models while maintaining appropriate accuracy. Computational complexity can be reduced by incorporating one or more optimizations that include minimizing the number of look directions, modifying certain parameters used in convolution operations (e.g., using an increased stride value) and utilizing frequency domain signal processing rather than time domain processes. For example, operations that typically require convolution in the time domain can be replaced with operations that perform element-wise multiplication (e.g., compute a dot product) of frequency domain data, which significantly reduces the amount of computation required. Application of the foregoing optimizations to current multi-channel models may reduce computational complexity of the models with little or no loss in accuracy. Also, because the structure of the acoustic model is altered to perform processing in the frequency domain, different parameters or filters can be learned compared to the model that uses time-domain convolution processing. For example, filters can be learned in the frequency domain during training of the model.
- In general, one innovative aspect of the subject matter of this specification includes a computer-implemented method comprising, receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time, and generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data. The method also comprises, generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output, and processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- Other implementations of this and other aspects include corresponding systems, apparatus, and computer programs, configured to perform the actions of the methods, encoded on computer storage devices. A system of one or more computers can be so configured by virtue of software, firmware, hardware, or a combination of them installed on the system that in operation cause the system to perform the actions. One or more computer programs can be so configured by virtue of having instructions that, when executed by data processing apparatus, cause the apparatus to perform the actions.
- Implementations may include one or more of the following features. For instance, the method can further include causing a device to perform an action using the predicted sub-word units in response to processing, by the additional layers of the neural network, the spectral filtered output. In some implementations, generating, by the spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output comprises: generating filtered data by using an element-wise multiplication of (i) the frequency-domain data representing the spatial filtered output with (ii) frequency-domain representations of multiple filters. In some implementations, generating, by the spectral filtering layer of the neural network, the spectral filtered output using the spatial filtered output comprises: performing a complex linear projection (CLP) of the filtered data in the frequency domain to generate a CLP output; and applying an absolute-value function and a log compression to the CLP output.
- In some implementations, generating, by the spectral filtering layer of the neural network, the spectral filtered output using the spatial filtered output comprises: performing a linear projection of energy using the filtered data. In some implementations, performing the linear projection of energy using the filtered data comprises: determining an energy value for each of multiple time-frequency bins; applying a power compression to the energy values to generate compressed energy values; and linearly projecting the compressed energy values using filters with learned filter parameters.
- In some implementations, generating, by the spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data comprises: performing element-wise multiplications of frequency-domain representations of the first data and the second data with frequency domain representations of filters learned through training of the neural network. In some implementations, generating, by the spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data comprises: performing a fast Fourier transform on the first data to obtain a first frequency-domain representation of the first data; performing a fast Fourier transform on the second data to obtain a second frequency-domain representation of the second data; performing an element-wise multiplication of the first frequency-domain representation with a frequency-domain representation of a first set of filters; and performing an element-wise multiplication of the second frequency-domain representation with a frequency-domain representation of a second set of filters.
- In some implementations, generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: filtering the first data and the second data using time convolution filters; and summing the outputs of the time convolution filters. In some implementations, the time convolution filters are finite impulse response filters, each finite response filter being trained with a separate set of parameters. In another aspect, the time convolution filters comprise multiple filter pairs, each filter pair comprising a first filter and a second filter; wherein filtering the first data and the second data comprises, for each of the multiple filter pairs: convolving the first data with the first filter of the filter pair to generate a first time convolution output for the filter pair; and convolving the second data with the second filter of the filter pair to generate a first time convolution output for the filter pair; wherein summing the outputs of the time convolution filters comprises generating, for each pair of filters, a sum of the first time convolution output for the filter pair and the second time convolution output for the filter pair.
- In some implementations, the time convolution filters comprise a set of filters that have been trained jointly, wherein training the filters causes pairs of the filters to pass audio originating from different spatial directions. In some implementations, the spatial filtering layer of the neural network performs both spatial filtering and spectral filtering. In some implementations, generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises filtering the first data and the second data using multiple finite impulse response filters.
- In some implementations, generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: generating a first quantity of first samples from the first data; generating a second quantity of second samples from the second data, the second quantity and the first quantity being the same quantity; striding by a number of samples greater than one in time across the first samples to generate first spatial output; and striding by a number of samples greater than one in time across the second samples to generate second spatial output.
- In some implementations, striding by a number of samples greater than one in time across the first samples to generate the first spatial output comprises striding by at least four samples in time across the first samples to generate first spatial output; wherein striding by a number of samples greater than one in time across the second samples to generate the second spatial output comprises striding by at least four samples in time across the second samples to generate the second spatial output. In some implementations, generating, by the spatial filtering layer of the neural network, the spatial filtered output using the first data and the second data comprises: summing first values in the first spatial output with corresponding values in the second spatial output to generate an output feature map, wherein the spatial filtered output comprises the output feature map.
- In some implementations, processing, by the one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal comprises: processing, by a long short-term memory deep neural network included of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- In general, another innovative aspect of the subject matter of this specification includes one or more non-transitory computer-readable media storing instructions that, when executed by one or more computers, cause the one or more computers to perform operations comprising: receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time. The performed operations comprise, generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data, and generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output. The performed operations also comprise, processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- In general, another innovative aspect of the subject matter of this specification includes a system comprising, one or more computers; and one or more computer-readable storage devices storing instructions that, when executed by the one or more computers, cause the one or more computers to perform operations comprising: receiving, by a neural network of a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, wherein the first raw audio signal and the second raw audio signal describe audio occurring at a same period of time. The performed operations further comprise, generating, by a spatial filtering layer of the neural network, a spatial filtered output using the first data and the second data, and generating, by a spectral filtering layer of the neural network, a spectral filtered output using the spatial filtered output, wherein generating the spectral filtered output comprises processing frequency-domain data representing the spatial filtered output. The performed operations also comprise, processing, by one or more additional layers of the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- The subject matter described in this specification can be implemented in particular embodiments and may result in one or more of the following advantages. In some implementations, a speech recognition system that uses a neural network as described below may have a reduced word error rate. In some implementations, a speech recognition system may use multi-task learning during a neural network learning process to enhance a received signal, suppress noise, improve the learning process, or a combination of two or more of these. In some implementations, a speech recognition system may use a spatial filtering layer and a separate spectral filtering layer to design the spatial filtering layer to be spatially selective, while implementing a frequency decomposition shared across all spectral filters in the spectral filtering layer. In some implementations, a spectral filtering layer can learn a decomposition with better frequency resolution than a spatial filtering layer, may be incapable of doing any spatial filtering, or both. In some implementations, a speech recognition system may use multi-task learning to de-noise and de-reverberate features from an audio signal while classifying the features.
- The details of one or more implementations of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features, aspects, and advantages of the subject matter will become apparent from the description, the drawings, and the claims.
-
FIG. 1 is an example of a multichannel speech recognition system that includes a multichannel spatial filtering convolutional layer and a separate spectral filtering convolutional layer as part of a single neural network. -
FIG. 2 is a flow diagram of a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time. -
FIG. 3 is a flow diagram of a process for training a neural network that includes a spatial filtering convolutional layer and a spectral filtering convolutional layer. -
FIG. 4 is a diagram that illustrates an example of a system for speech recognition using neural networks. -
FIGS. 5 and 6 are diagrams showing examples of multichannel speech recognition systems that operate with reduced computational demands while maintaining appropriate accuracy. -
FIG. 7 is a flow diagram of a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time. -
FIG. 8 is a block diagram of a computing system that can be used in connection with computer-implemented methods described in this document. - Like reference numbers and designations in the various drawings indicate like elements.
- In some implementations, a speech recognition system includes a neural network, e.g., a convolutional long short-term memory deep neural network (CLDNN), with a spatial filtering convolutional layer and a spectral filtering convolutional layer to process audio signals, e.g., raw audio signals. The neural network may include the two convolutional layers to process multichannel input, e.g., multiple audio signals from different microphones when each audio signal represents sound from the same period of time. The speech recognition system may use the multichannel input to enhance a representation of words spoken by a user, and encoded in the audio signals, compared to other sound, e.g., noise, encoded in an audio signal, and to reduce a word error rate.
- In some implementations, the neural network may use multi-task learning during a learning process. For example, the neural network may include two different architectures each with one or more deep neural network layers after a long short-term memory layer and the two convolutional layers to process “clean” and “noisy” audio signals that encode the same words or sub-word units. The neural network may include a particular layer or group of layers in both architectures such that the particular layers are trained during processing of both the “clean” and the “noisy” audio signals while other layers are trained during processing of only a single type of audio signal, either clean or noisy but not both.
- For instance, the neural network processes the “clean” audio signal using the deep neural network layers and the “noisy” audio signal using other neural network layers, e.g., two long short-term memory layers and a different deep neural network layer, to determine two output values, one for each of the audio signals. The neural network determines a difference between the errors of the two output values, or between the gradients for the two output values, and uses the difference to determine a final gradient for a training process. The neural network uses the final gradient during backward propagation.
-
FIG. 1 is an example of a multichannelspeech recognition system 100 that includes a multichannel spatialfiltering convolutional layer 102 and a separate spectralfiltering convolutional layer 104 as part of a single neural network. The multichannel spatialfiltering convolutional layer 102 generates a spatial filtered output from multichannel audio input, e.g., two or more audio signals when each audio signal is created by a different microphone for the same period of time. The multichannel spatialfiltering convolutional layer 102 may include short-duration multichannel time convolution filters which map multichannel inputs down to a single channel. During training, the multichannel spatialfiltering convolutional layer 102 learns several filters, each of which are used to “look” in different directions in space for a location of a speaker of a word or sub-word unit encoded in the audio signals. - The spectral
filtering convolutional layer 104 receives the spatial filtered output, e.g., the single channel output from each of the filters in the spatialfiltering convolutional layer 102. The spectralfiltering convolutional layer 104 may have a longer-duration time convolution, compared to the spatialfiltering convolutional layer 102, and may perform finer frequency resolution spectral decomposition, e.g., analogous to a time-domain auditory filterbank. - The spectral
filtering convolutional layer 104 applies a pooling function and a rectified non-linearity function, usinglayer 106, to the spatial filtered output to generate a spectralfiltered output 108. The spectralfiltering convolutional layer 104 provides the spectralfiltered output 108 to a frequency convolutional layer 110. The frequency convolutional layer 110 processes the spectralfiltered output 108 and provides a frequency convoluted output to another layer in the multichannelspeech recognition system 100, e.g., a long short term memory (LSTM)layer 112 a. - For example, the multichannel spatial
filtering convolutional layer 102 may receive two channels of audio signals, x1[t] and x2[t]. The multichannel spatialfiltering convolutional layer 102 receives each of the channels from a respective microphone c at time t. In some examples, the multichannel spatialfiltering convolutional layer 102 receives more than two channels. For filters p ∈ Phc p[n] is the nth tap of the filter p associated with microphone c. The output yp[t] of filter p ∈ P is defined by Equation (1) below for C microphones when N is the order, or size, of the finite impulse response (FIR) filters. -
y p [t]=Σ c=0 C−1Σn=0 N−1 h c p [n]x c [t−n] (1) - The multichannel spatial
filtering convolutional layer 102 may model Equation (1) and perform a multichannel time-convolution with a FIR spatial filterbank. For instance, the multichannelspeech recognition system 100 may select a window of a raw audio signal of length M samples for each channel C, denoted as {x1[t], x2[t], . . . , xC[t]} for t ∈ 1, . . . , M. The multichannel spatialfiltering convolutional layer 102 convolves each channel c for each of the samples xC[t] by a filter p ∈ P with an order of N, for a total of P filters hc={hc 1, hc 2, . . . hc P}. In some examples, the multichannel spatialfiltering convolutional layer 102 has two or more, e.g., ten, spatial filters. In some examples, the multichannel spatialfiltering convolutional layer 102 has more than ten spatial filters. - The multichannel spatial
filtering convolutional layer 102 strides by one in time across M samples and performs a “full” convolution, such that the output, e.g., each feature maps, for each filter p ∈ P remains length M, e.g., the length of each filter map for the multichannel spatialfiltering convolutional layer 102 is the same as the length of the input. The multichannel spatialfiltering convolutional layer 102 sums the outputs from each channel c ∈ C to create an output feature map of size yp[t] ∈ RM×1×P. Dimension M corresponds to time, e.g., sample index,dimension 1 corresponds to frequency, e.g., spatial filter index, and dimension P corresponds to look direction, e.g., feature map index. - The spectral
filtering convolutional layer 104 includes longer-duration filters than the multichannel spatialfiltering convolutional layer 102. The filters in the spectralfiltering convolutional layer 104 are single-channel filters. The spectralfiltering convolutional layer 104 receives the P feature maps from the multichannel spatialfiltering convolutional layer 102 and performs time convolution on each of the P feature maps. The spectralfiltering convolutional layer 104 may use the same time convolution across all P feature maps. The spectralfiltering convolutional layer 104 includes filters g ∈ RL×F×1, where 1 indicates sharing across the P input feature maps, e.g., sharing of the same time convolution. The spectralfiltering convolutional layer 104 produces an output w[t] ∈ RM−L+1×F×P such that w[t]=yf[t] as shown inFIG. 1 . - The multichannel
speech recognition system 100 pools the filterbank output w[t] in time, e.g., to discard short-time information, over the entire time length of the output signal w[t], to produce an output withdimensions 1×F×P. The multichannelspeech recognition system 100 applies a rectified non-linearity to the pooled output, and may apply a stabilized logarithm compression, to produce a frame-level feature vector z[t] at time t, e.g., z[t] ∈ R1×F×P. For instance the spectralfiltering convolutional layer 104 includes a pooling andnon-linearity layer 106 that pools the output, e.g., to discard short-time phase information, and applies the rectified non-linearity. - In some implementations, the multichannel
speech recognition system 100, as part of the stabilized logarithm compression, may use a small additive offset to truncate the output range and avoid numerical problems with very small inputs. For instance, the multichannelspeech recognition system 100 may apply log(·+0.01) to the pooled output when producing the frame-level feature vector z[t]. - The multichannel
speech recognition system 100 may shift a window along the raw audio signal, e.g., by a small frame hop such as 10 milliseconds, and repeat the time convolution to produce a set of time-frequency-direction frames, e.g., at 10 millisecond intervals. For example, the multichannelspeech recognition system 100 may process another audio signal using the multichannel spatialfiltering convolutional layer 102 and the spectralfiltering convolutional layer 104. - The output out of the spectral
filtering convolutional layer 104 produces a frame-level feature, denoted as z[t] ∈ R1×F×P. In some examples, the output z[t] of the spectralfiltering convolutional layer 104, e.g., the combined output of the multichannel spatialfiltering convolutional layer 104, including thelayer 106, and the spectralfiltering convolutional layer 102, is the Cartesian product of all spatial and spectral filters. - The multichannel
speech recognition system 100 may provide the output z[t] to a convolutional long short-term memory deep neural network (CLDNN) block 116 in the CLDNN. TheCLDNN block 116 includes a frequency convolutional layer 110 that applies a frequency convolution to z[t]. The frequency convolutional layer 110 may have two-hundred fifty-six filters ofsize 1×8×1 in time-frequency-direction. The frequency convolutional layer 110 may use pooling, e.g., non-overlapping max pooling, along the frequency axis. The frequency convolutional layer may use a pooling size of three. - The multichannel
speech recognition system 100 may provide the output of the frequency convolution layer 110 to a linear low-rank projection layer (not shown) to reduce dimensionality. The multichannelspeech recognition system 100 may provide the output of the linear low-rank projection layer, or the output of the frequency convolution layer 110, to three long-short term memory (LSTM) layers 112 a-c. Each of the three LSTM layers 112 a-c may have eight-hundred and thirty-two cells and a five-hundred and twelve unit projection layer. The multichannelspeech recognition system 100 provides the output of the three LSTM layers 112 a-c to a deep neural network (DNN)layer 112 d to predict context-dependent states, e.g., words or sub-word units encoded in the input audio signal. The DNN layer may have 1,024 hidden units. - In some implementations, the multichannel
speech recognition system 100 trains the multichannel spatialfiltering convolutional layer 102 and the spectralfiltering convolutional layer 104 jointly with the rest of the CLDNN, e.g., the with layer 110 and layers 112 a-d in theCLDNN block 116. During training, the multichannelspeech recognition system 100 may unroll the raw audio signal CLDNN for twenty time steps for training with truncated backpropagation through time. In some examples, the multichannelspeech recognition system 100 may delay the output state label by five frames, e.g., to use information about future frames to improve prediction of the current frame. For example, each of the three LSTM layers 112 a-c may include information about the five most recently processed frames when processing a current frame. - In some implementations, the multichannel
speech recognition system 100 may have two outputs during a training process. The first output may predict context-dependent states, e.g., from a noisy audio signal, and the second output may predict clean log-mel features, e.g., from a clean audio signal that encodes the same words or sub-word units as the noisy audio signal. The multichannelspeech recognition system 100 may determine gradients from the layers used to generate each of the two outputs during a backward propagation process. The multichannelspeech recognition system 100 may combine the multiple gradients using weights. In some examples, the multichannelspeech recognition system 100 may use a multi-task learning (MTL) process during the training to generate the two outputs. - For example, the multichannel
speech recognition system 100 may use the output that predicts the clean log-mel features during training, and not during run-time, to regularize network parameters. The multichannelspeech recognition system 100 may include one or more denoising layers, e.g., layers 112 b-d shown inFIG. 1 , and an MTL module, e.g., that includes two deep neural network (DNN) layers 114 a-b. In some examples, the MTL module includes a linear low-rank layer after the two DNN layers 114 a-b to predict clean log-mel features. In some examples, the multichannelspeech recognition system 100 does not predict the clean audio signal, e.g., the words or sub-word units encoded in the clean audio signal, and only predicts log-mel features for the clean audio signal. - The multichannel
speech recognition system 100 uses the denoising layers to process noisy audio signals and the MTL module to process clean audio signals. When processing a noisy audio signal, the multichannelspeech recognition system 100 uses the denoising layers and does not use the MTL module. When processing a clean audio signal, the multichannelspeech recognition system 100 uses the MTL module and does not use the denoising layers, or does not use at least one of the denoising layers depending on a location at which the MTL module is placed in the CLDNN. For instance, when the MTL module is after afirst LSTM layer 112 a, the multichannelspeech recognition system 100 uses thefirst LSTM layer 112 a and the MTL module to process a clean audio signal and does not use the twoLSTM layers 112 b-c or theDNN layer 112 d. When the MTL module is after asecond LSTM layer 112 b, the multichannelspeech recognition system 100 uses the first two LSTM layers 112 a-b and the MTL module to process a clean audio signal and does not use thelast LSTM layer 112 c or theDNN layer 112 d. - During training the multichannel
speech recognition system 100 back-propagates the gradients from the context-dependent states and MTL outputs by weighting the gradients by α and 1−α, respectively. For instance, the multichannelspeech recognition system 100 may receive a first clean audio signal and a second noisy audio signal that is a “corrupted” version of the first clean audio signal, e.g., to which reverberation, noise, or both, have been added to the underlying clean speech features from the first clean audio signal. The multichannelspeech recognition system 100 may process, during a single training iteration, both the first clean audio signal and the second noisy audio signal, determine outputs for both audio signals, and then gradients for the multichannelspeech recognition system 100 using the outputs for both audio signals, e.g., using respective errors for the outputs. The gradient for the MTL output, e.g., the first clean audio signal, may affect only the layers in the MTL module and not the denoising layers which are not used to process the first clean audio signal. The gradient for the denoising layers, e.g., the second noisy audio signal, may affect only the CLDNN and not the layers in the MTL module. - In some examples, the multichannel
speech recognition system 100 may minimize the squared error between the observed features that are corrupted by reverberation and noise, e.g., in the second noisy audio signal, and the underlying clean speech features, e.g., in the first clean audio signal. For instance, if v represents the observed reverberant and noisy speech feature vectors and w represents the underlying clean speech feature vectors, e.g., ŵt represents the clean features from the clean audio signal and wt represents the clean features from the noisy audio signal, the MTL objective function used to train this model may be defined by Equation (2) below. -
T=αΣ t p(s|v t)+(1−α)Σt(ŵ t −w t)2 (2) - In Equation (2), the first term p(s|vt) is the primary cross entropy task, e.g., the clean log-mel features determined using the multi-task module, and the second term (ŵt−wt)2 is the secondary feature enhancement task, e.g., the context dependent states determined using the denoising layers, and α is the weight parameter which determines how much importance the secondary task should get. In some examples, more weight is given to the first term (cross entropy) compared to the second term (secondary feature enhancement). For instance, a may be 0.9.
- In some implementations, during training, the multichannel
speech recognition system 100 computes the baseline, e.g., clean, log-mel features with a 25 millisecond window and a 10 millisecond hop. The multichannelspeech recognition system 100 may compute raw audio signal features, e.g., noisy audio signal features, with a filter size N of twenty-five milliseconds, or N=four-hundred at a sampling rate of 16 kHz. In some examples, when the input window size is thirty-five millisecond (M=560), the multichannelspeech recognition system 100 has a ten millisecond overlapping pooling window. - In some implementations, the multichannel
speech recognition system 100 is trained using data from different microphone array geometries. For example, the multichannelspeech recognition system 100 may use audio signals received from two microphones spaced fourteen centimeters apart, two microphones spaced ten centimeters apart, three microphones each spaced fourteen centimeters apart, a configuration of four microphones, and other microphone geometries. In some examples, the multichannelspeech recognition system 100 is trained with the cross-entropy (CE) criterion, using asynchronous stochastic gradient descent (ASGD) optimization, e.g., all layers in the MTL module and the denoising layers are trained with CE criterion, using ASGD optimization. In some examples, all networks have 13,522 context-dependent output targets. In some examples, the weights of all LSTM layers are randomly initialized using a uniform distribution between −0.02 and 0.02. In some examples, the multichannelspeech recognition system 100 may use an exponentially decaying learning rate, initialized to 0.004 and decaying by 0.1 over 15 billion frames. - In some implementations, the multichannel
speech recognition system 100 learns filter parameters. For example, the multichannelspeech recognition system 100 may learn filter parameters for the multichannel spatialfiltering convolutional layer 102. In some examples, training of the filter parameters for the multichannel spatialfiltering convolutional layer 102 may allow the multichannel spatialfiltering convolutional layer 102 to perform some spectral decomposition. - In some implementations, the output of the multichannel spatial
filtering convolutional layer 102 is not directly processed by a non-linear compression, e.g., a rectifier or a log function. For instance, the output of the multichannel spatialfiltering convolutional layer 102 may go through other processing to generate intermediate data that is processed by a non-linear compression. In some implementations, the output of the multichannel spatialfiltering convolutional layer 102 is not pooled. For instance, the output of the multichannel spatialfiltering convolutional layer 102 may go through other processing to generate intermediate data that is pooled. -
FIG. 2 is a flow diagram of aprocess 200 for predicting a sub-word unit encoded in two raw audio signals for the same period of time. For example, theprocess 200 can be used by the multichannelspeech recognition system 100. - A neural network in a speech recognition system receives first data representing a first raw audio signal and second data representing a second raw audio signal, the first raw audio signal and the second raw audio signal for the same period of time (202). For instance, a device that includes the neural network generates the first data and the second data. The device may include one or more microphones that each generate one of the first data and the second data.
- A spatial filtering convolutional layer in the neural network generates a spatial filtered output using the first data and the second data (204). For example, the spatial filtering convolutional layer filters the first data and the second data using multiple finite impulse response filters. The spatial filtering convolutional layer may generate samples from the first data and the second data and stride across the samples in time to generate the spatial filtered output. The spatial filtering convolutional layer may filter the first data and the second data using short-duration multichannel time convolution filters which map multichannel inputs to a single channel. In some implementations, the spatial filtering convolutional layer receives data representing three or more raw audio signals for the same period of time.
- A spectral filtering convolutional layer in the neural network generates a spectral filtered output using the spatial filtered output (206). The spectral filtering convolutional layer may generate the spectral filtered output using a second time convolution with a second duration longer than a first duration of the first time convolution used by the spatial filtering convolutional layer. The spectral filtered convolutional layer may pool the spatial filtered output in time, e.g., using non-overlapping max pooling with a pooling size of three. The spectral filtered convolutional layer may apply a rectified non-linearity to the pooled output.
- One or more additional layers in the neural network process the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal (208). For instance, one or more long short-term memory layers, e.g., three long short-term memory layers, and a deep neural network layer may process the spectral filtered output. The deep neural network may generate a prediction about a sub-word unit encoded in both of the raw audio signals. In some implementations, the deep neural network may generate a prediction about a word encoded in both of the raw audio signals.
- The neural network causes a device to perform an action using the predicted sub-word units in response to processing, by the additional layers in the neural network, the spectral filtered output (210). For example, the neural network provides the predicted words or sub-word units to an application that analyzes the words or sub-word units to determine whether the raw audio signals encoded a command, such as a command for an application or device to launch another application or perform a task associated with an application. In some examples, the neural network may combine multiple sub-word units to generate words and provide the generated words, or data representing the words, to the application.
- In some implementations, the
process 200 can include additional steps, fewer steps, or some of the steps can be divided into multiple steps. For example, the neural network may performsteps 202 through 208 without performingstep 210. -
FIG. 3 is a flow diagram of aprocess 300 for training a neural network that includes a spatial filtering convolutional layer and a spectral filtering convolutional layer. For example, theprocess 300 can be used by the multichannelspeech recognition system 100. - A system predicts clean log-mel features by processing two clean audio signals for the same period of time, each encoding one or more sub-word units, using a spatial filtering convolutional layer, a spectral filtering convolutional layer, and a multi-task module each included in a neural network (302). For example, a neural network may use the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module, e.g., one or more long short-term memory layers and a deep neural network layer, to predict the clean log-mel features. The neural network may receive the raw, clean audio signals and pass the raw, clean audio signals to the spatial filtering convolutional layer to generate spatial filtered output. The neural network may provide the spatial filtered output to the spectral filtering convolutional layer to generate spectral filtered output. The neural network may provide the spectral filtered output to the multi-task module to generate the clean log-mel features.
- The raw, clean audio signal does not include noise, e.g., background noise, or noise above a threshold level. The system may receive the two raw, clean audio signals from a single device, e.g., which generated the signals using two microphones, each of which generated one of the raw, clean audio signals. In some examples, the system may retrieve the raw, clean audio signals from a memory when the two raw, clean audio signals were previously generated from two microphones to represent a stereo audio signal. The two raw, clean audio signals may be generated using any appropriate method to create stereo audio signals.
- A system predicts context dependent states by processing two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and one or more denoising layers (304). For instance, the neural network uses the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the denoising layers to predict the context dependent states. The neural network may receive a raw, noisy audio signal and pass the raw, noisy audio signal to the spatial filtering convolutional layer to generate spatial filtered output. The neural network may provide the spatial filtered output to the spectral filtering convolutional layer to generate spectral filtered output. The neural network may provide the spectral filtered output to the denoising layers, e.g., one or more deep neural network layers different than the deep neural network layer that processed the raw, clean audio signal. The denoising layers may generate a prediction of the context dependent states for the raw, noisy audio signal using the spectral filtered output. The system may generate the raw, noisy audio signal from the raw, clean audio signal by adding noise to the raw, clean audio signal, e.g., by adding noise above the threshold level to the raw, clean audio signal.
- A system determines a first gradient using a first accuracy of the clean log-mel features (306). For example, the system compares the predicted clean log-mel features (determined using step 302) with expected log-mel features to determine the first accuracy. The system may use any appropriate method to determine the first gradient, the first accuracy, or both. In some examples, the system may select a gradient to minimize the error between the predicted clean log-mel features and the expected log-mel features.
- A system determines a second gradient using a second accuracy of the context dependent states (308). For instance, the system compares the predicted context dependent states (determined using step 304) with expected context dependent states to determine the second accuracy. The system may use any appropriate method to determine the second gradient, the second accuracy, or both. In some examples, the system may select a gradient to minimize the error between the predicted context dependent states and the expected context dependent states.
- A system generates a final gradient by weighting the first gradient, weighting the second gradient, and combining the weighted first gradient and the weighted second gradient (310). The system may determine weights for each of the first gradient and the second gradient using an importance of the corresponding task. In some examples, the system may use Equation (2) above to weight the first gradient and the second gradient.
- A system backward propagates the final gradient to train the neural network (312). For instance, the system uses gradient descent with the final gradient to train the neural network.
- The order of steps in the
process 300 described above is illustrative only, and the training of the neural network can be performed in different orders. For example, the system may predict the context dependent states and then predict the clean log-mel features. The system may determine the second gradient and then determine the first gradient. In some examples, the system may predict the clean log-mel features and then determine the first gradient before predicting the content dependent states. In some implementations, the system may predict the context dependent states and determine the second gradient and then predict the clean log-mel features. - In some implementations, the
process 300 can include additional steps, fewer steps, or some of the steps can be divided into multiple steps. For example, the system may provide the neural network, e.g., the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module, to a device for predicting sub-word units or words encoded in both a first raw audio signal and a second raw audio signal for the same period of time. In some examples, the device may predict words encoded in multiple raw audio signals. The device may predict words encoded in three or more raw audio signals. - In some implementations, one or more servers may train the neural network. Once the neural network is trained, at least one of the servers may provide the neural network to a device, e.g., a user device, for use predicting words or sub-word units included in multiple raw audio signals.
- In some implementations, a single device may train and use the neural network to predict the words or sub-word units. In some implementations, a first device may train the neural network and provide the neural network to a second, different device, for use.
- In general, the techniques discussed with respect to
FIGS. 1-3 can be embodied in methods that include the actions of receiving, by a neural network in a speech recognition system, first data representing a first raw audio signal and second data representing a second raw audio signal, the first raw audio signal and the second raw audio signal for the same period of time, generating, by a spatial filtering convolutional layer in the neural network, a spatial filtered output the first data and the second data, generating, by a spectral filtering convolutional layer in the neural network, a spectral filtered output using the spatial filtered output, and processing, by one or more additional layers in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal. - In general, another innovative aspect can be embodied in methods that include the actions of training, by a speech recognition system, a neural network that includes a spatial filtering convolutional layer and a spectral filtering convolutional layer by: predicting clean log-mel features by processing two clean audio signals for the same period of time, each encoding one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and a multi-task module, predicting context dependent states by processing a noisy audio signal encoding the one or more sub-word units using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and one or more denoising layers, determining a first gradient using a first accuracy of the clean log-mel features, determining a second gradient using a second accuracy of the context dependent states, generating a final gradient by weighting the first gradient and weighting the second gradient and combining the weighted first gradient and the weighted second gradient, and backward propagating the final gradient to train the neural network.
- The foregoing and other embodiments can each optionally include one or more of the following features, alone or in combination. The method may include causing a device to perform an action using the predicted sub-word units in response to processing, by the additional layers in the neural network, the spectral filtered output.
- In some implementations, generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include filtering the first data and the second data using short-duration multichannel time convolution filters which map multichannel inputs to a single channel. Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include filtering the first data and the second data using multiple finite impulse response filters. Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include filtering the first data using each of a plurality of filters, and filtering the second data using each of the plurality of filters. Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include generating a first quantity of first samples from the first data, generating a second quantity of second samples from the second data, the second quantity and the first quantity being the same quantity, striding by one in time across each of the first samples to generate first spatial output, and striding by one in time across each of the second samples to generate second spatial output. Generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include summing first values in the first spatial output with corresponding values in the second spatial output to generate an output feature map. The spatial filtered output may be the output feature map.
- In some implementations, generating, by the spatial filtering convolutional layer in the neural network, the spatial filtered output the first data and the second data may include generating the spatial filtered output using a first time convolution. Generating, by the spectral filtering convolutional layer in the neural network, the spectral filtered output using the spatial filtered output may include generating the spectral filtered output using a second time convolution with a second duration longer than a first duration of the first time convolution. Generating, by the spectral filtering convolutional layer in the neural network, the spectral filtered output using the spatial filtered output may include pooling the spatial filtered output in time to generate a pooled output. Pooling the spatial filtered output in time to generate the pooled output may include non-overlapping max pooling the spatial filtered output along the frequency axis. Pooling the spatial filtered output in time to generate the pooled output may include using a pooling size of three to generate the pooled output. Generating, by the spectral filtering convolutional layer in the neural network, the spectral filtered output may include generating the spectral filtered output by applying a rectified non-linearity to the pooled output.
- In some implementations, processing, by the one or more additional layers in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal may include processing, by a long short-term memory deep neural network included in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal. Processing, by the long short-term memory deep neural network included in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal may include processing, by a linear low-rank projection layer in the neural network, the spectral filtered output to generate a first intermediate output, and processing, by a long short-term memory layer in the long short-term memory deep neural network, the first intermediate output to generate a second intermediate output. Processing, by the long short-term memory deep neural network included in the neural network, the spectral filtered output to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal may include processing, by a deep neural network layer in the long short-term memory deep neural network, data from the second intermediate output to predict the sub-word units encoded in both the first raw audio signal and the second raw audio signal.
- In some implementations, the method may include generating each of the noisy audio signals from a respective one of the clean audio signals by adding noise to the respective clean audio signal. Predicting the clean log-mel features by processing the two clean audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module may include generating, by the spatial filtering convolutional layer, a spatial filtered output. Predicting the clean log-mel features by processing the two clean audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module may include generating, by the spectral filtering convolutional layer, a spectral filtered output using the spatial filtered output. Predicting the clean log-mel features by processing the two clean audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module may include processing, by the multi-task module, the spectral filtered output to predict clean log-mel features for the clean audio signal.
- In some implementations, predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include generating, by the spatial filtering convolutional layer, a spatial filtered output. Predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include generating, by the spectral filtering convolutional layer, a spectral filtered output using the spatial filtered output. Predicting the context dependent states by processing the two noisy audio signals for the same period of time, each encoding the one or more sub-word units, using the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the one or more denoising layers may include processing, by the denoising layers, the spectral filtered output to predict dependent states for the noisy audio signal. The method may include providing the spatial filtering convolutional layer, the spectral filtering convolutional layer, and the multi-task module to a device for predicting sub-word units encoded in both a first raw audio signal and a second raw audio signal for the same period of time.
-
FIG. 4 is a diagram that illustrates an example of asystem 400 for speech recognition using neural networks. Thesystem 400 includes aclient device 410, acomputing system 420, and anetwork 430. In the example, thecomputing system 420 provides information about an utterance and additional information to a neural network acoustic model 440. Thecomputing system 420 uses output from the neural network acoustic model 440 to identify a transcription for the utterance. - In the
system 400, theclient device 410 can be, for example, a desktop computer, laptop computer, a tablet computer, a wearable computer, a cellular phone, a smart phone, a music player, an e-book reader, a navigation system, or any other appropriate computing device. The functions performed by thecomputing system 420 can be performed by individual computer systems or can be distributed across multiple computer systems. Thenetwork 430 can be wired or wireless or a combination of both and can include the Internet. - In the illustrated example, a
user 402 of theclient device 410 speaks an utterance 403, and theclient device 410 records audio that includes the speech. Theclient device 410 obtains multiple channels of audio data for the utterance 403, for example, recorded data from two or more microphones that are located at different spatial positions with respect to the user 403. Theclient device 410 transmits themulti-channel audio data 412 to thecomputing system 420 over thenetwork 430. Themulti-channel audio data 412 can include audio waveform data, which may or may not be compressed, for each of multiple audio channels. - The
computing system 420 receives themultichannel audio data 412 and obtains information corresponding to different time periods or windows of the data. For example, thecomputing system 420 may obtainaudio data 422 for a first channel and audio data 426 for a second channel. For each channel, thecomputing system 420 may divide the data into segments that represent acoustic properties of, for example, a 10 millisecond (ms), 25 ms, or 50 ms portion of theaudio signal 412. - In some implementations, such as discussed in more detail with respect to
FIG. 5 , theaudio data 422, 426 is frequency-domain audio data. For example, thecomputing system 420 may perform a Fourier transform on segments of the audio received from theclient device 410, so that the inputs to the neural network acoustic model 440 are frequency-domain representations, e.g., vectors representing frequency-domain characteristics, of portions of the audio that includes the utterance 403. - In the illustrated example, the
computing system 420 inputs theaudio data 422, 426 to the neural network acoustic model 440. The neural network acoustic model 440 can be a neural network that has been trained to act as an acoustic model. For example, the neural network acoustic model 440 indicates likelihoods that feature vectors correspond to different speech units when the feature vectors and certain types of additional information are provided. The neural network acoustic model 440 can represent any of the neural network models orsystems - The neural network acoustic model 440 produces
outputs 442 in response to theaudio data 422, 426, and thecomputing system 420 uses theoutputs 442 to identify atranscription 460 for theaudio signal 412. As discussed above, theoutputs 442 may indicate likelihoods that specific sub-word units, e.g., phones or HMM states of phones, which may be context-dependent or context-independent, describe the audio data in a portion of the utterance. For example, thecomputing system 420 may provide theoutputs 442 to, for example, weighted finite state transducers that approximate a hidden Markov model (HMM), which may include information about a lexicon indicating the phonetic units of words, a grammar, and a language model that indicates likely sequences of words. The output of the HMM can be a word lattice from which thecomputing system 420 derives atranscription 460. Thecomputing system 420 then provides thetranscription 460 to theclient device 410 over thenetwork 430. - The
client device 410 can then perform an action in response to receiving thetranscription 460. For example, theclient device 410 may display thetranscription 460, include the text of thetranscription 460 in a message or input field, obtain search results using thetranscription 460 as a query, perform a voice command indicated by thetranscription 460, open an application identified using thetranscription 460, provide thetranscription 460 to an application or another device, or otherwise act in response to receiving thetranscription 460. - The example of
FIG. 4 shows the speech recognition process being performed by a server that uses the neural network acoustic model 440. In some implementations, theclient device 410 or another user device stores the neural network acoustic model 440 and performs the speech recognition processing locally, without sending audio data over a network for processing. -
FIGS. 5 and 6 show examples of multichannelspeech recognition systems - The
system 500 generally includes a multichannel spatialfiltering convolutional layer 502, a frequency-processing module 504, and a long short-term memory deep neural network (LDNN) 512. In some implementations, theLDNN 512 can be a convolutional LDNN. TheLDNN 512 generally includes three long-short term memory (LSTM) layers 516 a-c, and a deep neural network (DNN)layer 516 d. In general, thesystem 500 can be used to perform both spatial and spectral filtering in the frequency domain. The input to the spatialfiltering convolutional layer 502 can be frequency domain data, denoted by X1 and X2. - The
system 600 generally includes several of the same components as thesystem 500, except that thesystem 600 includes a spatialfiltering convolutional layer 602 that generates a spatial filtered output from multichannel audio input using time-domain signal processing computations. More particularly, in thesystem 600, only the spectral filtering is performed in the frequency domain. The input to the spatialfiltering convolutional layer 602 can be time domain data, denoted by x1 and x2. A Fourier transform process (not shown) may be used to convert the results of spatial filtering before providing the data to the frequency-processing module 504. - Several techniques for reducing the computational demands of a factored multi-channel acoustic model processing can be used. Some techniques adjust the parameters and model structure used for time-domain processing. For example, the acoustic model shown in
FIG. 5 can be enhanced by reducing the number of look directions and/or increasing the stride size for convolutions in the time domain. In addition, or as an alternative, the time-domain convolution processing for the spatial filtering layer, the spectral filtering layer, or both can be replaced with more efficient frequency domain processing. For example, time-domain convolutions in the model ofFIG. 1 can be replaced with element-wise multiplication in the frequency domain.FIG. 5 shows an example of anacoustic model 500 that uses frequency domain processing instead of time-domain convolution for both spatial filtering and spectral filtering.FIG. 6 shows an example of anacoustic model 600 that uses frequency-domain processing instead of time-domain convolution to perform spectral filtering, but retains time-domain processing for spatial filtering. - As discussed above, multichannel ASR systems often use separate modules to perform recognition. First, microphone array speech enhancement is applied, typically broken into localization, beamforming and post-filtering stages. The resulting single channel enhanced signal is passed to an acoustic model. A commonly used enhancement technique is filter-and-sum beamforming, which begins by aligning signals from different microphones in time (via localization) to adjust for the propagation delay from the target speaker to each microphone. The time-aligned signals are then passed through a filter (different for each microphone) and summed to enhance the signal from the target direction and to attenuate noise coming from other directions.
- Instead of using independent modules for multichannel enhancement and acoustic modeling, optimizing both jointly has been shown to improve performance, both for Gaussian Mixture Models and more recently for neural networks. The system includes a “factored” raw waveform model, which passes a multichannel waveform signal into a set of short-duration multichannel time convolution filters which map the inputs down to a single channel, with the idea that the network would learn to perform broadband spatial filtering with these filters. By learning several filters in this “spatial filtering layer”, it can be hypothesized that the network will learn filters tuned to multiple different look directions. The single channel waveform output of each spatial filter is passed to a longer-duration time convolution “spectral filtering layer” intended to perform finer frequency resolution spectral decomposition analogous to a time-domain auditory filterbank. The output of this spectral filtering layer is passed to a CLDNN acoustic model.
- One of the problems with the factored model is its high computational cost. For example, a model may use around 20M parameters but requires 160M multiplies, with the bulk of the computation occurring in the “spectral filtering layer”. The number of filters in this layer is large and the input feature dimension is large compared to the filter size. Furthermore, this convolution is performed for each of 10 look directions in some implementations. This specification explores various approaches to speed up this model without affecting accuracy.
- First, the specification describes speeding up the model in the time domain. Using behavior observed with convolutions, by striding filters and limiting the look directions one is able to reduce the required number of multiplies by a factor of 4.5 with no loss in accuracy.
- Next, since convolution in time is equivalent to an element-wise dot product in frequency, the specification describes a factored model that operates in the frequency domain. Two variations on this idea are described, one which performs filtering via a Complex Linear Projection (CLP) layer that uses phase information from the input signal, and another which performs filtering with a Linear Projection of Energy (LPE) layer that ignores phase. Both the CLP and LPE factored models perform similarly, and are able to reduce the number of multiplies by an additional 25% over time domain model, with similar performance in terms of word error rate (WER). A detailed analysis on the differences in learning the factored model in the time and frequency domains is provided. This duality opens the door to further improve the model. For example increasing the input window size improves WER, but is much more computationally efficient in the frequency domain compared to the time domain.
- The raw waveform factored multichannel network, shown in
FIG. 5 , factors spatial filtering and filterbank feature extraction into separate layers. The motivation for this architecture is to design the first layer to be spatially selective, while implementing a frequency decomposition shared across all spatial filters in the second layer. The output of the second layer is the Cartesian product of all spatial and spectral filters. - The first layer, denoted by tConv1 in
FIG. 5 , implementsEquation 1 and performs a multichannel convolution in time using a FIR spatial filterbank. First, implementing the equation includes taking a small window of the raw waveform of length M samples for each channel C, denoted as {x1[t]; x2[t], . . . , xC[t]} fort Σ 1 , . . . , M. - The signal is passed through a bank of P spatial filters which convolve each channel c with a filter containing N taps: hc=hc 1, hc 2, . . . , hc P}. The convolutional filter can be strided by 1 in time across M samples and perform a “same” convolution, such that the output for each convolutional filter remains length M. Finally, the outputs from each channel are summed to create an output feature of size y[t] ∈
-
- The second convolution layer, denoted by tConv2 in
FIG. 1 , consists of longer duration single channel filters. This layer is designed to learn a decomposition with better frequency resolution than the first layer but is incapable of performing any spatial filtering since the input contains a single channel. This specification includes performing a time convolution on each of these P output signals from the first layer, as in an example single channel time convolution layer. The parameters of this time convolution are shared across all P feature maps or “look directions”. Other steps include denoting this layer's filters as g ∈ -
- The stride S can be set to 1. The output of the spectral convolution layer for each look direction p and each filter f is given by Equation 4.
-
w f p [t]=y p [t]*gf (4) - The filterbank output is then max-pooled in time thereby discarding short-time (i.e. phase) information, over the entire time length of the output signal frame, producing an output of
dimension 1×F×P. This is followed by a rectifier nonlinearity and stabilized logarithm compression1, to produce a frame-level feature vector at frame l: zl ∈ - To understand where the computational complexity lies in the factored model, the number of multiplications in the spatial convolution layer from Equation 3 can be counted. A “same” convolution between filter h of length N, and input xi of length M requires M×N multiplies. Computing this convolution for each channel c in each look direction p results in a total of P×C×M×N multiplies for the first layer. Using C=2, P=10, M=81 (corresponding to 5 ms filters) and N=561 (35 ms input size), corresponds to 908.8K multiplies.
- Next, a count of the number of multiplies for the spectral convolution layer can be determined, where the spectral convolution layer is described by Equation 4. A “valid” convolution between filter g of length L, stride S and input yi of length N requires
-
- multiplies. Computing this convolution for each look direction p and each filter f results in a total of P×F×L×(N−L+1)/S multiplies. Using N=561 (35 ms input size), L=401 (25 ms filters) P=10, S=1, and F=128, this corresponds to 82.6M multiplies.
-
TABLE 1 Computational Complexity in Time Layer Total Multiplies In Practice [1] spatial P × C × M × N 908.8K spectral P × F × L × (N − L + 1)/S 82.6M CLDNN — 19.5M - The remainder of the CLDNN model uses approximately 20M multiplies, leaving the majority of the computation of the factored model in the spectral filtering layer tConv2.
- Reducing any of the parameters P, N, L, F or increasing S will decrease the amount of computation. Earlier innovations showed that reducing the input window size N, filter size L or filter outputs F degrades performance. Computational cost (and the number of parameters) can be reduced by reducing the number of look directions P and increasing in the stride S without degrading performance. For example, using a stride of S=4 reduces the number of multiplies by 4 and has been shown to be a good trade-off between cost and accuracy in other applications.
- Regarding
FIGS. 4 and 5 , as an alternative to tuning the parameters of the time domain model, the factored model can be implemented in the frequency domain in which quadratic-time time-domain convolutions can be implemented much more efficiently as linear-time element-wise products. In some implementations, a frequency processing module can be used, at least in part, to implement the factored model in the frequency domain. - For frame index l and channel c, denote Xc[l] ∈
-
-
-
W j p [l]=Y p [l]·G f (6) - The frequency-domain equivalent to the max-pooling operation in the time domain model would be to take the inverse FFT of Wj p[l] and performing the same pooling operation in the time domain, which is computationally expensive to do for each look direction p and filter output f. As an alternative recently proposed the Complex Linear Projection (CLP) model which performs average pooling in the frequency domain and results in similar performance to a single channel raw waveform model. Similar to the waveform model the pooling operation is followed by a pointwise absolute-value non-linearity and log compression. The 1-dimensional output for look direction p and filter f is given by:
-
- The specification also describes an alternative decomposition that is motivated by the log-mel filterbank. Given the complex-valued FFT for each look direction, Y p[l], one can first compute the energy at each time-frequency bin (l, k):
-
Ŷ |p [l, k]=|Y p [l, k]| 2 (8) - After applying a power compression with α=0.1, Ŷp[l] is linearly projected down to an F dimensional space, in a process similar to the mel filterbank, albeit with learned filter shapes:
-
Z f p [l]=G f×(Ŷ p [l])α (9) - As in the other models, the projection weights G ∈
- The total number of multiplies for the frequency domain spatial layer is 4×P×C×K, where 4 comes from the complex multiplication operation. The total number of multiplies for the CLP spectral layer is be 4×P×F×K. Since the LPE model operates on real-valued FFT energies, the total number of multiplies for the LPE spectral layer is reduced to P×F×K.
- Using 32 ms input frames for xc[t] and a 512 point FFT results in K=257 frequency-band Xc. Keeping the same parameters as discussed above, P=10, C=2 and F=128, Table 2 shows the total number of multiplies needed for each frequency model in practice. Comparing the number of multiplies used in the spectral filtering layer to the waveform model in Table 2 it can be shown that the CLP model's computational requirements are about 80-times smaller than the baseline time domain model. For the LPE model, this reduction is about 250-times.
-
TABLE 2 Computational Complexity in Frequency Layer Total Multiplies In Practice spatial 4 × P × C × K 20.6K spectral-CLP 4 × P × F × K 1.32M spectral-LPE P × F × K 330.2K -
FIG. 5 shows anexample system 500 in which both spatial and spectral filtering are performed in the frequency domain.FIG. 6 shows an example of asystem 600 in which only the spectral filtering is performed in the frequency domain, while the spatial filtering can be performed in the time-domain with enhancements to, e.g., the number of look directions and stride parameters. In thesystem 600, a discrete Fourier transform can be applied to spatial filtering output before processing in the frequency processing module. - Some example implementations can involve use of approximately 2,000 hours of noisy training data consisting of 3 million English utterances. This data set is created by artificially corrupting clean utterances using a room simulator, adding varying degrees of noise and reverberation. The clean utterances are anonymized and hand-transcribed voice search queries, and are representative of Google's voice search traffic. Noise signals, which include music and ambient noise sampled from YouTube and recordings of “daily life” environments, are added to the clean utterances at SNRs ranging from 0 to 20 dB. Reverberation is simulated using an image model—room dimensions and microphone array positions are randomly sampled from 100 possible room configurations with RT60S ranging from 400 to 900 ms. The simulation uses a 2-channel linear microphone array, with inter-microphone spacing of 14 cm. Both noise and target speaker locations change between utterances; the distance between the sound source and the microphone array varies between 1 to 4 meters. The speech and noise azimuths were uniformly sampled from the range of ±45 degrees and ±90 degrees, respectively, for each utterance.
- The evaluation set consists of a separate set of about 30,000 utterances (over 20 hours), and is created by simulating similar SNR and reverberation settings to the training set. The room configurations, SNR values, RT60 times, and target speaker and noise positions in the evaluation set differ from those in the training set, although the microphone array geometry between the training and simulated test sets is identical.
- All CLDNN models are trained with the cross-entropy (CE) and sequence training (ST) criterion, using asynchronous stochastic gradient descent (ASGD) optimization. All networks have 13,522 context dependent state output targets.
- Computational complexity of the raw waveform factored model can be reduced by varying look directions P and stride S. Table 3 shows the WER for CE and ST criteria, as well as the total number of multiplication and addition operations (M+A) for different parameter settings. The table shows that the number of operations can be reduced from 157.7M to 88.2M, by reducing the look directions P from 10 to 5, with no loss in accuracy. The stride can also be increased up to S=4 with no loss in accuracy after ST, which reduces multiplies from 88.2M to 42.5M. Depending on the implementation, the frequency convolution layer 110 from
FIG. 1 may be omitted. Removing the fConv layer from the CLDNN, which may not help on noisier training sets, reduces multiplies further. The frequency convolution layer is omitted from thesystems FIGS. 5 and 6 . However, the frequency convolution layer may be retained in some implementations. Overall, multiplies can be reduced from 157.7M to 35.1M, a factor of 4.5×. - Next, the performance of the frequency domain factored model is explored. Note this model does not have any fConv layer. A similar setting to the best configuration discussed above can be used, namely P=5 and F=128. The input window is 32 ms instead of 35 ms in the waveform model, as this allows us to take a M=512-point FFT at a sampling rate of 16 khZ. In some implementations, a 35 ms input requires a 1024-point FFT, and there is no performance difference between 32 ms and 35 ms raw waveform inputs.
-
TABLE 3 Raw waveform Factored Model Performance Spatial Spectral Total WER WER P S M + A M + A M + A CE ST 10 1 1.1M 124.0M 157.7M 20.4 17.2 5 1 525.6K 62.0M 88.2M 20.7 17.3 3 1 315.4K 37.2M 60.4M 21.6 — 5 2 525.6K 31.1M 57.4M 20.7 — 5 4 525.6K 15.7M 42.5M 20.7 17.3 5 6 525.6K 10.6M 36.8M 20.9 5 4 525.6K 15.7M 35.1M 20.4 17.1 no fConv - Table 4 shows that the performance of both the CLP and LPE factored models are similar. Furthermore, both models reduce the number of operations by a factor of 1.9× over the best waveform model from Table 3, with a small degradation in WER.
-
TABLE 4 Frequency Domain Factored Model Performance Spatial Spectral Total WER WER Model M + A M + A M + A CE ST CLP 10.3K 655.4K 19.6M 20.5 17.3 LPE 10.3K 165.1K 19.1M 20.7 17.2 - A comparison between learning in time vs. frequency shows some differences in the spatial responses (i.e., beam patterns) for the time and frequency domain spatial layers. Since the LPE and CLP models have the same spatial layer and the beam patterns were found to look similar, only the CLP model is plotted for simplicity. The beam patterns show the magnitude response in dB as a function of frequency and direction of arrival, i.e. each horizontal slice of the beam pattern corresponds to the filter's magnitude response for a signal coming from a particular direction. In each frequency band (vertical slice), lighter shades indicate that sounds from those directions are passed through, while darker shades indicate directions whose energy is attenuated. The figures show that the spatial filters learned in the time domain are band-limited, unlike those learned in the frequency domain. Furthermore, the peaks and nulls are aligned well across frequencies for the time domain filters.
- The differences between these models can further be seen in the magnitude responses of the spectral layer filters, as well as in the outputs of the spectral layers from different look directions plotted for an example signal. The magnitude responses in both time and CLP models look qualitatively similar, and learn bandpass filters with increasing center frequency. However, because the spatial layers in time and frequency are quite different, the spectral layer outputs in time are much more diverse in different spatial directions compared to the CLP model. In contrast to these models, the LPE spectral layer does not seem to learn bandpass filters.
- At some level, time-domain and frequency-domain representations are interchangeable, but they result in networks that are parameterized very differently. Even though the time and frequency models all learn different spatial filters, they all seem to have similar WERs. In addition, even though the spatial layer of the CLP and LPE models are different, they too seem to have similar performance. There are roughly 18M parameters in the CLDNN model that sits above the spatial/spectral layers, which accounts for over 90% of the parameters in the model. Any differences between the spatial layers in time and frequency are likely accounted for in the CLDNN part of the network.
- WER can be improved by increasing the window size (and therefore computational complexity) of the factored models. Specifically, since longer windows typically help with localization, using 64 ms input windows for both models can be explored. By reducing computational complexity in other aspects of the model, room is opened in the computational budget to add processing of larger windows, which can increase accuracy. With a 64 ms input, the frequency models require a 1024-point DFT. Table 5 shows that the frequency models improve the WER over using a smaller 32 ms input, and still perform roughly the same. However, the frequency model now has an even larger computational complexity savings of 2.7× savings compared to the time domain model.
-
TABLE 5 Results with a 64 ms Window Size Spatial Spectral Total WER Feat M + A M + A M + A ST time 906.1K 33.81M 53.6M 17.1 freq-CLP 20.5K 1.3M 20.2M 17.1 freq-LPE 20.5K 329.0K 19.3M 16.9 -
FIG. 7 is a flow diagram that illustrates an example of a process 700 for speech recognition using neural networks. More particularly, the process 700 relates to a process for predicting a sub-word unit encoded in two raw audio signals for the same period of time. The process 700 may be performed by a data processing apparatus, such as thecomputing system 420 described above or another data processing apparatus. - First data and second data are received by a neural network of a speech recognition system (702). The first data can represent a first raw audio signal and the second data can represent a second raw audio signal. The first raw audio signal and the second raw audio signal can each describe audio occurring at a same period of time.
- A spatial filtered output is generated using the first data and the second data (704). The spatial filtered output can be generated by a spatial filtering layer of the neural network. In some implementations, generating the spatial filtered output using the first data and the second data can include performing element-wise multiplications of frequency-domain representations of the first data and the second data with frequency domain representations of filters learned through training of the neural network.
- Using the spatial filtered output, a spectral filtered output is generated by a spectral filtering layer of the neural network (706). Generating the spectral filtered output can comprise processing frequency-domain data representing the spatial filtered output. In some implementations, generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can include generating filtered data by using an element-wise multiplication of (i) the frequency-domain data representing the spatial filtered output with (ii) frequency-domain representations of multiple filters.
- Additionally, in some implementations, generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can include performing a complex linear projection (CLP) of the filtered data in the frequency domain to generate a CLP output, and applying an absolute-value function and a log compression to the CLP output. Likewise, generating the spectral filtered output, by the spectral filtering layer of the neural network, using the spatial filtered output can also include performing a linear projection of energy using the filtered data.
- In some implementations, performing the linear projection of energy using the filtered data can include determining an energy value for each of multiple time-frequency bins. Moreover, performing the linear projection of energy using the filtered data can also include applying a power compression to the energy values to generate compressed energy values. Further still, performing the linear projection of energy using the filtered data can also include linearly projecting the compressed energy values using filters with learned filter parameters.
- The spectral filtered output is processed, by one or more additional layers of the neural network, to predict sub-word units encoded in both the first raw audio signal and the second raw audio signal (708).
- In response to processing the spectral filtered output by the additional layers of the neural network, a device can be caused to perform an action using the predicted sub-word units. In some implementations, the process 700 can include additional steps, fewer steps, or some of the steps can be divided into multiple steps.
- Embodiments of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry, in tangibly-embodied computer software or firmware, in computer hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions encoded on a tangible non-transitory program carrier for execution by, or to control the operation of, data processing apparatus. Alternatively or in addition, the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine-readable storage device, a machine-readable storage substrate, a random or serial access memory device, or a combination of one or more of them.
- The term “data processing apparatus” refers to data processing hardware and encompasses all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit). The apparatus can optionally include, in addition to hardware, code that creates an execution environment for computer programs, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, or a combination of one or more of them.
- A computer program, which may also be referred to or described as a program, software, a software application, a module, a software module, a script, or code, can be written in any form of programming language, including compiled or interpreted languages, or declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, or other unit suitable for use in a computing environment. A computer program may, but need not, correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data, e.g., one or more scripts stored in a markup language document, in a single file dedicated to the program in question, or in multiple coordinated files, e.g., files that store one or more modules, sub-programs, or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
-
FIG. 8 is a block diagram ofcomputing devices Computing device 800 is intended to represent various forms of digital computers, such as laptops, desktops, workstations, personal digital assistants, servers, blade servers, mainframes, and other appropriate computers.Computing device 850 is intended to represent various forms of mobile devices, such as personal digital assistants, cellular telephones, smartphones, smartwatches, head-worn devices, and other similar computing devices. The components shown here, their connections and relationships, and their functions, are meant to be exemplary only, and are not meant to limit implementations described and/or claimed in this document. -
Computing device 800 includes aprocessor 802,memory 804, astorage device 806, a high-speed interface 808 connecting tomemory 804 and high-speed expansion ports 810, and alow speed interface 812 connecting tolow speed bus 814 andstorage device 806. Each of thecomponents processor 802 can process instructions for execution within thecomputing device 800, including instructions stored in thememory 804 or on thestorage device 806 to display graphical information for a GUI on an external input/output device, such asdisplay 816 coupled tohigh speed interface 808. In other implementations, multiple processors and/or multiple buses may be used, as appropriate, along with multiple memories and types of memory. Also,multiple computing devices 800 may be connected, with each device providing portions of the necessary operations (e.g., as a server bank, a group of blade servers, or a multi-processor system). - The
memory 804 stores information within thecomputing device 800. In one implementation, thememory 804 is a computer-readable medium. In one implementation, thememory 804 is a volatile memory unit or units. In another implementation, thememory 804 is a non-volatile memory unit or units. - The
storage device 806 is capable of providing mass storage for thecomputing device 800. In one implementation, thestorage device 806 is a computer-readable medium. In various different implementations, thestorage device 806 may be a floppy disk device, a hard disk device, an optical disk device, or a tape device, a flash memory or other similar solid state memory device, or an array of devices, including devices in a storage area network or other configurations. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as thememory 804, thestorage device 806, or memory onprocessor 802. - The
high speed controller 808 manages bandwidth-intensive operations for thecomputing device 800, while thelow speed controller 812 manages lower bandwidth-intensive operations. Such allocation of duties is exemplary only. In one implementation, the high-speed controller 808 is coupled tomemory 804, display 816 (e.g., through a graphics processor or accelerator), and to high-speed expansion ports 810, which may accept various expansion cards (not shown). In the implementation, low-speed controller 812 is coupled tostorage device 806 and low-speed expansion port 814. The low-speed expansion port, which may include various communication ports (e.g., USB, Bluetooth, Ethernet, wireless Ethernet) may be coupled to one or more input/output devices, such as a keyboard, a pointing device, a scanner, or a networking device such as a switch or router, e.g., through a network adapter. - The
computing device 800 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as astandard server 820, or multiple times in a group of such servers. It may also be implemented as part of arack server system 824. In addition, it may be implemented in a personal computer such as alaptop computer 822. Alternatively, components fromcomputing device 800 may be combined with other components in a mobile device (not shown), such asdevice 850. Each of such devices may contain one or more ofcomputing device multiple computing devices -
Computing device 850 includes aprocessor 852,memory 864, an input/output device such as adisplay 854, acommunication interface 866, and atransceiver 868, among other components. Thedevice 850 may also be provided with a storage device, such as a microdrive or other device, to provide additional storage. Each of thecomponents - The
processor 852 can process instructions for execution within thecomputing device 850, including instructions stored in thememory 864. The processor may also include separate analog and digital processors. The processor may provide, for example, for coordination of the other components of thedevice 850, such as control of user interfaces, applications run bydevice 850, and wireless communication bydevice 850. -
Processor 852 may communicate with a user throughcontrol interface 858 anddisplay interface 856 coupled to adisplay 854. Thedisplay 854 may be, for example, a TFT LCD display or an OLED display, or other appropriate display technology. Thedisplay interface 856 may comprise appropriate circuitry for driving thedisplay 854 to present graphical and other information to a user. Thecontrol interface 858 may receive commands from a user and convert them for submission to theprocessor 852. In addition, anexternal interface 862 may be provide in communication withprocessor 852, so as to enable near area communication ofdevice 850 with other devices.External interface 862 may provide, for example, for wired communication (e.g., via a docking procedure) or for wireless communication (e.g., via Bluetooth or other such technologies). - The
memory 864 stores information within thecomputing device 850. In one implementation, thememory 864 is a computer-readable medium. In one implementation, thememory 864 is a volatile memory unit or units. In another implementation, thememory 864 is a non-volatile memory unit or units.Expansion memory 874 may also be provided and connected todevice 850 throughexpansion interface 872, which may include, for example, a SIMM card interface.Such expansion memory 874 may provide extra storage space fordevice 850, or may also store applications or other information fordevice 850. Specifically,expansion memory 874 may include instructions to carry out or supplement the processes described above, and may include secure information also. Thus, for example,expansion memory 874 may be provide as a security module fordevice 850, and may be programmed with instructions that permit secure use ofdevice 850. In addition, secure applications may be provided via the SIMM cards, along with additional information, such as placing identifying information on the SIMM card in a non-hackable manner. - The memory may include for example, flash memory and/or MRAM memory, as discussed below. In one implementation, a computer program product is tangibly embodied in an information carrier. The computer program product contains instructions that, when executed, perform one or more methods, such as those described above. The information carrier is a computer- or machine-readable medium, such as the
memory 864,expansion memory 874, or memory onprocessor 852. -
Device 850 may communicate wirelessly throughcommunication interface 866, which may include digital signal processing circuitry where necessary.Communication interface 866 may provide for communications under various modes or protocols, such as GSM voice calls, SMS, EMS, or MMS messaging, CDMA, TDMA, PDC, WCDMA, CDMA2000, or GPRS, among others. Such communication may occur, for example, through radio-frequency transceiver 868. In addition, short-range communication may occur, such as using a Bluetooth, WiFi, or other such transceiver (not shown). In addition,GPS receiver module 870 may provide additional wireless data todevice 850, which may be used as appropriate by applications running ondevice 850. -
Device 850 may also communicate audibly usingaudio codec 860, which may receive spoken information from a user and convert it to usable digital information.Audio codec 860 may likewise generate audible sound for a user, such as through a speaker, e.g., in a handset ofdevice 850. Such sound may include sound from voice telephone calls, may include recorded sound (e.g., voice messages, music files, etc.) and may also include sound generated by applications operating ondevice 850. - The
computing device 850 may be implemented in a number of different forms, as shown in the figure. For example, it may be implemented as acellular telephone 880. It may also be implemented as part of asmartphone 882, personal digital assistant, or other similar mobile device. - Various implementations of the systems and techniques described here can be realized in digital electronic circuitry, integrated circuitry, specially designed ASICs (application specific integrated circuits), computer hardware, firmware, software, and/or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and/or interpretable on a programmable system including at least one programmable processor, which may be special or general purpose, coupled to receive data and instructions from, and to transmit data and instructions to, a storage system, at least one input device, and at least one output device.
- These computer programs (also known as programs, software, software applications or code) include machine instructions for a programmable processor, and can be implemented in a high-level procedural and/or object-oriented programming language, and/or in assembly/machine language. As used herein, the terms “machine-readable medium” “computer-readable medium” refers to any computer program product, apparatus and/or device (e.g., magnetic discs, optical disks, memory, Programmable Logic Devices (PLDs)) used to provide machine instructions and/or data to a programmable processor, including a machine-readable medium that receives machine instructions as a machine-readable signal. The term “machine-readable signal” refers to any signal used to provide machine instructions and/or data to a programmable processor.
- To provide for interaction with a user, the systems and techniques described here can be implemented on a computer having a display device (e.g., a CRT (cathode ray tube) or LCD (liquid crystal display) monitor) for displaying information to the user and a keyboard and a pointing device (e.g., a mouse or a trackball) by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well; for example, feedback provided to the user can be any form of sensory feedback (e.g., visual feedback, auditory feedback, or tactile feedback); and input from the user can be received in any form, including acoustic, speech, or tactile input.
- The systems and techniques described here can be implemented in a computing system that includes a back-end component (e.g., as a data server), or that includes a middleware component (e.g., an application server), or that includes a front-end component (e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here), or any combination of such back-end, middleware, or front-end components. The components of the system can be interconnected by any form or medium of digital data communication (e.g., a communication network). Examples of communication networks include a local area network (“LAN”), a wide area network (“WAN”), and the Internet.
- The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client-server relationship to each other.
- A number of embodiments have been described. Nevertheless, it will be understood that various modifications may be made without departing from the spirit and scope of the invention. For example, various forms of the flows shown above may be used, with steps re-ordered, added, or removed. Also, although several applications of the payment systems and methods have been described, it should be recognized that numerous other applications are contemplated. Accordingly, other embodiments are within the scope of the following claims.
- While this specification contains many specific implementation details, these should not be construed as limitations on the scope of what may be claimed, but rather as descriptions of features that may be specific to particular embodiments. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely, various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover, although features may be described above as acting in certain combinations and even initially claimed as such, one or more features from a claimed combination can in some cases be excised from the combination, and the claimed combination may be directed to a subcombination or variation of a subcombination.
- Similarly, while operations are depicted in the drawings in a particular order, this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order, or that all illustrated operations be performed, to achieve desirable results. In certain circumstances, multitasking and parallel processing may be advantageous. Moreover, the separation of various system modules and components in the embodiments described above should not be understood as requiring such separation in all embodiments, and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.
- Particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. For example, the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example, the processes depicted in the accompanying figures do not necessarily require the particular order shown, or sequential order, to achieve desirable results. In some cases, multitasking and parallel processing may be advantageous.
Claims (20)
Priority Applications (3)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US15/350,293 US10224058B2 (en) | 2016-09-07 | 2016-11-14 | Enhanced multi-channel acoustic models |
US16/278,830 US11062725B2 (en) | 2016-09-07 | 2019-02-19 | Multichannel speech recognition using neural networks |
US17/303,822 US11783849B2 (en) | 2016-09-07 | 2021-06-08 | Enhanced multi-channel acoustic models |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US201662384461P | 2016-09-07 | 2016-09-07 | |
US15/350,293 US10224058B2 (en) | 2016-09-07 | 2016-11-14 | Enhanced multi-channel acoustic models |
Related Child Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/278,830 Continuation US11062725B2 (en) | 2016-09-07 | 2019-02-19 | Multichannel speech recognition using neural networks |
Publications (2)
Publication Number | Publication Date |
---|---|
US20180068675A1 true US20180068675A1 (en) | 2018-03-08 |
US10224058B2 US10224058B2 (en) | 2019-03-05 |
Family
ID=61280900
Family Applications (3)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US15/350,293 Active US10224058B2 (en) | 2016-09-07 | 2016-11-14 | Enhanced multi-channel acoustic models |
US16/278,830 Active 2037-03-03 US11062725B2 (en) | 2016-09-07 | 2019-02-19 | Multichannel speech recognition using neural networks |
US17/303,822 Active 2037-07-07 US11783849B2 (en) | 2016-09-07 | 2021-06-08 | Enhanced multi-channel acoustic models |
Family Applications After (2)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US16/278,830 Active 2037-03-03 US11062725B2 (en) | 2016-09-07 | 2019-02-19 | Multichannel speech recognition using neural networks |
US17/303,822 Active 2037-07-07 US11783849B2 (en) | 2016-09-07 | 2021-06-08 | Enhanced multi-channel acoustic models |
Country Status (1)
Country | Link |
---|---|
US (3) | US10224058B2 (en) |
Cited By (41)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20160284347A1 (en) * | 2015-03-27 | 2016-09-29 | Google Inc. | Processing audio waveforms |
US20180322865A1 (en) * | 2017-05-05 | 2018-11-08 | Baidu Online Network Technology (Beijing) Co., Ltd . | Artificial intelligence-based acoustic model training method and apparatus, device and storage medium |
US20180366107A1 (en) * | 2017-06-16 | 2018-12-20 | Baidu Online Network Technology (Beijing) Co., Ltd. | Method and device for training acoustic model, computer device and storage medium |
CN109523994A (en) * | 2018-11-13 | 2019-03-26 | 四川大学 | A kind of multitask method of speech classification based on capsule neural network |
US20190147855A1 (en) * | 2017-11-13 | 2019-05-16 | GM Global Technology Operations LLC | Neural network for use in speech recognition arbitration |
US20190172476A1 (en) * | 2017-12-04 | 2019-06-06 | Apple Inc. | Deep learning driven multi-channel filtering for speech enhancement |
CN109872720A (en) * | 2019-01-29 | 2019-06-11 | 广东技术师范学院 | It is a kind of that speech detection algorithms being rerecorded to different scenes robust based on convolutional neural networks |
US10339921B2 (en) * | 2015-09-24 | 2019-07-02 | Google Llc | Multichannel raw-waveform neural networks |
US20190206091A1 (en) * | 2017-12-29 | 2019-07-04 | Baidu Online Network Technology (Beijing) Co., Ltd | Method And Apparatus For Compressing Image |
CN110048972A (en) * | 2019-04-24 | 2019-07-23 | 燕山大学 | A kind of underwater sound orthogonal frequency division multiplexing channel estimation methods and system |
CN110491404A (en) * | 2019-08-15 | 2019-11-22 | 广州华多网络科技有限公司 | Method of speech processing, device, terminal device and storage medium |
US10529320B2 (en) | 2016-12-21 | 2020-01-07 | Google Llc | Complex evolution recurrent neural networks |
US10540961B2 (en) * | 2017-03-13 | 2020-01-21 | Baidu Usa Llc | Convolutional recurrent neural networks for small-footprint keyword spotting |
US10726830B1 (en) * | 2018-09-27 | 2020-07-28 | Amazon Technologies, Inc. | Deep multi-channel acoustic modeling |
CN111638249A (en) * | 2020-05-31 | 2020-09-08 | 天津大学 | Water content measuring method based on deep learning and application of water content measuring method in oil well exploitation |
EP3726529A1 (en) * | 2019-04-16 | 2020-10-21 | Fraunhofer Gesellschaft zur Förderung der Angewand | Method and apparatus for determining a deep filter |
CN112435652A (en) * | 2020-09-29 | 2021-03-02 | 江苏清微智能科技有限公司 | Voice keyword recognition system and method based on graph convolution neural network |
US20210074270A1 (en) * | 2019-09-06 | 2021-03-11 | Hyperconnect, Inc. | Keyword spotting apparatus, method, and computer-readable recording medium thereof |
CN112836788A (en) * | 2020-12-21 | 2021-05-25 | 中国电子科技集团公司第二十七研究所 | Low-power-consumption deep learning network method for interference type identification |
CN112885363A (en) * | 2019-11-29 | 2021-06-01 | 北京三星通信技术研究有限公司 | Voice sending method and device, voice receiving method and device and electronic equipment |
US20210295828A1 (en) * | 2020-03-19 | 2021-09-23 | International Business Machines Corporation | Audio-spectral-masking-deep-neural-network crowd search |
CN113744751A (en) * | 2021-08-16 | 2021-12-03 | 清华大学苏州汽车研究院（相城） | Multi-channel speech signal enhancement method applied to microphone array |
CN113763976A (en) * | 2020-06-05 | 2021-12-07 | 北京有竹居网络技术有限公司 | Method and device for reducing noise of audio signal, readable medium and electronic equipment |
CN113812173A (en) * | 2019-05-09 | 2021-12-17 | 索诺瓦有限公司 | Hearing device system and method for processing audio signals |
US11270696B2 (en) * | 2017-06-20 | 2022-03-08 | Bose Corporation | Audio device with wakeup word detection |
US11308973B2 (en) * | 2019-08-07 | 2022-04-19 | Samsung Electronics Co., Ltd. | Method for processing multi-channel audio signal on basis of neural network and electronic device |
US11322156B2 (en) * | 2018-12-28 | 2022-05-03 | Tata Consultancy Services Limited | Features search and selection techniques for speaker and speech recognition |
CN114495971A (en) * | 2022-02-25 | 2022-05-13 | 四川天中星航空科技有限公司 | Voice enhancement method for running neural network by adopting embedded hardware |
US11334612B2 (en) * | 2018-02-06 | 2022-05-17 | Microsoft Technology Licensing, Llc | Multilevel representation learning for computer content quality |
US11380312B1 (en) * | 2019-06-20 | 2022-07-05 | Amazon Technologies, Inc. | Residual echo suppression for keyword detection |
WO2022156655A1 (en) * | 2021-01-21 | 2022-07-28 | 腾讯科技（深圳）有限公司 | Voice call control method and apparatus, and computer-readable medium and electronic device |
US20220327769A1 (en) * | 2019-10-03 | 2022-10-13 | Google Llc | Neural light transport |
CN115188389A (en) * | 2021-04-06 | 2022-10-14 | 京东科技控股股份有限公司 | End-to-end voice enhancement method and device based on neural network |
CN115514343A (en) * | 2022-05-13 | 2022-12-23 | 浙江腾腾电气有限公司 | Power grid waveform filtering system and filtering method thereof |
CN115586254A (en) * | 2022-09-30 | 2023-01-10 | 陕西师范大学 | Method and system for identifying metal material based on convolutional neural network |
US11574628B1 (en) * | 2018-09-27 | 2023-02-07 | Amazon Technologies, Inc. | Deep multi-channel acoustic modeling using multiple microphone array geometries |
CN115810364A (en) * | 2023-02-07 | 2023-03-17 | 海纳科德（湖北）科技有限公司 | End-to-end target sound signal extraction method and system in sound mixing environment |
EP4243012A1 (en) * | 2022-03-10 | 2023-09-13 | Tuito | System and method for warning and control by voice recognition |
CN116994587A (en) * | 2023-09-26 | 2023-11-03 | 成都航空职业技术学院 | Training supervision system |
WO2023214983A1 (en) * | 2022-05-02 | 2023-11-09 | Tencent America LLC | Progressive contrastive learning framework for self-supervised speaker verification |
WO2023226839A1 (en) * | 2022-05-23 | 2023-11-30 | 维沃移动通信有限公司 | Audio enhancement method and apparatus, and electronic device and readable storage medium |
Families Citing this family (16)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US9721562B2 (en) | 2013-12-17 | 2017-08-01 | Google Inc. | Generating representations of acoustic sequences |
KR102151682B1 (en) * | 2016-03-23 | 2020-09-04 | 구글 엘엘씨 | Adaptive audio enhancement for multi-channel speech recognition |
US10096321B2 (en) * | 2016-08-22 | 2018-10-09 | Intel Corporation | Reverberation compensation for far-field speaker recognition |
US10657955B2 (en) * | 2017-02-24 | 2020-05-19 | Baidu Usa Llc | Systems and methods for principled bias reduction in production speech models |
US11133011B2 (en) * | 2017-03-13 | 2021-09-28 | Mitsubishi Electric Research Laboratories, Inc. | System and method for multichannel end-to-end speech recognition |
US10805740B1 (en) * | 2017-12-01 | 2020-10-13 | Ross Snyder | Hearing enhancement system and method |
US11087176B2 (en) | 2018-05-08 | 2021-08-10 | Microsoft Technology Licensing, Llc | Spatial localization design service |
US11354459B2 (en) * | 2018-05-08 | 2022-06-07 | Microsoft Technology Licensing, Llc | Computer vision and speech algorithm design service |
JP7290507B2 (en) * | 2019-08-06 | 2023-06-13 | 本田技研工業株式会社 | Information processing device, information processing method, recognition model and program |
KR102345409B1 (en) | 2019-08-29 | 2021-12-30 | 주식회사 하이퍼커넥트 | Processor Accelerating Convolutional Computation in Convolutional Neural Network AND OPERATING METHOD FOR THE SAME |
CN110992974B (en) | 2019-11-25 | 2021-08-24 | 百度在线网络技术（北京）有限公司 | Speech recognition method, apparatus, device and computer readable storage medium |
WO2021107695A1 (en) * | 2019-11-29 | 2021-06-03 | Samsung Electronics Co., Ltd. | Method, device and electronic apparatus for transmitting and receiving speech signal |
EP3871928A1 (en) * | 2020-02-27 | 2021-09-01 | Aptiv Technologies Limited | Component connection verification device and method |
CN111862987B (en) * | 2020-07-20 | 2021-12-28 | 北京百度网讯科技有限公司 | Speech recognition method and device |
TWI768676B (en) * | 2021-01-25 | 2022-06-21 | 瑞昱半導體股份有限公司 | Audio processing method and audio processing device, and associated non-transitory computer-readable medium |
US20220399026A1 (en) * | 2021-06-11 | 2022-12-15 | Nuance Communications, Inc. | System and Method for Self-attention-based Combining of Multichannel Signals for Speech Processing |
Citations (5)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130166279A1 (en) * | 2010-08-24 | 2013-06-27 | Veovox Sa | System and method for recognizing a user voice command in noisy environment |
US20140288928A1 (en) * | 2013-03-25 | 2014-09-25 | Gerald Bradley PENN | System and method for applying a convolutional neural network to speech recognition |
US20150293745A1 (en) * | 2012-11-27 | 2015-10-15 | Denso Corporation | Text-reading device and text-reading method |
US20160322055A1 (en) * | 2015-03-27 | 2016-11-03 | Google Inc. | Processing multi-channel audio waveforms |
US20170148433A1 (en) * | 2015-11-25 | 2017-05-25 | Baidu Usa Llc | Deployed end-to-end speech recognition |
Family Cites Families (24)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US4802225A (en) | 1985-01-02 | 1989-01-31 | Medical Research Council | Analysis of non-sinusoidal waveforms |
US5805771A (en) | 1994-06-22 | 1998-09-08 | Texas Instruments Incorporated | Automatic language identification method and system |
US5737485A (en) * | 1995-03-07 | 1998-04-07 | Rutgers The State University Of New Jersey | Method and apparatus including microphone arrays and neural networks for speech/speaker recognition systems |
US7072832B1 (en) | 1998-08-24 | 2006-07-04 | Mindspeed Technologies, Inc. | System for speech encoding having an adaptive encoding arrangement |
WO2002091355A1 (en) | 2001-05-08 | 2002-11-14 | Intel Corporation | High-order entropy error functions for neural classifiers |
US20160240210A1 (en) * | 2012-07-22 | 2016-08-18 | Xia Lou | Speech Enhancement to Improve Speech Intelligibility and Automatic Speech Recognition |
US9477925B2 (en) * | 2012-11-20 | 2016-10-25 | Microsoft Technology Licensing, Llc | Deep neural networks training for speech and pattern recognition |
US9892745B2 (en) | 2013-08-23 | 2018-02-13 | At&T Intellectual Property I, L.P. | Augmented multi-tier classifier for multi-modal voice activity detection |
US9286897B2 (en) * | 2013-09-27 | 2016-03-15 | Amazon Technologies, Inc. | Speech recognizer with multi-directional decoding |
US9665823B2 (en) * | 2013-12-06 | 2017-05-30 | International Business Machines Corporation | Method and system for joint training of hybrid neural networks for acoustic modeling in automatic speech recognition |
DE102014214143B4 (en) * | 2014-03-14 | 2015-12-31 | Fraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V. | Apparatus and method for processing a signal in the frequency domain |
US9390712B2 (en) * | 2014-03-24 | 2016-07-12 | Microsoft Technology Licensing, Llc. | Mixed speech recognition |
US9728185B2 (en) | 2014-05-22 | 2017-08-08 | Google Inc. | Recognizing speech using neural networks |
KR101844932B1 (en) * | 2014-09-16 | 2018-04-03 | 한국전자통신연구원 | Signal process algorithm integrated deep neural network based speech recognition apparatus and optimization learning method thereof |
US20160111107A1 (en) * | 2014-10-21 | 2016-04-21 | Mitsubishi Electric Research Laboratories, Inc. | Method for Enhancing Noisy Speech using Features from an Automatic Speech Recognition System |
US9508340B2 (en) * | 2014-12-22 | 2016-11-29 | Google Inc. | User specified keyword spotting using long short term memory neural network feature extractor |
US11080587B2 (en) | 2015-02-06 | 2021-08-03 | Deepmind Technologies Limited | Recurrent neural networks for data item generation |
US10762894B2 (en) * | 2015-03-27 | 2020-09-01 | Google Llc | Convolutional neural networks |
US10013981B2 (en) * | 2015-06-06 | 2018-07-03 | Apple Inc. | Multi-microphone speech recognition systems and related techniques |
US10339921B2 (en) * | 2015-09-24 | 2019-07-02 | Google Llc | Multichannel raw-waveform neural networks |
US10347271B2 (en) | 2015-12-04 | 2019-07-09 | Synaptics Incorporated | Semi-supervised system for multichannel source enhancement through configurable unsupervised adaptive transformations and supervised deep neural network |
US9813810B1 (en) * | 2016-01-05 | 2017-11-07 | Google Inc. | Multi-microphone neural network for sound recognition |
KR102151682B1 (en) * | 2016-03-23 | 2020-09-04 | 구글 엘엘씨 | Adaptive audio enhancement for multi-channel speech recognition |
US10460747B2 (en) | 2016-05-10 | 2019-10-29 | Google Llc | Frequency based audio analysis using neural networks |
-
2016
- 2016-11-14 US US15/350,293 patent/US10224058B2/en active Active
-
2019
- 2019-02-19 US US16/278,830 patent/US11062725B2/en active Active
-
2021
- 2021-06-08 US US17/303,822 patent/US11783849B2/en active Active
Patent Citations (6)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20130166279A1 (en) * | 2010-08-24 | 2013-06-27 | Veovox Sa | System and method for recognizing a user voice command in noisy environment |
US20150293745A1 (en) * | 2012-11-27 | 2015-10-15 | Denso Corporation | Text-reading device and text-reading method |
US20140288928A1 (en) * | 2013-03-25 | 2014-09-25 | Gerald Bradley PENN | System and method for applying a convolutional neural network to speech recognition |
US20160322055A1 (en) * | 2015-03-27 | 2016-11-03 | Google Inc. | Processing multi-channel audio waveforms |
US9697826B2 (en) * | 2015-03-27 | 2017-07-04 | Google Inc. | Processing multi-channel audio waveforms |
US20170148433A1 (en) * | 2015-11-25 | 2017-05-25 | Baidu Usa Llc | Deployed end-to-end speech recognition |
Cited By (51)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US10930270B2 (en) | 2015-03-27 | 2021-02-23 | Google Llc | Processing audio waveforms |
US20160284347A1 (en) * | 2015-03-27 | 2016-09-29 | Google Inc. | Processing audio waveforms |
US10403269B2 (en) * | 2015-03-27 | 2019-09-03 | Google Llc | Processing audio waveforms |
US10339921B2 (en) * | 2015-09-24 | 2019-07-02 | Google Llc | Multichannel raw-waveform neural networks |
US10529320B2 (en) | 2016-12-21 | 2020-01-07 | Google Llc | Complex evolution recurrent neural networks |
US10540961B2 (en) * | 2017-03-13 | 2020-01-21 | Baidu Usa Llc | Convolutional recurrent neural networks for small-footprint keyword spotting |
US20180322865A1 (en) * | 2017-05-05 | 2018-11-08 | Baidu Online Network Technology (Beijing) Co., Ltd . | Artificial intelligence-based acoustic model training method and apparatus, device and storage medium |
US10565983B2 (en) * | 2017-05-05 | 2020-02-18 | Baidu Online Network Technology (Beijing) Co., Ltd. | Artificial intelligence-based acoustic model training method and apparatus, device and storage medium |
US20180366107A1 (en) * | 2017-06-16 | 2018-12-20 | Baidu Online Network Technology (Beijing) Co., Ltd. | Method and device for training acoustic model, computer device and storage medium |
US10522136B2 (en) * | 2017-06-16 | 2019-12-31 | Baidu Online Network Technology (Beijing) Co., Ltd. | Method and device for training acoustic model, computer device and storage medium |
US11270696B2 (en) * | 2017-06-20 | 2022-03-08 | Bose Corporation | Audio device with wakeup word detection |
US20190147855A1 (en) * | 2017-11-13 | 2019-05-16 | GM Global Technology Operations LLC | Neural network for use in speech recognition arbitration |
US20190172476A1 (en) * | 2017-12-04 | 2019-06-06 | Apple Inc. | Deep learning driven multi-channel filtering for speech enhancement |
US10546593B2 (en) * | 2017-12-04 | 2020-01-28 | Apple Inc. | Deep learning driven multi-channel filtering for speech enhancement |
US20190206091A1 (en) * | 2017-12-29 | 2019-07-04 | Baidu Online Network Technology (Beijing) Co., Ltd | Method And Apparatus For Compressing Image |
US10896522B2 (en) * | 2017-12-29 | 2021-01-19 | Baidu Online Network Technology (Beijing) Co., Ltd. | Method and apparatus for compressing image |
US11334612B2 (en) * | 2018-02-06 | 2022-05-17 | Microsoft Technology Licensing, Llc | Multilevel representation learning for computer content quality |
US11475881B2 (en) * | 2018-09-27 | 2022-10-18 | Amazon Technologies, Inc. | Deep multi-channel acoustic modeling |
US10726830B1 (en) * | 2018-09-27 | 2020-07-28 | Amazon Technologies, Inc. | Deep multi-channel acoustic modeling |
US11574628B1 (en) * | 2018-09-27 | 2023-02-07 | Amazon Technologies, Inc. | Deep multi-channel acoustic modeling using multiple microphone array geometries |
CN109523994A (en) * | 2018-11-13 | 2019-03-26 | 四川大学 | A kind of multitask method of speech classification based on capsule neural network |
US11322156B2 (en) * | 2018-12-28 | 2022-05-03 | Tata Consultancy Services Limited | Features search and selection techniques for speaker and speech recognition |
CN109872720A (en) * | 2019-01-29 | 2019-06-11 | 广东技术师范学院 | It is a kind of that speech detection algorithms being rerecorded to different scenes robust based on convolutional neural networks |
EP3726529A1 (en) * | 2019-04-16 | 2020-10-21 | Fraunhofer Gesellschaft zur Förderung der Angewand | Method and apparatus for determining a deep filter |
WO2020212419A1 (en) * | 2019-04-16 | 2020-10-22 | Fraunhofer-Gesellschaft zur Förderung der angewandten Forschung e.V. | Method and apparatus for determining a deep filter |
CN110048972A (en) * | 2019-04-24 | 2019-07-23 | 燕山大学 | A kind of underwater sound orthogonal frequency division multiplexing channel estimation methods and system |
CN113812173A (en) * | 2019-05-09 | 2021-12-17 | 索诺瓦有限公司 | Hearing device system and method for processing audio signals |
US11380312B1 (en) * | 2019-06-20 | 2022-07-05 | Amazon Technologies, Inc. | Residual echo suppression for keyword detection |
US11308973B2 (en) * | 2019-08-07 | 2022-04-19 | Samsung Electronics Co., Ltd. | Method for processing multi-channel audio signal on basis of neural network and electronic device |
CN110491404A (en) * | 2019-08-15 | 2019-11-22 | 广州华多网络科技有限公司 | Method of speech processing, device, terminal device and storage medium |
US11854536B2 (en) * | 2019-09-06 | 2023-12-26 | Hyperconnect Inc. | Keyword spotting apparatus, method, and computer-readable recording medium thereof |
US20210074270A1 (en) * | 2019-09-06 | 2021-03-11 | Hyperconnect, Inc. | Keyword spotting apparatus, method, and computer-readable recording medium thereof |
US20220327769A1 (en) * | 2019-10-03 | 2022-10-13 | Google Llc | Neural light transport |
CN112885363A (en) * | 2019-11-29 | 2021-06-01 | 北京三星通信技术研究有限公司 | Voice sending method and device, voice receiving method and device and electronic equipment |
US20210295828A1 (en) * | 2020-03-19 | 2021-09-23 | International Business Machines Corporation | Audio-spectral-masking-deep-neural-network crowd search |
US11514892B2 (en) * | 2020-03-19 | 2022-11-29 | International Business Machines Corporation | Audio-spectral-masking-deep-neural-network crowd search |
CN111638249A (en) * | 2020-05-31 | 2020-09-08 | 天津大学 | Water content measuring method based on deep learning and application of water content measuring method in oil well exploitation |
CN113763976A (en) * | 2020-06-05 | 2021-12-07 | 北京有竹居网络技术有限公司 | Method and device for reducing noise of audio signal, readable medium and electronic equipment |
CN112435652A (en) * | 2020-09-29 | 2021-03-02 | 江苏清微智能科技有限公司 | Voice keyword recognition system and method based on graph convolution neural network |
CN112836788A (en) * | 2020-12-21 | 2021-05-25 | 中国电子科技集团公司第二十七研究所 | Low-power-consumption deep learning network method for interference type identification |
WO2022156655A1 (en) * | 2021-01-21 | 2022-07-28 | 腾讯科技（深圳）有限公司 | Voice call control method and apparatus, and computer-readable medium and electronic device |
CN115188389A (en) * | 2021-04-06 | 2022-10-14 | 京东科技控股股份有限公司 | End-to-end voice enhancement method and device based on neural network |
CN113744751A (en) * | 2021-08-16 | 2021-12-03 | 清华大学苏州汽车研究院（相城） | Multi-channel speech signal enhancement method applied to microphone array |
CN114495971A (en) * | 2022-02-25 | 2022-05-13 | 四川天中星航空科技有限公司 | Voice enhancement method for running neural network by adopting embedded hardware |
EP4243012A1 (en) * | 2022-03-10 | 2023-09-13 | Tuito | System and method for warning and control by voice recognition |
WO2023214983A1 (en) * | 2022-05-02 | 2023-11-09 | Tencent America LLC | Progressive contrastive learning framework for self-supervised speaker verification |
CN115514343A (en) * | 2022-05-13 | 2022-12-23 | 浙江腾腾电气有限公司 | Power grid waveform filtering system and filtering method thereof |
WO2023226839A1 (en) * | 2022-05-23 | 2023-11-30 | 维沃移动通信有限公司 | Audio enhancement method and apparatus, and electronic device and readable storage medium |
CN115586254A (en) * | 2022-09-30 | 2023-01-10 | 陕西师范大学 | Method and system for identifying metal material based on convolutional neural network |
CN115810364A (en) * | 2023-02-07 | 2023-03-17 | 海纳科德（湖北）科技有限公司 | End-to-end target sound signal extraction method and system in sound mixing environment |
CN116994587A (en) * | 2023-09-26 | 2023-11-03 | 成都航空职业技术学院 | Training supervision system |
Also Published As
Publication number | Publication date |
---|---|
US10224058B2 (en) | 2019-03-05 |
US20210295859A1 (en) | 2021-09-23 |
US11062725B2 (en) | 2021-07-13 |
US20190259409A1 (en) | 2019-08-22 |
US11783849B2 (en) | 2023-10-10 |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US11783849B2 (en) | Enhanced multi-channel acoustic models | |
US11756534B2 (en) | Adaptive audio enhancement for multichannel speech recognition | |
US20210256379A1 (en) | Audio processing with neural networks | |
US20200286468A1 (en) | Complex linear projection for acoustic modeling | |
US9984683B2 (en) | Automatic speech recognition using multi-dimensional models | |
US10339921B2 (en) | Multichannel raw-waveform neural networks | |
US20190156819A1 (en) | Complex evolution recurrent neural networks | |
US9262724B2 (en) | Low-rank matrix factorization for deep belief network training with high-dimensional output targets | |
Phapatanaburi et al. | Noise robust voice activity detection using joint phase and magnitude based feature enhancement | |
Sivasankaran et al. | A combined evaluation of established and new approaches for speech recognition in varied reverberation conditions | |
Sainath et al. | Raw multichannel processing using deep neural networks | |
CN113241090B (en) | Multichannel blind sound source separation method based on minimum volume constraint |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:VARIANI, EHSAN;WILSON, KEVIN WILLIAM;WEISS, RON J.;AND OTHERS;SIGNING DATES FROM 20161110 TO 20161111;REEL/FRAME:040311/0175 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044567/0001Effective date: 20170929 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 4TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1551); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 4 |