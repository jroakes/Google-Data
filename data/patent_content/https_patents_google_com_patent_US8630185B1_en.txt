US8630185B1 - Optimizing traffic in a data network - Google Patents
Optimizing traffic in a data network Download PDFInfo
- Publication number
- US8630185B1 US8630185B1 US13/302,952 US201113302952A US8630185B1 US 8630185 B1 US8630185 B1 US 8630185B1 US 201113302952 A US201113302952 A US 201113302952A US 8630185 B1 US8630185 B1 US 8630185B1
- Authority
- US
- United States
- Prior art keywords
- network node
- path
- data
- paths
- explored
- Prior art date
- Legal status (The legal status is an assumption and is not a legal conclusion. Google has not performed a legal analysis and makes no representation as to the accuracy of the status listed.)
- Active, expires
Links
Images
Classifications
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/12—Shortest path evaluation
-
- H—ELECTRICITY
- H04—ELECTRIC COMMUNICATION TECHNIQUE
- H04L—TRANSMISSION OF DIGITAL INFORMATION, e.g. TELEGRAPHIC COMMUNICATION
- H04L45/00—Routing or path finding of packets in data switching networks
- H04L45/18—Loop-free operations
Definitions
- the present disclosure relates generally to optimizing traffic in a data network, and more particularly, to determining a plurality of lowest cost paths for routing data from a source network node to a destination network node.
- Data networks may include any number of routers and other devices that direct the transmission of data from one location to another.
- a source network node e.g., a computer, a server, a data center, a router, etc.
- a destination network node e.g., another computer, data center, router, etc.
- Each data link in a given path may also have a number of associated characteristics (e.g., latency, bandwidth, financial cost, etc.). These characteristics can be used to optimize how the data is transmitted from the source network node to the destination network node.
- One implementation is a method that includes retrieving, from a memory, map data identifying a plurality of network nodes and a plurality of data links between the network nodes. Each data link has an associated cost.
- the method also includes receiving an identification of a source network node and a destination network node in the plurality of network nodes.
- the method further includes determining, by a processing circuit, a set of lowest cost paths between the destination network node and each other network node of the plurality based in part on the associated costs of the plurality of data links.
- the method also includes determining, by the processing circuit, a set of explored paths based in part on the difference between the map data and the set of lowest cost paths between the plurality of network nodes and the destination network node.
- the method additionally includes determining, by the processing circuit, a set of lowest cost paths from the source network node to the destination network node by extending one or more of the explored paths based in part on whether one of the plurality of data links is a valid path extension for an explored path.
- Another implementation is a processing circuit configured to retrieve map data identifying a plurality of network nodes and a plurality of data links between the network nodes. Each data link has an associated cost.
- the processing circuit is configured to receive an indication of a source network node and a destination network node in the plurality of network nodes.
- the processing circuit is also configured to determine a set of lowest cost paths between the destination network node and each other network node of the plurality based in part on the associated costs of the plurality of data links.
- the processing circuit is further configured to determine a set of explored paths based in part on the difference between the map data and the set of lowest cost paths between the plurality of network nodes and the destination network node.
- the processing circuit is also configured to determine a set of lowest cost paths from the source network node to the destination network node by extending one or more of the explored paths based in part on whether one of the plurality of data links is a valid path extension for an explored path.
- a further implementation is one or more computer-readable media having instructions stored therein, the instructions being executable by one or more processors to cause the one or more processors to perform operations.
- the operations include receiving map data identifying a plurality of network nodes and a plurality of data links between the network nodes. Each data link has an associated cost.
- the operations also include receiving an identification of a source network node and a destination network node in the plurality of network nodes.
- the operations further include determining a set of lowest cost paths between the destination network node and each other network node of the plurality based in part on the associated costs of the plurality of data links.
- the operations also include determining a set of explored paths based in part on the difference between the map data and the set of lowest cost paths between the plurality of network nodes and the destination network node.
- the operations further include determining a set of lowest cost paths from the source network node to the destination network node by extending one or more of the explored paths based in part on whether one of the plurality of data links is a valid path extension for an explored path.
- FIG. 1 is an illustration of an example of a data network
- FIG. 2 is a flow diagram of an example process for determining a set of loopless, lowest cost paths from a source network node to a destination network node in a data network;
- FIG. 3 is an illustration of an example set of lowest cost paths from each node of the data network shown in FIG. 1 to a destination network node;
- FIG. 4 is an illustration of the set of lowest cost paths from each network node to a destination from FIG. 3 showing overlaid path deviations and updated costs;
- FIG. 5 is an illustration of an example process for exploring deviation paths
- FIG. 6 is an illustration of an example of possible path extensions for an explored path
- FIG. 7 is an illustration of an example of evaluated path extensions
- FIG. 8 is an illustration of an example of an explored path that has been extended.
- FIG. 9 is a schematic block diagram of a processing circuit configured to determine a set of lowest cost paths from a source network node to a destination network node for a data network.
- a plurality of lowest cost paths between a source network node and a destination network node in a data network can be found by generating a map of the network and traversing data links.
- Each data link may have one or more properties or characteristics (e.g., latency, bandwidth, financial cost, etc.), referred to herein as costs, that can be used to associate a cost to sending data over a particular data link.
- the map of the data network can be traversed to analyze the cost of taking different paths from a source network node to a destination network node.
- paths that contain loops may be excluded by determining whether an extension of an explored path to another network node is valid, given certain constraints.
- one set of constraints may be that the other network node is able to reach the destination network node without forming a loop with the explored path.
- the plurality of lowest cost paths between the source network node and the destination network node may be generated to contain only paths that are loopless.
- FIG. 1 shows an illustration of an example data network 100 .
- Data network 100 includes a plurality of network nodes 102 - 116 connected by data links 120 - 140 .
- Each of network nodes 102 - 116 may be one or more electronic devices configured to transmit data within data network 100 .
- each of network nodes 102 - 116 may include one or more data centers, servers, computers, routers, switches, mobile devices, and/or other computing devices.
- Data network 100 is also shown to include data links 120 - 140 , which allow data to be transmitted between network nodes 102 - 116 .
- network node 102 may transmit data to network node 104 via data link 120 .
- Data links 120 may be any type of hardwired and/or wireless data connection.
- data link 120 may be a hardwired fiber optic line or a wireless satellite connection that conveys data from network node 102 to network node 104 .
- Data links 120 - 140 may be bidirectional or unidirectional.
- data link 138 may be a bidirectional link that allows network node 112 to convey data to network node 116 and vice versa.
- data link 120 may be a unidirectional link that only allows data to be transmitted from network node 102 to network node 104 .
- Costs c 1 -c 11 may be one or more values associated with the characteristics of data links 120 - 140 and/or network nodes 102 - 116 . In one example, costs c 1 -c 11 may be related to the speed of data links 120 - 140 . For example, costs c 1 -c 11 may be the one-way or round-trip latency experienced by a data link when data is sent from one network node to another.
- Latency may be measured by sending a “ping” (e.g., a transmission of data) from a network node across one of data links 120 - 140 and measuring the amount of time taken for the data to reach the other network node connected to the data link.
- a “ping” e.g., a transmission of data
- any number of characteristics of data links 120 - 140 e.g., bandwidth, affinities, financial cost, usage capacity, etc.
- costs c 1 -c 11 may be used to calculate costs c 1 -c 11 .
- a path may be an ordered set of data links and/or network nodes that are connected by data links.
- network node 102 e.g., a source network node
- network node 116 e.g., a destination network node
- the data may be routed over a number of different paths.
- one path, P 1 may include data links 120 , 126 , 130 , 132 , and 138 .
- Another path, P 2 may include data links 122 , 128 , 130 , 134 , and 140 .
- path P 1 may have a cost c x that is the sum of costs associated with its data lines (e.g., costs c 1 , c 3 , c 6 , c 7 and c 9 ).
- path P 2 may have cost c y that is the sum of costs associated with its own data lines (e.g., costs c 2 , c 4 , c 6 , c 8 , and c 10 ).
- Traffic routing decisions in data network 100 can be made by determining the lowest cost path to route data from a source network node to a destination network node. For example, the cost of Path P 1 is less than the cost of path P 2 (i.e., c x ⁇ c y ), network 100 may route traffic from network node 102 to network node 116 via path P 1 . For each source-destination pair, a different lowest-cost path may be determined and used by network 100 to route data. This allows the traffic in data network 100 to always take the optimal route, thereby improving the performance of network 100 .
- This type of problem may be referred to as the single shortest path problem. However, this name is a misnomer in cases where the costs are not actual distances between nodes. More correctly, this type of problem seeks to find the path from a source network node to a destination network node that has the lowest cost path.
- a related, and more complex, problem relates to finding not only the lowest cost path, but a set of the lowest cost paths between a source network node and a destination network node.
- the goal in this problem is to find not only the path having the overall lowest cost, but the set of lowest cost paths from the source network node to the destination network node up to the k th lowest cost path, k being any positive integer greater than one.
- the set of lowest cost paths between a source network node and a destination network node can be used in the network to adapt to changing network conditions.
- path P 1 in data network 100 may be of lower cost than path P 2 .
- the next lowest cost path e.g., path P 2 or another path
- data network 100 may be part of a class of networks that dynamically control network traffic using the costs associated with data links 120 - 140 .
- data network 100 may be a multiprotocol label switching (MPLS) network, according to one implementation.
- MPLS multiprotocol label switching
- labels are assigned to data packets at a first router known as a label edge router (LER).
- the appended labels contain path information used to route data throughout the network.
- the path corresponding to the label is often called a label switched path (LSP).
- LSP label switched path
- Label switching routers (LSRs) receive the labeled data packets in MPLS networks and make routing decisions based on the content of a label. In such a case, the set of lowest cost paths from a source network node to a destination network node can be used to select an appropriate LSP to route the sent data.
- a loopless path is any path that passes through a single network node only once.
- the path P 3 formed by data links 120 , 126 , 128 , 124 , 126 , 130 , 132 , and 138 contains a loop because path P 3 passes through network node 104 twice.
- a path containing a loop may still be within the set of lowest cost paths between the source network node and the destination network node, due to higher costs associated with alternative paths.
- path P 1 is the overall lowest cost path having a cost of c x
- path P 3 may have a cost of c z equal to the sum of c x , c 3 , c 4 , and c 5 .
- path P 2 may be included in the set of lowest cost paths before P 3 , even though path P 2 contains a loop. Therefore, some implementations of the optimization techniques disclosed herein may further detect the presence of loops and exclude paths containing loops from the set of lowest cost paths between the source network node and the destination network node.
- the set of loopless, lowest cost paths between the source network node and the destination network node includes two or more lowest cost paths over which data can be sent from the source network node to the destination network node.
- the paths in the set are also loopless, meaning that each path traverses any given network node at a maximum of one time.
- Process 200 includes determining a set of lowest cost paths to a destination network node from each node of a network map (block 202 ).
- the set of lowest cost paths from each node to a destination network node includes the overall lowest cost paths from each individual node in the network map to the destination network node.
- the cumulative cost to reach the destination network node from a given node is assigned to the given node. This cumulative cost corresponds to the sum of costs associated with the data links traversed in the path.
- the set of lowest cost paths from each node to a destination is a combination of the overall lowest cost paths from each node in the network map to the destination network node.
- the set of lowest cost paths from each node to the destination network node differs from that of the set of lowest cost paths from a source network node to the destination network node.
- the set of lowest cost paths to the destination network node contains the overall lowest cost path from each node of the network to the destination network node. This set includes the overall lowest cost path from the source network node to the destination network node.
- the set of lowest cost paths between the source network node and the destination network node includes not only the overall lowest cost path from the source network node to the destination network node, but also the next k ⁇ 1 lowest cost paths (e.g., the second lowest cost path, the third lowest cost path, etc.) between the source network node and the destination network node.
- a set of lowest cost paths from each node to a destination network node may be generated in some implementations by performing a single source shortest path search strategy from each node in the network. The lowest cost path from each node to the destination network node can then be used to construct the set of lowest cost paths to a destination.
- the data links may be reversed and a search strategy that originates from the destination network node can be used to construct the set of lowest cost paths from each node to a destination. In either case, the constructed set of lowest cost paths from each node to the destination network node provides the lowest cost path from any given node to the destination network node.
- this allows the lowest cost path from the source to the destination to be determined by finding the corresponding path from the source to the destination in the set of lowest cost paths from each node to the destination network node.
- the set of lowest cost paths from each node to the destination network node also allows the total cost of the lowest cost path from any network node to be determined using the properties of the node in the set of lowest cost paths from each node to the destination network node.
- Process 200 includes using the set of lowest cost paths from each node to the destination to determine path deviation costs to reach the destination network node from a source network node (block 204 ). Since the set of lowest cost paths from each node to the destination includes the lowest cost path from the source to the destination, any deviations from this path incurs a greater cost than if the lowest cost path between the source and destination is taken. These deviation costs can be determined using the costs associated with the data links that are not part of the lowest cost path between the source and the destination. For example, the deviation paths for the network map can be determined by taking the difference between the network map and the set of lowest cost paths between each node and the destination.
- One way to determine the set of lowest cost paths between the source and destination network nodes is to begin with the assumption that most, if not all, of the paths in the set are slight deviations from the overall lowest cost path from the source to the destination. Therefore, deviation paths from the overall lowest cost path can be explored to find additional low cost paths from the source to the destination. This exploration can be repeated for various deviation paths until the desired number of lowest cost paths between the source network node and the destination network node are discovered.
- Process 200 includes exploring deviation paths using a greedy search strategy (block 206 ).
- greedy search strategies operate by making a choice that optimizes the solution at each decision point. For example, at any given node with two potential data links to explore, the search strategy may choose to always explore the lowest cost data link. Any number of path searching strategies may be utilized. For example, a path searching strategy that utilizes a sorted heap of paths is described in the article by David Eppstein, entitled “Finding the k Shortest Paths,” published in the 35th IEEE Symposium Foundations of Computer Science (1994).
- Process 200 includes determining if an explored path contains a loop (block 208 ).
- a check may be made at a node of a potential path extension to determine if a node or a data link is already present in the currently explored path. For example, a path may be explored from nodes A to B to C. A check may then be made to ensure that the next traversed path does not lead from node C back to nodes A or B. This may be done either by actually traversing the data link or by only examining the direction of the data link. For example, if the data link goes from C to B, the link may be traversed back to node B. Since node B is already in the set of explored nodes, this indicates that the currently explored path contains a loop.
- the data link from C to B may be explored itself, without actually traversing the link. Since the data link itself indicates that it leads to node B, the endpoint of the data link may be used to determine that node B has already been explored and that a loop exists. In some implementations, a check may be made to ensure that the network node in the potential path extension is able to reach the destination network node without forming a loop with the explored path.
- Process 200 includes excluding an explored path if a loop is found (block 210 ). If an explored path is determined to contain a loop in step 208 , the explored path may be flagged or otherwise excluded from inclusion in the set of lowest cost paths. Although a loop-containing path may have a lower cost than other paths from the source network node to the destination network node, it may be excluded in some implementations. Data transmission over a loop is redundant and does not offer any routing advantages over using only its base path (e.g., the loop-containing path minus the loop). In some implementations, exploration of the current path may also terminate when a loop is found (e.g., by not extending the explored path to another node). In such a case, other paths may be evaluated, instead.
- FIG. 3 shows a set of lowest cost paths from each node in a network to a destination network node is shown, according to one example.
- set 300 is constructed using the map of data network 100 in FIG. 1 with network node 116 as the destination network node. For each network node 102 - 116 in data network 100 , the lowest cost path to network node 116 is determined.
- set 300 may be constructed by starting at each of network nodes 102 - 114 and finding the lowest cost path to network node 116 . For example, two potential paths may be taken from network node 104 to network node 108 . In one path, data links 124 and 128 are traversed from network node 104 , having an associated cost of c 4 +c 5 .
- data link 126 is traversed, having an associated cost of c 3 . As shown, traversing data link 126 has a lower associated cost (e.g., c 3 ⁇ c 4 +c 5 ). Therefore, data link 124 is excluded from set 300 and data link 126 is included.
- set 300 may be constructed by reversing data links 120 - 140 and finding the single source shortest path from network node 116 to each of network nodes 102 - 114 . Set 300 may be constructed, for example, using the single-source shortest path search techniques proposed by Edsger Dijkstra or variants thereof (e.g., utilizing a Fibonacci heap as a priority queue, etc.).
- a cumulative cost may be maintained for each of network nodes 102 - 116 in set 300 .
- the cumulative cost represents the total cost from the node when traversing the lowest cost path to the destination, i.e., network node 116 .
- the cumulative cost may be determined, for example, by summing the costs of the data links in the path from the given network node to the destination. For example, data link 140 has an associated cost c 10 and is also the lowest cost path between network node 114 and network node 116 . Therefore, the cumulative cost for network node 114 is equal to c 10 .
- the cumulative cost at network node 108 is equal to the sum of costs for data links 130 , 132 , and 138 because each of these data links are in the lowest cost path between network node 108 and network node 116 .
- FIG. 4 shows a set of lowest cost paths between network nodes and a destination network node is shown with overlaid path deviations, according to another example.
- a map 400 may be constructed using set 300 in FIG. 3 and data network 100 in FIG. 1 .
- Map 400 includes one or more sets of network nodes and/or one or more sets of data links with updated costs.
- map 400 may be stored in one or more data structures, such as a table, queue, list, etc.
- the costs associated with the data links in map 400 have been updated to reflect the cost of deviating from the lowest cost paths in set 300 (denoted as c: in FIG. 4 ).
- the costs associated with data links 120 , 126 , 128 , 130 , 132 , 138 , and 140 have been updated in map 400 to each be zero. Since it is already know that the lowest cost path from any of network nodes 102 - 114 to the destination network node 116 is given by set 300 , any return to these nodes while exploring a path deviation will incur no additional cost.
- map 400 Overlaid on map 400 are data links 122 , 124 , 134 , and 136 , which are path deviations from that of set 300 .
- set 300 provides the overall lowest cost path from source network node 102 to destination network node 116 , other paths should still be explored to find the other lowest cost paths up to the k th lowest cost path. This may be done by exploring the effects of deviating from the path between the source network node and the destination network node in set 300 .
- the costs associated with data links 122 , 124 , 134 , and 136 may be updated to reflect the cost of deviating from the path between the source and destination in set 300 (e.g., the overall lowest cost path between the source and destination).
- the cost of data link 122 may be updated in map 400 using the overall lowest cost the to destination from set 300 with the original cost of the data link from data network 100 .
- This cost represents the added cost of deviating from the overall lowest cost path between the source and destination in set 300 .
- the overall lowest cost to reach the destination network node 116 from network node 106 i.e., d(e_src)
- d(e_src) is c 4 +c 6 +c 7 +c 9 , as shown in set 300 .
- the updated costs for the path deviations in map 400 are as follows:
- the updated cost associated with this data transmission would be c 5 +c 4 ⁇ c 3 .
- reversal of the flow of data across any of the data links in set 300 could also be categorized as a path deviation. For example, transmitting data from network node 110 to network node 108 via data link 130 would be c 6 +c 6 , since the data would need to retraverse data link 130 to reach destination network node 116 .
- path deviations may be explored starting from the source network node or another reference node in the data network. For example, data link 122 may be explored first as a possible alternative route from source network node 102 to destination network node 116 .
- path deviations that lead to loops may also be excluded from further exploration.
- data links in map 400 may be explored in the following order: data link 120 , data link 124 , data link 122 . Since network node 102 has already been explored along this path, a loop has been reached and the path may be excluded from being added to the set of lowest cost paths. Further exploration of the path (e.g., by following data link 120 , data link 126 , etc.) may also be excluded, in some implementations. In some implementations, an explored path may only be extended to another network node if the other network node is able to reach the destination network node without forming a loop with the explored path.
- a process 500 for exploring deviation paths is shown, according to one example.
- a set of path deviations may be determined using a set of lowest cost paths to the destination network node from each network node.
- the costs associated with the deviation paths may also be adjusted by comparing the original network to the set of lowest cost paths to the destination network node from each network node.
- a greedy search strategy may be used to determine the set of lowest cost paths from the source network node to the destination network node.
- a priority queue of explored paths e.g., a sorted heap or other data structure
- the priority may be based on the cost of the explored path.
- a tie breaker may also be employed if the costs are equal.
- network nodes or data links may be sorted lexicographically, in addition to cost. Lexicographic sorting provides an ordering based on the arrangement of characters in a name or identifier associated with a data link.
- Lexicographic sorting provides an ordering based on the arrangement of characters in a name or identifier associated with a data link.
- the explored path having the highest priority in the queue is then evaluated to determine whether it can be extended to additional network nodes. If so, the extended path is added to the queue and the process continues in a greedy fashion until the queue is either empty (i.e., there are no more paths to explore) or a predefined number of lowest cost paths from the source network node to the destination network node are found.
- Process 500 includes identifying a data link from a terminal network node of an explored path to another network node (block 502 ).
- An explored path begins at the source network node and ends at a terminal network node, which may be any other node in the network. If the terminal network node is the destination network node, then the explored path is a solution path (i.e., one of the set of lowest cost path from the source network node to the destination network node). If the terminal network node is not the destination network node, then the terminal network node may be connected by a data link to another network node (i.e., a data link that begins at the terminal network node of the explored path and ends at another network node). If such a data link exists, it may be identified as a possible data link over which the explored path may be extended.
- Process 500 includes constructing a map that does not contain the nodes of the explored path (block 504 ).
- a condition of the system may be that the set of lowest cost paths from the source network node to the destination network node must not contain loops.
- a map that does not contain the nodes of the explored path may be used to impose such a condition.
- such a constructed map also does not contain data links to any of the nodes of the explored path. Therefore, the set of data links in the constructed map corresponds to those data links that cannot be used to extend the explored path back to itself and forming a loop.
- Process 500 includes determining whether the other node can reach the destination using the constructed map (block 506 ).
- the first possibility is that a path may not exist from the other network node to the destination network node.
- the second possibility is that there exists a path from the other network node to the destination network node, but that such a path requires a loop containing one or more of the nodes of the explored path. In either case, extending the explored path to the other network node would not help to find the set of loopless, lowest cost paths from the source network node to the destination network node. Therefore, extension of the explored path to the other network node may be prevented if the other network node is unable to reach the destination network node in the constructed map.
- Process 500 includes extending the explored path to the other node based on the determination (block 508 ). If the other network node is able to reach the destination network node in the map omitting the nodes of the explored path, a new path may be constructed by joining the explored path to the data link between the terminal network node of the explored path and the other network node. If a priority queue is used to order paths to be explored, the cost associated with the extended path may be determined by adding the cost of the explored path to that of the data link between the terminal network node and the other network node. The extended path may then be inserted into the queue, which uses the cost of the extended path and/or other factors (e.g., a lexicographical rank, etc.) to determine which path is to be evaluated next for possible extension.
- factors e.g., a lexicographical rank, etc.
- FIG. 6 is an illustration of an example of possible path extensions for an explored path P m .
- explored paths are evaluated based on their associated costs.
- An explored path in the set of explored paths having the lowest cost becomes the next path eligible for extension.
- an explored path P m may be the next path eligible for extension, based on its current associated cost.
- explored path P m may have an associated cost c 2 *, as shown in FIG. 4 .
- Explored path P m connects source network node 102 to network node 108 via network node 106 and includes directed data links 122 and 128 .
- network node 108 is the terminal network node for explored path P m .
- Terminal network node 108 may have data links from which it is the start network node (e.g., terminal network node 108 transmits data over a data link to another network node). For example, terminal network node 108 may transmit data to network node 110 over data link 130 . Terminal network node 108 may also transmit data to network node 104 over data link 126 . Therefore, both data link 126 and data link 130 may be identified as potential data links through which explored path P m may be extended. In some implementations, the order of evaluation of data links 126 and 130 as possible expansions may be based on their associated costs. For example, if the associated cost to traverse data link 130 is less than that of data link 126 , data link 130 may be evaluated, first.
- data link 126 may be evaluated first for possible expansion. In this way, the search strategy operates in a greedy manner to find the next lowest cost path from source network node 102 to destination network node 116 .
- FIG. 7 is an example map 700 that excludes nodes of an explored path.
- Map 700 is formed by removing all nodes along path P m , with nodes omitted from map 700 represented using dashed lines. Data links that connect to and from the omitted nodes are also omitted in map 700 and represented with dashed lines. After omitting the nodes and data links associated with path P m , only certain nodes and data links remain in map 700 from that of data network 100 .
- map 700 may be constructed in an electronic memory when a greedy search is performed to find a set of lowest cost paths from source network node 102 to destination network node 116 . In some implementations, map 700 may be constructed prior to performing the search (e.g., as a lookup table or other data structure that can be referenced to determine a graph that omits nodes and data links associated with a given path).
- Map 700 may be used to analyze possible path extensions of path P m .
- Two possible path extensions exist from terminal network node 108 of path P m .
- the first possible path extension traverses data link 126 to network node 104 .
- the second possible path extension traverses data link 130 to network node 110 .
- the associated costs of data link 126 and data link 130 may be used to determine which possible path extension is evaluated first.
- a possible path extension may be evaluated by determining whether a path exists in map 700 that reaches destination network node 116 from the network node at the end of the possible path extension. Such a path, by virtue of omitting the nodes of path P m in map 700 , would be guaranteed not to form a loop with path P m .
- network node 104 may be evaluated to determine whether a path exists in map 700 that reaches destination network node 116 from network node 104 .
- network node 104 can transmit data over three possible data links in data network 100 : data links 120 , 124 , and 126 .
- data links 120 , 124 , and 126 have been omitted in map 700 , since data links 120 , 124 , and 126 are connected to nodes of path P m , i.e., network nodes 102 , 106 , and 108 , respectively. This means that extending path P m to network node 104 would lead to forming a loop.
- the costs associated with data links 120 , 124 , and 126 would then be evaluated to determine which data link is the next possible path extension. If the path is extended over data link 120 , a loop would be formed that traverses from network node 102 over data links 122 , 128 , 126 , and 120 , back to network node 102 . Similarly, if the path is extended over data link 124 , a loop would be formed that traverses from network node 106 over data links 124 , 128 , and 126 , back to network node 106 .
- network node 110 may be evaluated to determine whether a path exists in map 700 that reaches destination network node 116 from network node 110 .
- Network node 110 can transmit data over three possible data links in data network 100 : data links 130 , 132 , and 134 .
- data link 130 has been omitted in map 700 because network node 108 is within explored path P m . If data link 130 is traversed from network node 110 to network node 108 , a loop would be formed, since data would be transmitted from network node 108 to network node 110 and then back to network node 110 .
- Data links 132 and 134 provide valid routes to destination network node 116 from network node 110 . If data link 132 is traversed, destination network node 116 can be reached by traversing data link 138 , by traversing data links 136 and 140 , etc. Similarly, if data link 134 is traversed, destination network node 116 can be reached by traversing data link 140 , by traversing data links 136 and 138 , etc. Therefore, traversing data link 130 is a valid path extension for path P m .
- FIG. 8 is an illustration of an example of an explored path P m ′ that has been extended. If data link 130 is a valid path extension for path P m (e.g., a path exists from network node 110 to destination network node 116 in map 700 of FIG. 7 ), path P m may be extended along data link 130 to form path P m ′. Data links 132 and 134 then become possible path extensions for path P m ′. Similar to map 700 of FIG. 7 , a new graph may be generated that excludes the nodes and data links associated with path P m ′. Such a graph may be used to determine whether extending path P m ′ to either of network nodes 112 or 114 is a valid path extension.
- data link 130 is a valid path extension for path P m (e.g., a path exists from network node 110 to destination network node 116 in map 700 of FIG. 7 )
- path P m may be extended along data link 130 to form path P m ′.
- path P m ′ or a path having a lower cost than that of path P m ′ is extended to destination network node 116 .
- path P m ′ or another path has been extended to destination network node 116 such a path is the next lowest cost path from source network node 102 to destination network node 116 .
- Other explored paths may then be extended until no more possible path extensions exist or if the desired number of lowest cost paths from source network node 102 to destination network node 116 have been found.
- FIG. 9 shows a detailed block diagram of a processing circuit 900 .
- Processing circuit 900 may be within, for example, a network router, a server, or another device connected to a data network.
- Processing circuit 900 includes a processor 902 and a memory 904 .
- Processor 902 may be or include one or more microprocessors, an application specific integrated circuit (ASIC), a circuit containing one or more processing components, a group of distributed processing components, circuitry for supporting a microprocessor, or other hardware configured for processing.
- ASIC application specific integrated circuit
- Processor 902 is also configured to execute computer code stored in memory 904 to complete and facilitate the activities described herein.
- Memory 904 can be any volatile or non-volatile computer-readable medium capable of storing data or computer code relating to the activities described herein.
- memory 904 is shown to include path analyzer 916 , which may be implemented using computer code (e.g., executable code, object code, source code, script code, machine code, etc.) configured for execution by processor 902 .
- path analyzer 916 may be implemented using computer code (e.g., executable code, object code, source code, script code, machine code, etc.) configured for execution by processor 902 .
- processing circuit 900 is configured to complete the activities described herein.
- Processing circuit 900 also includes hardware circuitry for supporting the execution of the computer code path analyzer 916 .
- processing circuit 900 may include hardware interfaces (e.g., an output 908 ) for communicating a set of lowest cost paths 918 (e.g., a set of lowest cost paths from a source network node to a destination network node) to other computing devices (e.g., another router, another server, a mobile device, etc.).
- processing circuit 900 may also include an input 906 for receiving, for example, a set of network nodes 910 , data links 912 , data link costs 914 , and/or parameters 920 from other computing devices.
- Memory 904 includes network nodes 910 , which represent the set of network nodes in the data network to be analyzed.
- Network nodes 910 may include, for example, information representative of a set of data centers, routers, servers, or other electronic devices configured to receive and/or transmit data via the data network.
- network nodes 910 may be a partial set of the network nodes of the data network. For example, certain nodes on the data network may be excluded from analysis by path analyzer 916 when the set of lowest cost paths from a source network node to a destination network node is determined.
- Memory 904 includes data links 912 , which represent links of the data network over which two or more network nodes communicate.
- Data links 912 may include, for example, information representative of the two or more data nodes (e.g., a set of pointers to network nodes 910 , a list of unique identifiers of network nodes 910 , etc.) for a given data link.
- Data links 912 may also include information indicative of a direction of data flow over a link.
- data links 912 may be unidirectional or bidirectional, depending on the configuration of the data network. If data can travel in two over more directions, each direction of flow may be represented separately in data links 912 , in some implementations.
- the connection from node A to node B may be stored as a separate data link in data links 912 than that of the connection from node B to node A.
- Memory 904 includes data link costs 914 , which are associated with data links 912 .
- Data link costs 914 may be one or more metrics or characteristics of data links 912 .
- the latency, bandwidth, financial cost, physical distance, or other information associated with data links 912 may be stored in data link costs 914 .
- the roundtrip ping times over data links 914 may be stored in memory 904 as data link costs 914 .
- data link costs 914 may be based on available bandwidth, financial cost, affinities, any other configurations or performance metrics associated with data links 912 , or any combination thereof.
- Data link costs 914 may be received from one or more other processing circuits via input 906 or determined by processing circuit 900 , according to various implementations.
- Memory 904 includes parameters 920 .
- Parameters 920 are used to control the operation of processing circuit 900 .
- Parameters 920 may include one or more data values that cause processing circuit 900 to operate differently, depending on the data values.
- parameters 920 may include a selection of a source network node and a destination network node received via input 906 . These may be used by path analyzer 916 to generate different sets of lowest cost paths 918 between the source network node and the destination network node.
- parameters 920 may include a selection of how many lowest costs paths are to be determined by path analyzer 916 (e.g., the two lowest cost paths, the three lowest cost paths, etc.).
- parameters 920 may include a parameter that controls whether or not path analyzer 916 excludes loops from lowest cost paths 918 .
- Other examples of parameters 920 include parameters that control how often the sets of lowest cost paths 918 are generated, how the sets of lowest cost paths 918 are used, and whether certain members of network nodes 910 or data links 912 should be excluded from analysis by path analyzer 916 when determining lowest cost paths 918 .
- a particular network node in network nodes 910 may be down for maintenance for a certain amount of time.
- a parameter in 920 may be utilized to exclude paths in lowest cost paths 918 that traverse that particular network node.
- Memory 904 includes a path analyzer 916 .
- Path analyzer 916 utilizes the selected source network node and destination network node in parameters 920 , network nodes 910 , data links 912 , and data link costs 914 , to generate lowest cost paths 918 .
- path analyzer 916 may use network nodes 910 , data links 912 , and data link costs 914 to generate a set of lowest cost paths from each of network nodes 910 to a destination network node.
- the set of lowest cost paths from each network node 910 to the destination network node may be generated, for example, using a single-source shortest path search strategy between each network node and the selected destination network node.
- Path analyzer 916 may also use the generated set to determine path deviation costs to reach the destination network node from the source network node. Since the set of shortest paths from network nodes 910 to the destination network node includes the lowest cost path from the source network node to the destination network node, any path that deviates from this will have an equal or greater cost. These costs may then be used by path analyzer 916 to determine other paths from the source network node to the destination network node. In some implementations, path analyzer 916 may employ a greedy search strategy or other search strategy to determine whether an explored path should be extended.
- Path analyzer 916 may determine whether a path extension is valid for an explored path.
- a path extension e.g., a data link appended to the explored path
- the explored path may not be extended along the data link.
- the path extension may be appended to the explored path. The node at the end of the appended data link would then become the new terminal network node for the extended path. Data links that stem from the new terminal network node may then be used as potential path extensions for the extended path. This process may be repeated by path analyzer 916 until no more potential path extensions exist or a specified number of lowest cost paths from the source network node to the destination network node have been found.
- path analyzer 916 may utilize a map of network nodes that omits the nodes of an explored path to determine whether a path extension is valid.
- the map may contain some or all of the network nodes in the data network that are not traversed by the explored path.
- the map may also contain some or all of the data links of the data network that do not reach or stem from the nodes in the explored path.
- Path analyzer 916 may use the map that omits the explored path to determine whether a path exists from the node of the path extension to the destination network node.
- the path extension is not appended to the explored path, thereby ensuring that lowest cost paths 918 contains only loopless paths between the source network node and the destination network node.
- the map that excludes the explored path may be predetermined (e.g., stored in network nodes 910 and data links 912 , received via input 906 , etc.).
- the map that omits the explored path may be determined by path analyzer 916 , as necessary (e.g., as part of the determination as to whether a path extension is valid).
- Path analyzer 916 generates lowest cost paths 918 and stores them within memory 904 .
- Lowest cost paths 918 includes a plurality of paths from the source network node to the destination network node that are determined by path analyzer 916 to have the lowest associated costs.
- the number of paths between the source and destination in lowest cost paths 918 may be controlled by one or more values in parameters 920 .
- lowest cost paths 918 may include the five lowest cost paths between the source and destination network nodes.
- lowest cost paths 918 may include sets of other lowest costs paths between different source and/or destination network nodes.
- lowest cost paths 918 may include a set of lowest cost paths from a source network node to a first destination network node and a set of lowest cost paths from the source network node to a different destination network node.
- Lowest cost paths 918 may also be used to make routing decisions in the data network.
- processing circuit 900 may provide lowest cost paths 918 to routers or other devices in a data network via output 908 .
- processing circuit 900 may use lowest cost paths 918 to determine where data is to be sent from processing circuit 900 .
- processing circuit 900 may receive a request via input 906 to send data to another device via output 908 and utilize lowest cost paths 918 to determine how the data is to be sent to the other device.
- Implementations of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry, or in computer software, firmware, or hardware, including the structures disclosed in this specification and their structural equivalents, or in combinations of one or more of them.
- Implementations of the subject matter described in this specification can be implemented as one or more computer programs, i.e., one or more modules of computer program instructions, encoded on one or more computer storage medium for execution by, or to control the operation of, data processing apparatus.
- the program instructions can be encoded on an artificially-generated propagated signal, e.g., a machine-generated electrical, optical, or electromagnetic signal, that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus.
- a computer storage medium can be, or be included in, a computer-readable storage device, a computer-readable storage substrate, a random or serial access memory array or device, or a combination of one or more of them.
- a computer storage medium is not a propagated signal, a computer storage medium can be a source or destination of computer program instructions encoded in an artificially-generated propagated signal.
- the computer storage medium can also be, or be included in, one or more separate components or media (e.g., multiple CDs, disks, or other storage devices). Accordingly, the computer storage medium may be tangible and non-transitory.
- the operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer-readable storage devices or received from other sources.
- client or “server” include all kinds of apparatus, devices, and machines for processing data, including by way of example a programmable processor, a computer, a system on a chip, or multiple ones, or combinations, of the foregoing.
- the apparatus can include special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application-specific integrated circuit).
- the apparatus can also include, in addition to hardware, code that creates an execution environment for the computer program in question, e.g., code that constitutes processor firmware, a protocol stack, a database management system, an operating system, a cross-platform runtime environment, a virtual machine, or a combination of one or more of them.
- the apparatus and execution environment can realize various different computing model infrastructures, such as web services, distributed computing and grid computing infrastructures.
- a computer program (also known as a program, software, software application, script, or code) can be written in any form of programming language, including compiled or interpreted languages, declarative or procedural languages, and it can be deployed in any form, including as a stand-alone program or as a module, component, subroutine, object, or other unit suitable for use in a computing environment.
- a computer program may, but need not, correspond to a file in a file system.
- a program can be stored in a portion of a file that holds other programs or data (e.g., one or more scripts stored in a markup language document), in a single file dedicated to the program in question, or in multiple coordinated files (e.g., files that store one or more modules, sub-programs, or portions of code).
- a computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.
- the processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output.
- the processes and logic flows can also be performed by, and apparatus can also be implemented as, special purpose logic circuitry, e.g., an FPGA (field programmable gate array) or an ASIC (application specific integrated circuit).
- processors suitable for the execution of a computer program include, by way of example, both general and special purpose microprocessors, and any one or more processors of any kind of digital computer.
- a processor will receive instructions and data from a read-only memory or a random access memory or both.
- the essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data.
- a computer will also include, or be operatively coupled to receive data from or transfer data to, or both, one or more mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- mass storage devices for storing data, e.g., magnetic, magneto-optical disks, or optical disks.
- a computer need not have such devices.
- a computer can be embedded in another device, e.g., a mobile telephone, a personal digital assistant (PDA), a mobile audio or video player, a game console, a Global Positioning System (GPS) receiver, or a portable storage device (e.g., a universal serial bus (USB) flash drive), to name just a few.
- Devices suitable for storing computer program instructions and data include all forms of non-volatile memory, media and memory devices, including by way of example semiconductor memory devices, e.g., EPROM, EEPROM, and flash memory devices; magnetic disks, e.g., internal hard disks or removable disks; magneto-optical disks; and CD-ROM and DVD-ROM disks.
- the processor and the memory can be supplemented by, or incorporated in, special purpose logic circuitry.
- implementations of the subject matter described in this specification can be implemented on a computer having a display device, e.g., a CRT (cathode ray tube), LCD (liquid crystal display), OLED (organic light emitting diode), TFT (thin-film transistor), or other flexible configuration, or any other monitor for displaying information to the user and a keyboard, a pointing device, e.g., a mouse, trackball, etc., or a touch screen, touch pad, etc., by which the user can provide input to the computer.
- a display device e.g., a CRT (cathode ray tube), LCD (liquid crystal display), OLED (organic light emitting diode), TFT (thin-film transistor), or other flexible configuration, or any other monitor for displaying information to the user and a keyboard, a pointing device, e.g., a mouse, trackball, etc., or a touch screen, touch pad, etc., by which the user can provide input to the computer.
- a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user; for example, by sending web pages to a web browser on a user's client device in response to requests received from the web browser.
- Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back-end component, e.g., as a data server, or that includes a middleware component, e.g., an application server, or that includes a front-end component, e.g., a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification, or any combination of one or more such back-end, middleware, or front-end components.
- the components of the system can be interconnected by any form or medium of digital data communication, e.g., a communication network.
- Examples of communication networks include a local area network (“LAN”) and a wide area network (“WAN”), an inter-network (e.g., the Internet), and peer-to-peer networks (e.g., ad hoc peer-to-peer networks).
- LAN local area network
- WAN wide area network
- inter-network e.g., the Internet
- peer-to-peer networks e.g., ad hoc peer-to-peer networks.
Abstract
Description
c i *=c i +d(e — dst)−d(e — src)
where ci is the original cost of the data link, e_src is the tail of the data link, e_dst is the head of the data link (i.e., data flows from the tail to the head of the data link), d(e_dst) is the overall lowest cost to the destination from the tail of the data link, and d(e_src) is the overall lowest cost to the destination from the head of the data link. Both d(e_dst) and d(e_scr) may be determined, for example, using the overall lowest cost associated with the respective nodes of the data link in
c 2 *=c 2+(c 4 +c c +c 7 +c 9)−(c 1 +c 3 +c 6 +c 7 +c 9)=c 2 +c 4 −c 1 −c 3
Such a cost value allows the added cost of transmitting data over data link 122 instead of data link 120 to be quantified.
TABLE 1 | ||||
Path Deviation | Direction of Data Flow | Updated Cost | ||
data link 122 | | c2 + c4 − c1− c3 | ||
| | c5 + c3 − c4 | ||
| | c8 + c10 − c7 − c9 | ||
| | c11 + c9 − c10 | ||
In addition to the path deviations listed in Table 1, more path deviations may exist if any of data links 120-140 in
Claims (20)
Priority Applications (1)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/302,952 US8630185B1 (en) | 2011-09-15 | 2011-11-22 | Optimizing traffic in a data network |
Applications Claiming Priority (2)
Application Number | Priority Date | Filing Date | Title |
---|---|---|---|
US13/233,362 US8699350B1 (en) | 2011-09-15 | 2011-09-15 | Optimizing traffic in a data network |
US13/302,952 US8630185B1 (en) | 2011-09-15 | 2011-11-22 | Optimizing traffic in a data network |
Related Parent Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/233,362 Continuation-In-Part US8699350B1 (en) | 2011-09-15 | 2011-09-15 | Optimizing traffic in a data network |
Publications (1)
Publication Number | Publication Date |
---|---|
US8630185B1 true US8630185B1 (en) | 2014-01-14 |
Family
ID=49886101
Family Applications (1)
Application Number | Title | Priority Date | Filing Date |
---|---|---|---|
US13/302,952 Active 2032-01-01 US8630185B1 (en) | 2011-09-15 | 2011-11-22 | Optimizing traffic in a data network |
Country Status (1)
Country | Link |
---|---|
US (1) | US8630185B1 (en) |
Cited By (2)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150372838A1 (en) * | 2012-12-21 | 2015-12-24 | Thales | Network for Transmitting Information with at Least Two Loops |
US20220091829A1 (en) * | 2020-09-18 | 2022-03-24 | International Business Machines Corporation | Application migration using cost-aware code dependency graph |
Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050031339A1 (en) * | 2003-07-11 | 2005-02-10 | Chumning Qiao | Efficient trap avoidance and shared protection method in survivable networks with shared risk link groups and a survivable network |
US20050060429A1 (en) | 2003-09-12 | 2005-03-17 | Laurent Massoulie | Self-organizing overlay networks |
US20050088965A1 (en) * | 2003-10-03 | 2005-04-28 | Avici Systems, Inc. | Rapid alternate paths for network destinations |
US20060268749A1 (en) | 2005-05-31 | 2006-11-30 | Rahman Shahriar I | Multiple wireless spanning tree protocol for use in a wireless mesh network |
US20070086361A1 (en) | 2005-10-05 | 2007-04-19 | Nortel Networks Limited | Provider link state bridging |
US20070263592A1 (en) * | 2006-03-30 | 2007-11-15 | Sugam Agarwal | Method and apparatus for improved routing in connectionless networks |
US7349350B2 (en) * | 2003-09-23 | 2008-03-25 | Intel Corporation | Determining two node-disjoint paths using on-demand flooding |
US20080168510A1 (en) * | 2007-01-10 | 2008-07-10 | At&T Knowledge Ventures, Lp | System and method of routing video data |
US20080279101A1 (en) * | 2007-05-07 | 2008-11-13 | Microsoft Corporation | Context-Based Routing in Multi-hop Networks |
US20100331002A1 (en) * | 2006-06-28 | 2010-12-30 | At&T Intellectual Property I, L.P. | Method and apparatus for improving network performance in a communication system |
-
2011
- 2011-11-22 US US13/302,952 patent/US8630185B1/en active Active
Patent Citations (10)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20050031339A1 (en) * | 2003-07-11 | 2005-02-10 | Chumning Qiao | Efficient trap avoidance and shared protection method in survivable networks with shared risk link groups and a survivable network |
US20050060429A1 (en) | 2003-09-12 | 2005-03-17 | Laurent Massoulie | Self-organizing overlay networks |
US7349350B2 (en) * | 2003-09-23 | 2008-03-25 | Intel Corporation | Determining two node-disjoint paths using on-demand flooding |
US20050088965A1 (en) * | 2003-10-03 | 2005-04-28 | Avici Systems, Inc. | Rapid alternate paths for network destinations |
US20060268749A1 (en) | 2005-05-31 | 2006-11-30 | Rahman Shahriar I | Multiple wireless spanning tree protocol for use in a wireless mesh network |
US20070086361A1 (en) | 2005-10-05 | 2007-04-19 | Nortel Networks Limited | Provider link state bridging |
US20070263592A1 (en) * | 2006-03-30 | 2007-11-15 | Sugam Agarwal | Method and apparatus for improved routing in connectionless networks |
US20100331002A1 (en) * | 2006-06-28 | 2010-12-30 | At&T Intellectual Property I, L.P. | Method and apparatus for improving network performance in a communication system |
US20080168510A1 (en) * | 2007-01-10 | 2008-07-10 | At&T Knowledge Ventures, Lp | System and method of routing video data |
US20080279101A1 (en) * | 2007-05-07 | 2008-11-13 | Microsoft Corporation | Context-Based Routing in Multi-hop Networks |
Non-Patent Citations (6)
Title |
---|
David Eppstein, "Finding the k Shortest Paths", Department of Information and Computer Science, Mar. 31, 1997, pp. 1-26. |
David Eppstein, "Finding the k Shortest Paths", Department of Information and Computer Science, Tech. Report 94-26, May 31, 1994, 23 pages. |
Jimenez et al., "A Lazy Version of Eppstein's K Shortest Paths Algorithm", 2003, pp. 179-191. |
Jin Y. Yen, "Finding the K Shortest Loopless Paths in a Network," Management Science, vol. 17, No. 11., Jul. 1971, pp. 712-716. |
Tam et al., "Trimming the Multipath for Efficient Dynamic Routing", Department of Electrical and Computer Engineering, Sep. 5, 2011, 9 pages. |
US Office Action in U.S. Appl. No. 13/233,362 dated Jun. 19, 2013. |
Cited By (4)
Publication number | Priority date | Publication date | Assignee | Title |
---|---|---|---|---|
US20150372838A1 (en) * | 2012-12-21 | 2015-12-24 | Thales | Network for Transmitting Information with at Least Two Loops |
US9774472B2 (en) * | 2012-12-21 | 2017-09-26 | Thales | Network for transmitting information with at least two loops |
US20220091829A1 (en) * | 2020-09-18 | 2022-03-24 | International Business Machines Corporation | Application migration using cost-aware code dependency graph |
US11714615B2 (en) * | 2020-09-18 | 2023-08-01 | International Business Machines Corporation | Application migration using cost-aware code dependency graph |
Similar Documents
Publication | Publication Date | Title |
---|---|---|
US8699350B1 (en) | Optimizing traffic in a data network | |
US8897141B2 (en) | Network system and routing method | |
US10404600B2 (en) | Mechanism and apparatus for path protection when using compressed segment routing label stacks | |
US9379971B2 (en) | Method and apparatus for determining paths between source/destination pairs | |
US8428070B2 (en) | Router, management apparatus, and routing control program | |
CN104969518B (en) | Method for routing data and device | |
US9628391B2 (en) | Recursive load balancing in a loop-free routing topology using routing arcs | |
US20150236945A1 (en) | System and methods for improved network routing | |
US7693061B2 (en) | Data networking | |
US9282031B2 (en) | Network system and routing method | |
US20140207376A1 (en) | Computer-implemented systems and methods for planning a route | |
CN109314652A (en) | Network for formance measuring method and device | |
US9998550B2 (en) | Network based service composition with variable conditions | |
JP2010166594A (en) | Method and system to perform traffic engineering in metric-routed network | |
US8085688B2 (en) | Methods and systems for determining a network data path | |
Sharma et al. | Service level agreement and energy cooperative cyber physical system for quickest healthcare services | |
CN103891217A (en) | Service assurance using network measurement triggers | |
US20140003224A1 (en) | Deterministic network failure detection | |
US8630185B1 (en) | Optimizing traffic in a data network | |
Li et al. | History is a mirror to the future: Best-effort approximate complex event matching with insufficient resources | |
TWI491204B (en) | Routing method in asymmetric networks | |
US11706146B1 (en) | Directing network traffic using local routing decisions with a global overview | |
US20150138957A1 (en) | Computing forwarding tables for link failures | |
US9015340B2 (en) | Splitting a network traffic flow | |
Berman et al. | Optimal search path for service in the presence of disruptions |
Legal Events
Date | Code | Title | Description |
---|---|---|---|
AS | Assignment |
Owner name: GOOGLE INC., CALIFORNIAFree format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:KUMAR, ALOK;FRUMKIN, MICHAEL;REEL/FRAME:027274/0179Effective date: 20111117 |
|
STCF | Information on status: patent grant |
Free format text: PATENTED CASE |
|
FPAY | Fee payment |
Year of fee payment: 4 |
|
AS | Assignment |
Owner name: GOOGLE LLC, CALIFORNIAFree format text: CHANGE OF NAME;ASSIGNOR:GOOGLE INC.;REEL/FRAME:044101/0299Effective date: 20170929 |
|
MAFP | Maintenance fee payment |
Free format text: PAYMENT OF MAINTENANCE FEE, 8TH YEAR, LARGE ENTITY (ORIGINAL EVENT CODE: M1552); ENTITY STATUS OF PATENT OWNER: LARGE ENTITYYear of fee payment: 8 |